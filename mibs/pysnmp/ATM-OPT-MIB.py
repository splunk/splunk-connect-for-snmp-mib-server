#
# PySNMP MIB module ATM-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATM-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:15:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, IpAddress, iso, MibIdentifier, Counter64, ModuleIdentity, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, enterprises, TimeTicks, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "IpAddress", "iso", "MibIdentifier", "Counter64", "ModuleIdentity", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "enterprises", "TimeTicks", "ObjectIdentity", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCTATMPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35), )
if mibBuilder.loadTexts: cdx6500PPCTATMPortTable.setStatus('mandatory')
cdx6500PPCTATMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmPCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTATMPortEntry.setStatus('mandatory')
atmPCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgPortNumber.setStatus('mandatory')
atmPCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57))).clone(namedValues=NamedValues(("atm", 57)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgPortType.setStatus('mandatory')
atmPCfgMaxVPIRange = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgMaxVPIRange.setStatus('deprecated')
atmPCfgMaxVCIRange = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgMaxVCIRange.setStatus('deprecated')
atmPCfgLinkAssuranceTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgLinkAssuranceTimer.setStatus('deprecated')
atmPCfgLinkAssuranceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgLinkAssuranceCount.setStatus('deprecated')
atmPCfgCCActDeactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgCCActDeactTimer.setStatus('deprecated')
atmPCfgCCActDeactCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgCCActDeactCount.setStatus('deprecated')
atmPCfgVCCTrafficPrioritization = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 35, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("sequence", 2), ("priority", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPCfgVCCTrafficPrioritization.setStatus('mandatory')
cdx6500SPCTATMStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10), )
if mibBuilder.loadTexts: cdx6500SPCTATMStationTable.setStatus('mandatory')
cdx6500SPCTATMStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmSCfgPortNumber"), (0, "ATM-OPT-MIB", "atmSCfgStnNumber"))
if mibBuilder.loadTexts: cdx6500SPCTATMStationEntry.setStatus('mandatory')
atmSCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgPortNumber.setStatus('mandatory')
atmSCfgStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgStnNumber.setStatus('mandatory')
atmSCfgVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgVPI.setStatus('mandatory')
atmSCfgVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgVCI.setStatus('mandatory')
atmSCfgLinkAssuranceMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("loopback", 2), ("enabled", 3), ("nogotiate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgLinkAssuranceMethod.setStatus('mandatory')
atmSCfgTrafficServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ubr", 1), ("cbr", 2), ("vbr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgTrafficServiceCategory.setStatus('mandatory')
atmSCfgPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgPeakCellRate.setStatus('mandatory')
atmSCfgVBRTrafficShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("single", 2), ("dual", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgVBRTrafficShaping.setStatus('mandatory')
atmSCfgVCCPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgVCCPriorityLevel.setStatus('mandatory')
atmSCfgSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 30000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgSustainableCellRate.setStatus('deprecated')
atmSCfgMaximumBustSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSCfgMaximumBustSize.setStatus('deprecated')
cdx6500PPSTATMPStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36))
cdx6500PPSTATMPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 1), )
if mibBuilder.loadTexts: cdx6500PPSTATMPortTable.setStatus('mandatory')
cdx6500PPSTATMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 1, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmPStatsPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTATMPortEntry.setStatus('mandatory')
atmPStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsPortNumber.setStatus('mandatory')
atmPStatsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(57))).clone(namedValues=NamedValues(("atm", 57)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsPortType.setStatus('mandatory')
atmPStatsPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsPortStatus.setStatus('mandatory')
cdx6500PPSTATMDataSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2), )
if mibBuilder.loadTexts: cdx6500PPSTATMDataSummaryTable.setStatus('mandatory')
cdx6500PPSTATMDataSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmDataSummPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTATMDataSummaryEntry.setStatus('mandatory')
atmDataSummPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDataSummPortNumber.setStatus('mandatory')
atmPStatsOctetsInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsOctetsInTotal.setStatus('mandatory')
atmPStatsOctetsOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsOctetsOutTotal.setStatus('mandatory')
atmPStatsOctetsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsOctetsInPerSec.setStatus('mandatory')
atmPStatsOctetsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsOctetsOutPerSec.setStatus('mandatory')
atmPStatsFramesInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsFramesInTotal.setStatus('mandatory')
atmPStatsFramesOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsFramesOutTotal.setStatus('mandatory')
atmPStatsFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsFramesInPerSec.setStatus('mandatory')
atmPStatsFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsFramesOutPerSec.setStatus('mandatory')
atmPStatsOAMCellInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsOAMCellInTotal.setStatus('mandatory')
atmPStatsOAMCellOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsOAMCellOutTotal.setStatus('mandatory')
atmPStatsATMCellInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsATMCellInTotal.setStatus('mandatory')
atmPStatsATMCellOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsATMCellOutTotal.setStatus('mandatory')
atmPStatsErrorCellCor = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsErrorCellCor.setStatus('mandatory')
atmPStatsErrorCellDis = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsErrorCellDis.setStatus('mandatory')
atmPStatsCellDelineateState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsCellDelineateState.setStatus('mandatory')
atmPStatsCellStateChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsCellStateChangeTime.setStatus('mandatory')
atmPStatsDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 36, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPStatsDiscardedFrames.setStatus('mandatory')
cdx6500SPSTATMSStatsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11))
atmSGenStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1), )
if mibBuilder.loadTexts: atmSGenStatsTable.setStatus('mandatory')
cdx6500atmSGenStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmSGenStatsPortNumber"), (0, "ATM-OPT-MIB", "atmSGenStatsStnNumber"))
if mibBuilder.loadTexts: cdx6500atmSGenStatsEntry.setStatus('mandatory')
atmSGenStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSGenStatsPortNumber.setStatus('mandatory')
atmSGenStatsStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSGenStatsStnNumber.setStatus('mandatory')
atmSStatsStnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsStnStatus.setStatus('mandatory')
atmSStatsVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsVPI.setStatus('mandatory')
atmSStatsVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsVCI.setStatus('mandatory')
atmSStatsAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsAdmState.setStatus('mandatory')
atmSStatsPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsPeer.setStatus('mandatory')
atmSStatsAdjacent = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsAdjacent.setStatus('mandatory')
atmSDataSummaryStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2), )
if mibBuilder.loadTexts: atmSDataSummaryStatsTable.setStatus('mandatory')
cdx6500atmSDataSummaryStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmSDataSummStatsPortNumber"), (0, "ATM-OPT-MIB", "atmSDataSummStatsStnNumber"))
if mibBuilder.loadTexts: cdx6500atmSDataSummaryStatsEntry.setStatus('mandatory')
atmSDataSummStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSDataSummStatsPortNumber.setStatus('mandatory')
atmSDataSummStatsStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSDataSummStatsStnNumber.setStatus('mandatory')
atmSStatsOctetsInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsOctetsInTotal.setStatus('mandatory')
atmSStatsOctetsOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsOctetsOutTotal.setStatus('mandatory')
atmSStatsFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsFrameInTotal.setStatus('mandatory')
atmSStatsFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsFrameOutTotal.setStatus('mandatory')
atmSStatsF5CellInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsF5CellInTotal.setStatus('mandatory')
atmSStatsF5CellOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsF5CellOutTotal.setStatus('mandatory')
atmSStatsAISCellInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsAISCellInTotal.setStatus('mandatory')
atmSStatsRDICellInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsRDICellInTotal.setStatus('mandatory')
atmSStatsRDICellOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsRDICellOutTotal.setStatus('mandatory')
atmSStatsCCCellInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsCCCellInTotal.setStatus('mandatory')
atmSStatsCCCellOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsCCCellOutTotal.setStatus('mandatory')
atmSStatsVCFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsVCFailure.setStatus('mandatory')
atmSStatsVCAssuranceState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsVCAssuranceState.setStatus('mandatory')
atmSStatsOctetsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsOctetsInPerSec.setStatus('mandatory')
atmSStatsOctetsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsOctetsOutPerSec.setStatus('mandatory')
atmSStatsFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsFramesInPerSec.setStatus('mandatory')
atmSStatsFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsFramesOutPerSec.setStatus('mandatory')
atmSStatsDiscardedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsDiscardedFrames.setStatus('mandatory')
atmSStatsCIBitInForIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsCIBitInForIWF.setStatus('mandatory')
atmSStatsCIBitOutForIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsCIBitOutForIWF.setStatus('mandatory')
atmSStatsCLPBitInForIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsCLPBitInForIWF.setStatus('mandatory')
atmSStatsCLPBitOutForIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsCLPBitOutForIWF.setStatus('mandatory')
atmSStatsUUBitInForIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsUUBitInForIWF.setStatus('mandatory')
atmSStatsUUBitOutForIWF = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 11, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSStatsUUBitOutForIWF.setStatus('mandatory')
cdx6500ContATMTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24))
cdx6500ATMPContTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 1), )
if mibBuilder.loadTexts: cdx6500ATMPContTable.setStatus('mandatory')
cdx6500ATMPContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 1, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmPContPortNumber"))
if mibBuilder.loadTexts: cdx6500ATMPContEntry.setStatus('mandatory')
atmPContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: atmPContPortNumber.setStatus('mandatory')
atmPContPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("resetstats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: atmPContPortControl.setStatus('mandatory')
cdx6500ATMSContTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 2), )
if mibBuilder.loadTexts: cdx6500ATMSContTable.setStatus('mandatory')
cdx6500ATMSContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 2, 1), ).setIndexNames((0, "ATM-OPT-MIB", "atmSContPortNumber"), (0, "ATM-OPT-MIB", "atmSContStnNumber"))
if mibBuilder.loadTexts: cdx6500ATMSContEntry.setStatus('mandatory')
atmSContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: atmSContPortNumber.setStatus('mandatory')
atmSContStnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: atmSContStnNumber.setStatus('mandatory')
atmSContStnControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("resetstats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: atmSContStnControl.setStatus('mandatory')
mibBuilder.exportSymbols("ATM-OPT-MIB", cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, atmSStatsCLPBitInForIWF=atmSStatsCLPBitInForIWF, atmPStatsErrorCellCor=atmPStatsErrorCellCor, atmPStatsFramesInTotal=atmPStatsFramesInTotal, atmSGenStatsStnNumber=atmSGenStatsStnNumber, atmSDataSummaryStatsTable=atmSDataSummaryStatsTable, atmSStatsOctetsOutTotal=atmSStatsOctetsOutTotal, cdx6500Controls=cdx6500Controls, atmSStatsFrameInTotal=atmSStatsFrameInTotal, cdx6500ATMSContEntry=cdx6500ATMSContEntry, atmSCfgTrafficServiceCategory=atmSCfgTrafficServiceCategory, atmSStatsCIBitInForIWF=atmSStatsCIBitInForIWF, atmPCfgPortType=atmPCfgPortType, cdx6500atmSDataSummaryStatsEntry=cdx6500atmSDataSummaryStatsEntry, cdx6500atmSGenStatsEntry=cdx6500atmSGenStatsEntry, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500SPCTATMStationEntry=cdx6500SPCTATMStationEntry, atmPStatsCellDelineateState=atmPStatsCellDelineateState, atmSContPortNumber=atmSContPortNumber, atmPStatsOctetsInTotal=atmPStatsOctetsInTotal, atmPCfgMaxVPIRange=atmPCfgMaxVPIRange, atmSStatsRDICellOutTotal=atmSStatsRDICellOutTotal, cdx6500Configuration=cdx6500Configuration, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, atmPStatsCellStateChangeTime=atmPStatsCellStateChangeTime, cdx6500=cdx6500, cdx6500PPSTATMPortEntry=cdx6500PPSTATMPortEntry, cdx6500PPSTATMDataSummaryEntry=cdx6500PPSTATMDataSummaryEntry, atmPCfgCCActDeactCount=atmPCfgCCActDeactCount, cdx6500SPCTATMStationTable=cdx6500SPCTATMStationTable, atmSStatsF5CellOutTotal=atmSStatsF5CellOutTotal, cdx6500PPSTATMPStatsTable=cdx6500PPSTATMPStatsTable, atmSStatsCCCellInTotal=atmSStatsCCCellInTotal, atmSDataSummStatsPortNumber=atmSDataSummStatsPortNumber, atmSGenStatsPortNumber=atmSGenStatsPortNumber, cdx6500PPSTATMDataSummaryTable=cdx6500PPSTATMDataSummaryTable, atmSStatsAISCellInTotal=atmSStatsAISCellInTotal, atmPContPortControl=atmPContPortControl, atmSCfgVPI=atmSCfgVPI, codex=codex, atmSStatsDiscardedFrames=atmSStatsDiscardedFrames, atmPStatsPortType=atmPStatsPortType, cdx6500Statistics=cdx6500Statistics, atmPStatsOctetsOutPerSec=atmPStatsOctetsOutPerSec, atmPStatsDiscardedFrames=atmPStatsDiscardedFrames, atmSStatsVCFailure=atmSStatsVCFailure, atmDataSummPortNumber=atmDataSummPortNumber, atmSStatsAdjacent=atmSStatsAdjacent, atmSStatsOctetsInTotal=atmSStatsOctetsInTotal, atmPStatsATMCellInTotal=atmPStatsATMCellInTotal, atmSStatsOctetsInPerSec=atmSStatsOctetsInPerSec, atmSContStnNumber=atmSContStnNumber, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500PPCTATMPortTable=cdx6500PPCTATMPortTable, atmPStatsFramesOutPerSec=atmPStatsFramesOutPerSec, atmSStatsCLPBitOutForIWF=atmSStatsCLPBitOutForIWF, atmPStatsErrorCellDis=atmPStatsErrorCellDis, atmSStatsFrameOutTotal=atmSStatsFrameOutTotal, atmSStatsRDICellInTotal=atmSStatsRDICellInTotal, atmSStatsVPI=atmSStatsVPI, atmSGenStatsTable=atmSGenStatsTable, atmSCfgVCI=atmSCfgVCI, atmSStatsPeer=atmSStatsPeer, cdx6500ATMPContEntry=cdx6500ATMPContEntry, atmSDataSummStatsStnNumber=atmSDataSummStatsStnNumber, atmSStatsCIBitOutForIWF=atmSStatsCIBitOutForIWF, atmSStatsFramesOutPerSec=atmSStatsFramesOutPerSec, atmPCfgLinkAssuranceCount=atmPCfgLinkAssuranceCount, atmPStatsOAMCellInTotal=atmPStatsOAMCellInTotal, atmPStatsPortNumber=atmPStatsPortNumber, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, atmSStatsCCCellOutTotal=atmSStatsCCCellOutTotal, atmSCfgMaximumBustSize=atmSCfgMaximumBustSize, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, atmPStatsOctetsInPerSec=atmPStatsOctetsInPerSec, atmSStatsStnStatus=atmSStatsStnStatus, atmSCfgVBRTrafficShaping=atmSCfgVBRTrafficShaping, atmSContStnControl=atmSContStnControl, atmSCfgPeakCellRate=atmSCfgPeakCellRate, atmSCfgSustainableCellRate=atmSCfgSustainableCellRate, cdx6500PPCTATMPortEntry=cdx6500PPCTATMPortEntry, atmSStatsOctetsOutPerSec=atmSStatsOctetsOutPerSec, atmPStatsATMCellOutTotal=atmPStatsATMCellOutTotal, atmPStatsFramesOutTotal=atmPStatsFramesOutTotal, atmPCfgCCActDeactTimer=atmPCfgCCActDeactTimer, atmSStatsVCAssuranceState=atmSStatsVCAssuranceState, atmPCfgLinkAssuranceTimer=atmPCfgLinkAssuranceTimer, cdx6500ATMSContTable=cdx6500ATMSContTable, atmSStatsAdmState=atmSStatsAdmState, cdx6500ContATMTable=cdx6500ContATMTable, cdxProductSpecific=cdxProductSpecific, atmPContPortNumber=atmPContPortNumber, cdx6500SPSTATMSStatsTable=cdx6500SPSTATMSStatsTable, atmPCfgVCCTrafficPrioritization=atmPCfgVCCTrafficPrioritization, atmPStatsFramesInPerSec=atmPStatsFramesInPerSec, atmPStatsOAMCellOutTotal=atmPStatsOAMCellOutTotal, atmSStatsF5CellInTotal=atmSStatsF5CellInTotal, cdx6500PPSTATMPortTable=cdx6500PPSTATMPortTable, atmPCfgPortNumber=atmPCfgPortNumber, cdx6500ATMPContTable=cdx6500ATMPContTable, atmSCfgLinkAssuranceMethod=atmSCfgLinkAssuranceMethod, atmPStatsPortStatus=atmPStatsPortStatus, atmPStatsOctetsOutTotal=atmPStatsOctetsOutTotal, atmSStatsUUBitOutForIWF=atmSStatsUUBitOutForIWF, atmSStatsVCI=atmSStatsVCI, atmSCfgVCCPriorityLevel=atmSCfgVCCPriorityLevel, atmSCfgStnNumber=atmSCfgStnNumber, atmSCfgPortNumber=atmSCfgPortNumber, DisplayString=DisplayString, atmPCfgMaxVCIRange=atmPCfgMaxVCIRange, atmSStatsFramesInPerSec=atmSStatsFramesInPerSec, atmSStatsUUBitInForIWF=atmSStatsUUBitInForIWF)
