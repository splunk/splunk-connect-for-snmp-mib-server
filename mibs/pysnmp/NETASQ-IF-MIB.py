#
# PySNMP MIB module NETASQ-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETASQ-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:08:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ntqif, = mibBuilder.importSymbols("NETASQ-SMI-MIB", "ntqif")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, ObjectIdentity, Counter32, MibIdentifier, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, Counter64, Gauge32, iso, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "ObjectIdentity", "Counter32", "MibIdentifier", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "Counter64", "Gauge32", "iso", "TimeTicks", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ntqifTable = MibTable((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1), )
if mibBuilder.loadTexts: ntqifTable.setStatus('current')
ntqifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1), ).setIndexNames((0, "NETASQ-IF-MIB", "ntqifIndex"))
if mibBuilder.loadTexts: ntqifEntry.setStatus('current')
ntqifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifIndex.setStatus('current')
ntqifUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifUserName.setStatus('current')
ntqifName = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifName.setStatus('current')
ntqifAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifAddr.setStatus('current')
ntqifMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifMask.setStatus('current')
ntqifType = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifType.setStatus('current')
ntqifColor = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifColor.setStatus('current')
ntqifMacThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifMacThroughput.setStatus('current')
ntqifCurThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifCurThroughput.setStatus('current')
ntqifMaxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifMaxThroughput.setStatus('current')
ntqifPktAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifPktAccepted.setStatus('current')
ntqifPktBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifPktBlocked.setStatus('current')
ntqifPktFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifPktFragmented.setStatus('current')
ntqifPktTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifPktTcp.setStatus('current')
ntqifPktUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifPktUdp.setStatus('current')
ntqifPktIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifPktIcmp.setStatus('current')
ntqifTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifTotalBytes.setStatus('current')
ntqifTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifTcpBytes.setStatus('current')
ntqifUdpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifUdpBytes.setStatus('current')
ntqifIcmpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifIcmpBytes.setStatus('current')
ntqifTcpConn = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifTcpConn.setStatus('current')
ntqifUdpConn = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifUdpConn.setStatus('current')
ntqifTcpConnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifTcpConnCount.setStatus('current')
ntqifUdpConnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifUdpConnCount.setStatus('current')
ntqifInCurThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifInCurThroughput.setStatus('current')
ntqifOutCurThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifOutCurThroughput.setStatus('current')
ntqifInMaxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifInMaxThroughput.setStatus('current')
ntqifOutMaxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifOutMaxThroughput.setStatus('current')
ntqifInTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifInTotalBytes.setStatus('current')
ntqifOutTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifOutTotalBytes.setStatus('current')
ntqifInTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifInTcpBytes.setStatus('current')
ntqifOutTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifOutTcpBytes.setStatus('current')
ntqifInUdpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifInUdpBytes.setStatus('current')
ntqifOutUdpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifOutUdpBytes.setStatus('current')
ntqifInIcmpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifInIcmpBytes.setStatus('current')
ntqifIOutIcmpBytes = MibScalar((1, 3, 6, 1, 4, 1, 11256, 1, 4, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntqifIOutIcmpBytes.setStatus('current')
mibBuilder.exportSymbols("NETASQ-IF-MIB", ntqifPktFragmented=ntqifPktFragmented, ntqifIOutIcmpBytes=ntqifIOutIcmpBytes, ntqifTotalBytes=ntqifTotalBytes, ntqifOutCurThroughput=ntqifOutCurThroughput, ntqifUdpConnCount=ntqifUdpConnCount, ntqifMask=ntqifMask, ntqifIndex=ntqifIndex, ntqifTcpConn=ntqifTcpConn, ntqifInUdpBytes=ntqifInUdpBytes, ntqifUdpBytes=ntqifUdpBytes, ntqifPktIcmp=ntqifPktIcmp, ntqifAddr=ntqifAddr, ntqifMacThroughput=ntqifMacThroughput, ntqifTcpBytes=ntqifTcpBytes, ntqifTable=ntqifTable, ntqifOutUdpBytes=ntqifOutUdpBytes, ntqifUserName=ntqifUserName, ntqifPktAccepted=ntqifPktAccepted, ntqifPktTcp=ntqifPktTcp, ntqifUdpConn=ntqifUdpConn, ntqifOutTcpBytes=ntqifOutTcpBytes, ntqifInCurThroughput=ntqifInCurThroughput, ntqifInTotalBytes=ntqifInTotalBytes, ntqifIcmpBytes=ntqifIcmpBytes, ntqifMaxThroughput=ntqifMaxThroughput, ntqifName=ntqifName, ntqifEntry=ntqifEntry, ntqifCurThroughput=ntqifCurThroughput, ntqifPktUdp=ntqifPktUdp, ntqifPktBlocked=ntqifPktBlocked, ntqifInMaxThroughput=ntqifInMaxThroughput, ntqifInIcmpBytes=ntqifInIcmpBytes, ntqifOutMaxThroughput=ntqifOutMaxThroughput, ntqifInTcpBytes=ntqifInTcpBytes, ntqifOutTotalBytes=ntqifOutTotalBytes, ntqifType=ntqifType, ntqifTcpConnCount=ntqifTcpConnCount, ntqifColor=ntqifColor)
