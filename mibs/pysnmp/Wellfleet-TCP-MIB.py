#
# PySNMP MIB module Wellfleet-TCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-TCP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:35:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Gauge32, Bits, Unsigned32, ModuleIdentity, NotificationType, Integer32, iso, TimeTicks, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "Bits", "Unsigned32", "ModuleIdentity", "NotificationType", "Integer32", "iso", "TimeTicks", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfTcpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfTcpGroup")
wfTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1))
wfTcpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTcpDelete.setStatus('mandatory')
wfTcpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTcpDisable.setStatus('mandatory')
wfTcpState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpState.setStatus('mandatory')
wfTcpRtoAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("constant", 2), ("rsre", 3), ("vanj", 4))).clone('vanj')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpRtoAlgorithm.setStatus('mandatory')
wfTcpRtoMin = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 15000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTcpRtoMin.setStatus('mandatory')
wfTcpRtoMax = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15000, 240000)).clone(240000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTcpRtoMax.setStatus('mandatory')
wfTcpMaxConn = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpMaxConn.setStatus('mandatory')
wfTcpActiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpActiveOpens.setStatus('mandatory')
wfTcpPassiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpPassiveOpens.setStatus('mandatory')
wfTcpAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpAttemptFails.setStatus('mandatory')
wfTcpEstabResets = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpEstabResets.setStatus('mandatory')
wfTcpCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpCurrEstab.setStatus('mandatory')
wfTcpInSegs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpInSegs.setStatus('mandatory')
wfTcpOutSegs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpOutSegs.setStatus('mandatory')
wfTcpRetransSegs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpRetransSegs.setStatus('mandatory')
wfTcpInErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpInErrs.setStatus('mandatory')
wfTcpOutRsts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpOutRsts.setStatus('mandatory')
wfTcpMaxWindow = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 65535)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTcpMaxWindow.setStatus('mandatory')
wfTcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 2), )
if mibBuilder.loadTexts: wfTcpConnTable.setStatus('mandatory')
wfTcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 2, 1), ).setIndexNames((0, "Wellfleet-TCP-MIB", "wfTcpConnLocalAddress"), (0, "Wellfleet-TCP-MIB", "wfTcpConnLocalPort"), (0, "Wellfleet-TCP-MIB", "wfTcpConnRemAddress"), (0, "Wellfleet-TCP-MIB", "wfTcpConnRemPort"))
if mibBuilder.loadTexts: wfTcpConnEntry.setStatus('mandatory')
wfTcpConnDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTcpConnDelete.setStatus('mandatory')
wfTcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synsent", 3), ("synreceived", 4), ("established", 5), ("finwait1", 6), ("finwait2", 7), ("closewait", 8), ("lastack", 9), ("closing", 10), ("timewait", 11), ("deletetcb", 12))).clone('closed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpConnState.setStatus('mandatory')
wfTcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpConnLocalAddress.setStatus('mandatory')
wfTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpConnLocalPort.setStatus('mandatory')
wfTcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpConnRemAddress.setStatus('mandatory')
wfTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpConnRemPort.setStatus('mandatory')
wfTcpConnKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpConnKeepAliveInterval.setStatus('mandatory')
wfTcpConnKeepAliveRto = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpConnKeepAliveRto.setStatus('mandatory')
wfTcpConnKeepAliveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpConnKeepAliveCount.setStatus('mandatory')
wfTcpConnMd5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTcpConnMd5Errors.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-TCP-MIB", wfTcpMaxConn=wfTcpMaxConn, wfTcpRtoMax=wfTcpRtoMax, wfTcpOutRsts=wfTcpOutRsts, wfTcpConnEntry=wfTcpConnEntry, wfTcpConnKeepAliveRto=wfTcpConnKeepAliveRto, wfTcpConnMd5Errors=wfTcpConnMd5Errors, wfTcp=wfTcp, wfTcpRtoAlgorithm=wfTcpRtoAlgorithm, wfTcpConnLocalPort=wfTcpConnLocalPort, wfTcpConnTable=wfTcpConnTable, wfTcpOutSegs=wfTcpOutSegs, wfTcpRetransSegs=wfTcpRetransSegs, wfTcpConnLocalAddress=wfTcpConnLocalAddress, wfTcpInSegs=wfTcpInSegs, wfTcpConnRemAddress=wfTcpConnRemAddress, wfTcpCurrEstab=wfTcpCurrEstab, wfTcpAttemptFails=wfTcpAttemptFails, wfTcpPassiveOpens=wfTcpPassiveOpens, wfTcpDisable=wfTcpDisable, wfTcpConnDelete=wfTcpConnDelete, wfTcpRtoMin=wfTcpRtoMin, wfTcpConnKeepAliveCount=wfTcpConnKeepAliveCount, wfTcpConnState=wfTcpConnState, wfTcpEstabResets=wfTcpEstabResets, wfTcpInErrs=wfTcpInErrs, wfTcpActiveOpens=wfTcpActiveOpens, wfTcpDelete=wfTcpDelete, wfTcpMaxWindow=wfTcpMaxWindow, wfTcpConnRemPort=wfTcpConnRemPort, wfTcpConnKeepAliveInterval=wfTcpConnKeepAliveInterval, wfTcpState=wfTcpState)
