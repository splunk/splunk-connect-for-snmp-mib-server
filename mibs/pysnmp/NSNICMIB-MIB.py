#
# PySNMP MIB module NSNICMIB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSNICMIB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:15:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, Counter64, ModuleIdentity, ObjectIdentity, Integer32, Bits, IpAddress, Counter32, TimeTicks, enterprises, NotificationType, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Counter64", "ModuleIdentity", "ObjectIdentity", "Integer32", "Bits", "IpAddress", "Counter32", "TimeTicks", "enterprises", "NotificationType", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
nicObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18))
nicDrvConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1))
nicStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2))
nicCustomStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3))
nicErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4))
nicMiscellaneous = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 5))
nicFrameType = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 6))
nicParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7))
nicTokenRingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8))
nicTokenRingErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9))
nicCommonParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1))
nicStarfighterParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2))
nicTwisterParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3))
nicMasterParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4))
nicShastaParms = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 5))
nicDrvConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1), )
if mibBuilder.loadTexts: nicDrvConfigTable.setStatus('mandatory')
nicDrvConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicDrvConfigIndex"))
if mibBuilder.loadTexts: nicDrvConfigEntry.setStatus('mandatory')
nicDrvConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvConfigIndex.setStatus('mandatory')
nicDrvcfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgName.setStatus('mandatory')
nicDrvcfgDescript = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgDescript.setStatus('mandatory')
nicDrvcfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("hp-starfighter", 1), ("hp-twister", 2), ("hp-busmaster", 3), ("hp-shasta", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgType.setStatus('mandatory')
nicDrvcfgPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 5), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgPhyAddr.setStatus('mandatory')
nicDrvcfgMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMajor.setStatus('mandatory')
nicDrvcfgMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMinor.setStatus('mandatory')
nicDrvcfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgSlot.setStatus('mandatory')
nicDrvcfgIOport0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgIOport0.setStatus('mandatory')
nicDrvcfgIOport1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgIOport1.setStatus('mandatory')
nicDrvcfgInterrupt0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unused", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgInterrupt0.setStatus('mandatory')
nicDrvcfgInterrupt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unused", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgInterrupt1.setStatus('mandatory')
nicDrvcfgDMA0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unused", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgDMA0.setStatus('mandatory')
nicDrvcfgDMA1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255))).clone(namedValues=NamedValues(("unused", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgDMA1.setStatus('mandatory')
nicDrvcfgMemory0 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMemory0.setStatus('mandatory')
nicDrvcfgMemory1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMemory1.setStatus('mandatory')
nicDrvcfgMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMulticast.setStatus('mandatory')
nicDrvcfgPromiscuous = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgPromiscuous.setStatus('mandatory')
nicDrvcfgMaximumSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMaximumSize.setStatus('mandatory')
nicDrvcfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgSpeed.setStatus('mandatory')
nicDrvcfgTransportTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgTransportTime.setStatus('mandatory')
nicDrvcfgSendRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgSendRetries.setStatus('mandatory')
nicDrvcfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("non-100VG", 0), ("vg-100", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgMode.setStatus('mandatory')
nicDrvcfgBindFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgBindFrames.setStatus('mandatory')
nicDrvcfgAftGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftGroupId.setStatus('mandatory')
nicDrvcfgAftBusNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftBusNo.setStatus('mandatory')
nicDrvcfgAftBusDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftBusDeviceId.setStatus('mandatory')
nicDrvcfgAftPciVenodrId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftPciVenodrId.setStatus('mandatory')
nicDrvcfgAftPciDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftPciDeviceId.setStatus('mandatory')
nicDrvcfgAftPciSubSysVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftPciSubSysVendorId.setStatus('mandatory')
nicDrvcfgAftPciSubSysDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftPciSubSysDeviceId.setStatus('mandatory')
nicDrvcfgAftStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("standby", 0), ("active", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftStatus.setStatus('mandatory')
nicDrvcfgAftMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("secondary", 0), ("primary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDrvcfgAftMode.setStatus('mandatory')
nicStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1), )
if mibBuilder.loadTexts: nicStatisticsTable.setStatus('mandatory')
nicStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicStatisticsIndex"))
if mibBuilder.loadTexts: nicStatisticsEntry.setStatus('mandatory')
nicStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicStatisticsIndex.setStatus('mandatory')
nicTtlTxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTtlTxPacket.setStatus('mandatory')
nicDeltaTtlTxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDeltaTtlTxPacket.setStatus('mandatory')
nicTtlRxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTtlRxPacket.setStatus('mandatory')
nicDeltaTtlRxPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDeltaTtlRxPacket.setStatus('mandatory')
nicGetECBFails = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicGetECBFails.setStatus('mandatory')
nicTxTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxTooBig.setStatus('mandatory')
nicRxTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxTooBig.setStatus('mandatory')
nicRxOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxOverflow.setStatus('mandatory')
nicTxMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxMisc.setStatus('mandatory')
nicRxMisc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxMisc.setStatus('mandatory')
nicRxCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxCRC.setStatus('mandatory')
nicTxOKByte = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxOKByte.setStatus('mandatory')
nicDeltaTxOKByte = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDeltaTxOKByte.setStatus('mandatory')
nicRxOKByte = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxOKByte.setStatus('mandatory')
nicDeltaRxOKByte = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDeltaRxOKByte.setStatus('mandatory')
nicTxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxGroup.setStatus('mandatory')
nicDeltaTxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDeltaTxGroup.setStatus('mandatory')
nicRxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxGroup.setStatus('mandatory')
nicDeltaRxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicDeltaRxGroup.setStatus('mandatory')
nicAdapterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicAdapterReset.setStatus('mandatory')
nicQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicQDepth.setStatus('mandatory')
nicRcvBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRcvBuffers.setStatus('mandatory')
nicRcvBuffers75Pct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRcvBuffers75Pct.setStatus('mandatory')
nicRcvBuffersCkOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRcvBuffersCkOut.setStatus('mandatory')
nicRcvBuffersMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRcvBuffersMaxSize.setStatus('mandatory')
nicNumCustCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicNumCustCounter.setStatus('mandatory')
nicCustStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3, 1), )
if mibBuilder.loadTexts: nicCustStatTable.setStatus('mandatory')
nicCustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicCustIndex"), (0, "NSNICMIB-MIB", "nicIndex"))
if mibBuilder.loadTexts: nicCustEntry.setStatus('mandatory')
nicCustIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCustIndex.setStatus('mandatory')
nicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicIndex.setStatus('mandatory')
nicCustCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCustCounter.setStatus('mandatory')
nicCustCounterString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCustCounterString.setStatus('mandatory')
nicErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1), )
if mibBuilder.loadTexts: nicErrorsTable.setStatus('mandatory')
nicErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicErrorsIndex"))
if mibBuilder.loadTexts: nicErrorsEntry.setStatus('mandatory')
nicErrorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicErrorsIndex.setStatus('mandatory')
nicTxOKSingleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxOKSingleCollision.setStatus('mandatory')
nicTxOKMultipleCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxOKMultipleCollision.setStatus('mandatory')
nicTxOKDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxOKDeferred.setStatus('mandatory')
nicTxAbortLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxAbortLateCollision.setStatus('mandatory')
nicTxAbortExcessCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxAbortExcessCollision.setStatus('mandatory')
nicTxAbortCarrierSense = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxAbortCarrierSense.setStatus('mandatory')
nicTxAbortExcessiveDeferral = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTxAbortExcessiveDeferral.setStatus('mandatory')
nicRxAbortFrameAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRxAbortFrameAlignment.setStatus('mandatory')
nicHWRxMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicHWRxMismatch.setStatus('mandatory')
nicTtlTxErrPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTtlTxErrPacket.setStatus('mandatory')
nicTtlRxErrPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTtlRxErrPacket.setStatus('mandatory')
nicNumBoards = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicNumBoards.setStatus('mandatory')
nicAdapterType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicAdapterType.setStatus('mandatory')
nicFrameTypeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 6, 1), )
if mibBuilder.loadTexts: nicFrameTypeTable.setStatus('mandatory')
nicFrameTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 6, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicFrameTypeIndex"), (0, "NSNICMIB-MIB", "nicCardIndex"))
if mibBuilder.loadTexts: nicFrameTypeEntry.setStatus('mandatory')
nicFrameTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicFrameTypeIndex.setStatus('mandatory')
nicCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicCardIndex.setStatus('mandatory')
nicFrameTypeString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicFrameTypeString.setStatus('mandatory')
nicParmSampling = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmSampling.setStatus('mandatory')
nicParmProcessing = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmProcessing.setStatus('mandatory')
nicParmRxErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmRxErrCount.setStatus('mandatory')
nicParmRxErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmRxErrDelta.setStatus('mandatory')
nicParmRxErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmRxErrPct.setStatus('mandatory')
nicParmTxErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmTxErrCount.setStatus('mandatory')
nicParmTxErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmTxErrDelta.setStatus('mandatory')
nicParmTxErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmTxErrPct.setStatus('mandatory')
nicParmAdapterResetCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAdapterResetCount.setStatus('mandatory')
nicParmAdapterResetDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAdapterResetDelta.setStatus('mandatory')
nicParmAdapterResetPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAdapterResetPct.setStatus('mandatory')
nicParmAlignmentCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAlignmentCount.setStatus('mandatory')
nicParmAlignmentDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAlignmentDelta.setStatus('mandatory')
nicParmAlignmentPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAlignmentPct.setStatus('mandatory')
nicParmFrameTooLongCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrameTooLongCount.setStatus('mandatory')
nicParmFrameTooLongDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrameTooLongDelta.setStatus('mandatory')
nicParmFrameTooLongPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrameTooLongPct.setStatus('mandatory')
nicParmHardwareMismatchCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmHardwareMismatchCount.setStatus('mandatory')
nicParmHardwareMismatchDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmHardwareMismatchDelta.setStatus('mandatory')
nicParmHardwareMismatchPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmHardwareMismatchPct.setStatus('mandatory')
nicParmLateCollisionCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLateCollisionCount.setStatus('mandatory')
nicParmLateCollisionDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLateCollisionDelta.setStatus('mandatory')
nicParmLateCollisionPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLateCollisionPct.setStatus('mandatory')
nicParmExcessCollisionCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmExcessCollisionCount.setStatus('mandatory')
nicParmExcessCollisionDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmExcessCollisionDelta.setStatus('mandatory')
nicParmExcessCollisionPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmExcessCollisionPct.setStatus('mandatory')
nicParmCarrierSenseCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmCarrierSenseCount.setStatus('mandatory')
nicParmCarrierSenseDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmCarrierSenseDelta.setStatus('mandatory')
nicParmCarrierSensePct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmCarrierSensePct.setStatus('mandatory')
nicParmDeferralCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmDeferralCount.setStatus('mandatory')
nicParmDeferralDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmDeferralDelta.setStatus('mandatory')
nicParmDeferralPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmDeferralPct.setStatus('mandatory')
nicParmNoECBCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmNoECBCount.setStatus('mandatory')
nicParmNoECBDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmNoECBDelta.setStatus('mandatory')
nicParmNoECBPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmNoECBPct.setStatus('mandatory')
nicParmRxOverflowCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmRxOverflowCount.setStatus('mandatory')
nicParmRxOverflowDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmRxOverflowDelta.setStatus('mandatory')
nicParmRxOverflowPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmRxOverflowPct.setStatus('mandatory')
nicParmUtilizationCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmUtilizationCount.setStatus('mandatory')
nicParmAdapterType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAdapterType.setStatus('mandatory')
nicParmLineErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLineErrCount.setStatus('mandatory')
nicParmLineErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLineErrDelta.setStatus('mandatory')
nicParmLineErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLineErrPct.setStatus('mandatory')
nicParmLostFramesCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLostFramesCount.setStatus('mandatory')
nicParmLostFramesDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLostFramesDelta.setStatus('mandatory')
nicParmLostFramesPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmLostFramesPct.setStatus('mandatory')
nicParmBurstErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmBurstErrCount.setStatus('mandatory')
nicParmBurstErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmBurstErrDelta.setStatus('mandatory')
nicParmBurstErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmBurstErrPct.setStatus('mandatory')
nicParmACErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmACErrCount.setStatus('mandatory')
nicParmACErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmACErrDelta.setStatus('mandatory')
nicParmACErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmACErrPct.setStatus('mandatory')
nicParmAbortDelimitersCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAbortDelimitersCount.setStatus('mandatory')
nicParmAbortDelimitersDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAbortDelimitersDelta.setStatus('mandatory')
nicParmAbortDelimitersPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAbortDelimitersPct.setStatus('mandatory')
nicParmFrameCopiedErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrameCopiedErrCount.setStatus('mandatory')
nicParmFrameCopiedErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrameCopiedErrDelta.setStatus('mandatory')
nicParmFrameCopiedErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrameCopiedErrPct.setStatus('mandatory')
nicParmFrequencyErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrequencyErrCount.setStatus('mandatory')
nicParmFrequencyErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrequencyErrDelta.setStatus('mandatory')
nicParmFrequencyErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmFrequencyErrPct.setStatus('mandatory')
nicParmTokenErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmTokenErrCount.setStatus('mandatory')
nicParmTokenErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmTokenErrDelta.setStatus('mandatory')
nicParmTokenErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmTokenErrPct.setStatus('mandatory')
nicParmInternalErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 65), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmInternalErrCount.setStatus('mandatory')
nicParmInternalErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmInternalErrDelta.setStatus('mandatory')
nicParmInternalErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmInternalErrPct.setStatus('mandatory')
nicParmAftFailOverErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 68), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftFailOverErrCount.setStatus('mandatory')
nicParmAftFailOverErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 69), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftFailOverErrDelta.setStatus('mandatory')
nicParmAftRecoveryErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 70), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftRecoveryErrCount.setStatus('mandatory')
nicParmAftRecoveryErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftRecoveryErrDelta.setStatus('mandatory')
nicParmAftStandbyErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftStandbyErrCount.setStatus('mandatory')
nicParmAftStandbyErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftStandbyErrDelta.setStatus('mandatory')
nicParmAftGruoupFailErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftGruoupFailErrCount.setStatus('mandatory')
nicParmAftGroupFailErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 1, 75), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicParmAftGroupFailErrDelta.setStatus('mandatory')
nicStarfighterParmTxFifoCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmTxFifoCount.setStatus('mandatory')
nicStarfighterParmTxFifoDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmTxFifoDelta.setStatus('mandatory')
nicStarfighterParmTxFifoPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmTxFifoPct.setStatus('mandatory')
nicStarfighterParmTxTimedOutCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmTxTimedOutCount.setStatus('mandatory')
nicStarfighterParmTxTimedOutDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmTxTimedOutDelta.setStatus('mandatory')
nicStarfighterParmTxTimedOutPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmTxTimedOutPct.setStatus('mandatory')
nicStarfighterParmRxFifoCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxFifoCount.setStatus('mandatory')
nicStarfighterParmRxFifoDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxFifoDelta.setStatus('mandatory')
nicStarfighterParmRxFifoPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxFifoPct.setStatus('mandatory')
nicStarfighterParmRxFalseInterruptCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxFalseInterruptCount.setStatus('mandatory')
nicStarfighterParmRxFalseInterruptDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxFalseInterruptDelta.setStatus('mandatory')
nicStarfighterParmRxFalseInterruptPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxFalseInterruptPct.setStatus('mandatory')
nicStarfighterParmRxPagingErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxPagingErrCount.setStatus('mandatory')
nicStarfighterParmRxPagingErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxPagingErrDelta.setStatus('mandatory')
nicStarfighterParmRxPagingErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicStarfighterParmRxPagingErrPct.setStatus('mandatory')
nicTwisterParmTxFifoCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmTxFifoCount.setStatus('mandatory')
nicTwisterParmTxFifoDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmTxFifoDelta.setStatus('mandatory')
nicTwisterParmTxFifoPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmTxFifoPct.setStatus('mandatory')
nicTwisterParmTxTimedOutCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmTxTimedOutCount.setStatus('mandatory')
nicTwisterParmTxTimedOutDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmTxTimedOutDelta.setStatus('mandatory')
nicTwisterParmTxTimedOutPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmTxTimedOutPct.setStatus('mandatory')
nicTwisterParmRxFifoCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxFifoCount.setStatus('mandatory')
nicTwisterParmRxFifoDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxFifoDelta.setStatus('mandatory')
nicTwisterParmRxFifoPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxFifoPct.setStatus('mandatory')
nicTwisterParmRxFalseInterruptCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxFalseInterruptCount.setStatus('mandatory')
nicTwisterParmRxFalseInterruptDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxFalseInterruptDelta.setStatus('mandatory')
nicTwisterParmRxFalseInterruptPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxFalseInterruptPct.setStatus('mandatory')
nicTwisterParmRxPagingErrCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxPagingErrCount.setStatus('mandatory')
nicTwisterParmRxPagingErrDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxPagingErrDelta.setStatus('mandatory')
nicTwisterParmRxPagingErrPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmRxPagingErrPct.setStatus('mandatory')
nicTwisterParmDMATimedOutCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmDMATimedOutCount.setStatus('mandatory')
nicTwisterParmDMATimedOutDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmDMATimedOutDelta.setStatus('mandatory')
nicTwisterParmDMATimedOutPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicTwisterParmDMATimedOutPct.setStatus('mandatory')
nicMasterParmTxNoResourcesCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmTxNoResourcesCount.setStatus('mandatory')
nicMasterParmTxNoResourcesDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmTxNoResourcesDelta.setStatus('mandatory')
nicMasterParmTxNoResourcesPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmTxNoResourcesPct.setStatus('mandatory')
nicMasterParmTxExcessFragsCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmTxExcessFragsCount.setStatus('mandatory')
nicMasterParmTxExcessFragsDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmTxExcessFragsDelta.setStatus('mandatory')
nicMasterParmTxExcessFragsPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmTxExcessFragsPct.setStatus('mandatory')
nicMasterParmRxLowCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmRxLowCount.setStatus('mandatory')
nicMasterParmRxLowDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmRxLowDelta.setStatus('mandatory')
nicMasterParmRxLowPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmRxLowPct.setStatus('mandatory')
nicMasterParmRxEmptyCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmRxEmptyCount.setStatus('mandatory')
nicMasterParmRxEmptyDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmRxEmptyDelta.setStatus('mandatory')
nicMasterParmRxEmptyPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicMasterParmRxEmptyPct.setStatus('mandatory')
nicShastaParmTxNoResourcesCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicShastaParmTxNoResourcesCount.setStatus('mandatory')
nicShastaParmTxNoResourcesDelta = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicShastaParmTxNoResourcesDelta.setStatus('mandatory')
nicShastaParmTxNoResourcesPct = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 7, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicShastaParmTxNoResourcesPct.setStatus('mandatory')
nicTokenRingStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1), )
if mibBuilder.loadTexts: nicTokenRingStatisticsTable.setStatus('mandatory')
nicTokenRingStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicTokenRingStatisticsIndex"))
if mibBuilder.loadTexts: nicTokenRingStatisticsEntry.setStatus('mandatory')
nicTokenRingStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTokenRingStatisticsIndex.setStatus('mandatory')
nicFunctionalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicFunctionalAddress.setStatus('mandatory')
nicGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicGroupAddress.setStatus('mandatory')
nicLastOpenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicLastOpenStatus.setStatus('mandatory')
nicRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 0))).clone(namedValues=NamedValues(("harderror", 16384), ("softerror", 8192), ("transmitbeacon", 4096), ("lobewirefault", 2048), ("autoremovalerror", 1024), ("removereceived", 512), ("counteroverflow", 256), ("singlestation", 128), ("ringrecovery", 64), ("nostatus", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRingStatus.setStatus('mandatory')
nicRingState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("opened", 1), ("closed", 2), ("opening", 3), ("closing", 4), ("openfailure", 5), ("ringfailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicRingState.setStatus('mandatory')
nicTokenRingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1), )
if mibBuilder.loadTexts: nicTokenRingErrorsTable.setStatus('mandatory')
nicTokenRingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1), ).setIndexNames((0, "NSNICMIB-MIB", "nicTokenRingErrorsIndex"))
if mibBuilder.loadTexts: nicTokenRingErrorsEntry.setStatus('mandatory')
nicTokenRingErrorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTokenRingErrorsIndex.setStatus('mandatory')
nicLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicLineErrors.setStatus('mandatory')
nicLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicLostFrames.setStatus('mandatory')
nicBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicBurstErrors.setStatus('mandatory')
nicACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicACErrors.setStatus('mandatory')
nicAbortDelimiters = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicAbortDelimiters.setStatus('mandatory')
nicFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicFrameCopiedErrors.setStatus('mandatory')
nicFrequencyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicFrequencyErrors.setStatus('mandatory')
nicTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicTokenErrors.setStatus('mandatory')
nicInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 18, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nicInternalErrors.setStatus('mandatory')
mibBuilder.exportSymbols("NSNICMIB-MIB", nicDrvcfgMemory1=nicDrvcfgMemory1, nicParmAftStandbyErrCount=nicParmAftStandbyErrCount, nicParmRxOverflowCount=nicParmRxOverflowCount, nicShastaParmTxNoResourcesPct=nicShastaParmTxNoResourcesPct, hp=hp, nicTokenErrors=nicTokenErrors, nicDrvcfgType=nicDrvcfgType, nicTokenRingErrors=nicTokenRingErrors, nicCustCounterString=nicCustCounterString, nicStarfighterParmTxFifoDelta=nicStarfighterParmTxFifoDelta, nicParmAdapterResetCount=nicParmAdapterResetCount, nicParmDeferralDelta=nicParmDeferralDelta, nicNumCustCounter=nicNumCustCounter, nicTtlTxPacket=nicTtlTxPacket, nm=nm, nicTtlRxPacket=nicTtlRxPacket, nicDrvcfgAftPciDeviceId=nicDrvcfgAftPciDeviceId, nicFrameTypeEntry=nicFrameTypeEntry, nicTokenRingStatisticsTable=nicTokenRingStatisticsTable, nicStarfighterParmRxFalseInterruptCount=nicStarfighterParmRxFalseInterruptCount, nicMiscellaneous=nicMiscellaneous, nicDrvcfgIOport1=nicDrvcfgIOport1, nicParmAbortDelimitersDelta=nicParmAbortDelimitersDelta, nicACErrors=nicACErrors, nicDrvcfgMinor=nicDrvcfgMinor, nicTxOKSingleCollision=nicTxOKSingleCollision, nicParmDeferralCount=nicParmDeferralCount, nicParmAftFailOverErrCount=nicParmAftFailOverErrCount, nicMasterParmTxExcessFragsCount=nicMasterParmTxExcessFragsCount, nicTokenRingErrorsTable=nicTokenRingErrorsTable, nicParmFrequencyErrDelta=nicParmFrequencyErrDelta, nicMasterParmTxExcessFragsDelta=nicMasterParmTxExcessFragsDelta, nicDrvcfgAftPciSubSysVendorId=nicDrvcfgAftPciSubSysVendorId, nicDrvcfgSpeed=nicDrvcfgSpeed, nicCustEntry=nicCustEntry, nicTwisterParmTxFifoDelta=nicTwisterParmTxFifoDelta, nicDrvcfgTransportTime=nicDrvcfgTransportTime, nicFrequencyErrors=nicFrequencyErrors, nicTwisterParmDMATimedOutCount=nicTwisterParmDMATimedOutCount, nicParmAbortDelimitersPct=nicParmAbortDelimitersPct, nicStarfighterParmRxFifoDelta=nicStarfighterParmRxFifoDelta, nicMasterParmRxLowPct=nicMasterParmRxLowPct, nicParmRxErrDelta=nicParmRxErrDelta, nicDrvcfgDMA0=nicDrvcfgDMA0, nicTxAbortLateCollision=nicTxAbortLateCollision, nicParmLostFramesDelta=nicParmLostFramesDelta, nicParmTxErrCount=nicParmTxErrCount, nicStarfighterParmTxFifoPct=nicStarfighterParmTxFifoPct, hpnsa=hpnsa, nicDrvcfgMulticast=nicDrvcfgMulticast, nicCardIndex=nicCardIndex, nicParmBurstErrCount=nicParmBurstErrCount, nicTwisterParms=nicTwisterParms, nicDrvcfgMaximumSize=nicDrvcfgMaximumSize, nicParmLateCollisionDelta=nicParmLateCollisionDelta, nicMasterParmRxLowCount=nicMasterParmRxLowCount, nicTwisterParmRxFalseInterruptDelta=nicTwisterParmRxFalseInterruptDelta, nicParmFrameTooLongCount=nicParmFrameTooLongCount, nicParmAlignmentCount=nicParmAlignmentCount, nicObject=nicObject, nicParmAdapterResetPct=nicParmAdapterResetPct, nicTxOKDeferred=nicTxOKDeferred, nicParmInternalErrPct=nicParmInternalErrPct, nicStarfighterParmRxPagingErrDelta=nicStarfighterParmRxPagingErrDelta, nicTwisterParmTxTimedOutCount=nicTwisterParmTxTimedOutCount, nicErrorsIndex=nicErrorsIndex, nicErrorsEntry=nicErrorsEntry, nicTxAbortExcessCollision=nicTxAbortExcessCollision, nicNumBoards=nicNumBoards, nicTokenRingStatisticsEntry=nicTokenRingStatisticsEntry, nicCustIndex=nicCustIndex, nicTwisterParmRxFifoPct=nicTwisterParmRxFifoPct, nicDrvcfgSendRetries=nicDrvcfgSendRetries, nicRxOverflow=nicRxOverflow, nicDrvcfgAftBusNo=nicDrvcfgAftBusNo, nicParmFrameCopiedErrCount=nicParmFrameCopiedErrCount, nicDrvcfgName=nicDrvcfgName, nicDrvcfgMajor=nicDrvcfgMajor, nicLastOpenStatus=nicLastOpenStatus, nicStarfighterParmTxFifoCount=nicStarfighterParmTxFifoCount, nicDrvcfgIOport0=nicDrvcfgIOport0, nicBurstErrors=nicBurstErrors, nicDrvcfgAftGroupId=nicDrvcfgAftGroupId, nicParmLostFramesPct=nicParmLostFramesPct, nicIndex=nicIndex, nicParms=nicParms, nicGetECBFails=nicGetECBFails, nicRxAbortFrameAlignment=nicRxAbortFrameAlignment, nicTtlTxErrPacket=nicTtlTxErrPacket, nicParmRxOverflowDelta=nicParmRxOverflowDelta, nicFrameTypeString=nicFrameTypeString, nicDrvcfgMode=nicDrvcfgMode, nicParmBurstErrDelta=nicParmBurstErrDelta, nicDrvcfgBindFrames=nicDrvcfgBindFrames, nicParmRxErrPct=nicParmRxErrPct, nicStatisticsIndex=nicStatisticsIndex, nicStarfighterParmRxFifoPct=nicStarfighterParmRxFifoPct, nicAbortDelimiters=nicAbortDelimiters, nicTokenRingErrorsEntry=nicTokenRingErrorsEntry, nicDrvcfgSlot=nicDrvcfgSlot, nicDrvcfgAftPciSubSysDeviceId=nicDrvcfgAftPciSubSysDeviceId, nicRxOKByte=nicRxOKByte, nicParmRxOverflowPct=nicParmRxOverflowPct, nicParmAdapterType=nicParmAdapterType, nicDrvcfgAftStatus=nicDrvcfgAftStatus, nicParmAftFailOverErrDelta=nicParmAftFailOverErrDelta, nicParmBurstErrPct=nicParmBurstErrPct, nicStarfighterParmRxFifoCount=nicStarfighterParmRxFifoCount, nicParmFrameCopiedErrDelta=nicParmFrameCopiedErrDelta, nicTokenRingStatistics=nicTokenRingStatistics, nicDrvcfgInterrupt1=nicDrvcfgInterrupt1, nicRxMisc=nicRxMisc, nicRcvBuffers75Pct=nicRcvBuffers75Pct, nicTwisterParmRxPagingErrDelta=nicTwisterParmRxPagingErrDelta, nicShastaParms=nicShastaParms, nicTwisterParmRxFalseInterruptPct=nicTwisterParmRxFalseInterruptPct, nicTwisterParmRxFalseInterruptCount=nicTwisterParmRxFalseInterruptCount, nicFrameCopiedErrors=nicFrameCopiedErrors, nicRcvBuffersCkOut=nicRcvBuffersCkOut, nicTwisterParmRxPagingErrPct=nicTwisterParmRxPagingErrPct, nicTxAbortExcessiveDeferral=nicTxAbortExcessiveDeferral, nicParmHardwareMismatchCount=nicParmHardwareMismatchCount, nicDrvcfgDescript=nicDrvcfgDescript, nicParmACErrPct=nicParmACErrPct, nicFrameTypeTable=nicFrameTypeTable, nicStarfighterParmTxTimedOutCount=nicStarfighterParmTxTimedOutCount, nicTwisterParmTxTimedOutPct=nicTwisterParmTxTimedOutPct, nicTxGroup=nicTxGroup, nicCustomStats=nicCustomStats, nicShastaParmTxNoResourcesCount=nicShastaParmTxNoResourcesCount, nicRingState=nicRingState, nicTxTooBig=nicTxTooBig, nicDrvcfgPromiscuous=nicDrvcfgPromiscuous, nicHWRxMismatch=nicHWRxMismatch, nicDeltaRxGroup=nicDeltaRxGroup, nicParmTxErrPct=nicParmTxErrPct, nicErrors=nicErrors, nicDrvConfigIndex=nicDrvConfigIndex, nicParmAftRecoveryErrDelta=nicParmAftRecoveryErrDelta, nicTwisterParmTxTimedOutDelta=nicTwisterParmTxTimedOutDelta, nicStarfighterParmRxFalseInterruptDelta=nicStarfighterParmRxFalseInterruptDelta, nicInternalErrors=nicInternalErrors, nicDrvcfgInterrupt0=nicDrvcfgInterrupt0, nicCustStatTable=nicCustStatTable, nicErrorsTable=nicErrorsTable, nicParmLineErrPct=nicParmLineErrPct, nicParmLostFramesCount=nicParmLostFramesCount, nicStarfighterParmRxFalseInterruptPct=nicStarfighterParmRxFalseInterruptPct, nicTwisterParmRxFifoCount=nicTwisterParmRxFifoCount, nicMasterParmRxLowDelta=nicMasterParmRxLowDelta, nicGroupAddress=nicGroupAddress, nicCustCounter=nicCustCounter, nicStatisticsEntry=nicStatisticsEntry, nicTwisterParmTxFifoCount=nicTwisterParmTxFifoCount, nicParmNoECBDelta=nicParmNoECBDelta, nicParmInternalErrCount=nicParmInternalErrCount, nicCommonParms=nicCommonParms, nicParmAftRecoveryErrCount=nicParmAftRecoveryErrCount, nicFrameType=nicFrameType, nicParmCarrierSensePct=nicParmCarrierSensePct, nicStarfighterParmRxPagingErrPct=nicStarfighterParmRxPagingErrPct, nicLineErrors=nicLineErrors, nicStarfighterParms=nicStarfighterParms, nicParmTokenErrCount=nicParmTokenErrCount, nicRingStatus=nicRingStatus, nicStatisticsTable=nicStatisticsTable, nicParmSampling=nicParmSampling, nicDrvcfgPhyAddr=nicDrvcfgPhyAddr, nicDrvcfgDMA1=nicDrvcfgDMA1, nicParmLateCollisionPct=nicParmLateCollisionPct, nicParmExcessCollisionPct=nicParmExcessCollisionPct, nicParmFrameTooLongDelta=nicParmFrameTooLongDelta, nicParmTokenErrDelta=nicParmTokenErrDelta, nicParmTokenErrPct=nicParmTokenErrPct, nicParmExcessCollisionDelta=nicParmExcessCollisionDelta, nicLostFrames=nicLostFrames, nicTwisterParmRxFifoDelta=nicTwisterParmRxFifoDelta, nicTxOKMultipleCollision=nicTxOKMultipleCollision, nicTwisterParmRxPagingErrCount=nicTwisterParmRxPagingErrCount, nicFrameTypeIndex=nicFrameTypeIndex, nicMasterParmRxEmptyPct=nicMasterParmRxEmptyPct, nicParmDeferralPct=nicParmDeferralPct, nicDeltaRxOKByte=nicDeltaRxOKByte, nicRcvBuffers=nicRcvBuffers, nicParmNoECBPct=nicParmNoECBPct, nicMasterParmTxNoResourcesCount=nicMasterParmTxNoResourcesCount, nicTwisterParmDMATimedOutDelta=nicTwisterParmDMATimedOutDelta, nicTxMisc=nicTxMisc, nicTokenRingStatisticsIndex=nicTokenRingStatisticsIndex, nicRcvBuffersMaxSize=nicRcvBuffersMaxSize, nicParmAdapterResetDelta=nicParmAdapterResetDelta, nicParmNoECBCount=nicParmNoECBCount, nicParmACErrCount=nicParmACErrCount, nicShastaParmTxNoResourcesDelta=nicShastaParmTxNoResourcesDelta, nicParmAftGroupFailErrDelta=nicParmAftGroupFailErrDelta, nicAdapterType=nicAdapterType, nicTwisterParmDMATimedOutPct=nicTwisterParmDMATimedOutPct, nicMasterParmTxNoResourcesPct=nicMasterParmTxNoResourcesPct, nicParmHardwareMismatchPct=nicParmHardwareMismatchPct, nicParmACErrDelta=nicParmACErrDelta, nicParmAftStandbyErrDelta=nicParmAftStandbyErrDelta, nicParmHardwareMismatchDelta=nicParmHardwareMismatchDelta, nicParmProcessing=nicParmProcessing, nicParmAftGruoupFailErrCount=nicParmAftGruoupFailErrCount, nicMasterParmTxExcessFragsPct=nicMasterParmTxExcessFragsPct, nicDeltaTxGroup=nicDeltaTxGroup, nicParmRxErrCount=nicParmRxErrCount, nicRxCRC=nicRxCRC, nicTtlRxErrPacket=nicTtlRxErrPacket, nicFunctionalAddress=nicFunctionalAddress, nicDrvcfgMemory0=nicDrvcfgMemory0, nicTxOKByte=nicTxOKByte, nicTxAbortCarrierSense=nicTxAbortCarrierSense, nicDrvConfigTable=nicDrvConfigTable, nicRxGroup=nicRxGroup, nicParmFrameTooLongPct=nicParmFrameTooLongPct, nicParmExcessCollisionCount=nicParmExcessCollisionCount, nicMasterParmRxEmptyCount=nicMasterParmRxEmptyCount, nicParmLineErrCount=nicParmLineErrCount, nicStarfighterParmTxTimedOutPct=nicStarfighterParmTxTimedOutPct, nicParmTxErrDelta=nicParmTxErrDelta, nicStarfighterParmRxPagingErrCount=nicStarfighterParmRxPagingErrCount, nicTokenRingErrorsIndex=nicTokenRingErrorsIndex, nicDrvConfig=nicDrvConfig, nicParmCarrierSenseCount=nicParmCarrierSenseCount, nicParmFrequencyErrCount=nicParmFrequencyErrCount, nicDrvConfigEntry=nicDrvConfigEntry, nicMasterParmTxNoResourcesDelta=nicMasterParmTxNoResourcesDelta, nicParmUtilizationCount=nicParmUtilizationCount, nicParmInternalErrDelta=nicParmInternalErrDelta, nicParmCarrierSenseDelta=nicParmCarrierSenseDelta, nicStarfighterParmTxTimedOutDelta=nicStarfighterParmTxTimedOutDelta, nicParmFrameCopiedErrPct=nicParmFrameCopiedErrPct, nicRxTooBig=nicRxTooBig, nicParmLineErrDelta=nicParmLineErrDelta, nicDrvcfgAftMode=nicDrvcfgAftMode, nicDrvcfgAftPciVenodrId=nicDrvcfgAftPciVenodrId, nicTwisterParmTxFifoPct=nicTwisterParmTxFifoPct, nicDeltaTtlTxPacket=nicDeltaTtlTxPacket, nicQDepth=nicQDepth, nicDeltaTtlRxPacket=nicDeltaTtlRxPacket, nicParmAlignmentDelta=nicParmAlignmentDelta, nicParmLateCollisionCount=nicParmLateCollisionCount, nicDeltaTxOKByte=nicDeltaTxOKByte, nicParmAlignmentPct=nicParmAlignmentPct, nicParmAbortDelimitersCount=nicParmAbortDelimitersCount, nicParmFrequencyErrPct=nicParmFrequencyErrPct, nicMasterParmRxEmptyDelta=nicMasterParmRxEmptyDelta, nicMasterParms=nicMasterParms, nicStatistics=nicStatistics, nicAdapterReset=nicAdapterReset, nicDrvcfgAftBusDeviceId=nicDrvcfgAftBusDeviceId)
