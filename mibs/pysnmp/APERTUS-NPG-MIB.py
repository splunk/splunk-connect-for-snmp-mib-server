#
# PySNMP MIB module APERTUS-NPG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APERTUS-NPG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, NotificationType, Gauge32, iso, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, ObjectIdentity, Unsigned32, MibIdentifier, ModuleIdentity, enterprises, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "NotificationType", "Gauge32", "iso", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "ModuleIdentity", "enterprises", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
internet = MibIdentifier((1, 3, 6, 1))
directory = MibIdentifier((1, 3, 6, 1, 1))
mgmt = MibIdentifier((1, 3, 6, 1, 2))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
apertus = MibIdentifier((1, 3, 6, 1, 4, 1, 543))
isg = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3))
npg = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 5))
npgMib = MibIdentifier((1, 3, 6, 1, 4, 1, 543, 3, 5, 1))
npgMibVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgMibVersionNumber.setStatus('mandatory')
npgVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgVersionNumber.setStatus('mandatory')
npgSessionTable = MibTable((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3), )
if mibBuilder.loadTexts: npgSessionTable.setStatus('mandatory')
npgSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1), ).setIndexNames((0, "APERTUS-NPG-MIB", "npgSessionName"))
if mibBuilder.loadTexts: npgSessionEntry.setStatus('mandatory')
npgSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionName.setStatus('mandatory')
npgSessionCorrectState = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCorrectState.setStatus('mandatory')
npgSessionCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCurrentState.setStatus('mandatory')
npgSessionWhenLastUp = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionWhenLastUp.setStatus('mandatory')
npgSessionWhenLastDown = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionWhenLastDown.setStatus('mandatory')
npgSessionLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionLastErrorCode.setStatus('mandatory')
npgSessionLastErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionLastErrorMessage.setStatus('mandatory')
npgSessionTimeOfNextRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionTimeOfNextRetry.setStatus('mandatory')
npgSessionCurrentRetryValue = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCurrentRetryValue.setStatus('mandatory')
npgSessionRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionRetryCount.setStatus('mandatory')
npgSessionTimeOfActiveReset = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionTimeOfActiveReset.setStatus('mandatory')
npgSessionActiveStatsProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionActiveStatsProcessingTime.setStatus('mandatory')
npgSessionActiveStatsBytesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionActiveStatsBytesPrinted.setStatus('mandatory')
npgSessionActiveStatsLinesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionActiveStatsLinesPrinted.setStatus('mandatory')
npgSessionActiveStatsPagesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionActiveStatsPagesPrinted.setStatus('mandatory')
npgSessionActiveStatsJobsPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionActiveStatsJobsPrinted.setStatus('mandatory')
npgSessionCumulativeStatsProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCumulativeStatsProcessingTime.setStatus('mandatory')
npgSessionCumulativeStatsBytesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCumulativeStatsBytesPrinted.setStatus('mandatory')
npgSessionCumulativeStatsLinesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCumulativeStatsLinesPrinted.setStatus('mandatory')
npgSessionCumulativeStatsPagesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCumulativeStatsPagesPrinted.setStatus('mandatory')
npgSessionCumulativeStatsJobsPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionCumulativeStatsJobsPrinted.setStatus('mandatory')
npgSessionConfigTn3270eServer = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionConfigTn3270eServer.setStatus('mandatory')
npgSessionConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionConfigPort.setStatus('mandatory')
npgSessionConfigPrinterName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 3, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgSessionConfigPrinterName.setStatus('mandatory')
npgDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4), )
if mibBuilder.loadTexts: npgDestinationTable.setStatus('mandatory')
npgDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1), ).setIndexNames((0, "APERTUS-NPG-MIB", "npgDestinationName"))
if mibBuilder.loadTexts: npgDestinationEntry.setStatus('mandatory')
npgDestinationName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationName.setStatus('mandatory')
npgDestinationTimeOfActiveReset = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationTimeOfActiveReset.setStatus('mandatory')
npgDestinationActiveStatsProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationActiveStatsProcessingTime.setStatus('mandatory')
npgDestinationActiveStatsBytesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationActiveStatsBytesPrinted.setStatus('mandatory')
npgDestinationActiveStatsLinesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationActiveStatsLinesPrinted.setStatus('mandatory')
npgDestinationActiveStatsPagesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationActiveStatsPagesPrinted.setStatus('mandatory')
npgDestinationActiveStatsJobsPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationActiveStatsJobsPrinted.setStatus('mandatory')
npgDestinationCumulativeStatsProcessingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationCumulativeStatsProcessingTime.setStatus('mandatory')
npgDestinationCumulativeStatsBytesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationCumulativeStatsBytesPrinted.setStatus('mandatory')
npgDestinationCumulativeStatsLinesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationCumulativeStatsLinesPrinted.setStatus('mandatory')
npgDestinationCumulativeStatsPagesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationCumulativeStatsPagesPrinted.setStatus('mandatory')
npgDestinationCumulativeStatsJobsPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationCumulativeStatsJobsPrinted.setStatus('mandatory')
npgDestinationConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationConfigType.setStatus('mandatory')
npgDestinationConfigProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 543, 3, 5, 1, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npgDestinationConfigProfileName.setStatus('mandatory')
mibBuilder.exportSymbols("APERTUS-NPG-MIB", private=private, npgSessionCurrentRetryValue=npgSessionCurrentRetryValue, experimental=experimental, npgDestinationTable=npgDestinationTable, npgDestinationActiveStatsLinesPrinted=npgDestinationActiveStatsLinesPrinted, npgDestinationActiveStatsPagesPrinted=npgDestinationActiveStatsPagesPrinted, npgDestinationCumulativeStatsJobsPrinted=npgDestinationCumulativeStatsJobsPrinted, npgSessionConfigPort=npgSessionConfigPort, npgDestinationActiveStatsJobsPrinted=npgDestinationActiveStatsJobsPrinted, npgDestinationConfigType=npgDestinationConfigType, npgSessionTimeOfActiveReset=npgSessionTimeOfActiveReset, npgDestinationActiveStatsProcessingTime=npgDestinationActiveStatsProcessingTime, npgMibVersionNumber=npgMibVersionNumber, npgDestinationEntry=npgDestinationEntry, npgSessionWhenLastDown=npgSessionWhenLastDown, mgmt=mgmt, apertus=apertus, isg=isg, npgVersionNumber=npgVersionNumber, npgDestinationName=npgDestinationName, npgDestinationCumulativeStatsLinesPrinted=npgDestinationCumulativeStatsLinesPrinted, npgSessionCurrentState=npgSessionCurrentState, npgDestinationCumulativeStatsPagesPrinted=npgDestinationCumulativeStatsPagesPrinted, npgSessionTimeOfNextRetry=npgSessionTimeOfNextRetry, npgSessionCumulativeStatsPagesPrinted=npgSessionCumulativeStatsPagesPrinted, enterprises=enterprises, npgSessionCorrectState=npgSessionCorrectState, npgSessionConfigTn3270eServer=npgSessionConfigTn3270eServer, npgSessionActiveStatsPagesPrinted=npgSessionActiveStatsPagesPrinted, npgDestinationTimeOfActiveReset=npgDestinationTimeOfActiveReset, npgDestinationActiveStatsBytesPrinted=npgDestinationActiveStatsBytesPrinted, npgSessionCumulativeStatsProcessingTime=npgSessionCumulativeStatsProcessingTime, npgSessionWhenLastUp=npgSessionWhenLastUp, directory=directory, npgSessionCumulativeStatsLinesPrinted=npgSessionCumulativeStatsLinesPrinted, npgSessionCumulativeStatsJobsPrinted=npgSessionCumulativeStatsJobsPrinted, npgSessionLastErrorMessage=npgSessionLastErrorMessage, npgMib=npgMib, npgSessionActiveStatsBytesPrinted=npgSessionActiveStatsBytesPrinted, npgSessionActiveStatsLinesPrinted=npgSessionActiveStatsLinesPrinted, npgDestinationCumulativeStatsBytesPrinted=npgDestinationCumulativeStatsBytesPrinted, npgDestinationCumulativeStatsProcessingTime=npgDestinationCumulativeStatsProcessingTime, npgSessionLastErrorCode=npgSessionLastErrorCode, npgSessionActiveStatsProcessingTime=npgSessionActiveStatsProcessingTime, npgSessionName=npgSessionName, npgSessionRetryCount=npgSessionRetryCount, npgSessionActiveStatsJobsPrinted=npgSessionActiveStatsJobsPrinted, internet=internet, npgSessionCumulativeStatsBytesPrinted=npgSessionCumulativeStatsBytesPrinted, npgSessionConfigPrinterName=npgSessionConfigPrinterName, npgSessionTable=npgSessionTable, npgDestinationConfigProfileName=npgDestinationConfigProfileName, npgSessionEntry=npgSessionEntry, npg=npg)
