#
# PySNMP MIB module ZYXEL-PPPoE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-PPPoE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:45:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, TimeTicks, Gauge32, Unsigned32, Integer32, Bits, NotificationType, iso, ModuleIdentity, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "Gauge32", "Unsigned32", "Integer32", "Bits", "NotificationType", "iso", "ModuleIdentity", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelPppoe = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67))
if mibBuilder.loadTexts: zyxelPppoe.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelPppoe.setOrganization('Enterprise Solution ZyXEL')
zyxelPppoeIaSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1))
zyPppoeIaState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaState.setStatus('current')
zyPppoeIaAccessNodeIdString = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaAccessNodeIdString.setStatus('current')
zyPppoeIaFlexibleCircuitIdSyntaxState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaFlexibleCircuitIdSyntaxState.setStatus('current')
zyPppoeIaFlexibleCircuitIdSyntaxIdString = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaFlexibleCircuitIdSyntaxIdString.setStatus('current')
zyPppoeIaFlexibleCircuitIdSyntaxOption = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sp", 1), ("sv", 2), ("pv", 3), ("spv", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaFlexibleCircuitIdSyntaxOption.setStatus('current')
zyPppoeIaFlexibleCircuitIdSyntaxDelimiter = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("poundSign", 1), ("dot", 2), ("comma", 3), ("semicolon", 4), ("slash", 5), ("space", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaFlexibleCircuitIdSyntaxDelimiter.setStatus('current')
zyxelPppoeIaPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 7), )
if mibBuilder.loadTexts: zyxelPppoeIaPortTable.setStatus('current')
zyxelPppoeIaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 7, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelPppoeIaPortEntry.setStatus('current')
zyPppoeIaPortTrustState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 7, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaPortTrustState.setStatus('current')
zyPppoeIaPortCircuitIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaPortCircuitIdString.setStatus('current')
zyPppoeIaPortRemoteIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 7, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaPortRemoteIdString.setStatus('current')
zyPppoeIaMaxNumberOfVlans = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPppoeIaMaxNumberOfVlans.setStatus('current')
zyxelPppoeIaVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 9), )
if mibBuilder.loadTexts: zyxelPppoeIaVlanTable.setStatus('current')
zyxelPppoeIaVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 9, 1), ).setIndexNames((0, "ZYXEL-PPPoE-MIB", "zyPppoeIaVlanVid"))
if mibBuilder.loadTexts: zyxelPppoeIaVlanEntry.setStatus('current')
zyPppoeIaVlanVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: zyPppoeIaVlanVid.setStatus('current')
zyPppoeIaVlanCircuitIdState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 9, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaVlanCircuitIdState.setStatus('current')
zyPppoeIaVlanRemoteIdState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 9, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaVlanRemoteIdState.setStatus('current')
zyPppoeIaVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyPppoeIaVlanRowStatus.setStatus('current')
zyPppoeIaMaxNumberOfPortVlans = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPppoeIaMaxNumberOfPortVlans.setStatus('current')
zyxelPppoeIaPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 11), )
if mibBuilder.loadTexts: zyxelPppoeIaPortVlanTable.setStatus('current')
zyxelPppoeIaPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 11, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "ZYXEL-PPPoE-MIB", "zyPppoeIaPortVlanVid"))
if mibBuilder.loadTexts: zyxelPppoeIaPortVlanEntry.setStatus('current')
zyPppoeIaPortVlanVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: zyPppoeIaPortVlanVid.setStatus('current')
zyPppoeIaPortVlanCircuitIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaPortVlanCircuitIdString.setStatus('current')
zyPppoeIaPortVlanRemoteIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPppoeIaPortVlanRemoteIdString.setStatus('current')
zyPppoeIaPortVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 67, 1, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyPppoeIaPortVlanRowStatus.setStatus('current')
mibBuilder.exportSymbols("ZYXEL-PPPoE-MIB", zyxelPppoeIaVlanEntry=zyxelPppoeIaVlanEntry, zyxelPppoeIaPortTable=zyxelPppoeIaPortTable, zyPppoeIaPortCircuitIdString=zyPppoeIaPortCircuitIdString, zyxelPppoeIaSetup=zyxelPppoeIaSetup, zyPppoeIaPortVlanRowStatus=zyPppoeIaPortVlanRowStatus, zyPppoeIaFlexibleCircuitIdSyntaxOption=zyPppoeIaFlexibleCircuitIdSyntaxOption, zyxelPppoe=zyxelPppoe, zyxelPppoeIaPortEntry=zyxelPppoeIaPortEntry, zyPppoeIaVlanCircuitIdState=zyPppoeIaVlanCircuitIdState, zyxelPppoeIaPortVlanTable=zyxelPppoeIaPortVlanTable, zyPppoeIaPortVlanRemoteIdString=zyPppoeIaPortVlanRemoteIdString, zyPppoeIaMaxNumberOfPortVlans=zyPppoeIaMaxNumberOfPortVlans, PYSNMP_MODULE_ID=zyxelPppoe, zyPppoeIaPortVlanCircuitIdString=zyPppoeIaPortVlanCircuitIdString, zyxelPppoeIaVlanTable=zyxelPppoeIaVlanTable, zyPppoeIaMaxNumberOfVlans=zyPppoeIaMaxNumberOfVlans, zyPppoeIaState=zyPppoeIaState, zyPppoeIaPortVlanVid=zyPppoeIaPortVlanVid, zyPppoeIaPortTrustState=zyPppoeIaPortTrustState, zyPppoeIaPortRemoteIdString=zyPppoeIaPortRemoteIdString, zyxelPppoeIaPortVlanEntry=zyxelPppoeIaPortVlanEntry, zyPppoeIaFlexibleCircuitIdSyntaxState=zyPppoeIaFlexibleCircuitIdSyntaxState, zyPppoeIaVlanRemoteIdState=zyPppoeIaVlanRemoteIdState, zyPppoeIaVlanVid=zyPppoeIaVlanVid, zyPppoeIaAccessNodeIdString=zyPppoeIaAccessNodeIdString, zyPppoeIaFlexibleCircuitIdSyntaxIdString=zyPppoeIaFlexibleCircuitIdSyntaxIdString, zyPppoeIaFlexibleCircuitIdSyntaxDelimiter=zyPppoeIaFlexibleCircuitIdSyntaxDelimiter, zyPppoeIaVlanRowStatus=zyPppoeIaVlanRowStatus)
