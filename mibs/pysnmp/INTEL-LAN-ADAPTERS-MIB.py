#
# PySNMP MIB module INTEL-LAN-ADAPTERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-LAN-ADAPTERS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, MibIdentifier, IpAddress, ObjectIdentity, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, TimeTicks, Counter64, NotificationType, Unsigned32, ModuleIdentity, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "IpAddress", "ObjectIdentity", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "TimeTicks", "Counter64", "NotificationType", "Unsigned32", "ModuleIdentity", "Bits", "Integer32")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
intellan = ModuleIdentity((1, 3, 6, 1, 4, 1, 3183))
intellan.setRevisions(('2012-10-31 00:00',))
if mibBuilder.loadTexts: intellan.setLastUpdated('201210310000Z')
if mibBuilder.loadTexts: intellan.setOrganization('Intel Corp')
intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2))
nic_products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7)).setLabel("nic-products")
intel_lan_adapters = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2)).setLabel("intel-lan-adapters")
component_description = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1)).setLabel("component-description")
class InterfaceIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

company = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: company.setStatus('current')
description = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: description.setStatus('current')
operatingSystem = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operatingSystem.setStatus('current')
mibVersion1_4_3 = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 4), DisplayString()).setLabel("mibVersion1-4-3").setMaxAccess("readonly")
if mibBuilder.loadTexts: mibVersion1_4_3.setStatus('current')
mibVersionSupported = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibVersionSupported.setStatus('current')
agentExtensionVersion = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentExtensionVersion.setStatus('current')
status = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("baseDriverNotLoadedAnsNotLoaded", 0), ("baseDriverLoadedAnsNotLoaded", 1), ("baseDriverNotLoadedAnsLoaded", 2), ("baseDriverLoadedAnsLoaded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: status.setStatus('current')
adaptersTables = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2))
genericAdaptersAttrTables = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1))
genericAdaptersAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 1), )
if mibBuilder.loadTexts: genericAdaptersAttrTable.setStatus('current')
genericAdapterAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 1, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "adapterIndex"))
if mibBuilder.loadTexts: genericAdapterAttrEntry.setStatus('current')
adapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterIndex.setStatus('current')
adapterName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterName.setStatus('current')
adapterType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("standAlone", 0), ("teamMember", 1), ("virtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterType.setStatus('current')
adapterDriverLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("loaded", 0), ("notLoaded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverLoadStatus.setStatus('current')
genericAdaptersDriversAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2), )
if mibBuilder.loadTexts: genericAdaptersDriversAttrTable.setStatus('current')
genericAdapterDriverAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "adapterIndex"))
if mibBuilder.loadTexts: genericAdapterDriverAttrEntry.setStatus('current')
adapterDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverName.setStatus('current')
adapterDriverInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverInfo.setStatus('current')
adapterDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverVersion.setStatus('current')
adapterDriverPath = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverPath.setStatus('current')
adapterDriverDate = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverDate.setStatus('current')
adapterDriverSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterDriverSize.setStatus('current')
adapterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterIpAddress.setStatus('current')
genericAdaptersTrafficStatsAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3), )
if mibBuilder.loadTexts: genericAdaptersTrafficStatsAttrTable.setStatus('current')
genericAdapterTrafficStatsAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "adapterIndex"))
if mibBuilder.loadTexts: genericAdapterTrafficStatsAttrEntry.setStatus('current')
adapterRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterRxPackets.setStatus('current')
adapterTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterTxPackets.setStatus('current')
adapterRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterRxBytes.setStatus('current')
adapterTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterTxBytes.setStatus('current')
adapterRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterRxErrors.setStatus('current')
adapterTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterTxErrors.setStatus('current')
adapterRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterRxDropped.setStatus('current')
adapterTxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterTxDropped.setStatus('current')
adapterRxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterRxMulticast.setStatus('current')
adapterCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterCollisions.setStatus('current')
physicalAdaptersAttrTables = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2))
physicalAdaptersAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1), )
if mibBuilder.loadTexts: physicalAdaptersAttrTable.setStatus('current')
physicalAdapterAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterAttrEntry.setStatus('current')
physicalAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterIndex.setStatus('current')
physicalAdapterLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("not-available", -1), ("link-up", 0), ("link-down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterLinkStatus.setStatus('current')
physicalAdapterLinkStatusChangesCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterLinkStatusChangesCounter.setStatus('current')
physicalAdapterSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterSpeed.setStatus('current')
physicalAdapterDplxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-available", 0), ("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterDplxMode.setStatus('current')
physicalAdapterAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterAutoNegotiation.setStatus('current')
physicalAdapterPciBus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterPciBus.setStatus('current')
physicalAdapterPciSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterPciSlot.setStatus('current')
physicalAdapterIrq = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterIrq.setStatus('current')
physicalAdapterCurrentNA = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 10), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterCurrentNA.setStatus('current')
physicalAdapterPermanentNA = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 11), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterPermanentNA.setStatus('current')
physicalAdapterOnlineDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("not-available", -1), ("failed", 0), ("passed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterOnlineDiagStatus.setStatus('current')
physicalAdapterExpressTeamed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-available", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterExpressTeamed.setStatus('current')
physicalAdapterExpressTeamBundleId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterExpressTeamBundleId.setStatus('current')
physicalAdaptersAttrOffloadTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2), )
if mibBuilder.loadTexts: physicalAdaptersAttrOffloadTable.setStatus('current')
physicalAdapterAttrOffloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterAttrOffloadEntry.setStatus('current')
physicalAdapterTcpRxChecksumOffLoadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterTcpRxChecksumOffLoadEnable.setStatus('current')
physicalAdapterTcpRxChecksumBad = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterTcpRxChecksumBad.setStatus('current')
physicalAdapterTcpTxChecksumOffLoadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterTcpTxChecksumOffLoadEnable.setStatus('current')
physicalAdapterIpv4RxChecksumOffLoadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterIpv4RxChecksumOffLoadEnable.setStatus('current')
physicalAdapterIpv4TxChecksumOffLoadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterIpv4TxChecksumOffLoadEnable.setStatus('current')
physicalAdapterIpv4TCPSegmentationOffLoadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAdapterIpv4TCPSegmentationOffLoadEnable.setStatus('current')
virtualAdaptersAttrTables = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3))
virtualAdaptersAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 1), )
if mibBuilder.loadTexts: virtualAdaptersAttrTable.setStatus('current')
virtualAdapterAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 1, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "virtualAdapterIndex"))
if mibBuilder.loadTexts: virtualAdapterAttrEntry.setStatus('current')
virtualAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAdapterIndex.setStatus('current')
virtualAdapterAnsId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAdapterAnsId.setStatus('current')
virtualAdaptersVlanAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 2), )
if mibBuilder.loadTexts: virtualAdaptersVlanAttrTable.setStatus('current')
virtualAdapterVlanAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 2, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "virtualAdapterIndex"))
if mibBuilder.loadTexts: virtualAdapterVlanAttrEntry.setStatus('current')
virtualAdapterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualAdapterVlanId.setStatus('current')
ansAttrTables = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4))
ansAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 1), )
if mibBuilder.loadTexts: ansAttrTable.setStatus('current')
ansAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 1, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: ansAttrEntry.setStatus('current')
ansId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansId.setStatus('current')
ansNumberOfMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansNumberOfMembers.setStatus('current')
ansNumberOfVirtualAdapters = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansNumberOfVirtualAdapters.setStatus('current')
ansVlansAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 2), )
if mibBuilder.loadTexts: ansVlansAttrTable.setStatus('current')
ansVlanAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 2, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: ansVlanAttrEntry.setStatus('current')
ansVlanTaggingType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("tag-802-1Q", 1), ("tag-802-1P", 2), ("tag-802-3AC", 3), ("tag-iSL", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansVlanTaggingType.setStatus('current')
ansTeamsAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3), )
if mibBuilder.loadTexts: ansTeamsAttrTable.setStatus('current')
ansTeamAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: ansTeamAttrEntry.setStatus('current')
ansTeamName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamName.setStatus('current')
ansTeamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("adapter-fault-tolerance", 0), ("adaptive-load-balancing", 1), ("static-link-aggregation", 2), ("iEEE-802-3ad", 4), ("switch-fault-tolerance", 5), ("none", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamMode.setStatus('current')
ansTeamLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("up", 0), ("down", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamLinkState.setStatus('current')
ansTeamSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamSpeed.setStatus('current')
ansTeamProbesState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("probes-enabled", 0), ("probes-disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamProbesState.setStatus('current')
ansTeamProbesMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("broadcast", 0), ("multicast", 1), ("not-available", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamProbesMode.setStatus('current')
ansTeamLoadBalanceRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("not-available", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamLoadBalanceRefresh.setStatus('current')
ansTeamProbesSendTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("not-available", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamProbesSendTime.setStatus('current')
ansTeamPreferredPrimaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("not-available", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamPreferredPrimaryIndex.setStatus('current')
ansTeamCurrentPrimaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("not-available", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamCurrentPrimaryIndex.setStatus('current')
ansTeamPreviousPrimaryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1))).clone(namedValues=NamedValues(("not-available", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamPreviousPrimaryIndex.setStatus('current')
ansTeamFailoverCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamFailoverCounter.setStatus('current')
ansTeamSlaCompatible = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("not-available", -1), ("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamSlaCompatible.setStatus('current')
ansTeamAggrSelectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("not-available", -1), ("bandwidth", 0), ("count", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamAggrSelectionMode.setStatus('current')
ansTeamRlbSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1))).clone(namedValues=NamedValues(("not-available", -1), ("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamRlbSupport.setStatus('current')
ansMembersAttrTables = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5))
ansMembersAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 1), )
if mibBuilder.loadTexts: ansMembersAttrTable.setStatus('current')
ansMemberAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 1, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "ansMemberIndex"))
if mibBuilder.loadTexts: ansMemberAttrEntry.setStatus('current')
ansMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansMemberIndex.setStatus('current')
ansMemberAnsId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansMemberAnsId.setStatus('current')
ansTeamMembersAttrTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 2), )
if mibBuilder.loadTexts: ansTeamMembersAttrTable.setStatus('current')
ansTeamMemberAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 2, 1), ).setIndexNames((0, "INTEL-LAN-ADAPTERS-MIB", "ansMemberIndex"))
if mibBuilder.loadTexts: ansTeamMemberAttrEntry.setStatus('current')
ansTeamMemberState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("active", 0), ("disabled", 1), ("standby", 2), ("active-secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamMemberState.setStatus('current')
ansTeamMemberFailureCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamMemberFailureCounter.setStatus('current')
ansTeamMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTeamMemberPriority.setStatus('current')
events = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3))
physicalAdaptersEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1))
physicalAdaptersTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1))
physicalAdapterLinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterLinkUpTrap.setStatus('current')
physicalAdapterLinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1, 2)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterLinkDownTrap.setStatus('current')
physicalAdapterAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1, 3)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterAddedTrap.setStatus('current')
physicalAdapterRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1, 4)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterRemovedTrap.setStatus('current')
physicalAdapterOnlineDiagPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1, 5)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterOnlineDiagPassedTrap.setStatus('current')
physicalAdapterOnlineDiagFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 1, 6)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"))
if mibBuilder.loadTexts: physicalAdapterOnlineDiagFailedTrap.setStatus('current')
physicalAdapterLinkUpDownTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalAdapterLinkUpDownTrapEnable.setStatus('current')
physicalAdapterAddedRemovedTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalAdapterAddedRemovedTrapEnable.setStatus('current')
physicalAdapterOnlineDiagPassedFailedTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalAdapterOnlineDiagPassedFailedTrapEnable.setStatus('current')
virtualAdaptersEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 2))
virtualAdaptersTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 2, 1))
virtualAdapterAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 2, 1, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: virtualAdapterAddedTrap.setStatus('current')
virtualAdapterRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 2, 1, 2)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterIndex"))
if mibBuilder.loadTexts: virtualAdapterRemovedTrap.setStatus('current')
virtualAdaptersTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualAdaptersTrapEnable.setStatus('current')
ansEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 3))
ansTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 3, 1))
ansTeamFailoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 3, 1, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansId"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamCurrentPrimaryIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamPreviousPrimaryIndex"))
if mibBuilder.loadTexts: ansTeamFailoverTrap.setStatus('current')
ansAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 3, 1, 2)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: ansAddedTrap.setStatus('current')
ansRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 3, 1, 3)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: ansRemovedTrap.setStatus('current')
ansTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansTrapEnable.setStatus('current')
teamMembersEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 4))
teamMembersTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 4, 1))
teamMemberAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 4, 1, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansMemberIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansId"))
if mibBuilder.loadTexts: teamMemberAddedTrap.setStatus('current')
teamMemberRemovedTrap = NotificationType((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 4, 1, 2)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansMemberIndex"))
if mibBuilder.loadTexts: teamMemberRemovedTrap.setStatus('current')
teamMemberTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 7, 2, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teamMemberTrapEnable.setStatus('current')
intellan_conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1)).setLabel("intellan-conformance")
phyAdapterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 1))
phyAdapterNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 2))
miscGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 3))
vtAdapterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 4))
vtAdapterNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 5))
ansGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 6))
ansNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 7))
teamGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 8))
teamNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 9))
intellanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3183, 1, 10))
intellan_compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3183, 1, 10, 1)).setLabel("intellan-compliance").setObjects(("INTEL-LAN-ADAPTERS-MIB", "phyAdapterGroup"), ("INTEL-LAN-ADAPTERS-MIB", "phyAdapterNotificationGroup"), ("INTEL-LAN-ADAPTERS-MIB", "miscGroup"), ("INTEL-LAN-ADAPTERS-MIB", "vtAdapterGroup"), ("INTEL-LAN-ADAPTERS-MIB", "vtAdapterNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    intellan_compliance = intellan_compliance.setStatus('current')
phyAdapterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3183, 1, 1, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterOnlineDiagPassedFailedTrapEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterAddedRemovedTrapEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterLinkUpDownTrapEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIpv4TCPSegmentationOffLoadEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIpv4TxChecksumOffLoadEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIpv4RxChecksumOffLoadEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterTcpTxChecksumOffLoadEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterTcpRxChecksumBad"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterTcpRxChecksumOffLoadEnable"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterExpressTeamBundleId"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterExpressTeamed"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterOnlineDiagStatus"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterPermanentNA"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterCurrentNA"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIrq"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterPciSlot"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterPciBus"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterAutoNegotiation"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterDplxMode"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterSpeed"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterLinkStatusChangesCounter"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterLinkStatus"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterIndex"), ("INTEL-LAN-ADAPTERS-MIB", "adapterCollisions"), ("INTEL-LAN-ADAPTERS-MIB", "adapterRxMulticast"), ("INTEL-LAN-ADAPTERS-MIB", "adapterTxDropped"), ("INTEL-LAN-ADAPTERS-MIB", "adapterRxDropped"), ("INTEL-LAN-ADAPTERS-MIB", "adapterTxErrors"), ("INTEL-LAN-ADAPTERS-MIB", "adapterRxErrors"), ("INTEL-LAN-ADAPTERS-MIB", "adapterTxBytes"), ("INTEL-LAN-ADAPTERS-MIB", "adapterRxBytes"), ("INTEL-LAN-ADAPTERS-MIB", "adapterTxPackets"), ("INTEL-LAN-ADAPTERS-MIB", "adapterRxPackets"), ("INTEL-LAN-ADAPTERS-MIB", "adapterIpAddress"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverSize"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverDate"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverPath"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverVersion"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverInfo"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverName"), ("INTEL-LAN-ADAPTERS-MIB", "adapterDriverLoadStatus"), ("INTEL-LAN-ADAPTERS-MIB", "adapterType"), ("INTEL-LAN-ADAPTERS-MIB", "adapterName"), ("INTEL-LAN-ADAPTERS-MIB", "adapterIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyAdapterGroup = phyAdapterGroup.setStatus('current')
phyAdapterNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3183, 1, 2, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterOnlineDiagFailedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterOnlineDiagPassedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterRemovedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterAddedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterLinkDownTrap"), ("INTEL-LAN-ADAPTERS-MIB", "physicalAdapterLinkUpTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyAdapterNotificationGroup = phyAdapterNotificationGroup.setStatus('current')
vtAdapterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3183, 1, 4, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "virtualAdaptersTrapEnable"), ("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterVlanId"), ("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterAnsId"), ("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtAdapterGroup = vtAdapterGroup.setStatus('current')
vtAdapterNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3183, 1, 5, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterRemovedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "virtualAdapterAddedTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtAdapterNotificationGroup = vtAdapterNotificationGroup.setStatus('current')
ansGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3183, 1, 6, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansId"), ("INTEL-LAN-ADAPTERS-MIB", "ansNumberOfMembers"), ("INTEL-LAN-ADAPTERS-MIB", "ansNumberOfVirtualAdapters"), ("INTEL-LAN-ADAPTERS-MIB", "ansVlanTaggingType"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamName"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamMode"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamLinkState"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamSpeed"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamProbesState"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamProbesMode"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamLoadBalanceRefresh"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamProbesSendTime"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamPreferredPrimaryIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamCurrentPrimaryIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamPreviousPrimaryIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamFailoverCounter"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamSlaCompatible"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamAggrSelectionMode"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamRlbSupport"), ("INTEL-LAN-ADAPTERS-MIB", "ansMemberIndex"), ("INTEL-LAN-ADAPTERS-MIB", "ansMemberAnsId"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamMemberState"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamMemberFailureCounter"), ("INTEL-LAN-ADAPTERS-MIB", "ansTeamMemberPriority"), ("INTEL-LAN-ADAPTERS-MIB", "ansTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ansGroup = ansGroup.setStatus('current')
ansNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3183, 1, 7, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "ansTeamFailoverTrap"), ("INTEL-LAN-ADAPTERS-MIB", "ansAddedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "ansRemovedTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ansNotificationGroup = ansNotificationGroup.setStatus('current')
teamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3183, 1, 8, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "teamMemberTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    teamGroup = teamGroup.setStatus('current')
teamNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3183, 1, 9, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "teamMemberAddedTrap"), ("INTEL-LAN-ADAPTERS-MIB", "teamMemberRemovedTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    teamNotificationGroup = teamNotificationGroup.setStatus('current')
miscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3183, 1, 3, 1)).setObjects(("INTEL-LAN-ADAPTERS-MIB", "status"), ("INTEL-LAN-ADAPTERS-MIB", "agentExtensionVersion"), ("INTEL-LAN-ADAPTERS-MIB", "mibVersionSupported"), ("INTEL-LAN-ADAPTERS-MIB", "mibVersion1_4_3"), ("INTEL-LAN-ADAPTERS-MIB", "operatingSystem"), ("INTEL-LAN-ADAPTERS-MIB", "description"), ("INTEL-LAN-ADAPTERS-MIB", "company"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    miscGroup = miscGroup.setStatus('current')
mibBuilder.exportSymbols("INTEL-LAN-ADAPTERS-MIB", ansTeamProbesMode=ansTeamProbesMode, physicalAdapterOnlineDiagPassedFailedTrapEnable=physicalAdapterOnlineDiagPassedFailedTrapEnable, adapterRxDropped=adapterRxDropped, physicalAdapterPciBus=physicalAdapterPciBus, miscGroups=miscGroups, adapterName=adapterName, adapterIpAddress=adapterIpAddress, ansMemberIndex=ansMemberIndex, nic_products=nic_products, ansTeamFailoverCounter=ansTeamFailoverCounter, teamGroup=teamGroup, virtualAdapterIndex=virtualAdapterIndex, teamMembersEvents=teamMembersEvents, miscGroup=miscGroup, adapterType=adapterType, physicalAdapterOnlineDiagPassedTrap=physicalAdapterOnlineDiagPassedTrap, physicalAdapterTcpRxChecksumOffLoadEnable=physicalAdapterTcpRxChecksumOffLoadEnable, adapterTxPackets=adapterTxPackets, virtualAdapterAttrEntry=virtualAdapterAttrEntry, virtualAdaptersTrapEnable=virtualAdaptersTrapEnable, ansTeamSlaCompatible=ansTeamSlaCompatible, phyAdapterNotificationGroup=phyAdapterNotificationGroup, physicalAdaptersAttrTables=physicalAdaptersAttrTables, physicalAdapterExpressTeamed=physicalAdapterExpressTeamed, physicalAdapterSpeed=physicalAdapterSpeed, agentExtensionVersion=agentExtensionVersion, ansTeamMemberPriority=ansTeamMemberPriority, adapterRxErrors=adapterRxErrors, virtualAdaptersTraps=virtualAdaptersTraps, intellan=intellan, ansTraps=ansTraps, adaptersTables=adaptersTables, adapterRxPackets=adapterRxPackets, teamMemberAddedTrap=teamMemberAddedTrap, ansNotificationGroups=ansNotificationGroups, physicalAdapterLinkUpDownTrapEnable=physicalAdapterLinkUpDownTrapEnable, physicalAdaptersAttrOffloadTable=physicalAdaptersAttrOffloadTable, physicalAdapterAttrEntry=physicalAdapterAttrEntry, physicalAdaptersTraps=physicalAdaptersTraps, ansMembersAttrTables=ansMembersAttrTables, virtualAdapterRemovedTrap=virtualAdapterRemovedTrap, PYSNMP_MODULE_ID=intellan, adapterDriverInfo=adapterDriverInfo, virtualAdapterVlanAttrEntry=virtualAdapterVlanAttrEntry, virtualAdapterAnsId=virtualAdapterAnsId, ansTeamName=ansTeamName, ansGroups=ansGroups, operatingSystem=operatingSystem, physicalAdapterLinkUpTrap=physicalAdapterLinkUpTrap, virtualAdapterVlanId=virtualAdapterVlanId, ansTeamMemberState=ansTeamMemberState, ansTeamMemberFailureCounter=ansTeamMemberFailureCounter, adapterTxErrors=adapterTxErrors, genericAdapterAttrEntry=genericAdapterAttrEntry, mibVersionSupported=mibVersionSupported, physicalAdapterPermanentNA=physicalAdapterPermanentNA, adapterDriverDate=adapterDriverDate, physicalAdapterIpv4TxChecksumOffLoadEnable=physicalAdapterIpv4TxChecksumOffLoadEnable, physicalAdapterIpv4TCPSegmentationOffLoadEnable=physicalAdapterIpv4TCPSegmentationOffLoadEnable, intellan_conformance=intellan_conformance, intel=intel, ansVlansAttrTable=ansVlansAttrTable, adapterIndex=adapterIndex, genericAdaptersAttrTable=genericAdaptersAttrTable, physicalAdapterIrq=physicalAdapterIrq, ansTeamMode=ansTeamMode, ansNumberOfMembers=ansNumberOfMembers, company=company, ansTeamPreviousPrimaryIndex=ansTeamPreviousPrimaryIndex, physicalAdapterCurrentNA=physicalAdapterCurrentNA, ansTeamLinkState=ansTeamLinkState, ansMembersAttrTable=ansMembersAttrTable, physicalAdaptersAttrTable=physicalAdaptersAttrTable, physicalAdapterAddedRemovedTrapEnable=physicalAdapterAddedRemovedTrapEnable, component_description=component_description, ansTeamSpeed=ansTeamSpeed, physicalAdapterPciSlot=physicalAdapterPciSlot, vtAdapterNotificationGroups=vtAdapterNotificationGroups, intel_lan_adapters=intel_lan_adapters, intellan_compliance=intellan_compliance, ansVlanAttrEntry=ansVlanAttrEntry, mibVersion1_4_3=mibVersion1_4_3, description=description, adapterDriverVersion=adapterDriverVersion, ansTeamMemberAttrEntry=ansTeamMemberAttrEntry, virtualAdaptersEvents=virtualAdaptersEvents, genericAdapterDriverAttrEntry=genericAdapterDriverAttrEntry, physicalAdapterOnlineDiagFailedTrap=physicalAdapterOnlineDiagFailedTrap, physicalAdapterAttrOffloadEntry=physicalAdapterAttrOffloadEntry, physicalAdapterIpv4RxChecksumOffLoadEnable=physicalAdapterIpv4RxChecksumOffLoadEnable, ansNumberOfVirtualAdapters=ansNumberOfVirtualAdapters, physicalAdapterTcpTxChecksumOffLoadEnable=physicalAdapterTcpTxChecksumOffLoadEnable, ansAttrTable=ansAttrTable, ansTeamCurrentPrimaryIndex=ansTeamCurrentPrimaryIndex, teamMemberRemovedTrap=teamMemberRemovedTrap, ansGroup=ansGroup, ansTeamAggrSelectionMode=ansTeamAggrSelectionMode, adapterRxMulticast=adapterRxMulticast, ansEvents=ansEvents, ansAttrEntry=ansAttrEntry, ansTeamAttrEntry=ansTeamAttrEntry, adapterDriverName=adapterDriverName, physicalAdapterLinkStatusChangesCounter=physicalAdapterLinkStatusChangesCounter, ansTeamRlbSupport=ansTeamRlbSupport, ansMemberAnsId=ansMemberAnsId, adapterCollisions=adapterCollisions, teamNotificationGroups=teamNotificationGroups, ansTeamsAttrTable=ansTeamsAttrTable, vtAdapterNotificationGroup=vtAdapterNotificationGroup, virtualAdaptersAttrTable=virtualAdaptersAttrTable, physicalAdapterLinkStatus=physicalAdapterLinkStatus, ansTeamPreferredPrimaryIndex=ansTeamPreferredPrimaryIndex, ansTeamProbesSendTime=ansTeamProbesSendTime, teamGroups=teamGroups, vtAdapterGroup=vtAdapterGroup, ansMemberAttrEntry=ansMemberAttrEntry, intellanCompliances=intellanCompliances, ansTeamFailoverTrap=ansTeamFailoverTrap, status=status, ansAttrTables=ansAttrTables, physicalAdapterAddedTrap=physicalAdapterAddedTrap, phyAdapterGroups=phyAdapterGroups, adapterDriverLoadStatus=adapterDriverLoadStatus, genericAdaptersAttrTables=genericAdaptersAttrTables, ansTeamMembersAttrTable=ansTeamMembersAttrTable, events=events, ansRemovedTrap=ansRemovedTrap, virtualAdaptersAttrTables=virtualAdaptersAttrTables, ansTeamProbesState=ansTeamProbesState, physicalAdapterLinkDownTrap=physicalAdapterLinkDownTrap, physicalAdapterTcpRxChecksumBad=physicalAdapterTcpRxChecksumBad, phyAdapterNotificationGroups=phyAdapterNotificationGroups, products=products, physicalAdapterIndex=physicalAdapterIndex, physicalAdaptersEvents=physicalAdaptersEvents, ansVlanTaggingType=ansVlanTaggingType, genericAdaptersTrafficStatsAttrTable=genericAdaptersTrafficStatsAttrTable, physicalAdapterExpressTeamBundleId=physicalAdapterExpressTeamBundleId, ansAddedTrap=ansAddedTrap, physicalAdapterRemovedTrap=physicalAdapterRemovedTrap, vtAdapterGroups=vtAdapterGroups, ansTrapEnable=ansTrapEnable, teamNotificationGroup=teamNotificationGroup, adapterDriverPath=adapterDriverPath, teamMembersTraps=teamMembersTraps, ansId=ansId, ansTeamLoadBalanceRefresh=ansTeamLoadBalanceRefresh, adapterTxDropped=adapterTxDropped, virtualAdaptersVlanAttrTable=virtualAdaptersVlanAttrTable, physicalAdapterOnlineDiagStatus=physicalAdapterOnlineDiagStatus, adapterRxBytes=adapterRxBytes, genericAdapterTrafficStatsAttrEntry=genericAdapterTrafficStatsAttrEntry, genericAdaptersDriversAttrTable=genericAdaptersDriversAttrTable, adapterTxBytes=adapterTxBytes, phyAdapterGroup=phyAdapterGroup, virtualAdapterAddedTrap=virtualAdapterAddedTrap, InterfaceIndex=InterfaceIndex, teamMemberTrapEnable=teamMemberTrapEnable, adapterDriverSize=adapterDriverSize, ansNotificationGroup=ansNotificationGroup, physicalAdapterAutoNegotiation=physicalAdapterAutoNegotiation, physicalAdapterDplxMode=physicalAdapterDplxMode)
