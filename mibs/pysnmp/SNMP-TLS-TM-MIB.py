#
# PySNMP MIB module SNMP-TLS-TM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SNMP-TLS-TM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:00:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
snmpTargetAddrName, snmpTargetParamsName = mibBuilder.importSymbols("SNMP-TARGET-MIB", "snmpTargetAddrName", "snmpTargetParamsName")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, ObjectIdentity, mib_2, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, NotificationType, TimeTicks, iso, MibIdentifier, Gauge32, ModuleIdentity, snmpDomains, IpAddress, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "mib-2", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "NotificationType", "TimeTicks", "iso", "MibIdentifier", "Gauge32", "ModuleIdentity", "snmpDomains", "IpAddress", "Unsigned32", "Bits")
TimeStamp, TextualConvention, StorageType, AutonomousType, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "StorageType", "AutonomousType", "DisplayString", "RowStatus")
snmpTlstmMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 198))
snmpTlstmMIB.setRevisions(('2011-07-19 00:00', '2010-05-07 00:00',))
if mibBuilder.loadTexts: snmpTlstmMIB.setLastUpdated('201107190000Z')
if mibBuilder.loadTexts: snmpTlstmMIB.setOrganization('ISMS Working Group')
snmpTlstmNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 0))
snmpTlstmIdentities = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 1))
snmpTlstmObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 2))
snmpTlstmConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 3))
snmpTLSTCPDomain = ObjectIdentity((1, 3, 6, 1, 6, 1, 8))
if mibBuilder.loadTexts: snmpTLSTCPDomain.setStatus('current')
snmpDTLSUDPDomain = ObjectIdentity((1, 3, 6, 1, 6, 1, 9))
if mibBuilder.loadTexts: snmpDTLSUDPDomain.setStatus('current')
class SnmpTLSAddress(TextualConvention, OctetString):
    reference = 'RFC 1123: Requirements for Internet Hosts - Application and Support RFC 5890: Internationalized Domain Names for Applications (IDNA): Definitions and Document Framework RFC 5952: A Recommendation for IPv6 Address Text Representation '
    status = 'current'
    displayHint = '1a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 255)

class SnmpTLSFingerprint(TextualConvention, OctetString):
    reference = 'RFC 5246: The Transport Layer Security (TLS) Protocol Version 1.2 http://www.iana.org/assignments/tls-parameters/ '
    status = 'current'
    displayHint = '1x:1x'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

snmpTlstmCertToTSNMIdentities = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 1, 1))
snmpTlstmCertSpecified = ObjectIdentity((1, 3, 6, 1, 2, 1, 198, 1, 1, 1))
if mibBuilder.loadTexts: snmpTlstmCertSpecified.setStatus('current')
snmpTlstmCertSANRFC822Name = ObjectIdentity((1, 3, 6, 1, 2, 1, 198, 1, 1, 2))
if mibBuilder.loadTexts: snmpTlstmCertSANRFC822Name.setStatus('current')
snmpTlstmCertSANDNSName = ObjectIdentity((1, 3, 6, 1, 2, 1, 198, 1, 1, 3))
if mibBuilder.loadTexts: snmpTlstmCertSANDNSName.setStatus('current')
snmpTlstmCertSANIpAddress = ObjectIdentity((1, 3, 6, 1, 2, 1, 198, 1, 1, 4))
if mibBuilder.loadTexts: snmpTlstmCertSANIpAddress.setStatus('current')
snmpTlstmCertSANAny = ObjectIdentity((1, 3, 6, 1, 2, 1, 198, 1, 1, 5))
if mibBuilder.loadTexts: snmpTlstmCertSANAny.setStatus('current')
snmpTlstmCertCommonName = ObjectIdentity((1, 3, 6, 1, 2, 1, 198, 1, 1, 6))
if mibBuilder.loadTexts: snmpTlstmCertCommonName.setStatus('current')
snmpTlstmSession = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 2, 1))
snmpTlstmSessionOpens = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionOpens.setStatus('current')
snmpTlstmSessionClientCloses = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionClientCloses.setStatus('current')
snmpTlstmSessionOpenErrors = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionOpenErrors.setStatus('current')
snmpTlstmSessionAccepts = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionAccepts.setStatus('current')
snmpTlstmSessionServerCloses = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionServerCloses.setStatus('current')
snmpTlstmSessionNoSessions = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionNoSessions.setStatus('current')
snmpTlstmSessionInvalidClientCertificates = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionInvalidClientCertificates.setStatus('current')
snmpTlstmSessionUnknownServerCertificate = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionUnknownServerCertificate.setStatus('current')
snmpTlstmSessionInvalidServerCertificates = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionInvalidServerCertificates.setStatus('current')
snmpTlstmSessionInvalidCaches = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmSessionInvalidCaches.setStatus('current')
snmpTlstmConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 2, 2))
snmpTlstmCertificateMapping = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 2, 2, 1))
snmpTlstmCertToTSNCount = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmCertToTSNCount.setStatus('current')
snmpTlstmCertToTSNTableLastChanged = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmCertToTSNTableLastChanged.setStatus('current')
snmpTlstmCertToTSNTable = MibTable((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3), )
if mibBuilder.loadTexts: snmpTlstmCertToTSNTable.setStatus('current')
snmpTlstmCertToTSNEntry = MibTableRow((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1), ).setIndexNames((0, "SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNID"))
if mibBuilder.loadTexts: snmpTlstmCertToTSNEntry.setStatus('current')
snmpTlstmCertToTSNID = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: snmpTlstmCertToTSNID.setStatus('current')
snmpTlstmCertToTSNFingerprint = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1, 2), SnmpTLSFingerprint().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmCertToTSNFingerprint.setStatus('current')
snmpTlstmCertToTSNMapType = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1, 3), AutonomousType().clone((1, 3, 6, 1, 2, 1, 198, 1, 1, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmCertToTSNMapType.setStatus('current')
snmpTlstmCertToTSNData = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmCertToTSNData.setStatus('current')
snmpTlstmCertToTSNStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmCertToTSNStorageType.setStatus('current')
snmpTlstmCertToTSNRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmCertToTSNRowStatus.setStatus('current')
snmpTlstmParamsCount = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmParamsCount.setStatus('current')
snmpTlstmParamsTableLastChanged = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmParamsTableLastChanged.setStatus('current')
snmpTlstmParamsTable = MibTable((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 6), )
if mibBuilder.loadTexts: snmpTlstmParamsTable.setStatus('current')
snmpTlstmParamsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 6, 1), ).setIndexNames((1, "SNMP-TARGET-MIB", "snmpTargetParamsName"))
if mibBuilder.loadTexts: snmpTlstmParamsEntry.setStatus('current')
snmpTlstmParamsClientFingerprint = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 6, 1, 1), SnmpTLSFingerprint()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmParamsClientFingerprint.setStatus('current')
snmpTlstmParamsStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 6, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmParamsStorageType.setStatus('current')
snmpTlstmParamsRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmParamsRowStatus.setStatus('current')
snmpTlstmAddrCount = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmAddrCount.setStatus('current')
snmpTlstmAddrTableLastChanged = MibScalar((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTlstmAddrTableLastChanged.setStatus('current')
snmpTlstmAddrTable = MibTable((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 9), )
if mibBuilder.loadTexts: snmpTlstmAddrTable.setStatus('current')
snmpTlstmAddrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 9, 1), ).setIndexNames((1, "SNMP-TARGET-MIB", "snmpTargetAddrName"))
if mibBuilder.loadTexts: snmpTlstmAddrEntry.setStatus('current')
snmpTlstmAddrServerFingerprint = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 9, 1, 1), SnmpTLSFingerprint()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmAddrServerFingerprint.setStatus('current')
snmpTlstmAddrServerIdentity = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 9, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmAddrServerIdentity.setStatus('current')
snmpTlstmAddrStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 9, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmAddrStorageType.setStatus('current')
snmpTlstmAddrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 198, 2, 2, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTlstmAddrRowStatus.setStatus('current')
snmpTlstmServerCertificateUnknown = NotificationType((1, 3, 6, 1, 2, 1, 198, 0, 1)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmSessionUnknownServerCertificate"))
if mibBuilder.loadTexts: snmpTlstmServerCertificateUnknown.setStatus('current')
snmpTlstmServerInvalidCertificate = NotificationType((1, 3, 6, 1, 2, 1, 198, 0, 2)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmAddrServerFingerprint"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionInvalidServerCertificates"))
if mibBuilder.loadTexts: snmpTlstmServerInvalidCertificate.setStatus('current')
snmpTlstmCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 3, 1))
snmpTlstmGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 198, 3, 2))
snmpTlstmCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 198, 3, 1, 1)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmStatsGroup"), ("SNMP-TLS-TM-MIB", "snmpTlstmIncomingGroup"), ("SNMP-TLS-TM-MIB", "snmpTlstmOutgoingGroup"), ("SNMP-TLS-TM-MIB", "snmpTlstmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpTlstmCompliance = snmpTlstmCompliance.setStatus('current')
snmpTlstmStatsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 198, 3, 2, 1)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmSessionOpens"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionClientCloses"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionOpenErrors"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionAccepts"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionServerCloses"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionNoSessions"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionInvalidClientCertificates"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionUnknownServerCertificate"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionInvalidServerCertificates"), ("SNMP-TLS-TM-MIB", "snmpTlstmSessionInvalidCaches"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpTlstmStatsGroup = snmpTlstmStatsGroup.setStatus('current')
snmpTlstmIncomingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 198, 3, 2, 2)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNCount"), ("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNTableLastChanged"), ("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNFingerprint"), ("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNMapType"), ("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNData"), ("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNStorageType"), ("SNMP-TLS-TM-MIB", "snmpTlstmCertToTSNRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpTlstmIncomingGroup = snmpTlstmIncomingGroup.setStatus('current')
snmpTlstmOutgoingGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 198, 3, 2, 3)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmParamsCount"), ("SNMP-TLS-TM-MIB", "snmpTlstmParamsTableLastChanged"), ("SNMP-TLS-TM-MIB", "snmpTlstmParamsClientFingerprint"), ("SNMP-TLS-TM-MIB", "snmpTlstmParamsStorageType"), ("SNMP-TLS-TM-MIB", "snmpTlstmParamsRowStatus"), ("SNMP-TLS-TM-MIB", "snmpTlstmAddrCount"), ("SNMP-TLS-TM-MIB", "snmpTlstmAddrTableLastChanged"), ("SNMP-TLS-TM-MIB", "snmpTlstmAddrServerFingerprint"), ("SNMP-TLS-TM-MIB", "snmpTlstmAddrServerIdentity"), ("SNMP-TLS-TM-MIB", "snmpTlstmAddrStorageType"), ("SNMP-TLS-TM-MIB", "snmpTlstmAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpTlstmOutgoingGroup = snmpTlstmOutgoingGroup.setStatus('current')
snmpTlstmNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 198, 3, 2, 4)).setObjects(("SNMP-TLS-TM-MIB", "snmpTlstmServerCertificateUnknown"), ("SNMP-TLS-TM-MIB", "snmpTlstmServerInvalidCertificate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpTlstmNotificationGroup = snmpTlstmNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("SNMP-TLS-TM-MIB", snmpTlstmCertToTSNEntry=snmpTlstmCertToTSNEntry, snmpTlstmAddrRowStatus=snmpTlstmAddrRowStatus, snmpTlstmNotifications=snmpTlstmNotifications, snmpTlstmOutgoingGroup=snmpTlstmOutgoingGroup, snmpTlstmSessionServerCloses=snmpTlstmSessionServerCloses, snmpTlstmCertToTSNCount=snmpTlstmCertToTSNCount, snmpTlstmCompliances=snmpTlstmCompliances, snmpTlstmNotificationGroup=snmpTlstmNotificationGroup, snmpTlstmCertificateMapping=snmpTlstmCertificateMapping, snmpTlstmConformance=snmpTlstmConformance, snmpTlstmSessionClientCloses=snmpTlstmSessionClientCloses, SnmpTLSAddress=SnmpTLSAddress, snmpTlstmGroups=snmpTlstmGroups, snmpTlstmCertSANRFC822Name=snmpTlstmCertSANRFC822Name, snmpTlstmCertToTSNMIdentities=snmpTlstmCertToTSNMIdentities, snmpTlstmCertToTSNMapType=snmpTlstmCertToTSNMapType, snmpDTLSUDPDomain=snmpDTLSUDPDomain, snmpTlstmCertToTSNTable=snmpTlstmCertToTSNTable, snmpTlstmCertToTSNFingerprint=snmpTlstmCertToTSNFingerprint, snmpTlstmAddrServerIdentity=snmpTlstmAddrServerIdentity, snmpTLSTCPDomain=snmpTLSTCPDomain, snmpTlstmStatsGroup=snmpTlstmStatsGroup, snmpTlstmCertSANDNSName=snmpTlstmCertSANDNSName, snmpTlstmParamsStorageType=snmpTlstmParamsStorageType, snmpTlstmIncomingGroup=snmpTlstmIncomingGroup, snmpTlstmSessionInvalidClientCertificates=snmpTlstmSessionInvalidClientCertificates, snmpTlstmParamsCount=snmpTlstmParamsCount, snmpTlstmParamsTable=snmpTlstmParamsTable, snmpTlstmParamsTableLastChanged=snmpTlstmParamsTableLastChanged, snmpTlstmServerCertificateUnknown=snmpTlstmServerCertificateUnknown, snmpTlstmConfig=snmpTlstmConfig, snmpTlstmSessionOpenErrors=snmpTlstmSessionOpenErrors, snmpTlstmCertToTSNRowStatus=snmpTlstmCertToTSNRowStatus, snmpTlstmSession=snmpTlstmSession, snmpTlstmCertSANAny=snmpTlstmCertSANAny, snmpTlstmSessionInvalidCaches=snmpTlstmSessionInvalidCaches, snmpTlstmCertCommonName=snmpTlstmCertCommonName, snmpTlstmAddrCount=snmpTlstmAddrCount, snmpTlstmParamsEntry=snmpTlstmParamsEntry, snmpTlstmAddrTableLastChanged=snmpTlstmAddrTableLastChanged, PYSNMP_MODULE_ID=snmpTlstmMIB, snmpTlstmMIB=snmpTlstmMIB, snmpTlstmCertToTSNStorageType=snmpTlstmCertToTSNStorageType, snmpTlstmAddrTable=snmpTlstmAddrTable, SnmpTLSFingerprint=SnmpTLSFingerprint, snmpTlstmSessionUnknownServerCertificate=snmpTlstmSessionUnknownServerCertificate, snmpTlstmCertSANIpAddress=snmpTlstmCertSANIpAddress, snmpTlstmSessionAccepts=snmpTlstmSessionAccepts, snmpTlstmCertToTSNTableLastChanged=snmpTlstmCertToTSNTableLastChanged, snmpTlstmIdentities=snmpTlstmIdentities, snmpTlstmAddrEntry=snmpTlstmAddrEntry, snmpTlstmParamsClientFingerprint=snmpTlstmParamsClientFingerprint, snmpTlstmSessionInvalidServerCertificates=snmpTlstmSessionInvalidServerCertificates, snmpTlstmParamsRowStatus=snmpTlstmParamsRowStatus, snmpTlstmCompliance=snmpTlstmCompliance, snmpTlstmCertToTSNID=snmpTlstmCertToTSNID, snmpTlstmObjects=snmpTlstmObjects, snmpTlstmSessionNoSessions=snmpTlstmSessionNoSessions, snmpTlstmAddrStorageType=snmpTlstmAddrStorageType, snmpTlstmCertSpecified=snmpTlstmCertSpecified, snmpTlstmSessionOpens=snmpTlstmSessionOpens, snmpTlstmCertToTSNData=snmpTlstmCertToTSNData, snmpTlstmAddrServerFingerprint=snmpTlstmAddrServerFingerprint, snmpTlstmServerInvalidCertificate=snmpTlstmServerInvalidCertificate)
