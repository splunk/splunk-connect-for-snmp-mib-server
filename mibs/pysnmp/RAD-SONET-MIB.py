#
# PySNMP MIB module RAD-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAD-SONET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:36:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
PerfIntervalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfCurrentCount")
diverseIfWanGen, = mibBuilder.importSymbols("RAD-MIB", "diverseIfWanGen")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Integer32, Gauge32, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, Unsigned32, IpAddress, iso, Bits, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "Gauge32", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "Unsigned32", "IpAddress", "iso", "Bits", "Counter64", "ObjectIdentity")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
sonetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2))
prtSonetPerfHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1))
prtSonetMediumTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 1), )
if mibBuilder.loadTexts: prtSonetMediumTable.setStatus('current')
prtSonetMediumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: prtSonetMediumEntry.setStatus('current')
prtSonetMediumTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetMediumTimeElapsed.setStatus('current')
prtSonetMediumValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetMediumValidIntervals.setStatus('current')
prtSonetSectionLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2), )
if mibBuilder.loadTexts: prtSonetSectionLineCurrentTable.setStatus('current')
prtSectionLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: prtSectionLineCurrentEntry.setStatus('current')
prtSonetCurrentLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLOS.setStatus('current')
prtSonetCurrentLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLOF.setStatus('current')
prtSonetCurrentLineAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLineAIS.setStatus('current')
prtSonetCurrentLineFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLineFERF.setStatus('current')
prtSonetCurrentSectionBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentSectionBIP.setStatus('current')
prtSonetCurrentLineBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLineBIP.setStatus('current')
prtSonetCurrentLineFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLineFEBE.setStatus('current')
prtSonetCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentUAS.setStatus('current')
prtSonetCurrentSES = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentSES.setStatus('current')
prtSonetCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentES.setStatus('current')
prtSonetCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentStatus.setStatus('current')
prtSonetCurrentLSV = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLSV.setStatus('current')
prtSonetSectionLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3), )
if mibBuilder.loadTexts: prtSonetSectionLineIntervalTable.setStatus('current')
prtSectionLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"), (0, "RAD-SONET-MIB", "prtSonetLineIntervalNumber"))
if mibBuilder.loadTexts: prtSectionLineIntervalEntry.setStatus('current')
prtSonetLineIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetLineIntervalNumber.setStatus('current')
prtSonetIntervalLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLOS.setStatus('current')
prtSonetIntervalLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLOF.setStatus('current')
prtSonetIntervalLineAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLineAIS.setStatus('current')
prtSonetIntervalLineFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLineFERF.setStatus('current')
prtSonetIntervalSectionBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalSectionBIP.setStatus('current')
prtSonetIntervalLineBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLineBIP.setStatus('current')
prtSonetIntervalLineFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLineFEBE.setStatus('current')
prtSonetIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalUAS.setStatus('current')
prtSonetIntervalSES = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalSES.setStatus('current')
prtSonetIntervalES = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalES.setStatus('current')
prtSonetIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalStatus.setStatus('current')
prtSonetIntervalLSV = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLSV.setStatus('current')
prtSonetPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4), )
if mibBuilder.loadTexts: prtSonetPathCurrentTable.setStatus('current')
prtPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: prtPathCurrentEntry.setStatus('current')
prtSonetCurrentPathAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentPathAIS.setStatus('current')
prtSonetCurrentPathFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentPathFERF.setStatus('current')
prtSonetCurrentLOP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLOP.setStatus('current')
prtSonetCurrentSLM = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentSLM.setStatus('current')
prtSonetCurrentLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLOC.setStatus('current')
prtSonetCurrentPathBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentPathBIP.setStatus('current')
prtSonetCurrentPathFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentPathFEBE.setStatus('current')
prtSonetPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5), )
if mibBuilder.loadTexts: prtSonetPathIntervalTable.setStatus('current')
prtPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"), (0, "RAD-SONET-MIB", "prtSonetPathIntervalNumber"))
if mibBuilder.loadTexts: prtPathIntervalEntry.setStatus('current')
prtSonetPathIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetPathIntervalNumber.setStatus('current')
prtSonetIntervalPathAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalPathAIS.setStatus('current')
prtSonetIntervalPathFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalPathFERF.setStatus('current')
prtSonetIntervalLOP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLOP.setStatus('current')
prtSonetIntervalSLM = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalSLM.setStatus('current')
prtSonetIntervalLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLOC.setStatus('current')
prtSonetIntervalPathBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalPathBIP.setStatus('current')
prtSonetIntervalPathFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalPathFEBE.setStatus('current')
virtualIfStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6))
virtualIfCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1), )
if mibBuilder.loadTexts: virtualIfCurrentTable.setStatus('current')
virtualIfCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: virtualIfCurrentEntry.setStatus('current')
virtualIfCurrentMinActiveVC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentMinActiveVC.setStatus('current')
virtualIfCurrentMaxActiveVC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentMaxActiveVC.setStatus('current')
virtualIfCurrentRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentRxFrames.setStatus('current')
virtualIfCurrentTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentTxFrames.setStatus('current')
virtualIfCurrentRxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentRxAbortFrames.setStatus('current')
virtualIfCurrentTxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentTxAbortFrames.setStatus('current')
virtualIfCurrentMinLengthViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentMinLengthViolation.setStatus('current')
virtualIfCurrentMaxLengthViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentMaxLengthViolation.setStatus('current')
virtualIfCurrentFcsError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentFcsError.setStatus('current')
virtualIfCurrentByteDestuffingViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentByteDestuffingViolation.setStatus('current')
virtualIfCurrentAdressMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentAdressMismatch.setStatus('current')
virtualIfCurrentControlMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentControlMismatch.setStatus('current')
virtualIfCurrentActiveVC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentActiveVC.setStatus('current')
virtualIfIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2), )
if mibBuilder.loadTexts: virtualIfIntervalTable.setStatus('current')
virtualIfIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"), (0, "RAD-SONET-MIB", "virtualIfIntervalNumber"))
if mibBuilder.loadTexts: virtualIfIntervalEntry.setStatus('current')
virtualIfIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: virtualIfIntervalNumber.setStatus('current')
virtualIfIntervalMinActiveVC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalMinActiveVC.setStatus('current')
virtualIfIntervalMaxActiveVC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalMaxActiveVC.setStatus('current')
virtualIfIntervalRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalRxFrames.setStatus('current')
virtualIfIntervalTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalTxFrames.setStatus('current')
virtualIfIntervalRxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalRxAbortFrames.setStatus('current')
virtualIfIntervalTxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalTxAbortFrames.setStatus('current')
virtualIfIntervalMinLengthViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalMinLengthViolation.setStatus('current')
virtualIfIntervalMaxLengthViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalMaxLengthViolation.setStatus('current')
virtualIfIntervalFcsError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalFcsError.setStatus('current')
virtualIfIntervalByteDestuffingViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalByteDestuffingViolation.setStatus('current')
virtualIfIntervalAdressMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalAdressMismatch.setStatus('current')
virtualIfIntervalControlMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalControlMismatch.setStatus('current')
virtualIfIntervalBelowMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalBelowMinThreshold.setStatus('current')
virtualIfLAPSCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 3), )
if mibBuilder.loadTexts: virtualIfLAPSCurrentTable.setStatus('current')
virtualIfLAPSCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 3, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: virtualIfLAPSCurrentEntry.setStatus('current')
virtualIfLAPSCurrentSapiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPSCurrentSapiMismatch.setStatus('current')
virtualIfLAPSIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 4), )
if mibBuilder.loadTexts: virtualIfLAPSIntervalTable.setStatus('current')
virtualIfLAPSIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 4, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"), (0, "RAD-SONET-MIB", "virtualIfIntervalNumber"))
if mibBuilder.loadTexts: virtualIfLAPSIntervalEntry.setStatus('current')
virtualIfLAPSIntervalSapiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 4, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPSIntervalSapiMismatch.setStatus('current')
virtualIfLAPFCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5), )
if mibBuilder.loadTexts: virtualIfLAPFCurrentTable.setStatus('current')
virtualIfLAPFCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: virtualIfLAPFCurrentEntry.setStatus('current')
virtualIfLAPFCurrentNlpidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFCurrentNlpidMismatch.setStatus('current')
virtualIfLAPFCurrentOuiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFCurrentOuiMismatch.setStatus('current')
virtualIfLAPFCurrentPidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFCurrentPidMismatch.setStatus('current')
virtualIfLAPFCurrentDlciMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFCurrentDlciMismatch.setStatus('current')
virtualIfLAPFCurrentMacRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFCurrentMacRxFrames.setStatus('current')
virtualIfLAPFCurrentMacTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFCurrentMacTxFrames.setStatus('current')
virtualIfLAPFIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6), )
if mibBuilder.loadTexts: virtualIfLAPFIntervalTable.setStatus('current')
virtualIfLAPFIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"), (0, "RAD-SONET-MIB", "virtualIfIntervalNumber"))
if mibBuilder.loadTexts: virtualIfLAPFIntervalEntry.setStatus('current')
virtualIfLAPFIntervalNlpidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFIntervalNlpidMismatch.setStatus('current')
virtualIfLAPFIntervalOuiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFIntervalOuiMismatch.setStatus('current')
virtualIfLAPFIntervalPidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFIntervalPidMismatch.setStatus('current')
virtualIfLAPFIntervalDlciMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFIntervalDlciMismatch.setStatus('current')
virtualIfLAPFIntervalMacRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFIntervalMacRxFrames.setStatus('current')
virtualIfLAPFIntervalMacTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFIntervalMacTxFrames.setStatus('current')
virtualIfGFPCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7), )
if mibBuilder.loadTexts: virtualIfGFPCurrentTable.setStatus('current')
virtualIfGFPCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: virtualIfGFPCurrentEntry.setStatus('current')
virtualIfGFPCurrentIdleFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentIdleFrameError.setStatus('current')
virtualIfGFPCurrentCHecSbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentCHecSbError.setStatus('current')
virtualIfGFPCurrentPtiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentPtiMismatch.setStatus('current')
virtualIfGFPCurrentExiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentExiMismatch.setStatus('current')
virtualIfGFPCurrentUpiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentUpiMismatch.setStatus('current')
virtualIfGFPCurrentTHecSbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentTHecSbError.setStatus('current')
virtualIfGFPCurrentTHecMbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentTHecMbError.setStatus('current')
virtualIfGFPCurrentCidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentCidMismatch.setStatus('current')
virtualIfGFPCurrentEHecSbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentEHecSbError.setStatus('current')
virtualIfGFPCurrentEHecMbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentEHecMbError.setStatus('current')
virtualIfGFPIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8), )
if mibBuilder.loadTexts: virtualIfGFPIntervalTable.setStatus('current')
virtualIfGFPIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"), (0, "RAD-SONET-MIB", "virtualIfIntervalNumber"))
if mibBuilder.loadTexts: virtualIfGFPIntervalEntry.setStatus('current')
virtualIfGFPIntervalIdleFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalIdleFrameError.setStatus('current')
virtualIfGFPIntervalCHecSbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalCHecSbError.setStatus('current')
virtualIfGFPIntervalPtiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalPtiMismatch.setStatus('current')
virtualIfGFPIntervalExiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalExiMismatch.setStatus('current')
virtualIfGFPIntervalUpiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalUpiMismatch.setStatus('current')
virtualIfGFPIntervalTHecSbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalTHecSbError.setStatus('current')
virtualIfGFPIntervalTHecMbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalTHecMbError.setStatus('current')
virtualIfGFPIntervalCidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalCidMismatch.setStatus('current')
virtualIfGFPIntervalEHecSbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalEHecSbError.setStatus('current')
virtualIfGFPIntervalEHecMbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalEHecMbError.setStatus('current')
prtSonetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2))
prtSonetGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1))
prtSonetGenTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1), )
if mibBuilder.loadTexts: prtSonetGenTable.setStatus('current')
prtSonetGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "prtSonetGenCnfgIdx"), (0, "RAD-SONET-MIB", "prtSonetGenIdx"))
if mibBuilder.loadTexts: prtSonetGenEntry.setStatus('current')
prtSonetGenCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetGenCnfgIdx.setStatus('current')
prtSonetGenIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetGenIdx.setStatus('current')
prtSonetGenSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notApplicable", 1), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetGenSdThreshold.setStatus('current')
prtSonetGenEedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notApplicable", 1), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetGenEedThreshold.setStatus('current')
prtSonetGenBerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetGenBerEnable.setStatus('current')
prtSonetStm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2))
prtSonetStm1Table = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1), )
if mibBuilder.loadTexts: prtSonetStm1Table.setStatus('current')
prtSonetStm1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "prtSonetStm1CnfgIdx"), (0, "RAD-SONET-MIB", "prtSonetStm1Idx"))
if mibBuilder.loadTexts: prtSonetStm1Entry.setStatus('current')
prtSonetStm1CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetStm1CnfgIdx.setStatus('current')
prtSonetStm1Idx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetStm1Idx.setStatus('current')
prtSonetStm1ClockSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("lbt", 3), ("systemClk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1ClockSrc.setStatus('current')
prtSonetStm1DccMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("d1ToD3", 3), ("d4ToD12", 4), ("d1", 5), ("d2", 6), ("d3", 7), ("d4", 8), ("d5", 9), ("d6", 10), ("d7", 11), ("d8", 12), ("d9", 13), ("d10", 14), ("d11", 15), ("d12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1DccMode.setStatus('current')
prtSonetStm1RoutingProt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("proprietary", 3), ("rip2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1RoutingProt.setStatus('current')
prtSonetStm1MngProt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 1), ("proprietary", 3), ("ppp", 5), ("frameRelay", 6), ("hdlc", 7), ("lapdOverHdlc", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1MngProt.setStatus('current')
prtSonetStm1OperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("terminal", 2), ("linear", 3), ("linearProtection", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1OperationalMode.setStatus('current')
prtSonetStm1VoiceChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("e1Byte", 3), ("e2Byte", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1VoiceChannel.setStatus('current')
prtSonetStm1OutputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1OutputRate.setStatus('current')
prtSonetStm1S1ProtocolClock = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ("transparent", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1S1ProtocolClock.setStatus('current')
prtSonetStm1GatewayRingSubnetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1GatewayRingSubnetAddress.setStatus('current')
prtSonetStm1GatewayRingSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1GatewayRingSubnetMask.setStatus('current')
prtSonetStm1MngProtDeviationType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("standard", 2), ("type1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1MngProtDeviationType.setStatus('current')
prtSonetVc = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3))
prtSonetVcTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1), )
if mibBuilder.loadTexts: prtSonetVcTable.setStatus('current')
prtSonetVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "prtSonetVcCnfgIdx"), (0, "RAD-SONET-MIB", "prtSonetVcIdx"))
if mibBuilder.loadTexts: prtSonetVcEntry.setStatus('current')
prtSonetVcCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetVcCnfgIdx.setStatus('current')
prtSonetVcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetVcIdx.setStatus('current')
prtSonetVcJTxPathTraceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetVcJTxPathTraceEnable.setStatus('current')
prtSonetVcJRxPathTraceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetVcJRxPathTraceEnable.setStatus('current')
prtSonetVcJPathTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetVcJPathTrace.setStatus('current')
prtSonetVcConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetVcConnect.setStatus('current')
prtSonetVcSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetVcSignalLabel.setStatus('current')
prtSonetTuTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2), )
if mibBuilder.loadTexts: prtSonetTuTable.setStatus('current')
prtSonetTuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1), ).setIndexNames((0, "RAD-SONET-MIB", "prtSonetTuCnfgIdx"), (0, "RAD-SONET-MIB", "prtSonetTuPrtIdx"), (0, "RAD-SONET-MIB", "prtSonetTuIdx"), (0, "RAD-SONET-MIB", "prtSonetTuConPrtIdx"))
if mibBuilder.loadTexts: prtSonetTuEntry.setStatus('current')
prtSonetTuCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetTuCnfgIdx.setStatus('current')
prtSonetTuPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetTuPrtIdx.setStatus('current')
prtSonetTuIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetTuIdx.setStatus('current')
prtSonetTuConPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetTuConPrtIdx.setStatus('current')
prtSonetTuType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("connect", 2), ("bypass", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prtSonetTuType.setStatus('current')
prtSonetTuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("addAndDrop", 2), ("add", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prtSonetTuMode.setStatus('current')
prtSonetTuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prtSonetTuRowStatus.setStatus('current')
prtSonetXConnect = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3))
prtSonetXConnectTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1), )
if mibBuilder.loadTexts: prtSonetXConnectTable.setStatus('current')
prtSonetXConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "prtSonetXConnectCnfgIdx"), (0, "RAD-SONET-MIB", "prtSonetXConnectPrtIdx"), (0, "RAD-SONET-MIB", "prtSonetXConnectConPrtIdx"), (0, "RAD-SONET-MIB", "prtSonetXConnectAUGIdx"), (0, "RAD-SONET-MIB", "prtSonetXConnectTUG3Idx"), (0, "RAD-SONET-MIB", "prtSonetXConnectTUG2Idx"), (0, "RAD-SONET-MIB", "prtSonetXConnectTUnIdx"))
if mibBuilder.loadTexts: prtSonetXConnectEntry.setStatus('current')
prtSonetXConnectCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectCnfgIdx.setStatus('current')
prtSonetXConnectPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectPrtIdx.setStatus('current')
prtSonetXConnectConPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectConPrtIdx.setStatus('current')
prtSonetXConnectAUGIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectAUGIdx.setStatus('current')
prtSonetXConnectTUG3Idx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectTUG3Idx.setStatus('current')
prtSonetXConnectTUG2Idx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectTUG2Idx.setStatus('current')
prtSonetXConnectTUnIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectTUnIdx.setStatus('current')
prtSonetXConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prtSonetXConnectRowStatus.setStatus('current')
prtSonetXConnectDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("rx", 2), ("tx", 3), ("both", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prtSonetXConnectDirection.setStatus('current')
prtSonetXConnectTuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("tu2", 2), ("tu3", 3), ("tu11", 4), ("tu12", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prtSonetXConnectTuNumber.setStatus('current')
prtSonetStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4))
prtSonetVcStatTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4, 1), )
if mibBuilder.loadTexts: prtSonetVcStatTable.setStatus('current')
prtSonetVcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "prtSonetVcIdx"))
if mibBuilder.loadTexts: prtSonetVcStatEntry.setStatus('current')
prtSonetVcRxJPathTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetVcRxJPathTrace.setStatus('current')
prtSonetVcRxSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetVcRxSignalLabel.setStatus('current')
prtSonetVcLcasSourceState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("fixed", 2), ("add", 3), ("norm", 4), ("eos", 5), ("idle", 6), ("dnu", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetVcLcasSourceState.setStatus('current')
prtSonetVcLcasSinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("fixed", 2), ("add", 3), ("norm", 4), ("eos", 5), ("idle", 6), ("dnu", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetVcLcasSinkState.setStatus('current')
prtVcGroupCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4))
vcGroupCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1), )
if mibBuilder.loadTexts: vcGroupCnfgTable.setStatus('current')
vcGroupCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "vcGroupCnfgIdx"), (0, "RAD-SONET-MIB", "vcGroupCnfgNumber"))
if mibBuilder.loadTexts: vcGroupCnfgEntry.setStatus('current')
vcGroupCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vcGroupCnfgIdx.setStatus('current')
vcGroupCnfgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: vcGroupCnfgNumber.setStatus('current')
vcGroupCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgRowStatus.setStatus('current')
vcGroupCnfgVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("vc12", 2), ("vc3", 3), ("vc4", 4), ("vt1dot5", 5), ("sts1", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgVcType.setStatus('current')
vcGroupCnfgNoOfVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 84))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgNoOfVCs.setStatus('current')
vcGroupCnfgLCAS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("lcasNotActive", 2), ("lcasActive", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgLCAS.setStatus('current')
vcGroupCnfgEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("laps", 2), ("lapf", 3), ("gfp", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgEncapsulation.setStatus('current')
vcGroupCnfgGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcGroupCnfgGroupIfIndex.setStatus('current')
vcGroupCnfgRip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgRip2.setStatus('current')
vcGroupCnfgGfpChId = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgGfpChId.setStatus('current')
vcGroupCnfgK4 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgK4.setStatus('current')
vcGroupCnfgExSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgExSignalLabel.setStatus('current')
vcGroupCnfgLcasMinNoOfVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 83))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgLcasMinNoOfVCs.setStatus('current')
vcGroupCnfgLcasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("belowMinNoOfVCs", 2), ("withinRange", 3), ("allNorm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcGroupCnfgLcasStatus.setStatus('current')
vcgGfpMuxCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2), )
if mibBuilder.loadTexts: vcgGfpMuxCnfgTable.setStatus('current')
vcgGfpMuxCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1), ).setIndexNames((0, "RAD-SONET-MIB", "vcgGfpMuxCnfgIdx"), (0, "RAD-SONET-MIB", "vcgGfpMuxCnfgMuxNumber"))
if mibBuilder.loadTexts: vcgGfpMuxCnfgEntry.setStatus('current')
vcgGfpMuxCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vcgGfpMuxCnfgIdx.setStatus('current')
vcgGfpMuxCnfgMuxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: vcgGfpMuxCnfgMuxNumber.setStatus('current')
vcgGfpMuxCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgGfpMuxCnfgRowStatus.setStatus('current')
vcgGfpMuxCnfgMuxName = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgGfpMuxCnfgMuxName.setStatus('current')
vcgGfpMuxCnfgPrimeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgGfpMuxCnfgPrimeGroup.setStatus('current')
vcgGfpMuxCnfgGrpBwAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgGfpMuxCnfgGrpBwAlloc.setStatus('current')
virtualIfConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 5))
virtualIfGenTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 5, 1), )
if mibBuilder.loadTexts: virtualIfGenTable.setStatus('current')
virtualIfGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 5, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "virtualIfGenCnfgIdx"), (0, "RAD-SONET-MIB", "virtualIfGenIdx"))
if mibBuilder.loadTexts: virtualIfGenEntry.setStatus('current')
virtualIfGenCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGenCnfgIdx.setStatus('current')
virtualIfGenIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGenIdx.setStatus('current')
virtualIfGenFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("fcsEnable", 2), ("fcsDisable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualIfGenFrameFormat.setStatus('current')
mibBuilder.exportSymbols("RAD-SONET-MIB", virtualIfIntervalByteDestuffingViolation=virtualIfIntervalByteDestuffingViolation, virtualIfGFPCurrentPtiMismatch=virtualIfGFPCurrentPtiMismatch, prtPathIntervalEntry=prtPathIntervalEntry, virtualIfLAPFCurrentEntry=virtualIfLAPFCurrentEntry, virtualIfGFPCurrentEHecSbError=virtualIfGFPCurrentEHecSbError, vcgGfpMuxCnfgPrimeGroup=vcgGfpMuxCnfgPrimeGroup, prtSonetTuRowStatus=prtSonetTuRowStatus, vcgGfpMuxCnfgMuxName=vcgGfpMuxCnfgMuxName, virtualIfGFPIntervalCHecSbError=virtualIfGFPIntervalCHecSbError, prtSonetXConnectTable=prtSonetXConnectTable, sonetInterface=sonetInterface, virtualIfCurrentTxAbortFrames=virtualIfCurrentTxAbortFrames, prtSonetCurrentLineBIP=prtSonetCurrentLineBIP, virtualIfIntervalAdressMismatch=virtualIfIntervalAdressMismatch, virtualIfGFPCurrentEHecMbError=virtualIfGFPCurrentEHecMbError, prtSonetPathIntervalNumber=prtSonetPathIntervalNumber, prtSonetCurrentLineAIS=prtSonetCurrentLineAIS, virtualIfGFPCurrentTable=virtualIfGFPCurrentTable, prtPathCurrentEntry=prtPathCurrentEntry, prtSonetCurrentPathFERF=prtSonetCurrentPathFERF, virtualIfGenCnfgIdx=virtualIfGenCnfgIdx, prtSonetCurrentUAS=prtSonetCurrentUAS, prtSonetIntervalPathAIS=prtSonetIntervalPathAIS, virtualIfGFPIntervalTable=virtualIfGFPIntervalTable, vcGroupCnfgLCAS=vcGroupCnfgLCAS, vcgGfpMuxCnfgIdx=vcgGfpMuxCnfgIdx, prtSonetIntervalLineAIS=prtSonetIntervalLineAIS, virtualIfIntervalNumber=virtualIfIntervalNumber, virtualIfStatistics=virtualIfStatistics, virtualIfLAPFIntervalMacRxFrames=virtualIfLAPFIntervalMacRxFrames, virtualIfIntervalTxFrames=virtualIfIntervalTxFrames, prtSonetCurrentPathAIS=prtSonetCurrentPathAIS, virtualIfGFPCurrentCHecSbError=virtualIfGFPCurrentCHecSbError, virtualIfLAPFCurrentMacTxFrames=virtualIfLAPFCurrentMacTxFrames, prtSonetStm1ClockSrc=prtSonetStm1ClockSrc, prtSonetXConnectDirection=prtSonetXConnectDirection, vcGroupCnfgGroupIfIndex=vcGroupCnfgGroupIfIndex, prtSonetVcLcasSourceState=prtSonetVcLcasSourceState, prtSonetCurrentPathFEBE=prtSonetCurrentPathFEBE, prtSonetIntervalLSV=prtSonetIntervalLSV, virtualIfGFPIntervalExiMismatch=virtualIfGFPIntervalExiMismatch, vcgGfpMuxCnfgMuxNumber=vcgGfpMuxCnfgMuxNumber, virtualIfCurrentActiveVC=virtualIfCurrentActiveVC, prtSonetCurrentLOS=prtSonetCurrentLOS, virtualIfIntervalMinLengthViolation=virtualIfIntervalMinLengthViolation, prtSonetStm1MngProt=prtSonetStm1MngProt, prtSonetVcCnfgIdx=prtSonetVcCnfgIdx, prtSonetStm1GatewayRingSubnetMask=prtSonetStm1GatewayRingSubnetMask, prtSonetCurrentLOF=prtSonetCurrentLOF, prtSonetIntervalLineFERF=prtSonetIntervalLineFERF, prtSonetCurrentLOP=prtSonetCurrentLOP, prtSonetVcJPathTrace=prtSonetVcJPathTrace, virtualIfGFPCurrentUpiMismatch=virtualIfGFPCurrentUpiMismatch, prtSonetVcIdx=prtSonetVcIdx, virtualIfCurrentRxAbortFrames=virtualIfCurrentRxAbortFrames, prtSonetCurrentLSV=prtSonetCurrentLSV, virtualIfLAPFCurrentDlciMismatch=virtualIfLAPFCurrentDlciMismatch, virtualIfLAPSCurrentSapiMismatch=virtualIfLAPSCurrentSapiMismatch, prtSonetIntervalSLM=prtSonetIntervalSLM, prtSonetIntervalLOC=prtSonetIntervalLOC, virtualIfCurrentAdressMismatch=virtualIfCurrentAdressMismatch, prtSectionLineIntervalEntry=prtSectionLineIntervalEntry, virtualIfGFPCurrentCidMismatch=virtualIfGFPCurrentCidMismatch, virtualIfIntervalMinActiveVC=virtualIfIntervalMinActiveVC, prtSonetCurrentStatus=prtSonetCurrentStatus, virtualIfLAPSCurrentTable=virtualIfLAPSCurrentTable, virtualIfLAPFCurrentPidMismatch=virtualIfLAPFCurrentPidMismatch, virtualIfCurrentMaxActiveVC=virtualIfCurrentMaxActiveVC, virtualIfGFPIntervalUpiMismatch=virtualIfGFPIntervalUpiMismatch, prtSonetTuTable=prtSonetTuTable, virtualIfCurrentMinActiveVC=virtualIfCurrentMinActiveVC, prtSonetXConnectConPrtIdx=prtSonetXConnectConPrtIdx, vcgGfpMuxCnfgGrpBwAlloc=vcgGfpMuxCnfgGrpBwAlloc, prtSonetPathIntervalTable=prtSonetPathIntervalTable, virtualIfLAPFCurrentOuiMismatch=virtualIfLAPFCurrentOuiMismatch, prtSonetStm1Entry=prtSonetStm1Entry, vcgGfpMuxCnfgTable=vcgGfpMuxCnfgTable, virtualIfIntervalTable=virtualIfIntervalTable, prtSonetXConnectTUG2Idx=prtSonetXConnectTUG2Idx, prtSonetStm1Idx=prtSonetStm1Idx, prtSonetIntervalLineBIP=prtSonetIntervalLineBIP, prtSonetCurrentSES=prtSonetCurrentSES, prtSonetCurrentPathBIP=prtSonetCurrentPathBIP, virtualIfIntervalRxAbortFrames=virtualIfIntervalRxAbortFrames, vcGroupCnfgEncapsulation=vcGroupCnfgEncapsulation, prtSonetXConnectTuNumber=prtSonetXConnectTuNumber, prtSonetVcRxSignalLabel=prtSonetVcRxSignalLabel, virtualIfLAPSCurrentEntry=virtualIfLAPSCurrentEntry, virtualIfConfiguration=virtualIfConfiguration, virtualIfGFPIntervalEHecMbError=virtualIfGFPIntervalEHecMbError, prtSonetIntervalSectionBIP=prtSonetIntervalSectionBIP, prtSonetCurrentLOC=prtSonetCurrentLOC, prtSonetGenEntry=prtSonetGenEntry, prtSonetPathCurrentTable=prtSonetPathCurrentTable, virtualIfLAPSIntervalSapiMismatch=virtualIfLAPSIntervalSapiMismatch, virtualIfLAPSIntervalEntry=virtualIfLAPSIntervalEntry, virtualIfLAPFIntervalEntry=virtualIfLAPFIntervalEntry, prtSonetVcEntry=prtSonetVcEntry, prtSonetStm1OutputRate=prtSonetStm1OutputRate, prtSonetTuPrtIdx=prtSonetTuPrtIdx, prtSonetVcStatTable=prtSonetVcStatTable, prtSonetSectionLineCurrentTable=prtSonetSectionLineCurrentTable, vcGroupCnfgLcasMinNoOfVCs=vcGroupCnfgLcasMinNoOfVCs, virtualIfLAPFIntervalNlpidMismatch=virtualIfLAPFIntervalNlpidMismatch, virtualIfCurrentEntry=virtualIfCurrentEntry, prtSonetVcTable=prtSonetVcTable, prtSonetTuEntry=prtSonetTuEntry, prtSonetXConnectPrtIdx=prtSonetXConnectPrtIdx, prtSonetXConnectEntry=prtSonetXConnectEntry, virtualIfGenTable=virtualIfGenTable, prtSonetGenBerEnable=prtSonetGenBerEnable, virtualIfIntervalMaxActiveVC=virtualIfIntervalMaxActiveVC, virtualIfLAPFCurrentTable=virtualIfLAPFCurrentTable, vcGroupCnfgLcasStatus=vcGroupCnfgLcasStatus, virtualIfGenFrameFormat=virtualIfGenFrameFormat, prtSonetIntervalLOS=prtSonetIntervalLOS, vcGroupCnfgNoOfVCs=vcGroupCnfgNoOfVCs, vcGroupCnfgK4=vcGroupCnfgK4, prtSonetIntervalLOF=prtSonetIntervalLOF, prtSonetVcConnect=prtSonetVcConnect, prtSonetStatus=prtSonetStatus, prtSonetStm1VoiceChannel=prtSonetStm1VoiceChannel, prtSonetCurrentSLM=prtSonetCurrentSLM, prtSonetStm1OperationalMode=prtSonetStm1OperationalMode, vcgGfpMuxCnfgEntry=vcgGfpMuxCnfgEntry, virtualIfGFPCurrentEntry=virtualIfGFPCurrentEntry, prtSonetXConnectTUnIdx=prtSonetXConnectTUnIdx, prtSonetMediumEntry=prtSonetMediumEntry, prtSonetStm1RoutingProt=prtSonetStm1RoutingProt, prtSonetSectionLineIntervalTable=prtSonetSectionLineIntervalTable, prtSonetTuType=prtSonetTuType, virtualIfGFPIntervalIdleFrameError=virtualIfGFPIntervalIdleFrameError, prtSonetIntervalLOP=prtSonetIntervalLOP, prtSonetStm1Table=prtSonetStm1Table, prtSonetVc=prtSonetVc, virtualIfCurrentRxFrames=virtualIfCurrentRxFrames, prtSonetVcLcasSinkState=prtSonetVcLcasSinkState, virtualIfGFPCurrentIdleFrameError=virtualIfGFPCurrentIdleFrameError, prtSonetIntervalPathFEBE=prtSonetIntervalPathFEBE, prtSonetCurrentLineFERF=prtSonetCurrentLineFERF, prtSonetVcSignalLabel=prtSonetVcSignalLabel, prtSonetVcJRxPathTraceEnable=prtSonetVcJRxPathTraceEnable, prtSonetLineIntervalNumber=prtSonetLineIntervalNumber, prtSonetIntervalPathBIP=prtSonetIntervalPathBIP, virtualIfGFPCurrentTHecSbError=virtualIfGFPCurrentTHecSbError, prtSonetStm1CnfgIdx=prtSonetStm1CnfgIdx, prtSonetStm1DccMode=prtSonetStm1DccMode, prtSonetStm1S1ProtocolClock=prtSonetStm1S1ProtocolClock, prtSonetTuConPrtIdx=prtSonetTuConPrtIdx, vcGroupCnfgVcType=vcGroupCnfgVcType, virtualIfLAPFIntervalMacTxFrames=virtualIfLAPFIntervalMacTxFrames, virtualIfCurrentTable=virtualIfCurrentTable, vcGroupCnfgEntry=vcGroupCnfgEntry, prtSonetGenSdThreshold=prtSonetGenSdThreshold, prtSonetIntervalUAS=prtSonetIntervalUAS, virtualIfGFPCurrentTHecMbError=virtualIfGFPCurrentTHecMbError, virtualIfCurrentTxFrames=virtualIfCurrentTxFrames, prtSonetIntervalSES=prtSonetIntervalSES, virtualIfLAPFIntervalTable=virtualIfLAPFIntervalTable, prtSonetXConnectCnfgIdx=prtSonetXConnectCnfgIdx, prtSonetCurrentLineFEBE=prtSonetCurrentLineFEBE, prtSonetVcStatEntry=prtSonetVcStatEntry, virtualIfIntervalBelowMinThreshold=virtualIfIntervalBelowMinThreshold, virtualIfCurrentFcsError=virtualIfCurrentFcsError, virtualIfLAPFCurrentMacRxFrames=virtualIfLAPFCurrentMacRxFrames, virtualIfGFPIntervalPtiMismatch=virtualIfGFPIntervalPtiMismatch, virtualIfIntervalRxFrames=virtualIfIntervalRxFrames, prtSonetGenTable=prtSonetGenTable, virtualIfGFPIntervalCidMismatch=virtualIfGFPIntervalCidMismatch, prtSonetXConnectTUG3Idx=prtSonetXConnectTUG3Idx, prtSonetStm1=prtSonetStm1, virtualIfIntervalControlMismatch=virtualIfIntervalControlMismatch, prtSonetIntervalES=prtSonetIntervalES, prtSonetConfig=prtSonetConfig, prtSonetXConnect=prtSonetXConnect, virtualIfGFPIntervalEHecSbError=virtualIfGFPIntervalEHecSbError, vcGroupCnfgIdx=vcGroupCnfgIdx, vcGroupCnfgExSignalLabel=vcGroupCnfgExSignalLabel, vcGroupCnfgNumber=vcGroupCnfgNumber, virtualIfIntervalMaxLengthViolation=virtualIfIntervalMaxLengthViolation, prtSonetMediumValidIntervals=prtSonetMediumValidIntervals, prtSonetTuMode=prtSonetTuMode, prtSonetCurrentSectionBIP=prtSonetCurrentSectionBIP, virtualIfIntervalFcsError=virtualIfIntervalFcsError, virtualIfCurrentMinLengthViolation=virtualIfCurrentMinLengthViolation, virtualIfCurrentControlMismatch=virtualIfCurrentControlMismatch, virtualIfGFPIntervalTHecSbError=virtualIfGFPIntervalTHecSbError, prtSonetXConnectAUGIdx=prtSonetXConnectAUGIdx, vcGroupCnfgGfpChId=vcGroupCnfgGfpChId, virtualIfGenEntry=virtualIfGenEntry, virtualIfLAPFCurrentNlpidMismatch=virtualIfLAPFCurrentNlpidMismatch, prtSonetStm1GatewayRingSubnetAddress=prtSonetStm1GatewayRingSubnetAddress, prtSonetIntervalPathFERF=prtSonetIntervalPathFERF, virtualIfCurrentByteDestuffingViolation=virtualIfCurrentByteDestuffingViolation, prtSonetGenCnfgIdx=prtSonetGenCnfgIdx, prtSonetPerfHistory=prtSonetPerfHistory, prtSonetMediumTimeElapsed=prtSonetMediumTimeElapsed, prtSonetVcJTxPathTraceEnable=prtSonetVcJTxPathTraceEnable, prtSonetIntervalLineFEBE=prtSonetIntervalLineFEBE, virtualIfGFPIntervalEntry=virtualIfGFPIntervalEntry, prtSonetVcRxJPathTrace=prtSonetVcRxJPathTrace, prtSonetCurrentES=prtSonetCurrentES, prtSonetStm1MngProtDeviationType=prtSonetStm1MngProtDeviationType, vcGroupCnfgRowStatus=vcGroupCnfgRowStatus, virtualIfLAPFIntervalDlciMismatch=virtualIfLAPFIntervalDlciMismatch, prtSonetGenIdx=prtSonetGenIdx, vcgGfpMuxCnfgRowStatus=vcgGfpMuxCnfgRowStatus, virtualIfLAPSIntervalTable=virtualIfLAPSIntervalTable, virtualIfGFPIntervalTHecMbError=virtualIfGFPIntervalTHecMbError, prtSonetGen=prtSonetGen, prtSectionLineCurrentEntry=prtSectionLineCurrentEntry, prtSonetIntervalStatus=prtSonetIntervalStatus, prtSonetMediumTable=prtSonetMediumTable, vcGroupCnfgRip2=vcGroupCnfgRip2, virtualIfLAPFIntervalPidMismatch=virtualIfLAPFIntervalPidMismatch, vcGroupCnfgTable=vcGroupCnfgTable, virtualIfLAPFIntervalOuiMismatch=virtualIfLAPFIntervalOuiMismatch, virtualIfCurrentMaxLengthViolation=virtualIfCurrentMaxLengthViolation, virtualIfGFPCurrentExiMismatch=virtualIfGFPCurrentExiMismatch, prtVcGroupCnfg=prtVcGroupCnfg, virtualIfIntervalEntry=virtualIfIntervalEntry, prtSonetTuCnfgIdx=prtSonetTuCnfgIdx, prtSonetXConnectRowStatus=prtSonetXConnectRowStatus, prtSonetGenEedThreshold=prtSonetGenEedThreshold, virtualIfIntervalTxAbortFrames=virtualIfIntervalTxAbortFrames, virtualIfGenIdx=virtualIfGenIdx, prtSonetTuIdx=prtSonetTuIdx)
