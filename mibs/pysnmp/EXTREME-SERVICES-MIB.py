#
# PySNMP MIB module EXTREME-SERVICES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-BASE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:53:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
extremeAgent, = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, MibIdentifier, ModuleIdentity, Counter64, Counter32, NotificationType, Integer32, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "MibIdentifier", "ModuleIdentity", "Counter64", "Counter32", "NotificationType", "Integer32", "IpAddress", "TimeTicks")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
extremeServices = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 26))
if mibBuilder.loadTexts: extremeServices.setLastUpdated('0007240000Z')
if mibBuilder.loadTexts: extremeServices.setOrganization('Extreme Networks, Inc.')
extremeSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 26, 1))
extremeDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 26, 3))
extremeAuthServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4))
class AuthServerType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("radius", 1), ("radius-acct", 2), ("tacacs", 3), ("tacacs-acct", 4))

class AuthServerAccessType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("mgmt-access", 1), ("netlogin", 2))

extremeRemoteSyslogServerTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 26, 1, 1), )
if mibBuilder.loadTexts: extremeRemoteSyslogServerTable.setStatus('current')
extremeRemoteSyslogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 26, 1, 1, 1), ).setIndexNames((0, "EXTREME-SERVICES-MIB", "extremeRemoteSyslogServerAddressType"), (0, "EXTREME-SERVICES-MIB", "extremeRemoteSyslogServerAddress"), (0, "EXTREME-SERVICES-MIB", "extremeRemoteSyslogServerPort"), (0, "EXTREME-SERVICES-MIB", "extremeRemoteSyslogServerFacility"))
if mibBuilder.loadTexts: extremeRemoteSyslogServerEntry.setStatus('current')
extremeRemoteSyslogServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 1, 1, 1, 1), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeRemoteSyslogServerAddressType.setStatus('current')
extremeRemoteSyslogServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 1, 1, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeRemoteSyslogServerAddress.setStatus('current')
extremeRemoteSyslogServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeRemoteSyslogServerPort.setStatus('current')
extremeRemoteSyslogServerFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeRemoteSyslogServerFacility.setStatus('current')
extremeRemoteSyslogServerSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 1, 1, 1, 5), Bits().clone(namedValues=NamedValues(("critical", 0), ("error", 1), ("warning", 2), ("notice", 3), ("info", 4), ("debugSummary", 5), ("debugVerbose", 6), ("debugData", 7))).clone(hexValue="ff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeRemoteSyslogServerSeverity.setStatus('current')
extremeRemoteSyslogServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeRemoteSyslogServerStatus.setStatus('current')
extremeEnableRemoteSyslog = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 26, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeEnableRemoteSyslog.setStatus('current')
extremeDNSServerTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 26, 3, 1), )
if mibBuilder.loadTexts: extremeDNSServerTable.setStatus('current')
extremeDNSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 26, 3, 1, 1), ).setIndexNames((0, "EXTREME-SERVICES-MIB", "extremeDNSServerAddressIndex"))
if mibBuilder.loadTexts: extremeDNSServerEntry.setStatus('current')
extremeDNSServerAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: extremeDNSServerAddressIndex.setStatus('current')
extremeDNSServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 3, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeDNSServerAddressType.setStatus('current')
extremeDNSServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 3, 1, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeDNSServerAddress.setStatus('current')
extremeAuthServerEnableTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 1), )
if mibBuilder.loadTexts: extremeAuthServerEnableTable.setStatus('current')
extremeAuthServerEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 1, 1), ).setIndexNames((0, "EXTREME-SERVICES-MIB", "extremeAuthServerEnableServerType"), (0, "EXTREME-SERVICES-MIB", "extremeAuthServerEnableAccessType"))
if mibBuilder.loadTexts: extremeAuthServerEnableEntry.setStatus('current')
extremeAuthServerEnableServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 1, 1, 1), AuthServerType())
if mibBuilder.loadTexts: extremeAuthServerEnableServerType.setStatus('current')
extremeAuthServerEnableAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 1, 1, 2), AuthServerAccessType())
if mibBuilder.loadTexts: extremeAuthServerEnableAccessType.setStatus('current')
extremeAuthServerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeAuthServerEnable.setStatus('current')
extremeAuthServerTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2), )
if mibBuilder.loadTexts: extremeAuthServerTable.setStatus('current')
extremeAuthServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1), ).setIndexNames((0, "EXTREME-SERVICES-MIB", "extremeAuthServerIndex"))
if mibBuilder.loadTexts: extremeAuthServerEntry.setStatus('current')
extremeAuthServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: extremeAuthServerIndex.setStatus('current')
extremeAuthServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeAuthServerAddressType.setStatus('current')
extremeAuthServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeAuthServerAddress.setStatus('current')
extremeAuthServerClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeAuthServerClientAddressType.setStatus('current')
extremeAuthServerClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeAuthServerClientAddress.setStatus('current')
extremeAuthServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeAuthServerPort.setStatus('current')
extremeAuthServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeAuthServerSecret.setStatus('current')
extremeAuthServerReTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeAuthServerReTransmit.setStatus('current')
extremeAuthServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1, 9), AuthServerType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeAuthServerType.setStatus('current')
extremeAuthServerIsPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeAuthServerIsPrimary.setStatus('current')
extremeAuthServerAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1, 11), AuthServerAccessType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeAuthServerAccessType.setStatus('current')
extremeAuthServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 26, 4, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeAuthServerStatus.setStatus('current')
mibBuilder.exportSymbols("EXTREME-SERVICES-MIB", extremeAuthServerClientAddress=extremeAuthServerClientAddress, extremeAuthServerAccessType=extremeAuthServerAccessType, extremeRemoteSyslogServerAddressType=extremeRemoteSyslogServerAddressType, extremeDNSServerAddressIndex=extremeDNSServerAddressIndex, extremeDNSServerAddressType=extremeDNSServerAddressType, extremeAuthServerAddressType=extremeAuthServerAddressType, AuthServerAccessType=AuthServerAccessType, extremeDNSServerEntry=extremeDNSServerEntry, extremeSyslog=extremeSyslog, extremeAuthServerEnableEntry=extremeAuthServerEnableEntry, extremeEnableRemoteSyslog=extremeEnableRemoteSyslog, extremeRemoteSyslogServerFacility=extremeRemoteSyslogServerFacility, extremeAuthServerType=extremeAuthServerType, extremeAuthServerReTransmit=extremeAuthServerReTransmit, extremeAuthServerIndex=extremeAuthServerIndex, extremeAuthServerAddress=extremeAuthServerAddress, extremeAuthServer=extremeAuthServer, extremeRemoteSyslogServerPort=extremeRemoteSyslogServerPort, extremeAuthServerStatus=extremeAuthServerStatus, extremeDNS=extremeDNS, extremeAuthServerIsPrimary=extremeAuthServerIsPrimary, extremeDNSServerAddress=extremeDNSServerAddress, extremeAuthServerEnable=extremeAuthServerEnable, extremeAuthServerSecret=extremeAuthServerSecret, extremeAuthServerEnableTable=extremeAuthServerEnableTable, AuthServerType=AuthServerType, extremeRemoteSyslogServerEntry=extremeRemoteSyslogServerEntry, extremeAuthServerClientAddressType=extremeAuthServerClientAddressType, extremeAuthServerEnableAccessType=extremeAuthServerEnableAccessType, extremeDNSServerTable=extremeDNSServerTable, extremeAuthServerTable=extremeAuthServerTable, extremeAuthServerEntry=extremeAuthServerEntry, extremeRemoteSyslogServerStatus=extremeRemoteSyslogServerStatus, PYSNMP_MODULE_ID=extremeServices, extremeRemoteSyslogServerSeverity=extremeRemoteSyslogServerSeverity, extremeAuthServerEnableServerType=extremeAuthServerEnableServerType, extremeAuthServerPort=extremeAuthServerPort, extremeRemoteSyslogServerTable=extremeRemoteSyslogServerTable, extremeRemoteSyslogServerAddress=extremeRemoteSyslogServerAddress, extremeServices=extremeServices)
