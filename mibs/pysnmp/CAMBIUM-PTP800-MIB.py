#
# PySNMP MIB module CAMBIUM-PTP800-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CAMBIUM-PTP800-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:29:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter64, Unsigned32, Bits, Gauge32, Integer32, NotificationType, iso, TimeTicks, Counter32, ModuleIdentity, ObjectIdentity, enterprises, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter64", "Unsigned32", "Bits", "Gauge32", "Integer32", "NotificationType", "iso", "TimeTicks", "Counter32", "ModuleIdentity", "ObjectIdentity", "enterprises", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cambium = ModuleIdentity((1, 3, 6, 1, 4, 1, 17713))
cambium.setRevisions(('2012-04-20 12:26', '2011-08-19 12:29', '2011-03-16 17:23', '2010-09-30 16:29', '2010-07-30 13:07', '2010-05-27 19:52', '2010-03-31 13:09', '2010-01-04 18:33', '2009-10-21 14:26',))
if mibBuilder.loadTexts: cambium.setLastUpdated('201204201226Z')
if mibBuilder.loadTexts: cambium.setOrganization('Cambium Networks Ltd.')
ptp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 1))
ptmp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 2))
ptp800 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8))
bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 4))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 5))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 6))
licence = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 8))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 9))
phyControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 10))
phyStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 12))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 13))
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 15))
snmpControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 16))
sntp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 17))
reset = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 18))
versions = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 19))
pubStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 20))
encryption = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 22))
rfu = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 23))
radioLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 24))
protectionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 25))
protectionStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 26))
protectionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 27))
syslogControl = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 28))
supplementary = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 96))
ptpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 98))
ptpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 99))
ptpTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0))
ptpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 17713, 8, 97)).setObjects(("CAMBIUM-PTP800-MIB", "bridgeGroup"), ("CAMBIUM-PTP800-MIB", "configurationGroup"), ("CAMBIUM-PTP800-MIB", "ethernetGroup"), ("CAMBIUM-PTP800-MIB", "licenceGroup"), ("CAMBIUM-PTP800-MIB", "managementGroup"), ("CAMBIUM-PTP800-MIB", "phyControlGroup"), ("CAMBIUM-PTP800-MIB", "phyStatusGroup"), ("CAMBIUM-PTP800-MIB", "alarmsGroup"), ("CAMBIUM-PTP800-MIB", "smtpGroup"), ("CAMBIUM-PTP800-MIB", "snmpControlGroup"), ("CAMBIUM-PTP800-MIB", "sntpGroup"), ("CAMBIUM-PTP800-MIB", "resetGroup"), ("CAMBIUM-PTP800-MIB", "versionsGroup"), ("CAMBIUM-PTP800-MIB", "pubStatsGroup"), ("CAMBIUM-PTP800-MIB", "encryptionGroup"), ("CAMBIUM-PTP800-MIB", "rfuGroup"), ("CAMBIUM-PTP800-MIB", "radioLicenseGroup"), ("CAMBIUM-PTP800-MIB", "protectionConfigGroup"), ("CAMBIUM-PTP800-MIB", "protectionStatusGroup"), ("CAMBIUM-PTP800-MIB", "protectionStatsGroup"), ("CAMBIUM-PTP800-MIB", "syslogControlGroup"), ("CAMBIUM-PTP800-MIB", "supplementaryGroup"), ("CAMBIUM-PTP800-MIB", "notificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ptpCompliance = ptpCompliance.setStatus('current')
bridgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 4)).setObjects(("CAMBIUM-PTP800-MIB", "localPacketFiltering"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bridgeGroup = bridgeGroup.setStatus('current')
configurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 5)).setObjects(("CAMBIUM-PTP800-MIB", "iPAddress"), ("CAMBIUM-PTP800-MIB", "subnetMask"), ("CAMBIUM-PTP800-MIB", "gatewayIPAddress"), ("CAMBIUM-PTP800-MIB", "maximumTransmitPower"), ("CAMBIUM-PTP800-MIB", "antennaGain"), ("CAMBIUM-PTP800-MIB", "rFFeederLoss"), ("CAMBIUM-PTP800-MIB", "remoteIPAddress"), ("CAMBIUM-PTP800-MIB", "remoteMACAddress"), ("CAMBIUM-PTP800-MIB", "enableTransmission"), ("CAMBIUM-PTP800-MIB", "aTPCEnable"), ("CAMBIUM-PTP800-MIB", "iFCableLength"), ("CAMBIUM-PTP800-MIB", "linkName"), ("CAMBIUM-PTP800-MIB", "siteName"), ("CAMBIUM-PTP800-MIB", "diverseAntennaGain"), ("CAMBIUM-PTP800-MIB", "diverseRfFeederLoss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configurationGroup = configurationGroup.setStatus('current')
ethernetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 6)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortCopperAutoNegotiation"), ("CAMBIUM-PTP800-MIB", "dataPortCopperAutoNegAdvertisement"), ("CAMBIUM-PTP800-MIB", "dataPortStatus"), ("CAMBIUM-PTP800-MIB", "dataPortSpeedAndDuplex"), ("CAMBIUM-PTP800-MIB", "dataPortWirelessDownAlert"), ("CAMBIUM-PTP800-MIB", "useVLANForManagementInterfaces"), ("CAMBIUM-PTP800-MIB", "vLANManagementPriority"), ("CAMBIUM-PTP800-MIB", "vLANManagementVIDValidation"), ("CAMBIUM-PTP800-MIB", "vLANManagementVID"), ("CAMBIUM-PTP800-MIB", "ethernetPriorityTableNumber"), ("CAMBIUM-PTP800-MIB", "managementPortAutoNegotiation"), ("CAMBIUM-PTP800-MIB", "managementPortAutoNegAdvertisement"), ("CAMBIUM-PTP800-MIB", "managementPortStatus"), ("CAMBIUM-PTP800-MIB", "managementPortSpeedAndDuplex"), ("CAMBIUM-PTP800-MIB", "managementPortWirelessDownAlert"), ("CAMBIUM-PTP800-MIB", "managementMode"), ("CAMBIUM-PTP800-MIB", "managementCommittedInformationRate"), ("CAMBIUM-PTP800-MIB", "dataPortPauseFrames"), ("CAMBIUM-PTP800-MIB", "transmitCapacityLimit"), ("CAMBIUM-PTP800-MIB", "transmitCapacityLimitDetail"), ("CAMBIUM-PTP800-MIB", "dataPortEthernetMediaTypeToUse"), ("CAMBIUM-PTP800-MIB", "dataPortCopperForcedConfiguration"), ("CAMBIUM-PTP800-MIB", "managementPortForcedConfiguration"), ("CAMBIUM-PTP800-MIB", "l2CPPriorityTableNumber"), ("CAMBIUM-PTP800-MIB", "unknownNetworkPriorityQueueMapping"), ("CAMBIUM-PTP800-MIB", "dSCPManagementPriority"), ("CAMBIUM-PTP800-MIB", "qOSPriorityScheme"), ("CAMBIUM-PTP800-MIB", "iPDSCPPriorityTableNumber"), ("CAMBIUM-PTP800-MIB", "mPLSTCPriorityTableNumber"), ("CAMBIUM-PTP800-MIB", "ethernetPriorityQueueMapping"), ("CAMBIUM-PTP800-MIB", "l2CPPriorityQueueMapping"), ("CAMBIUM-PTP800-MIB", "iPDSCPPriorityQueueMapping"), ("CAMBIUM-PTP800-MIB", "mPLSTCPriorityQueueMapping"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetGroup = ethernetGroup.setStatus('current')
licenceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 8)).setObjects(("CAMBIUM-PTP800-MIB", "productVariant"), ("CAMBIUM-PTP800-MIB", "productName"), ("CAMBIUM-PTP800-MIB", "ethernetFiberSupport"), ("CAMBIUM-PTP800-MIB", "transmitCapacity"), ("CAMBIUM-PTP800-MIB", "encryptionAlgorithmsAvail"), ("CAMBIUM-PTP800-MIB", "securityLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    licenceGroup = licenceGroup.setStatus('current')
managementGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 9)).setObjects(("CAMBIUM-PTP800-MIB", "linkNameMismatch"), ("CAMBIUM-PTP800-MIB", "alignmentMode"), ("CAMBIUM-PTP800-MIB", "tFTPServerIPAddress"), ("CAMBIUM-PTP800-MIB", "tFTPServerPortNumber"), ("CAMBIUM-PTP800-MIB", "tFTPSoftwareUpgradeFileName"), ("CAMBIUM-PTP800-MIB", "tFTPStartSoftwareUpgrade"), ("CAMBIUM-PTP800-MIB", "tFTPSoftwareUpgradeStatus"), ("CAMBIUM-PTP800-MIB", "tFTPSoftwareUpgradeStatusText"), ("CAMBIUM-PTP800-MIB", "tFTPSoftwareUpgradeStatusAdditionalText"), ("CAMBIUM-PTP800-MIB", "hTTPAccessEnabled"), ("CAMBIUM-PTP800-MIB", "telnetAccessEnabled"), ("CAMBIUM-PTP800-MIB", "hTTPPortNumber"), ("CAMBIUM-PTP800-MIB", "hTTPSPortNumber"), ("CAMBIUM-PTP800-MIB", "telnetPortNumber"), ("CAMBIUM-PTP800-MIB", "hTTPSAccessEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    managementGroup = managementGroup.setStatus('current')
phyControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 10)).setObjects(("CAMBIUM-PTP800-MIB", "remoteMaximumTransmitPower"), ("CAMBIUM-PTP800-MIB", "minModulation"), ("CAMBIUM-PTP800-MIB", "minCodeRate"), ("CAMBIUM-PTP800-MIB", "maxModulation"), ("CAMBIUM-PTP800-MIB", "maxCodeRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyControlGroup = phyControlGroup.setStatus('current')
phyStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 12)).setObjects(("CAMBIUM-PTP800-MIB", "receivePower"), ("CAMBIUM-PTP800-MIB", "vectorError"), ("CAMBIUM-PTP800-MIB", "transmitPower"), ("CAMBIUM-PTP800-MIB", "linkLoss"), ("CAMBIUM-PTP800-MIB", "receiveModulation"), ("CAMBIUM-PTP800-MIB", "transmitModulation"), ("CAMBIUM-PTP800-MIB", "receiveCodeRate"), ("CAMBIUM-PTP800-MIB", "transmitCodeRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    phyStatusGroup = phyStatusGroup.setStatus('current')
alarmsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 13)).setObjects(("CAMBIUM-PTP800-MIB", "unitOutOfCalibration"), ("CAMBIUM-PTP800-MIB", "encryptionEnabledMismatch"), ("CAMBIUM-PTP800-MIB", "wirelessLinkDisabledWarning"), ("CAMBIUM-PTP800-MIB", "dataPortDisabledWarning"), ("CAMBIUM-PTP800-MIB", "dataPortFiberStatus"), ("CAMBIUM-PTP800-MIB", "dataPortConfigurationMismatch"), ("CAMBIUM-PTP800-MIB", "managementPortDisabledWarning"), ("CAMBIUM-PTP800-MIB", "rFUStatus"), ("CAMBIUM-PTP800-MIB", "managementPortConfigurationMismatch"), ("CAMBIUM-PTP800-MIB", "secureModeAlarm"), ("CAMBIUM-PTP800-MIB", "rFUPlatformCompatibility"), ("CAMBIUM-PTP800-MIB", "rFUProtectionCompatibility"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmsGroup = alarmsGroup.setStatus('current')
smtpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 15)).setObjects(("CAMBIUM-PTP800-MIB", "sMTPEmailAlert"), ("CAMBIUM-PTP800-MIB", "sMTPServerIPAddress"), ("CAMBIUM-PTP800-MIB", "sMTPServerPortNumber"), ("CAMBIUM-PTP800-MIB", "sMTPSourceEmailAddress"), ("CAMBIUM-PTP800-MIB", "sMTPDestinationEmailAddress"), ("CAMBIUM-PTP800-MIB", "sMTPEnabledMessages"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    smtpGroup = smtpGroup.setStatus('current')
snmpControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 16)).setObjects(("CAMBIUM-PTP800-MIB", "sNMPPortNumber"), ("CAMBIUM-PTP800-MIB", "sNMPCommunityString"), ("CAMBIUM-PTP800-MIB", "sNMPTrapVersion"), ("CAMBIUM-PTP800-MIB", "sNMPEnabledTraps"), ("CAMBIUM-PTP800-MIB", "enabledDiagnosticAlarms"), ("CAMBIUM-PTP800-MIB", "enabledDiagnosticProtectionAlarms"), ("CAMBIUM-PTP800-MIB", "sNMPTrapTableNumber"), ("CAMBIUM-PTP800-MIB", "sNMPTrapIPAddress"), ("CAMBIUM-PTP800-MIB", "sNMPTrapPortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    snmpControlGroup = snmpControlGroup.setStatus('current')
sntpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 17)).setObjects(("CAMBIUM-PTP800-MIB", "sNTPState"), ("CAMBIUM-PTP800-MIB", "sNTPPollInterval"), ("CAMBIUM-PTP800-MIB", "sNTPSync"), ("CAMBIUM-PTP800-MIB", "sNTPLastSync"), ("CAMBIUM-PTP800-MIB", "systemClock"), ("CAMBIUM-PTP800-MIB", "timeZone"), ("CAMBIUM-PTP800-MIB", "daylightSaving"), ("CAMBIUM-PTP800-MIB", "sNTPPrimaryServer"), ("CAMBIUM-PTP800-MIB", "sNTPPrimaryServerDeadTime"), ("CAMBIUM-PTP800-MIB", "sNTPServerRetries"), ("CAMBIUM-PTP800-MIB", "sNTPServerTimeout"), ("CAMBIUM-PTP800-MIB", "sNTPServerTableNumber"), ("CAMBIUM-PTP800-MIB", "sNTPServerIPAddress"), ("CAMBIUM-PTP800-MIB", "sNTPServerPortNumber"), ("CAMBIUM-PTP800-MIB", "sNTPServerResponse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sntpGroup = sntpGroup.setStatus('current')
resetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 18)).setObjects(("CAMBIUM-PTP800-MIB", "systemReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    resetGroup = resetGroup.setStatus('current')
versionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 19)).setObjects(("CAMBIUM-PTP800-MIB", "softwareVersion"), ("CAMBIUM-PTP800-MIB", "hardwareVersion"), ("CAMBIUM-PTP800-MIB", "secondarySoftwareVersion"), ("CAMBIUM-PTP800-MIB", "bootVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    versionsGroup = versionsGroup.setStatus('current')
pubStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 20)).setObjects(("CAMBIUM-PTP800-MIB", "receiveDataRate"), ("CAMBIUM-PTP800-MIB", "transmitDataRate"), ("CAMBIUM-PTP800-MIB", "aggregateDataRate"), ("CAMBIUM-PTP800-MIB", "wirelessLinkAvailability"), ("CAMBIUM-PTP800-MIB", "wirelessLinkStatus"), ("CAMBIUM-PTP800-MIB", "byteErrorRatio"), ("CAMBIUM-PTP800-MIB", "codeWordErrorRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pubStatsGroup = pubStatsGroup.setStatus('current')
encryptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 22)).setObjects(("CAMBIUM-PTP800-MIB", "encryptionAlgorithm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    encryptionGroup = encryptionGroup.setStatus('current')
rfuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 23)).setObjects(("CAMBIUM-PTP800-MIB", "rFURfBand"), ("CAMBIUM-PTP800-MIB", "rFUTxBandAboveRx"), ("CAMBIUM-PTP800-MIB", "rFUFreqSpacing"), ("CAMBIUM-PTP800-MIB", "rFUTxPowerMin"), ("CAMBIUM-PTP800-MIB", "rFUTxPowerMax"), ("CAMBIUM-PTP800-MIB", "rFURxFreqMin"), ("CAMBIUM-PTP800-MIB", "rFURxFreqMax"), ("CAMBIUM-PTP800-MIB", "rFUTxFreqMin"), ("CAMBIUM-PTP800-MIB", "rFUTxFreqMax"), ("CAMBIUM-PTP800-MIB", "rFUSerial"), ("CAMBIUM-PTP800-MIB", "rFUActiveFirmwareBank"), ("CAMBIUM-PTP800-MIB", "rFUVersionBank1"), ("CAMBIUM-PTP800-MIB", "rFUVersionBank2"), ("CAMBIUM-PTP800-MIB", "rFUType"), ("CAMBIUM-PTP800-MIB", "rFURxRFSynthLockAlarm"), ("CAMBIUM-PTP800-MIB", "rFUTxRFSynthLockAlarm"), ("CAMBIUM-PTP800-MIB", "rFUTxPowerAlarm"), ("CAMBIUM-PTP800-MIB", "rFUCommonIFSynthLockAlarm"), ("CAMBIUM-PTP800-MIB", "rFUPowerAlarm"), ("CAMBIUM-PTP800-MIB", "rFULockoutAlarm"), ("CAMBIUM-PTP800-MIB", "rFUCableAlarm"), ("CAMBIUM-PTP800-MIB", "rFUCableAttenuationAdjustAlarm"), ("CAMBIUM-PTP800-MIB", "rFUTxPowerDegradedAlarm"), ("CAMBIUM-PTP800-MIB", "rFURpsAlarm"), ("CAMBIUM-PTP800-MIB", "rFUTxMuteStatus"), ("CAMBIUM-PTP800-MIB", "rFUFanAssemblyAlarm"), ("CAMBIUM-PTP800-MIB", "rFUHighTemperatureAlarm"), ("CAMBIUM-PTP800-MIB", "rFURFSwitchAlarm"), ("CAMBIUM-PTP800-MIB", "rFURxIFSynthLockAlarm"), ("CAMBIUM-PTP800-MIB", "rFUTxIFSynthLockAlarm"), ("CAMBIUM-PTP800-MIB", "rFUPowerButtonPressed"), ("CAMBIUM-PTP800-MIB", "rFUConnectedPlatform"), ("CAMBIUM-PTP800-MIB", "rFUCommonRFSynthLockAlarm"), ("CAMBIUM-PTP800-MIB", "rFUBranchingConfiguration"), ("CAMBIUM-PTP800-MIB", "rFUTransceiverLocation"), ("CAMBIUM-PTP800-MIB", "rFURfSwitchCableAlarm"), ("CAMBIUM-PTP800-MIB", "rFUReceiveBranchingUnitLoss"), ("CAMBIUM-PTP800-MIB", "rFUTransmitBranchingUnitLoss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rfuGroup = rfuGroup.setStatus('current')
radioLicenseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 24)).setObjects(("CAMBIUM-PTP800-MIB", "radioLicenseIdentifier"), ("CAMBIUM-PTP800-MIB", "radioLicenseBand"), ("CAMBIUM-PTP800-MIB", "radioLicenseRegion"), ("CAMBIUM-PTP800-MIB", "radioLicenseTxFreq"), ("CAMBIUM-PTP800-MIB", "radioLicenseRxFreq"), ("CAMBIUM-PTP800-MIB", "radioLicenseBandwidth"), ("CAMBIUM-PTP800-MIB", "radioLicenseMaxEIRP"), ("CAMBIUM-PTP800-MIB", "radioLicenseModulation"), ("CAMBIUM-PTP800-MIB", "radioLicenseCodeRate"), ("CAMBIUM-PTP800-MIB", "radioLicenseIncompatibleAlarm"), ("CAMBIUM-PTP800-MIB", "radioLicenseMinModulation"), ("CAMBIUM-PTP800-MIB", "radioLicenseMinCodeRate"), ("CAMBIUM-PTP800-MIB", "radioLicenseMaxModulation"), ("CAMBIUM-PTP800-MIB", "radioLicenseMaxCodeRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    radioLicenseGroup = radioLicenseGroup.setStatus('current')
protectionConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 25)).setObjects(("CAMBIUM-PTP800-MIB", "protection"), ("CAMBIUM-PTP800-MIB", "faultProtectionSwitching"), ("CAMBIUM-PTP800-MIB", "primarySecondaryMode"), ("CAMBIUM-PTP800-MIB", "numberOfAntennas"), ("CAMBIUM-PTP800-MIB", "primaryRecovery"), ("CAMBIUM-PTP800-MIB", "primaryRecoveryPeriod"), ("CAMBIUM-PTP800-MIB", "requestedProtectionState"), ("CAMBIUM-PTP800-MIB", "antennaReceiveLevelDeltaThreshold"), ("CAMBIUM-PTP800-MIB", "antennaReceiveLevelMeasurementWindow"), ("CAMBIUM-PTP800-MIB", "fiberY"), ("CAMBIUM-PTP800-MIB", "rxDiversityVlanTpid"), ("CAMBIUM-PTP800-MIB", "rxDiversityVid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    protectionConfigGroup = protectionConfigGroup.setStatus('current')
protectionStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 26)).setObjects(("CAMBIUM-PTP800-MIB", "protectionAvailabilityStatus"), ("CAMBIUM-PTP800-MIB", "protectionConfigurationStatus"), ("CAMBIUM-PTP800-MIB", "protectionState"), ("CAMBIUM-PTP800-MIB", "activeUnit"), ("CAMBIUM-PTP800-MIB", "protectionSwitchCause"), ("CAMBIUM-PTP800-MIB", "endId"), ("CAMBIUM-PTP800-MIB", "neighborIPAddress"), ("CAMBIUM-PTP800-MIB", "neighborMACAddress"), ("CAMBIUM-PTP800-MIB", "wirelessReceiveSignalStatus"), ("CAMBIUM-PTP800-MIB", "licensedTransmitCapacityStatus"), ("CAMBIUM-PTP800-MIB", "dataPortEthernetSpeedStatus"), ("CAMBIUM-PTP800-MIB", "managementPortEthernetSpeedStatus"), ("CAMBIUM-PTP800-MIB", "protectionInterfaceStatus"), ("CAMBIUM-PTP800-MIB", "remotePrimaryIPAddress"), ("CAMBIUM-PTP800-MIB", "remoteSecondaryIPAddress"), ("CAMBIUM-PTP800-MIB", "remotePrimaryMACAddress"), ("CAMBIUM-PTP800-MIB", "remoteSecondaryMACAddress"), ("CAMBIUM-PTP800-MIB", "remotePrimarySecondaryMode"), ("CAMBIUM-PTP800-MIB", "transmitterStatus"), ("CAMBIUM-PTP800-MIB", "endWirelessReceiveSignalStatus"), ("CAMBIUM-PTP800-MIB", "rxDiversityDataPortStatus"), ("CAMBIUM-PTP800-MIB", "rxDiversityAvailabilityStatus"), ("CAMBIUM-PTP800-MIB", "rxDiversityConfigurationStatus"), ("CAMBIUM-PTP800-MIB", "rxDiversityNeighborCompatibility"), ("CAMBIUM-PTP800-MIB", "rxDiversityVlanTpidNeighborCompatibility"), ("CAMBIUM-PTP800-MIB", "rxDiversityVidNeighborCompatibility"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    protectionStatusGroup = protectionStatusGroup.setStatus('current')
protectionStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 27)).setObjects(("CAMBIUM-PTP800-MIB", "activeCodeWordCount"), ("CAMBIUM-PTP800-MIB", "activeCodeWordErrorCount"), ("CAMBIUM-PTP800-MIB", "activeByteCount"), ("CAMBIUM-PTP800-MIB", "activeByteErrorCount"), ("CAMBIUM-PTP800-MIB", "activeAvailableTime"), ("CAMBIUM-PTP800-MIB", "activeCounterMeasurementPeriod"), ("CAMBIUM-PTP800-MIB", "activeWirelessLinkAvailability"), ("CAMBIUM-PTP800-MIB", "activeCodeWordErrorRatio"), ("CAMBIUM-PTP800-MIB", "activeByteErrorRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    protectionStatsGroup = protectionStatsGroup.setStatus('current')
syslogControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 28)).setObjects(("CAMBIUM-PTP800-MIB", "syslogClient"), ("CAMBIUM-PTP800-MIB", "syslogState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    syslogControlGroup = syslogControlGroup.setStatus('current')
supplementaryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 96)).setObjects(("CAMBIUM-PTP800-MIB", "longitude"), ("CAMBIUM-PTP800-MIB", "latitude"), ("CAMBIUM-PTP800-MIB", "altitude"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    supplementaryGroup = supplementaryGroup.setStatus('current')
notificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 17713, 8, 98, 99)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortStatusTrap"), ("CAMBIUM-PTP800-MIB", "linkNameMismatchTrap"), ("CAMBIUM-PTP800-MIB", "alignmentModeTrap"), ("CAMBIUM-PTP800-MIB", "unitOutOfCalibrationTrap"), ("CAMBIUM-PTP800-MIB", "encryptionEnabledMismatchTrap"), ("CAMBIUM-PTP800-MIB", "wirelessLinkDisabledWarningTrap"), ("CAMBIUM-PTP800-MIB", "dataPortDisabledWarningTrap"), ("CAMBIUM-PTP800-MIB", "dataPortFiberStatusTrap"), ("CAMBIUM-PTP800-MIB", "dataPortConfigurationMismatchTrap"), ("CAMBIUM-PTP800-MIB", "sNTPSyncTrap"), ("CAMBIUM-PTP800-MIB", "managementPortStatusTrap"), ("CAMBIUM-PTP800-MIB", "managementPortDisabledWarningTrap"), ("CAMBIUM-PTP800-MIB", "rFUStatusTrap"), ("CAMBIUM-PTP800-MIB", "managementPortConfigurationMismatchTrap"), ("CAMBIUM-PTP800-MIB", "wirelessLinkStatusTrap"), ("CAMBIUM-PTP800-MIB", "protectionAvailabilityStatusTrap"), ("CAMBIUM-PTP800-MIB", "protectionConfigurationStatusTrap"), ("CAMBIUM-PTP800-MIB", "protectionStateTrap"), ("CAMBIUM-PTP800-MIB", "wirelessReceiveSignalStatusTrap"), ("CAMBIUM-PTP800-MIB", "licensedTransmitCapacityStatusTrap"), ("CAMBIUM-PTP800-MIB", "dataPortEthernetSpeedStatusTrap"), ("CAMBIUM-PTP800-MIB", "managementPortEthernetSpeedStatusTrap"), ("CAMBIUM-PTP800-MIB", "protectionInterfaceStatusTrap"), ("CAMBIUM-PTP800-MIB", "syslogStateTrap"), ("CAMBIUM-PTP800-MIB", "syslogLocalNearlyFullTrap"), ("CAMBIUM-PTP800-MIB", "syslogLocalWrappedTrap"), ("CAMBIUM-PTP800-MIB", "secureModeAlarmTrap"), ("CAMBIUM-PTP800-MIB", "endWirelessReceiveSignalStatusTrap"), ("CAMBIUM-PTP800-MIB", "rxDiversityDataPortStatusTrap"), ("CAMBIUM-PTP800-MIB", "rxDiversityAvailabilityStatusTrap"), ("CAMBIUM-PTP800-MIB", "rxDiversityConfigurationStatusTrap"), ("CAMBIUM-PTP800-MIB", "rFUPowerButtonPressedTrap"), ("CAMBIUM-PTP800-MIB", "syslogClientTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationsGroup = notificationsGroup.setStatus('current')
ethernetPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 6, 15), )
if mibBuilder.loadTexts: ethernetPriorityTable.setStatus('current')
ethernetPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 6, 15, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "ethernetPriorityTableIndex"))
if mibBuilder.loadTexts: ethernetPriorityTableEntry.setStatus('current')
l2CPPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 6, 32), )
if mibBuilder.loadTexts: l2CPPriorityTable.setStatus('current')
l2CPPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 6, 32, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "l2CPPriorityTableIndex"))
if mibBuilder.loadTexts: l2CPPriorityTableEntry.setStatus('current')
iPDSCPPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 6, 38), )
if mibBuilder.loadTexts: iPDSCPPriorityTable.setStatus('current')
iPDSCPPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 6, 38, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "iPDSCPPriorityTableIndex"))
if mibBuilder.loadTexts: iPDSCPPriorityTableEntry.setStatus('current')
mPLSTCPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 6, 40), )
if mibBuilder.loadTexts: mPLSTCPriorityTable.setStatus('current')
mPLSTCPriorityTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 6, 40, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "mPLSTCPriorityTableIndex"))
if mibBuilder.loadTexts: mPLSTCPriorityTableEntry.setStatus('current')
sNMPTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10), )
if mibBuilder.loadTexts: sNMPTrapTable.setStatus('current')
sNMPTrapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "sNMPTrapTableIndex"))
if mibBuilder.loadTexts: sNMPTrapTableEntry.setStatus('current')
sNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15), )
if mibBuilder.loadTexts: sNTPServerTable.setStatus('current')
sNTPServerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1), ).setIndexNames((0, "CAMBIUM-PTP800-MIB", "sNTPServerTableIndex"))
if mibBuilder.loadTexts: sNTPServerTableEntry.setStatus('current')
localPacketFiltering = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: localPacketFiltering.setStatus('current')
iPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPAddress.setStatus('current')
subnetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMask.setStatus('current')
gatewayIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayIPAddress.setStatus('current')
maximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 370))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumTransmitPower.setStatus('current')
antennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 610))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaGain.setStatus('current')
rFFeederLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFFeederLoss.setStatus('current')
remoteIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteIPAddress.setStatus('current')
remoteMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMACAddress.setStatus('current')
enableTransmission = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("muted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableTransmission.setStatus('current')
aTPCEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aTPCEnable.setStatus('current')
iFCableLength = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iFCableLength.setStatus('current')
linkName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('current')
siteName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteName.setStatus('current')
diverseAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 610))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diverseAntennaGain.setStatus('current')
diverseRfFeederLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diverseRfFeederLoss.setStatus('current')
dataPortCopperAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortCopperAutoNegotiation.setStatus('current')
dataPortCopperAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 2), Bits().clone(namedValues=NamedValues(("neg100MbpsFullDuplex", 6), ("neg1000MbpsFullDuplex", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortCopperAutoNegAdvertisement.setStatus('current')
dataPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("down", 0), ("copperLinkUp", 1), ("fiberLinkUp", 2), ("fiberYInactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortStatus.setStatus('current')
dataPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("speed1000MbpsFullDuplex", 0), ("speed100MbpsFullDuplex", 1), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortSpeedAndDuplex.setStatus('current')
dataPortWirelessDownAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataPortWirelessDownAlert.setStatus('current')
useVLANForManagementInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noVLANTagging", 0), ("iEEE8021QTaggedCTagType8100", 1), ("iEEE8021adTaggedSTagorBTagType88a8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useVLANForManagementInterfaces.setStatus('current')
vLANManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementPriority.setStatus('current')
vLANManagementVIDValidation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementVIDValidation.setStatus('current')
vLANManagementVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vLANManagementVID.setStatus('current')
ethernetPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPriorityTableNumber.setStatus('current')
managementPortAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementPortAutoNegotiation.setStatus('current')
managementPortAutoNegAdvertisement = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 17), Bits().clone(namedValues=NamedValues(("neg10MbpsFullDuplex", 6), ("neg100MbpsFullDuplex", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementPortAutoNegAdvertisement.setStatus('current')
managementPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("copperLinkUp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortStatus.setStatus('current')
managementPortSpeedAndDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("speed100MbpsFullDuplex", 1), ("speed10MbpsFullDuplex", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortSpeedAndDuplex.setStatus('current')
managementPortWirelessDownAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managementPortWirelessDownAlert.setStatus('current')
managementMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("outofBandLocal", 0), ("outofBand", 1), ("inBand", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementMode.setStatus('current')
managementCommittedInformationRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("kbps200", 0), ("kbps300", 1), ("kbps400", 2), ("kbps500", 3), ("kbps600", 4), ("kbps700", 5), ("kbps800", 6), ("kbps900", 7), ("kbps1000", 8), ("kbps1100", 9), ("kbps1200", 10), ("kbps1300", 11), ("kbps1400", 12), ("kbps1500", 13), ("kbps1600", 14), ("kbps1700", 15), ("kbps1800", 16), ("kbps1900", 17), ("kbps2000", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementCommittedInformationRate.setStatus('current')
dataPortPauseFrames = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tunnel", 0), ("discard", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortPauseFrames.setStatus('current')
transmitCapacityLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitCapacityLimit.setStatus('current')
transmitCapacityLimitDetail = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("limitedDueToAbsenceOfLicenseKey", 0), ("runningAtTheCapacityLimit", 1), ("runningAtUnlimitedCapacity", 2), ("restrictedDueToRemoteEthernetSpeed", 3), ("limitedDueToDevelopmentOverride", 4), ("unlimitedDueToDevelopmentOverride", 5), ("unlimitedCapacityTrialPeriod", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitCapacityLimitDetail.setStatus('current')
dataPortEthernetMediaTypeToUse = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("autowithFiberPreference", 0), ("forceCopper", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortEthernetMediaTypeToUse.setStatus('current')
dataPortCopperForcedConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("force100MbpsFullDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortCopperForcedConfiguration.setStatus('current')
managementPortForcedConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("force100MbpsFullDuplex", 0), ("force10MbpsFullDuplex", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortForcedConfiguration.setStatus('current')
l2CPPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2CPPriorityTableNumber.setStatus('current')
unknownNetworkPriorityQueueMapping = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownNetworkPriorityQueueMapping.setStatus('current')
dSCPManagementPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dSCPManagementPriority.setStatus('current')
qOSPriorityScheme = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ethernet", 0), ("iPMPLS", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qOSPriorityScheme.setStatus('current')
iPDSCPPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iPDSCPPriorityTableNumber.setStatus('current')
mPLSTCPriorityTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 6, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mPLSTCPriorityTableNumber.setStatus('current')
ethernetPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPriorityQueueMapping.setStatus('current')
ethernetPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("p0", 1), ("p1", 2), ("p2", 3), ("p3", 4), ("p4", 5), ("p5", 6), ("p6", 7), ("p7", 8), ("untagged", 9))))
if mibBuilder.loadTexts: ethernetPriorityTableIndex.setStatus('current')
l2CPPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 32, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2CPPriorityQueueMapping.setStatus('current')
l2CPPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bridge", 1), ("gARPMRP", 2), ("cFM", 3), ("rAPS", 4), ("eAPS", 5))))
if mibBuilder.loadTexts: l2CPPriorityTableIndex.setStatus('current')
iPDSCPPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 38, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iPDSCPPriorityQueueMapping.setStatus('current')
iPDSCPPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 38, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: iPDSCPPriorityTableIndex.setStatus('current')
mPLSTCPriorityQueueMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 40, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("q0", 0), ("q1", 1), ("q2", 2), ("q3", 3), ("q4", 4), ("q5", 5), ("q6", 6), ("q7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mPLSTCPriorityQueueMapping.setStatus('current')
mPLSTCPriorityTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 6, 40, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: mPLSTCPriorityTableIndex.setStatus('current')
productVariant = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("pTPxx400Full", 0), ("pTPxx400Deprecated1", 1), ("pTPxx400Deprecated2", 2), ("pTPxx400Lite", 3), ("spare1", 4), ("pTPxx300", 5), ("spare2", 6), ("spare3", 7), ("pTPxx500FullDeprecated", 8), ("pTPxx500LiteDeprecated", 9), ("pTPxx500", 10), ("pTPxx600Lite", 11), ("pTPxx600Full", 12), ("spare5", 13), ("spare6", 14), ("pTP800", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVariant.setStatus('current')
productName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('current')
ethernetFiberSupport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetFiberSupport.setStatus('current')
transmitCapacity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("rate10Mbps", 0), ("rate20Mbps", 1), ("rate30Mbps", 2), ("rate40Mbps", 3), ("rate50Mbps", 4), ("rate100Mbps", 5), ("rate150Mbps", 6), ("rate200Mbps", 7), ("rate300Mbps", 8), ("rateUnlimited", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitCapacity.setStatus('current')
encryptionAlgorithmsAvail = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("aESRijndael", 1), ("aES256bitRijndael", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionAlgorithmsAvail.setStatus('current')
securityLevel = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 8, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityLevel.setStatus('current')
linkNameMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("linkNameMismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNameMismatch.setStatus('current')
alignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("aligning", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alignmentMode.setStatus('current')
tFTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerIPAddress.setStatus('current')
tFTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPServerPortNumber.setStatus('current')
tFTPSoftwareUpgradeFileName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeFileName.setStatus('current')
tFTPStartSoftwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tFTPStartSoftwareUpgrade.setStatus('current')
tFTPSoftwareUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("uploadinprogress", 1), ("uploadsuccessfulprogrammingFLASH", 2), ("upgradesuccessfulreboottorunthenewsoftwareimage", 3), ("upgradefailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatus.setStatus('current')
tFTPSoftwareUpgradeStatusText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusText.setStatus('current')
tFTPSoftwareUpgradeStatusAdditionalText = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tFTPSoftwareUpgradeStatusAdditionalText.setStatus('current')
hTTPAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPAccessEnabled.setStatus('current')
telnetAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetAccessEnabled.setStatus('current')
hTTPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPPortNumber.setStatus('current')
hTTPSPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hTTPSPortNumber.setStatus('current')
telnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNumber.setStatus('current')
hTTPSAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hTTPSAccessEnabled.setStatus('current')
remoteMaximumTransmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1000, 370))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteMaximumTransmitPower.setStatus('current')
minModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minModulation.setStatus('current')
minCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: minCodeRate.setStatus('current')
maxModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxModulation.setStatus('current')
maxCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxCodeRate.setStatus('current')
receivePower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receivePower.setStatus('current')
vectorError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vectorError.setStatus('current')
transmitPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitPower.setStatus('current')
linkLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-500, 1800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLoss.setStatus('current')
receiveModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveModulation.setStatus('current')
transmitModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitModulation.setStatus('current')
receiveCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveCodeRate.setStatus('current')
transmitCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 12, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitCodeRate.setStatus('current')
unitOutOfCalibration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("calibrated", 0), ("partialCalibration", 1), ("invalidCalibration", 2), ("bandwidthvariantunsupportedPAsShutdown", 3), ("outOfCalibrationPAsShutdown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitOutOfCalibration.setStatus('current')
encryptionEnabledMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("encryptionEnabledMismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionEnabledMismatch.setStatus('current')
wirelessLinkDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkDisabledWarning.setStatus('current')
dataPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortDisabledWarning.setStatus('current')
dataPortFiberStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("installedFiberNotLicensed", 1), ("noFiberLinkEstablishedButLOSNotDetected", 2), ("noFiberLinkEstablishedAndLOSDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortFiberStatus.setStatus('current')
dataPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortConfigurationMismatch.setStatus('current')
managementPortDisabledWarning = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("disabledBySNMPifAdminStatus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortDisabledWarning.setStatus('current')
rFUStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("ok", 0), ("fault", 1), ("unknown3", 2), ("inReset", 3), ("downloadInProgress", 4), ("incompatibleFirmwareVersion", 5), ("incompatibleDevice", 6), ("iFICardAttached", 7), ("noResponse", 8), ("powerSupplyFault", 9), ("powerSupplyDisabled", 10), ("switchingmemorybanks", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUStatus.setStatus('current')
managementPortConfigurationMismatch = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noError", 0), ("mismatchDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortConfigurationMismatch.setStatus('current')
secureModeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("secureModeIsActive", 0), ("secureModeIsNotConfigured", 1), ("secureModeIsConfiguredButNotActive", 2), ("secureModeIsNotSupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secureModeAlarm.setStatus('current')
rFUPlatformCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUPlatformCompatibility.setStatus('current')
rFUProtectionCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 13, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUProtectionCompatibility.setStatus('current')
sMTPEmailAlert = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEmailAlert.setStatus('current')
sMTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerIPAddress.setStatus('current')
sMTPServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPServerPortNumber.setStatus('current')
sMTPSourceEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPSourceEmailAddress.setStatus('current')
sMTPDestinationEmailAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPDestinationEmailAddress.setStatus('current')
sMTPEnabledMessages = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 15, 6), Bits().clone(namedValues=NamedValues(("protectionState", 3), ("enabledDiagnosticAlarms", 4), ("managementPortUpDown", 5), ("dataPortUpDown", 6), ("wirelessLinkUpDown", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sMTPEnabledMessages.setStatus('current')
sNMPPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPPortNumber.setStatus('current')
sNMPCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPCommunityString.setStatus('current')
sNMPTrapVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v1", 0), ("v2c", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapVersion.setStatus('current')
sNMPEnabledTraps = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 6), Bits().clone(namedValues=NamedValues(("protectionState", 1), ("authenticationFailure", 2), ("enabledDiagnosticAlarms", 3), ("managementPortUpDown", 4), ("dataPortUpDown", 5), ("wirelessLinkUpDown", 6), ("coldStart", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPEnabledTraps.setStatus('current')
enabledDiagnosticAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 7), Bits().clone(namedValues=NamedValues(("dataPortConfigurationMismatch", 0), ("wirelessLinkDisabledWarning", 1), ("wirelessLinkStatus", 2), ("sNTPSync", 3), ("encryptionEnabledMismatch", 4), ("unitOutOfCalibration", 5), ("linkNameMismatch", 6), ("alignmentMode", 7), ("syslogDisabledWarning", 8), ("managementPortStatus", 9), ("dataPortStatus", 10), ("rFUStatus", 11), ("managementPortDisabledWarning", 12), ("managementPortConfigurationMismatch", 13), ("dataPortFiberStatus", 14), ("dataPortDisabledWarning", 15), ("syslogClientDisabledWarning", 19), ("rFUPowerButtonPressed", 20), ("secureMode", 21), ("syslogLocalWrapped", 22), ("syslogLocalNearlyFull", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabledDiagnosticAlarms.setStatus('current')
enabledDiagnosticProtectionAlarms = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 8), Bits().clone(namedValues=NamedValues(("endWirelessReceiveSignalStatus", 0), ("protectionInterfaceStatus", 1), ("managementPortEthernetSpeedStatus", 2), ("dataPortEthernetSpeedStatus", 3), ("licensedTransmitCapacityStatus", 4), ("wirelessReceiveSignalStatus", 5), ("protectionConfigurationStatus", 6), ("protectionAvailabilityStatus", 7), ("rxDiversityAvailabilityStatus", 13), ("rxDiversityConfigurationStatus", 14), ("rxDiversityDataPortStatus", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enabledDiagnosticProtectionAlarms.setStatus('current')
sNMPTrapTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 16, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNMPTrapTableNumber.setStatus('current')
sNMPTrapTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNMPTrapTableIndex.setStatus('current')
sNMPTrapIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapIPAddress.setStatus('current')
sNMPTrapPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 16, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNMPTrapPortNumber.setStatus('current')
sNTPState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPState.setStatus('current')
sNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 43200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPollInterval.setStatus('current')
sNTPSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noSync", 0), ("inSync", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPSync.setStatus('current')
sNTPLastSync = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPLastSync.setStatus('current')
systemClock = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemClock.setStatus('current')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50))).clone(namedValues=NamedValues(("gmtMinus1200", 0), ("gmtMinus1130", 1), ("gmtMinus1100", 2), ("gmtMinus1030", 3), ("gmtMinus1000", 4), ("gmtMinus0930", 5), ("gmtMinus0900", 6), ("gmtMinus0830", 7), ("gmtMinus0800", 8), ("gmtMinus0730", 9), ("gmtMinus0700", 10), ("gmtMinus0630", 11), ("gmtMinus0600", 12), ("gmtMinus0530", 13), ("gmtMinus0500", 14), ("gmtMinus0430", 15), ("gmtMinus0400", 16), ("gmtMinus0330", 17), ("gmtMinus0300", 18), ("gmtMinus0230", 19), ("gmtMinus0200", 20), ("gmtMinus0130", 21), ("gmtMinus0100", 22), ("gmtMinus0030", 23), ("gmtZero", 24), ("gmtPlus0030", 25), ("gmtPlus0100", 26), ("gmtPlus0130", 27), ("gmtPlus0200", 28), ("gmtPlus0230", 29), ("gmtPlus0300", 30), ("gmtPlus0330", 31), ("gmtPlus0400", 32), ("gmtPlus0430", 33), ("gmtPlus0500", 34), ("gmtPlus0530", 35), ("gmtPlus0600", 36), ("gmtPlus0630", 37), ("gmtPlus0700", 38), ("gmtPlus0730", 39), ("gmtPlus0800", 40), ("gmtPlus0830", 41), ("gmtPlus0900", 42), ("gmtPlus0930", 43), ("gmtPlus1000", 44), ("gmtPlus1030", 45), ("gmtPlus1100", 46), ("gmtPlus1130", 47), ("gmtPlus1200", 48), ("gmtPlus1230", 49), ("gmtPlus1300", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeZone.setStatus('current')
daylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daylightSaving.setStatus('current')
sNTPPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("server1", 0), ("server2", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPrimaryServer.setStatus('current')
sNTPPrimaryServerDeadTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPPrimaryServerDeadTime.setStatus('current')
sNTPServerRetries = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerRetries.setStatus('current')
sNTPServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerTimeout.setStatus('current')
sNTPServerTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 17, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerTableNumber.setStatus('current')
sNTPServerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: sNTPServerTableIndex.setStatus('current')
sNTPServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerIPAddress.setStatus('current')
sNTPServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sNTPServerPortNumber.setStatus('current')
sNTPServerResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 8, 17, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sNTPServerResponse.setStatus('current')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("running", 0), ("consoleReboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('current')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 19, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
hardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 19, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareVersion.setStatus('current')
secondarySoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 19, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secondarySoftwareVersion.setStatus('current')
bootVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 19, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootVersion.setStatus('current')
receiveDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: receiveDataRate.setStatus('current')
transmitDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitDataRate.setStatus('current')
aggregateDataRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggregateDataRate.setStatus('current')
wirelessLinkAvailability = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkAvailability.setStatus('current')
wirelessLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 0), ("registering", 1), ("searching", 2), ("acquiring", 3), ("radarCAC", 4), ("initialising", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLinkStatus.setStatus('current')
byteErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: byteErrorRatio.setStatus('current')
codeWordErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 20, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codeWordErrorRatio.setStatus('current')
encryptionAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("aESRijndael", 1), ("aES256bitRijndael", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: encryptionAlgorithm.setStatus('current')
rFURfBand = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6000, 38000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURfBand.setStatus('current')
rFUTxBandAboveRx = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxBandAboveRx.setStatus('current')
rFUFreqSpacing = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1560000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUFreqSpacing.setStatus('current')
rFUTxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxPowerMin.setStatus('current')
rFUTxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160, 370))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxPowerMax.setStatus('current')
rFURxFreqMin = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5725000, 41000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURxFreqMin.setStatus('current')
rFURxFreqMax = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5725000, 41000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURxFreqMax.setStatus('current')
rFUTxFreqMin = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5725000, 41000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxFreqMin.setStatus('current')
rFUTxFreqMax = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5725000, 41000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxFreqMax.setStatus('current')
rFUSerial = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUSerial.setStatus('current')
rFUActiveFirmwareBank = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUActiveFirmwareBank.setStatus('current')
rFUVersionBank1 = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUVersionBank1.setStatus('current')
rFUVersionBank2 = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUVersionBank2.setStatus('current')
rFUType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUType.setStatus('current')
rFURxRFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("outOfLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURxRFSynthLockAlarm.setStatus('current')
rFUTxRFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("outOfLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxRFSynthLockAlarm.setStatus('current')
rFUTxPowerAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("txOutputFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxPowerAlarm.setStatus('current')
rFUCommonIFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("outOfLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUCommonIFSynthLockAlarm.setStatus('current')
rFUPowerAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("powerFailed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUPowerAlarm.setStatus('current')
rFULockoutAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("lockedOut", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFULockoutAlarm.setStatus('current')
rFUCableAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("iFCableVoltageOutOfRange", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUCableAlarm.setStatus('current')
rFUCableAttenuationAdjustAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("iFCableAttenuatorAdjusting", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUCableAttenuationAdjustAlarm.setStatus('current')
rFUTxPowerDegradedAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("degraded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxPowerDegradedAlarm.setStatus('current')
rFURpsAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("rPSAlarmActive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURpsAlarm.setStatus('current')
rFUTxMuteStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("transmitting", 0), ("mutedByUser", 1), ("mutedDueToConfigurationError", 2), ("mutedDueToRFUFault", 3), ("mutedDueToRFUConfiguring", 4), ("mutedDueToRFUIncompatiblewithCMU", 5), ("mutedDueToInactive", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxMuteStatus.setStatus('current')
rFUFanAssemblyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("partialFanFailure", 1), ("totalFanFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUFanAssemblyAlarm.setStatus('current')
rFUHighTemperatureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("highTemperature", 1), ("veryHighTemperature", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUHighTemperatureAlarm.setStatus('current')
rFURFSwitchAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("fault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURFSwitchAlarm.setStatus('current')
rFURxIFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("outOfLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURxIFSynthLockAlarm.setStatus('current')
rFUTxIFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("outOfLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTxIFSynthLockAlarm.setStatus('current')
rFUPowerButtonPressed = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("iRFUPowerButtonwaspressed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUPowerButtonPressed.setStatus('current')
rFUConnectedPlatform = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("oDUA", 1), ("oDUB", 2), ("iRFUHP", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUConnectedPlatform.setStatus('current')
rFUCommonRFSynthLockAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("outOfLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUCommonRFSynthLockAlarm.setStatus('current')
rFUBranchingConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("rFU1plus0", 0), ("rFU1plus0MHSBReadyEqual", 1), ("rFU1plus0MHSBReadyUnequal", 2), ("rFU1plus1MHSBEqual", 3), ("rFU1plus1MHSBUnequal", 4), ("rFU1plus1TxMHSBRxSD", 5), ("rFU2plus0", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rFUBranchingConfiguration.setStatus('current')
rFUTransceiverLocation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("leftTRxA", 0), ("rightTRxB", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rFUTransceiverLocation.setStatus('current')
rFURfSwitchCableAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("fault", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFURfSwitchCableAlarm.setStatus('current')
rFUReceiveBranchingUnitLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUReceiveBranchingUnitLoss.setStatus('current')
rFUTransmitBranchingUnitLoss = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 23, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rFUTransmitBranchingUnitLoss.setStatus('current')
radioLicenseIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseIdentifier.setStatus('current')
radioLicenseBand = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("bandLower6GHz", 0), ("band7GHz", 1), ("band8GHz", 2), ("band11GHz", 3), ("band13GHz", 4), ("band15GHz", 5), ("band18GHz", 6), ("band23GHz", 7), ("band26GHz", 8), ("band32GHz", 9), ("band38GHz", 10), ("bandUpper6GHz", 11), ("band28GHz", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseBand.setStatus('current')
radioLicenseRegion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("eTSI", 0), ("fCC", 1), ("canada", 2), ("brazil", 3), ("nTIA", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseRegion.setStatus('current')
radioLicenseTxFreq = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5925000, 40105000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseTxFreq.setStatus('current')
radioLicenseRxFreq = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5925000, 40105000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseRxFreq.setStatus('current')
radioLicenseBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("bw7MHz", 0), ("bw10MHz", 1), ("bw1375MHz", 2), ("bw14MHz", 3), ("bw20MHz", 4), ("bw275MHz", 5), ("bw28MHz", 6), ("bw30MHz", 7), ("bw40MHz", 8), ("bw50MHz", 9), ("bw55MHz", 10), ("bw56MHz", 11), ("bw80MHz", 12), ("bw25MHz", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseBandwidth.setStatus('current')
radioLicenseMaxEIRP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-300, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMaxEIRP.setStatus('current')
radioLicenseModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseModulation.setStatus('current')
radioLicenseCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseCodeRate.setStatus('current')
radioLicenseIncompatibleAlarm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("radioLicenseIncompatiblewithRFU", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseIncompatibleAlarm.setStatus('current')
radioLicenseMinModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMinModulation.setStatus('current')
radioLicenseMinCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMinCodeRate.setStatus('current')
radioLicenseMaxModulation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modQPSK", 0), ("mod8PSK", 1), ("mod16QAM", 2), ("mod32QAM", 3), ("mod64QAM", 4), ("mod128QAM", 5), ("mod256QAM", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMaxModulation.setStatus('current')
radioLicenseMaxCodeRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 24, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLicenseMaxCodeRate.setStatus('current')
protection = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("hotStandby1plus1", 1), ("hotStandby1plus1withRxDiversity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protection.setStatus('current')
faultProtectionSwitching = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: faultProtectionSwitching.setStatus('current')
primarySecondaryMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primarySecondaryMode.setStatus('current')
numberOfAntennas = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("one", 0), ("two", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfAntennas.setStatus('current')
primaryRecovery = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryRecovery.setStatus('current')
primaryRecoveryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2880))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: primaryRecoveryPeriod.setStatus('current')
requestedProtectionState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: requestedProtectionState.setStatus('current')
antennaReceiveLevelDeltaThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaReceiveLevelDeltaThreshold.setStatus('current')
antennaReceiveLevelMeasurementWindow = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2880))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennaReceiveLevelMeasurementWindow.setStatus('current')
fiberY = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fiberY.setStatus('current')
rxDiversityVlanTpid = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("iEEE8021QTaggedCTagType8100", 0), ("iEEE8021adTaggedSTagorBTagType88a8", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxDiversityVlanTpid.setStatus('current')
rxDiversityVid = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 25, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rxDiversityVid.setStatus('current')
protectionAvailabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("notProtected", 1), ("notProtecting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionAvailabilityStatus.setStatus('current')
protectionConfigurationStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("configurationNotProtecting", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionConfigurationStatus.setStatus('current')
protectionState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionState.setStatus('current')
activeUnit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeUnit.setStatus('current')
protectionSwitchCause = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("noPreviousProtectionSwitch", 0), ("neighborCMUConnectedButNotResponding", 1), ("rFUNotResponding", 2), ("rFURxRFSynthOutofLock", 3), ("rFUTxRFSynthOutofLock", 4), ("rFUCommonRFSynthOutofLock", 5), ("rFUCableFailure", 6), ("rFUCableAttenuatorAdjustmentFailure", 7), ("rFUTxPowerDegraded", 8), ("dataPortDown", 9), ("managementPortDown", 10), ("wirelessReceiveSignalNotDetected", 11), ("byteErrorRatioOverThreshold", 12), ("codeWordErrorRatioOverThreshold", 13), ("cMURebooting", 14), ("configurationNotProtecting", 15), ("wirelessReceiveSignalNotDetectedatRemoteEnd", 16), ("byteErrorRatioOverThresholdatRemoteEnd", 17), ("codeWordErrorRatioOverThresholdatRemoteEnd", 18), ("multipleReceiveFailureatRemoteEnd", 19), ("primaryRecovery", 20), ("managedProtectionSwitch", 21), ("rFURxIFSynthOutofLock", 22), ("rFUTxIFSynthOutofLock", 23), ("rFUCommonIFSynthOutofLock", 24), ("rFUVeryHighTemperature", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionSwitchCause.setStatus('current')
endId = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endId.setStatus('current')
neighborIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborIPAddress.setStatus('current')
neighborMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborMACAddress.setStatus('current')
wirelessReceiveSignalStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessReceiveSignalStatus.setStatus('current')
licensedTransmitCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("lessThanNeighbor", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensedTransmitCapacityStatus.setStatus('current')
dataPortEthernetSpeedStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("lessThanNeighbor", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPortEthernetSpeedStatus.setStatus('current')
managementPortEthernetSpeedStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("lessThanNeighbor", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementPortEthernetSpeedStatus.setStatus('current')
protectionInterfaceStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("neighborNotResponding", 1), ("neighborNotConnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protectionInterfaceStatus.setStatus('current')
remotePrimaryIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePrimaryIPAddress.setStatus('current')
remoteSecondaryIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSecondaryIPAddress.setStatus('current')
remotePrimaryMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePrimaryMACAddress.setStatus('current')
remoteSecondaryMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteSecondaryMACAddress.setStatus('current')
remotePrimarySecondaryMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("primary", 0), ("secondary", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePrimarySecondaryMode.setStatus('current')
transmitterStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("muted", 0), ("transmitting", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transmitterStatus.setStatus('current')
endWirelessReceiveSignalStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notDetected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endWirelessReceiveSignalStatus.setStatus('current')
rxDiversityDataPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("notProtecting", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityDataPortStatus.setStatus('current')
rxDiversityAvailabilityStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("notProtected", 1), ("notProtecting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityAvailabilityStatus.setStatus('current')
rxDiversityConfigurationStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("configurationNotProtecting", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityConfigurationStatus.setStatus('current')
rxDiversityNeighborCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityNeighborCompatibility.setStatus('current')
rxDiversityVlanTpidNeighborCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityVlanTpidNeighborCompatibility.setStatus('current')
rxDiversityVidNeighborCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 26, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxDiversityVidNeighborCompatibility.setStatus('current')
activeCodeWordCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeCodeWordCount.setStatus('current')
activeCodeWordErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeCodeWordErrorCount.setStatus('current')
activeByteCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeByteCount.setStatus('current')
activeByteErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeByteErrorCount.setStatus('current')
activeAvailableTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeAvailableTime.setStatus('current')
activeCounterMeasurementPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeCounterMeasurementPeriod.setStatus('current')
activeWirelessLinkAvailability = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeWirelessLinkAvailability.setStatus('current')
activeCodeWordErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeCodeWordErrorRatio.setStatus('current')
activeByteErrorRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 27, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeByteErrorRatio.setStatus('current')
syslogClient = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 28, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogClient.setStatus('current')
syslogState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 28, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogState.setStatus('current')
longitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 96, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: longitude.setStatus('current')
latitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 96, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: latitude.setStatus('current')
altitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 8, 96, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: altitude.setStatus('current')
dataPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 3)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortStatus"))
if mibBuilder.loadTexts: dataPortStatusTrap.setStatus('current')
linkNameMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 9)).setObjects(("CAMBIUM-PTP800-MIB", "linkNameMismatch"))
if mibBuilder.loadTexts: linkNameMismatchTrap.setStatus('current')
alignmentModeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 10)).setObjects(("CAMBIUM-PTP800-MIB", "alignmentMode"))
if mibBuilder.loadTexts: alignmentModeTrap.setStatus('current')
unitOutOfCalibrationTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 11)).setObjects(("CAMBIUM-PTP800-MIB", "unitOutOfCalibration"))
if mibBuilder.loadTexts: unitOutOfCalibrationTrap.setStatus('current')
encryptionEnabledMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 13)).setObjects(("CAMBIUM-PTP800-MIB", "encryptionEnabledMismatch"))
if mibBuilder.loadTexts: encryptionEnabledMismatchTrap.setStatus('current')
wirelessLinkDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 16)).setObjects(("CAMBIUM-PTP800-MIB", "wirelessLinkDisabledWarning"))
if mibBuilder.loadTexts: wirelessLinkDisabledWarningTrap.setStatus('current')
dataPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 17)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortDisabledWarning"))
if mibBuilder.loadTexts: dataPortDisabledWarningTrap.setStatus('current')
dataPortFiberStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 18)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortFiberStatus"))
if mibBuilder.loadTexts: dataPortFiberStatusTrap.setStatus('current')
dataPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 19)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortConfigurationMismatch"))
if mibBuilder.loadTexts: dataPortConfigurationMismatchTrap.setStatus('current')
sNTPSyncTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 21)).setObjects(("CAMBIUM-PTP800-MIB", "sNTPSync"))
if mibBuilder.loadTexts: sNTPSyncTrap.setStatus('current')
managementPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 23)).setObjects(("CAMBIUM-PTP800-MIB", "managementPortStatus"))
if mibBuilder.loadTexts: managementPortStatusTrap.setStatus('current')
managementPortDisabledWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 24)).setObjects(("CAMBIUM-PTP800-MIB", "managementPortDisabledWarning"))
if mibBuilder.loadTexts: managementPortDisabledWarningTrap.setStatus('current')
rFUStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 27)).setObjects(("CAMBIUM-PTP800-MIB", "rFUStatus"))
if mibBuilder.loadTexts: rFUStatusTrap.setStatus('current')
managementPortConfigurationMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 28)).setObjects(("CAMBIUM-PTP800-MIB", "managementPortConfigurationMismatch"))
if mibBuilder.loadTexts: managementPortConfigurationMismatchTrap.setStatus('current')
wirelessLinkStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 29)).setObjects(("CAMBIUM-PTP800-MIB", "wirelessLinkStatus"))
if mibBuilder.loadTexts: wirelessLinkStatusTrap.setStatus('current')
protectionAvailabilityStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 31)).setObjects(("CAMBIUM-PTP800-MIB", "protectionAvailabilityStatus"))
if mibBuilder.loadTexts: protectionAvailabilityStatusTrap.setStatus('current')
protectionConfigurationStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 32)).setObjects(("CAMBIUM-PTP800-MIB", "protectionConfigurationStatus"))
if mibBuilder.loadTexts: protectionConfigurationStatusTrap.setStatus('current')
protectionStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 33)).setObjects(("CAMBIUM-PTP800-MIB", "protectionState"))
if mibBuilder.loadTexts: protectionStateTrap.setStatus('current')
wirelessReceiveSignalStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 34)).setObjects(("CAMBIUM-PTP800-MIB", "wirelessReceiveSignalStatus"))
if mibBuilder.loadTexts: wirelessReceiveSignalStatusTrap.setStatus('current')
licensedTransmitCapacityStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 36)).setObjects(("CAMBIUM-PTP800-MIB", "licensedTransmitCapacityStatus"))
if mibBuilder.loadTexts: licensedTransmitCapacityStatusTrap.setStatus('current')
dataPortEthernetSpeedStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 37)).setObjects(("CAMBIUM-PTP800-MIB", "dataPortEthernetSpeedStatus"))
if mibBuilder.loadTexts: dataPortEthernetSpeedStatusTrap.setStatus('current')
managementPortEthernetSpeedStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 38)).setObjects(("CAMBIUM-PTP800-MIB", "managementPortEthernetSpeedStatus"))
if mibBuilder.loadTexts: managementPortEthernetSpeedStatusTrap.setStatus('current')
protectionInterfaceStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 39)).setObjects(("CAMBIUM-PTP800-MIB", "protectionInterfaceStatus"))
if mibBuilder.loadTexts: protectionInterfaceStatusTrap.setStatus('current')
syslogStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 40)).setObjects(("CAMBIUM-PTP800-MIB", "syslogState"))
if mibBuilder.loadTexts: syslogStateTrap.setStatus('current')
syslogLocalNearlyFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 41))
if mibBuilder.loadTexts: syslogLocalNearlyFullTrap.setStatus('current')
syslogLocalWrappedTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 42))
if mibBuilder.loadTexts: syslogLocalWrappedTrap.setStatus('current')
secureModeAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 43)).setObjects(("CAMBIUM-PTP800-MIB", "secureModeAlarm"))
if mibBuilder.loadTexts: secureModeAlarmTrap.setStatus('current')
endWirelessReceiveSignalStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 44)).setObjects(("CAMBIUM-PTP800-MIB", "endWirelessReceiveSignalStatus"))
if mibBuilder.loadTexts: endWirelessReceiveSignalStatusTrap.setStatus('current')
rxDiversityDataPortStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 45)).setObjects(("CAMBIUM-PTP800-MIB", "rxDiversityDataPortStatus"))
if mibBuilder.loadTexts: rxDiversityDataPortStatusTrap.setStatus('current')
rxDiversityAvailabilityStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 46)).setObjects(("CAMBIUM-PTP800-MIB", "rxDiversityAvailabilityStatus"))
if mibBuilder.loadTexts: rxDiversityAvailabilityStatusTrap.setStatus('current')
rxDiversityConfigurationStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 47)).setObjects(("CAMBIUM-PTP800-MIB", "rxDiversityConfigurationStatus"))
if mibBuilder.loadTexts: rxDiversityConfigurationStatusTrap.setStatus('current')
rFUPowerButtonPressedTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 48)).setObjects(("CAMBIUM-PTP800-MIB", "rFUPowerButtonPressed"))
if mibBuilder.loadTexts: rFUPowerButtonPressedTrap.setStatus('current')
syslogClientTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 8, 99, 0, 49)).setObjects(("CAMBIUM-PTP800-MIB", "syslogClient"))
if mibBuilder.loadTexts: syslogClientTrap.setStatus('current')
mibBuilder.exportSymbols("CAMBIUM-PTP800-MIB", activeAvailableTime=activeAvailableTime, bootVersion=bootVersion, securityLevel=securityLevel, sMTPDestinationEmailAddress=sMTPDestinationEmailAddress, alignmentMode=alignmentMode, licensedTransmitCapacityStatusTrap=licensedTransmitCapacityStatusTrap, sntpGroup=sntpGroup, dataPortWirelessDownAlert=dataPortWirelessDownAlert, maximumTransmitPower=maximumTransmitPower, bridgeGroup=bridgeGroup, vLANManagementVID=vLANManagementVID, maxModulation=maxModulation, dataPortCopperAutoNegAdvertisement=dataPortCopperAutoNegAdvertisement, mPLSTCPriorityTable=mPLSTCPriorityTable, rFUPowerAlarm=rFUPowerAlarm, syslogControlGroup=syslogControlGroup, ethernetPriorityTableIndex=ethernetPriorityTableIndex, versionsGroup=versionsGroup, dataPortStatus=dataPortStatus, pubStatsGroup=pubStatsGroup, unitOutOfCalibrationTrap=unitOutOfCalibrationTrap, rxDiversityNeighborCompatibility=rxDiversityNeighborCompatibility, iPDSCPPriorityTableNumber=iPDSCPPriorityTableNumber, rFUTxPowerDegradedAlarm=rFUTxPowerDegradedAlarm, rFUTransmitBranchingUnitLoss=rFUTransmitBranchingUnitLoss, activeByteErrorRatio=activeByteErrorRatio, rFUTxIFSynthLockAlarm=rFUTxIFSynthLockAlarm, sNMPTrapPortNumber=sNMPTrapPortNumber, aggregateDataRate=aggregateDataRate, dataPortSpeedAndDuplex=dataPortSpeedAndDuplex, useVLANForManagementInterfaces=useVLANForManagementInterfaces, tFTPServerIPAddress=tFTPServerIPAddress, pubStats=pubStats, encryptionAlgorithmsAvail=encryptionAlgorithmsAvail, hardwareVersion=hardwareVersion, rFUActiveFirmwareBank=rFUActiveFirmwareBank, productVariant=productVariant, iPAddress=iPAddress, dataPortEthernetSpeedStatusTrap=dataPortEthernetSpeedStatusTrap, rFUTxPowerMax=rFUTxPowerMax, rFUFanAssemblyAlarm=rFUFanAssemblyAlarm, sNMPPortNumber=sNMPPortNumber, licence=licence, activeCodeWordErrorRatio=activeCodeWordErrorRatio, phyControlGroup=phyControlGroup, primarySecondaryMode=primarySecondaryMode, versions=versions, subnetMask=subnetMask, rFFeederLoss=rFFeederLoss, tFTPServerPortNumber=tFTPServerPortNumber, managementGroup=managementGroup, rFUType=rFUType, transmitCapacityLimit=transmitCapacityLimit, transmitCapacityLimitDetail=transmitCapacityLimitDetail, rxDiversityVlanTpid=rxDiversityVlanTpid, remotePrimaryMACAddress=remotePrimaryMACAddress, protectionStateTrap=protectionStateTrap, receiveDataRate=receiveDataRate, activeByteErrorCount=activeByteErrorCount, activeCodeWordCount=activeCodeWordCount, protectionAvailabilityStatus=protectionAvailabilityStatus, sNMPCommunityString=sNMPCommunityString, syslogStateTrap=syslogStateTrap, dataPortConfigurationMismatchTrap=dataPortConfigurationMismatchTrap, snmpControl=snmpControl, transmitModulation=transmitModulation, numberOfAntennas=numberOfAntennas, mPLSTCPriorityTableEntry=mPLSTCPriorityTableEntry, vectorError=vectorError, sNTPLastSync=sNTPLastSync, encryptionAlgorithm=encryptionAlgorithm, supplementaryGroup=supplementaryGroup, managementPortStatusTrap=managementPortStatusTrap, sNMPTrapTable=sNMPTrapTable, tFTPSoftwareUpgradeStatusText=tFTPSoftwareUpgradeStatusText, radioLicenseMaxCodeRate=radioLicenseMaxCodeRate, sNMPTrapIPAddress=sNMPTrapIPAddress, neighborMACAddress=neighborMACAddress, sNTPSyncTrap=sNTPSyncTrap, rFUTxFreqMax=rFUTxFreqMax, sMTPEmailAlert=sMTPEmailAlert, ethernetPriorityTable=ethernetPriorityTable, sNTPServerResponse=sNTPServerResponse, alignmentModeTrap=alignmentModeTrap, rFUTxFreqMin=rFUTxFreqMin, ethernetPriorityTableEntry=ethernetPriorityTableEntry, sNMPEnabledTraps=sNMPEnabledTraps, dSCPManagementPriority=dSCPManagementPriority, licenceGroup=licenceGroup, enabledDiagnosticProtectionAlarms=enabledDiagnosticProtectionAlarms, iPDSCPPriorityQueueMapping=iPDSCPPriorityQueueMapping, receiveCodeRate=receiveCodeRate, rFUBranchingConfiguration=rFUBranchingConfiguration, resetGroup=resetGroup, encryptionGroup=encryptionGroup, sNMPTrapVersion=sNMPTrapVersion, managementPortForcedConfiguration=managementPortForcedConfiguration, unknownNetworkPriorityQueueMapping=unknownNetworkPriorityQueueMapping, remotePrimaryIPAddress=remotePrimaryIPAddress, protectionStatus=protectionStatus, rxDiversityAvailabilityStatus=rxDiversityAvailabilityStatus, protection=protection, rFURxIFSynthLockAlarm=rFURxIFSynthLockAlarm, qOSPriorityScheme=qOSPriorityScheme, diverseRfFeederLoss=diverseRfFeederLoss, snmpControlGroup=snmpControlGroup, ptmp=ptmp, remotePrimarySecondaryMode=remotePrimarySecondaryMode, mPLSTCPriorityTableNumber=mPLSTCPriorityTableNumber, rFUCableAlarm=rFUCableAlarm, managementPortEthernetSpeedStatus=managementPortEthernetSpeedStatus, dataPortPauseFrames=dataPortPauseFrames, antennaReceiveLevelMeasurementWindow=antennaReceiveLevelMeasurementWindow, altitude=altitude, dataPortEthernetMediaTypeToUse=dataPortEthernetMediaTypeToUse, tFTPSoftwareUpgradeStatusAdditionalText=tFTPSoftwareUpgradeStatusAdditionalText, sMTPServerPortNumber=sMTPServerPortNumber, sNMPTrapTableEntry=sNMPTrapTableEntry, localPacketFiltering=localPacketFiltering, rxDiversityVid=rxDiversityVid, fiberY=fiberY, transmitCodeRate=transmitCodeRate, rFUVersionBank2=rFUVersionBank2, sNTPServerPortNumber=sNTPServerPortNumber, radioLicenseModulation=radioLicenseModulation, neighborIPAddress=neighborIPAddress, rFURxFreqMin=rFURxFreqMin, ptpTraps=ptpTraps, vLANManagementPriority=vLANManagementPriority, transmitDataRate=transmitDataRate, protectionConfig=protectionConfig, dataPortCopperAutoNegotiation=dataPortCopperAutoNegotiation, primaryRecovery=primaryRecovery, systemReset=systemReset, receiveModulation=receiveModulation, rFUPowerButtonPressedTrap=rFUPowerButtonPressedTrap, activeCounterMeasurementPeriod=activeCounterMeasurementPeriod, radioLicenseIdentifier=radioLicenseIdentifier, managementPortDisabledWarning=managementPortDisabledWarning, rFUTxMuteStatus=rFUTxMuteStatus, protectionInterfaceStatus=protectionInterfaceStatus, sMTPEnabledMessages=sMTPEnabledMessages, l2CPPriorityTable=l2CPPriorityTable, dataPortStatusTrap=dataPortStatusTrap, managementMode=managementMode, rFURxFreqMax=rFURxFreqMax, encryptionEnabledMismatchTrap=encryptionEnabledMismatchTrap, rFURxRFSynthLockAlarm=rFURxRFSynthLockAlarm, rFUStatusTrap=rFUStatusTrap, rFURpsAlarm=rFURpsAlarm, rfu=rfu, ptpCompliance=ptpCompliance, sNTPServerRetries=sNTPServerRetries, rFUTxPowerAlarm=rFUTxPowerAlarm, radioLicenseMaxEIRP=radioLicenseMaxEIRP, managementPortConfigurationMismatchTrap=managementPortConfigurationMismatchTrap, tFTPStartSoftwareUpgrade=tFTPStartSoftwareUpgrade, bridge=bridge, secondarySoftwareVersion=secondarySoftwareVersion, aTPCEnable=aTPCEnable, dataPortConfigurationMismatch=dataPortConfigurationMismatch, dataPortDisabledWarningTrap=dataPortDisabledWarningTrap, remoteMaximumTransmitPower=remoteMaximumTransmitPower, encryption=encryption, sMTPSourceEmailAddress=sMTPSourceEmailAddress, receivePower=receivePower, hTTPPortNumber=hTTPPortNumber, radioLicenseMinModulation=radioLicenseMinModulation, phyControl=phyControl, syslogLocalNearlyFullTrap=syslogLocalNearlyFullTrap, rxDiversityConfigurationStatusTrap=rxDiversityConfigurationStatusTrap, configurationGroup=configurationGroup, syslogState=syslogState, sNTPServerTimeout=sNTPServerTimeout, radioLicenseMinCodeRate=radioLicenseMinCodeRate, linkNameMismatchTrap=linkNameMismatchTrap, rFUConnectedPlatform=rFUConnectedPlatform, managementCommittedInformationRate=managementCommittedInformationRate, sNMPTrapTableNumber=sNMPTrapTableNumber, syslogClient=syslogClient, rFUPowerButtonPressed=rFUPowerButtonPressed, faultProtectionSwitching=faultProtectionSwitching, antennaReceiveLevelDeltaThreshold=antennaReceiveLevelDeltaThreshold, radioLicenseTxFreq=radioLicenseTxFreq, wirelessLinkDisabledWarning=wirelessLinkDisabledWarning, radioLicenseCodeRate=radioLicenseCodeRate, remoteMACAddress=remoteMACAddress, alarms=alarms, PYSNMP_MODULE_ID=cambium, minModulation=minModulation, rfuGroup=rfuGroup, sNTPPollInterval=sNTPPollInterval, sNTPSync=sNTPSync, timeZone=timeZone, remoteSecondaryIPAddress=remoteSecondaryIPAddress, mPLSTCPriorityTableIndex=mPLSTCPriorityTableIndex, encryptionEnabledMismatch=encryptionEnabledMismatch, supplementary=supplementary, rFUTransceiverLocation=rFUTransceiverLocation, endId=endId, wirelessReceiveSignalStatus=wirelessReceiveSignalStatus, dataPortCopperForcedConfiguration=dataPortCopperForcedConfiguration, rFUTxRFSynthLockAlarm=rFUTxRFSynthLockAlarm, managementPortConfigurationMismatch=managementPortConfigurationMismatch, rxDiversityVidNeighborCompatibility=rxDiversityVidNeighborCompatibility, managementPortEthernetSpeedStatusTrap=managementPortEthernetSpeedStatusTrap, softwareVersion=softwareVersion, radioLicenseMaxModulation=radioLicenseMaxModulation, latitude=latitude, alarmsGroup=alarmsGroup, radioLicenseBandwidth=radioLicenseBandwidth, protectionStats=protectionStats, managementPortSpeedAndDuplex=managementPortSpeedAndDuplex, hTTPSPortNumber=hTTPSPortNumber, activeCodeWordErrorCount=activeCodeWordErrorCount, rxDiversityAvailabilityStatusTrap=rxDiversityAvailabilityStatusTrap, dataPortFiberStatus=dataPortFiberStatus, protectionConfigurationStatusTrap=protectionConfigurationStatusTrap, systemClock=systemClock, byteErrorRatio=byteErrorRatio, remoteSecondaryMACAddress=remoteSecondaryMACAddress, protectionAvailabilityStatusTrap=protectionAvailabilityStatusTrap, transmitterStatus=transmitterStatus, l2CPPriorityTableNumber=l2CPPriorityTableNumber, sNTPServerTableEntry=sNTPServerTableEntry, hTTPAccessEnabled=hTTPAccessEnabled, radioLicense=radioLicense, configuration=configuration, codeWordErrorRatio=codeWordErrorRatio, radioLicenseGroup=radioLicenseGroup, rFUVersionBank1=rFUVersionBank1, ptpTrapPrefix=ptpTrapPrefix, management=management, rFUProtectionCompatibility=rFUProtectionCompatibility, mPLSTCPriorityQueueMapping=mPLSTCPriorityQueueMapping, iPDSCPPriorityTableIndex=iPDSCPPriorityTableIndex, rFUHighTemperatureAlarm=rFUHighTemperatureAlarm, radioLicenseRegion=radioLicenseRegion, protectionInterfaceStatusTrap=protectionInterfaceStatusTrap, endWirelessReceiveSignalStatusTrap=endWirelessReceiveSignalStatusTrap, l2CPPriorityTableEntry=l2CPPriorityTableEntry, managementPortAutoNegotiation=managementPortAutoNegotiation, rFUFreqSpacing=rFUFreqSpacing, maxCodeRate=maxCodeRate, rFURfBand=rFURfBand, dataPortFiberStatusTrap=dataPortFiberStatusTrap, syslogLocalWrappedTrap=syslogLocalWrappedTrap, l2CPPriorityQueueMapping=l2CPPriorityQueueMapping, rFUReceiveBranchingUnitLoss=rFUReceiveBranchingUnitLoss, antennaGain=antennaGain, ethernetGroup=ethernetGroup, sNMPTrapTableIndex=sNMPTrapTableIndex, syslogControl=syslogControl, managementPortAutoNegAdvertisement=managementPortAutoNegAdvertisement)
mibBuilder.exportSymbols("CAMBIUM-PTP800-MIB", rFURfSwitchCableAlarm=rFURfSwitchCableAlarm, protectionConfigurationStatus=protectionConfigurationStatus, managementPortDisabledWarningTrap=managementPortDisabledWarningTrap, siteName=siteName, rFUTxPowerMin=rFUTxPowerMin, longitude=longitude, rxDiversityDataPortStatusTrap=rxDiversityDataPortStatusTrap, sNTPServerTable=sNTPServerTable, sNTPPrimaryServer=sNTPPrimaryServer, ethernetPriorityQueueMapping=ethernetPriorityQueueMapping, radioLicenseRxFreq=radioLicenseRxFreq, daylightSaving=daylightSaving, endWirelessReceiveSignalStatus=endWirelessReceiveSignalStatus, syslogClientTrap=syslogClientTrap, iPDSCPPriorityTableEntry=iPDSCPPriorityTableEntry, linkNameMismatch=linkNameMismatch, tFTPSoftwareUpgradeFileName=tFTPSoftwareUpgradeFileName, secureModeAlarm=secureModeAlarm, rFURFSwitchAlarm=rFURFSwitchAlarm, telnetAccessEnabled=telnetAccessEnabled, l2CPPriorityTableIndex=l2CPPriorityTableIndex, reset=reset, minCodeRate=minCodeRate, smtp=smtp, sMTPServerIPAddress=sMTPServerIPAddress, rFUCableAttenuationAdjustAlarm=rFUCableAttenuationAdjustAlarm, activeByteCount=activeByteCount, iFCableLength=iFCableLength, activeUnit=activeUnit, notificationsGroup=notificationsGroup, rFUCommonRFSynthLockAlarm=rFUCommonRFSynthLockAlarm, ethernet=ethernet, wirelessLinkDisabledWarningTrap=wirelessLinkDisabledWarningTrap, ethernetPriorityTableNumber=ethernetPriorityTableNumber, diverseAntennaGain=diverseAntennaGain, enableTransmission=enableTransmission, transmitPower=transmitPower, rxDiversityConfigurationStatus=rxDiversityConfigurationStatus, ethernetFiberSupport=ethernetFiberSupport, radioLicenseBand=radioLicenseBand, rFULockoutAlarm=rFULockoutAlarm, hTTPSAccessEnabled=hTTPSAccessEnabled, rxDiversityVlanTpidNeighborCompatibility=rxDiversityVlanTpidNeighborCompatibility, rFUCommonIFSynthLockAlarm=rFUCommonIFSynthLockAlarm, sNTPState=sNTPState, protectionState=protectionState, unitOutOfCalibration=unitOutOfCalibration, dataPortDisabledWarning=dataPortDisabledWarning, protectionStatsGroup=protectionStatsGroup, rFUStatus=rFUStatus, managementPortWirelessDownAlert=managementPortWirelessDownAlert, rFUPlatformCompatibility=rFUPlatformCompatibility, primaryRecoveryPeriod=primaryRecoveryPeriod, enabledDiagnosticAlarms=enabledDiagnosticAlarms, radioLicenseIncompatibleAlarm=radioLicenseIncompatibleAlarm, requestedProtectionState=requestedProtectionState, protectionStatusGroup=protectionStatusGroup, cambium=cambium, iPDSCPPriorityTable=iPDSCPPriorityTable, wirelessReceiveSignalStatusTrap=wirelessReceiveSignalStatusTrap, managementPortStatus=managementPortStatus, vLANManagementVIDValidation=vLANManagementVIDValidation, tFTPSoftwareUpgradeStatus=tFTPSoftwareUpgradeStatus, rFUTxBandAboveRx=rFUTxBandAboveRx, wirelessLinkAvailability=wirelessLinkAvailability, ptp800=ptp800, dataPortEthernetSpeedStatus=dataPortEthernetSpeedStatus, sNTPServerIPAddress=sNTPServerIPAddress, activeWirelessLinkAvailability=activeWirelessLinkAvailability, linkName=linkName, protectionSwitchCause=protectionSwitchCause, secureModeAlarmTrap=secureModeAlarmTrap, remoteIPAddress=remoteIPAddress, sNTPPrimaryServerDeadTime=sNTPPrimaryServerDeadTime, wirelessLinkStatus=wirelessLinkStatus, licensedTransmitCapacityStatus=licensedTransmitCapacityStatus, wirelessLinkStatusTrap=wirelessLinkStatusTrap, ptp=ptp, ptpGroups=ptpGroups, phyStatusGroup=phyStatusGroup, sNTPServerTableIndex=sNTPServerTableIndex, rFUSerial=rFUSerial, linkLoss=linkLoss, smtpGroup=smtpGroup, telnetPortNumber=telnetPortNumber, productName=productName, sNTPServerTableNumber=sNTPServerTableNumber, protectionConfigGroup=protectionConfigGroup, phyStatus=phyStatus, sntp=sntp, transmitCapacity=transmitCapacity, rxDiversityDataPortStatus=rxDiversityDataPortStatus, gatewayIPAddress=gatewayIPAddress)
