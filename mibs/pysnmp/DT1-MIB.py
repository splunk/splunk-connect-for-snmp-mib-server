#
# PySNMP MIB module DT1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DT1-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:39:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, NotificationType, IpAddress, Counter32, iso, experimental, enterprises, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, Unsigned32, ModuleIdentity, MibIdentifier, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "IpAddress", "Counter32", "iso", "experimental", "enterprises", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "MibIdentifier", "Gauge32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
dt1 = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 3))
dt1Id = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 3, 1))
dt1IdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 3, 1, 1), )
if mibBuilder.loadTexts: dt1IdTable.setStatus('mandatory')
dt1IdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 3, 1, 1, 1), ).setIndexNames((0, "DT1-MIB", "dt1IdIndex"))
if mibBuilder.loadTexts: dt1IdEntry.setStatus('mandatory')
dt1IdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1IdIndex.setStatus('mandatory')
dt1IdHardwareSerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1IdHardwareSerNum.setStatus('mandatory')
dt1IdHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1IdHardwareRev.setStatus('mandatory')
dt1IdSoftwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1IdSoftwareRev.setStatus('mandatory')
dt1Cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 3, 2))
dt1CfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 3, 2, 1), )
if mibBuilder.loadTexts: dt1CfgTable.setStatus('mandatory')
dt1CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 3, 2, 1, 1), ).setIndexNames((0, "DT1-MIB", "dt1CfgIndex"))
if mibBuilder.loadTexts: dt1CfgEntry.setStatus('mandatory')
dt1CfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1CfgIndex.setStatus('mandatory')
dt1CfgSpanATmgSrcPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notAllowed", 1), ("high", 2), ("mediumHigh", 3), ("medium", 4), ("low", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1CfgSpanATmgSrcPrio.setStatus('mandatory')
dt1CfgSpanBTmgSrcPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notAllowed", 1), ("high", 2), ("mediumHigh", 3), ("medium", 4), ("low", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1CfgSpanBTmgSrcPrio.setStatus('mandatory')
dt1CfgInternTmgSrcPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notAllowed", 1), ("high", 2), ("mediumHigh", 3), ("medium", 4), ("low", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1CfgInternTmgSrcPrio.setStatus('mandatory')
dt1CfgTdmBusTmgSrcPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notAllowed", 1), ("high", 2), ("mediumHigh", 3), ("medium", 4), ("low", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1CfgTdmBusTmgSrcPrio.setStatus('deprecated')
dt1CfgIdleDiscPatt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1CfgIdleDiscPatt.setStatus('mandatory')
dt1CfgNumT1TypeNacs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("single", 2), ("multiple", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1CfgNumT1TypeNacs.setStatus('mandatory')
dt1CfgCallEventFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notSupported", 1), ("filterOutNone", 2), ("filterOutBoth", 3), ("filterOutSuccess", 4), ("filterOutFailure", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1CfgCallEventFilter.setStatus('mandatory')
dt1CfgSetDs0OutofService = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1CfgSetDs0OutofService.setStatus('mandatory')
dt1CfgWirelessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("wireless", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1CfgWirelessMode.setStatus('mandatory')
dt1Stat = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 3, 3))
dt1StatTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 3, 3, 1), )
if mibBuilder.loadTexts: dt1StatTable.setStatus('mandatory')
dt1StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 3, 3, 1, 1), ).setIndexNames((0, "DT1-MIB", "dt1StatIndex"))
if mibBuilder.loadTexts: dt1StatEntry.setStatus('mandatory')
dt1StatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1StatIndex.setStatus('mandatory')
dt1StatCurrentTmgSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("spanLineA", 1), ("spanLineB", 2), ("internalClock", 3), ("tdmBusClock", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1StatCurrentTmgSrc.setStatus('mandatory')
dt1StatSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1StatSelfTest.setStatus('mandatory')
dt1StatUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1StatUpTime.setStatus('mandatory')
dt1StatCallEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("notSupported", 1), ("setup", 2), ("usrSetup", 3), ("telcoDisconnect", 4), ("usrDisconnect", 5), ("noFreeModem", 6), ("modemsNotAllowed", 7), ("modemsRejectCall", 8), ("modemSetupTimeout", 9), ("noFreeIGW", 10), ("igwRejectCall", 11), ("igwSetupTimeout", 12), ("noFreeTdmts", 13), ("bcReject", 14), ("ieReject", 15), ("chidReject", 16), ("progReject", 17), ("callingPartyReject", 18), ("calledPartyReject", 19), ("blocked", 20), ("analogBlocked", 21), ("digitalBlocked", 22), ("outOfService", 23), ("busy", 24), ("congestion", 25), ("protocolError", 26), ("noFreeBchannel", 27), ("inOutCallCollision", 28), ("inCallArrival", 29), ("outCallArrival", 30), ("inCallConnect", 31), ("outCallConnect", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1StatCallEventCode.setStatus('mandatory')
dt1StatCallEventQ931Value = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1StatCallEventQ931Value.setStatus('mandatory')
dt1Cmd = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 3, 4))
dt1CmdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 3, 4, 1), )
if mibBuilder.loadTexts: dt1CmdTable.setStatus('mandatory')
dt1CmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 3, 4, 1, 1), ).setIndexNames((0, "DT1-MIB", "dt1CmdIndex"))
if mibBuilder.loadTexts: dt1CmdEntry.setStatus('mandatory')
dt1CmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1CmdIndex.setStatus('mandatory')
dt1CmdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1CmdMgtStationId.setStatus('mandatory')
dt1CmdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1CmdReqId.setStatus('mandatory')
dt1CmdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("noCommand", 1), ("saveToNVRAM", 2), ("restoreFromNVRAM", 3), ("restoreFromDefault", 4), ("nonDisruptSelfTest", 5), ("disruptSelfTest", 6), ("softwareReset", 7), ("resetToHiPrioTimingSrc", 8), ("forceTdmBusMastership", 9), ("enterSpanToSpanLoopback", 10), ("exitSpanToSpanLoopback", 11), ("restoreDefaultUIPassword", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1CmdFunction.setStatus('mandatory')
dt1CmdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("force", 1), ("noForce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1CmdForce.setStatus('mandatory')
dt1CmdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 4, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1CmdParam.setStatus('mandatory')
dt1CmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1CmdResult.setStatus('mandatory')
dt1CmdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 8, 12, 20, 22, 25, 58, 73))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("unrecognizedCommand", 6), ("slotEmpty", 8), ("noResponse", 12), ("unsupportedCommand", 20), ("deviceDisabled", 22), ("testFailed", 25), ("userInterfaceActive", 58), ("pendingSoftwareDownload", 73)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1CmdCode.setStatus('mandatory')
dt1TrapEnaTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 3, 5), )
if mibBuilder.loadTexts: dt1TrapEnaTable.setStatus('mandatory')
dt1TrapEnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 3, 5, 1), ).setIndexNames((0, "DT1-MIB", "dt1TrapEnaIndex"))
if mibBuilder.loadTexts: dt1TrapEnaEntry.setStatus('mandatory')
dt1TrapEnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dt1TrapEnaIndex.setStatus('mandatory')
dt1TrapEnaTxTmgSrcSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1TrapEnaTxTmgSrcSwitch.setStatus('mandatory')
dt1TrapEnaCallEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1TrapEnaCallEvent.setStatus('mandatory')
dt1TrapEnaCallArriveEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1TrapEnaCallArriveEvent.setStatus('mandatory')
dt1TrapEnaCallConnEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1TrapEnaCallConnEvent.setStatus('mandatory')
dt1TrapEnaCallTermEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1TrapEnaCallTermEvent.setStatus('mandatory')
dt1TrapEnaCallFailEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enableTrap", 1), ("disableAll", 2), ("enableLog", 3), ("enableAll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dt1TrapEnaCallFailEvent.setStatus('mandatory')
mibBuilder.exportSymbols("DT1-MIB", dt1IdIndex=dt1IdIndex, dt1TrapEnaCallEvent=dt1TrapEnaCallEvent, dt1StatCallEventQ931Value=dt1StatCallEventQ931Value, dt1StatTable=dt1StatTable, dt1TrapEnaTxTmgSrcSwitch=dt1TrapEnaTxTmgSrcSwitch, dt1StatUpTime=dt1StatUpTime, usr=usr, dt1CmdParam=dt1CmdParam, nas=nas, dt1CmdTable=dt1CmdTable, dt1TrapEnaTable=dt1TrapEnaTable, dt1CfgSpanATmgSrcPrio=dt1CfgSpanATmgSrcPrio, dt1StatSelfTest=dt1StatSelfTest, dt1TrapEnaCallArriveEvent=dt1TrapEnaCallArriveEvent, dt1StatIndex=dt1StatIndex, dt1CmdEntry=dt1CmdEntry, dt1StatCallEventCode=dt1StatCallEventCode, dt1TrapEnaCallTermEvent=dt1TrapEnaCallTermEvent, dt1IdSoftwareRev=dt1IdSoftwareRev, dt1CfgTdmBusTmgSrcPrio=dt1CfgTdmBusTmgSrcPrio, dt1CmdReqId=dt1CmdReqId, dt1CmdCode=dt1CmdCode, dt1CfgSpanBTmgSrcPrio=dt1CfgSpanBTmgSrcPrio, dt1TrapEnaIndex=dt1TrapEnaIndex, dt1IdEntry=dt1IdEntry, dt1CfgCallEventFilter=dt1CfgCallEventFilter, dt1StatEntry=dt1StatEntry, dt1=dt1, dt1CfgWirelessMode=dt1CfgWirelessMode, dt1Cmd=dt1Cmd, dt1CfgIndex=dt1CfgIndex, dt1CfgEntry=dt1CfgEntry, dt1TrapEnaCallFailEvent=dt1TrapEnaCallFailEvent, dt1IdHardwareSerNum=dt1IdHardwareSerNum, dt1CfgIdleDiscPatt=dt1CfgIdleDiscPatt, dt1IdTable=dt1IdTable, dt1Id=dt1Id, dt1TrapEnaEntry=dt1TrapEnaEntry, dt1CmdForce=dt1CmdForce, dt1CfgSetDs0OutofService=dt1CfgSetDs0OutofService, dt1StatCurrentTmgSrc=dt1StatCurrentTmgSrc, dt1CmdIndex=dt1CmdIndex, dt1Cfg=dt1Cfg, dt1CmdMgtStationId=dt1CmdMgtStationId, dt1CfgTable=dt1CfgTable, dt1Stat=dt1Stat, dt1CfgInternTmgSrcPrio=dt1CfgInternTmgSrcPrio, dt1IdHardwareRev=dt1IdHardwareRev, dt1TrapEnaCallConnEvent=dt1TrapEnaCallConnEvent, dt1CfgNumT1TypeNacs=dt1CfgNumT1TypeNacs, dt1CmdResult=dt1CmdResult, dt1CmdFunction=dt1CmdFunction)
