#
# PySNMP MIB module ECPPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ECPPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:44:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, iso, Unsigned32, Counter32, IpAddress, MibIdentifier, Gauge32, NotificationType, ModuleIdentity, Integer32, TimeTicks, ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Unsigned32", "Counter32", "IpAddress", "MibIdentifier", "Gauge32", "NotificationType", "ModuleIdentity", "Integer32", "TimeTicks", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eicon = MibIdentifier((1, 3, 6, 1, 4, 1, 434))
management = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2))
mibv2 = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2))
module = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4))
class PortRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 48)

class PppState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("closed", 1), ("opening", 2), ("negotiating", 3), ("opened", 4), ("closing", 5), ("other", 6))

class NcpState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("req-sent", 7), ("ack-rcvd", 8), ("ack-sent", 9), ("opened", 10), ("other", 11))

ecppp = MibIdentifier((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23))
ecpppStatusTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1), )
if mibBuilder.loadTexts: ecpppStatusTable.setStatus('mandatory')
ecpppStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppStatusPortRef"))
if mibBuilder.loadTexts: ecpppStatusEntry.setStatus('mandatory')
ecpppStatusPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusPortRef.setStatus('mandatory')
ecpppStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 2), PppState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusState.setStatus('mandatory')
ecpppStatusAuthentProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pap", 1), ("chap", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusAuthentProtocol.setStatus('mandatory')
ecpppStatusQualityProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lqr", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusQualityProtocol.setStatus('mandatory')
ecpppStatusNegotiatedPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusNegotiatedPktSize.setStatus('mandatory')
ecpppStatusWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusWindowSize.setStatus('mandatory')
ecpppStatusProtocolCompr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusProtocolCompr.setStatus('mandatory')
ecpppStatusAddrCtrlCompr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusAddrCtrlCompr.setStatus('mandatory')
ecpppStatusRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusRestartTimer.setStatus('mandatory')
ecpppStatusMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusMaxPacketSize.setStatus('mandatory')
ecpppStatusMaxTerminate = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusMaxTerminate.setStatus('mandatory')
ecpppStatusMaxConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusMaxConfig.setStatus('mandatory')
ecpppStatusMaxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusMaxFailure.setStatus('mandatory')
ecpppStatusNcpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatusNcpMask.setStatus('mandatory')
ecpppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2), )
if mibBuilder.loadTexts: ecpppStatsTable.setStatus('mandatory')
ecpppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppStatsPortRef"))
if mibBuilder.loadTexts: ecpppStatsEntry.setStatus('mandatory')
ecpppStatsPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsPortRef.setStatus('mandatory')
ecpppStatsLcpReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpReqTx.setStatus('mandatory')
ecpppStatsLcpReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpReqRx.setStatus('mandatory')
ecpppStatsLcpAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpAckTx.setStatus('mandatory')
ecpppStatsLcpAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpAckRx.setStatus('mandatory')
ecpppStatsLcpNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpNakTx.setStatus('mandatory')
ecpppStatsLcpNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpNakRx.setStatus('mandatory')
ecpppStatsLcpRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpRejTx.setStatus('mandatory')
ecpppStatsLcpRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpRejRx.setStatus('mandatory')
ecpppStatsLcpCodeRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpCodeRejTx.setStatus('mandatory')
ecpppStatsLcpCodeRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpCodeRejRx.setStatus('mandatory')
ecpppStatsLcpProRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpProRejTx.setStatus('mandatory')
ecpppStatsLcpProRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpProRejRx.setStatus('mandatory')
ecpppStatsLcpEchoReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpEchoReqTx.setStatus('mandatory')
ecpppStatsLcpEchoReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpEchoReqRx.setStatus('mandatory')
ecpppStatsLcpEchoReplyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpEchoReplyTx.setStatus('mandatory')
ecpppStatsLcpEchoReplyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpEchoReplyRx.setStatus('mandatory')
ecpppStatsLcpRestartTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpRestartTimeout.setStatus('mandatory')
ecpppStatsLcpTermRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpTermRetrans.setStatus('mandatory')
ecpppStatsLcpConfRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsLcpConfRetrans.setStatus('mandatory')
ecpppStatsFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsFrameTx.setStatus('mandatory')
ecpppStatsFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsFrameRx.setStatus('mandatory')
ecpppStatsCharTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsCharTx.setStatus('mandatory')
ecpppStatsCharRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppStatsCharRx.setStatus('mandatory')
ecpppIPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3), )
if mibBuilder.loadTexts: ecpppIPInfoTable.setStatus('mandatory')
ecpppIPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppIPInfoPortRef"))
if mibBuilder.loadTexts: ecpppIPInfoEntry.setStatus('mandatory')
ecpppIPInfoPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoPortRef.setStatus('mandatory')
ecpppIPInfoNcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 2), NcpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoNcpState.setStatus('mandatory')
ecpppIPInfoIPComprProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("vj-tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoIPComprProtocol.setStatus('mandatory')
ecpppIPInfoIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoIPAddr.setStatus('mandatory')
ecpppIPInfoIPcpMaxTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoIPcpMaxTerm.setStatus('mandatory')
ecpppIPInfoIPcpMaxConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoIPcpMaxConfig.setStatus('mandatory')
ecpppIPInfoIPcpMaxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPInfoIPcpMaxFailure.setStatus('mandatory')
ecpppIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4), )
if mibBuilder.loadTexts: ecpppIPStatsTable.setStatus('mandatory')
ecpppIPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppIPStatsPortRef"))
if mibBuilder.loadTexts: ecpppIPStatsEntry.setStatus('mandatory')
ecpppIPStatsPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsPortRef.setStatus('mandatory')
ecpppIPStatsDatagramsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsDatagramsTx.setStatus('mandatory')
ecpppIPStatsDatagramsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsDatagramsRx.setStatus('mandatory')
ecpppIPStatsCharTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsCharTx.setStatus('mandatory')
ecpppIPStatsCharRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsCharRx.setStatus('mandatory')
ecpppIPStatsNcpRestartTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsNcpRestartTimeout.setStatus('mandatory')
ecpppIPStatsNcpTermRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsNcpTermRetrans.setStatus('mandatory')
ecpppIPStatsNcpReqRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPStatsNcpReqRetrans.setStatus('mandatory')
ecpppIPXInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5), )
if mibBuilder.loadTexts: ecpppIPXInfoTable.setStatus('mandatory')
ecpppIPXInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppIPXInfoPortRef"))
if mibBuilder.loadTexts: ecpppIPXInfoEntry.setStatus('mandatory')
ecpppIPXInfoPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXInfoPortRef.setStatus('mandatory')
ecpppIPXInfoNcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5, 1, 2), NcpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXInfoNcpState.setStatus('mandatory')
ecpppIPXInfoIPXcpMaxTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXInfoIPXcpMaxTerm.setStatus('mandatory')
ecpppIPXInfoIPXcpMaxConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXInfoIPXcpMaxConfig.setStatus('mandatory')
ecpppIPXInfoIPXcpMaxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXInfoIPXcpMaxFailure.setStatus('mandatory')
ecpppIPXStatsTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6), )
if mibBuilder.loadTexts: ecpppIPXStatsTable.setStatus('mandatory')
ecpppIPXStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppIPXStatsPortRef"))
if mibBuilder.loadTexts: ecpppIPXStatsEntry.setStatus('mandatory')
ecpppIPXStatsPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsPortRef.setStatus('mandatory')
ecpppIPXStatsDatagramsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsDatagramsTx.setStatus('mandatory')
ecpppIPXStatsDatagramsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsDatagramsRx.setStatus('mandatory')
ecpppIPXStatsCharTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsCharTx.setStatus('mandatory')
ecpppIPXStatsCharRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsCharRx.setStatus('mandatory')
ecpppIPXStatsNcpRestartTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsNcpRestartTimeout.setStatus('mandatory')
ecpppIPXStatsNcpTermRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsNcpTermRetrans.setStatus('mandatory')
ecpppIPXStatsNcpReqRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppIPXStatsNcpReqRetrans.setStatus('mandatory')
ecpppATInfoTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7), )
if mibBuilder.loadTexts: ecpppATInfoTable.setStatus('mandatory')
ecpppATInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppATInfoPortRef"))
if mibBuilder.loadTexts: ecpppATInfoEntry.setStatus('mandatory')
ecpppATInfoPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoPortRef.setStatus('mandatory')
ecpppATInfoNcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 2), NcpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoNcpState.setStatus('mandatory')
ecpppATInfoRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("rtmp", 2), ("aurp", 3), ("abgp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoRoutingProtocol.setStatus('mandatory')
ecpppATInfoComprConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-compression", 1), ("standard", 2), ("prorietary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoComprConfig.setStatus('mandatory')
ecpppATInfoServerClass = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoServerClass.setStatus('mandatory')
ecpppATInfoATAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoATAddr.setStatus('mandatory')
ecpppATInfoATNode = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoATNode.setStatus('mandatory')
ecpppATInfoATcpMaxTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoATcpMaxTerm.setStatus('mandatory')
ecpppATInfoATcpMaxConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoATcpMaxConfig.setStatus('mandatory')
ecpppATInfoATcpMaxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoATcpMaxFailure.setStatus('mandatory')
ecpppATInfoSrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoSrvName.setStatus('mandatory')
ecpppATInfoZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 7, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATInfoZoneName.setStatus('mandatory')
ecpppATStatsTable = MibTable((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8), )
if mibBuilder.loadTexts: ecpppATStatsTable.setStatus('mandatory')
ecpppATStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1), ).setIndexNames((0, "ECPPP-MIB", "ecpppATStatsPortRef"))
if mibBuilder.loadTexts: ecpppATStatsEntry.setStatus('mandatory')
ecpppATStatsPortRef = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 1), PortRef()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsPortRef.setStatus('mandatory')
ecpppATStatsDatagramsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsDatagramsTx.setStatus('mandatory')
ecpppATStatsDatagramsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsDatagramsRx.setStatus('mandatory')
ecpppATStatsCharTx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsCharTx.setStatus('mandatory')
ecpppATStatsCharRx = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsCharRx.setStatus('mandatory')
ecpppATStatsNcpRestartTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsNcpRestartTimeout.setStatus('mandatory')
ecpppATStatsNcpTermRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsNcpTermRetrans.setStatus('mandatory')
ecpppATStatsNcpReqRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 434, 2, 2, 4, 23, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ecpppATStatsNcpReqRetrans.setStatus('mandatory')
mibBuilder.exportSymbols("ECPPP-MIB", ecpppATInfoComprConfig=ecpppATInfoComprConfig, ecpppStatsCharTx=ecpppStatsCharTx, ecpppIPStatsCharRx=ecpppIPStatsCharRx, ecpppATInfoATNode=ecpppATInfoATNode, ecpppATInfoServerClass=ecpppATInfoServerClass, ecpppIPStatsDatagramsTx=ecpppIPStatsDatagramsTx, ecpppIPStatsNcpRestartTimeout=ecpppIPStatsNcpRestartTimeout, ecpppIPInfoPortRef=ecpppIPInfoPortRef, ecpppIPInfoIPcpMaxTerm=ecpppIPInfoIPcpMaxTerm, ecpppIPStatsPortRef=ecpppIPStatsPortRef, ecpppStatusMaxFailure=ecpppStatusMaxFailure, ecpppATInfoPortRef=ecpppATInfoPortRef, ecpppStatsLcpRejRx=ecpppStatsLcpRejRx, ecpppStatsLcpConfRetrans=ecpppStatsLcpConfRetrans, ecpppStatusPortRef=ecpppStatusPortRef, module=module, ecpppIPStatsDatagramsRx=ecpppIPStatsDatagramsRx, ecpppStatsLcpEchoReqRx=ecpppStatsLcpEchoReqRx, ecpppStatusMaxTerminate=ecpppStatusMaxTerminate, ecpppATInfoTable=ecpppATInfoTable, ecpppStatsLcpCodeRejTx=ecpppStatsLcpCodeRejTx, ecpppStatsLcpEchoReplyRx=ecpppStatsLcpEchoReplyRx, ecpppIPXStatsDatagramsRx=ecpppIPXStatsDatagramsRx, ecpppATStatsNcpTermRetrans=ecpppATStatsNcpTermRetrans, ecpppIPInfoIPAddr=ecpppIPInfoIPAddr, ecpppATStatsNcpRestartTimeout=ecpppATStatsNcpRestartTimeout, NcpState=NcpState, ecpppStatusNegotiatedPktSize=ecpppStatusNegotiatedPktSize, ecpppATInfoSrvName=ecpppATInfoSrvName, ecpppIPXInfoEntry=ecpppIPXInfoEntry, ecpppATInfoZoneName=ecpppATInfoZoneName, ecpppIPStatsEntry=ecpppIPStatsEntry, ecpppATStatsCharTx=ecpppATStatsCharTx, ecpppStatsLcpProRejTx=ecpppStatsLcpProRejTx, ecpppATStatsNcpReqRetrans=ecpppATStatsNcpReqRetrans, ecpppIPXStatsPortRef=ecpppIPXStatsPortRef, ecpppStatusTable=ecpppStatusTable, ecpppStatsEntry=ecpppStatsEntry, ecpppIPInfoEntry=ecpppIPInfoEntry, ecpppStatusNcpMask=ecpppStatusNcpMask, ecpppIPXStatsNcpRestartTimeout=ecpppIPXStatsNcpRestartTimeout, ecpppStatusEntry=ecpppStatusEntry, ecpppStatsLcpEchoReqTx=ecpppStatsLcpEchoReqTx, ecpppATInfoRoutingProtocol=ecpppATInfoRoutingProtocol, ecpppIPXStatsNcpTermRetrans=ecpppIPXStatsNcpTermRetrans, ecpppIPInfoNcpState=ecpppIPInfoNcpState, ecpppIPInfoTable=ecpppIPInfoTable, ecpppStatusAuthentProtocol=ecpppStatusAuthentProtocol, ecpppATStatsEntry=ecpppATStatsEntry, ecpppStatusWindowSize=ecpppStatusWindowSize, ecpppStatsLcpReqRx=ecpppStatsLcpReqRx, management=management, ecpppIPInfoIPcpMaxConfig=ecpppIPInfoIPcpMaxConfig, PppState=PppState, ecpppIPStatsNcpTermRetrans=ecpppIPStatsNcpTermRetrans, ecpppStatsFrameTx=ecpppStatsFrameTx, ecpppIPXInfoNcpState=ecpppIPXInfoNcpState, ecpppStatusRestartTimer=ecpppStatusRestartTimer, ecpppATStatsCharRx=ecpppATStatsCharRx, ecpppIPXStatsDatagramsTx=ecpppIPXStatsDatagramsTx, ecpppStatsLcpRestartTimeout=ecpppStatsLcpRestartTimeout, ecpppStatsLcpProRejRx=ecpppStatsLcpProRejRx, ecpppIPXInfoIPXcpMaxConfig=ecpppIPXInfoIPXcpMaxConfig, ecpppIPXStatsTable=ecpppIPXStatsTable, ecpppIPStatsCharTx=ecpppIPStatsCharTx, eicon=eicon, ecpppIPXStatsCharTx=ecpppIPXStatsCharTx, ecpppIPXStatsNcpReqRetrans=ecpppIPXStatsNcpReqRetrans, ecpppStatsLcpTermRetrans=ecpppStatsLcpTermRetrans, ecpppIPStatsTable=ecpppIPStatsTable, ecpppStatsLcpRejTx=ecpppStatsLcpRejTx, ecpppATInfoEntry=ecpppATInfoEntry, ecpppATInfoATcpMaxFailure=ecpppATInfoATcpMaxFailure, ecpppIPInfoIPcpMaxFailure=ecpppIPInfoIPcpMaxFailure, ecpppATStatsPortRef=ecpppATStatsPortRef, ecpppStatsTable=ecpppStatsTable, ecpppStatusAddrCtrlCompr=ecpppStatusAddrCtrlCompr, ecpppStatsPortRef=ecpppStatsPortRef, ecpppStatsLcpCodeRejRx=ecpppStatsLcpCodeRejRx, ecpppStatsFrameRx=ecpppStatsFrameRx, ecpppIPXStatsCharRx=ecpppIPXStatsCharRx, ecpppStatsLcpAckTx=ecpppStatsLcpAckTx, ecpppStatusMaxPacketSize=ecpppStatusMaxPacketSize, mibv2=mibv2, ecpppStatsLcpEchoReplyTx=ecpppStatsLcpEchoReplyTx, ecpppIPInfoIPComprProtocol=ecpppIPInfoIPComprProtocol, ecpppStatsLcpNakTx=ecpppStatsLcpNakTx, ecpppATInfoATcpMaxTerm=ecpppATInfoATcpMaxTerm, ecpppIPXInfoPortRef=ecpppIPXInfoPortRef, ecpppStatsLcpAckRx=ecpppStatsLcpAckRx, ecpppIPXInfoIPXcpMaxTerm=ecpppIPXInfoIPXcpMaxTerm, ecpppATStatsTable=ecpppATStatsTable, ecpppStatsLcpReqTx=ecpppStatsLcpReqTx, ecpppStatusProtocolCompr=ecpppStatusProtocolCompr, ecpppIPStatsNcpReqRetrans=ecpppIPStatsNcpReqRetrans, ecpppStatsLcpNakRx=ecpppStatsLcpNakRx, ecpppStatusState=ecpppStatusState, PortRef=PortRef, ecpppIPXStatsEntry=ecpppIPXStatsEntry, ecpppATInfoATcpMaxConfig=ecpppATInfoATcpMaxConfig, ecpppStatusMaxConfig=ecpppStatusMaxConfig, ecppp=ecppp, ecpppIPXInfoTable=ecpppIPXInfoTable, ecpppATStatsDatagramsRx=ecpppATStatsDatagramsRx, ecpppATStatsDatagramsTx=ecpppATStatsDatagramsTx, ecpppIPXInfoIPXcpMaxFailure=ecpppIPXInfoIPXcpMaxFailure, ecpppATInfoATAddr=ecpppATInfoATAddr, ecpppStatusQualityProtocol=ecpppStatusQualityProtocol, ecpppATInfoNcpState=ecpppATInfoNcpState, ecpppStatsCharRx=ecpppStatsCharRx)
