#
# PySNMP MIB module SATELCOM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SATELCOM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:52:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, mib_2, Counter32, MibIdentifier, iso, enterprises, Bits, Unsigned32, NotificationType, Integer32, NotificationType, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "mib-2", "Counter32", "MibIdentifier", "iso", "enterprises", "Bits", "Unsigned32", "NotificationType", "Integer32", "NotificationType", "Gauge32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
satelcom = MibIdentifier((1, 3, 6, 1, 4, 1, 397))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1))
base = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 2))
controller = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 3))
channel = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 4))
x25File = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 5))
nameFile = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 6))
passFile = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 7))
macFile = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 8))
ilanFile = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 9))
elogFile = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 10))
megaPAC_E_cpu_C = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 1)).setLabel("megaPAC-E-cpu-C")
megaPAC_N_series = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 2)).setLabel("megaPAC-N-series")
megaPAC_E_cpu_D = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 3)).setLabel("megaPAC-E-cpu-D")
megaCARD = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 4))
arm_Router = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 5)).setLabel("arm-Router")
megaPAC_V_cpu_8 = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 6)).setLabel("megaPAC-V-cpu-8")
megaPAC_V_cpu_16 = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 7)).setLabel("megaPAC-V-cpu-16")
megaPAC_V_cpu_68040 = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 8)).setLabel("megaPAC-V-cpu-68040")
megaPAD = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 9))
megapac_2001 = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 10)).setLabel("megapac-2001")
micropad_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 11)).setLabel("micropad-2")
micropad_4 = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 12)).setLabel("micropad-4")
micropad_8 = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 13)).setLabel("micropad-8")
duo_Card_MBOX = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 14)).setLabel("duo-Card-MBOX")
duo_Card_System = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 15)).setLabel("duo-Card-System")
megaBox_CPU_C = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 16)).setLabel("megaBox-CPU-C")
megaBox_CPU_D = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 17)).setLabel("megaBox-CPU-D")
megaBox_CPU_E = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 18)).setLabel("megaBox-CPU-E")
megaPac_E_CPU_C_Dual = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 19)).setLabel("megaPac-E-CPU-C-Dual")
megaPac_E_CPU_D_Dual = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 20)).setLabel("megaPac-E-CPU-D-Dual")
megaPac_E_CPU_E_Dual = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 21)).setLabel("megaPac-E-CPU-E-Dual")
megaPac_E_CPU_C_Dual_Fan = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 22)).setLabel("megaPac-E-CPU-C-Dual-Fan")
megaPac_E_CPU_D_Dual_Fan = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 23)).setLabel("megaPac-E-CPU-D-Dual-Fan")
megaPac_E_CPU_E_Dual_Fan = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 24)).setLabel("megaPac-E-CPU-E-Dual-Fan")
megaPac_E_CPU_C_Dual_Fan_48V = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 25)).setLabel("megaPac-E-CPU-C-Dual-Fan-48V")
megaPac_E_CPU_D_Dual_Fan_48V = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 26)).setLabel("megaPac-E-CPU-D-Dual-Fan-48V")
megaPac_E_CPU_E_Dual_Fan_48V = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 27)).setLabel("megaPac-E-CPU-E-Dual-Fan-48V")
megaPAC_E_cpu_E = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 28)).setLabel("megaPAC-E-cpu-E")
megaPac_V_Dual_PSU = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 29)).setLabel("megaPac-V-Dual-PSU")
megaPac_V_Dual_PSU_48V = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 30)).setLabel("megaPac-V-Dual-PSU-48V")
megapac_20EM = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 31)).setLabel("megapac-20EM")
megapac_21EM = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 32)).setLabel("megapac-21EM")
megapac_2002 = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 33)).setLabel("megapac-2002")
megapac_2003 = MibIdentifier((1, 3, 6, 1, 4, 1, 397, 1, 34)).setLabel("megapac-2003")
baseVersion = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseVersion.setStatus('mandatory')
baseRestartTime = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseRestartTime.setStatus('mandatory')
baseMaxPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseMaxPacketSize.setStatus('mandatory')
baseBuffPoolMax = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBuffPoolMax.setStatus('mandatory')
baseBuffPoolNow = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBuffPoolNow.setStatus('mandatory')
baseBufferPoolLowest = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBufferPoolLowest.setStatus('mandatory')
baseBufferPoolEmpty = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBufferPoolEmpty.setStatus('mandatory')
baseStatBufferThreshold = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatBufferThreshold.setStatus('mandatory')
baseMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseMemorySize.setStatus('mandatory')
baseDataFramesIn = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseDataFramesIn.setStatus('mandatory')
baseDataFramesOut = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseDataFramesOut.setStatus('mandatory')
baseDataFrameRateIn = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseDataFrameRateIn.setStatus('mandatory')
baseDataFrameRateOut = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseDataFrameRateOut.setStatus('mandatory')
baseTotalCallSetUps = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseTotalCallSetUps.setStatus('mandatory')
baseCurrentCalls = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseCurrentCalls.setStatus('mandatory')
baseRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseRetransmissions.setStatus('mandatory')
baseRejects = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseRejects.setStatus('mandatory')
baseTotalTransportCalls = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseTotalTransportCalls.setStatus('mandatory')
baseCurrentTransportCalls = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseCurrentTransportCalls.setStatus('mandatory')
baseRunStatus = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prom", 1), ("ram", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseRunStatus.setStatus('mandatory')
baseReports = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseReports.setStatus('mandatory')
baseSessionStatistics = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseSessionStatistics.setStatus('mandatory')
baseBufferThreshold = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseBufferThreshold.setStatus('mandatory')
baseInitialPresentationTimer = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseInitialPresentationTimer.setStatus('mandatory')
baseSecondaryPresentationTimer = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseSecondaryPresentationTimer.setStatus('mandatory')
baseInactivityDetectTimer = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseInactivityDetectTimer.setStatus('mandatory')
baseSegmentAccounting = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseSegmentAccounting.setStatus('mandatory')
baseTerminalEmulationBuffers = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseTerminalEmulationBuffers.setStatus('mandatory')
baseTransportBuffers = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseTransportBuffers.setStatus('mandatory')
baseCountrySettings = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("japn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseCountrySettings.setStatus('mandatory')
baseTeleloadEnabled = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 129))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("k256", 3), ("k160", 129)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseTeleloadEnabled.setStatus('mandatory')
baseDefaultToPromCompatible = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseDefaultToPromCompatible.setStatus('mandatory')
baseCommand = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("systemBoot", 2), ("restart", 3), ("stop", 4), ("dele", 5), ("clearVcp", 6), ("run", 7), ("halt", 8), ("readBill", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseCommand.setStatus('mandatory')
baseCommandControllerIndex = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseCommandControllerIndex.setStatus('mandatory')
baseCommandChannelndex = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseCommandChannelndex.setStatus('mandatory')
baseConnectedToProtocol = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))).clone(namedValues=NamedValues(("x25", 1), ("llc2", 2), ("null", 3), ("epci", 4), ("base", 5), ("hdlc", 8), ("qllc", 9), ("xlan", 10), ("ilan", 11), ("term", 12), ("lan", 13), ("clus", 14), ("mult", 15), ("sdlc", 16), ("ip", 17), ("ace", 18), ("v25b", 19), ("cons", 20), ("nms", 21), ("dlc", 22), ("map", 23), ("tlan", 24), ("snmp", 25), ("nfrm", 26), ("xfrm", 27), ("tip", 28), ("rout", 29), ("ppp", 30), ("ipx", 31), ("tipx", 32), ("esis", 34), ("tsis", 35), ("sip", 36), ("smdx", 37), ("dlcx", 38), ("edlc", 39), ("comp", 40), ("bond", 41), ("eses", 42), ("rlay", 43), ("lap", 44), ("isdp", 45), ("isdb", 46), ("oem1", 47), ("mman", 48)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseConnectedToProtocol.setStatus('mandatory')
baseBillingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseBillingThreshold.setStatus('mandatory')
baseBillUnread = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBillUnread.setStatus('mandatory')
baseCurrentBill = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseCurrentBill.setStatus('mandatory')
baseBillRecordBuffer = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(150, 150)).setFixedLength(150)).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBillRecordBuffer.setStatus('mandatory')
baseCurrentConfig = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseCurrentConfig.setStatus('mandatory')
baseCommandBuffer = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(50, 50)).setFixedLength(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseCommandBuffer.setStatus('mandatory')
baseCommandLength = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseCommandLength.setStatus('mandatory')
baseEMPresent = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseEMPresent.setStatus('mandatory')
baseEMTempTens = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseEMTempTens.setStatus('mandatory')
baseEMTempUnits = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseEMTempUnits.setStatus('mandatory')
baseEMFan1 = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ok", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseEMFan1.setStatus('mandatory')
baseEMFan2 = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ok", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseEMFan2.setStatus('mandatory')
baseEMFan3 = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ok", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseEMFan3.setStatus('mandatory')
baseEMVoltage = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseEMVoltage.setStatus('mandatory')
baseEMPsu1 = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ok", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseEMPsu1.setStatus('mandatory')
baseEMPsu2 = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ok", 2), ("fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseEMPsu2.setStatus('mandatory')
baseCPUUtil = MibScalar((1, 3, 6, 1, 4, 1, 397, 2, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseCPUUtil.setStatus('mandatory')
ctrlNumberConfigured = MibScalar((1, 3, 6, 1, 4, 1, 397, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlNumberConfigured.setStatus('mandatory')
ctrlTotalNumber = MibScalar((1, 3, 6, 1, 4, 1, 397, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlTotalNumber.setStatus('mandatory')
ctrlStatTable = MibTable((1, 3, 6, 1, 4, 1, 397, 3, 3), )
if mibBuilder.loadTexts: ctrlStatTable.setStatus('mandatory')
ctrlStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 397, 3, 3, 1), ).setIndexNames((0, "SATELCOM-MIB", "ctrlStatIndex"))
if mibBuilder.loadTexts: ctrlStatEntry.setStatus('mandatory')
ctrlStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatIndex.setStatus('mandatory')
ctrlStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatName.setStatus('mandatory')
ctrlStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))).clone(namedValues=NamedValues(("x25", 1), ("llc2", 2), ("null", 3), ("epci", 4), ("base", 5), ("hdlc", 8), ("qllc", 9), ("xlan", 10), ("ilan", 11), ("term", 12), ("lan", 13), ("clus", 14), ("mult", 15), ("sdlc", 16), ("ip", 17), ("ace", 18), ("v25b", 19), ("cons", 20), ("nms", 21), ("dlc", 22), ("map", 23), ("tlan", 24), ("snmp", 25), ("nfrm", 26), ("xfrm", 27), ("tip", 28), ("rout", 29), ("ppp", 30), ("ipx", 31), ("tipx", 32), ("esis", 34), ("tsis", 35), ("sip", 36), ("smdx", 37), ("dlcx", 38), ("edlc", 39), ("comp", 40), ("bond", 41), ("eses", 42), ("rlay", 43), ("lap", 44), ("isdp", 45), ("isdb", 46), ("oem1", 47), ("mman", 48)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatType.setStatus('mandatory')
ctrlStatSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 17, 33, 65))).clone(namedValues=NamedValues(("none", 1), ("sio", 2), ("xio", 3), ("auto", 4), ("gio", 5), ("pri", 9), ("scc", 17), ("vio", 33), ("rio", 65)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatSubType.setStatus('mandatory')
ctrlStatNumberChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatNumberChannels.setStatus('mandatory')
ctrlStatFirstChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFirstChannelIndex.setStatus('mandatory')
ctrlStatCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatCRCErrors.setStatus('mandatory')
ctrlStatTotalCallSetUps = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatTotalCallSetUps.setStatus('mandatory')
ctrlStatCurrentCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatCurrentCalls.setStatus('mandatory')
ctrlStatDataIn = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDataIn.setStatus('mandatory')
ctrlStatDataOut = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDataOut.setStatus('mandatory')
ctrlStatDataFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDataFramesIn.setStatus('mandatory')
ctrlStatDataFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDataFramesOut.setStatus('mandatory')
ctrlStatDataFrameRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDataFrameRateIn.setStatus('mandatory')
ctrlStatDataFrameRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDataFrameRateOut.setStatus('mandatory')
ctrlStatCallsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatCallsReceived.setStatus('mandatory')
ctrlStatCallsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatCallsSent.setStatus('mandatory')
ctrlStatClearsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatClearsReceived.setStatus('mandatory')
ctrlStatRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatRetransmissions.setStatus('mandatory')
ctrlStatRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatRejects.setStatus('mandatory')
ctrlStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9, 11, 13, 15, 17, 19, 21, 23, 25))).clone(namedValues=NamedValues(("disc", 1), ("sabm", 9), ("data", 11), ("blkd", 13), ("wake", 15), ("cls", 17), ("frmr", 19), ("stop", 21), ("xidr", 23), ("xidc", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatState.setStatus('mandatory')
ctrlStatSubState = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9))).clone(namedValues=NamedValues(("norm", 1), ("rej", 5), ("disc", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatSubState.setStatus('mandatory')
ctrlStatNoTries = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatNoTries.setStatus('mandatory')
ctrlStatOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16385, 32769, 8193, 4097, 2049, 257, 1025, 513, 17, 5, 9, 3, 2, 65, 33, 40961, 33281, 41473))).clone(namedValues=NamedValues(("norm", 1), ("iso1984", 16385), ("poll", 32769), ("ext", 8193), ("hold", 4097), ("stat", 2049), ("net", 257), ("dmod", 1025), ("dcd", 513), ("ui", 17), ("xidc", 5), ("xidr", 9), ("test", 3), ("dtr", 2), ("tcp", 65), ("idle", 33), ("poll-ext", 40961), ("poll-dcd", 33281), ("poll-ext-dcd", 41473)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatOptions.setStatus('mandatory')
ctrlStatLCGN = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatLCGN.setStatus('mandatory')
ctrlStatResetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatResetsReceived.setStatus('mandatory')
ctrlStatInterruptsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatInterruptsReceived.setStatus('mandatory')
ctrlStatOuputQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatOuputQueueLength.setStatus('mandatory')
ctrlStatStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatStationAddress.setStatus('mandatory')
ctrlStatDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDestinationAddress.setStatus('mandatory')
ctrlStatEIA = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatEIA.setStatus('mandatory')
ctrlStatSdlcOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 33, 65, 129, 17, 193))).clone(namedValues=NamedValues(("none", 1), ("pu4", 33), ("wait", 65), ("xid", 129), ("idle", 17), ("wait-xid", 193)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatSdlcOptions.setStatus('mandatory')
ctrlStatArpRequestRec = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatArpRequestRec.setStatus('mandatory')
ctrlStatArpRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatArpRequestSent.setStatus('mandatory')
ctrlStatArpResponsesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatArpResponsesRec.setStatus('mandatory')
ctrlStatTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9))).clone(namedValues=NamedValues(("loopModeOff", 1), ("loopModeRemote", 5), ("loopModeLocal", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlStatTestType.setStatus('mandatory')
ctrlStatTestSet = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopModeEstablished", 1), ("loopModeRequested", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlStatTestSet.setStatus('mandatory')
ctrlStatTest = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopTestEstablished", 1), ("loopTestRequested", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlStatTest.setStatus('mandatory')
ctrlStatLstate = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("localLoopNoStatus", 1), ("localLoopPass", 2), ("localLoopFail", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlStatLstate.setStatus('mandatory')
ctrlStatRstate = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("remoteLoopNoStatus", 1), ("remoteLoopPass", 2), ("remoteLoopFail", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlStatRstate.setStatus('mandatory')
ctrlParamTable = MibTable((1, 3, 6, 1, 4, 1, 397, 3, 4), )
if mibBuilder.loadTexts: ctrlParamTable.setStatus('mandatory')
ctrlParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 397, 3, 4, 1), ).setIndexNames((0, "SATELCOM-MIB", "ctrlParamIndex"))
if mibBuilder.loadTexts: ctrlParamEntry.setStatus('mandatory')
ctrlParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlParamIndex.setStatus('mandatory')
ctrlParamName = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamName.setStatus('mandatory')
ctrlParamType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))).clone(namedValues=NamedValues(("x25", 1), ("llc2", 2), ("null", 3), ("epci", 4), ("base", 5), ("hdlc", 8), ("qllc", 9), ("xlan", 10), ("ilan", 11), ("term", 12), ("lan", 13), ("clus", 14), ("mult", 15), ("sdlc", 16), ("ip", 17), ("ace", 18), ("v25b", 19), ("cons", 20), ("nms", 21), ("dlc", 22), ("map", 23), ("tlan", 24), ("snmp", 25), ("nfrm", 26), ("xfrm", 27), ("tip", 28), ("rout", 29), ("ppp", 30), ("ipx", 31), ("tipx", 32), ("esis", 34), ("tsis", 35), ("sip", 36), ("smdx", 37), ("dlcx", 38), ("edlc", 39), ("comp", 40), ("bond", 41), ("eses", 42), ("rlay", 43), ("lap", 44), ("isdp", 45), ("isdb", 46), ("oem1", 47), ("mman", 48)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamType.setStatus('mandatory')
ctrlParamSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 17, 33, 65))).clone(namedValues=NamedValues(("none", 1), ("sio", 2), ("xio", 3), ("auto", 4), ("gio", 5), ("pri", 9), ("scc", 17), ("vio", 33), ("rio", 65)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamSubType.setStatus('mandatory')
ctrlParamNoChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamNoChannels.setStatus('mandatory')
ctrlParamSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1))).clone(namedValues=NamedValues(("bps-2000000", 19), ("bps-1000000", 18), ("bps-512000", 17), ("bps-256000", 16), ("bps-128000", 15), ("bps-64000", 14), ("bps-1200", 13), ("bps-19200", 12), ("bps-9600", 11), ("bps-7200", 10), ("bps-4800", 9), ("bps-3600", 8), ("bps-2400", 7), ("bps-2000", 6), ("bps-1800", 5), ("bps-1200", 4), ("bps-600", 3), ("bps-300", 2), ("ext-clock", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamSpeed.setStatus('mandatory')
ctrlParamInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 1, 68))).clone(namedValues=NamedValues(("x21", 2), ("v35", 3), ("v24", 1), ("epci", 68)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamInterfaceType.setStatus('mandatory')
ctrlParamPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 9, 17, 33, 1))).clone(namedValues=NamedValues(("bytes-32", 2), ("bytes-64", 3), ("bytes-128", 5), ("bytes-256", 9), ("bytes-512", 17), ("bytes-1024", 33), ("tran", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamPacketSize.setStatus('mandatory')
ctrlParamV54Modem = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(61, 1))).clone(namedValues=NamedValues(("yes", 61), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamV54Modem.setStatus('mandatory')
ctrlParamAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-a", 1), ("dce-b", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamAddress.setStatus('mandatory')
ctrlParamOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16385, 32769, 33025, 8193, 4097, 2049, 257, 1025, 513, 17, 5, 9, 3, 2, 65, 33, 40961, 33281, 41473))).clone(namedValues=NamedValues(("none", 1), ("iso1984", 16385), ("poll", 32769), ("poll-net", 33025), ("ext", 8193), ("hold", 4097), ("stat", 2049), ("net", 257), ("dmod", 1025), ("dcd", 513), ("ui", 17), ("xidc", 5), ("xidr", 9), ("test", 3), ("dtr", 2), ("tcp", 65), ("idle", 33), ("poll-ext", 40961), ("poll-dcd", 33281), ("poll-ext-dcd", 41473)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamOptions.setStatus('mandatory')
ctrlParamInitFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(48, 64, 68, 84, 1))).clone(namedValues=NamedValues(("sabm", 48), ("sabm-pbit", 64), ("disc", 68), ("disc-pbit", 84), ("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamInitFrame.setStatus('mandatory')
ctrlParamT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamT1.setStatus('mandatory')
ctrlParamTries = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTries.setStatus('mandatory')
ctrlParamKLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamKLevel2.setStatus('mandatory')
ctrlParamKLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamKLevel3.setStatus('mandatory')
ctrlParamLineGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamLineGroup.setStatus('mandatory')
ctrlParamLCGN = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamLCGN.setStatus('mandatory')
ctrlParamLCNOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamLCNOffset.setStatus('mandatory')
ctrlParamAddressGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamAddressGroup.setStatus('mandatory')
ctrlParamFrameSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 7))).clone(namedValues=NamedValues(("extended", 15), ("normal", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamFrameSequence.setStatus('mandatory')
ctrlParamCallTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamCallTimeOut.setStatus('mandatory')
ctrlParamErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamErrorThreshold.setStatus('mandatory')
ctrlParamLoopBarPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamLoopBarPriority.setStatus('mandatory')
ctrlParamExtendedCallMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 13, 1))).clone(namedValues=NamedValues(("in", 2), ("out", 3), ("in-out", 4), ("v25b", 5), ("v25m", 13), ("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamExtendedCallMgmt.setStatus('mandatory')
ctrlParamOptionalTimers = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 1))).clone(namedValues=NamedValues(("t13", 2), ("t23", 3), ("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamOptionalTimers.setStatus('mandatory')
ctrlParamOptionalFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamOptionalFlags.setStatus('mandatory')
ctrlParamTransportLevelType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(34, 1))).clone(namedValues=NamedValues(("iso", 34), ("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTransportLevelType.setStatus('mandatory')
ctrlParamTransportClass = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(49, 33, 1))).clone(namedValues=NamedValues(("class3", 49), ("class2", 33), ("class0", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTransportClass.setStatus('mandatory')
ctrlParamDefaultWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDefaultWindowSize.setStatus('mandatory')
ctrlParamDisableFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDisableFlowControl.setStatus('mandatory')
ctrlParamTSAPFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("text", 2), ("hex", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTSAPFormat.setStatus('mandatory')
ctrlParamMaximumTPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 10, 9, 8, 1))).clone(namedValues=NamedValues(("bytes-1024", 11), ("bytes-512", 10), ("bytes-256", 9), ("bytes128", 8), ("bytes-128", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamMaximumTPDUSize.setStatus('mandatory')
ctrlParamTTRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTTRTime.setStatus('mandatory')
ctrlParamTWRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTWRTime.setStatus('mandatory')
ctrlParamDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDestinationAddress.setStatus('mandatory')
ctrlParamDSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDSAP.setStatus('mandatory')
ctrlParamSSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamSSAP.setStatus('mandatory')
ctrlParamSDLCOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 33, 65, 129, 17, 193))).clone(namedValues=NamedValues(("none", 1), ("pu4", 33), ("wait", 65), ("xid", 129), ("idle", 17), ("wait-xid", 193)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamSDLCOptions.setStatus('mandatory')
ctrlParamPrimaryStation = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamPrimaryStation.setStatus('mandatory')
ctrlParamIdleDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamIdleDetectTime.setStatus('mandatory')
ctrlParamPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamPollInterval.setStatus('mandatory')
ctrlParamDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDuplex.setStatus('mandatory')
ctrlParamTransmitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTransmitDelay.setStatus('mandatory')
ctrlParamSlowPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamSlowPollTimer.setStatus('mandatory')
ctrlParamMaxCallInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamMaxCallInterval.setStatus('mandatory')
ctrlParamMaxCallCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamMaxCallCycles.setStatus('mandatory')
ctrlParamGroupPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamGroupPoll.setStatus('mandatory')
ctrlParamDelayToRTSLow = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDelayToRTSLow.setStatus('mandatory')
ctrlParamDelayToCTSHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDelayToCTSHigh.setStatus('mandatory')
ctrlParamInputSyncDeletion = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamInputSyncDeletion.setStatus('mandatory')
ctrlParamOutputSyncInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamOutputSyncInsertion.setStatus('mandatory')
ctrlParamDCDFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDCDFilter.setStatus('mandatory')
ctrlParamInhibitTimeFill = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamInhibitTimeFill.setStatus('mandatory')
ctrlParamDirectedBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDirectedBroadcasts.setStatus('mandatory')
ctrlParamDefaultLocalPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDefaultLocalPrinter.setStatus('mandatory')
ctrlParamNewLANInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamNewLANInterface.setStatus('mandatory')
ctrlParamNewSerialInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamNewSerialInterface.setStatus('mandatory')
ctrlParamDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDlci.setStatus('mandatory')
ctrlParamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 129))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("nni", 129)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamMode.setStatus('mandatory')
ctrlParamLmi = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(129, 2, 1))).clone(namedValues=NamedValues(("ansi", 129), ("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamLmi.setStatus('mandatory')
ctrlParamKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamKeepAliveTimer.setStatus('mandatory')
ctrlParamStatusEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamStatusEnquiryInterval.setStatus('mandatory')
ctrlParamBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamBandwidth.setStatus('mandatory')
ctrlParamBurstCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamBurstCommit.setStatus('mandatory')
ctrlParamBurstEligibility = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 3, 4, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamBurstEligibility.setStatus('mandatory')
chanNumberConfigured = MibScalar((1, 3, 6, 1, 4, 1, 397, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanNumberConfigured.setStatus('mandatory')
chanStatTable = MibTable((1, 3, 6, 1, 4, 1, 397, 4, 2), )
if mibBuilder.loadTexts: chanStatTable.setStatus('mandatory')
chanStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 397, 4, 2, 1), ).setIndexNames((0, "SATELCOM-MIB", "chanStatIndex"))
if mibBuilder.loadTexts: chanStatEntry.setStatus('mandatory')
chanStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatIndex.setStatus('mandatory')
chanStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatName.setStatus('mandatory')
chanStatControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatControllerIndex.setStatus('mandatory')
chanStatNameCtrlName = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatNameCtrlName.setStatus('mandatory')
chanStatConnectedToChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatConnectedToChannelIndex.setStatus('mandatory')
chanStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 73, 69, 57, 49, 45, 41, 37, 33, 29, 25, 21, 17, 13, 9, 5))).clone(namedValues=NamedValues(("disc", 1), ("emul", 73), ("emul", 69), ("post", 57), ("busy", 49), ("call", 45), ("data", 41), ("wake", 37), ("setup", 33), ("rout", 29), ("addr", 25), ("name", 21), ("look", 17), ("serv", 13), ("pass", 9), ("rung", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatState.setStatus('mandatory')
chanStatSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9, 17, 33, 65, 10, 13, 129))).clone(namedValues=NamedValues(("none", 1), ("tran", 2), ("dri", 3), ("dro", 5), ("call", 9), ("pad", 17), ("queu", 33), ("stat", 65), ("call-tran", 10), ("call-tran-dri", 13), ("disc", 129)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatSessionStatus.setStatus('mandatory')
chanStatEIA = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9, 17, 33, 65, 129))).clone(namedValues=NamedValues(("none", 1), ("dcd", 2), ("ring", 3), ("x28", 5), ("rej", 9), ("iso", 17), ("tcal", 33), ("closed", 65), ("down", 129)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatEIA.setStatus('mandatory')
chanStatTotalFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTotalFramesIn.setStatus('mandatory')
chanStatTotalFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTotalFramesOut.setStatus('mandatory')
chanStatTotalCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTotalCharsIn.setStatus('mandatory')
chanStatTotalCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTotalCharsOut.setStatus('mandatory')
chanStatTxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTxWindow.setStatus('mandatory')
chanStatRxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatRxWindow.setStatus('mandatory')
chanStatTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTxSize.setStatus('mandatory')
chanStatRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatRxSize.setStatus('mandatory')
chanStatCause = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatCause.setStatus('mandatory')
chanStatDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDiagnostic.setStatus('mandatory')
chanStatResetCause = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatResetCause.setStatus('mandatory')
chanStatResetDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatResetDiagnostic.setStatus('mandatory')
chanStatResetCauseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatResetCauseReceived.setStatus('mandatory')
chanStatResetDiagReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatResetDiagReceived.setStatus('mandatory')
chanStatLevel3State = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 7, 9, 11, 13))).clone(namedValues=NamedValues(("disc", 1), ("rest", 3), ("call", 5), ("data", 7), ("cls", 9), ("clr", 11), ("reset", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatLevel3State.setStatus('mandatory')
chanStatCallPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatCallPriority.setStatus('mandatory')
chanStatResourcePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatResourcePriority.setStatus('mandatory')
chanStatPadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 17, 18, 34))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("rev", 3), ("enable-rev", 4), ("prof", 5), ("enable-prof", 6), ("mask", 17), ("enable-mask", 18), ("x28", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPadEnable.setStatus('mandatory')
chanStatPortMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 129, 137))).clone(namedValues=NamedValues(("no", 1), ("srce", 2), ("dest", 129), ("wild", 137)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPortMatch.setStatus('mandatory')
chanStatPrimaryStation = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPrimaryStation.setStatus('mandatory')
chanStatSDLCState = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 7, 9))).clone(namedValues=NamedValues(("idle", 1), ("snrm", 3), ("active", 5), ("poll", 7), ("disc", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatSDLCState.setStatus('mandatory')
chanStatQLLCState = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9, 13, 17, 21))).clone(namedValues=NamedValues(("inop", 1), ("clsd", 5), ("openi", 9), ("frmr", 13), ("clsi", 17), ("open", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatQLLCState.setStatus('mandatory')
chanStatSDLCTransmitState = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7, 11))).clone(namedValues=NamedValues(("idle", 1), ("norm", 3), ("rtry", 7), ("rnr", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatSDLCTransmitState.setStatus('mandatory')
chanStatPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPolls.setStatus('mandatory')
chanStatStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatStationAddress.setStatus('mandatory')
chanStatXIDIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatXIDIdentification.setStatus('mandatory')
chanStatTries = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTries.setStatus('mandatory')
chanStatWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatWindow.setStatus('mandatory')
chanStatLUActive = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatLUActive.setStatus('mandatory')
chanStatBindActive = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatBindActive.setStatus('mandatory')
chanStatLUType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatLUType.setStatus('mandatory')
chanStatBreaksReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatBreaksReceived.setStatus('mandatory')
chanStatFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatFramingErrors.setStatus('mandatory')
chanStatInputOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatInputOverruns.setStatus('mandatory')
chanStatParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatParityErrors.setStatus('mandatory')
chanStatTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 225, 209, 999, 177, 161, 129, 113, 97, 81, 65, 41))).clone(namedValues=NamedValues(("async", 2), ("sync", 3), ("hp", 225), ("x28", 209), ("x28f", 999), ("ansi", 177), ("ext-ansi", 161), ("vpad", 129), ("mtrm", 113), ("slip", 97), ("buf", 81), ("tpad", 65), ("vt220", 41)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTerminalType.setStatus('mandatory')
chanStatCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 66, 10, 74, 17, 81, 25, 89, 6, 70, 14, 78, 21, 85, 29, 93, 38, 102, 53, 117, 33, 97, 4))).clone(namedValues=NamedValues(("call", 2), ("call-stat", 66), ("call-pvc", 10), ("call-pvc-stat", 74), ("out", 17), ("out-stat", 81), ("out-pvc", 25), ("out-pvc-stat", 89), ("osi-call", 6), ("osi-call-stat", 70), ("osi-call-pvc", 14), ("osi-call-pvc-stat", 78), ("osi-out", 21), ("osi-out-stat", 85), ("osi-out-pvc", 29), ("osi-out-pvc-stat", 93), ("osi-call-svc", 38), ("osi-call-svc-stat", 102), ("osi-out-svc", 53), ("osi-out-svc-stat", 117), ("svc", 33), ("svc-stat", 97), ("queue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatCircuitType.setStatus('mandatory')
chanStatOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9, 17, 65, 129, 257, 513, 1025, 2049, 4097, 8193, 16385, 32769))).clone(namedValues=NamedValues(("none", 1), ("rts", 2), ("idle", 3), ("busy", 5), ("hold", 9), ("nbrk", 17), ("arps", 65), ("iso", 129), ("pass", 257), ("bill", 513), ("msgs", 1025), ("gate", 2049), ("name", 4097), ("talk", 8193), ("x28", 16385), ("supr", 32769)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatOptions.setStatus('mandatory')
chanStatBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatBuffers.setStatus('mandatory')
chanStatDiscMode = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDiscMode.setStatus('mandatory')
chanStatMenuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatMenuNumber.setStatus('mandatory')
chanStatHelpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatHelpNumber.setStatus('mandatory')
chanStatNewsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatNewsNumber.setStatus('mandatory')
chanStatPadRecall = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPadRecall.setStatus('mandatory')
chanStatEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatEcho.setStatus('mandatory')
chanStatDataForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDataForwarding.setStatus('mandatory')
chanStatDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDelay.setStatus('mandatory')
chanStatDRI = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 33, 129, 65, 1))).clone(namedValues=NamedValues(("enabled", 2), ("rts", 33), ("cts", 129), ("init-enable", 65), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDRI.setStatus('mandatory')
chanStatPadSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPadSignals.setStatus('mandatory')
chanStatBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatBreak.setStatus('mandatory')
chanStatPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPadding.setStatus('mandatory')
chanStatFold = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatFold.setStatus('mandatory')
chanStatDRO = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 129, 65, 1))).clone(namedValues=NamedValues(("enabled", 2), ("cts", 129), ("init-enable", 65), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDRO.setStatus('mandatory')
chanStatLFI = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatLFI.setStatus('mandatory')
chanStatLFPad = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatLFPad.setStatus('mandatory')
chanStatEdit = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatEdit.setStatus('mandatory')
chanStatCharDel = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatCharDel.setStatus('mandatory')
chanStatBufferDel = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatBufferDel.setStatus('mandatory')
chanStatDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDisp.setStatus('mandatory')
chanStatEditServiceSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatEditServiceSignals.setStatus('mandatory')
chanStatEchoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatEchoMask.setStatus('mandatory')
chanStatParityTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatParityTreatment.setStatus('mandatory')
chanStatPageWait = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPageWait.setStatus('mandatory')
chanStatForce = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatForce.setStatus('mandatory')
chanStatBreakChar = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatBreakChar.setStatus('mandatory')
chanStatNetworkParity = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 5))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("mark", 4), ("space", 8), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatNetworkParity.setStatus('mandatory')
chanStatEscapeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatEscapeDelay.setStatus('mandatory')
chanStatDestTsap = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDestTsap.setStatus('mandatory')
chanStatTransportLevelState = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 7, 9, 11))).clone(namedValues=NamedValues(("disc", 1), ("call", 3), ("init", 5), ("data", 7), ("cls", 9), ("clr", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTransportLevelState.setStatus('mandatory')
chanStatLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 13, 11, 9, 7, 5, 3, 1))).clone(namedValues=NamedValues(("open", 15), ("acks", 13), ("ackr", 11), ("reqs", 9), ("stpi", 7), ("clsi", 5), ("stop", 3), ("clos", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatLinkState.setStatus('mandatory')
chanStatProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 13, 11, 9, 7, 5, 3, 1))).clone(namedValues=NamedValues(("open", 15), ("acks", 13), ("ackr", 11), ("reqs", 9), ("stpi", 7), ("clsi", 5), ("stop", 3), ("clos", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatProtocolState.setStatus('mandatory')
chanStatProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32802, 32812))).clone(namedValues=NamedValues(("ip", 32802), ("ipx", 32812)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatProtocol.setStatus('mandatory')
chanStatIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatIdentity.setStatus('mandatory')
chanStatDlciRxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDlciRxDe.setStatus('mandatory')
chanStatDlciTxDe = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDlciTxDe.setStatus('mandatory')
chanStatDlciRxFecn = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDlciRxFecn.setStatus('mandatory')
chanStatDlciTxFecn = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDlciTxFecn.setStatus('mandatory')
chanStatDlciRxBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDlciRxBecn.setStatus('mandatory')
chanStatDlciTxBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDlciTxBecn.setStatus('mandatory')
chanStatConnectedToControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 2, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatConnectedToControllerIndex.setStatus('mandatory')
chanParamTable = MibTable((1, 3, 6, 1, 4, 1, 397, 4, 3), )
if mibBuilder.loadTexts: chanParamTable.setStatus('mandatory')
chanParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 397, 4, 3, 1), ).setIndexNames((0, "SATELCOM-MIB", "chanParamIndex"))
if mibBuilder.loadTexts: chanParamEntry.setStatus('mandatory')
chanParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanParamIndex.setStatus('mandatory')
chanParamName = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamName.setStatus('mandatory')
chanParamDRCMask = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDRCMask.setStatus('mandatory')
chanParamTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 225, 209, 999, 177, 161, 129, 113, 97, 81, 65, 41))).clone(namedValues=NamedValues(("async", 2), ("sync", 3), ("hp", 225), ("x28", 209), ("x28f", 999), ("ansi", 177), ("ext-ansi", 161), ("vpad", 129), ("mtrm", 113), ("slip", 97), ("buf", 81), ("tpad", 65), ("vt220", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamTerminalType.setStatus('mandatory')
chanParamCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 66, 10, 74, 17, 81, 25, 89, 6, 70, 14, 78, 21, 85, 29, 93, 38, 102, 53, 117, 33, 97, 4))).clone(namedValues=NamedValues(("call", 2), ("call-stat", 66), ("call-pvc", 10), ("call-pvc-stat", 74), ("out", 17), ("out-stat", 81), ("out-pvc", 25), ("out-pvc-stat", 89), ("osi-call", 6), ("osi-call-stat", 70), ("osi-call-pvc", 14), ("osi-call-pvc-stat", 78), ("osi-out", 21), ("osi-out-stat", 85), ("osi-out-pvc", 29), ("osi-out-pvc-stat", 93), ("osi-call-svc", 38), ("osi-call-svc-stat", 102), ("osi-out-svc", 53), ("osi-out-svc-stat", 117), ("svc", 33), ("svc-stat", 97), ("queue", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamCircuitType.setStatus('mandatory')
chanParamOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 1025, 5121, 13313, 1281, 3329, 5377, 13569, 15617, 257, 513, 2049, 4097, 16385, 8193, 32769, 65, 33, 129, 2, 3, 5, 9, 17))).clone(namedValues=NamedValues(("none", 1), ("msgs", 1025), ("msgs-name", 5121), ("msgs-name-talk", 13313), ("msgs-pass", 1281), ("msgs-pass-gate", 3329), ("msgs-name-pass", 5377), ("msgs-name-pass-talk", 13569), ("msgs-name-pass-talk-gate", 15617), ("pass", 257), ("bill", 513), ("gate", 2049), ("name", 4097), ("x28", 16385), ("talk", 8193), ("supr", 32769), ("arps", 65), ("diag", 33), ("iso", 129), ("rts", 2), ("idle", 3), ("busy", 5), ("hold", 9), ("nbrk", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamOptions.setStatus('mandatory')
chanParamBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBuffers.setStatus('mandatory')
chanParamDiscMode = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDiscMode.setStatus('mandatory')
chanParamMenuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamMenuNumber.setStatus('mandatory')
chanParamHelpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamHelpNumber.setStatus('mandatory')
chanParamNewsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamNewsNumber.setStatus('mandatory')
chanParamCallPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamCallPriority.setStatus('mandatory')
chanParamResourcePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamResourcePriority.setStatus('mandatory')
chanParamPadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 17, 18, 34))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("rev", 3), ("enable-rev", 4), ("prof", 5), ("enable-prof", 6), ("mask", 17), ("enable-mask", 18), ("x28", 34)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPadEnable.setStatus('mandatory')
chanParamPadRecall = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPadRecall.setStatus('mandatory')
chanParamEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamEcho.setStatus('mandatory')
chanParamDataForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDataForwarding.setStatus('mandatory')
chanParamDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDelay.setStatus('mandatory')
chanParamDRI = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 33, 129, 65, 1))).clone(namedValues=NamedValues(("enabled", 2), ("rts", 33), ("cts", 129), ("init-enable", 65), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDRI.setStatus('mandatory')
chanParamPadSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPadSignals.setStatus('mandatory')
chanParamBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBreak.setStatus('mandatory')
chanParamPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPadding.setStatus('mandatory')
chanParamFold = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamFold.setStatus('mandatory')
chanParamDRO = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 129, 65, 1))).clone(namedValues=NamedValues(("enabled", 2), ("cts", 129), ("init-enable", 65), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDRO.setStatus('mandatory')
chanParamLFI = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamLFI.setStatus('mandatory')
chanParamLFPad = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamLFPad.setStatus('mandatory')
chanParamEdit = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamEdit.setStatus('mandatory')
chanParamCharDel = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamCharDel.setStatus('mandatory')
chanParamBufferDel = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBufferDel.setStatus('mandatory')
chanParamDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDisp.setStatus('mandatory')
chanParamEditServiceSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamEditServiceSignals.setStatus('mandatory')
chanParamEchoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamEchoMask.setStatus('mandatory')
chanParamParityTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamParityTreatment.setStatus('mandatory')
chanParamPageWait = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPageWait.setStatus('mandatory')
chanParamForce = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamForce.setStatus('mandatory')
chanParamBreakChar = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBreakChar.setStatus('mandatory')
chanParamNetworkParity = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 5))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("mark", 4), ("space", 8), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamNetworkParity.setStatus('mandatory')
chanParamEscapeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamEscapeDelay.setStatus('mandatory')
chanParamStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamStationAddress.setStatus('mandatory')
chanParamProvideXID = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamProvideXID.setStatus('mandatory')
chanParamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9, 17, 32, 33, 65, 81, 97, 129, 193))).clone(namedValues=NamedValues(("none", 1), ("path", 2), ("push", 3), ("pull", 5), ("stop", 9), ("auto", 17), ("auto-pull-path-push-stop", 32), ("sym", 33), ("data", 65), ("wait", 81), ("hub", 97), ("resp", 129), ("sat", 193)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamMode.setStatus('mandatory')
chanParamPortMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 129, 137))).clone(namedValues=NamedValues(("no", 1), ("source", 2), ("destination", 129), ("wild", 137)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPortMatch.setStatus('mandatory')
chanParamReverseTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamReverseTelnetPort.setStatus('mandatory')
chanParamBroadcastFilterTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBroadcastFilterTimer.setStatus('mandatory')
chanParamInhibitLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamInhibitLearning.setStatus('mandatory')
chanParamRetainSession = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notify", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamRetainSession.setStatus('mandatory')
chanParamPrinterType = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ibm", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPrinterType.setStatus('mandatory')
chanParamScreenPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamScreenPrinter.setStatus('mandatory')
chanParamLocalPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamLocalPrinter.setStatus('mandatory')
chanParamInterlockBind = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamInterlockBind.setStatus('mandatory')
chanParamRedirectPrintTo = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamRedirectPrintTo.setStatus('mandatory')
chanParamLUBase = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamLUBase.setStatus('mandatory')
chanParamLUOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamLUOffset.setStatus('mandatory')
chanParamLUTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamLUTotal.setStatus('mandatory')
chanParamDlciBase = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDlciBase.setStatus('mandatory')
chanParamDlciAdjacentBase = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDlciAdjacentBase.setStatus('mandatory')
chanParamDlciPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDlciPriority.setStatus('mandatory')
chanParamDlciATM = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 129))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("all", 129)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDlciATM.setStatus('mandatory')
chanParamDlciCir = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDlciCir.setStatus('mandatory')
chanParamDlciBc = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDlciBc.setStatus('mandatory')
chanParamDlciBe = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDlciBe.setStatus('mandatory')
chanParamDlciDe = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 129))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("all", 129)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDlciDe.setStatus('mandatory')
chanParamDlciProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("ipx", 4), ("iso", 8), ("fragment", 16), ("sna", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDlciProtocol.setStatus('mandatory')
chanParamDlciDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDlciDsap.setStatus('mandatory')
chanParamDlciSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDlciSsap.setStatus('mandatory')
chanParamDlciPutype = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 4, 3, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDlciPutype.setStatus('mandatory')
x25FileSize = MibScalar((1, 3, 6, 1, 4, 1, 397, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25FileSize.setStatus('mandatory')
x25Table = MibTable((1, 3, 6, 1, 4, 1, 397, 5, 2), )
if mibBuilder.loadTexts: x25Table.setStatus('mandatory')
x25Entry = MibTableRow((1, 3, 6, 1, 4, 1, 397, 5, 2, 1), ).setIndexNames((0, "SATELCOM-MIB", "x25Index"))
if mibBuilder.loadTexts: x25Entry.setStatus('mandatory')
x25Index = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25Index.setStatus('mandatory')
x25Name = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Name.setStatus('mandatory')
x25AddressGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AddressGroup.setStatus('mandatory')
x25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Address.setStatus('mandatory')
x25UserData = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25UserData.setStatus('mandatory')
nameFileSize = MibScalar((1, 3, 6, 1, 4, 1, 397, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameFileSize.setStatus('mandatory')
nameTable = MibTable((1, 3, 6, 1, 4, 1, 397, 6, 2), )
if mibBuilder.loadTexts: nameTable.setStatus('mandatory')
nameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 397, 6, 2, 1), ).setIndexNames((0, "SATELCOM-MIB", "nameIndex"))
if mibBuilder.loadTexts: nameEntry.setStatus('mandatory')
nameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameIndex.setStatus('mandatory')
nameName = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameName.setStatus('mandatory')
nameDRCMask = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameDRCMask.setStatus('mandatory')
nameCallPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameCallPriority.setStatus('mandatory')
nameBilling = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameBilling.setStatus('mandatory')
nameOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 17, 33, 59, 5, 9, 65, 129))).clone(namedValues=NamedValues(("none", 1), ("iso", 2), ("pap", 17), ("ppp", 33), ("pap-ppp", 59), ("prof", 5), ("icl7661", 9), ("teln", 65), ("rev-teln", 129)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameOptions.setStatus('mandatory')
passFileSize = MibScalar((1, 3, 6, 1, 4, 1, 397, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: passFileSize.setStatus('mandatory')
macFileSize = MibScalar((1, 3, 6, 1, 4, 1, 397, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFileSize.setStatus('mandatory')
macTable = MibTable((1, 3, 6, 1, 4, 1, 397, 8, 2), )
if mibBuilder.loadTexts: macTable.setStatus('mandatory')
macEntry = MibTableRow((1, 3, 6, 1, 4, 1, 397, 8, 2, 1), ).setIndexNames((0, "SATELCOM-MIB", "macIndex"))
if mibBuilder.loadTexts: macEntry.setStatus('mandatory')
macIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macIndex.setStatus('mandatory')
macName = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macName.setStatus('mandatory')
macFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 16386, 16387, 16388, 16389, 16390, 16391, 16392, 32769, 32770, 32771, 32772, 32773, 32774, 32775, 32776, 32777, 32778, 32781, 32782, 32783, 32784))).clone(namedValues=NamedValues(("nop", 1), ("cad", 2), ("dad", 3), ("cud", 4), ("else", 5), ("fac", 6), ("inse", 16386), ("dele", 16387), ("copy", 16388), ("posn", 16389), ("mark", 16390), ("data", 16391), ("eof", 16392), ("ibeg", 32769), ("iend", 32770), ("obeg", 32771), ("oend", 32772), ("pu", 32773), ("xid", 32774), ("list", 32775), ("mask", 32776), ("sync", 32777), ("tab", 32778), ("rout", 32781), ("nvmt", 32782), ("add", 32783), ("bar", 32784)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFunction.setStatus('mandatory')
macOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 129, 33, 17, 9, 32769, 16385, 8193, 4097, 2049, 5, 3, 65, 2, 1025, 513, 257, 16386, 66))).clone(namedValues=NamedValues(("none", 1), ("not", 129), ("trap", 33), ("flag", 17), ("copy", 9), ("jump", 32769), ("expe", 16385), ("iso-1980", 8193), ("bill", 4097), ("talk", 2049), ("thru", 5), ("cad", 3), ("y13", 65), ("iso", 2), ("tcal", 1025), ("rej", 513), ("tlat", 257), ("iso-expe", 16386), ("iso-y13", 66)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macOptions.setStatus('mandatory')
macSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macSelector.setStatus('mandatory')
macGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macGenerator.setStatus('mandatory')
ilanFileSize = MibScalar((1, 3, 6, 1, 4, 1, 397, 9, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilanFileSize.setStatus('mandatory')
ilanTable = MibTable((1, 3, 6, 1, 4, 1, 397, 9, 2), )
if mibBuilder.loadTexts: ilanTable.setStatus('mandatory')
ilanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 397, 9, 2, 1), ).setIndexNames((0, "SATELCOM-MIB", "ilanIndex"))
if mibBuilder.loadTexts: ilanEntry.setStatus('mandatory')
ilanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilanIndex.setStatus('mandatory')
ilanName = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 9, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilanName.setStatus('mandatory')
ilanOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 17, 9, 5, 2, 4, 18))).clone(namedValues=NamedValues(("none", 1), ("y13", 17), ("talk", 9), ("dbit", 5), ("iso", 2), ("iso-expe", 4), ("iso-y13", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilanOptions.setStatus('mandatory')
ilanEthernetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 9, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilanEthernetAddress.setStatus('mandatory')
ilanTSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 9, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilanTSAP.setStatus('mandatory')
elogFileSize = MibScalar((1, 3, 6, 1, 4, 1, 397, 10, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elogFileSize.setStatus('mandatory')
elogTable = MibTable((1, 3, 6, 1, 4, 1, 397, 10, 2), )
if mibBuilder.loadTexts: elogTable.setStatus('mandatory')
elogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 397, 10, 2, 1), ).setIndexNames((0, "SATELCOM-MIB", "elogIndex"))
if mibBuilder.loadTexts: elogEntry.setStatus('mandatory')
elogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elogIndex.setStatus('mandatory')
elogRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 397, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: elogRecord.setStatus('mandatory')
errorLogReport = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,0)).setObjects(("SATELCOM-MIB", "elogRecord"))
sysRestart = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,1)).setObjects(("SATELCOM-MIB", "elogRecord"))
configChange = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,32)).setObjects(("SATELCOM-MIB", "elogRecord"))
vcpConnect = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,33)).setObjects(("SATELCOM-MIB", "elogRecord"))
vcpDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,34)).setObjects(("SATELCOM-MIB", "elogRecord"))
billThreshReached = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,35)).setObjects(("SATELCOM-MIB", "elogRecord"))
linkNoResponse = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,96)).setObjects(("SATELCOM-MIB", "elogRecord"))
linkCarrierLoss = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,97)).setObjects(("SATELCOM-MIB", "elogRecord"))
linkAddressErr = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,98)).setObjects(("SATELCOM-MIB", "elogRecord"))
frameLessThan2 = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,99)).setObjects(("SATELCOM-MIB", "elogRecord"))
ifieldTooLarge = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,100)).setObjects(("SATELCOM-MIB", "elogRecord"))
linkRestart = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,103)).setObjects(("SATELCOM-MIB", "elogRecord"))
linkBlocked = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,104)).setObjects(("SATELCOM-MIB", "elogRecord"))
linkDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,105)).setObjects(("SATELCOM-MIB", "elogRecord"))
linkFrmrRecvd = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,112)).setObjects(("SATELCOM-MIB", "elogRecord"))
linkDmResponse = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,113)).setObjects(("SATELCOM-MIB", "elogRecord"))
linkBadNr = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,114)).setObjects(("SATELCOM-MIB", "elogRecord"))
linkDown = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,115)).setObjects(("SATELCOM-MIB", "elogRecord"))
linkFrmrSent = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,116)).setObjects(("SATELCOM-MIB", "elogRecord"))
crcThreshExceeded = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,117)).setObjects(("SATELCOM-MIB", "elogRecord"))
linkManRestart = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,121)).setObjects(("SATELCOM-MIB", "elogRecord"))
testIndicationResponse = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,122)).setObjects(("SATELCOM-MIB", "elogRecord"))
interfaceFailure = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,123)).setObjects(("SATELCOM-MIB", "elogRecord"))
xidComRecvd = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,124)).setObjects(("SATELCOM-MIB", "elogRecord"))
bufferOverrun = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,166)).setObjects(("SATELCOM-MIB", "elogRecord"))
connectTimeWarn = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,200)).setObjects(("SATELCOM-MIB", "elogRecord"))
isdnNameAssigned = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,230)).setObjects(("SATELCOM-MIB", "elogRecord"))
isdnNameDeAassigned = NotificationType((1, 3, 6, 1, 4, 1, 397) + (0,231)).setObjects(("SATELCOM-MIB", "elogRecord"))
mibBuilder.exportSymbols("SATELCOM-MIB", chanStatBreaksReceived=chanStatBreaksReceived, ctrlParamDelayToRTSLow=ctrlParamDelayToRTSLow, chanParamMenuNumber=chanParamMenuNumber, chanParamLUBase=chanParamLUBase, megapac_21EM=megapac_21EM, ctrlStatDataOut=ctrlStatDataOut, chanStatCallPriority=chanStatCallPriority, chanStatTries=chanStatTries, configChange=configChange, megaPAC_N_series=megaPAC_N_series, chanStatQLLCState=chanStatQLLCState, ctrlParamMaximumTPDUSize=ctrlParamMaximumTPDUSize, chanStatBindActive=chanStatBindActive, chanStatStationAddress=chanStatStationAddress, chanParamInterlockBind=chanParamInterlockBind, chanParamPageWait=chanParamPageWait, chanParamStationAddress=chanParamStationAddress, baseEMFan2=baseEMFan2, baseBuffPoolNow=baseBuffPoolNow, ctrlStatNumberChannels=ctrlStatNumberChannels, chanParamEcho=chanParamEcho, ctrlParamTransmitDelay=ctrlParamTransmitDelay, ctrlStatSdlcOptions=ctrlStatSdlcOptions, macOptions=macOptions, chanParamDlciCir=chanParamDlciCir, chanStatLUType=chanStatLUType, ctrlParamGroupPoll=ctrlParamGroupPoll, chanParamCircuitType=chanParamCircuitType, linkDisconnect=linkDisconnect, ctrlStatInterruptsReceived=ctrlStatInterruptsReceived, ctrlParamDefaultLocalPrinter=ctrlParamDefaultLocalPrinter, ctrlParamDSAP=ctrlParamDSAP, ctrlParamName=ctrlParamName, macGenerator=macGenerator, chanParamPadSignals=chanParamPadSignals, chanParamCharDel=chanParamCharDel, chanStatFold=chanStatFold, ctrlStatTestType=ctrlStatTestType, chanParamDelay=chanParamDelay, linkDown=linkDown, chanStatDlciRxFecn=chanStatDlciRxFecn, ctrlStatTest=ctrlStatTest, ctrlParamBurstEligibility=ctrlParamBurstEligibility, ctrlParamNewSerialInterface=ctrlParamNewSerialInterface, chanParamEchoMask=chanParamEchoMask, elogIndex=elogIndex, ctrlParamSDLCOptions=ctrlParamSDLCOptions, baseTerminalEmulationBuffers=baseTerminalEmulationBuffers, baseDataFramesIn=baseDataFramesIn, chanStatParityTreatment=chanStatParityTreatment, chanStatRxWindow=chanStatRxWindow, chanStatTable=chanStatTable, chanStatWindow=chanStatWindow, megaPac_V_Dual_PSU=megaPac_V_Dual_PSU, ctrlStatLstate=ctrlStatLstate, chanStatTotalFramesOut=chanStatTotalFramesOut, chanStatTxWindow=chanStatTxWindow, chanStatOptions=chanStatOptions, ilanOptions=ilanOptions, chanParamDlciBc=chanParamDlciBc, frameLessThan2=frameLessThan2, chanStatFramingErrors=chanStatFramingErrors, chanParamDlciBase=chanParamDlciBase, chanStatXIDIdentification=chanStatXIDIdentification, baseCPUUtil=baseCPUUtil, megaPac_E_CPU_C_Dual_Fan=megaPac_E_CPU_C_Dual_Fan, chanParamBreak=chanParamBreak, chanParamBreakChar=chanParamBreakChar, ctrlParamTransportClass=ctrlParamTransportClass, chanParamLocalPrinter=chanParamLocalPrinter, elogEntry=elogEntry, ctrlStatNoTries=ctrlStatNoTries, chanStatLinkState=chanStatLinkState, chanParamEntry=chanParamEntry, x25Index=x25Index, megapac_2003=megapac_2003, billThreshReached=billThreshReached, chanStatResetDiagReceived=chanStatResetDiagReceived, ctrlParamTable=ctrlParamTable, passFile=passFile, baseTransportBuffers=baseTransportBuffers, ctrlParamDisableFlowControl=ctrlParamDisableFlowControl, chanStatTxSize=chanStatTxSize, chanParamBufferDel=chanParamBufferDel, chanParamDlciDe=chanParamDlciDe, nameName=nameName, chanStatEscapeDelay=chanStatEscapeDelay, chanStatForce=chanStatForce, baseTotalTransportCalls=baseTotalTransportCalls, micropad_2=micropad_2, macEntry=macEntry, arm_Router=arm_Router, chanStatEditServiceSignals=chanStatEditServiceSignals, chanStatPadRecall=chanStatPadRecall, ctrlParamDirectedBroadcasts=ctrlParamDirectedBroadcasts, ctrlParamTransportLevelType=ctrlParamTransportLevelType, baseBufferPoolEmpty=baseBufferPoolEmpty, baseDataFrameRateIn=baseDataFrameRateIn, ctrlParamSpeed=ctrlParamSpeed, ilanEthernetAddress=ilanEthernetAddress, ctrlParamMaxCallCycles=ctrlParamMaxCallCycles, baseCurrentConfig=baseCurrentConfig, ctrlParamSlowPollTimer=ctrlParamSlowPollTimer, vcpConnect=vcpConnect, baseCommandControllerIndex=baseCommandControllerIndex, ctrlStatCurrentCalls=ctrlStatCurrentCalls, chanParamParityTreatment=chanParamParityTreatment, ctrlStatState=ctrlStatState, chanParamOptions=chanParamOptions, ctrlParamLoopBarPriority=ctrlParamLoopBarPriority, ctrlParamTTRTime=ctrlParamTTRTime, baseMaxPacketSize=baseMaxPacketSize, linkAddressErr=linkAddressErr, ctrlTotalNumber=ctrlTotalNumber, ctrlParamKLevel2=ctrlParamKLevel2, chanParamPortMatch=chanParamPortMatch, baseCommandChannelndex=baseCommandChannelndex, linkFrmrRecvd=linkFrmrRecvd, chanParamDlciPriority=chanParamDlciPriority, ctrlStatLCGN=ctrlStatLCGN, ctrlParamStatusEnquiryInterval=ctrlParamStatusEnquiryInterval, baseBuffPoolMax=baseBuffPoolMax, ctrlStatEIA=ctrlStatEIA, chanParamDiscMode=chanParamDiscMode, linkRestart=linkRestart, chanStatDestTsap=chanStatDestTsap, nameFile=nameFile, baseDataFramesOut=baseDataFramesOut, ctrlStatCallsSent=ctrlStatCallsSent, chanStatPortMatch=chanStatPortMatch, chanParamLUTotal=chanParamLUTotal, linkBlocked=linkBlocked, chanParamBroadcastFilterTimer=chanParamBroadcastFilterTimer, x25UserData=x25UserData, chanParamDlciPutype=chanParamDlciPutype, baseReports=baseReports, chanParamPadEnable=chanParamPadEnable, ctrlParamDestinationAddress=ctrlParamDestinationAddress, elogFile=elogFile, baseConnectedToProtocol=baseConnectedToProtocol, baseEMPresent=baseEMPresent, ctrlStatClearsReceived=ctrlStatClearsReceived, ctrlParamTWRTime=ctrlParamTWRTime, ctrlStatDataFrameRateOut=ctrlStatDataFrameRateOut, chanStatCharDel=chanStatCharDel, ctrlParamDuplex=ctrlParamDuplex, chanStatDlciTxBecn=chanStatDlciTxBecn, chanStatTotalCharsOut=chanStatTotalCharsOut, baseBufferThreshold=baseBufferThreshold, ctrlParamPrimaryStation=ctrlParamPrimaryStation, linkNoResponse=linkNoResponse, channel=channel, chanStatHelpNumber=chanStatHelpNumber, ctrlParamLCGN=ctrlParamLCGN, chanStatSDLCState=chanStatSDLCState, ctrlParamInhibitTimeFill=ctrlParamInhibitTimeFill, ilanEntry=ilanEntry, chanStatEchoMask=chanStatEchoMask, chanStatParityErrors=chanStatParityErrors, ctrlStatRejects=ctrlStatRejects, ctrlParamMaxCallInterval=ctrlParamMaxCallInterval, chanStatTotalFramesIn=chanStatTotalFramesIn, macFile=macFile, chanStatConnectedToChannelIndex=chanStatConnectedToChannelIndex, chanParamDRO=chanParamDRO, ctrlParamKLevel3=ctrlParamKLevel3, chanStatDelay=chanStatDelay, connectTimeWarn=connectTimeWarn, megaPAC_V_cpu_16=megaPAC_V_cpu_16, chanStatName=chanStatName, chanParamDisp=chanParamDisp, ilanFileSize=ilanFileSize, passFileSize=passFileSize, ctrlParamLmi=ctrlParamLmi, chanStatDataForwarding=chanStatDataForwarding, macFileSize=macFileSize, ctrlParamT1=ctrlParamT1, ctrlParamLineGroup=ctrlParamLineGroup, ctrlParamPacketSize=ctrlParamPacketSize, megaPac_E_CPU_D_Dual=megaPac_E_CPU_D_Dual, chanStatDiscMode=chanStatDiscMode, megaPac_E_CPU_D_Dual_Fan_48V=megaPac_E_CPU_D_Dual_Fan_48V, chanParamTable=chanParamTable, ctrlStatOuputQueueLength=ctrlStatOuputQueueLength, chanParamDlciSsap=chanParamDlciSsap, megaPac_E_CPU_C_Dual=megaPac_E_CPU_C_Dual, ctrlParamErrorThreshold=ctrlParamErrorThreshold, chanParamDlciBe=chanParamDlciBe, xidComRecvd=xidComRecvd, chanStatCause=chanStatCause, macName=macName, ctrlParamKeepAliveTimer=ctrlParamKeepAliveTimer, x25Table=x25Table, elogFileSize=elogFileSize, ilanIndex=ilanIndex, chanParamDlciATM=chanParamDlciATM, baseEMTempUnits=baseEMTempUnits, megaPAC_V_cpu_8=megaPAC_V_cpu_8, chanParamDlciProtocol=chanParamDlciProtocol, nameTable=nameTable, x25File=x25File, elogRecord=elogRecord, baseDefaultToPromCompatible=baseDefaultToPromCompatible, megaBox_CPU_E=megaBox_CPU_E, baseCommand=baseCommand, baseEMTempTens=baseEMTempTens, chanStatIndex=chanStatIndex, chanParamPadding=chanParamPadding, megapac_20EM=megapac_20EM, baseCurrentTransportCalls=baseCurrentTransportCalls, testIndicationResponse=testIndicationResponse, baseInactivityDetectTimer=baseInactivityDetectTimer, chanParamProvideXID=chanParamProvideXID, baseEMPsu2=baseEMPsu2, ctrlParamTries=ctrlParamTries, chanStatLUActive=chanStatLUActive, megapac_2002=megapac_2002, chanStatLFPad=chanStatLFPad, chanStatPolls=chanStatPolls, chanStatRxSize=chanStatRxSize, chanParamLFI=chanParamLFI, x25Entry=x25Entry, ctrlStatStationAddress=ctrlStatStationAddress, ctrlParamIndex=ctrlParamIndex, baseVersion=baseVersion, megaPac_E_CPU_E_Dual_Fan=megaPac_E_CPU_E_Dual_Fan, chanParamResourcePriority=chanParamResourcePriority, products=products, chanStatPadding=chanStatPadding, controller=controller, nameBilling=nameBilling, ctrlStatSubType=ctrlStatSubType, micropad_4=micropad_4, ctrlParamMode=ctrlParamMode, ctrlNumberConfigured=ctrlNumberConfigured, baseTeleloadEnabled=baseTeleloadEnabled, megaPac_E_CPU_D_Dual_Fan=megaPac_E_CPU_D_Dual_Fan, x25FileSize=x25FileSize, ilanTable=ilanTable, ctrlParamNewLANInterface=ctrlParamNewLANInterface, chanStatProtocol=chanStatProtocol, ctrlStatDataFramesIn=ctrlStatDataFramesIn, chanStatEntry=chanStatEntry, chanStatSessionStatus=chanStatSessionStatus, ctrlStatRetransmissions=ctrlStatRetransmissions, chanParamDlciDsap=chanParamDlciDsap, chanStatIdentity=chanStatIdentity, ctrlParamType=ctrlParamType, ctrlStatArpResponsesRec=ctrlStatArpResponsesRec, ctrlParamSubType=ctrlParamSubType, x25AddressGroup=x25AddressGroup, ctrlParamInputSyncDeletion=ctrlParamInputSyncDeletion, chanParamInhibitLearning=chanParamInhibitLearning, sysRestart=sysRestart)
mibBuilder.exportSymbols("SATELCOM-MIB", baseTotalCallSetUps=baseTotalCallSetUps, macSelector=macSelector, chanParamEdit=chanParamEdit, errorLogReport=errorLogReport, linkCarrierLoss=linkCarrierLoss, ctrlStatOptions=ctrlStatOptions, ctrlParamIdleDetectTime=ctrlParamIdleDetectTime, chanStatNameCtrlName=chanStatNameCtrlName, ctrlParamOptionalTimers=ctrlParamOptionalTimers, ctrlParamFrameSequence=ctrlParamFrameSequence, linkFrmrSent=linkFrmrSent, crcThreshExceeded=crcThreshExceeded, ctrlParamTSAPFormat=ctrlParamTSAPFormat, ctrlParamInterfaceType=ctrlParamInterfaceType, linkDmResponse=linkDmResponse, ctrlParamBurstCommit=ctrlParamBurstCommit, baseInitialPresentationTimer=baseInitialPresentationTimer, chanParamNetworkParity=chanParamNetworkParity, chanStatBuffers=chanStatBuffers, baseEMFan1=baseEMFan1, chanStatSDLCTransmitState=chanStatSDLCTransmitState, chanParamRetainSession=chanParamRetainSession, megaBox_CPU_D=megaBox_CPU_D, ctrlParamDlci=ctrlParamDlci, megaPac_E_CPU_E_Dual_Fan_48V=megaPac_E_CPU_E_Dual_Fan_48V, ctrlParamDelayToCTSHigh=ctrlParamDelayToCTSHigh, chanStatTotalCharsIn=chanStatTotalCharsIn, megapac_2001=megapac_2001, chanParamHelpNumber=chanParamHelpNumber, chanStatPadSignals=chanStatPadSignals, chanStatPageWait=chanStatPageWait, ctrlStatTable=ctrlStatTable, ctrlStatName=ctrlStatName, interfaceFailure=interfaceFailure, baseBillUnread=baseBillUnread, ctrlParamEntry=ctrlParamEntry, ctrlParamOptionalFlags=ctrlParamOptionalFlags, baseCommandBuffer=baseCommandBuffer, chanParamReverseTelnetPort=chanParamReverseTelnetPort, ctrlParamDCDFilter=ctrlParamDCDFilter, ctrlParamDefaultWindowSize=ctrlParamDefaultWindowSize, ctrlParamPollInterval=ctrlParamPollInterval, chanParamScreenPrinter=chanParamScreenPrinter, ctrlParamNoChannels=ctrlParamNoChannels, nameFileSize=nameFileSize, chanParamCallPriority=chanParamCallPriority, baseRestartTime=baseRestartTime, chanParamBuffers=chanParamBuffers, chanStatTransportLevelState=chanStatTransportLevelState, baseStatBufferThreshold=baseStatBufferThreshold, chanParamEscapeDelay=chanParamEscapeDelay, baseDataFrameRateOut=baseDataFrameRateOut, chanParamLUOffset=chanParamLUOffset, chanParamLFPad=chanParamLFPad, nameDRCMask=nameDRCMask, ilanName=ilanName, ctrlStatCallsReceived=ctrlStatCallsReceived, ctrlStatSubState=ctrlStatSubState, x25Address=x25Address, ctrlParamCallTimeOut=ctrlParamCallTimeOut, nameOptions=nameOptions, chanStatDiagnostic=chanStatDiagnostic, chanParamDRCMask=chanParamDRCMask, chanStatResetCauseReceived=chanStatResetCauseReceived, chanParamIndex=chanParamIndex, chanStatDlciTxFecn=chanStatDlciTxFecn, duo_Card_MBOX=duo_Card_MBOX, base=base, baseCountrySettings=baseCountrySettings, ilanTSAP=ilanTSAP, chanStatEIA=chanStatEIA, baseCurrentBill=baseCurrentBill, ctrlStatArpRequestSent=ctrlStatArpRequestSent, macIndex=macIndex, megaPac_E_CPU_E_Dual=megaPac_E_CPU_E_Dual, chanStatDisp=chanStatDisp, chanStatControllerIndex=chanStatControllerIndex, baseRunStatus=baseRunStatus, ctrlStatDataIn=ctrlStatDataIn, baseCommandLength=baseCommandLength, chanParamFold=chanParamFold, baseEMVoltage=baseEMVoltage, baseMemorySize=baseMemorySize, baseBillingThreshold=baseBillingThreshold, ctrlStatResetsReceived=ctrlStatResetsReceived, satelcom=satelcom, ctrlParamExtendedCallMgmt=ctrlParamExtendedCallMgmt, chanStatDlciTxDe=chanStatDlciTxDe, isdnNameDeAassigned=isdnNameDeAassigned, vcpDisconnect=vcpDisconnect, chanStatInputOverruns=chanStatInputOverruns, duo_Card_System=duo_Card_System, ctrlStatEntry=ctrlStatEntry, megaBox_CPU_C=megaBox_CPU_C, ctrlParamAddressGroup=ctrlParamAddressGroup, chanStatDlciRxBecn=chanStatDlciRxBecn, ctrlParamAddress=ctrlParamAddress, chanStatResetCause=chanStatResetCause, ctrlStatDataFramesOut=ctrlStatDataFramesOut, ctrlStatRstate=ctrlStatRstate, isdnNameAssigned=isdnNameAssigned, chanStatProtocolState=chanStatProtocolState, chanStatNetworkParity=chanStatNetworkParity, chanParamEditServiceSignals=chanParamEditServiceSignals, nameIndex=nameIndex, chanStatPadEnable=chanStatPadEnable, megaPAC_E_cpu_C=megaPAC_E_cpu_C, baseBillRecordBuffer=baseBillRecordBuffer, ctrlStatDestinationAddress=ctrlStatDestinationAddress, chanParamNewsNumber=chanParamNewsNumber, nameCallPriority=nameCallPriority, megaPAC_E_cpu_D=megaPAC_E_cpu_D, megaPac_E_CPU_C_Dual_Fan_48V=megaPac_E_CPU_C_Dual_Fan_48V, chanParamForce=chanParamForce, chanParamPadRecall=chanParamPadRecall, chanStatBufferDel=chanStatBufferDel, ctrlParamBandwidth=ctrlParamBandwidth, linkBadNr=linkBadNr, macTable=macTable, chanStatLFI=chanStatLFI, chanStatTerminalType=chanStatTerminalType, ctrlStatTestSet=ctrlStatTestSet, ctrlStatFirstChannelIndex=ctrlStatFirstChannelIndex, ctrlParamOutputSyncInsertion=ctrlParamOutputSyncInsertion, chanStatDlciRxDe=chanStatDlciRxDe, chanStatLevel3State=chanStatLevel3State, chanParamTerminalType=chanParamTerminalType, chanStatCircuitType=chanStatCircuitType, linkManRestart=linkManRestart, ifieldTooLarge=ifieldTooLarge, baseEMFan3=baseEMFan3, chanParamRedirectPrintTo=chanParamRedirectPrintTo, baseCurrentCalls=baseCurrentCalls, chanStatBreakChar=chanStatBreakChar, baseSegmentAccounting=baseSegmentAccounting, chanParamDlciAdjacentBase=chanParamDlciAdjacentBase, ctrlParamInitFrame=ctrlParamInitFrame, chanParamPrinterType=chanParamPrinterType, bufferOverrun=bufferOverrun, ctrlParamLCNOffset=ctrlParamLCNOffset, chanStatEcho=chanStatEcho, ctrlParamOptions=ctrlParamOptions, nameEntry=nameEntry, chanParamDataForwarding=chanParamDataForwarding, ctrlStatArpRequestRec=ctrlStatArpRequestRec, elogTable=elogTable, chanStatDRO=chanStatDRO, baseSecondaryPresentationTimer=baseSecondaryPresentationTimer, ctrlStatTotalCallSetUps=ctrlStatTotalCallSetUps, chanStatPrimaryStation=chanStatPrimaryStation, chanParamDRI=chanParamDRI, baseRetransmissions=baseRetransmissions, ctrlStatType=ctrlStatType, chanStatResourcePriority=chanStatResourcePriority, macFunction=macFunction, chanNumberConfigured=chanNumberConfigured, chanStatBreak=chanStatBreak, ctrlStatDataFrameRateIn=ctrlStatDataFrameRateIn, chanStatEdit=chanStatEdit, chanStatResetDiagnostic=chanStatResetDiagnostic, chanParamMode=chanParamMode, ctrlParamSSAP=ctrlParamSSAP, chanStatState=chanStatState, chanStatDRI=chanStatDRI, megaPAD=megaPAD, megaPAC_V_cpu_68040=megaPAC_V_cpu_68040, chanStatMenuNumber=chanStatMenuNumber, baseRejects=baseRejects, ctrlStatCRCErrors=ctrlStatCRCErrors, megaPac_V_Dual_PSU_48V=megaPac_V_Dual_PSU_48V, x25Name=x25Name, baseEMPsu1=baseEMPsu1, chanStatNewsNumber=chanStatNewsNumber, megaPAC_E_cpu_E=megaPAC_E_cpu_E, baseBufferPoolLowest=baseBufferPoolLowest, baseSessionStatistics=baseSessionStatistics, ctrlStatIndex=ctrlStatIndex, micropad_8=micropad_8, ctrlParamV54Modem=ctrlParamV54Modem, chanStatConnectedToControllerIndex=chanStatConnectedToControllerIndex, chanParamName=chanParamName, megaCARD=megaCARD, ilanFile=ilanFile)
