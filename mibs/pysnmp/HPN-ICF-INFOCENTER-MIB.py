#
# PySNMP MIB module HPN-ICF-INFOCENTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-INFOCENTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:27:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ObjectIdentity, ModuleIdentity, TimeTicks, NotificationType, Counter64, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, Gauge32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "NotificationType", "Counter64", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "Gauge32", "IpAddress", "Bits")
TextualConvention, TruthValue, RowStatus, TAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "TAddress", "DisplayString")
hpnicfInfoCenter = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119))
hpnicfInfoCenter.setRevisions(('2012-03-07 19:00',))
if mibBuilder.loadTexts: hpnicfInfoCenter.setLastUpdated('201203071900Z')
if mibBuilder.loadTexts: hpnicfInfoCenter.setOrganization('')
class ICMessageLevelType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("informational", 6), ("debug", 7), ("invalid", 8))

class ICFacilityType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("kernel", 0), ("userLevel", 1), ("mailSystem", 2), ("systemDaemons", 3), ("securityAuthorization", 4), ("internallyMessages", 5), ("linePrinter", 6), ("networkNews", 7), ("uucp", 8), ("clockDaemon", 9), ("securityAuthorization2", 10), ("ftpDaemon", 11), ("ntp", 12), ("logAudit", 13), ("logAlert", 14), ("clockDaemon2", 15), ("local0", 16), ("local1", 17), ("local2", 18), ("local3", 19), ("local4", 20), ("local5", 21), ("local6", 22), ("local7", 23))

class ICTimeStampType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("date", 0), ("boot", 1), ("iso", 2), ("dateWithoutYear", 3), ("none", 4))

hpnicfICLogbuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 1))
hpnicfICLogbufferObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 1, 1))
hpnicfICMaxLogbufferSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfICMaxLogbufferSize.setStatus('current')
hpnicfICLogbufferSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 1, 1, 2), Unsigned32().clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfICLogbufferSize.setStatus('current')
hpnicfICLogbufferCurrentMessages = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfICLogbufferCurrentMessages.setStatus('current')
hpnicfICLogbufferOverwrittenMessages = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfICLogbufferOverwrittenMessages.setStatus('current')
hpnicfICLogbufferDroppedMessages = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfICLogbufferDroppedMessages.setStatus('current')
hpnicfICLogbufferContTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 1, 2), )
if mibBuilder.loadTexts: hpnicfICLogbufferContTable.setStatus('current')
hpnicfICLogbufferContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-INFOCENTER-MIB", "hpnicfICLogbufferContIndex"))
if mibBuilder.loadTexts: hpnicfICLogbufferContEntry.setStatus('current')
hpnicfICLogbufferContIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpnicfICLogbufferContIndex.setStatus('current')
hpnicfICLogbufferContDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfICLogbufferContDescription.setStatus('current')
hpnicfICLoghost = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2))
hpnicfICLoghostObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 1))
hpnicfICMaxLoghost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfICMaxLoghost.setStatus('current')
hpnicfICLoghostSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfICLoghostSourceInterface.setStatus('current')
hpnicfICLoghostTimestampType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 1, 3), ICTimeStampType().clone('date')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfICLoghostTimestampType.setStatus('current')
hpnicfICLoghostTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 2), )
if mibBuilder.loadTexts: hpnicfICLoghostTable.setStatus('current')
hpnicfICLoghostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-INFOCENTER-MIB", "hpnicfICLoghostIndex"))
if mibBuilder.loadTexts: hpnicfICLoghostEntry.setStatus('current')
hpnicfICLoghostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hpnicfICLoghostIndex.setStatus('current')
hpnicfICLoghostIpaddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 2, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfICLoghostIpaddressType.setStatus('current')
hpnicfICLoghostIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 2, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfICLoghostIpaddress.setStatus('current')
hpnicfICLoghostVPNName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 2, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfICLoghostVPNName.setStatus('current')
hpnicfICLoghostFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 2, 1, 5), ICFacilityType().clone('local7')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfICLoghostFacility.setStatus('current')
hpnicfICLoghostOperateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfICLoghostOperateRowStatus.setStatus('current')
hpnicfICLoghostIpaddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(514)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfICLoghostIpaddressPort.setStatus('current')
hpnicfICLoghostTAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 2, 2, 1, 8), TAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfICLoghostTAddress.setStatus('current')
hpnicfICDirection = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 3))
hpnicfICDirectionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 3, 1), )
if mibBuilder.loadTexts: hpnicfICDirectionTable.setStatus('current')
hpnicfICDirectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 3, 1, 1), ).setIndexNames((0, "HPN-ICF-INFOCENTER-MIB", "hpnicfICDirectionIndex"))
if mibBuilder.loadTexts: hpnicfICDirectionEntry.setStatus('current')
hpnicfICDirectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfICDirectionIndex.setStatus('current')
hpnicfICDirectionName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfICDirectionName.setStatus('current')
hpnicfICDirectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfICDirectionState.setStatus('current')
hpnicfICModule = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 4))
hpnicfICModuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 4, 1), )
if mibBuilder.loadTexts: hpnicfICModuleTable.setStatus('current')
hpnicfICModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 4, 1, 1), ).setIndexNames((1, "HPN-ICF-INFOCENTER-MIB", "hpnicfICModuleName"))
if mibBuilder.loadTexts: hpnicfICModuleEntry.setStatus('current')
hpnicfICModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfICModuleName.setStatus('current')
hpnicfICLog = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 5))
hpnicfICLogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 5, 1))
hpnicfICLogGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 5, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfICLogGlobalState.setStatus('current')
hpnicfICLogTimestampType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 5, 1, 2), ICTimeStampType().clone('date')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfICLogTimestampType.setStatus('current')
hpnicfICLogTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 5, 2), )
if mibBuilder.loadTexts: hpnicfICLogTable.setStatus('current')
hpnicfICLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 5, 2, 1), ).setIndexNames((0, "HPN-ICF-INFOCENTER-MIB", "hpnicfICDirectionIndex"), (1, "HPN-ICF-INFOCENTER-MIB", "hpnicfICModuleName"))
if mibBuilder.loadTexts: hpnicfICLogEntry.setStatus('current')
hpnicfICLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 5, 2, 1, 1), ICMessageLevelType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfICLogLevel.setStatus('current')
hpnicfICLogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 119, 5, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfICLogRowStatus.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-INFOCENTER-MIB", hpnicfICLoghostFacility=hpnicfICLoghostFacility, hpnicfICDirectionEntry=hpnicfICDirectionEntry, hpnicfICLogbufferContIndex=hpnicfICLogbufferContIndex, hpnicfICLogbufferCurrentMessages=hpnicfICLogbufferCurrentMessages, hpnicfICDirectionTable=hpnicfICDirectionTable, hpnicfICLogRowStatus=hpnicfICLogRowStatus, hpnicfICLoghostIpaddressPort=hpnicfICLoghostIpaddressPort, hpnicfICLogbufferContEntry=hpnicfICLogbufferContEntry, hpnicfICMaxLogbufferSize=hpnicfICMaxLogbufferSize, hpnicfICDirectionIndex=hpnicfICDirectionIndex, hpnicfICLoghostIpaddress=hpnicfICLoghostIpaddress, hpnicfICDirection=hpnicfICDirection, hpnicfICLoghostTimestampType=hpnicfICLoghostTimestampType, hpnicfICLogbufferSize=hpnicfICLogbufferSize, hpnicfICLogbuffer=hpnicfICLogbuffer, hpnicfICLogbufferObjects=hpnicfICLogbufferObjects, hpnicfICLoghostTAddress=hpnicfICLoghostTAddress, hpnicfICMaxLoghost=hpnicfICMaxLoghost, hpnicfICLoghostSourceInterface=hpnicfICLoghostSourceInterface, hpnicfICLoghostEntry=hpnicfICLoghostEntry, hpnicfICLoghostOperateRowStatus=hpnicfICLoghostOperateRowStatus, hpnicfICLoghost=hpnicfICLoghost, hpnicfICModuleTable=hpnicfICModuleTable, hpnicfICModuleEntry=hpnicfICModuleEntry, hpnicfICModuleName=hpnicfICModuleName, hpnicfICLoghostIndex=hpnicfICLoghostIndex, hpnicfICLogEntry=hpnicfICLogEntry, hpnicfICLogbufferContDescription=hpnicfICLogbufferContDescription, hpnicfICLoghostVPNName=hpnicfICLoghostVPNName, hpnicfICLogTimestampType=hpnicfICLogTimestampType, hpnicfICLoghostTable=hpnicfICLoghostTable, hpnicfInfoCenter=hpnicfInfoCenter, hpnicfICLogbufferContTable=hpnicfICLogbufferContTable, hpnicfICDirectionName=hpnicfICDirectionName, ICFacilityType=ICFacilityType, ICTimeStampType=ICTimeStampType, ICMessageLevelType=ICMessageLevelType, hpnicfICDirectionState=hpnicfICDirectionState, hpnicfICLog=hpnicfICLog, hpnicfICLogLevel=hpnicfICLogLevel, hpnicfICLogbufferOverwrittenMessages=hpnicfICLogbufferOverwrittenMessages, PYSNMP_MODULE_ID=hpnicfInfoCenter, hpnicfICLogbufferDroppedMessages=hpnicfICLogbufferDroppedMessages, hpnicfICLogGlobalState=hpnicfICLogGlobalState, hpnicfICLoghostIpaddressType=hpnicfICLoghostIpaddressType, hpnicfICModule=hpnicfICModule, hpnicfICLoghostObjects=hpnicfICLoghostObjects, hpnicfICLogObjects=hpnicfICLogObjects, hpnicfICLogTable=hpnicfICLogTable)
