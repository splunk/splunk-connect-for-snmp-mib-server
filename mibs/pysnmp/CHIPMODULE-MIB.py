#
# PySNMP MIB module CHIPMODULE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHIPMODULE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:31:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Gauge32, Counter64, Integer32, TimeTicks, NotificationType, ObjectIdentity, Counter32, Bits, IpAddress, iso, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "Counter64", "Integer32", "TimeTicks", "NotificationType", "ObjectIdentity", "Counter32", "Bits", "IpAddress", "iso", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 49))
chipmib02 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2))
chipGen = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 1))
chipEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 2))
chipProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3))
chipExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4))
chipTTY = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 5))
chipTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 6))
chipDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 7))
online = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1))
oebm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 2))
midnight = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 3))
workGroupHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4))
emm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 5))
chipBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 6))
trmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 7))
fmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 8))
focus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 9))
oeim = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 10))
chipExpTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14))
dot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1))
olAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1))
olConc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2))
olEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3))
olModules = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4))
olNets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5))
olGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6))
olAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7))
olSpecMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4))
ol50nnMCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3))
ol51nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4))
ol51nnMFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5))
ol51nnMUTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6))
ol51nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7))
ol51nnMBNC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8))
ol51nnBEE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9))
ol51nnRES = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10))
ol51nnREE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11))
ol51nnMAUIF = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12))
ol51nnMAUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13))
ol5208MTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14))
ol51nnMFP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15))
ol51nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16))
ol51nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17))
ol51nnMTPPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18))
ol52nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19))
ol52nnMFR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20))
ol51nnMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21))
ol51nnMFL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22))
ol50nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23))
ol51nnMFB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24))
ol53nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25))
ol53nnMFBMIC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26))
ol53nnMFIBST = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27))
ol53nnMSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28))
ol51nnMTPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29))
ol52nnBTT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30))
ol51nnIx = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31))
ol52nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32))
ol50nnMHCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33))
olNet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1))
olEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2))
olTRnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3))
olFDDInet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4))
hubSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 1))
hardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 2))
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 3))
hubGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 4))
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 5))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 7))
olThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1))
olThreshControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1))
ol50nnMCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1), )
if mibBuilder.loadTexts: ol50nnMCTLModTable.setStatus('mandatory')
ol50nnMCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol50nnMCTLModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMCTLModEntry.setStatus('mandatory')
ol50nnMCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMCTLModSlotIndex.setStatus('mandatory')
ol50nnMCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMCTLModTempStatus.setStatus('mandatory')
ol51nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1), )
if mibBuilder.loadTexts: ol51nnMMGTModTable.setStatus('mandatory')
ol51nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMMGTModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMMGTModEntry.setStatus('mandatory')
ol51nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTModSlotIndex.setStatus('mandatory')
ol51nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMMGTModMasterPriority.setStatus('mandatory')
ol51nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTModMasterStatus.setStatus('mandatory')
ol51nnMMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTModStationAddr.setStatus('mandatory')
ol51nnMMGTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2), )
if mibBuilder.loadTexts: ol51nnMMGTPortTable.setStatus('mandatory')
ol51nnMMGTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMMGTPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMMGTPortIndex"))
if mibBuilder.loadTexts: ol51nnMMGTPortEntry.setStatus('mandatory')
ol51nnMMGTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTPortSlotIndex.setStatus('mandatory')
ol51nnMMGTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTPortIndex.setStatus('mandatory')
ol51nnMMGTIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMMGTIpAddress.setStatus('mandatory')
ol51nnMFIBModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1), )
if mibBuilder.loadTexts: ol51nnMFIBModTable.setStatus('mandatory')
ol51nnMFIBModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFIBModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFIBModEntry.setStatus('mandatory')
ol51nnMFIBModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBModSlotIndex.setStatus('mandatory')
ol51nnMFIBModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBModDipNetwork.setStatus('mandatory')
ol51nnMFIBModLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBModLLW.setStatus('mandatory')
ol51nnMFIBModDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBModDipLLW.setStatus('mandatory')
ol51nnMFIBPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2), )
if mibBuilder.loadTexts: ol51nnMFIBPortTable.setStatus('mandatory')
ol51nnMFIBPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFIBPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMFIBPortIndex"))
if mibBuilder.loadTexts: ol51nnMFIBPortEntry.setStatus('mandatory')
ol51nnMFIBPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBPortSlotIndex.setStatus('mandatory')
ol51nnMFIBPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBPortIndex.setStatus('mandatory')
ol51nnMFIBPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBPortAdminState.setStatus('mandatory')
ol51nnMFIBPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBPortBuddySlot.setStatus('mandatory')
ol51nnMFIBPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFIBPortBuddyPort.setStatus('mandatory')
ol51nnMFIBPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFIBPortDipAdminState.setStatus('mandatory')
ol51nnMUTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1), )
if mibBuilder.loadTexts: ol51nnMUTPModTable.setStatus('mandatory')
ol51nnMUTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMUTPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMUTPModEntry.setStatus('mandatory')
ol51nnMUTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPModSlotIndex.setStatus('mandatory')
ol51nnMUTPModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPModDipNetwork.setStatus('mandatory')
ol51nnMUTPModCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPModCrossover.setStatus('mandatory')
ol51nnMUTPModDipCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPModDipCrossover.setStatus('mandatory')
ol51nnMUTPModFFL = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eight-bits", 1), ("seven-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPModFFL.setStatus('mandatory')
ol51nnMUTPModDipFFL = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eight-bits", 1), ("seven-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPModDipFFL.setStatus('mandatory')
ol51nnMUTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2), )
if mibBuilder.loadTexts: ol51nnMUTPPortTable.setStatus('mandatory')
ol51nnMUTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMUTPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMUTPPortIndex"))
if mibBuilder.loadTexts: ol51nnMUTPPortEntry.setStatus('mandatory')
ol51nnMUTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortSlotIndex.setStatus('mandatory')
ol51nnMUTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortIndex.setStatus('mandatory')
ol51nnMUTPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortAdminState.setStatus('mandatory')
ol51nnMUTPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortBuddySlot.setStatus('mandatory')
ol51nnMUTPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortBuddyPort.setStatus('mandatory')
ol51nnMUTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortDipAdminState.setStatus('mandatory')
ol51nnMUTPPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortLinkInteg.setStatus('mandatory')
ol51nnMUTPPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortDipLinkInteg.setStatus('mandatory')
ol51nnMUTPPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMUTPPortSquelch.setStatus('mandatory')
ol51nnMUTPPortDipSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMUTPPortDipSquelch.setStatus('mandatory')
ol51nnMTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1), )
if mibBuilder.loadTexts: ol51nnMTPModTable.setStatus('mandatory')
ol51nnMTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPModEntry.setStatus('mandatory')
ol51nnMTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPModSlotIndex.setStatus('mandatory')
ol51nnMTPModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPModDipNetwork.setStatus('mandatory')
ol51nnMTPModCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPModCrossover.setStatus('mandatory')
ol51nnMTPModDipCrossover = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crossed", 1), ("uncrossed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPModDipCrossover.setStatus('mandatory')
ol51nnMTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2), )
if mibBuilder.loadTexts: ol51nnMTPPortTable.setStatus('mandatory')
ol51nnMTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMTPPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPPortEntry.setStatus('mandatory')
ol51nnMTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortSlotIndex.setStatus('mandatory')
ol51nnMTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortIndex.setStatus('mandatory')
ol51nnMTPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortAdminState.setStatus('mandatory')
ol51nnMTPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortBuddySlot.setStatus('mandatory')
ol51nnMTPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortBuddyPort.setStatus('mandatory')
ol51nnMTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortDipAdminState.setStatus('mandatory')
ol51nnMTPPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortLinkInteg.setStatus('mandatory')
ol51nnMTPPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortDipLinkInteg.setStatus('mandatory')
ol51nnMTPPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPortSquelch.setStatus('mandatory')
ol51nnMTPPortDipSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPortDipSquelch.setStatus('mandatory')
ol51nnMBNCModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1), )
if mibBuilder.loadTexts: ol51nnMBNCModTable.setStatus('mandatory')
ol51nnMBNCModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMBNCModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMBNCModEntry.setStatus('mandatory')
ol51nnMBNCModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCModSlotIndex.setStatus('mandatory')
ol51nnMBNCModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCModDipNetwork.setStatus('mandatory')
ol51nnMBNCPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2), )
if mibBuilder.loadTexts: ol51nnMBNCPortTable.setStatus('mandatory')
ol51nnMBNCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMBNCPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMBNCPortIndex"))
if mibBuilder.loadTexts: ol51nnMBNCPortEntry.setStatus('mandatory')
ol51nnMBNCPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortSlotIndex.setStatus('mandatory')
ol51nnMBNCPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortIndex.setStatus('mandatory')
ol51nnMBNCPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortDipAdminState.setStatus('mandatory')
ol51nnMBNCPortDipTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terminated", 1), ("not-terminated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortDipTermination.setStatus('mandatory')
ol51nnMBNCPortDipGround = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("grounded", 1), ("not-grounded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMBNCPortDipGround.setStatus('mandatory')
ol51nnBEEModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1), )
if mibBuilder.loadTexts: ol51nnBEEModTable.setStatus('mandatory')
ol51nnBEEModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnBEEModSlotIndex"))
if mibBuilder.loadTexts: ol51nnBEEModEntry.setStatus('mandatory')
ol51nnBEEModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEModSlotIndex.setStatus('mandatory')
ol51nnBEEModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEModStationAddr.setStatus('mandatory')
ol51nnBEEModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEModProtocols.setStatus('mandatory')
ol51nnBEEPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2), )
if mibBuilder.loadTexts: ol51nnBEEPortTable.setStatus('mandatory')
ol51nnBEEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnBEEPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnBEEPortIndex"))
if mibBuilder.loadTexts: ol51nnBEEPortEntry.setStatus('mandatory')
ol51nnBEEPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortSlotIndex.setStatus('mandatory')
ol51nnBEEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortIndex.setStatus('mandatory')
ol51nnBEEPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortIpAddress.setStatus('mandatory')
ol51nnBEEPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortDipNetwork.setStatus('mandatory')
ol51nnBEEPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnBEEPortDefNetwork.setStatus('mandatory')
ol51nnRESModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1), )
if mibBuilder.loadTexts: ol51nnRESModTable.setStatus('mandatory')
ol51nnRESModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnRESModSlotIndex"))
if mibBuilder.loadTexts: ol51nnRESModEntry.setStatus('mandatory')
ol51nnRESModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESModSlotIndex.setStatus('mandatory')
ol51nnRESModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESModStationAddr.setStatus('mandatory')
ol51nnRESModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESModProtocols.setStatus('mandatory')
ol51nnRESPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2), )
if mibBuilder.loadTexts: ol51nnRESPortTable.setStatus('mandatory')
ol51nnRESPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnRESPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnRESPortIndex"))
if mibBuilder.loadTexts: ol51nnRESPortEntry.setStatus('mandatory')
ol51nnRESPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortSlotIndex.setStatus('mandatory')
ol51nnRESPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortIndex.setStatus('mandatory')
ol51nnRESPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortIpAddress.setStatus('mandatory')
ol51nnRESPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortDipNetwork.setStatus('mandatory')
ol51nnRESPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnRESPortDefNetwork.setStatus('mandatory')
ol51nnREEModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1), )
if mibBuilder.loadTexts: ol51nnREEModTable.setStatus('mandatory')
ol51nnREEModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnREEModSlotIndex"))
if mibBuilder.loadTexts: ol51nnREEModEntry.setStatus('mandatory')
ol51nnREEModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEModSlotIndex.setStatus('mandatory')
ol51nnREEModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEModStationAddr.setStatus('mandatory')
ol51nnREEModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEModProtocols.setStatus('mandatory')
ol51nnREEPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2), )
if mibBuilder.loadTexts: ol51nnREEPortTable.setStatus('mandatory')
ol51nnREEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnREEPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnREEPortIndex"))
if mibBuilder.loadTexts: ol51nnREEPortEntry.setStatus('mandatory')
ol51nnREEPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortSlotIndex.setStatus('mandatory')
ol51nnREEPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortIndex.setStatus('mandatory')
ol51nnREEPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortIpAddress.setStatus('mandatory')
ol51nnREEPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortDipNetwork.setStatus('mandatory')
ol51nnREEPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnREEPortDefNetwork.setStatus('mandatory')
ol51nnMAUIFModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 1), )
if mibBuilder.loadTexts: ol51nnMAUIFModTable.setStatus('mandatory')
ol51nnMAUIFModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMAUIFModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMAUIFModEntry.setStatus('mandatory')
ol51nnMAUIFModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFModSlotIndex.setStatus('mandatory')
ol51nnMAUIFPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2), )
if mibBuilder.loadTexts: ol51nnMAUIFPortTable.setStatus('mandatory')
ol51nnMAUIFPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMAUIFPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMAUIFPortIndex"))
if mibBuilder.loadTexts: ol51nnMAUIFPortEntry.setStatus('mandatory')
ol51nnMAUIFPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortSlotIndex.setStatus('mandatory')
ol51nnMAUIFPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortIndex.setStatus('mandatory')
ol51nnMAUIFPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIFPortAdminState.setStatus('mandatory')
ol51nnMAUIFPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIFPortBuddySlot.setStatus('mandatory')
ol51nnMAUIFPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIFPortBuddyPort.setStatus('mandatory')
ol51nnMAUIFPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortDipAdminState.setStatus('mandatory')
ol51nnMAUIFPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIFPortDipNetwork.setStatus('mandatory')
ol51nnMAUIMModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 1), )
if mibBuilder.loadTexts: ol51nnMAUIMModTable.setStatus('mandatory')
ol51nnMAUIMModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMAUIMModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMAUIMModEntry.setStatus('mandatory')
ol51nnMAUIMModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMModSlotIndex.setStatus('mandatory')
ol51nnMAUIMPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2), )
if mibBuilder.loadTexts: ol51nnMAUIMPortTable.setStatus('mandatory')
ol51nnMAUIMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMAUIMPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMAUIMPortIndex"))
if mibBuilder.loadTexts: ol51nnMAUIMPortEntry.setStatus('mandatory')
ol51nnMAUIMPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortSlotIndex.setStatus('mandatory')
ol51nnMAUIMPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortIndex.setStatus('mandatory')
ol51nnMAUIMPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortAdminState.setStatus('mandatory')
ol51nnMAUIMPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortBuddySlot.setStatus('mandatory')
ol51nnMAUIMPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortBuddyPort.setStatus('mandatory')
ol51nnMAUIMPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipAdminState.setStatus('mandatory')
ol51nnMAUIMPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipNetwork.setStatus('mandatory')
ol51nnMAUIMPortSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortSQETest.setStatus('mandatory')
ol51nnMAUIMPortDipSQETest = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipSQETest.setStatus('mandatory')
ol51nnMAUIMPortCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alternate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortCollision.setStatus('mandatory')
ol51nnMAUIMPortDipCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("alternate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipCollision.setStatus('mandatory')
ol51nnMAUIMPortHalfStep = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMAUIMPortHalfStep.setStatus('mandatory')
ol51nnMAUIMPortDipHalfStep = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMAUIMPortDipHalfStep.setStatus('mandatory')
ol5208MTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1), )
if mibBuilder.loadTexts: ol5208MTPModTable.setStatus('mandatory')
ol5208MTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol5208MTPModSlotIndex"))
if mibBuilder.loadTexts: ol5208MTPModEntry.setStatus('mandatory')
ol5208MTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPModSlotIndex.setStatus('mandatory')
ol5208MTPModBypsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insert", 1), ("bypass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPModBypsAdminState.setStatus('mandatory')
ol5208MTPModBypsOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insert", 1), ("bypass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPModBypsOperState.setStatus('mandatory')
ol5208MTPModDipCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPModDipCableImp.setStatus('mandatory')
ol5208MTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2), )
if mibBuilder.loadTexts: ol5208MTPPortTable.setStatus('mandatory')
ol5208MTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol5208MTPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol5208MTPPortIndex"))
if mibBuilder.loadTexts: ol5208MTPPortEntry.setStatus('mandatory')
ol5208MTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPPortSlotIndex.setStatus('mandatory')
ol5208MTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPPortIndex.setStatus('mandatory')
ol5208MTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPPortDipAdminState.setStatus('mandatory')
ol5208MTPPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-present", 1), ("mac-not-present", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPPortStationType.setStatus('mandatory')
ol5208MTPTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3), )
if mibBuilder.loadTexts: ol5208MTPTrunkTable.setStatus('mandatory')
ol5208MTPTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol5208MTPTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol5208MTPTrunkIndex"))
if mibBuilder.loadTexts: ol5208MTPTrunkEntry.setStatus('mandatory')
ol5208MTPTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkSlotIndex.setStatus('mandatory')
ol5208MTPTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkIndex.setStatus('mandatory')
ol5208MTPTrunkDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkDipAdminState.setStatus('mandatory')
ol5208MTPTrunkCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPTrunkCableMon.setStatus('mandatory')
ol5208MTPTrunkDipCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol5208MTPTrunkDipCableMon.setStatus('mandatory')
ol5208MTPTrunkNetMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPTrunkNetMapState.setStatus('mandatory')
ol5208MTPTrunkExtBcnRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exists", 1), ("nonExists", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol5208MTPTrunkExtBcnRecovery.setStatus('mandatory')
ol51nnMFPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 1), )
if mibBuilder.loadTexts: ol51nnMFPModTable.setStatus('mandatory')
ol51nnMFPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFPModEntry.setStatus('mandatory')
ol51nnMFPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPModSlotIndex.setStatus('mandatory')
ol51nnMFPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2), )
if mibBuilder.loadTexts: ol51nnMFPPortTable.setStatus('mandatory')
ol51nnMFPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMFPPortIndex"))
if mibBuilder.loadTexts: ol51nnMFPPortEntry.setStatus('mandatory')
ol51nnMFPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortSlotIndex.setStatus('mandatory')
ol51nnMFPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortIndex.setStatus('mandatory')
ol51nnMFPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortAdminState.setStatus('mandatory')
ol51nnMFPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortBuddySlot.setStatus('mandatory')
ol51nnMFPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortBuddyPort.setStatus('mandatory')
ol51nnMFPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipAdminState.setStatus('mandatory')
ol51nnMFPPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipNetwork.setStatus('mandatory')
ol51nnMFPPortLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortLLW.setStatus('mandatory')
ol51nnMFPPortDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipLLW.setStatus('mandatory')
ol51nnMFPPortHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFPPortHipwr.setStatus('mandatory')
ol51nnMFPPortDipHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFPPortDipHipwr.setStatus('mandatory')
ol51nnMFBPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 1), )
if mibBuilder.loadTexts: ol51nnMFBPModTable.setStatus('mandatory')
ol51nnMFBPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFBPModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFBPModEntry.setStatus('mandatory')
ol51nnMFBPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPModSlotIndex.setStatus('mandatory')
ol51nnMFBPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2), )
if mibBuilder.loadTexts: ol51nnMFBPPortTable.setStatus('mandatory')
ol51nnMFBPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFBPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMFBPPortIndex"))
if mibBuilder.loadTexts: ol51nnMFBPPortEntry.setStatus('mandatory')
ol51nnMFBPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortSlotIndex.setStatus('mandatory')
ol51nnMFBPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortIndex.setStatus('mandatory')
ol51nnMFBPPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortAdminState.setStatus('mandatory')
ol51nnMFBPPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortBuddySlot.setStatus('mandatory')
ol51nnMFBPPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortBuddyPort.setStatus('mandatory')
ol51nnMFBPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipAdminState.setStatus('mandatory')
ol51nnMFBPPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipNetwork.setStatus('mandatory')
ol51nnMFBPPortLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortLLW.setStatus('mandatory')
ol51nnMFBPPortDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipLLW.setStatus('mandatory')
ol51nnMFBPPortHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPPortHipwr.setStatus('mandatory')
ol51nnMFBPPortDipHipwr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPPortDipHipwr.setStatus('mandatory')
ol51nnMTPLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1), )
if mibBuilder.loadTexts: ol51nnMTPLModTable.setStatus('mandatory')
ol51nnMTPLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPLModEntry.setStatus('mandatory')
ol51nnMTPLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLModSlotIndex.setStatus('mandatory')
ol51nnMTPLModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLModDipNetwork.setStatus('mandatory')
ol51nnMTPLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2), )
if mibBuilder.loadTexts: ol51nnMTPLPortTable.setStatus('mandatory')
ol51nnMTPLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPLPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMTPLPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPLPortEntry.setStatus('mandatory')
ol51nnMTPLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortSlotIndex.setStatus('mandatory')
ol51nnMTPLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortIndex.setStatus('mandatory')
ol51nnMTPLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortAdminState.setStatus('mandatory')
ol51nnMTPLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortBuddySlot.setStatus('mandatory')
ol51nnMTPLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortBuddyPort.setStatus('mandatory')
ol51nnMTPLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortDipAdminState.setStatus('mandatory')
ol51nnMTPLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortLinkInteg.setStatus('mandatory')
ol51nnMTPLPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortDipLinkInteg.setStatus('mandatory')
ol51nnMTPLPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortSquelch.setStatus('mandatory')
ol51nnMTPLPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPLPortJabber.setStatus('mandatory')
ol51nnMTPLPortDipJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPLPortDipJabber.setStatus('mandatory')
ol51nnMTPPLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 1), )
if mibBuilder.loadTexts: ol51nnMTPPLModTable.setStatus('mandatory')
ol51nnMTPPLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPPLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPPLModEntry.setStatus('mandatory')
ol51nnMTPPLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLModSlotIndex.setStatus('mandatory')
ol51nnMTPPLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2), )
if mibBuilder.loadTexts: ol51nnMTPPLPortTable.setStatus('mandatory')
ol51nnMTPPLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPPLPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMTPPLPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPPLPortEntry.setStatus('mandatory')
ol51nnMTPPLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortSlotIndex.setStatus('mandatory')
ol51nnMTPPLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortIndex.setStatus('mandatory')
ol51nnMTPPLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortAdminState.setStatus('mandatory')
ol51nnMTPPLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortBuddySlot.setStatus('mandatory')
ol51nnMTPPLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortBuddyPort.setStatus('mandatory')
ol51nnMTPPLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipAdminState.setStatus('mandatory')
ol51nnMTPPLPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipNetwork.setStatus('mandatory')
ol51nnMTPPLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortLinkInteg.setStatus('mandatory')
ol51nnMTPPLPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipLinkInteg.setStatus('mandatory')
ol51nnMTPPLPortSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("low", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortSquelch.setStatus('mandatory')
ol51nnMTPPLPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPPLPortJabber.setStatus('mandatory')
ol51nnMTPPLPortDipJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPPLPortDipJabber.setStatus('mandatory')
ol52nnMTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1), )
if mibBuilder.loadTexts: ol52nnMTPModTable.setStatus('mandatory')
ol52nnMTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMTPModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMTPModEntry.setStatus('mandatory')
ol52nnMTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPModSlotIndex.setStatus('mandatory')
ol52nnMTPModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMTPModRingSpeed.setStatus('mandatory')
ol52nnMTPModDipRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPModDipRingSpeed.setStatus('mandatory')
ol52nnMTPModCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMTPModCableImp.setStatus('mandatory')
ol52nnMTPModDipCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPModDipCableImp.setStatus('mandatory')
ol52nnMTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2), )
if mibBuilder.loadTexts: ol52nnMTPPortTable.setStatus('mandatory')
ol52nnMTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMTPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnMTPPortIndex"))
if mibBuilder.loadTexts: ol52nnMTPPortEntry.setStatus('mandatory')
ol52nnMTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPPortSlotIndex.setStatus('mandatory')
ol52nnMTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPPortIndex.setStatus('mandatory')
ol52nnMTPPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPPortDipAdminState.setStatus('mandatory')
ol52nnMTPPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-present", 1), ("mac-not-present", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMTPPortStationType.setStatus('mandatory')
ol52nnMTPTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3), )
if mibBuilder.loadTexts: ol52nnMTPTrunkTable.setStatus('mandatory')
ol52nnMTPTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMTPTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnMTPTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMTPTrunkEntry.setStatus('mandatory')
ol52nnMTPTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPTrunkSlotIndex.setStatus('mandatory')
ol52nnMTPTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPTrunkIndex.setStatus('mandatory')
ol52nnMTPTrunkDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMTPTrunkDipAdminState.setStatus('mandatory')
ol52nnMFRModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1), )
if mibBuilder.loadTexts: ol52nnMFRModTable.setStatus('mandatory')
ol52nnMFRModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMFRModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMFRModEntry.setStatus('mandatory')
ol52nnMFRModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRModSlotIndex.setStatus('mandatory')
ol52nnMFRModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRModRingSpeed.setStatus('mandatory')
ol52nnMFRModDipRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRModDipRingSpeed.setStatus('mandatory')
ol52nnMFRPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2), )
if mibBuilder.loadTexts: ol52nnMFRPortTable.setStatus('mandatory')
ol52nnMFRPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMFRPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnMFRPortIndex"))
if mibBuilder.loadTexts: ol52nnMFRPortEntry.setStatus('mandatory')
ol52nnMFRPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortSlotIndex.setStatus('mandatory')
ol52nnMFRPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortIndex.setStatus('mandatory')
ol52nnMFRPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortDipAdminState.setStatus('mandatory')
ol52nnMFRPortCableImp = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ohm100", 1), ("ohm150", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRPortCableImp.setStatus('mandatory')
ol52nnMFRPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac-present", 1), ("mac-not-present", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRPortStationType.setStatus('mandatory')
ol52nnMFRTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3), )
if mibBuilder.loadTexts: ol52nnMFRTrunkTable.setStatus('mandatory')
ol52nnMFRTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMFRTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnMFRTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMFRTrunkEntry.setStatus('mandatory')
ol52nnMFRTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkSlotIndex.setStatus('mandatory')
ol52nnMFRTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkIndex.setStatus('mandatory')
ol52nnMFRTrunkDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkDipAdminState.setStatus('mandatory')
ol52nnMFRTrunkCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkCableMon.setStatus('mandatory')
ol52nnMFRTrunkDipCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkDipCableMon.setStatus('mandatory')
ol52nnMFRTrunkCompMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkCompMode.setStatus('mandatory')
ol52nnMFRTrunkDipCompMode = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMFRTrunkDipCompMode.setStatus('mandatory')
ol52nnMFRTrunkNetMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkNetMapState.setStatus('mandatory')
ol52nnMFRTrunkExtBcnRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exists", 1), ("nonExists", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMFRTrunkExtBcnRecovery.setStatus('mandatory')
ol51nnMTSModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1), )
if mibBuilder.loadTexts: ol51nnMTSModTable.setStatus('mandatory')
ol51nnMTSModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTSModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTSModEntry.setStatus('mandatory')
ol51nnMTSModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModSlotIndex.setStatus('mandatory')
ol51nnMTSModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModProtocols.setStatus('mandatory')
ol51nnMTSModIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModIpAddress.setStatus('mandatory')
ol51nnMTSModTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModTCPPort.setStatus('mandatory')
ol51nnMTSModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModStationAddr.setStatus('mandatory')
ol51nnMTSModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModDipNetwork.setStatus('mandatory')
ol51nnMTSModCPURev = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSModCPURev.setStatus('mandatory')
ol51nnMTSPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2), )
if mibBuilder.loadTexts: ol51nnMTSPortTable.setStatus('mandatory')
ol51nnMTSPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTSPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMTSPortIndex"))
if mibBuilder.loadTexts: ol51nnMTSPortEntry.setStatus('mandatory')
ol51nnMTSPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSPortSlotIndex.setStatus('mandatory')
ol51nnMTSPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSPortIndex.setStatus('mandatory')
ol51nnMTSPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("local", 6), ("remote", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTSPortAdminState.setStatus('mandatory')
ol51nnMTSPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("local", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTSPortOperState.setStatus('mandatory')
ol51nnMFLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1), )
if mibBuilder.loadTexts: ol51nnMFLModTable.setStatus('mandatory')
ol51nnMFLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFLModEntry.setStatus('mandatory')
ol51nnMFLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLModSlotIndex.setStatus('mandatory')
ol51nnMFLModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLModDipNetwork.setStatus('mandatory')
ol51nnMFLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2), )
if mibBuilder.loadTexts: ol51nnMFLPortTable.setStatus('mandatory')
ol51nnMFLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFLPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMFLPortIndex"))
if mibBuilder.loadTexts: ol51nnMFLPortEntry.setStatus('mandatory')
ol51nnMFLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLPortSlotIndex.setStatus('mandatory')
ol51nnMFLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLPortIndex.setStatus('mandatory')
ol51nnMFLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("redundant-rfs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFLPortAdminState.setStatus('mandatory')
ol51nnMFLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFLPortBuddySlot.setStatus('mandatory')
ol51nnMFLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFLPortBuddyPort.setStatus('mandatory')
ol51nnMFLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("redundant-rfs", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFLPortDipAdminState.setStatus('mandatory')
ol50nnMRCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1), )
if mibBuilder.loadTexts: ol50nnMRCTLModTable.setStatus('mandatory')
ol50nnMRCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol50nnMRCTLModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMRCTLModEntry.setStatus('mandatory')
ol50nnMRCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModSlotIndex.setStatus('mandatory')
ol50nnMRCTLModOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModOperState.setStatus('mandatory')
ol50nnMRCTLModClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModClockStatus.setStatus('mandatory')
ol50nnMRCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMRCTLModTempStatus.setStatus('mandatory')
ol51nnMFBModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1), )
if mibBuilder.loadTexts: ol51nnMFBModTable.setStatus('mandatory')
ol51nnMFBModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFBModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMFBModEntry.setStatus('mandatory')
ol51nnMFBModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBModSlotIndex.setStatus('mandatory')
ol51nnMFBModDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBModDipNetwork.setStatus('mandatory')
ol51nnMFBModLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBModLLW.setStatus('mandatory')
ol51nnMFBModDipLLW = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBModDipLLW.setStatus('mandatory')
ol51nnMFBPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2), )
if mibBuilder.loadTexts: ol51nnMFBPortTable.setStatus('mandatory')
ol51nnMFBPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMFBPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMFBPortIndex"))
if mibBuilder.loadTexts: ol51nnMFBPortEntry.setStatus('mandatory')
ol51nnMFBPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPortSlotIndex.setStatus('mandatory')
ol51nnMFBPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPortIndex.setStatus('mandatory')
ol51nnMFBPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPortAdminState.setStatus('mandatory')
ol51nnMFBPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPortBuddySlot.setStatus('mandatory')
ol51nnMFBPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMFBPortBuddyPort.setStatus('mandatory')
ol51nnMFBPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMFBPortDipAdminState.setStatus('mandatory')
ol53nnMFBMICModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1), )
if mibBuilder.loadTexts: ol53nnMFBMICModTable.setStatus('mandatory')
ol53nnMFBMICModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMFBMICModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMFBMICModEntry.setStatus('mandatory')
ol53nnMFBMICModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModSlotIndex.setStatus('mandatory')
ol53nnMFBMICModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModDownStreamModule.setStatus('mandatory')
ol53nnMFBMICModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModUpStreamModule.setStatus('mandatory')
ol53nnMFBMICModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModDownStreamOperPath.setStatus('mandatory')
ol53nnMFBMICModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModUpStreamOperPath.setStatus('mandatory')
ol53nnMFBMICModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICModRingInfo.setStatus('mandatory')
ol53nnMFBMICPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2), )
if mibBuilder.loadTexts: ol53nnMFBMICPortTable.setStatus('mandatory')
ol53nnMFBMICPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMFBMICPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMFBMICPortIndex"))
if mibBuilder.loadTexts: ol53nnMFBMICPortEntry.setStatus('mandatory')
ol53nnMFBMICPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortSlotIndex.setStatus('mandatory')
ol53nnMFBMICPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortIndex.setStatus('mandatory')
ol53nnMFBMICPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMFBMICPortConfig.setStatus('mandatory')
ol53nnMFBMICPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortPcmState.setStatus('mandatory')
ol53nnMFBMICPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortConnectState.setStatus('mandatory')
ol53nnMFBMICPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortNeighbor.setStatus('mandatory')
ol53nnMFBMICPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortRemoteMACIndicated.setStatus('mandatory')
ol53nnMFBMICPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortBSFlag.setStatus('mandatory')
ol53nnMFBMICPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortPCWithhold.setStatus('mandatory')
ol53nnMFBMICPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICPortLerCondition.setStatus('mandatory')
ol53nnMFBMICTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3), )
if mibBuilder.loadTexts: ol53nnMFBMICTrunkTable.setStatus('mandatory')
ol53nnMFBMICTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMFBMICTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMFBMICTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMFBMICTrunkEntry.setStatus('mandatory')
ol53nnMFBMICTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICTrunkSlotIndex.setStatus('mandatory')
ol53nnMFBMICTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFBMICTrunkIndex.setStatus('mandatory')
ol53nnMFIBSTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1), )
if mibBuilder.loadTexts: ol53nnMFIBSTModTable.setStatus('mandatory')
ol53nnMFIBSTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMFIBSTModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMFIBSTModEntry.setStatus('mandatory')
ol53nnMFIBSTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModSlotIndex.setStatus('mandatory')
ol53nnMFIBSTModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModDownStreamModule.setStatus('mandatory')
ol53nnMFIBSTModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModUpStreamModule.setStatus('mandatory')
ol53nnMFIBSTModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModDownStreamOperPath.setStatus('mandatory')
ol53nnMFIBSTModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModUpStreamOperPath.setStatus('mandatory')
ol53nnMFIBSTModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTModRingInfo.setStatus('mandatory')
ol53nnMFIBSTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2), )
if mibBuilder.loadTexts: ol53nnMFIBSTPortTable.setStatus('mandatory')
ol53nnMFIBSTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMFIBSTPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMFIBSTPortIndex"))
if mibBuilder.loadTexts: ol53nnMFIBSTPortEntry.setStatus('mandatory')
ol53nnMFIBSTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortSlotIndex.setStatus('mandatory')
ol53nnMFIBSTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortIndex.setStatus('mandatory')
ol53nnMFIBSTPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMFIBSTPortConfig.setStatus('mandatory')
ol53nnMFIBSTPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortPcmState.setStatus('mandatory')
ol53nnMFIBSTPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortConnectState.setStatus('mandatory')
ol53nnMFIBSTPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortNeighbor.setStatus('mandatory')
ol53nnMFIBSTPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortRemoteMACIndicated.setStatus('mandatory')
ol53nnMFIBSTPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortBSFlag.setStatus('mandatory')
ol53nnMFIBSTPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortPCWithhold.setStatus('mandatory')
ol53nnMFIBSTPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTPortLerCondition.setStatus('mandatory')
ol53nnMFIBSTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3), )
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkTable.setStatus('mandatory')
ol53nnMFIBSTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMFIBSTTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMFIBSTTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkEntry.setStatus('mandatory')
ol53nnMFIBSTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkSlotIndex.setStatus('mandatory')
ol53nnMFIBSTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMFIBSTTrunkIndex.setStatus('mandatory')
ol53nnMSTPModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1), )
if mibBuilder.loadTexts: ol53nnMSTPModTable.setStatus('mandatory')
ol53nnMSTPModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMSTPModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMSTPModEntry.setStatus('mandatory')
ol53nnMSTPModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModSlotIndex.setStatus('mandatory')
ol53nnMSTPModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModDownStreamModule.setStatus('mandatory')
ol53nnMSTPModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModUpStreamModule.setStatus('mandatory')
ol53nnMSTPModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModDownStreamOperPath.setStatus('mandatory')
ol53nnMSTPModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModUpStreamOperPath.setStatus('mandatory')
ol53nnMSTPModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPModRingInfo.setStatus('mandatory')
ol53nnMSTPPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2), )
if mibBuilder.loadTexts: ol53nnMSTPPortTable.setStatus('mandatory')
ol53nnMSTPPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMSTPPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMSTPPortIndex"))
if mibBuilder.loadTexts: ol53nnMSTPPortEntry.setStatus('mandatory')
ol53nnMSTPPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortSlotIndex.setStatus('mandatory')
ol53nnMSTPPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortIndex.setStatus('mandatory')
ol53nnMSTPPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("slave", 3), ("master", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMSTPPortConfig.setStatus('mandatory')
ol53nnMSTPPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortPcmState.setStatus('mandatory')
ol53nnMSTPPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortConnectState.setStatus('mandatory')
ol53nnMSTPPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortNeighbor.setStatus('mandatory')
ol53nnMSTPPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortRemoteMACIndicated.setStatus('mandatory')
ol53nnMSTPPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortBSFlag.setStatus('mandatory')
ol53nnMSTPPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortPCWithhold.setStatus('mandatory')
ol53nnMSTPPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPPortLerCondition.setStatus('mandatory')
ol53nnMSTPPortPersonality = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sddi", 1), ("tpddi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMSTPPortPersonality.setStatus('mandatory')
ol53nnMSTPTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3), )
if mibBuilder.loadTexts: ol53nnMSTPTrunkTable.setStatus('mandatory')
ol53nnMSTPTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMSTPTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMSTPTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMSTPTrunkEntry.setStatus('mandatory')
ol53nnMSTPTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPTrunkSlotIndex.setStatus('mandatory')
ol53nnMSTPTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMSTPTrunkIndex.setStatus('mandatory')
ol51nnMTPCLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1), )
if mibBuilder.loadTexts: ol51nnMTPCLModTable.setStatus('mandatory')
ol51nnMTPCLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPCLModSlotIndex"))
if mibBuilder.loadTexts: ol51nnMTPCLModEntry.setStatus('mandatory')
ol51nnMTPCLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLModSlotIndex.setStatus('mandatory')
ol51nnMTPCLModMonitorConn = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connector-1", 1), ("connector-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModMonitorConn.setStatus('mandatory')
ol51nnMTPCLModConn1Network = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModConn1Network.setStatus('mandatory')
ol51nnMTPCLModConn2Network = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModConn2Network.setStatus('mandatory')
ol51nnMTPCLModConn1DipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLModConn1DipNetwork.setStatus('mandatory')
ol51nnMTPCLModConn2DipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 21, 22))).clone(namedValues=NamedValues(("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8), ("isolated-1", 21), ("isolated-2", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLModConn2DipNetwork.setStatus('mandatory')
ol51nnMTPCLModAutoPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("collisions-31", 1), ("collisions-63", 2), ("collisions-127", 3), ("collisions-255", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLModAutoPartition.setStatus('mandatory')
ol51nnMTPCLPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2), )
if mibBuilder.loadTexts: ol51nnMTPCLPortTable.setStatus('mandatory')
ol51nnMTPCLPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnMTPCLPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnMTPCLPortIndex"))
if mibBuilder.loadTexts: ol51nnMTPCLPortEntry.setStatus('mandatory')
ol51nnMTPCLPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortSlotIndex.setStatus('mandatory')
ol51nnMTPCLPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortIndex.setStatus('mandatory')
ol51nnMTPCLPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("redundant-primary", 3), ("redundant-backup", 4), ("remote-diagnostics", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortAdminState.setStatus('mandatory')
ol51nnMTPCLPortBuddySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortBuddySlot.setStatus('mandatory')
ol51nnMTPCLPortBuddyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortBuddyPort.setStatus('mandatory')
ol51nnMTPCLPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortDipAdminState.setStatus('mandatory')
ol51nnMTPCLPortLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol51nnMTPCLPortLinkInteg.setStatus('mandatory')
ol51nnMTPCLPortDipLinkInteg = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnMTPCLPortDipLinkInteg.setStatus('mandatory')
ol52nnBTTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1), )
if mibBuilder.loadTexts: ol52nnBTTModTable.setStatus('mandatory')
ol52nnBTTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnBTTModSlotIndex"))
if mibBuilder.loadTexts: ol52nnBTTModEntry.setStatus('mandatory')
ol52nnBTTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModSlotIndex.setStatus('mandatory')
ol52nnBTTModBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge-type-sr", 1), ("bridge-type-srt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModBridgeType.setStatus('mandatory')
ol52nnBTTModSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModSoftwareVersion.setStatus('mandatory')
ol52nnBTTModSRBridgeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModSRBridgeNo.setStatus('mandatory')
ol52nnBTTModNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("closed", 2), ("beaconing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTModNetworkStatus.setStatus('mandatory')
ol52nnBTTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2), )
if mibBuilder.loadTexts: ol52nnBTTPortTable.setStatus('mandatory')
ol52nnBTTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnBTTPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnBTTPortIndex"))
if mibBuilder.loadTexts: ol52nnBTTPortEntry.setStatus('mandatory')
ol52nnBTTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortSlotIndex.setStatus('mandatory')
ol52nnBTTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortIndex.setStatus('mandatory')
ol52nnBTTPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 10))).clone(namedValues=NamedValues(("backPlane", 1), ("rj45", 8), ("db-9", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnBTTPortConnector.setStatus('mandatory')
ol52nnBTTPortSTAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("off", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortSTAPState.setStatus('mandatory')
ol52nnBTTPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortIpAddress.setStatus('mandatory')
ol52nnBTTPortMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortMACAddress.setStatus('mandatory')
ol52nnBTTPortThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortThroughput.setStatus('mandatory')
ol52nnBTTPortForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortForwarding.setStatus('mandatory')
ol52nnBTTPortSRRingNo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTPortSRRingNo.setStatus('mandatory')
ol52nnBTTPortRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnBTTPortRingSpeed.setStatus('mandatory')
ol52nnBTTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3), )
if mibBuilder.loadTexts: ol52nnBTTTrunkTable.setStatus('mandatory')
ol52nnBTTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnBTTTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnBTTTrunkIndex"))
if mibBuilder.loadTexts: ol52nnBTTTrunkEntry.setStatus('mandatory')
ol52nnBTTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTTrunkSlotIndex.setStatus('mandatory')
ol52nnBTTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnBTTTrunkIndex.setStatus('mandatory')
ol52nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1), )
if mibBuilder.loadTexts: ol52nnMMGTModTable.setStatus('mandatory')
ol52nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMMGTModSlotIndex"))
if mibBuilder.loadTexts: ol52nnMMGTModEntry.setStatus('mandatory')
ol52nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModSlotIndex.setStatus('mandatory')
ol52nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTModMasterPriority.setStatus('mandatory')
ol52nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModMasterStatus.setStatus('mandatory')
ol52nnMMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModStationAddr.setStatus('mandatory')
ol52nnMMGTModRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTModRingSpeed.setStatus('mandatory')
ol52nnMMGTModNetworkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("okay", 1), ("closed", 2), ("beaconing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTModNetworkStatus.setStatus('mandatory')
ol52nnMMGTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2), )
if mibBuilder.loadTexts: ol52nnMMGTPortTable.setStatus('mandatory')
ol52nnMMGTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMMGTPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnMMGTPortIndex"))
if mibBuilder.loadTexts: ol52nnMMGTPortEntry.setStatus('mandatory')
ol52nnMMGTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTPortSlotIndex.setStatus('mandatory')
ol52nnMMGTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTPortIndex.setStatus('mandatory')
ol52nnMMGTPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTPortIpAddress.setStatus('mandatory')
ol52nnMMGTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3), )
if mibBuilder.loadTexts: ol52nnMMGTTrunkTable.setStatus('mandatory')
ol52nnMMGTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol52nnMMGTTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol52nnMMGTTrunkIndex"))
if mibBuilder.loadTexts: ol52nnMMGTTrunkEntry.setStatus('mandatory')
ol52nnMMGTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTTrunkSlotIndex.setStatus('mandatory')
ol52nnMMGTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol52nnMMGTTrunkIndex.setStatus('mandatory')
ol52nnMMGTTrunkCableMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTTrunkCableMon.setStatus('mandatory')
ol52nnMMGTTrunkNetMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTTrunkNetMapState.setStatus('mandatory')
ol52nnMMGTTrunkExtBcnRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exists", 1), ("nonExists", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol52nnMMGTTrunkExtBcnRecovery.setStatus('mandatory')
ol51nnIxModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1), )
if mibBuilder.loadTexts: ol51nnIxModTable.setStatus('mandatory')
ol51nnIxModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnIxModSlotIndex"))
if mibBuilder.loadTexts: ol51nnIxModEntry.setStatus('mandatory')
ol51nnIxModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModSlotIndex.setStatus('mandatory')
ol51nnIxModSwType = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bridge", 1), ("switch", 2), ("router", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModSwType.setStatus('mandatory')
ol51nnIxModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModStationAddr.setStatus('mandatory')
ol51nnIxModDipPromDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModDipPromDefaults.setStatus('mandatory')
ol51nnIxModProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxModProtocols.setStatus('mandatory')
ol51nnIxPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2), )
if mibBuilder.loadTexts: ol51nnIxPortTable.setStatus('mandatory')
ol51nnIxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol51nnIxPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol51nnIxPortIndex"))
if mibBuilder.loadTexts: ol51nnIxPortEntry.setStatus('mandatory')
ol51nnIxPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortSlotIndex.setStatus('mandatory')
ol51nnIxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortIndex.setStatus('mandatory')
ol51nnIxPortDipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortDipAdminState.setStatus('mandatory')
ol51nnIxPortSTAPState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("off", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortSTAPState.setStatus('mandatory')
ol51nnIxPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortIpAddress.setStatus('mandatory')
ol51nnIxPortDipNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortDipNetwork.setStatus('mandatory')
ol51nnIxPortDefNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8))).clone(namedValues=NamedValues(("isolated", 2), ("front-panel", 5), ("ethernet-1", 6), ("ethernet-2", 7), ("ethernet-3", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol51nnIxPortDefNetwork.setStatus('mandatory')
ol53nnMMGTModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1), )
if mibBuilder.loadTexts: ol53nnMMGTModTable.setStatus('mandatory')
ol53nnMMGTModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMMGTModSlotIndex"))
if mibBuilder.loadTexts: ol53nnMMGTModEntry.setStatus('mandatory')
ol53nnMMGTModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModSlotIndex.setStatus('mandatory')
ol53nnMMGTModMasterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7), ("eight", 8), ("nine", 9), ("ten", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMMGTModMasterPriority.setStatus('mandatory')
ol53nnMMGTModMasterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("non-master", 2), ("electing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModMasterStatus.setStatus('mandatory')
ol53nnMMGTModStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModStationAddr.setStatus('mandatory')
ol53nnMMGTModIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMMGTModIpAddress.setStatus('mandatory')
ol53nnMMGTModDownStreamMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamMAC.setStatus('mandatory')
ol53nnMMGTModUpStreamMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamMAC.setStatus('mandatory')
ol53nnMMGTModfddiMACPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ol53nnMMGTModfddiMACPath.setStatus('mandatory')
ol53nnMMGTModDownStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamModule.setStatus('mandatory')
ol53nnMMGTModUpStreamModule = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamModule.setStatus('mandatory')
ol53nnMMGTModDownStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModDownStreamOperPath.setStatus('mandatory')
ol53nnMMGTModUpStreamOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("isolated", 2), ("fddi-path-1", 24), ("fddi-path-2", 25), ("fddi-path-3", 26), ("fddi-path-4", 27), ("fddi-path-5", 28), ("fddi-path-6", 29), ("fddi-path-7", 30), ("fddi-path-8", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModUpStreamOperPath.setStatus('mandatory')
ol53nnMMGTModRingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTModRingInfo.setStatus('mandatory')
ol53nnMMGTPortTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2), )
if mibBuilder.loadTexts: ol53nnMMGTPortTable.setStatus('mandatory')
ol53nnMMGTPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMMGTPortSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMMGTPortIndex"))
if mibBuilder.loadTexts: ol53nnMMGTPortEntry.setStatus('mandatory')
ol53nnMMGTPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortSlotIndex.setStatus('mandatory')
ol53nnMMGTPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortIndex.setStatus('mandatory')
ol53nnMMGTPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a", 1), ("b", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortConfig.setStatus('mandatory')
ol53nnMMGTPortPcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("pc0", 1), ("pc1", 2), ("pc2", 3), ("pc3", 4), ("pc4", 5), ("pc5", 6), ("pc6", 7), ("pc7", 8), ("pc8", 9), ("pc9", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortPcmState.setStatus('mandatory')
ol53nnMMGTPortConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("connecting", 2), ("standby", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortConnectState.setStatus('mandatory')
ol53nnMMGTPortNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("a", 1), ("b", 2), ("slave", 3), ("master", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortNeighbor.setStatus('mandatory')
ol53nnMMGTPortRemoteMACIndicated = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortRemoteMACIndicated.setStatus('mandatory')
ol53nnMMGTPortBSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortBSFlag.setStatus('mandatory')
ol53nnMMGTPortPCWithhold = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("m-m", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortPCWithhold.setStatus('mandatory')
ol53nnMMGTPortLerCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("okay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTPortLerCondition.setStatus('mandatory')
ol53nnMMGTTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3), )
if mibBuilder.loadTexts: ol53nnMMGTTrunkTable.setStatus('mandatory')
ol53nnMMGTTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol53nnMMGTTrunkSlotIndex"), (0, "CHIPMODULE-MIB", "ol53nnMMGTTrunkIndex"))
if mibBuilder.loadTexts: ol53nnMMGTTrunkEntry.setStatus('mandatory')
ol53nnMMGTTrunkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTTrunkSlotIndex.setStatus('mandatory')
ol53nnMMGTTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol53nnMMGTTrunkIndex.setStatus('mandatory')
ol50nnMHCTLModTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1), )
if mibBuilder.loadTexts: ol50nnMHCTLModTable.setStatus('mandatory')
ol50nnMHCTLModEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1), ).setIndexNames((0, "CHIPMODULE-MIB", "ol50nnMHCTLModSlotIndex"))
if mibBuilder.loadTexts: ol50nnMHCTLModEntry.setStatus('mandatory')
ol50nnMHCTLModSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModSlotIndex.setStatus('mandatory')
ol50nnMHCTLModOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModOperState.setStatus('mandatory')
ol50nnMHCTLModClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModClockStatus.setStatus('mandatory')
ol50nnMHCTLModTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("okay", 1), ("extremeTemp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModTempStatus.setStatus('mandatory')
ol50nnMHCTLModPDBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModPDBStatus.setStatus('mandatory')
ol50nnMHCTLModDipCh1ActCol = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh1ActCol.setStatus('mandatory')
ol50nnMHCTLModDipCh2ActCol = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh2ActCol.setStatus('mandatory')
ol50nnMHCTLModDipCh3ActCol = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ol50nnMHCTLModDipCh3ActCol.setStatus('mandatory')
mibBuilder.exportSymbols("CHIPMODULE-MIB", ol51nnMUTPModEntry=ol51nnMUTPModEntry, ol52nnMMGTPortIndex=ol52nnMMGTPortIndex, ol51nnMBNCPortIndex=ol51nnMBNCPortIndex, ol51nnBEEPortTable=ol51nnBEEPortTable, ol51nnMFLPortAdminState=ol51nnMFLPortAdminState, ol51nnMFL=ol51nnMFL, ol52nnBTTPortThroughput=ol52nnBTTPortThroughput, ol52nnBTTPortSTAPState=ol52nnBTTPortSTAPState, ol51nnMTPLPortIndex=ol51nnMTPLPortIndex, ol51nnMTPCLModConn1Network=ol51nnMTPCLModConn1Network, ol51nnMMGTModStationAddr=ol51nnMMGTModStationAddr, ol51nnMBNCPortDipTermination=ol51nnMBNCPortDipTermination, ol51nnREE=ol51nnREE, ol51nnIxModSwType=ol51nnIxModSwType, ol51nnMUTPPortDipSquelch=ol51nnMUTPPortDipSquelch, ol51nnREEPortTable=ol51nnREEPortTable, ol51nnMAUIMPortSQETest=ol51nnMAUIMPortSQETest, ol51nnIxPortSTAPState=ol51nnIxPortSTAPState, ol51nnMFBModTable=ol51nnMFBModTable, ol51nnMTPLPortSquelch=ol51nnMTPLPortSquelch, ol51nnMMGTModEntry=ol51nnMMGTModEntry, ol51nnMAUIFPortBuddySlot=ol51nnMAUIFPortBuddySlot, ol51nnMTPCLPortAdminState=ol51nnMTPCLPortAdminState, ol51nnIxPortDipNetwork=ol51nnIxPortDipNetwork, hardwareGroup=hardwareGroup, ol52nnBTTPortEntry=ol52nnBTTPortEntry, ol51nnMFIBModDipNetwork=ol51nnMFIBModDipNetwork, ol53nnMMGTModEntry=ol53nnMMGTModEntry, ol51nnREEModEntry=ol51nnREEModEntry, ol51nnMFLModEntry=ol51nnMFLModEntry, ol53nnMMGTModMasterPriority=ol53nnMMGTModMasterPriority, ol52nnMFRPortTable=ol52nnMFRPortTable, ol51nnREEPortSlotIndex=ol51nnREEPortSlotIndex, ol51nnMFLModDipNetwork=ol51nnMFLModDipNetwork, ol51nnREEPortDefNetwork=ol51nnREEPortDefNetwork, ol5208MTPTrunkCableMon=ol5208MTPTrunkCableMon, ol51nnMFBModSlotIndex=ol51nnMFBModSlotIndex, ol52nnBTTPortIndex=ol52nnBTTPortIndex, ol51nnMTPLPortSlotIndex=ol51nnMTPLPortSlotIndex, ol53nnMFIBSTPortConfig=ol53nnMFIBSTPortConfig, ol51nnMTPModSlotIndex=ol51nnMTPModSlotIndex, ol51nnMBNCPortDipGround=ol51nnMBNCPortDipGround, ol53nnMFIBSTPortPcmState=ol53nnMFIBSTPortPcmState, ol52nnMFRPortEntry=ol52nnMFRPortEntry, ol5208MTPTrunkIndex=ol5208MTPTrunkIndex, ol51nnRESModSlotIndex=ol51nnRESModSlotIndex, ol52nnMTPModEntry=ol52nnMTPModEntry, ol53nnMFBMICTrunkSlotIndex=ol53nnMFBMICTrunkSlotIndex, ol51nnMAUIMPortDipAdminState=ol51nnMAUIMPortDipAdminState, ol52nnBTTPortSlotIndex=ol52nnBTTPortSlotIndex, ol51nnMAUIFPortDipAdminState=ol51nnMAUIFPortDipAdminState, ol51nnMTSPortIndex=ol51nnMTSPortIndex, ol53nnMFIBSTPortSlotIndex=ol53nnMFIBSTPortSlotIndex, ol53nnMFIBSTTrunkIndex=ol53nnMFIBSTTrunkIndex, ol53nnMMGTModUpStreamModule=ol53nnMMGTModUpStreamModule, ol51nnMUTPPortIndex=ol51nnMUTPPortIndex, ol51nnMFBPPortEntry=ol51nnMFBPPortEntry, ol51nnMUTPPortBuddySlot=ol51nnMUTPPortBuddySlot, ol52nnBTTPortRingSpeed=ol52nnBTTPortRingSpeed, ol51nnMFLPortDipAdminState=ol51nnMFLPortDipAdminState, ol5208MTP=ol5208MTP, ol51nnMTSPortEntry=ol51nnMTSPortEntry, ol51nnMFBPPortSlotIndex=ol51nnMFBPPortSlotIndex, ol51nnMTPPLPortDipNetwork=ol51nnMTPPLPortDipNetwork, ol51nnRESModStationAddr=ol51nnRESModStationAddr, ol52nnMFRModSlotIndex=ol52nnMFRModSlotIndex, emm=emm, ol51nnMFBPPortBuddySlot=ol51nnMFBPPortBuddySlot, ol51nnMTSModSlotIndex=ol51nnMTSModSlotIndex, ol51nnMAUIFPortIndex=ol51nnMAUIFPortIndex, focus1=focus1, ol52nnMTPPortSlotIndex=ol52nnMTPPortSlotIndex, ol53nnMFIBSTPortIndex=ol53nnMFIBSTPortIndex, ol53nnMMGTModDownStreamOperPath=ol53nnMMGTModDownStreamOperPath, ol53nnMFBMICModEntry=ol53nnMFBMICModEntry, ol51nnIxModEntry=ol51nnIxModEntry, ol53nnMFBMICModTable=ol53nnMFBMICModTable, ol51nnRESModTable=ol51nnRESModTable, ol51nnMBNC=ol51nnMBNC, ol51nnMUTPModDipCrossover=ol51nnMUTPModDipCrossover, ol53nnMFIBSTPortTable=ol53nnMFIBSTPortTable, ol52nnMMGTTrunkEntry=ol52nnMMGTTrunkEntry, ol51nnMMGTModSlotIndex=ol51nnMMGTModSlotIndex, ol51nnRESModProtocols=ol51nnRESModProtocols, ol51nnMFLModSlotIndex=ol51nnMFLModSlotIndex, ol53nnMFBMICModSlotIndex=ol53nnMFBMICModSlotIndex, ol51nnMTPPortEntry=ol51nnMTPPortEntry, ol51nnMFBPortBuddyPort=ol51nnMFBPortBuddyPort, ol51nnMUTPPortAdminState=ol51nnMUTPPortAdminState, ol51nnMFBP=ol51nnMFBP, ol53nnMSTPPortSlotIndex=ol53nnMSTPPortSlotIndex, ol52nnBTTModNetworkStatus=ol52nnBTTModNetworkStatus, ol51nnMTPPLPortSquelch=ol51nnMTPPLPortSquelch, ol51nnMFIBPortIndex=ol51nnMFIBPortIndex, ol51nnMFBPortIndex=ol51nnMFBPortIndex, ol51nnMUTPPortBuddyPort=ol51nnMUTPPortBuddyPort, ol51nnMTPPLPortDipJabber=ol51nnMTPPLPortDipJabber, olConc=olConc, ol51nnIxPortDefNetwork=ol51nnIxPortDefNetwork, ol51nnMTPPLPortIndex=ol51nnMTPPLPortIndex, ol53nnMFIBSTPortEntry=ol53nnMFIBSTPortEntry, ol51nnMTPModDipCrossover=ol51nnMTPModDipCrossover, ol51nnMFLPortSlotIndex=ol51nnMFLPortSlotIndex, ol53nnMSTPTrunkIndex=ol53nnMSTPTrunkIndex, ol53nnMSTPModUpStreamOperPath=ol53nnMSTPModUpStreamOperPath, ol51nnIxPortIpAddress=ol51nnIxPortIpAddress, ol53nnMMGTModIpAddress=ol53nnMMGTModIpAddress, olEnv=olEnv, ol52nnMFRTrunkCompMode=ol52nnMFRTrunkCompMode, ol51nnMTSModIpAddress=ol51nnMTSModIpAddress, ol51nnMAUIFPortSlotIndex=ol51nnMAUIFPortSlotIndex, ol50nnMRCTLModSlotIndex=ol50nnMRCTLModSlotIndex, ol51nnMFP=ol51nnMFP, ol51nnMUTPModDipFFL=ol51nnMUTPModDipFFL, ol51nnMTPPortDipLinkInteg=ol51nnMTPPortDipLinkInteg, ol52nnMTPModDipRingSpeed=ol52nnMTPModDipRingSpeed, ol53nnMSTPTrunkTable=ol53nnMSTPTrunkTable, ol51nnMTPCLPortBuddySlot=ol51nnMTPCLPortBuddySlot, hubGroup=hubGroup, ol5208MTPTrunkNetMapState=ol5208MTPTrunkNetMapState, ol52nnMFRPortDipAdminState=ol52nnMFRPortDipAdminState, ol53nnMSTPPortRemoteMACIndicated=ol53nnMSTPPortRemoteMACIndicated, boardGroup=boardGroup, chipmib02=chipmib02, ol51nnMTPCLModAutoPartition=ol51nnMTPCLModAutoPartition, ol51nnMAUIFModSlotIndex=ol51nnMAUIFModSlotIndex, ol51nnMAUIMPortDipNetwork=ol51nnMAUIMPortDipNetwork, ol52nnBTTPortMACAddress=ol52nnBTTPortMACAddress, ol53nnMFBMICModDownStreamOperPath=ol53nnMFBMICModDownStreamOperPath, ol51nnIxModProtocols=ol51nnIxModProtocols, ol50nnMCTLModTempStatus=ol50nnMCTLModTempStatus, ol53nnMMGTPortConnectState=ol53nnMMGTPortConnectState, ol51nnMBNCModSlotIndex=ol51nnMBNCModSlotIndex, ol51nnMTPLPortBuddyPort=ol51nnMTPLPortBuddyPort, chipTFTP=chipTFTP, ol51nnMFLPortIndex=ol51nnMFLPortIndex, ol51nnIxModSlotIndex=ol51nnIxModSlotIndex, ol52nnMMGTTrunkCableMon=ol52nnMMGTTrunkCableMon, olNets=olNets, ol51nnMTPPLModEntry=ol51nnMTPPLModEntry, ol52nnMMGTModSlotIndex=ol52nnMMGTModSlotIndex, ol52nnMMGT=ol52nnMMGT, ol51nnMTPPortAdminState=ol51nnMTPPortAdminState, ol51nnMUTPModCrossover=ol51nnMUTPModCrossover, ol51nnRESPortIpAddress=ol51nnRESPortIpAddress, ol52nnMTP=ol52nnMTP, ol52nnBTTModBridgeType=ol52nnBTTModBridgeType, ol53nnMSTPPortPcmState=ol53nnMSTPPortPcmState, ol51nnMTPLPortLinkInteg=ol51nnMTPLPortLinkInteg, online=online, ol5208MTPPortEntry=ol5208MTPPortEntry, ol5208MTPModSlotIndex=ol5208MTPModSlotIndex, ol5208MTPTrunkEntry=ol5208MTPTrunkEntry, ol51nnMTPPLPortDipLinkInteg=ol51nnMTPPLPortDipLinkInteg, ol51nnMMGTPortIndex=ol51nnMMGTPortIndex, ol53nnMSTPPortIndex=ol53nnMSTPPortIndex, ol51nnMTPCLModMonitorConn=ol51nnMTPCLModMonitorConn, ol52nnBTTModSlotIndex=ol52nnBTTModSlotIndex, ol50nnMHCTLModEntry=ol50nnMHCTLModEntry, ol51nnMTPPLPortSlotIndex=ol51nnMTPPLPortSlotIndex, ol53nnMSTPPortConnectState=ol53nnMSTPPortConnectState, ol50nnMHCTLModTempStatus=ol50nnMHCTLModTempStatus, ol51nnMUTPModFFL=ol51nnMUTPModFFL, ol51nnMTSPortAdminState=ol51nnMTSPortAdminState, ol52nnBTTPortForwarding=ol52nnBTTPortForwarding, ol51nnREEModTable=ol51nnREEModTable, ol5208MTPModTable=ol5208MTPModTable, ol52nnBTTPortSRRingNo=ol52nnBTTPortSRRingNo, ol53nnMFBMICModDownStreamModule=ol53nnMFBMICModDownStreamModule, ol53nnMFIBSTModUpStreamOperPath=ol53nnMFIBSTModUpStreamOperPath, ol50nnMCTLModTable=ol50nnMCTLModTable, ol52nnBTTTrunkEntry=ol52nnBTTTrunkEntry, ol51nnMMGTIpAddress=ol51nnMMGTIpAddress, ol52nnMTPModTable=ol52nnMTPModTable, ol53nnMFIBSTTrunkSlotIndex=ol53nnMFIBSTTrunkSlotIndex, ol53nnMFIBSTPortRemoteMACIndicated=ol53nnMFIBSTPortRemoteMACIndicated, ol53nnMFIBSTModDownStreamOperPath=ol53nnMFIBSTModDownStreamOperPath, ol51nnMTPModCrossover=ol51nnMTPModCrossover, alarmGroup=alarmGroup, ol51nnMTSModProtocols=ol51nnMTSModProtocols, chipGen=chipGen, olThreshControl=olThreshControl, ol51nnMFIBModEntry=ol51nnMFIBModEntry, olEnet=olEnet, ol51nnMUTPModSlotIndex=ol51nnMUTPModSlotIndex, ol53nnMFBMICPortConfig=ol53nnMFBMICPortConfig, ol53nnMMGTModDownStreamModule=ol53nnMMGTModDownStreamModule, ol50nnMRCTLModClockStatus=ol50nnMRCTLModClockStatus, ol51nnIxPortDipAdminState=ol51nnIxPortDipAdminState, ol51nnMFBPModSlotIndex=ol51nnMFBPModSlotIndex, ol51nnMFPPortDipNetwork=ol51nnMFPPortDipNetwork, ol51nnMUTPPortDipAdminState=ol51nnMUTPPortDipAdminState, ol50nnMRCTLModTable=ol50nnMRCTLModTable, ol53nnMFIBSTPortPCWithhold=ol53nnMFIBSTPortPCWithhold, ol52nnMMGTTrunkExtBcnRecovery=ol52nnMMGTTrunkExtBcnRecovery, ol53nnMFBMIC=ol53nnMFBMIC, ol51nnMFLModTable=ol51nnMFLModTable, ol53nnMMGTModSlotIndex=ol53nnMMGTModSlotIndex, ol51nnMTSModStationAddr=ol51nnMTSModStationAddr, ol51nnBEEModProtocols=ol51nnBEEModProtocols, ol51nnMFBPortTable=ol51nnMFBPortTable, ol53nnMFIBSTModRingInfo=ol53nnMFIBSTModRingInfo, ol51nnMAUIMPortCollision=ol51nnMAUIMPortCollision, chipProducts=chipProducts, ol51nnIxPortSlotIndex=ol51nnIxPortSlotIndex, ol51nnMTPPortTable=ol51nnMTPPortTable, ol51nnMTPLPortBuddySlot=ol51nnMTPLPortBuddySlot, ol51nnMTPModDipNetwork=ol51nnMTPModDipNetwork, ol51nnMTPCLPortSlotIndex=ol51nnMTPCLPortSlotIndex, ol53nnMFBMICModUpStreamModule=ol53nnMFBMICModUpStreamModule, ol51nnMFLPortBuddySlot=ol51nnMFLPortBuddySlot, ol51nnMFLPortTable=ol51nnMFLPortTable, ol53nnMMGTModUpStreamOperPath=ol53nnMMGTModUpStreamOperPath, ol51nnMTPLModDipNetwork=ol51nnMTPLModDipNetwork, ol51nnIxModStationAddr=ol51nnIxModStationAddr, ol5208MTPModEntry=ol5208MTPModEntry, ol51nnIxModTable=ol51nnIxModTable, ol53nnMMGTPortTable=ol53nnMMGTPortTable, ol51nnMFPPortDipLLW=ol51nnMFPPortDipLLW, ol53nnMMGTModMasterStatus=ol53nnMMGTModMasterStatus, ol53nnMMGTModDownStreamMAC=ol53nnMMGTModDownStreamMAC, ol51nnREEPortEntry=ol51nnREEPortEntry, ol51nnMFBPPortDipLLW=ol51nnMFBPPortDipLLW, ol51nnMTPCLModTable=ol51nnMTPCLModTable, ol53nnMSTPPortPersonality=ol53nnMSTPPortPersonality, ol52nnMFRTrunkDipCompMode=ol52nnMFRTrunkDipCompMode, ol51nnMFBPModTable=ol51nnMFBPModTable, ol50nnMHCTLModDipCh3ActCol=ol50nnMHCTLModDipCh3ActCol, ol51nnMUTPModDipNetwork=ol51nnMUTPModDipNetwork, ol53nnMFIBSTTrunkTable=ol53nnMFIBSTTrunkTable, ol51nnMTPPLPortBuddyPort=ol51nnMTPPLPortBuddyPort, workGroupHub=workGroupHub, ol51nnREEPortDipNetwork=ol51nnREEPortDipNetwork, ol51nnMFIBPortDipAdminState=ol51nnMFIBPortDipAdminState, ol51nnMTPLPortDipJabber=ol51nnMTPLPortDipJabber, ol52nnMMGTModMasterPriority=ol52nnMMGTModMasterPriority, ol51nnMFBPModEntry=ol51nnMFBPModEntry, ol52nnMMGTModTable=ol52nnMMGTModTable, olModules=olModules, ol51nnMTPPLPortLinkInteg=ol51nnMTPPLPortLinkInteg, ol51nnMTPModEntry=ol51nnMTPModEntry, ol51nnMFBPPortTable=ol51nnMFBPPortTable, ol50nnMHCTLModPDBStatus=ol50nnMHCTLModPDBStatus, ol51nnMFBPortEntry=ol51nnMFBPortEntry, ol53nnMFBMICPortNeighbor=ol53nnMFBMICPortNeighbor, ol51nnMFPModSlotIndex=ol51nnMFPModSlotIndex, ol51nnMAUIMModSlotIndex=ol51nnMAUIMModSlotIndex, ol51nnMFPPortSlotIndex=ol51nnMFPPortSlotIndex, ol51nnMTPPortSquelch=ol51nnMTPPortSquelch, ol51nnMTPPortSlotIndex=ol51nnMTPPortSlotIndex, ol51nnMFIBPortEntry=ol51nnMFIBPortEntry, ol52nnMMGTPortIpAddress=ol52nnMMGTPortIpAddress, ol51nnMFIBPortSlotIndex=ol51nnMFIBPortSlotIndex, chipDownload=chipDownload)
mibBuilder.exportSymbols("CHIPMODULE-MIB", ol51nnMMGT=ol51nnMMGT, ol51nnMAUIMPortAdminState=ol51nnMAUIMPortAdminState, ol53nnMFBMICPortLerCondition=ol53nnMFBMICPortLerCondition, ol51nnMFIBPortBuddyPort=ol51nnMFIBPortBuddyPort, ol5208MTPTrunkSlotIndex=ol5208MTPTrunkSlotIndex, ol51nnMFBModEntry=ol51nnMFBModEntry, ol53nnMMGTModRingInfo=ol53nnMMGTModRingInfo, ol51nnMFIBModDipLLW=ol51nnMFIBModDipLLW, ol51nnMTSPortSlotIndex=ol51nnMTSPortSlotIndex, ol51nnMFBPortSlotIndex=ol51nnMFBPortSlotIndex, ol51nnBEEModEntry=ol51nnBEEModEntry, ol51nnMTPLPortAdminState=ol51nnMTPLPortAdminState, ol53nnMMGTPortRemoteMACIndicated=ol53nnMMGTPortRemoteMACIndicated, ol51nnMFPModEntry=ol51nnMFPModEntry, chipTTY=chipTTY, portGroup=portGroup, ol51nnMAUIFPortAdminState=ol51nnMAUIFPortAdminState, ol51nnMAUIFPortDipNetwork=ol51nnMAUIFPortDipNetwork, ol53nnMMGTPortEntry=ol53nnMMGTPortEntry, ol51nnIxPortTable=ol51nnIxPortTable, ol51nnMTPLPortTable=ol51nnMTPLPortTable, ol52nnBTT=ol52nnBTT, ol51nnMTPLPortEntry=ol51nnMTPLPortEntry, ol52nnBTTTrunkTable=ol52nnBTTTrunkTable, ol51nnMBNCPortTable=ol51nnMBNCPortTable, ol50nnMCTLModSlotIndex=ol50nnMCTLModSlotIndex, ol5208MTPPortSlotIndex=ol5208MTPPortSlotIndex, ol50nnMHCTLModTable=ol50nnMHCTLModTable, ol51nnMTPModTable=ol51nnMTPModTable, ol51nnMMGTPortSlotIndex=ol51nnMMGTPortSlotIndex, ol52nnMFRTrunkExtBcnRecovery=ol52nnMFRTrunkExtBcnRecovery, ol51nnMFBModDipLLW=ol51nnMFBModDipLLW, ol53nnMSTPPortBSFlag=ol53nnMSTPPortBSFlag, ol53nnMMGTPortNeighbor=ol53nnMMGTPortNeighbor, ol53nnMFBMICPortPCWithhold=ol53nnMFBMICPortPCWithhold, ol52nnMFRModTable=ol52nnMFRModTable, ol52nnBTTPortIpAddress=ol52nnBTTPortIpAddress, ol52nnMMGTTrunkIndex=ol52nnMMGTTrunkIndex, ol53nnMFIBSTModEntry=ol53nnMFIBSTModEntry, ol53nnMSTPPortConfig=ol53nnMSTPPortConfig, ol51nnMBNCPortSlotIndex=ol51nnMBNCPortSlotIndex, ol51nnMTS=ol51nnMTS, ol51nnRESPortDipNetwork=ol51nnRESPortDipNetwork, ol51nnMTPLPortJabber=ol51nnMTPLPortJabber, ol51nnMTPCLModConn1DipNetwork=ol51nnMTPCLModConn1DipNetwork, ol51nnMAUIMPortDipHalfStep=ol51nnMAUIMPortDipHalfStep, ol53nnMFIBSTModUpStreamModule=ol53nnMFIBSTModUpStreamModule, ol50nnMRCTLModEntry=ol50nnMRCTLModEntry, ol51nnMFPPortEntry=ol51nnMFPPortEntry, ol51nnBEEModSlotIndex=ol51nnBEEModSlotIndex, olAgents=olAgents, ol51nnMAUIMModTable=ol51nnMAUIMModTable, ol53nnMMGTPortPCWithhold=ol53nnMMGTPortPCWithhold, ol53nnMFBMICPortRemoteMACIndicated=ol53nnMFBMICPortRemoteMACIndicated, ol53nnMSTPPortNeighbor=ol53nnMSTPPortNeighbor, ol52nnMMGTModStationAddr=ol52nnMMGTModStationAddr, ol51nnMFIBModTable=ol51nnMFIBModTable, ol52nnBTTModSoftwareVersion=ol52nnBTTModSoftwareVersion, ol53nnMFIBSTTrunkEntry=ol53nnMFIBSTTrunkEntry, ol52nnMMGTTrunkTable=ol52nnMMGTTrunkTable, olSpecMods=olSpecMods, ol51nnMAUIMPortTable=ol51nnMAUIMPortTable, ol52nnMMGTTrunkSlotIndex=ol52nnMMGTTrunkSlotIndex, ol51nnMTPCLPortLinkInteg=ol51nnMTPCLPortLinkInteg, olTRnet=olTRnet, ol52nnMFRTrunkTable=ol52nnMFRTrunkTable, ol53nnMSTPModDownStreamModule=ol53nnMSTPModDownStreamModule, ol5208MTPPortDipAdminState=ol5208MTPPortDipAdminState, ol51nnMAUIMPortBuddyPort=ol51nnMAUIMPortBuddyPort, ol51nnMAUIMPortHalfStep=ol51nnMAUIMPortHalfStep, ol51nnIxModDipPromDefaults=ol51nnIxModDipPromDefaults, ol50nnMHCTLModDipCh1ActCol=ol50nnMHCTLModDipCh1ActCol, ol53nnMSTPModEntry=ol53nnMSTPModEntry, chipBridge=chipBridge, ol51nnMTPPLPortEntry=ol51nnMTPPLPortEntry, ol53nnMFBMICPortTable=ol53nnMFBMICPortTable, ol51nnMTPPLPortTable=ol51nnMTPPLPortTable, ol50nnMHCTLModOperState=ol50nnMHCTLModOperState, ol52nnMTPModRingSpeed=ol52nnMTPModRingSpeed, dot1dBridge=dot1dBridge, ol5208MTPTrunkDipAdminState=ol5208MTPTrunkDipAdminState, ol51nnMTPPLModSlotIndex=ol51nnMTPPLModSlotIndex, olNet=olNet, ol53nnMFBMICModUpStreamOperPath=ol53nnMFBMICModUpStreamOperPath, ol51nnMFBPPortDipHipwr=ol51nnMFBPPortDipHipwr, ol52nnMTPTrunkEntry=ol52nnMTPTrunkEntry, ol51nnMUTPModTable=ol51nnMUTPModTable, ol51nnMAUIMPortDipCollision=ol51nnMAUIMPortDipCollision, ol52nnMTPPortDipAdminState=ol52nnMTPPortDipAdminState, ol53nnMFBMICTrunkTable=ol53nnMFBMICTrunkTable, ol51nnMFBModDipNetwork=ol51nnMFBModDipNetwork, ol53nnMFBMICPortPcmState=ol53nnMFBMICPortPcmState, ol51nnBEEPortDefNetwork=ol51nnBEEPortDefNetwork, ol53nnMFBMICTrunkEntry=ol53nnMFBMICTrunkEntry, ol52nnMMGTPortTable=ol52nnMMGTPortTable, ol51nnMTPLPortDipLinkInteg=ol51nnMTPLPortDipLinkInteg, ol51nnBEEModTable=ol51nnBEEModTable, ol51nnMFBPPortHipwr=ol51nnMFBPPortHipwr, ol51nnMTSModEntry=ol51nnMTSModEntry, ol53nnMFBMICPortBSFlag=ol53nnMFBMICPortBSFlag, ol53nnMMGTPortSlotIndex=ol53nnMMGTPortSlotIndex, ol52nnMFRPortSlotIndex=ol52nnMFRPortSlotIndex, ol53nnMMGTModUpStreamMAC=ol53nnMMGTModUpStreamMAC, ol51nnMFBPortBuddySlot=ol51nnMFBPortBuddySlot, ol52nnMFRModRingSpeed=ol52nnMFRModRingSpeed, ol51nnMAUIF=ol51nnMAUIF, ol53nnMMGTPortPcmState=ol53nnMMGTPortPcmState, ol51nnRES=ol51nnRES, ol51nnMAUIMPortBuddySlot=ol51nnMAUIMPortBuddySlot, ol51nnMFIB=ol51nnMFIB, ol51nnMTPCLPortBuddyPort=ol51nnMTPCLPortBuddyPort, ol52nnMFRTrunkIndex=ol52nnMFRTrunkIndex, dot5=dot5, ol51nnMFPPortBuddyPort=ol51nnMFPPortBuddyPort, ol51nnMTPLModSlotIndex=ol51nnMTPLModSlotIndex, ol51nnMFB=ol51nnMFB, ol51nnMUTPPortLinkInteg=ol51nnMUTPPortLinkInteg, ol53nnMMGTModfddiMACPath=ol53nnMMGTModfddiMACPath, ol51nnMFBPortAdminState=ol51nnMFBPortAdminState, ol51nnMAUIM=ol51nnMAUIM, ol51nnMFIBPortTable=ol51nnMFIBPortTable, ol51nnMTSModDipNetwork=ol51nnMTSModDipNetwork, ol51nnMTSModCPURev=ol51nnMTSModCPURev, ol52nnMFRModEntry=ol52nnMFRModEntry, ol50nnMHCTLModClockStatus=ol50nnMHCTLModClockStatus, ol51nnMFBPPortAdminState=ol51nnMFBPPortAdminState, ol53nnMFIBSTModDownStreamModule=ol53nnMFIBSTModDownStreamModule, ol51nnMTPCLPortDipLinkInteg=ol51nnMTPCLPortDipLinkInteg, ol51nnMFPPortIndex=ol51nnMFPPortIndex, ol51nnMFIBModSlotIndex=ol51nnMFIBModSlotIndex, ol51nnREEPortIpAddress=ol51nnREEPortIpAddress, ol52nnMTPTrunkSlotIndex=ol52nnMTPTrunkSlotIndex, ol52nnMFRPortStationType=ol52nnMFRPortStationType, ol53nnMFIBST=ol53nnMFIBST, ol51nnMTPPortBuddySlot=ol51nnMTPPortBuddySlot, ol53nnMFIBSTPortConnectState=ol53nnMFIBSTPortConnectState, ol52nnMMGTPortSlotIndex=ol52nnMMGTPortSlotIndex, ol52nnMTPModDipCableImp=ol52nnMTPModDipCableImp, ol52nnBTTTrunkIndex=ol52nnBTTTrunkIndex, ol51nnBEEPortIpAddress=ol51nnBEEPortIpAddress, ol52nnMFRTrunkDipAdminState=ol52nnMFRTrunkDipAdminState, chipEcho=chipEcho, ol51nnMAUIMModEntry=ol51nnMAUIMModEntry, ol52nnMFR=ol52nnMFR, ol53nnMMGTModTable=ol53nnMMGTModTable, ol51nnBEEPortSlotIndex=ol51nnBEEPortSlotIndex, ol51nnMFBModLLW=ol51nnMFBModLLW, ol51nnMAUIMPortIndex=ol51nnMAUIMPortIndex, ol51nnIxPortEntry=ol51nnIxPortEntry, ol51nnMTPPortDipAdminState=ol51nnMTPPortDipAdminState, midnight=midnight, ol51nnREEPortIndex=ol51nnREEPortIndex, ol53nnMSTPModRingInfo=ol53nnMSTPModRingInfo, ol53nnMMGTTrunkIndex=ol53nnMMGTTrunkIndex, ol51nnMTPPortLinkInteg=ol51nnMTPPortLinkInteg, ol50nnMHCTLModSlotIndex=ol50nnMHCTLModSlotIndex, ol52nnMTPPortEntry=ol52nnMTPPortEntry, ol53nnMSTPModTable=ol53nnMSTPModTable, ol51nnMFBPPortDipAdminState=ol51nnMFBPPortDipAdminState, ol52nnMTPPortTable=ol52nnMTPPortTable, ol52nnMTPTrunkIndex=ol52nnMTPTrunkIndex, ol5208MTPTrunkTable=ol5208MTPTrunkTable, ol51nnMAUIFPortTable=ol51nnMAUIFPortTable, ol51nnMTPPLPortDipAdminState=ol51nnMTPPLPortDipAdminState, ol51nnMTPCLModSlotIndex=ol51nnMTPCLModSlotIndex, ol53nnMFIBSTModSlotIndex=ol53nnMFIBSTModSlotIndex, chipExperiment=chipExperiment, ol51nnMTPCLPortTable=ol51nnMTPCLPortTable, ol51nnIx=ol51nnIx, ol51nnMUTPPortDipLinkInteg=ol51nnMUTPPortDipLinkInteg, ol53nnMFBMICPortSlotIndex=ol53nnMFBMICPortSlotIndex, ol51nnMTSModTCPPort=ol51nnMTSModTCPPort, ol51nnMTSPortOperState=ol51nnMTSPortOperState, ol51nnMMGTPortTable=ol51nnMMGTPortTable, ol53nnMSTPPortTable=ol53nnMSTPPortTable, olAlarm=olAlarm, ol53nnMSTPModSlotIndex=ol53nnMSTPModSlotIndex, ol51nnMFBPPortBuddyPort=ol51nnMFBPPortBuddyPort, ol51nnMTPCLPortIndex=ol51nnMTPCLPortIndex, ol51nnMUTPPortSquelch=ol51nnMUTPPortSquelch, ol52nnMMGTModRingSpeed=ol52nnMMGTModRingSpeed, ol51nnRESPortSlotIndex=ol51nnRESPortSlotIndex, ol53nnMSTPModDownStreamOperPath=ol53nnMSTPModDownStreamOperPath, ol51nnMFPPortDipAdminState=ol51nnMFPPortDipAdminState, ol51nnMUTPPortSlotIndex=ol51nnMUTPPortSlotIndex, ol51nnMFIBPortAdminState=ol51nnMFIBPortAdminState, ol51nnREEModProtocols=ol51nnREEModProtocols, fmm=fmm, ol51nnMFPPortDipHipwr=ol51nnMFPPortDipHipwr, hubSysGroup=hubSysGroup, ol51nnMFLPortBuddyPort=ol51nnMFLPortBuddyPort, ol51nnMMGTModMasterPriority=ol51nnMMGTModMasterPriority, ol5208MTPTrunkDipCableMon=ol5208MTPTrunkDipCableMon, ol51nnMFBPortDipAdminState=ol51nnMFBPortDipAdminState, ol52nnMFRPortCableImp=ol52nnMFRPortCableImp, olFDDInet=olFDDInet, ol53nnMFBMICTrunkIndex=ol53nnMFBMICTrunkIndex, ol53nnMMGT=ol53nnMMGT, ol51nnMFIBModLLW=ol51nnMFIBModLLW, ol51nnREEModSlotIndex=ol51nnREEModSlotIndex, ol51nnMTPPortDipSquelch=ol51nnMTPPortDipSquelch, ol51nnMAUIMPortDipSQETest=ol51nnMAUIMPortDipSQETest, ol53nnMFBMICPortEntry=ol53nnMFBMICPortEntry, chipcom=chipcom, ol52nnMFRModDipRingSpeed=ol52nnMFRModDipRingSpeed, oebm=oebm, ol51nnMAUIMPortSlotIndex=ol51nnMAUIMPortSlotIndex, ol51nnRESPortDefNetwork=ol51nnRESPortDefNetwork, ol51nnMFPPortAdminState=ol51nnMFPPortAdminState, ol51nnMTPCLModEntry=ol51nnMTPCLModEntry, ol51nnMAUIFModEntry=ol51nnMAUIFModEntry, ol51nnMFPPortHipwr=ol51nnMFPPortHipwr, ol51nnMMGTModTable=ol51nnMMGTModTable, ol51nnMAUIFPortBuddyPort=ol51nnMAUIFPortBuddyPort, ol53nnMSTPPortPCWithhold=ol53nnMSTPPortPCWithhold, ol52nnBTTTrunkSlotIndex=ol52nnBTTTrunkSlotIndex, ol51nnMFIBPortBuddySlot=ol51nnMFIBPortBuddySlot, ol5208MTPPortIndex=ol5208MTPPortIndex, ol52nnBTTModTable=ol52nnBTTModTable, ol51nnMAUIFPortEntry=ol51nnMAUIFPortEntry, ol52nnBTTModEntry=ol52nnBTTModEntry, ol51nnMTSModTable=ol51nnMTSModTable, ol51nnMFPPortLLW=ol51nnMFPPortLLW, ol50nnMCTLModEntry=ol50nnMCTLModEntry, ol53nnMMGTTrunkEntry=ol53nnMMGTTrunkEntry, ol51nnMMGTPortEntry=ol51nnMMGTPortEntry, ol51nnMTPPL=ol51nnMTPPL, ol51nnMTPCLPortDipAdminState=ol51nnMTPCLPortDipAdminState, ol52nnMTPPortStationType=ol52nnMTPPortStationType, ol51nnMTPCLModConn2DipNetwork=ol51nnMTPCLModConn2DipNetwork, ol5208MTPPortTable=ol5208MTPPortTable, ol50nnMRCTLModOperState=ol50nnMRCTLModOperState, ol51nnMTPPortBuddyPort=ol51nnMTPPortBuddyPort, ol51nnMBNCPortDipAdminState=ol51nnMBNCPortDipAdminState, ol51nnMFBPPortIndex=ol51nnMFBPPortIndex, ol51nnMTPLModTable=ol51nnMTPLModTable, ol52nnBTTPortTable=ol52nnBTTPortTable, ol51nnMBNCModEntry=ol51nnMBNCModEntry, ol51nnMFBPPortDipNetwork=ol51nnMFBPPortDipNetwork, ol52nnMTPTrunkDipAdminState=ol52nnMTPTrunkDipAdminState, ol52nnMMGTModEntry=ol52nnMMGTModEntry, ol5208MTPModBypsAdminState=ol5208MTPModBypsAdminState, ol52nnMFRTrunkNetMapState=ol52nnMFRTrunkNetMapState, ol51nnMFLPortEntry=ol51nnMFLPortEntry, ol51nnMTP=ol51nnMTP, ol51nnMFPPortTable=ol51nnMFPPortTable, ol52nnMFRTrunkEntry=ol52nnMFRTrunkEntry, ol51nnMFPPortBuddySlot=ol51nnMFPPortBuddySlot, ol52nnMMGTModMasterStatus=ol52nnMMGTModMasterStatus, ol53nnMSTPPortEntry=ol53nnMSTPPortEntry, ol51nnBEEPortEntry=ol51nnBEEPortEntry, ol51nnMTPPLPortBuddySlot=ol51nnMTPPLPortBuddySlot, ol51nnRESPortEntry=ol51nnRESPortEntry, ol51nnMTPPLPortJabber=ol51nnMTPPLPortJabber)
mibBuilder.exportSymbols("CHIPMODULE-MIB", ol53nnMSTPTrunkEntry=ol53nnMSTPTrunkEntry, ol53nnMFBMICPortIndex=ol53nnMFBMICPortIndex, ol53nnMMGTPortLerCondition=ol53nnMMGTPortLerCondition, ol52nnMTPModCableImp=ol52nnMTPModCableImp, ol50nnMRCTLModTempStatus=ol50nnMRCTLModTempStatus, ol53nnMMGTPortIndex=ol53nnMMGTPortIndex, ol50nnMHCTL=ol50nnMHCTL, ol51nnREEModStationAddr=ol51nnREEModStationAddr, ol50nnMCTL=ol50nnMCTL, ol52nnMMGTModNetworkStatus=ol52nnMMGTModNetworkStatus, ol51nnMTPCLModConn2Network=ol51nnMTPCLModConn2Network, ol53nnMFIBSTPortLerCondition=ol53nnMFIBSTPortLerCondition, ol5208MTPPortStationType=ol5208MTPPortStationType, ol51nnRESModEntry=ol51nnRESModEntry, ol53nnMSTPPortLerCondition=ol53nnMSTPPortLerCondition, ol52nnMTPPortIndex=ol52nnMTPPortIndex, ol51nnMTPPortIndex=ol51nnMTPPortIndex, ol51nnMTPLModEntry=ol51nnMTPLModEntry, ol51nnMAUIFModTable=ol51nnMAUIFModTable, ol53nnMFIBSTModTable=ol53nnMFIBSTModTable, ol50nnMHCTLModDipCh2ActCol=ol50nnMHCTLModDipCh2ActCol, ol51nnMBNCPortEntry=ol51nnMBNCPortEntry, ol51nnMUTPPortTable=ol51nnMUTPPortTable, ol51nnMFPModTable=ol51nnMFPModTable, ol53nnMMGTTrunkTable=ol53nnMMGTTrunkTable, chipExpTokenRing=chipExpTokenRing, ol52nnBTTPortConnector=ol52nnBTTPortConnector, oeim=oeim, ol52nnBTTModSRBridgeNo=ol52nnBTTModSRBridgeNo, ol53nnMMGTPortConfig=ol53nnMMGTPortConfig, ol51nnRESPortTable=ol51nnRESPortTable, ol51nnIxPortIndex=ol51nnIxPortIndex, ol5208MTPModDipCableImp=ol5208MTPModDipCableImp, ol52nnMFRPortIndex=ol52nnMFRPortIndex, ol51nnMTPLPortDipAdminState=ol51nnMTPLPortDipAdminState, ol51nnBEEModStationAddr=ol51nnBEEModStationAddr, trmm=trmm, ol51nnMTPPLPortAdminState=ol51nnMTPPLPortAdminState, ol53nnMMGTModStationAddr=ol53nnMMGTModStationAddr, ol53nnMFBMICPortConnectState=ol53nnMFBMICPortConnectState, ol5208MTPTrunkExtBcnRecovery=ol5208MTPTrunkExtBcnRecovery, ol53nnMFBMICModRingInfo=ol53nnMFBMICModRingInfo, ol51nnBEEPortDipNetwork=ol51nnBEEPortDipNetwork, ol51nnMTSPortTable=ol51nnMTSPortTable, ol51nnMBNCModTable=ol51nnMBNCModTable, ol5208MTPModBypsOperState=ol5208MTPModBypsOperState, softwareGroup=softwareGroup, ol52nnMMGTPortEntry=ol52nnMMGTPortEntry, ol52nnMMGTTrunkNetMapState=ol52nnMMGTTrunkNetMapState, ol53nnMSTPTrunkSlotIndex=ol53nnMSTPTrunkSlotIndex, ol51nnMAUIMPortEntry=ol51nnMAUIMPortEntry, ol51nnMTPCL=ol51nnMTPCL, ol53nnMMGTTrunkSlotIndex=ol53nnMMGTTrunkSlotIndex, ol51nnMBNCModDipNetwork=ol51nnMBNCModDipNetwork, ol50nnMRCTL=ol50nnMRCTL, ol52nnMFRTrunkDipCableMon=ol52nnMFRTrunkDipCableMon, ol53nnMMGTPortBSFlag=ol53nnMMGTPortBSFlag, ol51nnMFBPPortLLW=ol51nnMFBPPortLLW, ol53nnMSTPModUpStreamModule=ol53nnMSTPModUpStreamModule, ol52nnMFRTrunkCableMon=ol52nnMFRTrunkCableMon, ol51nnMTPCLPortEntry=ol51nnMTPCLPortEntry, ol51nnBEE=ol51nnBEE, ol52nnMFRTrunkSlotIndex=ol52nnMFRTrunkSlotIndex, ol51nnMMGTModMasterStatus=ol51nnMMGTModMasterStatus, ol51nnMUTP=ol51nnMUTP, ol53nnMFIBSTPortNeighbor=ol53nnMFIBSTPortNeighbor, ol51nnMTPL=ol51nnMTPL, olThresh=olThresh, ol52nnMTPModSlotIndex=ol52nnMTPModSlotIndex, ol51nnBEEPortIndex=ol51nnBEEPortIndex, ol52nnMTPTrunkTable=ol52nnMTPTrunkTable, ol53nnMFIBSTPortBSFlag=ol53nnMFIBSTPortBSFlag, ol51nnMTPPLModTable=ol51nnMTPPLModTable, ol53nnMSTP=ol53nnMSTP, ol51nnMUTPPortEntry=ol51nnMUTPPortEntry, ol51nnRESPortIndex=ol51nnRESPortIndex, olGroups=olGroups)
