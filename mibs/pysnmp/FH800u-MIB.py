#
# PySNMP MIB module FH800u-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FH800u-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:59:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, ModuleIdentity, TimeTicks, Unsigned32, IpAddress, MibIdentifier, Counter64, Integer32, Gauge32, NotificationType, NotificationType, ObjectIdentity, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "ModuleIdentity", "TimeTicks", "Unsigned32", "IpAddress", "MibIdentifier", "Counter64", "Integer32", "Gauge32", "NotificationType", "NotificationType", "ObjectIdentity", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
alliedTelesyn = MibIdentifier((1, 3, 6, 1, 4, 1, 207))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1))
dualHub = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 10))
fh812u = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 10, 1))
fh824u = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 1, 10, 2))
mibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8))
repeaterMib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1))
newRepeaterMib = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20))
acctonHubMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3))
atactDualHubMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11))
fh800uMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1))
fh800uBasicCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1))
fh800uPerfMonCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 2))
fh800uSwitchCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3))
fh800uSecurityCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 5))
fh800uStackInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1))
stackInusedIP = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackInusedIP.setStatus('mandatory')
stackInusedNetMask = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackInusedNetMask.setStatus('mandatory')
stackInusedGateway = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackInusedGateway.setStatus('mandatory')
stackInusedServerSlipAddr = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackInusedServerSlipAddr.setStatus('mandatory')
stackInusedHostSlipAddr = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackInusedHostSlipAddr.setStatus('mandatory')
stackInusedBootUpIP = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackInusedBootUpIP.setStatus('mandatory')
stackTemporalIP = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackTemporalIP.setStatus('mandatory')
stackTemporalNetMask = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackTemporalNetMask.setStatus('mandatory')
stackTemporalGateway = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackTemporalGateway.setStatus('mandatory')
stackTemporalServerSlipAddr = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackTemporalServerSlipAddr.setStatus('mandatory')
stackTemporalHostSlipAddr = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackTemporalHostSlipAddr.setStatus('mandatory')
stackTemporalBootUpIP = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackTemporalBootUpIP.setStatus('mandatory')
ipInformationReset = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInformationReset.setStatus('mandatory')
stackHealthMonitor = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackHealthMonitor.setStatus('mandatory')
fh800uGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2))
groupTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1), )
if mibBuilder.loadTexts: groupTable.setStatus('mandatory')
groupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1), ).setIndexNames((0, "FH800u-MIB", "groupID"))
if mibBuilder.loadTexts: groupEntry.setStatus('mandatory')
groupID = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupID.setStatus('mandatory')
groupType = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fh824u", 1), ("fh812u", 2), ("eh3024a", 3), ("eh3012a", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupType.setStatus('mandatory')
groupCounterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupCounterReset.setStatus('mandatory')
groupPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupPosition.setStatus('mandatory')
groupRptrHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRptrHwVer.setStatus('mandatory')
groupRptrSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupRptrSerialNo.setStatus('mandatory')
groupSysMajorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupSysMajorVer.setStatus('mandatory')
groupSysMinorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupSysMinorVer.setStatus('mandatory')
groupPostCodeMajorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupPostCodeMajorVer.setStatus('mandatory')
groupPostCodeMinorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupPostCodeMinorVer.setStatus('mandatory')
groupAgentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-present", 1), ("primary", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupAgentStatus.setStatus('mandatory')
groupAgentHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupAgentHwVer.setStatus('mandatory')
groupAgentSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 13), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupAgentSerialNo.setStatus('mandatory')
groupAgentPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 14), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupAgentPhysAddr.setStatus('mandatory')
groupAgentBootupOption = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("tftp-download", 2), ("bootp-get-ip", 3), ("bootp-download", 4), ("bootp-upgrade", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupAgentBootupOption.setStatus('mandatory')
groupAgentBaudrate = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("baud-9600", 1), ("baud-14400", 2), ("baud-19200", 3), ("baud-38400", 4), ("baud-57600", 5), ("baud-115200", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupAgentBaudrate.setStatus('mandatory')
fh800uPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 3))
portTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 3, 1), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 3, 1, 1), ).setIndexNames((0, "FH800u-MIB", "portGroupID"), (0, "FH800u-MIB", "portID"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
portGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portGroupID.setStatus('mandatory')
portID = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portID.setStatus('mandatory')
portSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tenMb", 1), ("onehundredMbClassI", 2), ("onehundredMbClassII", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeed.setStatus('mandatory')
portSpeedConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tenMb", 1), ("onehundredMbClassI", 2), ("onehundredMbClassII", 3), ("autoDetected", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedConfig.setStatus('mandatory')
portSegmtID = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSegmtID.setStatus('mandatory')
fh800uSegmentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 4))
fh800uRmonConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 5))
nicAttachSegment = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nicAttachSegment.setStatus('mandatory')
fullRmonSegment = MibScalar((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fullRmonSegment.setStatus('mandatory')
rmonConfigTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 5, 3), )
if mibBuilder.loadTexts: rmonConfigTable.setStatus('mandatory')
rmonConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 5, 3, 1), ).setIndexNames((0, "FH800u-MIB", "rmonConfigSegmtID"))
if mibBuilder.loadTexts: rmonConfigEntry.setStatus('mandatory')
rmonConfigSegmtID = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonConfigSegmtID.setStatus('mandatory')
rmonConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonConfigStatus.setStatus('mandatory')
fh800uPerfMonSegmentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 2, 3))
perfMonSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 2, 3, 1), )
if mibBuilder.loadTexts: perfMonSegmentTable.setStatus('optional')
perfMonSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 2, 3, 1, 1), ).setIndexNames((0, "FH800u-MIB", "segmentPerfID"))
if mibBuilder.loadTexts: perfMonSegmentEntry.setStatus('mandatory')
segmentPerfID = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: segmentPerfID.setStatus('mandatory')
segmentCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segmentCRCErrors.setStatus('mandatory')
segmentAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segmentAlignmentErrors.setStatus('mandatory')
segmentCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segmentCollisions.setStatus('mandatory')
segmentTotalPortIsolates = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segmentTotalPortIsolates.setStatus('mandatory')
segmentSymbolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segmentSymbolErrors.setStatus('mandatory')
fh800uSwitchStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1))
switchPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1), )
if mibBuilder.loadTexts: switchPortStatsTable.setStatus('mandatory')
switchPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1), ).setIndexNames((0, "FH800u-MIB", "switchPortStatsGroupID"), (0, "FH800u-MIB", "switchPortStatsID"))
if mibBuilder.loadTexts: switchPortStatsEntry.setStatus('mandatory')
switchPortStatsGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortStatsGroupID.setStatus('mandatory')
switchPortStatsID = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortStatsID.setStatus('mandatory')
switchPortReadableFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortReadableFrames.setStatus('mandatory')
switchPortReadableOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortReadableOctets.setStatus('mandatory')
switchPortFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortFCSErrors.setStatus('mandatory')
switchPortAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortAlignmentErrors.setStatus('mandatory')
switchPortFramesTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortFramesTooLong.setStatus('mandatory')
switchPortShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortShortEvents.setStatus('mandatory')
switchPortRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortRunts.setStatus('mandatory')
switchPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortCollisions.setStatus('mandatory')
switchPortLateEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortLateEvents.setStatus('mandatory')
switchPortVeryLongEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortVeryLongEvents.setStatus('mandatory')
switchPortDataRateMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortDataRateMismatches.setStatus('mandatory')
switchPortBroadcastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortBroadcastPackets.setStatus('mandatory')
switchPortMulticastPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 3, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchPortMulticastPackets.setStatus('mandatory')
fh800uSecurityInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 5, 3))
securityPortTable = MibTable((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 5, 3, 3), )
if mibBuilder.loadTexts: securityPortTable.setStatus('mandatory')
securityPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 5, 3, 3, 1), ).setIndexNames((0, "FH800u-MIB", "securityPortGroupID"), (0, "FH800u-MIB", "securityPortID"))
if mibBuilder.loadTexts: securityPortEntry.setStatus('mandatory')
securityPortGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityPortGroupID.setStatus('mandatory')
securityPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 5, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityPortID.setStatus('mandatory')
securityPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 5, 3, 3, 1, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityPortAddr.setStatus('mandatory')
securityAutoLearnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 5, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("learned", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityAutoLearnAction.setStatus('mandatory')
securityPortIntrusion = MibTableColumn((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11, 1, 5, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("warning-and-disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityPortIntrusion.setStatus('mandatory')
fh800uIntrusionHappen = NotificationType((1, 3, 6, 1, 4, 1, 207, 8, 1, 20, 3, 11) + (0,1)).setObjects(("FH800u-MIB", "securityPortIntrusion"), ("FH800u-MIB", "securityPortGroupID"), ("FH800u-MIB", "securityPortID"))
mibBuilder.exportSymbols("FH800u-MIB", groupAgentPhysAddr=groupAgentPhysAddr, portID=portID, switchPortFramesTooLong=switchPortFramesTooLong, groupPostCodeMinorVer=groupPostCodeMinorVer, switchPortStatsEntry=switchPortStatsEntry, groupAgentSerialNo=groupAgentSerialNo, switchPortVeryLongEvents=switchPortVeryLongEvents, groupID=groupID, fh800uMgt=fh800uMgt, switchPortAlignmentErrors=switchPortAlignmentErrors, fullRmonSegment=fullRmonSegment, groupCounterReset=groupCounterReset, switchPortStatsID=switchPortStatsID, switchPortShortEvents=switchPortShortEvents, fh800uPerfMonSegmentInfo=fh800uPerfMonSegmentInfo, groupAgentBaudrate=groupAgentBaudrate, stackTemporalIP=stackTemporalIP, switchPortStatsTable=switchPortStatsTable, stackInusedBootUpIP=stackInusedBootUpIP, groupAgentHwVer=groupAgentHwVer, switchPortRunts=switchPortRunts, switchPortStatsGroupID=switchPortStatsGroupID, fh812u=fh812u, segmentCRCErrors=segmentCRCErrors, switchPortLateEvents=switchPortLateEvents, perfMonSegmentEntry=perfMonSegmentEntry, groupEntry=groupEntry, securityAutoLearnAction=securityAutoLearnAction, switchPortReadableOctets=switchPortReadableOctets, fh800uRmonConfig=fh800uRmonConfig, fh800uSecurityInfo=fh800uSecurityInfo, groupSysMinorVer=groupSysMinorVer, fh800uSegmentInfo=fh800uSegmentInfo, stackTemporalHostSlipAddr=stackTemporalHostSlipAddr, groupAgentBootupOption=groupAgentBootupOption, stackInusedIP=stackInusedIP, stackTemporalServerSlipAddr=stackTemporalServerSlipAddr, switchPortReadableFrames=switchPortReadableFrames, stackTemporalGateway=stackTemporalGateway, rmonConfigStatus=rmonConfigStatus, acctonHubMIB=acctonHubMIB, stackTemporalBootUpIP=stackTemporalBootUpIP, fh800uSwitchStatsInfo=fh800uSwitchStatsInfo, fh800uSecurityCapability=fh800uSecurityCapability, portEntry=portEntry, portSpeedConfig=portSpeedConfig, nicAttachSegment=nicAttachSegment, stackInusedServerSlipAddr=stackInusedServerSlipAddr, groupRptrSerialNo=groupRptrSerialNo, fh800uGroupInfo=fh800uGroupInfo, products=products, fh800uBasicCapability=fh800uBasicCapability, groupType=groupType, stackTemporalNetMask=stackTemporalNetMask, rmonConfigSegmtID=rmonConfigSegmtID, fh800uPerfMonCapability=fh800uPerfMonCapability, switchPortCollisions=switchPortCollisions, fh800uStackInfo=fh800uStackInfo, portTable=portTable, securityPortEntry=securityPortEntry, switchPortMulticastPackets=switchPortMulticastPackets, dualHub=dualHub, portSegmtID=portSegmtID, stackInusedHostSlipAddr=stackInusedHostSlipAddr, segmentSymbolErrors=segmentSymbolErrors, fh800uSwitchCapability=fh800uSwitchCapability, securityPortID=securityPortID, stackInusedGateway=stackInusedGateway, mibObject=mibObject, segmentTotalPortIsolates=segmentTotalPortIsolates, securityPortIntrusion=securityPortIntrusion, ipInformationReset=ipInformationReset, segmentCollisions=segmentCollisions, groupAgentStatus=groupAgentStatus, rmonConfigEntry=rmonConfigEntry, portSpeed=portSpeed, atactDualHubMgt=atactDualHubMgt, groupPostCodeMajorVer=groupPostCodeMajorVer, groupPosition=groupPosition, groupSysMajorVer=groupSysMajorVer, alliedTelesyn=alliedTelesyn, fh824u=fh824u, fh800uPortInfo=fh800uPortInfo, securityPortTable=securityPortTable, rmonConfigTable=rmonConfigTable, groupRptrHwVer=groupRptrHwVer, groupTable=groupTable, newRepeaterMib=newRepeaterMib, securityPortGroupID=securityPortGroupID, segmentPerfID=segmentPerfID, stackInusedNetMask=stackInusedNetMask, perfMonSegmentTable=perfMonSegmentTable, segmentAlignmentErrors=segmentAlignmentErrors, switchPortDataRateMismatches=switchPortDataRateMismatches, stackHealthMonitor=stackHealthMonitor, securityPortAddr=securityPortAddr, switchPortFCSErrors=switchPortFCSErrors, switchPortBroadcastPackets=switchPortBroadcastPackets, fh800uIntrusionHappen=fh800uIntrusionHappen, portGroupID=portGroupID, repeaterMib=repeaterMib)
