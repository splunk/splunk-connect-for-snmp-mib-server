#
# PySNMP MIB module HP-ICF-GPPCV2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-GPPCV2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:21:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Unsigned32, TimeTicks, MibIdentifier, Gauge32, IpAddress, ModuleIdentity, iso, Integer32, Bits, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "MibIdentifier", "Gauge32", "IpAddress", "ModuleIdentity", "iso", "Integer32", "Bits", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity")
RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
hpicfGppcv2MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61))
hpicfGppcv2MIB.setRevisions(('2016-01-15 00:00', '2015-06-23 00:00', '2015-01-21 00:00', '2014-09-09 00:00', '2014-04-24 00:00', '2010-11-12 00:00', '2010-09-28 00:00', '2010-03-01 22:01',))
if mibBuilder.loadTexts: hpicfGppcv2MIB.setLastUpdated('201601150000Z')
if mibBuilder.loadTexts: hpicfGppcv2MIB.setOrganization('HP Networking')
class HpicfGppcv2PolicyName(TextualConvention, OctetString):
    status = 'current'
    displayHint = '70a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 70)

class HpicfGppcv2PolicyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("aclIpv4", 1), ("aclIpv6", 2), ("classifierClassIpv4", 3), ("classifierClassIpv6", 4), ("classifierPolicy", 5), ("connectionRateFilterIpv4", 6), ("aclMac", 7), ("classifierClassMac", 8))

class HpicfGppcv2LastErrorCode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 50, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111))
    namedValues = NamedValues(("noError", 0), ("gppcv2GenericError", 1), ("gppcv2LengthError", 2), ("gppcv2NameError", 3), ("gppcv2ParameterError", 4), ("gppcv2NotImplemented", 5), ("gppcv2MallocError", 6), ("gppcv2TooManyApps", 7), ("gppcv2TooManyPolicies", 8), ("gppcv2AlreadyReserved", 9), ("gppcv2EntryExists", 10), ("gppcv2PlatformError", 11), ("gppcv2AppUsingPolicy", 12), ("gppcv2InvalidPolicyType", 13), ("gppcv2NotReserved", 14), ("gppcv2NoPolicy", 15), ("gppcv2PolicyNotActive", 16), ("gppcv2PolicyHasRules", 17), ("gppcv2RuleExists", 18), ("gppcv2ReleaseRules", 19), ("gppcv2ReleaseAppCtrlEntry", 20), ("gppcv2CfgError", 50), ("gppcv2AceCreateError", 70), ("gppcv2AceConflictingRuleError", 71), ("gppcv2AceDuplicateError", 72), ("gppcv2AceDuplicateSequenceNumError", 73), ("gppcv2AceCfgLimitReachedError", 74), ("gppcv2AceNotFoundError", 75), ("gppcv2AclDuplcateNameError", 76), ("gppcv2AclMaxSequenceNumError", 77), ("gppcv2AclMgmtVlanConflictError", 78), ("gppcv2AclApplyError", 79), ("gppcv2AclCreateError", 80), ("gppcv2AclCfgLimitReachedError", 81), ("gppcv2AclNotFoundError", 82), ("gppcv2AclNotAppliedVlanError", 83), ("gppcv2AclNotAppliedPortError", 84), ("gppcv2InvalidTypeForCrfError", 85), ("gppcv2AclResequenceLimitError", 86), ("gppcv2ClassMaxSequenceNumError", 87), ("gppcv2ClassNotFoundError", 88), ("gppcv2ClassCreateError", 89), ("gppcv2ClassEntryCfgLimitReachedError", 90), ("gppcv2ClassListCfgLimitReachedError", 91), ("gppcv2ClassDuplicateNameError", 92), ("gppcv2ClassEntryAddError", 93), ("gppcv2ClassEntryNotFoundError", 94), ("gppcv2ClassConflictingRuleError", 95), ("gppcv2PolicyNotFoundError", 96), ("gppcv2PolicyNameConflictError", 97), ("gppcv2PolicyNotAppliedError", 98), ("gppcv2PolicyCreateError", 99), ("gppcv2PolicyAddClassError", 100), ("gppcv2PolicyDeleteClassError", 101), ("gppcv2PolicyClassNotFoundError", 102), ("gppcv2PolicyDeleteError", 103), ("gppcv2PolicyApplyError", 104), ("gppcv2PolicyIsAppliedCannotDeleteError", 105), ("gppcv2PolicyDuplicateClassError", 106), ("gppcv2PolicyClassifiedVlanOnVlanError", 107), ("gppcv2PolicyCfgLimitReachedError", 108), ("gppcv2PolicyApplyDetailedError", 109), ("gppcv2ClassNoMixMacAndIPError", 110), ("gppcv2InvalidEtherTypeError", 111))

hpicfGppcv2Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 1))
hpicfGppcv2AppControlTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2), )
if mibBuilder.loadTexts: hpicfGppcv2AppControlTable.setStatus('current')
hpicfGppcv2AppControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1), ).setIndexNames((0, "HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcAppName"), (0, "HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcAppInstance"), (0, "HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcPolicyType"), (0, "HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcPolicyName"))
if mibBuilder.loadTexts: hpicfGppcv2AppControlEntry.setStatus('current')
hpicfGppcv2AcAppName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: hpicfGppcv2AcAppName.setStatus('current')
hpicfGppcv2AcAppInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 16)))
if mibBuilder.loadTexts: hpicfGppcv2AcAppInstance.setStatus('current')
hpicfGppcv2AcPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 3), HpicfGppcv2PolicyType())
if mibBuilder.loadTexts: hpicfGppcv2AcPolicyType.setStatus('current')
hpicfGppcv2AcPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 4), HpicfGppcv2PolicyName())
if mibBuilder.loadTexts: hpicfGppcv2AcPolicyName.setStatus('current')
hpicfGppcv2AcIngressIfList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 5), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcIngressIfList.setStatus('current')
hpicfGppcv2AcIngressVIDList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcIngressVIDList.setStatus('current')
hpicfGppcv2AcEgressIfList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 7), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcEgressIfList.setStatus('current')
hpicfGppcv2AcEgressVIDList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcEgressVIDList.setStatus('current')
hpicfGppcv2AcVIDList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcVIDList.setStatus('current')
hpicfGppcv2AcExpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("permanent", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcExpPolicy.setStatus('current')
hpicfGppcv2AcExpString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcExpString.setStatus('current')
hpicfGppcv2AcLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 12), HpicfGppcv2LastErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfGppcv2AcLastErrorCode.setStatus('current')
hpicfGppcv2AcLastErrorString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfGppcv2AcLastErrorString.setStatus('current')
hpicfGppcv2AcRowAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcRowAdminStatus.setStatus('current')
hpicfGppcv2AcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcRowStatus.setStatus('current')
hpicfGppcv2AcIngressTunnelList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcIngressTunnelList.setStatus('current')
hpicfGppcv2AcEgressTunnelList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcEgressTunnelList.setStatus('current')
hpicfGppcv2AcVACLEgressVIDList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcVACLEgressVIDList.setStatus('current')
hpicfGppcv2AcSharedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 2, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2AcSharedFlag.setStatus('current')
hpicfGppcv2NamedPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 3), )
if mibBuilder.loadTexts: hpicfGppcv2NamedPolicyTable.setStatus('current')
hpicfGppcv2NamedPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 3, 1), ).setIndexNames((0, "HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpPolicyName"), (0, "HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpPolicyType"))
if mibBuilder.loadTexts: hpicfGppcv2NamedPolicyEntry.setStatus('current')
hpicfGppcv2NpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 3, 1, 1), HpicfGppcv2PolicyName())
if mibBuilder.loadTexts: hpicfGppcv2NpPolicyName.setStatus('current')
hpicfGppcv2NpPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 3, 1, 2), HpicfGppcv2PolicyType())
if mibBuilder.loadTexts: hpicfGppcv2NpPolicyType.setStatus('current')
hpicfGppcv2NpSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("subtypeNone", 1), ("aclStandard", 2), ("aclExtended", 3), ("aclConnectionRateFilter", 4), ("aclIdm", 5), ("aclExtendedIpv6", 6), ("policyQos", 7), ("policyMirror", 8), ("policyPbr", 9), ("policyIpsec", 10), ("aclMacStandard", 11), ("aclMacExtended", 12), ("policyUser", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2NpSubType.setStatus('current')
hpicfGppcv2NpReseqStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2NpReseqStart.setStatus('current')
hpicfGppcv2NpReseqIncr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2NpReseqIncr.setStatus('current')
hpicfGppcv2NpLastSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfGppcv2NpLastSeqNo.setStatus('current')
hpicfGppcv2NpLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 3, 1, 7), HpicfGppcv2LastErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfGppcv2NpLastErrorCode.setStatus('current')
hpicfGppcv2NpLastErrorString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 3, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfGppcv2NpLastErrorString.setStatus('current')
hpicfGppcv2NpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2NpRowStatus.setStatus('current')
hpicfGppcv2PolicyRulesTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 4), )
if mibBuilder.loadTexts: hpicfGppcv2PolicyRulesTable.setStatus('current')
hpicfGppcv2PolicyRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 4, 1), ).setIndexNames((0, "HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpPolicyName"), (0, "HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpPolicyType"), (0, "HP-ICF-GPPCV2-MIB", "hpicfGppcv2PrRuleId"))
if mibBuilder.loadTexts: hpicfGppcv2PolicyRulesEntry.setStatus('current')
hpicfGppcv2PrRuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hpicfGppcv2PrRuleId.setStatus('current')
hpicfGppcv2PrPolicyRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2PrPolicyRule.setStatus('current')
hpicfGppcv2PrRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2PrRemark.setStatus('current')
hpicfGppcv2PrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfGppcv2PrRowStatus.setStatus('current')
hpicfGppcv2MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 1, 1))
hpicfGppcv2MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 1, 2))
hpicfGppcv2MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 1, 1, 1)).setObjects(("HP-ICF-GPPCV2-MIB", "hpicfGppcv2Group"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfGppcv2MIBCompliance = hpicfGppcv2MIBCompliance.setStatus('deprecated')
hpicfGppcv2MIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 1, 1, 2)).setObjects(("HP-ICF-GPPCV2-MIB", "hpicfGppcv2Group1"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2Group1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfGppcv2MIBCompliance1 = hpicfGppcv2MIBCompliance1.setStatus('current')
hpicfGppcv2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 1, 2, 1)).setObjects(("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcIngressIfList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcIngressVIDList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcEgressIfList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcEgressVIDList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcVIDList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcExpPolicy"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcExpString"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcLastErrorCode"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcLastErrorString"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcRowAdminStatus"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcRowStatus"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpSubType"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpReseqStart"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpReseqIncr"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpLastSeqNo"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpLastErrorCode"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpLastErrorString"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpRowStatus"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2PrPolicyRule"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2PrRemark"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2PrRowStatus"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcIngressTunnelList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcEgressTunnelList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcVACLEgressVIDList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfGppcv2Group = hpicfGppcv2Group.setStatus('deprecated')
hpicfGppcv2Group1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 61, 1, 2, 2)).setObjects(("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcIngressIfList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcIngressVIDList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcEgressIfList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcEgressVIDList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcVIDList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcExpPolicy"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcExpString"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcLastErrorCode"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcLastErrorString"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcRowAdminStatus"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcRowStatus"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpSubType"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpReseqStart"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpReseqIncr"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpLastSeqNo"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpLastErrorCode"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpLastErrorString"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2NpRowStatus"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2PrPolicyRule"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2PrRemark"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2PrRowStatus"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcIngressTunnelList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcEgressTunnelList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcVACLEgressVIDList"), ("HP-ICF-GPPCV2-MIB", "hpicfGppcv2AcSharedFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfGppcv2Group1 = hpicfGppcv2Group1.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-GPPCV2-MIB", hpicfGppcv2Conformance=hpicfGppcv2Conformance, hpicfGppcv2NpLastSeqNo=hpicfGppcv2NpLastSeqNo, HpicfGppcv2PolicyName=HpicfGppcv2PolicyName, hpicfGppcv2NpRowStatus=hpicfGppcv2NpRowStatus, hpicfGppcv2AcExpPolicy=hpicfGppcv2AcExpPolicy, hpicfGppcv2AcIngressTunnelList=hpicfGppcv2AcIngressTunnelList, hpicfGppcv2AcAppName=hpicfGppcv2AcAppName, hpicfGppcv2PrRemark=hpicfGppcv2PrRemark, hpicfGppcv2MIBCompliances=hpicfGppcv2MIBCompliances, hpicfGppcv2NamedPolicyTable=hpicfGppcv2NamedPolicyTable, PYSNMP_MODULE_ID=hpicfGppcv2MIB, hpicfGppcv2AcRowStatus=hpicfGppcv2AcRowStatus, hpicfGppcv2NpLastErrorString=hpicfGppcv2NpLastErrorString, hpicfGppcv2AppControlEntry=hpicfGppcv2AppControlEntry, hpicfGppcv2AcVACLEgressVIDList=hpicfGppcv2AcVACLEgressVIDList, HpicfGppcv2LastErrorCode=HpicfGppcv2LastErrorCode, hpicfGppcv2AcPolicyType=hpicfGppcv2AcPolicyType, hpicfGppcv2AcEgressVIDList=hpicfGppcv2AcEgressVIDList, hpicfGppcv2MIBGroups=hpicfGppcv2MIBGroups, hpicfGppcv2NpReseqIncr=hpicfGppcv2NpReseqIncr, hpicfGppcv2AcRowAdminStatus=hpicfGppcv2AcRowAdminStatus, hpicfGppcv2PrRuleId=hpicfGppcv2PrRuleId, hpicfGppcv2AcEgressIfList=hpicfGppcv2AcEgressIfList, hpicfGppcv2MIBCompliance=hpicfGppcv2MIBCompliance, hpicfGppcv2NpSubType=hpicfGppcv2NpSubType, hpicfGppcv2PolicyRulesEntry=hpicfGppcv2PolicyRulesEntry, hpicfGppcv2AcLastErrorString=hpicfGppcv2AcLastErrorString, hpicfGppcv2AcEgressTunnelList=hpicfGppcv2AcEgressTunnelList, hpicfGppcv2PrPolicyRule=hpicfGppcv2PrPolicyRule, hpicfGppcv2Group=hpicfGppcv2Group, hpicfGppcv2AcLastErrorCode=hpicfGppcv2AcLastErrorCode, hpicfGppcv2PolicyRulesTable=hpicfGppcv2PolicyRulesTable, hpicfGppcv2AppControlTable=hpicfGppcv2AppControlTable, hpicfGppcv2NpPolicyName=hpicfGppcv2NpPolicyName, hpicfGppcv2Group1=hpicfGppcv2Group1, hpicfGppcv2NamedPolicyEntry=hpicfGppcv2NamedPolicyEntry, hpicfGppcv2NpReseqStart=hpicfGppcv2NpReseqStart, hpicfGppcv2AcIngressVIDList=hpicfGppcv2AcIngressVIDList, hpicfGppcv2PrRowStatus=hpicfGppcv2PrRowStatus, hpicfGppcv2AcExpString=hpicfGppcv2AcExpString, HpicfGppcv2PolicyType=HpicfGppcv2PolicyType, hpicfGppcv2AcSharedFlag=hpicfGppcv2AcSharedFlag, hpicfGppcv2NpPolicyType=hpicfGppcv2NpPolicyType, hpicfGppcv2AcAppInstance=hpicfGppcv2AcAppInstance, hpicfGppcv2NpLastErrorCode=hpicfGppcv2NpLastErrorCode, hpicfGppcv2AcVIDList=hpicfGppcv2AcVIDList, hpicfGppcv2MIBCompliance1=hpicfGppcv2MIBCompliance1, hpicfGppcv2AcPolicyName=hpicfGppcv2AcPolicyName, hpicfGppcv2MIB=hpicfGppcv2MIB, hpicfGppcv2AcIngressIfList=hpicfGppcv2AcIngressIfList)
