#
# PySNMP MIB module HPN-ICF-DOT11-CFGEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-DOT11-CFGEXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:25:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
hpnicfDot11, = mibBuilder.importSymbols("HPN-ICF-DOT11-REF-MIB", "hpnicfDot11")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, ModuleIdentity, Counter64, Bits, ObjectIdentity, IpAddress, iso, Unsigned32, MibIdentifier, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "ModuleIdentity", "Counter64", "Bits", "ObjectIdentity", "IpAddress", "iso", "Unsigned32", "MibIdentifier", "NotificationType", "Integer32")
DisplayString, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "RowStatus")
hpnicfDot11CFGEXT = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6))
hpnicfDot11CFGEXT.setRevisions(('2010-06-02 14:00', '2007-04-25 20:00',))
if mibBuilder.loadTexts: hpnicfDot11CFGEXT.setLastUpdated('201006021400Z')
if mibBuilder.loadTexts: hpnicfDot11CFGEXT.setOrganization('')
hpnicfDot11LoadBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1))
hpnicfDot11LBGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 1))
hpnicfDot11LoadBalanceTrafficEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11LoadBalanceTrafficEnable.setStatus('current')
hpnicfDot11LoadBalanceTrafficThres = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11LoadBalanceTrafficThres.setStatus('current')
hpnicfDot11LoadBalanceSessionEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11LoadBalanceSessionEnable.setStatus('current')
hpnicfDot11LoadBalanceSessionThres = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11LoadBalanceSessionThres.setStatus('current')
hpnicfDot11LoadBalanceTrafficGap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11LoadBalanceTrafficGap.setStatus('current')
hpnicfDot11LoadBalanceSessionGap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11LoadBalanceSessionGap.setStatus('current')
hpnicfDot11LBTrafficThresKbps = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 1, 7), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11LBTrafficThresKbps.setStatus('current')
hpnicfDot11LBTrafficGapKbps = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 1, 8), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfDot11LBTrafficGapKbps.setStatus('current')
hpnicfDot11LBRadioGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 2), )
if mibBuilder.loadTexts: hpnicfDot11LBRadioGroupTable.setStatus('current')
hpnicfDot11LBRadioGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-DOT11-CFGEXT-MIB", "hpnicfDot11LBRadioGroupId"))
if mibBuilder.loadTexts: hpnicfDot11LBRadioGroupEntry.setStatus('current')
hpnicfDot11LBRadioGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfDot11LBRadioGroupId.setStatus('current')
hpnicfDot11LBRadioGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11LBRadioGroupDesc.setStatus('current')
hpnicfDot11LBRadioGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 75, 6, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfDot11LBRadioGroupRowStatus.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-DOT11-CFGEXT-MIB", hpnicfDot11CFGEXT=hpnicfDot11CFGEXT, hpnicfDot11LoadBalanceTrafficGap=hpnicfDot11LoadBalanceTrafficGap, hpnicfDot11LBTrafficGapKbps=hpnicfDot11LBTrafficGapKbps, hpnicfDot11LBRadioGroupTable=hpnicfDot11LBRadioGroupTable, hpnicfDot11LBGlobalGroup=hpnicfDot11LBGlobalGroup, PYSNMP_MODULE_ID=hpnicfDot11CFGEXT, hpnicfDot11LoadBalanceSessionEnable=hpnicfDot11LoadBalanceSessionEnable, hpnicfDot11LoadBalanceSessionThres=hpnicfDot11LoadBalanceSessionThres, hpnicfDot11LoadBalanceSessionGap=hpnicfDot11LoadBalanceSessionGap, hpnicfDot11LBRadioGroupDesc=hpnicfDot11LBRadioGroupDesc, hpnicfDot11LoadBalance=hpnicfDot11LoadBalance, hpnicfDot11LoadBalanceTrafficThres=hpnicfDot11LoadBalanceTrafficThres, hpnicfDot11LBRadioGroupRowStatus=hpnicfDot11LBRadioGroupRowStatus, hpnicfDot11LBRadioGroupId=hpnicfDot11LBRadioGroupId, hpnicfDot11LBRadioGroupEntry=hpnicfDot11LBRadioGroupEntry, hpnicfDot11LBTrafficThresKbps=hpnicfDot11LBTrafficThresKbps, hpnicfDot11LoadBalanceTrafficEnable=hpnicfDot11LoadBalanceTrafficEnable)
