#
# PySNMP MIB module PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:33:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
scanet, = mibBuilder.importSymbols("SCANET-MIB", "scanet")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, TimeTicks, Gauge32, iso, Counter64, ModuleIdentity, NotificationType, ObjectIdentity, Unsigned32, Counter32, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "TimeTicks", "Gauge32", "iso", "Counter64", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Unsigned32", "Counter32", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ppp = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 43))
pppLink = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 43, 1))
class PppProtocolState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10), ("disabled", 11))

pppLinkProtoStateTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 1), )
if mibBuilder.loadTexts: pppLinkProtoStateTable.setStatus('mandatory')
pppLinkProtoStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkProtoStateIfIndex"))
if mibBuilder.loadTexts: pppLinkProtoStateEntry.setStatus('mandatory')
pppLinkProtoStateIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateIfIndex.setStatus('mandatory')
pppLinkProtoStatePppLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("multilinkmaster", 2), ("multilinkslave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStatePppLinkType.setStatus('mandatory')
pppLinkProtoStateLcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 3), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateLcpState.setStatus('mandatory')
pppLinkProtoStateIpcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 4), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateIpcpState.setStatus('mandatory')
pppLinkProtoStateIpxcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 5), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateIpxcpState.setStatus('mandatory')
pppLinkProtoStateBcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 6), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateBcpState.setStatus('mandatory')
pppLinkProtoStateCcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 7), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateCcpState.setStatus('mandatory')
pppLinkProtoStateEcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 8), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateEcpState.setStatus('mandatory')
pppLinkLcpTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 2), )
if mibBuilder.loadTexts: pppLinkLcpTable.setStatus('mandatory')
pppLinkLcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkLcpIfIndex"))
if mibBuilder.loadTexts: pppLinkLcpEntry.setStatus('mandatory')
pppLinkLcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpIfIndex.setStatus('mandatory')
pppLinkLcpMRUInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpMRUInc.setStatus('mandatory')
pppLinkLcpMRUOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpMRUOut.setStatus('mandatory')
pppLinkLcpACCMapInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpACCMapInc.setStatus('mandatory')
pppLinkLcpACCMapOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpACCMapOut.setStatus('mandatory')
pppLinkProtocolCompressionInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtocolCompressionInc.setStatus('mandatory')
pppLinkProtocolCompressionOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtocolCompressionOut.setStatus('mandatory')
pppLinkACCompressionInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkACCompressionInc.setStatus('mandatory')
pppLinkACCompressionOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkACCompressionOut.setStatus('mandatory')
pppLinkMagicNumberInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMagicNumberInc.setStatus('mandatory')
pppLinkMagicNumberOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMagicNumberOut.setStatus('mandatory')
pppLinkBcpTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 3), )
if mibBuilder.loadTexts: pppLinkBcpTable.setStatus('mandatory')
pppLinkBcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 3, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkBcpIfIndex"))
if mibBuilder.loadTexts: pppLinkBcpEntry.setStatus('mandatory')
pppLinkBcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpIfIndex.setStatus('mandatory')
pppLinkBcpMACTypeInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("ethernet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpMACTypeInc.setStatus('mandatory')
pppLinkBcpMACTypeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("ethernet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpMACTypeOut.setStatus('mandatory')
pppLinkBcpBridgingProtInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("spanningtree", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpBridgingProtInc.setStatus('mandatory')
pppLinkBcpBridgingProtOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("spanningtree", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpBridgingProtOut.setStatus('mandatory')
pppLinkCcpTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 4), )
if mibBuilder.loadTexts: pppLinkCcpTable.setStatus('mandatory')
pppLinkCcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 4, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkCcpIfIndex"))
if mibBuilder.loadTexts: pppLinkCcpEntry.setStatus('mandatory')
pppLinkCcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpIfIndex.setStatus('mandatory')
pppLinkCcpHistorySizeIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpHistorySizeIncoming.setStatus('mandatory')
pppLinkCcpHistorySizeOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpHistorySizeOutgoing.setStatus('mandatory')
pppLinkCcpCheckTypeIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("sequenceno", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpCheckTypeIncoming.setStatus('mandatory')
pppLinkCcpCheckTypeOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("sequenceno", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpCheckTypeOutgoing.setStatus('mandatory')
pppLinkEcpTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 5), )
if mibBuilder.loadTexts: pppLinkEcpTable.setStatus('mandatory')
pppLinkEcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkEcpIfIndex"))
if mibBuilder.loadTexts: pppLinkEcpEntry.setStatus('mandatory')
pppLinkEcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpIfIndex.setStatus('mandatory')
pppLinkEcpResetRequestsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpResetRequestsRx.setStatus('mandatory')
pppLinkEcpResetRequestsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpResetRequestsTx.setStatus('mandatory')
pppLinkEcpResetAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpResetAcksRx.setStatus('mandatory')
pppLinkEcpResetAcksTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpResetAcksTx.setStatus('mandatory')
pppLinkEcpRxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpRxDiscarded.setStatus('mandatory')
pppLinkEcpTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpTxDiscarded.setStatus('mandatory')
pppLinkEcpReceiverState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpReceiverState.setStatus('mandatory')
pppLinkCompTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 6), )
if mibBuilder.loadTexts: pppLinkCompTable.setStatus('mandatory')
pppLinkCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkCompIfIndex"))
if mibBuilder.loadTexts: pppLinkCompEntry.setStatus('mandatory')
pppLinkCompIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompIfIndex.setStatus('mandatory')
pppLinkCompDecoderBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderBytesIn.setStatus('mandatory')
pppLinkCompDecoderDecompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderDecompBytesOut.setStatus('mandatory')
pppLinkCompDecoderUncompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderUncompBytesOut.setStatus('mandatory')
pppLinkCompDecoderCompPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderCompPacketsIn.setStatus('mandatory')
pppLinkCompDecoderUncompPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderUncompPacketsIn.setStatus('mandatory')
pppLinkCompDecoderDecompQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderDecompQueueLength.setStatus('mandatory')
pppLinkCompDecoderCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderCompressionRatio.setStatus('mandatory')
pppLinkCompDecoderResetRequestTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderResetRequestTx.setStatus('mandatory')
pppLinkCompDecoderResetAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderResetAcksRx.setStatus('mandatory')
pppLinkCompDecoderRxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderRxDiscarded.setStatus('mandatory')
pppLinkCompDecoderState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderState.setStatus('mandatory')
pppLinkCompEncoderBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderBytesIn.setStatus('mandatory')
pppLinkCompEncoderCompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompBytesOut.setStatus('mandatory')
pppLinkCompEncoderUncompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderUncompBytesOut.setStatus('mandatory')
pppLinkCompEncoderCompPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompPacketsOut.setStatus('mandatory')
pppLinkCompEncoderUncompPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderUncompPacketsOut.setStatus('mandatory')
pppLinkCompEncoderCompQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompQueueLength.setStatus('mandatory')
pppLinkCompEncoderCompressionRation = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompressionRation.setStatus('mandatory')
pppLinkCompEncoderResetRequestRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderResetRequestRx.setStatus('mandatory')
pppLinkCompEncoderResetAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderResetAckTx.setStatus('mandatory')
pppLinkCompEncoderTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderTxDiscarded.setStatus('mandatory')
pppLinkChapTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 7), )
if mibBuilder.loadTexts: pppLinkChapTable.setStatus('mandatory')
pppLinkChapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkChapIfIndex"))
if mibBuilder.loadTexts: pppLinkChapEntry.setStatus('mandatory')
pppLinkChapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapIfIndex.setStatus('mandatory')
pppLinkChapIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapIncoming.setStatus('mandatory')
pppLinkChapOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapOutgoing.setStatus('mandatory')
pppLinkChapChallengeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapChallengeRx.setStatus('mandatory')
pppLinkChapChallengeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapChallengeTx.setStatus('mandatory')
pppLinkChapResponseRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapResponseRx.setStatus('mandatory')
pppLinkChapResponseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapResponseTx.setStatus('mandatory')
pppLinkChapSuccesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapSuccesRx.setStatus('mandatory')
pppLinkChapSuccesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapSuccesTx.setStatus('mandatory')
pppLinkChapFailureRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapFailureRx.setStatus('mandatory')
pppLinkChapFailureTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapFailureTx.setStatus('mandatory')
pppLinkPapTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 8), )
if mibBuilder.loadTexts: pppLinkPapTable.setStatus('mandatory')
pppLinkPapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkPapIfIndex"))
if mibBuilder.loadTexts: pppLinkPapEntry.setStatus('mandatory')
pppLinkPapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapIfIndex.setStatus('mandatory')
pppLinkPapIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapIncoming.setStatus('mandatory')
pppLinkPapOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapOutgoing.setStatus('mandatory')
pppLinkPapAuthReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthReqRx.setStatus('mandatory')
pppLinkPapAuthReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthReqTx.setStatus('mandatory')
pppLinkPapAuthAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthAckRx.setStatus('mandatory')
pppLinkPapAuthAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthAckTx.setStatus('mandatory')
pppLinkPapAuthNackRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthNackRx.setStatus('mandatory')
pppLinkPapAuthNackTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthNackTx.setStatus('mandatory')
pppLinkMlMasterTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 9), )
if mibBuilder.loadTexts: pppLinkMlMasterTable.setStatus('mandatory')
pppLinkMlMasterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 9, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkMlMasterIfIndex"))
if mibBuilder.loadTexts: pppLinkMlMasterEntry.setStatus('mandatory')
pppLinkMlMasterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterIfIndex.setStatus('mandatory')
pppLinkMlMasterSlaveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterSlaveCount.setStatus('mandatory')
pppLinkMlMasterTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterTxUtilization.setStatus('mandatory')
pppLinkMlMasterRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterRxUtilization.setStatus('mandatory')
pppLinkMlMasterSlavesForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterSlavesForwarding.setStatus('mandatory')
pppLinkMlSlaveTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 10), )
if mibBuilder.loadTexts: pppLinkMlSlaveTable.setStatus('mandatory')
pppLinkMlSlaveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 10, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkMlSlaveIfIndex"))
if mibBuilder.loadTexts: pppLinkMlSlaveEntry.setStatus('mandatory')
pppLinkMlSlaveIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlSlaveIfIndex.setStatus('mandatory')
pppLinkMlSlaveBodEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlSlaveBodEnabled.setStatus('mandatory')
pppLinkMlSlaveMasterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlSlaveMasterIfIndex.setStatus('mandatory')
mibBuilder.exportSymbols("PPP-MIB", pppLinkCompDecoderDecompQueueLength=pppLinkCompDecoderDecompQueueLength, pppLinkChapSuccesRx=pppLinkChapSuccesRx, pppLinkChapFailureTx=pppLinkChapFailureTx, pppLinkCcpHistorySizeIncoming=pppLinkCcpHistorySizeIncoming, pppLinkLcpEntry=pppLinkLcpEntry, pppLinkLcpACCMapOut=pppLinkLcpACCMapOut, pppLinkBcpMACTypeInc=pppLinkBcpMACTypeInc, pppLinkCcpIfIndex=pppLinkCcpIfIndex, pppLinkBcpEntry=pppLinkBcpEntry, pppLinkEcpResetRequestsTx=pppLinkEcpResetRequestsTx, pppLinkCompEncoderCompQueueLength=pppLinkCompEncoderCompQueueLength, pppLinkProtocolCompressionInc=pppLinkProtocolCompressionInc, pppLinkPapIncoming=pppLinkPapIncoming, pppLinkCompTable=pppLinkCompTable, pppLinkCompIfIndex=pppLinkCompIfIndex, pppLinkCompDecoderRxDiscarded=pppLinkCompDecoderRxDiscarded, pppLinkPapIfIndex=pppLinkPapIfIndex, pppLinkCompEncoderResetAckTx=pppLinkCompEncoderResetAckTx, pppLinkProtoStateLcpState=pppLinkProtoStateLcpState, pppLinkMlMasterEntry=pppLinkMlMasterEntry, pppLinkCompDecoderState=pppLinkCompDecoderState, pppLinkMlMasterSlavesForwarding=pppLinkMlMasterSlavesForwarding, pppLinkEcpIfIndex=pppLinkEcpIfIndex, pppLinkEcpResetRequestsRx=pppLinkEcpResetRequestsRx, pppLinkPapAuthReqTx=pppLinkPapAuthReqTx, PppProtocolState=PppProtocolState, pppLinkMlSlaveTable=pppLinkMlSlaveTable, pppLinkCompEntry=pppLinkCompEntry, pppLinkChapTable=pppLinkChapTable, pppLinkMlSlaveEntry=pppLinkMlSlaveEntry, pppLinkCompDecoderDecompBytesOut=pppLinkCompDecoderDecompBytesOut, pppLinkPapAuthNackRx=pppLinkPapAuthNackRx, pppLinkMlMasterRxUtilization=pppLinkMlMasterRxUtilization, pppLinkLcpTable=pppLinkLcpTable, pppLinkPapEntry=pppLinkPapEntry, pppLinkBcpMACTypeOut=pppLinkBcpMACTypeOut, pppLinkLcpIfIndex=pppLinkLcpIfIndex, pppLinkProtoStatePppLinkType=pppLinkProtoStatePppLinkType, pppLinkBcpBridgingProtInc=pppLinkBcpBridgingProtInc, pppLinkChapResponseRx=pppLinkChapResponseRx, pppLinkProtocolCompressionOut=pppLinkProtocolCompressionOut, pppLinkEcpResetAcksRx=pppLinkEcpResetAcksRx, pppLinkACCompressionInc=pppLinkACCompressionInc, pppLinkEcpTxDiscarded=pppLinkEcpTxDiscarded, pppLinkMlMasterIfIndex=pppLinkMlMasterIfIndex, pppLinkCompDecoderCompPacketsIn=pppLinkCompDecoderCompPacketsIn, pppLinkChapResponseTx=pppLinkChapResponseTx, pppLinkProtoStateIfIndex=pppLinkProtoStateIfIndex, pppLinkACCompressionOut=pppLinkACCompressionOut, pppLinkMagicNumberOut=pppLinkMagicNumberOut, pppLinkPapTable=pppLinkPapTable, pppLinkEcpResetAcksTx=pppLinkEcpResetAcksTx, pppLinkLcpMRUInc=pppLinkLcpMRUInc, pppLinkBcpIfIndex=pppLinkBcpIfIndex, pppLinkCompDecoderUncompBytesOut=pppLinkCompDecoderUncompBytesOut, pppLinkCompEncoderCompressionRation=pppLinkCompEncoderCompressionRation, pppLinkPapAuthAckRx=pppLinkPapAuthAckRx, pppLinkCompEncoderBytesIn=pppLinkCompEncoderBytesIn, pppLinkCompEncoderCompBytesOut=pppLinkCompEncoderCompBytesOut, pppLinkProtoStateCcpState=pppLinkProtoStateCcpState, pppLinkCompDecoderResetRequestTx=pppLinkCompDecoderResetRequestTx, pppLinkCcpHistorySizeOutgoing=pppLinkCcpHistorySizeOutgoing, pppLinkChapEntry=pppLinkChapEntry, pppLinkCcpCheckTypeIncoming=pppLinkCcpCheckTypeIncoming, pppLinkEcpTable=pppLinkEcpTable, pppLinkMlMasterSlaveCount=pppLinkMlMasterSlaveCount, pppLinkMlSlaveMasterIfIndex=pppLinkMlSlaveMasterIfIndex, pppLinkProtoStateTable=pppLinkProtoStateTable, pppLinkEcpReceiverState=pppLinkEcpReceiverState, pppLinkMlMasterTxUtilization=pppLinkMlMasterTxUtilization, pppLinkChapIncoming=pppLinkChapIncoming, pppLinkCompEncoderUncompBytesOut=pppLinkCompEncoderUncompBytesOut, pppLinkMlSlaveBodEnabled=pppLinkMlSlaveBodEnabled, pppLinkCompEncoderCompPacketsOut=pppLinkCompEncoderCompPacketsOut, pppLinkEcpRxDiscarded=pppLinkEcpRxDiscarded, pppLinkMagicNumberInc=pppLinkMagicNumberInc, pppLinkChapChallengeTx=pppLinkChapChallengeTx, pppLinkCcpEntry=pppLinkCcpEntry, pppLinkProtoStateEntry=pppLinkProtoStateEntry, pppLinkPapAuthReqRx=pppLinkPapAuthReqRx, pppLink=pppLink, pppLinkCompEncoderTxDiscarded=pppLinkCompEncoderTxDiscarded, pppLinkCcpCheckTypeOutgoing=pppLinkCcpCheckTypeOutgoing, pppLinkProtoStateBcpState=pppLinkProtoStateBcpState, pppLinkCompEncoderResetRequestRx=pppLinkCompEncoderResetRequestRx, pppLinkEcpEntry=pppLinkEcpEntry, pppLinkLcpMRUOut=pppLinkLcpMRUOut, pppLinkProtoStateEcpState=pppLinkProtoStateEcpState, pppLinkChapIfIndex=pppLinkChapIfIndex, pppLinkCompDecoderResetAcksRx=pppLinkCompDecoderResetAcksRx, pppLinkChapSuccesTx=pppLinkChapSuccesTx, pppLinkCompEncoderUncompPacketsOut=pppLinkCompEncoderUncompPacketsOut, pppLinkCompDecoderCompressionRatio=pppLinkCompDecoderCompressionRatio, pppLinkChapChallengeRx=pppLinkChapChallengeRx, pppLinkCompDecoderUncompPacketsIn=pppLinkCompDecoderUncompPacketsIn, pppLinkCcpTable=pppLinkCcpTable, pppLinkMlMasterTable=pppLinkMlMasterTable, pppLinkMlSlaveIfIndex=pppLinkMlSlaveIfIndex, ppp=ppp, pppLinkChapOutgoing=pppLinkChapOutgoing, pppLinkCompDecoderBytesIn=pppLinkCompDecoderBytesIn, pppLinkProtoStateIpxcpState=pppLinkProtoStateIpxcpState, pppLinkPapAuthNackTx=pppLinkPapAuthNackTx, pppLinkPapAuthAckTx=pppLinkPapAuthAckTx, pppLinkPapOutgoing=pppLinkPapOutgoing, pppLinkChapFailureRx=pppLinkChapFailureRx, pppLinkProtoStateIpcpState=pppLinkProtoStateIpcpState, pppLinkBcpBridgingProtOut=pppLinkBcpBridgingProtOut, pppLinkBcpTable=pppLinkBcpTable, pppLinkLcpACCMapInc=pppLinkLcpACCMapInc)
