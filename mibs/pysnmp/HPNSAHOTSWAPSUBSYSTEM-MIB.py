#
# PySNMP MIB module HPNSAHOTSWAPSUBSYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSAHOTSWAPSUBSYSTEM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:30:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, Gauge32, ModuleIdentity, Counter32, IpAddress, Unsigned32, ObjectIdentity, TimeTicks, Bits, MibIdentifier, enterprises, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "Gauge32", "ModuleIdentity", "Counter32", "IpAddress", "Unsigned32", "ObjectIdentity", "TimeTicks", "Bits", "MibIdentifier", "enterprises", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaHotSwap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 20))
hpnsaHSMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 1))
hpnsaHSAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2))
hpnsaHSModule = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3))
hpnsaHSDev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4))
hpnsaHSMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSMibRevMajor.setStatus('mandatory')
hpnsaHSMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSMibRevMinor.setStatus('mandatory')
hpnsaHSAgentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2, 1), )
if mibBuilder.loadTexts: hpnsaHSAgentTable.setStatus('mandatory')
hpnsaHSAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2, 1, 1), ).setIndexNames((0, "HPNSAHOTSWAPSUBSYSTEM-MIB", "hpnsaHSAgentIndex"))
if mibBuilder.loadTexts: hpnsaHSAgentEntry.setStatus('mandatory')
hpnsaHSAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSAgentIndex.setStatus('mandatory')
hpnsaHSAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSAgentName.setStatus('mandatory')
hpnsaHSAgentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSAgentVersion.setStatus('mandatory')
hpnsaHSAgentDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSAgentDate.setStatus('mandatory')
hpnsaHSModuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1), )
if mibBuilder.loadTexts: hpnsaHSModuleTable.setStatus('mandatory')
hpnsaHSModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1), ).setIndexNames((0, "HPNSAHOTSWAPSUBSYSTEM-MIB", "hpnsaHSModuleIndex"))
if mibBuilder.loadTexts: hpnsaHSModuleEntry.setStatus('mandatory')
hpnsaHSModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleIndex.setStatus('mandatory')
hpnsaHSModuleScsiCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("wide", 1), ("narrow", 2), ("error", 3), ("no-cable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleScsiCableType.setStatus('mandatory')
hpnsaHSModuleTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("normal", 2), ("warning", 3), ("emergency", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleTempStatus.setStatus('mandatory')
hpnsaHSModuleSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleSwitchState.setStatus('mandatory')
hpnsaHSModuleDeviceStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("at-poweron", 1), ("by-start-command", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleDeviceStartup.setStatus('mandatory')
hpnsaHSModuleMiddleDrvAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowest", 1), ("default", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleMiddleDrvAddr.setStatus('mandatory')
hpnsaHSModuleHi8ScsiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hi-range-9to15", 1), ("lo-range-1to7", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSModuleHi8ScsiAddr.setStatus('mandatory')
hpnsaHSDevTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1), )
if mibBuilder.loadTexts: hpnsaHSDevTable.setStatus('mandatory')
hpnsaHSDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1, 1), ).setIndexNames((0, "HPNSAHOTSWAPSUBSYSTEM-MIB", "hpnsaHSDevModuleIndex"), (0, "HPNSAHOTSWAPSUBSYSTEM-MIB", "hpnsaHSDevIndex"))
if mibBuilder.loadTexts: hpnsaHSDevEntry.setStatus('mandatory')
hpnsaHSDevModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSDevModuleIndex.setStatus('mandatory')
hpnsaHSDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSDevIndex.setStatus('mandatory')
hpnsaHSDevExistence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("present", 1), ("not-present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSDevExistence.setStatus('mandatory')
hpnsaHSDevScsiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSDevScsiAddr.setStatus('mandatory')
hpnsaHSDevPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-connected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaHSDevPowerStatus.setStatus('mandatory')
hpnsaHSPwrAlertDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 20, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaHSPwrAlertDelay.setStatus('mandatory')
mibBuilder.exportSymbols("HPNSAHOTSWAPSUBSYSTEM-MIB", hpnsaHotSwap=hpnsaHotSwap, hpnsa=hpnsa, hpnsaHSModuleScsiCableType=hpnsaHSModuleScsiCableType, hpnsaHSModule=hpnsaHSModule, hpnsaHSModuleTempStatus=hpnsaHSModuleTempStatus, hpnsaHSAgentTable=hpnsaHSAgentTable, hpnsaHSDevIndex=hpnsaHSDevIndex, hpnsaHSAgentEntry=hpnsaHSAgentEntry, hpnsaHSDev=hpnsaHSDev, hpnsaHSDevPowerStatus=hpnsaHSDevPowerStatus, hp=hp, hpnsaHSModuleHi8ScsiAddr=hpnsaHSModuleHi8ScsiAddr, hpnsaHSDevModuleIndex=hpnsaHSDevModuleIndex, hpnsaHSModuleIndex=hpnsaHSModuleIndex, hpnsaHSDevEntry=hpnsaHSDevEntry, hpnsaHSModuleEntry=hpnsaHSModuleEntry, hpnsaHSMibRev=hpnsaHSMibRev, hpnsaHSAgentName=hpnsaHSAgentName, hpnsaHSDevTable=hpnsaHSDevTable, hpnsaHSPwrAlertDelay=hpnsaHSPwrAlertDelay, hpnsaHSMibRevMajor=hpnsaHSMibRevMajor, hpnsaHSAgent=hpnsaHSAgent, nm=nm, hpnsaHSAgentIndex=hpnsaHSAgentIndex, hpnsaHSDevExistence=hpnsaHSDevExistence, hpnsaHSModuleTable=hpnsaHSModuleTable, hpnsaHSModuleMiddleDrvAddr=hpnsaHSModuleMiddleDrvAddr, hpnsaHSAgentVersion=hpnsaHSAgentVersion, hpnsaHSModuleDeviceStartup=hpnsaHSModuleDeviceStartup, hpnsaHSMibRevMinor=hpnsaHSMibRevMinor, hpnsaHSDevScsiAddr=hpnsaHSDevScsiAddr, hpnsaHSAgentDate=hpnsaHSAgentDate, hpnsaHSModuleSwitchState=hpnsaHSModuleSwitchState)
