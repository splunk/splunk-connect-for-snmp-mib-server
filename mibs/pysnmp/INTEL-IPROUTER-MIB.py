#
# PySNMP MIB module INTEL-IPROUTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-IPROUTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, NotificationType, TimeTicks, Integer32, Counter32, iso, Counter64, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "TimeTicks", "Integer32", "Counter32", "iso", "Counter64", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "ModuleIdentity", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
iprouter = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 21))
conf = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 21, 1))
confIfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1), )
if mibBuilder.loadTexts: confIfTable.setStatus('mandatory')
confIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1), ).setIndexNames((0, "INTEL-IPROUTER-MIB", "confIfIndex"))
if mibBuilder.loadTexts: confIfEntry.setStatus('mandatory')
confIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: confIfIndex.setStatus('mandatory')
confIfAddrAndMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfAddrAndMask1.setStatus('mandatory')
confIfAddrAndMask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfAddrAndMask2.setStatus('mandatory')
confIfAddrAndMask3 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfAddrAndMask3.setStatus('mandatory')
confIfAddrAndMask4 = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfAddrAndMask4.setStatus('mandatory')
confIfRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rip-1", 2), ("rip-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfRouteProto.setStatus('mandatory')
confIfTrigRip = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfTrigRip.setStatus('mandatory')
confIfRipMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfRipMetric.setStatus('mandatory')
confIfRip2AuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-password", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfRip2AuthType.setStatus('mandatory')
confIfRip2AuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfRip2AuthKey.setStatus('mandatory')
confIfBootpReqForw = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfBootpReqForw.setStatus('mandatory')
confIfProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfProxyArp.setStatus('mandatory')
confIfFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfFiltering.setStatus('mandatory')
confIfRxDefAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfRxDefAction.setStatus('mandatory')
confIfTxDefAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfTxDefAction.setStatus('mandatory')
confIfRxDefLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfRxDefLogging.setStatus('mandatory')
confIfTxDefLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfTxDefLogging.setStatus('mandatory')
confIfCreateObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(100, 100)).setFixedLength(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfCreateObj.setStatus('mandatory')
confIfDeleteObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfDeleteObj.setStatus('mandatory')
confIfMCRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: confIfMCRouteProto.setStatus('obsolete')
confIfDvmrpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: confIfDvmrpMetric.setStatus('obsolete')
confIfTtlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfTtlThreshold.setStatus('mandatory')
confIfTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfTunnelName.setStatus('mandatory')
confIfLocalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfLocalIP.setStatus('mandatory')
confIfRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfRemoteIP.setStatus('mandatory')
confIfMgtAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfMgtAccess.setStatus('mandatory')
confIfRtrDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: confIfRtrDiscovery.setStatus('mandatory')
confIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lan", 1), ("wan", 2), ("tunnel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: confIfType.setStatus('mandatory')
confMgtAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: confMgtAddress.setStatus('mandatory')
filterTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2), )
if mibBuilder.loadTexts: filterTable.setStatus('mandatory')
filterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1), ).setIndexNames((0, "INTEL-IPROUTER-MIB", "filterIfIndex"), (0, "INTEL-IPROUTER-MIB", "filterDirIndex"), (0, "INTEL-IPROUTER-MIB", "filterIndex"))
if mibBuilder.loadTexts: filterEntry.setStatus('mandatory')
filterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterIfIndex.setStatus('mandatory')
filterDirIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterDirIndex.setStatus('mandatory')
filterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterIndex.setStatus('mandatory')
filterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discard", 1), ("pass", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterAction.setStatus('mandatory')
filterLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterLogging.setStatus('mandatory')
filterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("all", 1), ("other", 2), ("icmp", 3), ("tcp", 4), ("udp", 5), ("igmp", 6), ("ip-ip", 7), ("rsvp", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProtocol.setStatus('mandatory')
filterProtocolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterProtocolValue.setStatus('mandatory')
filterTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all", 1), ("ack", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterTcpFlags.setStatus('mandatory')
filterSrcAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("network", 2), ("host", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSrcAddrType.setStatus('mandatory')
filterSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSrcAddr.setStatus('mandatory')
filterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSrcMask.setStatus('mandatory')
filterSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 20, 21, 23, 25, 53, 67, 68, 69, 70, 80, 110, 119, 161, 162, 520, 1990, 2049))).clone(namedValues=NamedValues(("all", 1), ("other", 2), ("ftp-data", 20), ("ftp-control", 21), ("telnet", 23), ("smtp", 25), ("dns", 53), ("bootp-server", 67), ("bootp-client", 68), ("tftp", 69), ("gopher", 70), ("http", 80), ("pop3", 110), ("nntp", 119), ("snmp", 161), ("snmp-trap", 162), ("rip", 520), ("tunnel", 1990), ("nfs", 2049)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSrcPort.setStatus('mandatory')
filterSrcPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSrcPortValue.setStatus('mandatory')
filterSrcPortOper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("equal-to", 1), ("not-equal-to", 2), ("greater-than", 3), ("less-than", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterSrcPortOper.setStatus('mandatory')
filterDestAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("network", 2), ("host", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDestAddrType.setStatus('mandatory')
filterDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDestAddr.setStatus('mandatory')
filterDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDestMask.setStatus('mandatory')
filterDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 20, 21, 23, 25, 53, 67, 68, 69, 70, 80, 110, 161, 162, 520, 1990, 2049))).clone(namedValues=NamedValues(("all", 1), ("other", 2), ("ftp-data", 20), ("ftp-control", 21), ("telnet", 23), ("smtp", 25), ("dns", 53), ("bootp-server", 67), ("bootp-client", 68), ("tftp", 69), ("gopher", 70), ("http", 80), ("pop3", 110), ("snmp", 161), ("snmp-trap", 162), ("rip", 520), ("tunnel", 1990), ("nfs", 2049)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDestPort.setStatus('mandatory')
filterDestPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDestPortValue.setStatus('mandatory')
filterDestPortOper = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("equal-to", 1), ("not-equal-to", 2), ("greater-than", 3), ("less-than", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterDestPortOper.setStatus('mandatory')
filterHits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterHits.setStatus('mandatory')
natTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 3), )
if mibBuilder.loadTexts: natTable.setStatus('mandatory')
natEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 3, 1), ).setIndexNames((0, "INTEL-IPROUTER-MIB", "natIfIndex"), (0, "INTEL-IPROUTER-MIB", "natIndex"))
if mibBuilder.loadTexts: natEntry.setStatus('mandatory')
natIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natIfIndex.setStatus('mandatory')
natIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natIndex.setStatus('mandatory')
natIntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natIntAddr.setStatus('mandatory')
natIntMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natIntMask.setStatus('mandatory')
natIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natIntPort.setStatus('mandatory')
natExtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natExtAddr.setStatus('mandatory')
natExtMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natExtMask.setStatus('mandatory')
natExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natExtPort.setStatus('mandatory')
natType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("singleIpHost", 3), ("singleIpNetwork", 4), ("singleIpIcmp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: natType.setStatus('mandatory')
natTime = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: natTime.setStatus('mandatory')
statRoutTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 4), )
if mibBuilder.loadTexts: statRoutTable.setStatus('mandatory')
statRoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 4, 1), ).setIndexNames((0, "INTEL-IPROUTER-MIB", "statRoutIfIndex"), (0, "INTEL-IPROUTER-MIB", "statRoutNetwork"))
if mibBuilder.loadTexts: statRoutEntry.setStatus('mandatory')
statRoutIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statRoutIfIndex.setStatus('mandatory')
statRoutNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statRoutNetwork.setStatus('mandatory')
statRoutMask = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statRoutMask.setStatus('mandatory')
statRoutNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statRoutNextHop.setStatus('mandatory')
statRoutMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statRoutMetric.setStatus('mandatory')
statRoutCreateObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statRoutCreateObj.setStatus('mandatory')
statRoutDeleteObj = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statRoutDeleteObj.setStatus('mandatory')
tosPrefThreshold = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tosPrefThreshold.setStatus('mandatory')
stat = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 21, 2))
statIfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 21, 2, 1), )
if mibBuilder.loadTexts: statIfTable.setStatus('mandatory')
statIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 21, 2, 1, 1), ).setIndexNames((0, "INTEL-IPROUTER-MIB", "statIfIndex"))
if mibBuilder.loadTexts: statIfEntry.setStatus('mandatory')
statIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfIndex.setStatus('mandatory')
statIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("lan", 1), ("wan", 2), ("tunnel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfType.setStatus('mandatory')
statIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfState.setStatus('mandatory')
statIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfMTU.setStatus('mandatory')
statIfRxDefHits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfRxDefHits.setStatus('mandatory')
statIfTxDefHits = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfTxDefHits.setStatus('mandatory')
statIfChange = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statIfChange.setStatus('mandatory')
arp = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 21, 3))
arpIfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 1), )
if mibBuilder.loadTexts: arpIfTable.setStatus('mandatory')
arpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 1, 1), ).setIndexNames((0, "INTEL-IPROUTER-MIB", "arpIfIndex"))
if mibBuilder.loadTexts: arpIfEntry.setStatus('mandatory')
arpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpIfIndex.setStatus('mandatory')
arpIfInReq = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpIfInReq.setStatus('mandatory')
arpIfOutRep = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpIfOutRep.setStatus('mandatory')
arpIfOutReq = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpIfOutReq.setStatus('mandatory')
arpIfInRep = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpIfInRep.setStatus('mandatory')
arpIfInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpIfInHdrErrors.setStatus('mandatory')
arpInReq = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInReq.setStatus('mandatory')
arpOutRep = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpOutRep.setStatus('mandatory')
arpOutReq = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpOutReq.setStatus('mandatory')
arpInRep = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInRep.setStatus('mandatory')
arpInHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInHdrErrors.setStatus('mandatory')
ip = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 21, 4))
ipIfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 21, 4, 1), )
if mibBuilder.loadTexts: ipIfTable.setStatus('mandatory')
ipIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 21, 4, 1, 1), ).setIndexNames((0, "INTEL-IPROUTER-MIB", "ipIfIndex"))
if mibBuilder.loadTexts: ipIfEntry.setStatus('mandatory')
ipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfIndex.setStatus('mandatory')
ipIfInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfInReceives.setStatus('mandatory')
ipIfInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfInHdrErrors.setStatus('mandatory')
ipIfInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfInAddrErrors.setStatus('mandatory')
ipIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfInDiscards.setStatus('mandatory')
ipIfForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfForwDatagrams.setStatus('mandatory')
ipIfOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfOutRequests.setStatus('mandatory')
ipIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipIfOutDiscards.setStatus('mandatory')
icmp = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 21, 5))
icmpIfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 1), )
if mibBuilder.loadTexts: icmpIfTable.setStatus('mandatory')
icmpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 1, 1), ).setIndexNames((0, "INTEL-IPROUTER-MIB", "icmpIfIndex"))
if mibBuilder.loadTexts: icmpIfEntry.setStatus('mandatory')
icmpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpIfIndex.setStatus('mandatory')
icmpIfInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpIfInMsgs.setStatus('mandatory')
icmpIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpIfInErrors.setStatus('mandatory')
icmpIfInEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpIfInEchos.setStatus('mandatory')
icmpIfInEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpIfInEchoReps.setStatus('mandatory')
icmpIfOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpIfOutMsgs.setStatus('mandatory')
icmpIfOutEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpIfOutEchos.setStatus('mandatory')
icmpIfOutEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpIfOutEchoReps.setStatus('mandatory')
icmpInRouterAdvs = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInRouterAdvs.setStatus('mandatory')
icmpInRouterSols = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpInRouterSols.setStatus('mandatory')
icmpOutRouterAdvs = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutRouterAdvs.setStatus('mandatory')
icmpOutRouterSols = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpOutRouterSols.setStatus('mandatory')
rip = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 21, 6))
ripIfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 1), )
if mibBuilder.loadTexts: ripIfTable.setStatus('mandatory')
ripIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 1, 1), ).setIndexNames((0, "INTEL-IPROUTER-MIB", "ripIfIndex"))
if mibBuilder.loadTexts: ripIfEntry.setStatus('mandatory')
ripIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfIndex.setStatus('mandatory')
ripIfInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfInReceives.setStatus('mandatory')
ripIfInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfInHdrErrors.setStatus('mandatory')
ripIfInBadSrcAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfInBadSrcAddrs.setStatus('mandatory')
ripIfInBadVers = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfInBadVers.setStatus('mandatory')
ripIfInAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfInAuthFails.setStatus('mandatory')
ripIfInUnknComs = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfInUnknComs.setStatus('mandatory')
ripIfOutSent = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfOutSent.setStatus('mandatory')
ripIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfOutDiscards.setStatus('mandatory')
ripInReceives = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInReceives.setStatus('mandatory')
ripInHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInHdrErrors.setStatus('mandatory')
ripInBadSrcAddrs = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInBadSrcAddrs.setStatus('mandatory')
ripInBadVers = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInBadVers.setStatus('mandatory')
ripInAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInAuthFails.setStatus('mandatory')
ripInUnknComs = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInUnknComs.setStatus('mandatory')
ripOutSent = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripOutSent.setStatus('mandatory')
ripOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripOutDiscards.setStatus('mandatory')
bootp = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 21, 7))
bootpIfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 1), )
if mibBuilder.loadTexts: bootpIfTable.setStatus('mandatory')
bootpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 1, 1), ).setIndexNames((0, "INTEL-IPROUTER-MIB", "bootpIfIndex"))
if mibBuilder.loadTexts: bootpIfEntry.setStatus('mandatory')
bootpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpIfIndex.setStatus('mandatory')
bootpIfInRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpIfInRequests.setStatus('mandatory')
bootpIfInReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpIfInReplies.setStatus('mandatory')
bootpIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpIfInErrors.setStatus('mandatory')
bootpIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpIfInDiscards.setStatus('mandatory')
bootpIfOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpIfOutRequests.setStatus('mandatory')
bootpIfOutReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpIfOutReplies.setStatus('mandatory')
bootpIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpIfOutDiscards.setStatus('mandatory')
bootpInRequests = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpInRequests.setStatus('mandatory')
bootpInReplies = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpInReplies.setStatus('mandatory')
bootpInErrors = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpInErrors.setStatus('mandatory')
bootpInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpInDiscards.setStatus('mandatory')
bootpOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpOutRequests.setStatus('mandatory')
bootpOutReplies = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpOutReplies.setStatus('mandatory')
bootpOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpOutDiscards.setStatus('mandatory')
bootpMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 343, 6, 21, 7, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bootpMaxHops.setStatus('mandatory')
octetcounters = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 21, 8))
octetIfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1), )
if mibBuilder.loadTexts: octetIfTable.setStatus('mandatory')
octetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1), ).setIndexNames((0, "INTEL-IPROUTER-MIB", "octetIfIndex"))
if mibBuilder.loadTexts: octetIfEntry.setStatus('mandatory')
octetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfIndex.setStatus('mandatory')
octetIfInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfInTotal.setStatus('mandatory')
octetIfOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfOutTotal.setStatus('mandatory')
octetIfInOther = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfInOther.setStatus('mandatory')
octetIfOutOther = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfOutOther.setStatus('mandatory')
octetIfInFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfInFtp.setStatus('mandatory')
octetIfOutFtp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfOutFtp.setStatus('mandatory')
octetIfInTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfInTelnet.setStatus('mandatory')
octetIfOutTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfOutTelnet.setStatus('mandatory')
octetIfInSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfInSmtp.setStatus('mandatory')
octetIfOutSmtp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfOutSmtp.setStatus('mandatory')
octetIfInDns = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfInDns.setStatus('mandatory')
octetIfOutDns = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfOutDns.setStatus('mandatory')
octetIfInBootp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfInBootp.setStatus('mandatory')
octetIfOutBootp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfOutBootp.setStatus('mandatory')
octetIfInHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfInHttp.setStatus('mandatory')
octetIfOutHttp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfOutHttp.setStatus('mandatory')
octetIfInSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfInSnmp.setStatus('mandatory')
octetIfOutSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfOutSnmp.setStatus('mandatory')
octetIfInRip = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfInRip.setStatus('mandatory')
octetIfOutRip = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfOutRip.setStatus('mandatory')
octetIfInTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfInTunnel.setStatus('mandatory')
octetIfOutTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 21, 8, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: octetIfOutTunnel.setStatus('mandatory')
mibBuilder.exportSymbols("INTEL-IPROUTER-MIB", natEntry=natEntry, natIfIndex=natIfIndex, arpOutRep=arpOutRep, filterDestAddr=filterDestAddr, statIfEntry=statIfEntry, icmpIfOutEchos=icmpIfOutEchos, icmpIfOutEchoReps=icmpIfOutEchoReps, confIfLocalIP=confIfLocalIP, bootpIfInErrors=bootpIfInErrors, octetIfEntry=octetIfEntry, octetIfIndex=octetIfIndex, bootpOutRequests=bootpOutRequests, octetIfOutTelnet=octetIfOutTelnet, arpInHdrErrors=arpInHdrErrors, ipIfForwDatagrams=ipIfForwDatagrams, confIfTunnelName=confIfTunnelName, statIfType=statIfType, statRoutMetric=statRoutMetric, confIfDvmrpMetric=confIfDvmrpMetric, filterSrcAddr=filterSrcAddr, ripIfIndex=ripIfIndex, confMgtAddress=confMgtAddress, ripIfInAuthFails=ripIfInAuthFails, bootp=bootp, confIfAddrAndMask4=confIfAddrAndMask4, ripInUnknComs=ripInUnknComs, confIfRipMetric=confIfRipMetric, conf=conf, natIntPort=natIntPort, icmpIfInErrors=icmpIfInErrors, bootpIfInReplies=bootpIfInReplies, filterIndex=filterIndex, bootpOutReplies=bootpOutReplies, octetIfInHttp=octetIfInHttp, confIfRemoteIP=confIfRemoteIP, natIntMask=natIntMask, octetIfInDns=octetIfInDns, bootpInRequests=bootpInRequests, filterIfIndex=filterIfIndex, filterHits=filterHits, ip=ip, arpInRep=arpInRep, natType=natType, arpIfTable=arpIfTable, octetIfInRip=octetIfInRip, arpIfOutRep=arpIfOutRep, statRoutNextHop=statRoutNextHop, confIfFiltering=confIfFiltering, ipIfOutDiscards=ipIfOutDiscards, confIfBootpReqForw=confIfBootpReqForw, icmpIfOutMsgs=icmpIfOutMsgs, ripIfTable=ripIfTable, bootpIfOutRequests=bootpIfOutRequests, filterSrcPort=filterSrcPort, filterDestPortValue=filterDestPortValue, octetIfInOther=octetIfInOther, statIfRxDefHits=statIfRxDefHits, icmpInRouterSols=icmpInRouterSols, natTime=natTime, ripIfOutDiscards=ripIfOutDiscards, bootpIfEntry=bootpIfEntry, confIfAddrAndMask1=confIfAddrAndMask1, octetIfOutSnmp=octetIfOutSnmp, ripInBadVers=ripInBadVers, confIfType=confIfType, natIndex=natIndex, ipIfOutRequests=ipIfOutRequests, filterDestAddrType=filterDestAddrType, ripInAuthFails=ripInAuthFails, filterSrcAddrType=filterSrcAddrType, octetIfInSnmp=octetIfInSnmp, ripInBadSrcAddrs=ripInBadSrcAddrs, confIfRip2AuthType=confIfRip2AuthType, ripInHdrErrors=ripInHdrErrors, arpIfEntry=arpIfEntry, tosPrefThreshold=tosPrefThreshold, statIfTable=statIfTable, bootpInErrors=bootpInErrors, filterDestPortOper=filterDestPortOper, arpOutReq=arpOutReq, arpIfOutReq=arpIfOutReq, natExtPort=natExtPort, statRoutTable=statRoutTable, bootpMaxHops=bootpMaxHops, confIfRxDefLogging=confIfRxDefLogging, statRoutIfIndex=statRoutIfIndex, confIfEntry=confIfEntry, filterTable=filterTable, filterSrcMask=filterSrcMask, bootpInDiscards=bootpInDiscards, octetIfTable=octetIfTable, statRoutNetwork=statRoutNetwork, filterDirIndex=filterDirIndex, statIfChange=statIfChange, filterDestPort=filterDestPort, arpIfInHdrErrors=arpIfInHdrErrors, natExtMask=natExtMask, confIfRxDefAction=confIfRxDefAction, confIfTable=confIfTable, octetIfOutTotal=octetIfOutTotal, ripOutSent=ripOutSent, ripIfInBadVers=ripIfInBadVers, confIfRip2AuthKey=confIfRip2AuthKey, filterProtocolValue=filterProtocolValue, ripIfInReceives=ripIfInReceives, statIfTxDefHits=statIfTxDefHits, confIfTxDefAction=confIfTxDefAction, icmpIfIndex=icmpIfIndex, filterSrcPortValue=filterSrcPortValue, octetIfInBootp=octetIfInBootp, ripIfInBadSrcAddrs=ripIfInBadSrcAddrs, natTable=natTable, statIfMTU=statIfMTU, bootpIfInDiscards=bootpIfInDiscards, iprouter=iprouter, confIfAddrAndMask2=confIfAddrAndMask2, filterDestMask=filterDestMask, octetIfInTelnet=octetIfInTelnet, filterProtocol=filterProtocol, statIfIndex=statIfIndex, ripInReceives=ripInReceives, arpIfInReq=arpIfInReq, confIfProxyArp=confIfProxyArp, ipIfInAddrErrors=ipIfInAddrErrors, ipIfInReceives=ipIfInReceives, icmpIfEntry=icmpIfEntry, octetIfOutRip=octetIfOutRip, filterEntry=filterEntry, ripIfOutSent=ripIfOutSent, statIfState=statIfState, ripOutDiscards=ripOutDiscards, octetIfInSmtp=octetIfInSmtp, arpInReq=arpInReq, icmpInRouterAdvs=icmpInRouterAdvs, confIfTxDefLogging=confIfTxDefLogging, icmpIfTable=icmpIfTable, confIfDeleteObj=confIfDeleteObj, octetIfOutSmtp=octetIfOutSmtp, ipIfInHdrErrors=ipIfInHdrErrors, icmp=icmp, arpIfInRep=arpIfInRep, ripIfInHdrErrors=ripIfInHdrErrors, bootpInReplies=bootpInReplies, octetcounters=octetcounters, bootpOutDiscards=bootpOutDiscards, bootpIfOutReplies=bootpIfOutReplies, ipIfInDiscards=ipIfInDiscards, icmpIfInEchos=icmpIfInEchos, octetIfOutBootp=octetIfOutBootp, ripIfInUnknComs=ripIfInUnknComs, icmpIfInEchoReps=icmpIfInEchoReps, arpIfIndex=arpIfIndex, octetIfInTunnel=octetIfInTunnel, confIfMCRouteProto=confIfMCRouteProto, confIfMgtAccess=confIfMgtAccess, statRoutEntry=statRoutEntry, statRoutDeleteObj=statRoutDeleteObj, ipIfIndex=ipIfIndex, confIfAddrAndMask3=confIfAddrAndMask3, octetIfOutTunnel=octetIfOutTunnel, statRoutMask=statRoutMask, rip=rip, ipIfEntry=ipIfEntry, icmpIfInMsgs=icmpIfInMsgs, bootpIfInRequests=bootpIfInRequests, filterLogging=filterLogging, natExtAddr=natExtAddr, confIfTrigRip=confIfTrigRip, octetIfOutFtp=octetIfOutFtp, confIfRouteProto=confIfRouteProto, bootpIfTable=bootpIfTable, arp=arp, filterAction=filterAction, icmpOutRouterSols=icmpOutRouterSols, octetIfInFtp=octetIfInFtp, confIfTtlThreshold=confIfTtlThreshold, octetIfInTotal=octetIfInTotal, octetIfOutHttp=octetIfOutHttp, natIntAddr=natIntAddr, confIfIndex=confIfIndex, stat=stat, confIfCreateObj=confIfCreateObj, filterSrcPortOper=filterSrcPortOper, icmpOutRouterAdvs=icmpOutRouterAdvs, bootpIfOutDiscards=bootpIfOutDiscards, statRoutCreateObj=statRoutCreateObj, octetIfOutDns=octetIfOutDns, bootpIfIndex=bootpIfIndex, confIfRtrDiscovery=confIfRtrDiscovery, ipIfTable=ipIfTable, octetIfOutOther=octetIfOutOther, ripIfEntry=ripIfEntry, filterTcpFlags=filterTcpFlags)
