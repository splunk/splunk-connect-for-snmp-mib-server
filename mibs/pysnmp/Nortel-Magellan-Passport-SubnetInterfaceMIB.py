#
# PySNMP MIB module Nortel-Magellan-Passport-SubnetInterfaceMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-SubnetInterfaceMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:18:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
modIndex, mod = mibBuilder.importSymbols("Nortel-Magellan-Passport-ShelfMIB", "modIndex", "mod")
Integer32, DisplayString, Unsigned32, RowStatus, StorageType = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Integer32", "DisplayString", "Unsigned32", "RowStatus", "StorageType")
NonReplicated, DigitString = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "NonReplicated", "DigitString")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, MibIdentifier, TimeTicks, ObjectIdentity, ModuleIdentity, Bits, Unsigned32, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "MibIdentifier", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "Bits", "Unsigned32", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
subnetInterfaceMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 45))
modVcs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2))
modVcsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 1), )
if mibBuilder.loadTexts: modVcsRowStatusTable.setStatus('mandatory')
modVcsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ShelfMIB", "modIndex"), (0, "Nortel-Magellan-Passport-SubnetInterfaceMIB", "modVcsIndex"))
if mibBuilder.loadTexts: modVcsRowStatusEntry.setStatus('mandatory')
modVcsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsRowStatus.setStatus('mandatory')
modVcsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modVcsComponentName.setStatus('mandatory')
modVcsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modVcsStorageType.setStatus('mandatory')
modVcsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: modVcsIndex.setStatus('mandatory')
modVcsAccOptTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 10), )
if mibBuilder.loadTexts: modVcsAccOptTable.setStatus('mandatory')
modVcsAccOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ShelfMIB", "modIndex"), (0, "Nortel-Magellan-Passport-SubnetInterfaceMIB", "modVcsIndex"))
if mibBuilder.loadTexts: modVcsAccOptEntry.setStatus('mandatory')
modVcsSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n1", 0), ("n2", 1), ("n4", 2), ("n8", 3), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsSegmentSize.setStatus('mandatory')
modVcsUnitsCounted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("segments", 0), ("frames", 1))).clone('segments')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsUnitsCounted.setStatus('mandatory')
modVcsAccountingFax = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="20")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsAccountingFax.setStatus('mandatory')
modVcsGenerationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bothEnds", 0), ("singleEnd", 1))).clone('singleEnd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsGenerationMode.setStatus('mandatory')
modVcsAddOptTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12), )
if mibBuilder.loadTexts: modVcsAddOptTable.setStatus('mandatory')
modVcsAddOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ShelfMIB", "modIndex"), (0, "Nortel-Magellan-Passport-SubnetInterfaceMIB", "modVcsIndex"))
if mibBuilder.loadTexts: modVcsAddOptEntry.setStatus('mandatory')
modVcsDefaultNumberingPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsDefaultNumberingPlan.setStatus('mandatory')
modVcsNetworkIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dnic", 0), ("inic", 1))).clone('dnic')).setMaxAccess("readonly")
if mibBuilder.loadTexts: modVcsNetworkIdType.setStatus('mandatory')
modVcsX121Type = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dnic", 0), ("dcc", 1))).clone('dnic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsX121Type.setStatus('mandatory')
modVcsNetworkIdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 6), DigitString().subtype(subtypeSpec=ValueSizeConstraint(3, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsNetworkIdCode.setStatus('mandatory')
modVcsX121IntlAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsX121IntlAddresses.setStatus('mandatory')
modVcsX121IntllPrefixDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsX121IntllPrefixDigit.setStatus('mandatory')
modVcsX121MinAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsX121MinAddressLength.setStatus('mandatory')
modVcsX121MaxAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsX121MaxAddressLength.setStatus('mandatory')
modVcsX121ToE164EscapeSignificance = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsX121ToE164EscapeSignificance.setStatus('mandatory')
modVcsE164IntlFormatAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsE164IntlFormatAllowed.setStatus('mandatory')
modVcsE164IntlPrefixDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 15), DigitString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)).clone(hexValue="30")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsE164IntlPrefixDigits.setStatus('mandatory')
modVcsE164NatlPrefixDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsE164NatlPrefixDigit.setStatus('mandatory')
modVcsE164LocalAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 15)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsE164LocalAddressLength.setStatus('mandatory')
modVcsE164TeleCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 18), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 4)).clone(hexValue="31")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsE164TeleCountryCode.setStatus('mandatory')
modVcsE164NatlMinAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsE164NatlMinAddressLength.setStatus('mandatory')
modVcsE164NatlMaxAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsE164NatlMaxAddressLength.setStatus('mandatory')
modVcsE164IntlMinAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsE164IntlMinAddressLength.setStatus('mandatory')
modVcsE164IntlMaxAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsE164IntlMaxAddressLength.setStatus('mandatory')
modVcsE164LocalMinAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsE164LocalMinAddressLength.setStatus('mandatory')
modVcsE164LocalMaxAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 12, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsE164LocalMaxAddressLength.setStatus('mandatory')
modVcsIntOptTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 13), )
if mibBuilder.loadTexts: modVcsIntOptTable.setStatus('mandatory')
modVcsIntOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ShelfMIB", "modIndex"), (0, "Nortel-Magellan-Passport-SubnetInterfaceMIB", "modVcsIndex"))
if mibBuilder.loadTexts: modVcsIntOptEntry.setStatus('mandatory')
modVcsHighPriorityPacketSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="ff80")).setMaxAccess("readonly")
if mibBuilder.loadTexts: modVcsHighPriorityPacketSizes.setStatus('mandatory')
modVcsMaxSubnetPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n512')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsMaxSubnetPacketSize.setStatus('mandatory')
modVcsCallSetupTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsCallSetupTimer.setStatus('mandatory')
modVcsCallRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsCallRetryTimer.setStatus('mandatory')
modVcsDelaySubnetAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsDelaySubnetAcks.setStatus('mandatory')
modVcsWinsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 213), )
if mibBuilder.loadTexts: modVcsWinsTable.setStatus('mandatory')
modVcsWinsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 213, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-ShelfMIB", "modIndex"), (0, "Nortel-Magellan-Passport-SubnetInterfaceMIB", "modVcsIndex"), (0, "Nortel-Magellan-Passport-SubnetInterfaceMIB", "modVcsWinsPktIndex"), (0, "Nortel-Magellan-Passport-SubnetInterfaceMIB", "modVcsWinsTptIndex"))
if mibBuilder.loadTexts: modVcsWinsEntry.setStatus('mandatory')
modVcsWinsPktIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 213, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("n16", 0), ("n32", 1), ("n64", 2), ("n128", 3), ("n256", 4), ("n512", 5), ("n1024", 6), ("n2048", 7), ("n4096", 8), ("n8192", 9), ("n32768", 10), ("n65535", 11))))
if mibBuilder.loadTexts: modVcsWinsPktIndex.setStatus('mandatory')
modVcsWinsTptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 213, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: modVcsWinsTptIndex.setStatus('mandatory')
modVcsWinsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 16, 2, 213, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modVcsWinsValue.setStatus('mandatory')
subnetInterfaceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 45, 1))
subnetInterfaceGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 45, 1, 5))
subnetInterfaceGroupBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 45, 1, 5, 1))
subnetInterfaceGroupBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 45, 1, 5, 1, 2))
subnetInterfaceCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 45, 3))
subnetInterfaceCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 45, 3, 5))
subnetInterfaceCapabilitiesBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 45, 3, 5, 1))
subnetInterfaceCapabilitiesBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 45, 3, 5, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-SubnetInterfaceMIB", modVcsE164LocalMaxAddressLength=modVcsE164LocalMaxAddressLength, subnetInterfaceCapabilitiesBE00A=subnetInterfaceCapabilitiesBE00A, modVcsAccountingFax=modVcsAccountingFax, modVcsE164IntlMinAddressLength=modVcsE164IntlMinAddressLength, modVcsNetworkIdCode=modVcsNetworkIdCode, modVcsX121ToE164EscapeSignificance=modVcsX121ToE164EscapeSignificance, modVcsIntOptTable=modVcsIntOptTable, modVcsStorageType=modVcsStorageType, modVcsX121MinAddressLength=modVcsX121MinAddressLength, modVcsWinsValue=modVcsWinsValue, modVcsNetworkIdType=modVcsNetworkIdType, subnetInterfaceCapabilities=subnetInterfaceCapabilities, subnetInterfaceCapabilitiesBE00=subnetInterfaceCapabilitiesBE00, modVcsIntOptEntry=modVcsIntOptEntry, modVcsIndex=modVcsIndex, modVcsX121MaxAddressLength=modVcsX121MaxAddressLength, modVcsE164NatlPrefixDigit=modVcsE164NatlPrefixDigit, modVcsDefaultNumberingPlan=modVcsDefaultNumberingPlan, modVcsE164NatlMinAddressLength=modVcsE164NatlMinAddressLength, modVcsHighPriorityPacketSizes=modVcsHighPriorityPacketSizes, subnetInterfaceCapabilitiesBE=subnetInterfaceCapabilitiesBE, subnetInterfaceMIB=subnetInterfaceMIB, modVcsAddOptEntry=modVcsAddOptEntry, modVcsE164LocalMinAddressLength=modVcsE164LocalMinAddressLength, modVcsE164IntlMaxAddressLength=modVcsE164IntlMaxAddressLength, modVcsDelaySubnetAcks=modVcsDelaySubnetAcks, modVcsComponentName=modVcsComponentName, modVcsGenerationMode=modVcsGenerationMode, modVcsAddOptTable=modVcsAddOptTable, modVcsX121IntllPrefixDigit=modVcsX121IntllPrefixDigit, modVcsCallSetupTimer=modVcsCallSetupTimer, modVcsE164IntlFormatAllowed=modVcsE164IntlFormatAllowed, subnetInterfaceGroup=subnetInterfaceGroup, subnetInterfaceGroupBE=subnetInterfaceGroupBE, subnetInterfaceGroupBE00=subnetInterfaceGroupBE00, modVcsWinsTptIndex=modVcsWinsTptIndex, modVcsE164TeleCountryCode=modVcsE164TeleCountryCode, modVcsCallRetryTimer=modVcsCallRetryTimer, modVcsWinsPktIndex=modVcsWinsPktIndex, modVcsAccOptEntry=modVcsAccOptEntry, modVcsRowStatusEntry=modVcsRowStatusEntry, modVcsX121IntlAddresses=modVcsX121IntlAddresses, modVcsAccOptTable=modVcsAccOptTable, modVcsWinsTable=modVcsWinsTable, modVcsWinsEntry=modVcsWinsEntry, modVcsE164LocalAddressLength=modVcsE164LocalAddressLength, subnetInterfaceGroupBE00A=subnetInterfaceGroupBE00A, modVcsX121Type=modVcsX121Type, modVcsRowStatusTable=modVcsRowStatusTable, modVcsE164IntlPrefixDigits=modVcsE164IntlPrefixDigits, modVcsMaxSubnetPacketSize=modVcsMaxSubnetPacketSize, modVcsE164NatlMaxAddressLength=modVcsE164NatlMaxAddressLength, modVcsUnitsCounted=modVcsUnitsCounted, modVcs=modVcs, modVcsRowStatus=modVcsRowStatus, modVcsSegmentSize=modVcsSegmentSize)
