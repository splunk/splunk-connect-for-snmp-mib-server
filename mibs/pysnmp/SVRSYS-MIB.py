#
# PySNMP MIB module SVRSYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SVRSYS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:04:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
mgmt, enterprises, iso, Counter64, ObjectIdentity, Bits, Unsigned32, Integer32, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, Counter32, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "mgmt", "enterprises", "iso", "Counter64", "ObjectIdentity", "Bits", "Unsigned32", "Integer32", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "Counter32", "TimeTicks", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
class KBytes(Integer32):
    pass

class BusTypes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("systemBus", 3), ("isa", 4), ("eisa", 5), ("mca", 6), ("turbochannel", 7), ("pci", 8), ("vme", 9), ("nuBus", 10), ("pcmcia", 11), ("cBus", 12), ("mpi", 13), ("mpsa", 14), ("usb", 15))

class SystemStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("ok", 2), ("warning", 3), ("failed", 4))

class MemoryAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class ThermUnits(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("degreesF", 3), ("degreesC", 4), ("tempRelative", 5))

class PowerUnits(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("milliVoltsDC", 3), ("milliVoltsAC", 4), ("voltsDC", 5), ("voltsAC", 6), ("milliAmpsDC", 7), ("milliAmpsAC", 8), ("ampsDC", 9), ("ampsAC", 10), ("relative", 11))

class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

mib_extensions_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18)).setLabel("mib-extensions-1")
svrSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22))
svrBaseSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1))
svrSysMibInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 1))
svrBaseSysDescr = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2))
svrProcessors = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3))
svrMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4))
svrBuses = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5))
svrDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6))
svrConsoleKeyboard = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 4))
svrConsoleDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5))
svrConsolePointDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 6))
svrPhysicalConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7))
svrEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8))
svrThermalSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1))
svrCoolingSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2))
svrPowerSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3))
svrSysMibMajorRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSysMibMajorRev.setStatus('mandatory')
svrSysMibMinorRev = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSysMibMinorRev.setStatus('mandatory')
svrSystemFamily = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("x86", 3), ("alpha", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemFamily.setStatus('mandatory')
svrSystemModel = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemModel.setStatus('mandatory')
svrSystemDescr = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemDescr.setStatus('mandatory')
svrSystemBoardFruIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemBoardFruIndex.setStatus('mandatory')
svrSystemOCPDisplay = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrSystemOCPDisplay.setStatus('mandatory')
svrSystemBootedOS = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("windowsNT", 3), ("netWare", 4), ("scoUnix", 5), ("digitalUnix", 6), ("openVms", 7), ("windows", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemBootedOS.setStatus('mandatory')
svrSystemBootedOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemBootedOSVersion.setStatus('mandatory')
svrSystemShutdownReason = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSystemShutdownReason.setStatus('mandatory')
svrSystemRemoteMgrNum = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrSystemRemoteMgrNum.setStatus('mandatory')
svrFirmwareTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 10), )
if mibBuilder.loadTexts: svrFirmwareTable.setStatus('mandatory')
svrFirmwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 10, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrFirmwareIndex"))
if mibBuilder.loadTexts: svrFirmwareEntry.setStatus('mandatory')
svrFirmwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFirmwareIndex.setStatus('mandatory')
svrFirmwareDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFirmwareDescr.setStatus('mandatory')
svrFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFirmwareRev.setStatus('mandatory')
svrFwSymbolTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 11), )
if mibBuilder.loadTexts: svrFwSymbolTable.setStatus('mandatory')
svrFwSymbolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 11, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrFwSymbolName"))
if mibBuilder.loadTexts: svrFwSymbolEntry.setStatus('mandatory')
svrFwSymbolName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 11, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFwSymbolName.setStatus('mandatory')
svrFwSymbolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 2, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFwSymbolValue.setStatus('mandatory')
svrCpuPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrCpuPollInterval.setStatus('mandatory')
svrCpuMinPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuMinPollInterval.setStatus('mandatory')
svrCpuTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3), )
if mibBuilder.loadTexts: svrCpuTable.setStatus('mandatory')
svrCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrCpuIndex"))
if mibBuilder.loadTexts: svrCpuEntry.setStatus('mandatory')
svrCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuIndex.setStatus('mandatory')
svrCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("i386", 3), ("i486", 4), ("pentium", 5), ("pentiumPro", 6), ("alpha21064", 7), ("alpha21164", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuType.setStatus('mandatory')
svrCpuManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuManufacturer.setStatus('mandatory')
svrCpuRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuRevision.setStatus('mandatory')
svrCpuFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuFruIndex.setStatus('mandatory')
svrCpuSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuSpeed.setStatus('mandatory')
svrCpuUtilCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuUtilCurrent.setStatus('mandatory')
svrCpuAvgNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuAvgNextIndex.setStatus('mandatory')
svrCpuHrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuHrIndex.setStatus('mandatory')
svrCpuAvgTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4), )
if mibBuilder.loadTexts: svrCpuAvgTable.setStatus('mandatory')
svrCpuAvgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrCpuIndex"), (0, "SVRSYS-MIB", "svrCpuAvgIndex"))
if mibBuilder.loadTexts: svrCpuAvgEntry.setStatus('mandatory')
svrCpuAvgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuAvgIndex.setStatus('mandatory')
svrCpuAvgInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrCpuAvgInterval.setStatus('mandatory')
svrCpuAvgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("underCreation", 1), ("rowInvalid", 2), ("rowEnabled", 3), ("rowDisabled", 4), ("rowError", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrCpuAvgStatus.setStatus('mandatory')
svrCpuAvgPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4, 1, 4), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrCpuAvgPersist.setStatus('mandatory')
svrCpuAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuAvgValue.setStatus('mandatory')
svrCpuCacheTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5), )
if mibBuilder.loadTexts: svrCpuCacheTable.setStatus('mandatory')
svrCpuCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrCpuIndex"), (0, "SVRSYS-MIB", "svrCpuCacheIndex"))
if mibBuilder.loadTexts: svrCpuCacheEntry.setStatus('mandatory')
svrCpuCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuCacheIndex.setStatus('mandatory')
svrCpuCacheLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("primary", 3), ("secondary", 4), ("tertiary", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuCacheLevel.setStatus('mandatory')
svrCpuCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("internalI", 3), ("internalD", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuCacheType.setStatus('mandatory')
svrCpuCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1, 4), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuCacheSize.setStatus('mandatory')
svrCpuCacheSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuCacheSpeed.setStatus('mandatory')
svrCpuCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrCpuCacheStatus.setStatus('mandatory')
svrPhysicalMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 1), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPhysicalMemorySize.setStatus('mandatory')
svrPhysicalMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 2), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPhysicalMemoryFree.setStatus('mandatory')
svrPagingMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 3), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPagingMemorySize.setStatus('mandatory')
svrPagingMemoryFree = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 4), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPagingMemoryFree.setStatus('mandatory')
svrMemComponentTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5), )
if mibBuilder.loadTexts: svrMemComponentTable.setStatus('mandatory')
svrMemComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrMemIndex"))
if mibBuilder.loadTexts: svrMemComponentEntry.setStatus('mandatory')
svrMemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemIndex.setStatus('optional')
svrMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("systemMemory", 3), ("shadowMemory", 4), ("videoMemory", 5), ("flashMemory", 6), ("nvram", 7), ("expansionRam", 8), ("expansionROM", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemType.setStatus('optional')
svrMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 3), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemSize.setStatus('optional')
svrMemStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 4), MemoryAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemStartAddress.setStatus('optional')
svrMemPhysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("systemBoard", 3), ("memoryBoard", 4), ("processorBoard", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemPhysLocation.setStatus('mandatory')
svrMemEdcType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("none", 3), ("parity", 4), ("singleBitECC", 5), ("multiBitECC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemEdcType.setStatus('mandatory')
svrMemElementSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementSlots.setStatus('mandatory')
svrMemElementSlotsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementSlotsUsed.setStatus('mandatory')
svrMemInterleafFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemInterleafFactor.setStatus('mandatory')
svrMemInterleafElement = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemInterleafElement.setStatus('mandatory')
svrMemFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemFruIndex.setStatus('mandatory')
svrMemElementTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6), )
if mibBuilder.loadTexts: svrMemElementTable.setStatus('mandatory')
svrMemElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrMemIndex"), (0, "SVRSYS-MIB", "svrMemElementIndex"))
if mibBuilder.loadTexts: svrMemElementEntry.setStatus('mandatory')
svrMemElementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementIndex.setStatus('mandatory')
svrMemElementType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("nonremoveable", 3), ("simm", 4), ("dimm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementType.setStatus('mandatory')
svrMemElementSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementSlotNo.setStatus('mandatory')
svrMemElementWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementWidth.setStatus('mandatory')
svrMemElementDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 5), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementDepth.setStatus('mandatory')
svrMemElementSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementSpeed.setStatus('mandatory')
svrMemElementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 4, 6, 1, 7), SystemStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrMemElementStatus.setStatus('mandatory')
svrBusCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrBusCount.setStatus('mandatory')
svrBusTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 2), )
if mibBuilder.loadTexts: svrBusTable.setStatus('mandatory')
svrBusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 2, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrBusIndex"))
if mibBuilder.loadTexts: svrBusEntry.setStatus('mandatory')
svrBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrBusIndex.setStatus('mandatory')
svrBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 2, 1, 2), BusTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrBusType.setStatus('mandatory')
svrBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrBusNumber.setStatus('mandatory')
svrBusSlotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrBusSlotCount.setStatus('mandatory')
svrLogicalSlotTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3), )
if mibBuilder.loadTexts: svrLogicalSlotTable.setStatus('mandatory')
svrLogicalSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrBusIndex"), (0, "SVRSYS-MIB", "svrLogicalSlotNumber"))
if mibBuilder.loadTexts: svrLogicalSlotEntry.setStatus('mandatory')
svrLogicalSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrLogicalSlotNumber.setStatus('mandatory')
svrLogicalSlotDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrLogicalSlotDescr.setStatus('mandatory')
svrLogicalSlotDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrLogicalSlotDeviceID.setStatus('mandatory')
svrLogicalSlotVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrLogicalSlotVendor.setStatus('mandatory')
svrLogicalSlotRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrLogicalSlotRevision.setStatus('mandatory')
svrLogicalSlotFnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrLogicalSlotFnCount.setStatus('mandatory')
svrSlotFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 4), )
if mibBuilder.loadTexts: svrSlotFunctionTable.setStatus('mandatory')
svrSlotFunctionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 4, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrBusIndex"), (0, "SVRSYS-MIB", "svrLogicalSlotNumber"), (0, "SVRSYS-MIB", "svrSlotFnIndex"))
if mibBuilder.loadTexts: svrSlotFunctionEntry.setStatus('mandatory')
svrSlotFnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSlotFnIndex.setStatus('mandatory')
svrSlotFnDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSlotFnDevType.setStatus('mandatory')
svrSlotFnRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 5, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSlotFnRevision.setStatus('mandatory')
svrDeviceCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDeviceCount.setStatus('mandatory')
svrSerialPortCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSerialPortCount.setStatus('mandatory')
svrParallelPortCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrParallelPortCount.setStatus('mandatory')
svrKeybdHrIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrKeybdHrIndex.setStatus('mandatory')
svrKeybdDescr = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrKeybdDescr.setStatus('mandatory')
svrVideoHrIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoHrIndex.setStatus('mandatory')
svrVideoDescr = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoDescr.setStatus('mandatory')
svrVideoXRes = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoXRes.setStatus('mandatory')
svrVideoYRes = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoYRes.setStatus('mandatory')
svrVideoNumColor = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoNumColor.setStatus('mandatory')
svrVideoRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoRefreshRate.setStatus('mandatory')
svrVideoScanMode = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("interlaced", 2), ("nonInterlaced", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoScanMode.setStatus('mandatory')
svrVideoMemory = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 5, 8), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrVideoMemory.setStatus('mandatory')
svrPointingHrIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPointingHrIndex.setStatus('mandatory')
svrPointingDescr = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPointingDescr.setStatus('mandatory')
svrNumButtons = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrNumButtons.setStatus('mandatory')
svrSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 7), )
if mibBuilder.loadTexts: svrSerialPortTable.setStatus('mandatory')
svrSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 7, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrSerialIndex"))
if mibBuilder.loadTexts: svrSerialPortEntry.setStatus('mandatory')
svrSerialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSerialIndex.setStatus('mandatory')
svrSerialPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSerialPortDescr.setStatus('mandatory')
svrSerialHrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrSerialHrIndex.setStatus('mandatory')
svrParallelPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 8), )
if mibBuilder.loadTexts: svrParallelPortTable.setStatus('mandatory')
svrParallelPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 8, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrParallelIndex"))
if mibBuilder.loadTexts: svrParallelPortEntry.setStatus('mandatory')
svrParallelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrParallelIndex.setStatus('mandatory')
svrParallelPortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrParallelPortDescr.setStatus('mandatory')
svrParallelHrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrParallelHrIndex.setStatus('mandatory')
svrDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9), )
if mibBuilder.loadTexts: svrDeviceTable.setStatus('mandatory')
svrDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrDevIndex"))
if mibBuilder.loadTexts: svrDeviceEntry.setStatus('mandatory')
svrDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevIndex.setStatus('mandatory')
svrDevDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevDescr.setStatus('mandatory')
svrDevBusInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 3), BusTypes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevBusInterfaceType.setStatus('mandatory')
svrDevBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevBusNumber.setStatus('mandatory')
svrDevSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevSlotNumber.setStatus('mandatory')
svrDevFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevFruIndex.setStatus('mandatory')
svrDevCPUAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevCPUAffinity.setStatus('mandatory')
svrDevHrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevHrIndex.setStatus('mandatory')
svrDevInterruptTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10), )
if mibBuilder.loadTexts: svrDevInterruptTable.setStatus('mandatory')
svrDevIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrDevIndex"), (0, "SVRSYS-MIB", "svrDevIntIndex"))
if mibBuilder.loadTexts: svrDevIntEntry.setStatus('mandatory')
svrDevIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevIntIndex.setStatus('mandatory')
svrDevIntLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevIntLevel.setStatus('mandatory')
svrDevIntVector = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevIntVector.setStatus('mandatory')
svrDevIntShared = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10, 1, 4), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevIntShared.setStatus('mandatory')
svrDevIntTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level", 1), ("latch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevIntTrigger.setStatus('mandatory')
svrDevMemTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 11), )
if mibBuilder.loadTexts: svrDevMemTable.setStatus('mandatory')
svrDevMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 11, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrDevIndex"), (0, "SVRSYS-MIB", "svrDevMemIndex"))
if mibBuilder.loadTexts: svrDevMemEntry.setStatus('mandatory')
svrDevMemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevMemIndex.setStatus('mandatory')
svrDevMemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 11, 1, 2), MemoryAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevMemAddress.setStatus('mandatory')
svrDevMemLength = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevMemLength.setStatus('mandatory')
svrDevMemMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("memoryMapped", 3), ("ioSpaceMapped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevMemMapping.setStatus('mandatory')
svrDevDmaTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 12), )
if mibBuilder.loadTexts: svrDevDmaTable.setStatus('mandatory')
svrDevDmaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 12, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrDevIndex"), (0, "SVRSYS-MIB", "svrDevDmaIndex"))
if mibBuilder.loadTexts: svrDevDmaEntry.setStatus('mandatory')
svrDevDmaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevDmaIndex.setStatus('mandatory')
svrDevDmaChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 6, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrDevDmaChannel.setStatus('mandatory')
svrChassisType = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("desktop", 3), ("tower", 4), ("miniTower", 5), ("rackMount", 6), ("laptop", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrChassisType.setStatus('mandatory')
svrChassisFruIndex = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrChassisFruIndex.setStatus('mandatory')
svrFruTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3), )
if mibBuilder.loadTexts: svrFruTable.setStatus('mandatory')
svrFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrFruIndex"))
if mibBuilder.loadTexts: svrFruEntry.setStatus('mandatory')
svrFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruIndex.setStatus('mandatory')
svrFruType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("motherBoard", 3), ("processor", 4), ("memoryCard", 5), ("memoryModule", 6), ("peripheralDevice", 7), ("systemBusBridge", 8), ("powerSupply", 9), ("chassis", 10), ("fan", 11), ("ioCard", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruType.setStatus('mandatory')
svrFruDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrFruDescr.setStatus('mandatory')
svrFruVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruVendor.setStatus('mandatory')
svrFruPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruPartNumber.setStatus('mandatory')
svrFruRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruRevision.setStatus('mandatory')
svrFruFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruFirmwareRevision.setStatus('mandatory')
svrFruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruSerialNumber.setStatus('mandatory')
svrFruAssetNo = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrFruAssetNo.setStatus('mandatory')
svrFruClass = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 7, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("currentBoardInSlot", 3), ("priorBoardInSlot", 4), ("parentBoard", 5), ("priorParentBoard", 6), ("priorParentSystem", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFruClass.setStatus('mandatory')
svrThermalSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThermalSensorCount.setStatus('mandatory')
svrThermalSensorTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2), )
if mibBuilder.loadTexts: svrThermalSensorTable.setStatus('mandatory')
svrThermalSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrThSensorIndex"))
if mibBuilder.loadTexts: svrThermalSensorEntry.setStatus('mandatory')
svrThSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorIndex.setStatus('mandatory')
svrThSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrThSensorLocation.setStatus('mandatory')
svrThSensorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorReading.setStatus('mandatory')
svrThSensorReadingUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 4), ThermUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorReadingUnits.setStatus('mandatory')
svrThSensorLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorLowThresh.setStatus('mandatory')
svrThSensorHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorHighThresh.setStatus('mandatory')
svrThSensorShutSoonThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorShutSoonThresh.setStatus('mandatory')
svrThSensorShutNowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorShutNowThresh.setStatus('mandatory')
svrThSensorThreshUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 9), ThermUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorThreshUnits.setStatus('mandatory')
svrThSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("low", 3), ("lowWarning", 4), ("statusOk", 5), ("highWarning", 6), ("high", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorStatus.setStatus('mandatory')
svrThSensorFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrThSensorFruIndex.setStatus('mandatory')
svrFanCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFanCount.setStatus('mandatory')
svrFanTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2), )
if mibBuilder.loadTexts: svrFanTable.setStatus('mandatory')
svrFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrFanIndex"))
if mibBuilder.loadTexts: svrFanEntry.setStatus('mandatory')
svrFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFanIndex.setStatus('mandatory')
svrFanLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrFanLocation.setStatus('mandatory')
svrFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("running", 2), ("backup", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFanStatus.setStatus('mandatory')
svrFanBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFanBackup.setStatus('mandatory')
svrFanFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrFanFruIndex.setStatus('mandatory')
svrPowerRedunEnable = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 1), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerRedunEnable.setStatus('mandatory')
svrPowerSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorCount.setStatus('mandatory')
svrPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSupplyCount.setStatus('mandatory')
svrPowerSensorTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4), )
if mibBuilder.loadTexts: svrPowerSensorTable.setStatus('mandatory')
svrPowerSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrPowerSensorIndex"))
if mibBuilder.loadTexts: svrPowerSensorEntry.setStatus('mandatory')
svrPowerSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorIndex.setStatus('mandatory')
svrPowerSensorLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: svrPowerSensorLocation.setStatus('mandatory')
svrPowerSensorRating = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorRating.setStatus('mandatory')
svrPowerSensorReading = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorReading.setStatus('mandatory')
svrPowerSensorReadingUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 5), PowerUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorReadingUnits.setStatus('mandatory')
svrPowerSensorNeedPwrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorNeedPwrThresh.setStatus('mandatory')
svrPowerSensorLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorLowThresh.setStatus('mandatory')
svrPowerSensorHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorHighThresh.setStatus('mandatory')
svrPowerSensorShutNowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorShutNowThresh.setStatus('mandatory')
svrPowerSensorThreshUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 10), PowerUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorThreshUnits.setStatus('mandatory')
svrPowerSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("low", 3), ("lowWarning", 4), ("statusOk", 5), ("highWarning", 6), ("high", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorStatus.setStatus('mandatory')
svrPowerSensorFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSensorFruIndex.setStatus('mandatory')
svrPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 5), )
if mibBuilder.loadTexts: svrPowerSupplyTable.setStatus('mandatory')
svrPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 5, 1), ).setIndexNames((0, "SVRSYS-MIB", "svrPowerSupplyIndex"))
if mibBuilder.loadTexts: svrPowerSupplyEntry.setStatus('mandatory')
svrPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSupplyIndex.setStatus('mandatory')
svrPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("running", 2), ("backup", 3), ("warning", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSupplyStatus.setStatus('mandatory')
svrPowerSupplyFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 22, 1, 8, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svrPowerSupplyFruIndex.setStatus('mandatory')
mibBuilder.exportSymbols("SVRSYS-MIB", svrKeybdHrIndex=svrKeybdHrIndex, svrDevInterruptTable=svrDevInterruptTable, svrSystemModel=svrSystemModel, svrFanStatus=svrFanStatus, svrCpuCacheTable=svrCpuCacheTable, svrPowerSensorCount=svrPowerSensorCount, svrCpuAvgInterval=svrCpuAvgInterval, svrMemElementEntry=svrMemElementEntry, svrCpuCacheSize=svrCpuCacheSize, svrThSensorShutSoonThresh=svrThSensorShutSoonThresh, svrLogicalSlotEntry=svrLogicalSlotEntry, svrThSensorReading=svrThSensorReading, ThermUnits=ThermUnits, svrFruDescr=svrFruDescr, svrFruVendor=svrFruVendor, svrVideoHrIndex=svrVideoHrIndex, SystemStatus=SystemStatus, svrFirmwareRev=svrFirmwareRev, svrFwSymbolName=svrFwSymbolName, svrThSensorHighThresh=svrThSensorHighThresh, svrCpuIndex=svrCpuIndex, svrSystemBootedOS=svrSystemBootedOS, svrPhysicalMemorySize=svrPhysicalMemorySize, svrSerialPortTable=svrSerialPortTable, svrMemElementType=svrMemElementType, KBytes=KBytes, svrPagingMemoryFree=svrPagingMemoryFree, svrConsolePointDevice=svrConsolePointDevice, svrSystemDescr=svrSystemDescr, svrSystemBootedOSVersion=svrSystemBootedOSVersion, svrDevFruIndex=svrDevFruIndex, svrDevBusNumber=svrDevBusNumber, svrDevDmaEntry=svrDevDmaEntry, svrFruTable=svrFruTable, svrPowerSupplyIndex=svrPowerSupplyIndex, svrVideoYRes=svrVideoYRes, svrConsoleKeyboard=svrConsoleKeyboard, svrCpuAvgIndex=svrCpuAvgIndex, svrParallelPortEntry=svrParallelPortEntry, svrVideoScanMode=svrVideoScanMode, svrDevIntTrigger=svrDevIntTrigger, svrCpuCacheType=svrCpuCacheType, svrSystemRemoteMgrNum=svrSystemRemoteMgrNum, svrPowerSensorStatus=svrPowerSensorStatus, svrThSensorStatus=svrThSensorStatus, svrBusCount=svrBusCount, svrLogicalSlotDescr=svrLogicalSlotDescr, svrDeviceEntry=svrDeviceEntry, svrCpuPollInterval=svrCpuPollInterval, svrSysMibMajorRev=svrSysMibMajorRev, svrMemElementIndex=svrMemElementIndex, svrDevSlotNumber=svrDevSlotNumber, svrChassisFruIndex=svrChassisFruIndex, mib_extensions_1=mib_extensions_1, dec=dec, svrBaseSysDescr=svrBaseSysDescr, svrPowerSensorEntry=svrPowerSensorEntry, svrSerialPortCount=svrSerialPortCount, svrCpuManufacturer=svrCpuManufacturer, svrVideoNumColor=svrVideoNumColor, PowerUnits=PowerUnits, svrDeviceTable=svrDeviceTable, svrDevIntVector=svrDevIntVector, svrMemElementSlotsUsed=svrMemElementSlotsUsed, svrSystem=svrSystem, svrCpuType=svrCpuType, svrBusIndex=svrBusIndex, svrSerialPortEntry=svrSerialPortEntry, svrCpuHrIndex=svrCpuHrIndex, svrConsoleDisplay=svrConsoleDisplay, svrThSensorFruIndex=svrThSensorFruIndex, svrMemElementWidth=svrMemElementWidth, svrPowerSensorNeedPwrThresh=svrPowerSensorNeedPwrThresh, svrFanLocation=svrFanLocation, svrPagingMemorySize=svrPagingMemorySize, svrMemInterleafElement=svrMemInterleafElement, svrBusNumber=svrBusNumber, svrMemStartAddress=svrMemStartAddress, svrFruRevision=svrFruRevision, svrBuses=svrBuses, svrVideoDescr=svrVideoDescr, svrDevIntEntry=svrDevIntEntry, svrMemPhysLocation=svrMemPhysLocation, svrSysMibMinorRev=svrSysMibMinorRev, svrSystemBoardFruIndex=svrSystemBoardFruIndex, svrPhysicalMemoryFree=svrPhysicalMemoryFree, svrPowerSensorHighThresh=svrPowerSensorHighThresh, svrFruIndex=svrFruIndex, svrPhysicalConfiguration=svrPhysicalConfiguration, svrFirmwareDescr=svrFirmwareDescr, svrCpuCacheLevel=svrCpuCacheLevel, svrCpuEntry=svrCpuEntry, svrSlotFunctionTable=svrSlotFunctionTable, svrPowerSensorFruIndex=svrPowerSensorFruIndex, svrSlotFnRevision=svrSlotFnRevision, svrCpuCacheSpeed=svrCpuCacheSpeed, svrCpuRevision=svrCpuRevision, svrCpuUtilCurrent=svrCpuUtilCurrent, svrVideoXRes=svrVideoXRes, svrFruEntry=svrFruEntry, svrMemElementSpeed=svrMemElementSpeed, svrFanCount=svrFanCount, svrParallelPortTable=svrParallelPortTable, svrFanBackup=svrFanBackup, Boolean=Boolean, svrLogicalSlotTable=svrLogicalSlotTable, svrParallelPortCount=svrParallelPortCount, svrBaseSystem=svrBaseSystem, svrPowerSensorRating=svrPowerSensorRating, svrThSensorReadingUnits=svrThSensorReadingUnits, svrDevMemIndex=svrDevMemIndex, BusTypes=BusTypes, svrCpuAvgValue=svrCpuAvgValue, svrCpuCacheEntry=svrCpuCacheEntry, svrDevMemMapping=svrDevMemMapping, svrFruPartNumber=svrFruPartNumber, svrBusTable=svrBusTable, svrFanFruIndex=svrFanFruIndex, svrPowerSensorReadingUnits=svrPowerSensorReadingUnits, svrMemSize=svrMemSize, svrDevIntShared=svrDevIntShared, svrFruFirmwareRevision=svrFruFirmwareRevision, svrCpuMinPollInterval=svrCpuMinPollInterval, svrCpuAvgEntry=svrCpuAvgEntry, svrPowerRedunEnable=svrPowerRedunEnable, svrSerialIndex=svrSerialIndex, svrSystemFamily=svrSystemFamily, svrCpuAvgPersist=svrCpuAvgPersist, svrDevIntIndex=svrDevIntIndex, svrThSensorShutNowThresh=svrThSensorShutNowThresh, svrLogicalSlotFnCount=svrLogicalSlotFnCount, svrCpuCacheStatus=svrCpuCacheStatus, svrEnvironment=svrEnvironment, svrDevIntLevel=svrDevIntLevel, svrDevCPUAffinity=svrDevCPUAffinity, svrBusType=svrBusType, svrLogicalSlotDeviceID=svrLogicalSlotDeviceID, svrMemType=svrMemType, svrDevDmaChannel=svrDevDmaChannel, svrBusEntry=svrBusEntry, svrThermalSensorEntry=svrThermalSensorEntry, svrDevDmaTable=svrDevDmaTable, svrSlotFnDevType=svrSlotFnDevType, svrPowerSensorLowThresh=svrPowerSensorLowThresh, svrChassisType=svrChassisType, svrDevMemLength=svrDevMemLength, svrPowerSensorReading=svrPowerSensorReading, svrFanTable=svrFanTable, svrThSensorIndex=svrThSensorIndex, svrPowerSensorThreshUnits=svrPowerSensorThreshUnits, svrParallelHrIndex=svrParallelHrIndex, svrPowerSystem=svrPowerSystem, svrDevices=svrDevices, svrDevIndex=svrDevIndex, svrMemElementSlots=svrMemElementSlots, svrCpuCacheIndex=svrCpuCacheIndex, svrParallelPortDescr=svrParallelPortDescr, svrThSensorThreshUnits=svrThSensorThreshUnits, svrCpuAvgTable=svrCpuAvgTable, svrMemElementStatus=svrMemElementStatus, svrFruType=svrFruType, svrSerialHrIndex=svrSerialHrIndex, svrMemEdcType=svrMemEdcType, svrFirmwareIndex=svrFirmwareIndex, svrSerialPortDescr=svrSerialPortDescr, svrFruAssetNo=svrFruAssetNo, svrCpuTable=svrCpuTable, svrLogicalSlotRevision=svrLogicalSlotRevision, svrDeviceCount=svrDeviceCount, svrPowerSupplyEntry=svrPowerSupplyEntry, svrCpuAvgNextIndex=svrCpuAvgNextIndex, MemoryAddress=MemoryAddress, svrParallelIndex=svrParallelIndex, svrProcessors=svrProcessors, svrMemComponentEntry=svrMemComponentEntry, ema=ema, svrMemory=svrMemory, svrFwSymbolValue=svrFwSymbolValue, svrVideoRefreshRate=svrVideoRefreshRate, svrLogicalSlotVendor=svrLogicalSlotVendor, svrDevBusInterfaceType=svrDevBusInterfaceType, svrVideoMemory=svrVideoMemory, svrDevMemEntry=svrDevMemEntry, svrDevMemTable=svrDevMemTable, svrMemComponentTable=svrMemComponentTable, svrSlotFnIndex=svrSlotFnIndex, svrDevHrIndex=svrDevHrIndex, svrDevMemAddress=svrDevMemAddress, svrCoolingSystem=svrCoolingSystem, svrMemElementTable=svrMemElementTable, svrLogicalSlotNumber=svrLogicalSlotNumber, svrPointingDescr=svrPointingDescr, svrMemElementSlotNo=svrMemElementSlotNo, svrThermalSensorCount=svrThermalSensorCount, svrFirmwareTable=svrFirmwareTable, svrSlotFunctionEntry=svrSlotFunctionEntry, svrPointingHrIndex=svrPointingHrIndex, svrPowerSupplyTable=svrPowerSupplyTable, svrFanEntry=svrFanEntry, svrPowerSupplyFruIndex=svrPowerSupplyFruIndex, svrCpuAvgStatus=svrCpuAvgStatus, svrMemIndex=svrMemIndex, svrFruSerialNumber=svrFruSerialNumber, svrThSensorLocation=svrThSensorLocation, svrCpuSpeed=svrCpuSpeed, svrFirmwareEntry=svrFirmwareEntry, svrFwSymbolTable=svrFwSymbolTable, svrPowerSensorIndex=svrPowerSensorIndex, svrNumButtons=svrNumButtons, svrFanIndex=svrFanIndex, svrCpuFruIndex=svrCpuFruIndex, svrFwSymbolEntry=svrFwSymbolEntry, svrMemInterleafFactor=svrMemInterleafFactor, svrThSensorLowThresh=svrThSensorLowThresh, svrPowerSupplyCount=svrPowerSupplyCount, svrDevDescr=svrDevDescr, svrPowerSensorLocation=svrPowerSensorLocation, svrPowerSensorTable=svrPowerSensorTable, svrBusSlotCount=svrBusSlotCount, svrSysMibInfo=svrSysMibInfo, svrKeybdDescr=svrKeybdDescr, svrPowerSensorShutNowThresh=svrPowerSensorShutNowThresh, svrMemElementDepth=svrMemElementDepth, svrThermalSystem=svrThermalSystem, svrThermalSensorTable=svrThermalSensorTable, svrFruClass=svrFruClass, svrMemFruIndex=svrMemFruIndex, svrDevDmaIndex=svrDevDmaIndex, svrSystemOCPDisplay=svrSystemOCPDisplay, svrSystemShutdownReason=svrSystemShutdownReason, svrPowerSupplyStatus=svrPowerSupplyStatus)
