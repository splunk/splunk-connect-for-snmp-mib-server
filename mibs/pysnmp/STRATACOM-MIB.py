#
# PySNMP MIB module STRATACOM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STRATACOM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:04:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Integer32, Gauge32, iso, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, ObjectIdentity, ModuleIdentity, Unsigned32, IpAddress, Counter32, NotificationType, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "Gauge32", "iso", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "IpAddress", "Counter32", "NotificationType", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

stratacom = MibIdentifier((1, 3, 6, 1, 4, 1, 351))
strmErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 910))
snmpAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 100))
strmSwitchMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 100, 4))
switchInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 100, 4, 1))
switchServiceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 100, 4, 2))
switchConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 100, 4, 3))
switchShelf = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 100, 4, 4))
frServiceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1))
atmServiceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2))
voiceServiceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3))
trunkServiceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4))
shelfCnfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 100, 4, 4, 1))
switchIfTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1), )
if mibBuilder.loadTexts: switchIfTable.setStatus('mandatory')
switchIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1, 1), ).setIndexNames((0, "STRATACOM-MIB", "switchIfIndex"))
if mibBuilder.loadTexts: switchIfEntry.setStatus('mandatory')
switchIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchIfIndex.setStatus('mandatory')
switchIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfSlot.setStatus('mandatory')
switchIfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfPort.setStatus('mandatory')
switchIfSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfSubPort.setStatus('mandatory')
switchIfMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 18, 22, 30, 39))).clone(namedValues=NamedValues(("other", 1), ("ds1", 18), ("serialPort", 22), ("ds3", 30), ("sonet", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfMediaType.setStatus('mandatory')
switchIfService = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("frameRelay", 2), ("atmAccessPort", 3), ("voiceData", 4), ("fpRoutingTrk", 5), ("atmRoutingTrk", 6), ("atmAxisIntfTrk", 7), ("atmIPXAFIntfTrk", 8), ("atmFdrIntfTrk", 9), ("atmAPSIntfTrk", 10), ("imaRoutingTrunk", 11), ("physicalMedia", 12), ("atmVsiIntfTrk", 13), ("atmParIntfTrk", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchIfService.setStatus('mandatory')
switchIfAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("added", 6), ("deleted", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchIfAdmStatus.setStatus('mandatory')
switchIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("added", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchIfOperStatus.setStatus('mandatory')
switchIfPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchIfPhysPort.setStatus('mandatory')
switchIfPartiId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchIfPartiId.setStatus('mandatory')
switchIfCtrlerId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 1, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchIfCtrlerId.setStatus('mandatory')
frLportCnfTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1), )
if mibBuilder.loadTexts: frLportCnfTable.setStatus('mandatory')
frLportCnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1), ).setIndexNames((0, "STRATACOM-MIB", "frLportSlotIndex"), (0, "STRATACOM-MIB", "frLportPortIndex"))
if mibBuilder.loadTexts: frLportCnfEntry.setStatus('mandatory')
frLportSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportSlotIndex.setStatus('mandatory')
frLportPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportPortIndex.setStatus('mandatory')
frLportPortDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportPortDLCI.setStatus('mandatory')
frLportAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("modify", 3), ("writeOnly", 4), ("add", 5), ("delete", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportAdminStatus.setStatus('mandatory')
frLportOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inActive", 1), ("active", 2), ("looped", 3), ("failed", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportOperStatus.setStatus('mandatory')
frLportPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportPortSpeed.setStatus('mandatory')
frLportClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("looped", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportClockType.setStatus('mandatory')
frLportPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("atm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportPortType.setStatus('mandatory')
frLportVcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 252))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportVcCount.setStatus('mandatory')
frLportFirstVcPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportFirstVcPtr.setStatus('mandatory')
frLportAggrChCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportAggrChCnt.setStatus('mandatory')
frLportChSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s56k", 1), ("s64k", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportChSpeed.setStatus('mandatory')
frLportMaxTxQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportMaxTxQDepth.setStatus('mandatory')
frLportECNQThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportECNQThresh.setStatus('mandatory')
frLportDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportDEThresh.setStatus('mandatory')
frLportIDEMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportIDEMap.setStatus('mandatory')
frLportSigProt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("xdisabled", 1), ("lmi-asyn", 2), ("disabled", 3), ("lmi-noasyn", 4), ("uni-annexA", 5), ("uni-annexD", 6), ("nni-annexA", 7), ("nni-annexD", 8), ("auto-det", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportSigProt.setStatus('mandatory')
frLportNNIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportNNIStatus.setStatus('mandatory')
frLportAsynStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportAsynStatus.setStatus('mandatory')
frLportPolVerTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportPolVerTmr.setStatus('mandatory')
frLportErrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportErrThresh.setStatus('mandatory')
frLportMonEveCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportMonEveCnt.setStatus('mandatory')
frLportCommPri = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportCommPri.setStatus('mandatory')
frLportUpRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportUpRNR.setStatus('mandatory')
frLportLowRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportLowRNR.setStatus('mandatory')
frLportMinFrmFlgs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportMinFrmFlgs.setStatus('mandatory')
frLportOamThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportOamThresh.setStatus('mandatory')
frLportLinkTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportLinkTimer.setStatus('mandatory')
frLportPollCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportPollCycle.setStatus('mandatory')
frLportCLLMTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportCLLMTimer.setStatus('mandatory')
frLportEFCItoBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frLportEFCItoBECN.setStatus('mandatory')
frLportSrRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportSrRTS.setStatus('mandatory')
frLportSrDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportSrDTR.setStatus('mandatory')
frLportSrDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportSrDCD.setStatus('mandatory')
frLportSrCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportSrCTS.setStatus('mandatory')
frLportSrDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportSrDSR.setStatus('mandatory')
frLportLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportLoopBack.setStatus('mandatory')
frLportExtConFail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportExtConFail.setStatus('mandatory')
frLportStatTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2), )
if mibBuilder.loadTexts: frLportStatTable.setStatus('mandatory')
frLportStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1), ).setIndexNames((0, "STRATACOM-MIB", "frLportSlotIndex"), (0, "STRATACOM-MIB", "frLportPortIndex"))
if mibBuilder.loadTexts: frLportStatEntry.setStatus('mandatory')
frLportRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportRxBytes.setStatus('mandatory')
frLportRxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportRxFrms.setStatus('mandatory')
frLportTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportTxBytes.setStatus('mandatory')
frLportTxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportTxFrms.setStatus('mandatory')
frLportTxFrmsFecns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportTxFrmsFecns.setStatus('mandatory')
frLportTxFrmsBecns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportTxFrmsBecns.setStatus('mandatory')
frLportCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportCrcErrors.setStatus('mandatory')
frLportBadFmts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportBadFmts.setStatus('mandatory')
frLportAlgnErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportAlgnErrors.setStatus('mandatory')
frLportIllegLengths = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportIllegLengths.setStatus('mandatory')
frLportDmaOvruns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportDmaOvruns.setStatus('mandatory')
frLportStatEnqUnis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportStatEnqUnis.setStatus('mandatory')
frLportStatTxUnis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportStatTxUnis.setStatus('mandatory')
frLportUpdtTxUnis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportUpdtTxUnis.setStatus('mandatory')
frLportInvldReqCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportInvldReqCnts.setStatus('mandatory')
frLportToutCntUnis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportToutCntUnis.setStatus('mandatory')
frLportSeqnmErrUnis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportSeqnmErrUnis.setStatus('mandatory')
frLportUnknDlcis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportUnknDlcis.setStatus('mandatory')
frLportDeFrmsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportDeFrmsDrops.setStatus('mandatory')
frLportStatEnqNnis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportStatEnqNnis.setStatus('mandatory')
frLportStatRxNnis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportStatRxNnis.setStatus('mandatory')
frLportUpdtRxNnis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportUpdtRxNnis.setStatus('mandatory')
frLportToutCntNnis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportToutCntNnis.setStatus('mandatory')
frLportSeqnmErrNnis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportSeqnmErrNnis.setStatus('mandatory')
frLportCllmTxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportCllmTxFrms.setStatus('mandatory')
frLportCllmTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportCllmTxBytes.setStatus('mandatory')
frLportCllmRxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportCllmRxFrms.setStatus('mandatory')
frLportCllmRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportCllmRxBytes.setStatus('mandatory')
frLportCllmFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportCllmFailures.setStatus('mandatory')
frLportDscdQTxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportDscdQTxFrms.setStatus('mandatory')
frLportDscdQTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportDscdQTxBytes.setStatus('mandatory')
frLportLmiFailFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportLmiFailFrms.setStatus('mandatory')
frLportLmiFailBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frLportLmiFailBytes.setStatus('mandatory')
atmPortTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1), )
if mibBuilder.loadTexts: atmPortTable.setStatus('mandatory')
atmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1), ).setIndexNames((0, "STRATACOM-MIB", "atmPortSlot"), (0, "STRATACOM-MIB", "atmPortPort"))
if mibBuilder.loadTexts: atmPortEntry.setStatus('mandatory')
atmPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortSlot.setStatus('mandatory')
atmPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortPort.setStatus('mandatory')
atmPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("modify", 3), ("writeOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortAdminStatus.setStatus('mandatory')
atmPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("looped", 3), ("failed", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortOperStatus.setStatus('mandatory')
atmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortType.setStatus('mandatory')
atmPortIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("t3", 2), ("e3", 3), ("oc3-smf", 4), ("oc3-mmf", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortIfType.setStatus('mandatory')
atmPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortSpeed.setStatus('mandatory')
atmPortAxis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("t1", 2), ("e1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortAxis.setStatus('mandatory')
atmPortVcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortVcCount.setStatus('mandatory')
atmPortFirstVcPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortFirstVcPtr.setStatus('mandatory')
atmPortMetro = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortMetro.setStatus('mandatory')
atmPortMgmtProto = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("ilmi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortMgmtProto.setStatus('mandatory')
atmPortIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortIlmiVpi.setStatus('mandatory')
atmPortIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortIlmiVci.setStatus('mandatory')
atmPortIlmiPollEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortIlmiPollEnable.setStatus('mandatory')
atmPortIlmiTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortIlmiTrapEnable.setStatus('mandatory')
atmPortIlmiPollIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortIlmiPollIntrvl.setStatus('mandatory')
atmPortIlmiErrorThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortIlmiErrorThresh.setStatus('mandatory')
atmPortIlmiEventThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortIlmiEventThresh.setStatus('mandatory')
atmPortLmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLmiVpi.setStatus('mandatory')
atmPortLmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLmiVci.setStatus('mandatory')
atmPortLmiPollEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLmiPollEnable.setStatus('mandatory')
atmPortLmiStatEnqTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLmiStatEnqTimer.setStatus('mandatory')
atmPortLmiUpdStatTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLmiUpdStatTimer.setStatus('mandatory')
atmPortLmiStatEnqRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLmiStatEnqRetry.setStatus('mandatory')
atmPortLmiUpdStatRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLmiUpdStatRetry.setStatus('mandatory')
atmPortLmiPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortLmiPollTimer.setStatus('mandatory')
atmPortPercUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortPercUtil.setStatus('mandatory')
atmPortQueueTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 2), )
if mibBuilder.loadTexts: atmPortQueueTable.setStatus('mandatory')
atmPortQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 2, 1), ).setIndexNames((0, "STRATACOM-MIB", "atmPortSlot"), (0, "STRATACOM-MIB", "atmPortPort"), (0, "STRATACOM-MIB", "atmPortQueueIndex"))
if mibBuilder.loadTexts: atmPortQueueEntry.setStatus('mandatory')
atmPortQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortQueueIndex.setStatus('mandatory')
atmPortQueueAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modify", 1), ("writeOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortQueueAdminStatus.setStatus('mandatory')
atmPortQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("unused", 2), ("cbr", 3), ("abr", 4), ("vbr", 5), ("axis", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortQueueType.setStatus('mandatory')
atmPortQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortQueueDepth.setStatus('mandatory')
atmPortQueueClpHi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortQueueClpHi.setStatus('mandatory')
atmPortQueueClpLo = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortQueueClpLo.setStatus('mandatory')
atmPortQueueEfciTh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmPortQueueEfciTh.setStatus('mandatory')
atmPortQueueAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 1), ("always", 2), ("ok", 3), ("minGuar", 4), ("minSmooth", 5), ("minDelay", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortQueueAlgorithm.setStatus('mandatory')
atmPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3), )
if mibBuilder.loadTexts: atmPortStatTable.setStatus('mandatory')
atmPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1), ).setIndexNames((0, "STRATACOM-MIB", "atmPortSlot"), (0, "STRATACOM-MIB", "atmPortPort"))
if mibBuilder.loadTexts: atmPortStatEntry.setStatus('mandatory')
atmPortStatUnknVpiVcis = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatUnknVpiVcis.setStatus('mandatory')
atmPortStatBufferOvfls = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatBufferOvfls.setStatus('mandatory')
atmPortStatNonZeroGfcs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatNonZeroGfcs.setStatus('mandatory')
atmPortStatIsuDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatIsuDiscards.setStatus('mandatory')
atmPortStatIsuEmptys = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatIsuEmptys.setStatus('mandatory')
atmPortStatAisRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatAisRxs.setStatus('mandatory')
atmPortStatFerfRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatFerfRxs.setStatus('mandatory')
atmPortStatCellsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatCellsRxs.setStatus('mandatory')
atmPortStatClpRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatClpRxs.setStatus('mandatory')
atmPortStatEfciRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatEfciRxs.setStatus('mandatory')
atmPortStatBcmRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatBcmRxs.setStatus('mandatory')
atmPortStatCellsTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatCellsTxs.setStatus('mandatory')
atmPortStatOamRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatOamRxs.setStatus('mandatory')
atmPortStatPayldErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatPayldErrs.setStatus('mandatory')
atmPortStatClpTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatClpTxs.setStatus('mandatory')
atmPortStatEfciTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatEfciTxs.setStatus('mandatory')
atmPortStatHdrDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatHdrDiscards.setStatus('mandatory')
atmPortStatIlmiGetRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatIlmiGetRxs.setStatus('mandatory')
atmPortStatIlmiGetNextRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatIlmiGetNextRxs.setStatus('mandatory')
atmPortStatIlmiGetNextTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatIlmiGetNextTxs.setStatus('mandatory')
atmPortStatIlmiSetRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatIlmiSetRxs.setStatus('mandatory')
atmPortStatIlmiTrapRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatIlmiTrapRxs.setStatus('mandatory')
atmPortStatIlmiGetRspRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatIlmiGetRspRxs.setStatus('mandatory')
atmPortStatIlmiGetTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatIlmiGetTxs.setStatus('mandatory')
atmPortStatIlmiGetRspTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatIlmiGetRspTxs.setStatus('mandatory')
atmPortStatIlmiTrapTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatIlmiTrapTxs.setStatus('mandatory')
atmPortStatIlmiUnkRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatIlmiUnkRxs.setStatus('mandatory')
atmPortStatLmiStatTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatLmiStatTxs.setStatus('mandatory')
atmPortStatLmiUpdtStatTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatLmiUpdtStatTxs.setStatus('mandatory')
atmPortStatLmiStatAckTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatLmiStatAckTxs.setStatus('mandatory')
atmPortStatLmiStatEnqTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatLmiStatEnqTxs.setStatus('mandatory')
atmPortStatLmiStatEnqRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatLmiStatEnqRxs.setStatus('mandatory')
atmPortStatLmiStatRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatLmiStatRxs.setStatus('mandatory')
atmPortStatLmiUpdStatRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatLmiUpdStatRxs.setStatus('mandatory')
atmPortStatLmiStatAckRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 2, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmPortStatLmiStatAckRxs.setStatus('mandatory')
voiceChannelTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1), )
if mibBuilder.loadTexts: voiceChannelTable.setStatus('mandatory')
voiceChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1), ).setIndexNames((0, "STRATACOM-MIB", "voiceChannelSlotIndex"), (0, "STRATACOM-MIB", "voiceChannelChannelIndex"))
if mibBuilder.loadTexts: voiceChannelEntry.setStatus('mandatory')
voiceChannelSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceChannelSlotIndex.setStatus('mandatory')
voiceChannelChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceChannelChannelIndex.setStatus('mandatory')
voiceChannelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("create", 1), ("modify", 2), ("writeOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelAdminStatus.setStatus('mandatory')
voiceChannelEndptPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceChannelEndptPtr.setStatus('mandatory')
voiceChannelIf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("t1", 2), ("e1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceChannelIf.setStatus('mandatory')
voiceChannelAdapVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelAdapVoice.setStatus('mandatory')
voiceChannelDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inband", 1), ("pulse", 2), ("userConfigured", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelDialType.setStatus('mandatory')
voiceChannelDtSignallingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelDtSignallingDelay.setStatus('mandatory')
voiceChannelDtMinWink = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(120, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelDtMinWink.setStatus('mandatory')
voiceChannelDtPlayOutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelDtPlayOutDelay.setStatus('mandatory')
voiceChannelRecvSigABit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("xmitTransparent", 3), ("donotXmit", 4), ("revSigBit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelRecvSigABit.setStatus('mandatory')
voiceChannelRecvSigBBit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("xmitTransparent", 3), ("donotXmit", 4), ("revSigBit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelRecvSigBBit.setStatus('mandatory')
voiceChannelRecvSigCBit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("xmitTransparent", 3), ("donotXmit", 4), ("revSigBit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelRecvSigCBit.setStatus('mandatory')
voiceChannelRecvSigDBit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("xmitTransparent", 3), ("donotXmit", 4), ("revSigBit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelRecvSigDBit.setStatus('mandatory')
voiceChannelXmitSigABit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("xmitTransparent", 3), ("donotXmit", 4), ("revSigBit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelXmitSigABit.setStatus('mandatory')
voiceChannelXmitSigBBit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("xmitTransparent", 3), ("donotXmit", 4), ("revSigBit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelXmitSigBBit.setStatus('mandatory')
voiceChannelXmitSigCBit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("xmitTransparent", 3), ("donotXmit", 4), ("revSigBit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelXmitSigCBit.setStatus('mandatory')
voiceChannelXmitSigDBit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("xmitTransparent", 3), ("donotXmit", 4), ("revSigBit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelXmitSigDBit.setStatus('mandatory')
voiceChannelIfTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("userConfig", 1), ("unConfig", 2), ("noSig", 3), ("forceSig", 4), ("twoWireENM", 5), ("fourWireENM", 6), ("fXO", 7), ("fXSGS", 8), ("fXSLS", 9), ("dP0", 10), ("dPT", 11), ("rP0", 12), ("rPT", 13), ("sDP0", 14), ("dX", 15), ("eT0", 16), ("pLAR", 17), ("pLR", 18), ("rD", 19), ("r1", 20), ("sSDC5A", 21), ("r2Backward", 22), ("r2Forward", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelIfTypeName.setStatus('mandatory')
voiceChannelIfOnhkABit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("donotCare", 3), ("unKnown", 4), ("notUsed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelIfOnhkABit.setStatus('mandatory')
voiceChannelIfOnhkBBit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("donotCare", 3), ("unKnown", 4), ("notUsed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelIfOnhkBBit.setStatus('mandatory')
voiceChannelIfOnhkCBit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("donotCare", 3), ("unKnown", 4), ("notUsed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelIfOnhkCBit.setStatus('mandatory')
voiceChannelIfOnhkDBit = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("zero", 1), ("one", 2), ("donotCare", 3), ("unKnown", 4), ("notUsed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelIfOnhkDBit.setStatus('mandatory')
voiceChannelIfCondIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelIfCondIndex.setStatus('mandatory')
voiceChannelEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelEchoCancel.setStatus('mandatory')
voiceChannelEchoRtnLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelEchoRtnLoss.setStatus('mandatory')
voiceChannelEchoTone = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelEchoTone.setStatus('mandatory')
voiceChannelEchoConv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelEchoConv.setStatus('mandatory')
voiceChannelEchoNlp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelEchoNlp.setStatus('mandatory')
voiceChannelInGain = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelInGain.setStatus('mandatory')
voiceChannelOutGain = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelOutGain.setStatus('mandatory')
voiceChannelUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceChannelUtil.setStatus('mandatory')
connNextEndptIndex = MibScalar((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connNextEndptIndex.setStatus('mandatory')
errStatusLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errStatusLastIndex.setStatus('obsolete')
errStatusTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 3), )
if mibBuilder.loadTexts: errStatusTable.setStatus('deprecated')
errStatusTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 3, 1), ).setIndexNames((0, "STRATACOM-MIB", "errReqId"))
if mibBuilder.loadTexts: errStatusTableEntry.setStatus('deprecated')
errReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errReqId.setStatus('mandatory')
errCode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("success", 1), ("existErr", 2), ("syntaxErr", 3), ("resourceErr", 4), ("databaseLocked", 5), ("otherErr", 6), ("wrongType", 7), ("wrongLength", 8), ("wrongEncoding", 9), ("wrongValue", 10), ("noCreation", 11), ("inconsistentValue", 12), ("resourceUnavailable", 13), ("commitFailed", 14), ("undoFailed", 15), ("authorizationError", 16), ("notWritable", 17), ("inconsistentName", 18), ("featureDisabled", 19), ("m32Problem", 20), ("sarProblem", 21), ("bnmProblem", 22), ("ascUpdFailed", 23), ("lineEnabled", 24), ("lineDisabled", 25), ("lmMismatch", 26), ("lineHasPorts", 27), ("portEnabled", 28), ("portDisable", 29), ("portHasChan", 30), ("chanEnabled", 31), ("chanDisabled", 32), ("dlciEnabled", 33), ("dlciDisabled", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errCode.setStatus('mandatory')
errStatusDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: errStatusDesc.setStatus('mandatory')
connTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4), )
if mibBuilder.loadTexts: connTable.setStatus('mandatory')
connTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1), ).setIndexNames((0, "STRATACOM-MIB", "connIndex"))
if mibBuilder.loadTexts: connTableEntry.setStatus('mandatory')
connIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connIndex.setStatus('mandatory')
connLclEndptDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connLclEndptDesc.setStatus('mandatory')
connType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("frameRelay", 1), ("atf", 2), ("atm", 3), ("voice", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connType.setStatus('mandatory')
connOeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOeIndex.setStatus('mandatory')
connRmtEndptDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connRmtEndptDesc.setStatus('mandatory')
connMasterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMasterFlag.setStatus('mandatory')
connClassOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connClassOfService.setStatus('mandatory')
connGroupFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connGroupFlag.setStatus('mandatory')
connAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("modify", 3), ("writeOnly", 4), ("createGroup", 5), ("deleteGroup", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connAdminStatus.setStatus('mandatory')
connOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("okPendingDown", 2), ("down", 3), ("failed", 4), ("okPendingRoute", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connOperStatus.setStatus('mandatory')
connNoRouteFoundFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connNoRouteFoundFailure.setStatus('mandatory')
connBumpFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connBumpFailure.setStatus('mandatory')
connFirstEndptPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connFirstEndptPtr.setStatus('mandatory')
connCurrRouteDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCurrRouteDesc.setStatus('mandatory')
connPrefRouteDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connPrefRouteDesc.setStatus('mandatory')
connMstOSpacePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMstOSpacePkts.setStatus('mandatory')
connMstOSpaceCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMstOSpaceCells.setStatus('mandatory')
connMstOSpaceBdaCmax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMstOSpaceBdaCmax.setStatus('mandatory')
connMstOSpaceBdbCmax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMstOSpaceBdbCmax.setStatus('mandatory')
connSlvOSpacePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSlvOSpacePkts.setStatus('mandatory')
connSlvOSpaceCells = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSlvOSpaceCells.setStatus('mandatory')
connSlvOSpaceBdaCmax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSlvOSpaceBdaCmax.setStatus('mandatory')
connSlvOSpaceBdbCmax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connSlvOSpaceBdbCmax.setStatus('mandatory')
connIcaRTD = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connIcaRTD.setStatus('mandatory')
connGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 4, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connGroupDesc.setStatus('mandatory')
frEndptTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5), )
if mibBuilder.loadTexts: frEndptTable.setStatus('mandatory')
frEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1), ).setIndexNames((0, "STRATACOM-MIB", "frEndptIndex"))
if mibBuilder.loadTexts: frEndptEntry.setStatus('mandatory')
frEndptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptIndex.setStatus('mandatory')
frEndptDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptDesc.setStatus('mandatory')
frOtherEndptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frOtherEndptIndex.setStatus('mandatory')
frOtherEndptDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frOtherEndptDesc.setStatus('mandatory')
frEndptAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("create", 1), ("delete", 2), ("modify", 3), ("test", 4), ("writeOnly", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptAdminStatus.setStatus('mandatory')
frEndptOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("okPendingDown", 2), ("down", 3), ("failed", 4), ("inTest", 5), ("okPendingRoute", 6), ("okPendingDelete", 7), ("looped", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptOperStatus.setStatus('mandatory')
frNoRouteFoundFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNoRouteFoundFailure.setStatus('mandatory')
frBumpFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBumpFailure.setStatus('mandatory')
frEndPointFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndPointFailure.setStatus('mandatory')
frTestFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frTestFailure.setStatus('mandatory')
frConnPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frConnPtr.setStatus('mandatory')
frNextPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNextPtr.setStatus('mandatory')
frNextOnPortPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frNextOnPortPtr.setStatus('mandatory')
frEndptConnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptConnDesc.setStatus('mandatory')
frEndptTrkAvoidType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("satellite", 2), ("terrestrial", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptTrkAvoidType.setStatus('mandatory')
frEndptTrkAvoidZCS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptTrkAvoidZCS.setStatus('mandatory')
frEndptSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frameRelay", 1), ("atf", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptSubType.setStatus('mandatory')
frEndptBWClass = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptBWClass.setStatus('mandatory')
frEndptMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptMIR.setStatus('mandatory')
frEndptCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptCIR.setStatus('mandatory')
frEndptBc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptBc.setStatus('mandatory')
frEndptBe = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptBe.setStatus('mandatory')
frEndptVcQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptVcQSize.setStatus('mandatory')
frEndptPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptPIR.setStatus('mandatory')
frEndptCMAX = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptCMAX.setStatus('mandatory')
frEndptEcnQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptEcnQSize.setStatus('mandatory')
frEndptQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptQIR.setStatus('mandatory')
frEndptPercUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptPercUtil.setStatus('mandatory')
frEndptOeMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptOeMIR.setStatus('mandatory')
frEndptOeCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptOeCIR.setStatus('mandatory')
frEndptOeBc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptOeBc.setStatus('mandatory')
frEndptOeBe = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptOeBe.setStatus('mandatory')
frEndptOeVcQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3072000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptOeVcQSize.setStatus('mandatory')
frEndptOePIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptOePIR.setStatus('mandatory')
frEndptOeCMAX = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 57600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptOeCMAX.setStatus('mandatory')
frEndptOeEcnQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptOeEcnQSize.setStatus('mandatory')
frEndptOeQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptOeQIR.setStatus('mandatory')
frEndptOePercUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptOePercUtil.setStatus('mandatory')
frEndptEnableFST = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptEnableFST.setStatus('mandatory')
frEndptConnPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptConnPrio.setStatus('mandatory')
frEndptGroupFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptGroupFlag.setStatus('mandatory')
frEndptLocLpbkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptLocLpbkState.setStatus('mandatory')
frEndptLocRmtLpbkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptLocRmtLpbkState.setStatus('mandatory')
frEndptLpbkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptLpbkStatus.setStatus('mandatory')
frEndptTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("test", 1), ("testDelay", 2), ("testNoLoop", 3), ("testDelayNoLoop", 4), ("writeOnly", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptTestType.setStatus('mandatory')
frEndptRtdTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptRtdTestDelay.setStatus('mandatory')
frEndptGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 5, 1, 47), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndptGroupDesc.setStatus('mandatory')
frEndptStatTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6), )
if mibBuilder.loadTexts: frEndptStatTable.setStatus('mandatory')
frEndptStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1), ).setIndexNames((0, "STRATACOM-MIB", "frEndptIndex"))
if mibBuilder.loadTexts: frEndptStatEntry.setStatus('mandatory')
frEndptRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptRxBytes.setStatus('mandatory')
frEndptRxBytesDscds = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptRxBytesDscds.setStatus('mandatory')
frEndptRxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptRxFrms.setStatus('mandatory')
frEndptRxFrmsDscds = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptRxFrmsDscds.setStatus('mandatory')
frEndptRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptRxPkts.setStatus('mandatory')
frEndptRxPktsDscds = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptRxPktsDscds.setStatus('mandatory')
frEndptTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptTxBytes.setStatus('mandatory')
frEndptTxBytesDscds = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptTxBytesDscds.setStatus('mandatory')
frEndptTxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptTxFrms.setStatus('mandatory')
frEndptTxFrmsDscds = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptTxFrmsDscds.setStatus('mandatory')
frEndptTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptTxPkts.setStatus('mandatory')
frEndptTxFrmsFecns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptTxFrmsFecns.setStatus('mandatory')
frEndptTxFrmsBecns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptTxFrmsBecns.setStatus('mandatory')
frEndptSecInServices = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptSecInServices.setStatus('mandatory')
frEndptCongestMins = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptCongestMins.setStatus('mandatory')
frEndptRxFrmsDes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptRxFrmsDes.setStatus('mandatory')
frEndptRxBytesDes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptRxBytesDes.setStatus('mandatory')
frEndptTxFrmsDes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptTxFrmsDes.setStatus('mandatory')
frEndptRxFrmsDeDscds = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptRxFrmsDeDscds.setStatus('mandatory')
frEndptRxFrmsCirs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptRxFrmsCirs.setStatus('mandatory')
frEndptRxBytesCirs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptRxBytesCirs.setStatus('mandatory')
frEndptTxFrmsCirs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptTxFrmsCirs.setStatus('mandatory')
frEndptTxBytesCirs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptTxBytesCirs.setStatus('mandatory')
frBwClassTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7), )
if mibBuilder.loadTexts: frBwClassTable.setStatus('mandatory')
frBwClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1), ).setIndexNames((0, "STRATACOM-MIB", "frBwClassIndex"))
if mibBuilder.loadTexts: frBwClassEntry.setStatus('mandatory')
frBwClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassIndex.setStatus('mandatory')
frBwClassMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassMIR.setStatus('mandatory')
frBwClassCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassCIR.setStatus('mandatory')
frBwClassVcQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassVcQSize.setStatus('mandatory')
frBwClassBc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassBc.setStatus('mandatory')
frBwClassPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassPIR.setStatus('mandatory')
frBwClassBe = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassBe.setStatus('mandatory')
frBwClassCMAX = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassCMAX.setStatus('mandatory')
frBwClassEcnQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassEcnQSize.setStatus('mandatory')
frBwClassQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassQIR.setStatus('mandatory')
frBwClassPercUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassPercUtil.setStatus('mandatory')
frBwClassOeMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassOeMIR.setStatus('mandatory')
frBwClassOeCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassOeCIR.setStatus('mandatory')
frBwClassOeVcQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3072000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassOeVcQSize.setStatus('mandatory')
frBwClassOeBc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassOeBc.setStatus('mandatory')
frBwClassOePIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassOePIR.setStatus('mandatory')
frBwClassOeBe = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassOeBe.setStatus('mandatory')
frBwClassOeCMAX = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 57600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassOeCMAX.setStatus('mandatory')
frBwClassOeEcnQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassOeEcnQSize.setStatus('mandatory')
frBwClassOeQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassOeQIR.setStatus('mandatory')
frBwClassOePercUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassOePercUtil.setStatus('mandatory')
frBwClassEnableFST = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassEnableFST.setStatus('mandatory')
frBwClassDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 7, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frBwClassDescription.setStatus('mandatory')
atmEndptTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8), )
if mibBuilder.loadTexts: atmEndptTable.setStatus('mandatory')
atmEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1), ).setIndexNames((0, "STRATACOM-MIB", "atmEndptIndex"))
if mibBuilder.loadTexts: atmEndptEntry.setStatus('mandatory')
atmEndptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndptIndex.setStatus('mandatory')
atmEndptDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptDesc.setStatus('mandatory')
atmOtherEndptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOtherEndptIndex.setStatus('mandatory')
atmOtherEndptDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOtherEndptDesc.setStatus('mandatory')
atmEndptAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("create", 1), ("delete", 2), ("modify", 3), ("test", 4), ("writeOnly", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptAdminStatus.setStatus('mandatory')
atmEndptOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("okPendingDown", 2), ("down", 3), ("failed", 4), ("inTest", 5), ("okPendingRoute", 6), ("okPendingDelete", 7), ("looped", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndptOperStatus.setStatus('mandatory')
atmNoRouteFoundFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmNoRouteFoundFailure.setStatus('mandatory')
atmBumpFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBumpFailure.setStatus('mandatory')
atmEndPointFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndPointFailure.setStatus('mandatory')
atmTestFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTestFailure.setStatus('mandatory')
atmConnPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmConnPtr.setStatus('mandatory')
atmNextPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmNextPtr.setStatus('mandatory')
atmNextOnPortPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmNextOnPortPtr.setStatus('mandatory')
atmEndptConnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptConnDesc.setStatus('mandatory')
atmEndptTrkAvoidType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("satellite", 2), ("terrestrial", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptTrkAvoidType.setStatus('mandatory')
atmEndptTrkAvoidZCS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptTrkAvoidZCS.setStatus('mandatory')
atmEndptSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("atf", 1), ("vbr", 2), ("cbr", 3), ("unknown", 4), ("abr", 5), ("atfst", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptSubType.setStatus('mandatory')
atmEndptBWClass = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptBWClass.setStatus('mandatory')
atmEndptMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptMIR.setStatus('mandatory')
atmEndptCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptCIR.setStatus('mandatory')
atmEndptVcQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptVcQSize.setStatus('mandatory')
atmEndptPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptPIR.setStatus('mandatory')
atmEndptEfciQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptEfciQSize.setStatus('mandatory')
atmEndptQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptQIR.setStatus('mandatory')
atmEndptPercUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptPercUtil.setStatus('mandatory')
atmEndptCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptCBS.setStatus('mandatory')
atmEndptIBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptIBS.setStatus('mandatory')
atmEndptMFS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptMFS.setStatus('mandatory')
atmEndptCCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptCCDV.setStatus('mandatory')
atmEndptHiCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptHiCLP.setStatus('mandatory')
atmEndptLoCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptLoCLP.setStatus('mandatory')
atmEndptOeMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeMIR.setStatus('mandatory')
atmEndptOeCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeCIR.setStatus('mandatory')
atmEndptOeVcQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeVcQSize.setStatus('mandatory')
atmEndptOePIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOePIR.setStatus('mandatory')
atmEndptOeEfciQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeEfciQSize.setStatus('mandatory')
atmEndptOeQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeQIR.setStatus('mandatory')
atmEndptOePercUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOePercUtil.setStatus('mandatory')
atmEndptOeCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeCBS.setStatus('mandatory')
atmEndptOeIBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeIBS.setStatus('mandatory')
atmEndptOeMFS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeMFS.setStatus('mandatory')
atmEndptOeCCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeCCDV.setStatus('mandatory')
atmEndptOeHiCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeHiCLP.setStatus('mandatory')
atmEndptOeLoCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeLoCLP.setStatus('mandatory')
atmEndptCLPTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptCLPTagging.setStatus('mandatory')
atmEndptUPC = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptUPC.setStatus('mandatory')
atmEndptEnableFST = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptEnableFST.setStatus('mandatory')
atmEndptRateUpICA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 96000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptRateUpICA.setStatus('mandatory')
atmEndptRateDnICA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptRateDnICA.setStatus('mandatory')
atmEndptFastDnICA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptFastDnICA.setStatus('mandatory')
atmEndptToQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptToQIR.setStatus('mandatory')
atmEndptMinAdjustICA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptMinAdjustICA.setStatus('mandatory')
atmEndptGroupFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndptGroupFlag.setStatus('mandatory')
atmEndptOamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("clear", 2), ("aisDetected", 3), ("ferfDetected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndptOamStatus.setStatus('mandatory')
atmEndptBCM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptBCM.setStatus('mandatory')
atmEndptFGCRA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptFGCRA.setStatus('mandatory')
atmEndptLocLpbkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptLocLpbkState.setStatus('mandatory')
atmEndptLpbkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndptLpbkStatus.setStatus('mandatory')
atmEndptTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("testDelay", 1), ("writeOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptTestType.setStatus('mandatory')
atmEndptRtdTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndptRtdTestDelay.setStatus('mandatory')
atmEndptOeBCM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeBCM.setStatus('mandatory')
atmEndptOeFGCRA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeFGCRA.setStatus('mandatory')
atmEndptGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 63), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptGroupDesc.setStatus('mandatory')
atmEndptLocRmtLpbkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptLocRmtLpbkState.setStatus('mandatory')
atmEndptScrPlc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clp0", 1), ("clp0and1", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptScrPlc.setStatus('mandatory')
atmEndptOeScrPlc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clp0", 1), ("clp0and1", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeScrPlc.setStatus('mandatory')
atmEndptPCR0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptPCR0.setStatus('mandatory')
atmEndptOePCR0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 353208))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOePCR0.setStatus('mandatory')
atmEndptCDVT0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptCDVT0.setStatus('mandatory')
atmEndptOeCDVT0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeCDVT0.setStatus('mandatory')
atmEndptOeRateUpICA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 96000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptOeRateUpICA.setStatus('mandatory')
atmEndptFRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptFRTT.setStatus('mandatory')
atmEndptTBE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048320))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptTBE.setStatus('mandatory')
atmEndptVSVD = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptVSVD.setStatus('mandatory')
atmEndptPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vbr1", 1), ("vbr2", 2), ("vbr3", 3), ("pcrplc", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptPolicing.setStatus('mandatory')
atmEndptPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 8, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 1412832))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndptPCR.setStatus('mandatory')
atmBwClassTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9), )
if mibBuilder.loadTexts: atmBwClassTable.setStatus('mandatory')
atmBwClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1), ).setIndexNames((0, "STRATACOM-MIB", "atmBwClassIndex"))
if mibBuilder.loadTexts: atmBwClassEntry.setStatus('mandatory')
atmBwClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassIndex.setStatus('mandatory')
atmBwClassMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassMIR.setStatus('mandatory')
atmBwClassCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassCIR.setStatus('mandatory')
atmBwClassVcQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassVcQSize.setStatus('mandatory')
atmBwClassPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 96000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassPIR.setStatus('mandatory')
atmBwClassEfciQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassEfciQSize.setStatus('mandatory')
atmBwClassQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassQIR.setStatus('mandatory')
atmBwClassPercUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassPercUtil.setStatus('mandatory')
atmBwClassCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassCBS.setStatus('mandatory')
atmBwClassIBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassIBS.setStatus('mandatory')
atmBwClassMFS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassMFS.setStatus('mandatory')
atmBwClassCCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassCCDV.setStatus('mandatory')
atmBwClassHiCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassHiCLP.setStatus('mandatory')
atmBwClassLoCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassLoCLP.setStatus('mandatory')
atmBwClassOeMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeMIR.setStatus('mandatory')
atmBwClassOeCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeCIR.setStatus('mandatory')
atmBwClassOeVcQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeVcQSize.setStatus('mandatory')
atmBwClassOePIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 96000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOePIR.setStatus('mandatory')
atmBwClassOeEfciQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeEfciQSize.setStatus('mandatory')
atmBwClassOeQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeQIR.setStatus('mandatory')
atmBwClassOePercUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOePercUtil.setStatus('mandatory')
atmBwClassOeCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeCBS.setStatus('mandatory')
atmBwClassOeIBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeIBS.setStatus('mandatory')
atmBwClassOeMFS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeMFS.setStatus('mandatory')
atmBwClassOeCCDV = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeCCDV.setStatus('mandatory')
atmBwClassOeHiCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeHiCLP.setStatus('mandatory')
atmBwClassOeLoCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeLoCLP.setStatus('mandatory')
atmBwClassCLPTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassCLPTagging.setStatus('mandatory')
atmBwClassUPC = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassUPC.setStatus('mandatory')
atmBwClassEnableFST = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassEnableFST.setStatus('mandatory')
atmBwClassRateUpICA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 96000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassRateUpICA.setStatus('mandatory')
atmBwClassRateDnICA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassRateDnICA.setStatus('mandatory')
atmBwClassFastDnICA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassFastDnICA.setStatus('mandatory')
atmBwClassToQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassToQIR.setStatus('mandatory')
atmBwClassMinAdjustICA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassMinAdjustICA.setStatus('mandatory')
atmBwClassDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassDescription.setStatus('mandatory')
atmBwClassBCM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassBCM.setStatus('mandatory')
atmBwClassFGCRA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassFGCRA.setStatus('mandatory')
atmBwClassOeBCM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeBCM.setStatus('mandatory')
atmBwClassOeFGCRA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeFGCRA.setStatus('mandatory')
atmBwClassConType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("atf", 1), ("vbr", 2), ("cbr", 3), ("unknown", 4), ("abr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassConType.setStatus('mandatory')
atmBwClassScrPlc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clp0", 1), ("clp0and1", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassScrPlc.setStatus('mandatory')
atmBwClassOeScrPlc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clp0", 1), ("clp0and1", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeScrPlc.setStatus('mandatory')
atmBwClassPCR0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassPCR0.setStatus('mandatory')
atmBwClassOePCR0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 353208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOePCR0.setStatus('mandatory')
atmBwClassCDVT0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassCDVT0.setStatus('mandatory')
atmBwClassOeCDVT0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeCDVT0.setStatus('mandatory')
atmBwClassOeRateUpICA = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 9, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 96000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBwClassOeRateUpICA.setStatus('mandatory')
frEndptMapTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 10), )
if mibBuilder.loadTexts: frEndptMapTable.setStatus('mandatory')
frEndptMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 10, 1), ).setIndexNames((0, "STRATACOM-MIB", "frEndptMapSlot"), (0, "STRATACOM-MIB", "frEndptMapPort"), (0, "STRATACOM-MIB", "frEndptMapDlci"))
if mibBuilder.loadTexts: frEndptMapEntry.setStatus('mandatory')
frEndptMapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptMapSlot.setStatus('mandatory')
frEndptMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptMapPort.setStatus('mandatory')
frEndptMapDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptMapDlci.setStatus('mandatory')
frEndptMapEndptPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 10, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptMapEndptPtr.setStatus('mandatory')
frEndptMapConnPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 10, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndptMapConnPtr.setStatus('mandatory')
atmEndptMapTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 11), )
if mibBuilder.loadTexts: atmEndptMapTable.setStatus('mandatory')
atmEndptMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 11, 1), ).setIndexNames((0, "STRATACOM-MIB", "atmEndptMapSlot"), (0, "STRATACOM-MIB", "atmEndptMapPort"), (0, "STRATACOM-MIB", "atmEndptMapVpi"), (0, "STRATACOM-MIB", "atmEndptMapVci"))
if mibBuilder.loadTexts: atmEndptMapEntry.setStatus('mandatory')
atmEndptMapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndptMapSlot.setStatus('mandatory')
atmEndptMapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndptMapPort.setStatus('mandatory')
atmEndptMapVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndptMapVpi.setStatus('mandatory')
atmEndptMapVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndptMapVci.setStatus('mandatory')
atmEndptMapEndptPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 11, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndptMapEndptPtr.setStatus('mandatory')
atmEndptMapConnPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 11, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndptMapConnPtr.setStatus('mandatory')
atmEndptStatTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12), )
if mibBuilder.loadTexts: atmEndptStatTable.setStatus('mandatory')
atmEndptStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1), ).setIndexNames((0, "STRATACOM-MIB", "atmEndptIndex"))
if mibBuilder.loadTexts: atmEndptStatEntry.setStatus('mandatory')
atmCellsRxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCellsRxPorts.setStatus('mandatory')
atmFramesRxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFramesRxPorts.setStatus('mandatory')
atmCellsTxNets = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCellsTxNets.setStatus('mandatory')
atmClpRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmClpRxs.setStatus('mandatory')
atmViolRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmViolRxs.setStatus('mandatory')
atmDiscardVcqClpThs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDiscardVcqClpThs.setStatus('mandatory')
atmDiscardVcqFulls = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDiscardVcqFulls.setStatus('mandatory')
atmEfciRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEfciRxs.setStatus('mandatory')
atmNonCompRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmNonCompRxs.setStatus('mandatory')
atmDiscardFails = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDiscardFails.setStatus('mandatory')
atmAvgVcqDepths = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAvgVcqDepths.setStatus('mandatory')
atmDiscardRsrcOflows = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDiscardRsrcOflows.setStatus('mandatory')
atmDiscardSbinFulls = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDiscardSbinFulls.setStatus('mandatory')
atmBcmRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBcmRxs.setStatus('mandatory')
atmBcmTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmBcmTxs.setStatus('mandatory')
atmOamTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamTxs.setStatus('mandatory')
atmDiscardQbinFulls = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDiscardQbinFulls.setStatus('mandatory')
atmDiscardQbinClpThs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDiscardQbinClpThs.setStatus('mandatory')
atmCellsRxNets = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCellsRxNets.setStatus('mandatory')
atmClpTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmClpTxs.setStatus('mandatory')
atmEfciTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEfciTxs.setStatus('mandatory')
atmCellsTxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCellsTxPorts.setStatus('mandatory')
atmAisRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAisRxs.setStatus('mandatory')
atmFerfRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 12, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFerfRxs.setStatus('mandatory')
voiceEndptTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13), )
if mibBuilder.loadTexts: voiceEndptTable.setStatus('mandatory')
voiceEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1), ).setIndexNames((0, "STRATACOM-MIB", "voiceEndptIndex"))
if mibBuilder.loadTexts: voiceEndptEntry.setStatus('mandatory')
voiceEndptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceEndptIndex.setStatus('mandatory')
voiceOtherEndptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceOtherEndptIndex.setStatus('mandatory')
voiceEndptDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceEndptDesc.setStatus('mandatory')
voiceOtherEndptDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceOtherEndptDesc.setStatus('mandatory')
voiceEndptConnDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceEndptConnDesc.setStatus('mandatory')
voiceEndptAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("create", 1), ("delete", 2), ("modify", 3), ("test", 4), ("writeOnly", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceEndptAdminStatus.setStatus('mandatory')
voiceEndptOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ok", 1), ("okPendingDown", 2), ("down", 3), ("failed", 4), ("inTest", 5), ("okPendingRoute", 6), ("okPendingDelete", 7), ("looped", 8), ("unknown", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceEndptOperStatus.setStatus('mandatory')
voiceEndptRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("a32", 1), ("a24", 2), ("a16", 3), ("a16z", 4), ("a32d", 5), ("c32", 6), ("c24", 7), ("c16", 8), ("c16z", 9), ("c32d", 10), ("p", 11), ("t", 12), ("v", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceEndptRateType.setStatus('mandatory')
voiceEndPointFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceEndPointFailure.setStatus('mandatory')
voiceNoRouteFoundFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceNoRouteFoundFailure.setStatus('mandatory')
voiceBumpFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceBumpFailure.setStatus('mandatory')
voiceTestFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceTestFailure.setStatus('mandatory')
voiceEndptTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("testCon", 1), ("writeOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceEndptTestType.setStatus('mandatory')
voiceEndptLpbkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceEndptLpbkStatus.setStatus('mandatory')
voiceConnPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 15), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceConnPtr.setStatus('mandatory')
voiceChannelPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 16), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceChannelPtr.setStatus('mandatory')
voiceEndptTrkAvoidType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("satellite", 2), ("terrestrial", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceEndptTrkAvoidType.setStatus('mandatory')
voiceEndptAvoidZCS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceEndptAvoidZCS.setStatus('mandatory')
voiceEndptState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("offhook", 1), ("onhook", 2), ("slowmodem", 3), ("fastmodem", 4), ("notConnected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceEndptState.setStatus('mandatory')
voiceEndptAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceEndptAdv.setStatus('mandatory')
voiceOtherEndptAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceOtherEndptAdv.setStatus('mandatory')
voiceEndptEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alaw", 1), ("ulaw", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceEndptEncoding.setStatus('mandatory')
voiceOtherEndptEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alaw", 1), ("ulaw", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceOtherEndptEncoding.setStatus('mandatory')
voiceEndptEndptType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pcm", 1), ("adpcm", 2), ("adpno", 3), ("transp", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceEndptEndptType.setStatus('mandatory')
voiceEndptLocLpbkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 13, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("writeOnly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceEndptLocLpbkState.setStatus('mandatory')
voiceStatTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 14), )
if mibBuilder.loadTexts: voiceStatTable.setStatus('mandatory')
voiceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 14, 1), ).setIndexNames((0, "STRATACOM-MIB", "voiceEndptIndex"))
if mibBuilder.loadTexts: voiceStatEntry.setStatus('mandatory')
voiceStatPktsRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatPktsRxs.setStatus('mandatory')
voiceStatPktsXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatPktsXmits.setStatus('mandatory')
voiceStatRxPktsDscds = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatRxPktsDscds.setStatus('mandatory')
voiceStatSprvPktsXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatSprvPktsXmits.setStatus('mandatory')
voiceStatSprvPktsRcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatSprvPktsRcvs.setStatus('mandatory')
voiceStatV25ModemOns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatV25ModemOns.setStatus('mandatory')
voiceStatDsiOns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatDsiOns.setStatus('mandatory')
voiceStatOffhks = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatOffhks.setStatus('mandatory')
voiceStatInservices = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceStatInservices.setStatus('mandatory')
voiceEndptMapTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 15), )
if mibBuilder.loadTexts: voiceEndptMapTable.setStatus('mandatory')
voiceEndptMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 15, 1), ).setIndexNames((0, "STRATACOM-MIB", "voiceEndptMapSlot"), (0, "STRATACOM-MIB", "voiceEndptMapChannel"))
if mibBuilder.loadTexts: voiceEndptMapEntry.setStatus('mandatory')
voiceEndptMapSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceEndptMapSlot.setStatus('mandatory')
voiceEndptMapChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceEndptMapChannel.setStatus('mandatory')
voiceEndptMapEndptPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 15, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceEndptMapEndptPtr.setStatus('mandatory')
voiceEndptMapConnPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 3, 15, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceEndptMapConnPtr.setStatus('mandatory')
shelfCnfgStatMaster = MibScalar((1, 3, 6, 1, 4, 1, 351, 100, 4, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCnfgStatMaster.setStatus('mandatory')
shelfCnfgStatCollIntvl = MibScalar((1, 3, 6, 1, 4, 1, 351, 100, 4, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCnfgStatCollIntvl.setStatus('mandatory')
shelfCnfgStatBcktIntvl = MibScalar((1, 3, 6, 1, 4, 1, 351, 100, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCnfgStatBcktIntvl.setStatus('mandatory')
shelfCnfgStatTimeSync = MibScalar((1, 3, 6, 1, 4, 1, 351, 100, 4, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCnfgStatTimeSync.setStatus('mandatory')
shelfCnfgSwError = MibScalar((1, 3, 6, 1, 4, 1, 351, 100, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCnfgSwError.setStatus('mandatory')
shelfCnfgCardError = MibScalar((1, 3, 6, 1, 4, 1, 351, 100, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCnfgCardError.setStatus('mandatory')
svplus = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 1))
svnode = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 2))
rtm = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 120))
controlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 1, 11))
logGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 1, 12))
networkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 1, 13))
nodeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 1, 14))
svNodeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 2, 1))
packetGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 2, 2))
circuitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 2, 3))
frpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 2, 4))
connGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 2, 5))
realTimeCountersGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 2, 6))
trapsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 120, 1))
class Active(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inactive", 1), ("active", 2))

class Severity(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 5)

nodeGrpName = MibScalar((1, 3, 6, 1, 4, 1, 351, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeGrpName.setStatus('mandatory')
nodeGrpNetName = MibScalar((1, 3, 6, 1, 4, 1, 351, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeGrpNetName.setStatus('mandatory')
nodeGrpAlarmState = MibScalar((1, 3, 6, 1, 4, 1, 351, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("clear", 1), ("minor", 2), ("major", 3), ("unreachable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeGrpAlarmState.setStatus('mandatory')
nodeGrpGateway = MibScalar((1, 3, 6, 1, 4, 1, 351, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-a-gateway", 1), ("gateway", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeGrpGateway.setStatus('mandatory')
nodeGrpActive = MibScalar((1, 3, 6, 1, 4, 1, 351, 2, 1, 5), Active()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeGrpActive.setStatus('mandatory')
nodeGrpPlatform = MibScalar((1, 3, 6, 1, 4, 1, 351, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipx-platform", 1), ("bpx-platform", 2), ("axis-platform", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeGrpPlatform.setStatus('mandatory')
nodeGrpRelease = MibScalar((1, 3, 6, 1, 4, 1, 351, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeGrpRelease.setStatus('mandatory')
nodeFsIncRate = MibScalar((1, 3, 6, 1, 4, 1, 351, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFsIncRate.setStatus('mandatory')
nodeFsDecRate = MibScalar((1, 3, 6, 1, 4, 1, 351, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFsDecRate.setStatus('mandatory')
nodeFsFastRate = MibScalar((1, 3, 6, 1, 4, 1, 351, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFsFastRate.setStatus('mandatory')
nodeRstTimeout = MibScalar((1, 3, 6, 1, 4, 1, 351, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeRstTimeout.setStatus('mandatory')
alarmTrapSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 351, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTrapSequenceNumber.setStatus('mandatory')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 351, 2, 2, 2), )
if mibBuilder.loadTexts: trunkTable.setStatus('mandatory')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1), ).setIndexNames((0, "STRATACOM-MIB", "trunkLocalSlot"), (0, "STRATACOM-MIB", "trunkLocalPort"))
if mibBuilder.loadTexts: trunkEntry.setStatus('mandatory')
trunkLocalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkLocalSlot.setStatus('mandatory')
trunkLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkLocalPort.setStatus('mandatory')
trunkLocalLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkLocalLine.setStatus('mandatory')
trunkCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 22, 31, 34, 103, 104, 110))).clone(namedValues=NamedValues(("txr", 3), ("bni", 4), ("ntc", 22), ("atm", 31), ("ait", 34), ("bni-t3", 103), ("bni-e3", 104), ("bni-oc3", 110)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCardType.setStatus('mandatory')
trunkInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("t1-d4", 2), ("t1-esf", 3), ("e1-30", 4), ("e1-31", 5), ("e1-32", 6), ("subrate", 7), ("atm", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkInterface.setStatus('mandatory')
trunkLineLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkLineLoad.setStatus('mandatory')
trunkRemNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRemNodeId.setStatus('mandatory')
trunkRemLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRemLineNumber.setStatus('mandatory')
trunkRemSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRemSlot.setStatus('mandatory')
trunkRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRemPort.setStatus('mandatory')
trunkAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("minor", 2), ("major", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkAlarmState.setStatus('mandatory')
trunkComment = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkComment.setStatus('mandatory')
trunkActive = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 13), Active()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkActive.setStatus('mandatory')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("clear", 2), ("fail", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkStatus.setStatus('mandatory')
trunkStatReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkStatReserve.setStatus('mandatory')
trunkBurstyDataBQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkBurstyDataBQDepth.setStatus('mandatory')
trunkBurstyDataBQEfcnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkBurstyDataBQEfcnThreshold.setStatus('mandatory')
trunkClpHighDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkClpHighDropThreshold.setStatus('mandatory')
trunkClpLowDropThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkClpLowDropThreshold.setStatus('mandatory')
cirLineTable = MibTable((1, 3, 6, 1, 4, 1, 351, 2, 3, 1), )
if mibBuilder.loadTexts: cirLineTable.setStatus('mandatory')
cirLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 2, 3, 1, 1), ).setIndexNames((0, "STRATACOM-MIB", "cirLineLineNumber"), (0, "STRATACOM-MIB", "cirLinePortNumber"))
if mibBuilder.loadTexts: cirLineEntry.setStatus('mandatory')
cirLineLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineLineNumber.setStatus('mandatory')
cirLineCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 21, 25, 29))).clone(namedValues=NamedValues(("txr", 3), ("cip", 21), ("frp", 25), ("cdp", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineCardType.setStatus('mandatory')
cirLineInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("t1", 2), ("e1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineInterface.setStatus('mandatory')
cirLineComment = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineComment.setStatus('mandatory')
cirLineActive = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 3, 1, 1, 7), Active()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineActive.setStatus('mandatory')
cirLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("clear", 2), ("fail", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineStatus.setStatus('mandatory')
cirLinePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLinePortNumber.setStatus('mandatory')
frpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 2, 4, 1), )
if mibBuilder.loadTexts: frpTable.setStatus('mandatory')
frpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 2, 4, 1, 1), ).setIndexNames((0, "STRATACOM-MIB", "frpLocalSlot"), (0, "STRATACOM-MIB", "frpLocalLine"), (0, "STRATACOM-MIB", "frpLocalPort"))
if mibBuilder.loadTexts: frpEntry.setStatus('mandatory')
frpLocalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpLocalSlot.setStatus('mandatory')
frpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpLocalPort.setStatus('mandatory')
frpPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpPortSpeed.setStatus('mandatory')
frpComment = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpComment.setStatus('mandatory')
frpActive = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 4, 1, 1, 7), Active()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpActive.setStatus('mandatory')
frpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("clear", 2), ("fail", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpStatus.setStatus('mandatory')
frpQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpQDepth.setStatus('mandatory')
frpEcnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpEcnThreshold.setStatus('mandatory')
frpDeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpDeThreshold.setStatus('mandatory')
frpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uni", 1), ("nni", 2), ("aip", 3), ("not-defined", 4), ("frsm", 5), ("portConcent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpPortType.setStatus('mandatory')
frpLocalLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpLocalLine.setStatus('mandatory')
connServerTable = MibTable((1, 3, 6, 1, 4, 1, 351, 2, 5, 1), )
if mibBuilder.loadTexts: connServerTable.setStatus('mandatory')
connEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1), ).setIndexNames((0, "STRATACOM-MIB", "connLocalSlot"), (0, "STRATACOM-MIB", "connLocalLine"), (0, "STRATACOM-MIB", "connLocalChannel"), (0, "STRATACOM-MIB", "connLocalDLCI"))
if mibBuilder.loadTexts: connEntry.setStatus('mandatory')
connLocalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLocalSlot.setStatus('mandatory')
connLocalChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLocalChannel.setStatus('mandatory')
connLocalDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLocalDLCI.setStatus('mandatory')
connRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRemoteNodeId.setStatus('mandatory')
connRemoteSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRemoteSlot.setStatus('mandatory')
connRemoteChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRemoteChannel.setStatus('mandatory')
connRemoteDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRemoteDLCI.setStatus('mandatory')
connServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("voice-dsi-adpcm", 1), ("voice-dsi", 2), ("voice", 3), ("voice-adpcm", 4), ("data", 5), ("frame-relay", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connServerType.setStatus('mandatory')
connRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRate.setStatus('mandatory')
connLocalMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLocalMaxPkts.setStatus('mandatory')
connRemoteMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRemoteMaxPkts.setStatus('mandatory')
connMinBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMinBandwidth.setStatus('mandatory')
connDAX = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("non-dax", 1), ("dax", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connDAX.setStatus('mandatory')
connTXR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("non-txr", 1), ("txr", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connTXR.setStatus('mandatory')
connComment = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connComment.setStatus('mandatory')
connActive = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 18), Active()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connActive.setStatus('mandatory')
connStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("clear", 2), ("fail", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connStatus.setStatus('mandatory')
connQir = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connQir.setStatus('mandatory')
connPir = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPir.setStatus('mandatory')
connVcQueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connVcQueDepth.setStatus('mandatory')
connVcQueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connVcQueThreshold.setStatus('mandatory')
connCMax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCMax.setStatus('mandatory')
connPerUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connPerUtil.setStatus('mandatory')
connConnInfoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connConnInfoFlag.setStatus('mandatory')
connCir = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCir.setStatus('mandatory')
connABitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connABitStatus.setStatus('mandatory')
connLocalLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 5, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connLocalLine.setStatus('mandatory')
cirLineRTCTable = MibTable((1, 3, 6, 1, 4, 1, 351, 2, 6, 2), )
if mibBuilder.loadTexts: cirLineRTCTable.setStatus('mandatory')
cirLineRTCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 2, 6, 2, 1), ).setIndexNames((0, "STRATACOM-MIB", "cirLineRTCLineNumber"))
if mibBuilder.loadTexts: cirLineRTCEntry.setStatus('mandatory')
cirLineRTCLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineRTCLineNumber.setStatus('mandatory')
cirLineRTCBipolarViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineRTCBipolarViolations.setStatus('mandatory')
cirLineRTCFrameSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineRTCFrameSlips.setStatus('mandatory')
cirLineRTCOutOfFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineRTCOutOfFrames.setStatus('mandatory')
cirLineRTCLossesOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineRTCLossesOfSignal.setStatus('mandatory')
cirLineRTCFrameBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineRTCFrameBitErrors.setStatus('mandatory')
cirLineRTCCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineRTCCrcErrors.setStatus('mandatory')
cirLineRTCOutOfMultiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineRTCOutOfMultiFrames.setStatus('mandatory')
cirLineRTCAllOnesInTimeslot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirLineRTCAllOnesInTimeslot16.setStatus('mandatory')
frpRTCTable = MibTable((1, 3, 6, 1, 4, 1, 351, 2, 6, 3), )
if mibBuilder.loadTexts: frpRTCTable.setStatus('mandatory')
frpRTCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1), ).setIndexNames((0, "STRATACOM-MIB", "frpRTCSlot"), (0, "STRATACOM-MIB", "frpRTCLine"), (0, "STRATACOM-MIB", "frpRTCPort"))
if mibBuilder.loadTexts: frpRTCEntry.setStatus('mandatory')
frpRTCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCSlot.setStatus('mandatory')
frpRTCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCPort.setStatus('mandatory')
frpRTCFramesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCFramesRcvd.setStatus('mandatory')
frpRTCFramesXmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCFramesXmitted.setStatus('mandatory')
frpRTCBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCBytesRcvd.setStatus('mandatory')
frpRTCBytesXmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCBytesXmitted.setStatus('mandatory')
frpRTCFramesXmittedWithFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCFramesXmittedWithFECN.setStatus('mandatory')
frpRTCFramesXmittedWithBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCFramesXmittedWithBECN.setStatus('mandatory')
frpRTCFramesRcvdCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCFramesRcvdCrcErrors.setStatus('mandatory')
frpRTCFramesRcvdInvalidFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCFramesRcvdInvalidFormat.setStatus('mandatory')
frpRTCFramesRcvdAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCFramesRcvdAlignmentErrors.setStatus('mandatory')
frpRTCFramesRcvdIllegalLen = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCFramesRcvdIllegalLen.setStatus('mandatory')
frpRTCDmaOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCDmaOverruns.setStatus('mandatory')
frpRTCLmiStatusEnquires = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCLmiStatusEnquires.setStatus('mandatory')
frpRTCLmiStatusXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCLmiStatusXmitRate.setStatus('mandatory')
frpRTCLmiStatusUpdateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCLmiStatusUpdateRate.setStatus('mandatory')
frpRTCLmiInvalidStatusEnquires = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCLmiInvalidStatusEnquires.setStatus('mandatory')
frpRTCLmiLinkTimeoutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCLmiLinkTimeoutErrors.setStatus('mandatory')
frpRTCLmiKeepaliveSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCLmiKeepaliveSequenceErrors.setStatus('mandatory')
frpRTCFramesRcvdUndefDlciErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCFramesRcvdUndefDlciErrors.setStatus('mandatory')
frpRTCXmitStatusEnquirey = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCXmitStatusEnquirey.setStatus('mandatory')
frpRTCRxStatusCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCRxStatusCounter.setStatus('mandatory')
frpRTCAsyncStatusCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCAsyncStatusCounter.setStatus('mandatory')
frpRTCBadSequenceNumberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCBadSequenceNumberCount.setStatus('mandatory')
frpRTCTxProtocolTimeOutCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCTxProtocolTimeOutCount.setStatus('mandatory')
frpRTCCLLMFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCCLLMFramesTx.setStatus('mandatory')
frpRTCCLLMBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCCLLMBytesTx.setStatus('mandatory')
frpRTCCLLMFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCCLLMFramesRx.setStatus('mandatory')
frpRTCCLLMBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCCLLMBytesRx.setStatus('mandatory')
frpRTCCLLMFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCCLLMFailures.setStatus('mandatory')
frpRTCRxDEFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCRxDEFramesDiscarded.setStatus('mandatory')
frpRTCLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpRTCLine.setStatus('mandatory')
connRTCTable = MibTable((1, 3, 6, 1, 4, 1, 351, 2, 6, 4), )
if mibBuilder.loadTexts: connRTCTable.setStatus('mandatory')
connRTCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1), ).setIndexNames((0, "STRATACOM-MIB", "connRTCSlot"), (0, "STRATACOM-MIB", "connRTCLine"), (0, "STRATACOM-MIB", "connRTCChannel"), (0, "STRATACOM-MIB", "connRTCDLCI"))
if mibBuilder.loadTexts: connRTCEntry.setStatus('mandatory')
connRTCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCSlot.setStatus('mandatory')
connRTCChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCChannel.setStatus('mandatory')
connRTCDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCDLCI.setStatus('mandatory')
connRTCRcvdFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCRcvdFrames.setStatus('mandatory')
connRTCRcvdFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCRcvdFramesDiscarded.setStatus('mandatory')
connRTCXmitFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCXmitFrames.setStatus('mandatory')
connRTCXmitFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCXmitFramesDiscarded.setStatus('mandatory')
connRTCRcvdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCRcvdPkts.setStatus('mandatory')
connRTCRcvdPktsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCRcvdPktsDiscarded.setStatus('mandatory')
connRTCXmitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCXmitPkts.setStatus('mandatory')
connRTCXmitPktsProjected = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCXmitPktsProjected.setStatus('mandatory')
connRTCXmitPktsSupervisory = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCXmitPktsSupervisory.setStatus('mandatory')
connRTCRcvdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCRcvdBytes.setStatus('mandatory')
connRTCRcvdBytesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCRcvdBytesDiscarded.setStatus('mandatory')
connRTCXmitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCXmitBytes.setStatus('mandatory')
connRTCXmitBytesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCXmitBytesDiscarded.setStatus('mandatory')
connRTCSecondsV25ModemOn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCSecondsV25ModemOn.setStatus('mandatory')
connRTCSecondsDsiEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCSecondsDsiEnabled.setStatus('mandatory')
connRTCSecondsOffHook = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCSecondsOffHook.setStatus('mandatory')
connRTCSecondsInService = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCSecondsInService.setStatus('mandatory')
connRTCXmitFramesWithFECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCXmitFramesWithFECN.setStatus('mandatory')
connRTCXmitFramesWithBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCXmitFramesWithBECN.setStatus('mandatory')
connRTCRxSupervisoryPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCRxSupervisoryPkts.setStatus('mandatory')
connRTCCongestedMinuites = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCCongestedMinuites.setStatus('mandatory')
connRTCFramesRxWithDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCFramesRxWithDE.setStatus('mandatory')
connRTCFramesTxWithDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCFramesTxWithDE.setStatus('mandatory')
connRTCFramesDiscardedWithDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCFramesDiscardedWithDE.setStatus('mandatory')
connRTCBytesRxWithDE = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCBytesRxWithDE.setStatus('mandatory')
connRTCFramesRxExcessCir = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCFramesRxExcessCir.setStatus('mandatory')
connRTCBytesRxExcessCir = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCBytesRxExcessCir.setStatus('mandatory')
connRTCFramesTxExcessCir = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCFramesTxExcessCir.setStatus('mandatory')
connRTCBytesTxExcessCir = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCBytesTxExcessCir.setStatus('mandatory')
connRTCLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 4, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRTCLine.setStatus('mandatory')
trunkRTCTable = MibTable((1, 3, 6, 1, 4, 1, 351, 2, 6, 5), )
if mibBuilder.loadTexts: trunkRTCTable.setStatus('mandatory')
trunkRTCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1), ).setIndexNames((0, "STRATACOM-MIB", "trunkRTCLocalSlot"), (0, "STRATACOM-MIB", "trunkRTCLocalPort"))
if mibBuilder.loadTexts: trunkRTCEntry.setStatus('mandatory')
trunkRTCLocalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCLocalSlot.setStatus('mandatory')
trunkRTCLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCLocalPort.setStatus('mandatory')
trunkRTCBipolarViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCBipolarViolations.setStatus('mandatory')
trunkRTCFrameSlips = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCFrameSlips.setStatus('mandatory')
trunkRTCOutOfFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCOutOfFrames.setStatus('mandatory')
trunkRTCLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCLossOfSignal.setStatus('mandatory')
trunkRTCFrameBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCFrameBitErrors.setStatus('mandatory')
trunkRTCCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCCrcErrors.setStatus('mandatory')
trunkRTCPktOutOfFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCPktOutOfFrames.setStatus('mandatory')
trunkRTCPktCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCPktCrcErrors.setStatus('mandatory')
trunkRTCBadClockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCBadClockErrors.setStatus('mandatory')
trunkRTCVoicePktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCVoicePktsDropped.setStatus('mandatory')
trunkRTCTimeStampedPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTimeStampedPktsDropped.setStatus('mandatory')
trunkRTCNonTimeStampedPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCNonTimeStampedPktsDropped.setStatus('mandatory')
trunkRTCHighPriorityPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCHighPriorityPktsDropped.setStatus('mandatory')
trunkRTCBurstyDataPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCBurstyDataPktsDropped.setStatus('mandatory')
trunkRTCMulticastPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCMulticastPktsDropped.setStatus('mandatory')
trunkRTCVoicePktsXmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCVoicePktsXmitted.setStatus('mandatory')
trunkRTCTimeStampedPktsXmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTimeStampedPktsXmitted.setStatus('mandatory')
trunkRTCNonTimeStampedPktsXmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCNonTimeStampedPktsXmitted.setStatus('mandatory')
trunkRTCHighPriorityPktsXmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCHighPriorityPktsXmitted.setStatus('mandatory')
trunkRTCBurstyDataPktsXmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCBurstyDataPktsXmitted.setStatus('mandatory')
trunkRTCMulticastPktsXmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCMulticastPktsXmitted.setStatus('mandatory')
trunkRTCPktsXmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCPktsXmitted.setStatus('mandatory')
trunkRTCTxBurstyDataAClpPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTxBurstyDataAClpPktsDropped.setStatus('mandatory')
trunkRTCTxBurstyDataBClpPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTxBurstyDataBClpPktsDropped.setStatus('mandatory')
trunkRTCBurstyDataAEfcnPktsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCBurstyDataAEfcnPktsTx2Line.setStatus('mandatory')
trunkRTCBurstyDataBEfcnPktsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCBurstyDataBEfcnPktsTx2Line.setStatus('mandatory')
trunkRTCBurstyDataAClpPktsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCBurstyDataAClpPktsTx2Line.setStatus('mandatory')
trunkRTCBurstyDataBClpPktsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCBurstyDataBClpPktsTx2Line.setStatus('mandatory')
trunkRTCAtmCellHeaderHecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCAtmCellHeaderHecErrors.setStatus('mandatory')
trunkRTCTxVoiceCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTxVoiceCellsDropped.setStatus('mandatory')
trunkRTCTxTimeStampCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTxTimeStampCellsDropped.setStatus('mandatory')
trunkRTCTxNonTStampCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTxNonTStampCellsDropped.setStatus('mandatory')
trunkRTCTxHighPriorityCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTxHighPriorityCellsDropped.setStatus('mandatory')
trunkRTCTxBurstyDataACellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTxBurstyDataACellsDropped.setStatus('mandatory')
trunkRTCTxBurstyDataBCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTxBurstyDataBCellsDropped.setStatus('mandatory')
trunkRTCVoiceCellsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCVoiceCellsTx2Line.setStatus('mandatory')
trunkRTCTimeStampCellsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTimeStampCellsTx2Line.setStatus('mandatory')
trunkRTCNonTimeStampCellsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCNonTimeStampCellsTx2Line.setStatus('mandatory')
trunkRTCHighPriorityCellsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCHighPriorityCellsTx2Line.setStatus('mandatory')
trunkRTCBurstyDataACellsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCBurstyDataACellsTx2Line.setStatus('mandatory')
trunkRTCBurstyDataBCellsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCBurstyDataBCellsTx2Line.setStatus('mandatory')
trunkRTCTotalCellsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTotalCellsTx2Line.setStatus('mandatory')
trunkRTCTxBurstyDataAClpCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTxBurstyDataAClpCellsDropped.setStatus('mandatory')
trunkRTCTxBurstyDataBClpCellsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCTxBurstyDataBClpCellsDropped.setStatus('mandatory')
trunkRTCBurstyDataAEfcnCellsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCBurstyDataAEfcnCellsTx2Line.setStatus('mandatory')
trunkRTCBurstyDataBEfcnCellsTx2Line = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCBurstyDataBEfcnCellsTx2Line.setStatus('mandatory')
trunkRTCPlcpOutOfFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 2, 6, 5, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRTCPlcpOutOfFrames.setStatus('mandatory')
trapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 351, 120, 1, 1), )
if mibBuilder.loadTexts: trapConfigTable.setStatus('mandatory')
trapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 120, 1, 1, 1), ).setIndexNames((0, "STRATACOM-MIB", "managerIPaddress"))
if mibBuilder.loadTexts: trapConfigEntry.setStatus('mandatory')
managerIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 120, 1, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerIPaddress.setStatus('mandatory')
managerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 120, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerPortNumber.setStatus('mandatory')
managerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 120, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("addRow", 1), ("delRow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerRowStatus.setStatus('mandatory')
readingTrapFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 120, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readingTrapFlag.setStatus('mandatory')
nextTrapSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 120, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nextTrapSeqNum.setStatus('mandatory')
managerNumOfValidEntries = MibScalar((1, 3, 6, 1, 4, 1, 351, 120, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managerNumOfValidEntries.setStatus('mandatory')
lastSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 351, 120, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastSequenceNumber.setStatus('mandatory')
trapUploadTable = MibTable((1, 3, 6, 1, 4, 1, 351, 120, 1, 4), )
if mibBuilder.loadTexts: trapUploadTable.setStatus('mandatory')
trapUploadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 120, 1, 4, 1), ).setIndexNames((0, "STRATACOM-MIB", "mgrIpAddress"))
if mibBuilder.loadTexts: trapUploadEntry.setStatus('mandatory')
mgrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 120, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgrIpAddress.setStatus('mandatory')
trapSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 120, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSequenceNum.setStatus('mandatory')
trapPduString = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 120, 1, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapPduString.setStatus('mandatory')
endOfQueueFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 120, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfQueueFlag.setStatus('mandatory')
databaseSampleFreq = MibScalar((1, 3, 6, 1, 4, 1, 351, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseSampleFreq.setStatus('mandatory')
currentMaxLogIndex = MibScalar((1, 3, 6, 1, 4, 1, 351, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMaxLogIndex.setStatus('mandatory')
maintLogTable = MibTable((1, 3, 6, 1, 4, 1, 351, 1, 12, 2), )
if mibBuilder.loadTexts: maintLogTable.setStatus('mandatory')
maintLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 1, 12, 2, 1), ).setIndexNames((0, "STRATACOM-MIB", "logIndex"))
if mibBuilder.loadTexts: maintLogEntry.setStatus('mandatory')
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1073741824))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logIndex.setStatus('mandatory')
logNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logNetwork.setStatus('mandatory')
logNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logNodeName.setStatus('mandatory')
logGmtDate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 12, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: logGmtDate.setStatus('mandatory')
logSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 12, 2, 1, 5), Severity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSeverity.setStatus('mandatory')
logMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 12, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logMsg.setStatus('mandatory')
eventFilterTable = MibTable((1, 3, 6, 1, 4, 1, 351, 1, 12, 3), )
if mibBuilder.loadTexts: eventFilterTable.setStatus('mandatory')
eventFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 1, 12, 3, 1), ).setIndexNames((0, "STRATACOM-MIB", "eventFilterIndex"))
if mibBuilder.loadTexts: eventFilterEntry.setStatus('mandatory')
eventFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventFilterIndex.setStatus('mandatory')
eventFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventFilterStatus.setStatus('mandatory')
eventFilterSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 12, 3, 1, 3), Severity().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventFilterSeverity.setStatus('mandatory')
eventFilterSubstring = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 12, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventFilterSubstring.setStatus('mandatory')
maintLogFilterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 1, 12, 4))
maintLogFilterTimeMin = MibScalar((1, 3, 6, 1, 4, 1, 351, 1, 12, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintLogFilterTimeMin.setStatus('mandatory')
maintLogFilterTimeMax = MibScalar((1, 3, 6, 1, 4, 1, 351, 1, 12, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintLogFilterTimeMax.setStatus('mandatory')
maintLogFilterWindow = MibScalar((1, 3, 6, 1, 4, 1, 351, 1, 12, 4, 3), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintLogFilterWindow.setStatus('mandatory')
maintLogFilterNetworkName = MibScalar((1, 3, 6, 1, 4, 1, 351, 1, 12, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintLogFilterNetworkName.setStatus('mandatory')
maintLogFilterNodeName = MibScalar((1, 3, 6, 1, 4, 1, 351, 1, 12, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintLogFilterNodeName.setStatus('mandatory')
maintLogFilterSeverity = MibScalar((1, 3, 6, 1, 4, 1, 351, 1, 12, 4, 6), Severity().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maintLogFilterSeverity.setStatus('mandatory')
networkTable = MibTable((1, 3, 6, 1, 4, 1, 351, 1, 13, 1), )
if mibBuilder.loadTexts: networkTable.setStatus('mandatory')
networkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 1, 13, 1, 1), ).setIndexNames((0, "STRATACOM-MIB", "networkName"))
if mibBuilder.loadTexts: networkEntry.setStatus('mandatory')
networkName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 13, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkName.setStatus('mandatory')
networkId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkId.setStatus('mandatory')
networkIpxId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkIpxId.setStatus('mandatory')
nodeTable = MibTable((1, 3, 6, 1, 4, 1, 351, 1, 14, 1), )
if mibBuilder.loadTexts: nodeTable.setStatus('mandatory')
nodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 1, 14, 1, 1), ).setIndexNames((0, "STRATACOM-MIB", "nodeNetworkName"), (0, "STRATACOM-MIB", "nodeName"))
if mibBuilder.loadTexts: nodeEntry.setStatus('mandatory')
nodeNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 14, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNetworkName.setStatus('mandatory')
nodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 1, 14, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeName.setStatus('mandatory')
trunkStatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 351, 2) + (0,0)).setObjects(("STRATACOM-MIB", "lastSequenceNumber"), ("STRATACOM-MIB", "nodeGrpName"), ("STRATACOM-MIB", "nodeGrpNetName"), ("STRATACOM-MIB", "trunkStatus"))
cirLineStatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 351, 2) + (0,1)).setObjects(("STRATACOM-MIB", "lastSequenceNumber"), ("STRATACOM-MIB", "nodeGrpName"), ("STRATACOM-MIB", "nodeGrpNetName"), ("STRATACOM-MIB", "cirLineStatus"))
frpStatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 351, 2) + (0,2)).setObjects(("STRATACOM-MIB", "lastSequenceNumber"), ("STRATACOM-MIB", "nodeGrpName"), ("STRATACOM-MIB", "nodeGrpNetName"), ("STRATACOM-MIB", "frpStatus"))
connStatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 351, 2) + (0,3)).setObjects(("STRATACOM-MIB", "lastSequenceNumber"), ("STRATACOM-MIB", "nodeGrpName"), ("STRATACOM-MIB", "nodeGrpNetName"), ("STRATACOM-MIB", "connStatus"), ("STRATACOM-MIB", "connABitStatus"))
filteredLogRecord = NotificationType((1, 3, 6, 1, 4, 1, 351, 1) + (0,4)).setObjects(("STRATACOM-MIB", "lastSequenceNumber"), ("STRATACOM-MIB", "logIndex"), ("STRATACOM-MIB", "logNetwork"), ("STRATACOM-MIB", "logNodeName"), ("STRATACOM-MIB", "logGmtDate"), ("STRATACOM-MIB", "logSeverity"), ("STRATACOM-MIB", "logMsg"))
connSvc = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 3))
portSvc = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 4))
connMibUpTime = MibScalar((1, 3, 6, 1, 4, 1, 351, 3, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMibUpTime.setStatus('mandatory')
connAvailIndex = MibScalar((1, 3, 6, 1, 4, 1, 351, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connAvailIndex.setStatus('mandatory')
connectionTable = MibTable((1, 3, 6, 1, 4, 1, 351, 3, 3), )
if mibBuilder.loadTexts: connectionTable.setStatus('mandatory')
connectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 3, 3, 1), ).setIndexNames((0, "STRATACOM-MIB", "connectionIndex"))
if mibBuilder.loadTexts: connectionEntry.setStatus('mandatory')
connectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionIndex.setStatus('mandatory')
connectionLocalEndPt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionLocalEndPt.setStatus('mandatory')
connectionRemoteEndPt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionRemoteEndPt.setStatus('mandatory')
connectionAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionAdminStatus.setStatus('mandatory')
connectionOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 1), ("clear", 2), ("fail", 3), ("down", 4), ("incomplete", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionOpStatus.setStatus('mandatory')
connectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionRowStatus.setStatus('mandatory')
connectionTrkAvoidType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("satellite", 2), ("terrestrial", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionTrkAvoidType.setStatus('mandatory')
connectionTrkAvoidZCS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionTrkAvoidZCS.setStatus('mandatory')
connectionForesight = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionForesight.setStatus('mandatory')
connectionClassOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionClassOfService.setStatus('mandatory')
connectionCurrRouteDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionCurrRouteDesc.setStatus('mandatory')
connectionPrefRouteDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionPrefRouteDesc.setStatus('mandatory')
connRouteMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRouteMaster.setStatus('mandatory')
connectionLocOSpacePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionLocOSpacePkts.setStatus('mandatory')
connectionLocOSpaceBdaCmax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionLocOSpaceBdaCmax.setStatus('mandatory')
connectionLocOSpaceBdbCmax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionLocOSpaceBdbCmax.setStatus('mandatory')
connectionRemOSpacePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionRemOSpacePkts.setStatus('mandatory')
connectionRemOSpaceBdaCmax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionRemOSpaceBdaCmax.setStatus('mandatory')
connectionRemOSpaceBdbCmax = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionRemOSpaceBdbCmax.setStatus('mandatory')
connectionTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("continuity", 1), ("delay", 2), ("none", 255))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectionTestType.setStatus('mandatory')
connectionTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionTestResult.setStatus('mandatory')
connectionAbitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionAbitStatus.setStatus('mandatory')
connectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 20))).clone(namedValues=NamedValues(("fr", 1), ("atm", 2), ("atm-fr", 3), ("unknown", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionType.setStatus('mandatory')
connectionLocalStr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionLocalStr.setStatus('mandatory')
connectionRemoteStr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 3, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectionRemoteStr.setStatus('mandatory')
frEndPtTable = MibTable((1, 3, 6, 1, 4, 1, 351, 3, 4), )
if mibBuilder.loadTexts: frEndPtTable.setStatus('mandatory')
frEndPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 3, 4, 1), ).setIndexNames((0, "STRATACOM-MIB", "frEndPtNodeName"), (0, "STRATACOM-MIB", "frEndPtIfShelf"), (0, "STRATACOM-MIB", "frEndPtSlot"), (0, "STRATACOM-MIB", "frEndPtLine"), (0, "STRATACOM-MIB", "frEndPtPort"), (0, "STRATACOM-MIB", "frEndPtDlci"))
if mibBuilder.loadTexts: frEndPtEntry.setStatus('mandatory')
frEndPtNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtNodeName.setStatus('mandatory')
frEndPtIfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtIfShelf.setStatus('mandatory')
frEndPtSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtSlot.setStatus('mandatory')
frEndPtLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtLine.setStatus('mandatory')
frEndPtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtPort.setStatus('mandatory')
frEndPtDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtDlci.setStatus('mandatory')
frEndPtConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndPtConnIndex.setStatus('mandatory')
frEndPtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtAdminStatus.setStatus('mandatory')
frEndPtOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 16))).clone(namedValues=NamedValues(("inactive", 1), ("clear", 2), ("fail", 3), ("down", 4), ("alarm", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndPtOpStatus.setStatus('mandatory')
frEndPtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtRowStatus.setStatus('mandatory')
frEndPtMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtMIR.setStatus('mandatory')
frEndPtCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtCIR.setStatus('mandatory')
frEndPtBc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtBc.setStatus('mandatory')
frEndPtBe = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtBe.setStatus('mandatory')
frEndPtVcQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtVcQSize.setStatus('mandatory')
frEndPtPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtPIR.setStatus('mandatory')
frEndPtCMAX = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtCMAX.setStatus('mandatory')
frEndPtEcnQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(6553)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtEcnQSize.setStatus('mandatory')
frEndPtQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtQIR.setStatus('mandatory')
frEndPtPercUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtPercUtil.setStatus('mandatory')
frEndPtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('low')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtPriority.setStatus('mandatory')
frEndPtInitialBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtInitialBurstSize.setStatus('mandatory')
frEndPtDeTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtDeTagging.setStatus('mandatory')
frEndPtIngressDeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtIngressDeThreshold.setStatus('mandatory')
frEndPtEgressQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtEgressQDepth.setStatus('mandatory')
frEndPtEgressDeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtEgressDeThreshold.setStatus('mandatory')
frEndPtEgressEcnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(6553)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtEgressEcnThreshold.setStatus('mandatory')
frEndPtEgressQSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("highPriority", 1), ("lowPriority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtEgressQSelect.setStatus('mandatory')
frEndPtLpbkState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndPtLpbkState.setStatus('mandatory')
frEndPtType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cdpSdpCard", 1), ("fr", 2), ("ait", 3), ("frsm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frEndPtType.setStatus('mandatory')
frEndPtchanType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("frNIW", 1), ("frSIW-transparent", 2), ("frSIW-translate", 3), ("frFUNI", 4))).clone('frNIW')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtchanType.setStatus('mandatory')
frEndPtchanFECNconfig = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mapEFCI", 1), ("setEFCIzero", 2))).clone('setEFCIzero')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtchanFECNconfig.setStatus('mandatory')
frEndPtchanDEtoCLPmap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mapCLP", 1), ("setCLPzero", 2), ("setCLPone", 3))).clone('mapCLP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtchanDEtoCLPmap.setStatus('mandatory')
frEndPtchanCLPtoDEmap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mapDE", 1), ("setDEzero", 2), ("setDEone", 3), ("ignoreCLP", 4))).clone('mapDE')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frEndPtchanCLPtoDEmap.setStatus('mandatory')
aitEndPtTable = MibTable((1, 3, 6, 1, 4, 1, 351, 3, 5), )
if mibBuilder.loadTexts: aitEndPtTable.setStatus('mandatory')
aitEndPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 3, 5, 1), ).setIndexNames((0, "STRATACOM-MIB", "aitEndPtNodeName"), (0, "STRATACOM-MIB", "aitEndPtIfShelf"), (0, "STRATACOM-MIB", "aitEndPtSlot"), (0, "STRATACOM-MIB", "aitEndPtVpi"), (0, "STRATACOM-MIB", "aitEndPtVci"))
if mibBuilder.loadTexts: aitEndPtEntry.setStatus('mandatory')
aitEndPtNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtNodeName.setStatus('mandatory')
aitEndPtIfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtIfShelf.setStatus('mandatory')
aitEndPtSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtSlot.setStatus('mandatory')
aitEndPtVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtVpi.setStatus('mandatory')
aitEndPtVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtVci.setStatus('mandatory')
aitEndPtConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtConnIndex.setStatus('mandatory')
aitEndPtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtAdminStatus.setStatus('mandatory')
aitEndPtOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("clear", 2), ("fail", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtOpStatus.setStatus('mandatory')
aitEndPtMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtMIR.setStatus('mandatory')
aitEndPtCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtCIR.setStatus('mandatory')
aitEndPtVcQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtVcQSize.setStatus('mandatory')
aitEndPtPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtPIR.setStatus('mandatory')
aitEndPtCMAX = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtCMAX.setStatus('mandatory')
aitEndPtEcnQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtEcnQSize.setStatus('mandatory')
aitEndPtQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2400, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtQIR.setStatus('mandatory')
aitEndPtPercUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtPercUtil.setStatus('mandatory')
aitEndPtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aitEndPtPriority.setStatus('mandatory')
atmEndPtTable = MibTable((1, 3, 6, 1, 4, 1, 351, 3, 6), )
if mibBuilder.loadTexts: atmEndPtTable.setStatus('mandatory')
atmEndPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 3, 6, 1), ).setIndexNames((0, "STRATACOM-MIB", "atmEndPtNodeName"), (0, "STRATACOM-MIB", "atmEndPtIfShelf"), (0, "STRATACOM-MIB", "atmEndPtSlot"), (0, "STRATACOM-MIB", "atmEndPtPort"), (0, "STRATACOM-MIB", "atmEndPtVpi"), (0, "STRATACOM-MIB", "atmEndPtVci"))
if mibBuilder.loadTexts: atmEndPtEntry.setStatus('mandatory')
atmEndPtNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtNodeName.setStatus('mandatory')
atmEndPtIfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtIfShelf.setStatus('mandatory')
atmEndPtSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtSlot.setStatus('mandatory')
atmEndPtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtPort.setStatus('mandatory')
atmEndPtVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtVpi.setStatus('mandatory')
atmEndPtVci = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtVci.setStatus('mandatory')
atmEndPtConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndPtConnIndex.setStatus('mandatory')
atmEndPtAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("testing", 3))).clone('inactive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtAdminStatus.setStatus('mandatory')
atmEndPtOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("clear", 2), ("fail", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndPtOpStatus.setStatus('mandatory')
atmEndPtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtRowStatus.setStatus('mandatory')
atmEndPtMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 353208)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtMIR.setStatus('mandatory')
atmEndPtCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 353208)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtCIR.setStatus('mandatory')
atmEndPtPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 353208)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtPIR.setStatus('mandatory')
atmEndPtQIR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 96000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtQIR.setStatus('mandatory')
atmEndPtPercUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtPercUtil.setStatus('mandatory')
atmEndPtPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEndPtPriority.setStatus('mandatory')
atmEndPtIBS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24000)).clone(900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtIBS.setStatus('mandatory')
atmEndPtVcQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmEndPtVcQSize.setStatus('mandatory')
segmentTable = MibTable((1, 3, 6, 1, 4, 1, 351, 3, 7), )
if mibBuilder.loadTexts: segmentTable.setStatus('mandatory')
segmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 3, 7, 1), ).setIndexNames((0, "STRATACOM-MIB", "segEndPtTableId"), (0, "STRATACOM-MIB", "segNodeName"), (0, "STRATACOM-MIB", "segShelf"), (0, "STRATACOM-MIB", "segSlot"), (0, "STRATACOM-MIB", "segLine"), (0, "STRATACOM-MIB", "segPort"), (0, "STRATACOM-MIB", "segSubChn1"), (0, "STRATACOM-MIB", "segSubChn2"))
if mibBuilder.loadTexts: segmentEntry.setStatus('mandatory')
segEndPtTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frEndPtTable", 1), ("atmEndptTable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: segEndPtTableId.setStatus('mandatory')
segNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: segNodeName.setStatus('mandatory')
segShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: segShelf.setStatus('mandatory')
segSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: segSlot.setStatus('mandatory')
segLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: segLine.setStatus('mandatory')
segPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: segPort.setStatus('mandatory')
segSubChn1 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: segSubChn1.setStatus('mandatory')
segSubChn2 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: segSubChn2.setStatus('mandatory')
segOeEndPt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 7, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segOeEndPt.setStatus('mandatory')
segConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: segConnIndex.setStatus('mandatory')
segNextSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 7, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segNextSeg.setStatus('mandatory')
cmpaErrorLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 351, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpaErrorLastIndex.setStatus('mandatory')
cmpaErrorFlushAll = MibScalar((1, 3, 6, 1, 4, 1, 351, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("flush", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmpaErrorFlushAll.setStatus('mandatory')
cmpaErrorTable = MibTable((1, 3, 6, 1, 4, 1, 351, 3, 10), )
if mibBuilder.loadTexts: cmpaErrorTable.setStatus('mandatory')
cmpaErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 3, 10, 1), ).setIndexNames((0, "STRATACOM-MIB", "cmpaErrorReqId"))
if mibBuilder.loadTexts: cmpaErrorEntry.setStatus('mandatory')
cmpaErrorReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpaErrorReqId.setStatus('mandatory')
cmpaErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpaErrorDesc.setStatus('mandatory')
cmpaErrorEcode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 500, 501, 502))).clone(namedValues=NamedValues(("invalid-network", 1), ("invalid-node", 2), ("invalid-shelf", 3), ("invalid-release", 4), ("node-timeout", 5), ("node-busy", 6), ("no-snmpcomm", 7), ("snmpcomm-error", 8), ("node-error", 9), ("bad-value", 10), ("port-not-found", 11), ("slot-is-full", 12), ("conn-not-found", 100), ("endpt-exists", 101), ("lendpt-exists", 102), ("rendpt-exists", 103), ("lendpt-missing", 104), ("rendpt-missing", 105), ("db-lendpt-not-found", 106), ("db-rendpt-not-found", 107), ("lendpt-not-found", 108), ("rendpt-not-found", 109), ("dangling-endpt", 110), ("endpt-rowstatus-missing", 111), ("conn-rowstatus-missing", 112), ("invalid-endpt-rowstatus", 113), ("invalid-conn-rowstatus", 114), ("invalid-connindex", 115), ("testtype-missing", 116), ("partial-add", 117), ("partial-mod", 118), ("invalid-bw", 119), ("not-active", 120), ("invalid-adminstatus", 121), ("not-clear", 122), ("invalid-endpt-comb", 123), ("invalid-chantype", 124), ("cmgrd-timeout", 125), ("no-cmgrd", 126), ("ronly-for-frp", 127), ("invalid-chanFECNconfig", 128), ("invalid-chanCLPtoDEmap", 129), ("ibs-less-bc", 130), ("asi-no-remote", 131), ("frsm-remote", 132), ("foresight-disabled", 133), ("no-error-entry", 500), ("not-applicable", 501), ("invalid-flushall", 502)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpaErrorEcode.setStatus('mandatory')
cmpaErrorLastDesc = MibScalar((1, 3, 6, 1, 4, 1, 351, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpaErrorLastDesc.setStatus('mandatory')
cmpaErrorLastEcode = MibScalar((1, 3, 6, 1, 4, 1, 351, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 500, 501, 502))).clone(namedValues=NamedValues(("invalid-network", 1), ("invalid-node", 2), ("invalid-shelf", 3), ("invalid-release", 4), ("node-timeout", 5), ("node-busy", 6), ("no-snmpcomm", 7), ("snmpcomm-error", 8), ("node-error", 9), ("bad-value", 10), ("port-not-found", 11), ("slot-is-full", 12), ("conn-not-found", 100), ("endpt-exists", 101), ("lendpt-exists", 102), ("rendpt-exists", 103), ("lendpt-missing", 104), ("rendpt-missing", 105), ("db-lendpt-not-found", 106), ("db-rendpt-not-found", 107), ("lendpt-not-found", 108), ("rendpt-not-found", 109), ("dangling-endpt", 110), ("endpt-rowstatus-missing", 111), ("conn-rowstatus-missing", 112), ("invalid-endpt-rowstatus", 113), ("invalid-conn-rowstatus", 114), ("invalid-connindex", 115), ("testtype-missing", 116), ("partial-add", 117), ("partial-mod", 118), ("invalid-bw", 119), ("not-active", 120), ("invalid-adminstatus", 121), ("not-clear", 122), ("invalid-endpt-comb", 123), ("invalid-chantype", 124), ("cmgrd-timeout", 125), ("no-cmgrd", 126), ("ronly-for-frp", 127), ("invalid-chanFECNconfig", 128), ("invalid-chanCLPtoDEmap", 129), ("ibs-less-bc", 130), ("asi-no-remote", 131), ("frsm-remote", 132), ("foresight-disabled", 133), ("no-error-entry", 500), ("not-applicable", 501), ("invalid-flushall", 502)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmpaErrorLastEcode.setStatus('mandatory')
portsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 351, 4, 1), )
if mibBuilder.loadTexts: portsInfoTable.setStatus('mandatory')
portsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 4, 1, 1), ).setIndexNames((0, "STRATACOM-MIB", "portsInfoNode"), (0, "STRATACOM-MIB", "portsInfoShelf"), (0, "STRATACOM-MIB", "portsInfoSlot"), (0, "STRATACOM-MIB", "portsInfoLine"), (0, "STRATACOM-MIB", "portsInfoPort"))
if mibBuilder.loadTexts: portsInfoEntry.setStatus('mandatory')
portsInfoNode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsInfoNode.setStatus('mandatory')
portsInfoShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsInfoShelf.setStatus('mandatory')
portsInfoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsInfoSlot.setStatus('mandatory')
portsInfoLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsInfoLine.setStatus('mandatory')
portsInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsInfoPort.setStatus('mandatory')
portsInfoPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("frsm", 1), ("frp", 2), ("ausm", 3), ("atm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsInfoPortType.setStatus('mandatory')
portsInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("remoteLoopback", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsInfoPortState.setStatus('mandatory')
portsInfoPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portsInfoPortSpeed.setStatus('mandatory')
frPortsCfgTable = MibTable((1, 3, 6, 1, 4, 1, 351, 4, 2), )
if mibBuilder.loadTexts: frPortsCfgTable.setStatus('mandatory')
frPortsCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 4, 2, 1), ).setIndexNames((0, "STRATACOM-MIB", "frPortsCfgNode"), (0, "STRATACOM-MIB", "frPortsCfgShelf"), (0, "STRATACOM-MIB", "frPortsCfgSlot"), (0, "STRATACOM-MIB", "frPortsCfgLine"), (0, "STRATACOM-MIB", "frPortsCfgPort"))
if mibBuilder.loadTexts: frPortsCfgEntry.setStatus('mandatory')
frPortsCfgNode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsCfgNode.setStatus('mandatory')
frPortsCfgShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsCfgShelf.setStatus('mandatory')
frPortsCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsCfgSlot.setStatus('mandatory')
frPortsCfgLine = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsCfgLine.setStatus('mandatory')
frPortsCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsCfgPort.setStatus('mandatory')
frPortsCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("modify", 3), ("up-frp", 4), ("down-frp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frPortsCfgRowStatus.setStatus('mandatory')
frPortsCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frsm", 1), ("frp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsCfgPortType.setStatus('mandatory')
frPortsCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("remoteLoopback", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsCfgPortState.setStatus('mandatory')
frPortsCfgChCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsCfgChCnt.setStatus('mandatory')
frPortsCfgPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frPortsCfgPortSpeed.setStatus('mandatory')
frPortsCfgDs0ChSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s56k", 1), ("s64k", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frPortsCfgDs0ChSpeed.setStatus('mandatory')
frPortsCfgSigProt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("lmi-noasyn", 2), ("lmi-asyn", 3), ("uni-annexA", 4), ("uni-annexD", 5), ("nni-annexA", 6), ("nni-annexD", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frPortsCfgSigProt.setStatus('mandatory')
frPortsCfgNNIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsCfgNNIStatus.setStatus('mandatory')
frPortsCfgAsyncUpd = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frPortsCfgAsyncUpd.setStatus('mandatory')
frPortsCfgPollVerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 15), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frPortsCfgPollVerTimer.setStatus('mandatory')
frPortsCfgErrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frPortsCfgErrThresh.setStatus('mandatory')
frPortsCfgMonEveCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frPortsCfgMonEveCnt.setStatus('mandatory')
frPortsCfgFrmFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 18), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frPortsCfgFrmFlags.setStatus('mandatory')
frPortsCfgLinkTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 19), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frPortsCfgLinkTimer.setStatus('mandatory')
frPortsCfgPollCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frPortsCfgPollCycle.setStatus('mandatory')
frAxPortsCfgSvcRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 21), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frAxPortsCfgSvcRatio.setStatus('mandatory')
frIxPortsCfgClockType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("looped", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIxPortsCfgClockType.setStatus('mandatory')
frIxPortsCfgVcCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frIxPortsCfgVcCount.setStatus('mandatory')
frPortsCfgVcPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 24), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frPortsCfgVcPtr.setStatus('mandatory')
frIxPortsCfgMaxTxQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 25), Integer32().clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIxPortsCfgMaxTxQDepth.setStatus('mandatory')
frIxPortsCfgECNQThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 26), Integer32().clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIxPortsCfgECNQThresh.setStatus('mandatory')
frIxPortsCfgDEThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 27), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIxPortsCfgDEThresh.setStatus('mandatory')
frIxPortsCfgIDEMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIxPortsCfgIDEMap.setStatus('mandatory')
frIxPortsCfgCommPri = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIxPortsCfgCommPri.setStatus('mandatory')
frIxPortsCfgUpRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 30), Integer32().clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIxPortsCfgUpRNR.setStatus('mandatory')
frIxPortsCfgLowRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 31), Integer32().clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIxPortsCfgLowRNR.setStatus('mandatory')
frIxPortsCfgOamThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIxPortsCfgOamThresh.setStatus('mandatory')
frIxPortsCfgCLLMTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIxPortsCfgCLLMTimer.setStatus('mandatory')
frIxPortsCfgEFCItoBECN = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frIxPortsCfgEFCItoBECN.setStatus('mandatory')
frIxPortsCfgSrRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frIxPortsCfgSrRTS.setStatus('mandatory')
frIxPortsCfgSrDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frIxPortsCfgSrDTR.setStatus('mandatory')
frIxPortsCfgSrDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frIxPortsCfgSrDCD.setStatus('mandatory')
frIxPortsCfgSrCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frIxPortsCfgSrCTS.setStatus('mandatory')
frIxPortsCfgSrDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frIxPortsCfgSrDSR.setStatus('mandatory')
frIxPortsCfgLoopBack = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frIxPortsCfgLoopBack.setStatus('mandatory')
frIxPortsCfgExtConFail = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frIxPortsCfgExtConFail.setStatus('mandatory')
frAxPortsCfgLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frAxPortsCfgLogPort.setStatus('mandatory')
ppaErrorLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 351, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppaErrorLastIndex.setStatus('mandatory')
ppaErrorFlushAll = MibScalar((1, 3, 6, 1, 4, 1, 351, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("flush", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ppaErrorFlushAll.setStatus('mandatory')
ppaErrorTable = MibTable((1, 3, 6, 1, 4, 1, 351, 4, 10), )
if mibBuilder.loadTexts: ppaErrorTable.setStatus('mandatory')
ppaErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 4, 10, 1), ).setIndexNames((0, "STRATACOM-MIB", "ppaErrorReqId"))
if mibBuilder.loadTexts: ppaErrorEntry.setStatus('mandatory')
ppaErrorReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppaErrorReqId.setStatus('mandatory')
ppaErrorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppaErrorDesc.setStatus('mandatory')
ppaErrorEcode = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 500, 501, 502))).clone(namedValues=NamedValues(("invalid-network", 1), ("invalid-node", 2), ("invalid-shelf", 3), ("invalid-release", 4), ("node-timeout", 5), ("node-busy", 6), ("no-snmpcomm", 7), ("snmpcomm-error", 8), ("node-error", 9), ("bad-value", 10), ("port-not-found", 11), ("slot-is-full", 12), ("rowstatus-missing", 100), ("port-exists", 101), ("invalid-slot", 102), ("invalid-line", 103), ("line-is-full", 104), ("multiple-ports", 105), ("port-reserved", 106), ("na-frsm", 107), ("na-frp", 108), ("no-up-down-frsm", 109), ("invalid-set", 110), ("illegal-set", 111), ("partial-add", 112), ("no-error-entry", 500), ("not-applicable", 501), ("invalid-flushall", 502)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppaErrorEcode.setStatus('mandatory')
ppaErrorLastDesc = MibScalar((1, 3, 6, 1, 4, 1, 351, 4, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppaErrorLastDesc.setStatus('mandatory')
ppaErrorLastEcode = MibScalar((1, 3, 6, 1, 4, 1, 351, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 500, 501, 502))).clone(namedValues=NamedValues(("invalid-network", 1), ("invalid-node", 2), ("invalid-shelf", 3), ("invalid-release", 4), ("node-timeout", 5), ("node-busy", 6), ("no-snmpcomm", 7), ("snmpcomm-error", 8), ("node-error", 9), ("bad-value", 10), ("port-not-found", 11), ("slot-is-full", 12), ("rowstatus-missing", 100), ("port-exists", 101), ("invalid-slot", 102), ("invalid-line", 103), ("line-is-full", 104), ("multiple-ports", 105), ("port-reserved", 106), ("na-frsm", 107), ("na-frp", 108), ("no-up-down-frsm", 109), ("invalid-set", 110), ("illegal-set", 111), ("partial-add", 112), ("no-error-entry", 500), ("not-applicable", 501), ("invalid-flushall", 502)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppaErrorLastEcode.setStatus('mandatory')
userConnCleared = NotificationType((1, 3, 6, 1, 4, 1, 351, 1) + (0,10000)).setObjects(("STRATACOM-MIB", "lastSequenceNumber"), ("STRATACOM-MIB", "connectionLocalEndPt"), ("STRATACOM-MIB", "connectionLocalStr"), ("STRATACOM-MIB", "connectionRemoteEndPt"), ("STRATACOM-MIB", "connectionRemoteStr"), ("STRATACOM-MIB", "connectionOpStatus"), ("STRATACOM-MIB", "connectionAbitStatus"), ("STRATACOM-MIB", "connectionType"))
userConnFailed = NotificationType((1, 3, 6, 1, 4, 1, 351, 1) + (0,10001)).setObjects(("STRATACOM-MIB", "lastSequenceNumber"), ("STRATACOM-MIB", "connectionLocalEndPt"), ("STRATACOM-MIB", "connectionLocalStr"), ("STRATACOM-MIB", "connectionRemoteEndPt"), ("STRATACOM-MIB", "connectionRemoteStr"), ("STRATACOM-MIB", "connectionOpStatus"), ("STRATACOM-MIB", "connectionAbitStatus"), ("STRATACOM-MIB", "connectionType"))
userConnDown = NotificationType((1, 3, 6, 1, 4, 1, 351, 1) + (0,10002)).setObjects(("STRATACOM-MIB", "lastSequenceNumber"), ("STRATACOM-MIB", "connectionLocalEndPt"), ("STRATACOM-MIB", "connectionLocalStr"), ("STRATACOM-MIB", "connectionRemoteEndPt"), ("STRATACOM-MIB", "connectionRemoteStr"), ("STRATACOM-MIB", "connectionOpStatus"), ("STRATACOM-MIB", "connectionAbitStatus"), ("STRATACOM-MIB", "connectionType"))
atmTrunks = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2), )
if mibBuilder.loadTexts: atmTrunks.setStatus('mandatory')
atmTrkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1), ).setIndexNames((0, "STRATACOM-MIB", "switchIfIndex"))
if mibBuilder.loadTexts: atmTrkEntry.setStatus('mandatory')
atmTrkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("clear", 1), ("minor", 2), ("major", 3), ("down", 4), ("deact", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatus.setStatus('mandatory')
atmTrkAlmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkAlmEnable.setStatus('mandatory')
atmTrkComStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("commOK", 1), ("commFAIL", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkComStatus.setStatus('mandatory')
atmTrkRcvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkRcvRate.setStatus('mandatory')
atmTrkTrnsCap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkTrnsCap.setStatus('mandatory')
atmTrkTrnsLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkTrnsLoad.setStatus('mandatory')
atmTrkRcvCap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkRcvCap.setStatus('mandatory')
atmTrkRcvLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkRcvLoad.setStatus('mandatory')
atmTrkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("trkTypePHY", 1), ("trkTypeCBR", 2), ("trkTypeVBR", 3), ("trkTypeABR", 4), ("trkTypeIPXAF", 5), ("trkTypeAXISAF", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkType.setStatus('mandatory')
atmTrkVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkVPI.setStatus('mandatory')
atmTrkResChans = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkResChans.setStatus('mandatory')
atmTrkTrafCls = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkTrafCls.setStatus('mandatory')
atmTrkOeNdType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ndTypeOther", 1), ("ndTypeIPX", 2), ("ndTypeBPX", 3), ("ndTypeIPXAF", 4), ("ndTypeAXIS", 5), ("ndTypeIGX", 6), ("ndTypeIGXAF", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkOeNdType.setStatus('mandatory')
atmTrkOeName = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkOeName.setStatus('mandatory')
atmTrkOeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkOeIpAddr.setStatus('mandatory')
atmTrkOeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkOeIfIndex.setStatus('mandatory')
atmTrkOeDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkOeDomain.setStatus('mandatory')
atmTrkSvcChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkSvcChannels.setStatus('mandatory')
atmTrkShareLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portBased", 1), ("cardBased", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkShareLcn.setStatus('mandatory')
atmTrkSvcLcnLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkSvcLcnLow.setStatus('mandatory')
atmTrkSvcLcnHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkSvcLcnHigh.setStatus('mandatory')
atmTrkSvcVpiLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkSvcVpiLow.setStatus('mandatory')
atmTrkSvcVpiHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkSvcVpiHigh.setStatus('mandatory')
atmTrkSvcVciLow = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkSvcVciLow.setStatus('mandatory')
atmTrkSvcVciHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkSvcVciHigh.setStatus('mandatory')
atmTrkSvcQbinBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 26), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkSvcQbinBitMap.setStatus('mandatory')
atmTrkSvcQbinSz = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkSvcQbinSz.setStatus('mandatory')
atmTrkSvcBw = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkSvcBw.setStatus('mandatory')
atmTrkSvcInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inUse", 1), ("notInUse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkSvcInUse.setStatus('mandatory')
atmTrkXmitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkXmitRate.setStatus('mandatory')
atmTrkPassSync = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkPassSync.setStatus('mandatory')
atmTrkStatRes = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkStatRes.setStatus('mandatory')
atmTrkLoopClock = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkLoopClock.setStatus('mandatory')
atmTrkBdataBTxQlen = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 8000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkBdataBTxQlen.setStatus('mandatory')
atmTrkBdataBRxQlen = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 8000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkBdataBRxQlen.setStatus('mandatory')
atmTrkBdataBTxEfcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 8000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkBdataBTxEfcn.setStatus('mandatory')
atmTrkBdataBRxEfcn = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 8000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkBdataBRxEfcn.setStatus('mandatory')
atmTrkBdataBTxHiClp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkBdataBTxHiClp.setStatus('mandatory')
atmTrkBdataBRxHiClp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkBdataBRxHiClp.setStatus('mandatory')
atmTrkBdataBTxLoClp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkBdataBTxLoClp.setStatus('mandatory')
atmTrkBdataBRxLoClp = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkBdataBRxLoClp.setStatus('mandatory')
atmTrkMaxChanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 16320))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkMaxChanPort.setStatus('mandatory')
atmTrkLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terrestrial", 1), ("satellite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkLinkType.setStatus('mandatory')
atmTrkDerouteDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkDerouteDelayTimer.setStatus('mandatory')
atmTrkGtwyChCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkGtwyChCount.setStatus('mandatory')
atmTrkRetainedLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkRetainedLinks.setStatus('mandatory')
atmTrkImaWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkImaWindowSize.setStatus('mandatory')
atmTrkImaTrnsCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkImaTrnsCnts.setStatus('mandatory')
atmTrkImaReenableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 2, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmTrkImaReenableTimer.setStatus('mandatory')
atmTrunkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4), )
if mibBuilder.loadTexts: atmTrunkStatsTable.setStatus('mandatory')
atmTrkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1), ).setIndexNames((0, "STRATACOM-MIB", "switchIfIndex"))
if mibBuilder.loadTexts: atmTrkStatsEntry.setStatus('mandatory')
atmTrkStatsTxVoPktDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxVoPktDrps.setStatus('mandatory')
atmTrkStatsTxTsPktDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxTsPktDrps.setStatus('mandatory')
atmTrkStatsTxNonTsPktDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxNonTsPktDrps.setStatus('mandatory')
atmTrkStatsTxHiPrioPktDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxHiPrioPktDrps.setStatus('mandatory')
atmTrkStatsTxBdataAPktDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxBdataAPktDrps.setStatus('mandatory')
atmTrkStatsTxBdataBPktDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxBdataBPktDrps.setStatus('mandatory')
atmTrkStatsRxVoPktDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsRxVoPktDrps.setStatus('mandatory')
atmTrkStatsRxTsPktDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsRxTsPktDrps.setStatus('mandatory')
atmTrkStatsRxNonTsPktDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsRxNonTsPktDrps.setStatus('mandatory')
atmTrkStatsRxHiPrioPktDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsRxHiPrioPktDrps.setStatus('mandatory')
atmTrkStatsRxBdataAPktDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsRxBdataAPktDrps.setStatus('mandatory')
atmTrkStatsRxBdataBPktDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsRxBdataBPktDrps.setStatus('mandatory')
atmTrkStatsSpacerPktsDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsSpacerPktsDrps.setStatus('mandatory')
atmTrkStatsTotalPktsTxtoLns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTotalPktsTxtoLns.setStatus('mandatory')
atmTrkStatsTotalPktsRxFromLns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTotalPktsRxFromLns.setStatus('mandatory')
atmTrkStatsTxVoCellDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxVoCellDrps.setStatus('mandatory')
atmTrkStatsTxTsCellDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxTsCellDrps.setStatus('mandatory')
atmTrkStatsTxNonTsCellDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxNonTsCellDrps.setStatus('mandatory')
atmTrkStatsTxHiPrioCellDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxHiPrioCellDrps.setStatus('mandatory')
atmTrkStatsTxBdataACellDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxBdataACellDrps.setStatus('mandatory')
atmTrkStatsTxBdataBCellDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxBdataBCellDrps.setStatus('mandatory')
atmTrkStatsTxCbrCellDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxCbrCellDrps.setStatus('mandatory')
atmTrkStatsTxVbrCellDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxVbrCellDrps.setStatus('mandatory')
atmTrkStatsTxAbrCellDrps = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTxAbrCellDrps.setStatus('mandatory')
atmTrkStatsTotalCellsTxtoLns = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTotalCellsTxtoLns.setStatus('mandatory')
atmTrkStatsTotalCellsRxFromPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 100, 4, 2, 4, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTrkStatsTotalCellsRxFromPorts.setStatus('mandatory')
mibBuilder.exportSymbols("STRATACOM-MIB", frBwClassOeQIR=frBwClassOeQIR, frEndPtEgressEcnThreshold=frEndPtEgressEcnThreshold, aitEndPtCIR=aitEndPtCIR, segLine=segLine, connServerTable=connServerTable, eventFilterStatus=eventFilterStatus, frIxPortsCfgSrDCD=frIxPortsCfgSrDCD, switchIfIndex=switchIfIndex, frpGroup=frpGroup, atmTrkResChans=atmTrkResChans, atmPortStatCellsRxs=atmPortStatCellsRxs, portSvc=portSvc, connectionAbitStatus=connectionAbitStatus, atmPortMetro=atmPortMetro, frEndptOeEcnQSize=frEndptOeEcnQSize, networkTable=networkTable, connFirstEndptPtr=connFirstEndptPtr, atmPortLmiVpi=atmPortLmiVpi, frAxPortsCfgLogPort=frAxPortsCfgLogPort, frLportSrRTS=frLportSrRTS, trunkRTCTxBurstyDataAClpPktsDropped=trunkRTCTxBurstyDataAClpPktsDropped, frpActive=frpActive, switchIfSlot=switchIfSlot, atmPortAxis=atmPortAxis, trunkRTCVoicePktsXmitted=trunkRTCVoicePktsXmitted, connectionRemoteEndPt=connectionRemoteEndPt, frEndptOperStatus=frEndptOperStatus, userConnCleared=userConnCleared, frLportTxFrms=frLportTxFrms, segConnIndex=segConnIndex, atmEndptOeIBS=atmEndptOeIBS, frEndptMapEntry=frEndptMapEntry, cmpaErrorLastIndex=cmpaErrorLastIndex, frBwClassMIR=frBwClassMIR, frBwClassCMAX=frBwClassCMAX, atmDiscardQbinClpThs=atmDiscardQbinClpThs, frEndptSecInServices=frEndptSecInServices, atmBwClassCBS=atmBwClassCBS, frpRTCBadSequenceNumberCount=frpRTCBadSequenceNumberCount, switchIfPort=switchIfPort, atmEndptGroupDesc=atmEndptGroupDesc, atmEndptPCR=atmEndptPCR, atmTestFailure=atmTestFailure, trunkComment=trunkComment, trunkRTCEntry=trunkRTCEntry, atmPortQueueClpHi=atmPortQueueClpHi, frIxPortsCfgIDEMap=frIxPortsCfgIDEMap, atmTrkStatsTxCbrCellDrps=atmTrkStatsTxCbrCellDrps, trapConfigEntry=trapConfigEntry, connRTCRcvdPktsDiscarded=connRTCRcvdPktsDiscarded, voiceChannelRecvSigDBit=voiceChannelRecvSigDBit, frPortsCfgAsyncUpd=frPortsCfgAsyncUpd, atmEndptOeCIR=atmEndptOeCIR, frpLocalSlot=frpLocalSlot, atmTrkBdataBTxLoClp=atmTrkBdataBTxLoClp, connRTCXmitFramesWithBECN=connRTCXmitFramesWithBECN, atmDiscardSbinFulls=atmDiscardSbinFulls, ppaErrorEcode=ppaErrorEcode, aitEndPtEntry=aitEndPtEntry, atmEndPtAdminStatus=atmEndPtAdminStatus, frLportCommPri=frLportCommPri, atmPortFirstVcPtr=atmPortFirstVcPtr, voiceChannelIfOnhkCBit=voiceChannelIfOnhkCBit, errStatusTableEntry=errStatusTableEntry, atmBwClassToQIR=atmBwClassToQIR, atmEndptCBS=atmEndptCBS, nodeGrpAlarmState=nodeGrpAlarmState, connRTCBytesRxExcessCir=connRTCBytesRxExcessCir, voiceEndptConnDesc=voiceEndptConnDesc, frLportPortIndex=frLportPortIndex, voiceChannelIf=voiceChannelIf, aitEndPtVci=aitEndPtVci, voiceBumpFailure=voiceBumpFailure, atmPortTable=atmPortTable, atmEndptPolicing=atmEndptPolicing, endOfQueueFlag=endOfQueueFlag, voiceStatPktsRxs=voiceStatPktsRxs, trunkRTCBurstyDataBClpPktsTx2Line=trunkRTCBurstyDataBClpPktsTx2Line, errStatusLastIndex=errStatusLastIndex, frEndptAdminStatus=frEndptAdminStatus, frPortsCfgChCnt=frPortsCfgChCnt, atmEndptMapSlot=atmEndptMapSlot, atmTrkSvcVciHigh=atmTrkSvcVciHigh, voiceChannelAdminStatus=voiceChannelAdminStatus, connectionLocOSpacePkts=connectionLocOSpacePkts, voiceChannelIfOnhkBBit=voiceChannelIfOnhkBBit, trunkBurstyDataBQEfcnThreshold=trunkBurstyDataBQEfcnThreshold, trunkRTCNonTimeStampedPktsXmitted=trunkRTCNonTimeStampedPktsXmitted, atmTrkStatsTotalCellsRxFromPorts=atmTrkStatsTotalCellsRxFromPorts, connectionLocalStr=connectionLocalStr, portsInfoLine=portsInfoLine, eventFilterIndex=eventFilterIndex, connRemoteMaxPkts=connRemoteMaxPkts, frOtherEndptDesc=frOtherEndptDesc, frLportStatEnqNnis=frLportStatEnqNnis, nodeGrpNetName=nodeGrpNetName, voiceEndptLpbkStatus=voiceEndptLpbkStatus, frIxPortsCfgClockType=frIxPortsCfgClockType, atmOtherEndptIndex=atmOtherEndptIndex, connSlvOSpaceCells=connSlvOSpaceCells, frEndptSubType=frEndptSubType, frIxPortsCfgECNQThresh=frIxPortsCfgECNQThresh, frLportErrThresh=frLportErrThresh, frpRTCLmiStatusUpdateRate=frpRTCLmiStatusUpdateRate, ppaErrorTable=ppaErrorTable, connOeIndex=connOeIndex, connRmtEndptDesc=connRmtEndptDesc, atmEndptCCDV=atmEndptCCDV, cirLineRTCLineNumber=cirLineRTCLineNumber, frLportCrcErrors=frLportCrcErrors, atmPortMgmtProto=atmPortMgmtProto, voiceChannelAdapVoice=voiceChannelAdapVoice, atmEndptOeCBS=atmEndptOeCBS, trunkLineLoad=trunkLineLoad, connCir=connCir, trunkRTCFrameBitErrors=trunkRTCFrameBitErrors, trunkRTCTxTimeStampCellsDropped=trunkRTCTxTimeStampCellsDropped, frEndptOeCIR=frEndptOeCIR, frpRTCFramesRcvdUndefDlciErrors=frpRTCFramesRcvdUndefDlciErrors, trunkCardType=trunkCardType, frIxPortsCfgSrDTR=frIxPortsCfgSrDTR, Active=Active, voiceEndptLocLpbkState=voiceEndptLocLpbkState, connRTCDLCI=connRTCDLCI, segSubChn1=segSubChn1, frLportRxBytes=frLportRxBytes, frLportOperStatus=frLportOperStatus, atmPortStatIlmiTrapTxs=atmPortStatIlmiTrapTxs, atmTrkAlmEnable=atmTrkAlmEnable, atmBwClassIBS=atmBwClassIBS, atmEndptToQIR=atmEndptToQIR, trunkRTCCrcErrors=trunkRTCCrcErrors, frBwClassEnableFST=frBwClassEnableFST, atmBwClassOeScrPlc=atmBwClassOeScrPlc, atmTrkBdataBTxHiClp=atmTrkBdataBTxHiClp, voiceOtherEndptEncoding=voiceOtherEndptEncoding, connTable=connTable, frpRTCFramesXmittedWithBECN=frpRTCFramesXmittedWithBECN, atmTrunkStatsTable=atmTrunkStatsTable, frLportStatTxUnis=frLportStatTxUnis, shelfCnfgSwError=shelfCnfgSwError, connRTCSecondsOffHook=connRTCSecondsOffHook, filteredLogRecord=filteredLogRecord, connectionLocOSpaceBdaCmax=connectionLocOSpaceBdaCmax, frpRTCLmiStatusXmitRate=frpRTCLmiStatusXmitRate, atmPortIlmiVci=atmPortIlmiVci, atmPortStatOamRxs=atmPortStatOamRxs, frEndptTable=frEndptTable, atmEndptMapVci=atmEndptMapVci, nextTrapSeqNum=nextTrapSeqNum, connectionRemOSpaceBdbCmax=connectionRemOSpaceBdbCmax, shelfCnfgStatMaster=shelfCnfgStatMaster, trunkClpHighDropThreshold=trunkClpHighDropThreshold, frEndPtchanFECNconfig=frEndPtchanFECNconfig, atmEndPtConnIndex=atmEndPtConnIndex, trunkTable=trunkTable, atmTrkStatsTotalCellsTxtoLns=atmTrkStatsTotalCellsTxtoLns, frLportTxFrmsBecns=frLportTxFrmsBecns, voiceChannelChannelIndex=voiceChannelChannelIndex, frEndptMapEndptPtr=frEndptMapEndptPtr, frpPortSpeed=frpPortSpeed, frEndPtQIR=frEndPtQIR, frEndptRxBytes=frEndptRxBytes, atmEndptLoCLP=atmEndptLoCLP, trunkRTCBurstyDataBEfcnCellsTx2Line=trunkRTCBurstyDataBEfcnCellsTx2Line, maintLogTable=maintLogTable, atmTrkStatRes=atmTrkStatRes, voiceEndptMapEntry=voiceEndptMapEntry, userConnDown=userConnDown, trunkRTCPktsXmitted=trunkRTCPktsXmitted, connRTCXmitFramesWithFECN=connRTCXmitFramesWithFECN, atmTrkStatsRxNonTsPktDrps=atmTrkStatsRxNonTsPktDrps, atmTrkSvcLcnLow=atmTrkSvcLcnLow, frBwClassBe=frBwClassBe, frLportAdminStatus=frLportAdminStatus, frLportUnknDlcis=frLportUnknDlcis, shelfCnfgCardError=shelfCnfgCardError, voiceEndptEndptType=voiceEndptEndptType, trunkBurstyDataBQDepth=trunkBurstyDataBQDepth, frpRTCPort=frpRTCPort, trunkRTCNonTimeStampCellsTx2Line=trunkRTCNonTimeStampCellsTx2Line, atmEndPtQIR=atmEndPtQIR, trunkRTCTxNonTStampCellsDropped=trunkRTCTxNonTStampCellsDropped, atmTrkTrnsCap=atmTrkTrnsCap, atmTrkLinkType=atmTrkLinkType, voiceEndptMapTable=voiceEndptMapTable, atmDiscardVcqFulls=atmDiscardVcqFulls, eventFilterEntry=eventFilterEntry, atmEndptLpbkStatus=atmEndptLpbkStatus, segmentEntry=segmentEntry, frPortsCfgVcPtr=frPortsCfgVcPtr, logNodeName=logNodeName, frEndptConnDesc=frEndptConnDesc, frLportChSpeed=frLportChSpeed, atmTrkTrnsLoad=atmTrkTrnsLoad, atmNextPtr=atmNextPtr, maintLogFilterNetworkName=maintLogFilterNetworkName, nodeGrpActive=nodeGrpActive, atmEndptOperStatus=atmEndptOperStatus, atmBwClassPIR=atmBwClassPIR, atmBwClassMinAdjustICA=atmBwClassMinAdjustICA, voiceEndptAdv=voiceEndptAdv, frLportSeqnmErrUnis=frLportSeqnmErrUnis, connLocalDLCI=connLocalDLCI, ppaErrorEntry=ppaErrorEntry, atmTrkSvcChannels=atmTrkSvcChannels, atmEndptMapVpi=atmEndptMapVpi, atmTrkBdataBRxLoClp=atmTrkBdataBRxLoClp, trunkInterface=trunkInterface, frEndptLpbkStatus=frEndptLpbkStatus, voiceChannelEndptPtr=voiceChannelEndptPtr, atmEndptIndex=atmEndptIndex, frLportECNQThresh=frLportECNQThresh, cirLinePortNumber=cirLinePortNumber, atmConnPtr=atmConnPtr, frPortsCfgLine=frPortsCfgLine, atmPortLmiStatEnqRetry=atmPortLmiStatEnqRetry, maintLogEntry=maintLogEntry, switchIfAdmStatus=switchIfAdmStatus, frBwClassPercUtil=frBwClassPercUtil, atmEndptTable=atmEndptTable, connAdminStatus=connAdminStatus, frEndptOeMIR=frEndptOeMIR, trunkRTCBurstyDataBCellsTx2Line=trunkRTCBurstyDataBCellsTx2Line, trunkRTCTxBurstyDataBClpPktsDropped=trunkRTCTxBurstyDataBClpPktsDropped, connectionTestType=connectionTestType, frBwClassCIR=frBwClassCIR, voiceChannelDtSignallingDelay=voiceChannelDtSignallingDelay, frPortsCfgNode=frPortsCfgNode, frEndptOeVcQSize=frEndptOeVcQSize, atmBwClassOeQIR=atmBwClassOeQIR, frEndPtchanDEtoCLPmap=frEndPtchanDEtoCLPmap, portsInfoPortState=portsInfoPortState, atmTrkStatsRxBdataBPktDrps=atmTrkStatsRxBdataBPktDrps, switchIfOperStatus=switchIfOperStatus, connRemoteSlot=connRemoteSlot, atmPortStatEfciRxs=atmPortStatEfciRxs, connEntry=connEntry, voiceChannelRecvSigBBit=voiceChannelRecvSigBBit, voiceEndptMapSlot=voiceEndptMapSlot, nodeRstTimeout=nodeRstTimeout, atmPortStatClpTxs=atmPortStatClpTxs, frpComment=frpComment, atmTrkStatsRxHiPrioPktDrps=atmTrkStatsRxHiPrioPktDrps, networkName=networkName, connMstOSpaceBdbCmax=connMstOSpaceBdbCmax, voiceStatDsiOns=voiceStatDsiOns, atmBwClassEfciQSize=atmBwClassEfciQSize, frLportAggrChCnt=frLportAggrChCnt, frpRTCLmiLinkTimeoutErrors=frpRTCLmiLinkTimeoutErrors, segShelf=segShelf, stratacom=stratacom, atmPortIlmiPollEnable=atmPortIlmiPollEnable, frConnPtr=frConnPtr)
mibBuilder.exportSymbols("STRATACOM-MIB", atmFerfRxs=atmFerfRxs, atmTrkStatsRxTsPktDrps=atmTrkStatsRxTsPktDrps, frEndPtOpStatus=frEndPtOpStatus, atmTrkStatsTotalPktsRxFromLns=atmTrkStatsTotalPktsRxFromLns, atmEndPtNodeName=atmEndPtNodeName, frOtherEndptIndex=frOtherEndptIndex, eventFilterTable=eventFilterTable, switchConnection=switchConnection, trunkRTCPktOutOfFrames=trunkRTCPktOutOfFrames, frEndptRxBytesDes=frEndptRxBytesDes, frpTable=frpTable, atmEndptBCM=atmEndptBCM, atmPortQueueClpLo=atmPortQueueClpLo, frEndptQIR=frEndptQIR, connOperStatus=connOperStatus, frLportMaxTxQDepth=frLportMaxTxQDepth, atmPortQueueDepth=atmPortQueueDepth, atmEndptMapPort=atmEndptMapPort, switchIfTable=switchIfTable, frEndptTxPkts=frEndptTxPkts, connRTCBytesTxExcessCir=connRTCBytesTxExcessCir, frpLocalLine=frpLocalLine, frpStatus=frpStatus, connRTCRcvdFramesDiscarded=connRTCRcvdFramesDiscarded, nodeGrpName=nodeGrpName, logGroup=logGroup, frLportCllmFailures=frLportCllmFailures, frpRTCLmiKeepaliveSequenceErrors=frpRTCLmiKeepaliveSequenceErrors, realTimeCountersGroup=realTimeCountersGroup, trunkRTCHighPriorityCellsTx2Line=trunkRTCHighPriorityCellsTx2Line, atmTrkGtwyChCount=atmTrkGtwyChCount, atmTrkImaReenableTimer=atmTrkImaReenableTimer, atmCellsTxPorts=atmCellsTxPorts, strmSwitchMIB=strmSwitchMIB, atmDiscardRsrcOflows=atmDiscardRsrcOflows, connLocalLine=connLocalLine, frEndptTxFrmsCirs=frEndptTxFrmsCirs, trunkRTCPlcpOutOfFrames=trunkRTCPlcpOutOfFrames, frIxPortsCfgSrRTS=frIxPortsCfgSrRTS, atmOtherEndptDesc=atmOtherEndptDesc, nodeGrpGateway=nodeGrpGateway, voiceEndptState=voiceEndptState, trunkRTCHighPriorityPktsXmitted=trunkRTCHighPriorityPktsXmitted, trunkRTCBurstyDataPktsXmitted=trunkRTCBurstyDataPktsXmitted, atmAvgVcqDepths=atmAvgVcqDepths, cirLineStatus=cirLineStatus, atmTrkBdataBRxHiClp=atmTrkBdataBRxHiClp, atmPortIlmiPollIntrvl=atmPortIlmiPollIntrvl, frNoRouteFoundFailure=frNoRouteFoundFailure, frEndPtTable=frEndPtTable, frEndptMapDlci=frEndptMapDlci, voiceStatEntry=voiceStatEntry, controlGroup=controlGroup, connRTCSecondsDsiEnabled=connRTCSecondsDsiEnabled, voiceStatRxPktsDscds=voiceStatRxPktsDscds, frEndPtIngressDeThreshold=frEndPtIngressDeThreshold, atmTrkStatsEntry=atmTrkStatsEntry, frEndptVcQSize=frEndptVcQSize, nodeNetworkName=nodeNetworkName, atmTrkStatsTxHiPrioCellDrps=atmTrkStatsTxHiPrioCellDrps, frEndPtIfShelf=frEndPtIfShelf, atmEndPtPercUtil=atmEndPtPercUtil, frLportSigProt=frLportSigProt, frEndptLocLpbkState=frEndptLocLpbkState, frEndptBc=frEndptBc, connMibUpTime=connMibUpTime, cirLineRTCFrameBitErrors=cirLineRTCFrameBitErrors, trunkAlarmState=trunkAlarmState, voiceStatSprvPktsXmits=voiceStatSprvPktsXmits, cirLineLineNumber=cirLineLineNumber, errStatusTable=errStatusTable, voiceChannelRecvSigABit=voiceChannelRecvSigABit, atmPortStatLmiStatRxs=atmPortStatLmiStatRxs, trunkRTCOutOfFrames=trunkRTCOutOfFrames, eventFilterSubstring=eventFilterSubstring, shelfCnfgObjects=shelfCnfgObjects, maintLogFilterWindow=maintLogFilterWindow, atmEndptDesc=atmEndptDesc, atmEndptCLPTagging=atmEndptCLPTagging, frEndPtDeTagging=frEndPtDeTagging, atmNonCompRxs=atmNonCompRxs, frPortsCfgPortSpeed=frPortsCfgPortSpeed, ppaErrorReqId=ppaErrorReqId, atmTrkImaWindowSize=atmTrkImaWindowSize, frEndptOePIR=frEndptOePIR, voiceStatOffhks=voiceStatOffhks, connMinBandwidth=connMinBandwidth, atmPortStatCellsTxs=atmPortStatCellsTxs, maintLogFilterGroup=maintLogFilterGroup, atmTrkMaxChanPort=atmTrkMaxChanPort, cmpaErrorFlushAll=cmpaErrorFlushAll, atmTrkOeNdType=atmTrkOeNdType, atmEndPtVcQSize=atmEndPtVcQSize, frLportCLLMTimer=frLportCLLMTimer, trunkRTCTxHighPriorityCellsDropped=trunkRTCTxHighPriorityCellsDropped, atmEndptMapEntry=atmEndptMapEntry, frEndptOeBe=frEndptOeBe, frpRTCRxStatusCounter=frpRTCRxStatusCounter, trapUploadEntry=trapUploadEntry, atmEndptAdminStatus=atmEndptAdminStatus, atmPortStatLmiStatAckTxs=atmPortStatLmiStatAckTxs, frEndptRxPkts=frEndptRxPkts, atmEndptUPC=atmEndptUPC, atmPortLmiUpdStatRetry=atmPortLmiUpdStatRetry, frLportPortDLCI=frLportPortDLCI, frBwClassBc=frBwClassBc, atmTrkOeIpAddr=atmTrkOeIpAddr, frEndptRxBytesCirs=frEndptRxBytesCirs, frEndPtNodeName=frEndPtNodeName, frEndPtInitialBurstSize=frEndPtInitialBurstSize, atmBwClassPercUtil=atmBwClassPercUtil, atmPortVcCount=atmPortVcCount, voiceChannelEchoNlp=voiceChannelEchoNlp, atmEndptRtdTestDelay=atmEndptRtdTestDelay, atmBwClassOeMFS=atmBwClassOeMFS, frEndptMapPort=frEndptMapPort, frEndPtEgressQDepth=frEndPtEgressQDepth, trunkLocalLine=trunkLocalLine, atmPortStatIlmiGetNextTxs=atmPortStatIlmiGetNextTxs, frEndptEntry=frEndptEntry, frEndPtPIR=frEndPtPIR, frEndPtchanCLPtoDEmap=frEndPtchanCLPtoDEmap, voiceChannelEchoConv=voiceChannelEchoConv, frBwClassTable=frBwClassTable, atmEndptOeMIR=atmEndptOeMIR, frLportToutCntNnis=frLportToutCntNnis, connectionIndex=connectionIndex, frIxPortsCfgDEThresh=frIxPortsCfgDEThresh, frLportPollCycle=frLportPollCycle, atmAisRxs=atmAisRxs, atmPortStatIlmiGetTxs=atmPortStatIlmiGetTxs, networkGroup=networkGroup, portsInfoEntry=portsInfoEntry, frIxPortsCfgExtConFail=frIxPortsCfgExtConFail, frIxPortsCfgOamThresh=frIxPortsCfgOamThresh, atmBwClassMFS=atmBwClassMFS, atmTrkPassSync=atmTrkPassSync, atmFramesRxPorts=atmFramesRxPorts, connRTCRcvdPkts=connRTCRcvdPkts, frNextPtr=frNextPtr, connVcQueThreshold=connVcQueThreshold, userConnFailed=userConnFailed, trunkRTCLocalPort=trunkRTCLocalPort, atmBwClassOeCBS=atmBwClassOeCBS, portsInfoTable=portsInfoTable, frEndptGroupFlag=frEndptGroupFlag, frpRTCFramesRcvdInvalidFormat=frpRTCFramesRcvdInvalidFormat, frLportSrDSR=frLportSrDSR, frEndPointFailure=frEndPointFailure, atmTrkEntry=atmTrkEntry, frpRTCCLLMBytesRx=frpRTCCLLMBytesRx, connRTCFramesRxWithDE=connRTCFramesRxWithDE, atmPortStatIlmiGetRspRxs=atmPortStatIlmiGetRspRxs, trunkRTCHighPriorityPktsDropped=trunkRTCHighPriorityPktsDropped, portsInfoSlot=portsInfoSlot, trunkClpLowDropThreshold=trunkClpLowDropThreshold, frLportCllmTxBytes=frLportCllmTxBytes, voiceEndptRateType=voiceEndptRateType, atmTrkRcvRate=atmTrkRcvRate, atmTrkStatsTotalPktsTxtoLns=atmTrkStatsTotalPktsTxtoLns, frLportMonEveCnt=frLportMonEveCnt, atmPortStatIsuEmptys=atmPortStatIsuEmptys, atmTrkStatus=atmTrkStatus, atmTrkStatsRxBdataAPktDrps=atmTrkStatsRxBdataAPktDrps, atmPortLmiPollEnable=atmPortLmiPollEnable, frLportNNIStatus=frLportNNIStatus, frpRTCFramesRcvdAlignmentErrors=frpRTCFramesRcvdAlignmentErrors, trunkRTCTotalCellsTx2Line=trunkRTCTotalCellsTx2Line, lastSequenceNumber=lastSequenceNumber, nodeName=nodeName, frPortsCfgErrThresh=frPortsCfgErrThresh, connRTCSecondsV25ModemOn=connRTCSecondsV25ModemOn, connActive=connActive, frEndptBe=frEndptBe, atmTrkStatsTxAbrCellDrps=atmTrkStatsTxAbrCellDrps, nodeFsFastRate=nodeFsFastRate, segSlot=segSlot, frpRTCTable=frpRTCTable, frBwClassQIR=frBwClassQIR, atmBwClassScrPlc=atmBwClassScrPlc, frpLocalPort=frpLocalPort, atmEndptMIR=atmEndptMIR, atmTrkStatsRxVoPktDrps=atmTrkStatsRxVoPktDrps, atmTrkSvcVpiLow=atmTrkSvcVpiLow, atmTrkStatsTxHiPrioPktDrps=atmTrkStatsTxHiPrioPktDrps, frPortsCfgEntry=frPortsCfgEntry, atmPortSlot=atmPortSlot, atmTrkStatsTxTsCellDrps=atmTrkStatsTxTsCellDrps, atmPortQueueType=atmPortQueueType, voiceEndptAvoidZCS=voiceEndptAvoidZCS, frBwClassOePIR=frBwClassOePIR, voiceEndPointFailure=voiceEndPointFailure, frLportSrCTS=frLportSrCTS, trunkRTCLocalSlot=trunkRTCLocalSlot, atmBwClassHiCLP=atmBwClassHiCLP, voiceChannelPtr=voiceChannelPtr, frLportVcCount=frLportVcCount, atmPortEntry=atmPortEntry, frEndptRxPktsDscds=frEndptRxPktsDscds, atmBwClassOeHiCLP=atmBwClassOeHiCLP, voiceChannelXmitSigDBit=voiceChannelXmitSigDBit, atmEndptFastDnICA=atmEndptFastDnICA, atmPortStatEfciTxs=atmPortStatEfciTxs, atmPortStatIlmiGetNextRxs=atmPortStatIlmiGetNextRxs, aitEndPtTable=aitEndPtTable, frBwClassVcQSize=frBwClassVcQSize, atmEndPtPriority=atmEndPtPriority, frLportToutCntUnis=frLportToutCntUnis, atmPortIlmiEventThresh=atmPortIlmiEventThresh, maintLogFilterNodeName=maintLogFilterNodeName, voiceStatTable=voiceStatTable, voiceChannelRecvSigCBit=voiceChannelRecvSigCBit, frpRTCCLLMFailures=frpRTCCLLMFailures, trunkRTCBurstyDataAClpPktsTx2Line=trunkRTCBurstyDataAClpPktsTx2Line, frEndPtPriority=frEndPtPriority, frpRTCFramesRcvdIllegalLen=frpRTCFramesRcvdIllegalLen, voiceStatPktsXmits=voiceStatPktsXmits, connRTCChannel=connRTCChannel, maintLogFilterTimeMax=maintLogFilterTimeMax, trunkStatus=trunkStatus, frEndPtLpbkState=frEndPtLpbkState, aitEndPtSlot=aitEndPtSlot, connSlvOSpaceBdbCmax=connSlvOSpaceBdbCmax, connRTCXmitPktsSupervisory=connRTCXmitPktsSupervisory, frEndPtVcQSize=frEndPtVcQSize, atmBwClassEntry=atmBwClassEntry, frLportIDEMap=frLportIDEMap, frLportCllmRxBytes=frLportCllmRxBytes, frpRTCBytesRcvd=frpRTCBytesRcvd, atmTrkType=atmTrkType, frEndptBWClass=frEndptBWClass, frEndptTxFrmsDscds=frEndptTxFrmsDscds, connPerUtil=connPerUtil, frpRTCFramesRcvd=frpRTCFramesRcvd, frEndptRxFrmsDscds=frEndptRxFrmsDscds, atmPortQueueAlgorithm=atmPortQueueAlgorithm, atmNextOnPortPtr=atmNextOnPortPtr, atmTrkRcvLoad=atmTrkRcvLoad, atmBwClassCCDV=atmBwClassCCDV, frEndPtType=frEndPtType, connRTCRxSupervisoryPkts=connRTCRxSupervisoryPkts, voiceChannelIfOnhkABit=voiceChannelIfOnhkABit, frBwClassEntry=frBwClassEntry, frLportCnfTable=frLportCnfTable, atmEndPtEntry=atmEndPtEntry, frLportOamThresh=frLportOamThresh, atmEndptOeBCM=atmEndptOeBCM, frEndPtEgressDeThreshold=frEndPtEgressDeThreshold, connSlvOSpacePkts=connSlvOSpacePkts, connRTCLine=connRTCLine, cirLineTable=cirLineTable, connStatusAlarm=connStatusAlarm, frpDeThreshold=frpDeThreshold, atmPortIlmiErrorThresh=atmPortIlmiErrorThresh)
mibBuilder.exportSymbols("STRATACOM-MIB", frPortsCfgNNIStatus=frPortsCfgNNIStatus, frEndptTxFrmsDes=frEndptTxFrmsDes, frEndptTxBytesCirs=frEndptTxBytesCirs, connLocalSlot=connLocalSlot, atmTrkStatsTxBdataBPktDrps=atmTrkStatsTxBdataBPktDrps, voiceChannelInGain=voiceChannelInGain, connAvailIndex=connAvailIndex, trunkRTCBurstyDataACellsTx2Line=trunkRTCBurstyDataACellsTx2Line, atmEndptScrPlc=atmEndptScrPlc, atmPortStatIlmiUnkRxs=atmPortStatIlmiUnkRxs, connectionTrkAvoidType=connectionTrkAvoidType, frLportStatEntry=frLportStatEntry, trunkRTCVoicePktsDropped=trunkRTCVoicePktsDropped, atmEndptMinAdjustICA=atmEndptMinAdjustICA, frLportDmaOvruns=frLportDmaOvruns, switchIfPhysPort=switchIfPhysPort, portsInfoShelf=portsInfoShelf, voiceEndptMapChannel=voiceEndptMapChannel, trunkRTCBadClockErrors=trunkRTCBadClockErrors, atmTrkRcvCap=atmTrkRcvCap, frLportCllmTxFrms=frLportCllmTxFrms, atmTrkStatsTxVoCellDrps=atmTrkStatsTxVoCellDrps, trunkRTCMulticastPktsXmitted=trunkRTCMulticastPktsXmitted, trunkRemSlot=trunkRemSlot, trunkActive=trunkActive, atmEndPtCIR=atmEndPtCIR, connSlvOSpaceBdaCmax=connSlvOSpaceBdaCmax, frLportSlotIndex=frLportSlotIndex, frEndptMIR=frEndptMIR, atmEndptOeFGCRA=atmEndptOeFGCRA, nodeTable=nodeTable, atmEndPtTable=atmEndPtTable, connectionRemoteStr=connectionRemoteStr, atmTrkComStatus=atmTrkComStatus, connRemoteDLCI=connRemoteDLCI, trunkEntry=trunkEntry, atmPortStatBcmRxs=atmPortStatBcmRxs, frEndptCMAX=frEndptCMAX, frPortsCfgPortType=frPortsCfgPortType, atmPortStatHdrDiscards=atmPortStatHdrDiscards, switchIfCtrlerId=switchIfCtrlerId, trunkRTCVoiceCellsTx2Line=trunkRTCVoiceCellsTx2Line, frEndptGroupDesc=frEndptGroupDesc, aitEndPtConnIndex=aitEndPtConnIndex, connQir=connQir, frPortsCfgFrmFlags=frPortsCfgFrmFlags, atmEndptOePercUtil=atmEndptOePercUtil, voiceChannelDtPlayOutDelay=voiceChannelDtPlayOutDelay, frEndptTxBytes=frEndptTxBytes, connGroupFlag=connGroupFlag, logNetwork=logNetwork, voiceChannelIfTypeName=voiceChannelIfTypeName, frpEcnThreshold=frpEcnThreshold, connIndex=connIndex, atmTrkRetainedLinks=atmTrkRetainedLinks, DisplayString=DisplayString, voiceChannelIfCondIndex=voiceChannelIfCondIndex, frEndptRxFrmsDeDscds=frEndptRxFrmsDeDscds, atmBwClassOeFGCRA=atmBwClassOeFGCRA, connRTCXmitFramesDiscarded=connRTCXmitFramesDiscarded, connRTCRcvdBytes=connRTCRcvdBytes, connRTCRcvdBytesDiscarded=connRTCRcvdBytesDiscarded, segOeEndPt=segOeEndPt, frLportPolVerTmr=frLportPolVerTmr, frpQDepth=frpQDepth, cmpaErrorReqId=cmpaErrorReqId, atmClpRxs=atmClpRxs, aitEndPtNodeName=aitEndPtNodeName, segNextSeg=segNextSeg, connTableEntry=connTableEntry, atmPortQueueEntry=atmPortQueueEntry, atmBumpFailure=atmBumpFailure, atmTrkStatsTxVoPktDrps=atmTrkStatsTxVoPktDrps, frEndptEcnQSize=frEndptEcnQSize, frIxPortsCfgMaxTxQDepth=frIxPortsCfgMaxTxQDepth, frEndptTrkAvoidZCS=frEndptTrkAvoidZCS, cirLineActive=cirLineActive, frEndPtRowStatus=frEndPtRowStatus, atmCellsRxNets=atmCellsRxNets, cmpaErrorLastDesc=cmpaErrorLastDesc, frLportMinFrmFlgs=frLportMinFrmFlgs, atmBwClassOePercUtil=atmBwClassOePercUtil, managerNumOfValidEntries=managerNumOfValidEntries, snmpAgents=snmpAgents, atmEndptLocRmtLpbkState=atmEndptLocRmtLpbkState, voiceEndptEncoding=voiceEndptEncoding, connDAX=connDAX, trunkRemPort=trunkRemPort, atmTrkImaTrnsCnts=atmTrkImaTrnsCnts, cirLineEntry=cirLineEntry, connVcQueDepth=connVcQueDepth, connRTCSecondsInService=connRTCSecondsInService, frpRTCTxProtocolTimeOutCount=frpRTCTxProtocolTimeOutCount, ppaErrorLastEcode=ppaErrorLastEcode, frLportPortType=frLportPortType, atmBwClassEnableFST=atmBwClassEnableFST, frBumpFailure=frBumpFailure, atmPortStatLmiStatAckRxs=atmPortStatLmiStatAckRxs, frPortsCfgRowStatus=frPortsCfgRowStatus, voiceEndptTable=voiceEndptTable, cmpaErrorEcode=cmpaErrorEcode, atmTrkStatsTxNonTsPktDrps=atmTrkStatsTxNonTsPktDrps, atmEndptLocLpbkState=atmEndptLocLpbkState, atmEndptTrkAvoidType=atmEndptTrkAvoidType, frEndptOeQIR=frEndptOeQIR, portsInfoPortSpeed=portsInfoPortSpeed, connSvc=connSvc, atmBwClassOeRateUpICA=atmBwClassOeRateUpICA, frEndPtEcnQSize=frEndPtEcnQSize, errStatusDesc=errStatusDesc, trunkRemNodeId=trunkRemNodeId, atmPortStatLmiUpdStatRxs=atmPortStatLmiUpdStatRxs, atmPortIfType=atmPortIfType, atmEndptEntry=atmEndptEntry, packetGroup=packetGroup, atmBwClassLoCLP=atmBwClassLoCLP, voiceChannelEchoRtnLoss=voiceChannelEchoRtnLoss, voiceChannelXmitSigCBit=voiceChannelXmitSigCBit, connLocalChannel=connLocalChannel, voiceEndptTrkAvoidType=voiceEndptTrkAvoidType, atmTrkLoopClock=atmTrkLoopClock, frEndPtPort=frEndPtPort, networkIpxId=networkIpxId, frEndptRxBytesDscds=frEndptRxBytesDscds, cirLineInterface=cirLineInterface, atmPortType=atmPortType, atmEndptGroupFlag=atmEndptGroupFlag, frEndptConnPrio=frEndptConnPrio, connRemoteNodeId=connRemoteNodeId, atmBwClassOeIBS=atmBwClassOeIBS, frIxPortsCfgEFCItoBECN=frIxPortsCfgEFCItoBECN, frEndptRxFrms=frEndptRxFrms, atmBcmRxs=atmBcmRxs, trunkStatReserve=trunkStatReserve, frEndPtMIR=frEndPtMIR, atmBwClassBCM=atmBwClassBCM, frBwClassOePercUtil=frBwClassOePercUtil, frpEntry=frpEntry, trunkStatusAlarm=trunkStatusAlarm, frEndptRxFrmsDes=frEndptRxFrmsDes, frLportCnfEntry=frLportCnfEntry, trunkRTCTimeStampedPktsXmitted=trunkRTCTimeStampedPktsXmitted, atmEndPtPort=atmEndPtPort, switchIfSubPort=switchIfSubPort, atmBwClassOeVcQSize=atmBwClassOeVcQSize, atmTrkStatsTxVbrCellDrps=atmTrkStatsTxVbrCellDrps, frLportDeFrmsDrops=frLportDeFrmsDrops, atmEfciRxs=atmEfciRxs, atmEndptOePIR=atmEndptOePIR, cmpaErrorEntry=cmpaErrorEntry, frIxPortsCfgCLLMTimer=frIxPortsCfgCLLMTimer, atmTrkDerouteDelayTimer=atmTrkDerouteDelayTimer, frBwClassOeMIR=frBwClassOeMIR, voiceEndptOperStatus=voiceEndptOperStatus, frEndPtCIR=frEndPtCIR, frBwClassDescription=frBwClassDescription, atmPortStatLmiUpdtStatTxs=atmPortStatLmiUpdtStatTxs, logGmtDate=logGmtDate, aitEndPtEcnQSize=aitEndPtEcnQSize, atmTrkShareLcn=atmTrkShareLcn, voiceChannelEchoTone=voiceChannelEchoTone, connectionType=connectionType, connRTCFramesRxExcessCir=connRTCFramesRxExcessCir, voiceNoRouteFoundFailure=voiceNoRouteFoundFailure, connRTCRcvdFrames=connRTCRcvdFrames, frEndPtSlot=frEndPtSlot, atmBwClassCIR=atmBwClassCIR, frPortsCfgPollCycle=frPortsCfgPollCycle, atmTrkStatsTxBdataAPktDrps=atmTrkStatsTxBdataAPktDrps, trapUploadTable=trapUploadTable, connNextEndptIndex=connNextEndptIndex, atmTrkOeDomain=atmTrkOeDomain, connRTCXmitBytes=connRTCXmitBytes, segNodeName=segNodeName, atmTrkSvcVpiHigh=atmTrkSvcVpiHigh, cirLineRTCAllOnesInTimeslot16=cirLineRTCAllOnesInTimeslot16, frEndptDesc=frEndptDesc, frpRTCFramesXmittedWithFECN=frpRTCFramesXmittedWithFECN, svplus=svplus, atmPortStatIsuDiscards=atmPortStatIsuDiscards, atmEndptMapEndptPtr=atmEndptMapEndptPtr, atmCellsRxPorts=atmCellsRxPorts, frBwClassOeBc=frBwClassOeBc, connectionEntry=connectionEntry, atmPortOperStatus=atmPortOperStatus, frTestFailure=frTestFailure, shelfCnfgStatCollIntvl=shelfCnfgStatCollIntvl, frLportUpdtRxNnis=frLportUpdtRxNnis, trunkRTCAtmCellHeaderHecErrors=trunkRTCAtmCellHeaderHecErrors, atmEndPtSlot=atmEndPtSlot, atmEndptPIR=atmEndptPIR, frEndPtchanType=frEndPtchanType, atmEndptCIR=atmEndptCIR, voiceOtherEndptDesc=voiceOtherEndptDesc, nodeFsDecRate=nodeFsDecRate, connectionTestResult=connectionTestResult, frEndPtLine=frEndPtLine, voiceChannelOutGain=voiceChannelOutGain, cirLineRTCTable=cirLineRTCTable, connServerType=connServerType, connectionClassOfService=connectionClassOfService, trunkRTCTxBurstyDataACellsDropped=trunkRTCTxBurstyDataACellsDropped, connectionRemOSpaceBdaCmax=connectionRemOSpaceBdaCmax, connPrefRouteDesc=connPrefRouteDesc, atmEndPtVci=atmEndPtVci, connectionLocOSpaceBdbCmax=connectionLocOSpaceBdbCmax, atmEndptVSVD=atmEndptVSVD, atmEndptRateUpICA=atmEndptRateUpICA, frEndPtPercUtil=frEndPtPercUtil, voiceChannelTable=voiceChannelTable, connRTCXmitPkts=connRTCXmitPkts, voiceEndptMapConnPtr=voiceEndptMapConnPtr, connCMax=connCMax, ppaErrorLastIndex=ppaErrorLastIndex, atmTrkSvcInUse=atmTrkSvcInUse, frLportStatRxNnis=frLportStatRxNnis, ppaErrorFlushAll=ppaErrorFlushAll, voiceConnPtr=voiceConnPtr, nodeGroup=nodeGroup, voiceEndptDesc=voiceEndptDesc, atmPortStatEntry=atmPortStatEntry, nodeGrpRelease=nodeGrpRelease, atmTrkBdataBRxEfcn=atmTrkBdataBRxEfcn, frLportLoopBack=frLportLoopBack, connectionLocalEndPt=connectionLocalEndPt, atmEndPtVpi=atmEndPtVpi, atmClpTxs=atmClpTxs, atmEndptOeQIR=atmEndptOeQIR, frLportFirstVcPtr=frLportFirstVcPtr, aitEndPtVpi=aitEndPtVpi, logSeverity=logSeverity, frPortsCfgPollVerTimer=frPortsCfgPollVerTimer, frLportStatEnqUnis=frLportStatEnqUnis, frLportLmiFailFrms=frLportLmiFailFrms, atmEndptQIR=atmEndptQIR, atmEndptOamStatus=atmEndptOamStatus, frEndptMapSlot=frEndptMapSlot, atmServiceObjects=atmServiceObjects, frLportInvldReqCnts=frLportInvldReqCnts, logMsg=logMsg, frEndptTxFrmsBecns=frEndptTxFrmsBecns, frEndptMapTable=frEndptMapTable, atmEndptConnDesc=atmEndptConnDesc, frEndPtBe=frEndPtBe, trunkRTCTxVoiceCellsDropped=trunkRTCTxVoiceCellsDropped, atmPortStatNonZeroGfcs=atmPortStatNonZeroGfcs, atmTrunks=atmTrunks, atmEndptOeLoCLP=atmEndptOeLoCLP, frLportBadFmts=frLportBadFmts, atmPortLmiVci=atmPortLmiVci, connectionOpStatus=connectionOpStatus, frpPortType=frpPortType, trapPduString=trapPduString, connRTCEntry=connRTCEntry)
mibBuilder.exportSymbols("STRATACOM-MIB", atmBwClassQIR=atmBwClassQIR, maintLogFilterSeverity=maintLogFilterSeverity, connLclEndptDesc=connLclEndptDesc, connRate=connRate, frEndptCongestMins=frEndptCongestMins, connMasterFlag=connMasterFlag, atmBwClassOeCDVT0=atmBwClassOeCDVT0, atmTrkOeName=atmTrkOeName, connRTCTable=connRTCTable, atmEndptEnableFST=atmEndptEnableFST, portsInfoPortType=portsInfoPortType, atmTrkXmitRate=atmTrkXmitRate, frLportSeqnmErrNnis=frLportSeqnmErrNnis, connectionTable=connectionTable, atmTrkBdataBTxEfcn=atmTrkBdataBTxEfcn, connRTCCongestedMinuites=connRTCCongestedMinuites, connNoRouteFoundFailure=connNoRouteFoundFailure, frEndptLocRmtLpbkState=frEndptLocRmtLpbkState, frEndptStatTable=frEndptStatTable, rtm=rtm, managerIPaddress=managerIPaddress, frPortsCfgDs0ChSpeed=frPortsCfgDs0ChSpeed, segSubChn2=segSubChn2, atmTrkBdataBTxQlen=atmTrkBdataBTxQlen, frIxPortsCfgCommPri=frIxPortsCfgCommPri, frLportExtConFail=frLportExtConFail, atmDiscardFails=atmDiscardFails, voiceChannelIfOnhkDBit=voiceChannelIfOnhkDBit, atmPortStatFerfRxs=atmPortStatFerfRxs, frLportRxFrms=frLportRxFrms, frLportLmiFailBytes=frLportLmiFailBytes, frBwClassPIR=frBwClassPIR, atmEndptSubType=atmEndptSubType, frBwClassOeCIR=frBwClassOeCIR, trunkRTCLossOfSignal=trunkRTCLossOfSignal, connRTCSlot=connRTCSlot, portsInfoNode=portsInfoNode, voiceServiceObjects=voiceServiceObjects, errReqId=errReqId, atmBwClassOeBCM=atmBwClassOeBCM, voiceOtherEndptAdv=voiceOtherEndptAdv, managerRowStatus=managerRowStatus, trunkLocalPort=trunkLocalPort, atmBwClassOeMIR=atmBwClassOeMIR, connStatus=connStatus, connMstOSpacePkts=connMstOSpacePkts, cirLineRTCOutOfMultiFrames=cirLineRTCOutOfMultiFrames, frEndptOePercUtil=frEndptOePercUtil, frEndptStatEntry=frEndptStatEntry, atmEndPtRowStatus=atmEndPtRowStatus, frpRTCFramesXmitted=frpRTCFramesXmitted, frpRTCLmiInvalidStatusEnquires=frpRTCLmiInvalidStatusEnquires, switchIfEntry=switchIfEntry, atmEndptTrkAvoidZCS=atmEndptTrkAvoidZCS, frpRTCBytesXmitted=frpRTCBytesXmitted, portsInfoPort=portsInfoPort, connCurrRouteDesc=connCurrRouteDesc, atmBwClassCDVT0=atmBwClassCDVT0, connABitStatus=connABitStatus, cmpaErrorLastEcode=cmpaErrorLastEcode, atmEndPtIfShelf=atmEndPtIfShelf, atmBwClassOeCCDV=atmBwClassOeCCDV, switchShelf=switchShelf, cirLineStatusAlarm=cirLineStatusAlarm, connClassOfService=connClassOfService, frpRTCFramesRcvdCrcErrors=frpRTCFramesRcvdCrcErrors, voiceChannelUtil=voiceChannelUtil, frLportIllegLengths=frLportIllegLengths, frEndptTestType=frEndptTestType, atmBwClassFastDnICA=atmBwClassFastDnICA, frLportLowRNR=frLportLowRNR, trunkRemLineNumber=trunkRemLineNumber, atmPortLmiPollTimer=atmPortLmiPollTimer, atmBwClassRateUpICA=atmBwClassRateUpICA, frLportDEThresh=frLportDEThresh, connGroup=connGroup, atmPortSpeed=atmPortSpeed, frpRTCLine=frpRTCLine, currentMaxLogIndex=currentMaxLogIndex, atmBwClassOePCR0=atmBwClassOePCR0, frPortsCfgPort=frPortsCfgPort, frEndptOeBc=frEndptOeBc, frEndptMapConnPtr=frEndptMapConnPtr, frpRTCCLLMBytesTx=frpRTCCLLMBytesTx, frLportLinkTimer=frLportLinkTimer, svnode=svnode, atmTrkOeIfIndex=atmTrkOeIfIndex, atmPortStatClpRxs=atmPortStatClpRxs, frBwClassOeEcnQSize=frBwClassOeEcnQSize, connMstOSpaceCells=connMstOSpaceCells, voiceEndptMapEndptPtr=voiceEndptMapEndptPtr, frLportUpRNR=frLportUpRNR, trunkRTCBipolarViolations=trunkRTCBipolarViolations, atmTrkVPI=atmTrkVPI, errCode=errCode, voiceEndptEntry=voiceEndptEntry, switchIfPartiId=switchIfPartiId, voiceTestFailure=voiceTestFailure, frEndptPercUtil=frEndptPercUtil, frBwClassOeCMAX=frBwClassOeCMAX, frEndPtDlci=frEndPtDlci, connRTCXmitBytesDiscarded=connRTCXmitBytesDiscarded, atmTrkStatsTxBdataACellDrps=atmTrkStatsTxBdataACellDrps, frLportSrDTR=frLportSrDTR, frEndptPIR=frEndptPIR, trunkRTCBurstyDataBEfcnPktsTx2Line=trunkRTCBurstyDataBEfcnPktsTx2Line, frIxPortsCfgLoopBack=frIxPortsCfgLoopBack, atmBwClassPCR0=atmBwClassPCR0, logIndex=logIndex, atmTrkStatsTxNonTsCellDrps=atmTrkStatsTxNonTsCellDrps, atmEndPtOpStatus=atmEndPtOpStatus, atmEndptOeVcQSize=atmEndptOeVcQSize, cirLineRTCFrameSlips=cirLineRTCFrameSlips, atmPortLmiStatEnqTimer=atmPortLmiStatEnqTimer, frEndPtBc=frEndPtBc, voiceChannelXmitSigABit=voiceChannelXmitSigABit, switchIfMediaType=switchIfMediaType, atmPortQueueTable=atmPortQueueTable, frLportTxFrmsFecns=frLportTxFrmsFecns, atmPortQueueIndex=atmPortQueueIndex, connPir=connPir, frpRTCXmitStatusEnquirey=frpRTCXmitStatusEnquirey, trunkRTCPktCrcErrors=trunkRTCPktCrcErrors, connectionPrefRouteDesc=connectionPrefRouteDesc, frEndptTxFrms=frEndptTxFrms, atmTrkStatsTxBdataBCellDrps=atmTrkStatsTxBdataBCellDrps, atmEndptPCR0=atmEndptPCR0, atmTrkSvcLcnHigh=atmTrkSvcLcnHigh, frIxPortsCfgSrDSR=frIxPortsCfgSrDSR, trunkRTCTable=trunkRTCTable, trapConfigTable=trapConfigTable, connBumpFailure=connBumpFailure, frBwClassOeVcQSize=frBwClassOeVcQSize, frpRTCDmaOverruns=frpRTCDmaOverruns, cmpaErrorDesc=cmpaErrorDesc, switchServiceObjects=switchServiceObjects, cirLineRTCBipolarViolations=cirLineRTCBipolarViolations, strmErrors=strmErrors, frLportDscdQTxBytes=frLportDscdQTxBytes, frIxPortsCfgVcCount=frIxPortsCfgVcCount, trunkRTCMulticastPktsDropped=trunkRTCMulticastPktsDropped, frLportEFCItoBECN=frLportEFCItoBECN, atmEndptStatEntry=atmEndptStatEntry, frIxPortsCfgSrCTS=frIxPortsCfgSrCTS, atmEndptOeRateUpICA=atmEndptOeRateUpICA, atmEndptIBS=atmEndptIBS, Severity=Severity, segEndPtTableId=segEndPtTableId, atmEndptStatTable=atmEndptStatTable, trunkRTCTxBurstyDataBClpCellsDropped=trunkRTCTxBurstyDataBClpCellsDropped, connLocalMaxPkts=connLocalMaxPkts, atmPortStatIlmiTrapRxs=atmPortStatIlmiTrapRxs, networkId=networkId, frpRTCAsyncStatusCounter=frpRTCAsyncStatusCounter, connIcaRTD=connIcaRTD, atmNoRouteFoundFailure=atmNoRouteFoundFailure, maintLogFilterTimeMin=maintLogFilterTimeMin, aitEndPtQIR=aitEndPtQIR, atmEndptMapConnPtr=atmEndptMapConnPtr, trapsConfig=trapsConfig, atmEfciTxs=atmEfciTxs, atmBwClassTable=atmBwClassTable, connRTCFramesTxExcessCir=connRTCFramesTxExcessCir, aitEndPtVcQSize=aitEndPtVcQSize, atmPortStatLmiStatEnqTxs=atmPortStatLmiStatEnqTxs, frPortsCfgPortState=frPortsCfgPortState, trunkRTCTimeStampCellsTx2Line=trunkRTCTimeStampCellsTx2Line, atmPortQueueEfciTh=atmPortQueueEfciTh, atmPortStatIlmiSetRxs=atmPortStatIlmiSetRxs, trunkRTCBurstyDataPktsDropped=trunkRTCBurstyDataPktsDropped, ppaErrorLastDesc=ppaErrorLastDesc, voiceOtherEndptIndex=voiceOtherEndptIndex, voiceEndptIndex=voiceEndptIndex, voiceChannelDialType=voiceChannelDialType, nodeEntry=nodeEntry, frpStatusAlarm=frpStatusAlarm, atmTrkStatsTxTsPktDrps=atmTrkStatsTxTsPktDrps, atmBwClassOeEfciQSize=atmBwClassOeEfciQSize, frEndptRxFrmsCirs=frEndptRxFrmsCirs, voiceStatV25ModemOns=voiceStatV25ModemOns, atmBwClassOeCIR=atmBwClassOeCIR, atmEndptOeCCDV=atmEndptOeCCDV, frEndptRtdTestDelay=frEndptRtdTestDelay, atmBwClassOeLoCLP=atmBwClassOeLoCLP, frpRTCCLLMFramesRx=frpRTCCLLMFramesRx, atmEndPointFailure=atmEndPointFailure, voiceStatInservices=voiceStatInservices, shelfCnfgStatTimeSync=shelfCnfgStatTimeSync, atmPortStatUnknVpiVcis=atmPortStatUnknVpiVcis, atmEndptMapTable=atmEndptMapTable, connRTCXmitFrames=connRTCXmitFrames, databaseSampleFreq=databaseSampleFreq, atmPortIlmiTrapEnable=atmPortIlmiTrapEnable, mgrIpAddress=mgrIpAddress, aitEndPtPriority=aitEndPtPriority, frPortsCfgSlot=frPortsCfgSlot, frLportPortSpeed=frLportPortSpeed, atmPortStatLmiStatEnqRxs=atmPortStatLmiStatEnqRxs, trunkServiceObjects=trunkServiceObjects, frEndptIndex=frEndptIndex, trunkRTCBurstyDataAEfcnPktsTx2Line=trunkRTCBurstyDataAEfcnPktsTx2Line, frLportSrDCD=frLportSrDCD, cirLineRTCLossesOfSignal=cirLineRTCLossesOfSignal, trunkRTCTimeStampedPktsDropped=trunkRTCTimeStampedPktsDropped, atmEndPtIBS=atmEndPtIBS, aitEndPtPercUtil=aitEndPtPercUtil, frLportAlgnErrors=frLportAlgnErrors, cirLineComment=cirLineComment, connRTCFramesTxWithDE=connRTCFramesTxWithDE, connectionRemOSpacePkts=connectionRemOSpacePkts, frEndPtCMAX=frEndPtCMAX, frPortsCfgShelf=frPortsCfgShelf, connRTCFramesDiscardedWithDE=connRTCFramesDiscardedWithDE, atmEndptPercUtil=atmEndptPercUtil, connConnInfoFlag=connConnInfoFlag, atmBwClassConType=atmBwClassConType, voiceEndptTestType=voiceEndptTestType, frNextOnPortPtr=frNextOnPortPtr, ppaErrorDesc=ppaErrorDesc, atmBcmTxs=atmBcmTxs, atmDiscardQbinFulls=atmDiscardQbinFulls, atmEndptOeMFS=atmEndptOeMFS, switchIfService=switchIfService, circuitGroup=circuitGroup, frpRTCLmiStatusEnquires=frpRTCLmiStatusEnquires, frLportDscdQTxFrms=frLportDscdQTxFrms, atmBwClassUPC=atmBwClassUPC, connectionAdminStatus=connectionAdminStatus, voiceChannelDtMinWink=voiceChannelDtMinWink, atmBwClassCLPTagging=atmBwClassCLPTagging, atmPortStatPayldErrs=atmPortStatPayldErrs, frBwClassIndex=frBwClassIndex, atmEndptCDVT0=atmEndptCDVT0, shelfCnfgStatBcktIntvl=shelfCnfgStatBcktIntvl, alarmTrapSequenceNumber=alarmTrapSequenceNumber, segPort=segPort, frLportClockType=frLportClockType, atmTrkTrafCls=atmTrkTrafCls, frEndPtConnIndex=frEndPtConnIndex, connRouteMaster=connRouteMaster, atmEndPtMIR=atmEndPtMIR, atmOamTxs=atmOamTxs, trunkRTCTxBurstyDataAClpCellsDropped=trunkRTCTxBurstyDataAClpCellsDropped, atmCellsTxNets=atmCellsTxNets, frEndptCIR=frEndptCIR, frLportStatTable=frLportStatTable, connMstOSpaceBdaCmax=connMstOSpaceBdaCmax, atmTrkBdataBRxQlen=atmTrkBdataBRxQlen, frBwClassEcnQSize=frBwClassEcnQSize, atmBwClassVcQSize=atmBwClassVcQSize, connRTCBytesRxWithDE=connRTCBytesRxWithDE, atmPortQueueAdminStatus=atmPortQueueAdminStatus, frEndPtEgressQSelect=frEndPtEgressQSelect, frEndptTxFrmsFecns=frEndptTxFrmsFecns)
mibBuilder.exportSymbols("STRATACOM-MIB", networkEntry=networkEntry, frpRTCCLLMFramesTx=frpRTCCLLMFramesTx, trapSequenceNum=trapSequenceNum, eventFilterSeverity=eventFilterSeverity, atmEndptOeHiCLP=atmEndptOeHiCLP, atmPortStatTable=atmPortStatTable, frEndptTrkAvoidType=frEndptTrkAvoidType, cirLineRTCEntry=cirLineRTCEntry, managerPortNumber=managerPortNumber, connTXR=connTXR, connectionRowStatus=connectionRowStatus, atmViolRxs=atmViolRxs, frEndPtAdminStatus=frEndPtAdminStatus, aitEndPtMIR=aitEndPtMIR, atmEndptTestType=atmEndptTestType, aitEndPtAdminStatus=aitEndPtAdminStatus, aitEndPtOpStatus=aitEndPtOpStatus, atmEndptMFS=atmEndptMFS, atmTrkStatsSpacerPktsDrps=atmTrkStatsSpacerPktsDrps, atmEndptEfciQSize=atmEndptEfciQSize, atmBwClassDescription=atmBwClassDescription, trunkLocalSlot=trunkLocalSlot, atmEndptHiCLP=atmEndptHiCLP, cirLineRTCOutOfFrames=cirLineRTCOutOfFrames, frAxPortsCfgSvcRatio=frAxPortsCfgSvcRatio, atmPortPort=atmPortPort, atmTrkSvcQbinSz=atmTrkSvcQbinSz, frpRTCSlot=frpRTCSlot, atmEndptFRTT=atmEndptFRTT, voiceChannelXmitSigBBit=voiceChannelXmitSigBBit, atmBwClassOePIR=atmBwClassOePIR, cmpaErrorTable=cmpaErrorTable, trunkRTCTxBurstyDataBCellsDropped=trunkRTCTxBurstyDataBCellsDropped, atmEndptOeEfciQSize=atmEndptOeEfciQSize, atmEndPtPIR=atmEndPtPIR, atmEndptFGCRA=atmEndptFGCRA, atmPortPercUtil=atmPortPercUtil, atmPortStatIlmiGetRxs=atmPortStatIlmiGetRxs, frPortsCfgLinkTimer=frPortsCfgLinkTimer, atmEndptBWClass=atmEndptBWClass, voiceChannelSlotIndex=voiceChannelSlotIndex, connRemoteChannel=connRemoteChannel, frServiceObjects=frServiceObjects, atmEndptTBE=atmEndptTBE, frPortsCfgTable=frPortsCfgTable, atmEndptOeCDVT0=atmEndptOeCDVT0, frEndptOeCMAX=frEndptOeCMAX, atmTrkSvcVciLow=atmTrkSvcVciLow, atmPortStatAisRxs=atmPortStatAisRxs, atmPortStatIlmiGetRspTxs=atmPortStatIlmiGetRspTxs, frBwClassOeBe=frBwClassOeBe, voiceEndptAdminStatus=voiceEndptAdminStatus, trunkRTCNonTimeStampedPktsDropped=trunkRTCNonTimeStampedPktsDropped, atmDiscardVcqClpThs=atmDiscardVcqClpThs, cirLineCardType=cirLineCardType, readingTrapFlag=readingTrapFlag, connectionCurrRouteDesc=connectionCurrRouteDesc, connectionForesight=connectionForesight, aitEndPtIfShelf=aitEndPtIfShelf, frIxPortsCfgUpRNR=frIxPortsCfgUpRNR, frLportUpdtTxUnis=frLportUpdtTxUnis, nodeGrpPlatform=nodeGrpPlatform, atmPortStatBufferOvfls=atmPortStatBufferOvfls, aitEndPtCMAX=aitEndPtCMAX, atmPortIlmiVpi=atmPortIlmiVpi, atmTrkSvcBw=atmTrkSvcBw, aitEndPtPIR=aitEndPtPIR, frLportAsynStatus=frLportAsynStatus, atmPortStatLmiStatTxs=atmPortStatLmiStatTxs, atmEndptRateDnICA=atmEndptRateDnICA, frPortsCfgSigProt=frPortsCfgSigProt, frEndptTxBytesDscds=frEndptTxBytesDscds, connType=connType, atmEndptVcQSize=atmEndptVcQSize, atmTrkSvcQbinBitMap=atmTrkSvcQbinBitMap, atmEndptOeScrPlc=atmEndptOeScrPlc, connectionTrkAvoidZCS=connectionTrkAvoidZCS, voiceStatSprvPktsRcvs=voiceStatSprvPktsRcvs, connRTCXmitPktsProjected=connRTCXmitPktsProjected, frIxPortsCfgLowRNR=frIxPortsCfgLowRNR, frEndptEnableFST=frEndptEnableFST, frpRTCEntry=frpRTCEntry, frEndPtEntry=frEndPtEntry, segmentTable=segmentTable, voiceChannelEchoCancel=voiceChannelEchoCancel, voiceChannelEntry=voiceChannelEntry, atmPortLmiUpdStatTimer=atmPortLmiUpdStatTimer, atmEndptOePCR0=atmEndptOePCR0, cirLineRTCCrcErrors=cirLineRTCCrcErrors, frpRTCRxDEFramesDiscarded=frpRTCRxDEFramesDiscarded, svNodeGroup=svNodeGroup, nodeFsIncRate=nodeFsIncRate, trunkRTCFrameSlips=trunkRTCFrameSlips, atmBwClassFGCRA=atmBwClassFGCRA, connGroupDesc=connGroupDesc, atmBwClassRateDnICA=atmBwClassRateDnICA, trunkRTCBurstyDataAEfcnCellsTx2Line=trunkRTCBurstyDataAEfcnCellsTx2Line, atmBwClassMIR=atmBwClassMIR, frPortsCfgMonEveCnt=frPortsCfgMonEveCnt, switchInterfaces=switchInterfaces, atmPortAdminStatus=atmPortAdminStatus, frLportTxBytes=frLportTxBytes, connComment=connComment, frLportCllmRxFrms=frLportCllmRxFrms, atmBwClassIndex=atmBwClassIndex)
