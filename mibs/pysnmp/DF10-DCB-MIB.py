#
# PySNMP MIB module DF10-DCB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DF10-DCB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:26:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Counter32, Integer32, ModuleIdentity, NotificationType, MibIdentifier, IpAddress, Gauge32, TimeTicks, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Counter32", "Integer32", "ModuleIdentity", "NotificationType", "MibIdentifier", "IpAddress", "Gauge32", "TimeTicks", "Unsigned32", "Bits")
TruthValue, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "DisplayString")
dF10Dcb = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 15))
dF10Dcb.setRevisions(('2012-04-16 00:00', '2011-11-24 00:00', '2010-09-25 00:00',))
if mibBuilder.loadTexts: dF10Dcb.setLastUpdated('201204160000Z')
if mibBuilder.loadTexts: dF10Dcb.setOrganization('Dell Inc.')
class EnabledStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class DcbAdminMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class DcbState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("init", 1), ("rxrecommended", 2), ("internallypropagated", 3))

class DcbStateMachineType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("asymmetric", 1), ("symmetric", 2), ("feature", 3))

class DcbxPortRole(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("manual", 1), ("autoup", 2), ("autodown", 3), ("configSource", 4))

class DcbxVersion(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("auto", 1), ("ieee", 2), ("cin", 3), ("cee", 4))

dF10DcbSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 1))
dF10DcbObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 2))
dF10DcbApplicationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3))
dF10DcbNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4))
dF10DCBXObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1))
dF10ETSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2))
dF10PFCObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3))
dF10DCBXScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 1))
dF10ETSScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 1))
dF10PFCScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 1))
dF10DcbPfcMinThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DcbPfcMinThreshold.setStatus('current')
dF10DcbPfcMaxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DcbPfcMaxThreshold.setStatus('current')
dF10DcbMaxPfcProfiles = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DcbMaxPfcProfiles.setStatus('current')
dF10DcbPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 15, 2, 1), )
if mibBuilder.loadTexts: dF10DcbPortTable.setStatus('obsolete')
dF10DcbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 15, 2, 1, 1), ).setIndexNames((0, "DF10-DCB-MIB", "dF10DcbPortNumber"))
if mibBuilder.loadTexts: dF10DcbPortEntry.setStatus('obsolete')
dF10DcbPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dF10DcbPortNumber.setStatus('obsolete')
dF10DcbETSAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 2, 1, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DcbETSAdminStatus.setStatus('obsolete')
dF10DcbPFCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 2, 1, 1, 3), EnabledStatus().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DcbPFCAdminStatus.setStatus('obsolete')
dF10DcbxGlobalTraceLevel = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10DcbxGlobalTraceLevel.setStatus('current')
dF10DCBXGlobalVersion = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 1, 2), DcbxVersion().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10DCBXGlobalVersion.setStatus('current')
dF10DCBXPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2), )
if mibBuilder.loadTexts: dF10DCBXPortTable.setStatus('current')
dF10DCBXPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1), ).setIndexNames((0, "DF10-DCB-MIB", "dF10DCBXPortNumber"))
if mibBuilder.loadTexts: dF10DCBXPortEntry.setStatus('current')
dF10DCBXPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dF10DCBXPortNumber.setStatus('current')
dF10DCBXAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXAdminStatus.setStatus('current')
dF10DCBXAutoCfgPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1, 3), DcbxPortRole().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10DCBXAutoCfgPortRole.setStatus('current')
dF10DCBXPortVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1, 4), DcbxVersion().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10DCBXPortVersion.setStatus('current')
dF10DCBXPortSupportedTLVs = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1, 5), Bits().clone(namedValues=NamedValues(("pfc", 0), ("etsConfig", 1), ("etsRecom", 2), ("applicationPriorityFCOE", 3), ("applicationPriorityISCSI", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortSupportedTLVs.setStatus('current')
dF10DCBXPortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 2, 1, 6), Bits().clone(namedValues=NamedValues(("pfc", 0), ("etsConfig", 1), ("etsRecom", 2), ("applicationPriorityFCOE", 3), ("applicationPriorityISCSI", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10DCBXPortConfigTLVsTxEnable.setStatus('current')
dF10DCBXPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3), )
if mibBuilder.loadTexts: dF10DCBXPortStatusTable.setStatus('current')
dF10DCBXPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1), )
dF10DCBXPortEntry.registerAugmentions(("DF10-DCB-MIB", "dF10DCBXPortStatusEntry"))
dF10DCBXPortStatusEntry.setIndexNames(*dF10DCBXPortEntry.getIndexNames())
if mibBuilder.loadTexts: dF10DCBXPortStatusEntry.setStatus('current')
dF10DCBXPortOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 2), DcbxVersion().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortOperVersion.setStatus('current')
dF10DCBXPortPeerMACaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortPeerMACaddress.setStatus('current')
dF10DCBXPortCfgSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortCfgSource.setStatus('current')
dF10DCBXOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXOperStatus.setStatus('current')
dF10DCBXPortMultiplePeerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortMultiplePeerCount.setStatus('current')
dF10DCBXPortPeerRemovedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortPeerRemovedCount.setStatus('current')
dF10DCBXPortPeerOperVersionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortPeerOperVersionNum.setStatus('current')
dF10DCBXPortPeerMaxVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortPeerMaxVersion.setStatus('current')
dF10DCBXPortSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortSeqNum.setStatus('current')
dF10DCBXPortAckNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortAckNum.setStatus('current')
dF10DCBXPortPeerRcvdAckNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortPeerRcvdAckNum.setStatus('current')
dF10DCBXPortTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortTxCount.setStatus('current')
dF10DCBXPortRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortRxCount.setStatus('current')
dF10DCBXPortErrorFramesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10DCBXPortErrorFramesCount.setStatus('current')
dF10ETSSystemControl = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("shutdown", 2))).clone('running')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSSystemControl.setStatus('current')
dF10ETSModuleStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSModuleStatus.setStatus('current')
dF10ETSClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10ETSClearCounters.setStatus('current')
dF10ETSGlobalEnableTrap = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSGlobalEnableTrap.setStatus('current')
dF10ETSPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2), )
if mibBuilder.loadTexts: dF10ETSPortTable.setStatus('current')
dF10ETSPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1), ).setIndexNames((0, "DF10-DCB-MIB", "dF10ETSPortNumber"))
if mibBuilder.loadTexts: dF10ETSPortEntry.setStatus('current')
dF10ETSPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dF10ETSPortNumber.setStatus('current')
dF10ETSAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 2), DcbAdminMode().clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSAdminMode.setStatus('current')
dF10ETSDcbxOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 3), DcbState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSDcbxOperState.setStatus('current')
dF10ETSDcbxStateMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 4), DcbStateMachineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSDcbxStateMachine.setStatus('current')
dF10ETSOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSOperStatus.setStatus('current')
dF10ETSClearTLVCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10ETSClearTLVCounters.setStatus('current')
dF10ETSConfTxTLVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSConfTxTLVCounter.setStatus('current')
dF10ETSConfRxTLVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSConfRxTLVCounter.setStatus('current')
dF10ETSConfRxTLVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSConfRxTLVErrors.setStatus('current')
dF10ETSRecoTxTLVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSRecoTxTLVCounter.setStatus('current')
dF10ETSRecoRxTLVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSRecoRxTLVCounter.setStatus('current')
dF10ETSRecoRxTLVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10ETSRecoRxTLVErrors.setStatus('current')
dF10PFCSystemControl = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("shutdown", 2))).clone('running')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCSystemControl.setStatus('current')
dF10PFCModuleStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCModuleStatus.setStatus('current')
dF10PFCClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10PFCClearCounters.setStatus('current')
dF10PFCGlobalEnableTrap = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCGlobalEnableTrap.setStatus('current')
dF10PFCPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2), )
if mibBuilder.loadTexts: dF10PFCPortTable.setStatus('current')
dF10PFCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1), ).setIndexNames((0, "DF10-DCB-MIB", "dF10PFCPortNumber"))
if mibBuilder.loadTexts: dF10PFCPortEntry.setStatus('current')
dF10PFCPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dF10PFCPortNumber.setStatus('current')
dF10PFCAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 2), DcbAdminMode().clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCAdminMode.setStatus('current')
dF10PFCDcbxOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 3), DcbState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCDcbxOperState.setStatus('current')
dF10PFCDcbxStateMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 4), DcbStateMachineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCDcbxStateMachine.setStatus('current')
dF10PFCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCOperStatus.setStatus('current')
dF10PFCClearTLVCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dF10PFCClearTLVCounters.setStatus('current')
dF10PFCTxTLVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCTxTLVCounter.setStatus('current')
dF10PFCRxTLVCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCRxTLVCounter.setStatus('current')
dF10PFCRxTLVErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 15, 3, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dF10PFCRxTLVErrors.setStatus('current')
dF10DCBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0))
dF10DCBTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 1))
dF10DcbTrapPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 1, 1), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dF10DcbTrapPortNumber.setStatus('current')
dF10DcbPeerUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 1, 2), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dF10DcbPeerUpStatus.setStatus('current')
dF10ETSModuleStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 1)).setObjects(("DF10-DCB-MIB", "dF10ETSModuleStatus"))
if mibBuilder.loadTexts: dF10ETSModuleStatusTrap.setStatus('current')
dF10ETSPortAdminStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 2)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10ETSAdminMode"))
if mibBuilder.loadTexts: dF10ETSPortAdminStatusTrap.setStatus('current')
dF10ETSPortPeerStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 3)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10DcbPeerUpStatus"))
if mibBuilder.loadTexts: dF10ETSPortPeerStatusTrap.setStatus('current')
dF10ETSPortDcbxOperStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 4)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10ETSDcbxOperState"))
if mibBuilder.loadTexts: dF10ETSPortDcbxOperStateTrap.setStatus('current')
dF10PFCModuleStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 5)).setObjects(("DF10-DCB-MIB", "dF10PFCModuleStatus"))
if mibBuilder.loadTexts: dF10PFCModuleStatusTrap.setStatus('current')
dF10PFCPortAdminStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 6)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10PFCAdminMode"))
if mibBuilder.loadTexts: dF10PFCPortAdminStatusTrap.setStatus('current')
dF10PFCPortPeerStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 7)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10DcbPeerUpStatus"))
if mibBuilder.loadTexts: dF10PFCPortPeerStatusTrap.setStatus('current')
dF10PFCPortDcbxOperStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 15, 4, 0, 8)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10PFCDcbxOperState"))
if mibBuilder.loadTexts: dF10PFCPortDcbxOperStateTrap.setStatus('current')
dF10DCBMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5))
dF10DCBMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 1))
dF10DCBMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2))
dF10DCBMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 1, 1)).setObjects(("DF10-DCB-MIB", "dF10DcbSystemObjectGroup"), ("DF10-DCB-MIB", "dF10DcbxScalarsGroup"), ("DF10-DCB-MIB", "dF10DCBXPortTableGroup"), ("DF10-DCB-MIB", "dF10ETSScalarsGroup"), ("DF10-DCB-MIB", "dF10ETSPortTableGroup"), ("DF10-DCB-MIB", "dF10PFCScalarsGroup"), ("DF10-DCB-MIB", "dF10PFCPortTableGroup"), ("DF10-DCB-MIB", "dF10DCBNotificationObjectsGroup"), ("DF10-DCB-MIB", "dF10DCBNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DCBMibComplianceRev1 = dF10DCBMibComplianceRev1.setStatus('current')
dF10DCBMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 1, 2)).setObjects(("DF10-DCB-MIB", "dF10DcbObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DCBMibCompliance = dF10DCBMibCompliance.setStatus('obsolete')
dF10DcbSystemObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 1)).setObjects(("DF10-DCB-MIB", "dF10DcbPfcMinThreshold"), ("DF10-DCB-MIB", "dF10DcbPfcMaxThreshold"), ("DF10-DCB-MIB", "dF10DcbMaxPfcProfiles"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DcbSystemObjectGroup = dF10DcbSystemObjectGroup.setStatus('current')
dF10DcbObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 2)).setObjects(("DF10-DCB-MIB", "dF10DcbETSAdminStatus"), ("DF10-DCB-MIB", "dF10DcbPFCAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DcbObjectGroup = dF10DcbObjectGroup.setStatus('obsolete')
dF10DcbxScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 3)).setObjects(("DF10-DCB-MIB", "dF10DcbxGlobalTraceLevel"), ("DF10-DCB-MIB", "dF10DCBXGlobalVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DcbxScalarsGroup = dF10DcbxScalarsGroup.setStatus('current')
dF10DCBXPortTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 4)).setObjects(("DF10-DCB-MIB", "dF10DCBXAdminStatus"), ("DF10-DCB-MIB", "dF10DCBXAutoCfgPortRole"), ("DF10-DCB-MIB", "dF10DCBXPortVersion"), ("DF10-DCB-MIB", "dF10DCBXPortSupportedTLVs"), ("DF10-DCB-MIB", "dF10DCBXPortConfigTLVsTxEnable"), ("DF10-DCB-MIB", "dF10DCBXPortOperVersion"), ("DF10-DCB-MIB", "dF10DCBXPortPeerMACaddress"), ("DF10-DCB-MIB", "dF10DCBXPortCfgSource"), ("DF10-DCB-MIB", "dF10DCBXOperStatus"), ("DF10-DCB-MIB", "dF10DCBXPortMultiplePeerCount"), ("DF10-DCB-MIB", "dF10DCBXPortPeerRemovedCount"), ("DF10-DCB-MIB", "dF10DCBXPortPeerOperVersionNum"), ("DF10-DCB-MIB", "dF10DCBXPortPeerMaxVersion"), ("DF10-DCB-MIB", "dF10DCBXPortSeqNum"), ("DF10-DCB-MIB", "dF10DCBXPortAckNum"), ("DF10-DCB-MIB", "dF10DCBXPortPeerRcvdAckNum"), ("DF10-DCB-MIB", "dF10DCBXPortTxCount"), ("DF10-DCB-MIB", "dF10DCBXPortRxCount"), ("DF10-DCB-MIB", "dF10DCBXPortErrorFramesCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DCBXPortTableGroup = dF10DCBXPortTableGroup.setStatus('current')
dF10ETSScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 5)).setObjects(("DF10-DCB-MIB", "dF10ETSSystemControl"), ("DF10-DCB-MIB", "dF10ETSModuleStatus"), ("DF10-DCB-MIB", "dF10ETSClearCounters"), ("DF10-DCB-MIB", "dF10ETSGlobalEnableTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10ETSScalarsGroup = dF10ETSScalarsGroup.setStatus('current')
dF10ETSPortTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 6)).setObjects(("DF10-DCB-MIB", "dF10ETSAdminMode"), ("DF10-DCB-MIB", "dF10ETSDcbxOperState"), ("DF10-DCB-MIB", "dF10ETSDcbxStateMachine"), ("DF10-DCB-MIB", "dF10ETSOperStatus"), ("DF10-DCB-MIB", "dF10ETSClearTLVCounters"), ("DF10-DCB-MIB", "dF10ETSConfTxTLVCounter"), ("DF10-DCB-MIB", "dF10ETSConfRxTLVCounter"), ("DF10-DCB-MIB", "dF10ETSConfRxTLVErrors"), ("DF10-DCB-MIB", "dF10ETSRecoTxTLVCounter"), ("DF10-DCB-MIB", "dF10ETSRecoRxTLVCounter"), ("DF10-DCB-MIB", "dF10ETSRecoRxTLVErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10ETSPortTableGroup = dF10ETSPortTableGroup.setStatus('current')
dF10PFCScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 7)).setObjects(("DF10-DCB-MIB", "dF10PFCSystemControl"), ("DF10-DCB-MIB", "dF10PFCModuleStatus"), ("DF10-DCB-MIB", "dF10PFCClearCounters"), ("DF10-DCB-MIB", "dF10PFCGlobalEnableTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10PFCScalarsGroup = dF10PFCScalarsGroup.setStatus('current')
dF10PFCPortTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 8)).setObjects(("DF10-DCB-MIB", "dF10PFCAdminMode"), ("DF10-DCB-MIB", "dF10PFCDcbxOperState"), ("DF10-DCB-MIB", "dF10PFCDcbxStateMachine"), ("DF10-DCB-MIB", "dF10PFCOperStatus"), ("DF10-DCB-MIB", "dF10PFCClearTLVCounters"), ("DF10-DCB-MIB", "dF10PFCTxTLVCounter"), ("DF10-DCB-MIB", "dF10PFCRxTLVCounter"), ("DF10-DCB-MIB", "dF10PFCRxTLVErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10PFCPortTableGroup = dF10PFCPortTableGroup.setStatus('current')
dF10DCBNotificationObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 9)).setObjects(("DF10-DCB-MIB", "dF10DcbTrapPortNumber"), ("DF10-DCB-MIB", "dF10DcbPeerUpStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DCBNotificationObjectsGroup = dF10DCBNotificationObjectsGroup.setStatus('current')
dF10DCBNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6027, 3, 15, 5, 2, 10)).setObjects(("DF10-DCB-MIB", "dF10ETSModuleStatusTrap"), ("DF10-DCB-MIB", "dF10ETSPortAdminStatusTrap"), ("DF10-DCB-MIB", "dF10ETSPortPeerStatusTrap"), ("DF10-DCB-MIB", "dF10ETSPortDcbxOperStateTrap"), ("DF10-DCB-MIB", "dF10PFCModuleStatusTrap"), ("DF10-DCB-MIB", "dF10PFCPortAdminStatusTrap"), ("DF10-DCB-MIB", "dF10PFCPortPeerStatusTrap"), ("DF10-DCB-MIB", "dF10PFCPortDcbxOperStateTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dF10DCBNotificationsGroup = dF10DCBNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("DF10-DCB-MIB", DcbAdminMode=DcbAdminMode, DcbxVersion=DcbxVersion, dF10ETSRecoTxTLVCounter=dF10ETSRecoTxTLVCounter, dF10DCBXAutoCfgPortRole=dF10DCBXAutoCfgPortRole, dF10PFCScalars=dF10PFCScalars, dF10PFCPortAdminStatusTrap=dF10PFCPortAdminStatusTrap, dF10DcbPFCAdminStatus=dF10DcbPFCAdminStatus, dF10DCBMibGroups=dF10DCBMibGroups, dF10DcbNotificationObjects=dF10DcbNotificationObjects, dF10ETSPortEntry=dF10ETSPortEntry, dF10PFCClearTLVCounters=dF10PFCClearTLVCounters, dF10DCBXPortTableGroup=dF10DCBXPortTableGroup, dF10ETSPortNumber=dF10ETSPortNumber, dF10ETSRecoRxTLVCounter=dF10ETSRecoRxTLVCounter, dF10ETSPortDcbxOperStateTrap=dF10ETSPortDcbxOperStateTrap, dF10ETSPortAdminStatusTrap=dF10ETSPortAdminStatusTrap, dF10ETSConfTxTLVCounter=dF10ETSConfTxTLVCounter, dF10DCBMibCompliances=dF10DCBMibCompliances, dF10DCBXOperStatus=dF10DCBXOperStatus, dF10ETSConfRxTLVErrors=dF10ETSConfRxTLVErrors, PYSNMP_MODULE_ID=dF10Dcb, dF10PFCAdminMode=dF10PFCAdminMode, dF10ETSDcbxOperState=dF10ETSDcbxOperState, dF10ETSModuleStatusTrap=dF10ETSModuleStatusTrap, dF10ETSPortTable=dF10ETSPortTable, dF10DCBXPortPeerRcvdAckNum=dF10DCBXPortPeerRcvdAckNum, dF10ETSAdminMode=dF10ETSAdminMode, dF10DCBXPortAckNum=dF10DCBXPortAckNum, dF10ETSClearCounters=dF10ETSClearCounters, dF10DCBXPortRxCount=dF10DCBXPortRxCount, dF10DCBXPortVersion=dF10DCBXPortVersion, dF10DcbxGlobalTraceLevel=dF10DcbxGlobalTraceLevel, dF10DCBXPortCfgSource=dF10DCBXPortCfgSource, dF10DCBXPortPeerRemovedCount=dF10DCBXPortPeerRemovedCount, dF10PFCRxTLVCounter=dF10PFCRxTLVCounter, dF10ETSClearTLVCounters=dF10ETSClearTLVCounters, dF10DCBXPortErrorFramesCount=dF10DCBXPortErrorFramesCount, dF10DCBMibComplianceRev1=dF10DCBMibComplianceRev1, dF10PFCPortTable=dF10PFCPortTable, dF10DcbETSAdminStatus=dF10DcbETSAdminStatus, dF10ETSDcbxStateMachine=dF10ETSDcbxStateMachine, dF10DCBXPortSeqNum=dF10DCBXPortSeqNum, dF10PFCPortNumber=dF10PFCPortNumber, dF10DcbMaxPfcProfiles=dF10DcbMaxPfcProfiles, dF10DcbObjects=dF10DcbObjects, dF10DCBNotificationsGroup=dF10DCBNotificationsGroup, dF10DcbSystem=dF10DcbSystem, dF10DcbApplicationObjects=dF10DcbApplicationObjects, dF10DCBXScalars=dF10DCBXScalars, dF10DCBXPortSupportedTLVs=dF10DCBXPortSupportedTLVs, dF10DCBXPortConfigTLVsTxEnable=dF10DCBXPortConfigTLVsTxEnable, dF10DCBXPortPeerMaxVersion=dF10DCBXPortPeerMaxVersion, dF10PFCDcbxOperState=dF10PFCDcbxOperState, dF10DcbPfcMinThreshold=dF10DcbPfcMinThreshold, dF10PFCTxTLVCounter=dF10PFCTxTLVCounter, dF10ETSScalarsGroup=dF10ETSScalarsGroup, dF10PFCObjects=dF10PFCObjects, dF10ETSPortPeerStatusTrap=dF10ETSPortPeerStatusTrap, dF10PFCPortEntry=dF10PFCPortEntry, dF10DcbPfcMaxThreshold=dF10DcbPfcMaxThreshold, dF10DcbPortEntry=dF10DcbPortEntry, DcbxPortRole=DcbxPortRole, dF10ETSScalars=dF10ETSScalars, dF10DCBMibConformance=dF10DCBMibConformance, dF10DcbPortNumber=dF10DcbPortNumber, dF10PFCModuleStatusTrap=dF10PFCModuleStatusTrap, dF10DcbPeerUpStatus=dF10DcbPeerUpStatus, dF10DCBTrapObjects=dF10DCBTrapObjects, dF10DcbSystemObjectGroup=dF10DcbSystemObjectGroup, DcbStateMachineType=DcbStateMachineType, dF10DCBXPortTxCount=dF10DCBXPortTxCount, dF10Dcb=dF10Dcb, dF10ETSGlobalEnableTrap=dF10ETSGlobalEnableTrap, dF10ETSPortTableGroup=dF10ETSPortTableGroup, dF10DCBXPortTable=dF10DCBXPortTable, dF10ETSOperStatus=dF10ETSOperStatus, EnabledStatus=EnabledStatus, dF10ETSConfRxTLVCounter=dF10ETSConfRxTLVCounter, dF10DcbTrapPortNumber=dF10DcbTrapPortNumber, dF10PFCPortPeerStatusTrap=dF10PFCPortPeerStatusTrap, dF10DCBXGlobalVersion=dF10DCBXGlobalVersion, dF10ETSModuleStatus=dF10ETSModuleStatus, dF10DCBNotificationObjectsGroup=dF10DCBNotificationObjectsGroup, dF10DCBXPortOperVersion=dF10DCBXPortOperVersion, dF10DCBXPortPeerOperVersionNum=dF10DCBXPortPeerOperVersionNum, dF10PFCPortDcbxOperStateTrap=dF10PFCPortDcbxOperStateTrap, dF10DCBXAdminStatus=dF10DCBXAdminStatus, dF10DcbxScalarsGroup=dF10DcbxScalarsGroup, dF10DCBTraps=dF10DCBTraps, dF10DCBXPortMultiplePeerCount=dF10DCBXPortMultiplePeerCount, dF10PFCClearCounters=dF10PFCClearCounters, dF10DCBXPortNumber=dF10DCBXPortNumber, dF10ETSObjects=dF10ETSObjects, dF10DcbPortTable=dF10DcbPortTable, dF10PFCRxTLVErrors=dF10PFCRxTLVErrors, dF10DCBXPortEntry=dF10DCBXPortEntry, dF10PFCModuleStatus=dF10PFCModuleStatus, dF10PFCSystemControl=dF10PFCSystemControl, dF10ETSSystemControl=dF10ETSSystemControl, DcbState=DcbState, dF10DcbObjectGroup=dF10DcbObjectGroup, dF10ETSRecoRxTLVErrors=dF10ETSRecoRxTLVErrors, dF10DCBXPortPeerMACaddress=dF10DCBXPortPeerMACaddress, dF10PFCGlobalEnableTrap=dF10PFCGlobalEnableTrap, dF10PFCScalarsGroup=dF10PFCScalarsGroup, dF10PFCOperStatus=dF10PFCOperStatus, dF10DCBMibCompliance=dF10DCBMibCompliance, dF10DCBXPortStatusEntry=dF10DCBXPortStatusEntry, dF10PFCPortTableGroup=dF10PFCPortTableGroup, dF10DCBXObjects=dF10DCBXObjects, dF10DCBXPortStatusTable=dF10DCBXPortStatusTable, dF10PFCDcbxStateMachine=dF10PFCDcbxStateMachine)
