#
# PySNMP MIB module A3COM-HUAWEI-DOT11-CFGEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-DOT11-CFGEXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:49:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cDot11, = mibBuilder.importSymbols("A3COM-HUAWEI-DOT11-REF-MIB", "h3cDot11")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Integer32, ObjectIdentity, IpAddress, iso, Gauge32, Counter64, TimeTicks, NotificationType, ModuleIdentity, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "ObjectIdentity", "IpAddress", "iso", "Gauge32", "Counter64", "TimeTicks", "NotificationType", "ModuleIdentity", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
h3cDot11CFGEXT = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6))
h3cDot11CFGEXT.setRevisions(('2010-06-02 14:00', '2007-04-25 20:00',))
if mibBuilder.loadTexts: h3cDot11CFGEXT.setLastUpdated('201006021400Z')
if mibBuilder.loadTexts: h3cDot11CFGEXT.setOrganization('HUAWEI-3COM Technologies Co., Ltd.')
h3cDot11LoadBalance = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1))
h3cDot11LBGlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 1))
h3cDot11LoadBalanceTrafficEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11LoadBalanceTrafficEnable.setStatus('current')
h3cDot11LoadBalanceTrafficThres = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11LoadBalanceTrafficThres.setStatus('current')
h3cDot11LoadBalanceSessionEnable = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11LoadBalanceSessionEnable.setStatus('current')
h3cDot11LoadBalanceSessionThres = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11LoadBalanceSessionThres.setStatus('current')
h3cDot11LoadBalanceTrafficGap = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11LoadBalanceTrafficGap.setStatus('current')
h3cDot11LoadBalanceSessionGap = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11LoadBalanceSessionGap.setStatus('current')
h3cDot11LBTrafficThresKbps = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 1, 7), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11LBTrafficThresKbps.setStatus('current')
h3cDot11LBTrafficGapKbps = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 1, 8), Integer32()).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11LBTrafficGapKbps.setStatus('current')
h3cDot11LBRadioGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 2), )
if mibBuilder.loadTexts: h3cDot11LBRadioGroupTable.setStatus('current')
h3cDot11LBRadioGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-CFGEXT-MIB", "h3cDot11LBRadioGroupId"))
if mibBuilder.loadTexts: h3cDot11LBRadioGroupEntry.setStatus('current')
h3cDot11LBRadioGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cDot11LBRadioGroupId.setStatus('current')
h3cDot11LBRadioGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11LBRadioGroupDesc.setStatus('current')
h3cDot11LBRadioGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 6, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11LBRadioGroupRowStatus.setStatus('current')
mibBuilder.exportSymbols("A3COM-HUAWEI-DOT11-CFGEXT-MIB", h3cDot11LoadBalance=h3cDot11LoadBalance, h3cDot11LBGlobalGroup=h3cDot11LBGlobalGroup, h3cDot11LoadBalanceTrafficGap=h3cDot11LoadBalanceTrafficGap, h3cDot11LoadBalanceSessionThres=h3cDot11LoadBalanceSessionThres, h3cDot11LBTrafficThresKbps=h3cDot11LBTrafficThresKbps, h3cDot11LoadBalanceSessionGap=h3cDot11LoadBalanceSessionGap, h3cDot11LBRadioGroupTable=h3cDot11LBRadioGroupTable, h3cDot11LBTrafficGapKbps=h3cDot11LBTrafficGapKbps, PYSNMP_MODULE_ID=h3cDot11CFGEXT, h3cDot11CFGEXT=h3cDot11CFGEXT, h3cDot11LBRadioGroupId=h3cDot11LBRadioGroupId, h3cDot11LBRadioGroupDesc=h3cDot11LBRadioGroupDesc, h3cDot11LoadBalanceSessionEnable=h3cDot11LoadBalanceSessionEnable, h3cDot11LBRadioGroupRowStatus=h3cDot11LBRadioGroupRowStatus, h3cDot11LoadBalanceTrafficThres=h3cDot11LoadBalanceTrafficThres, h3cDot11LoadBalanceTrafficEnable=h3cDot11LoadBalanceTrafficEnable, h3cDot11LBRadioGroupEntry=h3cDot11LBRadioGroupEntry)
