#
# PySNMP MIB module CXGIM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXGIM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
Alias, ThruputClass, cxGim, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "ThruputClass", "cxGim", "SapIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Bits, iso, TimeTicks, Counter64, MibIdentifier, Counter32, ObjectIdentity, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "iso", "TimeTicks", "Counter64", "MibIdentifier", "Counter32", "ObjectIdentity", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class PSapIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class TypeIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class DteIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

class SubRef(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class PacketSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("bytes16", 4), ("bytes32", 5), ("bytes64", 6), ("bytes128", 7), ("bytes256", 8), ("bytes512", 9), ("bytes1024", 10), ("bytes2048", 11), ("bytes4096", 12))

gimSysRouteConnectInterval = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 900)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSysRouteConnectInterval.setStatus('mandatory')
gimMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimMibLevel.setStatus('mandatory')
gimSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10), )
if mibBuilder.loadTexts: gimSapTable.setStatus('mandatory')
gimSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1), ).setIndexNames((0, "CXGIM-MIB", "gimSapType"), (0, "CXGIM-MIB", "gimSapNumber"))
if mibBuilder.loadTexts: gimSapEntry.setStatus('mandatory')
gimSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 1), TypeIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapType.setStatus('mandatory')
gimSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 2), PSapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapNumber.setStatus('mandatory')
gimSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSapRowStatus.setStatus('mandatory')
gimSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSapAlias.setStatus('mandatory')
gimSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 5), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSapCompanionAlias.setStatus('mandatory')
gimSapInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSapInactivityTimer.setStatus('mandatory')
gimSapProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(7, 11)).clone('01,00,00,00')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSapProtocolId.setStatus('mandatory')
gimSapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSapAddress.setStatus('mandatory')
gimSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: gimSapControl.setStatus('mandatory')
gimSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("offLine", 1), ("unbound", 2), ("notConnected", 3), ("inProgress", 4), ("connected", 5))).clone('unbound')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapState.setStatus('mandatory')
gimSapLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notConnected", 1), ("inProgress", 2), ("connected", 3))).clone('notConnected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapLinkState.setStatus('mandatory')
gimSapTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapTxFrames.setStatus('mandatory')
gimSapRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapRxFrames.setStatus('mandatory')
gimSapTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapTxOctets.setStatus('mandatory')
gimSapRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapRxOctets.setStatus('mandatory')
gimSapOutSuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapOutSuccessfullConnects.setStatus('mandatory')
gimSapOutUnsuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapOutUnsuccessfullConnects.setStatus('mandatory')
gimSapInSuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapInSuccessfullConnects.setStatus('mandatory')
gimSapInUnsuccessfullConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapInUnsuccessfullConnects.setStatus('mandatory')
gimSapUnopenedServiceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapUnopenedServiceDiscards.setStatus('mandatory')
gimSapTxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapTxResets.setStatus('mandatory')
gimSapRxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSapRxResets.setStatus('mandatory')
gimSapRxThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 50), ThruputClass().clone('bps9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSapRxThruputClass.setStatus('mandatory')
gimSapTxThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 51), ThruputClass().clone('bps9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSapTxThruputClass.setStatus('mandatory')
gimSapTxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 52), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSapTxPacketSize.setStatus('mandatory')
gimSapRxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 53), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSapRxPacketSize.setStatus('mandatory')
gimSapTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSapTxWindowSize.setStatus('mandatory')
gimSapRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 10, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSapRxWindowSize.setStatus('mandatory')
gimSysRouteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 11), )
if mibBuilder.loadTexts: gimSysRouteTable.setStatus('mandatory')
gimSysRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 11, 1), ).setIndexNames((0, "CXGIM-MIB", "gimSRSapType"), (0, "CXGIM-MIB", "gimSRSapNumber"))
if mibBuilder.loadTexts: gimSysRouteEntry.setStatus('mandatory')
gimSRSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 11, 1, 1), TypeIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSRSapType.setStatus('mandatory')
gimSRSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 11, 1, 2), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSRSapNumber.setStatus('mandatory')
gimSRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSRRowStatus.setStatus('mandatory')
gimSRDestAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 11, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSRDestAlias.setStatus('mandatory')
gimSRSubRef = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 11, 1, 5), SubRef()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gimSRSubRef.setStatus('mandatory')
gimSRRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("offLine", 1), ("notConnected", 2), ("inProgress", 3), ("connected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSRRouteStatus.setStatus('mandatory')
gimSRClearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("noFailure", 1), ("internalError", 2), ("localAllocFailure", 3), ("remoteAllocFailure", 4), ("localNoAccess", 5), ("remoteNoAccess", 6), ("localPvcDown", 7), ("remotePvcDown", 8), ("localPvcBusy", 9), ("remotePvcBusy", 10), ("localFcnFailure", 11), ("remoteFcnFailure", 12), ("localDsnFailure", 13), ("localRefInUse", 14), ("remoteAliasNotFound", 15), ("remoteNoPvcService", 16), ("mpeInvalidSubref", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gimSRClearStatus.setStatus('mandatory')
ximDteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 12), )
if mibBuilder.loadTexts: ximDteTable.setStatus('mandatory')
ximDteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 12, 1), ).setIndexNames((0, "CXGIM-MIB", "ximDteSapNumber"), (0, "CXGIM-MIB", "ximDteDteNumber"))
if mibBuilder.loadTexts: ximDteEntry.setStatus('mandatory')
ximDteSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 12, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ximDteSapNumber.setStatus('mandatory')
ximDteDteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 12, 1, 2), DteIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ximDteDteNumber.setStatus('mandatory')
ximDteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ximDteRowStatus.setStatus('mandatory')
ximDteCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ximDteCalledAddress.setStatus('mandatory')
ximDteFacilityField = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 12, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ximDteFacilityField.setStatus('mandatory')
ximDteUserDataField = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 55, 12, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ximDteUserDataField.setStatus('mandatory')
mibBuilder.exportSymbols("CXGIM-MIB", gimSapControl=gimSapControl, gimSapTxResets=gimSapTxResets, gimSRSapNumber=gimSRSapNumber, gimMibLevel=gimMibLevel, gimSapAlias=gimSapAlias, gimSapState=gimSapState, gimSapUnopenedServiceDiscards=gimSapUnopenedServiceDiscards, ximDteRowStatus=ximDteRowStatus, gimSapOutSuccessfullConnects=gimSapOutSuccessfullConnects, gimSysRouteTable=gimSysRouteTable, gimSRSubRef=gimSRSubRef, ximDteUserDataField=ximDteUserDataField, SubRef=SubRef, gimSapTxThruputClass=gimSapTxThruputClass, gimSapInUnsuccessfullConnects=gimSapInUnsuccessfullConnects, gimSapAddress=gimSapAddress, gimSapTxPacketSize=gimSapTxPacketSize, gimSapRxPacketSize=gimSapRxPacketSize, gimSRClearStatus=gimSRClearStatus, gimSapEntry=gimSapEntry, gimSapTxFrames=gimSapTxFrames, ximDteDteNumber=ximDteDteNumber, DteIndex=DteIndex, gimSapTable=gimSapTable, gimSapRxWindowSize=gimSapRxWindowSize, gimSapNumber=gimSapNumber, gimSapCompanionAlias=gimSapCompanionAlias, ximDteTable=ximDteTable, gimSapInactivityTimer=gimSapInactivityTimer, gimSapInSuccessfullConnects=gimSapInSuccessfullConnects, ximDteCalledAddress=ximDteCalledAddress, PacketSize=PacketSize, TypeIndex=TypeIndex, gimSapLinkState=gimSapLinkState, gimSapTxOctets=gimSapTxOctets, gimSapRxOctets=gimSapRxOctets, gimSapOutUnsuccessfullConnects=gimSapOutUnsuccessfullConnects, gimSRRowStatus=gimSRRowStatus, ximDteEntry=ximDteEntry, gimSapProtocolId=gimSapProtocolId, gimSapRowStatus=gimSapRowStatus, gimSapTxWindowSize=gimSapTxWindowSize, gimSapType=gimSapType, gimSRRouteStatus=gimSRRouteStatus, gimSRDestAlias=gimSRDestAlias, gimSysRouteEntry=gimSysRouteEntry, PSapIndex=PSapIndex, gimSapRxResets=gimSapRxResets, gimSysRouteConnectInterval=gimSysRouteConnectInterval, gimSapRxThruputClass=gimSapRxThruputClass, ximDteSapNumber=ximDteSapNumber, gimSapRxFrames=gimSapRxFrames, ximDteFacilityField=ximDteFacilityField, gimSRSapType=gimSRSapType)
