#
# PySNMP MIB module SW-ACLMGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SW-ACLMGMT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:04:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
dlink_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-mgmt")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, MibIdentifier, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, NotificationType, Unsigned32, ObjectIdentity, Counter64, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "NotificationType", "Unsigned32", "ObjectIdentity", "Counter64", "Integer32", "Bits")
RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
swAclMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 11, 5))
if mibBuilder.loadTexts: swAclMgmtMIB.setLastUpdated('0007150000Z')
if mibBuilder.loadTexts: swAclMgmtMIB.setOrganization('enterprise, Inc.')
swAclMaskMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 5, 1))
swAclRuleMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 11, 5, 2))
swACLEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1), )
if mibBuilder.loadTexts: swACLEthernetTable.setStatus('current')
swACLEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1), ).setIndexNames((0, "SW-ACLMGMT-MIB", "swACLEthernetProfileID"))
if mibBuilder.loadTexts: swACLEthernetEntry.setStatus('current')
swACLEthernetProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEthernetProfileID.setStatus('current')
swACLEthernetUsevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetUsevlan.setStatus('current')
swACLEthernetMacAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-mac-addr", 2), ("src-mac-addr", 3), ("dst-src-mac-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetMacAddrMaskState.setStatus('current')
swACLEthernetSrcMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetSrcMacAddrMask.setStatus('current')
swACLEthernetDstMacAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetDstMacAddrMask.setStatus('current')
swACLEthernetUse8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetUse8021p.setStatus('current')
swACLEthernetUseEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetUseEthernetType.setStatus('current')
swACLEthernetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 8), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetPort.setStatus('current')
swACLEthernetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEthernetRowStatus.setStatus('current')
swACLIpTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2), )
if mibBuilder.loadTexts: swACLIpTable.setStatus('current')
swACLIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1), ).setIndexNames((0, "SW-ACLMGMT-MIB", "swACLIpProfileID"))
if mibBuilder.loadTexts: swACLIpEntry.setStatus('current')
swACLIpProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpProfileID.setStatus('current')
swACLIpUsevlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUsevlan.setStatus('current')
swACLIpIpAddrMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-ip-addr", 2), ("src-ip-addr", 3), ("dst-src-ip-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpIpAddrMaskState.setStatus('current')
swACLIpSrcIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpSrcIpAddrMask.setStatus('current')
swACLIpDstIpAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpDstIpAddrMask.setStatus('current')
swACLIpUseDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUseDSCP.setStatus('current')
swACLIpUseProtoType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("igmp", 3), ("tcp", 4), ("udp", 5), ("protocolId", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUseProtoType.setStatus('current')
swACLIpIcmpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("type", 2), ("code", 3), ("type-code", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpIcmpOption.setStatus('current')
swACLIpIgmpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpIgmpOption.setStatus('current')
swACLIpTcpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTcpOption.setStatus('current')
swACLIpUdpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("dst-addr", 2), ("src-addr", 3), ("dst-src-addr", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpUdpOption.setStatus('current')
swACLIpTCPorUDPSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPorUDPSrcPortMask.setStatus('current')
swACLIpTCPorUDPDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPorUDPDstPortMask.setStatus('current')
swACLIpTCPFlagBit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPFlagBit.setStatus('current')
swACLIpProtoIDOption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpProtoIDOption.setStatus('current')
swACLIpProtoIDMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpProtoIDMask.setStatus('current')
swACLIpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 18), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpPort.setStatus('current')
swACLIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRowStatus.setStatus('current')
swACLIpTCPFlagBitMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 2, 1, 115), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpTCPFlagBitMask.setStatus('current')
swACLPayloadTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3), )
if mibBuilder.loadTexts: swACLPayloadTable.setStatus('current')
swACLPayloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1), ).setIndexNames((0, "SW-ACLMGMT-MIB", "swACLPayloadProfileID"))
if mibBuilder.loadTexts: swACLPayloadEntry.setStatus('current')
swACLPayloadProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPayloadProfileID.setStatus('current')
swACLPayloadPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadPort.setStatus('current')
swACLPayloadOffSet0to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadOffSet0to15.setStatus('current')
swACLPayloadOffSet16to31 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadOffSet16to31.setStatus('current')
swACLPayloadOffSet32to47 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadOffSet32to47.setStatus('current')
swACLPayloadOffSet48to63 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadOffSet48to63.setStatus('current')
swACLPayloadOffSet64to79 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadOffSet64to79.setStatus('current')
swACLPayloadRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRowStatus.setStatus('current')
swACLEtherRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1), )
if mibBuilder.loadTexts: swACLEtherRuleTable.setStatus('current')
swACLEtherRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1), ).setIndexNames((0, "SW-ACLMGMT-MIB", "swACLEtherRuleProfileID"), (0, "SW-ACLMGMT-MIB", "swACLEtherRuleAccessID"))
if mibBuilder.loadTexts: swACLEtherRuleEntry.setStatus('current')
swACLEtherRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEtherRuleProfileID.setStatus('current')
swACLEtherRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLEtherRuleAccessID.setStatus('current')
swACLEtherRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleVlan.setStatus('current')
swACLEtherRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleSrcMacAddress.setStatus('current')
swACLEtherRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleDstMacAddress.setStatus('current')
swACLEtherRule8021P = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRule8021P.setStatus('current')
swACLEtherRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEtherType.setStatus('current')
swACLEtherRuleEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEnablePriority.setStatus('current')
swACLEtherRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRulePriority.setStatus('current')
swACLEtherRuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleReplacePriority.setStatus('current')
swACLEtherRuleEnableReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleEnableReplaceDscp.setStatus('current')
swACLEtherRuleRepDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleRepDscp.setStatus('current')
swACLEtherRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRulePermit.setStatus('current')
swACLEtherRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLEtherRuleRowStatus.setStatus('current')
swACLIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2), )
if mibBuilder.loadTexts: swACLIpRuleTable.setStatus('current')
swACLIpRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1), ).setIndexNames((0, "SW-ACLMGMT-MIB", "swACLIpRuleProfileID"), (0, "SW-ACLMGMT-MIB", "swACLIpRuleAccessID"))
if mibBuilder.loadTexts: swACLIpRuleEntry.setStatus('current')
swACLIpRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpRuleProfileID.setStatus('current')
swACLIpRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpRuleAccessID.setStatus('current')
swACLIpRuleVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleVlan.setStatus('current')
swACLIpRuleSrcIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleSrcIpaddress.setStatus('current')
swACLIpRuleDstIpaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleDstIpaddress.setStatus('current')
swACLIpRuleDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleDscp.setStatus('current')
swACLIpRuleProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("icmp", 2), ("igmp", 3), ("tcp", 4), ("udp", 5), ("protocolId", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLIpRuleProtocol.setStatus('current')
swACLIpRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleType.setStatus('current')
swACLIpRuleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleCode.setStatus('current')
swACLIpRuleSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleSrcPort.setStatus('current')
swACLIpRuleDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleDstPort.setStatus('current')
swACLIpRuleFlagBits = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleFlagBits.setStatus('current')
swACLIpRuleProtoID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleProtoID.setStatus('current')
swACLIpRuleUserMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleUserMask.setStatus('current')
swACLIpRuleEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleEnablePriority.setStatus('current')
swACLIpRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRulePriority.setStatus('current')
swACLIpRuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleReplacePriority.setStatus('current')
swACLIpRuleEnableReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleEnableReplaceDscp.setStatus('current')
swACLIpRuleRepDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleRepDscp.setStatus('current')
swACLIpRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRulePermit.setStatus('current')
swACLIpRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 2, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLIpRuleRowStatus.setStatus('current')
swACLPayloadRuleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3), )
if mibBuilder.loadTexts: swACLPayloadRuleTable.setStatus('current')
swACLPayloadRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1), ).setIndexNames((0, "SW-ACLMGMT-MIB", "swACLPayloadRuleProfileID"), (0, "SW-ACLMGMT-MIB", "swACLPayloadRuleAccessID"))
if mibBuilder.loadTexts: swACLPayloadRuleEntry.setStatus('current')
swACLPayloadRuleProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPayloadRuleProfileID.setStatus('current')
swACLPayloadRuleAccessID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swACLPayloadRuleAccessID.setStatus('current')
swACLPayloadRuleOffSet0to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleOffSet0to15.setStatus('current')
swACLPayloadRuleOffSet16to31 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleOffSet16to31.setStatus('current')
swACLPayloadRuleOffSet32to47 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleOffSet32to47.setStatus('current')
swACLPayloadRuleOffSet48to63 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleOffSet48to63.setStatus('current')
swACLPayloadRuleOffSet64to79 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleOffSet64to79.setStatus('current')
swACLPayloadRuleEnablePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleEnablePriority.setStatus('current')
swACLPayloadRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRulePriority.setStatus('current')
swACLPayloadRuleReplacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleReplacePriority.setStatus('current')
swACLPayloadRuleEnableReplaceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleEnableReplaceDscp.setStatus('current')
swACLPayloadRuleRepDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleRepDscp.setStatus('current')
swACLPayloadRulePermit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRulePermit.setStatus('current')
swACLPayloadRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 11, 5, 2, 3, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swACLPayloadRuleRowStatus.setStatus('current')
mibBuilder.exportSymbols("SW-ACLMGMT-MIB", swACLPayloadTable=swACLPayloadTable, swACLIpRuleRowStatus=swACLIpRuleRowStatus, swACLPayloadRuleAccessID=swACLPayloadRuleAccessID, swACLPayloadOffSet32to47=swACLPayloadOffSet32to47, swACLIpRuleTable=swACLIpRuleTable, swACLIpProfileID=swACLIpProfileID, swACLPayloadRuleOffSet16to31=swACLPayloadRuleOffSet16to31, swACLEtherRuleReplacePriority=swACLEtherRuleReplacePriority, swACLIpRuleDstIpaddress=swACLIpRuleDstIpaddress, swACLIpRuleReplacePriority=swACLIpRuleReplacePriority, swACLPayloadRuleEntry=swACLPayloadRuleEntry, swACLEtherRuleDstMacAddress=swACLEtherRuleDstMacAddress, swACLIpTcpOption=swACLIpTcpOption, swACLPayloadRuleEnableReplaceDscp=swACLPayloadRuleEnableReplaceDscp, swACLPayloadRuleEnablePriority=swACLPayloadRuleEnablePriority, swACLIpRuleCode=swACLIpRuleCode, swACLIpUdpOption=swACLIpUdpOption, swACLEtherRuleEnablePriority=swACLEtherRuleEnablePriority, swACLIpRuleEnableReplaceDscp=swACLIpRuleEnableReplaceDscp, swACLPayloadRuleRowStatus=swACLPayloadRuleRowStatus, swACLEthernetRowStatus=swACLEthernetRowStatus, swACLIpTCPorUDPDstPortMask=swACLIpTCPorUDPDstPortMask, swACLEthernetUseEthernetType=swACLEthernetUseEthernetType, swACLIpTable=swACLIpTable, swACLIpRuleType=swACLIpRuleType, swACLEtherRuleEntry=swACLEtherRuleEntry, swACLEtherRuleEnableReplaceDscp=swACLEtherRuleEnableReplaceDscp, swACLIpRuleRepDscp=swACLIpRuleRepDscp, swACLPayloadRuleTable=swACLPayloadRuleTable, swACLEthernetProfileID=swACLEthernetProfileID, swACLIpDstIpAddrMask=swACLIpDstIpAddrMask, swACLPayloadRuleProfileID=swACLPayloadRuleProfileID, swACLIpProtoIDMask=swACLIpProtoIDMask, PYSNMP_MODULE_ID=swAclMgmtMIB, swACLPayloadRuleOffSet0to15=swACLPayloadRuleOffSet0to15, swAclRuleMgmt=swAclRuleMgmt, swACLIpEntry=swACLIpEntry, swACLPayloadRulePermit=swACLPayloadRulePermit, swACLEthernetMacAddrMaskState=swACLEthernetMacAddrMaskState, swACLPayloadRuleOffSet32to47=swACLPayloadRuleOffSet32to47, swACLEtherRuleRepDscp=swACLEtherRuleRepDscp, swACLIpRuleProfileID=swACLIpRuleProfileID, swACLIpRuleUserMask=swACLIpRuleUserMask, swAclMaskMgmt=swAclMaskMgmt, swACLPayloadOffSet0to15=swACLPayloadOffSet0to15, swACLIpRulePriority=swACLIpRulePriority, swACLIpIpAddrMaskState=swACLIpIpAddrMaskState, swACLIpTCPFlagBitMask=swACLIpTCPFlagBitMask, swACLEtherRuleAccessID=swACLEtherRuleAccessID, swACLPayloadRuleOffSet64to79=swACLPayloadRuleOffSet64to79, swACLEtherRuleTable=swACLEtherRuleTable, swACLIpTCPorUDPSrcPortMask=swACLIpTCPorUDPSrcPortMask, swACLEthernetUsevlan=swACLEthernetUsevlan, swACLIpRuleAccessID=swACLIpRuleAccessID, swACLEthernetTable=swACLEthernetTable, swACLPayloadRuleRepDscp=swACLPayloadRuleRepDscp, swACLEtherRuleEtherType=swACLEtherRuleEtherType, swACLIpTCPFlagBit=swACLIpTCPFlagBit, swACLIpRuleEnablePriority=swACLIpRuleEnablePriority, swACLEthernetPort=swACLEthernetPort, swACLEtherRulePriority=swACLEtherRulePriority, swACLPayloadPort=swACLPayloadPort, swACLIpPort=swACLIpPort, swACLIpRuleProtoID=swACLIpRuleProtoID, swACLPayloadProfileID=swACLPayloadProfileID, swACLPayloadOffSet48to63=swACLPayloadOffSet48to63, swACLIpUseDSCP=swACLIpUseDSCP, swACLEtherRule8021P=swACLEtherRule8021P, swACLEthernetUse8021p=swACLEthernetUse8021p, swACLPayloadRowStatus=swACLPayloadRowStatus, swACLIpRuleEntry=swACLIpRuleEntry, swACLIpUseProtoType=swACLIpUseProtoType, swACLPayloadOffSet16to31=swACLPayloadOffSet16to31, swACLPayloadOffSet64to79=swACLPayloadOffSet64to79, swACLPayloadRulePriority=swACLPayloadRulePriority, swACLIpSrcIpAddrMask=swACLIpSrcIpAddrMask, swACLIpRowStatus=swACLIpRowStatus, swAclMgmtMIB=swAclMgmtMIB, swACLIpIcmpOption=swACLIpIcmpOption, swACLIpRuleSrcPort=swACLIpRuleSrcPort, swACLEtherRuleVlan=swACLEtherRuleVlan, swACLEtherRuleRowStatus=swACLEtherRuleRowStatus, swACLEthernetSrcMacAddrMask=swACLEthernetSrcMacAddrMask, swACLIpUsevlan=swACLIpUsevlan, swACLIpProtoIDOption=swACLIpProtoIDOption, swACLPayloadEntry=swACLPayloadEntry, swACLIpRuleProtocol=swACLIpRuleProtocol, swACLEtherRuleProfileID=swACLEtherRuleProfileID, swACLEtherRuleSrcMacAddress=swACLEtherRuleSrcMacAddress, swACLIpRulePermit=swACLIpRulePermit, swACLIpRuleDstPort=swACLIpRuleDstPort, swACLEthernetDstMacAddrMask=swACLEthernetDstMacAddrMask, swACLIpRuleFlagBits=swACLIpRuleFlagBits, swACLIpRuleVlan=swACLIpRuleVlan, swACLPayloadRuleReplacePriority=swACLPayloadRuleReplacePriority, swACLIpIgmpOption=swACLIpIgmpOption, swACLIpRuleSrcIpaddress=swACLIpRuleSrcIpaddress, swACLPayloadRuleOffSet48to63=swACLPayloadRuleOffSet48to63, swACLIpRuleDscp=swACLIpRuleDscp, swACLEthernetEntry=swACLEthernetEntry, swACLEtherRulePermit=swACLEtherRulePermit)
