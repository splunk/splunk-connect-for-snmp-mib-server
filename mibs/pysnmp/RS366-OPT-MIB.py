#
# PySNMP MIB module RS366-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RS366-OPT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:50:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, iso, MibIdentifier, Gauge32, Bits, Counter64, NotificationType, enterprises, IpAddress, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "MibIdentifier", "Gauge32", "Bits", "Counter64", "NotificationType", "enterprises", "IpAddress", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCTRS366PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 21), )
if mibBuilder.loadTexts: cdx6500PPCTRS366PortTable.setStatus('mandatory')
cdx6500PPCTRS366PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 21, 1), ).setIndexNames((0, "RS366-OPT-MIB", "cdx6500RS366CfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTRS366PortEntry.setStatus('mandatory')
cdx6500RS366CfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366CfgPortNumber.setStatus('mandatory')
cdx6500RS366CfgADataPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366CfgADataPortNumber.setStatus('mandatory')
cdx6500RS366CfgContXferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("modenull", 0), ("modeeon", 1), ("modeebt", 2), ("newvalmodenull", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366CfgContXferMode.setStatus('mandatory')
cdx6500RS366CfgMaxAddrDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366CfgMaxAddrDigits.setStatus('mandatory')
cdx6500RS366CfgMaxRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 32, 48, 96, 50))).clone(namedValues=NamedValues(("sec0", 0), ("sec32", 32), ("sec48", 48), ("sec96", 96), ("newvalSec0", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366CfgMaxRespTime.setStatus('mandatory')
cdx6500RS366CfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366CfgElectricalInterfaceType.setStatus('mandatory')
cdx6500RS366CfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 21, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366CfgV24ElectricalInterfaceOption.setStatus('mandatory')
cdx6500RS366CfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366CfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
cdx6500PPSTRS366PortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 22), )
if mibBuilder.loadTexts: cdx6500PPSTRS366PortTable.setStatus('mandatory')
cdx6500PPSTRS366PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 22, 1), ).setIndexNames((0, "RS366-OPT-MIB", "cdx6500RS366StatPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTRS366PortEntry.setStatus('mandatory')
cdx6500RS366StatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366StatPortNumber.setStatus('mandatory')
cdx6500RS366StatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 22, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366StatPortStatus.setStatus('mandatory')
cdx6500RS366StatPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 22, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366StatPortState.setStatus('mandatory')
cdx6500RS366StatDataNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 22, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366StatDataNum.setStatus('mandatory')
cdx6500RS366StatTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366StatTotalCalls.setStatus('mandatory')
cdx6500RS366StatFailedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 22, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366StatFailedCalls.setStatus('mandatory')
cdx6500RS366StatTotalTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 22, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366StatTotalTimeouts.setStatus('mandatory')
cdx6500RS366StatTotalIllegalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 22, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366StatTotalIllegalDigits.setStatus('mandatory')
cdx6500RS366StatPortConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 22, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500RS366StatPortConnected.setStatus('mandatory')
mibBuilder.exportSymbols("RS366-OPT-MIB", cdx6500RS366StatDataNum=cdx6500RS366StatDataNum, codex=codex, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500PPCTRS366PortTable=cdx6500PPCTRS366PortTable, cdx6500PPSTRS366PortEntry=cdx6500PPSTRS366PortEntry, cdx6500PPSTRS366PortTable=cdx6500PPSTRS366PortTable, cdx6500=cdx6500, cdx6500RS366CfgContXferMode=cdx6500RS366CfgContXferMode, DisplayString=DisplayString, cdx6500RS366CfgADataPortNumber=cdx6500RS366CfgADataPortNumber, cdx6500RS366CfgMaxAddrDigits=cdx6500RS366CfgMaxAddrDigits, cdx6500RS366CfgMaxRespTime=cdx6500RS366CfgMaxRespTime, cdx6500RS366StatFailedCalls=cdx6500RS366StatFailedCalls, cdx6500RS366StatPortConnected=cdx6500RS366StatPortConnected, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500RS366CfgV24ElectricalInterfaceOption=cdx6500RS366CfgV24ElectricalInterfaceOption, cdx6500Statistics=cdx6500Statistics, cdx6500RS366StatPortNumber=cdx6500RS366StatPortNumber, cdx6500Configuration=cdx6500Configuration, cdx6500Controls=cdx6500Controls, cdx6500RS366CfgElectricalInterfaceType=cdx6500RS366CfgElectricalInterfaceType, cdx6500RS366StatTotalIllegalDigits=cdx6500RS366StatTotalIllegalDigits, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500RS366CfgHighSpeedElectricalInterfaceOption=cdx6500RS366CfgHighSpeedElectricalInterfaceOption, cdx6500RS366CfgPortNumber=cdx6500RS366CfgPortNumber, cdx6500PPCTRS366PortEntry=cdx6500PPCTRS366PortEntry, cdx6500RS366StatPortState=cdx6500RS366StatPortState, cdx6500RS366StatTotalCalls=cdx6500RS366StatTotalCalls, cdx6500RS366StatTotalTimeouts=cdx6500RS366StatTotalTimeouts, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500RS366StatPortStatus=cdx6500RS366StatPortStatus, cdxProductSpecific=cdxProductSpecific)
