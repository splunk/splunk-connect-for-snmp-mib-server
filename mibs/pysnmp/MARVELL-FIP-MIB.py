#
# PySNMP MIB module MARVELL-FIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MARVELL-FIP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:59:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Gauge32, IpAddress, TimeTicks, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, ModuleIdentity, Unsigned32, ObjectIdentity, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "IpAddress", "TimeTicks", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "NotificationType", "Counter64")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
rlFip = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 205))
rlFip.setRevisions(('2007-11-07 00:00',))
if mibBuilder.loadTexts: rlFip.setLastUpdated('200711070000Z')
if mibBuilder.loadTexts: rlFip.setOrganization('Marvell Semiconductor, Inc.')
class RlFipIfType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("non-snooping", 1), ("non-fcoe", 2), ("fcoe", 3), ("enode", 4))

rlFipIfTable = MibTable((1, 3, 6, 1, 4, 1, 89, 205, 1), )
if mibBuilder.loadTexts: rlFipIfTable.setStatus('current')
rlFipIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 205, 1, 1), ).setIndexNames((0, "MARVELL-FIP-MIB", "rlFipIfIndex"))
if mibBuilder.loadTexts: rlFipIfEntry.setStatus('current')
rlFipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rlFipIfIndex.setStatus('current')
rlFipIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 1, 1, 2), RlFipIfType().clone('enode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFipIfType.setStatus('current')
rlFipIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlFipIfRowStatus.setStatus('current')
rlFipGlobalFcfListTable = MibTable((1, 3, 6, 1, 4, 1, 89, 205, 2), )
if mibBuilder.loadTexts: rlFipGlobalFcfListTable.setStatus('current')
rlFipGlobalFcfListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 205, 2, 1), ).setIndexNames((0, "MARVELL-FIP-MIB", "rlFipGlobalFcfListMac"))
if mibBuilder.loadTexts: rlFipGlobalFcfListEntry.setStatus('current')
rlFipGlobalFcfListMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: rlFipGlobalFcfListMac.setStatus('current')
rlFipGlobalFcfListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlFipGlobalFcfListStatus.setStatus('current')
rlFipStaticFcoeTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 89, 205, 3), )
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelTable.setStatus('current')
rlFipStaticFcoeTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 205, 3, 1), ).setIndexNames((0, "MARVELL-FIP-MIB", "rlFipStaticFcoeTunnelPort"), (0, "MARVELL-FIP-MIB", "rlFipStaticFcoeTunnelSrcMac"), (0, "MARVELL-FIP-MIB", "rlFipStaticFcoeTunnelDstMac"))
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelEntry.setStatus('current')
rlFipStaticFcoeTunnelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelPort.setStatus('current')
rlFipStaticFcoeTunnelSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelSrcMac.setStatus('current')
rlFipStaticFcoeTunnelDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 3, 1, 3), MacAddress())
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelDstMac.setStatus('current')
rlFipStaticFcoeTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelStatus.setStatus('current')
rlFipActiveFcoeTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 89, 205, 4), )
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelTable.setStatus('current')
rlFipActiveFcoeTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 205, 4, 1), ).setIndexNames((0, "MARVELL-FIP-MIB", "rlFipActiveFcoeTunnelPort"), (0, "MARVELL-FIP-MIB", "rlFipActiveFcoeTunnelSrcMac"), (0, "MARVELL-FIP-MIB", "rlFipActiveFcoeTunnelDstMac"), (0, "MARVELL-FIP-MIB", "rlFipActiveFcoeTunnelSid"))
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelEntry.setStatus('current')
rlFipActiveFcoeTunnelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelPort.setStatus('current')
rlFipActiveFcoeTunnelSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelSrcMac.setStatus('current')
rlFipActiveFcoeTunnelDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 4, 1, 3), MacAddress())
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelDstMac.setStatus('current')
rlFipActiveFcoeTunnelSid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelSid.setStatus('current')
rlFipActiveFcoeTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelStatus.setStatus('current')
rlFipEnableScalar = MibScalar((1, 3, 6, 1, 4, 1, 89, 205, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFipEnableScalar.setStatus('current')
rlFipClearDynamicEntiesScalar = MibScalar((1, 3, 6, 1, 4, 1, 89, 205, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFipClearDynamicEntiesScalar.setStatus('current')
rlFipGlobalFcfFilteringEnableScalar = MibScalar((1, 3, 6, 1, 4, 1, 89, 205, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFipGlobalFcfFilteringEnableScalar.setStatus('current')
mibBuilder.exportSymbols("MARVELL-FIP-MIB", rlFipIfRowStatus=rlFipIfRowStatus, rlFipIfIndex=rlFipIfIndex, RlFipIfType=RlFipIfType, rlFipActiveFcoeTunnelStatus=rlFipActiveFcoeTunnelStatus, rlFipGlobalFcfListMac=rlFipGlobalFcfListMac, rlFipStaticFcoeTunnelDstMac=rlFipStaticFcoeTunnelDstMac, rlFipActiveFcoeTunnelDstMac=rlFipActiveFcoeTunnelDstMac, rlFipEnableScalar=rlFipEnableScalar, rlFipActiveFcoeTunnelPort=rlFipActiveFcoeTunnelPort, rlFipIfType=rlFipIfType, rlFipStaticFcoeTunnelSrcMac=rlFipStaticFcoeTunnelSrcMac, rlFipActiveFcoeTunnelEntry=rlFipActiveFcoeTunnelEntry, rlFipGlobalFcfListEntry=rlFipGlobalFcfListEntry, rlFipStaticFcoeTunnelPort=rlFipStaticFcoeTunnelPort, rlFipStaticFcoeTunnelEntry=rlFipStaticFcoeTunnelEntry, rlFipActiveFcoeTunnelTable=rlFipActiveFcoeTunnelTable, rlFipClearDynamicEntiesScalar=rlFipClearDynamicEntiesScalar, rlFipGlobalFcfListStatus=rlFipGlobalFcfListStatus, rlFipIfEntry=rlFipIfEntry, PYSNMP_MODULE_ID=rlFip, rlFipStaticFcoeTunnelTable=rlFipStaticFcoeTunnelTable, rlFipGlobalFcfFilteringEnableScalar=rlFipGlobalFcfFilteringEnableScalar, rlFipGlobalFcfListTable=rlFipGlobalFcfListTable, rlFipStaticFcoeTunnelStatus=rlFipStaticFcoeTunnelStatus, rlFip=rlFip, rlFipActiveFcoeTunnelSid=rlFipActiveFcoeTunnelSid, rlFipIfTable=rlFipIfTable, rlFipActiveFcoeTunnelSrcMac=rlFipActiveFcoeTunnelSrcMac)
