#
# PySNMP MIB module CISCO-WAN-CELL-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-CELL-EXT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:04:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
C3gServiceCapability, = mibBuilder.importSymbols("CISCO-WAN-3G-MIB", "C3gServiceCapability")
entPhysicalIndex, entPhysicalName = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entPhysicalName")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, Integer32, Counter64, Gauge32, IpAddress, ObjectIdentity, Bits, TimeTicks, MibIdentifier, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Counter64", "Gauge32", "IpAddress", "ObjectIdentity", "Bits", "TimeTicks", "MibIdentifier", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "Unsigned32")
TextualConvention, StorageType, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "StorageType", "DisplayString", "RowStatus")
ciscoWanCellExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 817))
ciscoWanCellExtMIB.setRevisions(('2014-03-05 00:00',))
if mibBuilder.loadTexts: ciscoWanCellExtMIB.setLastUpdated('201403050000Z')
if mibBuilder.loadTexts: ciscoWanCellExtMIB.setOrganization('Cisco Systems, Inc.')
ciscoWanCellExtMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 0))
ciscoWanCellExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 1))
ciscoWanCellExtMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 2))
ciscoWanCellExtLte = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1))
cwceLteRadio = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1))
cwceLteProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2))
class CiscoWanCellExtProtocolType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 1), ("ipv4", 2), ("ppp", 3), ("ipv6", 4), ("ipv4V6", 5))

class CiscoWanCellExtRsrp(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'

class CiscoWanCellExtRsrq(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

class CiscoWanCellExtCqiIndex(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'

class CiscoWanCellExtSNR(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

class CiscoWanCellExtSINR(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

cwceLteRadioTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1), )
if mibBuilder.loadTexts: cwceLteRadioTable.setStatus('current')
cwceLteRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cwceLteRadioEntry.setStatus('current')
cwceLteCurrRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 1), CiscoWanCellExtRsrp()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteCurrRsrp.setStatus('current')
cwceLteCurrRsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 2), CiscoWanCellExtRsrq()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteCurrRsrq.setStatus('current')
cwceLteCurrSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 3), CiscoWanCellExtSNR()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteCurrSnr.setStatus('current')
cwceLteCurrSinr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 4), CiscoWanCellExtSINR()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteCurrSinr.setStatus('current')
cwceLteCurrCqiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 5), CiscoWanCellExtCqiIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteCurrCqiIndex.setStatus('current')
cwceLteCurrOperatingBand = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteCurrOperatingBand.setStatus('current')
cwceLteNotifRsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 7), CiscoWanCellExtRsrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteNotifRsrp.setStatus('current')
cwceLteNotifRsrq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 8), CiscoWanCellExtRsrq()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteNotifRsrq.setStatus('current')
cwceLteRsrpOnsetNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 9), CiscoWanCellExtRsrp()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrpOnsetNotifThreshold.setStatus('current')
cwceLteRsrpAbateNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 10), CiscoWanCellExtRsrp()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrpAbateNotifThreshold.setStatus('current')
cwceLteRsrqOnsetNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 11), CiscoWanCellExtRsrq()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrqOnsetNotifThreshold.setStatus('current')
cwceLteRsrqAbateNotifThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 12), CiscoWanCellExtRsrq()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrqAbateNotifThreshold.setStatus('current')
cwceLteRsrpOnsetNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 13), C3gServiceCapability()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrpOnsetNotifFlag.setStatus('current')
cwceLteRsrpAbateNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 14), C3gServiceCapability()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrpAbateNotifFlag.setStatus('current')
cwceLteRsrqOnsetNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 15), C3gServiceCapability()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrqOnsetNotifFlag.setStatus('current')
cwceLteRsrqAbateNotifFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 1, 1, 16), C3gServiceCapability()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwceLteRsrqAbateNotifFlag.setStatus('current')
cwceLteRadioHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2))
cwceLteRadioHistoryRsrpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 1), )
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpTable.setStatus('current')
cwceLteRadioHistoryRsrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpEntry.setStatus('current')
cwceLteRadioHistoryRsrpPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpPerSecond.setStatus('current')
cwceLteRadioHistoryRsrpPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpPerMinute.setStatus('current')
cwceLteRadioHistoryRsrpPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(72, 72)).setFixedLength(72)).setUnits('-dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrpPerHour.setStatus('current')
cwceLteRadioHistoryRsrqTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 2), )
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqTable.setStatus('current')
cwceLteRadioHistoryRsrqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqEntry.setStatus('current')
cwceLteRadioHistoryRsrqPerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqPerSecond.setStatus('current')
cwceLteRadioHistoryRsrqPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(60, 60)).setFixedLength(60)).setUnits('-dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqPerMinute.setStatus('current')
cwceLteRadioHistoryRsrqPerHour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 1, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(72, 72)).setFixedLength(72)).setUnits('-dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteRadioHistoryRsrqPerHour.setStatus('current')
cwceLteIpv4AddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteIpv4AddrType.setStatus('current')
cwceLteIpv6AddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteIpv6AddrType.setStatus('current')
cwceLteProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3), )
if mibBuilder.loadTexts: cwceLteProfileTable.setStatus('current')
cwceLteProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileIndex"))
if mibBuilder.loadTexts: cwceLteProfileEntry.setStatus('current')
cwceLteProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cwceLteProfileIndex.setStatus('current')
cwceLteProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 2), CiscoWanCellExtProtocolType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileType.setStatus('current')
cwceLteProfileIPv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileIPv4Addr.setStatus('current')
cwceLteProfileIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileIPv6Addr.setStatus('current')
cwceLteProfileApn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileApn.setStatus('current')
cwceLteProfileApnAmbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileApnAmbr.setStatus('current')
cwceLteProfileStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileStorage.setStatus('current')
cwceLteProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwceLteProfileRowStatus.setStatus('current')
cwceLtePdnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4), )
if mibBuilder.loadTexts: cwceLtePdnTable.setStatus('current')
cwceLtePdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cwceLtePdnEntry.setStatus('current')
cwceLtePdnProfileUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnProfileUsed.setStatus('current')
cwceLtePdnConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnConnStatus.setStatus('current')
cwceLtePdnType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 4), CiscoWanCellExtProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnType.setStatus('current')
cwceLtePdnIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnIpv4Addr.setStatus('current')
cwceLtePdnIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnIpv6Addr.setStatus('current')
cwceLtePdnPriDnsIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnPriDnsIpv4Addr.setStatus('current')
cwceLtePdnSecDnsIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnSecDnsIpv4Addr.setStatus('current')
cwceLtePdnPriDnsIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnPriDnsIpv6Addr.setStatus('current')
cwceLtePdnSecDnsIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 4, 1, 10), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLtePdnSecDnsIpv6Addr.setStatus('current')
cwceLteEpsBearerQosTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5), )
if mibBuilder.loadTexts: cwceLteEpsBearerQosTable.setStatus('current')
cwceLteEpsBearerQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsBearerId"))
if mibBuilder.loadTexts: cwceLteEpsBearerQosEntry.setStatus('current')
cwceLteEpsBearerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cwceLteEpsBearerId.setStatus('current')
cwceLteEpsBearerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("gbr", 1), ("nonGbr", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsBearerType.setStatus('current')
cwceLteEpsQCI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsQCI.setStatus('current')
cwceLteEpsArp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsArp.setStatus('current')
cwceLteEpsBearerResType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("defaultBearer", 1), ("dedicatedBearer", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsBearerResType.setStatus('current')
cwceLteEpsGbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsGbr.setStatus('current')
cwceLteEpsMbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsMbr.setStatus('current')
cwceLteEpsAmbr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsAmbr.setStatus('current')
cwceLteEpsTotalBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 9), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsTotalBytesTx.setStatus('current')
cwceLteEpsTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 10), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsTotalBytesRx.setStatus('current')
cwceLteEpsPacketsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 11), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsPacketsTx.setStatus('current')
cwceLteEpsPacketsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 817, 1, 1, 2, 5, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cwceLteEpsPacketsRx.setStatus('current')
cwceLteRsrqOnsetNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 817, 0, 1)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqOnsetNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteNotifRsrq"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqOnsetNotifThreshold"))
if mibBuilder.loadTexts: cwceLteRsrqOnsetNotif.setStatus('current')
cwceLteRsrqAbateNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 817, 0, 2)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqAbateNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteNotifRsrq"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqAbateNotifThreshold"))
if mibBuilder.loadTexts: cwceLteRsrqAbateNotif.setStatus('current')
cwceLteRsrpOnsetNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 817, 0, 3)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpOnsetNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteNotifRsrp"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpOnsetNotifThreshold"))
if mibBuilder.loadTexts: cwceLteRsrpOnsetNotif.setStatus('current')
cwceLteRsrpAbateNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 817, 0, 4)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpAbateNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteNotifRsrp"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpAbateNotifThreshold"))
if mibBuilder.loadTexts: cwceLteRsrpAbateNotif.setStatus('current')
ciscoWanCellExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 2, 1))
ciscoWanCellExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 817, 2, 2))
ciscoWanCellExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 817, 2, 1, 1)).setObjects(("CISCO-WAN-CELL-EXT-MIB", "ciscoWanCellExtMIBNotificationGroup"), ("CISCO-WAN-CELL-EXT-MIB", "ciscoWanCellExtMIBLteObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCellExtMIBCompliance = ciscoWanCellExtMIBCompliance.setStatus('current')
ciscoWanCellExtMIBLteObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 817, 2, 2, 1)).setObjects(("CISCO-WAN-CELL-EXT-MIB", "cwceLteCurrRsrp"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteCurrRsrq"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteCurrSnr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteCurrSinr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteCurrCqiIndex"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteNotifRsrp"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteNotifRsrq"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpOnsetNotifThreshold"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpAbateNotifThreshold"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqOnsetNotifThreshold"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqAbateNotifThreshold"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpOnsetNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpAbateNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqOnsetNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqAbateNotifFlag"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteCurrOperatingBand"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRadioHistoryRsrpPerSecond"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRadioHistoryRsrpPerMinute"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRadioHistoryRsrpPerHour"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRadioHistoryRsrqPerSecond"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRadioHistoryRsrqPerMinute"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRadioHistoryRsrqPerHour"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteIpv4AddrType"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteIpv6AddrType"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileType"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileIPv4Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileIPv6Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileApn"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileApnAmbr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileStorage"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteProfileRowStatus"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnProfileUsed"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnConnStatus"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnType"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnIpv4Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnIpv6Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnPriDnsIpv4Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnSecDnsIpv4Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnPriDnsIpv6Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLtePdnSecDnsIpv6Addr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsBearerType"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsArp"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsQCI"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsBearerResType"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsGbr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsMbr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsAmbr"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsTotalBytesTx"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsTotalBytesRx"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsPacketsTx"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteEpsPacketsRx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCellExtMIBLteObjectGroup = ciscoWanCellExtMIBLteObjectGroup.setStatus('current')
ciscoWanCellExtMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 817, 2, 2, 2)).setObjects(("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqOnsetNotif"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrqAbateNotif"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpOnsetNotif"), ("CISCO-WAN-CELL-EXT-MIB", "cwceLteRsrpAbateNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCellExtMIBNotificationGroup = ciscoWanCellExtMIBNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-WAN-CELL-EXT-MIB", cwceLteEpsAmbr=cwceLteEpsAmbr, cwceLteEpsBearerId=cwceLteEpsBearerId, CiscoWanCellExtRsrq=CiscoWanCellExtRsrq, cwceLteRsrpOnsetNotif=cwceLteRsrpOnsetNotif, cwceLteProfileTable=cwceLteProfileTable, ciscoWanCellExtMIB=ciscoWanCellExtMIB, ciscoWanCellExtMIBCompliance=ciscoWanCellExtMIBCompliance, ciscoWanCellExtLte=ciscoWanCellExtLte, cwceLteRsrqOnsetNotif=cwceLteRsrqOnsetNotif, cwceLteCurrOperatingBand=cwceLteCurrOperatingBand, cwceLteRsrqOnsetNotifThreshold=cwceLteRsrqOnsetNotifThreshold, cwceLteRadioEntry=cwceLteRadioEntry, cwceLteRsrqAbateNotifThreshold=cwceLteRsrqAbateNotifThreshold, cwceLteRadioHistoryRsrqTable=cwceLteRadioHistoryRsrqTable, cwceLteRadioHistoryRsrpEntry=cwceLteRadioHistoryRsrpEntry, cwceLteProfileStorage=cwceLteProfileStorage, CiscoWanCellExtSINR=CiscoWanCellExtSINR, cwceLteNotifRsrp=cwceLteNotifRsrp, cwceLteNotifRsrq=cwceLteNotifRsrq, cwceLteEpsTotalBytesTx=cwceLteEpsTotalBytesTx, cwceLteCurrSinr=cwceLteCurrSinr, cwceLteProfileIPv6Addr=cwceLteProfileIPv6Addr, cwceLteEpsBearerQosEntry=cwceLteEpsBearerQosEntry, cwceLteEpsQCI=cwceLteEpsQCI, cwceLteProfileEntry=cwceLteProfileEntry, cwceLteEpsGbr=cwceLteEpsGbr, cwceLteRadioHistoryRsrpPerSecond=cwceLteRadioHistoryRsrpPerSecond, cwceLtePdnSecDnsIpv4Addr=cwceLtePdnSecDnsIpv4Addr, cwceLteProfileApn=cwceLteProfileApn, cwceLteEpsBearerQosTable=cwceLteEpsBearerQosTable, CiscoWanCellExtRsrp=CiscoWanCellExtRsrp, CiscoWanCellExtSNR=CiscoWanCellExtSNR, ciscoWanCellExtMIBGroups=ciscoWanCellExtMIBGroups, cwceLteRsrpAbateNotifFlag=cwceLteRsrpAbateNotifFlag, ciscoWanCellExtMIBConform=ciscoWanCellExtMIBConform, cwceLteRadioHistoryRsrqPerSecond=cwceLteRadioHistoryRsrqPerSecond, ciscoWanCellExtMIBLteObjectGroup=ciscoWanCellExtMIBLteObjectGroup, cwceLteIpv4AddrType=cwceLteIpv4AddrType, cwceLteRadioHistoryRsrqEntry=cwceLteRadioHistoryRsrqEntry, ciscoWanCellExtMIBNotifs=ciscoWanCellExtMIBNotifs, cwceLteRadioHistoryRsrpTable=cwceLteRadioHistoryRsrpTable, cwceLtePdnPriDnsIpv4Addr=cwceLtePdnPriDnsIpv4Addr, cwceLteProfileIndex=cwceLteProfileIndex, cwceLteRsrqAbateNotifFlag=cwceLteRsrqAbateNotifFlag, cwceLtePdnTable=cwceLtePdnTable, cwceLteRsrpOnsetNotifThreshold=cwceLteRsrpOnsetNotifThreshold, cwceLteRsrqOnsetNotifFlag=cwceLteRsrqOnsetNotifFlag, ciscoWanCellExtMIBObjects=ciscoWanCellExtMIBObjects, cwceLteProfileIPv4Addr=cwceLteProfileIPv4Addr, cwceLteProfileRowStatus=cwceLteProfileRowStatus, cwceLteRadioHistory=cwceLteRadioHistory, cwceLteCurrSnr=cwceLteCurrSnr, cwceLteRadioHistoryRsrqPerMinute=cwceLteRadioHistoryRsrqPerMinute, cwceLtePdnSecDnsIpv6Addr=cwceLtePdnSecDnsIpv6Addr, cwceLteRsrpAbateNotif=cwceLteRsrpAbateNotif, cwceLteProfileApnAmbr=cwceLteProfileApnAmbr, ciscoWanCellExtMIBNotificationGroup=ciscoWanCellExtMIBNotificationGroup, cwceLteEpsPacketsRx=cwceLteEpsPacketsRx, CiscoWanCellExtCqiIndex=CiscoWanCellExtCqiIndex, cwceLtePdnConnStatus=cwceLtePdnConnStatus, cwceLteEpsPacketsTx=cwceLteEpsPacketsTx, CiscoWanCellExtProtocolType=CiscoWanCellExtProtocolType, cwceLteEpsMbr=cwceLteEpsMbr, cwceLteCurrCqiIndex=cwceLteCurrCqiIndex, cwceLteRadioHistoryRsrpPerHour=cwceLteRadioHistoryRsrpPerHour, cwceLteRsrpOnsetNotifFlag=cwceLteRsrpOnsetNotifFlag, cwceLtePdnEntry=cwceLtePdnEntry, cwceLtePdnIpv4Addr=cwceLtePdnIpv4Addr, cwceLteEpsTotalBytesRx=cwceLteEpsTotalBytesRx, cwceLteCurrRsrq=cwceLteCurrRsrq, PYSNMP_MODULE_ID=ciscoWanCellExtMIB, cwceLteEpsBearerType=cwceLteEpsBearerType, cwceLteRadioHistoryRsrpPerMinute=cwceLteRadioHistoryRsrpPerMinute, cwceLtePdnType=cwceLtePdnType, cwceLtePdnPriDnsIpv6Addr=cwceLtePdnPriDnsIpv6Addr, ciscoWanCellExtMIBCompliances=ciscoWanCellExtMIBCompliances, cwceLteCurrRsrp=cwceLteCurrRsrp, cwceLteProfile=cwceLteProfile, cwceLteRsrqAbateNotif=cwceLteRsrqAbateNotif, cwceLteRsrpAbateNotifThreshold=cwceLteRsrpAbateNotifThreshold, cwceLteIpv6AddrType=cwceLteIpv6AddrType, cwceLtePdnProfileUsed=cwceLtePdnProfileUsed, cwceLtePdnIpv6Addr=cwceLtePdnIpv6Addr, cwceLteRadio=cwceLteRadio, cwceLteEpsArp=cwceLteEpsArp, cwceLteEpsBearerResType=cwceLteEpsBearerResType, cwceLteRadioHistoryRsrqPerHour=cwceLteRadioHistoryRsrqPerHour, cwceLteProfileType=cwceLteProfileType, cwceLteRadioTable=cwceLteRadioTable)
