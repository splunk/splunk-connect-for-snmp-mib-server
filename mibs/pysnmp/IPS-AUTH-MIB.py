#
# PySNMP MIB module IPS-AUTH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPS-AUTH-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:45:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, MibIdentifier, ModuleIdentity, NotificationType, TimeTicks, Gauge32, mib_2, Counter64, ObjectIdentity, Counter32, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "ModuleIdentity", "NotificationType", "TimeTicks", "Gauge32", "mib-2", "Counter64", "ObjectIdentity", "Counter32", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32")
AutonomousType, DisplayString, StorageType, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "DisplayString", "StorageType", "RowStatus", "TextualConvention")
ipsAuthMibModule = ModuleIdentity((1, 3, 6, 1, 2, 1, 141))
ipsAuthMibModule.setRevisions(('2006-05-22 00:00',))
if mibBuilder.loadTexts: ipsAuthMibModule.setLastUpdated('200605220000Z')
if mibBuilder.loadTexts: ipsAuthMibModule.setOrganization('IETF IPS Working Group')
ipsAuthNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 0))
ipsAuthObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1))
ipsAuthConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 2))
class IpsAuthAddress(TextualConvention, OctetString):
    reference = 'IANA-ADDRESS-FAMILY-NUMBERS-MIB; INET-ADDRESS-MIB (RFC 4001); FC-MGMT-MIB (RFC 4044).'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

ipsAuthDescriptors = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 1))
ipsAuthMethodTypes = ObjectIdentity((1, 3, 6, 1, 2, 1, 141, 1, 1, 1))
if mibBuilder.loadTexts: ipsAuthMethodTypes.setStatus('current')
ipsAuthMethodNone = ObjectIdentity((1, 3, 6, 1, 2, 1, 141, 1, 1, 1, 1))
if mibBuilder.loadTexts: ipsAuthMethodNone.setStatus('current')
ipsAuthMethodSrp = ObjectIdentity((1, 3, 6, 1, 2, 1, 141, 1, 1, 1, 2))
if mibBuilder.loadTexts: ipsAuthMethodSrp.setStatus('current')
ipsAuthMethodChap = ObjectIdentity((1, 3, 6, 1, 2, 1, 141, 1, 1, 1, 3))
if mibBuilder.loadTexts: ipsAuthMethodChap.setStatus('current')
ipsAuthMethodKerberos = ObjectIdentity((1, 3, 6, 1, 2, 1, 141, 1, 1, 1, 4))
if mibBuilder.loadTexts: ipsAuthMethodKerberos.setStatus('current')
ipsAuthInstance = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 2))
ipsAuthInstanceAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 2, 2), )
if mibBuilder.loadTexts: ipsAuthInstanceAttributesTable.setStatus('current')
ipsAuthInstanceAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 2, 2, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"))
if mibBuilder.loadTexts: ipsAuthInstanceAttributesEntry.setStatus('current')
ipsAuthInstIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ipsAuthInstIndex.setStatus('current')
ipsAuthInstDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 2, 2, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsAuthInstDescr.setStatus('current')
ipsAuthInstStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 2, 2, 1, 3), StorageType().clone('volatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipsAuthInstStorageType.setStatus('current')
ipsAuthIdentity = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 3))
ipsAuthIdentAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 3, 1), )
if mibBuilder.loadTexts: ipsAuthIdentAttributesTable.setStatus('current')
ipsAuthIdentAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 3, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"))
if mibBuilder.loadTexts: ipsAuthIdentAttributesEntry.setStatus('current')
ipsAuthIdentIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ipsAuthIdentIndex.setStatus('current')
ipsAuthIdentDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentDescription.setStatus('current')
ipsAuthIdentRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentRowStatus.setStatus('current')
ipsAuthIdentStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 3, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentStorageType.setStatus('current')
ipsAuthIdentityName = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 4))
ipsAuthIdentNameAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 4, 1), )
if mibBuilder.loadTexts: ipsAuthIdentNameAttributesTable.setStatus('current')
ipsAuthIdentNameAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 4, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentNameIndex"))
if mibBuilder.loadTexts: ipsAuthIdentNameAttributesEntry.setStatus('current')
ipsAuthIdentNameIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ipsAuthIdentNameIndex.setStatus('current')
ipsAuthIdentName = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 4, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentName.setStatus('current')
ipsAuthIdentNameRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 4, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentNameRowStatus.setStatus('current')
ipsAuthIdentNameStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 4, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentNameStorageType.setStatus('current')
ipsAuthIdentityAddress = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 5))
ipsAuthIdentAddrAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 5, 1), )
if mibBuilder.loadTexts: ipsAuthIdentAddrAttributesTable.setStatus('current')
ipsAuthIdentAddrAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentAddrIndex"))
if mibBuilder.loadTexts: ipsAuthIdentAddrAttributesEntry.setStatus('current')
ipsAuthIdentAddrIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ipsAuthIdentAddrIndex.setStatus('current')
ipsAuthIdentAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1, 2), AddressFamilyNumbers()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentAddrType.setStatus('current')
ipsAuthIdentAddrStart = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1, 3), IpsAuthAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentAddrStart.setStatus('current')
ipsAuthIdentAddrEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1, 4), IpsAuthAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentAddrEnd.setStatus('current')
ipsAuthIdentAddrRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentAddrRowStatus.setStatus('current')
ipsAuthIdentAddrStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 5, 1, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthIdentAddrStorageType.setStatus('current')
ipsAuthCredential = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 6))
ipsAuthCredentialAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 6, 1), )
if mibBuilder.loadTexts: ipsAuthCredentialAttributesTable.setStatus('current')
ipsAuthCredentialAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 6, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"), (0, "IPS-AUTH-MIB", "ipsAuthCredIndex"))
if mibBuilder.loadTexts: ipsAuthCredentialAttributesEntry.setStatus('current')
ipsAuthCredIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: ipsAuthCredIndex.setStatus('current')
ipsAuthCredAuthMethod = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 6, 1, 1, 2), AutonomousType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredAuthMethod.setStatus('current')
ipsAuthCredRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 6, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredRowStatus.setStatus('current')
ipsAuthCredStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 6, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredStorageType.setStatus('current')
ipsAuthCredChap = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 7))
ipsAuthCredChapAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 7, 1), )
if mibBuilder.loadTexts: ipsAuthCredChapAttributesTable.setStatus('current')
ipsAuthCredChapAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 7, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"), (0, "IPS-AUTH-MIB", "ipsAuthCredIndex"))
if mibBuilder.loadTexts: ipsAuthCredChapAttributesEntry.setStatus('current')
ipsAuthCredChapUserName = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 7, 1, 1, 1), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredChapUserName.setStatus('current')
ipsAuthCredChapRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 7, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredChapRowStatus.setStatus('current')
ipsAuthCredChapStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 7, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredChapStorageType.setStatus('current')
ipsAuthCredSrp = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 8))
ipsAuthCredSrpAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 8, 1), )
if mibBuilder.loadTexts: ipsAuthCredSrpAttributesTable.setStatus('current')
ipsAuthCredSrpAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 8, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"), (0, "IPS-AUTH-MIB", "ipsAuthCredIndex"))
if mibBuilder.loadTexts: ipsAuthCredSrpAttributesEntry.setStatus('current')
ipsAuthCredSrpUserName = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 8, 1, 1, 1), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredSrpUserName.setStatus('current')
ipsAuthCredSrpRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 8, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredSrpRowStatus.setStatus('current')
ipsAuthCredSrpStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 8, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredSrpStorageType.setStatus('current')
ipsAuthCredKerberos = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 1, 9))
ipsAuthCredKerbAttributesTable = MibTable((1, 3, 6, 1, 2, 1, 141, 1, 9, 1), )
if mibBuilder.loadTexts: ipsAuthCredKerbAttributesTable.setStatus('current')
ipsAuthCredKerbAttributesEntry = MibTableRow((1, 3, 6, 1, 2, 1, 141, 1, 9, 1, 1), ).setIndexNames((0, "IPS-AUTH-MIB", "ipsAuthInstIndex"), (0, "IPS-AUTH-MIB", "ipsAuthIdentIndex"), (0, "IPS-AUTH-MIB", "ipsAuthCredIndex"))
if mibBuilder.loadTexts: ipsAuthCredKerbAttributesEntry.setStatus('current')
ipsAuthCredKerbPrincipal = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 9, 1, 1, 1), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredKerbPrincipal.setStatus('current')
ipsAuthCredKerbRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 9, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredKerbRowStatus.setStatus('current')
ipsAuthCredKerbStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 141, 1, 9, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipsAuthCredKerbStorageType.setStatus('current')
ipsAuthCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 2, 1))
ipsAuthGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 141, 2, 2))
ipsAuthInstanceAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 1)).setObjects(("IPS-AUTH-MIB", "ipsAuthInstDescr"), ("IPS-AUTH-MIB", "ipsAuthInstStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthInstanceAttributesGroup = ipsAuthInstanceAttributesGroup.setStatus('current')
ipsAuthIdentAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 2)).setObjects(("IPS-AUTH-MIB", "ipsAuthIdentDescription"), ("IPS-AUTH-MIB", "ipsAuthIdentRowStatus"), ("IPS-AUTH-MIB", "ipsAuthIdentStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentAttributesGroup = ipsAuthIdentAttributesGroup.setStatus('current')
ipsAuthIdentNameAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 3)).setObjects(("IPS-AUTH-MIB", "ipsAuthIdentName"), ("IPS-AUTH-MIB", "ipsAuthIdentNameRowStatus"), ("IPS-AUTH-MIB", "ipsAuthIdentNameStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentNameAttributesGroup = ipsAuthIdentNameAttributesGroup.setStatus('current')
ipsAuthIdentAddrAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 4)).setObjects(("IPS-AUTH-MIB", "ipsAuthIdentAddrType"), ("IPS-AUTH-MIB", "ipsAuthIdentAddrStart"), ("IPS-AUTH-MIB", "ipsAuthIdentAddrEnd"), ("IPS-AUTH-MIB", "ipsAuthIdentAddrRowStatus"), ("IPS-AUTH-MIB", "ipsAuthIdentAddrStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentAddrAttributesGroup = ipsAuthIdentAddrAttributesGroup.setStatus('current')
ipsAuthIdentCredAttributesGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 5)).setObjects(("IPS-AUTH-MIB", "ipsAuthCredAuthMethod"), ("IPS-AUTH-MIB", "ipsAuthCredRowStatus"), ("IPS-AUTH-MIB", "ipsAuthCredStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentCredAttributesGroup = ipsAuthIdentCredAttributesGroup.setStatus('current')
ipsAuthIdentChapAttrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 6)).setObjects(("IPS-AUTH-MIB", "ipsAuthCredChapUserName"), ("IPS-AUTH-MIB", "ipsAuthCredChapRowStatus"), ("IPS-AUTH-MIB", "ipsAuthCredChapStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentChapAttrGroup = ipsAuthIdentChapAttrGroup.setStatus('current')
ipsAuthIdentSrpAttrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 7)).setObjects(("IPS-AUTH-MIB", "ipsAuthCredSrpUserName"), ("IPS-AUTH-MIB", "ipsAuthCredSrpRowStatus"), ("IPS-AUTH-MIB", "ipsAuthCredSrpStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentSrpAttrGroup = ipsAuthIdentSrpAttrGroup.setStatus('current')
ipsAuthIdentKerberosAttrGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 141, 2, 2, 8)).setObjects(("IPS-AUTH-MIB", "ipsAuthCredKerbPrincipal"), ("IPS-AUTH-MIB", "ipsAuthCredKerbRowStatus"), ("IPS-AUTH-MIB", "ipsAuthCredKerbStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthIdentKerberosAttrGroup = ipsAuthIdentKerberosAttrGroup.setStatus('current')
ipsAuthComplianceV1 = ModuleCompliance((1, 3, 6, 1, 2, 1, 141, 2, 1, 1)).setObjects(("IPS-AUTH-MIB", "ipsAuthInstanceAttributesGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentAttributesGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentNameAttributesGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentAddrAttributesGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentCredAttributesGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentChapAttrGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentSrpAttrGroup"), ("IPS-AUTH-MIB", "ipsAuthIdentKerberosAttrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipsAuthComplianceV1 = ipsAuthComplianceV1.setStatus('current')
mibBuilder.exportSymbols("IPS-AUTH-MIB", ipsAuthCredIndex=ipsAuthCredIndex, ipsAuthCompliances=ipsAuthCompliances, ipsAuthIdentAttributesGroup=ipsAuthIdentAttributesGroup, ipsAuthCredChapRowStatus=ipsAuthCredChapRowStatus, ipsAuthCredential=ipsAuthCredential, ipsAuthCredKerbAttributesTable=ipsAuthCredKerbAttributesTable, ipsAuthMethodNone=ipsAuthMethodNone, ipsAuthIdentNameRowStatus=ipsAuthIdentNameRowStatus, IpsAuthAddress=IpsAuthAddress, ipsAuthObjects=ipsAuthObjects, ipsAuthIdentAddrStorageType=ipsAuthIdentAddrStorageType, ipsAuthCredStorageType=ipsAuthCredStorageType, ipsAuthIdentityName=ipsAuthIdentityName, ipsAuthCredSrpUserName=ipsAuthCredSrpUserName, ipsAuthComplianceV1=ipsAuthComplianceV1, ipsAuthIdentAddrAttributesEntry=ipsAuthIdentAddrAttributesEntry, ipsAuthCredSrpAttributesEntry=ipsAuthCredSrpAttributesEntry, ipsAuthCredAuthMethod=ipsAuthCredAuthMethod, ipsAuthIdentChapAttrGroup=ipsAuthIdentChapAttrGroup, ipsAuthCredKerbStorageType=ipsAuthCredKerbStorageType, ipsAuthConformance=ipsAuthConformance, ipsAuthInstanceAttributesGroup=ipsAuthInstanceAttributesGroup, ipsAuthInstance=ipsAuthInstance, ipsAuthInstIndex=ipsAuthInstIndex, ipsAuthIdentStorageType=ipsAuthIdentStorageType, ipsAuthCredentialAttributesEntry=ipsAuthCredentialAttributesEntry, ipsAuthNotifications=ipsAuthNotifications, ipsAuthMethodChap=ipsAuthMethodChap, ipsAuthCredSrpRowStatus=ipsAuthCredSrpRowStatus, ipsAuthIdentAddrRowStatus=ipsAuthIdentAddrRowStatus, ipsAuthIdentityAddress=ipsAuthIdentityAddress, ipsAuthCredChapAttributesEntry=ipsAuthCredChapAttributesEntry, ipsAuthIdentAttributesEntry=ipsAuthIdentAttributesEntry, ipsAuthCredKerberos=ipsAuthCredKerberos, ipsAuthIdentCredAttributesGroup=ipsAuthIdentCredAttributesGroup, ipsAuthMethodTypes=ipsAuthMethodTypes, ipsAuthCredChapStorageType=ipsAuthCredChapStorageType, ipsAuthMethodKerberos=ipsAuthMethodKerberos, ipsAuthIdentNameAttributesTable=ipsAuthIdentNameAttributesTable, PYSNMP_MODULE_ID=ipsAuthMibModule, ipsAuthInstanceAttributesTable=ipsAuthInstanceAttributesTable, ipsAuthCredKerbAttributesEntry=ipsAuthCredKerbAttributesEntry, ipsAuthCredChapAttributesTable=ipsAuthCredChapAttributesTable, ipsAuthIdentAddrAttributesGroup=ipsAuthIdentAddrAttributesGroup, ipsAuthInstanceAttributesEntry=ipsAuthInstanceAttributesEntry, ipsAuthIdentAddrIndex=ipsAuthIdentAddrIndex, ipsAuthCredSrpStorageType=ipsAuthCredSrpStorageType, ipsAuthIdentity=ipsAuthIdentity, ipsAuthInstStorageType=ipsAuthInstStorageType, ipsAuthIdentNameIndex=ipsAuthIdentNameIndex, ipsAuthIdentNameStorageType=ipsAuthIdentNameStorageType, ipsAuthIdentSrpAttrGroup=ipsAuthIdentSrpAttrGroup, ipsAuthIdentAttributesTable=ipsAuthIdentAttributesTable, ipsAuthIdentDescription=ipsAuthIdentDescription, ipsAuthIdentNameAttributesEntry=ipsAuthIdentNameAttributesEntry, ipsAuthGroups=ipsAuthGroups, ipsAuthCredentialAttributesTable=ipsAuthCredentialAttributesTable, ipsAuthIdentRowStatus=ipsAuthIdentRowStatus, ipsAuthMethodSrp=ipsAuthMethodSrp, ipsAuthInstDescr=ipsAuthInstDescr, ipsAuthCredKerbRowStatus=ipsAuthCredKerbRowStatus, ipsAuthIdentIndex=ipsAuthIdentIndex, ipsAuthCredRowStatus=ipsAuthCredRowStatus, ipsAuthCredSrp=ipsAuthCredSrp, ipsAuthCredSrpAttributesTable=ipsAuthCredSrpAttributesTable, ipsAuthIdentNameAttributesGroup=ipsAuthIdentNameAttributesGroup, ipsAuthMibModule=ipsAuthMibModule, ipsAuthIdentName=ipsAuthIdentName, ipsAuthCredChapUserName=ipsAuthCredChapUserName, ipsAuthCredChap=ipsAuthCredChap, ipsAuthIdentAddrStart=ipsAuthIdentAddrStart, ipsAuthDescriptors=ipsAuthDescriptors, ipsAuthCredKerbPrincipal=ipsAuthCredKerbPrincipal, ipsAuthIdentKerberosAttrGroup=ipsAuthIdentKerberosAttrGroup, ipsAuthIdentAddrEnd=ipsAuthIdentAddrEnd, ipsAuthIdentAddrAttributesTable=ipsAuthIdentAddrAttributesTable, ipsAuthIdentAddrType=ipsAuthIdentAddrType)
