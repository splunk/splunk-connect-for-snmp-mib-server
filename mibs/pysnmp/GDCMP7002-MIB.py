#
# PySNMP MIB module GDCMP7002-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCMP7002-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, Bits, Unsigned32, TimeTicks, ObjectIdentity, iso, Counter32, enterprises, Integer32, NotificationType, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "Bits", "Unsigned32", "TimeTicks", "ObjectIdentity", "iso", "Counter32", "enterprises", "Integer32", "NotificationType", "IpAddress", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
dsx1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6))
mp7002System = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6))
mp7002Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9))
mp7002Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6, 1))
mp7002Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6, 2))
mp7002Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6, 3))
mp7002Diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6, 4))
mp7002Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6, 5))
mp7002SysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6, 7))
mp7002MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002MIBversion.setStatus('mandatory')
mp7002VersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 2), )
if mibBuilder.loadTexts: mp7002VersionTable.setStatus('mandatory')
mp7002VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 2, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002VersionIndex"))
if mibBuilder.loadTexts: mp7002VersionEntry.setStatus('mandatory')
mp7002VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002VersionIndex.setStatus('mandatory')
mp7002FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FirmwareRev.setStatus('mandatory')
mp7002ModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002ModelNumber.setStatus('mandatory')
mp7002E1x = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002E1x.setStatus('mandatory')
mp7002MaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1), )
if mibBuilder.loadTexts: mp7002MaintenanceTable.setStatus('mandatory')
mp7002MaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002MaintenanceLineIndex"))
if mibBuilder.loadTexts: mp7002MaintenanceEntry.setStatus('mandatory')
mp7002MaintenanceLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002MaintenanceLineIndex.setStatus('mandatory')
mp7002SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002SoftReset.setStatus('mandatory')
mp7002SysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002SysUpTime.setStatus('mandatory')
mp7002DefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("factoryDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002DefaultInit.setStatus('mandatory')
mp7002ResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002ResetStats.setStatus('mandatory')
mp7002LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002LedStatus.setStatus('mandatory')
mp7002E1Circuit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002E1Circuit.setStatus('mandatory')
mp7002E1XCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002E1XCircuit.setStatus('mandatory')
mp7002TSBundle1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TSBundle1Name.setStatus('mandatory')
mp7002TSBundle2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TSBundle2Name.setStatus('mandatory')
mp7002SetRealTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002SetRealTime.setStatus('mandatory')
mp7002AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002AlarmStatus.setStatus('mandatory')
mp7002SystemTimingGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("clk8khz", 2), ("clk4mhz", 3), ("clk8khzand4mhz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002SystemTimingGenStatus.setStatus('mandatory')
mp7002FarEndResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002FarEndResetStats.setStatus('mandatory')
mp7002NearEndStatLastInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndStatLastInitialized.setStatus('mandatory')
mp7002FarEndStatLastInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndStatLastInitialized.setStatus('mandatory')
mp7002ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1), )
if mibBuilder.loadTexts: mp7002ConfigTable.setStatus('mandatory')
mp7002ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002ConfigIndex"))
if mibBuilder.loadTexts: mp7002ConfigEntry.setStatus('mandatory')
mp7002ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002ConfigIndex.setStatus('mandatory')
mp7002InterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("diu", 1), ("niu", 2), ("notAssigned", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002InterfaceType.setStatus('mandatory')
mp7002RcvrRange = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002RcvrRange.setStatus('mandatory')
mp7002TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("recovered", 2), ("internal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TransmitClockSource.setStatus('mandatory')
mp7002FallbackClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("recovered", 2), ("internal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002FallbackClockSource.setStatus('mandatory')
mp7002FacilityDataLink = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("notActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002FacilityDataLink.setStatus('mandatory')
mp7002NearEndValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndValidIntervals.setStatus('mandatory')
mp7002FarEndValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndValidIntervals.setStatus('mandatory')
mp7002NetworkConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onLine", 1), ("standBy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002NetworkConnection.setStatus('mandatory')
mp7002Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cCSwithoutCRC4", 1), ("pCS0withoutCRC4", 2), ("pCS1withoutCRC4", 3), ("cCSwithCRC4", 4), ("pCS0withCRC4", 5), ("pCS1withCRC4", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002Framing.setStatus('mandatory')
mp7002LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("hdb3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002LineCoding.setStatus('mandatory')
mp7002SysTimingTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 1), )
if mibBuilder.loadTexts: mp7002SysTimingTable.setStatus('mandatory')
mp7002SysTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 1, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002SysTimingIndex"))
if mibBuilder.loadTexts: mp7002SysTimingEntry.setStatus('mandatory')
mp7002SysTimingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002SysTimingIndex.setStatus('mandatory')
mp7002SysTimingGen = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002SysTimingGen.setStatus('mandatory')
mp7002DCCConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 2), )
if mibBuilder.loadTexts: mp7002DCCConfigurationTable.setStatus('mandatory')
mp7002DCCConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 2, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002DCCConfigurationIndex"))
if mibBuilder.loadTexts: mp7002DCCConfigurationEntry.setStatus('mandatory')
mp7002DCCConfigurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002DCCConfigurationIndex.setStatus('mandatory')
mp7002TimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TimeSlot.setStatus('mandatory')
mp7002Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("kbps8", 1), ("kbps56", 2), ("kbps64", 3), ("notAssigned", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002Bandwidth.setStatus('mandatory')
mp7002HighwayAssignTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2), )
if mibBuilder.loadTexts: mp7002HighwayAssignTable.setStatus('mandatory')
mp7002HighwayAssignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002HighwayAssignIndex"), (0, "GDCMP7002-MIB", "mp7002TimeSlotBundle"))
if mibBuilder.loadTexts: mp7002HighwayAssignEntry.setStatus('mandatory')
mp7002HighwayAssignIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002HighwayAssignIndex.setStatus('mandatory')
mp7002TimeSlotBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bundle1", 1), ("bundle2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002TimeSlotBundle.setStatus('mandatory')
mp7002StartTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002StartTimeSlot.setStatus('mandatory')
mp7002NumberOfTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002NumberOfTimeSlots.setStatus('mandatory')
mp7002BundleDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notAssigned", 1), ("highway1", 2), ("highway2", 3), ("highway3", 4), ("highway4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002BundleDestination.setStatus('mandatory')
mp7002ExecuteAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002ExecuteAssign.setStatus('mandatory')
mp7002DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1), )
if mibBuilder.loadTexts: mp7002DiagTable.setStatus('mandatory')
mp7002DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002DiagIndex"))
if mibBuilder.loadTexts: mp7002DiagEntry.setStatus('mandatory')
mp7002DiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002DiagIndex.setStatus('mandatory')
mp7002TestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noCode", 1), ("pat511", 2), ("pat2047", 3), ("pat1in4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TestPattern.setStatus('obsolete')
mp7002DiagConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLoop", 1), ("lineLoopback", 2), ("payloadLoopback", 3), ("localTest", 4), ("unitTest", 5), ("patGenOn", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002DiagConfig.setStatus('mandatory')
mp7002TestLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testTime10Mins", 1), ("testTime20Mins", 2), ("noLimit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TestLimit.setStatus('mandatory')
mp7002TestExecutionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("notInTest", 1), ("testInProgress", 2), ("testCompleted", 4), ("testCompletedNotInTest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002TestExecutionStatus.setStatus('mandatory')
mp7002TestExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002TestExceptions.setStatus('mandatory')
mp7002TestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002TestResults.setStatus('obsolete')
mp7002ResetTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002ResetTestResults.setStatus('obsolete')
mp7002NearEndCurrent15MinTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 1), )
if mibBuilder.loadTexts: mp7002NearEndCurrent15MinTable.setStatus('mandatory')
mp7002NearEndCurrent15MinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 1, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002NearEndCurrent15MinIndex"))
if mibBuilder.loadTexts: mp7002NearEndCurrent15MinEntry.setStatus('mandatory')
mp7002NearEndCurrent15MinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndCurrent15MinIndex.setStatus('mandatory')
mp7002NearEndCurrent15MinStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndCurrent15MinStat.setStatus('mandatory')
mp7002NearEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 2), )
if mibBuilder.loadTexts: mp7002NearEndIntervalTable.setStatus('mandatory')
mp7002NearEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 2, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002NearEndIntervalIndex"), (0, "GDCMP7002-MIB", "mp7002NearEndIntervalNumber"))
if mibBuilder.loadTexts: mp7002NearEndIntervalEntry.setStatus('mandatory')
mp7002NearEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndIntervalIndex.setStatus('mandatory')
mp7002NearEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndIntervalNumber.setStatus('mandatory')
mp7002NearEndIntervalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndIntervalStat.setStatus('mandatory')
mp7002NearEndCurrent24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 3), )
if mibBuilder.loadTexts: mp7002NearEndCurrent24HrTable.setStatus('mandatory')
mp7002NearEndCurrent24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 3, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002NearEndCurrent24HrIndex"))
if mibBuilder.loadTexts: mp7002NearEndCurrent24HrEntry.setStatus('mandatory')
mp7002NearEndCurrent24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndCurrent24HrIndex.setStatus('mandatory')
mp7002NearEndCurrent24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndCurrent24HrStat.setStatus('mandatory')
mp7002NearEndRecent24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 4), )
if mibBuilder.loadTexts: mp7002NearEndRecent24HrTable.setStatus('mandatory')
mp7002NearEndRecent24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 4, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002NearEndRecent24HrIndex"))
if mibBuilder.loadTexts: mp7002NearEndRecent24HrEntry.setStatus('mandatory')
mp7002NearEndRecent24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndRecent24HrIndex.setStatus('mandatory')
mp7002NearEndRecent24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndRecent24HrStat.setStatus('mandatory')
mp7002FarEndCurrent15MinTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 5), )
if mibBuilder.loadTexts: mp7002FarEndCurrent15MinTable.setStatus('mandatory')
mp7002FarEndCurrent15MinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 5, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002FarEndCurrent15MinIndex"))
if mibBuilder.loadTexts: mp7002FarEndCurrent15MinEntry.setStatus('mandatory')
mp7002FarEndCurrent15MinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndCurrent15MinIndex.setStatus('mandatory')
mp7002FarEndCurrent15MinStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndCurrent15MinStat.setStatus('mandatory')
mp7002FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 6), )
if mibBuilder.loadTexts: mp7002FarEndIntervalTable.setStatus('mandatory')
mp7002FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 6, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002FarEndIntervalIndex"), (0, "GDCMP7002-MIB", "mp7002FarEndIntervalNumber"))
if mibBuilder.loadTexts: mp7002FarEndIntervalEntry.setStatus('mandatory')
mp7002FarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndIntervalIndex.setStatus('mandatory')
mp7002FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndIntervalNumber.setStatus('mandatory')
mp7002FarEndIntervalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndIntervalStat.setStatus('mandatory')
mp7002CurrentFarEnd24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 7), )
if mibBuilder.loadTexts: mp7002CurrentFarEnd24HrTable.setStatus('mandatory')
mp7002CurrentFarEnd24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 7, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002CurrentFarEnd24HrIndex"))
if mibBuilder.loadTexts: mp7002CurrentFarEnd24HrEntry.setStatus('mandatory')
mp7002CurrentFarEnd24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 7, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002CurrentFarEnd24HrIndex.setStatus('mandatory')
mp7002CurrentFarEnd24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002CurrentFarEnd24HrStat.setStatus('mandatory')
mp7002RecentFarEnd24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 8), )
if mibBuilder.loadTexts: mp7002RecentFarEnd24HrTable.setStatus('mandatory')
mp7002RecentFarEnd24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 8, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002RecentFarEnd24HrIndex"))
if mibBuilder.loadTexts: mp7002RecentFarEnd24HrEntry.setStatus('mandatory')
mp7002RecentFarEnd24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 8, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002RecentFarEnd24HrIndex.setStatus('mandatory')
mp7002RecentFarEnd24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002RecentFarEnd24HrStat.setStatus('mandatory')
mp7002UnavailableTimeRegTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 9), )
if mibBuilder.loadTexts: mp7002UnavailableTimeRegTable.setStatus('mandatory')
mp7002UnavailableTimeRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 9, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002UnavailableTimeRegIndex"), (0, "GDCMP7002-MIB", "mp7002UnavailableTimeRegNumber"))
if mibBuilder.loadTexts: mp7002UnavailableTimeRegEntry.setStatus('mandatory')
mp7002UnavailableTimeRegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 9, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002UnavailableTimeRegIndex.setStatus('mandatory')
mp7002UnavailableTimeRegNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002UnavailableTimeRegNumber.setStatus('mandatory')
mp7002UnavailableTimeRegStart = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002UnavailableTimeRegStart.setStatus('mandatory')
mp7002UnavailableTimeRegStop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002UnavailableTimeRegStop.setStatus('mandatory')
mp7002FarEndUnavailableTimeRegTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 10), )
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegTable.setStatus('mandatory')
mp7002FarEndUnavailableTimeRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 10, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002FarEndUnavailableTimeRegIndex"), (0, "GDCMP7002-MIB", "mp7002FarEndUnavailableTimeRegNumber"))
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegEntry.setStatus('mandatory')
mp7002FarEndUnavailableTimeRegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 10, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegIndex.setStatus('mandatory')
mp7002FarEndUnavailableTimeRegNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegNumber.setStatus('mandatory')
mp7002FarEndUnavailableTimeRegStart = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegStart.setStatus('mandatory')
mp7002FarEndUnavailableTimeRegStop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegStop.setStatus('mandatory')
mp7002AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1))
mp7002NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 1))
mp7002DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 2))
mp7002PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 3))
mp7002NvRamCorrupt = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 4))
mp7002UnitFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 5))
mp7002TimingLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 6))
mp7002LCV = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 7))
mp7002LossOfSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 8))
mp7002LossOfFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 9))
mp7002AlarmIndSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 10))
mp7002NEES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 11))
mp7002NEBBE = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 12))
mp7002NESES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 13))
mp7002NEUAS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 14))
mp7002FEES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 15))
mp7002FEBBE = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 16))
mp7002FESES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 17))
mp7002FEUAS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 18))
mp7002RAI = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 19))
mp7002NearEndAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 9, 2), )
if mibBuilder.loadTexts: mp7002NearEndAlarmConfigTable.setStatus('mandatory')
mp7002NearEndAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 9, 2, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002NearEndAlarmConfigIndex"), (0, "GDCMP7002-MIB", "mp7002NearEndAlarmConfigIdentifier"))
if mibBuilder.loadTexts: mp7002NearEndAlarmConfigEntry.setStatus('mandatory')
mp7002NearEndAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndAlarmConfigIndex.setStatus('mandatory')
mp7002NearEndAlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndAlarmConfigIdentifier.setStatus('mandatory')
mp7002NearEndAlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("last1sec", 2), ("last10sec", 3), ("last30sec", 4), ("last1min", 5), ("last15min", 6), ("last1hr", 7), ("last24hr", 8), ("infinite", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002NearEndAlarmCountWindow.setStatus('mandatory')
mp7002NearEndAlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("thresGT1", 1), ("thresGT3", 2), ("thresGT10", 3), ("thresGT100", 4), ("thresGT1000", 5), ("thresGT10000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002NearEndAlarmCountThreshold.setStatus('mandatory')
mp7002FarEndAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 9, 3), )
if mibBuilder.loadTexts: mp7002FarEndAlarmConfigTable.setStatus('mandatory')
mp7002FarEndAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 9, 3, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002FarEndAlarmConfigIndex"), (0, "GDCMP7002-MIB", "mp7002FarEndAlarmConfigIdentifier"))
if mibBuilder.loadTexts: mp7002FarEndAlarmConfigEntry.setStatus('mandatory')
mp7002FarEndAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndAlarmConfigIndex.setStatus('mandatory')
mp7002FarEndAlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndAlarmConfigIdentifier.setStatus('mandatory')
mp7002FarEndAlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("last1sec", 2), ("last10sec", 3), ("last30sec", 4), ("last1min", 5), ("last15min", 6), ("last1hr", 7), ("last24hr", 8), ("infinite", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002FarEndAlarmCountWindow.setStatus('mandatory')
mp7002FarEndAlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("thresGT1", 1), ("thresGT3", 2), ("thresGT10", 3), ("thresGT100", 4), ("thresGT1000", 5), ("thresGT10000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002FarEndAlarmCountThreshold.setStatus('mandatory')
mp7002LocalAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 9, 4), )
if mibBuilder.loadTexts: mp7002LocalAlarmConfigTable.setStatus('mandatory')
mp7002LocalAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002LocalAlarmConfigIndex"))
if mibBuilder.loadTexts: mp7002LocalAlarmConfigEntry.setStatus('mandatory')
mp7002LocalAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002LocalAlarmConfigIndex.setStatus('mandatory')
mp7002UASNE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002UASNE.setStatus('mandatory')
mp7002SESNE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002SESNE.setStatus('mandatory')
mp7002BBENE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002BBENE.setStatus('mandatory')
mp7002ESNE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002ESNE.setStatus('mandatory')
mp7002UASFE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002UASFE.setStatus('mandatory')
mp7002SESFE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002SESFE.setStatus('mandatory')
mp7002BBEFE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002BBEFE.setStatus('mandatory')
mp7002ESFE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002ESFE.setStatus('mandatory')
mp7002LOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002LOS.setStatus('mandatory')
mp7002LOF = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002LOF.setStatus('mandatory')
mp7002AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002AIS.setStatus('mandatory')
mp7002TmgLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TmgLoss.setStatus('mandatory')
mp7002LCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002LCVs.setStatus('mandatory')
mp7002NtwkRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002NtwkRAI.setStatus('mandatory')
mibBuilder.exportSymbols("GDCMP7002-MIB", mp7002VersionTable=mp7002VersionTable, mp7002ESFE=mp7002ESFE, mp7002NearEndCurrent24HrEntry=mp7002NearEndCurrent24HrEntry, mp7002BBEFE=mp7002BBEFE, mp7002FEUAS=mp7002FEUAS, mp7002SESNE=mp7002SESNE, mp7002LineCoding=mp7002LineCoding, mp7002FarEndAlarmCountWindow=mp7002FarEndAlarmCountWindow, mp7002DiagConfig=mp7002DiagConfig, mp7002RcvrRange=mp7002RcvrRange, mp7002FarEndAlarmConfigIndex=mp7002FarEndAlarmConfigIndex, mp7002NearEndRecent24HrTable=mp7002NearEndRecent24HrTable, mp7002SoftReset=mp7002SoftReset, mp7002StartTimeSlot=mp7002StartTimeSlot, mp7002DiagTable=mp7002DiagTable, mp7002LCVs=mp7002LCVs, mp7002FarEndCurrent15MinEntry=mp7002FarEndCurrent15MinEntry, mp7002SESFE=mp7002SESFE, mp7002TmgLoss=mp7002TmgLoss, mp7002NearEndCurrent15MinEntry=mp7002NearEndCurrent15MinEntry, mp7002ResetTestResults=mp7002ResetTestResults, mp7002TestLimit=mp7002TestLimit, mp7002NearEndIntervalTable=mp7002NearEndIntervalTable, mp7002UASNE=mp7002UASNE, mp7002FarEndIntervalNumber=mp7002FarEndIntervalNumber, mp7002FirmwareRev=mp7002FirmwareRev, mp7002TestExceptions=mp7002TestExceptions, mp7002NtwkRAI=mp7002NtwkRAI, mp7002NearEndCurrent24HrStat=mp7002NearEndCurrent24HrStat, mp7002NvRamCorrupt=mp7002NvRamCorrupt, mp7002SysTimingEntry=mp7002SysTimingEntry, mp7002FarEndIntervalTable=mp7002FarEndIntervalTable, mp7002SysUpTime=mp7002SysUpTime, mp7002PowerUpAlm=mp7002PowerUpAlm, mp7002TestExecutionStatus=mp7002TestExecutionStatus, mp7002ModelNumber=mp7002ModelNumber, mp7002SetRealTime=mp7002SetRealTime, mp7002FarEndCurrent15MinStat=mp7002FarEndCurrent15MinStat, mp7002LCV=mp7002LCV, mp7002Diagnostics=mp7002Diagnostics, mp7002NearEndCurrent15MinTable=mp7002NearEndCurrent15MinTable, mp7002NoResponseAlm=mp7002NoResponseAlm, mp7002UASFE=mp7002UASFE, mp7002NearEndIntervalNumber=mp7002NearEndIntervalNumber, mp7002SysTimingGen=mp7002SysTimingGen, mp7002DiagIndex=mp7002DiagIndex, mp7002NearEndRecent24HrEntry=mp7002NearEndRecent24HrEntry, mp7002FarEndUnavailableTimeRegStart=mp7002FarEndUnavailableTimeRegStart, mp7002UnitFailure=mp7002UnitFailure, mp7002SysConfig=mp7002SysConfig, mp7002InterfaceType=mp7002InterfaceType, mp7002FarEndCurrent15MinTable=mp7002FarEndCurrent15MinTable, mp7002TimeSlotBundle=mp7002TimeSlotBundle, mp7002CurrentFarEnd24HrIndex=mp7002CurrentFarEnd24HrIndex, mp7002UnavailableTimeRegStart=mp7002UnavailableTimeRegStart, mp7002DefaultInit=mp7002DefaultInit, mp7002FarEndUnavailableTimeRegNumber=mp7002FarEndUnavailableTimeRegNumber, mp7002VersionIndex=mp7002VersionIndex, mp7002TimingLoss=mp7002TimingLoss, mp7002FarEndAlarmConfigTable=mp7002FarEndAlarmConfigTable, mp7002HighwayAssignEntry=mp7002HighwayAssignEntry, mp7002NEBBE=mp7002NEBBE, mp7002LocalAlarmConfigTable=mp7002LocalAlarmConfigTable, mp7002FallbackClockSource=mp7002FallbackClockSource, mp7002RecentFarEnd24HrEntry=mp7002RecentFarEnd24HrEntry, mp7002TestResults=mp7002TestResults, mp7002NearEndCurrent15MinIndex=mp7002NearEndCurrent15MinIndex, mp7002Version=mp7002Version, mp7002UnavailableTimeRegIndex=mp7002UnavailableTimeRegIndex, mp7002FarEndResetStats=mp7002FarEndResetStats, mp7002CurrentFarEnd24HrTable=mp7002CurrentFarEnd24HrTable, mp7002Configuration=mp7002Configuration, mp7002MIBversion=mp7002MIBversion, mp7002RecentFarEnd24HrTable=mp7002RecentFarEnd24HrTable, mp7002NEUAS=mp7002NEUAS, mp7002LossOfFrame=mp7002LossOfFrame, dsx1=dsx1, mp7002HighwayAssignIndex=mp7002HighwayAssignIndex, mp7002E1Circuit=mp7002E1Circuit, mp7002LocalAlarmConfigEntry=mp7002LocalAlarmConfigEntry, mp7002NearEndAlarmCountThreshold=mp7002NearEndAlarmCountThreshold, mp7002RecentFarEnd24HrStat=mp7002RecentFarEnd24HrStat, mp7002NearEndStatLastInitialized=mp7002NearEndStatLastInitialized, mp7002Bandwidth=mp7002Bandwidth, mp7002LOS=mp7002LOS, mp7002NearEndAlarmConfigIndex=mp7002NearEndAlarmConfigIndex, mp7002SysTimingTable=mp7002SysTimingTable, mp7002FarEndIntervalEntry=mp7002FarEndIntervalEntry, mp7002LOF=mp7002LOF, mp7002System=mp7002System, mp7002NESES=mp7002NESES, mp7002NearEndIntervalEntry=mp7002NearEndIntervalEntry, mp7002UnavailableTimeRegTable=mp7002UnavailableTimeRegTable, mp7002DiagRxErrAlm=mp7002DiagRxErrAlm, mp7002FarEndIntervalIndex=mp7002FarEndIntervalIndex, mp7002FarEndUnavailableTimeRegTable=mp7002FarEndUnavailableTimeRegTable, mp7002NearEndAlarmCountWindow=mp7002NearEndAlarmCountWindow, mp7002Maintenance=mp7002Maintenance, mp7002AIS=mp7002AIS, mp7002TestPattern=mp7002TestPattern, mp7002FarEndIntervalStat=mp7002FarEndIntervalStat, mp7002UnavailableTimeRegNumber=mp7002UnavailableTimeRegNumber, mp7002Alarms=mp7002Alarms, mp7002NearEndIntervalStat=mp7002NearEndIntervalStat, mp7002ResetStats=mp7002ResetStats, mp7002ConfigEntry=mp7002ConfigEntry, mp7002BundleDestination=mp7002BundleDestination, mp7002UnavailableTimeRegStop=mp7002UnavailableTimeRegStop, mp7002ESNE=mp7002ESNE, mp7002NearEndCurrent24HrIndex=mp7002NearEndCurrent24HrIndex, mp7002NearEndAlarmConfigTable=mp7002NearEndAlarmConfigTable, mp7002FarEndStatLastInitialized=mp7002FarEndStatLastInitialized, mp7002NumberOfTimeSlots=mp7002NumberOfTimeSlots, mp7002E1XCircuit=mp7002E1XCircuit, mp7002CurrentFarEnd24HrEntry=mp7002CurrentFarEnd24HrEntry, mp7002AlarmData=mp7002AlarmData, mp7002LedStatus=mp7002LedStatus, mp7002NearEndIntervalIndex=mp7002NearEndIntervalIndex, mp7002DCCConfigurationEntry=mp7002DCCConfigurationEntry, mp7002TransmitClockSource=mp7002TransmitClockSource, mp7002TimeSlot=mp7002TimeSlot, mp7002FarEndUnavailableTimeRegIndex=mp7002FarEndUnavailableTimeRegIndex, mp7002E1x=mp7002E1x, mp7002FarEndUnavailableTimeRegStop=mp7002FarEndUnavailableTimeRegStop, mp7002FarEndUnavailableTimeRegEntry=mp7002FarEndUnavailableTimeRegEntry, mp7002MaintenanceEntry=mp7002MaintenanceEntry, mp7002AlarmIndSignal=mp7002AlarmIndSignal, mp7002FarEndCurrent15MinIndex=mp7002FarEndCurrent15MinIndex, mp7002FEBBE=mp7002FEBBE, mp7002FarEndAlarmConfigEntry=mp7002FarEndAlarmConfigEntry, mp7002NearEndAlarmConfigIdentifier=mp7002NearEndAlarmConfigIdentifier, mp7002Framing=mp7002Framing, mp7002HighwayAssignTable=mp7002HighwayAssignTable, mp7002MaintenanceLineIndex=mp7002MaintenanceLineIndex, mp7002FacilityDataLink=mp7002FacilityDataLink, mp7002Performance=mp7002Performance, mp7002ConfigIndex=mp7002ConfigIndex, mp7002ConfigTable=mp7002ConfigTable, mp7002DCCConfigurationIndex=mp7002DCCConfigurationIndex, mp7002NearEndAlarmConfigEntry=mp7002NearEndAlarmConfigEntry, mp7002SystemTimingGenStatus=mp7002SystemTimingGenStatus, mp7002NEES=mp7002NEES, mp7002NearEndValidIntervals=mp7002NearEndValidIntervals, mp7002FarEndAlarmConfigIdentifier=mp7002FarEndAlarmConfigIdentifier, mp7002DiagEntry=mp7002DiagEntry, mp7002DCCConfigurationTable=mp7002DCCConfigurationTable, mp7002VersionEntry=mp7002VersionEntry, mp7002CurrentFarEnd24HrStat=mp7002CurrentFarEnd24HrStat, mp7002ExecuteAssign=mp7002ExecuteAssign, mp7002FEES=mp7002FEES, mp7002NearEndCurrent24HrTable=mp7002NearEndCurrent24HrTable, gdc=gdc, mp7002FarEndAlarmCountThreshold=mp7002FarEndAlarmCountThreshold, mp7002NearEndRecent24HrIndex=mp7002NearEndRecent24HrIndex, mp7002TSBundle1Name=mp7002TSBundle1Name, mp7002NetworkConnection=mp7002NetworkConnection, mp7002NearEndCurrent15MinStat=mp7002NearEndCurrent15MinStat, mp7002BBENE=mp7002BBENE, mp7002UnavailableTimeRegEntry=mp7002UnavailableTimeRegEntry, mp7002RAI=mp7002RAI, mp7002LocalAlarmConfigIndex=mp7002LocalAlarmConfigIndex, mp7002FarEndValidIntervals=mp7002FarEndValidIntervals, mp7002MaintenanceTable=mp7002MaintenanceTable, mp7002LossOfSignal=mp7002LossOfSignal, mp7002NearEndRecent24HrStat=mp7002NearEndRecent24HrStat, mp7002TSBundle2Name=mp7002TSBundle2Name, mp7002AlarmStatus=mp7002AlarmStatus, mp7002SysTimingIndex=mp7002SysTimingIndex, mp7002RecentFarEnd24HrIndex=mp7002RecentFarEnd24HrIndex, mp7002FESES=mp7002FESES)
