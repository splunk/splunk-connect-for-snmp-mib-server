#
# PySNMP MIB module CISCO-PFR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-PFR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:52:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
CiscoPdProtocolIndex, = mibBuilder.importSymbols("CISCO-NBAR-PROTOCOL-DISCOVERY-MIB", "CiscoPdProtocolIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPort, InterfaceIndexOrZero = mibBuilder.importSymbols("CISCO-TC", "CiscoPort", "InterfaceIndexOrZero")
DscpOrAny, = mibBuilder.importSymbols("DIFFSERV-DSCP-TC", "DscpOrAny")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Counter32, iso, Gauge32, ObjectIdentity, TimeTicks, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Unsigned32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "iso", "Gauge32", "ObjectIdentity", "TimeTicks", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Unsigned32", "IpAddress", "Bits")
DisplayString, TimeStamp, RowStatus, TextualConvention, StorageType, TimeInterval, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "RowStatus", "TextualConvention", "StorageType", "TimeInterval", "TruthValue", "DateAndTime")
ciscoPfrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 772))
ciscoPfrMIB.setRevisions(('2012-11-13 00:00', '2011-04-04 00:00',))
if mibBuilder.loadTexts: ciscoPfrMIB.setLastUpdated('201211130000Z')
if mibBuilder.loadTexts: ciscoPfrMIB.setOrganization('Cisco Systems, Inc.')
class PfrMetricPolicyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("relative", 1), ("threshold", 2))

class PfrLastUncontrolReason(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))
    namedValues = NamedValues(("none", 1), ("activatingUnsedFcdTgt", 2), ("ifaceDown", 3), ("newProbeTargetAssigned", 4), ("newTargetAssigned", 5), ("borderDown", 6), ("uncontrolNonOptimizedPfx", 7), ("recontrolNull0Pfx", 8), ("recontrolSinkHolePfx", 9), ("modeRouteChange", 10), ("pfxEnabled", 11), ("uncontrolModeMonitorChange", 12), ("insideEnabled", 13), ("forcedNextHop", 14), ("forwardToNull0", 15), ("clearOnePfx", 16), ("clearOneTc", 17), ("grantUpdated", 18), ("tcInFastMode", 19), ("pbrBRTopologyChange", 20), ("pfrReqNotMet", 21), ("probeFrequencyChange", 22), ("fcdTgtAssRemMod", 23), ("policyChangedAddedNewFcdProbeTgt", 24), ("usingFcdTgtNow", 25), ("firstTargetWithDscpAdded", 26), ("usingLmNow", 27), ("lastTargetWithDscpRemoved", 28), ("couldntMonitor", 29), ("couldntControl", 30), ("applControlOnBrFailed", 31), ("allProtoCouldNtControl", 32), ("excludePfxFailed", 33), ("ipflowRestFailed", 34), ("couldntExclude", 35), ("dontDowngradeAllEntrances", 36), ("maxDownGrade", 37), ("cantSelectEntrances", 38), ("unhandledOopReasonInChooseExit", 39), ("oopModeSelectExitGood", 40), ("couldntFindBestExitInAllLinkGrps", 41), ("couldntFindBestExit", 42), ("failedToControlRoute", 43), ("endOfProbing", 44), ("retryForcedNextHop", 45), ("noStatusInPfxTimeout", 46), ("couldntChooseExitInPfxTimeout", 47), ("inconsistentView", 48), ("unableToSendControlMsg", 49), ("nbarIdStateUpdated", 50), ("controledExitIsNotCurrent", 51), ("exitMisMatch", 52), ("newExitWhileInpolicy", 53), ("unknownExit", 54), ("controlledExitIsNotCurrForUpd", 55), ("couldntControlPasPfxInSpecMode", 56), ("remoteStatsNotFound", 57), ("nbarInternalIfAddedRemoved", 58), ("noPassiveData", 59), ("probeNumPktsChanged", 60), ("last", 61))

class PfRMasterControllerIndex(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class PfrBorderRouterIndex(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class PfrExitIndex(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class PfrMapIndex(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class PfrMapPolicyIndex(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class PfrMapIndexOrZero(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class PfrLearnListIndex(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class PfrLearnListIndexOrZero(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class PfrResolvePolicyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 0), ("cost", 1), ("delay", 2), ("jitter", 3), ("loss", 4), ("mos", 5), ("range", 6), ("utilization", 7))

ciscoPfrMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 772, 0))
ciscoPfrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 772, 1))
ciscoPfrMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 772, 2))
cpfrMCTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1), )
if mibBuilder.loadTexts: cpfrMCTable.setStatus('current')
cpfrMCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrMCIndex"))
if mibBuilder.loadTexts: cpfrMCEntry.setStatus('current')
cpfrMCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 1), PfRMasterControllerIndex())
if mibBuilder.loadTexts: cpfrMCIndex.setStatus('current')
cpfrMCStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCStorageType.setStatus('current')
cpfrMCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCRowStatus.setStatus('current')
cpfrMCMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 4), PfrMapIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCMapIndex.setStatus('current')
cpfrMCKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCKeepAliveTimer.setStatus('current')
cpfrMCMaxPrefixTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5000)).setUnits('prefixes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCMaxPrefixTotal.setStatus('current')
cpfrMCMaxPrefixLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(2500)).setUnits('prefixes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCMaxPrefixLearn.setStatus('current')
cpfrMCEntranceLinksMaxUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCEntranceLinksMaxUtil.setStatus('current')
cpfrMCExitLinksMaxUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCExitLinksMaxUtil.setStatus('current')
cpfrMCPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 10), InetPortNumber().clone(3949)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCPortNumber.setStatus('current')
cpfrMCTracerouteProbeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(10000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCTracerouteProbeDelay.setStatus('current')
cpfrMCRsvpPostDialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCRsvpPostDialDelay.setStatus('current')
cpfrMCRsvpSignalingRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1)).setUnits('retries').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCRsvpSignalingRetries.setStatus('current')
cpfrMCNetflowExporter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 14), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCNetflowExporter.setStatus('current')
cpfrMCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCAdminStatus.setStatus('current')
cpfrMCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrMCOperStatus.setStatus('current')
cpfrMCConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("closed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrMCConnStatus.setStatus('current')
cpfrMCNumofBorderRouters = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 18), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('border routers').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrMCNumofBorderRouters.setStatus('current')
cpfrMCNumofExits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 19), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('exits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrMCNumofExits.setStatus('current')
cpfrMCLearnState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("started", 2), ("writing", 3), ("sleep", 4), ("retry", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrMCLearnState.setStatus('current')
cpfrMCLearnStateTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 21), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrMCLearnStateTimeRemain.setStatus('current')
cpfrMCPrefixCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 22), Counter32()).setUnits('prefixes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrMCPrefixCount.setStatus('current')
cpfrMCPrefixLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 23), Counter32()).setUnits('prefixes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrMCPrefixLearned.setStatus('current')
cpfrMCPrefixConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrMCPrefixConfigured.setStatus('current')
cpfrMCPbrMet = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrMCPbrMet.setStatus('current')
cpfrMCLoggingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCLoggingAdminStatus.setStatus('current')
cpfrMCControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("observe", 1), ("control", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCControlMode.setStatus('current')
cpfrMCClear = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("clearAll", 2), ("clearAllPrefixes", 3), ("clearAllBorders", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCClear.setStatus('current')
cpfrMCLastClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 29), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrMCLastClearTime.setStatus('current')
cpfrMCNotifisControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMCNotifisControl.setStatus('current')
cpfrMCChangeConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cpfrMCLoggingAdminStatus", 1), ("cpfrMCAdminStatus", 2), ("cpfrMCControlMode", 3), ("cpfrMCClear", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpfrMCChangeConfigType.setStatus('current')
cpfrMCChangeConfigValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 1, 1, 32), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cpfrMCChangeConfigValue.setStatus('current')
cpfrMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2), )
if mibBuilder.loadTexts: cpfrMapTable.setStatus('current')
cpfrMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrMapIndex"), (0, "CISCO-PFR-MIB", "cpfrMapPolicyIndex"))
if mibBuilder.loadTexts: cpfrMapEntry.setStatus('current')
cpfrMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 1), PfrMapIndex())
if mibBuilder.loadTexts: cpfrMapIndex.setStatus('current')
cpfrMapPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 2), PfrMapPolicyIndex())
if mibBuilder.loadTexts: cpfrMapPolicyIndex.setStatus('current')
cpfrMapStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapStorageType.setStatus('current')
cpfrMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapRowStatus.setStatus('current')
cpfrMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapName.setStatus('current')
cpfrMapBackoffMinTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(300)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapBackoffMinTimer.setStatus('current')
cpfrMapBackoffMaxTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(3000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapBackoffMaxTimer.setStatus('current')
cpfrMapBackoffStepTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(300)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapBackoffStepTimer.setStatus('current')
cpfrMapDelayType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 9), PfrMetricPolicyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapDelayType.setStatus('current')
cpfrMapDelayRelativePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(500)).setUnits('tenths of percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapDelayRelativePercent.setStatus('current')
cpfrMapDelayThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapDelayThresholdMax.setStatus('current')
cpfrMapHolddownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(300)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapHolddownTimer.setStatus('current')
cpfrMapPrefixForwardInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 13), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapPrefixForwardInterface.setStatus('current')
cpfrMapJitterThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(30)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapJitterThresholdMax.setStatus('current')
cpfrMapLinkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 15), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapLinkGroupName.setStatus('current')
cpfrMapFallbackLinkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 16), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapFallbackLinkGroupName.setStatus('current')
cpfrMapLossType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 17), PfrMetricPolicyType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapLossType.setStatus('current')
cpfrMapLossRelativeAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(100)).setUnits('tenths of percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapLossRelativeAvg.setStatus('current')
cpfrMapLossThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('packets-per-million').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapLossThresholdMax.setStatus('current')
cpfrMapModeMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("activeThroughput", 2), ("both", 3), ("fast", 4), ("passive", 5))).clone('both')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapModeMonitor.setStatus('current')
cpfrMapModeRouteOpts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("control", 1), ("observe", 2), ("metric", 3))).clone('observe')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapModeRouteOpts.setStatus('current')
cpfrMapRouteMetricBgpLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapRouteMetricBgpLocalPref.setStatus('current')
cpfrMapRouteMetricEigrpTagCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapRouteMetricEigrpTagCommunity.setStatus('current')
cpfrMapRouteMetricStaticTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapRouteMetricStaticTag.setStatus('current')
cpfrMapModeSelectExitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("best", 1), ("good", 2))).clone('good')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapModeSelectExitType.setStatus('current')
cpfrMapMOSThresholdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(360)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapMOSThresholdMin.setStatus('current')
cpfrMapMOSPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapMOSPercentage.setStatus('current')
cpfrMapNextHopAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 28), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapNextHopAddressType.setStatus('current')
cpfrMapNextHopAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 29), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapNextHopAddress.setStatus('current')
cpfrMapPeriodicTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapPeriodicTimer.setStatus('current')
cpfrMapActiveProbeFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(60)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapActiveProbeFrequency.setStatus('current')
cpfrMapActiveProbePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(100)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapActiveProbePackets.setStatus('current')
cpfrMapTracerouteReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 33), Bits().clone(namedValues=NamedValues(("none", 0), ("delay", 1), ("loss", 2), ("unreachable", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapTracerouteReporting.setStatus('current')
cpfrMapUnreachableType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 34), PfrMetricPolicyType().clone('relative')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapUnreachableType.setStatus('current')
cpfrMapUnreachableRelativeAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 35), Unsigned32().clone(50)).setUnits('tenths of percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapUnreachableRelativeAvg.setStatus('current')
cpfrMapUnreachableThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('flows per million').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapUnreachableThresholdMax.setStatus('current')
cpfrMapRoundRobinResolver = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapRoundRobinResolver.setStatus('current')
cpfrMapEventNotifCtrlType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 38), PfrMetricPolicyType().clone('relative')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapEventNotifCtrlType.setStatus('current')
cpfrMapEventNotifCtrlThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrMapEventNotifCtrlThreshold.setStatus('current')
cpfrMapEventTCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 2, 1, 40), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMapEventTCCount.setStatus('current')
cpfrMatchTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 3), )
if mibBuilder.loadTexts: cpfrMatchTable.setStatus('current')
cpfrMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 3, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrMapIndex"), (0, "CISCO-PFR-MIB", "cpfrMapPolicyIndex"))
if mibBuilder.loadTexts: cpfrMatchEntry.setStatus('current')
cpfrMatchValid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 3, 1, 1), Bits().clone(namedValues=NamedValues(("accessList", 0), ("prefixList", 1), ("learn", 2), ("trafficClassACL", 3), ("nbarApplicationList", 4), ("trafficClassPfx", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMatchValid.setStatus('current')
cpfrMatchAddrAccessList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 3, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMatchAddrAccessList.setStatus('current')
cpfrMatchAddrPrefixList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 3, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMatchAddrPrefixList.setStatus('current')
cpfrMatchAddrPrefixInside = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMatchAddrPrefixInside.setStatus('current')
cpfrMatchLearnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("delay", 1), ("inside", 2), ("throughput", 3), ("list", 4))).clone('throughput')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMatchLearnMode.setStatus('current')
cpfrMatchLearnListName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 3, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMatchLearnListName.setStatus('current')
cpfrMatchTCNbarListName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 3, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMatchTCNbarListName.setStatus('current')
cpfrMatchTCNbarApplPfxList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 3, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMatchTCNbarApplPfxList.setStatus('current')
cpfrMatchTCPfxInside = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrMatchTCPfxInside.setStatus('current')
cpfrResolveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 4), )
if mibBuilder.loadTexts: cpfrResolveTable.setStatus('current')
cpfrResolveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 4, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrResolveIndex"))
if mibBuilder.loadTexts: cpfrResolveEntry.setStatus('current')
cpfrResolveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cpfrResolveIndex.setStatus('current')
cpfrResolveStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 4, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrResolveStorageType.setStatus('current')
cpfrResolveRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrResolveRowStatus.setStatus('current')
cpfrResolvePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrResolvePriority.setStatus('current')
cpfrResolvePolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 4, 1, 5), PfrResolvePolicyType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrResolvePolicyType.setStatus('current')
cpfrResolveVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrResolveVariance.setStatus('current')
cpfrResolveMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 4, 1, 7), PfrMapIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrResolveMapIndex.setStatus('current')
cpfrResolveMapPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 4, 1, 8), PfrMapPolicyIndex()).setUnits('0').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrResolveMapPolicyIndex.setStatus('current')
cpfrLearnTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5), )
if mibBuilder.loadTexts: cpfrLearnTable.setStatus('current')
cpfrLearnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrMCIndex"))
if mibBuilder.loadTexts: cpfrLearnEntry.setStatus('current')
cpfrLearnAggregationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bgp", 1), ("nonBgp", 2), ("prefixLength", 3))).clone('prefixLength')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnAggregationType.setStatus('current')
cpfrLearnAggregationPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(24)).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnAggregationPrefixLen.setStatus('current')
cpfrLearnMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5, 1, 3), Bits().clone(namedValues=NamedValues(("delay", 0), ("throughput", 1), ("insideBgp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnMethod.setStatus('current')
cpfrLearnExpireType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("session", 1), ("time", 2))).clone('time')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnExpireType.setStatus('current')
cpfrLearnExpireSessionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('monitoring periods').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnExpireSessionNum.setStatus('current')
cpfrLearnExpireTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(720)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnExpireTime.setStatus('current')
cpfrLearnMonitorPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(5)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnMonitorPeriod.setStatus('current')
cpfrLearnPeriodInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(120)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnPeriodInterval.setStatus('current')
cpfrLearnPrefixesNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(1000)).setUnits('prefixes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnPrefixesNumber.setStatus('current')
cpfrLearnAggAccesslistName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnAggAccesslistName.setStatus('current')
cpfrLearnFilterAccessListName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 5, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnFilterAccessListName.setStatus('current')
cpfrLearnListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6), )
if mibBuilder.loadTexts: cpfrLearnListTable.setStatus('current')
cpfrLearnListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrMCIndex"), (0, "CISCO-PFR-MIB", "cpfrLearnListIndex"))
if mibBuilder.loadTexts: cpfrLearnListEntry.setStatus('current')
cpfrLearnListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6, 1, 1), PfrLearnListIndex())
if mibBuilder.loadTexts: cpfrLearnListIndex.setStatus('current')
cpfrLearnListStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnListStorageType.setStatus('current')
cpfrLearnListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnListRowStatus.setStatus('current')
cpfrLearnListReferenceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnListReferenceName.setStatus('current')
cpfrLearnListSequenceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnListSequenceNum.setStatus('current')
cpfrLearnListMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6, 1, 6), Bits().clone(namedValues=NamedValues(("delay", 0), ("throughput", 1), ("rsvp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnListMethod.setStatus('current')
cpfrLearnListAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6, 1, 7), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnListAclName.setStatus('current')
cpfrLearnListPfxName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6, 1, 8), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnListPfxName.setStatus('current')
cpfrLearnListPfxInside = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnListPfxInside.setStatus('current')
cpfrLearnListNbarAppl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6, 1, 10), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnListNbarAppl.setStatus('current')
cpfrLearnListFilterPfxName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 6, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLearnListFilterPfxName.setStatus('current')
cpfrActiveProbeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7), )
if mibBuilder.loadTexts: cpfrActiveProbeTable.setStatus('current')
cpfrActiveProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrActiveProbeIndex"))
if mibBuilder.loadTexts: cpfrActiveProbeEntry.setStatus('current')
cpfrActiveProbeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cpfrActiveProbeIndex.setStatus('current')
cpfrActiveProbeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrActiveProbeStorageType.setStatus('current')
cpfrActiveProbeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrActiveProbeRowStatus.setStatus('current')
cpfrActiveProbeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("echo", 1), ("jitter", 2), ("tcpConn", 3), ("udpEcho", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrActiveProbeType.setStatus('current')
cpfrActiveProbeTargetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrActiveProbeTargetAddressType.setStatus('current')
cpfrActiveProbeTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrActiveProbeTargetAddress.setStatus('current')
cpfrActiveProbeTargetPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 7), CiscoPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrActiveProbeTargetPortNumber.setStatus('current')
cpfrActiveProbePfrMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 8), PfrMapIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrActiveProbePfrMapIndex.setStatus('current')
cpfrActiveProbeDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrActiveProbeDscpValue.setStatus('current')
cpfrActiveProbeCodecName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("g711alaw", 1), ("g711ulaw", 2), ("g729a", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrActiveProbeCodecName.setStatus('current')
cpfrActiveProbeMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 11), PfrMapIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrActiveProbeMapIndex.setStatus('current')
cpfrActiveProbeMapPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 12), PfrMapIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrActiveProbeMapPolicyIndex.setStatus('current')
cpfrActiveProbeAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("assigned", 1), ("unassigned", 2), ("forced", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrActiveProbeAdminStatus.setStatus('current')
cpfrActiveProbeOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("notRunning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrActiveProbeOperStatus.setStatus('current')
cpfrActiveProbeAssignedPfxAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrActiveProbeAssignedPfxAddressType.setStatus('current')
cpfrActiveProbeAssignedPfxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrActiveProbeAssignedPfxAddress.setStatus('current')
cpfrActiveProbeAssignedPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrActiveProbeAssignedPfxLen.setStatus('current')
cpfrActiveProbeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learned", 1), ("configured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrActiveProbeMethod.setStatus('current')
cpfrBRTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8), )
if mibBuilder.loadTexts: cpfrBRTable.setStatus('current')
cpfrBREntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrMCIndex"), (0, "CISCO-PFR-MIB", "cpfrBRIndex"))
if mibBuilder.loadTexts: cpfrBREntry.setStatus('current')
cpfrBRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8, 1, 1), PfrBorderRouterIndex())
if mibBuilder.loadTexts: cpfrBRIndex.setStatus('current')
cpfrBRStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrBRStorageType.setStatus('current')
cpfrBRRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrBRRowStatus.setStatus('current')
cpfrBRAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8, 1, 4), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrBRAddressType.setStatus('current')
cpfrBRAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrBRAddress.setStatus('current')
cpfrBRKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrBRKeyName.setStatus('current')
cpfrBROperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrBROperStatus.setStatus('current')
cpfrBRConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrBRConnStatus.setStatus('current')
cpfrBRUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrBRUpTime.setStatus('current')
cpfrBRConnFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("versionMismatch", 1), ("none", 2), ("authFailure", 3), ("socketError", 4), ("timerExpired", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrBRConnFailureReason.setStatus('current')
cpfrBRAuthFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrBRAuthFailCount.setStatus('current')
cpfrExitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9), )
if mibBuilder.loadTexts: cpfrExitTable.setStatus('current')
cpfrExitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrMCIndex"), (0, "CISCO-PFR-MIB", "cpfrBRIndex"), (0, "CISCO-PFR-MIB", "cpfrExitIndex"))
if mibBuilder.loadTexts: cpfrExitEntry.setStatus('current')
cpfrExitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 1), PfrExitIndex())
if mibBuilder.loadTexts: cpfrExitIndex.setStatus('current')
cpfrExitStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitStorageType.setStatus('current')
cpfrExitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitRowStatus.setStatus('current')
cpfrExitName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitName.setStatus('current')
cpfrExitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2))).clone('external')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitType.setStatus('current')
cpfrDowngradeBgpCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrDowngradeBgpCommunity.setStatus('current')
cpfrExitMaxUtilRxType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 7), PfrMetricPolicyType().clone('relative')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitMaxUtilRxType.setStatus('current')
cpfrExitMaxUtilRxAbsolute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitMaxUtilRxAbsolute.setStatus('current')
cpfrExitMaxUtilRxPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitMaxUtilRxPercentage.setStatus('current')
cpfrExitMaxUtilTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 10), PfrMetricPolicyType().clone('relative')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitMaxUtilTxType.setStatus('current')
cpfrExitMaxUtilTxAbsolute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitMaxUtilTxAbsolute.setStatus('current')
cpfrExitMaxUtilTxPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitMaxUtilTxPercentage.setStatus('current')
cpfrExitCostCalcMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("combined", 1), ("separate", 2), ("sum", 3))).clone('combined')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostCalcMethod.setStatus('current')
cpfrExitCostDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("daily", 1), ("monthly", 2))).clone('monthly')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostDiscard.setStatus('current')
cpfrExitCostDiscardType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("percent", 2))).clone('absolute')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostDiscardType.setStatus('current')
cpfrExitCostDiscardAbsolute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('samples').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostDiscardAbsolute.setStatus('current')
cpfrExitCostDiscardPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostDiscardPercent.setStatus('current')
cpfrExitCostEndDayOfMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostEndDayOfMonth.setStatus('current')
cpfrExitCostEndOffsetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("positive", 1), ("negative", 2))).clone('positive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostEndOffsetType.setStatus('current')
cpfrExitCostEndOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 20), TimeInterval()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostEndOffset.setStatus('current')
cpfrExitCostFixedFeeCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('dollars').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostFixedFeeCost.setStatus('current')
cpfrExitCostNickName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 22), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostNickName.setStatus('current')
cpfrExitCostSamplingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostSamplingPeriod.setStatus('current')
cpfrExitCostRollupPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostRollupPeriod.setStatus('current')
cpfrExitCostSummerTimeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 25), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostSummerTimeStart.setStatus('current')
cpfrExitCostSummerTimeOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostSummerTimeOffset.setStatus('current')
cpfrExitCostSummerTimeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 27), DateAndTime()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostSummerTimeEnd.setStatus('current')
cpfrExitCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 28), CounterBasedGauge64()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitCapacity.setStatus('current')
cpfrExitRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 29), CounterBasedGauge64()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRxBandwidth.setStatus('current')
cpfrExitTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 30), CounterBasedGauge64()).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitTxBandwidth.setStatus('current')
cpfrExitTxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 31), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitTxLoad.setStatus('current')
cpfrExitRxLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 32), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRxLoad.setStatus('current')
cpfrExitNickName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 33), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitNickName.setStatus('current')
cpfrExitCost1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 34), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('dollars').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitCost1.setStatus('current')
cpfrExitSustainedUtil1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 35), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitSustainedUtil1.setStatus('current')
cpfrExitCost2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 36), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('dollars').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitCost2.setStatus('current')
cpfrExitSustainedUtil2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 37), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitSustainedUtil2.setStatus('current')
cpfrExitCost3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 38), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('dollars').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitCost3.setStatus('current')
cpfrExitSustainedUtil3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 39), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitSustainedUtil3.setStatus('current')
cpfrExitRollupTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 40), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRollupTotal.setStatus('current')
cpfrExitRollupDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 41), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRollupDiscard.setStatus('current')
cpfrExitRollupLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 42), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRollupLeft.setStatus('current')
cpfrExitRollupCollected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 43), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRollupCollected.setStatus('current')
cpfrExitRollupMomTgtUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 44), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRollupMomTgtUtil.setStatus('current')
cpfrExitRollupStartingTgtUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 45), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRollupStartingTgtUtil.setStatus('current')
cpfrExitRollupCurrentTgtUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 46), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRollupCurrentTgtUtil.setStatus('current')
cpfrExitRollupCumRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRollupCumRxBytes.setStatus('current')
cpfrExitRollupCumTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRollupCumTxBytes.setStatus('current')
cpfrExitRollupTimeRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 49), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRollupTimeRemain.setStatus('current')
cpfrExitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitOperStatus.setStatus('current')
cpfrExitRsvpBandwidthPool = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 9, 1, 51), CounterBasedGauge64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrExitRsvpBandwidthPool.setStatus('current')
cpfrExitCostTierTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 10), )
if mibBuilder.loadTexts: cpfrExitCostTierTable.setStatus('current')
cpfrExitCostTierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 10, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrMCIndex"), (0, "CISCO-PFR-MIB", "cpfrBRIndex"), (0, "CISCO-PFR-MIB", "cpfrExitIndex"), (0, "CISCO-PFR-MIB", "cpfrExitCostTierIndex"))
if mibBuilder.loadTexts: cpfrExitCostTierEntry.setStatus('current')
cpfrExitCostTierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: cpfrExitCostTierIndex.setStatus('current')
cpfrExitCostTierStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 10, 1, 2), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostTierStorageType.setStatus('current')
cpfrExitCostTierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostTierRowStatus.setStatus('current')
cpfrExitCostTierFee = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrExitCostTierFee.setStatus('current')
cpfrTrafficClassTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11), )
if mibBuilder.loadTexts: cpfrTrafficClassTable.setStatus('current')
cpfrTrafficClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrMCIndex"), (0, "CISCO-PFR-MIB", "cpfrTrafficClassIndex"))
if mibBuilder.loadTexts: cpfrTrafficClassEntry.setStatus('current')
cpfrTrafficClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cpfrTrafficClassIndex.setStatus('current')
cpfrTCBRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 2), PfrBorderRouterIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCBRIndex.setStatus('current')
cpfrTCBRExitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 3), PfrExitIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCBRExitIndex.setStatus('current')
cpfrTCMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 4), PfrMapIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMapIndex.setStatus('current')
cpfrTCMapPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 5), PfrMapPolicyIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMapPolicyIndex.setStatus('current')
cpfrTrafficClassValid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 6), Bits().clone(namedValues=NamedValues(("source", 0), ("destination", 1), ("sourcePort", 2), ("destinationPort", 3), ("dscp", 4), ("protocol", 5), ("nbar", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTrafficClassValid.setStatus('current')
cpfrTCSrcPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSrcPrefixType.setStatus('current')
cpfrTCSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSrcPrefix.setStatus('current')
cpfrTCSrcPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSrcPrefixLen.setStatus('current')
cpfrTCSrcMinPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 10), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSrcMinPort.setStatus('current')
cpfrTCSrcMaxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 11), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSrcMaxPort.setStatus('current')
cpfrTCDstPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCDstPrefixType.setStatus('current')
cpfrTCDstPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCDstPrefix.setStatus('current')
cpfrTCDstPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCDstPrefixLen.setStatus('current')
cpfrTCDstMinPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 15), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCDstMinPort.setStatus('current')
cpfrTCDstMaxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 16), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCDstMaxPort.setStatus('current')
cpfrTCDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 17), DscpOrAny().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCDscpValue.setStatus('current')
cpfrTCProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("eigrp", 2), ("ribpbr", 3), ("bgp", 4), ("pbr", 5), ("cce", 6), ("unknown", 7)))).setUnits('bgp').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCProtocol.setStatus('current')
cpfrTCNbarApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 11, 1, 19), CiscoPdProtocolIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCNbarApplication.setStatus('current')
cpfrTrafficClassStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12), )
if mibBuilder.loadTexts: cpfrTrafficClassStatusTable.setStatus('current')
cpfrTrafficClassStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrMCIndex"), (0, "CISCO-PFR-MIB", "cpfrTrafficClassIndex"))
if mibBuilder.loadTexts: cpfrTrafficClassStatusEntry.setStatus('current')
cpfrTCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("default", 1), ("choose", 2), ("holddown", 3), ("inpolicy", 4), ("oopolicy", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCStatus.setStatus('current')
cpfrTCSType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("learned", 1), ("configured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSType.setStatus('current')
cpfrTCSLearnListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12, 1, 3), PfrLearnListIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSLearnListIndex.setStatus('current')
cpfrTCSTimeOnCurrExit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSTimeOnCurrExit.setStatus('current')
cpfrTCSControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("controlled", 1), ("uncontrolled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSControlState.setStatus('current')
cpfrTCSControlBy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("static", 1), ("eigrp", 2), ("ribpbr", 3), ("bgp", 4), ("pbr", 5), ("cce", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSControlBy.setStatus('current')
cpfrTCSTimeRemainCurrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSTimeRemainCurrState.setStatus('current')
cpfrTCSLastOOPEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSLastOOPEventTime.setStatus('current')
cpfrTCSLastOOPReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("delayOOPPassiveMode", 1), ("lossOOPPassiveMode", 2), ("unreachableOOPPassiveMode", 3), ("delayOOPActiveMode", 4), ("lossOOPActiveMode", 5), ("unreachableOOPActiveMode", 6), ("jitterOOPActiveMode", 7), ("mosOOPActiveMode", 8), ("none", 9), ("rsvpOOPRecomputeExclude", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSLastOOPReason.setStatus('current')
cpfrTCSLastRouteChangeEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSLastRouteChangeEvent.setStatus('current')
cpfrTCSLastRouteChangeReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 12, 1, 11), PfrLastUncontrolReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCSLastRouteChangeReason.setStatus('current')
cpfrTrafficClassMetricTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13), )
if mibBuilder.loadTexts: cpfrTrafficClassMetricTable.setStatus('current')
cpfrTrafficClassMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrMCIndex"), (0, "CISCO-PFR-MIB", "cpfrTrafficClassIndex"))
if mibBuilder.loadTexts: cpfrTrafficClassMetricEntry.setStatus('current')
cpfrTCMLastUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMLastUpdateTime.setStatus('current')
cpfrTCMAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMAge.setStatus('current')
cpfrTCMetricsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 3), Bits().clone(namedValues=NamedValues(("activeSTJitterAvg", 0), ("mosPercentage", 1), ("attempts", 2), ("packets", 3), ("passiveSTUnreachableAvg", 4), ("passiveSTdelayAvg", 5), ("passiveSTLossAvg", 6), ("activeSTUnreachableAvg", 7), ("activeSTDelayAvg", 8), ("passiveLTUnreachableAvg", 9), ("passiveLTDelayAvg", 10), ("passiveLTLossAvg", 11), ("activeLTUnreachableAvg", 12), ("activeLTDelayAvg", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMetricsValid.setStatus('current')
cpfrTCMActiveSTJitterAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMActiveSTJitterAvg.setStatus('current')
cpfrTCMMOSPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMMOSPercentage.setStatus('current')
cpfrTCMAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMAttempts.setStatus('current')
cpfrTCMPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Packets/probe').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMPackets.setStatus('current')
cpfrTCMPassiveSTUnreachableAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('flows-per-million').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMPassiveSTUnreachableAvg.setStatus('current')
cpfrTCMPassiveSTDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMPassiveSTDelayAvg.setStatus('current')
cpfrTCMPassiveSTLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMPassiveSTLossAvg.setStatus('current')
cpfrTCMActiveSTUnreachableAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('flows-per-million').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMActiveSTUnreachableAvg.setStatus('current')
cpfrTCMActiveSTDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMActiveSTDelayAvg.setStatus('current')
cpfrTCMPassiveLTUnreachableAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 13), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMPassiveLTUnreachableAvg.setStatus('current')
cpfrTCMPassiveLTDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 14), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMPassiveLTDelayAvg.setStatus('current')
cpfrTCMPassiveLTLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 15), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMPassiveLTLossAvg.setStatus('current')
cpfrTCMActiveLTUnreachableAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMActiveLTUnreachableAvg.setStatus('current')
cpfrTCMActiveLTDelayAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 13, 1, 17), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrTCMActiveLTDelayAvg.setStatus('current')
cpfrLinkGroupExitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 14), )
if mibBuilder.loadTexts: cpfrLinkGroupExitTable.setStatus('current')
cpfrLinkGroupExitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 14, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrMCIndex"), (0, "CISCO-PFR-MIB", "cpfrLinkGroupName"), (0, "CISCO-PFR-MIB", "cpfrLinkGroupIndex"))
if mibBuilder.loadTexts: cpfrLinkGroupExitEntry.setStatus('current')
cpfrLinkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 14, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cpfrLinkGroupName.setStatus('current')
cpfrLinkGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 14, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cpfrLinkGroupIndex.setStatus('current')
cpfrLinkGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 14, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLinkGroupStorageType.setStatus('current')
cpfrLinkGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 14, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLinkGroupRowStatus.setStatus('current')
cpfrLinkGroupBRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 14, 1, 5), PfrBorderRouterIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLinkGroupBRIndex.setStatus('current')
cpfrLinkGroupExitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 14, 1, 6), PfrExitIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrLinkGroupExitIndex.setStatus('current')
cpfrLinkGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primaryLinkGroup", 1), ("fallbackLinkGroup", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpfrLinkGroupType.setStatus('current')
cpfrNbarApplListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 15), )
if mibBuilder.loadTexts: cpfrNbarApplListTable.setStatus('current')
cpfrNbarApplListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 15, 1), ).setIndexNames((0, "CISCO-PFR-MIB", "cpfrNbarApplListName"), (0, "CISCO-PFR-MIB", "cpfrNbarApplIndex"))
if mibBuilder.loadTexts: cpfrNbarApplListEntry.setStatus('current')
cpfrNbarApplListName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 15, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cpfrNbarApplListName.setStatus('current')
cpfrNbarApplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 15, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cpfrNbarApplIndex.setStatus('current')
cpfrNbarApplListStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 15, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrNbarApplListStorageType.setStatus('current')
cpfrNbarApplListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 15, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrNbarApplListRowStatus.setStatus('current')
cpfrNbarApplPdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 772, 1, 15, 1, 5), CiscoPdProtocolIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpfrNbarApplPdIndex.setStatus('current')
ciscoPfrMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 772, 2, 1))
cpfrMCStatusChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 772, 0, 1)).setObjects(("CISCO-PFR-MIB", "cpfrMCChangeConfigType"), ("CISCO-PFR-MIB", "cpfrMCChangeConfigValue"))
if mibBuilder.loadTexts: cpfrMCStatusChangeNotify.setStatus('current')
cpfrBRStatusChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 772, 0, 2)).setObjects(("CISCO-PFR-MIB", "cpfrBRAddressType"), ("CISCO-PFR-MIB", "cpfrBRAddress"), ("CISCO-PFR-MIB", "cpfrBROperStatus"), ("CISCO-PFR-MIB", "cpfrBRConnStatus"), ("CISCO-PFR-MIB", "cpfrBRConnFailureReason"))
if mibBuilder.loadTexts: cpfrBRStatusChangeNotify.setStatus('current')
cpfrExitStatusChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 772, 0, 3)).setObjects(("CISCO-PFR-MIB", "cpfrExitName"), ("CISCO-PFR-MIB", "cpfrExitType"), ("CISCO-PFR-MIB", "cpfrExitOperStatus"), ("CISCO-PFR-MIB", "cpfrBRAddressType"), ("CISCO-PFR-MIB", "cpfrBRAddress"))
if mibBuilder.loadTexts: cpfrExitStatusChangeNotify.setStatus('current')
cpfrTrafficClassEventNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 772, 0, 4)).setObjects(("CISCO-PFR-MIB", "cpfrTCStatus"), ("CISCO-PFR-MIB", "cpfrTCSLastOOPReason"), ("CISCO-PFR-MIB", "cpfrBRAddressType"), ("CISCO-PFR-MIB", "cpfrBRAddress"), ("CISCO-PFR-MIB", "cpfrExitName"), ("CISCO-PFR-MIB", "cpfrLinkGroupType"))
if mibBuilder.loadTexts: cpfrTrafficClassEventNotify.setStatus('current')
cpfrTCInpolicyThresholdBelowNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 772, 0, 5)).setObjects(("CISCO-PFR-MIB", "cpfrMapEventNotifCtrlType"), ("CISCO-PFR-MIB", "cpfrMapEventNotifCtrlThreshold"), ("CISCO-PFR-MIB", "cpfrMapEventTCCount"))
if mibBuilder.loadTexts: cpfrTCInpolicyThresholdBelowNotify.setStatus('current')
cpfrTCPrimaryThresholdBelowNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 772, 0, 6)).setObjects(("CISCO-PFR-MIB", "cpfrMapEventNotifCtrlType"), ("CISCO-PFR-MIB", "cpfrMapEventNotifCtrlThreshold"), ("CISCO-PFR-MIB", "cpfrMapEventTCCount"))
if mibBuilder.loadTexts: cpfrTCPrimaryThresholdBelowNotify.setStatus('current')
ciscoPfrMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 772, 2, 2))
ciscoPfrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 772, 2, 1, 1)).setObjects(("CISCO-PFR-MIB", "cpfrMasterControllerGroup"), ("CISCO-PFR-MIB", "cpfrBorderRouterGroup"), ("CISCO-PFR-MIB", "cpfrTrafficClassGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPfrMIBCompliance = ciscoPfrMIBCompliance.setStatus('deprecated')
ciscoPfrMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 772, 2, 1, 2)).setObjects(("CISCO-PFR-MIB", "cpfrMasterControllerGroup"), ("CISCO-PFR-MIB", "cpfrBorderRouterGroup"), ("CISCO-PFR-MIB", "cpfrTrafficClassGroup"), ("CISCO-PFR-MIB", "cpfrMasterControllerGroupRev1"), ("CISCO-PFR-MIB", "cpfrBorderRouterGroupRev1"), ("CISCO-PFR-MIB", "cpfrMCNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPfrMIBComplianceRev1 = ciscoPfrMIBComplianceRev1.setStatus('current')
cpfrMasterControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 772, 2, 2, 1)).setObjects(("CISCO-PFR-MIB", "cpfrMCStorageType"), ("CISCO-PFR-MIB", "cpfrMCRowStatus"), ("CISCO-PFR-MIB", "cpfrMCKeepAliveTimer"), ("CISCO-PFR-MIB", "cpfrMCMaxPrefixTotal"), ("CISCO-PFR-MIB", "cpfrMCMaxPrefixLearn"), ("CISCO-PFR-MIB", "cpfrMCEntranceLinksMaxUtil"), ("CISCO-PFR-MIB", "cpfrMCExitLinksMaxUtil"), ("CISCO-PFR-MIB", "cpfrMCPortNumber"), ("CISCO-PFR-MIB", "cpfrMCTracerouteProbeDelay"), ("CISCO-PFR-MIB", "cpfrMCRsvpPostDialDelay"), ("CISCO-PFR-MIB", "cpfrMCRsvpSignalingRetries"), ("CISCO-PFR-MIB", "cpfrMCNetflowExporter"), ("CISCO-PFR-MIB", "cpfrMCAdminStatus"), ("CISCO-PFR-MIB", "cpfrMCOperStatus"), ("CISCO-PFR-MIB", "cpfrMCConnStatus"), ("CISCO-PFR-MIB", "cpfrMCNumofBorderRouters"), ("CISCO-PFR-MIB", "cpfrMCNumofExits"), ("CISCO-PFR-MIB", "cpfrMCLearnState"), ("CISCO-PFR-MIB", "cpfrMCLearnStateTimeRemain"), ("CISCO-PFR-MIB", "cpfrMCPrefixCount"), ("CISCO-PFR-MIB", "cpfrMCPrefixLearned"), ("CISCO-PFR-MIB", "cpfrMCPrefixConfigured"), ("CISCO-PFR-MIB", "cpfrMCPbrMet"), ("CISCO-PFR-MIB", "cpfrMapStorageType"), ("CISCO-PFR-MIB", "cpfrMapRowStatus"), ("CISCO-PFR-MIB", "cpfrMapName"), ("CISCO-PFR-MIB", "cpfrMapBackoffMinTimer"), ("CISCO-PFR-MIB", "cpfrMapBackoffMaxTimer"), ("CISCO-PFR-MIB", "cpfrMapBackoffStepTimer"), ("CISCO-PFR-MIB", "cpfrMapDelayType"), ("CISCO-PFR-MIB", "cpfrMapDelayRelativePercent"), ("CISCO-PFR-MIB", "cpfrMapDelayThresholdMax"), ("CISCO-PFR-MIB", "cpfrMapHolddownTimer"), ("CISCO-PFR-MIB", "cpfrMapPrefixForwardInterface"), ("CISCO-PFR-MIB", "cpfrMapJitterThresholdMax"), ("CISCO-PFR-MIB", "cpfrMapLinkGroupName"), ("CISCO-PFR-MIB", "cpfrMapFallbackLinkGroupName"), ("CISCO-PFR-MIB", "cpfrMapLossType"), ("CISCO-PFR-MIB", "cpfrMapLossRelativeAvg"), ("CISCO-PFR-MIB", "cpfrMapLossThresholdMax"), ("CISCO-PFR-MIB", "cpfrMapModeMonitor"), ("CISCO-PFR-MIB", "cpfrMapModeRouteOpts"), ("CISCO-PFR-MIB", "cpfrMapRouteMetricBgpLocalPref"), ("CISCO-PFR-MIB", "cpfrMapRouteMetricEigrpTagCommunity"), ("CISCO-PFR-MIB", "cpfrMapRouteMetricStaticTag"), ("CISCO-PFR-MIB", "cpfrMapModeSelectExitType"), ("CISCO-PFR-MIB", "cpfrMapMOSThresholdMin"), ("CISCO-PFR-MIB", "cpfrMapMOSPercentage"), ("CISCO-PFR-MIB", "cpfrMapNextHopAddressType"), ("CISCO-PFR-MIB", "cpfrMapNextHopAddress"), ("CISCO-PFR-MIB", "cpfrMapPeriodicTimer"), ("CISCO-PFR-MIB", "cpfrMapActiveProbeFrequency"), ("CISCO-PFR-MIB", "cpfrMapActiveProbePackets"), ("CISCO-PFR-MIB", "cpfrMapTracerouteReporting"), ("CISCO-PFR-MIB", "cpfrMapUnreachableType"), ("CISCO-PFR-MIB", "cpfrMapUnreachableRelativeAvg"), ("CISCO-PFR-MIB", "cpfrMapUnreachableThresholdMax"), ("CISCO-PFR-MIB", "cpfrMapRoundRobinResolver"), ("CISCO-PFR-MIB", "cpfrMatchValid"), ("CISCO-PFR-MIB", "cpfrMatchAddrAccessList"), ("CISCO-PFR-MIB", "cpfrMatchAddrPrefixList"), ("CISCO-PFR-MIB", "cpfrMatchAddrPrefixInside"), ("CISCO-PFR-MIB", "cpfrMatchLearnMode"), ("CISCO-PFR-MIB", "cpfrMatchLearnListName"), ("CISCO-PFR-MIB", "cpfrMatchTCNbarListName"), ("CISCO-PFR-MIB", "cpfrMatchTCNbarApplPfxList"), ("CISCO-PFR-MIB", "cpfrMatchTCPfxInside"), ("CISCO-PFR-MIB", "cpfrLearnListStorageType"), ("CISCO-PFR-MIB", "cpfrLearnListRowStatus"), ("CISCO-PFR-MIB", "cpfrLearnListReferenceName"), ("CISCO-PFR-MIB", "cpfrLearnListSequenceNum"), ("CISCO-PFR-MIB", "cpfrLearnListMethod"), ("CISCO-PFR-MIB", "cpfrLearnListAclName"), ("CISCO-PFR-MIB", "cpfrLearnListPfxName"), ("CISCO-PFR-MIB", "cpfrLearnListPfxInside"), ("CISCO-PFR-MIB", "cpfrLearnListNbarAppl"), ("CISCO-PFR-MIB", "cpfrLearnListFilterPfxName"), ("CISCO-PFR-MIB", "cpfrActiveProbeStorageType"), ("CISCO-PFR-MIB", "cpfrActiveProbeRowStatus"), ("CISCO-PFR-MIB", "cpfrActiveProbeType"), ("CISCO-PFR-MIB", "cpfrActiveProbeTargetAddressType"), ("CISCO-PFR-MIB", "cpfrActiveProbeTargetAddress"), ("CISCO-PFR-MIB", "cpfrActiveProbeTargetPortNumber"), ("CISCO-PFR-MIB", "cpfrActiveProbePfrMapIndex"), ("CISCO-PFR-MIB", "cpfrActiveProbeDscpValue"), ("CISCO-PFR-MIB", "cpfrActiveProbeCodecName"), ("CISCO-PFR-MIB", "cpfrActiveProbeMapIndex"), ("CISCO-PFR-MIB", "cpfrActiveProbeMapPolicyIndex"), ("CISCO-PFR-MIB", "cpfrActiveProbeAdminStatus"), ("CISCO-PFR-MIB", "cpfrActiveProbeOperStatus"), ("CISCO-PFR-MIB", "cpfrActiveProbeAssignedPfxAddressType"), ("CISCO-PFR-MIB", "cpfrActiveProbeAssignedPfxAddress"), ("CISCO-PFR-MIB", "cpfrActiveProbeAssignedPfxLen"), ("CISCO-PFR-MIB", "cpfrActiveProbeMethod"), ("CISCO-PFR-MIB", "cpfrResolveStorageType"), ("CISCO-PFR-MIB", "cpfrResolveRowStatus"), ("CISCO-PFR-MIB", "cpfrResolvePolicyType"), ("CISCO-PFR-MIB", "cpfrResolveVariance"), ("CISCO-PFR-MIB", "cpfrResolveMapIndex"), ("CISCO-PFR-MIB", "cpfrResolveMapPolicyIndex"), ("CISCO-PFR-MIB", "cpfrLearnAggregationType"), ("CISCO-PFR-MIB", "cpfrLearnAggregationPrefixLen"), ("CISCO-PFR-MIB", "cpfrLearnMethod"), ("CISCO-PFR-MIB", "cpfrLearnExpireType"), ("CISCO-PFR-MIB", "cpfrLearnExpireSessionNum"), ("CISCO-PFR-MIB", "cpfrLearnExpireTime"), ("CISCO-PFR-MIB", "cpfrLearnMonitorPeriod"), ("CISCO-PFR-MIB", "cpfrLearnPeriodInterval"), ("CISCO-PFR-MIB", "cpfrLearnPrefixesNumber"), ("CISCO-PFR-MIB", "cpfrLearnAggAccesslistName"), ("CISCO-PFR-MIB", "cpfrLearnFilterAccessListName"), ("CISCO-PFR-MIB", "cpfrNbarApplListStorageType"), ("CISCO-PFR-MIB", "cpfrNbarApplListRowStatus"), ("CISCO-PFR-MIB", "cpfrNbarApplPdIndex"), ("CISCO-PFR-MIB", "cpfrResolvePriority"), ("CISCO-PFR-MIB", "cpfrMCMapIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpfrMasterControllerGroup = cpfrMasterControllerGroup.setStatus('current')
cpfrBorderRouterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 772, 2, 2, 2)).setObjects(("CISCO-PFR-MIB", "cpfrBRStorageType"), ("CISCO-PFR-MIB", "cpfrBRRowStatus"), ("CISCO-PFR-MIB", "cpfrBRAddressType"), ("CISCO-PFR-MIB", "cpfrBRAddress"), ("CISCO-PFR-MIB", "cpfrBRKeyName"), ("CISCO-PFR-MIB", "cpfrBROperStatus"), ("CISCO-PFR-MIB", "cpfrBRConnStatus"), ("CISCO-PFR-MIB", "cpfrBRUpTime"), ("CISCO-PFR-MIB", "cpfrBRConnFailureReason"), ("CISCO-PFR-MIB", "cpfrBRAuthFailCount"), ("CISCO-PFR-MIB", "cpfrExitStorageType"), ("CISCO-PFR-MIB", "cpfrExitRowStatus"), ("CISCO-PFR-MIB", "cpfrExitName"), ("CISCO-PFR-MIB", "cpfrExitType"), ("CISCO-PFR-MIB", "cpfrDowngradeBgpCommunity"), ("CISCO-PFR-MIB", "cpfrExitMaxUtilRxType"), ("CISCO-PFR-MIB", "cpfrExitMaxUtilRxAbsolute"), ("CISCO-PFR-MIB", "cpfrExitMaxUtilRxPercentage"), ("CISCO-PFR-MIB", "cpfrExitMaxUtilTxType"), ("CISCO-PFR-MIB", "cpfrExitMaxUtilTxAbsolute"), ("CISCO-PFR-MIB", "cpfrExitMaxUtilTxPercentage"), ("CISCO-PFR-MIB", "cpfrExitCostCalcMethod"), ("CISCO-PFR-MIB", "cpfrExitCostDiscard"), ("CISCO-PFR-MIB", "cpfrExitCostDiscardType"), ("CISCO-PFR-MIB", "cpfrExitCostDiscardAbsolute"), ("CISCO-PFR-MIB", "cpfrExitCostDiscardPercent"), ("CISCO-PFR-MIB", "cpfrExitCostEndDayOfMonth"), ("CISCO-PFR-MIB", "cpfrExitCostEndOffsetType"), ("CISCO-PFR-MIB", "cpfrExitCostEndOffset"), ("CISCO-PFR-MIB", "cpfrExitCostFixedFeeCost"), ("CISCO-PFR-MIB", "cpfrExitCostNickName"), ("CISCO-PFR-MIB", "cpfrExitCostSamplingPeriod"), ("CISCO-PFR-MIB", "cpfrExitCostRollupPeriod"), ("CISCO-PFR-MIB", "cpfrExitCostSummerTimeStart"), ("CISCO-PFR-MIB", "cpfrExitCostSummerTimeOffset"), ("CISCO-PFR-MIB", "cpfrExitCostSummerTimeEnd"), ("CISCO-PFR-MIB", "cpfrExitCapacity"), ("CISCO-PFR-MIB", "cpfrExitRxBandwidth"), ("CISCO-PFR-MIB", "cpfrExitTxBandwidth"), ("CISCO-PFR-MIB", "cpfrExitTxLoad"), ("CISCO-PFR-MIB", "cpfrExitNickName"), ("CISCO-PFR-MIB", "cpfrExitCost1"), ("CISCO-PFR-MIB", "cpfrExitSustainedUtil1"), ("CISCO-PFR-MIB", "cpfrExitCost2"), ("CISCO-PFR-MIB", "cpfrExitSustainedUtil2"), ("CISCO-PFR-MIB", "cpfrExitCost3"), ("CISCO-PFR-MIB", "cpfrExitSustainedUtil3"), ("CISCO-PFR-MIB", "cpfrExitRollupTotal"), ("CISCO-PFR-MIB", "cpfrExitRollupDiscard"), ("CISCO-PFR-MIB", "cpfrExitRollupLeft"), ("CISCO-PFR-MIB", "cpfrExitRollupCollected"), ("CISCO-PFR-MIB", "cpfrExitRollupMomTgtUtil"), ("CISCO-PFR-MIB", "cpfrExitRollupStartingTgtUtil"), ("CISCO-PFR-MIB", "cpfrExitRollupCurrentTgtUtil"), ("CISCO-PFR-MIB", "cpfrExitRollupCumRxBytes"), ("CISCO-PFR-MIB", "cpfrExitRollupCumTxBytes"), ("CISCO-PFR-MIB", "cpfrExitRollupTimeRemain"), ("CISCO-PFR-MIB", "cpfrExitOperStatus"), ("CISCO-PFR-MIB", "cpfrExitRsvpBandwidthPool"), ("CISCO-PFR-MIB", "cpfrExitCostTierStorageType"), ("CISCO-PFR-MIB", "cpfrExitCostTierRowStatus"), ("CISCO-PFR-MIB", "cpfrExitCostTierFee"), ("CISCO-PFR-MIB", "cpfrLinkGroupStorageType"), ("CISCO-PFR-MIB", "cpfrLinkGroupRowStatus"), ("CISCO-PFR-MIB", "cpfrLinkGroupBRIndex"), ("CISCO-PFR-MIB", "cpfrLinkGroupExitIndex"), ("CISCO-PFR-MIB", "cpfrExitRxLoad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpfrBorderRouterGroup = cpfrBorderRouterGroup.setStatus('current')
cpfrTrafficClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 772, 2, 2, 3)).setObjects(("CISCO-PFR-MIB", "cpfrTrafficClassValid"), ("CISCO-PFR-MIB", "cpfrTCSrcPrefixType"), ("CISCO-PFR-MIB", "cpfrTCSrcPrefix"), ("CISCO-PFR-MIB", "cpfrTCSrcPrefixLen"), ("CISCO-PFR-MIB", "cpfrTCSrcMinPort"), ("CISCO-PFR-MIB", "cpfrTCDstPrefixType"), ("CISCO-PFR-MIB", "cpfrTCDstPrefix"), ("CISCO-PFR-MIB", "cpfrTCDstPrefixLen"), ("CISCO-PFR-MIB", "cpfrTCDstMinPort"), ("CISCO-PFR-MIB", "cpfrTCDscpValue"), ("CISCO-PFR-MIB", "cpfrTCProtocol"), ("CISCO-PFR-MIB", "cpfrTCNbarApplication"), ("CISCO-PFR-MIB", "cpfrTCBRIndex"), ("CISCO-PFR-MIB", "cpfrTCBRExitIndex"), ("CISCO-PFR-MIB", "cpfrTCMapIndex"), ("CISCO-PFR-MIB", "cpfrTCMapPolicyIndex"), ("CISCO-PFR-MIB", "cpfrTCStatus"), ("CISCO-PFR-MIB", "cpfrTCSType"), ("CISCO-PFR-MIB", "cpfrTCSLearnListIndex"), ("CISCO-PFR-MIB", "cpfrTCSTimeOnCurrExit"), ("CISCO-PFR-MIB", "cpfrTCSControlState"), ("CISCO-PFR-MIB", "cpfrTCSControlBy"), ("CISCO-PFR-MIB", "cpfrTCSTimeRemainCurrState"), ("CISCO-PFR-MIB", "cpfrTCSLastOOPEventTime"), ("CISCO-PFR-MIB", "cpfrTCSLastOOPReason"), ("CISCO-PFR-MIB", "cpfrTCSLastRouteChangeEvent"), ("CISCO-PFR-MIB", "cpfrTCSLastRouteChangeReason"), ("CISCO-PFR-MIB", "cpfrTCMLastUpdateTime"), ("CISCO-PFR-MIB", "cpfrTCMAge"), ("CISCO-PFR-MIB", "cpfrTCMetricsValid"), ("CISCO-PFR-MIB", "cpfrTCMActiveSTJitterAvg"), ("CISCO-PFR-MIB", "cpfrTCMMOSPercentage"), ("CISCO-PFR-MIB", "cpfrTCMAttempts"), ("CISCO-PFR-MIB", "cpfrTCMPackets"), ("CISCO-PFR-MIB", "cpfrTCMPassiveSTUnreachableAvg"), ("CISCO-PFR-MIB", "cpfrTCMPassiveSTDelayAvg"), ("CISCO-PFR-MIB", "cpfrTCMPassiveSTLossAvg"), ("CISCO-PFR-MIB", "cpfrTCMActiveSTUnreachableAvg"), ("CISCO-PFR-MIB", "cpfrTCMActiveSTDelayAvg"), ("CISCO-PFR-MIB", "cpfrTCMPassiveLTUnreachableAvg"), ("CISCO-PFR-MIB", "cpfrTCMPassiveLTDelayAvg"), ("CISCO-PFR-MIB", "cpfrTCMPassiveLTLossAvg"), ("CISCO-PFR-MIB", "cpfrTCMActiveLTUnreachableAvg"), ("CISCO-PFR-MIB", "cpfrTCMActiveLTDelayAvg"), ("CISCO-PFR-MIB", "cpfrTCSrcMaxPort"), ("CISCO-PFR-MIB", "cpfrTCDstMaxPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpfrTrafficClassGroup = cpfrTrafficClassGroup.setStatus('current')
cpfrMasterControllerGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 772, 2, 2, 4)).setObjects(("CISCO-PFR-MIB", "cpfrMCLoggingAdminStatus"), ("CISCO-PFR-MIB", "cpfrMCControlMode"), ("CISCO-PFR-MIB", "cpfrMCClear"), ("CISCO-PFR-MIB", "cpfrMapEventNotifCtrlType"), ("CISCO-PFR-MIB", "cpfrMapEventNotifCtrlThreshold"), ("CISCO-PFR-MIB", "cpfrMapEventTCCount"), ("CISCO-PFR-MIB", "cpfrMCLastClearTime"), ("CISCO-PFR-MIB", "cpfrMCNotifisControl"), ("CISCO-PFR-MIB", "cpfrMCChangeConfigType"), ("CISCO-PFR-MIB", "cpfrMCChangeConfigValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpfrMasterControllerGroupRev1 = cpfrMasterControllerGroupRev1.setStatus('current')
cpfrBorderRouterGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 772, 2, 2, 5)).setObjects(("CISCO-PFR-MIB", "cpfrLinkGroupType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpfrBorderRouterGroupRev1 = cpfrBorderRouterGroupRev1.setStatus('current')
cpfrMCNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 772, 2, 2, 6)).setObjects(("CISCO-PFR-MIB", "cpfrBRStatusChangeNotify"), ("CISCO-PFR-MIB", "cpfrExitStatusChangeNotify"), ("CISCO-PFR-MIB", "cpfrTrafficClassEventNotify"), ("CISCO-PFR-MIB", "cpfrTCInpolicyThresholdBelowNotify"), ("CISCO-PFR-MIB", "cpfrTCPrimaryThresholdBelowNotify"), ("CISCO-PFR-MIB", "cpfrMCStatusChangeNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpfrMCNotificationGroup = cpfrMCNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-PFR-MIB", cpfrMCStatusChangeNotify=cpfrMCStatusChangeNotify, cpfrExitRollupTotal=cpfrExitRollupTotal, cpfrExitCostFixedFeeCost=cpfrExitCostFixedFeeCost, cpfrActiveProbeStorageType=cpfrActiveProbeStorageType, cpfrMasterControllerGroupRev1=cpfrMasterControllerGroupRev1, cpfrLearnAggregationPrefixLen=cpfrLearnAggregationPrefixLen, cpfrMapBackoffMinTimer=cpfrMapBackoffMinTimer, cpfrLearnListTable=cpfrLearnListTable, cpfrTrafficClassValid=cpfrTrafficClassValid, cpfrActiveProbeAssignedPfxAddressType=cpfrActiveProbeAssignedPfxAddressType, cpfrExitType=cpfrExitType, cpfrTCSLastRouteChangeReason=cpfrTCSLastRouteChangeReason, cpfrLearnExpireTime=cpfrLearnExpireTime, cpfrLearnListEntry=cpfrLearnListEntry, cpfrTCMActiveSTUnreachableAvg=cpfrTCMActiveSTUnreachableAvg, cpfrActiveProbeIndex=cpfrActiveProbeIndex, cpfrMapEventTCCount=cpfrMapEventTCCount, ciscoPfrMIBCompliance=ciscoPfrMIBCompliance, cpfrResolveIndex=cpfrResolveIndex, cpfrExitRxBandwidth=cpfrExitRxBandwidth, PfrLearnListIndex=PfrLearnListIndex, cpfrExitCost3=cpfrExitCost3, cpfrResolveVariance=cpfrResolveVariance, cpfrLearnListIndex=cpfrLearnListIndex, cpfrMapUnreachableThresholdMax=cpfrMapUnreachableThresholdMax, cpfrExitRollupCollected=cpfrExitRollupCollected, cpfrTCMActiveLTDelayAvg=cpfrTCMActiveLTDelayAvg, PfRMasterControllerIndex=PfRMasterControllerIndex, cpfrLearnListSequenceNum=cpfrLearnListSequenceNum, cpfrResolvePriority=cpfrResolvePriority, cpfrExitStatusChangeNotify=cpfrExitStatusChangeNotify, cpfrLinkGroupType=cpfrLinkGroupType, cpfrLearnListReferenceName=cpfrLearnListReferenceName, cpfrLearnMethod=cpfrLearnMethod, cpfrExitCostEndDayOfMonth=cpfrExitCostEndDayOfMonth, cpfrExitCostTierStorageType=cpfrExitCostTierStorageType, cpfrActiveProbeAdminStatus=cpfrActiveProbeAdminStatus, cpfrTCMPassiveLTDelayAvg=cpfrTCMPassiveLTDelayAvg, cpfrResolvePolicyType=cpfrResolvePolicyType, cpfrMapTracerouteReporting=cpfrMapTracerouteReporting, cpfrMCRsvpSignalingRetries=cpfrMCRsvpSignalingRetries, cpfrExitCostSummerTimeEnd=cpfrExitCostSummerTimeEnd, cpfrTCDstPrefixType=cpfrTCDstPrefixType, cpfrExitRollupDiscard=cpfrExitRollupDiscard, cpfrExitCost1=cpfrExitCost1, cpfrExitRowStatus=cpfrExitRowStatus, cpfrMapJitterThresholdMax=cpfrMapJitterThresholdMax, cpfrTCSTimeOnCurrExit=cpfrTCSTimeOnCurrExit, cpfrTrafficClassEventNotify=cpfrTrafficClassEventNotify, cpfrMapLossType=cpfrMapLossType, cpfrMatchAddrPrefixList=cpfrMatchAddrPrefixList, cpfrExitStorageType=cpfrExitStorageType, cpfrTCStatus=cpfrTCStatus, cpfrMapUnreachableType=cpfrMapUnreachableType, ciscoPfrMIBGroups=ciscoPfrMIBGroups, cpfrMapBackoffStepTimer=cpfrMapBackoffStepTimer, cpfrTCMPassiveSTUnreachableAvg=cpfrTCMPassiveSTUnreachableAvg, cpfrMCLearnState=cpfrMCLearnState, cpfrMapPrefixForwardInterface=cpfrMapPrefixForwardInterface, cpfrTCProtocol=cpfrTCProtocol, cpfrTCBRExitIndex=cpfrTCBRExitIndex, cpfrLinkGroupExitEntry=cpfrLinkGroupExitEntry, cpfrMCControlMode=cpfrMCControlMode, ciscoPfrMIBNotifs=ciscoPfrMIBNotifs, cpfrBorderRouterGroupRev1=cpfrBorderRouterGroupRev1, cpfrTCMMOSPercentage=cpfrTCMMOSPercentage, cpfrMapActiveProbeFrequency=cpfrMapActiveProbeFrequency, PfrMapIndex=PfrMapIndex, cpfrMapEventNotifCtrlType=cpfrMapEventNotifCtrlType, cpfrActiveProbeRowStatus=cpfrActiveProbeRowStatus, cpfrActiveProbeAssignedPfxLen=cpfrActiveProbeAssignedPfxLen, cpfrMapName=cpfrMapName, cpfrActiveProbeType=cpfrActiveProbeType, cpfrMapRowStatus=cpfrMapRowStatus, cpfrExitCostSamplingPeriod=cpfrExitCostSamplingPeriod, cpfrLearnListPfxInside=cpfrLearnListPfxInside, cpfrExitCostDiscardPercent=cpfrExitCostDiscardPercent, cpfrTCMPassiveSTLossAvg=cpfrTCMPassiveSTLossAvg, cpfrExitCostTierRowStatus=cpfrExitCostTierRowStatus, cpfrMatchValid=cpfrMatchValid, cpfrExitTable=cpfrExitTable, cpfrResolveStorageType=cpfrResolveStorageType, ciscoPfrMIBConform=ciscoPfrMIBConform, cpfrExitRollupStartingTgtUtil=cpfrExitRollupStartingTgtUtil, cpfrLinkGroupIndex=cpfrLinkGroupIndex, cpfrTCMetricsValid=cpfrTCMetricsValid, cpfrTCMPassiveSTDelayAvg=cpfrTCMPassiveSTDelayAvg, cpfrMCPortNumber=cpfrMCPortNumber, cpfrLearnFilterAccessListName=cpfrLearnFilterAccessListName, cpfrTCBRIndex=cpfrTCBRIndex, cpfrMatchLearnMode=cpfrMatchLearnMode, cpfrMCPrefixConfigured=cpfrMCPrefixConfigured, cpfrExitMaxUtilRxType=cpfrExitMaxUtilRxType, cpfrBRStorageType=cpfrBRStorageType, cpfrMapModeMonitor=cpfrMapModeMonitor, cpfrExitCostEndOffset=cpfrExitCostEndOffset, cpfrMCKeepAliveTimer=cpfrMCKeepAliveTimer, cpfrTCNbarApplication=cpfrTCNbarApplication, cpfrLearnTable=cpfrLearnTable, cpfrBRKeyName=cpfrBRKeyName, cpfrMapHolddownTimer=cpfrMapHolddownTimer, cpfrExitMaxUtilTxPercentage=cpfrExitMaxUtilTxPercentage, cpfrLinkGroupExitTable=cpfrLinkGroupExitTable, cpfrLearnExpireType=cpfrLearnExpireType, cpfrTrafficClassGroup=cpfrTrafficClassGroup, cpfrActiveProbeEntry=cpfrActiveProbeEntry, cpfrTCMPackets=cpfrTCMPackets, cpfrMCExitLinksMaxUtil=cpfrMCExitLinksMaxUtil, cpfrLearnListRowStatus=cpfrLearnListRowStatus, cpfrLearnMonitorPeriod=cpfrLearnMonitorPeriod, cpfrExitOperStatus=cpfrExitOperStatus, cpfrTrafficClassMetricTable=cpfrTrafficClassMetricTable, cpfrBRStatusChangeNotify=cpfrBRStatusChangeNotify, cpfrMCChangeConfigValue=cpfrMCChangeConfigValue, cpfrActiveProbeMapIndex=cpfrActiveProbeMapIndex, cpfrMapDelayType=cpfrMapDelayType, cpfrNbarApplListRowStatus=cpfrNbarApplListRowStatus, cpfrMatchTable=cpfrMatchTable, cpfrTrafficClassMetricEntry=cpfrTrafficClassMetricEntry, cpfrMapIndex=cpfrMapIndex, cpfrTCSLearnListIndex=cpfrTCSLearnListIndex, cpfrMapEntry=cpfrMapEntry, cpfrMCNumofBorderRouters=cpfrMCNumofBorderRouters, cpfrMapFallbackLinkGroupName=cpfrMapFallbackLinkGroupName, ciscoPfrMIBObjects=ciscoPfrMIBObjects, cpfrExitCostEndOffsetType=cpfrExitCostEndOffsetType, cpfrMCPbrMet=cpfrMCPbrMet, cpfrTCDstMaxPort=cpfrTCDstMaxPort, cpfrMapMOSPercentage=cpfrMapMOSPercentage, cpfrMCRowStatus=cpfrMCRowStatus, cpfrLearnListNbarAppl=cpfrLearnListNbarAppl, cpfrLinkGroupRowStatus=cpfrLinkGroupRowStatus, cpfrLearnListFilterPfxName=cpfrLearnListFilterPfxName, cpfrExitCapacity=cpfrExitCapacity, cpfrExitRollupCumRxBytes=cpfrExitRollupCumRxBytes, cpfrMatchTCPfxInside=cpfrMatchTCPfxInside, cpfrTCMAge=cpfrTCMAge, cpfrBRIndex=cpfrBRIndex, cpfrExitRollupLeft=cpfrExitRollupLeft, cpfrMCLearnStateTimeRemain=cpfrMCLearnStateTimeRemain, cpfrExitCostSummerTimeOffset=cpfrExitCostSummerTimeOffset, cpfrExitRxLoad=cpfrExitRxLoad, cpfrMapPolicyIndex=cpfrMapPolicyIndex, cpfrBREntry=cpfrBREntry, cpfrActiveProbeMethod=cpfrActiveProbeMethod, cpfrExitName=cpfrExitName, cpfrExitRollupCurrentTgtUtil=cpfrExitRollupCurrentTgtUtil, cpfrMatchTCNbarListName=cpfrMatchTCNbarListName, cpfrMCMaxPrefixTotal=cpfrMCMaxPrefixTotal, cpfrMCNumofExits=cpfrMCNumofExits, cpfrMapRouteMetricBgpLocalPref=cpfrMapRouteMetricBgpLocalPref, cpfrActiveProbeCodecName=cpfrActiveProbeCodecName, cpfrTCPrimaryThresholdBelowNotify=cpfrTCPrimaryThresholdBelowNotify, cpfrNbarApplListName=cpfrNbarApplListName, cpfrMatchAddrAccessList=cpfrMatchAddrAccessList, cpfrTrafficClassStatusEntry=cpfrTrafficClassStatusEntry, cpfrMapUnreachableRelativeAvg=cpfrMapUnreachableRelativeAvg, cpfrMCChangeConfigType=cpfrMCChangeConfigType, cpfrActiveProbePfrMapIndex=cpfrActiveProbePfrMapIndex, cpfrNbarApplIndex=cpfrNbarApplIndex, cpfrLearnListStorageType=cpfrLearnListStorageType, cpfrExitRsvpBandwidthPool=cpfrExitRsvpBandwidthPool, cpfrMasterControllerGroup=cpfrMasterControllerGroup, cpfrTCMLastUpdateTime=cpfrTCMLastUpdateTime, cpfrMapNextHopAddress=cpfrMapNextHopAddress, PfrMetricPolicyType=PfrMetricPolicyType, cpfrExitTxBandwidth=cpfrExitTxBandwidth, cpfrLearnPeriodInterval=cpfrLearnPeriodInterval, cpfrExitTxLoad=cpfrExitTxLoad, PfrExitIndex=PfrExitIndex, cpfrLinkGroupStorageType=cpfrLinkGroupStorageType, cpfrTCSLastOOPReason=cpfrTCSLastOOPReason, cpfrTCMapIndex=cpfrTCMapIndex, cpfrActiveProbeTargetAddress=cpfrActiveProbeTargetAddress, cpfrBRConnFailureReason=cpfrBRConnFailureReason, cpfrExitNickName=cpfrExitNickName, cpfrTCMPassiveLTLossAvg=cpfrTCMPassiveLTLossAvg, cpfrMCConnStatus=cpfrMCConnStatus, cpfrLearnAggregationType=cpfrLearnAggregationType, cpfrTCMapPolicyIndex=cpfrTCMapPolicyIndex, cpfrMCMaxPrefixLearn=cpfrMCMaxPrefixLearn, cpfrExitMaxUtilRxPercentage=cpfrExitMaxUtilRxPercentage, cpfrMapMOSThresholdMin=cpfrMapMOSThresholdMin, cpfrMatchTCNbarApplPfxList=cpfrMatchTCNbarApplPfxList, cpfrTrafficClassIndex=cpfrTrafficClassIndex, cpfrBROperStatus=cpfrBROperStatus, cpfrExitRollupMomTgtUtil=cpfrExitRollupMomTgtUtil, cpfrTrafficClassStatusTable=cpfrTrafficClassStatusTable, ciscoPfrMIBComplianceRev1=ciscoPfrMIBComplianceRev1, cpfrActiveProbeTargetPortNumber=cpfrActiveProbeTargetPortNumber, cpfrMCNotifisControl=cpfrMCNotifisControl, cpfrBRRowStatus=cpfrBRRowStatus, cpfrBRTable=cpfrBRTable, cpfrNbarApplListEntry=cpfrNbarApplListEntry, cpfrActiveProbeDscpValue=cpfrActiveProbeDscpValue, cpfrExitMaxUtilRxAbsolute=cpfrExitMaxUtilRxAbsolute, cpfrTCSrcPrefixType=cpfrTCSrcPrefixType, cpfrTCDstMinPort=cpfrTCDstMinPort, cpfrMapStorageType=cpfrMapStorageType, cpfrExitRollupCumTxBytes=cpfrExitRollupCumTxBytes, cpfrLearnAggAccesslistName=cpfrLearnAggAccesslistName, cpfrBRAddress=cpfrBRAddress, cpfrMatchAddrPrefixInside=cpfrMatchAddrPrefixInside, cpfrExitIndex=cpfrExitIndex, cpfrDowngradeBgpCommunity=cpfrDowngradeBgpCommunity, cpfrMCRsvpPostDialDelay=cpfrMCRsvpPostDialDelay, cpfrExitSustainedUtil1=cpfrExitSustainedUtil1, cpfrExitCostDiscardAbsolute=cpfrExitCostDiscardAbsolute, cpfrNbarApplListStorageType=cpfrNbarApplListStorageType, cpfrMatchLearnListName=cpfrMatchLearnListName, cpfrMCMapIndex=cpfrMCMapIndex, cpfrMCEntranceLinksMaxUtil=cpfrMCEntranceLinksMaxUtil, cpfrExitCostTierIndex=cpfrExitCostTierIndex, cpfrExitCostTierEntry=cpfrExitCostTierEntry, cpfrResolveTable=cpfrResolveTable, cpfrMapActiveProbePackets=cpfrMapActiveProbePackets, cpfrMCNotificationGroup=cpfrMCNotificationGroup, cpfrMapRouteMetricStaticTag=cpfrMapRouteMetricStaticTag, PfrLearnListIndexOrZero=PfrLearnListIndexOrZero, PfrMapIndexOrZero=PfrMapIndexOrZero, cpfrTCDstPrefix=cpfrTCDstPrefix, cpfrMCLastClearTime=cpfrMCLastClearTime, cpfrLearnListAclName=cpfrLearnListAclName, cpfrMCEntry=cpfrMCEntry, cpfrMapDelayRelativePercent=cpfrMapDelayRelativePercent, cpfrBRAddressType=cpfrBRAddressType, cpfrTCMPassiveLTUnreachableAvg=cpfrTCMPassiveLTUnreachableAvg, cpfrMapTable=cpfrMapTable, cpfrMCClear=cpfrMCClear, cpfrMCTracerouteProbeDelay=cpfrMCTracerouteProbeDelay, cpfrMapModeSelectExitType=cpfrMapModeSelectExitType, PfrLastUncontrolReason=PfrLastUncontrolReason, cpfrExitRollupTimeRemain=cpfrExitRollupTimeRemain, cpfrBRUpTime=cpfrBRUpTime, PYSNMP_MODULE_ID=ciscoPfrMIB, cpfrActiveProbeTable=cpfrActiveProbeTable, cpfrBorderRouterGroup=cpfrBorderRouterGroup, cpfrNbarApplListTable=cpfrNbarApplListTable, cpfrExitCostTierTable=cpfrExitCostTierTable, cpfrTCSLastOOPEventTime=cpfrTCSLastOOPEventTime, cpfrMapNextHopAddressType=cpfrMapNextHopAddressType, cpfrLearnExpireSessionNum=cpfrLearnExpireSessionNum, cpfrTCMActiveLTUnreachableAvg=cpfrTCMActiveLTUnreachableAvg, cpfrMCPrefixCount=cpfrMCPrefixCount, cpfrTCSControlBy=cpfrTCSControlBy, cpfrNbarApplPdIndex=cpfrNbarApplPdIndex, cpfrExitSustainedUtil3=cpfrExitSustainedUtil3, cpfrTCSrcMaxPort=cpfrTCSrcMaxPort, cpfrTCSrcPrefixLen=cpfrTCSrcPrefixLen, cpfrMapLinkGroupName=cpfrMapLinkGroupName, cpfrMapRoundRobinResolver=cpfrMapRoundRobinResolver, cpfrExitCostSummerTimeStart=cpfrExitCostSummerTimeStart, cpfrExitCostRollupPeriod=cpfrExitCostRollupPeriod, cpfrMapDelayThresholdMax=cpfrMapDelayThresholdMax)
mibBuilder.exportSymbols("CISCO-PFR-MIB", cpfrTCMAttempts=cpfrTCMAttempts, cpfrLearnEntry=cpfrLearnEntry, cpfrBRAuthFailCount=cpfrBRAuthFailCount, cpfrMCAdminStatus=cpfrMCAdminStatus, cpfrExitCost2=cpfrExitCost2, cpfrExitMaxUtilTxAbsolute=cpfrExitMaxUtilTxAbsolute, cpfrExitMaxUtilTxType=cpfrExitMaxUtilTxType, cpfrTCMActiveSTDelayAvg=cpfrTCMActiveSTDelayAvg, cpfrMCStorageType=cpfrMCStorageType, PfrResolvePolicyType=PfrResolvePolicyType, cpfrLinkGroupBRIndex=cpfrLinkGroupBRIndex, cpfrTCSrcPrefix=cpfrTCSrcPrefix, cpfrResolveMapPolicyIndex=cpfrResolveMapPolicyIndex, cpfrTrafficClassEntry=cpfrTrafficClassEntry, cpfrResolveMapIndex=cpfrResolveMapIndex, PfrBorderRouterIndex=PfrBorderRouterIndex, cpfrMapLossThresholdMax=cpfrMapLossThresholdMax, cpfrExitSustainedUtil2=cpfrExitSustainedUtil2, cpfrTCSTimeRemainCurrState=cpfrTCSTimeRemainCurrState, cpfrLinkGroupName=cpfrLinkGroupName, ciscoPfrMIB=ciscoPfrMIB, cpfrLinkGroupExitIndex=cpfrLinkGroupExitIndex, PfrMapPolicyIndex=PfrMapPolicyIndex, cpfrMCTable=cpfrMCTable, cpfrTCDscpValue=cpfrTCDscpValue, cpfrActiveProbeMapPolicyIndex=cpfrActiveProbeMapPolicyIndex, cpfrLearnListPfxName=cpfrLearnListPfxName, cpfrMapModeRouteOpts=cpfrMapModeRouteOpts, cpfrExitCostNickName=cpfrExitCostNickName, cpfrTCInpolicyThresholdBelowNotify=cpfrTCInpolicyThresholdBelowNotify, cpfrTCSControlState=cpfrTCSControlState, cpfrMapLossRelativeAvg=cpfrMapLossRelativeAvg, cpfrExitCostDiscardType=cpfrExitCostDiscardType, cpfrMapRouteMetricEigrpTagCommunity=cpfrMapRouteMetricEigrpTagCommunity, cpfrTCSLastRouteChangeEvent=cpfrTCSLastRouteChangeEvent, cpfrMapBackoffMaxTimer=cpfrMapBackoffMaxTimer, cpfrActiveProbeTargetAddressType=cpfrActiveProbeTargetAddressType, cpfrActiveProbeAssignedPfxAddress=cpfrActiveProbeAssignedPfxAddress, cpfrTCMActiveSTJitterAvg=cpfrTCMActiveSTJitterAvg, cpfrTCSrcMinPort=cpfrTCSrcMinPort, cpfrMCIndex=cpfrMCIndex, cpfrActiveProbeOperStatus=cpfrActiveProbeOperStatus, cpfrMatchEntry=cpfrMatchEntry, cpfrMCNetflowExporter=cpfrMCNetflowExporter, ciscoPfrMIBCompliances=ciscoPfrMIBCompliances, cpfrMapEventNotifCtrlThreshold=cpfrMapEventNotifCtrlThreshold, cpfrTrafficClassTable=cpfrTrafficClassTable, cpfrLearnPrefixesNumber=cpfrLearnPrefixesNumber, cpfrMCOperStatus=cpfrMCOperStatus, cpfrTCDstPrefixLen=cpfrTCDstPrefixLen, cpfrLearnListMethod=cpfrLearnListMethod, cpfrExitCostCalcMethod=cpfrExitCostCalcMethod, cpfrResolveRowStatus=cpfrResolveRowStatus, cpfrExitCostTierFee=cpfrExitCostTierFee, cpfrExitEntry=cpfrExitEntry, cpfrMCPrefixLearned=cpfrMCPrefixLearned, cpfrMCLoggingAdminStatus=cpfrMCLoggingAdminStatus, cpfrExitCostDiscard=cpfrExitCostDiscard, cpfrBRConnStatus=cpfrBRConnStatus, cpfrMapPeriodicTimer=cpfrMapPeriodicTimer, cpfrResolveEntry=cpfrResolveEntry, cpfrTCSType=cpfrTCSType)
