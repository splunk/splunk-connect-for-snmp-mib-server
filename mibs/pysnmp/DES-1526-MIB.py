#
# PySNMP MIB module DES-1526-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DES-1526-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:23:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, iso, Unsigned32, Bits, IpAddress, ObjectIdentity, mib_2, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, TimeTicks, Counter32, Gauge32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "iso", "Unsigned32", "Bits", "IpAddress", "ObjectIdentity", "mib-2", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Counter32", "Gauge32", "NotificationType", "Integer32")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_DES1526SeriesProd = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60)).setLabel("dlink-DES1526SeriesProd")
DES_1526 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60, 1)).setLabel("DES-1526")
class OwnerString(DisplayString):
    pass

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class PortList(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class RowStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

companyCommGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1))
companyMiscGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 3))
companyConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11))
companyTVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13))
companyPortTrunkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14))
commSetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 1), )
if mibBuilder.loadTexts: commSetTable.setStatus('mandatory')
commSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 1, 1), ).setIndexNames((0, "DES-1526-MIB", "commSetIndex"))
if mibBuilder.loadTexts: commSetEntry.setStatus('mandatory')
commSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commSetIndex.setStatus('mandatory')
commSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commSetName.setStatus('mandatory')
commSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commSetStatus.setStatus('mandatory')
commGetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 2), )
if mibBuilder.loadTexts: commGetTable.setStatus('mandatory')
commGetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 2, 1), ).setIndexNames((0, "DES-1526-MIB", "commGetIndex"))
if mibBuilder.loadTexts: commGetEntry.setStatus('mandatory')
commGetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commGetIndex.setStatus('mandatory')
commGetName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commGetName.setStatus('mandatory')
commGetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commGetStatus.setStatus('mandatory')
commTrapTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3), )
if mibBuilder.loadTexts: commTrapTable.setStatus('mandatory')
commTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1), ).setIndexNames((0, "DES-1526-MIB", "commTrapIndex"))
if mibBuilder.loadTexts: commTrapEntry.setStatus('mandatory')
commTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: commTrapIndex.setStatus('mandatory')
commTrapName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapName.setStatus('mandatory')
commTrapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapIpAddress.setStatus('mandatory')
commTrapVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapVlanId.setStatus('mandatory')
commTrapSNMPBootup = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapSNMPBootup.setStatus('mandatory')
commTrapSNMPTPLinkUpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapSNMPTPLinkUpDown.setStatus('mandatory')
commTrapSNMPFiberLinkUpDown = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapSNMPFiberLinkUpDown.setStatus('mandatory')
commTrapTrapAbnormalTPRXError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapAbnormalTPRXError.setStatus('mandatory')
commTrapTrapAbnormalTPTXError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapAbnormalTPTXError.setStatus('mandatory')
commTrapTrapAbnormalFiberRXError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapAbnormalFiberRXError.setStatus('mandatory')
commTrapTrapAbnormalFiberTXError = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapAbnormalFiberTXError.setStatus('mandatory')
commTrapTrapPOEPowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapPOEPowerFail.setStatus('mandatory')
commTrapTrapPOEPortOvercurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapPOEPortOvercurrent.setStatus('mandatory')
commTrapTrapPOEPortShort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapTrapPOEPortShort.setStatus('mandatory')
commTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 1, 3, 1, 16), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commTrapStatus.setStatus('mandatory')
miscStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: miscStatisticsReset.setStatus('mandatory')
configVerSwPrimary = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configVerSwPrimary.setStatus('mandatory')
configVerHwChipSet = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configVerHwChipSet.setStatus('mandatory')
configPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6), )
if mibBuilder.loadTexts: configPortTable.setStatus('mandatory')
configPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1), ).setIndexNames((0, "DES-1526-MIB", "configPort"))
if mibBuilder.loadTexts: configPortEntry.setStatus('mandatory')
configPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPort.setStatus('mandatory')
configPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disable", 1), ("auto", 2), ("rate10M-Half", 3), ("rate10M-Full", 4), ("rate100M-Half", 5), ("rate100M-Full", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPortSpeed.setStatus('mandatory')
configPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("rate10M-Half", 2), ("rate10M-Full", 3), ("rate100M-Half", 4), ("rate100M-Full", 5), ("rate1G-Half", 6), ("rate1G-Full", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPortOperStatus.setStatus('mandatory')
configPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPortFlowControl.setStatus('mandatory')
configPortFlowControlOper = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPortFlowControlOper.setStatus('mandatory')
configPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPortPriority.setStatus('mandatory')
configMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8), )
if mibBuilder.loadTexts: configMirrorTable.setStatus('mandatory')
configMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8, 1), ).setIndexNames((0, "DES-1526-MIB", "configMirrorId"))
if mibBuilder.loadTexts: configMirrorEntry.setStatus('mandatory')
configMirrorId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configMirrorId.setStatus('mandatory')
configMirrorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("Rx", 1), ("Tx", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMirrorMode.setStatus('mandatory')
configMirrorMon = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMirrorMon.setStatus('mandatory')
configMirrorSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMirrorSrc.setStatus('mandatory')
configMirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 8, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMirrorStatus.setStatus('mandatory')
configSNMPEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSNMPEnable.setStatus('mandatory')
configIpAssignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("dhcp", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIpAssignmentMode.setStatus('mandatory')
configPhysAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configPhysAddress.setStatus('mandatory')
configPasswordAdmin = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: configPasswordAdmin.setStatus('mandatory')
configIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configIpAddress.setStatus('mandatory')
configNetMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configNetMask.setStatus('mandatory')
configGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configGateway.setStatus('mandatory')
configSave = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configSave.setStatus('mandatory')
configRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 11, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restore", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configRestoreDefaults.setStatus('mandatory')
tvlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 1), )
if mibBuilder.loadTexts: tvlanTable.setStatus('mandatory')
tvlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 1, 1), ).setIndexNames((0, "DES-1526-MIB", "tvlanId"))
if mibBuilder.loadTexts: tvlanEntry.setStatus('mandatory')
tvlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tvlanId.setStatus('mandatory')
tvlanMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanMember.setStatus('mandatory')
tvlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 1, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanUntaggedPorts.setStatus('mandatory')
tvlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanStatus.setStatus('mandatory')
tvlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 2), )
if mibBuilder.loadTexts: tvlanPortTable.setStatus('mandatory')
tvlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 2, 1), ).setIndexNames((0, "DES-1526-MIB", "tvlanPortPortId"))
if mibBuilder.loadTexts: tvlanPortEntry.setStatus('mandatory')
tvlanPortPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tvlanPortPortId.setStatus('mandatory')
tvlanPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 13, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tvlanPortVlanId.setStatus('mandatory')
portTrunkTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14, 1), )
if mibBuilder.loadTexts: portTrunkTable.setStatus('mandatory')
portTrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14, 1, 1), ).setIndexNames((0, "DES-1526-MIB", "portTrunkId"), (0, "DES-1526-MIB", "portTrunkMember"))
if mibBuilder.loadTexts: portTrunkEntry.setStatus('mandatory')
portTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkId.setStatus('mandatory')
portTrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14, 1, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkMember.setStatus('mandatory')
portTrunkMemberValue = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrunkMemberValue.setStatus('mandatory')
portTrunkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 60, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTrunkEnable.setStatus('mandatory')
swFiberInsert = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 60, 1) + (0,1))
swFiberRemove = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 60, 1) + (0,2))
swFiberAbnormalRXError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 60, 1) + (0,3))
swFiberAbnormalTXError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 60, 1) + (0,4))
swTPAbnormalRXError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 60, 1) + (0,5))
swTPAbnormalTXError = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 60, 1) + (0,6))
mibBuilder.exportSymbols("DES-1526-MIB", OwnerString=OwnerString, commGetEntry=commGetEntry, tvlanId=tvlanId, commTrapTrapPOEPowerFail=commTrapTrapPOEPowerFail, tvlanPortPortId=tvlanPortPortId, dlink_products=dlink_products, dlink_DES1526SeriesProd=dlink_DES1526SeriesProd, configRestoreDefaults=configRestoreDefaults, companyConfigGroup=companyConfigGroup, configPortSpeed=configPortSpeed, commGetStatus=commGetStatus, configSave=configSave, DES_1526=DES_1526, commTrapEntry=commTrapEntry, swFiberInsert=swFiberInsert, tvlanEntry=tvlanEntry, tvlanMember=tvlanMember, configMirrorMon=configMirrorMon, configPortFlowControl=configPortFlowControl, commTrapSNMPTPLinkUpDown=commTrapSNMPTPLinkUpDown, commTrapTrapPOEPortShort=commTrapTrapPOEPortShort, tvlanPortEntry=tvlanPortEntry, configMirrorSrc=configMirrorSrc, commTrapTrapAbnormalFiberTXError=commTrapTrapAbnormalFiberTXError, commTrapIndex=commTrapIndex, portTrunkTable=portTrunkTable, companyTVlanGroup=companyTVlanGroup, configMirrorEntry=configMirrorEntry, configNetMask=configNetMask, swTPAbnormalTXError=swTPAbnormalTXError, miscStatisticsReset=miscStatisticsReset, tvlanPortTable=tvlanPortTable, configMirrorMode=configMirrorMode, swTPAbnormalRXError=swTPAbnormalRXError, commSetStatus=commSetStatus, MacAddress=MacAddress, companyPortTrunkGroup=companyPortTrunkGroup, tvlanTable=tvlanTable, commTrapTrapPOEPortOvercurrent=commTrapTrapPOEPortOvercurrent, configVerSwPrimary=configVerSwPrimary, commTrapSNMPBootup=commTrapSNMPBootup, swFiberAbnormalRXError=swFiberAbnormalRXError, configMirrorStatus=configMirrorStatus, commSetIndex=commSetIndex, configPortPriority=configPortPriority, commTrapTrapAbnormalTPRXError=commTrapTrapAbnormalTPRXError, commTrapTrapAbnormalTPTXError=commTrapTrapAbnormalTPTXError, PortList=PortList, commTrapTrapAbnormalFiberRXError=commTrapTrapAbnormalFiberRXError, configSNMPEnable=configSNMPEnable, portTrunkMemberValue=portTrunkMemberValue, configPortOperStatus=configPortOperStatus, RowStatus=RowStatus, configIpAddress=configIpAddress, commTrapVlanId=commTrapVlanId, commGetIndex=commGetIndex, tvlanStatus=tvlanStatus, commGetTable=commGetTable, swFiberRemove=swFiberRemove, portTrunkId=portTrunkId, configPortEntry=configPortEntry, portTrunkEnable=portTrunkEnable, configPhysAddress=configPhysAddress, d_link=d_link, configMirrorTable=configMirrorTable, portTrunkEntry=portTrunkEntry, commSetEntry=commSetEntry, configVerHwChipSet=configVerHwChipSet, swFiberAbnormalTXError=swFiberAbnormalTXError, portTrunkMember=portTrunkMember, companyCommGroup=companyCommGroup, commGetName=commGetName, commTrapName=commTrapName, commSetName=commSetName, configPortTable=configPortTable, commTrapStatus=commTrapStatus, configGateway=configGateway, configPortFlowControlOper=configPortFlowControlOper, configPasswordAdmin=configPasswordAdmin, commSetTable=commSetTable, tvlanPortVlanId=tvlanPortVlanId, configIpAssignmentMode=configIpAssignmentMode, commTrapTable=commTrapTable, tvlanUntaggedPorts=tvlanUntaggedPorts, companyMiscGroup=companyMiscGroup, commTrapSNMPFiberLinkUpDown=commTrapSNMPFiberLinkUpDown, configMirrorId=configMirrorId, configPort=configPort, commTrapIpAddress=commTrapIpAddress)
