#
# PySNMP MIB module XUPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XUPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:38:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, enterprises, NotificationType, Integer32, MibIdentifier, iso, TimeTicks, Counter64, Unsigned32, ModuleIdentity, ObjectIdentity, Counter32, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "enterprises", "NotificationType", "Integer32", "MibIdentifier", "iso", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Counter32", "NotificationType", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
powerware = MibIdentifier((1, 3, 6, 1, 4, 1, 534))
xups = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1))
xupsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 1))
xupsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 2))
xupsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 3))
xupsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 4))
xupsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 5))
xupsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 6))
xupsAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7))
xupsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 8))
xupsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 9))
xupsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 10))
xupsTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11))
xupsRecep = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 12))
xupsTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 13))
xupsObjectId = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2))
powerwareEthernetSnmpAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 1))
powerwareNetworkSnmpAdapterEther = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 2))
powerwareNetworkSnmpAdapterToken = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 3))
onlinetDaemon = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 4))
connectUPSAdapterEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 5))
powerwareNetworkDigitalIOEther = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 6))
connectUPSAdapterTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 7))
simpleSnmpAdapter = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 2, 8))
xupsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentManufacturer.setStatus('mandatory')
xupsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentModel.setStatus('mandatory')
xupsIdentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentSoftwareVersion.setStatus('mandatory')
xupsIdentOemCode = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsIdentOemCode.setStatus('mandatory')
xupsBatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatTimeRemaining.setStatus('mandatory')
xupsBatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatVoltage.setStatus('mandatory')
xupsBatCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatCurrent.setStatus('mandatory')
xupsBatCapacity = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatCapacity.setStatus('mandatory')
xupsBatteryAbmStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("batteryCharging", 1), ("batteryDischarging", 2), ("batteryFloating", 3), ("batteryResting", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBatteryAbmStatus.setStatus('mandatory')
xupsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputFrequency.setStatus('mandatory')
xupsInputLineBads = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputLineBads.setStatus('mandatory')
xupsInputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputNumPhases.setStatus('mandatory')
xupsInputTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 3, 4), )
if mibBuilder.loadTexts: xupsInputTable.setStatus('mandatory')
xupsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1), ).setIndexNames((0, "XUPS-MIB", "xupsInputPhase"))
if mibBuilder.loadTexts: xupsInputEntry.setStatus('mandatory')
xupsInputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputPhase.setStatus('mandatory')
xupsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputVoltage.setStatus('mandatory')
xupsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputCurrent.setStatus('mandatory')
xupsInputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputWatts.setStatus('mandatory')
xupsInputSource = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("primaryUtility", 3), ("bypassFeed", 4), ("secondaryUtility", 5), ("generator", 6), ("flywheel", 7), ("fuelcell", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsInputSource.setStatus('mandatory')
xupsOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputLoad.setStatus('mandatory')
xupsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputFrequency.setStatus('mandatory')
xupsOutputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputNumPhases.setStatus('mandatory')
xupsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 4, 4), )
if mibBuilder.loadTexts: xupsOutputTable.setStatus('mandatory')
xupsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1), ).setIndexNames((0, "XUPS-MIB", "xupsOutputPhase"))
if mibBuilder.loadTexts: xupsOutputEntry.setStatus('mandatory')
xupsOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputPhase.setStatus('mandatory')
xupsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputVoltage.setStatus('mandatory')
xupsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputCurrent.setStatus('mandatory')
xupsOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputWatts.setStatus('mandatory')
xupsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7), ("parallelCapacity", 8), ("parallelRedundant", 9), ("highEfficiencyMode", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsOutputSource.setStatus('mandatory')
xupsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassFrequency.setStatus('mandatory')
xupsBypassNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassNumPhases.setStatus('mandatory')
xupsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 5, 3), )
if mibBuilder.loadTexts: xupsBypassTable.setStatus('mandatory')
xupsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1), ).setIndexNames((0, "XUPS-MIB", "xupsBypassPhase"))
if mibBuilder.loadTexts: xupsBypassEntry.setStatus('mandatory')
xupsBypassPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassPhase.setStatus('mandatory')
xupsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsBypassVoltage.setStatus('mandatory')
xupsEnvAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvAmbientTemp.setStatus('mandatory')
xupsEnvAmbientLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvAmbientLowerLimit.setStatus('mandatory')
xupsEnvAmbientUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvAmbientUpperLimit.setStatus('mandatory')
xupsEnvAmbientHumidity = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvAmbientHumidity.setStatus('mandatory')
xupsEnvRemoteTemp = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvRemoteTemp.setStatus('mandatory')
xupsEnvRemoteHumidity = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvRemoteHumidity.setStatus('mandatory')
xupsEnvNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsEnvNumContacts.setStatus('mandatory')
xupsContactSenseTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 6, 8), )
if mibBuilder.loadTexts: xupsContactSenseTable.setStatus('mandatory')
xupsContactsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 6, 8, 1), ).setIndexNames((0, "XUPS-MIB", "xupsContactIndex"))
if mibBuilder.loadTexts: xupsContactsTableEntry.setStatus('mandatory')
xupsContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: xupsContactIndex.setStatus('mandatory')
xupsContactType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("anyChange", 3), ("notUsed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsContactType.setStatus('mandatory')
xupsContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("openWithNotice", 3), ("closedWithNotice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsContactState.setStatus('mandatory')
xupsContactDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 6, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsContactDescr.setStatus('mandatory')
xupsEnvRemoteTempLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvRemoteTempLowerLimit.setStatus('mandatory')
xupsEnvRemoteTempUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvRemoteTempUpperLimit.setStatus('mandatory')
xupsEnvRemoteHumidityLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvRemoteHumidityLowerLimit.setStatus('mandatory')
xupsEnvRemoteHumidityUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsEnvRemoteHumidityUpperLimit.setStatus('mandatory')
xupsAlarms = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 7, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarms.setStatus('mandatory')
xupsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 7, 2), )
if mibBuilder.loadTexts: xupsAlarmTable.setStatus('mandatory')
xupsAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1), ).setIndexNames((0, "XUPS-MIB", "xupsAlarmID"))
if mibBuilder.loadTexts: xupsAlarmEntry.setStatus('mandatory')
xupsAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmID.setStatus('mandatory')
xupsAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmDescr.setStatus('mandatory')
xupsAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmTime.setStatus('mandatory')
xupsOnBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 3))
xupsLowBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 4))
xupsUtilityPowerRestored = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 5))
xupsReturnFromLowBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 6))
xupsOutputOverload = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 7))
xupsInternalFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 8))
xupsBatteryDischarged = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 9))
xupsInverterFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 10))
xupsOnBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 11))
xupsBypassNotAvailable = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 12))
xupsOutputOff = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 13))
xupsInputFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 14))
xupsBuildingAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 15))
xupsShutdownImminent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 16))
xupsOnInverter = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 17))
xupsAlarmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 7, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmNumEvents.setStatus('mandatory')
xupsAlarmEventTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 7, 19), )
if mibBuilder.loadTexts: xupsAlarmEventTable.setStatus('mandatory')
xupsAlarmEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1), ).setIndexNames((0, "XUPS-MIB", "xupsAlarmEventID"))
if mibBuilder.loadTexts: xupsAlarmEventEntry.setStatus('mandatory')
xupsAlarmEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventID.setStatus('deprecated')
xupsAlarmEventDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventDateAndTime.setStatus('deprecated')
xupsAlarmEventKind = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("occurred", 1), ("cleared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventKind.setStatus('deprecated')
xupsAlarmEventDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventDescr.setStatus('deprecated')
xupsAlarmEventMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 7, 19, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsAlarmEventMsg.setStatus('mandatory')
xupsBreakerOpen = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 20))
xupsAlarmEntryAdded = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 21))
xupsAlarmEntryRemoved = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 22))
xupsAlarmBatteryBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 23))
xupsOutputOffAsRequested = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 24))
xupsDiagnosticTestFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 25))
xupsCommunicationsLost = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 26))
xupsUpsShutdownPending = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 27))
xupsAlarmTestInProgress = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 28))
xupsAmbientTempBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 29))
xupsLossOfRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 30))
xupsAlarmTempBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 31))
xupsAlarmChargerFailed = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 32))
xupsAlarmFanFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 33))
xupsAlarmFuseFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 34))
xupsPowerSwitchBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 35))
xupsModuleFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 36))
xupsOnAlternatePowerSource = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 37))
xupsAltPowerNotAvailable = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 38))
xupsNoticeCondition = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 39))
xupsRemoteTempBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 40))
xupsRemoteHumidityBad = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 7, 41))
xupsTestBattery = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("startTest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsTestBattery.setStatus('mandatory')
xupsTestBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("notSupported", 5), ("inhibited", 6), ("scheduled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTestBatteryStatus.setStatus('mandatory')
xupsControlOutputOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOffDelay.setStatus('mandatory')
xupsControlOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOnDelay.setStatus('mandatory')
xupsControlOutputOffTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOffTrapDelay.setStatus('mandatory')
xupsControlOutputOnTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlOutputOnTrapDelay.setStatus('deprecated')
xupsControlToBypassDelay = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsControlToBypassDelay.setStatus('mandatory')
xupsLoadShedSecsWithRestart = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsLoadShedSecsWithRestart.setStatus('mandatory')
xupsConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigOutputVoltage.setStatus('mandatory')
xupsConfigInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigInputVoltage.setStatus('mandatory')
xupsConfigOutputWatts = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigOutputWatts.setStatus('mandatory')
xupsConfigOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigOutputFreq.setStatus('mandatory')
xupsConfigDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsConfigDateAndTime.setStatus('mandatory')
xupsConfigLowOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigLowOutputVoltageLimit.setStatus('mandatory')
xupsConfigHighOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsConfigHighOutputVoltageLimit.setStatus('mandatory')
xupsMaxTrapLevel = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("critical", 2), ("major", 3), ("allTraps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsMaxTrapLevel.setStatus('mandatory')
xupsSendTrapType = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stnd", 1), ("xups", 2), ("stndPlus", 3), ("xupsPlus", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsSendTrapType.setStatus('mandatory')
xupsTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79)))
if mibBuilder.loadTexts: xupsTrapMessage.setStatus('mandatory')
xupsNumReceptacles = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsNumReceptacles.setStatus('mandatory')
xupsRecepTable = MibTable((1, 3, 6, 1, 4, 1, 534, 1, 12, 2), )
if mibBuilder.loadTexts: xupsRecepTable.setStatus('mandatory')
xupsRecepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1), ).setIndexNames((0, "XUPS-MIB", "xupsRecepIndex"))
if mibBuilder.loadTexts: xupsRecepEntry.setStatus('mandatory')
xupsRecepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsRecepIndex.setStatus('mandatory')
xupsRecepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("pendingOff", 3), ("pendingOn", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsRecepStatus.setStatus('mandatory')
xupsRecepOffDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepOffDelaySecs.setStatus('mandatory')
xupsRecepOnDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepOnDelaySecs.setStatus('mandatory')
xupsRecepAutoOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepAutoOffDelay.setStatus('mandatory')
xupsRecepAutoOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepAutoOnDelay.setStatus('mandatory')
xupsRecepShedSecsWithRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 1, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsRecepShedSecsWithRestart.setStatus('mandatory')
xupsTopologyType = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTopologyType.setStatus('mandatory')
xupsTopoMachineCode = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTopoMachineCode.setStatus('mandatory')
xupsTopoUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xupsTopoUnitNumber.setStatus('mandatory')
xupsTopoPowerStrategy = MibScalar((1, 3, 6, 1, 4, 1, 534, 1, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("highAlert", 1), ("standard", 2), ("enableHighEfficiency", 3), ("immediateHighEfficiency", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xupsTopoPowerStrategy.setStatus('mandatory')
xupsNull = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 0))
xupsTrapBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 0, 0))
xupsTrapSource = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11, 4))
xupsTrapDefined = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1))
xupsTrapPortN = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2))
xupstbControlOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,1))
xupstbControlOn = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,2))
xupstbOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,3))
xupstbLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,4))
xupstbUtilityPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,5))
xupstbReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,6))
xupstbOutputOverload = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,7))
xupstbInternalFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,8))
xupstbBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,9))
xupstbInverterFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,10))
xupstbOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,11))
xupstbBypassNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,12))
xupstbOutputOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,13))
xupstbInputFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,14))
xupstbBuildingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,15))
xupstbShutdownImminent = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,16))
xupstbOnInverter = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,17))
xupstbBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,20))
xupstbAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,21))
xupstbAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 0, 0) + (0,22))
xupstdControlOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,1)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdControlOn = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,2)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,3)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,4)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdUtilityPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,5)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,6)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdOutputOverload = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,7)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdInternalFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,8)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,9)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdInverterFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,10)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,11)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdBypassNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,12)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdOutputOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,13)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdInputFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,14)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdBuildingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,15)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdShutdownImminent = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,16)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdOnInverter = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,17)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,20)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,21)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,22)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdAlarmBatteryBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,23)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdOutputOffAsRequested = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,24)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdDiagnosticTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,25)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdCommunicationsLost = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,26)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdUpsShutdownPending = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,27)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdAlarmTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,28)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdAmbientTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,29)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsEnvAmbientTemp"), ("XUPS-MIB", "xupsEnvAmbientLowerLimit"), ("XUPS-MIB", "xupsEnvAmbientUpperLimit"))
xupstdContactActiveNotice = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,30)).setObjects(("XUPS-MIB", "xupsContactIndex"), ("XUPS-MIB", "xupsContactType"), ("XUPS-MIB", "xupsContactState"), ("XUPS-MIB", "xupsContactDescr"))
xupstdContactInactiveNotice = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,31)).setObjects(("XUPS-MIB", "xupsContactIndex"), ("XUPS-MIB", "xupsContactType"), ("XUPS-MIB", "xupsContactState"), ("XUPS-MIB", "xupsContactDescr"))
xupstdLossOfRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,32)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdAlarmTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,33)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdAlarmChargerFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,34)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdAlarmFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,35)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdAlarmFuseFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,36)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdPowerSwitchBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,37)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdModuleFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,38)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdOnAlternatePowerSource = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,39)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsInputSource"))
xupstdAltPowerNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,40)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdNoticeCondition = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,41)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"))
xupstdRemoteTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,42)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsEnvRemoteTemp"), ("XUPS-MIB", "xupsEnvRemoteTempLowerLimit"), ("XUPS-MIB", "xupsEnvRemoteTempUpperLimit"))
xupstdRemoteHumidityBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 1) + (0,43)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsEnvRemoteHumidity"), ("XUPS-MIB", "xupsEnvRemoteHumidityLowerLimit"), ("XUPS-MIB", "xupsEnvRemoteHumidityUpperLimit"))
xupstpControlOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,1)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpControlOn = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,2)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpOnBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,3)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,4)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpUtilityPowerRestored = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,5)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpReturnFromLowBattery = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,6)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpOutputOverload = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,7)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpInternalFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,8)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpBatteryDischarged = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,9)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpInverterFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,10)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpOnBypass = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,11)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpBypassNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,12)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpOutputOff = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,13)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpInputFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,14)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpBuildingAlarm = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,15)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpShutdownImminent = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,16)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpOnInverter = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,17)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpBreakerOpen = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,20)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpAlarmEntryAdded = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,21)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpAlarmEntryRemoved = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,22)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpAlarmBatteryBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,23)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpOutputOffAsRequested = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,24)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpDiagnosticTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,25)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpCommunicationsLost = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,26)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpUpsShutdownPending = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,27)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpAlarmTestInProgress = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,28)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpAmbientTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,29)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("XUPS-MIB", "xupsEnvAmbientTemp"), ("XUPS-MIB", "xupsEnvAmbientLowerLimit"), ("XUPS-MIB", "xupsEnvAmbientUpperLimit"))
xupstpLossOfRedundancy = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,32)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpAlarmTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,33)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpAlarmChargerFailed = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,34)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpAlarmFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,35)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpAlarmFuseFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,36)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpPowerSwitchBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,37)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpModuleFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,38)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpOnAlternatePowerSource = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,39)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("XUPS-MIB", "xupsInputSource"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpAltPowerNotAvailable = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,40)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpNoticeCondition = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,41)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
xupstpRemoteTempBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,42)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("XUPS-MIB", "xupsEnvRemoteTemp"), ("XUPS-MIB", "xupsEnvRemoteTempLowerLimit"), ("XUPS-MIB", "xupsEnvRemoteTempUpperLimit"))
xupstpRemoteHumidityBad = NotificationType((1, 3, 6, 1, 4, 1, 534, 1, 11, 4, 2) + (0,43)).setObjects(("XUPS-MIB", "xupsAlarmID"), ("XUPS-MIB", "xupsAlarmDescr"), ("XUPS-MIB", "xupsTrapMessage"), ("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"), ("XUPS-MIB", "xupsEnvRemoteHumidity"), ("XUPS-MIB", "xupsEnvRemoteHumidityLowerLimit"), ("XUPS-MIB", "xupsEnvRemoteHumidityUpperLimit"))
mibBuilder.exportSymbols("XUPS-MIB", xupsOutputFrequency=xupsOutputFrequency, xupsObjectId=xupsObjectId, xupsBypassFrequency=xupsBypassFrequency, xupsContactState=xupsContactState, xupsControlOutputOnTrapDelay=xupsControlOutputOnTrapDelay, xupstdControlOn=xupstdControlOn, xupsEnvRemoteTempUpperLimit=xupsEnvRemoteTempUpperLimit, xupsEnvAmbientUpperLimit=xupsEnvAmbientUpperLimit, xupstpPowerSwitchBad=xupstpPowerSwitchBad, xupsBypassEntry=xupsBypassEntry, xupsAlarmFanFailure=xupsAlarmFanFailure, xupsInputSource=xupsInputSource, xupstbControlOff=xupstbControlOff, xupsAlarmTime=xupsAlarmTime, xupsOutputSource=xupsOutputSource, xupstdNoticeCondition=xupstdNoticeCondition, xupstdBypassNotAvailable=xupstdBypassNotAvailable, xupstdAlarmFuseFailure=xupstdAlarmFuseFailure, xupstdOnBattery=xupstdOnBattery, xupstbBypassNotAvailable=xupstbBypassNotAvailable, xupsControl=xupsControl, xupstdAltPowerNotAvailable=xupstdAltPowerNotAvailable, xupstdContactActiveNotice=xupstdContactActiveNotice, xupsAlarmID=xupsAlarmID, xupsTopology=xupsTopology, connectUPSAdapterEthernet=connectUPSAdapterEthernet, xupsEnvNumContacts=xupsEnvNumContacts, xupsOutputCurrent=xupsOutputCurrent, xupstpModuleFailure=xupstpModuleFailure, xupsAlarmChargerFailed=xupsAlarmChargerFailed, xupstdRemoteTempBad=xupstdRemoteTempBad, xupsBatteryDischarged=xupsBatteryDischarged, xupstdOutputOff=xupstdOutputOff, xupsAlarmEventKind=xupsAlarmEventKind, xupsIdent=xupsIdent, xupstpInputFailure=xupstpInputFailure, xupsInputNumPhases=xupsInputNumPhases, xupsInputTable=xupsInputTable, xupsEnvRemoteHumidityLowerLimit=xupsEnvRemoteHumidityLowerLimit, xupsTestBattery=xupsTestBattery, xupsTrapMessage=xupsTrapMessage, xupsInputFrequency=xupsInputFrequency, xupsContactDescr=xupsContactDescr, xupsEnvAmbientLowerLimit=xupsEnvAmbientLowerLimit, xupsTrapBasic=xupsTrapBasic, xupsEnvRemoteHumidity=xupsEnvRemoteHumidity, xupsSendTrapType=xupsSendTrapType, xupstpOutputOff=xupstpOutputOff, xupsBypassNotAvailable=xupsBypassNotAvailable, xupsOutputTable=xupsOutputTable, xupsEnvironment=xupsEnvironment, xupstdShutdownImminent=xupstdShutdownImminent, xupstpBreakerOpen=xupstpBreakerOpen, xupstpRemoteTempBad=xupstpRemoteTempBad, xupstbOutputOff=xupstbOutputOff, xupstdOnInverter=xupstdOnInverter, xupsInput=xupsInput, xupsOutputNumPhases=xupsOutputNumPhases, xupsOutputEntry=xupsOutputEntry, xupsConfigOutputVoltage=xupsConfigOutputVoltage, xupstdAlarmBatteryBad=xupstdAlarmBatteryBad, xupsAlarmTable=xupsAlarmTable, xupstpAlarmFuseFailure=xupstpAlarmFuseFailure, xupstdRemoteHumidityBad=xupstdRemoteHumidityBad, xupstbReturnFromLowBattery=xupstbReturnFromLowBattery, xupstpLossOfRedundancy=xupstpLossOfRedundancy, xupsAltPowerNotAvailable=xupsAltPowerNotAvailable, xupsBypassNumPhases=xupsBypassNumPhases, xupsOutputOverload=xupsOutputOverload, xupstdAlarmEntryAdded=xupstdAlarmEntryAdded, xupstdLossOfRedundancy=xupstdLossOfRedundancy, xupsContactType=xupsContactType, xupstdReturnFromLowBattery=xupstdReturnFromLowBattery, xupsConfigHighOutputVoltageLimit=xupsConfigHighOutputVoltageLimit, xupstpOnAlternatePowerSource=xupstpOnAlternatePowerSource, xupstbBuildingAlarm=xupstbBuildingAlarm, xupstdContactInactiveNotice=xupstdContactInactiveNotice, xupsRecepIndex=xupsRecepIndex, xupsAlarmEventEntry=xupsAlarmEventEntry, xupsIdentModel=xupsIdentModel, xupstdUtilityPowerRestored=xupstdUtilityPowerRestored, xupstdAlarmEntryRemoved=xupstdAlarmEntryRemoved, xupstdAlarmTestInProgress=xupstdAlarmTestInProgress, xupsBatVoltage=xupsBatVoltage, xupstpAlarmTempBad=xupstpAlarmTempBad, xupsAlarm=xupsAlarm, xupstdInputFailure=xupstdInputFailure, xupstpControlOff=xupstpControlOff, xupsInputEntry=xupsInputEntry, xupstpBypassNotAvailable=xupstpBypassNotAvailable, xupsEnvRemoteTempLowerLimit=xupsEnvRemoteTempLowerLimit, xupstpDiagnosticTestFailed=xupstpDiagnosticTestFailed, xupsInputFailure=xupsInputFailure, xupsAlarmEntry=xupsAlarmEntry, xupsIdentOemCode=xupsIdentOemCode, xupstbBatteryDischarged=xupstbBatteryDischarged, xupsBatteryAbmStatus=xupsBatteryAbmStatus, xupstdAmbientTempBad=xupstdAmbientTempBad, xupsBattery=xupsBattery, xupstpAmbientTempBad=xupstpAmbientTempBad, xupsAlarmEventMsg=xupsAlarmEventMsg, xupsRemoteHumidityBad=xupsRemoteHumidityBad, xupsAlarmEventID=xupsAlarmEventID, xupstpBatteryDischarged=xupstpBatteryDischarged, xupstdOnBypass=xupstdOnBypass, xupsRecepTable=xupsRecepTable, xupstpLowBattery=xupstpLowBattery, xupsNumReceptacles=xupsNumReceptacles, xupsNull=xupsNull, xupstbInputFailure=xupstbInputFailure, xupstdBreakerOpen=xupstdBreakerOpen, xupstpUpsShutdownPending=xupstpUpsShutdownPending, xupsReturnFromLowBattery=xupsReturnFromLowBattery, xupsConfigOutputFreq=xupsConfigOutputFreq, xupsRecepOffDelaySecs=xupsRecepOffDelaySecs, xupstpAlarmTestInProgress=xupstpAlarmTestInProgress, xupstdAlarmChargerFailed=xupstdAlarmChargerFailed, xupstpAltPowerNotAvailable=xupstpAltPowerNotAvailable, xupsOnAlternatePowerSource=xupsOnAlternatePowerSource, xupstbUtilityPowerRestored=xupstbUtilityPowerRestored, xupsAlarmEventDescr=xupsAlarmEventDescr, xupsUpsShutdownPending=xupsUpsShutdownPending, xupsAlarmFuseFailure=xupsAlarmFuseFailure, xupsRecepAutoOnDelay=xupsRecepAutoOnDelay, xupstdCommunicationsLost=xupstdCommunicationsLost, xupstdAlarmFanFailure=xupstdAlarmFanFailure, xups=xups, xupsContactSenseTable=xupsContactSenseTable, xupstbOnBypass=xupstbOnBypass, xupsEnvRemoteHumidityUpperLimit=xupsEnvRemoteHumidityUpperLimit, xupstdOnAlternatePowerSource=xupstdOnAlternatePowerSource, xupstpAlarmChargerFailed=xupstpAlarmChargerFailed, xupsTrapDefined=xupsTrapDefined, xupstpCommunicationsLost=xupstpCommunicationsLost, xupsAlarmEventTable=xupsAlarmEventTable, xupstpOutputOverload=xupstpOutputOverload, xupsBypass=xupsBypass, xupsAlarmTempBad=xupsAlarmTempBad, xupstdDiagnosticTestFailed=xupstdDiagnosticTestFailed, xupsRecep=xupsRecep, xupsLossOfRedundancy=xupsLossOfRedundancy, xupsBatCurrent=xupsBatCurrent, xupsTrapPortN=xupsTrapPortN, xupsBatTimeRemaining=xupsBatTimeRemaining, xupsAlarmEntryRemoved=xupsAlarmEntryRemoved, xupstpOutputOffAsRequested=xupstpOutputOffAsRequested, xupsAlarmDescr=xupsAlarmDescr, xupsEnvAmbientHumidity=xupsEnvAmbientHumidity, xupsEnvRemoteTemp=xupsEnvRemoteTemp, xupsBypassVoltage=xupsBypassVoltage, xupsBuildingAlarm=xupsBuildingAlarm, xupstbOnInverter=xupstbOnInverter, xupstbInternalFailure=xupstbInternalFailure, xupsRemoteTempBad=xupsRemoteTempBad, xupsControlOutputOffDelay=xupsControlOutputOffDelay, xupsTrapSource=xupsTrapSource, xupstbShutdownImminent=xupstbShutdownImminent, xupstdInverterFailure=xupstdInverterFailure, xupstdOutputOverload=xupstdOutputOverload, powerwareNetworkDigitalIOEther=powerwareNetworkDigitalIOEther, xupsInputLineBads=xupsInputLineBads, xupstpUtilityPowerRestored=xupstpUtilityPowerRestored, xupsAmbientTempBad=xupsAmbientTempBad, xupstdInternalFailure=xupstdInternalFailure, xupsTest=xupsTest, xupsOutputPhase=xupsOutputPhase, xupsInternalFailure=xupsInternalFailure, xupstbOnBattery=xupstbOnBattery, xupsOutputOff=xupsOutputOff, xupsRecepOnDelaySecs=xupsRecepOnDelaySecs, xupsConfig=xupsConfig, xupstbAlarmEntryRemoved=xupstbAlarmEntryRemoved, xupsRecepEntry=xupsRecepEntry, xupstdOutputOffAsRequested=xupstdOutputOffAsRequested, xupstbInverterFailure=xupstbInverterFailure, xupsTopoUnitNumber=xupsTopoUnitNumber, xupsNoticeCondition=xupsNoticeCondition, xupsContactIndex=xupsContactIndex, xupsConfigDateAndTime=xupsConfigDateAndTime, xupstpInternalFailure=xupstpInternalFailure, xupsPowerSwitchBad=xupsPowerSwitchBad, powerwareEthernetSnmpAdapter=powerwareEthernetSnmpAdapter, xupsOnBattery=xupsOnBattery, xupsLowBattery=xupsLowBattery, powerwareNetworkSnmpAdapterEther=powerwareNetworkSnmpAdapterEther, xupstpAlarmBatteryBad=xupstpAlarmBatteryBad, xupsTrapControl=xupsTrapControl, xupstpAlarmEntryRemoved=xupstpAlarmEntryRemoved, simpleSnmpAdapter=simpleSnmpAdapter, onlinetDaemon=onlinetDaemon, xupsBreakerOpen=xupsBreakerOpen, xupsTopoPowerStrategy=xupsTopoPowerStrategy, xupstbControlOn=xupstbControlOn, xupstdBuildingAlarm=xupstdBuildingAlarm, xupsOnInverter=xupsOnInverter, xupsControlOutputOffTrapDelay=xupsControlOutputOffTrapDelay, xupsAlarmBatteryBad=xupsAlarmBatteryBad, xupstbAlarmEntryAdded=xupstbAlarmEntryAdded, xupsAlarmEntryAdded=xupsAlarmEntryAdded, xupsInputVoltage=xupsInputVoltage, xupsConfigLowOutputVoltageLimit=xupsConfigLowOutputVoltageLimit, xupstdUpsShutdownPending=xupstdUpsShutdownPending, xupsAlarmEventDateAndTime=xupsAlarmEventDateAndTime, xupstbOutputOverload=xupstbOutputOverload, xupsInputWatts=xupsInputWatts, connectUPSAdapterTokenRing=connectUPSAdapterTokenRing, xupstpOnInverter=xupstpOnInverter, xupsInputPhase=xupsInputPhase, xupsContactsTableEntry=xupsContactsTableEntry, xupstpAlarmFanFailure=xupstpAlarmFanFailure, xupsLoadShedSecsWithRestart=xupsLoadShedSecsWithRestart, xupsEnvAmbientTemp=xupsEnvAmbientTemp, xupsRecepShedSecsWithRestart=xupsRecepShedSecsWithRestart, xupsOutputOffAsRequested=xupsOutputOffAsRequested, xupstpInverterFailure=xupstpInverterFailure, xupsBypassTable=xupsBypassTable, xupsRecepAutoOffDelay=xupsRecepAutoOffDelay, xupsModuleFailure=xupsModuleFailure, xupstdLowBattery=xupstdLowBattery, xupsAlarmNumEvents=xupsAlarmNumEvents, xupsUtilityPowerRestored=xupsUtilityPowerRestored, xupsConfigInputVoltage=xupsConfigInputVoltage, xupsInverterFailure=xupsInverterFailure, xupstpReturnFromLowBattery=xupstpReturnFromLowBattery, xupsOutput=xupsOutput, xupsTestBatteryStatus=xupsTestBatteryStatus, xupsOutputVoltage=xupsOutputVoltage, xupstpRemoteHumidityBad=xupstpRemoteHumidityBad, xupsOutputLoad=xupsOutputLoad, xupsBypassPhase=xupsBypassPhase, xupsIdentManufacturer=xupsIdentManufacturer, xupsAlarms=xupsAlarms, xupstdAlarmTempBad=xupstdAlarmTempBad, xupstpOnBypass=xupstpOnBypass, xupstpShutdownImminent=xupstpShutdownImminent, xupsOnBypass=xupsOnBypass, xupsBatCapacity=xupsBatCapacity, xupsTopoMachineCode=xupsTopoMachineCode, xupsRecepStatus=xupsRecepStatus, powerware=powerware, xupsInputCurrent=xupsInputCurrent, xupstbLowBattery=xupstbLowBattery, xupstdPowerSwitchBad=xupstdPowerSwitchBad, xupsShutdownImminent=xupsShutdownImminent, xupsAlarmTestInProgress=xupsAlarmTestInProgress, xupsCommunicationsLost=xupsCommunicationsLost, powerwareNetworkSnmpAdapterToken=powerwareNetworkSnmpAdapterToken, xupstpAlarmEntryAdded=xupstpAlarmEntryAdded, xupsConfigOutputWatts=xupsConfigOutputWatts, xupstbBreakerOpen=xupstbBreakerOpen, xupstpOnBattery=xupstpOnBattery, xupsDiagnosticTestFailed=xupsDiagnosticTestFailed, xupstpControlOn=xupstpControlOn, xupsControlToBypassDelay=xupsControlToBypassDelay)
mibBuilder.exportSymbols("XUPS-MIB", xupstpBuildingAlarm=xupstpBuildingAlarm, xupsControlOutputOnDelay=xupsControlOutputOnDelay, xupstdBatteryDischarged=xupstdBatteryDischarged, xupstdControlOff=xupstdControlOff, xupsOutputWatts=xupsOutputWatts, xupsTopologyType=xupsTopologyType, xupstdModuleFailure=xupstdModuleFailure, xupstpNoticeCondition=xupstpNoticeCondition, xupsIdentSoftwareVersion=xupsIdentSoftwareVersion, xupsMaxTrapLevel=xupsMaxTrapLevel)
