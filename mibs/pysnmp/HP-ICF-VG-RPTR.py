#
# PySNMP MIB module HP-ICF-VG-RPTR (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-VG-RPTR
# Produced by pysmi-0.3.4 at Mon Apr 29 19:23:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
hpicfVgRptrTrapsPrefix, hpicfObjectModules, hpicfVg = mibBuilder.importSymbols("HP-ICF-OID", "hpicfVgRptrTrapsPrefix", "hpicfObjectModules", "hpicfVg")
icfVgPortStatus, = mibBuilder.importSymbols("ICF-VG-RPTR", "icfVgPortStatus")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, NotificationType, MibIdentifier, ObjectIdentity, Bits, TimeTicks, Integer32, Counter64, Unsigned32, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "NotificationType", "MibIdentifier", "ObjectIdentity", "Bits", "TimeTicks", "Integer32", "Counter64", "Unsigned32", "Gauge32", "IpAddress")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
hpicfVgRptrMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11))
hpicfVgRptrMib.setRevisions(('2000-11-03 22:25', '1997-03-06 03:45', '1996-09-10 02:36', '1996-02-14 22:53', '1995-01-18 00:00',))
if mibBuilder.loadTexts: hpicfVgRptrMib.setLastUpdated('200011032225Z')
if mibBuilder.loadTexts: hpicfVgRptrMib.setOrganization('Hewlett Packard Company, Network Infrastructure Solutions')
hpVgBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1))
hpVgBasicGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1))
hpVgEntityName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgEntityName.setStatus('current')
hpVgRedundantUpLinksFlag = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpVgRedundantUpLinksFlag.setStatus('current')
hpVgXcvrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3), )
if mibBuilder.loadTexts: hpVgXcvrTable.setStatus('current')
hpVgXcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1), ).setIndexNames((0, "HP-ICF-VG-RPTR", "hpVgXcvrGroupIndex"), (0, "HP-ICF-VG-RPTR", "hpVgXcvrIndex"))
if mibBuilder.loadTexts: hpVgXcvrEntry.setStatus('current')
hpVgXcvrGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hpVgXcvrGroupIndex.setStatus('current')
hpVgXcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hpVgXcvrIndex.setStatus('current')
hpVgXcvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("pmdMissing", 3), ("utp4", 4), ("stp2", 5), ("fibre", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgXcvrType.setStatus('current')
hpVgXcvrAssociatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpVgXcvrAssociatedPort.setStatus('current')
hpVgXcvrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("inUse", 2), ("standby", 3), ("silent", 4), ("linkFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgXcvrState.setStatus('current')
hpVgXcvrAbandonments = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgXcvrAbandonments.setStatus('current')
hpVgXcvrIsMovable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgXcvrIsMovable.setStatus('current')
hpVgNullAddrTraining = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("preventNullAddr", 1), ("allowNullAddr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpVgNullAddrTraining.setStatus('current')
hpVgBasicGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2))
hpVgBasicGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1), )
if mibBuilder.loadTexts: hpVgBasicGroupTable.setStatus('current')
hpVgBasicGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1), ).setIndexNames((0, "HP-ICF-VG-RPTR", "hpVgGrpGroupIndex"))
if mibBuilder.loadTexts: hpVgBasicGroupEntry.setStatus('current')
hpVgGrpGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hpVgGrpGroupIndex.setStatus('current')
hpVgGrpPortsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgGrpPortsAdminStatus.setStatus('current')
hpVgGrpPortsTrained = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgGrpPortsTrained.setStatus('current')
hpVgGrpPortsInTraining = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgGrpPortsInTraining.setStatus('current')
hpVgGrpPortsCascaded = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgGrpPortsCascaded.setStatus('current')
hpVgGrpPortsPromiscuous = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgGrpPortsPromiscuous.setStatus('current')
hpVgBasicPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3))
hpVgBasicPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1), )
if mibBuilder.loadTexts: hpVgBasicPortTable.setStatus('current')
hpVgBasicPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1), ).setIndexNames((0, "HP-ICF-VG-RPTR", "hpVgPortGroupIndex"), (0, "HP-ICF-VG-RPTR", "hpVgPortIndex"))
if mibBuilder.loadTexts: hpVgBasicPortEntry.setStatus('current')
hpVgPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hpVgPortGroupIndex.setStatus('current')
hpVgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hpVgPortIndex.setStatus('current')
hpVgPortPolarityReversed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgPortPolarityReversed.setStatus('current')
hpVgPortWireSkewError = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgPortWireSkewError.setStatus('current')
hpVgPortAssociatedXcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpVgPortAssociatedXcvrIndex.setStatus('current')
hpVgPortNumAssociatedXcvrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgPortNumAssociatedXcvrs.setStatus('current')
hpVgMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2))
hpVgMonitorGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1))
hpVgMonCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1))
hpVgMonGlbReadableFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbReadableFrames.setStatus('current')
hpVgMonGlbReadableOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbReadableOctets.setStatus('current')
hpVgMonGlbUnreadableOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbUnreadableOctets.setStatus('current')
hpVgMonGlbHighPriorityFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbHighPriorityFrames.setStatus('current')
hpVgMonGlbHighPriorityOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbHighPriorityOctets.setStatus('current')
hpVgMonGlbBroadcastFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbBroadcastFrames.setStatus('current')
hpVgMonGlbMulticastFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbMulticastFrames.setStatus('current')
hpVgMonGlbIPMFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbIPMFrames.setStatus('current')
hpVgMonGlbDataErrorFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbDataErrorFrames.setStatus('current')
hpVgMonGlbPriorityPromotions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbPriorityPromotions.setStatus('current')
hpVgMonGlbHCReadableOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbHCReadableOctets.setStatus('current')
hpVgMonGlbHCUnreadableOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbHCUnreadableOctets.setStatus('current')
hpVgMonGlbHCHighPriorityOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbHCHighPriorityOctets.setStatus('current')
hpVgMonGlbHCNormPriorityOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbHCNormPriorityOctets.setStatus('current')
hpVgMonGlbNormPriorityFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbNormPriorityFrames.setStatus('current')
hpVgMonGlbNormPriorityOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbNormPriorityOctets.setStatus('current')
hpVgMonGlbNullAddressedFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbNullAddressedFrames.setStatus('current')
hpVgMonGlbOversizeFrames = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbOversizeFrames.setStatus('current')
hpVgMonGlbTransitionToTrainings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpVgMonGlbTransitionToTrainings.setStatus('current')
hpVgMonitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 2))
hpVgMonitorPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 3, 2, 3))
hpVgRedundantUplinkTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 12, 3, 0, 1)).setObjects(("HP-ICF-VG-RPTR", "hpVgXcvrState"))
if mibBuilder.loadTexts: hpVgRedundantUplinkTrap.setStatus('current')
hpVgLossOfActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 12, 3, 0, 2)).setObjects(("ICF-VG-RPTR", "icfVgPortStatus"))
if mibBuilder.loadTexts: hpVgLossOfActiveTrap.setStatus('current')
hpicfVgRptrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1))
hpicfVgRptrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 1))
hpicfVgRptrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2))
hpicfVgRptrPreDot12Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 1, 1)).setObjects(("HP-ICF-VG-RPTR", "hpicfVgRptrPreDot12BasicGroup"), ("HP-ICF-VG-RPTR", "hpicfVgRptrPreDot12MonitorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrPreDot12Compliance = hpicfVgRptrPreDot12Compliance.setStatus('obsolete')
hpicfVgRptrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 1, 2)).setObjects(("HP-ICF-VG-RPTR", "hpicfVgRptrBasicGroup"), ("HP-ICF-VG-RPTR", "hpicfVgRptrMonitorGroup"), ("HP-ICF-VG-RPTR", "hpicfVgRptrXcvrGroup"), ("HP-ICF-VG-RPTR", "hpicfVgRptrBasicTraps"), ("HP-ICF-VG-RPTR", "hpicfVgRptrRedundantUplinkGroup"), ("HP-ICF-VG-RPTR", "hpicfVgRptrRedundantUplinkTraps"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrCompliance = hpicfVgRptrCompliance.setStatus('current')
hpicfVgRptrPreDot12BasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 1)).setObjects(("HP-ICF-VG-RPTR", "hpVgEntityName"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsAdminStatus"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsTrained"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsInTraining"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsCascaded"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsPromiscuous"), ("HP-ICF-VG-RPTR", "hpVgPortPolarityReversed"), ("HP-ICF-VG-RPTR", "hpVgPortWireSkewError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrPreDot12BasicGroup = hpicfVgRptrPreDot12BasicGroup.setStatus('obsolete')
hpicfVgRptrBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 2)).setObjects(("HP-ICF-VG-RPTR", "hpVgEntityName"), ("HP-ICF-VG-RPTR", "hpVgNullAddrTraining"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsAdminStatus"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsTrained"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsInTraining"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsCascaded"), ("HP-ICF-VG-RPTR", "hpVgGrpPortsPromiscuous"), ("HP-ICF-VG-RPTR", "hpVgPortPolarityReversed"), ("HP-ICF-VG-RPTR", "hpVgPortWireSkewError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrBasicGroup = hpicfVgRptrBasicGroup.setStatus('current')
hpicfVgRptrPreDot12MonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 3)).setObjects(("HP-ICF-VG-RPTR", "hpVgMonGlbReadableFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbReadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbUnreadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHighPriorityFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHighPriorityOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbBroadcastFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbMulticastFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbIPMFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbDataErrorFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbPriorityPromotions"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCReadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCUnreadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCHighPriorityOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrPreDot12MonitorGroup = hpicfVgRptrPreDot12MonitorGroup.setStatus('obsolete')
hpicfVgRptrMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 4)).setObjects(("HP-ICF-VG-RPTR", "hpVgMonGlbReadableFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbReadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbUnreadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHighPriorityFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHighPriorityOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbBroadcastFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbMulticastFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbIPMFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbDataErrorFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbPriorityPromotions"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCReadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCUnreadableOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCHighPriorityOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbHCNormPriorityOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbNormPriorityFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbNormPriorityOctets"), ("HP-ICF-VG-RPTR", "hpVgMonGlbNullAddressedFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbOversizeFrames"), ("HP-ICF-VG-RPTR", "hpVgMonGlbTransitionToTrainings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrMonitorGroup = hpicfVgRptrMonitorGroup.setStatus('current')
hpicfVgRptrXcvrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 5)).setObjects(("HP-ICF-VG-RPTR", "hpVgXcvrType"), ("HP-ICF-VG-RPTR", "hpVgXcvrAssociatedPort"), ("HP-ICF-VG-RPTR", "hpVgXcvrState"), ("HP-ICF-VG-RPTR", "hpVgXcvrAbandonments"), ("HP-ICF-VG-RPTR", "hpVgXcvrIsMovable"), ("HP-ICF-VG-RPTR", "hpVgPortAssociatedXcvrIndex"), ("HP-ICF-VG-RPTR", "hpVgPortNumAssociatedXcvrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrXcvrGroup = hpicfVgRptrXcvrGroup.setStatus('current')
hpicfVgRptrRedundantUplinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 6)).setObjects(("HP-ICF-VG-RPTR", "hpVgRedundantUpLinksFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrRedundantUplinkGroup = hpicfVgRptrRedundantUplinkGroup.setStatus('current')
hpicfVgRptrBasicTraps = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 7)).setObjects(("HP-ICF-VG-RPTR", "hpVgLossOfActiveTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrBasicTraps = hpicfVgRptrBasicTraps.setStatus('current')
hpicfVgRptrRedundantUplinkTraps = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 11, 1, 2, 8)).setObjects(("HP-ICF-VG-RPTR", "hpVgRedundantUplinkTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVgRptrRedundantUplinkTraps = hpicfVgRptrRedundantUplinkTraps.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-VG-RPTR", hpVgXcvrState=hpVgXcvrState, hpVgMonGlbReadableFrames=hpVgMonGlbReadableFrames, hpVgBasic=hpVgBasic, hpicfVgRptrGroups=hpicfVgRptrGroups, hpVgRedundantUplinkTrap=hpVgRedundantUplinkTrap, hpVgPortAssociatedXcvrIndex=hpVgPortAssociatedXcvrIndex, hpVgLossOfActiveTrap=hpVgLossOfActiveTrap, hpVgMonGlbUnreadableOctets=hpVgMonGlbUnreadableOctets, hpVgXcvrAbandonments=hpVgXcvrAbandonments, hpVgPortIndex=hpVgPortIndex, hpVgMonitorGlobal=hpVgMonitorGlobal, hpVgBasicPortEntry=hpVgBasicPortEntry, PYSNMP_MODULE_ID=hpicfVgRptrMib, hpVgXcvrType=hpVgXcvrType, hpVgPortPolarityReversed=hpVgPortPolarityReversed, hpVgPortNumAssociatedXcvrs=hpVgPortNumAssociatedXcvrs, hpVgMonGlbDataErrorFrames=hpVgMonGlbDataErrorFrames, hpVgMonGlbNullAddressedFrames=hpVgMonGlbNullAddressedFrames, hpicfVgRptrCompliance=hpicfVgRptrCompliance, hpVgXcvrAssociatedPort=hpVgXcvrAssociatedPort, hpVgMonGlbBroadcastFrames=hpVgMonGlbBroadcastFrames, hpVgXcvrIndex=hpVgXcvrIndex, hpVgBasicGroup=hpVgBasicGroup, hpicfVgRptrPreDot12Compliance=hpicfVgRptrPreDot12Compliance, hpVgMonGlbNormPriorityFrames=hpVgMonGlbNormPriorityFrames, hpVgMonitorPort=hpVgMonitorPort, hpVgEntityName=hpVgEntityName, hpVgMonGlbHCReadableOctets=hpVgMonGlbHCReadableOctets, hpicfVgRptrPreDot12MonitorGroup=hpicfVgRptrPreDot12MonitorGroup, hpicfVgRptrMib=hpicfVgRptrMib, hpVgGrpPortsInTraining=hpVgGrpPortsInTraining, hpVgMonGlbNormPriorityOctets=hpVgMonGlbNormPriorityOctets, hpicfVgRptrPreDot12BasicGroup=hpicfVgRptrPreDot12BasicGroup, hpicfVgRptrRedundantUplinkGroup=hpicfVgRptrRedundantUplinkGroup, hpVgGrpGroupIndex=hpVgGrpGroupIndex, hpVgMonGlbHCHighPriorityOctets=hpVgMonGlbHCHighPriorityOctets, hpVgMonGlbHCUnreadableOctets=hpVgMonGlbHCUnreadableOctets, hpVgMonGlbOversizeFrames=hpVgMonGlbOversizeFrames, hpVgBasicGroupTable=hpVgBasicGroupTable, hpVgXcvrIsMovable=hpVgXcvrIsMovable, hpVgPortGroupIndex=hpVgPortGroupIndex, hpicfVgRptrCompliances=hpicfVgRptrCompliances, hpVgMonGlbMulticastFrames=hpVgMonGlbMulticastFrames, hpVgRedundantUpLinksFlag=hpVgRedundantUpLinksFlag, hpVgGrpPortsTrained=hpVgGrpPortsTrained, hpVgMonGlbHighPriorityOctets=hpVgMonGlbHighPriorityOctets, hpicfVgRptrBasicTraps=hpicfVgRptrBasicTraps, hpVgXcvrEntry=hpVgXcvrEntry, hpVgBasicGroupEntry=hpVgBasicGroupEntry, hpVgGrpPortsAdminStatus=hpVgGrpPortsAdminStatus, hpVgMonGlbHighPriorityFrames=hpVgMonGlbHighPriorityFrames, hpVgMonGlbTransitionToTrainings=hpVgMonGlbTransitionToTrainings, hpVgBasicGlobal=hpVgBasicGlobal, hpVgMonGlbIPMFrames=hpVgMonGlbIPMFrames, hpicfVgRptrMonitorGroup=hpicfVgRptrMonitorGroup, hpVgBasicPortTable=hpVgBasicPortTable, hpicfVgRptrXcvrGroup=hpicfVgRptrXcvrGroup, hpVgMonGlbPriorityPromotions=hpVgMonGlbPriorityPromotions, hpicfVgRptrBasicGroup=hpicfVgRptrBasicGroup, hpVgXcvrTable=hpVgXcvrTable, hpVgMonitorGroup=hpVgMonitorGroup, hpVgNullAddrTraining=hpVgNullAddrTraining, hpVgGrpPortsCascaded=hpVgGrpPortsCascaded, hpVgMonGlbHCNormPriorityOctets=hpVgMonGlbHCNormPriorityOctets, hpVgMonCounters=hpVgMonCounters, hpVgGrpPortsPromiscuous=hpVgGrpPortsPromiscuous, hpVgBasicPort=hpVgBasicPort, hpicfVgRptrRedundantUplinkTraps=hpicfVgRptrRedundantUplinkTraps, hpVgPortWireSkewError=hpVgPortWireSkewError, hpVgMonGlbReadableOctets=hpVgMonGlbReadableOctets, hpicfVgRptrConformance=hpicfVgRptrConformance, hpVgMonitor=hpVgMonitor, hpVgXcvrGroupIndex=hpVgXcvrGroupIndex)
