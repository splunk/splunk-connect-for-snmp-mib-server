#
# PySNMP MIB module CISCO-L2-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-L2-CONTROL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:46:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Bits, TimeTicks, MibIdentifier, IpAddress, iso, Unsigned32, Integer32, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "TimeTicks", "MibIdentifier", "IpAddress", "iso", "Unsigned32", "Integer32", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32", "NotificationType")
DisplayString, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention", "TruthValue")
ciscoL2ControlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 313))
ciscoL2ControlMIB.setRevisions(('2013-07-03 00:00', '2007-01-10 00:00', '2003-12-01 00:00',))
if mibBuilder.loadTexts: ciscoL2ControlMIB.setLastUpdated('201307030000Z')
if mibBuilder.loadTexts: ciscoL2ControlMIB.setOrganization('Cisco Systems, Inc.')
ciscoL2ControlMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 0))
ciscoL2ControlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 1))
ciscoL2ControlMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 2))
clcMacAddressLimitObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1))
clcUnicastFloodObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 2))
clcIfMacAddressLimitObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3))
clcIfVlanMacAddressLimitObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4))
clcMacAddressStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 5))
class MacLimitExceededAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("warning", 1), ("limit", 2), ("limitNoFlood", 3), ("shutdown", 4))

class ClcMacAddressStatsType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("allMac", 1), ("dynamicMac", 2), ("staticMac", 3), ("mcastMac", 4), ("pvlanCloneMac", 5), ("overlayMac", 6), ("secureMac", 7))

clcMacLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitEnable.setStatus('current')
clcMaxMacLimitDefault = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMaxMacLimitDefault.setStatus('current')
clcMacLimitExceededActionDefault = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 3), MacLimitExceededAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitExceededActionDefault.setStatus('current')
clcMacLimitExceedNotifOption = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sysLog", 1), ("snmpNotif", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitExceedNotifOption.setStatus('current')
clcMacLimitNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitNotifEnable.setStatus('current')
clcVlanMacLimitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6), )
if mibBuilder.loadTexts: clcVlanMacLimitTable.setStatus('current')
clcVlanMacLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-L2-CONTROL-MIB", "clcVlanMacLimitIndex"))
if mibBuilder.loadTexts: clcVlanMacLimitEntry.setStatus('current')
clcVlanMacLimitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: clcVlanMacLimitIndex.setStatus('current')
clcVlanMacLimitGlobalConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 2), Bits().clone(namedValues=NamedValues(("vlanMaxMacLimit", 0), ("vlanLimitExceededAction", 1), ("vlanMacLimitHigh", 2), ("vlanLimitHighExceededAction", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcVlanMacLimitGlobalConfig.setStatus('current')
clcVlanMaxMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcVlanMaxMacLimit.setStatus('current')
clcVlanMacLimitExceededAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 4), MacLimitExceededAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcVlanMacLimitExceededAction.setStatus('current')
clcVlanMacLimitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcVlanMacLimitStatus.setStatus('current')
clcVlanMacLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcVlanMacLimitEnable.setStatus('current')
clcVlanMacLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcVlanMacLimitHigh.setStatus('current')
clcVlanMacLimitHighExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 6, 1, 8), MacLimitExceededAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcVlanMacLimitHighExceedAction.setStatus('current')
clcFdbVlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 7), )
if mibBuilder.loadTexts: clcFdbVlanInfoTable.setStatus('current')
clcFdbVlanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 7, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-L2-CONTROL-MIB", "clcVlanMacLimitIndex"))
if mibBuilder.loadTexts: clcFdbVlanInfoEntry.setStatus('current')
clcFdbVlanMacUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcFdbVlanMacUsage.setStatus('current')
clcMacLimitInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitInterval.setStatus('current')
clcMacLimitHighDefault = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitHighDefault.setStatus('current')
clcMacLimitHighExceedActionDef = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 10), MacLimitExceededAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitHighExceedActionDef.setStatus('current')
clcMacLimitHighNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcMacLimitHighNotifEnable.setStatus('current')
clcUnicastFloodTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 2, 1), )
if mibBuilder.loadTexts: clcUnicastFloodTable.setStatus('current')
clcUnicastFloodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: clcUnicastFloodEntry.setStatus('current')
clcUnicastFloodAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcUnicastFloodAdminEnable.setStatus('current')
clcUnicastFloodOperEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcUnicastFloodOperEnable.setStatus('current')
clcIfMacLimitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1), )
if mibBuilder.loadTexts: clcIfMacLimitTable.setStatus('current')
clcIfMacLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-L2-CONTROL-MIB", "clcIfMacLimitIfIndex"))
if mibBuilder.loadTexts: clcIfMacLimitEntry.setStatus('current')
clcIfMacLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: clcIfMacLimitIfIndex.setStatus('current')
clcIfMacLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfMacLimitEnable.setStatus('current')
clcIfMacLimitGlobalConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 3), Bits().clone(namedValues=NamedValues(("ifMacLimitLow", 0), ("ifLimitLowExceededAction", 1), ("ifMacLimitHigh", 2), ("ifLimitHighExceededAction", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcIfMacLimitGlobalConfig.setStatus('current')
clcIfMacLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfMacLimitLow.setStatus('current')
clcIfMacLimitLowExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 5), MacLimitExceededAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfMacLimitLowExceedAction.setStatus('current')
clcIfMacLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfMacLimitHigh.setStatus('current')
clcIfMacLimitHighExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 7), MacLimitExceededAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfMacLimitHighExceedAction.setStatus('current')
clcIfMacLimitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfMacLimitStatus.setStatus('current')
clcFdbIfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 2), )
if mibBuilder.loadTexts: clcFdbIfInfoTable.setStatus('current')
clcFdbIfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-L2-CONTROL-MIB", "clcIfMacLimitIfIndex"))
if mibBuilder.loadTexts: clcFdbIfInfoEntry.setStatus('current')
clcFdbIfMacUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcFdbIfMacUsage.setStatus('current')
clcIfMacLimitLowNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcIfMacLimitLowNotifEnable.setStatus('current')
clcIfMacLimitHighNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcIfMacLimitHighNotifEnable.setStatus('current')
clcIfVlanMacLimitTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1), )
if mibBuilder.loadTexts: clcIfVlanMacLimitTable.setStatus('current')
clcIfVlanMacLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitIfIndex"), (0, "CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitVlanIndex"))
if mibBuilder.loadTexts: clcIfVlanMacLimitEntry.setStatus('current')
clcIfVlanMacLimitIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: clcIfVlanMacLimitIfIndex.setStatus('current')
clcIfVlanMacLimitVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 2), VlanIndex())
if mibBuilder.loadTexts: clcIfVlanMacLimitVlanIndex.setStatus('current')
clcIfVlanMacLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfVlanMacLimitEnable.setStatus('current')
clcIfVlanMacLimitGlobalConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 4), Bits().clone(namedValues=NamedValues(("ifVlanMacLimitLow", 0), ("ifVlanLimitLowExceededAction", 1), ("ifVlanMacLimitHigh", 2), ("ifVlanLimitHighExceededAction", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcIfVlanMacLimitGlobalConfig.setStatus('current')
clcIfVlanMacLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfVlanMacLimitLow.setStatus('current')
clcIfVlanMacLimitLowExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 6), MacLimitExceededAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfVlanMacLimitLowExceedAction.setStatus('current')
clcIfVlanMacLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfVlanMacLimitHigh.setStatus('current')
clcIfVlanMacLimitHiExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 8), MacLimitExceededAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfVlanMacLimitHiExceedAction.setStatus('current')
clcIfVlanMacLimitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clcIfVlanMacLimitStatus.setStatus('current')
clcFdbIfVlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 2), )
if mibBuilder.loadTexts: clcFdbIfVlanInfoTable.setStatus('current')
clcFdbIfVlanInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitIfIndex"), (0, "CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitVlanIndex"))
if mibBuilder.loadTexts: clcFdbIfVlanInfoEntry.setStatus('current')
clcFdbIfVlanMacUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcFdbIfVlanMacUsage.setStatus('current')
clcIfVlanMacLimitLowNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcIfVlanMacLimitLowNotifEnable.setStatus('current')
clcIfVlanMacLimitHighNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 4, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clcIfVlanMacLimitHighNotifEnable.setStatus('current')
clcFdbMacAddressStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 5, 1), )
if mibBuilder.loadTexts: clcFdbMacAddressStatsTable.setStatus('current')
clcFdbMacAddressStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-L2-CONTROL-MIB", "clcFdbMacAddressStatsType"))
if mibBuilder.loadTexts: clcFdbMacAddressStatsEntry.setStatus('current')
clcFdbMacAddressStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 5, 1, 1, 1), ClcMacAddressStatsType())
if mibBuilder.loadTexts: clcFdbMacAddressStatsType.setStatus('current')
clcFdbMacAddressStatsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 313, 1, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clcFdbMacAddressStatsNumber.setStatus('current')
clcVlanMacLimitNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 313, 0, 1)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbVlanMacUsage"), ("CISCO-L2-CONTROL-MIB", "clcVlanMaxMacLimit"))
if mibBuilder.loadTexts: clcVlanMacLimitNotif.setStatus('current')
clcVlanMacLimitHighNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 313, 0, 2)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbVlanMacUsage"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitHigh"))
if mibBuilder.loadTexts: clcVlanMacLimitHighNotif.setStatus('current')
clcIfMacLimitLowNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 313, 0, 3)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbIfMacUsage"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitLow"))
if mibBuilder.loadTexts: clcIfMacLimitLowNotif.setStatus('current')
clcIfMacLimitHighNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 313, 0, 4)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbIfMacUsage"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitHigh"))
if mibBuilder.loadTexts: clcIfMacLimitHighNotif.setStatus('current')
clcIfVlanMacLimitLowNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 313, 0, 5)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbIfVlanMacUsage"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitLow"))
if mibBuilder.loadTexts: clcIfVlanMacLimitLowNotif.setStatus('current')
clcIfVlanMacLimitHighNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 313, 0, 6)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbIfVlanMacUsage"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitHigh"))
if mibBuilder.loadTexts: clcIfVlanMacLimitHighNotif.setStatus('current')
ciscoL2ControlMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 1))
ciscoL2ControlMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2))
ciscoL2ControlMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 1, 1)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifsGroup"), ("CISCO-L2-CONTROL-MIB", "clcUnicastFloodGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoL2ControlMIBCompliance = ciscoL2ControlMIBCompliance.setStatus('deprecated')
ciscoL2ControlMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 1, 2)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitGroup1"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacAddressLimitGroup1"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifControlGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifControlGroup1"), ("CISCO-L2-CONTROL-MIB", "clcUnicastFloodGroup"), ("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitIntervalGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifsGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifsGroup1"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitEnableGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitEnableGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitNotifControlGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitNotifsGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitEnableGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitNotifControlGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoL2ControlMIBCompliance2 = ciscoL2ControlMIBCompliance2.setStatus('deprecated')
ciscoL2ControlMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 1, 3)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitGroup1"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacAddressLimitGroup1"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifControlGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifControlGroup1"), ("CISCO-L2-CONTROL-MIB", "clcUnicastFloodGroup"), ("CISCO-L2-CONTROL-MIB", "clcMacAddressLimitIntervalGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifsGroup"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotifsGroup1"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitEnableGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitEnableGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitNotifControlGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitNotifsGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacAddressLimitGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitEnableGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitNotifControlGroup"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitNotifsGroup"), ("CISCO-L2-CONTROL-MIB", "clcMacAddressStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoL2ControlMIBCompliance3 = ciscoL2ControlMIBCompliance3.setStatus('current')
clcMacAddressLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 1)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacLimitEnable"), ("CISCO-L2-CONTROL-MIB", "clcMaxMacLimitDefault"), ("CISCO-L2-CONTROL-MIB", "clcMacLimitExceededActionDefault"), ("CISCO-L2-CONTROL-MIB", "clcMacLimitExceedNotifOption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcMacAddressLimitGroup = clcMacAddressLimitGroup.setStatus('current')
clcVlanMacAddressLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 2)).setObjects(("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitGlobalConfig"), ("CISCO-L2-CONTROL-MIB", "clcVlanMaxMacLimit"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitExceededAction"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitStatus"), ("CISCO-L2-CONTROL-MIB", "clcFdbVlanMacUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacAddressLimitGroup = clcVlanMacAddressLimitGroup.setStatus('current')
clcVlanMacLimitNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 3)).setObjects(("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacLimitNotifsGroup = clcVlanMacLimitNotifsGroup.setStatus('current')
clcUnicastFloodGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 4)).setObjects(("CISCO-L2-CONTROL-MIB", "clcUnicastFloodAdminEnable"), ("CISCO-L2-CONTROL-MIB", "clcUnicastFloodOperEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcUnicastFloodGroup = clcUnicastFloodGroup.setStatus('current')
clcMacAddressLimitIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 5)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacLimitInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcMacAddressLimitIntervalGroup = clcMacAddressLimitIntervalGroup.setStatus('current')
clcMacAddressLimitGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 6)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacLimitHighDefault"), ("CISCO-L2-CONTROL-MIB", "clcMacLimitHighExceedActionDef"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcMacAddressLimitGroup1 = clcMacAddressLimitGroup1.setStatus('current')
clcVlanMacAddressLimitGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 7)).setObjects(("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitHigh"), ("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitHighExceedAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacAddressLimitGroup1 = clcVlanMacAddressLimitGroup1.setStatus('current')
clcVlanMacLimitEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 8)).setObjects(("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacLimitEnableGroup = clcVlanMacLimitEnableGroup.setStatus('current')
clcVlanMacLimitNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 9)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacLimitNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacLimitNotifControlGroup = clcVlanMacLimitNotifControlGroup.setStatus('current')
clcVlanMacLimitNotifControlGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 10)).setObjects(("CISCO-L2-CONTROL-MIB", "clcMacLimitHighNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacLimitNotifControlGroup1 = clcVlanMacLimitNotifControlGroup1.setStatus('current')
clcVlanMacLimitNotifsGroup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 11)).setObjects(("CISCO-L2-CONTROL-MIB", "clcVlanMacLimitHighNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcVlanMacLimitNotifsGroup1 = clcVlanMacLimitNotifsGroup1.setStatus('current')
clcIfMacAddressLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 12)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfMacLimitGlobalConfig"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitLow"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitLowExceedAction"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitHigh"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitHighExceedAction"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitStatus"), ("CISCO-L2-CONTROL-MIB", "clcFdbIfMacUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfMacAddressLimitGroup = clcIfMacAddressLimitGroup.setStatus('current')
clcIfMacLimitEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 13)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfMacLimitEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfMacLimitEnableGroup = clcIfMacLimitEnableGroup.setStatus('current')
clcIfMacLimitNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 14)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfMacLimitLowNotifEnable"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitHighNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfMacLimitNotifControlGroup = clcIfMacLimitNotifControlGroup.setStatus('current')
clcIfMacLimitNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 15)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfMacLimitLowNotif"), ("CISCO-L2-CONTROL-MIB", "clcIfMacLimitHighNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfMacLimitNotifsGroup = clcIfMacLimitNotifsGroup.setStatus('current')
clcIfVlanMacAddressLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 16)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitGlobalConfig"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitLow"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitLowExceedAction"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitHigh"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitHiExceedAction"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitStatus"), ("CISCO-L2-CONTROL-MIB", "clcFdbIfVlanMacUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfVlanMacAddressLimitGroup = clcIfVlanMacAddressLimitGroup.setStatus('current')
clcIfVlanMacLimitEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 17)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfVlanMacLimitEnableGroup = clcIfVlanMacLimitEnableGroup.setStatus('current')
clcIfVlanMacLimitNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 18)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitLowNotifEnable"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitHighNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfVlanMacLimitNotifControlGroup = clcIfVlanMacLimitNotifControlGroup.setStatus('current')
clcIfVlanMacLimitNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 19)).setObjects(("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitLowNotif"), ("CISCO-L2-CONTROL-MIB", "clcIfVlanMacLimitHighNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcIfVlanMacLimitNotifsGroup = clcIfVlanMacLimitNotifsGroup.setStatus('current')
clcMacAddressStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 313, 2, 2, 20)).setObjects(("CISCO-L2-CONTROL-MIB", "clcFdbMacAddressStatsNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clcMacAddressStatsGroup = clcMacAddressStatsGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-L2-CONTROL-MIB", clcUnicastFloodTable=clcUnicastFloodTable, clcIfMacLimitHighNotif=clcIfMacLimitHighNotif, clcVlanMacLimitNotifControlGroup=clcVlanMacLimitNotifControlGroup, clcMacLimitHighNotifEnable=clcMacLimitHighNotifEnable, clcIfMacAddressLimitObjects=clcIfMacAddressLimitObjects, clcIfMacLimitLowNotifEnable=clcIfMacLimitLowNotifEnable, clcVlanMacLimitEnable=clcVlanMacLimitEnable, clcVlanMacLimitNotif=clcVlanMacLimitNotif, clcVlanMacLimitEnableGroup=clcVlanMacLimitEnableGroup, clcMacLimitInterval=clcMacLimitInterval, clcIfVlanMacLimitLowNotifEnable=clcIfVlanMacLimitLowNotifEnable, ciscoL2ControlMIBConformance=ciscoL2ControlMIBConformance, clcIfMacLimitNotifControlGroup=clcIfMacLimitNotifControlGroup, clcIfMacLimitHighNotifEnable=clcIfMacLimitHighNotifEnable, clcFdbIfVlanMacUsage=clcFdbIfVlanMacUsage, clcIfVlanMacLimitIfIndex=clcIfVlanMacLimitIfIndex, clcUnicastFloodObjects=clcUnicastFloodObjects, clcIfVlanMacLimitStatus=clcIfVlanMacLimitStatus, clcVlanMacLimitExceededAction=clcVlanMacLimitExceededAction, clcFdbIfMacUsage=clcFdbIfMacUsage, clcMacLimitHighDefault=clcMacLimitHighDefault, clcMacLimitNotifEnable=clcMacLimitNotifEnable, clcIfMacLimitLowNotif=clcIfMacLimitLowNotif, clcVlanMacLimitNotifControlGroup1=clcVlanMacLimitNotifControlGroup1, ciscoL2ControlMIBObjects=ciscoL2ControlMIBObjects, MacLimitExceededAction=MacLimitExceededAction, clcMaxMacLimitDefault=clcMaxMacLimitDefault, clcFdbMacAddressStatsType=clcFdbMacAddressStatsType, ciscoL2ControlMIB=ciscoL2ControlMIB, ciscoL2ControlMIBCompliance=ciscoL2ControlMIBCompliance, clcMacLimitExceedNotifOption=clcMacLimitExceedNotifOption, clcVlanMaxMacLimit=clcVlanMaxMacLimit, clcIfMacAddressLimitGroup=clcIfMacAddressLimitGroup, clcMacLimitExceededActionDefault=clcMacLimitExceededActionDefault, clcIfVlanMacAddressLimitGroup=clcIfVlanMacAddressLimitGroup, clcIfMacLimitStatus=clcIfMacLimitStatus, clcFdbVlanMacUsage=clcFdbVlanMacUsage, clcFdbIfVlanInfoEntry=clcFdbIfVlanInfoEntry, clcVlanMacLimitHighExceedAction=clcVlanMacLimitHighExceedAction, ciscoL2ControlMIBGroups=ciscoL2ControlMIBGroups, clcVlanMacLimitGlobalConfig=clcVlanMacLimitGlobalConfig, clcIfVlanMacLimitEnable=clcIfVlanMacLimitEnable, clcIfMacLimitEnable=clcIfMacLimitEnable, ClcMacAddressStatsType=ClcMacAddressStatsType, clcUnicastFloodGroup=clcUnicastFloodGroup, clcIfVlanMacLimitHighNotif=clcIfVlanMacLimitHighNotif, clcIfVlanMacLimitGlobalConfig=clcIfVlanMacLimitGlobalConfig, clcVlanMacAddressLimitGroup=clcVlanMacAddressLimitGroup, clcIfVlanMacLimitLow=clcIfVlanMacLimitLow, clcIfMacLimitLowExceedAction=clcIfMacLimitLowExceedAction, clcMacAddressLimitIntervalGroup=clcMacAddressLimitIntervalGroup, clcVlanMacLimitEntry=clcVlanMacLimitEntry, clcFdbMacAddressStatsNumber=clcFdbMacAddressStatsNumber, clcIfVlanMacLimitHiExceedAction=clcIfVlanMacLimitHiExceedAction, clcIfVlanMacLimitVlanIndex=clcIfVlanMacLimitVlanIndex, clcFdbVlanInfoTable=clcFdbVlanInfoTable, clcIfVlanMacLimitEnableGroup=clcIfVlanMacLimitEnableGroup, PYSNMP_MODULE_ID=ciscoL2ControlMIB, clcIfVlanMacLimitTable=clcIfVlanMacLimitTable, clcIfMacLimitHighExceedAction=clcIfMacLimitHighExceedAction, ciscoL2ControlMIBNotifs=ciscoL2ControlMIBNotifs, clcIfMacLimitLow=clcIfMacLimitLow, clcIfMacLimitIfIndex=clcIfMacLimitIfIndex, clcIfMacLimitNotifsGroup=clcIfMacLimitNotifsGroup, clcVlanMacLimitHigh=clcVlanMacLimitHigh, clcIfMacLimitEnableGroup=clcIfMacLimitEnableGroup, clcVlanMacLimitTable=clcVlanMacLimitTable, clcFdbIfInfoEntry=clcFdbIfInfoEntry, clcVlanMacLimitNotifsGroup1=clcVlanMacLimitNotifsGroup1, clcIfVlanMacLimitHigh=clcIfVlanMacLimitHigh, clcVlanMacLimitIndex=clcVlanMacLimitIndex, clcMacAddressStatsGroup=clcMacAddressStatsGroup, clcMacLimitHighExceedActionDef=clcMacLimitHighExceedActionDef, clcIfMacLimitTable=clcIfMacLimitTable, clcVlanMacLimitStatus=clcVlanMacLimitStatus, clcIfMacLimitGlobalConfig=clcIfMacLimitGlobalConfig, clcFdbIfVlanInfoTable=clcFdbIfVlanInfoTable, clcMacAddressStatsObjects=clcMacAddressStatsObjects, clcIfMacLimitHigh=clcIfMacLimitHigh, clcFdbMacAddressStatsEntry=clcFdbMacAddressStatsEntry, clcUnicastFloodEntry=clcUnicastFloodEntry, clcVlanMacLimitHighNotif=clcVlanMacLimitHighNotif, clcIfVlanMacLimitNotifControlGroup=clcIfVlanMacLimitNotifControlGroup, clcUnicastFloodAdminEnable=clcUnicastFloodAdminEnable, clcIfVlanMacLimitNotifsGroup=clcIfVlanMacLimitNotifsGroup, clcMacAddressLimitGroup1=clcMacAddressLimitGroup1, clcFdbMacAddressStatsTable=clcFdbMacAddressStatsTable, clcFdbIfInfoTable=clcFdbIfInfoTable, clcIfVlanMacLimitHighNotifEnable=clcIfVlanMacLimitHighNotifEnable, clcIfVlanMacLimitLowNotif=clcIfVlanMacLimitLowNotif, clcIfVlanMacAddressLimitObjects=clcIfVlanMacAddressLimitObjects, ciscoL2ControlMIBCompliances=ciscoL2ControlMIBCompliances, clcFdbVlanInfoEntry=clcFdbVlanInfoEntry, clcIfVlanMacLimitLowExceedAction=clcIfVlanMacLimitLowExceedAction, clcUnicastFloodOperEnable=clcUnicastFloodOperEnable, clcMacLimitEnable=clcMacLimitEnable, clcIfMacLimitEntry=clcIfMacLimitEntry, ciscoL2ControlMIBCompliance3=ciscoL2ControlMIBCompliance3, clcMacAddressLimitGroup=clcMacAddressLimitGroup, clcIfVlanMacLimitEntry=clcIfVlanMacLimitEntry, ciscoL2ControlMIBCompliance2=ciscoL2ControlMIBCompliance2, clcVlanMacLimitNotifsGroup=clcVlanMacLimitNotifsGroup, clcMacAddressLimitObjects=clcMacAddressLimitObjects, clcVlanMacAddressLimitGroup1=clcVlanMacAddressLimitGroup1)
