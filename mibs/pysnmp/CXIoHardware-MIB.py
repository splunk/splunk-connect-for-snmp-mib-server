#
# PySNMP MIB module CXIoHardware-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXIoHardware-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:17:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
cxIoHardware, Alias = mibBuilder.importSymbols("CXProduct-SMI", "cxIoHardware", "Alias")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, MibIdentifier, ObjectIdentity, Unsigned32, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Counter64, NotificationType, Integer32, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "MibIdentifier", "ObjectIdentity", "Unsigned32", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Counter64", "NotificationType", "Integer32", "Counter32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cxIoCardAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 1), )
if mibBuilder.loadTexts: cxIoCardAdmTable.setStatus('mandatory')
cxIoCardAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 1, 1), ).setIndexNames((0, "CXIoHardware-MIB", "cxIoCardAdmIndex"))
if mibBuilder.loadTexts: cxIoCardAdmEntry.setStatus('mandatory')
cxIoCardAdmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxIoCardAdmIndex.setStatus('mandatory')
cxIoCardAdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("disabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxIoCardAdmRowStatus.setStatus('mandatory')
cxIoCardAdmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 1, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxIoCardAdmAlias.setStatus('mandatory')
cxIoCardAdmPhysSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxIoCardAdmPhysSlot.setStatus('mandatory')
cxIoCardAdmType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("iuscFourPortCard", 1), ("lanCard", 2), ("vceCmpCard", 3), ("tokenRingCard", 4), ("ethernetCard", 5), ("isdnCard", 6), ("digitalVceCmpCard", 7), ("highSpeedFr4LIDCard", 8), ("octalV34ModemCard", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxIoCardAdmType.setStatus('mandatory')
cxIoCardAdmState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxIoCardAdmState.setStatus('mandatory')
cxIoPortAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 2), )
if mibBuilder.loadTexts: cxIoPortAdmTable.setStatus('mandatory')
cxIoPortAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 2, 1), ).setIndexNames((0, "CXIoHardware-MIB", "cxIoPortAdmIndex"))
if mibBuilder.loadTexts: cxIoPortAdmEntry.setStatus('mandatory')
cxIoPortAdmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxIoPortAdmIndex.setStatus('mandatory')
cxIoPortAdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("disabled", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxIoPortAdmRowStatus.setStatus('mandatory')
cxIoPortAdmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 2, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxIoPortAdmAlias.setStatus('mandatory')
cxIoPortAdmCardAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 2, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxIoPortAdmCardAlias.setStatus('mandatory')
cxIoPortAdmCardLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxIoPortAdmCardLocalIndex.setStatus('mandatory')
cxIoCardOperTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 3), )
if mibBuilder.loadTexts: cxIoCardOperTable.setStatus('mandatory')
cxIoCardOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 3, 1), ).setIndexNames((0, "CXIoHardware-MIB", "cxIoCardOperPhysSlot"))
if mibBuilder.loadTexts: cxIoCardOperEntry.setStatus('mandatory')
cxIoCardOperPhysSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxIoCardOperPhysSlot.setStatus('mandatory')
cxIoCardOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxIoCardOperState.setStatus('mandatory')
cxIoCardOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("iuscFourPortCard", 1), ("lanCard", 2), ("vceCmpCard", 3), ("tokenRingCard", 4), ("ethernetCard", 5), ("isdnCard", 6), ("digitalVceCmpCard", 7), ("highSpeedFr4LIDCard", 8), ("octalV34ModemCard", 9), ("other", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxIoCardOperType.setStatus('mandatory')
cxIoCardOperRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxIoCardOperRevision.setStatus('mandatory')
cxIoCardOperAssemblyAndEco = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxIoCardOperAssemblyAndEco.setStatus('mandatory')
cxIoCardOperSpecialEco = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxIoCardOperSpecialEco.setStatus('mandatory')
cxIoHwCardTypeTrapReport = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxIoHwCardTypeTrapReport.setStatus('mandatory')
cxIHMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxIHMibLevel.setStatus('mandatory')
cxIoHwCardTypeTrap = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 2) + (0,1)).setObjects(("CXIoHardware-MIB", "cxIoCardOperPhysSlot"), ("CXIoHardware-MIB", "cxIoCardOperState"), ("CXIoHardware-MIB", "cxIoCardOperType"))
mibBuilder.exportSymbols("CXIoHardware-MIB", cxIoCardOperPhysSlot=cxIoCardOperPhysSlot, cxIoHwCardTypeTrapReport=cxIoHwCardTypeTrapReport, cxIoPortAdmAlias=cxIoPortAdmAlias, cxIoCardAdmPhysSlot=cxIoCardAdmPhysSlot, cxIoCardAdmEntry=cxIoCardAdmEntry, cxIoPortAdmTable=cxIoPortAdmTable, cxIoPortAdmCardAlias=cxIoPortAdmCardAlias, cxIoCardOperAssemblyAndEco=cxIoCardOperAssemblyAndEco, cxIoCardAdmAlias=cxIoCardAdmAlias, cxIoCardOperSpecialEco=cxIoCardOperSpecialEco, cxIHMibLevel=cxIHMibLevel, cxIoCardOperEntry=cxIoCardOperEntry, cxIoPortAdmIndex=cxIoPortAdmIndex, cxIoCardAdmIndex=cxIoCardAdmIndex, cxIoCardOperType=cxIoCardOperType, cxIoCardAdmType=cxIoCardAdmType, cxIoCardAdmState=cxIoCardAdmState, cxIoCardOperState=cxIoCardOperState, cxIoCardOperRevision=cxIoCardOperRevision, cxIoCardAdmTable=cxIoCardAdmTable, cxIoPortAdmEntry=cxIoPortAdmEntry, cxIoHwCardTypeTrap=cxIoHwCardTypeTrap, cxIoCardOperTable=cxIoCardOperTable, cxIoCardAdmRowStatus=cxIoCardAdmRowStatus, cxIoPortAdmRowStatus=cxIoPortAdmRowStatus, cxIoPortAdmCardLocalIndex=cxIoPortAdmCardLocalIndex)
