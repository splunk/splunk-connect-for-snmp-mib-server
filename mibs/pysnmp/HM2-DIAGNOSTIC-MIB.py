#
# PySNMP MIB module HM2-DIAGNOSTIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-DIAGNOSTIC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:18:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hm2IfacePhysIndex, = mibBuilder.importSymbols("HM2-DEVMGMT-MIB", "hm2IfacePhysIndex")
hm2PSID, = mibBuilder.importSymbols("HM2-PWRMGMT-MIB", "hm2PSID")
HmEnabledStatus, HmTimeSeconds1970, hm2ConfigurationMibs = mibBuilder.importSymbols("HM2-TC-MIB", "HmEnabledStatus", "HmTimeSeconds1970", "hm2ConfigurationMibs")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, NotificationType, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, TimeTicks, Counter32, iso, Gauge32, Counter64, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "TimeTicks", "Counter32", "iso", "Gauge32", "Counter64", "Integer32", "IpAddress")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
hm2DiagnosticMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 22))
hm2DiagnosticMib.setRevisions(('2012-08-28 00:00', '2011-03-16 00:00',))
if mibBuilder.loadTexts: hm2DiagnosticMib.setLastUpdated('201208280000Z')
if mibBuilder.loadTexts: hm2DiagnosticMib.setOrganization('Hirschmann Automation and Control GmbH')
class Hm2LedType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("power", 1), ("status", 2), ("rm", 3), ("envm", 4), ("i1", 5), ("i2", 6))

class Hm2LedStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))
    namedValues = NamedValues(("off", 1), ("greenSolid", 2), ("greenBlink1", 3), ("greenBlink3", 4), ("greenBlink4", 5), ("greenBlink5", 6), ("greenBlink5i", 7), ("yellowSolid", 8), ("yellowBlink1", 9), ("yellowBlink3", 10), ("yellowBlink4", 11), ("yellowBlink5", 12), ("redSolid", 13), ("redBlink1", 14), ("redBlink3", 15), ("redBlink4", 16), ("redBlink5", 17))

hm2DiagnosticMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 0))
hm2DiagnosticMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1))
hm2DiagnosticSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 3))
hm2DiagSelftestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1))
hm2DiagBootGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 2))
hm2DiagDeviceMonitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3))
hm2DiagLedGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4))
hm2DiagIfaceUtilizationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5))
hm2DiagCableTesterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6))
hm2PortMonitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7))
hm2DiagResourcesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8))
hm2DiagSelftestRAM = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagSelftestRAM.setStatus('current')
hm2DiagSelftestBootTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagSelftestBootTime.setStatus('current')
hm2DiagSelftestActionTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1, 10), )
if mibBuilder.loadTexts: hm2DiagSelftestActionTable.setStatus('current')
hm2DiagSelftestActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1, 10, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DiagSelftestActionCause"))
if mibBuilder.loadTexts: hm2DiagSelftestActionEntry.setStatus('current')
hm2DiagSelftestActionCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("task", 1), ("resource", 2), ("software", 3), ("hardware", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagSelftestActionCause.setStatus('current')
hm2DiagSelftestAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("logOnly", 1), ("sendTrap", 2), ("reboot", 3))).clone('reboot')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagSelftestAction.setStatus('current')
hm2BootSystemMonitor = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 2, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2BootSystemMonitor.setStatus('current')
hm2BootDefaultConfigOnError = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 2, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2BootDefaultConfigOnError.setStatus('current')
hm2BootConfigPushButton = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 2, 3), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2BootConfigPushButton.setStatus('current')
hm2SignalContactGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1))
hm2SigConCommonTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1), )
if mibBuilder.loadTexts: hm2SigConCommonTable.setStatus('current')
hm2SigConCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2SigConID"))
if mibBuilder.loadTexts: hm2SigConCommonEntry.setStatus('current')
hm2SigConID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConID.setStatus('current')
hm2SigConTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConTrapEnable.setStatus('current')
hm2SigConTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 1), ("power-supply", 2), ("link-failure", 3), ("temperature", 4), ("fan-failure", 5), ("module-removal", 6), ("ext-nvm-removal", 7), ("ext-nvm-not-in-sync", 8), ("ring-redundancy", 9), ("password-change", 10), ("password-min-length", 11), ("password-policy-not-configured", 12), ("password-policy-inactive", 13), ("telnet-enabled", 14), ("http-enabled", 15), ("snmp-unsecure", 16), ("sysmon-enabled", 17), ("ext-nvm-update-enabled", 18), ("no-link", 19), ("hidisc-write-enabled", 20), ("ext-nvm-config-load-unsecure", 21), ("https-certificate-warning", 23), ("modbus-tcp-enabled", 24), ("ethernet-ip-enabled", 25), ("profinet-io-enabled", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConTrapCause.setStatus('current')
hm2SigConTrapCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConTrapCauseIndex.setStatus('current')
hm2SigConMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("manual", 1), ("monitor", 2), ("deviceState", 3), ("deviceSecurity", 4), ("deviceStateAndSecurity", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConMode.setStatus('current')
hm2SigConOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConOperState.setStatus('current')
hm2SigConOperTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 7), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConOperTimeStamp.setStatus('current')
hm2SigConManualActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConManualActivate.setStatus('current')
hm2SigConSenseLinkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 9), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseLinkFailure.setStatus('current')
hm2SigConSenseTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 10), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseTemperature.setStatus('current')
hm2SigConSenseFan = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 11), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseFan.setStatus('current')
hm2SigConSenseModuleRemoval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 12), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseModuleRemoval.setStatus('current')
hm2SigConSenseExtNvmRemoval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 13), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseExtNvmRemoval.setStatus('current')
hm2SigConSenseExtNvmNotInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 14), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseExtNvmNotInSync.setStatus('current')
hm2SigConSenseRingRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 1, 1, 15), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseRingRedundancy.setStatus('current')
hm2SigConPSTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 2), )
if mibBuilder.loadTexts: hm2SigConPSTable.setStatus('current')
hm2SigConPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 2, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2SigConID"), (0, "HM2-PWRMGMT-MIB", "hm2PSID"))
if mibBuilder.loadTexts: hm2SigConPSEntry.setStatus('current')
hm2SigConSensePSState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 2, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSensePSState.setStatus('current')
hm2SigConInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 3), )
if mibBuilder.loadTexts: hm2SigConInterfaceTable.setStatus('current')
hm2SigConInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 3, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2SigConID"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2SigConInterfaceEntry.setStatus('current')
hm2SigConSenseIfLinkAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 3, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseIfLinkAlarm.setStatus('current')
hm2SigConModuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 4), )
if mibBuilder.loadTexts: hm2SigConModuleTable.setStatus('current')
hm2SigConModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 4, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2SigConID"), (0, "HM2-DIAGNOSTIC-MIB", "hm2SigConModID"))
if mibBuilder.loadTexts: hm2SigConModuleEntry.setStatus('current')
hm2SigConModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConModID.setStatus('current')
hm2SigConSenseModule = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 4, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2SigConSenseModule.setStatus('current')
hm2SigConStatusTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 10), )
if mibBuilder.loadTexts: hm2SigConStatusTable.setStatus('current')
hm2SigConStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 10, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2SigConID"), (0, "HM2-DIAGNOSTIC-MIB", "hm2SigConStatusIndex"))
if mibBuilder.loadTexts: hm2SigConStatusEntry.setStatus('current')
hm2SigConStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2SigConStatusIndex.setStatus('current')
hm2SigConStatusTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 10, 1, 2), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConStatusTimeStamp.setStatus('current')
hm2SigConStatusTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 1), ("power-supply", 2), ("link-failure", 3), ("temperature", 4), ("fan-failure", 5), ("module-removal", 6), ("ext-nvm-removal", 7), ("ext-nvm-not-in-sync", 8), ("ring-redundancy", 9), ("password-change", 10), ("password-min-length", 11), ("password-policy-not-configured", 12), ("password-policy-inactive", 13), ("telnet-enabled", 14), ("http-enabled", 15), ("snmp-unsecure", 16), ("sysmon-enabled", 17), ("ext-nvm-update-enabled", 18), ("no-link", 19), ("hidisc-write-enabled", 20), ("ext-nvm-config-load-unsecure", 21), ("iec61850-mms-enabled", 22), ("https-certificate-warning", 23), ("modbus-tcp-enabled", 24), ("ethernet-ip-enabled", 25), ("profinet-io-enabled", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConStatusTrapCause.setStatus('current')
hm2SigConStatusTrapCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2SigConStatusTrapCauseIndex.setStatus('current')
hm2DeviceMonitorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2))
hm2DevMonCommonTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1), )
if mibBuilder.loadTexts: hm2DevMonCommonTable.setStatus('current')
hm2DevMonCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonID"))
if mibBuilder.loadTexts: hm2DevMonCommonEntry.setStatus('current')
hm2DevMonID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonID.setStatus('current')
hm2DevMonTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 2), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonTrapEnable.setStatus('current')
hm2DevMonTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("power-supply", 2), ("link-failure", 3), ("temperature", 4), ("fan-failure", 5), ("module-removal", 6), ("ext-nvm-removal", 7), ("ext-nvm-not-in-sync", 8), ("ring-redundancy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonTrapCause.setStatus('current')
hm2DevMonTrapCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonTrapCauseIndex.setStatus('current')
hm2DevMonOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noerror", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonOperState.setStatus('current')
hm2DevMonOperTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 6), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonOperTimeStamp.setStatus('current')
hm2DevMonSenseLinkFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 7), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseLinkFailure.setStatus('current')
hm2DevMonSenseTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 8), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseTemperature.setStatus('current')
hm2DevMonSenseFan = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 9), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseFan.setStatus('current')
hm2DevMonSenseModuleRemoval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 10), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseModuleRemoval.setStatus('current')
hm2DevMonSenseExtNvmRemoval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 11), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseExtNvmRemoval.setStatus('current')
hm2DevMonSenseExtNvmNotInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 12), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseExtNvmNotInSync.setStatus('current')
hm2DevMonSenseRingRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 1, 1, 13), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseRingRedundancy.setStatus('current')
hm2DevMonPSTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 2), )
if mibBuilder.loadTexts: hm2DevMonPSTable.setStatus('current')
hm2DevMonPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 2, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonID"), (0, "HM2-PWRMGMT-MIB", "hm2PSID"))
if mibBuilder.loadTexts: hm2DevMonPSEntry.setStatus('current')
hm2DevMonSensePSState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 2, 1, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSensePSState.setStatus('current')
hm2DevMonInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 3), )
if mibBuilder.loadTexts: hm2DevMonInterfaceTable.setStatus('current')
hm2DevMonInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 3, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonID"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2DevMonInterfaceEntry.setStatus('current')
hm2DevMonSenseIfLinkAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 3, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseIfLinkAlarm.setStatus('current')
hm2DevMonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 4), )
if mibBuilder.loadTexts: hm2DevMonModuleTable.setStatus('current')
hm2DevMonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 4, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonID"), (0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonModID"))
if mibBuilder.loadTexts: hm2DevMonModuleEntry.setStatus('current')
hm2DevMonModID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonModID.setStatus('current')
hm2DevMonSenseModule = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 4, 1, 2), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevMonSenseModule.setStatus('current')
hm2DevMonStatusTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 10), )
if mibBuilder.loadTexts: hm2DevMonStatusTable.setStatus('current')
hm2DevMonStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 10, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonID"), (0, "HM2-DIAGNOSTIC-MIB", "hm2DevMonStatusIndex"))
if mibBuilder.loadTexts: hm2DevMonStatusEntry.setStatus('current')
hm2DevMonStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2DevMonStatusIndex.setStatus('current')
hm2DevMonStatusTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 10, 1, 2), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonStatusTimeStamp.setStatus('current')
hm2DevMonStatusTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("power-supply", 2), ("link-failure", 3), ("temperature", 4), ("fan-failure", 5), ("module-removal", 6), ("ext-nvm-removal", 7), ("ext-nvm-not-in-sync", 8), ("ring-redundancy", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonStatusTrapCause.setStatus('current')
hm2DevMonStatusTrapCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevMonStatusTrapCauseIndex.setStatus('current')
hm2DeviceSecurityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3))
hm2DevSecConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1))
hm2DevSecTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecTrapEnable.setStatus('current')
hm2DevSecTrapCause = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 1), ("password-change", 10), ("password-min-length", 11), ("password-policy-not-configured", 12), ("password-policy-inactive", 13), ("telnet-enabled", 14), ("http-enabled", 15), ("snmp-unsecure", 16), ("sysmon-enabled", 17), ("ext-nvm-update-enabled", 18), ("no-link", 19), ("hidisc-write-enabled", 20), ("ext-nvm-config-load-unsecure", 21), ("iec61850-mms-enabled", 22), ("https-certificate-warning", 23), ("modbus-tcp-enabled", 24), ("ethernet-ip-enabled", 25), ("profinet-io-enabled", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecTrapCause.setStatus('current')
hm2DevSecTrapCauseIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecTrapCauseIndex.setStatus('current')
hm2DevSecOperState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noerror", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecOperState.setStatus('current')
hm2DevSecOperTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 5), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecOperTimeStamp.setStatus('current')
hm2DevSecSensePasswordChange = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 6), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSensePasswordChange.setStatus('current')
hm2DevSecSensePasswordMinLength = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 7), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSensePasswordMinLength.setStatus('current')
hm2DevSecSensePasswordStrengthNotConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 8), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSensePasswordStrengthNotConfigured.setStatus('current')
hm2DevSecSenseBypassPasswordStrength = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 9), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseBypassPasswordStrength.setStatus('current')
hm2DevSecSenseTelnetEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 10), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseTelnetEnabled.setStatus('current')
hm2DevSecSenseHttpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 11), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseHttpEnabled.setStatus('current')
hm2DevSecSenseSnmpUnsecure = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 12), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseSnmpUnsecure.setStatus('current')
hm2DevSecSenseSysmonEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 13), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseSysmonEnabled.setStatus('current')
hm2DevSecSenseExtNvmUpdateEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 14), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseExtNvmUpdateEnabled.setStatus('current')
hm2DevSecSenseNoLinkEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 15), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseNoLinkEnabled.setStatus('current')
hm2DevSecSenseHiDiscoveryEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 16), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseHiDiscoveryEnabled.setStatus('current')
hm2DevSecSenseExtNvmConfigLoadUnsecure = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 17), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseExtNvmConfigLoadUnsecure.setStatus('current')
hm2DevSecSenseIec61850MmsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 18), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseIec61850MmsEnabled.setStatus('current')
hm2DevSecSenseHttpsCertificateWarning = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 19), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseHttpsCertificateWarning.setStatus('current')
hm2DevSecSenseModbusTcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 20), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseModbusTcpEnabled.setStatus('current')
hm2DevSecSenseEtherNetIpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 21), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseEtherNetIpEnabled.setStatus('current')
hm2DevSecSenseProfinetIOEnabled = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 1, 22), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseProfinetIOEnabled.setStatus('current')
hm2DevSecInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 2), )
if mibBuilder.loadTexts: hm2DevSecInterfaceTable.setStatus('current')
hm2DevSecInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2DevSecInterfaceEntry.setStatus('current')
hm2DevSecSenseIfNoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 2, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DevSecSenseIfNoLink.setStatus('current')
hm2DevSecStatusTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 10), )
if mibBuilder.loadTexts: hm2DevSecStatusTable.setStatus('current')
hm2DevSecStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 10, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DevSecStatusIndex"))
if mibBuilder.loadTexts: hm2DevSecStatusEntry.setStatus('current')
hm2DevSecStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: hm2DevSecStatusIndex.setStatus('current')
hm2DevSecStatusTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 10, 1, 2), HmTimeSeconds1970()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecStatusTimeStamp.setStatus('current')
hm2DevSecStatusTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("none", 1), ("password-change", 10), ("password-min-length", 11), ("password-policy-not-configured", 12), ("password-policy-inactive", 13), ("telnet-enabled", 14), ("http-enabled", 15), ("snmp-unsecure", 16), ("sysmon-enabled", 17), ("ext-nvm-update-enabled", 18), ("no-link", 19), ("hidisc-write-enabled", 20), ("ext-nvm-config-load-unsecure", 21), ("iec61850-mms-enabled", 22), ("https-certificate-warning", 23), ("modbus-tcp-enabled", 24), ("ethernet-ip-enabled", 25), ("profinet-io-enabled", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecStatusTrapCause.setStatus('current')
hm2DevSecStatusTrapCauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 3, 3, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DevSecStatusTrapCauseIndex.setStatus('current')
hm2LedGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 1), )
if mibBuilder.loadTexts: hm2LedGlobalTable.setStatus('current')
hm2LedGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 1, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2LedGlobalLedType"))
if mibBuilder.loadTexts: hm2LedGlobalEntry.setStatus('current')
hm2LedGlobalLedType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 1, 1, 1), Hm2LedType())
if mibBuilder.loadTexts: hm2LedGlobalLedType.setStatus('current')
hm2LedGlobalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 1, 1, 2), Hm2LedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LedGlobalStatus.setStatus('current')
hm2LedPortTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 2), )
if mibBuilder.loadTexts: hm2LedPortTable.setStatus('current')
hm2LedPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 2, 1), ).setIndexNames((0, "HM2-DEVMGMT-MIB", "hm2IfacePhysIndex"))
if mibBuilder.loadTexts: hm2LedPortEntry.setStatus('current')
hm2LedPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 2, 1, 1), Hm2LedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LedPortStatus.setStatus('current')
hm2LedPortPoeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 2, 1, 2), Hm2LedStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LedPortPoeStatus.setStatus('current')
hm2LedPortSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 2, 1, 3), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LedPortSignaling.setStatus('current')
hm2LedControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 3))
hm2LedPortMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("portpanel", 0), ("servicepanel", 1))).clone('servicepanel')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LedPortMode.setStatus('current')
hm2DiagIfaceUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1), )
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationTable.setStatus('current')
hm2DiagIfaceUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationEntry.setStatus('current')
hm2DiagIfaceUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagIfaceUtilization.setStatus('current')
hm2DiagIfaceUtilizationControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationControlInterval.setStatus('current')
hm2DiagIfaceUtilizationAlarmLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationAlarmLowerThreshold.setStatus('current')
hm2DiagIfaceUtilizationAlarmUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationAlarmUpperThreshold.setStatus('current')
hm2DiagIfaceUtilizationAlarmCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 5, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationAlarmCondition.setStatus('current')
hm2DiagCableTesterStatus = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("success", 2), ("failure", 3), ("uninitialized", 4))).clone('uninitialized')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagCableTesterStatus.setStatus('current')
hm2DiagCableTesterIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagCableTesterIfIndex.setStatus('current')
hm2DiagCableTesterCableTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10), )
if mibBuilder.loadTexts: hm2DiagCableTesterCableTable.setStatus('current')
hm2DiagCableTesterCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10, 1), ).setIndexNames((0, "HM2-DIAGNOSTIC-MIB", "hm2DiagCableTesterCablePair"))
if mibBuilder.loadTexts: hm2DiagCableTesterCableEntry.setStatus('current')
hm2DiagCableTesterCablePair = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hm2DiagCableTesterCablePair.setStatus('current')
hm2DiagCableTesterCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("open", 2), ("short", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCableTesterCableStatus.setStatus('current')
hm2DiagCableTesterCableMinimumLength = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCableTesterCableMinimumLength.setStatus('current')
hm2DiagCableTesterCableMaximumLength = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCableTesterCableMaximumLength.setStatus('current')
hm2DiagCableTesterCableFailureLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 6, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCableTesterCableFailureLocation.setStatus('current')
hm2PortMonitorAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorAdminMode.setStatus('current')
hm2PortMonitorIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 2), )
if mibBuilder.loadTexts: hm2PortMonitorIntfTable.setStatus('current')
hm2PortMonitorIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PortMonitorIntfEntry.setStatus('current')
hm2PortMonitorIntfReset = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorIntfReset.setStatus('current')
hm2PortMonitorIntfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port-disable", 1), ("trap-only", 2), ("auto-disable", 3))).clone('auto-disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorIntfAction.setStatus('current')
hm2PortMonitorConditionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3))
hm2KbpsUnitTrafficTypeInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 4))
if mibBuilder.loadTexts: hm2KbpsUnitTrafficTypeInvalid.setStatus('current')
hm2PortMonitorConditionIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1), )
if mibBuilder.loadTexts: hm2PortMonitorConditionIntfTable.setStatus('current')
hm2PortMonitorConditionIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PortMonitorConditionIntfEntry.setStatus('current')
hm2PortMonitorConditionField = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1, 1), Bits().clone(namedValues=NamedValues(("none", 0), ("link-flap", 1), ("crcFragments", 2), ("duplexMismatch", 3), ("overload-detection", 4), ("speed-duplex", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionField.setStatus('current')
hm2PortMonitorConditionLinkFlapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapMode.setStatus('current')
hm2PortMonitorConditionCrcFragmentsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsMode.setStatus('current')
hm2PortMonitorConditionDuplexMismatchDetectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionDuplexMismatchDetectionMode.setStatus('current')
hm2PortMonitorConditionOverloadDetectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionOverloadDetectionMode.setStatus('current')
hm2PortMonitorConditionSpeedDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionSpeedDuplexMode.setStatus('current')
hm2PortMonitorConditionLinkFlapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2))
hm2PortMonitorConditionLinkFlapIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2, 1), )
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapIntfTable.setStatus('current')
hm2PortMonitorConditionLinkFlapIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapIntfEntry.setStatus('current')
hm2PortMonitorConditionLinkFlapInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 180)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapInterval.setStatus('current')
hm2PortMonitorConditionLinkFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapCount.setStatus('current')
hm2PortMonitorConditionLinkFlapCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapCountInterval.setStatus('current')
hm2PortMonitorConditionLinkFlapCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionLinkFlapCountTotal.setStatus('current')
hm2PortMonitorConditionCrcFragmentsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3))
hm2PortMonitorConditionCrcFragmentsIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3, 1), )
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsIntfTable.setStatus('current')
hm2PortMonitorConditionCrcFragmentsIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsIntfEntry.setStatus('current')
hm2PortMonitorConditionCrcFragmentsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 180)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsInterval.setStatus('current')
hm2PortMonitorConditionCrcFragmentsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsCount.setStatus('current')
hm2PortMonitorConditionCrcFragmentsCountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsCountInterval.setStatus('current')
hm2PortMonitorConditionCrcFragmentsCountTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionCrcFragmentsCountTotal.setStatus('current')
hm2PortMonitorConditionOverloadDetectionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4))
hm2PortMonitorConditionOvldDetIntfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1), )
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetIntfTable.setStatus('current')
hm2PortMonitorConditionOvldDetIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetIntfEntry.setStatus('current')
hm2PortMonitorConditionOvldDetTrfcType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("bc", 2), ("bc-mc", 3))).clone('bc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetTrfcType.setStatus('current')
hm2PortMonitorConditionOvldDetTholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pps", 1), ("kbps", 2))).clone('pps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetTholdType.setStatus('current')
hm2PortMonitorConditionOvldDetLwrTholdVal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetLwrTholdVal.setStatus('current')
hm2PortMonitorConditionOvldDetUprTholdVal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetUprTholdVal.setStatus('current')
hm2PortMonitorConditionOvldDetIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetIntvl.setStatus('current')
hm2PortMonitorConditionOvldDetPkgCntAll = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetPkgCntAll.setStatus('current')
hm2PortMonitorConditionOvldDetPkgCntBC = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetPkgCntBC.setStatus('current')
hm2PortMonitorConditionOvldDetPkgCntMC = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetPkgCntMC.setStatus('current')
hm2PortMonitorConditionOvldDetPkgCntKbit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2PortMonitorConditionOvldDetPkgCntKbit.setStatus('current')
hm2PortMonitorConditionSpeedDuplexGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 5))
hm2PortMonitorConditionSpeedDuplexTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 5, 1), )
if mibBuilder.loadTexts: hm2PortMonitorConditionSpeedDuplexTable.setStatus('current')
hm2PortMonitorConditionSpeedDuplexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2PortMonitorConditionSpeedDuplexEntry.setStatus('current')
hm2PortMonitorConditionSpeedDuplexValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 7, 3, 5, 1, 1, 1), Bits().clone(namedValues=NamedValues(("hdx-10", 0), ("fdx-10", 1), ("hdx-100", 2), ("fdx-100", 3), ("hdx-1000", 4), ("fdx-1000", 5), ("fdx-2500", 6))).clone(namedValues=NamedValues(("hdx-10", 0), ("fdx-10", 1), ("hdx-100", 2), ("fdx-100", 3), ("hdx-1000", 4), ("fdx-1000", 5), ("fdx-2500", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2PortMonitorConditionSpeedDuplexValue.setStatus('current')
hm2DiagEnableMeasurement = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 1), HmEnabledStatus().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2DiagEnableMeasurement.setStatus('current')
hm2DiagCpuResourcesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 10))
hm2DiagCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCpuUtilization.setStatus('current')
hm2DiagCpuAverageUtilization = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCpuAverageUtilization.setStatus('current')
hm2DiagCpuRunningProcesses = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCpuRunningProcesses.setStatus('current')
hm2DiagCpuMaxRunningProcesses = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagCpuMaxRunningProcesses.setStatus('current')
hm2DiagMemoryResourcesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11))
hm2DiagMemoryRamAllocated = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryRamAllocated.setStatus('current')
hm2DiagMemoryRamFree = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryRamFree.setStatus('current')
hm2DiagMemoryRamAllocatedAverage = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryRamAllocatedAverage.setStatus('current')
hm2DiagMemoryRamFreeAverage = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryRamFreeAverage.setStatus('current')
hm2DiagMemoryRawFlashMainAllocated = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryRawFlashMainAllocated.setStatus('current')
hm2DiagMemoryRawFlashMainFree = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryRawFlashMainFree.setStatus('current')
hm2DiagMemoryFlashFileSystemAllocated = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryFlashFileSystemAllocated.setStatus('current')
hm2DiagMemoryFlashFileSystemFree = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 11, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('kBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagMemoryFlashFileSystemFree.setStatus('current')
hm2DiagNetworkResourcesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 12))
hm2DiagNetworkCpuIfUtilization = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('precent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagNetworkCpuIfUtilization.setStatus('current')
hm2DiagNetworkCpuIfAverageUtilization = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 22, 1, 8, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('precent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2DiagNetworkCpuIfAverageUtilization.setStatus('current')
hm2SigConStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 22, 0, 1)).setObjects(("HM2-DIAGNOSTIC-MIB", "hm2SigConID"), ("HM2-DIAGNOSTIC-MIB", "hm2SigConOperState"), ("HM2-DIAGNOSTIC-MIB", "hm2SigConTrapCause"), ("HM2-DIAGNOSTIC-MIB", "hm2SigConTrapCauseIndex"))
if mibBuilder.loadTexts: hm2SigConStateChangeTrap.setStatus('current')
hm2DevMonStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 22, 0, 2)).setObjects(("HM2-DIAGNOSTIC-MIB", "hm2DevMonID"), ("HM2-DIAGNOSTIC-MIB", "hm2DevMonOperState"), ("HM2-DIAGNOSTIC-MIB", "hm2DevMonTrapCause"), ("HM2-DIAGNOSTIC-MIB", "hm2DevMonTrapCauseIndex"))
if mibBuilder.loadTexts: hm2DevMonStateChangeTrap.setStatus('current')
hm2DevSecStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 22, 0, 3)).setObjects(("HM2-DIAGNOSTIC-MIB", "hm2DevSecOperState"), ("HM2-DIAGNOSTIC-MIB", "hm2DevSecTrapCause"), ("HM2-DIAGNOSTIC-MIB", "hm2DevSecTrapCauseIndex"))
if mibBuilder.loadTexts: hm2DevSecStateChangeTrap.setStatus('current')
hm2DiagSelftestActionTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 22, 0, 4)).setObjects(("HM2-DIAGNOSTIC-MIB", "hm2DiagSelftestActionCause"))
if mibBuilder.loadTexts: hm2DiagSelftestActionTrap.setStatus('current')
hm2DiagIfaceUtilizationTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 22, 0, 5)).setObjects(("HM2-DIAGNOSTIC-MIB", "hm2DiagIfaceUtilization"), ("HM2-DIAGNOSTIC-MIB", "hm2DiagIfaceUtilizationAlarmCondition"))
if mibBuilder.loadTexts: hm2DiagIfaceUtilizationTrap.setStatus('current')
hm2PortMonitorPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 22, 0, 6)).setObjects(("IF-MIB", "ifIndex"), ("HM2-DIAGNOSTIC-MIB", "hm2PortMonitorConditionField"))
if mibBuilder.loadTexts: hm2PortMonitorPortTrap.setStatus('current')
hm2PortMonitorSpeedDuplexErrorReturn = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 22, 3, 1))
if mibBuilder.loadTexts: hm2PortMonitorSpeedDuplexErrorReturn.setStatus('current')
hm2PortMonitorCndOvldDetInconsistenTholdVal = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 22, 3, 2))
if mibBuilder.loadTexts: hm2PortMonitorCndOvldDetInconsistenTholdVal.setStatus('current')
mibBuilder.exportSymbols("HM2-DIAGNOSTIC-MIB", hm2SigConStatusTable=hm2SigConStatusTable, hm2DiagCableTesterIfIndex=hm2DiagCableTesterIfIndex, hm2PortMonitorConditionOvldDetPkgCntAll=hm2PortMonitorConditionOvldDetPkgCntAll, hm2SigConStatusTimeStamp=hm2SigConStatusTimeStamp, hm2BootConfigPushButton=hm2BootConfigPushButton, hm2DiagDeviceMonitorGroup=hm2DiagDeviceMonitorGroup, hm2DevSecSenseNoLinkEnabled=hm2DevSecSenseNoLinkEnabled, hm2DevMonSenseFan=hm2DevMonSenseFan, hm2DevSecTrapEnable=hm2DevSecTrapEnable, hm2DiagIfaceUtilizationAlarmUpperThreshold=hm2DiagIfaceUtilizationAlarmUpperThreshold, hm2PortMonitorConditionCrcFragmentsMode=hm2PortMonitorConditionCrcFragmentsMode, hm2PortMonitorCndOvldDetInconsistenTholdVal=hm2PortMonitorCndOvldDetInconsistenTholdVal, hm2PortMonitorConditionLinkFlapMode=hm2PortMonitorConditionLinkFlapMode, hm2PortMonitorConditionOvldDetPkgCntMC=hm2PortMonitorConditionOvldDetPkgCntMC, hm2SigConTrapCauseIndex=hm2SigConTrapCauseIndex, hm2KbpsUnitTrafficTypeInvalid=hm2KbpsUnitTrafficTypeInvalid, hm2DiagLedGroup=hm2DiagLedGroup, hm2DevMonStatusTrapCauseIndex=hm2DevMonStatusTrapCauseIndex, hm2PortMonitorGroup=hm2PortMonitorGroup, hm2DevMonTrapCause=hm2DevMonTrapCause, hm2LedPortPoeStatus=hm2LedPortPoeStatus, hm2DevSecOperTimeStamp=hm2DevSecOperTimeStamp, hm2PortMonitorIntfAction=hm2PortMonitorIntfAction, hm2DiagnosticMib=hm2DiagnosticMib, hm2DevMonModID=hm2DevMonModID, hm2DiagMemoryRamFreeAverage=hm2DiagMemoryRamFreeAverage, hm2SigConStateChangeTrap=hm2SigConStateChangeTrap, hm2PortMonitorConditionSpeedDuplexGroup=hm2PortMonitorConditionSpeedDuplexGroup, hm2DevMonStateChangeTrap=hm2DevMonStateChangeTrap, hm2DevSecSenseSnmpUnsecure=hm2DevSecSenseSnmpUnsecure, hm2DevMonStatusIndex=hm2DevMonStatusIndex, hm2DiagIfaceUtilization=hm2DiagIfaceUtilization, hm2PortMonitorConditionLinkFlapCount=hm2PortMonitorConditionLinkFlapCount, hm2DiagCpuMaxRunningProcesses=hm2DiagCpuMaxRunningProcesses, hm2PortMonitorConditionLinkFlapCountTotal=hm2PortMonitorConditionLinkFlapCountTotal, hm2DiagNetworkCpuIfAverageUtilization=hm2DiagNetworkCpuIfAverageUtilization, hm2DevSecSenseHttpEnabled=hm2DevSecSenseHttpEnabled, hm2DiagSelftestActionCause=hm2DiagSelftestActionCause, hm2SigConTrapEnable=hm2SigConTrapEnable, hm2PortMonitorConditionCrcFragmentsCountInterval=hm2PortMonitorConditionCrcFragmentsCountInterval, hm2DevMonTrapEnable=hm2DevMonTrapEnable, hm2DevSecSenseIec61850MmsEnabled=hm2DevSecSenseIec61850MmsEnabled, hm2DiagIfaceUtilizationEntry=hm2DiagIfaceUtilizationEntry, hm2PortMonitorConditionIntfEntry=hm2PortMonitorConditionIntfEntry, hm2PortMonitorConditionLinkFlapCountInterval=hm2PortMonitorConditionLinkFlapCountInterval, hm2PortMonitorConditionOvldDetTrfcType=hm2PortMonitorConditionOvldDetTrfcType, hm2LedGlobalTable=hm2LedGlobalTable, hm2SigConStatusTrapCauseIndex=hm2SigConStatusTrapCauseIndex, hm2DiagCpuAverageUtilization=hm2DiagCpuAverageUtilization, hm2PortMonitorConditionIntfTable=hm2PortMonitorConditionIntfTable, hm2SigConCommonTable=hm2SigConCommonTable, PYSNMP_MODULE_ID=hm2DiagnosticMib, hm2DevSecSenseTelnetEnabled=hm2DevSecSenseTelnetEnabled, hm2SignalContactGroup=hm2SignalContactGroup, hm2SigConSenseExtNvmRemoval=hm2SigConSenseExtNvmRemoval, hm2DevSecSenseBypassPasswordStrength=hm2DevSecSenseBypassPasswordStrength, hm2DevMonTrapCauseIndex=hm2DevMonTrapCauseIndex, hm2DiagCableTesterCableMinimumLength=hm2DiagCableTesterCableMinimumLength, hm2DevSecSenseEtherNetIpEnabled=hm2DevSecSenseEtherNetIpEnabled, hm2DiagCableTesterCableTable=hm2DiagCableTesterCableTable, hm2DevMonModuleTable=hm2DevMonModuleTable, hm2DiagIfaceUtilizationAlarmCondition=hm2DiagIfaceUtilizationAlarmCondition, hm2DevSecSenseExtNvmConfigLoadUnsecure=hm2DevSecSenseExtNvmConfigLoadUnsecure, hm2DiagSelftestAction=hm2DiagSelftestAction, hm2PortMonitorConditionSpeedDuplexEntry=hm2PortMonitorConditionSpeedDuplexEntry, hm2DiagSelftestBootTime=hm2DiagSelftestBootTime, hm2SigConSenseRingRedundancy=hm2SigConSenseRingRedundancy, hm2BootDefaultConfigOnError=hm2BootDefaultConfigOnError, hm2LedGlobalLedType=hm2LedGlobalLedType, hm2DiagMemoryRawFlashMainFree=hm2DiagMemoryRawFlashMainFree, Hm2LedStatus=Hm2LedStatus, hm2PortMonitorConditionSpeedDuplexMode=hm2PortMonitorConditionSpeedDuplexMode, Hm2LedType=Hm2LedType, hm2PortMonitorIntfReset=hm2PortMonitorIntfReset, hm2DevMonSenseTemperature=hm2DevMonSenseTemperature, hm2DiagEnableMeasurement=hm2DiagEnableMeasurement, hm2DiagSelftestGroup=hm2DiagSelftestGroup, hm2SigConSenseTemperature=hm2SigConSenseTemperature, hm2SigConPSEntry=hm2SigConPSEntry, hm2SigConSensePSState=hm2SigConSensePSState, hm2DevMonPSEntry=hm2DevMonPSEntry, hm2DevMonInterfaceEntry=hm2DevMonInterfaceEntry, hm2DiagIfaceUtilizationAlarmLowerThreshold=hm2DiagIfaceUtilizationAlarmLowerThreshold, hm2DiagCableTesterCableMaximumLength=hm2DiagCableTesterCableMaximumLength, hm2PortMonitorConditionCrcFragmentsGroup=hm2PortMonitorConditionCrcFragmentsGroup, hm2PortMonitorConditionCrcFragmentsInterval=hm2PortMonitorConditionCrcFragmentsInterval, hm2PortMonitorConditionSpeedDuplexTable=hm2PortMonitorConditionSpeedDuplexTable, hm2SigConSenseModuleRemoval=hm2SigConSenseModuleRemoval, hm2PortMonitorPortTrap=hm2PortMonitorPortTrap, hm2DevMonSenseLinkFailure=hm2DevMonSenseLinkFailure, hm2PortMonitorConditionCrcFragmentsIntfTable=hm2PortMonitorConditionCrcFragmentsIntfTable, hm2PortMonitorConditionDuplexMismatchDetectionMode=hm2PortMonitorConditionDuplexMismatchDetectionMode, hm2DevSecSenseProfinetIOEnabled=hm2DevSecSenseProfinetIOEnabled, hm2DevSecTrapCause=hm2DevSecTrapCause, hm2DiagCableTesterCablePair=hm2DiagCableTesterCablePair, hm2SigConSenseLinkFailure=hm2SigConSenseLinkFailure, hm2DevSecStatusTrapCauseIndex=hm2DevSecStatusTrapCauseIndex, hm2PortMonitorConditionOvldDetPkgCntBC=hm2PortMonitorConditionOvldDetPkgCntBC, hm2DiagMemoryRamAllocatedAverage=hm2DiagMemoryRamAllocatedAverage, hm2DiagSelftestActionTable=hm2DiagSelftestActionTable, hm2LedPortStatus=hm2LedPortStatus, hm2DeviceMonitorGroup=hm2DeviceMonitorGroup, hm2SigConInterfaceEntry=hm2SigConInterfaceEntry, hm2DevMonStatusTrapCause=hm2DevMonStatusTrapCause, hm2DiagCableTesterCableEntry=hm2DiagCableTesterCableEntry, hm2SigConSenseIfLinkAlarm=hm2SigConSenseIfLinkAlarm, hm2DiagNetworkResourcesGroup=hm2DiagNetworkResourcesGroup, hm2DevMonID=hm2DevMonID, hm2DevMonOperState=hm2DevMonOperState, hm2DevSecStatusEntry=hm2DevSecStatusEntry, hm2PortMonitorConditionGroup=hm2PortMonitorConditionGroup, hm2DevSecSenseHiDiscoveryEnabled=hm2DevSecSenseHiDiscoveryEnabled, hm2LedPortEntry=hm2LedPortEntry, hm2SigConCommonEntry=hm2SigConCommonEntry, hm2SigConTrapCause=hm2SigConTrapCause, hm2SigConMode=hm2SigConMode, hm2PortMonitorConditionCrcFragmentsIntfEntry=hm2PortMonitorConditionCrcFragmentsIntfEntry, hm2DevSecOperState=hm2DevSecOperState, hm2SigConID=hm2SigConID, hm2DiagIfaceUtilizationGroup=hm2DiagIfaceUtilizationGroup, hm2DevSecStatusTimeStamp=hm2DevSecStatusTimeStamp, hm2DiagSelftestRAM=hm2DiagSelftestRAM, hm2SigConSenseExtNvmNotInSync=hm2SigConSenseExtNvmNotInSync, hm2DiagnosticSNMPExtensionGroup=hm2DiagnosticSNMPExtensionGroup, hm2DevSecInterfaceEntry=hm2DevSecInterfaceEntry, hm2DiagCpuUtilization=hm2DiagCpuUtilization, hm2DevSecInterfaceTable=hm2DevSecInterfaceTable, hm2PortMonitorConditionOvldDetIntvl=hm2PortMonitorConditionOvldDetIntvl, hm2DiagMemoryRamAllocated=hm2DiagMemoryRamAllocated, hm2DevMonSenseExtNvmRemoval=hm2DevMonSenseExtNvmRemoval, hm2PortMonitorConditionLinkFlapIntfEntry=hm2PortMonitorConditionLinkFlapIntfEntry, hm2DevSecSensePasswordChange=hm2DevSecSensePasswordChange, hm2DevSecConfigGroup=hm2DevSecConfigGroup, hm2PortMonitorConditionCrcFragmentsCountTotal=hm2PortMonitorConditionCrcFragmentsCountTotal, hm2PortMonitorConditionOvldDetPkgCntKbit=hm2PortMonitorConditionOvldDetPkgCntKbit, hm2DiagCpuResourcesGroup=hm2DiagCpuResourcesGroup, hm2DevSecStatusIndex=hm2DevSecStatusIndex, hm2DiagMemoryFlashFileSystemFree=hm2DiagMemoryFlashFileSystemFree, hm2SigConSenseFan=hm2SigConSenseFan, hm2DevMonSenseExtNvmNotInSync=hm2DevMonSenseExtNvmNotInSync, hm2PortMonitorConditionLinkFlapInterval=hm2PortMonitorConditionLinkFlapInterval, hm2LedPortTable=hm2LedPortTable, hm2DevMonSenseRingRedundancy=hm2DevMonSenseRingRedundancy, hm2PortMonitorConditionOvldDetUprTholdVal=hm2PortMonitorConditionOvldDetUprTholdVal, hm2SigConModID=hm2SigConModID, hm2DevSecSenseSysmonEnabled=hm2DevSecSenseSysmonEnabled, hm2SigConStatusIndex=hm2SigConStatusIndex, hm2SigConInterfaceTable=hm2SigConInterfaceTable, hm2DevMonStatusEntry=hm2DevMonStatusEntry, hm2DevMonSenseIfLinkAlarm=hm2DevMonSenseIfLinkAlarm, hm2SigConManualActivate=hm2SigConManualActivate, hm2DevSecSenseModbusTcpEnabled=hm2DevSecSenseModbusTcpEnabled, hm2DiagCpuRunningProcesses=hm2DiagCpuRunningProcesses, hm2SigConPSTable=hm2SigConPSTable, hm2DiagBootGroup=hm2DiagBootGroup, hm2PortMonitorConditionSpeedDuplexValue=hm2PortMonitorConditionSpeedDuplexValue, hm2SigConStatusTrapCause=hm2SigConStatusTrapCause, hm2DevSecSensePasswordStrengthNotConfigured=hm2DevSecSensePasswordStrengthNotConfigured, hm2PortMonitorConditionOverloadDetectionMode=hm2PortMonitorConditionOverloadDetectionMode, hm2SigConOperState=hm2SigConOperState, hm2DevSecSenseHttpsCertificateWarning=hm2DevSecSenseHttpsCertificateWarning, hm2PortMonitorSpeedDuplexErrorReturn=hm2PortMonitorSpeedDuplexErrorReturn, hm2DiagSelftestActionEntry=hm2DiagSelftestActionEntry, hm2DevMonCommonTable=hm2DevMonCommonTable, hm2SigConModuleEntry=hm2SigConModuleEntry, hm2DevMonSenseModuleRemoval=hm2DevMonSenseModuleRemoval, hm2PortMonitorAdminMode=hm2PortMonitorAdminMode, hm2PortMonitorConditionLinkFlapIntfTable=hm2PortMonitorConditionLinkFlapIntfTable, hm2PortMonitorConditionField=hm2PortMonitorConditionField, hm2PortMonitorConditionOvldDetTholdType=hm2PortMonitorConditionOvldDetTholdType, hm2BootSystemMonitor=hm2BootSystemMonitor, hm2PortMonitorConditionOverloadDetectionGroup=hm2PortMonitorConditionOverloadDetectionGroup, hm2DevSecTrapCauseIndex=hm2DevSecTrapCauseIndex, hm2DevSecStatusTable=hm2DevSecStatusTable, hm2PortMonitorIntfEntry=hm2PortMonitorIntfEntry, hm2DiagMemoryRawFlashMainAllocated=hm2DiagMemoryRawFlashMainAllocated, hm2PortMonitorConditionOvldDetIntfTable=hm2PortMonitorConditionOvldDetIntfTable, hm2PortMonitorConditionOvldDetIntfEntry=hm2PortMonitorConditionOvldDetIntfEntry, hm2LedGlobalEntry=hm2LedGlobalEntry, hm2DiagCableTesterCableFailureLocation=hm2DiagCableTesterCableFailureLocation, hm2DiagNetworkCpuIfUtilization=hm2DiagNetworkCpuIfUtilization, hm2DiagCableTesterStatus=hm2DiagCableTesterStatus, hm2DiagSelftestActionTrap=hm2DiagSelftestActionTrap, hm2DevMonSensePSState=hm2DevMonSensePSState, hm2PortMonitorConditionCrcFragmentsCount=hm2PortMonitorConditionCrcFragmentsCount, hm2DeviceSecurityGroup=hm2DeviceSecurityGroup, hm2DiagMemoryRamFree=hm2DiagMemoryRamFree, hm2DevMonCommonEntry=hm2DevMonCommonEntry, hm2PortMonitorConditionOvldDetLwrTholdVal=hm2PortMonitorConditionOvldDetLwrTholdVal, hm2PortMonitorIntfTable=hm2PortMonitorIntfTable, hm2PortMonitorConditionLinkFlapGroup=hm2PortMonitorConditionLinkFlapGroup, hm2DiagIfaceUtilizationTrap=hm2DiagIfaceUtilizationTrap, hm2SigConSenseModule=hm2SigConSenseModule, hm2LedControlGroup=hm2LedControlGroup, hm2DiagMemoryFlashFileSystemAllocated=hm2DiagMemoryFlashFileSystemAllocated, hm2DevSecSensePasswordMinLength=hm2DevSecSensePasswordMinLength, hm2SigConStatusEntry=hm2SigConStatusEntry, hm2LedPortMode=hm2LedPortMode, hm2DevSecSenseExtNvmUpdateEnabled=hm2DevSecSenseExtNvmUpdateEnabled, hm2DevSecSenseIfNoLink=hm2DevSecSenseIfNoLink, hm2LedGlobalStatus=hm2LedGlobalStatus, hm2DevMonModuleEntry=hm2DevMonModuleEntry, hm2DiagResourcesGroup=hm2DiagResourcesGroup, hm2DiagnosticMibNotifications=hm2DiagnosticMibNotifications, hm2DiagMemoryResourcesGroup=hm2DiagMemoryResourcesGroup, hm2DiagIfaceUtilizationControlInterval=hm2DiagIfaceUtilizationControlInterval, hm2DevMonStatusTimeStamp=hm2DevMonStatusTimeStamp, hm2DiagCableTesterCableStatus=hm2DiagCableTesterCableStatus, hm2SigConOperTimeStamp=hm2SigConOperTimeStamp, hm2DiagnosticMibObjects=hm2DiagnosticMibObjects, hm2DevMonOperTimeStamp=hm2DevMonOperTimeStamp, hm2DevMonPSTable=hm2DevMonPSTable, hm2LedPortSignaling=hm2LedPortSignaling, hm2DiagIfaceUtilizationTable=hm2DiagIfaceUtilizationTable, hm2DevMonStatusTable=hm2DevMonStatusTable, hm2SigConModuleTable=hm2SigConModuleTable, hm2DevSecStateChangeTrap=hm2DevSecStateChangeTrap, hm2DevMonSenseModule=hm2DevMonSenseModule, hm2DiagCableTesterGroup=hm2DiagCableTesterGroup, hm2DevMonInterfaceTable=hm2DevMonInterfaceTable, hm2DevSecStatusTrapCause=hm2DevSecStatusTrapCause)
