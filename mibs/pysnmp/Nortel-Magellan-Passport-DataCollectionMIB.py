#
# PySNMP MIB module Nortel-Magellan-Passport-DataCollectionMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-DataCollectionMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:17:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
Unsigned32, StorageType, DisplayString, Counter32, Gauge32, Integer32, RowStatus = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "Unsigned32", "StorageType", "DisplayString", "Counter32", "Gauge32", "Integer32", "RowStatus")
EnterpriseDateAndTime, NonReplicated, AsciiString = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "EnterpriseDateAndTime", "NonReplicated", "AsciiString")
passportMIBs, components = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs", "components")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Bits, NotificationType, MibIdentifier, IpAddress, ModuleIdentity, ObjectIdentity, Counter32, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "NotificationType", "MibIdentifier", "IpAddress", "ModuleIdentity", "ObjectIdentity", "Counter32", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dataCollectionMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14))
col = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21))
colRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 1), )
if mibBuilder.loadTexts: colRowStatusTable.setStatus('mandatory')
colRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"))
if mibBuilder.loadTexts: colRowStatusEntry.setStatus('mandatory')
colRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colRowStatus.setStatus('mandatory')
colComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colComponentName.setStatus('mandatory')
colStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colStorageType.setStatus('mandatory')
colIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("accounting", 0), ("alarm", 1), ("log", 2), ("debug", 3), ("scn", 4), ("trap", 5), ("stats", 6))))
if mibBuilder.loadTexts: colIndex.setStatus('mandatory')
colProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 10), )
if mibBuilder.loadTexts: colProvTable.setStatus('mandatory')
colProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"))
if mibBuilder.loadTexts: colProvEntry.setStatus('mandatory')
colAgentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 10000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colAgentQueueSize.setStatus('obsolete')
colStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 11), )
if mibBuilder.loadTexts: colStatsTable.setStatus('mandatory')
colStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"))
if mibBuilder.loadTexts: colStatsEntry.setStatus('mandatory')
colCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 11, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: colCurrentQueueSize.setStatus('mandatory')
colRecordsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colRecordsRx.setStatus('mandatory')
colRecordsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colRecordsDiscarded.setStatus('mandatory')
colTimesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 266), )
if mibBuilder.loadTexts: colTimesTable.setStatus('mandatory')
colTimesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 266, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colTimesValue"))
if mibBuilder.loadTexts: colTimesEntry.setStatus('mandatory')
colTimesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 266, 1, 1), EnterpriseDateAndTime().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colTimesValue.setStatus('mandatory')
colTimesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 266, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: colTimesRowStatus.setStatus('mandatory')
colLastTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 275), )
if mibBuilder.loadTexts: colLastTable.setStatus('obsolete')
colLastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 275, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colLastValue"))
if mibBuilder.loadTexts: colLastEntry.setStatus('obsolete')
colLastValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 275, 1, 1), EnterpriseDateAndTime().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: colLastValue.setStatus('obsolete')
colPeakTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 279), )
if mibBuilder.loadTexts: colPeakTable.setStatus('mandatory')
colPeakEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 279, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colPeakValue"))
if mibBuilder.loadTexts: colPeakEntry.setStatus('mandatory')
colPeakValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 279, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colPeakValue.setStatus('mandatory')
colPeakRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 279, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: colPeakRowStatus.setStatus('mandatory')
colSp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2))
colSpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 1), )
if mibBuilder.loadTexts: colSpRowStatusTable.setStatus('mandatory')
colSpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colSpIndex"))
if mibBuilder.loadTexts: colSpRowStatusEntry.setStatus('mandatory')
colSpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpRowStatus.setStatus('mandatory')
colSpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpComponentName.setStatus('mandatory')
colSpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpStorageType.setStatus('mandatory')
colSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: colSpIndex.setStatus('mandatory')
colSpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 10), )
if mibBuilder.loadTexts: colSpProvTable.setStatus('mandatory')
colSpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colSpIndex"))
if mibBuilder.loadTexts: colSpProvEntry.setStatus('mandatory')
colSpSpooling = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colSpSpooling.setStatus('mandatory')
colSpMaximumNumberOfFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: colSpMaximumNumberOfFiles.setStatus('mandatory')
colSpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11), )
if mibBuilder.loadTexts: colSpStateTable.setStatus('mandatory')
colSpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colSpIndex"))
if mibBuilder.loadTexts: colSpStateEntry.setStatus('mandatory')
colSpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpAdminState.setStatus('mandatory')
colSpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpOperationalState.setStatus('mandatory')
colSpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpUsageState.setStatus('mandatory')
colSpAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpAvailabilityStatus.setStatus('mandatory')
colSpProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpProceduralStatus.setStatus('mandatory')
colSpControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpControlStatus.setStatus('mandatory')
colSpAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpAlarmStatus.setStatus('mandatory')
colSpStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpStandbyStatus.setStatus('mandatory')
colSpUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpUnknownStatus.setStatus('mandatory')
colSpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 12), )
if mibBuilder.loadTexts: colSpOperTable.setStatus('mandatory')
colSpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colSpIndex"))
if mibBuilder.loadTexts: colSpOperEntry.setStatus('mandatory')
colSpSpoolingFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 12, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpSpoolingFileName.setStatus('mandatory')
colSpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 13), )
if mibBuilder.loadTexts: colSpStatsTable.setStatus('mandatory')
colSpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colSpIndex"))
if mibBuilder.loadTexts: colSpStatsEntry.setStatus('mandatory')
colSpCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 13, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpCurrentQueueSize.setStatus('mandatory')
colSpRecordsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpRecordsRx.setStatus('mandatory')
colSpRecordsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colSpRecordsDiscarded.setStatus('mandatory')
colAg = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3))
colAgRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 1), )
if mibBuilder.loadTexts: colAgRowStatusTable.setStatus('mandatory')
colAgRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colAgIndex"))
if mibBuilder.loadTexts: colAgRowStatusEntry.setStatus('mandatory')
colAgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgRowStatus.setStatus('mandatory')
colAgComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgComponentName.setStatus('mandatory')
colAgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgStorageType.setStatus('mandatory')
colAgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: colAgIndex.setStatus('mandatory')
colAgStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 10), )
if mibBuilder.loadTexts: colAgStatsTable.setStatus('mandatory')
colAgStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colAgIndex"))
if mibBuilder.loadTexts: colAgStatsEntry.setStatus('mandatory')
colAgCurrentQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 10, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgCurrentQueueSize.setStatus('mandatory')
colAgRecordsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgRecordsRx.setStatus('mandatory')
colAgRecordsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgRecordsDiscarded.setStatus('mandatory')
colAgAgentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 11), )
if mibBuilder.loadTexts: colAgAgentStatsTable.setStatus('mandatory')
colAgAgentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DataCollectionMIB", "colIndex"), (0, "Nortel-Magellan-Passport-DataCollectionMIB", "colAgIndex"))
if mibBuilder.loadTexts: colAgAgentStatsEntry.setStatus('mandatory')
colAgRecordsNotGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 21, 3, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: colAgRecordsNotGenerated.setStatus('mandatory')
dataCollectionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 1))
dataCollectionGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 1, 5))
dataCollectionGroupBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 1, 5, 1))
dataCollectionGroupBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 1, 5, 1, 2))
dataCollectionCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 3))
dataCollectionCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 3, 5))
dataCollectionCapabilitiesBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 3, 5, 1))
dataCollectionCapabilitiesBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 14, 3, 5, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-DataCollectionMIB", colSpMaximumNumberOfFiles=colSpMaximumNumberOfFiles, colSpComponentName=colSpComponentName, colStatsEntry=colStatsEntry, colAgRowStatusEntry=colAgRowStatusEntry, colSpStatsEntry=colSpStatsEntry, colSpProceduralStatus=colSpProceduralStatus, colTimesEntry=colTimesEntry, colAgComponentName=colAgComponentName, colAgAgentStatsTable=colAgAgentStatsTable, colCurrentQueueSize=colCurrentQueueSize, colLastValue=colLastValue, colPeakValue=colPeakValue, colSpAvailabilityStatus=colSpAvailabilityStatus, colAgCurrentQueueSize=colAgCurrentQueueSize, colSpCurrentQueueSize=colSpCurrentQueueSize, colAgRowStatus=colAgRowStatus, col=col, colSpOperationalState=colSpOperationalState, dataCollectionCapabilitiesBE=dataCollectionCapabilitiesBE, colIndex=colIndex, colProvEntry=colProvEntry, dataCollectionMIB=dataCollectionMIB, colSpRowStatus=colSpRowStatus, colSpIndex=colSpIndex, colSpControlStatus=colSpControlStatus, colSpOperTable=colSpOperTable, colLastEntry=colLastEntry, colTimesRowStatus=colTimesRowStatus, dataCollectionGroup=dataCollectionGroup, colAgRowStatusTable=colAgRowStatusTable, colAgIndex=colAgIndex, colRecordsRx=colRecordsRx, colPeakTable=colPeakTable, dataCollectionGroupBE00A=dataCollectionGroupBE00A, colSpStateTable=colSpStateTable, colAgRecordsDiscarded=colAgRecordsDiscarded, colSpRecordsRx=colSpRecordsRx, colSpSpooling=colSpSpooling, dataCollectionGroupBE=dataCollectionGroupBE, colPeakRowStatus=colPeakRowStatus, colStorageType=colStorageType, colProvTable=colProvTable, dataCollectionCapabilities=dataCollectionCapabilities, colSp=colSp, colRowStatusEntry=colRowStatusEntry, colRecordsDiscarded=colRecordsDiscarded, colSpStorageType=colSpStorageType, colAgAgentStatsEntry=colAgAgentStatsEntry, colAgStatsTable=colAgStatsTable, colSpRecordsDiscarded=colSpRecordsDiscarded, colTimesValue=colTimesValue, colAg=colAg, colStatsTable=colStatsTable, colAgRecordsRx=colAgRecordsRx, colSpUsageState=colSpUsageState, colSpRowStatusTable=colSpRowStatusTable, colPeakEntry=colPeakEntry, colAgRecordsNotGenerated=colAgRecordsNotGenerated, colTimesTable=colTimesTable, dataCollectionGroupBE00=dataCollectionGroupBE00, colSpSpoolingFileName=colSpSpoolingFileName, colSpProvEntry=colSpProvEntry, colSpUnknownStatus=colSpUnknownStatus, colAgStatsEntry=colAgStatsEntry, colSpStateEntry=colSpStateEntry, colSpStandbyStatus=colSpStandbyStatus, colSpRowStatusEntry=colSpRowStatusEntry, colAgentQueueSize=colAgentQueueSize, colSpStatsTable=colSpStatsTable, colLastTable=colLastTable, colComponentName=colComponentName, colRowStatus=colRowStatus, dataCollectionCapabilitiesBE00A=dataCollectionCapabilitiesBE00A, colRowStatusTable=colRowStatusTable, colSpAlarmStatus=colSpAlarmStatus, colAgStorageType=colAgStorageType, dataCollectionCapabilitiesBE00=dataCollectionCapabilitiesBE00, colSpOperEntry=colSpOperEntry, colSpProvTable=colSpProvTable, colSpAdminState=colSpAdminState)
