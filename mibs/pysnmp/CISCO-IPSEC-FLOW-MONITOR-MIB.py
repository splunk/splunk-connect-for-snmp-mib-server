#
# PySNMP MIB module CISCO-IPSEC-FLOW-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IPSEC-FLOW-MONITOR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:45:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
cmgwIndex, = mibBuilder.importSymbols("CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter64, Unsigned32, Bits, Integer32, MibIdentifier, iso, Gauge32, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter64", "Unsigned32", "Bits", "Integer32", "MibIdentifier", "iso", "Gauge32", "NotificationType", "TimeTicks")
DisplayString, TextualConvention, TimeInterval, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeInterval", "TimeStamp", "TruthValue")
ciscoIpSecFlowMonitorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 171))
ciscoIpSecFlowMonitorMIB.setRevisions(('2007-10-24 00:00', '2004-10-12 00:00', '2000-10-13 18:00', '2000-08-17 12:59',))
if mibBuilder.loadTexts: ciscoIpSecFlowMonitorMIB.setLastUpdated('200710240000Z')
if mibBuilder.loadTexts: ciscoIpSecFlowMonitorMIB.setOrganization('Tivoli Systems and Cisco Systems')
class IPSIpAddress(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )
class IkePeerType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ipAddrPeer", 1), ("namePeer", 2))

class IkeNegoMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("main", 1), ("aggressive", 2))

class IkeHashAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("md5", 2), ("sha", 3))

class IkeAuthMethod(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("preSharedKey", 2), ("rsaSig", 3), ("rsaEncrypt", 4), ("revPublicKey", 5))

class DiffHellmanGrp(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("dhGroup1", 2), ("dhGroup2", 3))

class KeyType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ike", 1), ("manual", 2))

class EncapMode(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tunnel", 1), ("transport", 2))

class EncryptAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("des", 2), ("des3", 3))

class AuthAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("hmacMd5", 2), ("hmacSha", 3))

class CompAlgo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("ldf", 2))

class EndPtType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("singleIpAddr", 1), ("ipAddrRange", 2), ("ipSubnet", 3))

class TunnelStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("destroy", 2))

class TrapStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

cipSecMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1))
cipSecLevels = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 1))
cipSecPhaseOne = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2))
cipSecPhaseTwo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3))
cipSecHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4))
cipSecFailures = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5))
cipSecTrapCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6))
cipSecMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecMibLevel.setStatus('current')
cikeGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1))
cikeGlobalActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalActiveTunnels.setStatus('current')
cikeGlobalPreviousTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 2), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalPreviousTunnels.setStatus('current')
cikeGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInOctets.setStatus('current')
cikeGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInPkts.setStatus('current')
cikeGlobalInDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInDropPkts.setStatus('current')
cikeGlobalInNotifys = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 6), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInNotifys.setStatus('current')
cikeGlobalInP2Exchgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 7), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInP2Exchgs.setStatus('current')
cikeGlobalInP2ExchgInvalids = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 8), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInP2ExchgInvalids.setStatus('current')
cikeGlobalInP2ExchgRejects = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 9), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInP2ExchgRejects.setStatus('current')
cikeGlobalInP2SaDelRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 10), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInP2SaDelRequests.setStatus('current')
cikeGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutOctets.setStatus('current')
cikeGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 12), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutPkts.setStatus('current')
cikeGlobalOutDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 13), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutDropPkts.setStatus('current')
cikeGlobalOutNotifys = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 14), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutNotifys.setStatus('current')
cikeGlobalOutP2Exchgs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 15), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutP2Exchgs.setStatus('current')
cikeGlobalOutP2ExchgInvalids = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 16), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutP2ExchgInvalids.setStatus('current')
cikeGlobalOutP2ExchgRejects = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 17), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutP2ExchgRejects.setStatus('current')
cikeGlobalOutP2SaDelRequests = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 18), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalOutP2SaDelRequests.setStatus('current')
cikeGlobalInitTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 19), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInitTunnels.setStatus('current')
cikeGlobalInitTunnelFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 20), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalInitTunnelFails.setStatus('current')
cikeGlobalRespTunnelFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 21), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalRespTunnelFails.setStatus('current')
cikeGlobalSysCapFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 22), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalSysCapFails.setStatus('current')
cikeGlobalAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 23), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalAuthFails.setStatus('current')
cikeGlobalDecryptFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 24), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalDecryptFails.setStatus('current')
cikeGlobalHashValidFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 25), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalHashValidFails.setStatus('current')
cikeGlobalNoSaFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 1, 26), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeGlobalNoSaFails.setStatus('current')
cikePeerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2), )
if mibBuilder.loadTexts: cikePeerTable.setStatus('current')
cikePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalType"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalValue"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteType"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteValue"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerIntIndex"))
if mibBuilder.loadTexts: cikePeerEntry.setStatus('current')
cikePeerLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 1), IkePeerType())
if mibBuilder.loadTexts: cikePeerLocalType.setStatus('current')
cikePeerLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 2), DisplayString())
if mibBuilder.loadTexts: cikePeerLocalValue.setStatus('current')
cikePeerRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 3), IkePeerType())
if mibBuilder.loadTexts: cikePeerRemoteType.setStatus('current')
cikePeerRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 4), DisplayString())
if mibBuilder.loadTexts: cikePeerRemoteValue.setStatus('current')
cikePeerIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cikePeerIntIndex.setStatus('current')
cikePeerLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePeerLocalAddr.setStatus('current')
cikePeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 7), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePeerRemoteAddr.setStatus('current')
cikePeerActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePeerActiveTime.setStatus('current')
cikePeerActiveTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePeerActiveTunnelIndex.setStatus('current')
cikeTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3), )
if mibBuilder.loadTexts: cikeTunnelTable.setStatus('current')
cikeTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunIndex"))
if mibBuilder.loadTexts: cikeTunnelEntry.setStatus('current')
cikeTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cikeTunIndex.setStatus('current')
cikeTunLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 2), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunLocalType.setStatus('current')
cikeTunLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunLocalValue.setStatus('current')
cikeTunLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 4), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunLocalAddr.setStatus('current')
cikeTunLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunLocalName.setStatus('current')
cikeTunRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 6), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunRemoteType.setStatus('current')
cikeTunRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunRemoteValue.setStatus('current')
cikeTunRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 8), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunRemoteAddr.setStatus('current')
cikeTunRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunRemoteName.setStatus('current')
cikeTunNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 10), IkeNegoMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunNegoMode.setStatus('current')
cikeTunDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 11), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunDiffHellmanGrp.setStatus('current')
cikeTunEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 12), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunEncryptAlgo.setStatus('current')
cikeTunHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 13), IkeHashAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHashAlgo.setStatus('current')
cikeTunAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 14), IkeAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunAuthMethod.setStatus('current')
cikeTunLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunLifeTime.setStatus('current')
cikeTunActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 16), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunActiveTime.setStatus('current')
cikeTunSaRefreshThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunSaRefreshThreshold.setStatus('current')
cikeTunTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 18), Counter32()).setUnits('QM Exchanges').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunTotalRefreshes.setStatus('current')
cikeTunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 19), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInOctets.setStatus('current')
cikeTunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 20), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInPkts.setStatus('current')
cikeTunInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 21), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInDropPkts.setStatus('current')
cikeTunInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 22), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInNotifys.setStatus('current')
cikeTunInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 23), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInP2Exchgs.setStatus('current')
cikeTunInP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 24), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInP2ExchgInvalids.setStatus('current')
cikeTunInP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 25), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInP2ExchgRejects.setStatus('current')
cikeTunInP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 26), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunInP2SaDelRequests.setStatus('current')
cikeTunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 27), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutOctets.setStatus('current')
cikeTunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 28), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutPkts.setStatus('current')
cikeTunOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 29), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutDropPkts.setStatus('current')
cikeTunOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 30), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutNotifys.setStatus('current')
cikeTunOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 31), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutP2Exchgs.setStatus('current')
cikeTunOutP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 32), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutP2ExchgInvalids.setStatus('current')
cikeTunOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 33), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutP2ExchgRejects.setStatus('current')
cikeTunOutP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 34), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunOutP2SaDelRequests.setStatus('current')
cikeTunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 3, 1, 35), TunnelStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cikeTunStatus.setStatus('current')
cikePeerCorrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4), )
if mibBuilder.loadTexts: cikePeerCorrTable.setStatus('current')
cikePeerCorrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrLocalType"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrLocalValue"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrRemoteType"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrRemoteValue"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrIntIndex"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrSeqNum"))
if mibBuilder.loadTexts: cikePeerCorrEntry.setStatus('current')
cikePeerCorrLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 1), IkePeerType())
if mibBuilder.loadTexts: cikePeerCorrLocalType.setStatus('current')
cikePeerCorrLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 2), DisplayString())
if mibBuilder.loadTexts: cikePeerCorrLocalValue.setStatus('current')
cikePeerCorrRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 3), IkePeerType())
if mibBuilder.loadTexts: cikePeerCorrRemoteType.setStatus('current')
cikePeerCorrRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 4), DisplayString())
if mibBuilder.loadTexts: cikePeerCorrRemoteValue.setStatus('current')
cikePeerCorrIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cikePeerCorrIntIndex.setStatus('current')
cikePeerCorrSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cikePeerCorrSeqNum.setStatus('current')
cikePeerCorrIpSecTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePeerCorrIpSecTunIndex.setStatus('current')
cikePhase1GWStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5), )
if mibBuilder.loadTexts: cikePhase1GWStatsTable.setStatus('current')
cikePhase1GWStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cikePhase1GWStatsEntry.setStatus('current')
cikePhase1GWActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWActiveTunnels.setStatus('current')
cikePhase1GWPreviousTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 2), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWPreviousTunnels.setStatus('current')
cikePhase1GWInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInOctets.setStatus('current')
cikePhase1GWInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInPkts.setStatus('current')
cikePhase1GWInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInDropPkts.setStatus('current')
cikePhase1GWInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 6), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInNotifys.setStatus('current')
cikePhase1GWInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 7), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInP2Exchgs.setStatus('current')
cikePhase1GWInP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 8), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInP2ExchgInvalids.setStatus('current')
cikePhase1GWInP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 9), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInP2ExchgRejects.setStatus('current')
cikePhase1GWInP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 10), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInP2SaDelRequests.setStatus('current')
cikePhase1GWOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutOctets.setStatus('current')
cikePhase1GWOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 12), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutPkts.setStatus('current')
cikePhase1GWOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 13), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutDropPkts.setStatus('current')
cikePhase1GWOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 14), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutNotifys.setStatus('current')
cikePhase1GWOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 15), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutP2Exchgs.setStatus('current')
cikePhase1GWOutP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 16), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutP2ExchgInvalids.setStatus('current')
cikePhase1GWOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 17), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutP2ExchgRejects.setStatus('current')
cikePhase1GWOutP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 18), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWOutP2SaDelRequests.setStatus('current')
cikePhase1GWInitTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 19), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInitTunnels.setStatus('current')
cikePhase1GWInitTunnelFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 20), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWInitTunnelFails.setStatus('current')
cikePhase1GWRespTunnelFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 21), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWRespTunnelFails.setStatus('current')
cikePhase1GWSysCapFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 22), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWSysCapFails.setStatus('current')
cikePhase1GWAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 23), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWAuthFails.setStatus('current')
cikePhase1GWDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 24), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWDecryptFails.setStatus('current')
cikePhase1GWHashValidFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 25), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWHashValidFails.setStatus('current')
cikePhase1GWNoSaFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 2, 5, 1, 26), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikePhase1GWNoSaFails.setStatus('current')
cipSecGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1))
cipSecGlobalActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalActiveTunnels.setStatus('current')
cipSecGlobalPreviousTunnels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 2), Counter32()).setUnits('Phase-2 Tunnels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalPreviousTunnels.setStatus('current')
cipSecGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInOctets.setStatus('current')
cipSecGlobalHcInOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalHcInOctets.setStatus('current')
cipSecGlobalInOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 5), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInOctWraps.setStatus('current')
cipSecGlobalInDecompOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 6), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInDecompOctets.setStatus('current')
cipSecGlobalHcInDecompOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalHcInDecompOctets.setStatus('current')
cipSecGlobalInDecompOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 8), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInDecompOctWraps.setStatus('current')
cipSecGlobalInPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInPkts.setStatus('current')
cipSecGlobalInDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 10), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInDrops.setStatus('current')
cipSecGlobalInReplayDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInReplayDrops.setStatus('current')
cipSecGlobalInAuths = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 12), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInAuths.setStatus('current')
cipSecGlobalInAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 13), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInAuthFails.setStatus('current')
cipSecGlobalInDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 14), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInDecrypts.setStatus('current')
cipSecGlobalInDecryptFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalInDecryptFails.setStatus('current')
cipSecGlobalOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 16), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutOctets.setStatus('current')
cipSecGlobalHcOutOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalHcOutOctets.setStatus('current')
cipSecGlobalOutOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 18), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutOctWraps.setStatus('current')
cipSecGlobalOutUncompOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 19), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutUncompOctets.setStatus('current')
cipSecGlobalHcOutUncompOctets = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 20), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalHcOutUncompOctets.setStatus('current')
cipSecGlobalOutUncompOctWraps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 21), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutUncompOctWraps.setStatus('current')
cipSecGlobalOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 22), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutPkts.setStatus('current')
cipSecGlobalOutDrops = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 23), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutDrops.setStatus('current')
cipSecGlobalOutAuths = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 24), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutAuths.setStatus('current')
cipSecGlobalOutAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 25), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutAuthFails.setStatus('current')
cipSecGlobalOutEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 26), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutEncrypts.setStatus('current')
cipSecGlobalOutEncryptFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 27), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalOutEncryptFails.setStatus('current')
cipSecGlobalProtocolUseFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 28), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalProtocolUseFails.setStatus('current')
cipSecGlobalNoSaFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 29), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalNoSaFails.setStatus('current')
cipSecGlobalSysCapFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 1, 30), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecGlobalSysCapFails.setStatus('current')
cipSecTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2), )
if mibBuilder.loadTexts: cipSecTunnelTable.setStatus('current')
cipSecTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunIndex"))
if mibBuilder.loadTexts: cipSecTunnelEntry.setStatus('current')
cipSecTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cipSecTunIndex.setStatus('current')
cipSecTunIkeTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunIkeTunnelIndex.setStatus('current')
cipSecTunIkeTunnelAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunIkeTunnelAlive.setStatus('current')
cipSecTunLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 4), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunLocalAddr.setStatus('current')
cipSecTunRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 5), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunRemoteAddr.setStatus('current')
cipSecTunKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 6), KeyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunKeyType.setStatus('current')
cipSecTunEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 7), EncapMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunEncapMode.setStatus('current')
cipSecTunLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunLifeSize.setStatus('current')
cipSecTunLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunLifeTime.setStatus('current')
cipSecTunActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 10), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunActiveTime.setStatus('current')
cipSecTunSaLifeSizeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunSaLifeSizeThreshold.setStatus('current')
cipSecTunSaLifeTimeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunSaLifeTimeThreshold.setStatus('current')
cipSecTunTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 13), Counter32()).setUnits('QM Exchanges').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunTotalRefreshes.setStatus('current')
cipSecTunExpiredSaInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 14), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunExpiredSaInstances.setStatus('current')
cipSecTunCurrentSaInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunCurrentSaInstances.setStatus('current')
cipSecTunInSaDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 16), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInSaDiffHellmanGrp.setStatus('current')
cipSecTunInSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 17), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInSaEncryptAlgo.setStatus('current')
cipSecTunInSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 18), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInSaAhAuthAlgo.setStatus('current')
cipSecTunInSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 19), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInSaEspAuthAlgo.setStatus('current')
cipSecTunInSaDecompAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 20), CompAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInSaDecompAlgo.setStatus('current')
cipSecTunOutSaDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 21), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutSaDiffHellmanGrp.setStatus('current')
cipSecTunOutSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 22), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutSaEncryptAlgo.setStatus('current')
cipSecTunOutSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 23), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutSaAhAuthAlgo.setStatus('current')
cipSecTunOutSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 24), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutSaEspAuthAlgo.setStatus('current')
cipSecTunOutSaCompAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 25), CompAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutSaCompAlgo.setStatus('current')
cipSecTunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 26), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInOctets.setStatus('current')
cipSecTunHcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 27), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHcInOctets.setStatus('current')
cipSecTunInOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 28), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInOctWraps.setStatus('current')
cipSecTunInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 29), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInDecompOctets.setStatus('current')
cipSecTunHcInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHcInDecompOctets.setStatus('current')
cipSecTunInDecompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 31), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInDecompOctWraps.setStatus('current')
cipSecTunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 32), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInPkts.setStatus('current')
cipSecTunInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 33), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInDropPkts.setStatus('current')
cipSecTunInReplayDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 34), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInReplayDropPkts.setStatus('current')
cipSecTunInAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 35), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInAuths.setStatus('current')
cipSecTunInAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 36), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInAuthFails.setStatus('current')
cipSecTunInDecrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 37), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInDecrypts.setStatus('current')
cipSecTunInDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 38), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunInDecryptFails.setStatus('current')
cipSecTunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 39), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutOctets.setStatus('current')
cipSecTunHcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHcOutOctets.setStatus('current')
cipSecTunOutOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 41), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutOctWraps.setStatus('current')
cipSecTunOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 42), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutUncompOctets.setStatus('current')
cipSecTunHcOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHcOutUncompOctets.setStatus('current')
cipSecTunOutUncompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 44), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutUncompOctWraps.setStatus('current')
cipSecTunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 45), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutPkts.setStatus('current')
cipSecTunOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 46), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutDropPkts.setStatus('current')
cipSecTunOutAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 47), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutAuths.setStatus('current')
cipSecTunOutAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 48), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutAuthFails.setStatus('current')
cipSecTunOutEncrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 49), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutEncrypts.setStatus('current')
cipSecTunOutEncryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 50), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunOutEncryptFails.setStatus('current')
cipSecTunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 2, 1, 51), TunnelStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTunStatus.setStatus('current')
cipSecEndPtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3), )
if mibBuilder.loadTexts: cipSecEndPtTable.setStatus('current')
cipSecEndPtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunIndex"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtIndex"))
if mibBuilder.loadTexts: cipSecEndPtEntry.setStatus('current')
cipSecEndPtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cipSecEndPtIndex.setStatus('current')
cipSecEndPtLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtLocalName.setStatus('current')
cipSecEndPtLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 3), EndPtType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtLocalType.setStatus('current')
cipSecEndPtLocalAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 4), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtLocalAddr1.setStatus('current')
cipSecEndPtLocalAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 5), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtLocalAddr2.setStatus('current')
cipSecEndPtLocalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtLocalProtocol.setStatus('current')
cipSecEndPtLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtLocalPort.setStatus('current')
cipSecEndPtRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtRemoteName.setStatus('current')
cipSecEndPtRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 9), EndPtType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtRemoteType.setStatus('current')
cipSecEndPtRemoteAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 10), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtRemoteAddr1.setStatus('current')
cipSecEndPtRemoteAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 11), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtRemoteAddr2.setStatus('current')
cipSecEndPtRemoteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtRemoteProtocol.setStatus('current')
cipSecEndPtRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtRemotePort.setStatus('current')
cipSecSpiTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4), )
if mibBuilder.loadTexts: cipSecSpiTable.setStatus('current')
cipSecSpiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunIndex"), (0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiIndex"))
if mibBuilder.loadTexts: cipSecSpiEntry.setStatus('current')
cipSecSpiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cipSecSpiIndex.setStatus('current')
cipSecSpiDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecSpiDirection.setStatus('current')
cipSecSpiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecSpiValue.setStatus('current')
cipSecSpiProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ah", 1), ("esp", 2), ("ipcomp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecSpiProtocol.setStatus('current')
cipSecSpiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("expiring", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecSpiStatus.setStatus('current')
cipSecPhase2GWStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5), )
if mibBuilder.loadTexts: cipSecPhase2GWStatsTable.setStatus('current')
cipSecPhase2GWStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: cipSecPhase2GWStatsEntry.setStatus('current')
cipSecPhase2GWActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWActiveTunnels.setStatus('current')
cipSecPhase2GWPreviousTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 2), Counter32()).setUnits('Phase-2 Tunnels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWPreviousTunnels.setStatus('current')
cipSecPhase2GWInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInOctets.setStatus('current')
cipSecPhase2GWInOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 4), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInOctWraps.setStatus('current')
cipSecPhase2GWInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 5), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInDecompOctets.setStatus('current')
cipSecPhase2GWInDecompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 6), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInDecompOctWraps.setStatus('current')
cipSecPhase2GWInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInPkts.setStatus('current')
cipSecPhase2GWInDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInDrops.setStatus('current')
cipSecPhase2GWInReplayDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInReplayDrops.setStatus('current')
cipSecPhase2GWInAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 10), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInAuths.setStatus('current')
cipSecPhase2GWInAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 11), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInAuthFails.setStatus('current')
cipSecPhase2GWInDecrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 12), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInDecrypts.setStatus('current')
cipSecPhase2GWInDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 13), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWInDecryptFails.setStatus('current')
cipSecPhase2GWOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 14), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutOctets.setStatus('current')
cipSecPhase2GWOutOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 15), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutOctWraps.setStatus('current')
cipSecPhase2GWOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 16), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutUncompOctets.setStatus('current')
cipSecPhase2GWOutUncompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 17), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutUncompOctWraps.setStatus('current')
cipSecPhase2GWOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutPkts.setStatus('current')
cipSecPhase2GWOutDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 19), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutDrops.setStatus('current')
cipSecPhase2GWOutAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 20), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutAuths.setStatus('current')
cipSecPhase2GWOutAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 21), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutAuthFails.setStatus('current')
cipSecPhase2GWOutEncrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 22), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutEncrypts.setStatus('current')
cipSecPhase2GWOutEncryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 23), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWOutEncryptFails.setStatus('current')
cipSecPhase2GWProtocolUseFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 24), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWProtocolUseFails.setStatus('current')
cipSecPhase2GWNoSaFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 25), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWNoSaFails.setStatus('current')
cipSecPhase2GWSysCapFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 3, 5, 1, 26), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecPhase2GWSysCapFails.setStatus('current')
cipSecHistGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 1))
cipSecHistPhaseOne = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2))
cipSecHistPhaseTwo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3))
cipSecHistGlobalCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 1, 1))
cipSecHistTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecHistTableSize.setStatus('current')
cipSecHistCheckPoint = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("checkPoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecHistCheckPoint.setStatus('current')
cikeTunnelHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1), )
if mibBuilder.loadTexts: cikeTunnelHistTable.setStatus('current')
cikeTunnelHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistIndex"))
if mibBuilder.loadTexts: cikeTunnelHistEntry.setStatus('current')
cikeTunHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cikeTunHistIndex.setStatus('current')
cikeTunHistTermReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("operRequest", 3), ("peerDelRequest", 4), ("peerLost", 5), ("localFailure", 6), ("checkPointReg", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistTermReason.setStatus('current')
cikeTunHistActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistActiveIndex.setStatus('current')
cikeTunHistPeerLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 4), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistPeerLocalType.setStatus('current')
cikeTunHistPeerLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistPeerLocalValue.setStatus('current')
cikeTunHistPeerIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistPeerIntIndex.setStatus('current')
cikeTunHistPeerRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 7), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistPeerRemoteType.setStatus('current')
cikeTunHistPeerRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistPeerRemoteValue.setStatus('current')
cikeTunHistLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 9), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistLocalAddr.setStatus('current')
cikeTunHistLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistLocalName.setStatus('current')
cikeTunHistRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 11), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistRemoteAddr.setStatus('current')
cikeTunHistRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistRemoteName.setStatus('current')
cikeTunHistNegoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 13), IkeNegoMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistNegoMode.setStatus('current')
cikeTunHistDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 14), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistDiffHellmanGrp.setStatus('current')
cikeTunHistEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 15), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistEncryptAlgo.setStatus('current')
cikeTunHistHashAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 16), IkeHashAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistHashAlgo.setStatus('current')
cikeTunHistAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 17), IkeAuthMethod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistAuthMethod.setStatus('current')
cikeTunHistLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistLifeTime.setStatus('current')
cikeTunHistStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistStartTime.setStatus('current')
cikeTunHistActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 20), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistActiveTime.setStatus('current')
cikeTunHistTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 21), Counter32()).setUnits('QM Exchanges').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistTotalRefreshes.setStatus('current')
cikeTunHistTotalSas = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 22), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistTotalSas.setStatus('current')
cikeTunHistInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 23), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInOctets.setStatus('current')
cikeTunHistInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 24), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInPkts.setStatus('current')
cikeTunHistInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 25), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInDropPkts.setStatus('current')
cikeTunHistInNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 26), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInNotifys.setStatus('current')
cikeTunHistInP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 27), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInP2Exchgs.setStatus('current')
cikeTunHistInP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 28), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInP2ExchgInvalids.setStatus('current')
cikeTunHistInP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 29), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInP2ExchgRejects.setStatus('current')
cikeTunHistInP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 30), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistInP2SaDelRequests.setStatus('current')
cikeTunHistOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 31), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutOctets.setStatus('current')
cikeTunHistOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 32), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutPkts.setStatus('current')
cikeTunHistOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 33), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutDropPkts.setStatus('current')
cikeTunHistOutNotifys = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 34), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutNotifys.setStatus('current')
cikeTunHistOutP2Exchgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 35), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutP2Exchgs.setStatus('current')
cikeTunHistOutP2ExchgInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 36), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutP2ExchgInvalids.setStatus('current')
cikeTunHistOutP2ExchgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 37), Counter32()).setUnits('SA Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutP2ExchgRejects.setStatus('current')
cikeTunHistOutP2SaDelRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 2, 1, 1, 38), Counter32()).setUnits('Notification Payloads').setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeTunHistOutP2SaDelRequests.setStatus('current')
cipSecTunnelHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1), )
if mibBuilder.loadTexts: cipSecTunnelHistTable.setStatus('current')
cipSecTunnelHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistIndex"))
if mibBuilder.loadTexts: cipSecTunnelHistEntry.setStatus('current')
cipSecTunHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cipSecTunHistIndex.setStatus('current')
cipSecTunHistTermReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("normal", 2), ("operRequest", 3), ("peerDelRequest", 4), ("peerLost", 5), ("seqNumRollOver", 6), ("checkPointReq", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistTermReason.setStatus('current')
cipSecTunHistActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistActiveIndex.setStatus('current')
cipSecTunHistIkeTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistIkeTunnelIndex.setStatus('current')
cipSecTunHistLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 5), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistLocalAddr.setStatus('current')
cipSecTunHistRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistRemoteAddr.setStatus('current')
cipSecTunHistKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 7), KeyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistKeyType.setStatus('current')
cipSecTunHistEncapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 8), EncapMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistEncapMode.setStatus('current')
cipSecTunHistLifeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('KBytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistLifeSize.setStatus('current')
cipSecTunHistLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistLifeTime.setStatus('current')
cipSecTunHistStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistStartTime.setStatus('current')
cipSecTunHistActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 12), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistActiveTime.setStatus('current')
cipSecTunHistTotalRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 13), Counter32()).setUnits('QM Exchanges').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistTotalRefreshes.setStatus('current')
cipSecTunHistTotalSas = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 14), Counter32()).setUnits('SAs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistTotalSas.setStatus('current')
cipSecTunHistInSaDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 15), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInSaDiffHellmanGrp.setStatus('current')
cipSecTunHistInSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 16), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInSaEncryptAlgo.setStatus('current')
cipSecTunHistInSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 17), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInSaAhAuthAlgo.setStatus('current')
cipSecTunHistInSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 18), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInSaEspAuthAlgo.setStatus('current')
cipSecTunHistInSaDecompAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 19), CompAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInSaDecompAlgo.setStatus('current')
cipSecTunHistOutSaDiffHellmanGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 20), DiffHellmanGrp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutSaDiffHellmanGrp.setStatus('current')
cipSecTunHistOutSaEncryptAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 21), EncryptAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutSaEncryptAlgo.setStatus('current')
cipSecTunHistOutSaAhAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 22), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutSaAhAuthAlgo.setStatus('current')
cipSecTunHistOutSaEspAuthAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 23), AuthAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutSaEspAuthAlgo.setStatus('current')
cipSecTunHistOutSaCompAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 24), CompAlgo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutSaCompAlgo.setStatus('current')
cipSecTunHistInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 25), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInOctets.setStatus('current')
cipSecTunHistHcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistHcInOctets.setStatus('current')
cipSecTunHistInOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 27), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInOctWraps.setStatus('current')
cipSecTunHistInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 28), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInDecompOctets.setStatus('current')
cipSecTunHistHcInDecompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistHcInDecompOctets.setStatus('current')
cipSecTunHistInDecompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 30), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInDecompOctWraps.setStatus('current')
cipSecTunHistInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 31), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInPkts.setStatus('current')
cipSecTunHistInDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 32), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInDropPkts.setStatus('current')
cipSecTunHistInReplayDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 33), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInReplayDropPkts.setStatus('current')
cipSecTunHistInAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 34), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInAuths.setStatus('current')
cipSecTunHistInAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 35), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInAuthFails.setStatus('current')
cipSecTunHistInDecrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 36), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInDecrypts.setStatus('current')
cipSecTunHistInDecryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 37), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistInDecryptFails.setStatus('current')
cipSecTunHistOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 38), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutOctets.setStatus('current')
cipSecTunHistHcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistHcOutOctets.setStatus('current')
cipSecTunHistOutOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 40), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutOctWraps.setStatus('current')
cipSecTunHistOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 41), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutUncompOctets.setStatus('current')
cipSecTunHistHcOutUncompOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 42), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistHcOutUncompOctets.setStatus('current')
cipSecTunHistOutUncompOctWraps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 43), Counter32()).setUnits('Integral units').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutUncompOctWraps.setStatus('current')
cipSecTunHistOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 44), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutPkts.setStatus('current')
cipSecTunHistOutDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 45), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutDropPkts.setStatus('current')
cipSecTunHistOutAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 46), Counter32()).setUnits('Events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutAuths.setStatus('current')
cipSecTunHistOutAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 47), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutAuthFails.setStatus('current')
cipSecTunHistOutEncrypts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 48), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutEncrypts.setStatus('current')
cipSecTunHistOutEncryptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 1, 1, 49), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecTunHistOutEncryptFails.setStatus('current')
cipSecEndPtHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2), )
if mibBuilder.loadTexts: cipSecEndPtHistTable.setStatus('current')
cipSecEndPtHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistIndex"))
if mibBuilder.loadTexts: cipSecEndPtHistEntry.setStatus('current')
cipSecEndPtHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cipSecEndPtHistIndex.setStatus('current')
cipSecEndPtHistTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistTunIndex.setStatus('current')
cipSecEndPtHistActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistActiveIndex.setStatus('current')
cipSecEndPtHistLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistLocalName.setStatus('current')
cipSecEndPtHistLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 5), EndPtType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistLocalType.setStatus('current')
cipSecEndPtHistLocalAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistLocalAddr1.setStatus('current')
cipSecEndPtHistLocalAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 7), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistLocalAddr2.setStatus('current')
cipSecEndPtHistLocalProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistLocalProtocol.setStatus('current')
cipSecEndPtHistLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistLocalPort.setStatus('current')
cipSecEndPtHistRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistRemoteName.setStatus('current')
cipSecEndPtHistRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 11), EndPtType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistRemoteType.setStatus('current')
cipSecEndPtHistRemoteAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 12), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistRemoteAddr1.setStatus('current')
cipSecEndPtHistRemoteAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 13), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistRemoteAddr2.setStatus('current')
cipSecEndPtHistRemoteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistRemoteProtocol.setStatus('current')
cipSecEndPtHistRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 4, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecEndPtHistRemotePort.setStatus('current')
cipSecFailGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 1))
cipSecFailPhaseOne = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2))
cipSecFailPhaseTwo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3))
cipSecFailGlobalCntl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 1, 1))
cipSecFailTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecFailTableSize.setStatus('current')
cikeFailTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1), )
if mibBuilder.loadTexts: cikeFailTable.setStatus('current')
cikeFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailIndex"))
if mibBuilder.loadTexts: cikeFailEntry.setStatus('current')
cikeFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cikeFailIndex.setStatus('current')
cikeFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("peerDelRequest", 2), ("peerLost", 3), ("localFailure", 4), ("authFailure", 5), ("hashValidation", 6), ("encryptFailure", 7), ("internalError", 8), ("sysCapExceeded", 9), ("proposalFailure", 10), ("peerCertUnavailable", 11), ("peerCertNotValid", 12), ("localCertExpired", 13), ("crlFailure", 14), ("peerEncodingError", 15), ("nonExistentSa", 16), ("operRequest", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailReason.setStatus('current')
cikeFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailTime.setStatus('current')
cikeFailLocalType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 4), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailLocalType.setStatus('current')
cikeFailLocalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailLocalValue.setStatus('current')
cikeFailRemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 6), IkePeerType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailRemoteType.setStatus('current')
cikeFailRemoteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailRemoteValue.setStatus('current')
cikeFailLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 8), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailLocalAddr.setStatus('current')
cikeFailRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 2, 1, 1, 9), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cikeFailRemoteAddr.setStatus('current')
cipSecFailTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1), )
if mibBuilder.loadTexts: cipSecFailTable.setStatus('current')
cipSecFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailIndex"))
if mibBuilder.loadTexts: cipSecFailEntry.setStatus('current')
cipSecFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: cipSecFailIndex.setStatus('current')
cipSecFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("internalError", 2), ("peerEncodingError", 3), ("proposalFailure", 4), ("protocolUseFail", 5), ("nonExistentSa", 6), ("decryptFailure", 7), ("encryptFailure", 8), ("inAuthFailure", 9), ("outAuthFailure", 10), ("compression", 11), ("sysCapExceeded", 12), ("peerDelRequest", 13), ("peerLost", 14), ("seqNumRollOver", 15), ("operRequest", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecFailReason.setStatus('current')
cipSecFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecFailTime.setStatus('current')
cipSecFailTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecFailTunnelIndex.setStatus('current')
cipSecFailSaSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecFailSaSpi.setStatus('current')
cipSecFailPktSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 6), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecFailPktSrcAddr.setStatus('current')
cipSecFailPktDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 5, 3, 1, 1, 7), IPSIpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipSecFailPktDstAddr.setStatus('current')
cipSecTrapCntlIkeTunnelStart = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 1), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIkeTunnelStart.setStatus('current')
cipSecTrapCntlIkeTunnelStop = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 2), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIkeTunnelStop.setStatus('current')
cipSecTrapCntlIkeSysFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 3), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIkeSysFailure.setStatus('current')
cipSecTrapCntlIkeCertCrlFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 4), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIkeCertCrlFailure.setStatus('current')
cipSecTrapCntlIkeProtocolFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 5), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIkeProtocolFail.setStatus('current')
cipSecTrapCntlIkeNoSa = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 6), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIkeNoSa.setStatus('current')
cipSecTrapCntlIpSecTunnelStart = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 7), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecTunnelStart.setStatus('current')
cipSecTrapCntlIpSecTunnelStop = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 8), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecTunnelStop.setStatus('current')
cipSecTrapCntlIpSecSysFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 9), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecSysFailure.setStatus('current')
cipSecTrapCntlIpSecSetUpFailure = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 10), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecSetUpFailure.setStatus('current')
cipSecTrapCntlIpSecEarlyTunTerm = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 11), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecEarlyTunTerm.setStatus('current')
cipSecTrapCntlIpSecProtocolFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 12), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecProtocolFail.setStatus('current')
cipSecTrapCntlIpSecNoSa = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 171, 1, 6, 13), TrapStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipSecTrapCntlIpSecNoSa.setStatus('current')
cipSecMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 2))
cipSecMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0))
cikeTunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 1)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunLifeTime"))
if mibBuilder.loadTexts: cikeTunnelStart.setStatus('current')
cikeTunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 2)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunActiveTime"))
if mibBuilder.loadTexts: cikeTunnelStop.setStatus('current')
cikeSysFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 3)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"))
if mibBuilder.loadTexts: cikeSysFailure.setStatus('current')
cikeCertCrlFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 4)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"))
if mibBuilder.loadTexts: cikeCertCrlFailure.setStatus('current')
cikeProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 5)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"))
if mibBuilder.loadTexts: cikeProtocolFailure.setStatus('current')
cikeNoSa = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 6)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"))
if mibBuilder.loadTexts: cikeNoSa.setStatus('current')
cipSecTunnelStart = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 7)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunLifeTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunLifeSize"))
if mibBuilder.loadTexts: cipSecTunnelStart.setStatus('current')
cipSecTunnelStop = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 8)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunActiveTime"))
if mibBuilder.loadTexts: cipSecTunnelStop.setStatus('current')
cipSecSysFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 9)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiProtocol"))
if mibBuilder.loadTexts: cipSecSysFailure.setStatus('current')
cipSecSetUpFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 10)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"))
if mibBuilder.loadTexts: cipSecSetUpFailure.setStatus('current')
cipSecEarlyTunTerm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 11)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiProtocol"))
if mibBuilder.loadTexts: cipSecEarlyTunTerm.setStatus('current')
cipSecProtocolFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 12)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiProtocol"))
if mibBuilder.loadTexts: cipSecProtocolFailure.setStatus('current')
cipSecNoSa = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 171, 2, 0, 13))
if mibBuilder.loadTexts: cipSecNoSa.setStatus('current')
cipSecMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 3))
cipSecMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1))
cipSecMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 2))
cipSecMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 2, 1)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecLevelsGroup"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhaseOneGroup"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhaseTwoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecMIBCompliance = cipSecMIBCompliance.setStatus('deprecated')
cipSecMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 2, 2)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecLevelsGroup"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhaseOneGroup"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhaseTwoGroup"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGWStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecMIBComplianceRev1 = cipSecMIBComplianceRev1.setStatus('current')
cipSecLevelsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 1)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecMibLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecLevelsGroup = cipSecLevelsGroup.setStatus('current')
cipSecPhaseOneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 2)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalActiveTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalPreviousTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalOutP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInitTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalInitTunnelFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalRespTunnelFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalSysCapFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalDecryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalHashValidFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeGlobalNoSaFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerActiveTunnelIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunLocalType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunLocalValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunLocalName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunRemoteType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunRemoteValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunRemoteName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunNegoMode"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunDiffHellmanGrp"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunEncryptAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHashAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunAuthMethod"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunLifeTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunSaRefreshThreshold"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunTotalRefreshes"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunInP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunOutP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunStatus"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePeerCorrIpSecTunIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecPhaseOneGroup = cipSecPhaseOneGroup.setStatus('current')
cipSecPhaseTwoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 3)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalActiveTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalPreviousTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalHcInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalHcInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInDecompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInDrops"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInReplayDrops"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInDecrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalInDecryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalHcOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalHcOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutUncompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutDrops"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutEncrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalOutEncryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalProtocolUseFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalNoSaFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecGlobalSysCapFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunIkeTunnelIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunIkeTunnelAlive"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunKeyType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunEncapMode"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunLifeSize"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunLifeTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunSaLifeSizeThreshold"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunSaLifeTimeThreshold"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunTotalRefreshes"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunExpiredSaInstances"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunCurrentSaInstances"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInSaDiffHellmanGrp"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInSaEncryptAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInSaAhAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInSaEspAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInSaDecompAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutSaDiffHellmanGrp"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutSaEncryptAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutSaAhAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutSaEspAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutSaCompAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHcInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHcInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInDecompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInReplayDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInDecrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunInDecryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHcOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHcOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutUncompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutEncrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunOutEncryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunStatus"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtLocalName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtLocalType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtLocalAddr1"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtLocalAddr2"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtLocalProtocol"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtLocalPort"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtRemoteName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtRemoteType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtRemoteAddr1"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtRemoteAddr2"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtRemoteProtocol"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtRemotePort"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiDirection"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiProtocol"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSpiStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecPhaseTwoGroup = cipSecPhaseTwoGroup.setStatus('current')
cipSecHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 4)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecHistTableSize"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecHistCheckPoint"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistTermReason"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistActiveIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistPeerLocalType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistPeerLocalValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistPeerIntIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistPeerRemoteType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistPeerRemoteValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistLocalName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistRemoteName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistNegoMode"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistDiffHellmanGrp"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistEncryptAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistHashAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistAuthMethod"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistLifeTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistStartTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistTotalRefreshes"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistTotalSas"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistInP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunHistOutP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistTermReason"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistActiveIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistIkeTunnelIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistKeyType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistEncapMode"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistLifeSize"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistLifeTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistStartTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistActiveTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistTotalRefreshes"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistTotalSas"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInSaDiffHellmanGrp"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInSaEncryptAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInSaAhAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInSaEspAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInSaDecompAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutSaDiffHellmanGrp"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutSaEncryptAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutSaAhAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutSaEspAuthAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutSaCompAlgo"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistHcInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistHcInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInDecompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInReplayDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInDecrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistInDecryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistHcOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistHcOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutUncompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutEncrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunHistOutEncryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistTunIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistActiveIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistLocalName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistLocalType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistLocalAddr1"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistLocalAddr2"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistLocalProtocol"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistLocalPort"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistRemoteName"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistRemoteType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistRemoteAddr1"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistRemoteAddr2"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistRemoteProtocol"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEndPtHistRemotePort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecHistoryGroup = cipSecHistoryGroup.setStatus('current')
cipSecFailuresGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 5)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailTableSize"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailReason"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailLocalType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailLocalValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailRemoteType"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailRemoteValue"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailLocalAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeFailRemoteAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailReason"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailTime"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailTunnelIndex"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailSaSpi"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailPktSrcAddr"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecFailPktDstAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecFailuresGroup = cipSecFailuresGroup.setStatus('current')
cipSecTrapCntlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 6)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIkeTunnelStart"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIkeTunnelStop"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIkeSysFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIkeCertCrlFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIkeProtocolFail"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIkeNoSa"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecTunnelStart"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecTunnelStop"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecSysFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecSetUpFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecEarlyTunTerm"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecProtocolFail"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTrapCntlIpSecNoSa"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecTrapCntlGroup = cipSecTrapCntlGroup.setStatus('current')
cipSecNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 7)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunnelStart"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeTunnelStop"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeSysFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeCertCrlFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeProtocolFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikeNoSa"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunnelStart"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecTunnelStop"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSysFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecSetUpFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecEarlyTunTerm"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecProtocolFailure"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecNoSa"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecNotificationGroup = cipSecNotificationGroup.setStatus('current')
cipSecGWStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 171, 3, 1, 8)).setObjects(("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWActiveTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWPreviousTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutDropPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutNotifys"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutP2Exchgs"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutP2ExchgInvalids"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutP2ExchgRejects"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWOutP2SaDelRequests"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInitTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWInitTunnelFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWRespTunnelFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWSysCapFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWDecryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWHashValidFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cikePhase1GWNoSaFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWActiveTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWPreviousTunnels"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInDecompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInDecompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInDrops"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInReplayDrops"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInDecrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWInDecryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutUncompOctets"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutUncompOctWraps"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutPkts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutDrops"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutAuths"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutAuthFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutEncrypts"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWOutEncryptFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWProtocolUseFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWNoSaFails"), ("CISCO-IPSEC-FLOW-MONITOR-MIB", "cipSecPhase2GWSysCapFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cipSecGWStatsGroup = cipSecGWStatsGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-IPSEC-FLOW-MONITOR-MIB", cikeProtocolFailure=cikeProtocolFailure, cikePhase1GWInP2ExchgInvalids=cikePhase1GWInP2ExchgInvalids, cipSecEndPtHistEntry=cipSecEndPtHistEntry, cipSecTunHistInDecompOctWraps=cipSecTunHistInDecompOctWraps, cipSecEarlyTunTerm=cipSecEarlyTunTerm, cikePhase1GWOutOctets=cikePhase1GWOutOctets, cikeTunnelTable=cikeTunnelTable, cikePhase1GWStatsTable=cikePhase1GWStatsTable, cipSecTunHistTotalSas=cipSecTunHistTotalSas, cipSecGlobalNoSaFails=cipSecGlobalNoSaFails, cipSecTunHistInPkts=cipSecTunHistInPkts, CompAlgo=CompAlgo, cikeTunHistInP2ExchgRejects=cikeTunHistInP2ExchgRejects, cipSecTunInOctets=cipSecTunInOctets, cipSecPhase2GWStatsTable=cipSecPhase2GWStatsTable, IkePeerType=IkePeerType, cipSecTunOutEncrypts=cipSecTunOutEncrypts, cipSecTrapCntlIkeProtocolFail=cipSecTrapCntlIkeProtocolFail, cipSecTrapCntlIpSecSysFailure=cipSecTrapCntlIpSecSysFailure, cipSecTunHistInOctets=cipSecTunHistInOctets, cipSecEndPtLocalProtocol=cipSecEndPtLocalProtocol, cipSecGlobalInReplayDrops=cipSecGlobalInReplayDrops, cipSecTrapCntlIkeCertCrlFailure=cipSecTrapCntlIkeCertCrlFailure, cikeTunInP2Exchgs=cikeTunInP2Exchgs, cipSecTunInAuths=cipSecTunInAuths, cipSecTrapCntlIkeTunnelStart=cipSecTrapCntlIkeTunnelStart, cikeGlobalOutP2ExchgInvalids=cikeGlobalOutP2ExchgInvalids, cikeTunStatus=cikeTunStatus, cipSecPhase2GWInOctets=cipSecPhase2GWInOctets, cikeTunHistInNotifys=cikeTunHistInNotifys, cipSecEndPtHistActiveIndex=cipSecEndPtHistActiveIndex, cipSecPhase2GWOutEncrypts=cipSecPhase2GWOutEncrypts, cikeGlobalPreviousTunnels=cikeGlobalPreviousTunnels, cikeTunHistHashAlgo=cikeTunHistHashAlgo, cipSecMIBCompliances=cipSecMIBCompliances, cipSecEndPtRemoteType=cipSecEndPtRemoteType, cipSecTunHcOutUncompOctets=cipSecTunHcOutUncompOctets, cipSecTunInDecompOctWraps=cipSecTunInDecompOctWraps, cikeGlobalInDropPkts=cikeGlobalInDropPkts, cikePhase1GWInP2SaDelRequests=cikePhase1GWInP2SaDelRequests, cikeGlobalSysCapFails=cikeGlobalSysCapFails, cipSecGlobalOutPkts=cipSecGlobalOutPkts, cipSecTunOutDropPkts=cipSecTunOutDropPkts, cipSecTunHistHcOutOctets=cipSecTunHistHcOutOctets, cipSecEndPtHistLocalAddr1=cipSecEndPtHistLocalAddr1, cipSecTunHistLifeTime=cipSecTunHistLifeTime, cipSecEndPtIndex=cipSecEndPtIndex, cipSecTrapCntlIpSecEarlyTunTerm=cipSecTrapCntlIpSecEarlyTunTerm, KeyType=KeyType, cipSecTunOutSaAhAuthAlgo=cipSecTunOutSaAhAuthAlgo, cipSecGlobalHcInDecompOctets=cipSecGlobalHcInDecompOctets, cikeFailTable=cikeFailTable, cikeTunOutNotifys=cikeTunOutNotifys, cipSecFailEntry=cipSecFailEntry, cipSecGlobalSysCapFails=cipSecGlobalSysCapFails, cipSecHistPhaseTwo=cipSecHistPhaseTwo, cikeFailLocalAddr=cikeFailLocalAddr, cipSecTunHistInSaAhAuthAlgo=cipSecTunHistInSaAhAuthAlgo, cipSecTunOutSaDiffHellmanGrp=cipSecTunOutSaDiffHellmanGrp, cikeFailLocalType=cikeFailLocalType, cikePeerActiveTime=cikePeerActiveTime, cipSecTunHistOutAuths=cipSecTunHistOutAuths, cikeTunInDropPkts=cikeTunInDropPkts, cikeGlobalActiveTunnels=cikeGlobalActiveTunnels, cikeTunLocalType=cikeTunLocalType, cipSecTunSaLifeTimeThreshold=cipSecTunSaLifeTimeThreshold, cipSecTunInSaAhAuthAlgo=cipSecTunInSaAhAuthAlgo, cikeGlobalDecryptFails=cikeGlobalDecryptFails, cipSecPhase2GWSysCapFails=cipSecPhase2GWSysCapFails, cipSecTunInSaEncryptAlgo=cipSecTunInSaEncryptAlgo, cipSecTunHistInDecryptFails=cipSecTunHistInDecryptFails, cipSecFailPktDstAddr=cipSecFailPktDstAddr, cipSecMIBConformance=cipSecMIBConformance, cikePeerCorrIntIndex=cikePeerCorrIntIndex, cikeTunRemoteValue=cikeTunRemoteValue, cipSecTunHistLifeSize=cipSecTunHistLifeSize, cipSecPhaseTwo=cipSecPhaseTwo, cipSecTunHistOutEncryptFails=cipSecTunHistOutEncryptFails, cikeTunnelStop=cikeTunnelStop, cikeSysFailure=cikeSysFailure, cipSecTunInDropPkts=cipSecTunInDropPkts, cikeTunOutOctets=cikeTunOutOctets, cipSecPhase2GWOutPkts=cipSecPhase2GWOutPkts, cipSecEndPtLocalType=cipSecEndPtLocalType, cikePhase1GWOutP2ExchgRejects=cikePhase1GWOutP2ExchgRejects, cikeTunHistOutP2ExchgRejects=cikeTunHistOutP2ExchgRejects, cipSecPhase2GWInReplayDrops=cipSecPhase2GWInReplayDrops, cikeGlobalInP2ExchgInvalids=cikeGlobalInP2ExchgInvalids, cikePhase1GWInP2ExchgRejects=cikePhase1GWInP2ExchgRejects, cipSecSpiEntry=cipSecSpiEntry, cipSecHistCheckPoint=cipSecHistCheckPoint, cikeTunHistLocalName=cikeTunHistLocalName, cipSecTunnelEntry=cipSecTunnelEntry, cikeTunnelHistTable=cikeTunnelHistTable, cikePeerLocalAddr=cikePeerLocalAddr, cipSecTunHistOutAuthFails=cipSecTunHistOutAuthFails, cipSecTunHistTotalRefreshes=cipSecTunHistTotalRefreshes, cikePhase1GWAuthFails=cikePhase1GWAuthFails, cipSecFailPhaseOne=cipSecFailPhaseOne, cikeTunInOctets=cikeTunInOctets, cikePhase1GWOutDropPkts=cikePhase1GWOutDropPkts, cikePeerRemoteValue=cikePeerRemoteValue, cipSecFailTableSize=cipSecFailTableSize, cipSecTunHcInOctets=cipSecTunHcInOctets, cipSecTunLocalAddr=cipSecTunLocalAddr, cipSecFailGlobal=cipSecFailGlobal, cikeCertCrlFailure=cikeCertCrlFailure, cipSecPhase2GWProtocolUseFails=cipSecPhase2GWProtocolUseFails, PYSNMP_MODULE_ID=ciscoIpSecFlowMonitorMIB, cipSecTrapCntl=cipSecTrapCntl, cipSecFailGlobalCntl=cipSecFailGlobalCntl, cipSecMIBObjects=cipSecMIBObjects, cipSecHistGlobalCntl=cipSecHistGlobalCntl, cipSecTunHistOutUncompOctets=cipSecTunHistOutUncompOctets, EncryptAlgo=EncryptAlgo, cikeTunHistActiveIndex=cikeTunHistActiveIndex, cipSecGlobalOutOctets=cipSecGlobalOutOctets, cipSecEndPtHistLocalProtocol=cipSecEndPtHistLocalProtocol, cipSecPhase2GWInAuthFails=cipSecPhase2GWInAuthFails, cipSecTunnelHistEntry=cipSecTunnelHistEntry, cipSecTunLifeTime=cipSecTunLifeTime, cipSecEndPtHistLocalPort=cipSecEndPtHistLocalPort, cipSecFailIndex=cipSecFailIndex, cikeGlobalAuthFails=cikeGlobalAuthFails, cipSecPhase2GWNoSaFails=cipSecPhase2GWNoSaFails, cikeTunOutPkts=cikeTunOutPkts, cipSecEndPtHistRemoteAddr1=cipSecEndPtHistRemoteAddr1, cipSecEndPtLocalAddr2=cipSecEndPtLocalAddr2, cikePhase1GWInitTunnels=cikePhase1GWInitTunnels, cipSecTrapCntlIpSecProtocolFail=cipSecTrapCntlIpSecProtocolFail, cipSecLevelsGroup=cipSecLevelsGroup, cikePhase1GWPreviousTunnels=cikePhase1GWPreviousTunnels, cipSecTunHistHcInOctets=cipSecTunHistHcInOctets, cipSecTunHistInDecrypts=cipSecTunHistInDecrypts, cipSecPhase2GWOutEncryptFails=cipSecPhase2GWOutEncryptFails, cikePeerCorrLocalValue=cikePeerCorrLocalValue, cipSecTunHistOutDropPkts=cipSecTunHistOutDropPkts, cipSecSpiIndex=cipSecSpiIndex, cipSecEndPtLocalAddr1=cipSecEndPtLocalAddr1, cipSecNoSa=cipSecNoSa, cipSecPhase2GWPreviousTunnels=cipSecPhase2GWPreviousTunnels, cikeTunOutDropPkts=cikeTunOutDropPkts, cikeTunHistLifeTime=cikeTunHistLifeTime, cipSecTunHistRemoteAddr=cipSecTunHistRemoteAddr, cikeTunHistTermReason=cikeTunHistTermReason, cipSecTunInSaEspAuthAlgo=cipSecTunInSaEspAuthAlgo, cikeFailReason=cikeFailReason, cipSecSysFailure=cipSecSysFailure, cipSecEndPtHistRemoteAddr2=cipSecEndPtHistRemoteAddr2, cipSecTunHistInDropPkts=cipSecTunHistInDropPkts, cipSecFailTunnelIndex=cipSecFailTunnelIndex, cikeTunOutP2ExchgInvalids=cikeTunOutP2ExchgInvalids, cipSecGlobalOutUncompOctWraps=cipSecGlobalOutUncompOctWraps, cikeGlobalInOctets=cikeGlobalInOctets, cikeTunLocalValue=cikeTunLocalValue, cipSecFailTable=cipSecFailTable, cipSecTunInDecryptFails=cipSecTunInDecryptFails, cikePeerTable=cikePeerTable, cikeTunTotalRefreshes=cikeTunTotalRefreshes, cipSecMIBGroups=cipSecMIBGroups, cipSecTunHistKeyType=cipSecTunHistKeyType, EndPtType=EndPtType, cipSecNotificationGroup=cipSecNotificationGroup, cipSecTunCurrentSaInstances=cipSecTunCurrentSaInstances, cipSecEndPtRemoteProtocol=cipSecEndPtRemoteProtocol, cikeTunLocalAddr=cikeTunLocalAddr, IPSIpAddress=IPSIpAddress, cikeGlobalOutDropPkts=cikeGlobalOutDropPkts, cikePhase1GWInDropPkts=cikePhase1GWInDropPkts, cipSecSetUpFailure=cipSecSetUpFailure, cipSecTunnelHistTable=cipSecTunnelHistTable, cikePhase1GWNoSaFails=cikePhase1GWNoSaFails, cipSecTunHistInDecompOctets=cipSecTunHistInDecompOctets, cikeTunSaRefreshThreshold=cikeTunSaRefreshThreshold, cipSecGlobalHcInOctets=cipSecGlobalHcInOctets, cikeTunHistInDropPkts=cikeTunHistInDropPkts, cipSecPhase2GWInAuths=cipSecPhase2GWInAuths, cipSecHistoryGroup=cipSecHistoryGroup, cikeTunHistInPkts=cikeTunHistInPkts, cipSecTrapCntlGroup=cipSecTrapCntlGroup, cipSecFailPhaseTwo=cipSecFailPhaseTwo, cipSecTunHistOutUncompOctWraps=cipSecTunHistOutUncompOctWraps, cikeTunHistIndex=cikeTunHistIndex, cipSecTunActiveTime=cipSecTunActiveTime, TunnelStatus=TunnelStatus, cipSecEndPtLocalPort=cipSecEndPtLocalPort, cikeTunNegoMode=cikeTunNegoMode, cipSecTunStatus=cipSecTunStatus, cipSecTunOutSaCompAlgo=cipSecTunOutSaCompAlgo, cipSecEndPtHistLocalName=cipSecEndPtHistLocalName, cipSecPhase2GWOutUncompOctets=cipSecPhase2GWOutUncompOctets, cipSecTunHcInDecompOctets=cipSecTunHcInDecompOctets, cipSecGlobalInDecrypts=cipSecGlobalInDecrypts, cikePhase1GWOutP2Exchgs=cikePhase1GWOutP2Exchgs, cikeTunEncryptAlgo=cikeTunEncryptAlgo, TrapStatus=TrapStatus, cikeTunHistRemoteAddr=cikeTunHistRemoteAddr, cipSecEndPtHistRemotePort=cipSecEndPtHistRemotePort, cikeTunHistOutNotifys=cikeTunHistOutNotifys, cikeTunHistOutDropPkts=cikeTunHistOutDropPkts, cipSecEndPtRemoteAddr1=cipSecEndPtRemoteAddr1, cipSecTunInSaDecompAlgo=cipSecTunInSaDecompAlgo, cikePeerCorrLocalType=cikePeerCorrLocalType, cikePhase1GWInitTunnelFails=cikePhase1GWInitTunnelFails, cikeTunHistOutP2Exchgs=cikeTunHistOutP2Exchgs, cipSecTunHistIkeTunnelIndex=cipSecTunHistIkeTunnelIndex, cipSecTunHistEncapMode=cipSecTunHistEncapMode, cikeGlobalInP2SaDelRequests=cikeGlobalInP2SaDelRequests, cipSecTunOutUncompOctets=cipSecTunOutUncompOctets, cikeGlobalInP2ExchgRejects=cikeGlobalInP2ExchgRejects, cipSecTunOutEncryptFails=cipSecTunOutEncryptFails, cikePeerLocalType=cikePeerLocalType, cipSecGlobalOutDrops=cipSecGlobalOutDrops, cikeFailRemoteAddr=cikeFailRemoteAddr, cipSecTunEncapMode=cipSecTunEncapMode, cikeTunRemoteAddr=cikeTunRemoteAddr, cipSecTrapCntlIpSecNoSa=cipSecTrapCntlIpSecNoSa, cikeFailTime=cikeFailTime, cikeTunHistPeerLocalValue=cikeTunHistPeerLocalValue, cipSecGlobalInDecompOctWraps=cipSecGlobalInDecompOctWraps, cikePeerLocalValue=cikePeerLocalValue, cipSecTrapCntlIpSecTunnelStart=cipSecTrapCntlIpSecTunnelStart, cipSecHistTableSize=cipSecHistTableSize, cipSecTunHistLocalAddr=cipSecTunHistLocalAddr, cipSecFailures=cipSecFailures, cipSecTunInReplayDropPkts=cipSecTunInReplayDropPkts, cipSecTunOutAuths=cipSecTunOutAuths, cipSecTunOutSaEspAuthAlgo=cipSecTunOutSaEspAuthAlgo, cipSecPhase2GWInDecryptFails=cipSecPhase2GWInDecryptFails, cikeTunHashAlgo=cikeTunHashAlgo, cipSecTrapCntlIpSecSetUpFailure=cipSecTrapCntlIpSecSetUpFailure, cipSecEndPtHistLocalAddr2=cipSecEndPtHistLocalAddr2, cikeTunHistOutOctets=cikeTunHistOutOctets, cipSecTunHistTermReason=cipSecTunHistTermReason, cipSecTunTotalRefreshes=cipSecTunTotalRefreshes, cikeTunInP2SaDelRequests=cikeTunInP2SaDelRequests, cikeTunAuthMethod=cikeTunAuthMethod, cipSecTrapCntlIkeTunnelStop=cipSecTrapCntlIkeTunnelStop, cikePeerCorrIpSecTunIndex=cikePeerCorrIpSecTunIndex, cikePhase1GWHashValidFails=cikePhase1GWHashValidFails, cikeTunHistTotalSas=cikeTunHistTotalSas, cikePhase1GWOutPkts=cikePhase1GWOutPkts, cipSecTunExpiredSaInstances=cipSecTunExpiredSaInstances, cikeTunRemoteType=cikeTunRemoteType, cipSecGlobalInDecompOctets=cipSecGlobalInDecompOctets, cipSecTunOutUncompOctWraps=cipSecTunOutUncompOctWraps, cikeTunHistInP2Exchgs=cikeTunHistInP2Exchgs, cikeFailIndex=cikeFailIndex, cipSecGlobalStats=cipSecGlobalStats, cipSecGlobalProtocolUseFails=cipSecGlobalProtocolUseFails, cipSecTunOutSaEncryptAlgo=cipSecTunOutSaEncryptAlgo, DiffHellmanGrp=DiffHellmanGrp, cikePhase1GWOutP2ExchgInvalids=cikePhase1GWOutP2ExchgInvalids, cipSecTunHistOutSaEspAuthAlgo=cipSecTunHistOutSaEspAuthAlgo)
mibBuilder.exportSymbols("CISCO-IPSEC-FLOW-MONITOR-MIB", cipSecTunHistOutEncrypts=cipSecTunHistOutEncrypts, cipSecGlobalHcOutUncompOctets=cipSecGlobalHcOutUncompOctets, IkeNegoMode=IkeNegoMode, cipSecTunKeyType=cipSecTunKeyType, cipSecPhase2GWOutAuths=cipSecPhase2GWOutAuths, cipSecTrapCntlIkeNoSa=cipSecTrapCntlIkeNoSa, cikeTunInPkts=cikeTunInPkts, cipSecGlobalInOctWraps=cipSecGlobalInOctWraps, cipSecTunnelStop=cipSecTunnelStop, cikeTunHistEncryptAlgo=cikeTunHistEncryptAlgo, cikeGlobalOutOctets=cikeGlobalOutOctets, cipSecHistPhaseOne=cipSecHistPhaseOne, cikeTunHistInP2SaDelRequests=cikeTunHistInP2SaDelRequests, cipSecPhaseOne=cipSecPhaseOne, cipSecEndPtRemoteName=cipSecEndPtRemoteName, cipSecFailuresGroup=cipSecFailuresGroup, cipSecTunHistOutSaEncryptAlgo=cipSecTunHistOutSaEncryptAlgo, cipSecGlobalOutOctWraps=cipSecGlobalOutOctWraps, cipSecTunLifeSize=cipSecTunLifeSize, cikeTunHistPeerIntIndex=cikeTunHistPeerIntIndex, cikePeerIntIndex=cikePeerIntIndex, cikeTunHistPeerRemoteType=cikeTunHistPeerRemoteType, cipSecPhase2GWOutOctets=cipSecPhase2GWOutOctets, cipSecTunInDecrypts=cipSecTunInDecrypts, cipSecTunHistOutPkts=cipSecTunHistOutPkts, cikePhase1GWRespTunnelFails=cikePhase1GWRespTunnelFails, cikeTunInP2ExchgRejects=cikeTunInP2ExchgRejects, cipSecGWStatsGroup=cipSecGWStatsGroup, cikeGlobalOutP2SaDelRequests=cikeGlobalOutP2SaDelRequests, cikeGlobalHashValidFails=cikeGlobalHashValidFails, cikeTunHistLocalAddr=cikeTunHistLocalAddr, cikeTunHistInP2ExchgInvalids=cikeTunHistInP2ExchgInvalids, cipSecEndPtHistTable=cipSecEndPtHistTable, cipSecPhase2GWOutUncompOctWraps=cipSecPhase2GWOutUncompOctWraps, cipSecTunRemoteAddr=cipSecTunRemoteAddr, cikeTunLocalName=cikeTunLocalName, cikeGlobalInP2Exchgs=cikeGlobalInP2Exchgs, cipSecTunIndex=cipSecTunIndex, cikeTunHistActiveTime=cikeTunHistActiveTime, cipSecFailSaSpi=cipSecFailSaSpi, cipSecFailReason=cipSecFailReason, cipSecTunnelTable=cipSecTunnelTable, cikeTunHistOutP2ExchgInvalids=cikeTunHistOutP2ExchgInvalids, cikePhase1GWInNotifys=cikePhase1GWInNotifys, cikeTunHistInOctets=cikeTunHistInOctets, cipSecEndPtHistLocalType=cipSecEndPtHistLocalType, cipSecTunHistInOctWraps=cipSecTunHistInOctWraps, cikeTunnelEntry=cikeTunnelEntry, cipSecTunHistInSaEspAuthAlgo=cipSecTunHistInSaEspAuthAlgo, cipSecTunHistOutSaAhAuthAlgo=cipSecTunHistOutSaAhAuthAlgo, cikeGlobalRespTunnelFails=cikeGlobalRespTunnelFails, cipSecMIBNotifications=cipSecMIBNotifications, cipSecSpiDirection=cipSecSpiDirection, cipSecPhase2GWInDrops=cipSecPhase2GWInDrops, cipSecTunHistActiveTime=cipSecTunHistActiveTime, cikeTunHistDiffHellmanGrp=cikeTunHistDiffHellmanGrp, cikeGlobalInNotifys=cikeGlobalInNotifys, cipSecHistGlobal=cipSecHistGlobal, cikeTunHistRemoteName=cikeTunHistRemoteName, cipSecPhase2GWOutOctWraps=cipSecPhase2GWOutOctWraps, cikePhase1GWOutNotifys=cikePhase1GWOutNotifys, cikePeerCorrTable=cikePeerCorrTable, cipSecMIBNotificationPrefix=cipSecMIBNotificationPrefix, cikeTunHistNegoMode=cikeTunHistNegoMode, cipSecPhase2GWInPkts=cipSecPhase2GWInPkts, cipSecPhase2GWOutAuthFails=cipSecPhase2GWOutAuthFails, cikeGlobalOutPkts=cikeGlobalOutPkts, cikeTunIndex=cikeTunIndex, cipSecTunIkeTunnelIndex=cipSecTunIkeTunnelIndex, cipSecTunHistOutOctWraps=cipSecTunHistOutOctWraps, cikeGlobalInPkts=cikeGlobalInPkts, cikeTunLifeTime=cikeTunLifeTime, cikeTunHistStartTime=cikeTunHistStartTime, cikePeerCorrRemoteValue=cikePeerCorrRemoteValue, cikePhase1GWSysCapFails=cikePhase1GWSysCapFails, cipSecTunHcOutOctets=cipSecTunHcOutOctets, cikeGlobalStats=cikeGlobalStats, cipSecTunHistHcOutUncompOctets=cipSecTunHistHcOutUncompOctets, cikePeerEntry=cikePeerEntry, cipSecSpiValue=cipSecSpiValue, cipSecEndPtEntry=cipSecEndPtEntry, cikeTunOutP2Exchgs=cikeTunOutP2Exchgs, cipSecGlobalOutUncompOctets=cipSecGlobalOutUncompOctets, cikePhase1GWStatsEntry=cikePhase1GWStatsEntry, cipSecLevels=cipSecLevels, cikePeerRemoteType=cikePeerRemoteType, cipSecTunOutPkts=cipSecTunOutPkts, cikeGlobalInitTunnelFails=cikeGlobalInitTunnelFails, cikePhase1GWInP2Exchgs=cikePhase1GWInP2Exchgs, cipSecMibLevel=cipSecMibLevel, cipSecEndPtLocalName=cipSecEndPtLocalName, cikeGlobalInitTunnels=cikeGlobalInitTunnels, EncapMode=EncapMode, cipSecTunHistInSaEncryptAlgo=cipSecTunHistInSaEncryptAlgo, cipSecTunIkeTunnelAlive=cipSecTunIkeTunnelAlive, cipSecTunOutOctWraps=cipSecTunOutOctWraps, cikeFailRemoteType=cikeFailRemoteType, cikeGlobalOutP2Exchgs=cikeGlobalOutP2Exchgs, cipSecTunOutOctets=cipSecTunOutOctets, cipSecFailTime=cipSecFailTime, cipSecSpiProtocol=cipSecSpiProtocol, cipSecGlobalActiveTunnels=cipSecGlobalActiveTunnels, cipSecTrapCntlIpSecTunnelStop=cipSecTrapCntlIpSecTunnelStop, cipSecGlobalInOctets=cipSecGlobalInOctets, cikePhase1GWOutP2SaDelRequests=cikePhase1GWOutP2SaDelRequests, cipSecTunSaLifeSizeThreshold=cipSecTunSaLifeSizeThreshold, cikeTunInP2ExchgInvalids=cikeTunInP2ExchgInvalids, cipSecEndPtHistIndex=cipSecEndPtHistIndex, IkeHashAlgo=IkeHashAlgo, cikeTunnelStart=cikeTunnelStart, cipSecTunInOctWraps=cipSecTunInOctWraps, cipSecGlobalInDrops=cipSecGlobalInDrops, IkeAuthMethod=IkeAuthMethod, cipSecGlobalOutEncrypts=cipSecGlobalOutEncrypts, cipSecTunInDecompOctets=cipSecTunInDecompOctets, cikeNoSa=cikeNoSa, cipSecGlobalOutAuthFails=cipSecGlobalOutAuthFails, cipSecEndPtHistTunIndex=cipSecEndPtHistTunIndex, cipSecPhase2GWInDecrypts=cipSecPhase2GWInDecrypts, cipSecHistory=cipSecHistory, cipSecTunHistIndex=cipSecTunHistIndex, cipSecPhaseOneGroup=cipSecPhaseOneGroup, cipSecTunHistOutSaDiffHellmanGrp=cipSecTunHistOutSaDiffHellmanGrp, cipSecEndPtHistRemoteProtocol=cipSecEndPtHistRemoteProtocol, cikeTunHistOutPkts=cikeTunHistOutPkts, cipSecEndPtHistRemoteName=cipSecEndPtHistRemoteName, cipSecTunInPkts=cipSecTunInPkts, cipSecMIBComplianceRev1=cipSecMIBComplianceRev1, cipSecMIBCompliance=cipSecMIBCompliance, cipSecPhase2GWInDecompOctets=cipSecPhase2GWInDecompOctets, cikeTunHistPeerLocalType=cikeTunHistPeerLocalType, cipSecPhase2GWInOctWraps=cipSecPhase2GWInOctWraps, cipSecPhase2GWOutDrops=cipSecPhase2GWOutDrops, cikePeerCorrSeqNum=cikePeerCorrSeqNum, cipSecTunHistInAuths=cipSecTunHistInAuths, cipSecGlobalHcOutOctets=cipSecGlobalHcOutOctets, cikeGlobalOutP2ExchgRejects=cikeGlobalOutP2ExchgRejects, cipSecEndPtTable=cipSecEndPtTable, cipSecTunHistOutSaCompAlgo=cipSecTunHistOutSaCompAlgo, cipSecTunInAuthFails=cipSecTunInAuthFails, cipSecPhase2GWInDecompOctWraps=cipSecPhase2GWInDecompOctWraps, cikeTunDiffHellmanGrp=cikeTunDiffHellmanGrp, cikePhase1GWInOctets=cikePhase1GWInOctets, cipSecTunnelStart=cipSecTunnelStart, cikeFailEntry=cikeFailEntry, cipSecEndPtRemotePort=cipSecEndPtRemotePort, cikePhase1GWDecryptFails=cikePhase1GWDecryptFails, cipSecEndPtRemoteAddr2=cipSecEndPtRemoteAddr2, cikeTunHistOutP2SaDelRequests=cikeTunHistOutP2SaDelRequests, cikeFailLocalValue=cikeFailLocalValue, cipSecPhase2GWActiveTunnels=cipSecPhase2GWActiveTunnels, cikeTunOutP2SaDelRequests=cikeTunOutP2SaDelRequests, cipSecGlobalOutAuths=cipSecGlobalOutAuths, cikeTunHistAuthMethod=cikeTunHistAuthMethod, cipSecTunHistHcInDecompOctets=cipSecTunHistHcInDecompOctets, cipSecTunHistInSaDecompAlgo=cipSecTunHistInSaDecompAlgo, cikeTunActiveTime=cikeTunActiveTime, cikePeerCorrRemoteType=cikePeerCorrRemoteType, cipSecGlobalInPkts=cipSecGlobalInPkts, cipSecGlobalInAuths=cipSecGlobalInAuths, cipSecSpiTable=cipSecSpiTable, cipSecTunHistActiveIndex=cipSecTunHistActiveIndex, cipSecTunHistInSaDiffHellmanGrp=cipSecTunHistInSaDiffHellmanGrp, cikePeerCorrEntry=cikePeerCorrEntry, cikeTunnelHistEntry=cikeTunnelHistEntry, cikeTunHistPeerRemoteValue=cikeTunHistPeerRemoteValue, cipSecEndPtHistRemoteType=cipSecEndPtHistRemoteType, cikePhase1GWActiveTunnels=cikePhase1GWActiveTunnels, cipSecGlobalInAuthFails=cipSecGlobalInAuthFails, cikePeerActiveTunnelIndex=cikePeerActiveTunnelIndex, cipSecPhaseTwoGroup=cipSecPhaseTwoGroup, cipSecTunInSaDiffHellmanGrp=cipSecTunInSaDiffHellmanGrp, cikeTunHistTotalRefreshes=cikeTunHistTotalRefreshes, cipSecFailPktSrcAddr=cipSecFailPktSrcAddr, cipSecGlobalInDecryptFails=cipSecGlobalInDecryptFails, cikeGlobalNoSaFails=cikeGlobalNoSaFails, cikeFailRemoteValue=cikeFailRemoteValue, cipSecTrapCntlIkeSysFailure=cipSecTrapCntlIkeSysFailure, cipSecTunOutAuthFails=cipSecTunOutAuthFails, cikeTunInNotifys=cikeTunInNotifys, cikeTunRemoteName=cikeTunRemoteName, cipSecTunHistInReplayDropPkts=cipSecTunHistInReplayDropPkts, cipSecTunHistStartTime=cipSecTunHistStartTime, cikeTunOutP2ExchgRejects=cikeTunOutP2ExchgRejects, cikePeerRemoteAddr=cikePeerRemoteAddr, cikePhase1GWInPkts=cikePhase1GWInPkts, cipSecSpiStatus=cipSecSpiStatus, cipSecProtocolFailure=cipSecProtocolFailure, cipSecGlobalOutEncryptFails=cipSecGlobalOutEncryptFails, cipSecTunHistInAuthFails=cipSecTunHistInAuthFails, AuthAlgo=AuthAlgo, cikeGlobalOutNotifys=cikeGlobalOutNotifys, cipSecGlobalPreviousTunnels=cipSecGlobalPreviousTunnels, ciscoIpSecFlowMonitorMIB=ciscoIpSecFlowMonitorMIB, cipSecPhase2GWStatsEntry=cipSecPhase2GWStatsEntry, cipSecTunHistOutOctets=cipSecTunHistOutOctets)
