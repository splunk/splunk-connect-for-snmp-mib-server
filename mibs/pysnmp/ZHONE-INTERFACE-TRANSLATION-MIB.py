#
# PySNMP MIB module ZHONE-INTERFACE-TRANSLATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-INTERFACE-TRANSLATION-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
InterfaceIndex, ifEntry = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifEntry")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter64, ObjectIdentity, Bits, IpAddress, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, Unsigned32, iso, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "ObjectIdentity", "Bits", "IpAddress", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "Unsigned32", "iso", "MibIdentifier", "Gauge32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
zhoneSlotIndex, zhoneInterfaceTranslation, zhoneShelfIndex, zhoneModules = mibBuilder.importSymbols("Zhone", "zhoneSlotIndex", "zhoneInterfaceTranslation", "zhoneShelfIndex", "zhoneModules")
ZhoneSlotValue, ZhoneShelfValue, ZhoneIfType, ZhoneRowStatus = mibBuilder.importSymbols("Zhone-TC", "ZhoneSlotValue", "ZhoneShelfValue", "ZhoneIfType", "ZhoneRowStatus")
zhoneInterfaceTrans = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 6))
zhoneInterfaceTrans.setRevisions(('2011-02-24 01:38', '2010-04-09 15:04', '2010-04-02 14:29', '2010-03-10 11:19', '2008-09-28 23:15', '2007-01-26 18:23', '2004-05-26 15:53', '2001-06-28 13:07', '2001-05-23 11:02', '2001-05-11 15:25', '2000-09-20 12:00', '2000-09-12 11:11',))
if mibBuilder.loadTexts: zhoneInterfaceTrans.setLastUpdated('201102241138Z')
if mibBuilder.loadTexts: zhoneInterfaceTrans.setOrganization('Zhone Technologies, Inc.')
ifIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 5, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndexNext.setStatus('current')
physicalToIfIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 5, 2), )
if mibBuilder.loadTexts: physicalToIfIndexTable.setStatus('deprecated')
physicalToIfIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 5, 2, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"), (0, "ZHONE-INTERFACE-TRANSLATION-MIB", "pportIndex"), (0, "ZHONE-INTERFACE-TRANSLATION-MIB", "subPortIndex"))
if mibBuilder.loadTexts: physicalToIfIndexEntry.setStatus('deprecated')
pportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: pportIndex.setStatus('deprecated')
subPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: subPortIndex.setStatus('deprecated')
zhoneIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIfIndex.setStatus('deprecated')
xxxifTypexxx = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 2, 1, 4), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xxxifTypexxx.setStatus('deprecated')
ifIndexToPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 5, 3), )
if mibBuilder.loadTexts: ifIndexToPhysicalTable.setStatus('current')
ifIndexToPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 5, 3, 1), ).setIndexNames((0, "ZHONE-INTERFACE-TRANSLATION-MIB", "zhoneIfIndex"))
if mibBuilder.loadTexts: ifIndexToPhysicalEntry.setStatus('current')
zhoneShelfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 3, 1, 1), ZhoneShelfValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneShelfNumber.setStatus('current')
zhoneSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 3, 1, 2), ZhoneSlotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneSlotNumber.setStatus('current')
pportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pportNumber.setStatus('current')
subPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subPortNumber.setStatus('current')
ifaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 3, 1, 5), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifaceType.setStatus('current')
ifaceTypeExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 3, 1, 6), ZhoneIfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifaceTypeExtension.setStatus('current')
ifStackDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 5, 4), )
if mibBuilder.loadTexts: ifStackDefaultTable.setStatus('current')
ifStackDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 5, 4, 1), ).setIndexNames((0, "ZHONE-INTERFACE-TRANSLATION-MIB", "ifStkDefUpperType"), (0, "ZHONE-INTERFACE-TRANSLATION-MIB", "ifStkDefLowerType"), (0, "ZHONE-INTERFACE-TRANSLATION-MIB", "ifStkDefCardType"))
if mibBuilder.loadTexts: ifStackDefaultEntry.setStatus('current')
ifStkDefCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: ifStkDefCardType.setStatus('current')
ifStkDefUpperType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 4, 1, 2), IANAifType())
if mibBuilder.loadTexts: ifStkDefUpperType.setStatus('current')
ifStkDefLowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 4, 1, 3), IANAifType())
if mibBuilder.loadTexts: ifStkDefLowerType.setStatus('current')
ifStkDefUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('count').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifStkDefUnits.setStatus('current')
ifStkDefAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifStkDefAdminStatus.setStatus('current')
ifStkDefRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 4, 1, 6), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifStkDefRowStatus.setStatus('current')
ifInverseStackTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 5, 5), )
if mibBuilder.loadTexts: ifInverseStackTable.setStatus('current')
ifInverseStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 5, 5, 1), ).setIndexNames((0, "ZHONE-INTERFACE-TRANSLATION-MIB", "ifInverseStackLowerLayer"), (0, "ZHONE-INTERFACE-TRANSLATION-MIB", "ifInverseStackHigherLayer"))
if mibBuilder.loadTexts: ifInverseStackEntry.setStatus('current')
ifInverseStackLowerLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ifInverseStackLowerLayer.setStatus('current')
ifInverseStackHigherLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 5, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: ifInverseStackHigherLayer.setStatus('current')
ifInverseStackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifInverseStackStatus.setStatus('current')
zhoneIfXTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 5, 6), )
if mibBuilder.loadTexts: zhoneIfXTable.setStatus('current')
zhoneIfXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 5, 6, 1), )
ifEntry.registerAugmentions(("ZHONE-INTERFACE-TRANSLATION-MIB", "zhoneIfXEntry"))
zhoneIfXEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: zhoneIfXEntry.setStatus('current')
physicalFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 6, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: physicalFlag.setStatus('current')
ifTypeExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 6, 1, 2), ZhoneIfType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ifTypeExtension.setStatus('current')
redundancyParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: redundancyParam1.setStatus('current')
zhoneIfXEntryIfTypeAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 6, 1, 4), IANAifType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIfXEntryIfTypeAlias.setStatus('current')
zhoneIfXEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 6, 1, 5), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIfXEntryRowStatus.setStatus('current')
zhoneIfXEntryShelfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIfXEntryShelfAlias.setStatus('current')
zhoneIfXEntrySlotAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 33))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIfXEntrySlotAlias.setStatus('current')
zhoneIfXEntryPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 6, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIfXEntryPortAlias.setStatus('current')
zhoneIfXEntrySubportAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 6, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIfXEntrySubportAlias.setStatus('current')
zhoneIfXDescriptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneIfXDescriptionIndex.setStatus('current')
zhonePhysicalToIfIndexTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 5, 7), )
if mibBuilder.loadTexts: zhonePhysicalToIfIndexTable.setStatus('current')
zhonePhysicalToIfIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 5, 7, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"), (0, "ZHONE-INTERFACE-TRANSLATION-MIB", "zhonePortIndex"), (0, "ZHONE-INTERFACE-TRANSLATION-MIB", "zhoneSubPortIndex"), (0, "ZHONE-INTERFACE-TRANSLATION-MIB", "zhoneIfType"), (0, "ZHONE-INTERFACE-TRANSLATION-MIB", "zhoneIfTypeExtension"))
if mibBuilder.loadTexts: zhonePhysicalToIfIndexEntry.setStatus('current')
zhonePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: zhonePortIndex.setStatus('current')
zhoneSubPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: zhoneSubPortIndex.setStatus('current')
zhoneIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 7, 1, 4), IANAifType())
if mibBuilder.loadTexts: zhoneIfType.setStatus('current')
zhoneIfTypeExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 7, 1, 5), ZhoneIfType())
if mibBuilder.loadTexts: zhoneIfTypeExtension.setStatus('current')
zhonePhysicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 7, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePhysicalIfIndex.setStatus('current')
zhoneDescriptionTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 5, 8), )
if mibBuilder.loadTexts: zhoneDescriptionTable.setStatus('current')
zhoneDescriptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 5, 8, 1), ).setIndexNames((0, "ZHONE-INTERFACE-TRANSLATION-MIB", "zhoneIfXDescriptionIndex"))
if mibBuilder.loadTexts: zhoneDescriptionEntry.setStatus('current')
zhoneDescriptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 8, 1, 1), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneDescriptionRowStatus.setStatus('current')
zhoneDescriptionText = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhoneDescriptionText.setStatus('current')
zhoneIfXDescriptionIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 5, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneIfXDescriptionIndexNext.setStatus('current')
zhoneLineRedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 5, 10), )
if mibBuilder.loadTexts: zhoneLineRedStatusTable.setStatus('current')
zhoneLineRedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 5, 10, 1), ).setIndexNames((0, "ZHONE-INTERFACE-TRANSLATION-MIB", "zhoneIfIndex"))
if mibBuilder.loadTexts: zhoneLineRedStatusEntry.setStatus('current')
zhoneLineRedStatusFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("standby", 2), ("active", 3), ("unavailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneLineRedStatusFunction.setStatus('current')
zhoneLineRedOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("oos", 2), ("trafficDisabled", 3), ("unavailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneLineRedOpStatus.setStatus('current')
zhoneLineRedTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 5, 11))
if mibBuilder.loadTexts: zhoneLineRedTraps.setStatus('current')
zhoneLineRedTrapsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 5, 11, 0))
if mibBuilder.loadTexts: zhoneLineRedTrapsPrefix.setStatus('current')
zhoneLineRedundancyUnsafe = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 5, 11, 0, 1))
if mibBuilder.loadTexts: zhoneLineRedundancyUnsafe.setStatus('current')
zhoneLineRedundancySafe = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 5, 11, 0, 2))
if mibBuilder.loadTexts: zhoneLineRedundancySafe.setStatus('current')
mibBuilder.exportSymbols("ZHONE-INTERFACE-TRANSLATION-MIB", zhoneLineRedundancyUnsafe=zhoneLineRedundancyUnsafe, zhoneSubPortIndex=zhoneSubPortIndex, ifIndexNext=ifIndexNext, pportNumber=pportNumber, ifStackDefaultEntry=ifStackDefaultEntry, zhoneIfXEntryPortAlias=zhoneIfXEntryPortAlias, zhoneDescriptionText=zhoneDescriptionText, zhonePhysicalToIfIndexEntry=zhonePhysicalToIfIndexEntry, zhoneLineRedStatusEntry=zhoneLineRedStatusEntry, ifInverseStackEntry=ifInverseStackEntry, ifIndexToPhysicalEntry=ifIndexToPhysicalEntry, zhoneIfTypeExtension=zhoneIfTypeExtension, xxxifTypexxx=xxxifTypexxx, ifaceType=ifaceType, zhoneLineRedundancySafe=zhoneLineRedundancySafe, zhoneLineRedStatusTable=zhoneLineRedStatusTable, ifInverseStackLowerLayer=ifInverseStackLowerLayer, zhoneShelfNumber=zhoneShelfNumber, physicalFlag=physicalFlag, zhonePhysicalIfIndex=zhonePhysicalIfIndex, zhoneInterfaceTrans=zhoneInterfaceTrans, zhoneDescriptionEntry=zhoneDescriptionEntry, zhoneIfXDescriptionIndexNext=zhoneIfXDescriptionIndexNext, zhoneIfXEntryIfTypeAlias=zhoneIfXEntryIfTypeAlias, PYSNMP_MODULE_ID=zhoneInterfaceTrans, ifIndexToPhysicalTable=ifIndexToPhysicalTable, zhoneIfXEntrySubportAlias=zhoneIfXEntrySubportAlias, ifStkDefUpperType=ifStkDefUpperType, zhoneIfXTable=zhoneIfXTable, ifStkDefRowStatus=ifStkDefRowStatus, physicalToIfIndexTable=physicalToIfIndexTable, redundancyParam1=redundancyParam1, ifStkDefCardType=ifStkDefCardType, zhoneIfXEntryRowStatus=zhoneIfXEntryRowStatus, zhonePhysicalToIfIndexTable=zhonePhysicalToIfIndexTable, zhoneLineRedTrapsPrefix=zhoneLineRedTrapsPrefix, zhoneIfXEntry=zhoneIfXEntry, zhoneSlotNumber=zhoneSlotNumber, ifStkDefLowerType=ifStkDefLowerType, subPortIndex=subPortIndex, ifTypeExtension=ifTypeExtension, zhoneIfIndex=zhoneIfIndex, zhoneIfType=zhoneIfType, zhoneDescriptionRowStatus=zhoneDescriptionRowStatus, ifaceTypeExtension=ifaceTypeExtension, ifInverseStackTable=ifInverseStackTable, zhoneDescriptionTable=zhoneDescriptionTable, zhoneIfXEntryShelfAlias=zhoneIfXEntryShelfAlias, physicalToIfIndexEntry=physicalToIfIndexEntry, zhoneIfXDescriptionIndex=zhoneIfXDescriptionIndex, ifStkDefAdminStatus=ifStkDefAdminStatus, zhoneLineRedOpStatus=zhoneLineRedOpStatus, subPortNumber=subPortNumber, ifInverseStackStatus=ifInverseStackStatus, zhoneLineRedStatusFunction=zhoneLineRedStatusFunction, ifStackDefaultTable=ifStackDefaultTable, zhonePortIndex=zhonePortIndex, zhoneIfXEntrySlotAlias=zhoneIfXEntrySlotAlias, ifStkDefUnits=ifStkDefUnits, zhoneLineRedTraps=zhoneLineRedTraps, ifInverseStackHigherLayer=ifInverseStackHigherLayer, pportIndex=pportIndex)
