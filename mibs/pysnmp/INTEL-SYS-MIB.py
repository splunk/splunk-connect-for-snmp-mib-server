#
# PySNMP MIB module INTEL-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-SYS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:43:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
products, = mibBuilder.importSymbols("Intel-Common-MIB", "products")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibIdentifier, Bits, Counter64, iso, NotificationType, ModuleIdentity, IpAddress, Integer32, ObjectIdentity, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "Bits", "Counter64", "iso", "NotificationType", "ModuleIdentity", "IpAddress", "Integer32", "ObjectIdentity", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snmp_agents = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6)).setLabel("snmp-agents")
agentConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 1))
agentVendorName = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVendorName.setStatus('mandatory')
agentProductName = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentProductName.setStatus('mandatory')
agentChassisIndex = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentChassisIndex.setStatus('mandatory')
agentModuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentModuleIndex.setStatus('mandatory')
mibversion = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mibversion.setStatus('mandatory')
resetAgent = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("notreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAgent.setStatus('mandatory')
ipConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2))
ipAddressMethodInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("bootp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddressMethodInUse.setStatus('mandatory')
ipAddressInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddressInUse.setStatus('mandatory')
gatewayorRouterAddrInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayorRouterAddrInUse.setStatus('mandatory')
networkMaskInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkMaskInUse.setStatus('mandatory')
broadcastAddressInUse = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: broadcastAddressInUse.setStatus('mandatory')
ipAddressMethodNextReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("bootp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddressMethodNextReset.setStatus('mandatory')
ipAddressNextReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddressNextReset.setStatus('mandatory')
gatewayorRouterAddrNextReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gatewayorRouterAddrNextReset.setStatus('mandatory')
networkMaskNextReset = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkMaskNextReset.setStatus('mandatory')
snmpConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 3))
snmpReadCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snmpReadCommunityString.setStatus('mandatory')
snmpWriteCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: snmpWriteCommunityString.setStatus('mandatory')
snmpTrapReceiverMAX = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapReceiverMAX.setStatus('mandatory')
snmpTrapReceiverNumber = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapReceiverNumber.setStatus('mandatory')
snmpTrapAddressTable = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 3, 5), )
if mibBuilder.loadTexts: snmpTrapAddressTable.setStatus('mandatory')
snmpTrapAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 3, 5, 1), ).setIndexNames((0, "INTEL-SYS-MIB", "trapAddrIndex"))
if mibBuilder.loadTexts: snmpTrapAddressEntry.setStatus('mandatory')
trapAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAddrIndex.setStatus('mandatory')
trapIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 3, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapIPAddr.setStatus('mandatory')
trapCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 3, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapCommunityString.setStatus('mandatory')
trapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("ignore", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapStatus.setStatus('mandatory')
mibBuilder.exportSymbols("INTEL-SYS-MIB", trapStatus=trapStatus, trapIPAddr=trapIPAddr, agentChassisIndex=agentChassisIndex, resetAgent=resetAgent, agentProductName=agentProductName, ipAddressMethodNextReset=ipAddressMethodNextReset, mibversion=mibversion, snmpReadCommunityString=snmpReadCommunityString, ipAddressNextReset=ipAddressNextReset, snmpTrapAddressEntry=snmpTrapAddressEntry, snmpTrapAddressTable=snmpTrapAddressTable, trapAddrIndex=trapAddrIndex, snmpConfiguration=snmpConfiguration, snmpTrapReceiverNumber=snmpTrapReceiverNumber, agentModuleIndex=agentModuleIndex, snmp_agents=snmp_agents, snmpTrapReceiverMAX=snmpTrapReceiverMAX, ipAddressInUse=ipAddressInUse, networkMaskInUse=networkMaskInUse, snmpWriteCommunityString=snmpWriteCommunityString, ipConfiguration=ipConfiguration, networkMaskNextReset=networkMaskNextReset, ipAddressMethodInUse=ipAddressMethodInUse, agentConfiguration=agentConfiguration, agentVendorName=agentVendorName, gatewayorRouterAddrInUse=gatewayorRouterAddrInUse, trapCommunityString=trapCommunityString, broadcastAddressInUse=broadcastAddressInUse, gatewayorRouterAddrNextReset=gatewayorRouterAddrNextReset)
