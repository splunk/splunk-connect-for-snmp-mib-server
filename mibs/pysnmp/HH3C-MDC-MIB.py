#
# PySNMP MIB module HH3C-MDC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-MDC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:15:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Gauge32, ObjectIdentity, TimeTicks, MibIdentifier, Integer32, NotificationType, Unsigned32, iso, IpAddress, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Gauge32", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Integer32", "NotificationType", "Unsigned32", "iso", "IpAddress", "Bits", "ModuleIdentity")
TruthValue, RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "DisplayString", "TextualConvention")
hh3cMDC = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 136))
hh3cMDC.setRevisions(('2013-03-05 14:48',))
if mibBuilder.loadTexts: hh3cMDC.setLastUpdated('201303051448Z')
if mibBuilder.loadTexts: hh3cMDC.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
class Hh3cMdcActionValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("start", 1), ("stop", 2))

class Hh3cMdcRunStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("inactive", 1), ("starting", 2), ("active", 3), ("stopping", 4), ("updating", 5))

hh3cMDCScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 136, 1))
hh3cMDCMaxMDCNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 136, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCMaxMDCNum.setStatus('current')
hh3cMDCCurrentMDCNum = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 136, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCCurrentMDCNum.setStatus('current')
hh3cMDCTables = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2))
hh3cMDCControl = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 1))
hh3cMDCControlTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 1, 1), )
if mibBuilder.loadTexts: hh3cMDCControlTable.setStatus('current')
hh3cMDCControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 1, 1, 1), ).setIndexNames((0, "HH3C-MDC-MIB", "hh3cMDCIndex"))
if mibBuilder.loadTexts: hh3cMDCControlEntry.setStatus('current')
hh3cMDCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cMDCIndex.setStatus('current')
hh3cMDCName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMDCName.setStatus('current')
hh3cMDCAction = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 1, 1, 1, 3), Hh3cMdcActionValue().clone('stop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMDCAction.setStatus('current')
hh3cMDCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 1, 1, 1, 4), Hh3cMdcRunStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCStatus.setStatus('current')
hh3cMDCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cMDCRowStatus.setStatus('current')
hh3cMDCResource = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2))
hh3cMDCDISKResourceTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 1), )
if mibBuilder.loadTexts: hh3cMDCDISKResourceTable.setStatus('current')
hh3cMDCDISKResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "HH3C-MDC-MIB", "hh3cMDCIndex"), (0, "HH3C-MDC-MIB", "hh3cMDCDISKResourceInstance"))
if mibBuilder.loadTexts: hh3cMDCDISKResourceEntry.setStatus('current')
hh3cMDCDISKResourceInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cMDCDISKResourceInstance.setStatus('current')
hh3cMDCDISKResourceInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCDISKResourceInstanceName.setStatus('current')
hh3cMDCDISKResourceMinLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMDCDISKResourceMinLimit.setStatus('current')
hh3cMDCDISKResourceMaxLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMDCDISKResourceMaxLimit.setStatus('current')
hh3cMDCDISKResourceReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 1, 1, 5), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCDISKResourceReserve.setStatus('current')
hh3cMDCDISKResourceQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 1, 1, 6), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCDISKResourceQuota.setStatus('current')
hh3cMDCDISKResourceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 1, 1, 7), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCDISKResourceUsage.setStatus('current')
hh3cMDCDISKResourceAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 1, 1, 8), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCDISKResourceAvailable.setStatus('current')
hh3cMDCMemoryResourceTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 2), )
if mibBuilder.loadTexts: hh3cMDCMemoryResourceTable.setStatus('current')
hh3cMDCMemoryResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "HH3C-MDC-MIB", "hh3cMDCIndex"))
if mibBuilder.loadTexts: hh3cMDCMemoryResourceEntry.setStatus('current')
hh3cMDCMemoryResourceMinLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMDCMemoryResourceMinLimit.setStatus('current')
hh3cMDCMemoryResourceMaxLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMDCMemoryResourceMaxLimit.setStatus('current')
hh3cMDCMemoryResourceReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 2, 1, 3), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCMemoryResourceReserve.setStatus('current')
hh3cMDCMemoryResourceQuota = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 2, 1, 4), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCMemoryResourceQuota.setStatus('current')
hh3cMDCMemoryResourceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 2, 1, 5), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCMemoryResourceUsage.setStatus('current')
hh3cMDCMemoryResourceAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 2, 1, 6), Unsigned32()).setUnits('KB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCMemoryResourceAvailable.setStatus('current')
hh3cMDCCPUResourceTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 3), )
if mibBuilder.loadTexts: hh3cMDCCPUResourceTable.setStatus('current')
hh3cMDCCPUResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "HH3C-MDC-MIB", "hh3cMDCIndex"))
if mibBuilder.loadTexts: hh3cMDCCPUResourceEntry.setStatus('current')
hh3cMDCCPUResourceLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setUnits('weight').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMDCCPUResourceLimit.setStatus('current')
hh3cMDCCPUResourceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCCPUResourceUsage.setStatus('current')
hh3cMDCLocation = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 3))
hh3cMDCLocationTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 3, 1), )
if mibBuilder.loadTexts: hh3cMDCLocationTable.setStatus('current')
hh3cMDCLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "HH3C-MDC-MIB", "hh3cMDCIndex"))
if mibBuilder.loadTexts: hh3cMDCLocationEntry.setStatus('current')
hh3cMDCLocationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMDCLocationStatus.setStatus('current')
hh3cMDCAllocate = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 4))
hh3cMDCGroupIfTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 4, 1), )
if mibBuilder.loadTexts: hh3cMDCGroupIfTable.setStatus('current')
hh3cMDCGroupIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: hh3cMDCGroupIfEntry.setStatus('current')
hh3cMDCGroupIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCGroupIdentity.setStatus('current')
hh3cMDCAllocateTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 4, 2), )
if mibBuilder.loadTexts: hh3cMDCAllocateTable.setStatus('current')
hh3cMDCAllocateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 4, 2, 1), ).setIndexNames((0, "HH3C-MDC-MIB", "hh3cMDCAllocateGroupIndex"))
if mibBuilder.loadTexts: hh3cMDCAllocateEntry.setStatus('current')
hh3cMDCAllocateGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cMDCAllocateGroupIndex.setStatus('current')
hh3cMDCAllocateGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cMDCAllocateGroupDescription.setStatus('current')
hh3cMDCAllocateMDCId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 136, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cMDCAllocateMDCId.setStatus('current')
hh3cMDCNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 136, 3))
hh3cMDCNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 136, 3, 0))
hh3cMDCStateChangeToActive = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 136, 3, 0, 1)).setObjects(("HH3C-MDC-MIB", "hh3cMDCIndex"), ("HH3C-MDC-MIB", "hh3cMDCName"))
if mibBuilder.loadTexts: hh3cMDCStateChangeToActive.setStatus('current')
hh3cMDCStateChangeToInactive = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 136, 3, 0, 2)).setObjects(("HH3C-MDC-MIB", "hh3cMDCIndex"), ("HH3C-MDC-MIB", "hh3cMDCName"))
if mibBuilder.loadTexts: hh3cMDCStateChangeToInactive.setStatus('current')
mibBuilder.exportSymbols("HH3C-MDC-MIB", hh3cMDCCPUResourceEntry=hh3cMDCCPUResourceEntry, hh3cMDCNotificationObjects=hh3cMDCNotificationObjects, hh3cMDCCurrentMDCNum=hh3cMDCCurrentMDCNum, hh3cMDCControlEntry=hh3cMDCControlEntry, hh3cMDCMemoryResourceMaxLimit=hh3cMDCMemoryResourceMaxLimit, hh3cMDCControlTable=hh3cMDCControlTable, hh3cMDCMemoryResourceReserve=hh3cMDCMemoryResourceReserve, hh3cMDCMemoryResourceQuota=hh3cMDCMemoryResourceQuota, hh3cMDCLocationStatus=hh3cMDCLocationStatus, hh3cMDCStateChangeToInactive=hh3cMDCStateChangeToInactive, hh3cMDCLocationTable=hh3cMDCLocationTable, hh3cMDCAllocateTable=hh3cMDCAllocateTable, hh3cMDCMemoryResourceEntry=hh3cMDCMemoryResourceEntry, hh3cMDCAllocateEntry=hh3cMDCAllocateEntry, hh3cMDCNotification=hh3cMDCNotification, hh3cMDC=hh3cMDC, Hh3cMdcRunStatus=Hh3cMdcRunStatus, hh3cMDCGroupIfEntry=hh3cMDCGroupIfEntry, hh3cMDCMemoryResourceMinLimit=hh3cMDCMemoryResourceMinLimit, hh3cMDCDISKResourceInstanceName=hh3cMDCDISKResourceInstanceName, hh3cMDCCPUResourceUsage=hh3cMDCCPUResourceUsage, hh3cMDCAllocateMDCId=hh3cMDCAllocateMDCId, hh3cMDCMemoryResourceUsage=hh3cMDCMemoryResourceUsage, hh3cMDCAction=hh3cMDCAction, hh3cMDCCPUResourceTable=hh3cMDCCPUResourceTable, hh3cMDCDISKResourceAvailable=hh3cMDCDISKResourceAvailable, hh3cMDCAllocate=hh3cMDCAllocate, hh3cMDCResource=hh3cMDCResource, hh3cMDCLocationEntry=hh3cMDCLocationEntry, hh3cMDCDISKResourceEntry=hh3cMDCDISKResourceEntry, hh3cMDCDISKResourceInstance=hh3cMDCDISKResourceInstance, hh3cMDCCPUResourceLimit=hh3cMDCCPUResourceLimit, hh3cMDCScalarObjects=hh3cMDCScalarObjects, hh3cMDCDISKResourceUsage=hh3cMDCDISKResourceUsage, hh3cMDCDISKResourceReserve=hh3cMDCDISKResourceReserve, hh3cMDCStatus=hh3cMDCStatus, PYSNMP_MODULE_ID=hh3cMDC, hh3cMDCDISKResourceMinLimit=hh3cMDCDISKResourceMinLimit, Hh3cMdcActionValue=Hh3cMdcActionValue, hh3cMDCDISKResourceQuota=hh3cMDCDISKResourceQuota, hh3cMDCGroupIfTable=hh3cMDCGroupIfTable, hh3cMDCMemoryResourceAvailable=hh3cMDCMemoryResourceAvailable, hh3cMDCTables=hh3cMDCTables, hh3cMDCRowStatus=hh3cMDCRowStatus, hh3cMDCGroupIdentity=hh3cMDCGroupIdentity, hh3cMDCMemoryResourceTable=hh3cMDCMemoryResourceTable, hh3cMDCName=hh3cMDCName, hh3cMDCAllocateGroupDescription=hh3cMDCAllocateGroupDescription, hh3cMDCDISKResourceTable=hh3cMDCDISKResourceTable, hh3cMDCAllocateGroupIndex=hh3cMDCAllocateGroupIndex, hh3cMDCDISKResourceMaxLimit=hh3cMDCDISKResourceMaxLimit, hh3cMDCMaxMDCNum=hh3cMDCMaxMDCNum, hh3cMDCLocation=hh3cMDCLocation, hh3cMDCIndex=hh3cMDCIndex, hh3cMDCControl=hh3cMDCControl, hh3cMDCStateChangeToActive=hh3cMDCStateChangeToActive)
