#
# PySNMP MIB module OMNI-gx2Rx085BX4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2Rx085BX4-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
gx2Rx085BX4, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Rx085BX4")
gi, motproxies = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "gi", "motproxies")
trapNetworkElemAdminState, trapText, trapChangedObjectId, trapIdentifier, trapNetworkElemOperState, trapNetworkElemSerialNum, trapNETrapLastTrapTimeStamp, trapChangedValueInteger, trapNetworkElemAvailStatus, trapPerceivedSeverity, trapNetworkElemModelNumber, trapNetworkElemAlarmStatus, trapChangedValueDisplayString = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState", "trapText", "trapChangedObjectId", "trapIdentifier", "trapNetworkElemOperState", "trapNetworkElemSerialNum", "trapNETrapLastTrapTimeStamp", "trapChangedValueInteger", "trapNetworkElemAvailStatus", "trapPerceivedSeverity", "trapNetworkElemModelNumber", "trapNetworkElemAlarmStatus", "trapChangedValueDisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, NotificationType, Counter64, Counter32, NotificationType, Integer32, ModuleIdentity, ObjectIdentity, Bits, IpAddress, Unsigned32, iso, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "NotificationType", "Counter64", "Counter32", "NotificationType", "Integer32", "ModuleIdentity", "ObjectIdentity", "Bits", "IpAddress", "Unsigned32", "iso", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

class U32Data(Counter32):
    pass

gx2Rx085BX4Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 1))
gx2Rx085BX4AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2), )
if mibBuilder.loadTexts: gx2Rx085BX4AnalogTable.setStatus('mandatory')
gx2Rx085BX4AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1), ).setIndexNames((0, "OMNI-gx2Rx085BX4-MIB", "gx2Rx085BX4AnalogTableIndex"))
if mibBuilder.loadTexts: gx2Rx085BX4AnalogEntry.setStatus('mandatory')
gx2Rx085BX4DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3), )
if mibBuilder.loadTexts: gx2Rx085BX4DigitalTable.setStatus('mandatory')
gx2Rx085BX4DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2), ).setIndexNames((0, "OMNI-gx2Rx085BX4-MIB", "gx2Rx085BX4DigitalTableIndex"))
if mibBuilder.loadTexts: gx2Rx085BX4DigitalEntry.setStatus('mandatory')
gx2Rx085BX4StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4), )
if mibBuilder.loadTexts: gx2Rx085BX4StatusTable.setStatus('mandatory')
gx2Rx085BX4StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3), ).setIndexNames((0, "OMNI-gx2Rx085BX4-MIB", "gx2Rx085BX4StatusTableIndex"))
if mibBuilder.loadTexts: gx2Rx085BX4StatusEntry.setStatus('mandatory')
gx2Rx085BX4FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5), )
if mibBuilder.loadTexts: gx2Rx085BX4FactoryTable.setStatus('mandatory')
gx2Rx085BX4FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4), ).setIndexNames((0, "OMNI-gx2Rx085BX4-MIB", "gx2Rx085BX4FactoryTableIndex"))
if mibBuilder.loadTexts: gx2Rx085BX4FactoryEntry.setStatus('mandatory')
gx2Rx085BX4AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx085BX4AnalogTableIndex.setStatus('mandatory')
rx085labelOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelOptPowerOne.setStatus('optional')
rx085uomOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085uomOptPowerOne.setStatus('optional')
rx085majorHighOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorHighOptPowerOne.setStatus('mandatory')
rx085majorLowOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorLowOptPowerOne.setStatus('mandatory')
rx085minorHighOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorHighOptPowerOne.setStatus('mandatory')
rx085minorLowOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorLowOptPowerOne.setStatus('mandatory')
rx085currentValueOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085currentValueOptPowerOne.setStatus('mandatory')
rx085stateFlagOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagOptPowerOne.setStatus('mandatory')
rx085minValueOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minValueOptPowerOne.setStatus('mandatory')
rx085maxValueOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085maxValueOptPowerOne.setStatus('mandatory')
rx085alarmStateOptPowerOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085alarmStateOptPowerOne.setStatus('mandatory')
rx085labelOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelOptPowerTwo.setStatus('optional')
rx085uomOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085uomOptPowerTwo.setStatus('optional')
rx085majorHighOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorHighOptPowerTwo.setStatus('mandatory')
rx085majorLowOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorLowOptPowerTwo.setStatus('mandatory')
rx085minorHighOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorHighOptPowerTwo.setStatus('mandatory')
rx085minorLowOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorLowOptPowerTwo.setStatus('mandatory')
rx085currentValueOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085currentValueOptPowerTwo.setStatus('mandatory')
rx085stateFlagOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagOptPowerTwo.setStatus('mandatory')
rx085minValueOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minValueOptPowerTwo.setStatus('mandatory')
rx085maxValueOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085maxValueOptPowerTwo.setStatus('mandatory')
rx085alarmStateOptPowerTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085alarmStateOptPowerTwo.setStatus('mandatory')
rx085labelOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelOptPowerThree.setStatus('optional')
rx085uomOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085uomOptPowerThree.setStatus('optional')
rx085majorHighOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorHighOptPowerThree.setStatus('mandatory')
rx085majorLowOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorLowOptPowerThree.setStatus('mandatory')
rx085minorHighOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorHighOptPowerThree.setStatus('mandatory')
rx085minorLowOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorLowOptPowerThree.setStatus('mandatory')
rx085currentValueOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085currentValueOptPowerThree.setStatus('mandatory')
rx085stateFlagOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagOptPowerThree.setStatus('mandatory')
rx085minValueOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minValueOptPowerThree.setStatus('mandatory')
rx085maxValueOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085maxValueOptPowerThree.setStatus('mandatory')
rx085alarmStateOptPowerThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085alarmStateOptPowerThree.setStatus('mandatory')
rx085labelOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelOptPowerFour.setStatus('optional')
rx085uomOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085uomOptPowerFour.setStatus('optional')
rx085majorHighOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorHighOptPowerFour.setStatus('mandatory')
rx085majorLowOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorLowOptPowerFour.setStatus('mandatory')
rx085minorHighOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorHighOptPowerFour.setStatus('mandatory')
rx085minorLowOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorLowOptPowerFour.setStatus('mandatory')
rx085currentValueOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085currentValueOptPowerFour.setStatus('mandatory')
rx085stateFlagOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagOptPowerFour.setStatus('mandatory')
rx085minValueOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minValueOptPowerFour.setStatus('mandatory')
rx085maxValueOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085maxValueOptPowerFour.setStatus('mandatory')
rx085alarmStateOptPowerFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085alarmStateOptPowerFour.setStatus('mandatory')
rx085labelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelModTemp.setStatus('optional')
rx085uomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085uomModTemp.setStatus('optional')
rx085majorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorHighModTemp.setStatus('mandatory')
rx085majorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorLowModTemp.setStatus('mandatory')
rx085minorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorHighModTemp.setStatus('mandatory')
rx085minorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorLowModTemp.setStatus('mandatory')
rx085currentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085currentValueModTemp.setStatus('mandatory')
rx085stateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagModTemp.setStatus('mandatory')
rx085minValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minValueModTemp.setStatus('mandatory')
rx085maxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085maxValueModTemp.setStatus('mandatory')
rx085alarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085alarmStateModTemp.setStatus('mandatory')
rx085labelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelFanCurrent.setStatus('optional')
rx085uomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085uomFanCurrent.setStatus('optional')
rx085majorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorHighFanCurrent.setStatus('mandatory')
rx085majorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorLowFanCurrent.setStatus('mandatory')
rx085minorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorHighFanCurrent.setStatus('mandatory')
rx085minorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorLowFanCurrent.setStatus('mandatory')
rx085currentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085currentValueFanCurrent.setStatus('mandatory')
rx085stateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagFanCurrent.setStatus('mandatory')
rx085minValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minValueFanCurrent.setStatus('mandatory')
rx085maxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085maxValueFanCurrent.setStatus('mandatory')
rx085alarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085alarmStateFanCurrent.setStatus('mandatory')
rx085label12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085label12Volt.setStatus('optional')
rx085uom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085uom12Volt.setStatus('optional')
rx085majorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorHigh12Volt.setStatus('mandatory')
rx085majorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085majorLow12Volt.setStatus('mandatory')
rx085minorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorHigh12Volt.setStatus('mandatory')
rx085minorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minorLow12Volt.setStatus('mandatory')
rx085currentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085currentValue12Volt.setStatus('mandatory')
rx085stateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlag12Volt.setStatus('mandatory')
rx085minValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085minValue12Volt.setStatus('mandatory')
rx085maxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085maxValue12Volt.setStatus('mandatory')
rx085alarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085alarmState12Volt.setStatus('mandatory')
gx2Rx085BX4DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx085BX4DigitalTableIndex.setStatus('mandatory')
rx085labelModeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelModeOne.setStatus('optional')
rx085enumModeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumModeOne.setStatus('optional')
rx085valueModeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("agc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueModeOne.setStatus('mandatory')
rx085stateFlagModeOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagModeOne.setStatus('mandatory')
rx085labelWavelengthOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelWavelengthOne.setStatus('optional')
rx085enumWavelengthOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumWavelengthOne.setStatus('optional')
rx085valueWavelengthOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nM1270", 1), ("nM1290", 2), ("nM1310", 3), ("nM1330", 4), ("nM1350", 5), ("nM1370", 6), ("nM1390", 7), ("nM1410", 8), ("nM1430", 9), ("nM1450", 10), ("nM1470", 11), ("nM1490", 12), ("nM1510", 13), ("nM1530", 14), ("nM1550", 15), ("nM1570", 16), ("nM1590", 17), ("nM1610", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueWavelengthOne.setStatus('mandatory')
rx085stateFlagWavelengthOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagWavelengthOne.setStatus('mandatory')
rx085labelAttnSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelAttnSettingOne.setStatus('optional')
rx085enumAttnSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumAttnSettingOne.setStatus('optional')
rx085valueAttnSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueAttnSettingOne.setStatus('mandatory')
rx085stateFlagAttnSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagAttnSettingOne.setStatus('mandatory')
rx085labelSwModeSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelSwModeSettingOne.setStatus('optional')
rx085enumSwModeSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumSwModeSettingOne.setStatus('optional')
rx085valueSwModeSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueSwModeSettingOne.setStatus('mandatory')
rx085stateFlagSwModeSettingOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagSwModeSettingOne.setStatus('mandatory')
rx085labelSwModeThresholdOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelSwModeThresholdOne.setStatus('optional')
rx085enumSwModeThresholdOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumSwModeThresholdOne.setStatus('optional')
rx085valueSwModeThresholdOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueSwModeThresholdOne.setStatus('mandatory')
rx085stateFlagSwModeThresholdOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagSwModeThresholdOne.setStatus('mandatory')
rx085labelModeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelModeTwo.setStatus('optional')
rx085enumModeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumModeTwo.setStatus('optional')
rx085valueModeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("agc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueModeTwo.setStatus('mandatory')
rx085stateFlagModeTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagModeTwo.setStatus('mandatory')
rx085labelWavelengthTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelWavelengthTwo.setStatus('optional')
rx085enumWavelengthTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumWavelengthTwo.setStatus('optional')
rx085valueWavelengthTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nM1270", 1), ("nM1290", 2), ("nM1310", 3), ("nM1330", 4), ("nM1350", 5), ("nM1370", 6), ("nM1390", 7), ("nM1410", 8), ("nM1430", 9), ("nM1450", 10), ("nM1470", 11), ("nM1490", 12), ("nM1510", 13), ("nM1530", 14), ("nM1550", 15), ("nM1570", 16), ("nM1590", 17), ("nM1610", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueWavelengthTwo.setStatus('mandatory')
rx085stateFlagWavelengthTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagWavelengthTwo.setStatus('mandatory')
rx085labelAttnSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelAttnSettingTwo.setStatus('optional')
rx085enumAttnSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumAttnSettingTwo.setStatus('optional')
rx085valueAttnSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueAttnSettingTwo.setStatus('mandatory')
rx085stateFlagAttnSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagAttnSettingTwo.setStatus('mandatory')
rx085labelSwModeSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelSwModeSettingTwo.setStatus('optional')
rx085enumSwModeSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumSwModeSettingTwo.setStatus('optional')
rx085valueSwModeSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueSwModeSettingTwo.setStatus('mandatory')
rx085stateFlagSwModeSettingTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagSwModeSettingTwo.setStatus('mandatory')
rx085labelSwModeThresholdTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelSwModeThresholdTwo.setStatus('optional')
rx085enumSwModeThresholdTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumSwModeThresholdTwo.setStatus('optional')
rx085valueSwModeThresholdTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueSwModeThresholdTwo.setStatus('mandatory')
rx085stateFlagSwModeThresholdTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagSwModeThresholdTwo.setStatus('mandatory')
rx085labelModeThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelModeThree.setStatus('optional')
rx085enumModeThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumModeThree.setStatus('optional')
rx085valueModeThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("agc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueModeThree.setStatus('mandatory')
rx085stateFlagModeThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagModeThree.setStatus('mandatory')
rx085labelWavelengthThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelWavelengthThree.setStatus('optional')
rx085enumWavelengthThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumWavelengthThree.setStatus('optional')
rx085valueWavelengthThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nM1270", 1), ("nM1290", 2), ("nM1310", 3), ("nM1330", 4), ("nM1350", 5), ("nM1370", 6), ("nM1390", 7), ("nM1410", 8), ("nM1430", 9), ("nM1450", 10), ("nM1470", 11), ("nM1490", 12), ("nM1510", 13), ("nM1530", 14), ("nM1550", 15), ("nM1570", 16), ("nM1590", 17), ("nM1610", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueWavelengthThree.setStatus('mandatory')
rx085stateFlagWavelengthThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagWavelengthThree.setStatus('mandatory')
rx085labelAttnSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelAttnSettingThree.setStatus('optional')
rx085enumAttnSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumAttnSettingThree.setStatus('optional')
rx085valueAttnSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 52), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueAttnSettingThree.setStatus('mandatory')
rx085stateFlagAttnSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagAttnSettingThree.setStatus('mandatory')
rx085labelSwModeSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelSwModeSettingThree.setStatus('optional')
rx085enumSwModeSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumSwModeSettingThree.setStatus('optional')
rx085valueSwModeSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueSwModeSettingThree.setStatus('mandatory')
rx085stateFlagSwModeSettingThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagSwModeSettingThree.setStatus('mandatory')
rx085labelSwModeThresholdThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelSwModeThresholdThree.setStatus('optional')
rx085enumSwModeThresholdThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumSwModeThresholdThree.setStatus('optional')
rx085valueSwModeThresholdThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueSwModeThresholdThree.setStatus('mandatory')
rx085stateFlagSwModeThresholdThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagSwModeThresholdThree.setStatus('mandatory')
rx085labelModeFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelModeFour.setStatus('optional')
rx085enumModeFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumModeFour.setStatus('optional')
rx085valueModeFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("agc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueModeFour.setStatus('mandatory')
rx085stateFlagModeFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagModeFour.setStatus('mandatory')
rx085labelWavelengthFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelWavelengthFour.setStatus('optional')
rx085enumWavelengthFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumWavelengthFour.setStatus('optional')
rx085valueWavelengthFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("nM1270", 1), ("nM1290", 2), ("nM1310", 3), ("nM1330", 4), ("nM1350", 5), ("nM1370", 6), ("nM1390", 7), ("nM1410", 8), ("nM1430", 9), ("nM1450", 10), ("nM1470", 11), ("nM1490", 12), ("nM1510", 13), ("nM1530", 14), ("nM1550", 15), ("nM1570", 16), ("nM1590", 17), ("nM1610", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueWavelengthFour.setStatus('mandatory')
rx085stateFlagWavelengthFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagWavelengthFour.setStatus('mandatory')
rx085labelAttnSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelAttnSettingFour.setStatus('optional')
rx085enumAttnSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumAttnSettingFour.setStatus('optional')
rx085valueAttnSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueAttnSettingFour.setStatus('mandatory')
rx085stateFlagAttnSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagAttnSettingFour.setStatus('mandatory')
rx085labelSwModeSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelSwModeSettingFour.setStatus('optional')
rx085enumSwModeSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumSwModeSettingFour.setStatus('optional')
rx085valueSwModeSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("alarm-only", 2), ("alarm-and-switch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueSwModeSettingFour.setStatus('mandatory')
rx085stateFlagSwModeSettingFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagSwModeSettingFour.setStatus('mandatory')
rx085labelSwModeThresholdFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelSwModeThresholdFour.setStatus('optional')
rx085enumSwModeThresholdFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumSwModeThresholdFour.setStatus('optional')
rx085valueSwModeThresholdFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 80), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueSwModeThresholdFour.setStatus('mandatory')
rx085stateFlagSwModeThresholdFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagSwModeThresholdFour.setStatus('mandatory')
rx085labelModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelModuleConfig.setStatus('optional')
rx085enumModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 83), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumModuleConfig.setStatus('optional')
rx085valueModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("slave", 1), ("master", 2), ("burst", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueModuleConfig.setStatus('mandatory')
rx085stateFlagModuleConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagModuleConfig.setStatus('mandatory')
rx085labelRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 86), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelRevertTime.setStatus('optional')
rx085enumRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 87), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumRevertTime.setStatus('optional')
rx085valueRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one-sec", 1), ("ten-sec", 2), ("sixty-sec", 3), ("six-hundred-sec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueRevertTime.setStatus('mandatory')
rx085stateFlagRevertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagRevertTime.setStatus('mandatory')
rx085labelTestPointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelTestPointSelect.setStatus('optional')
rx085enumTestPointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumTestPointSelect.setStatus('optional')
rx085valueTestPointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("three", 3), ("four", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueTestPointSelect.setStatus('mandatory')
rx085stateFlagTestPointSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagTestPointSelect.setStatus('mandatory')
rx085labelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 94), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelFactoryDefault.setStatus('optional')
rx085enumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085enumFactoryDefault.setStatus('optional')
rx085valueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rx085valueFactoryDefault.setStatus('mandatory')
rx085stateFlagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 3, 2, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateFlagFactoryDefault.setStatus('mandatory')
gx2Rx085BX4StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx085BX4StatusTableIndex.setStatus('mandatory')
rx085labelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelBoot.setStatus('optional')
rx085valueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085valueBoot.setStatus('mandatory')
rx085stateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateflagBoot.setStatus('mandatory')
rx085labelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelFlash.setStatus('optional')
rx085valueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085valueFlash.setStatus('mandatory')
rx085stateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateflagFlash.setStatus('mandatory')
rx085labelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelFactoryDataCRC.setStatus('optional')
rx085valueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085valueFactoryDataCRC.setStatus('mandatory')
rx085stateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateflagFactoryDataCRC.setStatus('mandatory')
rx085labelAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelAlarmDataCRC.setStatus('optional')
rx085valueAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085valueAlarmDataCRC.setStatus('mandatory')
rx085stateflagAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateflagAlarmDataCRC.setStatus('mandatory')
rx085labelCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelCalibrationDataCRC.setStatus('optional')
rx085valueCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085valueCalibrationDataCRC.setStatus('mandatory')
rx085stateflagCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateflagCalibrationDataCRC.setStatus('mandatory')
rx085labelHW = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelHW.setStatus('optional')
rx085valueHW = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085valueHW.setStatus('mandatory')
rx085stateflagHW = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateflagHW.setStatus('mandatory')
rx085labelOptSigOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelOptSigOne.setStatus('optional')
rx085valueOptSigOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085valueOptSigOne.setStatus('mandatory')
rx085stateflagOptSigOne = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateflagOptSigOne.setStatus('mandatory')
rx085labelOptSigTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelOptSigTwo.setStatus('optional')
rx085valueOptSigTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085valueOptSigTwo.setStatus('mandatory')
rx085stateflagOptSigTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateflagOptSigTwo.setStatus('mandatory')
rx085labelOptSigThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelOptSigThree.setStatus('optional')
rx085valueOptSigThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085valueOptSigThree.setStatus('mandatory')
rx085stateflagOptSigThree = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateflagOptSigThree.setStatus('mandatory')
rx085labelOptSigFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelOptSigFour.setStatus('optional')
rx085valueOptSigFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085valueOptSigFour.setStatus('mandatory')
rx085stateflagOptSigFour = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateflagOptSigFour.setStatus('mandatory')
rx085labelBackupCable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085labelBackupCable.setStatus('optional')
rx085valueBackupCable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085valueBackupCable.setStatus('mandatory')
rx085stateflagBackupCable = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 4, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085stateflagBackupCable.setStatus('mandatory')
gx2Rx085BX4FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Rx085BX4FactoryTableIndex.setStatus('mandatory')
rx085bootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085bootControlByte.setStatus('mandatory')
rx085bootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085bootStatusByte.setStatus('mandatory')
rx085bank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085bank0CRC.setStatus('mandatory')
rx085bank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085bank1CRC.setStatus('mandatory')
rx085prgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085prgEEPROMByte.setStatus('mandatory')
rx085factoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085factoryCRC.setStatus('mandatory')
rx085calculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("factory", 1), ("calibration", 2), ("alarm", 3), ("tempComp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085calculateCRC.setStatus('mandatory')
rx085hourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085hourMeter.setStatus('mandatory')
rx085flashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085flashPrgCntA.setStatus('mandatory')
rx085flashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085flashPrgCntB.setStatus('mandatory')
rx085fwRev0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085fwRev0.setStatus('mandatory')
rx085fwRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rx085fwRev1.setStatus('mandatory')
trapRx085BX4ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4OpticalPower1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4OpticalPower2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4OpticalPower3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4OpticalPower4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4ModuleTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4FanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4Plus12CurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4Boot0Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4Boot1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4CalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4DefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4Mode1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4Mode2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4Mode3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4Mode4Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4Output1SwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4Output2SwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4Output3SwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4Output4SwitchedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4RX1StatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4RX2StatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4RX3StatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,27)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4RX4StatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,28)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4BackupCableAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,29)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4OptPwr1BadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,30)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4OptPwr2BadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,31)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4OptPwr3BadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,32)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapRx085BX4OptPwr4BadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 32) + (0,33)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2Rx085BX4-MIB", rx085enumFactoryDefault=rx085enumFactoryDefault, rx085labelSwModeSettingFour=rx085labelSwModeSettingFour, rx085valueBackupCable=rx085valueBackupCable, rx085uom12Volt=rx085uom12Volt, rx085majorHighOptPowerOne=rx085majorHighOptPowerOne, rx085enumSwModeThresholdTwo=rx085enumSwModeThresholdTwo, rx085minorLowOptPowerTwo=rx085minorLowOptPowerTwo, gx2Rx085BX4AnalogTable=gx2Rx085BX4AnalogTable, rx085stateFlagSwModeSettingFour=rx085stateFlagSwModeSettingFour, rx085minorHighModTemp=rx085minorHighModTemp, rx085uomOptPowerOne=rx085uomOptPowerOne, rx085valueOptSigOne=rx085valueOptSigOne, rx085valueBoot=rx085valueBoot, rx085minorHighOptPowerFour=rx085minorHighOptPowerFour, rx085valueModuleConfig=rx085valueModuleConfig, rx085minValueOptPowerThree=rx085minValueOptPowerThree, rx085labelOptSigThree=rx085labelOptSigThree, rx085valueOptSigFour=rx085valueOptSigFour, rx085labelAlarmDataCRC=rx085labelAlarmDataCRC, Float=Float, rx085majorHighOptPowerFour=rx085majorHighOptPowerFour, rx085valueAttnSettingFour=rx085valueAttnSettingFour, rx085stateflagOptSigOne=rx085stateflagOptSigOne, rx085fwRev1=rx085fwRev1, rx085stateFlagSwModeSettingOne=rx085stateFlagSwModeSettingOne, rx085enumSwModeThresholdThree=rx085enumSwModeThresholdThree, rx085valueModeThree=rx085valueModeThree, trapRx085BX4FactoryDataCRCAlarm=trapRx085BX4FactoryDataCRCAlarm, gx2Rx085BX4AnalogTableIndex=gx2Rx085BX4AnalogTableIndex, rx085valueSwModeSettingTwo=rx085valueSwModeSettingTwo, rx085labelWavelengthFour=rx085labelWavelengthFour, rx085minorHighOptPowerThree=rx085minorHighOptPowerThree, rx085labelAttnSettingFour=rx085labelAttnSettingFour, rx085enumRevertTime=rx085enumRevertTime, rx085stateFlagOptPowerFour=rx085stateFlagOptPowerFour, rx085labelWavelengthThree=rx085labelWavelengthThree, rx085majorLowOptPowerTwo=rx085majorLowOptPowerTwo, rx085enumSwModeSettingFour=rx085enumSwModeSettingFour, rx085currentValue12Volt=rx085currentValue12Volt, rx085flashPrgCntB=rx085flashPrgCntB, rx085labelModeThree=rx085labelModeThree, rx085stateflagOptSigTwo=rx085stateflagOptSigTwo, trapRx085BX4OpticalPower3Alarm=trapRx085BX4OpticalPower3Alarm, rx085valueWavelengthTwo=rx085valueWavelengthTwo, rx085valueAttnSettingOne=rx085valueAttnSettingOne, rx085enumModeThree=rx085enumModeThree, trapRx085BX4Mode4Alarm=trapRx085BX4Mode4Alarm, rx085labelSwModeSettingOne=rx085labelSwModeSettingOne, rx085labelOptPowerFour=rx085labelOptPowerFour, rx085stateFlagSwModeSettingThree=rx085stateFlagSwModeSettingThree, gx2Rx085BX4AnalogEntry=gx2Rx085BX4AnalogEntry, rx085valueWavelengthFour=rx085valueWavelengthFour, trapRx085BX4ModuleTemperatureAlarm=trapRx085BX4ModuleTemperatureAlarm, rx085minValue12Volt=rx085minValue12Volt, rx085stateFlagModeOne=rx085stateFlagModeOne, rx085stateflagFactoryDataCRC=rx085stateflagFactoryDataCRC, rx085minorHigh12Volt=rx085minorHigh12Volt, rx085enumModuleConfig=rx085enumModuleConfig, rx085valueHW=rx085valueHW, gx2Rx085BX4DigitalEntry=gx2Rx085BX4DigitalEntry, rx085valueFactoryDefault=rx085valueFactoryDefault, rx085labelCalibrationDataCRC=rx085labelCalibrationDataCRC, rx085majorHighOptPowerThree=rx085majorHighOptPowerThree, rx085labelFlash=rx085labelFlash, rx085stateFlagModuleConfig=rx085stateFlagModuleConfig, rx085enumAttnSettingOne=rx085enumAttnSettingOne, rx085stateFlagModeThree=rx085stateFlagModeThree, rx085stateFlagFanCurrent=rx085stateFlagFanCurrent, rx085stateFlagAttnSettingOne=rx085stateFlagAttnSettingOne, rx085minorLowOptPowerFour=rx085minorLowOptPowerFour, rx085valueOptSigThree=rx085valueOptSigThree, rx085stateFlagSwModeThresholdOne=rx085stateFlagSwModeThresholdOne, rx085enumModeTwo=rx085enumModeTwo, rx085labelFactoryDefault=rx085labelFactoryDefault, rx085labelSwModeThresholdThree=rx085labelSwModeThresholdThree, rx085stateFlagOptPowerOne=rx085stateFlagOptPowerOne, rx085enumModeOne=rx085enumModeOne, trapRx085BX4OptPwr3BadAlarm=trapRx085BX4OptPwr3BadAlarm, rx085labelOptPowerTwo=rx085labelOptPowerTwo, rx085labelModTemp=rx085labelModTemp, rx085minorHighOptPowerOne=rx085minorHighOptPowerOne, rx085labelAttnSettingTwo=rx085labelAttnSettingTwo, rx085valueModeTwo=rx085valueModeTwo, rx085factoryCRC=rx085factoryCRC, rx085valueFactoryDataCRC=rx085valueFactoryDataCRC, rx085enumWavelengthFour=rx085enumWavelengthFour, rx085alarmStateOptPowerThree=rx085alarmStateOptPowerThree, rx085enumSwModeSettingThree=rx085enumSwModeSettingThree, rx085stateflagAlarmDataCRC=rx085stateflagAlarmDataCRC, rx085majorLowOptPowerThree=rx085majorLowOptPowerThree, rx085stateFlagAttnSettingTwo=rx085stateFlagAttnSettingTwo, rx085majorLow12Volt=rx085majorLow12Volt, rx085enumWavelengthOne=rx085enumWavelengthOne, rx085enumSwModeThresholdFour=rx085enumSwModeThresholdFour, rx085stateflagBackupCable=rx085stateflagBackupCable, rx085enumAttnSettingTwo=rx085enumAttnSettingTwo, rx085valueSwModeThresholdOne=rx085valueSwModeThresholdOne, rx085majorLowOptPowerOne=rx085majorLowOptPowerOne, trapRx085BX4CalDataCRCAlarm=trapRx085BX4CalDataCRCAlarm, rx085bank0CRC=rx085bank0CRC, trapRx085BX4Output3SwitchedAlarm=trapRx085BX4Output3SwitchedAlarm, rx085labelSwModeThresholdTwo=rx085labelSwModeThresholdTwo, rx085currentValueOptPowerOne=rx085currentValueOptPowerOne, rx085stateflagCalibrationDataCRC=rx085stateflagCalibrationDataCRC, trapRx085BX4AlarmDataCRCAlarm=trapRx085BX4AlarmDataCRCAlarm, rx085alarmStateOptPowerOne=rx085alarmStateOptPowerOne, rx085maxValueOptPowerOne=rx085maxValueOptPowerOne, rx085minorHighOptPowerTwo=rx085minorHighOptPowerTwo, rx085maxValue12Volt=rx085maxValue12Volt, rx085valueAttnSettingTwo=rx085valueAttnSettingTwo, trapRx085BX4OpticalPower1Alarm=trapRx085BX4OpticalPower1Alarm, rx085enumSwModeSettingOne=rx085enumSwModeSettingOne, trapRx085BX4OptPwr1BadAlarm=trapRx085BX4OptPwr1BadAlarm, trapRx085BX4ConfigChangeInteger=trapRx085BX4ConfigChangeInteger, rx085valueTestPointSelect=rx085valueTestPointSelect, gx2Rx085BX4StatusEntry=gx2Rx085BX4StatusEntry, rx085stateFlag12Volt=rx085stateFlag12Volt, rx085valueAttnSettingThree=rx085valueAttnSettingThree, rx085currentValueOptPowerTwo=rx085currentValueOptPowerTwo, rx085uomOptPowerThree=rx085uomOptPowerThree, trapRx085BX4Output2SwitchedAlarm=trapRx085BX4Output2SwitchedAlarm, rx085stateFlagSwModeThresholdTwo=rx085stateFlagSwModeThresholdTwo, trapRx085BX4Output4SwitchedAlarm=trapRx085BX4Output4SwitchedAlarm, trapRx085BX4Plus12CurrentAlarm=trapRx085BX4Plus12CurrentAlarm, trapRx085BX4OptPwr4BadAlarm=trapRx085BX4OptPwr4BadAlarm, rx085alarmStateModTemp=rx085alarmStateModTemp, rx085labelSwModeThresholdFour=rx085labelSwModeThresholdFour, gx2Rx085BX4FactoryEntry=gx2Rx085BX4FactoryEntry, rx085stateFlagModeFour=rx085stateFlagModeFour, rx085stateflagHW=rx085stateflagHW, trapRx085BX4OpticalPower2Alarm=trapRx085BX4OpticalPower2Alarm, rx085enumModeFour=rx085enumModeFour, rx085minValueModTemp=rx085minValueModTemp, gx2Rx085BX4StatusTableIndex=gx2Rx085BX4StatusTableIndex, rx085majorHigh12Volt=rx085majorHigh12Volt, rx085stateFlagModTemp=rx085stateFlagModTemp, rx085enumAttnSettingThree=rx085enumAttnSettingThree, rx085currentValueFanCurrent=rx085currentValueFanCurrent, rx085labelBackupCable=rx085labelBackupCable, rx085majorLowOptPowerFour=rx085majorLowOptPowerFour, rx085labelRevertTime=rx085labelRevertTime, rx085currentValueModTemp=rx085currentValueModTemp, rx085minValueOptPowerOne=rx085minValueOptPowerOne, rx085stateflagBoot=rx085stateflagBoot, trapRx085BX4DefaultAlarm=trapRx085BX4DefaultAlarm, gx2Rx085BX4DigitalTableIndex=gx2Rx085BX4DigitalTableIndex, rx085enumWavelengthTwo=rx085enumWavelengthTwo, rx085minorLowOptPowerOne=rx085minorLowOptPowerOne, rx085minorLow12Volt=rx085minorLow12Volt, rx085labelOptSigOne=rx085labelOptSigOne, rx085fwRev0=rx085fwRev0, rx085labelOptSigFour=rx085labelOptSigFour, rx085labelAttnSettingOne=rx085labelAttnSettingOne, rx085minorLowModTemp=rx085minorLowModTemp, rx085uomOptPowerFour=rx085uomOptPowerFour, rx085alarmStateOptPowerFour=rx085alarmStateOptPowerFour, rx085maxValueModTemp=rx085maxValueModTemp, rx085minorLowFanCurrent=rx085minorLowFanCurrent, rx085bootStatusByte=rx085bootStatusByte, rx085enumAttnSettingFour=rx085enumAttnSettingFour, rx085labelSwModeThresholdOne=rx085labelSwModeThresholdOne, rx085stateFlagRevertTime=rx085stateFlagRevertTime, gx2Rx085BX4StatusTable=gx2Rx085BX4StatusTable, rx085alarmState12Volt=rx085alarmState12Volt, trapRx085BX4Boot0Alarm=trapRx085BX4Boot0Alarm, rx085valueSwModeThresholdTwo=rx085valueSwModeThresholdTwo, rx085labelOptPowerThree=rx085labelOptPowerThree, rx085valueCalibrationDataCRC=rx085valueCalibrationDataCRC, trapRx085BX4Mode3Alarm=trapRx085BX4Mode3Alarm, rx085majorLowModTemp=rx085majorLowModTemp, rx085labelModeOne=rx085labelModeOne, rx085bank1CRC=rx085bank1CRC, rx085valueWavelengthThree=rx085valueWavelengthThree, rx085flashPrgCntA=rx085flashPrgCntA, trapRx085BX4RX1StatusAlarm=trapRx085BX4RX1StatusAlarm, rx085stateFlagWavelengthThree=rx085stateFlagWavelengthThree, rx085minValueOptPowerTwo=rx085minValueOptPowerTwo, rx085labelFactoryDataCRC=rx085labelFactoryDataCRC, rx085labelModeTwo=rx085labelModeTwo, rx085valueModeOne=rx085valueModeOne, rx085stateFlagTestPointSelect=rx085stateFlagTestPointSelect, rx085alarmStateOptPowerTwo=rx085alarmStateOptPowerTwo, rx085minValueOptPowerFour=rx085minValueOptPowerFour, rx085valueOptSigTwo=rx085valueOptSigTwo, rx085labelModuleConfig=rx085labelModuleConfig, rx085currentValueOptPowerThree=rx085currentValueOptPowerThree, rx085labelWavelengthOne=rx085labelWavelengthOne, rx085maxValueOptPowerTwo=rx085maxValueOptPowerTwo, rx085stateFlagSwModeThresholdThree=rx085stateFlagSwModeThresholdThree, rx085labelOptPowerOne=rx085labelOptPowerOne, rx085stateflagFlash=rx085stateflagFlash, gx2Rx085BX4FactoryTableIndex=gx2Rx085BX4FactoryTableIndex, trapRx085BX4FanCurrentAlarm=trapRx085BX4FanCurrentAlarm, gx2Rx085BX4FactoryTable=gx2Rx085BX4FactoryTable, rx085minorHighFanCurrent=rx085minorHighFanCurrent, rx085enumSwModeSettingTwo=rx085enumSwModeSettingTwo, rx085valueSwModeThresholdThree=rx085valueSwModeThresholdThree, rx085stateFlagAttnSettingFour=rx085stateFlagAttnSettingFour, rx085valueSwModeSettingFour=rx085valueSwModeSettingFour, rx085valueSwModeThresholdFour=rx085valueSwModeThresholdFour, rx085valueRevertTime=rx085valueRevertTime, rx085valueFlash=rx085valueFlash, rx085majorLowFanCurrent=rx085majorLowFanCurrent, rx085hourMeter=rx085hourMeter, trapRx085BX4Mode1Alarm=trapRx085BX4Mode1Alarm, rx085stateflagOptSigThree=rx085stateflagOptSigThree, trapRx085BX4RX2StatusAlarm=trapRx085BX4RX2StatusAlarm, rx085maxValueOptPowerFour=rx085maxValueOptPowerFour, rx085valueAlarmDataCRC=rx085valueAlarmDataCRC, trapRx085BX4OptPwr2BadAlarm=trapRx085BX4OptPwr2BadAlarm, rx085valueSwModeSettingThree=rx085valueSwModeSettingThree, rx085labelTestPointSelect=rx085labelTestPointSelect, rx085stateFlagSwModeSettingTwo=rx085stateFlagSwModeSettingTwo, rx085currentValueOptPowerFour=rx085currentValueOptPowerFour, rx085stateFlagModeTwo=rx085stateFlagModeTwo, trapRx085BX4OpticalPower4Alarm=trapRx085BX4OpticalPower4Alarm, U32Data=U32Data, rx085labelSwModeSettingTwo=rx085labelSwModeSettingTwo, rx085majorHighModTemp=rx085majorHighModTemp, rx085maxValueFanCurrent=rx085maxValueFanCurrent, rx085labelHW=rx085labelHW, trapRx085BX4RX4StatusAlarm=trapRx085BX4RX4StatusAlarm, rx085enumWavelengthThree=rx085enumWavelengthThree, rx085calculateCRC=rx085calculateCRC, rx085labelBoot=rx085labelBoot, trapRx085BX4Mode2Alarm=trapRx085BX4Mode2Alarm, rx085valueModeFour=rx085valueModeFour, rx085stateflagOptSigFour=rx085stateflagOptSigFour, rx085labelWavelengthTwo=rx085labelWavelengthTwo, trapRx085BX4ConfigChangeDisplayString=trapRx085BX4ConfigChangeDisplayString, rx085uomFanCurrent=rx085uomFanCurrent, rx085stateFlagSwModeThresholdFour=rx085stateFlagSwModeThresholdFour, trapRx085BX4RX3StatusAlarm=trapRx085BX4RX3StatusAlarm, rx085labelOptSigTwo=rx085labelOptSigTwo, trapRx085BX4BackupCableAlarm=trapRx085BX4BackupCableAlarm, rx085stateFlagOptPowerTwo=rx085stateFlagOptPowerTwo, rx085alarmStateFanCurrent=rx085alarmStateFanCurrent, rx085valueSwModeSettingOne=rx085valueSwModeSettingOne, rx085stateFlagAttnSettingThree=rx085stateFlagAttnSettingThree, rx085enumTestPointSelect=rx085enumTestPointSelect, rx085prgEEPROMByte=rx085prgEEPROMByte, rx085stateFlagWavelengthTwo=rx085stateFlagWavelengthTwo, rx085labelModeFour=rx085labelModeFour, rx085labelAttnSettingThree=rx085labelAttnSettingThree, rx085uomModTemp=rx085uomModTemp, rx085stateFlagOptPowerThree=rx085stateFlagOptPowerThree, rx085uomOptPowerTwo=rx085uomOptPowerTwo, rx085bootControlByte=rx085bootControlByte, trapRx085BX4FlashAlarm=trapRx085BX4FlashAlarm, rx085majorHighFanCurrent=rx085majorHighFanCurrent, rx085labelSwModeSettingThree=rx085labelSwModeSettingThree, rx085stateFlagFactoryDefault=rx085stateFlagFactoryDefault, gx2Rx085BX4DigitalTable=gx2Rx085BX4DigitalTable, rx085stateFlagWavelengthFour=rx085stateFlagWavelengthFour)
mibBuilder.exportSymbols("OMNI-gx2Rx085BX4-MIB", trapRx085BX4Output1SwitchedAlarm=trapRx085BX4Output1SwitchedAlarm, rx085maxValueOptPowerThree=rx085maxValueOptPowerThree, trapRx085BX4Boot1Alarm=trapRx085BX4Boot1Alarm, rx085minorLowOptPowerThree=rx085minorLowOptPowerThree, gx2Rx085BX4Descriptor=gx2Rx085BX4Descriptor, rx085labelFanCurrent=rx085labelFanCurrent, rx085valueWavelengthOne=rx085valueWavelengthOne, rx085enumSwModeThresholdOne=rx085enumSwModeThresholdOne, rx085stateFlagWavelengthOne=rx085stateFlagWavelengthOne, rx085majorHighOptPowerTwo=rx085majorHighOptPowerTwo, rx085label12Volt=rx085label12Volt, rx085minValueFanCurrent=rx085minValueFanCurrent)
