#
# PySNMP MIB module CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:26:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, TimeTicks, MibIdentifier, ObjectIdentity, ModuleIdentity, Gauge32, Integer32, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "TimeTicks", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Gauge32", "Integer32", "Counter32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xylanChassis, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanChassis")
chasInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 1, 1))
chasPhysical = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 1, 2))
chasController = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 1, 3))
chasPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 1, 4))
chasEnvmnt = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 1, 5))
chasStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 1, 6))
chasAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 1, 7))
chasFanTray = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 1, 8))
chasDateAndTime = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 1, 9))
class XylanChasType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))
    namedValues = NamedValues(("invalid", 1), ("other", 2), ("omni5", 3), ("omni9", 4), ("pizza", 5), ("micro", 6), ("omni5cell", 7), ("omni9cell", 8), ("omni5e", 9), ("omni9e", 10), ("pizport", 11), ("omni5wx", 12), ("omni9wx", 13), ("omni3wx", 14), ("os5024", 15), ("os4016", 16), ("os3032", 17), ("os2032", 18), ("os2016", 19), ("os1032", 20), ("os6032", 21), ("os5032", 22), ("xframe5", 23), ("xframe9", 24), ("xframe3", 25), ("os4024", 26), ("omnicore13", 27), ("oa408", 28), ("oa512", 29))

class XylanModuleSubunit(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("base", 1), ("hsm1", 2), ("hsm2", 3), ("csm3", 4))

class XylanModuleType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 252, 253, 254, 251, 250, 256, 257, 258, 259), SingleValueConstraint(260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 276, 279, 275, 291, 292, 293))
    namedValues = NamedValues(("unknown", 1), ("invalid", 2), ("empty", 3), ("hsm", 4), ("mpm", 5), ("eni8", 6), ("eni16", 7), ("tni", 8), ("fddi", 9), ("cddi", 10), ("x100eni", 11), ("atm", 12), ("eni12", 13), ("eni6", 14), ("mpm2", 15), ("atmds3", 16), ("fddis", 17), ("atms", 18), ("atmutp", 19), ("esm8f", 20), ("esm12t", 21), ("tokf", 22), ("atm2m", 23), ("atm2s", 24), ("wsm", 25), ("wsmbri", 26), ("hsm2", 27), ("pizza", 28), ("tsmcd6", 29), ("csm", 30), ("res31", 31), ("hre", 32), ("e10m", 33), ("atme3", 34), ("e100fsfd", 35), ("e100fmfd", 36), ("e100txfd", 37), ("mpm1g", 38), ("pizprt", 39), ("esm32", 40), ("fcsm", 41), ("csmh", 42), ("csm12s", 43), ("csma12", 44), ("csma24", 45), ("p10U", 46), ("asm2", 47), ("puplink", 48), ("res49", 49), ("res50", 50), ("fddisc2", 51), ("atmce2s2t", 52), ("atmce2s2e", 53), ("atmds3ux", 54), ("atme3ux", 55), ("atmoc3ux", 56), ("atmt1ux", 57), ("atme1ux", 58), ("wsm2s", 59), ("wsm2snc", 60), ("wsmprit1", 61), ("wsmprie1", 62), ("csm12l", 63), ("meth12", 64), ("meth32", 65), ("e1008pm", 66), ("e1008ps", 67), ("hsm3", 68), ("csmu", 69), ("e12f", 70), ("e12o", 71), ("csm6m2s", 72), ("atmsux", 73), ("atm2sux", 74), ("atm2mux", 75), ("atmuux", 76), ("atmshfs", 77), ("atm2rm", 78), ("atm2rs", 79), ("atmsrm", 80), ("atmsrs", 81), ("fesmh2m", 82), ("fesmh2s", 83), ("fesm4", 84), ("csm8c", 85), ("atm2sl", 86), ("csmfsl", 87), ("csmsfsl", 88), ("csm12fsl", 89), ("pme8", 90), ("pme32", 91), ("p5024", 92), ("p4016", 93), ("p3032", 94), ("p3032X", 95), ("p2032", 96), ("p2016", 97), ("p1032", 98), ("p1032F", 99), ("fcsm622", 100), ("cab155", 101), ("cab155fsl", 102), ("cab155c", 103), ("cab155s", 104), ("cabds1", 105), ("cabds3", 106), ("cabe1", 107), ("cabe3", 108), ("cabcee1", 109), ("cabcet1", 110), ("esxfm24", 111), ("tsmcd16", 112), ("tsmcd32", 113), ("tsm1g", 114), ("p1032cf", 115), ("cab4imat1", 116), ("cab4imae1", 117), ("cab8imat1", 118), ("cab8imae1", 119), ("mpmc", 120), ("mpmf", 121), ("mpmos", 122), ("atm2622s", 123), ("atm2622m", 124), ("atm2622sl", 125), ("ptsmcd16", 126), ("ptsmcd32", 127), ("atm2622rfsh", 128), ("mt12", 129), ("esmf8", 130), ("esmf16", 131), ("atm155fshe", 132), ("atm155fsh", 133), ("pme32r", 134), ("pme2", 135), ("gsmfm", 136), ("gsmfms", 137), ("gsmfmh", 138), ("cabt12m2", 139), ("cabt12m1", 140), ("cabt12s2", 141), ("cabt12s1", 142), ("cabt12l2", 143), ("cabt12l1", 144), ("cabt12c2", 145), ("cabt12c1", 146), ("cabt12ds32", 147), ("cabt12ds31", 148), ("cabt12e32", 149), ("cabt12e31", 150), ("cabcm", 151), ("cabce4sp", 152), ("esxc12", 153), ("esxc16", 154), ("esxc32", 155), ("esxf16", 156), ("gsxs2", 157), ("gsxs4", 158), ("gsxm2", 159), ("gsxm4", 160), ("gsxl2", 161), ("gsxl4", 162), ("tsxcd16", 163), ("tsxcd32", 164), ("etel24", 165), ("atm2155mu", 166), ("atm2155su", 167), ("atm2155fu", 168), ("atm2ds3u", 169), ("atm2e3u", 170), ("atm2t1u", 171), ("atm2e1u", 172), ("atm2utpu", 173), ("pizza6032", 174), ("pizza5032", 175), ("gsmx1", 176), ("esxfm12", 177), ("esxfm24a", 178), ("hsx", 179), ("pizza6032x", 180), ("pmfe32r", 181), ("os4024g", 182), ("os4024f", 183), ("os4024cf", 184), ("os4024c", 185), ("pmfe24", 186), ("gsmfm2", 187), ("gsmfs2", 188), ("esm100c32", 189), ("wsxm013", 190), ("asxrfm622", 191), ("asxrfs622", 192), ("atm2imat1u", 193), ("atm2imae1u", 194), ("atmcest12", 195), ("atmcese12", 196), ("esx100fm12", 197), ("esx100fs12", 198), ("csma122", 199), ("pfe", 200), ("osgsmfm2", 201), ("osgsmfs2", 202), ("atm2ds3", 203), ("atm2e3", 204), ("cop", 205), ("vsd", 206), ("mpo", 207), ("mpm3", 208), ("atm2155rfmce", 209), ("atm2ceds3x", 210), ("atm2155fmx", 211), ("atm2155fsx", 212), ("atm2155flx", 213), ("atm2155rsx", 214), ("atm2155rlx", 215), ("gso6", 216), ("os6000", 217), ("os6032e", 218), ("oa408", 219), ("oa512", 220), ("oa512u", 221), ("ocmbpc", 222), ("ocd12cmid", 223), ("hsxh", 224), ("oapmfe8", 225), ("oa4cet1", 226), ("oa4cee1", 227), ("oa408ce", 228), ("oa5xx", 229), ("oa5xxesm", 230), ("oa5xxwan", 231), ("oa5xxser", 232), ("oa5xxisdnst", 233), ("oa5xxisdnu", 234), ("oa5xxft1e1", 235), ("oa5xxvoip", 236), ("cabfrds18", 237), ("cabfre18", 238), ("cabfrsp4", 239), ("wsxds32", 240), ("asxu", 241), ("asxab622fm2", 242), ("asxab622fs2", 243), ("cabtds3", 244), ("cabte3", 245), ("mpx3", 246), ("kesxfm16", 252), ("kesxfs16", 253), ("kesxc32", 254), ("kgsxm2", 251), ("vsdplus", 250), ("csou", 256), ("ocab155c", 257), ("ocab155fm", 258), ("ocab155fs", 259)) + NamedValues(("ocab155fsh", 260), ("ocab622fm", 261), ("ocab622fs", 262), ("ocab622fsh", 263), ("ocab2488fs", 264), ("ocab2488fsh", 265), ("mpoatmdc", 266), ("hrevx", 267), ("vsa", 268), ("asxelsy", 269), ("asxasmk622", 270), ("kgsxs2", 272), ("kgsxsh2", 273), ("modTypeVsd128MB12CH", 274), ("modTypeVsd128MB24CH", 280), ("modTypeVsd128MB36CH", 281), ("modTypeVsd128MB48CH", 282), ("modTypeVsd128MB60CH", 283), ("modTypeVsb", 276), ("modTypeVsaFxs", 279), ("modTypeVsaFxo", 275), ("modTypeVsaFxsFxs", 291), ("modTypeVsaFxsFxo", 292), ("modTypeVsaFxoFxo", 293))

class XylanMPMStateType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("invalid", 2), ("primary", 3), ("secondary", 4))

class XylanPSStateType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("notPresent", 2), ("okay", 3), ("bad", 4))

class XylanTempStateType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("notPresent", 2), ("overThreshold", 3), ("underThreshold", 4))

class XylanImageSyncStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("insync", 1), ("newer", 2), ("older", 3), ("unknown", 4), ("syncing", 5))

class XylanConfigSyncStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("insync", 1), ("newer", 2), ("older", 3), ("unknown", 4), ("syncing", 5), ("bootvalues", 6))

class XylanConfigSyncEnable(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class XylanFFSFileAction(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("writingTo", 2), ("deletingFrom", 3), ("readingFrom", 4))

class XylanFFSFileActionStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("inProgress", 2), ("successfull", 3), ("failed", 4))

class XylanSerialPortSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("invalid", 2), ("b1200", 3), ("b9600", 4), ("b19200", 5), ("b38400", 6))

class XylanSerialPortParity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("none", 2), ("even", 3), ("odd", 4))

class XylanSerialPortMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("down", 1), ("console", 2), ("slip", 3))

class XylanFTStateType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("notPresent", 2), ("okay", 3), ("bad", 4))

chasMake = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasMake.setStatus('mandatory')
chasType = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 2), XylanChasType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasType.setStatus('mandatory')
chasDescription = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasDescription.setStatus('mandatory')
chasPhysicalChanges = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPhysicalChanges.setStatus('mandatory')
chasLogicalChanges = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasLogicalChanges.setStatus('mandatory')
chasNoOfResets = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasNoOfResets.setStatus('mandatory')
chasBaseMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasBaseMacAddress.setStatus('mandatory')
chasFreeSlots = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFreeSlots.setStatus('mandatory')
chasIpAddrToPing = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasIpAddrToPing.setStatus('mandatory')
chasDupMacSupport = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasDupMacSupport.setStatus('mandatory')
chasNewDupMacSupport = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasNewDupMacSupport.setStatus('mandatory')
chasSonetMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasSonetMonitoring.setStatus('mandatory')
chasVbusMode = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasVbusMode.setStatus('mandatory')
chasCurrentDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 9, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasCurrentDateAndTime.setStatus('mandatory')
chasTimezoneName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasTimezoneName.setStatus('mandatory')
chasTimezoneOffset = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-780, 720))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasTimezoneOffset.setStatus('mandatory')
chasTimezoneDstAdmin = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasTimezoneDstAdmin.setStatus('mandatory')
chasTimezoneDst = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 9, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasTimezoneDst.setStatus('mandatory')
chasModuleTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1), )
if mibBuilder.loadTexts: chasModuleTable.setStatus('mandatory')
chasModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1), ).setIndexNames((0, "CHASSIS-MIB", "chasModuleSlot"), (0, "CHASSIS-MIB", "chasModuleSubUnit"))
if mibBuilder.loadTexts: chasModuleEntry.setStatus('mandatory')
chasModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleSlot.setStatus('mandatory')
chasModuleSubUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 2), XylanModuleSubunit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleSubUnit.setStatus('mandatory')
chasModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 3), XylanModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleType.setStatus('mandatory')
chasModulePartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModulePartNum.setStatus('mandatory')
chasModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasModuleDescription.setStatus('mandatory')
chasModuleHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleHwRevision.setStatus('mandatory')
chasModuleHwModLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleHwModLevel.setStatus('mandatory')
chasModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleSerialNumber.setStatus('mandatory')
chasModuleMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleMfgDate.setStatus('mandatory')
chasModuleFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleFwVersion.setStatus('mandatory')
chasModuleBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleBaseMacAddress.setStatus('mandatory')
chasModuleTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleTimeStamp.setStatus('mandatory')
chasModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("enable", 3), ("disable", 4), ("reset", 5), ("load", 6), ("test", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasModuleAdminStatus.setStatus('mandatory')
chasModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("operational", 3), ("disabled", 4), ("resetInProgress", 5), ("loadInProgress", 6), ("testing", 7), ("warning", 8), ("nonFatalError", 9), ("fatalError", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleOperStatus.setStatus('mandatory')
chasModuleLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleLedStatus.setStatus('mandatory')
chasModuleVbusTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleVbusTxDiscards.setStatus('mandatory')
chasModuleVbusRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleVbusRxDiscards.setStatus('mandatory')
chasModuleLedStatusExtend = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 2, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasModuleLedStatusExtend.setStatus('mandatory')
chasControlTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1), )
if mibBuilder.loadTexts: chasControlTable.setStatus('mandatory')
chasControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1), ).setIndexNames((0, "CHASSIS-MIB", "chasControlSlot"))
if mibBuilder.loadTexts: chasControlEntry.setStatus('mandatory')
chasControlSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlSlot.setStatus('mandatory')
chasControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 2), XylanMPMStateType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlState.setStatus('mandatory')
chasControlDCEPortRate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 3), XylanSerialPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDCEPortRate.setStatus('mandatory')
chasControlDCEWordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDCEWordSize.setStatus('mandatory')
chasControlDCEStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDCEStopBits.setStatus('mandatory')
chasControlDCEParity = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 6), XylanSerialPortParity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDCEParity.setStatus('mandatory')
chasControlDTEPortRate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 7), XylanSerialPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDTEPortRate.setStatus('mandatory')
chasControlDTEWordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDTEWordSize.setStatus('mandatory')
chasControlDTEStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDTEStopBits.setStatus('mandatory')
chasControlDTEParity = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 10), XylanSerialPortParity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlDTEParity.setStatus('mandatory')
chasControlIPAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlIPAdd.setStatus('mandatory')
chasControlBootCode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlBootCode.setStatus('mandatory')
chasControlFreeFFS = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlFreeFFS.setStatus('mandatory')
chasControlFreeBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlFreeBuffers.setStatus('mandatory')
chasControlBufferUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlBufferUtilization.setStatus('mandatory')
chasControlCPUUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlCPUUtilization.setStatus('mandatory')
chasControlImageSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlImageSuffix.setStatus('mandatory')
chasControlImageSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 18), XylanImageSyncStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlImageSyncStatus.setStatus('mandatory')
chasControlConfigSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 19), XylanConfigSyncStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlConfigSyncStatus.setStatus('mandatory')
chasControlConfigSyncEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 20), XylanConfigSyncEnable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlConfigSyncEnable.setStatus('mandatory')
chasControlDCEPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 21), XylanSerialPortMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlDCEPortMode.setStatus('mandatory')
chasControlDTEPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 22), XylanSerialPortMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlDTEPortMode.setStatus('mandatory')
chasControlEthPortIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlEthPortIPAddr.setStatus('mandatory')
chasControlEthPortSubMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlEthPortSubMask.setStatus('mandatory')
chasControlEthPortBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlEthPortBcast.setStatus('mandatory')
chasControlEthPortGateWay = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlEthPortGateWay.setStatus('mandatory')
chasControlEthPortRipMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("silent", 1), ("deaf", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlEthPortRipMode.setStatus('mandatory')
chasControlEthPortRemoteHost = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlEthPortRemoteHost.setStatus('mandatory')
chasControlEthPortRemoteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 1, 1, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlEthPortRemoteMask.setStatus('mandatory')
chasControlFFSTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 2), )
if mibBuilder.loadTexts: chasControlFFSTable.setStatus('mandatory')
chasControlFFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 2, 1), ).setIndexNames((0, "CHASSIS-MIB", "chasControlFFSFileSlot"), (0, "CHASSIS-MIB", "chasControlFFSFileNameCks"))
if mibBuilder.loadTexts: chasControlFFSEntry.setStatus('mandatory')
chasControlFFSFileSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlFFSFileSlot.setStatus('mandatory')
chasControlFFSFileNameCks = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlFFSFileNameCks.setStatus('mandatory')
chasControlFFSFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlFFSFileName.setStatus('mandatory')
chasControlFFSFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlFFSFileSize.setStatus('mandatory')
chasControlFFSFileDate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlFFSFileDate.setStatus('mandatory')
chasControlFFSFileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 2, 1, 6), XylanFFSFileAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasControlFFSFileAction.setStatus('mandatory')
chasControlFFSActionStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 3))
chasControlLastFFSAction = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 3, 1), XylanFFSFileAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlLastFFSAction.setStatus('mandatory')
chasControlLastFFSActionSlot = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlLastFFSActionSlot.setStatus('mandatory')
chasControlLastFFSActionFileName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlLastFFSActionFileName.setStatus('mandatory')
chasControlLastFFSActionDate = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 3, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlLastFFSActionDate.setStatus('mandatory')
chasControlLastFFSActionSource = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 3, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlLastFFSActionSource.setStatus('mandatory')
chasControlLastFFSActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 3, 3, 6), XylanFFSFileActionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasControlLastFFSActionStatus.setStatus('mandatory')
chasPowerSupply1State = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 4, 1), XylanPSStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSupply1State.setStatus('mandatory')
chasPowerSupply2State = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 4, 2), XylanPSStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasPowerSupply2State.setStatus('mandatory')
chasEnvrmnt1TempRange1 = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 5, 1), XylanTempStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEnvrmnt1TempRange1.setStatus('mandatory')
chasEnvrmnt1TempRange2 = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 5, 2), XylanTempStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEnvrmnt1TempRange2.setStatus('mandatory')
chasEnvrmnt2TempRange1 = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 5, 3), XylanTempStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEnvrmnt2TempRange1.setStatus('mandatory')
chasEnvrmnt2TempRange2 = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 5, 4), XylanTempStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasEnvrmnt2TempRange2.setStatus('mandatory')
chasXylanOpaque = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(252, 252)).setFixedLength(252)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasXylanOpaque.setStatus('mandatory')
class XylanModPortTypes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))
    namedValues = NamedValues(("unknown", 1), ("invalid", 2), ("empty", 3), ("serial", 4), ("ethutp", 5), ("xmpt6", 6), ("ethaui", 7), ("ethbnc", 8), ("ethfiorl", 9), ("tok", 10), ("xmpt11", 11), ("fsas", 12), ("fdas", 13), ("xmpt14", 14), ("cdas", 15), ("xmpt16", 16), ("atm", 17), ("oc12", 18), ("xmpt19", 19), ("xmpt20", 20), ("tokfbr", 21), ("irp", 22), ("fdxaui", 23), ("fdxaui2", 24), ("t1", 25), ("e1", 26), ("e3", 27), ("usp", 28), ("isdnbri", 29), ("e100baset", 30), ("atmds1", 31), ("tok100", 32), ("e100basef", 33), ("egigfm", 34), ("egigfms", 35), ("egigfmh", 36))

chasXylanCompaq = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(310, 310)).setFixedLength(310)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasXylanCompaq.setStatus('mandatory')
chasXylanPollData = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(388, 388)).setFixedLength(388)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasXylanPollData.setStatus('mandatory')
chasAccountCdrCount = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAccountCdrCount.setStatus('mandatory')
chasAccountMethodInUse = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("wire", 2), ("disk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAccountMethodInUse.setStatus('mandatory')
chasAccountDeviceInUse = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAccountDeviceInUse.setStatus('mandatory')
chasAccountMaxCnxInUse = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAccountMaxCnxInUse.setStatus('mandatory')
chasAccountCdrNext = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAccountCdrNext.setStatus('mandatory')
chasAccountFileCount = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAccountFileCount.setStatus('mandatory')
chasAccountPollCycle = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("waiting", 1), ("polling", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAccountPollCycle.setStatus('mandatory')
chasAccountConnectState = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unused", 0), ("closed", 1), ("open", 2), ("openHold", 3), ("openAlternateHold", 4), ("openAlternate", 5), ("closeHold", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAccountConnectState.setStatus('mandatory')
chasAccountMethod = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("wire", 2), ("disk", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountMethod.setStatus('mandatory')
chasAccountDevicePrimary = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountDevicePrimary.setStatus('mandatory')
chasAccountDeviceSecondary = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountDeviceSecondary.setStatus('mandatory')
chasAccountDevicePort = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountDevicePort.setStatus('mandatory')
chasAccountPeriods = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountPeriods.setStatus('mandatory')
chasAccountInterval = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 12, 48))).clone(namedValues=NamedValues(("hourly", 4), ("two-hours", 8), ("three-hours", 12), ("twice-daily", 48)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountInterval.setStatus('mandatory')
chasAccountChargedServices = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountChargedServices.setStatus('mandatory')
chasAccountMaxCnx = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountMaxCnx.setStatus('mandatory')
chasAccountFillingLevel = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasAccountFillingLevel.setStatus('mandatory')
chasAccountThreshold1 = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountThreshold1.setStatus('mandatory')
chasAccountThreshold2 = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountThreshold2.setStatus('mandatory')
chasAccountThreshold3 = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 95))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountThreshold3.setStatus('mandatory')
chasAccountTcpWriteTimer = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountTcpWriteTimer.setStatus('mandatory')
chasAccountHoldDownTimer = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountHoldDownTimer.setStatus('mandatory')
chasAccountFileSize = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountFileSize.setStatus('mandatory')
chasAccountCongStrategy = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acceptCalls", 1), ("refuseCalls", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountCongStrategy.setStatus('mandatory')
chasAccountFileCountThreshold = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountFileCountThreshold.setStatus('mandatory')
chasAccountName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: chasAccountName.setStatus('mandatory')
chasAccountMake = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountMake.setStatus('mandatory')
chasAccountSwitch = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 7, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chasAccountSwitch.setStatus('mandatory')
chasFanTray1State = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 8, 1), XylanFTStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFanTray1State.setStatus('mandatory')
chasFanTray2State = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 1, 8, 2), XylanFTStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasFanTray2State.setStatus('mandatory')
mibBuilder.exportSymbols("CHASSIS-MIB", chasAccountDevicePrimary=chasAccountDevicePrimary, chasAccountMethodInUse=chasAccountMethodInUse, chasModuleEntry=chasModuleEntry, chasControlDCEWordSize=chasControlDCEWordSize, chasEnvrmnt1TempRange2=chasEnvrmnt1TempRange2, chasControlSlot=chasControlSlot, chasAccountMaxCnx=chasAccountMaxCnx, chasControlLastFFSActionSource=chasControlLastFFSActionSource, chasAccountDeviceSecondary=chasAccountDeviceSecondary, chasAccountConnectState=chasAccountConnectState, chasControlDCEPortMode=chasControlDCEPortMode, chasControlEthPortGateWay=chasControlEthPortGateWay, chasAccountFileCount=chasAccountFileCount, XylanConfigSyncEnable=XylanConfigSyncEnable, chasAccountInterval=chasAccountInterval, chasControlDCEParity=chasControlDCEParity, chasModulePartNum=chasModulePartNum, chasPowerSupply=chasPowerSupply, chasControlDTEStopBits=chasControlDTEStopBits, chasAccountMethod=chasAccountMethod, chasAccountDevicePort=chasAccountDevicePort, XylanSerialPortParity=XylanSerialPortParity, XylanPSStateType=XylanPSStateType, chasControlLastFFSAction=chasControlLastFFSAction, chasControlDTEWordSize=chasControlDTEWordSize, chasAccountMake=chasAccountMake, chasNoOfResets=chasNoOfResets, chasModuleTable=chasModuleTable, chasAccountThreshold2=chasAccountThreshold2, chasFanTray=chasFanTray, XylanChasType=XylanChasType, chasControlDTEPortRate=chasControlDTEPortRate, XylanMPMStateType=XylanMPMStateType, chasModuleType=chasModuleType, chasTimezoneDstAdmin=chasTimezoneDstAdmin, chasControlTable=chasControlTable, chasAccountCdrNext=chasAccountCdrNext, chasAccountThreshold3=chasAccountThreshold3, chasModuleFwVersion=chasModuleFwVersion, chasControlLastFFSActionFileName=chasControlLastFFSActionFileName, chasModuleTimeStamp=chasModuleTimeStamp, chasAccountHoldDownTimer=chasAccountHoldDownTimer, chasControlDTEParity=chasControlDTEParity, XylanTempStateType=XylanTempStateType, chasControlImageSyncStatus=chasControlImageSyncStatus, chasControlState=chasControlState, chasControlFFSFileSlot=chasControlFFSFileSlot, chasControlFreeBuffers=chasControlFreeBuffers, chasModuleSerialNumber=chasModuleSerialNumber, chasAccountName=chasAccountName, chasControlFFSFileNameCks=chasControlFFSFileNameCks, chasControlDCEPortRate=chasControlDCEPortRate, chasXylanOpaque=chasXylanOpaque, XylanModuleType=XylanModuleType, chasAccountFileCountThreshold=chasAccountFileCountThreshold, chasAccountPeriods=chasAccountPeriods, chasControlLastFFSActionSlot=chasControlLastFFSActionSlot, chasAccountFileSize=chasAccountFileSize, chasTimezoneName=chasTimezoneName, chasDescription=chasDescription, XylanSerialPortMode=XylanSerialPortMode, chasFanTray1State=chasFanTray1State, chasControlFFSFileDate=chasControlFFSFileDate, chasControlLastFFSActionDate=chasControlLastFFSActionDate, chasPhysicalChanges=chasPhysicalChanges, chasEnvrmnt1TempRange1=chasEnvrmnt1TempRange1, chasAccountMaxCnxInUse=chasAccountMaxCnxInUse, chasTimezoneOffset=chasTimezoneOffset, chasControlCPUUtilization=chasControlCPUUtilization, chasFreeSlots=chasFreeSlots, chasAccountDeviceInUse=chasAccountDeviceInUse, chasControlFFSFileAction=chasControlFFSFileAction, chasAccountSwitch=chasAccountSwitch, chasAccountChargedServices=chasAccountChargedServices, chasModuleSlot=chasModuleSlot, chasModuleSubUnit=chasModuleSubUnit, chasCurrentDateAndTime=chasCurrentDateAndTime, chasTimezoneDst=chasTimezoneDst, chasInfo=chasInfo, chasFanTray2State=chasFanTray2State, chasIpAddrToPing=chasIpAddrToPing, chasVbusMode=chasVbusMode, chasNewDupMacSupport=chasNewDupMacSupport, chasDupMacSupport=chasDupMacSupport, chasModuleOperStatus=chasModuleOperStatus, chasModuleVbusRxDiscards=chasModuleVbusRxDiscards, chasAccounting=chasAccounting, chasPhysical=chasPhysical, chasControlFFSFileSize=chasControlFFSFileSize, chasEnvmnt=chasEnvmnt, chasModuleVbusTxDiscards=chasModuleVbusTxDiscards, chasControlBufferUtilization=chasControlBufferUtilization, XylanImageSyncStatus=XylanImageSyncStatus, chasControlEthPortIPAddr=chasControlEthPortIPAddr, chasControlEthPortSubMask=chasControlEthPortSubMask, chasModuleAdminStatus=chasModuleAdminStatus, XylanConfigSyncStatus=XylanConfigSyncStatus, XylanFFSFileActionStatus=XylanFFSFileActionStatus, chasControlIPAdd=chasControlIPAdd, chasControlEthPortRipMode=chasControlEthPortRipMode, chasBaseMacAddress=chasBaseMacAddress, chasControlEthPortRemoteMask=chasControlEthPortRemoteMask, chasControlImageSuffix=chasControlImageSuffix, chasEnvrmnt2TempRange1=chasEnvrmnt2TempRange1, chasAccountCongStrategy=chasAccountCongStrategy, chasController=chasController, chasModuleLedStatusExtend=chasModuleLedStatusExtend, chasPowerSupply2State=chasPowerSupply2State, chasControlFFSTable=chasControlFFSTable, chasSonetMonitoring=chasSonetMonitoring, chasControlEthPortRemoteHost=chasControlEthPortRemoteHost, XylanModPortTypes=XylanModPortTypes, chasAccountThreshold1=chasAccountThreshold1, chasControlFFSEntry=chasControlFFSEntry, XylanSerialPortSpeed=XylanSerialPortSpeed, chasAccountFillingLevel=chasAccountFillingLevel, chasControlFFSFileName=chasControlFFSFileName, chasPowerSupply1State=chasPowerSupply1State, chasXylanCompaq=chasXylanCompaq, chasControlEthPortBcast=chasControlEthPortBcast, XylanModuleSubunit=XylanModuleSubunit, chasAccountTcpWriteTimer=chasAccountTcpWriteTimer, chasLogicalChanges=chasLogicalChanges, chasXylanPollData=chasXylanPollData, chasControlFreeFFS=chasControlFreeFFS, chasModuleDescription=chasModuleDescription, chasModuleHwRevision=chasModuleHwRevision, chasDateAndTime=chasDateAndTime, chasModuleLedStatus=chasModuleLedStatus, chasControlDTEPortMode=chasControlDTEPortMode, chasModuleMfgDate=chasModuleMfgDate, chasModuleHwModLevel=chasModuleHwModLevel, XylanFFSFileAction=XylanFFSFileAction, chasControlFFSActionStatus=chasControlFFSActionStatus, chasControlLastFFSActionStatus=chasControlLastFFSActionStatus, chasControlDCEStopBits=chasControlDCEStopBits, chasMake=chasMake, chasAccountCdrCount=chasAccountCdrCount, chasAccountPollCycle=chasAccountPollCycle, chasControlConfigSyncEnable=chasControlConfigSyncEnable, chasEnvrmnt2TempRange2=chasEnvrmnt2TempRange2, chasControlConfigSyncStatus=chasControlConfigSyncStatus, XylanFTStateType=XylanFTStateType, chasType=chasType, chasControlEntry=chasControlEntry, chasControlBootCode=chasControlBootCode, chasStatus=chasStatus, chasModuleBaseMacAddress=chasModuleBaseMacAddress)
