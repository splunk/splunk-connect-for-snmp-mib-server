#
# PySNMP MIB module S5-COMMON-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/S5-COMMON-STATS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:51:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
s5Com, = mibBuilder.importSymbols("S5-ROOT-MIB", "s5Com")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ObjectIdentity, Unsigned32, Gauge32, IpAddress, Counter32, Counter64, Bits, ModuleIdentity, Integer32, TimeTicks, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ObjectIdentity", "Unsigned32", "Gauge32", "IpAddress", "Counter32", "Counter64", "Bits", "ModuleIdentity", "Integer32", "TimeTicks", "MibIdentifier", "NotificationType")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
s5CmStat = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1))
s5CmSNodeTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1), )
if mibBuilder.loadTexts: s5CmSNodeTable.setStatus('mandatory')
s5CmSNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1, 1), ).setIndexNames((0, "S5-COMMON-STATS-MIB", "s5CmSNodeIfIndx"), (0, "S5-COMMON-STATS-MIB", "s5CmSNodeBrdIndx"), (0, "S5-COMMON-STATS-MIB", "s5CmSNodePortIndx"), (0, "S5-COMMON-STATS-MIB", "s5CmSNodeMacAddr"))
if mibBuilder.loadTexts: s5CmSNodeEntry.setStatus('mandatory')
s5CmSNodeIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmSNodeIfIndx.setStatus('mandatory')
s5CmSNodeBrdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmSNodeBrdIndx.setStatus('mandatory')
s5CmSNodePortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmSNodePortIndx.setStatus('mandatory')
s5CmSNodeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmSNodeMacAddr.setStatus('mandatory')
s5CmSNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmSNodeStatus.setStatus('mandatory')
s5CmFNodeTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 2), )
if mibBuilder.loadTexts: s5CmFNodeTable.setStatus('mandatory')
s5CmFNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 2, 1), ).setIndexNames((0, "S5-COMMON-STATS-MIB", "s5CmFNodeIfIndx"), (0, "S5-COMMON-STATS-MIB", "s5CmFNodeMacAddr"))
if mibBuilder.loadTexts: s5CmFNodeEntry.setStatus('mandatory')
s5CmFNodeIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmFNodeIfIndx.setStatus('mandatory')
s5CmFNodeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmFNodeMacAddr.setStatus('mandatory')
s5CmFNodeBrdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmFNodeBrdIndx.setStatus('mandatory')
s5CmFNodePortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmFNodePortIndx.setStatus('mandatory')
s5CmNetAddrTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3), )
if mibBuilder.loadTexts: s5CmNetAddrTable.setStatus('mandatory')
s5CmNetAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1), ).setIndexNames((0, "S5-COMMON-STATS-MIB", "s5CmNetAddrIfIndex"), (0, "S5-COMMON-STATS-MIB", "s5CmNetAddrBrdIndx"), (0, "S5-COMMON-STATS-MIB", "s5CmNetAddrPortIndx"), (0, "S5-COMMON-STATS-MIB", "s5CmNetAddrMacAddr"), (0, "S5-COMMON-STATS-MIB", "s5CmNetAddrNetIndx"))
if mibBuilder.loadTexts: s5CmNetAddrEntry.setStatus('mandatory')
s5CmNetAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrIfIndex.setStatus('mandatory')
s5CmNetAddrBrdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrBrdIndx.setStatus('mandatory')
s5CmNetAddrPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrPortIndx.setStatus('mandatory')
s5CmNetAddrMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrMacAddr.setStatus('mandatory')
s5CmNetAddrNetIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrNetIndx.setStatus('mandatory')
s5CmNetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrType.setStatus('mandatory')
s5CmNetAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrAddr.setStatus('mandatory')
s5CmNetAddrLastSeen = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 5, 1, 3, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5CmNetAddrLastSeen.setStatus('mandatory')
mibBuilder.exportSymbols("S5-COMMON-STATS-MIB", s5CmSNodeMacAddr=s5CmSNodeMacAddr, s5CmNetAddrIfIndex=s5CmNetAddrIfIndex, s5CmFNodeBrdIndx=s5CmFNodeBrdIndx, s5CmNetAddrEntry=s5CmNetAddrEntry, s5CmNetAddrMacAddr=s5CmNetAddrMacAddr, s5CmNetAddrTable=s5CmNetAddrTable, s5CmFNodeIfIndx=s5CmFNodeIfIndx, s5CmSNodeIfIndx=s5CmSNodeIfIndx, s5CmFNodeTable=s5CmFNodeTable, s5CmSNodePortIndx=s5CmSNodePortIndx, s5CmNetAddrAddr=s5CmNetAddrAddr, s5CmNetAddrNetIndx=s5CmNetAddrNetIndx, s5CmNetAddrType=s5CmNetAddrType, s5CmSNodeEntry=s5CmSNodeEntry, s5CmSNodeBrdIndx=s5CmSNodeBrdIndx, s5CmStat=s5CmStat, s5CmNetAddrBrdIndx=s5CmNetAddrBrdIndx, s5CmFNodePortIndx=s5CmFNodePortIndx, s5CmNetAddrPortIndx=s5CmNetAddrPortIndx, s5CmSNodeStatus=s5CmSNodeStatus, s5CmFNodeMacAddr=s5CmFNodeMacAddr, s5CmFNodeEntry=s5CmFNodeEntry, s5CmNetAddrLastSeen=s5CmNetAddrLastSeen, s5CmSNodeTable=s5CmSNodeTable)
