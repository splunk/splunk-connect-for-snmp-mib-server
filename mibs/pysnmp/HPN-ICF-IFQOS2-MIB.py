#
# PySNMP MIB module HPN-ICF-IFQOS2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-IFQOS2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:26:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressPrefixLength, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressIPv6")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ModuleIdentity, ObjectIdentity, iso, NotificationType, Integer32, Counter32, Gauge32, IpAddress, Counter64, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "ObjectIdentity", "iso", "NotificationType", "Integer32", "Counter32", "Gauge32", "IpAddress", "Counter64", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
hpnicfIfQos2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1))
hpnicfIfQos2.setRevisions(('2013-11-28 00:00',))
if mibBuilder.loadTexts: hpnicfIfQos2.setLastUpdated('201311280000Z')
if mibBuilder.loadTexts: hpnicfIfQos2.setOrganization('')
hpnicfQos2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65))
class CarAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("invalid", 0), ("pass", 1), ("continue", 2), ("discard", 3), ("remark", 4), ("remark-ip-continue", 5), ("remark-ip-pass", 6), ("remark-mplsexp-continue", 7), ("remark-mplsexp-pass", 8), ("remark-dscp-continue", 9), ("remark-dscp-pass", 10), ("remark-dot1p-continue", 11), ("remark-dot1p-pass", 12), ("remark-atm-clp-continue", 13), ("remark-atm-clp-pass", 14), ("remark-fr-de-continue", 15), ("remark-fr-de-pass", 16))

class PriorityQueue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("top", 1), ("middle", 2), ("normal", 3), ("bottom", 4))

class Direction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

hpnicfIfQoSHardwareQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1))
hpnicfIfQoSHardwareQueueConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1))
hpnicfIfQoSQSModeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSQSModeTable.setStatus('current')
hpnicfIfQoSQSModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSQSModeEntry.setStatus('current')
hpnicfIfQoSQSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("sp", 1), ("sp0", 2), ("sp1", 3), ("sp2", 4), ("wrr", 5), ("hpnicffq", 6), ("wrr-sp", 7), ("byteCountWrr", 8), ("byteCountWfq", 9), ("gmb", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSQSMode.setStatus('current')
hpnicfIfQoSQSWeightTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSQSWeightTable.setStatus('current')
hpnicfIfQoSQSWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSQueueID"))
if mibBuilder.loadTexts: hpnicfIfQoSQSWeightEntry.setStatus('current')
hpnicfIfQoSQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfIfQoSQueueID.setStatus('current')
hpnicfIfQoSQueueGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("group0", 1), ("group1", 2), ("group2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSQueueGroupType.setStatus('current')
hpnicfIfQoSQSType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("weight", 1), ("byte-count", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSQSType.setStatus('current')
hpnicfIfQoSQSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSQSValue.setStatus('current')
hpnicfIfQoSQSMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1, 2, 1, 5), Integer32().clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSQSMaxDelay.setStatus('current')
hpnicfIfQoSQSMinBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSQSMinBandwidth.setStatus('current')
hpnicfIfQoSQSMinBandwidthPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 1, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 100), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSQSMinBandwidthPercent.setStatus('current')
hpnicfIfQoSHardwareQueueRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2))
hpnicfIfQoSHardwareQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSHardwareQueueRunInfoTable.setStatus('current')
hpnicfIfQoSHardwareQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSQueueID"))
if mibBuilder.loadTexts: hpnicfIfQoSHardwareQueueRunInfoEntry.setStatus('current')
hpnicfIfQoSPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSPassPackets.setStatus('current')
hpnicfIfQoSDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSDropPackets.setStatus('current')
hpnicfIfQoSPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSPassBytes.setStatus('current')
hpnicfIfQoSPassPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSPassPPS.setStatus('current')
hpnicfIfQoSPassBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSPassBPS.setStatus('current')
hpnicfIfQoSDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSDropBytes.setStatus('current')
hpnicfIfQoSQueueLengthInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSQueueLengthInPkts.setStatus('current')
hpnicfIfQoSQueueLengthInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSQueueLengthInBytes.setStatus('current')
hpnicfIfQoSCurQueuePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSCurQueuePkts.setStatus('current')
hpnicfIfQoSCurQueueBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSCurQueueBytes.setStatus('current')
hpnicfIfQoSCurQueuePPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSCurQueuePPS.setStatus('current')
hpnicfIfQoSCurQueueBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSCurQueueBPS.setStatus('current')
hpnicfIfQoSTailDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSTailDropPkts.setStatus('current')
hpnicfIfQoSTailDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSTailDropBytes.setStatus('current')
hpnicfIfQoSTailDropPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSTailDropPPS.setStatus('current')
hpnicfIfQoSTailDropBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSTailDropBPS.setStatus('current')
hpnicfIfQoSWredDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropPkts.setStatus('current')
hpnicfIfQoSWredDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropBytes.setStatus('current')
hpnicfIfQoSWredDropPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropPPS.setStatus('current')
hpnicfIfQoSWredDropBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropBPS.setStatus('current')
hpnicfIfQoSHQueueTcpRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSHQueueTcpRunInfoTable.setStatus('current')
hpnicfIfQoSHQueueTcpRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSQueueID"))
if mibBuilder.loadTexts: hpnicfIfQoSHQueueTcpRunInfoEntry.setStatus('current')
hpnicfIfQoSWredDropLPreNTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropLPreNTcpPkts.setStatus('current')
hpnicfIfQoSWredDropLPreNTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropLPreNTcpBytes.setStatus('current')
hpnicfIfQoSWredDropLPreNTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropLPreNTcpPPS.setStatus('current')
hpnicfIfQoSWredDropLPreNTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropLPreNTcpBPS.setStatus('current')
hpnicfIfQoSWredDropLPreTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropLPreTcpPkts.setStatus('current')
hpnicfIfQoSWredDropLPreTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropLPreTcpBytes.setStatus('current')
hpnicfIfQoSWredDropLPreTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropLPreTcpPPS.setStatus('current')
hpnicfIfQoSWredDropLPreTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropLPreTcpBPS.setStatus('current')
hpnicfIfQoSWredDropHPreNTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropHPreNTcpPkts.setStatus('current')
hpnicfIfQoSWredDropHPreNTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropHPreNTcpBytes.setStatus('current')
hpnicfIfQoSWredDropHPreNTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropHPreNTcpPPS.setStatus('current')
hpnicfIfQoSWredDropHPreNTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropHPreNTcpBPS.setStatus('current')
hpnicfIfQoSWredDropHPreTcpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropHPreTcpPkts.setStatus('current')
hpnicfIfQoSWredDropHPreTcpBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropHPreTcpBytes.setStatus('current')
hpnicfIfQoSWredDropHPreTcpPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropHPreTcpPPS.setStatus('current')
hpnicfIfQoSWredDropHPreTcpBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 1, 2, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredDropHPreTcpBPS.setStatus('current')
hpnicfIfQoSSoftwareQueueObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2))
hpnicfIfQoSFIFOObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 1))
hpnicfIfQoSFIFOConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 1, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSFIFOConfigTable.setStatus('current')
hpnicfIfQoSFIFOConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSFIFOConfigEntry.setStatus('current')
hpnicfIfQoSFIFOMaxQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSFIFOMaxQueueLen.setStatus('current')
hpnicfIfQoSFIFORunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 1, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSFIFORunInfoTable.setStatus('current')
hpnicfIfQoSFIFORunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSFIFORunInfoEntry.setStatus('current')
hpnicfIfQoSFIFOSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSFIFOSize.setStatus('current')
hpnicfIfQoSFIFODiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSFIFODiscardPackets.setStatus('current')
hpnicfIfQoSPQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2))
hpnicfIfQoSPQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1))
hpnicfIfQoSPQDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSPQDefaultTable.setStatus('current')
hpnicfIfQoSPQDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPQListNumber"))
if mibBuilder.loadTexts: hpnicfIfQoSPQDefaultEntry.setStatus('current')
hpnicfIfQoSPQListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hpnicfIfQoSPQListNumber.setStatus('current')
hpnicfIfQoSPQDefaultQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 1, 1, 2), PriorityQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSPQDefaultQueueType.setStatus('current')
hpnicfIfQoSPQQueueLengthTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSPQQueueLengthTable.setStatus('current')
hpnicfIfQoSPQQueueLengthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPQListNumber"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPQQueueLengthType"))
if mibBuilder.loadTexts: hpnicfIfQoSPQQueueLengthEntry.setStatus('current')
hpnicfIfQoSPQQueueLengthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 2, 1, 1), PriorityQueue())
if mibBuilder.loadTexts: hpnicfIfQoSPQQueueLengthType.setStatus('current')
hpnicfIfQoSPQQueueLengthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSPQQueueLengthValue.setStatus('current')
hpnicfIfQoSPQClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 3), )
if mibBuilder.loadTexts: hpnicfIfQoSPQClassRuleTable.setStatus('current')
hpnicfIfQoSPQClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPQListNumber"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPQClassRuleType"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPQClassRuleValue"))
if mibBuilder.loadTexts: hpnicfIfQoSPQClassRuleEntry.setStatus('current')
hpnicfIfQoSPQClassRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("interface", 1), ("ipv4acl", 2), ("ipv6acl", 3), ("fragments", 4), ("greater-than", 5), ("less-than", 6), ("tcp", 7), ("udp", 8), ("ipall", 9), ("mpls", 10))))
if mibBuilder.loadTexts: hpnicfIfQoSPQClassRuleType.setStatus('current')
hpnicfIfQoSPQClassRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfIfQoSPQClassRuleValue.setStatus('current')
hpnicfIfQoSPQClassRuleQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 3, 1, 3), PriorityQueue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPQClassRuleQueueType.setStatus('current')
hpnicfIfQoSPQClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPQClassRowStatus.setStatus('current')
hpnicfIfQoSPQApplyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 4), )
if mibBuilder.loadTexts: hpnicfIfQoSPQApplyTable.setStatus('current')
hpnicfIfQoSPQApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSPQApplyEntry.setStatus('current')
hpnicfIfQoSPQApplyListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPQApplyListNumber.setStatus('current')
hpnicfIfQoSPQApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPQApplyRowStatus.setStatus('current')
hpnicfIfQoSPQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 2))
hpnicfIfQoSPQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSPQRunInfoTable.setStatus('current')
hpnicfIfQoSPQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPQType"))
if mibBuilder.loadTexts: hpnicfIfQoSPQRunInfoEntry.setStatus('current')
hpnicfIfQoSPQType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 2, 1, 1, 1), PriorityQueue())
if mibBuilder.loadTexts: hpnicfIfQoSPQType.setStatus('current')
hpnicfIfQoSPQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSPQSize.setStatus('current')
hpnicfIfQoSPQLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSPQLength.setStatus('current')
hpnicfIfQoSPQDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 2, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSPQDiscardPackets.setStatus('current')
hpnicfIfQoSCQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3))
hpnicfIfQoSCQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1))
hpnicfIfQoSCQDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSCQDefaultTable.setStatus('current')
hpnicfIfQoSCQDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSCQListNumber"))
if mibBuilder.loadTexts: hpnicfIfQoSCQDefaultEntry.setStatus('current')
hpnicfIfQoSCQListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hpnicfIfQoSCQListNumber.setStatus('current')
hpnicfIfQoSCQDefaultQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSCQDefaultQueueID.setStatus('current')
hpnicfIfQoSCQQueueLengthTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSCQQueueLengthTable.setStatus('current')
hpnicfIfQoSCQQueueLengthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSCQListNumber"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSCQQueueID"))
if mibBuilder.loadTexts: hpnicfIfQoSCQQueueLengthEntry.setStatus('current')
hpnicfIfQoSCQQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hpnicfIfQoSCQQueueID.setStatus('current')
hpnicfIfQoSCQQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSCQQueueLength.setStatus('current')
hpnicfIfQoSCQQueueServing = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 2, 1, 3), Integer32().clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSCQQueueServing.setStatus('current')
hpnicfIfQoSCQClassRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 3), )
if mibBuilder.loadTexts: hpnicfIfQoSCQClassRuleTable.setStatus('current')
hpnicfIfQoSCQClassRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSCQListNumber"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSCQClassRuleType"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSCQClassRuleValue"))
if mibBuilder.loadTexts: hpnicfIfQoSCQClassRuleEntry.setStatus('current')
hpnicfIfQoSCQClassRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("interface", 1), ("ipv4acl", 2), ("ipv6acl", 3), ("fragments", 4), ("greater-than", 5), ("less-than", 6), ("tcp", 7), ("udp", 8), ("ipall", 9), ("mpls", 10))))
if mibBuilder.loadTexts: hpnicfIfQoSCQClassRuleType.setStatus('current')
hpnicfIfQoSCQClassRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfIfQoSCQClassRuleValue.setStatus('current')
hpnicfIfQoSCQClassRuleQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSCQClassRuleQueueID.setStatus('current')
hpnicfIfQoSCQClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSCQClassRowStatus.setStatus('current')
hpnicfIfQoSCQApplyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 4), )
if mibBuilder.loadTexts: hpnicfIfQoSCQApplyTable.setStatus('current')
hpnicfIfQoSCQApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSCQApplyEntry.setStatus('current')
hpnicfIfQoSCQApplyListNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSCQApplyListNumber.setStatus('current')
hpnicfIfQoSCQApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 1, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSCQApplyRowStatus.setStatus('current')
hpnicfIfQoSCQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 2))
hpnicfIfQoSCQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 2, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSCQRunInfoTable.setStatus('current')
hpnicfIfQoSCQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSCQQueueID"))
if mibBuilder.loadTexts: hpnicfIfQoSCQRunInfoEntry.setStatus('current')
hpnicfIfQoSCQRunInfoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSCQRunInfoSize.setStatus('current')
hpnicfIfQoSCQRunInfoLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSCQRunInfoLength.setStatus('current')
hpnicfIfQoSCQRunInfoDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 3, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSCQRunInfoDiscardPackets.setStatus('current')
hpnicfIfQoSWFQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4))
hpnicfIfQoSWFQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 1))
hpnicfIfQoSWFQTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 1, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSWFQTable.setStatus('current')
hpnicfIfQoSWFQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSWFQEntry.setStatus('current')
hpnicfIfQoSWFQQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWFQQueueLength.setStatus('current')
hpnicfIfQoSWFQQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("size16", 1), ("size32", 2), ("size64", 3), ("size128", 4), ("size256", 5), ("size512", 6), ("size1024", 7), ("size2048", 8), ("size4096", 9))).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWFQQueueNumber.setStatus('current')
hpnicfIfQoSWFQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWFQRowStatus.setStatus('current')
hpnicfIfQoSWFQType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip-precedence", 1), ("dscp", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWFQType.setStatus('current')
hpnicfIfQoSWFQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 2))
hpnicfIfQoSWFQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 2, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSWFQRunInfoTable.setStatus('current')
hpnicfIfQoSWFQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSWFQRunInfoEntry.setStatus('current')
hpnicfIfQoSWFQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWFQSize.setStatus('current')
hpnicfIfQoSWFQLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWFQLength.setStatus('current')
hpnicfIfQoSWFQDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWFQDiscardPackets.setStatus('current')
hpnicfIfQoSWFQHashedActiveQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWFQHashedActiveQueues.setStatus('current')
hpnicfIfQoSWFQHashedMaxActiveQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWFQHashedMaxActiveQueues.setStatus('current')
hpnicfIfQosWFQhashedTotalQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQosWFQhashedTotalQueues.setStatus('current')
hpnicfIfQoSBandwidthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 5))
hpnicfIfQoSBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 5, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSBandwidthTable.setStatus('current')
hpnicfIfQoSBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSBandwidthEntry.setStatus('current')
hpnicfIfQoSMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSMaxBandwidth.setStatus('current')
hpnicfIfQoSReservedBandwidthPct = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSReservedBandwidthPct.setStatus('current')
hpnicfIfQoSBandwidthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSBandwidthRowStatus.setStatus('current')
hpnicfIfQoSQmtokenGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 6))
hpnicfIfQoSQmtokenTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 6, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSQmtokenTable.setStatus('current')
hpnicfIfQoSQmtokenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSQmtokenEntry.setStatus('current')
hpnicfIfQoSQmtokenNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSQmtokenNumber.setStatus('current')
hpnicfIfQoSQmtokenRosStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 6, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSQmtokenRosStatus.setStatus('current')
hpnicfIfQoSRTPQObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7))
hpnicfIfQoSRTPQConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 1))
hpnicfIfQoSRTPQConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 1, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSRTPQConfigTable.setStatus('current')
hpnicfIfQoSRTPQConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSRTPQConfigEntry.setStatus('current')
hpnicfIfQoSRTPQStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSRTPQStartPort.setStatus('current')
hpnicfIfQoSRTPQEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSRTPQEndPort.setStatus('current')
hpnicfIfQoSRTPQReservedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSRTPQReservedBandwidth.setStatus('current')
hpnicfIfQoSRTPQCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSRTPQCbs.setStatus('current')
hpnicfIfQoSRTPQRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSRTPQRowStatus.setStatus('current')
hpnicfIfQoSRTPQRunInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 2))
hpnicfIfQoSRTPQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 2, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSRTPQRunInfoTable.setStatus('current')
hpnicfIfQoSRTPQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSRTPQRunInfoEntry.setStatus('current')
hpnicfIfQoSRTPQPacketNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSRTPQPacketNumber.setStatus('current')
hpnicfIfQoSRTPQPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSRTPQPacketSize.setStatus('current')
hpnicfIfQoSRTPQOutputPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSRTPQOutputPackets.setStatus('current')
hpnicfIfQoSRTPQDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 7, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSRTPQDiscardPackets.setStatus('current')
hpnicfIfQoSCarListObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 8))
hpnicfIfQoCarListGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 8, 1))
hpnicfIfQoSCarlTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 8, 1, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSCarlTable.setStatus('current')
hpnicfIfQoSCarlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 8, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSCarlListNum"))
if mibBuilder.loadTexts: hpnicfIfQoSCarlEntry.setStatus('current')
hpnicfIfQoSCarlListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 8, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfIfQoSCarlListNum.setStatus('current')
hpnicfIfQoSCarlParaType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("macAddress", 1), ("precMask", 2), ("dscpMask", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSCarlParaType.setStatus('current')
hpnicfIfQoSCarlParaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 8, 1, 1, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSCarlParaValue.setStatus('current')
hpnicfIfQoSCarlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 2, 8, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSCarlRowStatus.setStatus('current')
hpnicfIfQoSLineRateObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3))
hpnicfIfQoSLRConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSLRConfigTable.setStatus('current')
hpnicfIfQoSLRConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSLRDirection"))
if mibBuilder.loadTexts: hpnicfIfQoSLRConfigEntry.setStatus('current')
hpnicfIfQoSLRDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 1, 1, 1), Direction())
if mibBuilder.loadTexts: hpnicfIfQoSLRDirection.setStatus('current')
hpnicfIfQoSLRCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSLRCir.setStatus('current')
hpnicfIfQoSLRCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSLRCbs.setStatus('current')
hpnicfIfQoSLREbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSLREbs.setStatus('current')
hpnicfIfQoSRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSRowStatus.setStatus('current')
hpnicfIfQoSLRPir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSLRPir.setStatus('current')
hpnicfIfQoSLRUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unitAbsolute", 1), ("unitPercent", 2))).clone('unitAbsolute')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSLRUnit.setStatus('current')
hpnicfIfQoSLRRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSLRRunInfoTable.setStatus('current')
hpnicfIfQoSLRRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSLRDirection"))
if mibBuilder.loadTexts: hpnicfIfQoSLRRunInfoEntry.setStatus('current')
hpnicfIfQoSLRRunInfoPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSLRRunInfoPassedPackets.setStatus('current')
hpnicfIfQoSLRRunInfoPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSLRRunInfoPassedBytes.setStatus('current')
hpnicfIfQoSLRRunInfoDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSLRRunInfoDelayedPackets.setStatus('current')
hpnicfIfQoSLRRunInfoDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSLRRunInfoDelayedBytes.setStatus('current')
hpnicfIfQoSLRRunInfoActiveShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSLRRunInfoActiveShaping.setStatus('current')
hpnicfIfQoSCARObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4))
hpnicfIfQoSAggregativeCarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1))
hpnicfIfQoSAggregativeCarNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarNextIndex.setStatus('current')
hpnicfIfQoSAggregativeCarConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarConfigTable.setStatus('current')
hpnicfIfQoSAggregativeCarConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSAggregativeCarIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarConfigEntry.setStatus('current')
hpnicfIfQoSAggregativeCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534)))
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarIndex.setStatus('current')
hpnicfIfQoSAggregativeCarName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarName.setStatus('current')
hpnicfIfQoSAggregativeCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarCir.setStatus('current')
hpnicfIfQoSAggregativeCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarCbs.setStatus('current')
hpnicfIfQoSAggregativeCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarEbs.setStatus('current')
hpnicfIfQoSAggregativeCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarPir.setStatus('current')
hpnicfIfQoSAggregativeCarGreenActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 7), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarGreenActionType.setStatus('current')
hpnicfIfQoSAggregativeCarGreenActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarGreenActionValue.setStatus('current')
hpnicfIfQoSAggregativeCarYellowActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 9), CarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarYellowActionType.setStatus('current')
hpnicfIfQoSAggregativeCarYellowActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarYellowActionValue.setStatus('current')
hpnicfIfQoSAggregativeCarRedActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 11), CarAction()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarRedActionType.setStatus('current')
hpnicfIfQoSAggregativeCarRedActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarRedActionValue.setStatus('current')
hpnicfIfQoSAggregativeCarType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aggregative", 1), ("notAggregative", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarType.setStatus('current')
hpnicfIfQoSAggregativeCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarRowStatus.setStatus('current')
hpnicfIfQoSAggregativeCarApplyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 3), )
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarApplyTable.setStatus('current')
hpnicfIfQoSAggregativeCarApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSAggregativeCarApplyDirection"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSAggregativeCarApplyRuleType"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSAggregativeCarApplyRuleValue"))
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarApplyEntry.setStatus('current')
hpnicfIfQoSAggregativeCarApplyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 3, 1, 1), Direction())
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarApplyDirection.setStatus('current')
hpnicfIfQoSAggregativeCarApplyRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipv4acl", 1), ("ipv6acl", 2), ("carl", 3), ("any", 4))))
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarApplyRuleType.setStatus('current')
hpnicfIfQoSAggregativeCarApplyRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarApplyRuleValue.setStatus('current')
hpnicfIfQoSAggregativeCarApplyCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarApplyCarIndex.setStatus('current')
hpnicfIfQoSAggregativeCarApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarApplyRowStatus.setStatus('current')
hpnicfIfQoSAggregativeCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 4), )
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarRunInfoTable.setStatus('current')
hpnicfIfQoSAggregativeCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSAggregativeCarIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarRunInfoEntry.setStatus('current')
hpnicfIfQoSAggregativeCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarGreenPackets.setStatus('current')
hpnicfIfQoSAggregativeCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarGreenBytes.setStatus('current')
hpnicfIfQoSAggregativeCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarYellowPackets.setStatus('current')
hpnicfIfQoSAggregativeCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarYellowBytes.setStatus('current')
hpnicfIfQoSAggregativeCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarRedPackets.setStatus('current')
hpnicfIfQoSAggregativeCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSAggregativeCarRedBytes.setStatus('current')
hpnicfIfQoSTricolorCarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2))
hpnicfIfQoSTricolorCarConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarConfigTable.setStatus('current')
hpnicfIfQoSTricolorCarConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSTricolorCarDirection"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSTricolorCarType"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSTricolorCarValue"))
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarConfigEntry.setStatus('current')
hpnicfIfQoSTricolorCarDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 1), Direction())
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarDirection.setStatus('current')
hpnicfIfQoSTricolorCarType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipv4acl", 1), ("ipv6acl", 2), ("carl", 3), ("any", 4))))
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarType.setStatus('current')
hpnicfIfQoSTricolorCarValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarValue.setStatus('current')
hpnicfIfQoSTricolorCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarCir.setStatus('current')
hpnicfIfQoSTricolorCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarCbs.setStatus('current')
hpnicfIfQoSTricolorCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarEbs.setStatus('current')
hpnicfIfQoSTricolorCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarPir.setStatus('current')
hpnicfIfQoSTricolorCarGreenActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 8), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarGreenActionType.setStatus('current')
hpnicfIfQoSTricolorCarGreenActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarGreenActionValue.setStatus('current')
hpnicfIfQoSTricolorCarYellowActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 10), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarYellowActionType.setStatus('current')
hpnicfIfQoSTricolorCarYellowActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarYellowActionValue.setStatus('current')
hpnicfIfQoSTricolorCarRedActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 12), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarRedActionType.setStatus('current')
hpnicfIfQoSTricolorCarRedActionValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarRedActionValue.setStatus('current')
hpnicfIfQoSTricolorCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarRowStatus.setStatus('current')
hpnicfIfQoSTricolorCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarRunInfoTable.setStatus('current')
hpnicfIfQoSTricolorCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSTricolorCarDirection"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSTricolorCarType"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSTricolorCarValue"))
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarRunInfoEntry.setStatus('current')
hpnicfIfQoSTricolorCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarGreenPackets.setStatus('current')
hpnicfIfQoSTricolorCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarGreenBytes.setStatus('current')
hpnicfIfQoSTricolorCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarYellowPackets.setStatus('current')
hpnicfIfQoSTricolorCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarYellowBytes.setStatus('current')
hpnicfIfQoSTricolorCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarRedPackets.setStatus('current')
hpnicfIfQoSTricolorCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 4, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSTricolorCarRedBytes.setStatus('current')
hpnicfIfQoSGTSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5))
hpnicfIfQoSGTSConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSGTSConfigTable.setStatus('current')
hpnicfIfQoSGTSConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSGTSClassRuleType"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSGTSClassRuleValue"))
if mibBuilder.loadTexts: hpnicfIfQoSGTSConfigEntry.setStatus('current')
hpnicfIfQoSGTSClassRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 1), ("ipv4acl", 2), ("ipv6acl", 3), ("queue", 4))))
if mibBuilder.loadTexts: hpnicfIfQoSGTSClassRuleType.setStatus('current')
hpnicfIfQoSGTSClassRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfIfQoSGTSClassRuleValue.setStatus('current')
hpnicfIfQoSGTSCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSGTSCir.setStatus('current')
hpnicfIfQoSGTSCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSGTSCbs.setStatus('current')
hpnicfIfQoSGTSEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSGTSEbs.setStatus('current')
hpnicfIfQoSGTSQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSGTSQueueLength.setStatus('current')
hpnicfIfQoSGTSConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSGTSConfigRowStatus.setStatus('current')
hpnicfIfQoSGTSRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSGTSRunInfoTable.setStatus('current')
hpnicfIfQoSGTSRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSGTSClassRuleType"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSGTSClassRuleValue"))
if mibBuilder.loadTexts: hpnicfIfQoSGTSRunInfoEntry.setStatus('current')
hpnicfIfQoSGTSQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSGTSQueueSize.setStatus('current')
hpnicfIfQoSGTSPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSGTSPassedPackets.setStatus('current')
hpnicfIfQoSGTSPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSGTSPassedBytes.setStatus('current')
hpnicfIfQoSGTSDiscardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSGTSDiscardPackets.setStatus('current')
hpnicfIfQoSGTSDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSGTSDiscardBytes.setStatus('current')
hpnicfIfQoSGTSDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSGTSDelayedPackets.setStatus('current')
hpnicfIfQoSGTSDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 5, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSGTSDelayedBytes.setStatus('current')
hpnicfIfQoSWREDObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6))
hpnicfIfQoSWredGroupGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1))
hpnicfIfQoSWredGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupNextIndex.setStatus('current')
hpnicfIfQoSWredGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupTable.setStatus('current')
hpnicfIfQoSWredGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSWredGroupIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupEntry.setStatus('current')
hpnicfIfQoSWredGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupIndex.setStatus('current')
hpnicfIfQoSWredGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupName.setStatus('current')
hpnicfIfQoSWredGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("userdefined", 0), ("dot1p", 1), ("ippre", 2), ("dscp", 3), ("localpre", 4), ("atmclp", 5), ("frde", 6), ("exp", 7), ("queue", 8), ("dropLevel", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupType.setStatus('current')
hpnicfIfQoSWredGroupWeightingConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupWeightingConstant.setStatus('current')
hpnicfIfQoSWredGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupRowStatus.setStatus('current')
hpnicfIfQoSWredGroupContentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 3), )
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupContentTable.setStatus('current')
hpnicfIfQoSWredGroupContentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSWredGroupIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSWredGroupContentIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSWredGroupContentSubIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupContentEntry.setStatus('current')
hpnicfIfQoSWredGroupContentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupContentIndex.setStatus('current')
hpnicfIfQoSWredGroupContentSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupContentSubIndex.setStatus('current')
hpnicfIfQoSWredLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWredLowLimit.setStatus('current')
hpnicfIfQoSWredHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWredHighLimit.setStatus('current')
hpnicfIfQoSWredDiscardProb = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWredDiscardProb.setStatus('current')
hpnicfIfQoSWredGroupExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupExponent.setStatus('current')
hpnicfIfQoSWredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWredRowStatus.setStatus('current')
hpnicfIfQoSWredGroupApplyIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 4), )
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupApplyIfTable.setStatus('current')
hpnicfIfQoSWredGroupApplyIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupApplyIfEntry.setStatus('current')
hpnicfIfQoSWredGroupApplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupApplyIndex.setStatus('current')
hpnicfIfQoSWredGroupApplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupApplyName.setStatus('current')
hpnicfIfQoSWredGroupIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSWredGroupIfRowStatus.setStatus('current')
hpnicfIfQoSWredApplyIfRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 5), )
if mibBuilder.loadTexts: hpnicfIfQoSWredApplyIfRunInfoTable.setStatus('current')
hpnicfIfQoSWredApplyIfRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSWredGroupIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSWredGroupContentIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSWredGroupContentSubIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSWredApplyIfRunInfoEntry.setStatus('current')
hpnicfIfQoSWredPreRandomDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredPreRandomDropNum.setStatus('current')
hpnicfIfQoSWredPreTailDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWredPreTailDropNum.setStatus('current')
hpnicfIfQoSPortWredGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2))
hpnicfIfQoSPortWredWeightConstantTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSPortWredWeightConstantTable.setStatus('current')
hpnicfIfQoSPortWredWeightConstantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSPortWredWeightConstantEntry.setStatus('current')
hpnicfIfQoSPortWredEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 1, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPortWredEnable.setStatus('current')
hpnicfIfQoSPortWredWeightConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPortWredWeightConstant.setStatus('current')
hpnicfIfQoSPortWredWeightConstantRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPortWredWeightConstantRowStatus.setStatus('current')
hpnicfIfQoSPortWredPreConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSPortWredPreConfigTable.setStatus('current')
hpnicfIfQoSPortWredPreConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPortWredPreID"))
if mibBuilder.loadTexts: hpnicfIfQoSPortWredPreConfigEntry.setStatus('current')
hpnicfIfQoSPortWredPreID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfIfQoSPortWredPreID.setStatus('current')
hpnicfIfQoSPortWredPreLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPortWredPreLowLimit.setStatus('current')
hpnicfIfQoSPortWredPreHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPortWredPreHighLimit.setStatus('current')
hpnicfIfQoSPortWredPreDiscardProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPortWredPreDiscardProbability.setStatus('current')
hpnicfIfQoSPortWredPreRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPortWredPreRowStatus.setStatus('current')
hpnicfIfQoSPortWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 3), )
if mibBuilder.loadTexts: hpnicfIfQoSPortWredRunInfoTable.setStatus('current')
hpnicfIfQoSPortWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPortWredPreID"))
if mibBuilder.loadTexts: hpnicfIfQoSPortWredRunInfoEntry.setStatus('current')
hpnicfIfQoSWREDTailDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWREDTailDropNum.setStatus('current')
hpnicfIfQoSWREDRandomDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 6, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSWREDRandomDropNum.setStatus('current')
hpnicfIfQoSPortPriorityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 7))
hpnicfIfQoSPortPriorityConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 7, 1))
hpnicfIfQoSPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 7, 1, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSPortPriorityTable.setStatus('current')
hpnicfIfQoSPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 7, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSPortPriorityEntry.setStatus('current')
hpnicfIfQoSPortPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 7, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSPortPriorityValue.setStatus('current')
hpnicfIfQoSPortPirorityTrustTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 7, 1, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSPortPirorityTrustTable.setStatus('current')
hpnicfIfQoSPortPirorityTrustEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 7, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSPortPirorityTrustEntry.setStatus('current')
hpnicfIfQoSPortPriorityTrustTrustType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 7, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("untrust", 1), ("dot1p", 2), ("dscp", 3), ("exp", 4), ("ipPrecedence", 5), ("dot11e", 6), ("auto", 7))).clone('untrust')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSPortPriorityTrustTrustType.setStatus('current')
hpnicfIfQoSPortPriorityTrustOvercastType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noOvercast", 1), ("overcastDSCP", 2), ("overcastCOS", 3), ("overcast", 4))).clone('noOvercast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSPortPriorityTrustOvercastType.setStatus('current')
hpnicfIfQoSMapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9))
hpnicfIfQoSPriMapConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1))
hpnicfIfQoSPriMapGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfIfQoSPriMapGroupNextIndex.setStatus('current')
hpnicfIfQoSPriMapGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 2), )
if mibBuilder.loadTexts: hpnicfIfQoSPriMapGroupTable.setStatus('current')
hpnicfIfQoSPriMapGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPriMapGroupIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSPriMapGroupEntry.setStatus('current')
hpnicfIfQoSPriMapGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfIfQoSPriMapGroupIndex.setStatus('current')
hpnicfIfQoSPriMapGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("userdefined", 1), ("dot1p-dp", 2), ("dot1p-dscp", 3), ("dot1p-lp", 4), ("dscp-dot1p", 5), ("dscp-dp", 6), ("dscp-dscp", 7), ("dscp-lp", 8), ("exp-dp", 9), ("exp-lp", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPriMapGroupType.setStatus('current')
hpnicfIfQoSPriMapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPriMapGroupName.setStatus('current')
hpnicfIfQoSPriMapGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPriMapGroupRowStatus.setStatus('current')
hpnicfIfQoSPriMapContentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 3), )
if mibBuilder.loadTexts: hpnicfIfQoSPriMapContentTable.setStatus('current')
hpnicfIfQoSPriMapContentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPriMapGroupIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPriMapGroupImportValue"))
if mibBuilder.loadTexts: hpnicfIfQoSPriMapContentEntry.setStatus('current')
hpnicfIfQoSPriMapGroupImportValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfIfQoSPriMapGroupImportValue.setStatus('current')
hpnicfIfQoSPriMapGroupExportValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPriMapGroupExportValue.setStatus('current')
hpnicfIfQoSPriMapContentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSPriMapContentRowStatus.setStatus('current')
hpnicfIfQoSPrePriMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 4), )
if mibBuilder.loadTexts: hpnicfIfQoSPrePriMapTable.setStatus('current')
hpnicfIfQoSPrePriMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPrePriMapTableType"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPrePriMapTableColor"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPrePriMapTableDirection"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfIfQoSPrePriMapTableImportValue"))
if mibBuilder.loadTexts: hpnicfIfQoSPrePriMapEntry.setStatus('current')
hpnicfIfQoSPrePriMapTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("dot1pToLp", 1), ("dot1pToDp", 2), ("expToLp", 3), ("dscpToLp", 4), ("expToDp", 5), ("dscpToDp", 6), ("dscpToDot1p", 7), ("dot1pToDscp", 8), ("dscpToDscp", 9), ("dscpToExp", 10), ("expToDscp", 11), ("expToDot1p", 12), ("expToExp", 13), ("lpToDot1p", 14), ("dot1pToRpr", 15), ("dscpToRpr", 16), ("expToRpr", 17), ("ippreToRpr", 18), ("upToDot1p", 19), ("upToDscp", 20), ("upToExp", 21), ("upToDp", 22), ("upToLp", 23), ("upToRpr", 24), ("upToFc", 25), ("lpTodscp", 26), ("dot11eToLp", 27), ("lpToDot11e", 28), ("lpToLp", 29), ("dot1pToExp", 30), ("lpToExp", 31), ("lpToDp", 32), ("upToUp", 33), ("dot1pToDot1p", 34))))
if mibBuilder.loadTexts: hpnicfIfQoSPrePriMapTableType.setStatus('current')
hpnicfIfQoSPrePriMapTableColor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noColor", 1), ("green", 2), ("yellow", 3), ("red", 4))))
if mibBuilder.loadTexts: hpnicfIfQoSPrePriMapTableColor.setStatus('current')
hpnicfIfQoSPrePriMapTableDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noDirection", 1), ("inbound", 2), ("outbound", 3))))
if mibBuilder.loadTexts: hpnicfIfQoSPrePriMapTableDirection.setStatus('current')
hpnicfIfQoSPrePriMapTableImportValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfIfQoSPrePriMapTableImportValue.setStatus('current')
hpnicfIfQoSPrePriMapTableExportValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 9, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfIfQoSPrePriMapTableExportValue.setStatus('current')
hpnicfIfQoSL3PlusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 10))
hpnicfIfQoSPortBindingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 10, 1))
hpnicfIfQoSPortBindingTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 10, 1, 1), )
if mibBuilder.loadTexts: hpnicfIfQoSPortBindingTable.setStatus('current')
hpnicfIfQoSPortBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 10, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfIfQoSPortBindingEntry.setStatus('current')
hpnicfIfQoSBindingIf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 10, 1, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSBindingIf.setStatus('current')
hpnicfIfQoSBindingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 10, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfIfQoSBindingRowStatus.setStatus('current')
hpnicfQoSTraStaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11))
hpnicfQoSTraStaConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 1))
hpnicfQoSIfTraStaConfigInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 1, 1), )
if mibBuilder.loadTexts: hpnicfQoSIfTraStaConfigInfoTable.setStatus('current')
hpnicfQoSIfTraStaConfigInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfQoSIfTraStaConfigDirection"))
if mibBuilder.loadTexts: hpnicfQoSIfTraStaConfigInfoEntry.setStatus('current')
hpnicfQoSIfTraStaConfigDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 1, 1, 1, 1), Direction())
if mibBuilder.loadTexts: hpnicfQoSIfTraStaConfigDirection.setStatus('current')
hpnicfQoSIfTraStaConfigQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSIfTraStaConfigQueue.setStatus('current')
hpnicfQoSIfTraStaConfigDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSIfTraStaConfigDot1p.setStatus('current')
hpnicfQoSIfTraStaConfigDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSIfTraStaConfigDscp.setStatus('current')
hpnicfQoSIfTraStaConfigVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSIfTraStaConfigVlan.setStatus('current')
hpnicfQoSIfTraStaConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSIfTraStaConfigStatus.setStatus('current')
hpnicfQoSTraStaRunGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 2))
hpnicfQoSIfTraStaRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 2, 1), )
if mibBuilder.loadTexts: hpnicfQoSIfTraStaRunInfoTable.setStatus('current')
hpnicfQoSIfTraStaRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfQoSIfTraStaRunObjectType"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfQoSIfTraStaRunObjectValue"), (0, "HPN-ICF-IFQOS2-MIB", "hpnicfQoSIfTraStaRunDirection"))
if mibBuilder.loadTexts: hpnicfQoSIfTraStaRunInfoEntry.setStatus('current')
hpnicfQoSIfTraStaRunObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("queue", 1), ("dot1p", 2), ("dscp", 3), ("vlanID", 4))))
if mibBuilder.loadTexts: hpnicfQoSIfTraStaRunObjectType.setStatus('current')
hpnicfQoSIfTraStaRunObjectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfQoSIfTraStaRunObjectValue.setStatus('current')
hpnicfQoSIfTraStaRunDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 2, 1, 1, 3), Direction())
if mibBuilder.loadTexts: hpnicfQoSIfTraStaRunDirection.setStatus('current')
hpnicfQoSIfTraStaRunPassPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfQoSIfTraStaRunPassPackets.setStatus('current')
hpnicfQoSIfTraStaRunDropPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfQoSIfTraStaRunDropPackets.setStatus('current')
hpnicfQoSIfTraStaRunPassBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfQoSIfTraStaRunPassBytes.setStatus('current')
hpnicfQoSIfTraStaRunDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfQoSIfTraStaRunDropBytes.setStatus('current')
hpnicfQoSIfTraStaRunPassPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfQoSIfTraStaRunPassPPS.setStatus('current')
hpnicfQoSIfTraStaRunPassBPS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 11, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfQoSIfTraStaRunPassBPS.setStatus('current')
hpnicfQoSGlobalPriorityObject = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12))
hpnicfQoSRemarkTcpPortPriTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 1), )
if mibBuilder.loadTexts: hpnicfQoSRemarkTcpPortPriTable.setStatus('current')
hpnicfQoSRemarkTcpPortPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 1, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfQoSRemarkTcpPortStart"))
if mibBuilder.loadTexts: hpnicfQoSRemarkTcpPortPriEntry.setStatus('current')
hpnicfQoSRemarkTcpPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfQoSRemarkTcpPortStart.setStatus('current')
hpnicfQoSRemarkTcpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkTcpPortEnd.setStatus('current')
hpnicfQoSRemarkTcpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipAll", 1), ("ipv4", 2), ("ipv6", 3))).clone('ipAll')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkTcpPortType.setStatus('current')
hpnicfQoSRemarkTcpPortDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkTcpPortDot1p.setStatus('current')
hpnicfQoSRemarkTcpPortDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkTcpPortDscp.setStatus('current')
hpnicfQoSRemarkTcpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkTcpPortRowStatus.setStatus('current')
hpnicfQoSRemarkUdpPortPriTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 2), )
if mibBuilder.loadTexts: hpnicfQoSRemarkUdpPortPriTable.setStatus('current')
hpnicfQoSRemarkUdpPortPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 2, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfQoSRemarkUdpPortStart"))
if mibBuilder.loadTexts: hpnicfQoSRemarkUdpPortPriEntry.setStatus('current')
hpnicfQoSRemarkUdpPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hpnicfQoSRemarkUdpPortStart.setStatus('current')
hpnicfQoSRemarkUdpPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkUdpPortEnd.setStatus('current')
hpnicfQoSRemarkUdpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipAll", 1), ("ipv4", 2), ("ipv6", 3))).clone('ipAll')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkUdpPortType.setStatus('current')
hpnicfQoSRemarkUdpPortDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkUdpPortDot1p.setStatus('current')
hpnicfQoSRemarkUdpPortDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkUdpPortDscp.setStatus('current')
hpnicfQoSRemarkUdpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkUdpPortRowStatus.setStatus('current')
hpnicfQoSRemarkIPv4AddrPriTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 3), )
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv4AddrPriTable.setStatus('current')
hpnicfQoSRemarkIPv4AddrPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 3, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfQoSRemarkIPv4AddrValue"))
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv4AddrPriEntry.setStatus('current')
hpnicfQoSRemarkIPv4AddrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv4AddrValue.setStatus('current')
hpnicfQoSRemarkIPv4AddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv4AddrMask.setStatus('current')
hpnicfQoSRemarkIPv4AddrMaskLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 32), ValueRangeConstraint(4294967295, 4294967295), )).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv4AddrMaskLength.setStatus('current')
hpnicfQoSRemarkIPv4AddrDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv4AddrDot1p.setStatus('current')
hpnicfQoSRemarkIPv4AddrDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv4AddrDscp.setStatus('current')
hpnicfQoSRemarkIPv4AddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv4AddrRowStatus.setStatus('current')
hpnicfQoSRemarkIPv6AddrPriTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 4), )
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv6AddrPriTable.setStatus('current')
hpnicfQoSRemarkIPv6AddrPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 4, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfQoSRemarkIPv6AddrValue"))
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv6AddrPriEntry.setStatus('current')
hpnicfQoSRemarkIPv6AddrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 4, 1, 1), InetAddressIPv6())
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv6AddrValue.setStatus('current')
hpnicfQoSRemarkIPv6AddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 4, 1, 2), InetAddressPrefixLength().clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv6AddrPrefixLength.setStatus('current')
hpnicfQoSRemarkIPv6AddrDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv6AddrDot1p.setStatus('current')
hpnicfQoSRemarkIPv6AddrDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv6AddrDscp.setStatus('current')
hpnicfQoSRemarkIPv6AddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkIPv6AddrRowStatus.setStatus('current')
hpnicfQoSRemarkProtocolPriTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 5), )
if mibBuilder.loadTexts: hpnicfQoSRemarkProtocolPriTable.setStatus('current')
hpnicfQoSRemarkProtocolPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 5, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfQoSRemarkProtocolValue"))
if mibBuilder.loadTexts: hpnicfQoSRemarkProtocolPriEntry.setStatus('current')
hpnicfQoSRemarkProtocolValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ip", 1), ("ipx", 2), ("arp", 3), ("appletalk", 4), ("sna", 5), ("netbeui", 6))))
if mibBuilder.loadTexts: hpnicfQoSRemarkProtocolValue.setStatus('current')
hpnicfQoSRemarkProtocolDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkProtocolDot1p.setStatus('current')
hpnicfQoSRemarkProtocolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkProtocolRowStatus.setStatus('current')
hpnicfQoSRemarkVlanPriTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 6), )
if mibBuilder.loadTexts: hpnicfQoSRemarkVlanPriTable.setStatus('current')
hpnicfQoSRemarkVlanPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 6, 1), ).setIndexNames((0, "HPN-ICF-IFQOS2-MIB", "hpnicfQoSRemarkVlanStart"))
if mibBuilder.loadTexts: hpnicfQoSRemarkVlanPriEntry.setStatus('current')
hpnicfQoSRemarkVlanStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hpnicfQoSRemarkVlanStart.setStatus('current')
hpnicfQoSRemarkVlanEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkVlanEnd.setStatus('current')
hpnicfQoSRemarkVlanDot1p = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkVlanDot1p.setStatus('current')
hpnicfQoSRemarkVlanDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkVlanDscp.setStatus('current')
hpnicfQoSRemarkVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfQoSRemarkVlanRowStatus.setStatus('current')
hpnicfQoSTypeOfServiceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 7))
hpnicfQoSTypeOfServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 1, 12, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("ipPrecedence", 2), ("dscp", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfQoSTypeOfServiceMode.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-IFQOS2-MIB", hpnicfIfQoSBindingRowStatus=hpnicfIfQoSBindingRowStatus, hpnicfIfQoSGTSObjects=hpnicfIfQoSGTSObjects, hpnicfQoSIfTraStaRunPassPPS=hpnicfQoSIfTraStaRunPassPPS, hpnicfIfQoSTricolorCarType=hpnicfIfQoSTricolorCarType, hpnicfIfQoSAggregativeCarGreenActionValue=hpnicfIfQoSAggregativeCarGreenActionValue, hpnicfIfQoSTricolorCarRedBytes=hpnicfIfQoSTricolorCarRedBytes, hpnicfIfQoSRTPQCbs=hpnicfIfQoSRTPQCbs, hpnicfIfQoSMapObjects=hpnicfIfQoSMapObjects, hpnicfIfQoSRTPQEndPort=hpnicfIfQoSRTPQEndPort, hpnicfIfQoSPrePriMapTableExportValue=hpnicfIfQoSPrePriMapTableExportValue, hpnicfQoSRemarkIPv4AddrMaskLength=hpnicfQoSRemarkIPv4AddrMaskLength, hpnicfIfQoSAggregativeCarRowStatus=hpnicfIfQoSAggregativeCarRowStatus, hpnicfIfQoSPQListNumber=hpnicfIfQoSPQListNumber, hpnicfQoSRemarkIPv6AddrDot1p=hpnicfQoSRemarkIPv6AddrDot1p, hpnicfIfQoSAggregativeCarGreenActionType=hpnicfIfQoSAggregativeCarGreenActionType, hpnicfIfQoSLRConfigTable=hpnicfIfQoSLRConfigTable, hpnicfIfQoSPQRunInfoEntry=hpnicfIfQoSPQRunInfoEntry, hpnicfIfQoSPortWredPreRowStatus=hpnicfIfQoSPortWredPreRowStatus, hpnicfQoSIfTraStaRunDirection=hpnicfQoSIfTraStaRunDirection, PYSNMP_MODULE_ID=hpnicfIfQos2, hpnicfIfQoSAggregativeCarIndex=hpnicfIfQoSAggregativeCarIndex, hpnicfIfQoSFIFODiscardPackets=hpnicfIfQoSFIFODiscardPackets, hpnicfIfQoSWredDropPkts=hpnicfIfQoSWredDropPkts, hpnicfIfQoSWFQDiscardPackets=hpnicfIfQoSWFQDiscardPackets, hpnicfQoSTraStaRunGroup=hpnicfQoSTraStaRunGroup, hpnicfIfQoSPrePriMapTableDirection=hpnicfIfQoSPrePriMapTableDirection, hpnicfIfQoSGTSRunInfoEntry=hpnicfIfQoSGTSRunInfoEntry, hpnicfIfQoSCQClassRuleQueueID=hpnicfIfQoSCQClassRuleQueueID, hpnicfIfQoSPQQueueLengthValue=hpnicfIfQoSPQQueueLengthValue, hpnicfIfQoSCQRunInfoLength=hpnicfIfQoSCQRunInfoLength, hpnicfIfQoSDropBytes=hpnicfIfQoSDropBytes, hpnicfIfQoSTricolorCarRedActionValue=hpnicfIfQoSTricolorCarRedActionValue, hpnicfIfQoSQSValue=hpnicfIfQoSQSValue, hpnicfIfQoSBandwidthGroup=hpnicfIfQoSBandwidthGroup, hpnicfIfQosWFQhashedTotalQueues=hpnicfIfQosWFQhashedTotalQueues, hpnicfIfQoSWREDObjects=hpnicfIfQoSWREDObjects, hpnicfIfQoSCQObject=hpnicfIfQoSCQObject, hpnicfIfQoSPassPackets=hpnicfIfQoSPassPackets, hpnicfIfQoSAggregativeCarRunInfoTable=hpnicfIfQoSAggregativeCarRunInfoTable, hpnicfQoSRemarkTcpPortRowStatus=hpnicfQoSRemarkTcpPortRowStatus, hpnicfIfQoSPortWredWeightConstant=hpnicfIfQoSPortWredWeightConstant, hpnicfIfQoSPQLength=hpnicfIfQoSPQLength, hpnicfIfQoSSoftwareQueueObjects=hpnicfIfQoSSoftwareQueueObjects, hpnicfIfQoSWredGroupContentSubIndex=hpnicfIfQoSWredGroupContentSubIndex, hpnicfIfQoSHardwareQueueRunInfoGroup=hpnicfIfQoSHardwareQueueRunInfoGroup, hpnicfQoSRemarkIPv4AddrRowStatus=hpnicfQoSRemarkIPv4AddrRowStatus, hpnicfIfQoSAggregativeCarGreenPackets=hpnicfIfQoSAggregativeCarGreenPackets, hpnicfIfQoSTricolorCarGreenActionType=hpnicfIfQoSTricolorCarGreenActionType, hpnicfIfQoSAggregativeCarName=hpnicfIfQoSAggregativeCarName, hpnicfIfQoSCQApplyRowStatus=hpnicfIfQoSCQApplyRowStatus, hpnicfIfQoSWredDropHPreNTcpBPS=hpnicfIfQoSWredDropHPreNTcpBPS, hpnicfIfQoSWredGroupExponent=hpnicfIfQoSWredGroupExponent, hpnicfIfQoSPortWredPreHighLimit=hpnicfIfQoSPortWredPreHighLimit, hpnicfIfQoSPassBytes=hpnicfIfQoSPassBytes, hpnicfIfQoSQmtokenGroup=hpnicfIfQoSQmtokenGroup, hpnicfQoSRemarkTcpPortPriEntry=hpnicfQoSRemarkTcpPortPriEntry, hpnicfIfQoSAggregativeCarConfigTable=hpnicfIfQoSAggregativeCarConfigTable, hpnicfIfQoSBandwidthRowStatus=hpnicfIfQoSBandwidthRowStatus, hpnicfQoSRemarkUdpPortDscp=hpnicfQoSRemarkUdpPortDscp, hpnicfIfQoSPQClassRuleValue=hpnicfIfQoSPQClassRuleValue, hpnicfIfQoSCQApplyTable=hpnicfIfQoSCQApplyTable, hpnicfIfQoSPrePriMapTableType=hpnicfIfQoSPrePriMapTableType, hpnicfIfQoSQSWeightTable=hpnicfIfQoSQSWeightTable, hpnicfIfQoSGTSPassedPackets=hpnicfIfQoSGTSPassedPackets, hpnicfIfQoSTricolorCarYellowActionType=hpnicfIfQoSTricolorCarYellowActionType, hpnicfQoSIfTraStaRunInfoEntry=hpnicfQoSIfTraStaRunInfoEntry, hpnicfIfQoSPortPriorityTrustOvercastType=hpnicfIfQoSPortPriorityTrustOvercastType, hpnicfIfQoSRTPQStartPort=hpnicfIfQoSRTPQStartPort, hpnicfQoSRemarkUdpPortType=hpnicfQoSRemarkUdpPortType, hpnicfIfQoSWFQTable=hpnicfIfQoSWFQTable, hpnicfIfQoSWREDRandomDropNum=hpnicfIfQoSWREDRandomDropNum, hpnicfIfQoSWFQLength=hpnicfIfQoSWFQLength, hpnicfIfQoSWredDropBytes=hpnicfIfQoSWredDropBytes, hpnicfQoSRemarkUdpPortPriTable=hpnicfQoSRemarkUdpPortPriTable, hpnicfIfQoSPassPPS=hpnicfIfQoSPassPPS, hpnicfIfQoSLRCir=hpnicfIfQoSLRCir, hpnicfIfQoSCQConfigGroup=hpnicfIfQoSCQConfigGroup, hpnicfQoSRemarkIPv6AddrPriTable=hpnicfQoSRemarkIPv6AddrPriTable, hpnicfQoSRemarkVlanDscp=hpnicfQoSRemarkVlanDscp, hpnicfIfQoSPriMapContentRowStatus=hpnicfIfQoSPriMapContentRowStatus, hpnicfIfQoSHardwareQueueConfigGroup=hpnicfIfQoSHardwareQueueConfigGroup, hpnicfIfQoSPortPriorityValue=hpnicfIfQoSPortPriorityValue, hpnicfIfQoSAggregativeCarYellowPackets=hpnicfIfQoSAggregativeCarYellowPackets, hpnicfIfQoSTricolorCarYellowBytes=hpnicfIfQoSTricolorCarYellowBytes, hpnicfIfQoSWredDropHPreTcpBytes=hpnicfIfQoSWredDropHPreTcpBytes, hpnicfIfQoSTricolorCarGreenActionValue=hpnicfIfQoSTricolorCarGreenActionValue, hpnicfIfQoSPriMapContentTable=hpnicfIfQoSPriMapContentTable, hpnicfIfQoSGTSConfigRowStatus=hpnicfIfQoSGTSConfigRowStatus, hpnicfIfQoSWFQHashedActiveQueues=hpnicfIfQoSWFQHashedActiveQueues, hpnicfIfQoSPQType=hpnicfIfQoSPQType, hpnicfIfQoSQmtokenNumber=hpnicfIfQoSQmtokenNumber, hpnicfIfQoSGTSConfigTable=hpnicfIfQoSGTSConfigTable, hpnicfIfQoSRTPQRunInfoTable=hpnicfIfQoSRTPQRunInfoTable, hpnicfIfQoSGTSConfigEntry=hpnicfIfQoSGTSConfigEntry, hpnicfIfQoSWredGroupIndex=hpnicfIfQoSWredGroupIndex, hpnicfIfQoSCarlParaValue=hpnicfIfQoSCarlParaValue, hpnicfIfQoSPQDiscardPackets=hpnicfIfQoSPQDiscardPackets, hpnicfIfQoSPortWredEnable=hpnicfIfQoSPortWredEnable, hpnicfIfQoSWredDropLPreNTcpPkts=hpnicfIfQoSWredDropLPreNTcpPkts, hpnicfIfQoSPortWredRunInfoEntry=hpnicfIfQoSPortWredRunInfoEntry, hpnicfIfQoSHardwareQueueRunInfoEntry=hpnicfIfQoSHardwareQueueRunInfoEntry, hpnicfIfQoSQSModeEntry=hpnicfIfQoSQSModeEntry, hpnicfIfQoSWredDropHPreTcpPkts=hpnicfIfQoSWredDropHPreTcpPkts, hpnicfIfQoSPQQueueLengthType=hpnicfIfQoSPQQueueLengthType, hpnicfIfQoSPQObject=hpnicfIfQoSPQObject, hpnicfQoSRemarkUdpPortStart=hpnicfQoSRemarkUdpPortStart, hpnicfIfQoSTailDropBytes=hpnicfIfQoSTailDropBytes, hpnicfIfQoSQSModeTable=hpnicfIfQoSQSModeTable, hpnicfIfQoSAggregativeCarCbs=hpnicfIfQoSAggregativeCarCbs, hpnicfIfQoSTricolorCarValue=hpnicfIfQoSTricolorCarValue, hpnicfIfQoSWredDropHPreNTcpBytes=hpnicfIfQoSWredDropHPreNTcpBytes, hpnicfIfQoSRTPQPacketNumber=hpnicfIfQoSRTPQPacketNumber, Direction=Direction, hpnicfIfQoSPQQueueLengthEntry=hpnicfIfQoSPQQueueLengthEntry, hpnicfIfQoSPriMapGroupExportValue=hpnicfIfQoSPriMapGroupExportValue, hpnicfIfQoSQSType=hpnicfIfQoSQSType, hpnicfIfQoSPortWredPreConfigTable=hpnicfIfQoSPortWredPreConfigTable, hpnicfIfQoSCARObjects=hpnicfIfQoSCARObjects, hpnicfQoSRemarkTcpPortStart=hpnicfQoSRemarkTcpPortStart, hpnicfIfQoSPriMapGroupType=hpnicfIfQoSPriMapGroupType, hpnicfIfQoSAggregativeCarEbs=hpnicfIfQoSAggregativeCarEbs, hpnicfIfQoSPQClassRowStatus=hpnicfIfQoSPQClassRowStatus, hpnicfIfQoSAggregativeCarPir=hpnicfIfQoSAggregativeCarPir, hpnicfIfQoSAggregativeCarRedActionType=hpnicfIfQoSAggregativeCarRedActionType, hpnicfIfQoSWredGroupRowStatus=hpnicfIfQoSWredGroupRowStatus, hpnicfIfQoSAggregativeCarRunInfoEntry=hpnicfIfQoSAggregativeCarRunInfoEntry, hpnicfQoSRemarkVlanEnd=hpnicfQoSRemarkVlanEnd, hpnicfIfQoSWFQRowStatus=hpnicfIfQoSWFQRowStatus, hpnicfIfQoSReservedBandwidthPct=hpnicfIfQoSReservedBandwidthPct, hpnicfIfQoSPriMapContentEntry=hpnicfIfQoSPriMapContentEntry, hpnicfIfQoSPrePriMapEntry=hpnicfIfQoSPrePriMapEntry, hpnicfIfQoSCQApplyEntry=hpnicfIfQoSCQApplyEntry, hpnicfIfQoSTricolorCarConfigEntry=hpnicfIfQoSTricolorCarConfigEntry, hpnicfQoSIfTraStaConfigQueue=hpnicfQoSIfTraStaConfigQueue, hpnicfIfQoSPQClassRuleType=hpnicfIfQoSPQClassRuleType, hpnicfIfQoSAggregativeCarApplyRuleValue=hpnicfIfQoSAggregativeCarApplyRuleValue, hpnicfIfQoSTricolorCarYellowActionValue=hpnicfIfQoSTricolorCarYellowActionValue, hpnicfQoSRemarkVlanPriTable=hpnicfQoSRemarkVlanPriTable, hpnicfIfQoSPortPriorityObjects=hpnicfIfQoSPortPriorityObjects, hpnicfIfQoSAggregativeCarType=hpnicfIfQoSAggregativeCarType, hpnicfIfQoSQueueID=hpnicfIfQoSQueueID, hpnicfIfQoSLRRunInfoActiveShaping=hpnicfIfQoSLRRunInfoActiveShaping, hpnicfIfQoSWredGroupTable=hpnicfIfQoSWredGroupTable, hpnicfIfQoSWredLowLimit=hpnicfIfQoSWredLowLimit, hpnicfIfQoSRowStatus=hpnicfIfQoSRowStatus, hpnicfIfQoSTricolorCarRedActionType=hpnicfIfQoSTricolorCarRedActionType, hpnicfIfQoSWredGroupApplyName=hpnicfIfQoSWredGroupApplyName, hpnicfIfQoSRTPQObject=hpnicfIfQoSRTPQObject, hpnicfIfQoSWredDropHPreNTcpPPS=hpnicfIfQoSWredDropHPreNTcpPPS, hpnicfIfQoSHardwareQueueRunInfoTable=hpnicfIfQoSHardwareQueueRunInfoTable, hpnicfIfQoSWredDropLPreTcpPkts=hpnicfIfQoSWredDropLPreTcpPkts, hpnicfIfQoSPQDefaultEntry=hpnicfIfQoSPQDefaultEntry, hpnicfIfQoSTricolorCarGreenBytes=hpnicfIfQoSTricolorCarGreenBytes, hpnicfIfQoSPortWredPreConfigEntry=hpnicfIfQoSPortWredPreConfigEntry, hpnicfQoSRemarkTcpPortPriTable=hpnicfQoSRemarkTcpPortPriTable, hpnicfIfQoSLRDirection=hpnicfIfQoSLRDirection, hpnicfIfQoSLRRunInfoEntry=hpnicfIfQoSLRRunInfoEntry, hpnicfIfQoSTricolorCarYellowPackets=hpnicfIfQoSTricolorCarYellowPackets, hpnicfIfQoSGTSDelayedPackets=hpnicfIfQoSGTSDelayedPackets, hpnicfQoSRemarkIPv6AddrValue=hpnicfQoSRemarkIPv6AddrValue, hpnicfIfQoSCarlRowStatus=hpnicfIfQoSCarlRowStatus, hpnicfQoSIfTraStaConfigVlan=hpnicfQoSIfTraStaConfigVlan, hpnicfQoSRemarkIPv6AddrDscp=hpnicfQoSRemarkIPv6AddrDscp, hpnicfIfQoSTricolorCarCbs=hpnicfIfQoSTricolorCarCbs, hpnicfIfQoSPortWredWeightConstantTable=hpnicfIfQoSPortWredWeightConstantTable, hpnicfIfQoSPortWredRunInfoTable=hpnicfIfQoSPortWredRunInfoTable, hpnicfIfQoSHQueueTcpRunInfoEntry=hpnicfIfQoSHQueueTcpRunInfoEntry, hpnicfIfQoSLREbs=hpnicfIfQoSLREbs, hpnicfIfQoSLRRunInfoDelayedPackets=hpnicfIfQoSLRRunInfoDelayedPackets, hpnicfQoSRemarkProtocolPriEntry=hpnicfQoSRemarkProtocolPriEntry, hpnicfIfQoSCQQueueLength=hpnicfIfQoSCQQueueLength, hpnicfIfQoSWFQConfigGroup=hpnicfIfQoSWFQConfigGroup, hpnicfIfQoSWredGroupContentEntry=hpnicfIfQoSWredGroupContentEntry, hpnicfIfQoSGTSQueueSize=hpnicfIfQoSGTSQueueSize, hpnicfIfQoSPQRunInfoGroup=hpnicfIfQoSPQRunInfoGroup, hpnicfIfQoSCQDefaultEntry=hpnicfIfQoSCQDefaultEntry, hpnicfQoSRemarkProtocolValue=hpnicfQoSRemarkProtocolValue, hpnicfQoSRemarkIPv6AddrPriEntry=hpnicfQoSRemarkIPv6AddrPriEntry, hpnicfIfQoSLRPir=hpnicfIfQoSLRPir, hpnicfIfQoSWredDiscardProb=hpnicfIfQoSWredDiscardProb, hpnicfIfQoSCarlListNum=hpnicfIfQoSCarlListNum, hpnicfQoSRemarkVlanRowStatus=hpnicfQoSRemarkVlanRowStatus, hpnicfIfQoSTailDropPkts=hpnicfIfQoSTailDropPkts, hpnicfIfQoSWredDropLPreTcpBPS=hpnicfIfQoSWredDropLPreTcpBPS, hpnicfIfQoSQueueLengthInPkts=hpnicfIfQoSQueueLengthInPkts, hpnicfIfQoSPQApplyEntry=hpnicfIfQoSPQApplyEntry, hpnicfIfQoSGTSCir=hpnicfIfQoSGTSCir, hpnicfIfQoSBandwidthTable=hpnicfIfQoSBandwidthTable, hpnicfIfQoSPortPirorityTrustEntry=hpnicfIfQoSPortPirorityTrustEntry, hpnicfQoSTypeOfServiceMode=hpnicfQoSTypeOfServiceMode, hpnicfIfQoSPQClassRuleTable=hpnicfIfQoSPQClassRuleTable, hpnicfIfQoSWredApplyIfRunInfoTable=hpnicfIfQoSWredApplyIfRunInfoTable, hpnicfIfQoSFIFORunInfoEntry=hpnicfIfQoSFIFORunInfoEntry, hpnicfIfQos2=hpnicfIfQos2, hpnicfQoSIfTraStaConfigInfoTable=hpnicfQoSIfTraStaConfigInfoTable, hpnicfIfQoSWredDropHPreNTcpPkts=hpnicfIfQoSWredDropHPreNTcpPkts, hpnicfQoSRemarkUdpPortRowStatus=hpnicfQoSRemarkUdpPortRowStatus, hpnicfQoSRemarkTcpPortType=hpnicfQoSRemarkTcpPortType, PriorityQueue=PriorityQueue, hpnicfIfQoSCarlTable=hpnicfIfQoSCarlTable, hpnicfIfQoSLRConfigEntry=hpnicfIfQoSLRConfigEntry, hpnicfIfQoSPortPirorityTrustTable=hpnicfIfQoSPortPirorityTrustTable, hpnicfIfQoSAggregativeCarYellowActionValue=hpnicfIfQoSAggregativeCarYellowActionValue, hpnicfIfQoSAggregativeCarApplyTable=hpnicfIfQoSAggregativeCarApplyTable, hpnicfIfQoSPQSize=hpnicfIfQoSPQSize, hpnicfIfQoSQmtokenTable=hpnicfIfQoSQmtokenTable, hpnicfIfQoSQSMinBandwidth=hpnicfIfQoSQSMinBandwidth, hpnicfIfQoSCurQueuePPS=hpnicfIfQoSCurQueuePPS, hpnicfQoSRemarkUdpPortDot1p=hpnicfQoSRemarkUdpPortDot1p, hpnicfIfQoSPortBindingEntry=hpnicfIfQoSPortBindingEntry, hpnicfIfQoSPriMapGroupName=hpnicfIfQoSPriMapGroupName, hpnicfIfQoSPQClassRuleQueueType=hpnicfIfQoSPQClassRuleQueueType, hpnicfIfQoSPortBindingGroup=hpnicfIfQoSPortBindingGroup, hpnicfIfQoSPriMapConfigGroup=hpnicfIfQoSPriMapConfigGroup, hpnicfIfQoSPQQueueLengthTable=hpnicfIfQoSPQQueueLengthTable, hpnicfIfQoSCQApplyListNumber=hpnicfIfQoSCQApplyListNumber, hpnicfIfQoSAggregativeCarApplyRuleType=hpnicfIfQoSAggregativeCarApplyRuleType, hpnicfIfQoSTricolorCarRedPackets=hpnicfIfQoSTricolorCarRedPackets, hpnicfQoSRemarkIPv4AddrDot1p=hpnicfQoSRemarkIPv4AddrDot1p, hpnicfIfQoSFIFOMaxQueueLen=hpnicfIfQoSFIFOMaxQueueLen, hpnicfIfQoSPrePriMapTable=hpnicfIfQoSPrePriMapTable, hpnicfIfQoSPQDefaultTable=hpnicfIfQoSPQDefaultTable, hpnicfQoSRemarkIPv4AddrMask=hpnicfQoSRemarkIPv4AddrMask, hpnicfIfQoSTricolorCarRunInfoEntry=hpnicfIfQoSTricolorCarRunInfoEntry, hpnicfIfQoSPortPriorityTable=hpnicfIfQoSPortPriorityTable, hpnicfQoSIfTraStaRunPassBPS=hpnicfQoSIfTraStaRunPassBPS, hpnicfIfQoSFIFOSize=hpnicfIfQoSFIFOSize, hpnicfIfQoSWFQRunInfoTable=hpnicfIfQoSWFQRunInfoTable, hpnicfQoSIfTraStaConfigStatus=hpnicfQoSIfTraStaConfigStatus, hpnicfIfQoSFIFORunInfoTable=hpnicfIfQoSFIFORunInfoTable, hpnicfIfQoSCQQueueID=hpnicfIfQoSCQQueueID, hpnicfIfQoSBindingIf=hpnicfIfQoSBindingIf, hpnicfIfQoSLRCbs=hpnicfIfQoSLRCbs, hpnicfIfQoSCQClassRuleType=hpnicfIfQoSCQClassRuleType, hpnicfIfQoSCQQueueServing=hpnicfIfQoSCQQueueServing, hpnicfQoSIfTraStaConfigInfoEntry=hpnicfQoSIfTraStaConfigInfoEntry, hpnicfIfQoSWredPreTailDropNum=hpnicfIfQoSWredPreTailDropNum, hpnicfIfQoSRTPQPacketSize=hpnicfIfQoSRTPQPacketSize, hpnicfIfQoSPortWredPreDiscardProbability=hpnicfIfQoSPortWredPreDiscardProbability, hpnicfIfQoSCurQueueBPS=hpnicfIfQoSCurQueueBPS, hpnicfIfQoSHQueueTcpRunInfoTable=hpnicfIfQoSHQueueTcpRunInfoTable, hpnicfIfQoSCQRunInfoGroup=hpnicfIfQoSCQRunInfoGroup, hpnicfIfQoSPortWredWeightConstantRowStatus=hpnicfIfQoSPortWredWeightConstantRowStatus, hpnicfQoSIfTraStaRunPassBytes=hpnicfQoSIfTraStaRunPassBytes, hpnicfIfQoSWredGroupApplyIfEntry=hpnicfIfQoSWredGroupApplyIfEntry, hpnicfIfQoSAggregativeCarApplyDirection=hpnicfIfQoSAggregativeCarApplyDirection, hpnicfIfQoSTricolorCarGreenPackets=hpnicfIfQoSTricolorCarGreenPackets, hpnicfIfQoCarListGroup=hpnicfIfQoCarListGroup, hpnicfIfQoSRTPQConfigGroup=hpnicfIfQoSRTPQConfigGroup, hpnicfIfQoSAggregativeCarRedBytes=hpnicfIfQoSAggregativeCarRedBytes, hpnicfIfQoSAggregativeCarGroup=hpnicfIfQoSAggregativeCarGroup, hpnicfIfQoSRTPQReservedBandwidth=hpnicfIfQoSRTPQReservedBandwidth, hpnicfQoSRemarkIPv6AddrPrefixLength=hpnicfQoSRemarkIPv6AddrPrefixLength, hpnicfIfQoSWFQEntry=hpnicfIfQoSWFQEntry)
mibBuilder.exportSymbols("HPN-ICF-IFQOS2-MIB", hpnicfIfQoSCQRunInfoSize=hpnicfIfQoSCQRunInfoSize, hpnicfIfQoSWredGroupContentIndex=hpnicfIfQoSWredGroupContentIndex, hpnicfIfQoSPriMapGroupEntry=hpnicfIfQoSPriMapGroupEntry, hpnicfIfQoSWredDropLPreNTcpBytes=hpnicfIfQoSWredDropLPreNTcpBytes, hpnicfQoSIfTraStaConfigDirection=hpnicfQoSIfTraStaConfigDirection, hpnicfIfQoSPortPriorityEntry=hpnicfIfQoSPortPriorityEntry, hpnicfIfQoSAggregativeCarApplyCarIndex=hpnicfIfQoSAggregativeCarApplyCarIndex, hpnicfIfQoSQSMode=hpnicfIfQoSQSMode, hpnicfIfQoSWFQRunInfoGroup=hpnicfIfQoSWFQRunInfoGroup, hpnicfIfQoSAggregativeCarCir=hpnicfIfQoSAggregativeCarCir, hpnicfIfQoSQmtokenRosStatus=hpnicfIfQoSQmtokenRosStatus, hpnicfIfQoSAggregativeCarRedPackets=hpnicfIfQoSAggregativeCarRedPackets, hpnicfQoSTypeOfServiceObjects=hpnicfQoSTypeOfServiceObjects, hpnicfIfQoSTricolorCarRowStatus=hpnicfIfQoSTricolorCarRowStatus, hpnicfIfQoSPQApplyTable=hpnicfIfQoSPQApplyTable, hpnicfIfQoSCQDefaultQueueID=hpnicfIfQoSCQDefaultQueueID, hpnicfIfQoSGTSPassedBytes=hpnicfIfQoSGTSPassedBytes, hpnicfIfQoSPriMapGroupRowStatus=hpnicfIfQoSPriMapGroupRowStatus, hpnicfIfQoSWredDropHPreTcpPPS=hpnicfIfQoSWredDropHPreTcpPPS, hpnicfIfQoSWFQQueueNumber=hpnicfIfQoSWFQQueueNumber, hpnicfIfQoSCurQueueBytes=hpnicfIfQoSCurQueueBytes, hpnicfIfQoSPriMapGroupImportValue=hpnicfIfQoSPriMapGroupImportValue, hpnicfIfQoSCQClassRuleValue=hpnicfIfQoSCQClassRuleValue, hpnicfIfQoSWredGroupWeightingConstant=hpnicfIfQoSWredGroupWeightingConstant, hpnicfIfQoSQueueLengthInBytes=hpnicfIfQoSQueueLengthInBytes, hpnicfIfQoSWredDropBPS=hpnicfIfQoSWredDropBPS, hpnicfIfQoSAggregativeCarNextIndex=hpnicfIfQoSAggregativeCarNextIndex, hpnicfQoSRemarkTcpPortEnd=hpnicfQoSRemarkTcpPortEnd, hpnicfIfQoSAggregativeCarYellowActionType=hpnicfIfQoSAggregativeCarYellowActionType, hpnicfIfQoSCQQueueLengthTable=hpnicfIfQoSCQQueueLengthTable, hpnicfQoSRemarkIPv4AddrValue=hpnicfQoSRemarkIPv4AddrValue, hpnicfIfQoSPQClassRuleEntry=hpnicfIfQoSPQClassRuleEntry, hpnicfIfQoSWredApplyIfRunInfoEntry=hpnicfIfQoSWredApplyIfRunInfoEntry, hpnicfIfQoSWFQQueueLength=hpnicfIfQoSWFQQueueLength, hpnicfIfQoSFIFOConfigEntry=hpnicfIfQoSFIFOConfigEntry, hpnicfIfQoSCQRunInfoDiscardPackets=hpnicfIfQoSCQRunInfoDiscardPackets, hpnicfIfQoSGTSQueueLength=hpnicfIfQoSGTSQueueLength, hpnicfIfQoSWFQObject=hpnicfIfQoSWFQObject, hpnicfQoSIfTraStaConfigDot1p=hpnicfQoSIfTraStaConfigDot1p, hpnicfIfQoSWredDropLPreNTcpBPS=hpnicfIfQoSWredDropLPreNTcpBPS, hpnicfQoSRemarkIPv4AddrPriTable=hpnicfQoSRemarkIPv4AddrPriTable, hpnicfIfQoSQmtokenEntry=hpnicfIfQoSQmtokenEntry, hpnicfIfQoSCQQueueLengthEntry=hpnicfIfQoSCQQueueLengthEntry, hpnicfIfQoSAggregativeCarRedActionValue=hpnicfIfQoSAggregativeCarRedActionValue, hpnicfIfQoSWredGroupType=hpnicfIfQoSWredGroupType, hpnicfIfQoSCQListNumber=hpnicfIfQoSCQListNumber, hpnicfQoSRemarkProtocolRowStatus=hpnicfQoSRemarkProtocolRowStatus, hpnicfIfQoSTailDropBPS=hpnicfIfQoSTailDropBPS, hpnicfIfQoSTailDropPPS=hpnicfIfQoSTailDropPPS, hpnicfQoSTraStaConfigGroup=hpnicfQoSTraStaConfigGroup, hpnicfIfQoSWFQRunInfoEntry=hpnicfIfQoSWFQRunInfoEntry, hpnicfIfQoSGTSEbs=hpnicfIfQoSGTSEbs, hpnicfIfQoSPriMapGroupNextIndex=hpnicfIfQoSPriMapGroupNextIndex, hpnicfIfQoSPortWredGroup=hpnicfIfQoSPortWredGroup, hpnicfIfQoSTricolorCarRunInfoTable=hpnicfIfQoSTricolorCarRunInfoTable, hpnicfIfQoSWredGroupEntry=hpnicfIfQoSWredGroupEntry, hpnicfQoSRemarkIPv4AddrPriEntry=hpnicfQoSRemarkIPv4AddrPriEntry, hpnicfIfQoSWredRowStatus=hpnicfIfQoSWredRowStatus, hpnicfQoSRemarkVlanStart=hpnicfQoSRemarkVlanStart, hpnicfIfQoSRTPQConfigEntry=hpnicfIfQoSRTPQConfigEntry, hpnicfIfQoSGTSClassRuleType=hpnicfIfQoSGTSClassRuleType, hpnicfIfQoSWredGroupGroup=hpnicfIfQoSWredGroupGroup, hpnicfIfQoSTricolorCarCir=hpnicfIfQoSTricolorCarCir, hpnicfQoSIfTraStaRunDropBytes=hpnicfQoSIfTraStaRunDropBytes, hpnicfIfQoSWredGroupNextIndex=hpnicfIfQoSWredGroupNextIndex, hpnicfIfQoSWREDTailDropNum=hpnicfIfQoSWREDTailDropNum, hpnicfIfQoSPQDefaultQueueType=hpnicfIfQoSPQDefaultQueueType, hpnicfQoSRemarkTcpPortDot1p=hpnicfQoSRemarkTcpPortDot1p, hpnicfIfQoSWredHighLimit=hpnicfIfQoSWredHighLimit, hpnicfIfQoSAggregativeCarGreenBytes=hpnicfIfQoSAggregativeCarGreenBytes, hpnicfIfQoSPortWredPreLowLimit=hpnicfIfQoSPortWredPreLowLimit, hpnicfQos2=hpnicfQos2, hpnicfIfQoSPassBPS=hpnicfIfQoSPassBPS, hpnicfIfQoSTricolorCarConfigTable=hpnicfIfQoSTricolorCarConfigTable, hpnicfIfQoSRTPQRunInfoGroup=hpnicfIfQoSRTPQRunInfoGroup, hpnicfIfQoSTricolorCarPir=hpnicfIfQoSTricolorCarPir, hpnicfIfQoSGTSCbs=hpnicfIfQoSGTSCbs, hpnicfIfQoSMaxBandwidth=hpnicfIfQoSMaxBandwidth, hpnicfIfQoSGTSClassRuleValue=hpnicfIfQoSGTSClassRuleValue, hpnicfQoSIfTraStaRunPassPackets=hpnicfQoSIfTraStaRunPassPackets, hpnicfIfQoSGTSDiscardPackets=hpnicfIfQoSGTSDiscardPackets, hpnicfIfQoSQSMinBandwidthPercent=hpnicfIfQoSQSMinBandwidthPercent, hpnicfIfQoSLRRunInfoTable=hpnicfIfQoSLRRunInfoTable, hpnicfIfQoSRTPQDiscardPackets=hpnicfIfQoSRTPQDiscardPackets, hpnicfIfQoSWredPreRandomDropNum=hpnicfIfQoSWredPreRandomDropNum, hpnicfIfQoSLRRunInfoDelayedBytes=hpnicfIfQoSLRRunInfoDelayedBytes, hpnicfIfQoSLRUnit=hpnicfIfQoSLRUnit, CarAction=CarAction, hpnicfIfQoSWredDropHPreTcpBPS=hpnicfIfQoSWredDropHPreTcpBPS, hpnicfIfQoSPortWredPreID=hpnicfIfQoSPortWredPreID, hpnicfIfQoSWredGroupApplyIfTable=hpnicfIfQoSWredGroupApplyIfTable, hpnicfIfQoSCQDefaultTable=hpnicfIfQoSCQDefaultTable, hpnicfQoSRemarkVlanDot1p=hpnicfQoSRemarkVlanDot1p, hpnicfIfQoSLRRunInfoPassedPackets=hpnicfIfQoSLRRunInfoPassedPackets, hpnicfIfQoSWredDropLPreTcpPPS=hpnicfIfQoSWredDropLPreTcpPPS, hpnicfIfQoSPQApplyListNumber=hpnicfIfQoSPQApplyListNumber, hpnicfIfQoSCQRunInfoEntry=hpnicfIfQoSCQRunInfoEntry, hpnicfIfQoSL3PlusObjects=hpnicfIfQoSL3PlusObjects, hpnicfIfQoSWFQHashedMaxActiveQueues=hpnicfIfQoSWFQHashedMaxActiveQueues, hpnicfIfQoSWredDropLPreTcpBytes=hpnicfIfQoSWredDropLPreTcpBytes, hpnicfIfQoSAggregativeCarYellowBytes=hpnicfIfQoSAggregativeCarYellowBytes, hpnicfIfQoSCQClassRowStatus=hpnicfIfQoSCQClassRowStatus, hpnicfIfQoSLineRateObjects=hpnicfIfQoSLineRateObjects, hpnicfIfQoSPortWredWeightConstantEntry=hpnicfIfQoSPortWredWeightConstantEntry, hpnicfIfQoSWredGroupName=hpnicfIfQoSWredGroupName, hpnicfIfQoSQSWeightEntry=hpnicfIfQoSQSWeightEntry, hpnicfIfQoSRTPQConfigTable=hpnicfIfQoSRTPQConfigTable, hpnicfIfQoSPortPriorityConfigGroup=hpnicfIfQoSPortPriorityConfigGroup, hpnicfIfQoSPriMapGroupTable=hpnicfIfQoSPriMapGroupTable, hpnicfIfQoSWredDropPPS=hpnicfIfQoSWredDropPPS, hpnicfIfQoSPQApplyRowStatus=hpnicfIfQoSPQApplyRowStatus, hpnicfIfQoSWredGroupContentTable=hpnicfIfQoSWredGroupContentTable, hpnicfIfQoSAggregativeCarApplyEntry=hpnicfIfQoSAggregativeCarApplyEntry, hpnicfQoSRemarkProtocolPriTable=hpnicfQoSRemarkProtocolPriTable, hpnicfIfQoSPrePriMapTableColor=hpnicfIfQoSPrePriMapTableColor, hpnicfIfQoSTricolorCarDirection=hpnicfIfQoSTricolorCarDirection, hpnicfIfQoSFIFOObject=hpnicfIfQoSFIFOObject, hpnicfIfQoSAggregativeCarConfigEntry=hpnicfIfQoSAggregativeCarConfigEntry, hpnicfIfQoSGTSDelayedBytes=hpnicfIfQoSGTSDelayedBytes, hpnicfIfQoSCQClassRuleEntry=hpnicfIfQoSCQClassRuleEntry, hpnicfQoSGlobalPriorityObject=hpnicfQoSGlobalPriorityObject, hpnicfQoSRemarkVlanPriEntry=hpnicfQoSRemarkVlanPriEntry, hpnicfIfQoSPrePriMapTableImportValue=hpnicfIfQoSPrePriMapTableImportValue, hpnicfIfQoSCQRunInfoTable=hpnicfIfQoSCQRunInfoTable, hpnicfQoSRemarkUdpPortPriEntry=hpnicfQoSRemarkUdpPortPriEntry, hpnicfIfQoSTricolorCarEbs=hpnicfIfQoSTricolorCarEbs, hpnicfIfQoSRTPQOutputPackets=hpnicfIfQoSRTPQOutputPackets, hpnicfIfQoSLRRunInfoPassedBytes=hpnicfIfQoSLRRunInfoPassedBytes, hpnicfIfQoSCarlEntry=hpnicfIfQoSCarlEntry, hpnicfIfQoSPQRunInfoTable=hpnicfIfQoSPQRunInfoTable, hpnicfIfQoSCQClassRuleTable=hpnicfIfQoSCQClassRuleTable, hpnicfIfQoSCarListObject=hpnicfIfQoSCarListObject, hpnicfIfQoSPortPriorityTrustTrustType=hpnicfIfQoSPortPriorityTrustTrustType, hpnicfIfQoSWredDropLPreNTcpPPS=hpnicfIfQoSWredDropLPreNTcpPPS, hpnicfQoSRemarkIPv6AddrRowStatus=hpnicfQoSRemarkIPv6AddrRowStatus, hpnicfIfQoSTricolorCarGroup=hpnicfIfQoSTricolorCarGroup, hpnicfIfQoSPortBindingTable=hpnicfIfQoSPortBindingTable, hpnicfIfQoSCurQueuePkts=hpnicfIfQoSCurQueuePkts, hpnicfQoSRemarkUdpPortEnd=hpnicfQoSRemarkUdpPortEnd, hpnicfIfQoSAggregativeCarApplyRowStatus=hpnicfIfQoSAggregativeCarApplyRowStatus, hpnicfIfQoSFIFOConfigTable=hpnicfIfQoSFIFOConfigTable, hpnicfIfQoSBandwidthEntry=hpnicfIfQoSBandwidthEntry, hpnicfIfQoSRTPQRunInfoEntry=hpnicfIfQoSRTPQRunInfoEntry, hpnicfIfQoSPQConfigGroup=hpnicfIfQoSPQConfigGroup, hpnicfQoSIfTraStaRunObjectType=hpnicfQoSIfTraStaRunObjectType, hpnicfQoSRemarkIPv4AddrDscp=hpnicfQoSRemarkIPv4AddrDscp, hpnicfIfQoSHardwareQueueObjects=hpnicfIfQoSHardwareQueueObjects, hpnicfIfQoSPriMapGroupIndex=hpnicfIfQoSPriMapGroupIndex, hpnicfIfQoSWredGroupApplyIndex=hpnicfIfQoSWredGroupApplyIndex, hpnicfIfQoSGTSDiscardBytes=hpnicfIfQoSGTSDiscardBytes, hpnicfQoSIfTraStaRunObjectValue=hpnicfQoSIfTraStaRunObjectValue, hpnicfIfQoSCarlParaType=hpnicfIfQoSCarlParaType, hpnicfIfQoSRTPQRowStatus=hpnicfIfQoSRTPQRowStatus, hpnicfIfQoSQueueGroupType=hpnicfIfQoSQueueGroupType, hpnicfQoSRemarkProtocolDot1p=hpnicfQoSRemarkProtocolDot1p, hpnicfQoSIfTraStaRunDropPackets=hpnicfQoSIfTraStaRunDropPackets, hpnicfQoSRemarkTcpPortDscp=hpnicfQoSRemarkTcpPortDscp, hpnicfIfQoSWredGroupIfRowStatus=hpnicfIfQoSWredGroupIfRowStatus, hpnicfIfQoSGTSRunInfoTable=hpnicfIfQoSGTSRunInfoTable, hpnicfQoSIfTraStaRunInfoTable=hpnicfQoSIfTraStaRunInfoTable, hpnicfIfQoSQSMaxDelay=hpnicfIfQoSQSMaxDelay, hpnicfIfQoSDropPackets=hpnicfIfQoSDropPackets, hpnicfQoSTraStaObjects=hpnicfQoSTraStaObjects, hpnicfQoSIfTraStaConfigDscp=hpnicfQoSIfTraStaConfigDscp, hpnicfIfQoSWFQType=hpnicfIfQoSWFQType, hpnicfIfQoSWFQSize=hpnicfIfQoSWFQSize)
