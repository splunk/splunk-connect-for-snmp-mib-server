#
# PySNMP MIB module CISCO-CAS-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CAS-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:35:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CountryCode, = mibBuilder.importSymbols("CISCO-TC", "CountryCode")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter64, ObjectIdentity, TimeTicks, Gauge32, NotificationType, Integer32, Bits, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "TimeTicks", "Gauge32", "NotificationType", "Integer32", "Bits", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Counter32", "MibIdentifier")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
ciscoCasIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 85))
ciscoCasIfMIB.setRevisions(('2004-10-13 00:00', '2004-09-30 00:00', '2004-01-15 00:00', '2003-04-18 00:00', '2002-10-02 00:00', '1999-01-18 00:00',))
if mibBuilder.loadTexts: ciscoCasIfMIB.setLastUpdated('200410130000Z')
if mibBuilder.loadTexts: ciscoCasIfMIB.setOrganization('Cisco Systems, Inc.')
ccasIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1))
ccasDS1Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 1))
ccasGrpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2))
ccasChannelObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3))
ccasVoiceCfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4))
ccasXgcpCfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 5))
ccasGrpGeneralObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1))
ccasGrpEMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2))
ccasGrpLineObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3))
ccasGrpStaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4))
ccasGrpABCDObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 5))
ccasDs1IfCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 1, 1), )
if mibBuilder.loadTexts: ccasDs1IfCfgTable.setStatus('current')
ccasDs1IfCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ccasDs1IfCfgEntry.setStatus('current')
ccasDs1IfCfgDs0ChannelsConfigurable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasDs1IfCfgDs0ChannelsConfigurable.setStatus('current')
ccasGrpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1), )
if mibBuilder.loadTexts: ccasGrpCfgTable.setStatus('current')
ccasGrpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasGrpCfgEntry.setStatus('current')
ccasGrpCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)))
if mibBuilder.loadTexts: ccasGrpCfgIndex.setStatus('current')
ccasGrpCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("emWinkStart", 1), ("emWinkStartFgd", 2), ("emImmedStart", 3), ("emDelayDial", 4), ("fxsLoopStart", 5), ("fxsGroundStart", 6), ("sasLoopStart", 7), ("sasGroundStart", 8), ("r2Analog", 9), ("r2Digital", 10), ("r2Pulse", 11), ("p7", 12), ("fxoLoopStart", 13), ("fxoGroundStart", 14), ("fgdOS", 15), ("nullSignaling", 16), ("r1Itu", 17), ("r1Modified", 18), ("r1Turkey", 19), ("fgdEANA", 20), ("emMelImmedStart", 21), ("emMelWink", 22), ("emMelDelayDial", 23), ("fxsMelcas", 24), ("fxoMelcas", 25), ("extsig", 26), ("emLmr", 27))).clone('emWinkStart')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGrpCfgType.setStatus('current')
ccasGrpCfgDs0Channels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGrpCfgDs0Channels.setStatus('current')
ccasGrpCfgServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("casServSw56", 2), ("casServModem", 3), ("casServAuto", 4), ("sgcp", 5), ("mgcp", 6), ("other", 7), ("trunkingService", 8), ("h248", 9), ("ds0xconn", 10), ("xgcp", 11))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGrpCfgServiceType.setStatus('current')
ccasGrpCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ccasGrpCfgRowStatus.setStatus('current')
ccasGrpEMCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1), )
if mibBuilder.loadTexts: ccasGrpEMCfgTable.setStatus('current')
ccasGrpEMCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasGrpEMCfgEntry.setStatus('current')
ccasGrpEMCfgDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2), ("mf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMCfgDialType.setStatus('current')
ccasGrpEMCfgDnisAni = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1, 1, 2), Bits().clone(namedValues=NamedValues(("incomingDnis", 0), ("incomingAni", 1), ("outgoingDnis", 2), ("outgoingAni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMCfgDnisAni.setStatus('current')
ccasGrpEMCfgLmrMCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inact", 1), ("audio", 2), ("dial", 3))).clone('inact')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMCfgLmrMCap.setStatus('current')
ccasGrpEMCfgLmrECap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6))).clone(namedValues=NamedValues(("seize", 4), ("voice", 5), ("inactive", 6))).clone('seize')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMCfgLmrECap.setStatus('current')
ccasGrpEMCfgAutoGainControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMCfgAutoGainControl.setStatus('current')
ccasGrpEMTmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2), )
if mibBuilder.loadTexts: ccasGrpEMTmTable.setStatus('current')
ccasGrpEMTmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1), )
ccasGrpEMCfgEntry.registerAugmentions(("CISCO-CAS-IF-MIB", "ccasGrpEMTmEntry"))
ccasGrpEMTmEntry.setIndexNames(*ccasGrpEMCfgEntry.getIndexNames())
if mibBuilder.loadTexts: ccasGrpEMTmEntry.setStatus('current')
ccasGrpEMTmClearWaitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 2000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmClearWaitDuration.setStatus('current')
ccasGrpEMTmMaxWinkWaitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmMaxWinkWaitDuration.setStatus('current')
ccasGrpEMTmMaxWinkDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 3000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmMaxWinkDuration.setStatus('current')
ccasGrpEMTmDelayStart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 2000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmDelayStart.setStatus('current')
ccasGrpEMTmMaxDelayDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 5000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmMaxDelayDuration.setStatus('current')
ccasGrpEMTmMinDelayPulseWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(140, 5000), ))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmMinDelayPulseWidth.setStatus('current')
ccasGrpEMTmDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmDigitDuration.setStatus('current')
ccasGrpEMTmInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmInterDigitDuration.setStatus('current')
ccasGrpEMTmPulseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20))).setUnits('pulses per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmPulseRate.setStatus('current')
ccasGrpEMTmPulseInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmPulseInterDigitDuration.setStatus('current')
ccasGrpEMTmVoiceHangover = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmVoiceHangover.setStatus('current')
ccasGrpEMTmLmrTeardown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(5, 60000), )).clone(1800)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmLmrTeardown.setStatus('current')
ccasGrpEMTmPttXmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmPttXmt.setStatus('current')
ccasGrpEMTmPttRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpEMTmPttRcv.setStatus('current')
ccasGrpEMTmDelayVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasGrpEMTmDelayVoice.setStatus('current')
ccasGrpLineCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 1), )
if mibBuilder.loadTexts: ccasGrpLineCfgTable.setStatus('current')
ccasGrpLineCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasGrpLineCfgEntry.setStatus('current')
ccasGrpLineCfgNumberRings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setUnits('rings').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineCfgNumberRings.setStatus('current')
ccasGrpLineCfgSupDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineCfgSupDisconnect.setStatus('current')
ccasGrpLineCfgDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineCfgDialType.setStatus('current')
ccasGrpLineTmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 2), )
if mibBuilder.loadTexts: ccasGrpLineTmTable.setStatus('current')
ccasGrpLineTmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 2, 1), )
ccasGrpLineCfgEntry.registerAugmentions(("CISCO-CAS-IF-MIB", "ccasGrpLineTmEntry"))
ccasGrpLineTmEntry.setIndexNames(*ccasGrpLineCfgEntry.getIndexNames())
if mibBuilder.loadTexts: ccasGrpLineTmEntry.setStatus('current')
ccasGrpLineTmDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineTmDigitDuration.setStatus('current')
ccasGrpLineTmInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineTmInterDigitDuration.setStatus('current')
ccasGrpLineTmPulseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20))).setUnits('pulses per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineTmPulseRate.setStatus('current')
ccasGrpLineTmPulseInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpLineTmPulseInterDigitDuration.setStatus('current')
ccasGrpStaCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 1), )
if mibBuilder.loadTexts: ccasGrpStaCfgTable.setStatus('current')
ccasGrpStaCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasGrpStaCfgEntry.setStatus('current')
ccasGrpStaCfgNumberRings = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('rings').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpStaCfgNumberRings.setStatus('current')
ccasGrpStaCfgDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtmf", 1), ("pulse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpStaCfgDialType.setStatus('current')
ccasGrpStaTmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 2), )
if mibBuilder.loadTexts: ccasGrpStaTmTable.setStatus('current')
ccasGrpStaTmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 2, 1), )
ccasGrpStaCfgEntry.registerAugmentions(("CISCO-CAS-IF-MIB", "ccasGrpStaTmEntry"))
ccasGrpStaTmEntry.setIndexNames(*ccasGrpStaCfgEntry.getIndexNames())
if mibBuilder.loadTexts: ccasGrpStaTmEntry.setStatus('current')
ccasGrpStaTmDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpStaTmDigitDuration.setStatus('current')
ccasGrpStaTmInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpStaTmInterDigitDuration.setStatus('current')
ccasGrpStaTmPulseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20))).setUnits('pulses per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpStaTmPulseRate.setStatus('current')
ccasGrpStaTmPulseInterDigitDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpStaTmPulseInterDigitDuration.setStatus('current')
ccasGrpABCDCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 5, 1), )
if mibBuilder.loadTexts: ccasGrpABCDCfgTable.setStatus('current')
ccasGrpABCDCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasGrpABCDCfgEntry.setStatus('current')
ccasGrpABCDCfgInvertBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 5, 1, 1, 1), Bits().clone(namedValues=NamedValues(("dBit", 0), ("cBit", 1), ("bBit", 2), ("aBit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpABCDCfgInvertBits.setStatus('current')
ccasGrpABCDCfgUnusedBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 2, 5, 1, 1, 2), Bits().clone(namedValues=NamedValues(("dBit", 0), ("cBit", 1), ("bBit", 2), ("aBit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasGrpABCDCfgUnusedBits.setStatus('current')
ccasChannelCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 1), )
if mibBuilder.loadTexts: ccasChannelCfgTable.setStatus('current')
ccasChannelCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ccasChannelCfgEntry.setStatus('current')
ccasChannelCfgDS1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelCfgDS1IfIndex.setStatus('current')
ccasChannelCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelCfgGroup.setStatus('current')
ccasChannelCfgTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelCfgTimeSlot.setStatus('current')
ccasChannelCfgBusyOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasChannelCfgBusyOut.setStatus('current')
ccasChannelStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 2), )
if mibBuilder.loadTexts: ccasChannelStatusTable.setStatus('current')
ccasChannelStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 2, 1), )
ccasChannelCfgEntry.registerAugmentions(("CISCO-CAS-IF-MIB", "ccasChannelStatusEntry"))
ccasChannelStatusEntry.setIndexNames(*ccasChannelCfgEntry.getIndexNames())
if mibBuilder.loadTexts: ccasChannelStatusEntry.setStatus('current')
ccasChannelStatusRecvSignalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 2, 1, 1), Bits().clone(namedValues=NamedValues(("dBit", 0), ("cBit", 1), ("bBit", 2), ("aBit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelStatusRecvSignalBits.setStatus('current')
ccasChannelStatusBusyOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelStatusBusyOut.setStatus('current')
ccasChannelStatusInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("speech", 2), ("data56", 3), ("audio31", 4), ("audio7", 5), ("video", 6), ("fax", 7), ("modem", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelStatusInfoType.setStatus('current')
ccasChannelStatusXmitSignalBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 3, 2, 1, 4), Bits().clone(namedValues=NamedValues(("dBit", 0), ("cBit", 1), ("bBit", 2), ("aBit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccasChannelStatusXmitSignalBits.setStatus('current')
ccasVoiceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1), )
if mibBuilder.loadTexts: ccasVoiceCfgTable.setStatus('current')
ccasVoiceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasVoiceCfgEntry.setStatus('current')
ccasVoiceCfgNoiseRegEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgNoiseRegEnable.setStatus('current')
ccasVoiceCfgNonLinearProcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgNonLinearProcEnable.setStatus('current')
ccasVoiceCfgMusicOnHoldThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -30))).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgMusicOnHoldThreshold.setStatus('current')
ccasVoiceCfgInGain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-6, 14))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgInGain.setStatus('current')
ccasVoiceCfgOutAttn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgOutAttn.setStatus('current')
ccasVoiceCfgEchoCancelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgEchoCancelEnable.setStatus('current')
ccasVoiceCfgEchoCancelCoverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("echoCanceller8ms", 1), ("echoCanceller16ms", 2), ("echoCanceller24ms", 3), ("echoCanceller32ms", 4), ("echoCanceller64ms", 5), ("echoCanceller128ms", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgEchoCancelCoverage.setStatus('current')
ccasVoiceCfgConnectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("trunk", 2), ("plar", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgConnectionMode.setStatus('current')
ccasVoiceCfgConnectionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgConnectionNumber.setStatus('current')
ccasVoiceCfgInitialDigitTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgInitialDigitTimeOut.setStatus('current')
ccasVoiceCfgInterDigitTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgInterDigitTimeOut.setStatus('current')
ccasVoiceCfgRegionalTone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 4, 1, 1, 12), CountryCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasVoiceCfgRegionalTone.setStatus('current')
ccasXgcpCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 5, 1), )
if mibBuilder.loadTexts: ccasXgcpCfgTable.setStatus('current')
ccasXgcpCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CAS-IF-MIB", "ccasGrpCfgIndex"))
if mibBuilder.loadTexts: ccasXgcpCfgEntry.setStatus('current')
ccasXgcpCfgCotToneCo1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(280, 3800))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasXgcpCfgCotToneCo1.setStatus('current')
ccasXgcpCfgCotToneCo2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 85, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(280, 3800))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccasXgcpCfgCotToneCo2.setStatus('current')
ccasIfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 3))
ccasIfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 1))
ccasIfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2))
ccasIfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 1, 1)).setObjects(("CISCO-CAS-IF-MIB", "ccasIfDS1Group"), ("CISCO-CAS-IF-MIB", "ccasGeneralInfoGroup"), ("CISCO-CAS-IF-MIB", "ccasEMGroup"), ("CISCO-CAS-IF-MIB", "ccasLineGroup"), ("CISCO-CAS-IF-MIB", "ccasStaGroup"), ("CISCO-CAS-IF-MIB", "ccasCustomABCDGroup"), ("CISCO-CAS-IF-MIB", "ccasVoiceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfMIBCompliance = ccasIfMIBCompliance.setStatus('obsolete')
ccasIfMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 1, 2)).setObjects(("CISCO-CAS-IF-MIB", "ccasIfDS1Group"), ("CISCO-CAS-IF-MIB", "ccasGeneralInfoGroupRev1"), ("CISCO-CAS-IF-MIB", "ccasEMGroupRev1"), ("CISCO-CAS-IF-MIB", "ccasLineGroup"), ("CISCO-CAS-IF-MIB", "ccasStaGroup"), ("CISCO-CAS-IF-MIB", "ccasCustomABCDGroup"), ("CISCO-CAS-IF-MIB", "ccasVoiceGroup"), ("CISCO-CAS-IF-MIB", "ccasChannelInfoGroup"), ("CISCO-CAS-IF-MIB", "ccasXgcpCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfMIBComplianceRev1 = ccasIfMIBComplianceRev1.setStatus('deprecated')
ccasIfMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 1, 3)).setObjects(("CISCO-CAS-IF-MIB", "ccasIfDS1Group"), ("CISCO-CAS-IF-MIB", "ccasGeneralInfoGroupRev1"), ("CISCO-CAS-IF-MIB", "ccasEMGroupRev1"), ("CISCO-CAS-IF-MIB", "ccasLineGroup"), ("CISCO-CAS-IF-MIB", "ccasStaGroup"), ("CISCO-CAS-IF-MIB", "ccasCustomABCDGroup"), ("CISCO-CAS-IF-MIB", "ccasVoiceGroup"), ("CISCO-CAS-IF-MIB", "ccasChannelInfoGroup"), ("CISCO-CAS-IF-MIB", "ccasXgcpCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfMIBComplianceRev2 = ccasIfMIBComplianceRev2.setStatus('deprecated')
ccasIfMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 1, 4)).setObjects(("CISCO-CAS-IF-MIB", "ccasIfDS1Group"), ("CISCO-CAS-IF-MIB", "ccasGeneralInfoGroupRev1"), ("CISCO-CAS-IF-MIB", "ccasEMGroupRev2"), ("CISCO-CAS-IF-MIB", "ccasLineGroup"), ("CISCO-CAS-IF-MIB", "ccasStaGroup"), ("CISCO-CAS-IF-MIB", "ccasCustomABCDGroup"), ("CISCO-CAS-IF-MIB", "ccasVoiceGroup"), ("CISCO-CAS-IF-MIB", "ccasChannelInfoGroup"), ("CISCO-CAS-IF-MIB", "ccasXgcpCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfMIBComplianceRev3 = ccasIfMIBComplianceRev3.setStatus('current')
ccasIfDS1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 1)).setObjects(("CISCO-CAS-IF-MIB", "ccasDs1IfCfgDs0ChannelsConfigurable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasIfDS1Group = ccasIfDS1Group.setStatus('current')
ccasGeneralInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 2)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpCfgType"), ("CISCO-CAS-IF-MIB", "ccasGrpCfgDs0Channels"), ("CISCO-CAS-IF-MIB", "ccasGrpCfgRowStatus"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgDS1IfIndex"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgGroup"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgTimeSlot"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgBusyOut"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusRecvSignalBits"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusBusyOut"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusInfoType"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusXmitSignalBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasGeneralInfoGroup = ccasGeneralInfoGroup.setStatus('obsolete')
ccasEMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 3)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpEMCfgDialType"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgDnisAni"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmClearWaitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxWinkWaitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxWinkDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDelayStart"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxDelayDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMinDelayPulseWidth"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPulseRate"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPulseInterDigitDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasEMGroup = ccasEMGroup.setStatus('deprecated')
ccasLineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 4)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpLineCfgNumberRings"), ("CISCO-CAS-IF-MIB", "ccasGrpLineCfgSupDisconnect"), ("CISCO-CAS-IF-MIB", "ccasGrpLineCfgDialType"), ("CISCO-CAS-IF-MIB", "ccasGrpLineTmDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpLineTmInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpLineTmPulseRate"), ("CISCO-CAS-IF-MIB", "ccasGrpLineTmPulseInterDigitDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasLineGroup = ccasLineGroup.setStatus('current')
ccasStaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 5)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpStaCfgNumberRings"), ("CISCO-CAS-IF-MIB", "ccasGrpStaCfgDialType"), ("CISCO-CAS-IF-MIB", "ccasGrpStaTmDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpStaTmInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpStaTmPulseRate"), ("CISCO-CAS-IF-MIB", "ccasGrpStaTmPulseInterDigitDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasStaGroup = ccasStaGroup.setStatus('current')
ccasCustomABCDGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 6)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpABCDCfgInvertBits"), ("CISCO-CAS-IF-MIB", "ccasGrpABCDCfgUnusedBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasCustomABCDGroup = ccasCustomABCDGroup.setStatus('current')
ccasVoiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 7)).setObjects(("CISCO-CAS-IF-MIB", "ccasVoiceCfgNoiseRegEnable"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgNonLinearProcEnable"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgMusicOnHoldThreshold"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgInGain"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgOutAttn"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgEchoCancelEnable"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgEchoCancelCoverage"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgConnectionMode"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgConnectionNumber"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgInitialDigitTimeOut"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgInterDigitTimeOut"), ("CISCO-CAS-IF-MIB", "ccasVoiceCfgRegionalTone"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasVoiceGroup = ccasVoiceGroup.setStatus('current')
ccasGeneralInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 8)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpCfgType"), ("CISCO-CAS-IF-MIB", "ccasGrpCfgDs0Channels"), ("CISCO-CAS-IF-MIB", "ccasGrpCfgServiceType"), ("CISCO-CAS-IF-MIB", "ccasGrpCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasGeneralInfoGroupRev1 = ccasGeneralInfoGroupRev1.setStatus('current')
ccasChannelInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 9)).setObjects(("CISCO-CAS-IF-MIB", "ccasChannelCfgDS1IfIndex"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgGroup"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgTimeSlot"), ("CISCO-CAS-IF-MIB", "ccasChannelCfgBusyOut"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusRecvSignalBits"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusBusyOut"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusInfoType"), ("CISCO-CAS-IF-MIB", "ccasChannelStatusXmitSignalBits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasChannelInfoGroup = ccasChannelInfoGroup.setStatus('current')
ccasXgcpCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 10)).setObjects(("CISCO-CAS-IF-MIB", "ccasXgcpCfgCotToneCo1"), ("CISCO-CAS-IF-MIB", "ccasXgcpCfgCotToneCo2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasXgcpCfgGroup = ccasXgcpCfgGroup.setStatus('current')
ccasEMGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 11)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpEMCfgDialType"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgDnisAni"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmClearWaitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxWinkWaitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxWinkDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDelayStart"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxDelayDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMinDelayPulseWidth"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPulseRate"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPulseInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgLmrMCap"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgLmrECap"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmVoiceHangover"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmLmrTeardown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasEMGroupRev1 = ccasEMGroupRev1.setStatus('deprecated')
ccasEMGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 85, 3, 2, 12)).setObjects(("CISCO-CAS-IF-MIB", "ccasGrpEMCfgDialType"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgDnisAni"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmClearWaitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxWinkWaitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxWinkDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDelayStart"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMaxDelayDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmMinDelayPulseWidth"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPulseRate"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPulseInterDigitDuration"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgLmrMCap"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgLmrECap"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmVoiceHangover"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmLmrTeardown"), ("CISCO-CAS-IF-MIB", "ccasGrpEMCfgAutoGainControl"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPttXmt"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmPttRcv"), ("CISCO-CAS-IF-MIB", "ccasGrpEMTmDelayVoice"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccasEMGroupRev2 = ccasEMGroupRev2.setStatus('current')
mibBuilder.exportSymbols("CISCO-CAS-IF-MIB", ccasGrpABCDCfgInvertBits=ccasGrpABCDCfgInvertBits, ccasGrpCfgEntry=ccasGrpCfgEntry, ccasGrpStaCfgNumberRings=ccasGrpStaCfgNumberRings, ccasGrpEMCfgEntry=ccasGrpEMCfgEntry, ccasGrpStaTmEntry=ccasGrpStaTmEntry, ccasGrpEMCfgDialType=ccasGrpEMCfgDialType, ccasGrpStaTmDigitDuration=ccasGrpStaTmDigitDuration, ccasVoiceGroup=ccasVoiceGroup, ccasGrpStaTmPulseRate=ccasGrpStaTmPulseRate, ccasGrpGeneralObjects=ccasGrpGeneralObjects, ccasChannelStatusTable=ccasChannelStatusTable, ccasGrpEMCfgDnisAni=ccasGrpEMCfgDnisAni, ccasChannelStatusRecvSignalBits=ccasChannelStatusRecvSignalBits, ccasGrpEMTmPttRcv=ccasGrpEMTmPttRcv, ccasXgcpCfgGroup=ccasXgcpCfgGroup, ccasChannelCfgEntry=ccasChannelCfgEntry, ccasGrpEMCfgLmrECap=ccasGrpEMCfgLmrECap, ccasGrpLineTmPulseInterDigitDuration=ccasGrpLineTmPulseInterDigitDuration, ccasGrpABCDObjects=ccasGrpABCDObjects, ccasStaGroup=ccasStaGroup, ccasGrpABCDCfgUnusedBits=ccasGrpABCDCfgUnusedBits, ccasChannelStatusBusyOut=ccasChannelStatusBusyOut, ccasIfMIBGroups=ccasIfMIBGroups, ccasGrpObjects=ccasGrpObjects, ccasGrpStaCfgTable=ccasGrpStaCfgTable, ccasGrpEMCfgLmrMCap=ccasGrpEMCfgLmrMCap, ccasDs1IfCfgTable=ccasDs1IfCfgTable, ccasGrpLineTmDigitDuration=ccasGrpLineTmDigitDuration, ccasDs1IfCfgDs0ChannelsConfigurable=ccasDs1IfCfgDs0ChannelsConfigurable, ccasGrpCfgType=ccasGrpCfgType, ccasVoiceCfgNoiseRegEnable=ccasVoiceCfgNoiseRegEnable, ccasGrpEMTmPulseRate=ccasGrpEMTmPulseRate, ccasIfMIBComplianceRev3=ccasIfMIBComplianceRev3, ccasXgcpCfgObjects=ccasXgcpCfgObjects, ccasGrpCfgIndex=ccasGrpCfgIndex, PYSNMP_MODULE_ID=ciscoCasIfMIB, ccasGrpStaObjects=ccasGrpStaObjects, ccasChannelCfgTimeSlot=ccasChannelCfgTimeSlot, ccasVoiceCfgEchoCancelCoverage=ccasVoiceCfgEchoCancelCoverage, ccasIfMIBConformance=ccasIfMIBConformance, ccasVoiceCfgMusicOnHoldThreshold=ccasVoiceCfgMusicOnHoldThreshold, ccasGrpEMTmMaxDelayDuration=ccasGrpEMTmMaxDelayDuration, ccasChannelStatusInfoType=ccasChannelStatusInfoType, ccasGrpEMObjects=ccasGrpEMObjects, ccasGrpStaCfgDialType=ccasGrpStaCfgDialType, ccasGrpEMTmVoiceHangover=ccasGrpEMTmVoiceHangover, ccasGrpCfgDs0Channels=ccasGrpCfgDs0Channels, ccasXgcpCfgTable=ccasXgcpCfgTable, ccasGrpLineCfgDialType=ccasGrpLineCfgDialType, ccasChannelCfgBusyOut=ccasChannelCfgBusyOut, ccasGrpABCDCfgTable=ccasGrpABCDCfgTable, ccasGrpLineTmInterDigitDuration=ccasGrpLineTmInterDigitDuration, ccasVoiceCfgEchoCancelEnable=ccasVoiceCfgEchoCancelEnable, ccasChannelObjects=ccasChannelObjects, ccasGrpLineTmPulseRate=ccasGrpLineTmPulseRate, ccasVoiceCfgConnectionNumber=ccasVoiceCfgConnectionNumber, ccasGrpStaTmPulseInterDigitDuration=ccasGrpStaTmPulseInterDigitDuration, ccasChannelInfoGroup=ccasChannelInfoGroup, ccasGrpLineCfgEntry=ccasGrpLineCfgEntry, ccasIfMIBComplianceRev1=ccasIfMIBComplianceRev1, ccasVoiceCfgObjects=ccasVoiceCfgObjects, ccasGrpLineCfgNumberRings=ccasGrpLineCfgNumberRings, ccasIfMIBCompliance=ccasIfMIBCompliance, ccasVoiceCfgInGain=ccasVoiceCfgInGain, ciscoCasIfMIB=ciscoCasIfMIB, ccasVoiceCfgInterDigitTimeOut=ccasVoiceCfgInterDigitTimeOut, ccasGrpABCDCfgEntry=ccasGrpABCDCfgEntry, ccasGrpEMTmPulseInterDigitDuration=ccasGrpEMTmPulseInterDigitDuration, ccasIfMIBComplianceRev2=ccasIfMIBComplianceRev2, ccasGrpEMTmInterDigitDuration=ccasGrpEMTmInterDigitDuration, ccasChannelCfgTable=ccasChannelCfgTable, ccasGrpEMCfgAutoGainControl=ccasGrpEMCfgAutoGainControl, ccasGrpEMTmDelayVoice=ccasGrpEMTmDelayVoice, ccasDS1Objects=ccasDS1Objects, ccasGrpCfgTable=ccasGrpCfgTable, ccasGrpStaTmTable=ccasGrpStaTmTable, ccasGrpCfgRowStatus=ccasGrpCfgRowStatus, ccasGrpLineCfgSupDisconnect=ccasGrpLineCfgSupDisconnect, ccasGrpEMTmMaxWinkWaitDuration=ccasGrpEMTmMaxWinkWaitDuration, ccasGrpLineTmTable=ccasGrpLineTmTable, ccasCustomABCDGroup=ccasCustomABCDGroup, ccasVoiceCfgTable=ccasVoiceCfgTable, ccasGrpEMTmLmrTeardown=ccasGrpEMTmLmrTeardown, ccasVoiceCfgOutAttn=ccasVoiceCfgOutAttn, ccasEMGroupRev2=ccasEMGroupRev2, ccasGrpEMTmMinDelayPulseWidth=ccasGrpEMTmMinDelayPulseWidth, ccasEMGroupRev1=ccasEMGroupRev1, ccasGeneralInfoGroupRev1=ccasGeneralInfoGroupRev1, ccasChannelStatusEntry=ccasChannelStatusEntry, ccasGrpEMCfgTable=ccasGrpEMCfgTable, ccasGrpEMTmPttXmt=ccasGrpEMTmPttXmt, ccasGrpEMTmEntry=ccasGrpEMTmEntry, ccasGrpLineCfgTable=ccasGrpLineCfgTable, ccasXgcpCfgCotToneCo1=ccasXgcpCfgCotToneCo1, ccasGrpEMTmMaxWinkDuration=ccasGrpEMTmMaxWinkDuration, ccasVoiceCfgNonLinearProcEnable=ccasVoiceCfgNonLinearProcEnable, ccasGrpEMTmClearWaitDuration=ccasGrpEMTmClearWaitDuration, ccasIfDS1Group=ccasIfDS1Group, ccasGrpCfgServiceType=ccasGrpCfgServiceType, ccasChannelStatusXmitSignalBits=ccasChannelStatusXmitSignalBits, ccasChannelCfgDS1IfIndex=ccasChannelCfgDS1IfIndex, ccasGrpEMTmTable=ccasGrpEMTmTable, ccasXgcpCfgEntry=ccasXgcpCfgEntry, ccasIfObjects=ccasIfObjects, ccasGrpStaCfgEntry=ccasGrpStaCfgEntry, ccasIfMIBCompliances=ccasIfMIBCompliances, ccasLineGroup=ccasLineGroup, ccasXgcpCfgCotToneCo2=ccasXgcpCfgCotToneCo2, ccasGrpStaTmInterDigitDuration=ccasGrpStaTmInterDigitDuration, ccasVoiceCfgInitialDigitTimeOut=ccasVoiceCfgInitialDigitTimeOut, ccasGeneralInfoGroup=ccasGeneralInfoGroup, ccasEMGroup=ccasEMGroup, ccasVoiceCfgRegionalTone=ccasVoiceCfgRegionalTone, ccasGrpEMTmDigitDuration=ccasGrpEMTmDigitDuration, ccasGrpEMTmDelayStart=ccasGrpEMTmDelayStart, ccasChannelCfgGroup=ccasChannelCfgGroup, ccasGrpLineObjects=ccasGrpLineObjects, ccasDs1IfCfgEntry=ccasDs1IfCfgEntry, ccasVoiceCfgConnectionMode=ccasVoiceCfgConnectionMode, ccasGrpLineTmEntry=ccasGrpLineTmEntry, ccasVoiceCfgEntry=ccasVoiceCfgEntry)
