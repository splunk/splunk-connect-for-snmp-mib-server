#
# PySNMP MIB module FCFABRIC-ELEMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FCFABRIC-ELEMENT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:59:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, experimental, Integer32, NotificationType, iso, TimeTicks, Bits, ObjectIdentity, ModuleIdentity, Counter64, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "experimental", "Integer32", "NotificationType", "iso", "TimeTicks", "Bits", "ObjectIdentity", "ModuleIdentity", "Counter64", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fibreChannel = MibIdentifier((1, 3, 6, 1, 3, 42))
fcFabric = MibIdentifier((1, 3, 6, 1, 3, 42, 2))
fcFe = MibIdentifier((1, 3, 6, 1, 3, 42, 2, 1))
fcFeConfig = MibIdentifier((1, 3, 6, 1, 3, 42, 2, 1, 1))
fcFeOp = MibIdentifier((1, 3, 6, 1, 3, 42, 2, 1, 2))
fcFeError = MibIdentifier((1, 3, 6, 1, 3, 42, 2, 1, 3))
fcFeAcct = MibIdentifier((1, 3, 6, 1, 3, 42, 2, 1, 4))
fcFeCap = MibIdentifier((1, 3, 6, 1, 3, 42, 2, 1, 5))
class DisplayString(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class MilliSeconds(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147383647)

class MicroSeconds(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147383647)

class FcNameId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class FabricName(FcNameId):
    pass

class FcPortName(FcNameId):
    pass

class FcAddressId(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class FcRxDataFieldSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(128, 2112)

class FcBbCredit(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 32767)

class FcphVersion(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class FcStackedConnMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("transparent", 2), ("lockedDown", 3))

class FcCosCap(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 127)

class Fc0BaudRate(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64))
    namedValues = NamedValues(("other", 1), ("oneEighth", 2), ("quarter", 4), ("half", 8), ("full", 16), ("double", 32), ("quadruple", 64))

class Fc0BaudRateCap(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 127)

class Fc0MediaCap(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class Fc0Medium(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256))
    namedValues = NamedValues(("unknown", 1), ("sm", 2), ("m5", 4), ("m6", 8), ("tv", 16), ("mi", 32), ("stp", 64), ("tw", 128), ("lv", 256))

class Fc0TxType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("longWaveLaser", 2), ("shortWaveLaser", 3), ("longWaveLED", 4), ("electrical", 5), ("shortWaveLaser-noOFC", 6))

class Fc0Distance(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("long", 2), ("intermediate", 3), ("short", 4))

class FcFeModuleCapacity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 256)

class FcFeFxPortCapacity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 256)

class FcFeModuleIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 256)

class FcFeFxPortIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 256)

class FcFeNxPortIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 126)

class FcFxPortMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("fPort", 2), ("flPort", 3))

class FcBbCreditModel(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("regular", 1), ("alternate", 2))

fcFabricName = MibScalar((1, 3, 6, 1, 3, 42, 2, 1, 1, 1), FabricName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFabricName.setStatus('mandatory')
fcElementName = MibScalar((1, 3, 6, 1, 3, 42, 2, 1, 1, 2), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcElementName.setStatus('mandatory')
fcFeModuleCapacity = MibScalar((1, 3, 6, 1, 3, 42, 2, 1, 1, 3), FcFeModuleCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleCapacity.setStatus('mandatory')
fcFeModuleTable = MibTable((1, 3, 6, 1, 3, 42, 2, 1, 1, 4), )
if mibBuilder.loadTexts: fcFeModuleTable.setStatus('mandatory')
fcFeModuleEntry = MibTableRow((1, 3, 6, 1, 3, 42, 2, 1, 1, 4, 1), ).setIndexNames((0, "FCFABRIC-ELEMENT-MIB", "fcFeModuleIndex"))
if mibBuilder.loadTexts: fcFeModuleEntry.setStatus('mandatory')
fcFeModuleIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 4, 1, 1), FcFeModuleIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleIndex.setStatus('mandatory')
fcFeModuleDescr = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleDescr.setStatus('mandatory')
fcFeModuleObjectID = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleObjectID.setStatus('mandatory')
fcFeModuleOperStatus = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleOperStatus.setStatus('mandatory')
fcFeModuleLastChange = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 4, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleLastChange.setStatus('mandatory')
fcFeModuleFxPortCapacity = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 4, 1, 6), FcFeFxPortCapacity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleFxPortCapacity.setStatus('mandatory')
fcFeModuleName = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 4, 1, 7), FcNameId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFeModuleName.setStatus('mandatory')
fcFxConfTable = MibTable((1, 3, 6, 1, 3, 42, 2, 1, 1, 5), )
if mibBuilder.loadTexts: fcFxConfTable.setStatus('mandatory')
fcFxConfEntry = MibTableRow((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1), ).setIndexNames((0, "FCFABRIC-ELEMENT-MIB", "fcFxConfModuleIndex"), (0, "FCFABRIC-ELEMENT-MIB", "fcFxConfFxPortIndex"))
if mibBuilder.loadTexts: fcFxConfEntry.setStatus('mandatory')
fcFxConfModuleIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 1), FcFeModuleIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxConfModuleIndex.setStatus('mandatory')
fcFxConfFxPortIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 2), FcFeFxPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxConfFxPortIndex.setStatus('mandatory')
fcFxPortName = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 3), FcPortName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortName.setStatus('mandatory')
fcFxPortFcphVersionHigh = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 4), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortFcphVersionHigh.setStatus('mandatory')
fcFxPortFcphVersionLow = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 5), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortFcphVersionLow.setStatus('mandatory')
fcFxPortBbCredit = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 6), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortBbCredit.setStatus('mandatory')
fcFxPortRxBufSize = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 7), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortRxBufSize.setStatus('mandatory')
fcFxPortRatov = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 8), MilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortRatov.setStatus('mandatory')
fcFxPortEdtov = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 9), MilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortEdtov.setStatus('mandatory')
fcFxPortCosSupported = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 10), FcCosCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCosSupported.setStatus('mandatory')
fcFxPortIntermixSupported = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortIntermixSupported.setStatus('mandatory')
fcFxPortStackedConnMode = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 12), FcStackedConnMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortStackedConnMode.setStatus('mandatory')
fcFxPortClass2SeqDeliv = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortClass2SeqDeliv.setStatus('mandatory')
fcFxPortClass3SeqDeliv = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortClass3SeqDeliv.setStatus('mandatory')
fcFxPortHoldTime = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 15), MicroSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortHoldTime.setStatus('mandatory')
fcFxPortBaudRate = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 16), Fc0BaudRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortBaudRate.setStatus('deprecated')
fcFxPortMedium = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 17), Fc0Medium()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortMedium.setStatus('deprecated')
fcFxPortTxType = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 18), Fc0TxType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortTxType.setStatus('deprecated')
fcFxPortDistance = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 1, 5, 1, 19), Fc0Distance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortDistance.setStatus('deprecated')
fcFxPortOperTable = MibTable((1, 3, 6, 1, 3, 42, 2, 1, 2, 1), )
if mibBuilder.loadTexts: fcFxPortOperTable.setStatus('mandatory')
fcFxPortOperEntry = MibTableRow((1, 3, 6, 1, 3, 42, 2, 1, 2, 1, 1), ).setIndexNames((0, "FCFABRIC-ELEMENT-MIB", "fcFxPortOperModuleIndex"), (0, "FCFABRIC-ELEMENT-MIB", "fcFxPortOperFxPortIndex"))
if mibBuilder.loadTexts: fcFxPortOperEntry.setStatus('mandatory')
fcFxPortOperModuleIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 1, 1, 1), FcFeModuleIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortOperModuleIndex.setStatus('mandatory')
fcFxPortOperFxPortIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 1, 1, 2), FcFeFxPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortOperFxPortIndex.setStatus('mandatory')
fcFxPortID = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 1, 1, 3), FcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortID.setStatus('mandatory')
fcFPortAttachedPortName = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 1, 1, 4), FcPortName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFPortAttachedPortName.setStatus('deprecated')
fcFPortConnectedPort = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 1, 1, 5), FcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFPortConnectedPort.setStatus('deprecated')
fcFxPortBbCreditAvailable = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortBbCreditAvailable.setStatus('mandatory')
fcFxPortOperMode = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 1, 1, 7), FcFxPortMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortOperMode.setStatus('mandatory')
fcFxPortAdminMode = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 1, 1, 8), FcFxPortMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortAdminMode.setStatus('mandatory')
fcFxPortPhysTable = MibTable((1, 3, 6, 1, 3, 42, 2, 1, 2, 3), )
if mibBuilder.loadTexts: fcFxPortPhysTable.setStatus('mandatory')
fcFxPortPhysEntry = MibTableRow((1, 3, 6, 1, 3, 42, 2, 1, 2, 3, 1), ).setIndexNames((0, "FCFABRIC-ELEMENT-MIB", "fcFxPortPhysModuleIndex"), (0, "FCFABRIC-ELEMENT-MIB", "fcFxPortPhysFxPortIndex"))
if mibBuilder.loadTexts: fcFxPortPhysEntry.setStatus('mandatory')
fcFxPortPhysModuleIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 3, 1, 1), FcFeModuleIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortPhysModuleIndex.setStatus('mandatory')
fcFxPortPhysFxPortIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 3, 1, 2), FcFeFxPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortPhysFxPortIndex.setStatus('mandatory')
fcFxPortPhysAdminStatus = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFxPortPhysAdminStatus.setStatus('mandatory')
fcFxPortPhysOperStatus = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("link-failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortPhysOperStatus.setStatus('mandatory')
fcFxPortPhysLastChange = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortPhysLastChange.setStatus('mandatory')
fcFxPortPhysRttov = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 3, 1, 6), MilliSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortPhysRttov.setStatus('mandatory')
fcFxlogiTable = MibTable((1, 3, 6, 1, 3, 42, 2, 1, 2, 4), )
if mibBuilder.loadTexts: fcFxlogiTable.setStatus('mandatory')
fcFxlogiEntry = MibTableRow((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1), ).setIndexNames((0, "FCFABRIC-ELEMENT-MIB", "fcFxlogiModuleIndex"), (0, "FCFABRIC-ELEMENT-MIB", "fcFxlogiFxPortIndex"), (0, "FCFABRIC-ELEMENT-MIB", "fcFxlogiNxPortIndex"))
if mibBuilder.loadTexts: fcFxlogiEntry.setStatus('mandatory')
fcFxlogiModuleIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 1), FcFeModuleIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxlogiModuleIndex.setStatus('mandatory')
fcFxlogiFxPortIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 2), FcFeFxPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxlogiFxPortIndex.setStatus('mandatory')
fcFxlogiNxPortIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 3), FcFeNxPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxlogiNxPortIndex.setStatus('mandatory')
fcFxPortFcphVersionAgreed = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 4), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortFcphVersionAgreed.setStatus('mandatory')
fcFxPortNxPortBbCredit = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 5), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortNxPortBbCredit.setStatus('mandatory')
fcFxPortNxPortRxDataFieldSize = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 6), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortNxPortRxDataFieldSize.setStatus('mandatory')
fcFxPortCosSuppAgreed = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 7), FcCosCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCosSuppAgreed.setStatus('mandatory')
fcFxPortIntermixSuppAgreed = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortIntermixSuppAgreed.setStatus('mandatory')
fcFxPortStackedConnModeAgreed = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 9), FcStackedConnMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortStackedConnModeAgreed.setStatus('mandatory')
fcFxPortClass2SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortClass2SeqDelivAgreed.setStatus('mandatory')
fcFxPortClass3SeqDelivAgreed = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortClass3SeqDelivAgreed.setStatus('mandatory')
fcFxPortNxPortName = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 12), FcPortName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortNxPortName.setStatus('mandatory')
fcFxPortConnectedNxPort = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 13), FcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortConnectedNxPort.setStatus('mandatory')
fcFxPortBbCreditModel = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 2, 4, 1, 14), FcBbCreditModel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortBbCreditModel.setStatus('mandatory')
fcFxPortErrorTable = MibTable((1, 3, 6, 1, 3, 42, 2, 1, 3, 1), )
if mibBuilder.loadTexts: fcFxPortErrorTable.setStatus('mandatory')
fcFxPortErrorEntry = MibTableRow((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1), ).setIndexNames((0, "FCFABRIC-ELEMENT-MIB", "fcFxPortErrorModuleIndex"), (0, "FCFABRIC-ELEMENT-MIB", "fcFxPortErrorFxPortIndex"))
if mibBuilder.loadTexts: fcFxPortErrorEntry.setStatus('mandatory')
fcFxPortErrorModuleIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 1), FcFeModuleIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortErrorModuleIndex.setStatus('mandatory')
fcFxPortErrorFxPortIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 2), FcFeFxPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortErrorFxPortIndex.setStatus('mandatory')
fcFxPortLinkFailures = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortLinkFailures.setStatus('mandatory')
fcFxPortSyncLosses = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortSyncLosses.setStatus('mandatory')
fcFxPortSigLosses = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortSigLosses.setStatus('mandatory')
fcFxPortPrimSeqProtoErrors = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortPrimSeqProtoErrors.setStatus('mandatory')
fcFxPortInvalidTxWords = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortInvalidTxWords.setStatus('mandatory')
fcFxPortInvalidCrcs = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortInvalidCrcs.setStatus('mandatory')
fcFxPortDelimiterErrors = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortDelimiterErrors.setStatus('mandatory')
fcFxPortAddressIdErrors = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortAddressIdErrors.setStatus('mandatory')
fcFxPortLinkResetIns = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortLinkResetIns.setStatus('mandatory')
fcFxPortLinkResetOuts = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortLinkResetOuts.setStatus('mandatory')
fcFxPortOlsIns = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortOlsIns.setStatus('mandatory')
fcFxPortOlsOuts = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortOlsOuts.setStatus('mandatory')
fcFxPortC1AcctTable = MibTable((1, 3, 6, 1, 3, 42, 2, 1, 4, 1), )
if mibBuilder.loadTexts: fcFxPortC1AcctTable.setStatus('mandatory')
fcFxPortC1AcctEntry = MibTableRow((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1), ).setIndexNames((0, "FCFABRIC-ELEMENT-MIB", "fcFxPortC1AcctModuleIndex"), (0, "FCFABRIC-ELEMENT-MIB", "fcFxPortC1AcctFxPortIndex"))
if mibBuilder.loadTexts: fcFxPortC1AcctEntry.setStatus('mandatory')
fcFxPortC1AcctModuleIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1, 1), FcFeModuleIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1AcctModuleIndex.setStatus('mandatory')
fcFxPortC1AcctFxPortIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1, 2), FcFeFxPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1AcctFxPortIndex.setStatus('mandatory')
fcFxPortC1InConnections = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1InConnections.setStatus('mandatory')
fcFxPortC1OutConnections = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1OutConnections.setStatus('mandatory')
fcFxPortC1FbsyFrames = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1FbsyFrames.setStatus('mandatory')
fcFxPortC1FrjtFrames = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1FrjtFrames.setStatus('mandatory')
fcFxPortC1ConnTime = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1ConnTime.setStatus('mandatory')
fcFxPortC1InFrames = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1InFrames.setStatus('mandatory')
fcFxPortC1OutFrames = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1OutFrames.setStatus('mandatory')
fcFxPortC1InOctets = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1InOctets.setStatus('mandatory')
fcFxPortC1OutOctets = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1OutOctets.setStatus('mandatory')
fcFxPortC1Discards = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC1Discards.setStatus('mandatory')
fcFxPortC2AcctTable = MibTable((1, 3, 6, 1, 3, 42, 2, 1, 4, 2), )
if mibBuilder.loadTexts: fcFxPortC2AcctTable.setStatus('mandatory')
fcFxPortC2AcctEntry = MibTableRow((1, 3, 6, 1, 3, 42, 2, 1, 4, 2, 1), ).setIndexNames((0, "FCFABRIC-ELEMENT-MIB", "fcFxPortC2AcctModuleIndex"), (0, "FCFABRIC-ELEMENT-MIB", "fcFxPortC2AcctFxPortIndex"))
if mibBuilder.loadTexts: fcFxPortC2AcctEntry.setStatus('mandatory')
fcFxPortC2AcctModuleIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 2, 1, 1), FcFeModuleIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2AcctModuleIndex.setStatus('mandatory')
fcFxPortC2AcctFxPortIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 2, 1, 2), FcFeFxPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2AcctFxPortIndex.setStatus('mandatory')
fcFxPortC2InFrames = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2InFrames.setStatus('mandatory')
fcFxPortC2OutFrames = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2OutFrames.setStatus('mandatory')
fcFxPortC2InOctets = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2InOctets.setStatus('mandatory')
fcFxPortC2OutOctets = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2OutOctets.setStatus('mandatory')
fcFxPortC2Discards = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2Discards.setStatus('mandatory')
fcFxPortC2FbsyFrames = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2FbsyFrames.setStatus('mandatory')
fcFxPortC2FrjtFrames = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC2FrjtFrames.setStatus('mandatory')
fcFxPortC3AcctTable = MibTable((1, 3, 6, 1, 3, 42, 2, 1, 4, 3), )
if mibBuilder.loadTexts: fcFxPortC3AcctTable.setStatus('mandatory')
fcFxPortC3AcctEntry = MibTableRow((1, 3, 6, 1, 3, 42, 2, 1, 4, 3, 1), ).setIndexNames((0, "FCFABRIC-ELEMENT-MIB", "fcFxPortC3AcctModuleIndex"), (0, "FCFABRIC-ELEMENT-MIB", "fcFxPortC3AcctFxPortIndex"))
if mibBuilder.loadTexts: fcFxPortC3AcctEntry.setStatus('mandatory')
fcFxPortC3AcctModuleIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 3, 1, 1), FcFeModuleIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC3AcctModuleIndex.setStatus('mandatory')
fcFxPortC3AcctFxPortIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 3, 1, 2), FcFeFxPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC3AcctFxPortIndex.setStatus('mandatory')
fcFxPortC3InFrames = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC3InFrames.setStatus('mandatory')
fcFxPortC3OutFrames = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC3OutFrames.setStatus('mandatory')
fcFxPortC3InOctets = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC3InOctets.setStatus('mandatory')
fcFxPortC3OutOctets = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC3OutOctets.setStatus('mandatory')
fcFxPortC3Discards = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortC3Discards.setStatus('mandatory')
fcFxPortCapTable = MibTable((1, 3, 6, 1, 3, 42, 2, 1, 5, 1), )
if mibBuilder.loadTexts: fcFxPortCapTable.setStatus('mandatory')
fcFxPortCapEntry = MibTableRow((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1), ).setIndexNames((0, "FCFABRIC-ELEMENT-MIB", "fcFxPortCapModuleIndex"), (0, "FCFABRIC-ELEMENT-MIB", "fcFxPortCapFxPortIndex"))
if mibBuilder.loadTexts: fcFxPortCapEntry.setStatus('mandatory')
fcFxPortCapModuleIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 1), FcFeModuleIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapModuleIndex.setStatus('mandatory')
fcFxPortCapFxPortIndex = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 2), FcFeFxPortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapFxPortIndex.setStatus('mandatory')
fcFxPortCapFcphVersionHigh = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 3), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapFcphVersionHigh.setStatus('mandatory')
fcFxPortCapFcphVersionLow = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 4), FcphVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapFcphVersionLow.setStatus('mandatory')
fcFxPortCapBbCreditMax = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 5), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapBbCreditMax.setStatus('mandatory')
fcFxPortCapBbCreditMin = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 6), FcBbCredit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapBbCreditMin.setStatus('mandatory')
fcFxPortCapRxDataFieldSizeMax = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 7), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapRxDataFieldSizeMax.setStatus('mandatory')
fcFxPortCapRxDataFieldSizeMin = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 8), FcRxDataFieldSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapRxDataFieldSizeMin.setStatus('mandatory')
fcFxPortCapCos = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 9), FcCosCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapCos.setStatus('mandatory')
fcFxPortCapIntermix = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapIntermix.setStatus('mandatory')
fcFxPortCapStackedConnMode = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 11), FcStackedConnMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapStackedConnMode.setStatus('mandatory')
fcFxPortCapClass2SeqDeliv = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapClass2SeqDeliv.setStatus('mandatory')
fcFxPortCapClass3SeqDeliv = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapClass3SeqDeliv.setStatus('mandatory')
fcFxPortCapHoldTimeMax = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 14), MicroSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapHoldTimeMax.setStatus('mandatory')
fcFxPortCapHoldTimeMin = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 15), MicroSeconds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapHoldTimeMin.setStatus('mandatory')
fcFxPortCapBaudRates = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 16), Fc0BaudRateCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapBaudRates.setStatus('deprecated')
fcFxPortCapMedia = MibTableColumn((1, 3, 6, 1, 3, 42, 2, 1, 5, 1, 1, 17), Fc0MediaCap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFxPortCapMedia.setStatus('deprecated')
mibBuilder.exportSymbols("FCFABRIC-ELEMENT-MIB", fcFxlogiModuleIndex=fcFxlogiModuleIndex, FcNameId=FcNameId, fcFxConfFxPortIndex=fcFxConfFxPortIndex, fcFxPortLinkResetOuts=fcFxPortLinkResetOuts, Fc0Distance=Fc0Distance, Fc0TxType=Fc0TxType, fcFxPortErrorModuleIndex=fcFxPortErrorModuleIndex, fcFxPortC1AcctModuleIndex=fcFxPortC1AcctModuleIndex, fcFxPortCapEntry=fcFxPortCapEntry, fcFxPortC3OutFrames=fcFxPortC3OutFrames, fcFxPortInvalidTxWords=fcFxPortInvalidTxWords, fcFxPortC3InOctets=fcFxPortC3InOctets, fcFxlogiNxPortIndex=fcFxlogiNxPortIndex, FcFeModuleCapacity=FcFeModuleCapacity, fcFxPortRxBufSize=fcFxPortRxBufSize, fcFxPortPhysEntry=fcFxPortPhysEntry, fcFxPortOperTable=fcFxPortOperTable, FabricName=FabricName, fcFeOp=fcFeOp, fcFxPortOperEntry=fcFxPortOperEntry, fcFxPortBbCreditModel=fcFxPortBbCreditModel, fcFxPortC1InConnections=fcFxPortC1InConnections, fcFxPortC3AcctEntry=fcFxPortC3AcctEntry, Fc0BaudRate=Fc0BaudRate, fcFxPortC2FbsyFrames=fcFxPortC2FbsyFrames, fcFxPortC1AcctTable=fcFxPortC1AcctTable, fcFxPortC2InFrames=fcFxPortC2InFrames, fcFxPortCapFcphVersionHigh=fcFxPortCapFcphVersionHigh, fcFxPortCapCos=fcFxPortCapCos, fcFxPortClass3SeqDelivAgreed=fcFxPortClass3SeqDelivAgreed, fcFxPortC2InOctets=fcFxPortC2InOctets, fcFxPortBaudRate=fcFxPortBaudRate, fcFeModuleOperStatus=fcFeModuleOperStatus, fcFxPortC1AcctEntry=fcFxPortC1AcctEntry, fcFxPortCapHoldTimeMin=fcFxPortCapHoldTimeMin, fcFxPortC2AcctModuleIndex=fcFxPortC2AcctModuleIndex, fcFeModuleDescr=fcFeModuleDescr, fcFxPortCapMedia=fcFxPortCapMedia, fcFxPortClass3SeqDeliv=fcFxPortClass3SeqDeliv, fcFxPortFcphVersionAgreed=fcFxPortFcphVersionAgreed, FcFeNxPortIndex=FcFeNxPortIndex, fcFxPortOlsIns=fcFxPortOlsIns, fcFxPortC1Discards=fcFxPortC1Discards, fcFxPortNxPortBbCredit=fcFxPortNxPortBbCredit, fcFxPortPrimSeqProtoErrors=fcFxPortPrimSeqProtoErrors, fcFxPortPhysFxPortIndex=fcFxPortPhysFxPortIndex, Fc0Medium=Fc0Medium, fcFe=fcFe, fcFxPortCapFxPortIndex=fcFxPortCapFxPortIndex, fcFxPortC3AcctModuleIndex=fcFxPortC3AcctModuleIndex, fcFxPortTxType=fcFxPortTxType, fcFxPortCapTable=fcFxPortCapTable, fcFeModuleIndex=fcFeModuleIndex, fcFeModuleFxPortCapacity=fcFeModuleFxPortCapacity, fcFeModuleName=fcFeModuleName, fcFeModuleObjectID=fcFeModuleObjectID, fcFxPortCapRxDataFieldSizeMax=fcFxPortCapRxDataFieldSizeMax, FcFeFxPortCapacity=FcFeFxPortCapacity, fcFxPortC2OutOctets=fcFxPortC2OutOctets, fcFxPortC3OutOctets=fcFxPortC3OutOctets, fcFxPortC1AcctFxPortIndex=fcFxPortC1AcctFxPortIndex, FcPortName=FcPortName, fcFxPortCapBbCreditMin=fcFxPortCapBbCreditMin, FcFeFxPortIndex=FcFeFxPortIndex, fcFeError=fcFeError, fcFPortAttachedPortName=fcFPortAttachedPortName, fcFxPortLinkResetIns=fcFxPortLinkResetIns, fcFxPortErrorTable=fcFxPortErrorTable, fcFxPortC2OutFrames=fcFxPortC2OutFrames, fcFxPortBbCredit=fcFxPortBbCredit, fcFxPortNxPortRxDataFieldSize=fcFxPortNxPortRxDataFieldSize, fcFabric=fcFabric, fcFxPortSyncLosses=fcFxPortSyncLosses, fcFxPortC2AcctTable=fcFxPortC2AcctTable, fibreChannel=fibreChannel, Fc0BaudRateCap=Fc0BaudRateCap, fcFxPortClass2SeqDeliv=fcFxPortClass2SeqDeliv, fcFxPortCapHoldTimeMax=fcFxPortCapHoldTimeMax, fcFxPortCapBbCreditMax=fcFxPortCapBbCreditMax, fcFxPortSigLosses=fcFxPortSigLosses, fcFxPortC2AcctEntry=fcFxPortC2AcctEntry, fcFxPortPhysOperStatus=fcFxPortPhysOperStatus, fcFxConfTable=fcFxConfTable, fcFxPortIntermixSupported=fcFxPortIntermixSupported, fcFxPortNxPortName=fcFxPortNxPortName, FcAddressId=FcAddressId, fcFxPortC1InOctets=fcFxPortC1InOctets, fcFxPortStackedConnModeAgreed=fcFxPortStackedConnModeAgreed, fcFxPortInvalidCrcs=fcFxPortInvalidCrcs, fcFxPortC3AcctTable=fcFxPortC3AcctTable, fcFxPortC3InFrames=fcFxPortC3InFrames, FcRxDataFieldSize=FcRxDataFieldSize, FcFeModuleIndex=FcFeModuleIndex, fcFabricName=fcFabricName, fcFxPortC1FrjtFrames=fcFxPortC1FrjtFrames, fcFeModuleEntry=fcFeModuleEntry, fcFxPortCapStackedConnMode=fcFxPortCapStackedConnMode, fcFxPortEdtov=fcFxPortEdtov, fcFxPortPhysLastChange=fcFxPortPhysLastChange, FcBbCreditModel=FcBbCreditModel, fcFxPortC1ConnTime=fcFxPortC1ConnTime, fcFxPortC2AcctFxPortIndex=fcFxPortC2AcctFxPortIndex, fcFxPortPhysAdminStatus=fcFxPortPhysAdminStatus, fcFeAcct=fcFeAcct, fcFxPortC2FrjtFrames=fcFxPortC2FrjtFrames, fcFeModuleLastChange=fcFeModuleLastChange, fcFxPortC1OutFrames=fcFxPortC1OutFrames, fcFxPortC3Discards=fcFxPortC3Discards, fcFxPortCapModuleIndex=fcFxPortCapModuleIndex, fcFxPortCapBaudRates=fcFxPortCapBaudRates, fcFxPortC1OutOctets=fcFxPortC1OutOctets, fcFxPortName=fcFxPortName, fcFxPortDelimiterErrors=fcFxPortDelimiterErrors, fcFxPortCapFcphVersionLow=fcFxPortCapFcphVersionLow, fcFxlogiFxPortIndex=fcFxlogiFxPortIndex, fcFxPortCosSuppAgreed=fcFxPortCosSuppAgreed, fcFxPortFcphVersionLow=fcFxPortFcphVersionLow, MicroSeconds=MicroSeconds, fcFxPortRatov=fcFxPortRatov, fcFxPortClass2SeqDelivAgreed=fcFxPortClass2SeqDelivAgreed, fcFxPortIntermixSuppAgreed=fcFxPortIntermixSuppAgreed, fcFeCap=fcFeCap, fcFxConfModuleIndex=fcFxConfModuleIndex, FcStackedConnMode=FcStackedConnMode, fcFxPortAdminMode=fcFxPortAdminMode, fcFxPortCapRxDataFieldSizeMin=fcFxPortCapRxDataFieldSizeMin, fcFxPortC1OutConnections=fcFxPortC1OutConnections, fcFxPortOperFxPortIndex=fcFxPortOperFxPortIndex, fcFxPortC1FbsyFrames=fcFxPortC1FbsyFrames, fcFxPortErrorFxPortIndex=fcFxPortErrorFxPortIndex, fcFxlogiTable=fcFxlogiTable, fcFxPortMedium=fcFxPortMedium, fcFxPortAddressIdErrors=fcFxPortAddressIdErrors, fcFxPortCosSupported=fcFxPortCosSupported, DisplayString=DisplayString, fcFxPortOlsOuts=fcFxPortOlsOuts, fcElementName=fcElementName, FcCosCap=FcCosCap, fcFPortConnectedPort=fcFPortConnectedPort, fcFxPortCapClass2SeqDeliv=fcFxPortCapClass2SeqDeliv, MilliSeconds=MilliSeconds, FcphVersion=FcphVersion, FcBbCredit=FcBbCredit, fcFxPortFcphVersionHigh=fcFxPortFcphVersionHigh, fcFxPortID=fcFxPortID, fcFxPortPhysTable=fcFxPortPhysTable, fcFxPortC1InFrames=fcFxPortC1InFrames, fcFxConfEntry=fcFxConfEntry, fcFeConfig=fcFeConfig, FcFxPortMode=FcFxPortMode, fcFxPortC2Discards=fcFxPortC2Discards, fcFxPortCapIntermix=fcFxPortCapIntermix, Fc0MediaCap=Fc0MediaCap, fcFxPortConnectedNxPort=fcFxPortConnectedNxPort, fcFxPortPhysRttov=fcFxPortPhysRttov, fcFxPortPhysModuleIndex=fcFxPortPhysModuleIndex, fcFxPortC3AcctFxPortIndex=fcFxPortC3AcctFxPortIndex, fcFeModuleCapacity=fcFeModuleCapacity, fcFxPortErrorEntry=fcFxPortErrorEntry, fcFxPortCapClass3SeqDeliv=fcFxPortCapClass3SeqDeliv, fcFxPortOperMode=fcFxPortOperMode, fcFxPortHoldTime=fcFxPortHoldTime, fcFxPortOperModuleIndex=fcFxPortOperModuleIndex, fcFxlogiEntry=fcFxlogiEntry, fcFxPortBbCreditAvailable=fcFxPortBbCreditAvailable, fcFeModuleTable=fcFeModuleTable, fcFxPortDistance=fcFxPortDistance, fcFxPortStackedConnMode=fcFxPortStackedConnMode, fcFxPortLinkFailures=fcFxPortLinkFailures)
