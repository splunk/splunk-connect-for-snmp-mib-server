#
# PySNMP MIB module CISCO-WIRELESS-P2MP-PHY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WIRELESS-P2MP-PHY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:05:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Unsigned32, = mibBuilder.importSymbols("CISCO-TC", "Unsigned32")
CwrOscState, CwrRfFreqRange, CwrRfType = mibBuilder.importSymbols("CISCO-WIRELESS-TC-MIB", "CwrOscState", "CwrRfFreqRange", "CwrRfType")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, ModuleIdentity, NotificationType, ObjectIdentity, Unsigned32, MibIdentifier, Gauge32, Bits, TimeTicks, Integer32, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Gauge32", "Bits", "TimeTicks", "Integer32", "iso", "IpAddress")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
ciscoWirelessPhyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 170))
ciscoWirelessPhyMIB.setRevisions(('2000-10-22 19:10', '2000-10-04 19:10', '2000-07-21 19:10',))
if mibBuilder.loadTexts: ciscoWirelessPhyMIB.setLastUpdated('200010221910Z')
if mibBuilder.loadTexts: ciscoWirelessPhyMIB.setOrganization('Cisco Systems Inc.')
p2mpRadioObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1))
p2mpRadioBaseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1))
p2mpRadioSuObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2))
p2mpRadioHeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3))
p2mpPhyConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1))
p2mpFreqResourceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2))
p2mpRadioTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 3))
p2mpLedGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 4))
p2mpRadioPhyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1), )
if mibBuilder.loadTexts: p2mpRadioPhyTable.setStatus('current')
p2mpRadioPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: p2mpRadioPhyEntry.setStatus('current')
p2mpSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpSelfTest.setStatus('current')
p2mpDiversityAntennaPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpDiversityAntennaPresent.setStatus('current')
p2mpCableLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpCableLoss.setStatus('current')
p2mpCableLossDiversity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpCableLossDiversity.setStatus('current')
p2mpDenyService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDenyService.setStatus('current')
p2mpClockRefExt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpClockRefExt.setStatus('current')
p2mpCommonTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 7), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpCommonTrapEnable.setStatus('current')
p2mpLastPhyFailureType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("p2mpHwConfigUnsupported", 2), ("p2mpHwConfigMismatch", 3), ("p2mpHwInitFailure", 4), ("p2mpHostIfCommLinkError", 5), ("p2mpAutoCableCompFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpLastPhyFailureType.setStatus('current')
p2mpLastPhyFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpLastPhyFailureReason.setStatus('current')
p2mpRfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1), )
if mibBuilder.loadTexts: p2mpRfTable.setStatus('current')
p2mpRfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfIndex"))
if mibBuilder.loadTexts: p2mpRfEntry.setStatus('current')
p2mpRfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: p2mpRfIndex.setStatus('current')
p2mpRfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 2), CwrRfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfType.setStatus('current')
p2mpRfOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("receiveOnly", 1), ("transmitOnly", 2), ("transmitAndReceive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfOpMode.setStatus('current')
p2mpTxFreqRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 4), CwrRfFreqRange()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpTxFreqRangeMin.setStatus('current')
p2mpTxFreqRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 5), CwrRfFreqRange()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpTxFreqRangeMax.setStatus('current')
p2mpRxFreqRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 6), CwrRfFreqRange()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRxFreqRangeMin.setStatus('current')
p2mpRxFreqRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 7), CwrRfFreqRange()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRxFreqRangeMax.setStatus('current')
p2mpMinTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, 50))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpMinTxPower.setStatus('current')
p2mpMaxTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, 50))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpMaxTxPower.setStatus('current')
p2mpRfTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 100))).setUnits('Degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfTemperature.setStatus('current')
p2mpRfTxOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 11), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfTxOscState.setStatus('current')
p2mpRfRxOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 12), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfRxOscState.setStatus('current')
p2mpRfSupplyVoltageState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("withinSpecification", 1), ("outsideSpecification", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfSupplyVoltageState.setStatus('current')
p2mpRfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfStatus.setStatus('current')
p2mpRfLoopbackSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfLoopbackSupported.setStatus('current')
p2mpDuplexerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2), )
if mibBuilder.loadTexts: p2mpDuplexerTable.setStatus('current')
p2mpDuplexerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerIndex"))
if mibBuilder.loadTexts: p2mpDuplexerEntry.setStatus('current')
p2mpDuplexerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: p2mpDuplexerIndex.setStatus('current')
p2mpDuplexerRF = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 2), CwrRfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerRF.setStatus('current')
p2mpDuplexerLoPassbandMinFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 3), CwrRfFreqRange()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerLoPassbandMinFreq.setStatus('current')
p2mpDuplexerLoPassbandMaxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 4), CwrRfFreqRange()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerLoPassbandMaxFreq.setStatus('current')
p2mpDuplexerHiPassbandMinFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 5), CwrRfFreqRange()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerHiPassbandMinFreq.setStatus('current')
p2mpDuplexerHiPassbandMaxFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 6), CwrRfFreqRange()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerHiPassbandMaxFreq.setStatus('current')
p2mpDuplexerReceivePassband = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loPassband", 1), ("hiPassband", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerReceivePassband.setStatus('current')
p2mpDuplexerTxInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 8), Integer32()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerTxInsertionLoss.setStatus('current')
p2mpDuplexerBurnDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpDuplexerBurnDate.setStatus('current')
p2mpAntennaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3), )
if mibBuilder.loadTexts: p2mpAntennaTable.setStatus('current')
p2mpAntennaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaIndex"))
if mibBuilder.loadTexts: p2mpAntennaEntry.setStatus('current')
p2mpAntennaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: p2mpAntennaIndex.setStatus('current')
p2mpRfResource = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 2), CwrRfType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpRfResource.setStatus('current')
p2mpAntennaXDim = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setUnits('Inches').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpAntennaXDim.setStatus('current')
p2mpAntennaYDim = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setUnits('Inches').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpAntennaYDim.setStatus('current')
p2mpAntennaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpAntennaType.setStatus('current')
p2mpAntennaDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpAntennaDescr.setStatus('current')
p2mpAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('dBi : decibel Isotropic').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpAntennaGain.setStatus('current')
p2mpAntennaPolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vertical", 1), ("horizontal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpAntennaPolarization.setStatus('current')
p2mpLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 3, 1), )
if mibBuilder.loadTexts: p2mpLoopbackTable.setStatus('current')
p2mpLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: p2mpLoopbackEntry.setStatus('current')
p2mpLocalLoopbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLoopback", 1), ("fir", 2), ("if", 3), ("rf", 4))).clone('noLoopback')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpLocalLoopbackMode.setStatus('current')
p2mpLocalLoopbackAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 3, 1, 1, 2), CwrRfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpLocalLoopbackAntenna.setStatus('current')
p2mpLocalLoopbackChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpLocalLoopbackChannel.setStatus('current')
p2mpLedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 4, 1), )
if mibBuilder.loadTexts: p2mpLedTable.setStatus('current')
p2mpLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLedIndex"))
if mibBuilder.loadTexts: p2mpLedEntry.setStatus('current')
p2mpLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: p2mpLedIndex.setStatus('current')
p2mpLedType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("interfaceEnable", 0), ("majorAlarm", 1), ("minorAlarm", 2), ("outOfService", 3), ("carrier", 4), ("transmitData", 5), ("receiveData", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpLedType.setStatus('current')
p2mpLedState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("green", 1), ("yellow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpLedState.setStatus('current')
p2mpSuRadioPhyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 1), )
if mibBuilder.loadTexts: p2mpSuRadioPhyTable.setStatus('current')
p2mpSuRadioPhyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: p2mpSuRadioPhyEntry.setStatus('current')
p2mpSuTxMuteEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpSuTxMuteEnable.setStatus('current')
p2mpSuTxMuteDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpSuTxMuteDuration.setStatus('current')
p2mpSuPowerScanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 2), )
if mibBuilder.loadTexts: p2mpSuPowerScanTable.setStatus('current')
p2mpSuPowerScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpSuPowerScanIndex"))
if mibBuilder.loadTexts: p2mpSuPowerScanEntry.setStatus('current')
p2mpSuPowerScanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: p2mpSuPowerScanIndex.setStatus('current')
p2mpSuCenterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 2, 1, 2), CwrRfFreqRange()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpSuCenterFrequency.setStatus('current')
p2mpSuMeasuredPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 50))).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpSuMeasuredPower.setStatus('current')
p2mpHeAlcTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 1), )
if mibBuilder.loadTexts: p2mpHeAlcTable.setStatus('current')
p2mpHeAlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: p2mpHeAlcEntry.setStatus('current')
p2mpHeAlcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpHeAlcEnable.setStatus('current')
p2mpHeAlcInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32, 1024))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpHeAlcInterval.setStatus('current')
p2mpHeAlcNumMiniSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpHeAlcNumMiniSlots.setStatus('current')
p2mpHeIntFreqTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2), )
if mibBuilder.loadTexts: p2mpHeIntFreqTable.setStatus('current')
p2mpHeIntFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: p2mpHeIntFreqEntry.setStatus('current')
p2mpHeIfTxOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1, 1), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpHeIfTxOscState.setStatus('current')
p2mpHeIfRxOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1, 2), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpHeIfRxOscState.setStatus('current')
p2mpHeIfRefOscState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1, 3), CwrOscState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpHeIfRefOscState.setStatus('current')
p2mpHeIfInpFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 500000))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpHeIfInpFreq.setStatus('current')
p2mpHeIfOutFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 500000))).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: p2mpHeIfOutFreq.setStatus('current')
p2mpHeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 3, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: p2mpHeTrapEnable.setStatus('current')
p2mpPhyMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 2))
p2mpPhyMIBNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0))
p2mpRadioPhyFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 1)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLastPhyFailureType"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLastPhyFailureReason"))
if mibBuilder.loadTexts: p2mpRadioPhyFailNotification.setStatus('current')
p2mpTrapRfSupplyVoltage = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 2)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfSupplyVoltageState"))
if mibBuilder.loadTexts: p2mpTrapRfSupplyVoltage.setStatus('current')
p2mpTrapRfRxOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 3)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfRxOscState"))
if mibBuilder.loadTexts: p2mpTrapRfRxOsc.setStatus('current')
p2mpTrapRfTxOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 4)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfTxOscState"))
if mibBuilder.loadTexts: p2mpTrapRfTxOsc.setStatus('current')
p2mpTrapRfTemp = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 5)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfTemperature"))
if mibBuilder.loadTexts: p2mpTrapRfTemp.setStatus('current')
p2mpTrapRfCommLinkError = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 6)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfType"))
if mibBuilder.loadTexts: p2mpTrapRfCommLinkError.setStatus('current')
p2mpTrapTxPower = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 7)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfType"))
if mibBuilder.loadTexts: p2mpTrapTxPower.setStatus('current')
p2mpTrapRfStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 8)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfStatus"))
if mibBuilder.loadTexts: p2mpTrapRfStatusChange.setStatus('current')
p2mpTrapHeIfRxOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 9)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfRxOscState"))
if mibBuilder.loadTexts: p2mpTrapHeIfRxOsc.setStatus('current')
p2mpTrapHeIfTxOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 10)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfTxOscState"))
if mibBuilder.loadTexts: p2mpTrapHeIfTxOsc.setStatus('current')
p2mpTrapHeIfExtRefOsc = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 170, 2, 0, 11)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfRefOscState"))
if mibBuilder.loadTexts: p2mpTrapHeIfExtRefOsc.setStatus('current')
p2mpRadioPhyConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4))
p2mpRadioPhyCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 1))
p2mpRadioPhyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2))
p2mpRadioPhyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 1, 1)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpCommonRadioGroup"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpCommonRfGroup"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpCommonTestGroup"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRadioSuGroup"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRadioHeGroup"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRadioAntennaGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpRadioPhyCompliance = p2mpRadioPhyCompliance.setStatus('current')
p2mpCommonRadioGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2, 1)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpSelfTest"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDiversityAntennaPresent"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpCableLoss"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpCableLossDiversity"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDenyService"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpClockRefExt"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpCommonTrapEnable"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLastPhyFailureType"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLastPhyFailureReason"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLedType"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLedState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpCommonRadioGroup = p2mpCommonRadioGroup.setStatus('current')
p2mpCommonRfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2, 2)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfType"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfOpMode"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpTxFreqRangeMin"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpTxFreqRangeMax"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRxFreqRangeMin"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRxFreqRangeMax"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpMinTxPower"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpMaxTxPower"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfTxOscState"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfRxOscState"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfTemperature"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfSupplyVoltageState"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfStatus"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfLoopbackSupported"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerRF"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerLoPassbandMinFreq"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerLoPassbandMaxFreq"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerHiPassbandMinFreq"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerHiPassbandMaxFreq"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerReceivePassband"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerTxInsertionLoss"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpDuplexerBurnDate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpCommonRfGroup = p2mpCommonRfGroup.setStatus('current')
p2mpCommonTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2, 3)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLocalLoopbackMode"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLocalLoopbackAntenna"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpLocalLoopbackChannel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpCommonTestGroup = p2mpCommonTestGroup.setStatus('current')
p2mpRadioSuGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2, 5)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpSuTxMuteEnable"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpSuTxMuteDuration"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpSuCenterFrequency"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpSuMeasuredPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpRadioSuGroup = p2mpRadioSuGroup.setStatus('current')
p2mpRadioHeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2, 6)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeAlcEnable"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeAlcInterval"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeAlcNumMiniSlots"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfTxOscState"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfRxOscState"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfRefOscState"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfInpFreq"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeIfOutFreq"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpHeTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpRadioHeGroup = p2mpRadioHeGroup.setStatus('current')
p2mpRadioAntennaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 170, 1, 4, 2, 8)).setObjects(("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpRfResource"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaXDim"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaYDim"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaType"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaDescr"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaGain"), ("CISCO-WIRELESS-P2MP-PHY-MIB", "p2mpAntennaPolarization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    p2mpRadioAntennaGroup = p2mpRadioAntennaGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-WIRELESS-P2MP-PHY-MIB", p2mpDuplexerHiPassbandMinFreq=p2mpDuplexerHiPassbandMinFreq, p2mpSuPowerScanIndex=p2mpSuPowerScanIndex, p2mpRadioPhyTable=p2mpRadioPhyTable, p2mpRadioSuObjects=p2mpRadioSuObjects, p2mpLedGroup=p2mpLedGroup, p2mpTxFreqRangeMax=p2mpTxFreqRangeMax, p2mpRfEntry=p2mpRfEntry, p2mpRadioPhyGroups=p2mpRadioPhyGroups, p2mpAntennaEntry=p2mpAntennaEntry, p2mpRadioTestGroup=p2mpRadioTestGroup, p2mpTrapRfRxOsc=p2mpTrapRfRxOsc, p2mpRadioAntennaGroup=p2mpRadioAntennaGroup, p2mpRadioPhyEntry=p2mpRadioPhyEntry, p2mpSuRadioPhyTable=p2mpSuRadioPhyTable, p2mpHeIfRefOscState=p2mpHeIfRefOscState, p2mpRfLoopbackSupported=p2mpRfLoopbackSupported, p2mpLedTable=p2mpLedTable, p2mpHeIntFreqTable=p2mpHeIntFreqTable, p2mpRfSupplyVoltageState=p2mpRfSupplyVoltageState, p2mpDuplexerLoPassbandMinFreq=p2mpDuplexerLoPassbandMinFreq, p2mpRxFreqRangeMax=p2mpRxFreqRangeMax, p2mpHeIfTxOscState=p2mpHeIfTxOscState, p2mpDuplexerBurnDate=p2mpDuplexerBurnDate, p2mpHeAlcInterval=p2mpHeAlcInterval, p2mpLastPhyFailureType=p2mpLastPhyFailureType, p2mpRadioPhyCompliance=p2mpRadioPhyCompliance, p2mpLoopbackEntry=p2mpLoopbackEntry, p2mpHeAlcTable=p2mpHeAlcTable, p2mpRfTemperature=p2mpRfTemperature, p2mpTrapHeIfRxOsc=p2mpTrapHeIfRxOsc, p2mpPhyMIBNotificationPrefix=p2mpPhyMIBNotificationPrefix, p2mpLocalLoopbackChannel=p2mpLocalLoopbackChannel, p2mpDuplexerReceivePassband=p2mpDuplexerReceivePassband, p2mpHeIfInpFreq=p2mpHeIfInpFreq, p2mpCommonRfGroup=p2mpCommonRfGroup, p2mpAntennaXDim=p2mpAntennaXDim, p2mpHeAlcEntry=p2mpHeAlcEntry, p2mpRadioPhyFailNotification=p2mpRadioPhyFailNotification, p2mpAntennaGain=p2mpAntennaGain, p2mpTrapHeIfTxOsc=p2mpTrapHeIfTxOsc, p2mpMinTxPower=p2mpMinTxPower, p2mpFreqResourceGroup=p2mpFreqResourceGroup, p2mpDuplexerIndex=p2mpDuplexerIndex, p2mpHeIntFreqEntry=p2mpHeIntFreqEntry, p2mpDuplexerLoPassbandMaxFreq=p2mpDuplexerLoPassbandMaxFreq, p2mpTrapHeIfExtRefOsc=p2mpTrapHeIfExtRefOsc, p2mpHeAlcEnable=p2mpHeAlcEnable, p2mpSuTxMuteEnable=p2mpSuTxMuteEnable, p2mpRfType=p2mpRfType, p2mpAntennaTable=p2mpAntennaTable, p2mpPhyConfigGroup=p2mpPhyConfigGroup, p2mpTrapRfCommLinkError=p2mpTrapRfCommLinkError, p2mpDuplexerRF=p2mpDuplexerRF, p2mpTrapRfStatusChange=p2mpTrapRfStatusChange, p2mpRadioBaseObjects=p2mpRadioBaseObjects, p2mpRfResource=p2mpRfResource, p2mpRfStatus=p2mpRfStatus, p2mpHeTrapEnable=p2mpHeTrapEnable, p2mpAntennaYDim=p2mpAntennaYDim, p2mpLocalLoopbackAntenna=p2mpLocalLoopbackAntenna, p2mpLoopbackTable=p2mpLoopbackTable, p2mpHeIfOutFreq=p2mpHeIfOutFreq, p2mpSuTxMuteDuration=p2mpSuTxMuteDuration, p2mpSuPowerScanEntry=p2mpSuPowerScanEntry, p2mpLedState=p2mpLedState, p2mpSuMeasuredPower=p2mpSuMeasuredPower, p2mpDuplexerTxInsertionLoss=p2mpDuplexerTxInsertionLoss, p2mpLedEntry=p2mpLedEntry, p2mpAntennaPolarization=p2mpAntennaPolarization, p2mpHeIfRxOscState=p2mpHeIfRxOscState, p2mpCableLoss=p2mpCableLoss, p2mpRadioPhyConformance=p2mpRadioPhyConformance, p2mpRfOpMode=p2mpRfOpMode, p2mpRadioSuGroup=p2mpRadioSuGroup, p2mpRadioObjects=p2mpRadioObjects, ciscoWirelessPhyMIB=ciscoWirelessPhyMIB, p2mpSuRadioPhyEntry=p2mpSuRadioPhyEntry, p2mpPhyMIBNotification=p2mpPhyMIBNotification, p2mpCommonTrapEnable=p2mpCommonTrapEnable, p2mpHeAlcNumMiniSlots=p2mpHeAlcNumMiniSlots, p2mpLocalLoopbackMode=p2mpLocalLoopbackMode, p2mpCommonRadioGroup=p2mpCommonRadioGroup, p2mpTxFreqRangeMin=p2mpTxFreqRangeMin, p2mpAntennaIndex=p2mpAntennaIndex, p2mpMaxTxPower=p2mpMaxTxPower, p2mpRadioHeGroup=p2mpRadioHeGroup, p2mpTrapRfSupplyVoltage=p2mpTrapRfSupplyVoltage, PYSNMP_MODULE_ID=ciscoWirelessPhyMIB, p2mpSuCenterFrequency=p2mpSuCenterFrequency, p2mpDenyService=p2mpDenyService, p2mpTrapRfTxOsc=p2mpTrapRfTxOsc, p2mpClockRefExt=p2mpClockRefExt, p2mpAntennaDescr=p2mpAntennaDescr, p2mpDuplexerHiPassbandMaxFreq=p2mpDuplexerHiPassbandMaxFreq, p2mpSuPowerScanTable=p2mpSuPowerScanTable, p2mpRfIndex=p2mpRfIndex, p2mpCableLossDiversity=p2mpCableLossDiversity, p2mpAntennaType=p2mpAntennaType, p2mpRadioHeObjects=p2mpRadioHeObjects, p2mpTrapTxPower=p2mpTrapTxPower, p2mpRadioPhyCompliances=p2mpRadioPhyCompliances, p2mpDuplexerTable=p2mpDuplexerTable, p2mpRfTxOscState=p2mpRfTxOscState, p2mpTrapRfTemp=p2mpTrapRfTemp, p2mpRxFreqRangeMin=p2mpRxFreqRangeMin, p2mpRfRxOscState=p2mpRfRxOscState, p2mpRfTable=p2mpRfTable, p2mpCommonTestGroup=p2mpCommonTestGroup, p2mpLastPhyFailureReason=p2mpLastPhyFailureReason, p2mpLedType=p2mpLedType, p2mpSelfTest=p2mpSelfTest, p2mpLedIndex=p2mpLedIndex, p2mpDuplexerEntry=p2mpDuplexerEntry, p2mpDiversityAntennaPresent=p2mpDiversityAntennaPresent)
