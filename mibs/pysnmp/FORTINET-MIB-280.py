#
# PySNMP MIB module FORTINET-MIB-280 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORTINET-MIB-280
# Produced by pysmi-0.3.4 at Mon Apr 29 19:01:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, iso, NotificationType, ObjectIdentity, Gauge32, ModuleIdentity, Counter64, TimeTicks, MibIdentifier, Integer32, enterprises, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "NotificationType", "ObjectIdentity", "Gauge32", "ModuleIdentity", "Counter64", "TimeTicks", "MibIdentifier", "Integer32", "enterprises", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class FnBoolState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class FnIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class FnOpMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nat", 1), ("transparent", 2))

class FnHaMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("standalone", 1), ("active-active", 2), ("active-passive", 3))

class FnHaSchedule(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("hub", 2), ("least-connections", 3), ("round-robin", 4), ("weighted-round-robin", 5), ("random", 6), ("ip-based", 7), ("ip-port-based", 8))

class FnAdminPerm(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(255, 15, 1, 0))
    namedValues = NamedValues(("super-admin", 255), ("domain-admin", 15), ("write-admin", 1), ("read-admin", 0))

class FnUserAuth(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("local", 1), ("radius-single", 2), ("radius-multiple", 3), ("ldap", 4))

class FnIfAddrMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1))
    namedValues = NamedValues(("static", 1))

class FnSessProto(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 6, 8, 12, 17, 22, 41, 46, 47, 50, 51, 89, 103, 108, 255))
    namedValues = NamedValues(("ip", 0), ("icmp", 1), ("igmp", 2), ("ipip", 4), ("tcp", 6), ("egp", 8), ("pup", 12), ("udp", 17), ("idp", 22), ("ipv6", 41), ("rsvp", 46), ("gre", 47), ("esp", 50), ("ah", 51), ("ospf", 89), ("pim", 103), ("comp", 108), ("raw", 255))

fortinet = MibIdentifier((1, 3, 6, 1, 4, 1, 12356))
fnSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1))
fnDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 2))
fnIp = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 4))
fnVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 9))
fnIps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 12))
fnBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 15))
fnTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 0))
fnSysModel = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysModel.setStatus('current')
fnSysSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSerial.setStatus('current')
fnSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysVersion.setStatus('current')
fnSysVersionAv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysVersionAv.setStatus('current')
fnSysVersionNids = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysVersionNids.setStatus('current')
fnSysHaMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 6), FnHaMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysHaMode.setStatus('current')
fnSysOpMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 7), FnOpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysOpMode.setStatus('current')
fnSysCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysCpuUsage.setStatus('current')
fnSysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysMemUsage.setStatus('current')
fnSysSesCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnSysSesCount.setStatus('current')
fnHa = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 100))
fnAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 101))
fnUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 102))
fnOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 103))
fnLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 104))
fnMessages = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 1, 105))
fnHaGroupId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 100, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaGroupId.setStatus('current')
fnHaPriority = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 100, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaPriority.setStatus('current')
fnHaOverride = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 100, 3), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaOverride.setStatus('current')
fnHaAutoSync = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 100, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaAutoSync.setStatus('current')
fnHaSchedule = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 100, 5), FnHaSchedule()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaSchedule.setStatus('current')
fnHaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6), )
if mibBuilder.loadTexts: fnHaStatsTable.setStatus('current')
fnHaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1), ).setIndexNames((0, "FORTINET-MIB-280", "fnHaStatsIndex"))
if mibBuilder.loadTexts: fnHaStatsEntry.setStatus('current')
fnHaStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsIndex.setStatus('current')
fnHaStatsSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsSerial.setStatus('current')
fnHaStatsCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsCpuUsage.setStatus('current')
fnHaStatsMemUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsMemUsage.setStatus('current')
fnHaStatsNetUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsNetUsage.setStatus('current')
fnHaStatsSesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsSesCount.setStatus('current')
fnHaStatsPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsPktCount.setStatus('current')
fnHaStatsByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsByteCount.setStatus('current')
fnHaStatsIdsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsIdsCount.setStatus('current')
fnHaStatsAvCount = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 100, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnHaStatsAvCount.setStatus('current')
fnAdminNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 101, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAdminNumber.setStatus('current')
fnAdminTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2), )
if mibBuilder.loadTexts: fnAdminTable.setStatus('current')
fnAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2, 1), ).setIndexNames((0, "FORTINET-MIB-280", "fnAdminIndex"))
if mibBuilder.loadTexts: fnAdminEntry.setStatus('current')
fnAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2, 1, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAdminIndex.setStatus('current')
fnAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAdminName.setStatus('current')
fnAdminAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAdminAddr.setStatus('current')
fnAdminMask = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAdminMask.setStatus('current')
fnAdminPerm = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 101, 2, 1, 5), FnAdminPerm()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnAdminPerm.setStatus('current')
fnUserNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 102, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserNumber.setStatus('current')
fnUserTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 1, 102, 2), )
if mibBuilder.loadTexts: fnUserTable.setStatus('current')
fnUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 1, 102, 2, 1), ).setIndexNames((0, "FORTINET-MIB-280", "fnUserIndex"))
if mibBuilder.loadTexts: fnUserEntry.setStatus('current')
fnUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 102, 2, 1, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserIndex.setStatus('current')
fnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 102, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserName.setStatus('current')
fnUserAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 102, 2, 1, 3), FnUserAuth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserAuth.setStatus('current')
fnUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 1, 102, 2, 1, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnUserState.setStatus('current')
fnOptIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 103, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnOptIdleTimeout.setStatus('current')
fnLogOption = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 104, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnLogOption.setStatus('current')
fnMesgNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 1, 105, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnMesgNumber.setStatus('current')
fnVdNumber = MibScalar((1, 3, 6, 1, 4, 1, 12356, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVdNumber.setStatus('current')
fnVdTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 2, 2), )
if mibBuilder.loadTexts: fnVdTable.setStatus('current')
fnVdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1), ).setIndexNames((0, "FORTINET-MIB-280", "fnVdIndex"))
if mibBuilder.loadTexts: fnVdEntry.setStatus('current')
fnVdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVdIndex.setStatus('current')
fnVdName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVdName.setStatus('current')
fnIpSessTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 4, 2), )
if mibBuilder.loadTexts: fnIpSessTable.setStatus('current')
fnIpSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1), ).setIndexNames((0, "FORTINET-MIB-280", "fnIpSessIndex"))
if mibBuilder.loadTexts: fnIpSessEntry.setStatus('current')
fnIpSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessIndex.setStatus('current')
fnIpSessProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 2), FnSessProto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessProto.setStatus('current')
fnIpSessFromAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessFromAddr.setStatus('current')
fnIpSessFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessFromPort.setStatus('current')
fnIpSessToAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessToAddr.setStatus('current')
fnIpSessToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessToPort.setStatus('current')
fnIpSessExp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpSessExp.setStatus('current')
fnVpnDialupTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 9, 1), )
if mibBuilder.loadTexts: fnVpnDialupTable.setStatus('current')
fnVpnDialupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1), ).setIndexNames((0, "FORTINET-MIB-280", "fnVpnDialupIndex"))
if mibBuilder.loadTexts: fnVpnDialupEntry.setStatus('current')
fnVpnDialupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupIndex.setStatus('current')
fnVpnDialupGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupGateway.setStatus('current')
fnVpnDialupLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupLifetime.setStatus('current')
fnVpnDialupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupTimeout.setStatus('current')
fnVpnDialupSrcBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupSrcBegin.setStatus('current')
fnVpnDialupSrcEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupSrcEnd.setStatus('current')
fnVpnDialupDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 9, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnVpnDialupDstAddr.setStatus('current')
fnBridgeFgtFailure = MibScalar((1, 3, 6, 1, 4, 1, 12356, 15, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnBridgeFgtFailure.setStatus('current')
fnIpsSigId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 12, 1), FnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpsSigId.setStatus('current')
fnIpsSigSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 12, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnIpsSigSrcIp.setStatus('current')
mibBuilder.exportSymbols("FORTINET-MIB-280", fnLogOption=fnLogOption, fnSysSerial=fnSysSerial, fnSysVersion=fnSysVersion, fnIpSessIndex=fnIpSessIndex, fnIp=fnIp, fnVpnDialupSrcBegin=fnVpnDialupSrcBegin, fnHaStatsPktCount=fnHaStatsPktCount, fnMesgNumber=fnMesgNumber, fnIpSessExp=fnIpSessExp, fnVdIndex=fnVdIndex, fnAdminTable=fnAdminTable, fnIpSessEntry=fnIpSessEntry, fnSysVersionAv=fnSysVersionAv, fnVpnDialupGateway=fnVpnDialupGateway, fnHaOverride=fnHaOverride, fnVdNumber=fnVdNumber, fnVpnDialupLifetime=fnVpnDialupLifetime, FnAdminPerm=FnAdminPerm, fnIpSessFromAddr=fnIpSessFromAddr, fnVpnDialupTimeout=fnVpnDialupTimeout, fnLogging=fnLogging, fnMessages=fnMessages, fnVpnDialupSrcEnd=fnVpnDialupSrcEnd, fnUserAuth=fnUserAuth, fnVdTable=fnVdTable, fnIpsSigSrcIp=fnIpsSigSrcIp, fnSystem=fnSystem, fnHaStatsAvCount=fnHaStatsAvCount, fnUsers=fnUsers, fnAdminPerm=fnAdminPerm, fnSysVersionNids=fnSysVersionNids, fnSysHaMode=fnSysHaMode, FnIfAddrMode=FnIfAddrMode, fnAdminIndex=fnAdminIndex, fnSysOpMode=fnSysOpMode, fnIpSessTable=fnIpSessTable, fnUserTable=fnUserTable, fnHaStatsSerial=fnHaStatsSerial, FnHaMode=FnHaMode, fnUserName=fnUserName, fnSysModel=fnSysModel, fnHaGroupId=fnHaGroupId, fnVpnDialupTable=fnVpnDialupTable, FnSessProto=FnSessProto, fnHaAutoSync=fnHaAutoSync, fnAdminNumber=fnAdminNumber, fnUserState=fnUserState, fnVdEntry=fnVdEntry, fnOptions=fnOptions, fnAdminAddr=fnAdminAddr, fnBridge=fnBridge, fnHaStatsByteCount=fnHaStatsByteCount, fnSysSesCount=fnSysSesCount, fnUserIndex=fnUserIndex, fnAdminName=fnAdminName, fnVpn=fnVpn, fnVpnDialupDstAddr=fnVpnDialupDstAddr, FnIndex=FnIndex, fnHaStatsNetUsage=fnHaStatsNetUsage, fnHaPriority=fnHaPriority, fnHaStatsIdsCount=fnHaStatsIdsCount, fnHaStatsSesCount=fnHaStatsSesCount, fnHaStatsEntry=fnHaStatsEntry, fnOptIdleTimeout=fnOptIdleTimeout, fnHaSchedule=fnHaSchedule, fnUserNumber=fnUserNumber, FnUserAuth=FnUserAuth, fortinet=fortinet, fnTraps=fnTraps, fnVpnDialupIndex=fnVpnDialupIndex, fnIps=fnIps, fnHaStatsCpuUsage=fnHaStatsCpuUsage, FnOpMode=FnOpMode, fnHaStatsTable=fnHaStatsTable, fnBridgeFgtFailure=fnBridgeFgtFailure, fnIpSessProto=fnIpSessProto, fnDomains=fnDomains, fnHaStatsIndex=fnHaStatsIndex, fnVdName=fnVdName, FnHaSchedule=FnHaSchedule, fnIpsSigId=fnIpsSigId, fnAdminMask=fnAdminMask, fnUserEntry=fnUserEntry, fnHa=fnHa, fnAdminEntry=fnAdminEntry, FnBoolState=FnBoolState, fnIpSessFromPort=fnIpSessFromPort, fnAdmin=fnAdmin, fnIpSessToAddr=fnIpSessToAddr, fnIpSessToPort=fnIpSessToPort, fnHaStatsMemUsage=fnHaStatsMemUsage, fnSysCpuUsage=fnSysCpuUsage, fnVpnDialupEntry=fnVpnDialupEntry, fnSysMemUsage=fnSysMemUsage)
