#
# PySNMP MIB module Nortel-Magellan-Passport-DcmeMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-DcmeMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:17:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
DisplayString, StorageType, RowStatus, Gauge32, Counter32, RowPointer, PassportCounter64, Integer32, Unsigned32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "StorageType", "RowStatus", "Gauge32", "Counter32", "RowPointer", "PassportCounter64", "Integer32", "Unsigned32")
EnterpriseDateAndTime, AsciiString, NonReplicated, DigitString, Hex, Link, FixedPoint1 = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "EnterpriseDateAndTime", "AsciiString", "NonReplicated", "DigitString", "Hex", "Link", "FixedPoint1")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibIdentifier, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, Integer32, NotificationType, Bits, IpAddress, Counter64, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "Integer32", "NotificationType", "Bits", "IpAddress", "Counter64", "iso", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dcmeMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 134))
dcme = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129))
dcmeRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 1), )
if mibBuilder.loadTexts: dcmeRowStatusTable.setStatus('mandatory')
dcmeRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeIndex"))
if mibBuilder.loadTexts: dcmeRowStatusEntry.setStatus('mandatory')
dcmeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeRowStatus.setStatus('mandatory')
dcmeComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmeComponentName.setStatus('mandatory')
dcmeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmeStorageType.setStatus('mandatory')
dcmeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dcmeIndex.setStatus('mandatory')
dcmeProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 10), )
if mibBuilder.loadTexts: dcmeProvTable.setStatus('mandatory')
dcmeProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeIndex"))
if mibBuilder.loadTexts: dcmeProvEntry.setStatus('mandatory')
dcmeCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeCommentText.setStatus('mandatory')
dcmePreestablishedConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmePreestablishedConnections.setStatus('mandatory')
dcmeTrmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeTrmThreshold.setStatus('mandatory')
dcmeTrmSignalChangeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeTrmSignalChangeInterval.setStatus('mandatory')
dcmeSpeechAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeSpeechAlarmThreshold.setStatus('mandatory')
dcmeAudio3kHzAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeAudio3kHzAlarmThreshold.setStatus('mandatory')
dcmeUnrestricted64kAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeUnrestricted64kAlarmThreshold.setStatus('mandatory')
dcmeAlarmTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeAlarmTimeInterval.setStatus('mandatory')
dcmeMaxUnrestricted64kCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 420)).clone(420)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeMaxUnrestricted64kCalls.setStatus('mandatory')
dcmeStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 11), )
if mibBuilder.loadTexts: dcmeStateTable.setStatus('mandatory')
dcmeStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeIndex"))
if mibBuilder.loadTexts: dcmeStateEntry.setStatus('mandatory')
dcmeAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmeAdminState.setStatus('mandatory')
dcmeOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmeOperationalState.setStatus('mandatory')
dcmeUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmeUsageState.setStatus('mandatory')
dcmeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 13), )
if mibBuilder.loadTexts: dcmeStatsTable.setStatus('mandatory')
dcmeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeIndex"))
if mibBuilder.loadTexts: dcmeStatsEntry.setStatus('mandatory')
dcmeTrm64kNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmeTrm64kNotAvailable.setStatus('mandatory')
dcmeTrmSpeechNotAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmeTrmSpeechNotAvailable.setStatus('mandatory')
dcmeDLinksTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 419), )
if mibBuilder.loadTexts: dcmeDLinksTable.setStatus('mandatory')
dcmeDLinksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 419, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeDLinksValue"))
if mibBuilder.loadTexts: dcmeDLinksEntry.setStatus('mandatory')
dcmeDLinksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 419, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeDLinksValue.setStatus('mandatory')
dcmeDLinksRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 419, 1, 2), RowStatus()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: dcmeDLinksRowStatus.setStatus('mandatory')
dcmeActiveDcmeLinksTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 420), )
if mibBuilder.loadTexts: dcmeActiveDcmeLinksTable.setStatus('mandatory')
dcmeActiveDcmeLinksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 420, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeActiveDcmeLinksValue"))
if mibBuilder.loadTexts: dcmeActiveDcmeLinksEntry.setStatus('mandatory')
dcmeActiveDcmeLinksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 420, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmeActiveDcmeLinksValue.setStatus('mandatory')
dcmeProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2))
dcmeProfileRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 1), )
if mibBuilder.loadTexts: dcmeProfileRowStatusTable.setStatus('mandatory')
dcmeProfileRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeProfileIndex"))
if mibBuilder.loadTexts: dcmeProfileRowStatusEntry.setStatus('mandatory')
dcmeProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmeProfileRowStatus.setStatus('mandatory')
dcmeProfileComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmeProfileComponentName.setStatus('mandatory')
dcmeProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmeProfileStorageType.setStatus('mandatory')
dcmeProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dcmeProfileIndex.setStatus('mandatory')
dcmeProfileLCOpsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10), )
if mibBuilder.loadTexts: dcmeProfileLCOpsTable.setStatus('mandatory')
dcmeProfileLCOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeProfileIndex"))
if mibBuilder.loadTexts: dcmeProfileLCOpsEntry.setStatus('mandatory')
dcmeProfileSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileSetupPriority.setStatus('mandatory')
dcmeProfileHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileHoldingPriority.setStatus('mandatory')
dcmeProfileBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1))).clone('bumpWhenNecessary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileBumpPreference.setStatus('mandatory')
dcmeProfileRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7))).clone('voice')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileRequiredTrafficType.setStatus('mandatory')
dcmeProfilePermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfilePermittedTrunkTypes.setStatus('mandatory')
dcmeProfileRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileRequiredSecurity.setStatus('mandatory')
dcmeProfileRequiredCustomerParm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileRequiredCustomerParm.setStatus('mandatory')
dcmeProfilePathAttributeToMinimize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cost", 0), ("delay", 1))).clone('cost')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfilePathAttributeToMinimize.setStatus('mandatory')
dcmeProfileMaximumAcceptableCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1280)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileMaximumAcceptableCost.setStatus('mandatory')
dcmeProfileMaximumAcceptableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileMaximumAcceptableDelay.setStatus('mandatory')
dcmeProfileEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileEmissionPriority.setStatus('mandatory')
dcmeProfileDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileDiscardPriority.setStatus('mandatory')
dcmeProfilePathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1))).clone('reRoutePath')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfilePathFailureAction.setStatus('mandatory')
dcmeProfileOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileOptimization.setStatus('mandatory')
dcmeProfileFrOpsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11), )
if mibBuilder.loadTexts: dcmeProfileFrOpsTable.setStatus('mandatory')
dcmeProfileFrOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dcmeProfileIndex"))
if mibBuilder.loadTexts: dcmeProfileFrOpsEntry.setStatus('mandatory')
dcmeProfileVoiceEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("g711G726", 0), ("g728at16", 1), ("g729at8", 2))).clone('g728at16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileVoiceEncoding.setStatus('mandatory')
dcmeProfileMaxVoiceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1), ("n24", 2))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileMaxVoiceBitRate.setStatus('mandatory')
dcmeProfileMinVoiceBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1), ("n24", 2))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileMinVoiceBitRate.setStatus('mandatory')
dcmeProfileVoiceTrafficOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bandwidth", 0), ("delay", 1))).clone('bandwidth')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileVoiceTrafficOptimization.setStatus('mandatory')
dcmeProfileSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("congested", 2), ("slow", 3), ("slowAndCongested", 4))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileSilenceSuppression.setStatus('mandatory')
dcmeProfileSilenceSuppressionFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileSilenceSuppressionFactor.setStatus('mandatory')
dcmeProfileEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileEchoCancellation.setStatus('mandatory')
dcmeProfileModemFaxEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("g711G726", 0), ("faxRelayOnly", 1), ("faxRelayG711G726", 2), ("useVoiceEncoding", 3))).clone('faxRelayOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileModemFaxEncoding.setStatus('mandatory')
dcmeProfileMaxModemFaxG711G726Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileMaxModemFaxG711G726Rate.setStatus('mandatory')
dcmeProfileMinModemFaxG711G726Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n64", 0), ("n32", 1))).clone('n64')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileMinModemFaxG711G726Rate.setStatus('mandatory')
dcmeProfileFaxIdleSuppressionG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileFaxIdleSuppressionG711G726.setStatus('mandatory')
dcmeProfileInsertedOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 15, 22, 30, 35, 40, 45, 50, 75, 100, 125, 150))).clone(namedValues=NamedValues(("n5", 5), ("n15", 15), ("n22", 22), ("n30", 30), ("n35", 35), ("n40", 40), ("n45", 45), ("n50", 50), ("n75", 75), ("n100", 100), ("n125", 125), ("n150", 150))).clone('n22')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileInsertedOutputDelay.setStatus('mandatory')
dcmeProfileIngressAudioGain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileIngressAudioGain.setStatus('mandatory')
dcmeProfileEgressAudioGain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileEgressAudioGain.setStatus('mandatory')
dcmeProfileSpeechHangoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 500)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileSpeechHangoverTime.setStatus('mandatory')
dcmeProfileComfortNoiseCap = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-78, -78), ValueRangeConstraint(-65, -65), ValueRangeConstraint(-60, -60), ValueRangeConstraint(-54, -54), ValueRangeConstraint(-52, -52), ValueRangeConstraint(-50, -50), ValueRangeConstraint(-48, -48), ValueRangeConstraint(-46, -46), ValueRangeConstraint(-44, -44), ValueRangeConstraint(-42, -42), ValueRangeConstraint(-40, -40), )).clone(-40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileComfortNoiseCap.setStatus('mandatory')
dcmeProfileModemFaxSpeechDiscrim = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileModemFaxSpeechDiscrim.setStatus('mandatory')
dcmeProfileV17EncodedAsG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileV17EncodedAsG711G726.setStatus('mandatory')
dcmeProfileDtmfRegeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileDtmfRegeneration.setStatus('mandatory')
dcmeProfileMaxFaxRelayRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 129, 2, 11, 1, 21), FixedPoint1().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(24, 24), ValueRangeConstraint(48, 48), ValueRangeConstraint(72, 72), ValueRangeConstraint(96, 96), ValueRangeConstraint(120, 120), ValueRangeConstraint(144, 144), )).clone(144)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmeProfileMaxFaxRelayRate.setStatus('mandatory')
dcl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130))
dclRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 1), )
if mibBuilder.loadTexts: dclRowStatusTable.setStatus('mandatory')
dclRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"))
if mibBuilder.loadTexts: dclRowStatusEntry.setStatus('mandatory')
dclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclRowStatus.setStatus('mandatory')
dclComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclComponentName.setStatus('mandatory')
dclStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclStorageType.setStatus('mandatory')
dclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: dclIndex.setStatus('mandatory')
dclProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 10), )
if mibBuilder.loadTexts: dclProvTable.setStatus('mandatory')
dclProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"))
if mibBuilder.loadTexts: dclProvEntry.setStatus('mandatory')
dclCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclCommentText.setStatus('mandatory')
dclRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('e164')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclRemoteNpi.setStatus('mandatory')
dclRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 10, 1, 3), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclRemoteDna.setStatus('mandatory')
dclDcme = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 10, 1, 4), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclDcme.setStatus('mandatory')
dclIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 10, 1, 5), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(213)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclIdlePattern.setStatus('mandatory')
dclAlternateIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 10, 1, 6), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(213)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclAlternateIdlePattern.setStatus('mandatory')
dclStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 11), )
if mibBuilder.loadTexts: dclStateTable.setStatus('mandatory')
dclStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"))
if mibBuilder.loadTexts: dclStateEntry.setStatus('mandatory')
dclAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclAdminState.setStatus('mandatory')
dclOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclOperationalState.setStatus('mandatory')
dclUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclUsageState.setStatus('mandatory')
dclOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 12), )
if mibBuilder.loadTexts: dclOperTable.setStatus('mandatory')
dclOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"))
if mibBuilder.loadTexts: dclOperEntry.setStatus('mandatory')
dclActiveSpeechCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 12, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclActiveSpeechCalls.setStatus('mandatory')
dclActive3kHzCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 12, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclActive3kHzCalls.setStatus('mandatory')
dclActive64kCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 12, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclActive64kCalls.setStatus('mandatory')
dclReceivedTrmSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none000", 0), ("invalid001", 1), ("invalid010", 2), ("invalid011", 3), ("invalid100", 4), ("switchingCentreNormal101", 5), ("maintenanceReleaseAck110", 6), ("dcmeClearOfTraffic111", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclReceivedTrmSignal.setStatus('mandatory')
dclTransmittedTrmSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none000", 0), ("dcmeNormal100", 4), ("no64KbitSCapacity101", 5), ("maintenanceReleaseRequest110", 6), ("noCapacityAvailable111", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclTransmittedTrmSignal.setStatus('mandatory')
dclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 13), )
if mibBuilder.loadTexts: dclStatsTable.setStatus('mandatory')
dclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"))
if mibBuilder.loadTexts: dclStatsEntry.setStatus('mandatory')
dclTotalSpeechCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclTotalSpeechCalls.setStatus('mandatory')
dclTotal3kHzCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclTotal3kHzCalls.setStatus('mandatory')
dclTotal64kCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclTotal64kCalls.setStatus('mandatory')
dclRejectedSpeechCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclRejectedSpeechCalls.setStatus('mandatory')
dclRejected3kHzCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclRejected3kHzCalls.setStatus('mandatory')
dclRejected64kCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclRejected64kCalls.setStatus('mandatory')
dclInvalidTrmSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclInvalidTrmSignals.setStatus('mandatory')
dclDna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 2))
dclDnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 2, 1), )
if mibBuilder.loadTexts: dclDnaRowStatusTable.setStatus('mandatory')
dclDnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclDnaIndex"))
if mibBuilder.loadTexts: dclDnaRowStatusEntry.setStatus('mandatory')
dclDnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclDnaRowStatus.setStatus('mandatory')
dclDnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclDnaComponentName.setStatus('mandatory')
dclDnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclDnaStorageType.setStatus('mandatory')
dclDnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dclDnaIndex.setStatus('mandatory')
dclDnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 2, 10), )
if mibBuilder.loadTexts: dclDnaAddressTable.setStatus('mandatory')
dclDnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclDnaIndex"))
if mibBuilder.loadTexts: dclDnaAddressEntry.setStatus('mandatory')
dclDnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('e164')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclDnaNumberingPlanIndicator.setStatus('mandatory')
dclDnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclDnaDataNetworkAddress.setStatus('mandatory')
dclFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3))
dclFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 1), )
if mibBuilder.loadTexts: dclFramerRowStatusTable.setStatus('mandatory')
dclFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclFramerIndex"))
if mibBuilder.loadTexts: dclFramerRowStatusEntry.setStatus('mandatory')
dclFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFramerRowStatus.setStatus('mandatory')
dclFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFramerComponentName.setStatus('mandatory')
dclFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFramerStorageType.setStatus('mandatory')
dclFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dclFramerIndex.setStatus('mandatory')
dclFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 10), )
if mibBuilder.loadTexts: dclFramerProvTable.setStatus('mandatory')
dclFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclFramerIndex"))
if mibBuilder.loadTexts: dclFramerProvEntry.setStatus('mandatory')
dclFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFramerInterfaceName.setStatus('mandatory')
dclFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 12), )
if mibBuilder.loadTexts: dclFramerStateTable.setStatus('mandatory')
dclFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclFramerIndex"))
if mibBuilder.loadTexts: dclFramerStateEntry.setStatus('mandatory')
dclFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFramerAdminState.setStatus('mandatory')
dclFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFramerOperationalState.setStatus('mandatory')
dclFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFramerUsageState.setStatus('mandatory')
dclVs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4))
dclVsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 1), )
if mibBuilder.loadTexts: dclVsRowStatusTable.setStatus('mandatory')
dclVsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"))
if mibBuilder.loadTexts: dclVsRowStatusEntry.setStatus('mandatory')
dclVsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclVsRowStatus.setStatus('mandatory')
dclVsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsComponentName.setStatus('mandatory')
dclVsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsStorageType.setStatus('mandatory')
dclVsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: dclVsIndex.setStatus('mandatory')
dclVsProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 10), )
if mibBuilder.loadTexts: dclVsProvTable.setStatus('mandatory')
dclVsProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"))
if mibBuilder.loadTexts: dclVsProvEntry.setStatus('mandatory')
dclVsVsType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dynamicVs", 0), ("permanent64kVs", 1))).clone('dynamicVs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclVsVsType.setStatus('mandatory')
dclVsOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 11), )
if mibBuilder.loadTexts: dclVsOperTable.setStatus('mandatory')
dclVsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"))
if mibBuilder.loadTexts: dclVsOperEntry.setStatus('mandatory')
dclVsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("idle", 0), ("seized", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsStatus.setStatus('mandatory')
dclVsCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("speech", 1), ("n31KHz", 2), ("n64KbitS", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsCallType.setStatus('mandatory')
dclVsReceivedAbBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none00", 0), ("normalServiceAvailable01", 1), ("n31KHzRequest10", 2), ("n64KbitSRequest11", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsReceivedAbBits.setStatus('mandatory')
dclVsTransmittedAbBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none00", 0), ("normalServiceAvailable01", 1), ("specialServiceAck10", 2), ("channelOutOfService11", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsTransmittedAbBits.setStatus('mandatory')
dclVsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 12), )
if mibBuilder.loadTexts: dclVsStatsTable.setStatus('mandatory')
dclVsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"))
if mibBuilder.loadTexts: dclVsStatsEntry.setStatus('mandatory')
dclVsTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsTotalCalls.setStatus('mandatory')
dclVsTotalCallSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsTotalCallSeconds.setStatus('mandatory')
dclVsInvalidAbBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsInvalidAbBits.setStatus('mandatory')
dclVsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 13), )
if mibBuilder.loadTexts: dclVsStateTable.setStatus('mandatory')
dclVsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"))
if mibBuilder.loadTexts: dclVsStateEntry.setStatus('mandatory')
dclVsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsAdminState.setStatus('mandatory')
dclVsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsOperationalState.setStatus('mandatory')
dclVsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsUsageState.setStatus('mandatory')
dclVsFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2))
dclVsFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 1), )
if mibBuilder.loadTexts: dclVsFramerRowStatusTable.setStatus('mandatory')
dclVsFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"))
if mibBuilder.loadTexts: dclVsFramerRowStatusEntry.setStatus('mandatory')
dclVsFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerRowStatus.setStatus('mandatory')
dclVsFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerComponentName.setStatus('mandatory')
dclVsFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerStorageType.setStatus('mandatory')
dclVsFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dclVsFramerIndex.setStatus('mandatory')
dclVsFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 10), )
if mibBuilder.loadTexts: dclVsFramerProvTable.setStatus('mandatory')
dclVsFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"))
if mibBuilder.loadTexts: dclVsFramerProvEntry.setStatus('mandatory')
dclVsFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclVsFramerInterfaceName.setStatus('mandatory')
dclVsFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 14), )
if mibBuilder.loadTexts: dclVsFramerStateTable.setStatus('mandatory')
dclVsFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"))
if mibBuilder.loadTexts: dclVsFramerStateEntry.setStatus('mandatory')
dclVsFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerAdminState.setStatus('mandatory')
dclVsFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerOperationalState.setStatus('mandatory')
dclVsFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerUsageState.setStatus('mandatory')
dclVsFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15), )
if mibBuilder.loadTexts: dclVsFramerStatsTable.setStatus('mandatory')
dclVsFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"))
if mibBuilder.loadTexts: dclVsFramerStatsEntry.setStatus('mandatory')
dclVsFramerTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerTotalCells.setStatus('mandatory')
dclVsFramerAudioCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerAudioCells.setStatus('mandatory')
dclVsFramerSilenceCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerSilenceCells.setStatus('mandatory')
dclVsFramerModemCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerModemCells.setStatus('obsolete')
dclVsFramerCurrentEncodingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n640", 1), ("n320", 2), ("n240", 3), ("n160", 4), ("n80", 5), ("n144", 6), ("n120", 7), ("n96", 8), ("n72", 9), ("n63", 10), ("n53", 11), ("n48", 12), ("n24", 13), ("n12", 14), ("n03", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerCurrentEncodingRate.setStatus('obsolete')
dclVsFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerLrcErrors.setStatus('mandatory')
dclVsFramerFrmLostInNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerFrmLostInNetwork.setStatus('mandatory')
dclVsFramerFrmUnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerFrmUnderRuns.setStatus('mandatory')
dclVsFramerFrmDumped = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerFrmDumped.setStatus('mandatory')
dclVsFramerModemSilenceCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerModemSilenceCells.setStatus('obsolete')
dclVsFramerCurrentEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 32, 33, 64, 65, 66, 67, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g723", 3), ("g726", 4), ("g711", 5), ("v22", 32), ("v22bis", 33), ("faxRelay", 64), ("v27", 65), ("v29", 66), ("v17", 67), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerCurrentEncoding.setStatus('obsolete')
dclVsFramerTptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("operating", 0), ("rejected", 1), ("monitoring", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerTptStatus.setStatus('obsolete')
dclVsFramerFaxRelayCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerFaxRelayCells.setStatus('mandatory')
dclVsFramerModemFaxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 36), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerModemFaxCells.setStatus('mandatory')
dclVsFramerFaxIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 15, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerFaxIdleCells.setStatus('mandatory')
dclVsFramerOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 16), )
if mibBuilder.loadTexts: dclVsFramerOperTable.setStatus('mandatory')
dclVsFramerOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 16, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"))
if mibBuilder.loadTexts: dclVsFramerOperEntry.setStatus('mandatory')
dclVsFramerOpCurrentEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 32, 33, 64, 65, 66, 67, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g723", 3), ("g726", 4), ("g711", 5), ("v22", 32), ("v22bis", 33), ("faxRelay", 64), ("v27", 65), ("v29", 66), ("v17", 67), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerOpCurrentEncoding.setStatus('mandatory')
dclVsFramerCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("n0", 0), ("n640", 1), ("n320", 2), ("n240", 3), ("n160", 4), ("n80", 5), ("n144", 6), ("n120", 7), ("n96", 8), ("n72", 9), ("n63", 10), ("n53", 11), ("n48", 12), ("n24", 13), ("n12", 14), ("n03", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerCurrentRate.setStatus('mandatory')
dclVsFramerOpTptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("operating", 0), ("monitoring", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerOpTptStatus.setStatus('mandatory')
dclVsFramerNegTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 17), )
if mibBuilder.loadTexts: dclVsFramerNegTable.setStatus('mandatory')
dclVsFramerNegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 17, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"))
if mibBuilder.loadTexts: dclVsFramerNegEntry.setStatus('mandatory')
dclVsFramerNegotiatedSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("congested", 2), ("slow", 3), ("slowAndCongested", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclVsFramerNegotiatedSilenceSuppression.setStatus('mandatory')
dclVsFramerNegotiatedFisG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclVsFramerNegotiatedFisG711G726.setStatus('mandatory')
dclVsFramerNegotiatedDtmfRegeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclVsFramerNegotiatedDtmfRegeneration.setStatus('mandatory')
dclVsFramerNegotiatedV17AsG711G726 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerNegotiatedV17AsG711G726.setStatus('mandatory')
dclVsFramerNegotiatedTandemPassThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerNegotiatedTandemPassThrough.setStatus('mandatory')
dclVsFramerFrmToNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 315), )
if mibBuilder.loadTexts: dclVsFramerFrmToNetworkTable.setStatus('mandatory')
dclVsFramerFrmToNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 315, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerFrmToNetworkIndex"))
if mibBuilder.loadTexts: dclVsFramerFrmToNetworkEntry.setStatus('mandatory')
dclVsFramerFrmToNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 315, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n64KbitS", 0), ("n32KbitS", 1), ("n24KbitS", 2), ("n16KbitS", 3), ("n8KbitS", 4))))
if mibBuilder.loadTexts: dclVsFramerFrmToNetworkIndex.setStatus('mandatory')
dclVsFramerFrmToNetworkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 315, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerFrmToNetworkValue.setStatus('mandatory')
dclVsFramerFrmFromNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 316), )
if mibBuilder.loadTexts: dclVsFramerFrmFromNetworkTable.setStatus('mandatory')
dclVsFramerFrmFromNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 316, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerFrmFromNetworkIndex"))
if mibBuilder.loadTexts: dclVsFramerFrmFromNetworkEntry.setStatus('mandatory')
dclVsFramerFrmFromNetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 316, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n64KbitS", 0), ("n32KbitS", 1), ("n24KbitS", 2), ("n16KbitS", 3), ("n8KbitS", 4))))
if mibBuilder.loadTexts: dclVsFramerFrmFromNetworkIndex.setStatus('mandatory')
dclVsFramerFrmFromNetworkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 316, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerFrmFromNetworkValue.setStatus('mandatory')
dclVsFramerNEncodingTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 467), )
if mibBuilder.loadTexts: dclVsFramerNEncodingTable.setStatus('mandatory')
dclVsFramerNEncodingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 467, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerNEncodingIndex"))
if mibBuilder.loadTexts: dclVsFramerNEncodingEntry.setStatus('mandatory')
dclVsFramerNEncodingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 467, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voice", 0), ("modemFax", 1), ("fax", 2))))
if mibBuilder.loadTexts: dclVsFramerNEncodingIndex.setStatus('mandatory')
dclVsFramerNEncodingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 467, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 31, 64, 68, 255))).clone(namedValues=NamedValues(("g729", 1), ("g728", 2), ("g726", 4), ("g711", 5), ("g711G726", 31), ("v29V27Relay", 64), ("v17V29V27Relay", 68), ("none", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclVsFramerNEncodingValue.setStatus('mandatory')
dclVsFramerNRatesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 479), )
if mibBuilder.loadTexts: dclVsFramerNRatesTable.setStatus('mandatory')
dclVsFramerNRatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 479, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerNRatesTrafficIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerNRatesRateIndex"))
if mibBuilder.loadTexts: dclVsFramerNRatesEntry.setStatus('mandatory')
dclVsFramerNRatesTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 479, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("voice", 0), ("modemFax", 1), ("fax", 2))))
if mibBuilder.loadTexts: dclVsFramerNRatesTrafficIndex.setStatus('mandatory')
dclVsFramerNRatesRateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 479, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("min", 0), ("max", 1))))
if mibBuilder.loadTexts: dclVsFramerNRatesRateIndex.setStatus('mandatory')
dclVsFramerNRatesValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 479, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 66, 67, 68, 69, 70))).clone(namedValues=NamedValues(("n00", 0), ("n03", 1), ("n12", 2), ("n24", 3), ("n48", 4), ("n72", 5), ("n96", 6), ("n120", 7), ("n144", 8), ("n80", 66), ("n160", 67), ("n240", 68), ("n320", 69), ("n640", 70)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclVsFramerNRatesValue.setStatus('mandatory')
dclVsFramerVfpDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 5))
dclVsFramerVfpDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 5, 1), )
if mibBuilder.loadTexts: dclVsFramerVfpDebugRowStatusTable.setStatus('mandatory')
dclVsFramerVfpDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerVfpDebugIndex"))
if mibBuilder.loadTexts: dclVsFramerVfpDebugRowStatusEntry.setStatus('mandatory')
dclVsFramerVfpDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerVfpDebugRowStatus.setStatus('mandatory')
dclVsFramerVfpDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerVfpDebugComponentName.setStatus('mandatory')
dclVsFramerVfpDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerVfpDebugStorageType.setStatus('mandatory')
dclVsFramerVfpDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dclVsFramerVfpDebugIndex.setStatus('mandatory')
dclVsFramerMvpDebug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 6))
dclVsFramerMvpDebugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 6, 1), )
if mibBuilder.loadTexts: dclVsFramerMvpDebugRowStatusTable.setStatus('mandatory')
dclVsFramerMvpDebugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerMvpDebugIndex"))
if mibBuilder.loadTexts: dclVsFramerMvpDebugRowStatusEntry.setStatus('mandatory')
dclVsFramerMvpDebugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerMvpDebugRowStatus.setStatus('mandatory')
dclVsFramerMvpDebugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerMvpDebugComponentName.setStatus('mandatory')
dclVsFramerMvpDebugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerMvpDebugStorageType.setStatus('mandatory')
dclVsFramerMvpDebugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dclVsFramerMvpDebugIndex.setStatus('mandatory')
dclVsFramerPcmCapture = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 7))
dclVsFramerPcmCaptureRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 7, 1), )
if mibBuilder.loadTexts: dclVsFramerPcmCaptureRowStatusTable.setStatus('mandatory')
dclVsFramerPcmCaptureRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsFramerPcmCaptureIndex"))
if mibBuilder.loadTexts: dclVsFramerPcmCaptureRowStatusEntry.setStatus('mandatory')
dclVsFramerPcmCaptureRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerPcmCaptureRowStatus.setStatus('mandatory')
dclVsFramerPcmCaptureComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerPcmCaptureComponentName.setStatus('mandatory')
dclVsFramerPcmCaptureStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsFramerPcmCaptureStorageType.setStatus('mandatory')
dclVsFramerPcmCaptureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 2, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dclVsFramerPcmCaptureIndex.setStatus('mandatory')
dclVsLCo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3))
dclVsLCoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 1), )
if mibBuilder.loadTexts: dclVsLCoRowStatusTable.setStatus('mandatory')
dclVsLCoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsLCoIndex"))
if mibBuilder.loadTexts: dclVsLCoRowStatusEntry.setStatus('mandatory')
dclVsLCoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoRowStatus.setStatus('mandatory')
dclVsLCoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoComponentName.setStatus('mandatory')
dclVsLCoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoStorageType.setStatus('mandatory')
dclVsLCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dclVsLCoIndex.setStatus('mandatory')
dclVsLCoPathDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10), )
if mibBuilder.loadTexts: dclVsLCoPathDataTable.setStatus('mandatory')
dclVsLCoPathDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsLCoIndex"))
if mibBuilder.loadTexts: dclVsLCoPathDataEntry.setStatus('mandatory')
dclVsLCoState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pathDown", 0), ("selectingRoute", 1), ("connecting", 2), ("pathUp", 3), ("pathDownRetrying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoState.setStatus('mandatory')
dclVsLCoOverrideRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclVsLCoOverrideRemoteName.setStatus('mandatory')
dclVsLCoEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("calling", 0), ("called", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoEnd.setStatus('mandatory')
dclVsLCoCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoCostMetric.setStatus('mandatory')
dclVsLCoDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoDelayMetric.setStatus('mandatory')
dclVsLCoRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoRoundTripDelay.setStatus('mandatory')
dclVsLCoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoSetupPriority.setStatus('mandatory')
dclVsLCoHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoHoldingPriority.setStatus('mandatory')
dclVsLCoRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoRequiredTxBandwidth.setStatus('mandatory')
dclVsLCoRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoRequiredRxBandwidth.setStatus('mandatory')
dclVsLCoRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoRequiredTrafficType.setStatus('mandatory')
dclVsLCoPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoPermittedTrunkTypes.setStatus('mandatory')
dclVsLCoRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoRequiredSecurity.setStatus('mandatory')
dclVsLCoRequiredCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoRequiredCustomerParameter.setStatus('mandatory')
dclVsLCoEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoEmissionPriority.setStatus('mandatory')
dclVsLCoDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoDiscardPriority.setStatus('mandatory')
dclVsLCoPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoPathType.setStatus('mandatory')
dclVsLCoRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoRetryCount.setStatus('mandatory')
dclVsLCoPathFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoPathFailureCount.setStatus('mandatory')
dclVsLCoReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routesDelayTooLong", 10), ("attributesNotMet", 11), ("anError", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoReasonForNoRoute.setStatus('mandatory')
dclVsLCoLastTearDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("none", 0), ("normalShutDown", 1), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("wrongModuleReached", 11), ("farEndBusy", 12), ("callLoopedBack", 13), ("unknownReason", 14), ("farEndNotReady", 15), ("remoteNameMismatch", 16), ("serviceTypeMismatch", 17), ("reconnectFromFarEnd", 18), ("bumped", 19), ("accessCardFailure", 20), ("optimized", 21), ("overrideRemoteName", 22), ("trunkOrFarEndDidNotSupportMode", 23))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoLastTearDownReason.setStatus('mandatory')
dclVsLCoPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoPathFailureAction.setStatus('mandatory')
dclVsLCoBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoBumpPreference.setStatus('mandatory')
dclVsLCoOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoOptimization.setStatus('mandatory')
dclVsLCoPathUpDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 10, 1, 25), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoPathUpDateTime.setStatus('mandatory')
dclVsLCoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 11), )
if mibBuilder.loadTexts: dclVsLCoStatsTable.setStatus('mandatory')
dclVsLCoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsLCoIndex"))
if mibBuilder.loadTexts: dclVsLCoStatsEntry.setStatus('mandatory')
dclVsLCoPktsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoPktsToNetwork.setStatus('mandatory')
dclVsLCoBytesToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoBytesToNetwork.setStatus('mandatory')
dclVsLCoPktsFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoPktsFromNetwork.setStatus('mandatory')
dclVsLCoBytesFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoBytesFromNetwork.setStatus('mandatory')
dclVsLCoPathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 264), )
if mibBuilder.loadTexts: dclVsLCoPathTable.setStatus('mandatory')
dclVsLCoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 264, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DcmeMIB", "dclIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsLCoIndex"), (0, "Nortel-Magellan-Passport-DcmeMIB", "dclVsLCoPathValue"))
if mibBuilder.loadTexts: dclVsLCoPathEntry.setStatus('mandatory')
dclVsLCoPathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 130, 4, 3, 264, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclVsLCoPathValue.setStatus('mandatory')
dcmeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 134, 1))
dcmeGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 134, 1, 5))
dcmeGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 134, 1, 5, 2))
dcmeGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 134, 1, 5, 2, 2))
dcmeCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 134, 3))
dcmeCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 134, 3, 5))
dcmeCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 134, 3, 5, 2))
dcmeCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 134, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-DcmeMIB", dclTransmittedTrmSignal=dclTransmittedTrmSignal, dclVsLCoOverrideRemoteName=dclVsLCoOverrideRemoteName, dclVsLCoCostMetric=dclVsLCoCostMetric, dcmeAdminState=dcmeAdminState, dclVsFramerFaxIdleCells=dclVsFramerFaxIdleCells, dcmeProfileModemFaxEncoding=dcmeProfileModemFaxEncoding, dclVsLCoEmissionPriority=dclVsLCoEmissionPriority, dcmeMIB=dcmeMIB, dclDnaRowStatus=dclDnaRowStatus, dclVsFramerModemCells=dclVsFramerModemCells, dclProvTable=dclProvTable, dclVsFramerNegotiatedDtmfRegeneration=dclVsFramerNegotiatedDtmfRegeneration, dclVsFramerNegotiatedTandemPassThrough=dclVsFramerNegotiatedTandemPassThrough, dclTotal3kHzCalls=dclTotal3kHzCalls, dclVsFramerMvpDebugStorageType=dclVsFramerMvpDebugStorageType, dcmeProfileRequiredCustomerParm=dcmeProfileRequiredCustomerParm, dclVsFramerStateTable=dclVsFramerStateTable, dclVsFramerNegotiatedSilenceSuppression=dclVsFramerNegotiatedSilenceSuppression, dcmeProfileLCOpsEntry=dcmeProfileLCOpsEntry, dcmeProfileEmissionPriority=dcmeProfileEmissionPriority, dcmeAudio3kHzAlarmThreshold=dcmeAudio3kHzAlarmThreshold, dcmeProfileEgressAudioGain=dcmeProfileEgressAudioGain, dclDna=dclDna, dclDnaNumberingPlanIndicator=dclDnaNumberingPlanIndicator, dclVsFramerPcmCaptureStorageType=dclVsFramerPcmCaptureStorageType, dclVsLCoPathType=dclVsLCoPathType, dcmeUnrestricted64kAlarmThreshold=dcmeUnrestricted64kAlarmThreshold, dclDnaStorageType=dclDnaStorageType, dclVsTotalCallSeconds=dclVsTotalCallSeconds, dclVsFramerPcmCaptureRowStatusEntry=dclVsFramerPcmCaptureRowStatusEntry, dcmeCapabilitiesBE01A=dcmeCapabilitiesBE01A, dcmeStatsEntry=dcmeStatsEntry, dclFramerComponentName=dclFramerComponentName, dclVsFramerCurrentEncodingRate=dclVsFramerCurrentEncodingRate, dclFramerStateTable=dclFramerStateTable, dcmeGroupBE01A=dcmeGroupBE01A, dclVsFramerPcmCaptureIndex=dclVsFramerPcmCaptureIndex, dclVsFramerRowStatus=dclVsFramerRowStatus, dcmeProfileVoiceTrafficOptimization=dcmeProfileVoiceTrafficOptimization, dclVsFramerFrmToNetworkEntry=dclVsFramerFrmToNetworkEntry, dcmeProfilePathAttributeToMinimize=dcmeProfilePathAttributeToMinimize, dclVsComponentName=dclVsComponentName, dclVsFramerStatsTable=dclVsFramerStatsTable, dclVsOperationalState=dclVsOperationalState, dclVsFramerUsageState=dclVsFramerUsageState, dcmeProfilePathFailureAction=dcmeProfilePathFailureAction, dclVsTotalCalls=dclVsTotalCalls, dcmeGroup=dcmeGroup, dclVsLCoPathDataEntry=dclVsLCoPathDataEntry, dcmeProfileRequiredSecurity=dcmeProfileRequiredSecurity, dclVsFramerOpTptStatus=dclVsFramerOpTptStatus, dclVsAdminState=dclVsAdminState, dclVsStatsTable=dclVsStatsTable, dclFramerInterfaceName=dclFramerInterfaceName, dclRejected64kCalls=dclRejected64kCalls, dclVsFramerVfpDebugComponentName=dclVsFramerVfpDebugComponentName, dcmeProfileMaximumAcceptableDelay=dcmeProfileMaximumAcceptableDelay, dcmeGroupBE=dcmeGroupBE, dclVsFramerMvpDebugRowStatus=dclVsFramerMvpDebugRowStatus, dclAlternateIdlePattern=dclAlternateIdlePattern, dclTotal64kCalls=dclTotal64kCalls, dclVsLCoPathEntry=dclVsLCoPathEntry, dcmeStateEntry=dcmeStateEntry, dcmeActiveDcmeLinksValue=dcmeActiveDcmeLinksValue, dcmeProfileSilenceSuppressionFactor=dcmeProfileSilenceSuppressionFactor, dcmeProfileSpeechHangoverTime=dcmeProfileSpeechHangoverTime, dcmeRowStatusEntry=dcmeRowStatusEntry, dclVsStatsEntry=dclVsStatsEntry, dcmeComponentName=dcmeComponentName, dclVsFramerStatsEntry=dclVsFramerStatsEntry, dcmeProfileMinModemFaxG711G726Rate=dcmeProfileMinModemFaxG711G726Rate, dclVsFramerNRatesEntry=dclVsFramerNRatesEntry, dclDnaComponentName=dclDnaComponentName, dclRejectedSpeechCalls=dclRejectedSpeechCalls, dclVsLCoPathTable=dclVsLCoPathTable, dclVsLCoRequiredTrafficType=dclVsLCoRequiredTrafficType, dcmeProfileEchoCancellation=dcmeProfileEchoCancellation, dclStateEntry=dclStateEntry, dclStorageType=dclStorageType, dclVsLCoLastTearDownReason=dclVsLCoLastTearDownReason, dcmeProfileBumpPreference=dcmeProfileBumpPreference, dclVsLCoComponentName=dclVsLCoComponentName, dclVsIndex=dclVsIndex, dclVsLCoBytesToNetwork=dclVsLCoBytesToNetwork, dclVsFramerFaxRelayCells=dclVsFramerFaxRelayCells, dclRemoteDna=dclRemoteDna, dclDnaAddressTable=dclDnaAddressTable, dclVsFramerOperEntry=dclVsFramerOperEntry, dclVsLCoPathDataTable=dclVsLCoPathDataTable, dclVsFramerMvpDebugRowStatusEntry=dclVsFramerMvpDebugRowStatusEntry, dclVsLCo=dclVsLCo, dclVsFramerNEncodingTable=dclVsFramerNEncodingTable, dclVsFramerNegotiatedV17AsG711G726=dclVsFramerNegotiatedV17AsG711G726, dcmeProfileDtmfRegeneration=dcmeProfileDtmfRegeneration, dclVsFramerTptStatus=dclVsFramerTptStatus, dclVsFramerSilenceCells=dclVsFramerSilenceCells, dclVsLCoPathValue=dclVsLCoPathValue, dclVsLCoPathFailureAction=dclVsLCoPathFailureAction, dcmeTrmThreshold=dcmeTrmThreshold, dcmeProvTable=dcmeProvTable, dclRowStatus=dclRowStatus, dcme=dcme, dcmeProfileMaxModemFaxG711G726Rate=dcmeProfileMaxModemFaxG711G726Rate, dclStateTable=dclStateTable, dclVsRowStatus=dclVsRowStatus, dclComponentName=dclComponentName, dclVsFramerFrmFromNetworkIndex=dclVsFramerFrmFromNetworkIndex, dcmeProfileMaxVoiceBitRate=dcmeProfileMaxVoiceBitRate, dcmeProfileComfortNoiseCap=dcmeProfileComfortNoiseCap, dclStatsTable=dclStatsTable, dclIndex=dclIndex, dclVsRowStatusTable=dclVsRowStatusTable, dclVsFramerFrmLostInNetwork=dclVsFramerFrmLostInNetwork, dcmeActiveDcmeLinksTable=dcmeActiveDcmeLinksTable, dcmeProfilePermittedTrunkTypes=dcmeProfilePermittedTrunkTypes, dclRejected3kHzCalls=dclRejected3kHzCalls, dclVsFramerVfpDebug=dclVsFramerVfpDebug, dclVsLCoPermittedTrunkTypes=dclVsLCoPermittedTrunkTypes, dclVsStateEntry=dclVsStateEntry, dclVsLCoBumpPreference=dclVsLCoBumpPreference, dcmeTrmSpeechNotAvailable=dcmeTrmSpeechNotAvailable, dclVsProvTable=dclVsProvTable, dclDnaAddressEntry=dclDnaAddressEntry, dclVsFramerCurrentRate=dclVsFramerCurrentRate, dcmeSpeechAlarmThreshold=dcmeSpeechAlarmThreshold, dclOperEntry=dclOperEntry, dclVsFramerMvpDebug=dclVsFramerMvpDebug, dcmeProfileMaximumAcceptableCost=dcmeProfileMaximumAcceptableCost, dclReceivedTrmSignal=dclReceivedTrmSignal, dcmeProfileStorageType=dcmeProfileStorageType, dcmeProfileMaxFaxRelayRate=dcmeProfileMaxFaxRelayRate, dclInvalidTrmSignals=dclInvalidTrmSignals, dclVsLCoPathUpDateTime=dclVsLCoPathUpDateTime, dcmeProfileDiscardPriority=dcmeProfileDiscardPriority, dcmeProfileModemFaxSpeechDiscrim=dcmeProfileModemFaxSpeechDiscrim, dcmeCapabilities=dcmeCapabilities, dclVsLCoRequiredRxBandwidth=dclVsLCoRequiredRxBandwidth, dclVsFramerPcmCapture=dclVsFramerPcmCapture, dclVsFramerPcmCaptureComponentName=dclVsFramerPcmCaptureComponentName, dclVsLCoStorageType=dclVsLCoStorageType, dcmeCapabilitiesBE=dcmeCapabilitiesBE, dclVsTransmittedAbBits=dclVsTransmittedAbBits, dcmeProfileRowStatusTable=dcmeProfileRowStatusTable, dclVsLCoDelayMetric=dclVsLCoDelayMetric, dclActive3kHzCalls=dclActive3kHzCalls, dclVsInvalidAbBits=dclVsInvalidAbBits, dclDnaRowStatusEntry=dclDnaRowStatusEntry, dcmeProfileRequiredTrafficType=dcmeProfileRequiredTrafficType, dcmeProvEntry=dcmeProvEntry, dcmeOperationalState=dcmeOperationalState, dcmeProfileLCOpsTable=dcmeProfileLCOpsTable, dcmeProfileIngressAudioGain=dcmeProfileIngressAudioGain, dclVsFramerIndex=dclVsFramerIndex, dclVsFramerAudioCells=dclVsFramerAudioCells, dclVsFramerFrmDumped=dclVsFramerFrmDumped, dclVsFramerFrmToNetworkIndex=dclVsFramerFrmToNetworkIndex, dclVsFramerNEncodingIndex=dclVsFramerNEncodingIndex, dclVsFramerVfpDebugRowStatus=dclVsFramerVfpDebugRowStatus, dcmeStateTable=dcmeStateTable, dclVsFramerMvpDebugRowStatusTable=dclVsFramerMvpDebugRowStatusTable, dclVsFramerTotalCells=dclVsFramerTotalCells, dcmeGroupBE01=dcmeGroupBE01, dcmeProfileFrOpsTable=dcmeProfileFrOpsTable, dclProvEntry=dclProvEntry, dcmeRowStatusTable=dcmeRowStatusTable, dcmeProfileFrOpsEntry=dcmeProfileFrOpsEntry, dclVsFramerModemFaxCells=dclVsFramerModemFaxCells, dclVsFramerFrmToNetworkTable=dclVsFramerFrmToNetworkTable, dclStatsEntry=dclStatsEntry, dclVsFramerFrmToNetworkValue=dclVsFramerFrmToNetworkValue, dclVsLCoRowStatusEntry=dclVsLCoRowStatusEntry, dclVsLCoEnd=dclVsLCoEnd, dclVsFramerRowStatusTable=dclVsFramerRowStatusTable, dclFramerStorageType=dclFramerStorageType, dclVsFramerComponentName=dclVsFramerComponentName, dclVsFramerNRatesTrafficIndex=dclVsFramerNRatesTrafficIndex, dclVsFramerNRatesValue=dclVsFramerNRatesValue, dclVsOperTable=dclVsOperTable, dclVsLCoStatsEntry=dclVsLCoStatsEntry, dclRowStatusEntry=dclRowStatusEntry, dclDnaDataNetworkAddress=dclDnaDataNetworkAddress, dcmeProfileRowStatus=dcmeProfileRowStatus, dcmeTrm64kNotAvailable=dcmeTrm64kNotAvailable, dclVs=dclVs, dcmePreestablishedConnections=dcmePreestablishedConnections, dclVsLCoOptimization=dclVsLCoOptimization, dclVsLCoRoundTripDelay=dclVsLCoRoundTripDelay, dclVsLCoState=dclVsLCoState, dclVsFramerNEncodingValue=dclVsFramerNEncodingValue, dcmeAlarmTimeInterval=dcmeAlarmTimeInterval, dclVsReceivedAbBits=dclVsReceivedAbBits, dclDnaIndex=dclDnaIndex, dclFramerRowStatus=dclFramerRowStatus, dcmeProfileSetupPriority=dcmeProfileSetupPriority, dclTotalSpeechCalls=dclTotalSpeechCalls, dcmeProfileOptimization=dcmeProfileOptimization, dclFramerOperationalState=dclFramerOperationalState, dclAdminState=dclAdminState, dclDnaRowStatusTable=dclDnaRowStatusTable, dclFramerUsageState=dclFramerUsageState, dclVsFramerNegEntry=dclVsFramerNegEntry, dclVsFramerFrmFromNetworkValue=dclVsFramerFrmFromNetworkValue, dcmeCapabilitiesBE01=dcmeCapabilitiesBE01, dclVsLCoPktsToNetwork=dclVsLCoPktsToNetwork, dclVsFramerStateEntry=dclVsFramerStateEntry, dclFramerAdminState=dclFramerAdminState, dclVsFramerCurrentEncoding=dclVsFramerCurrentEncoding, dclVsLCoRequiredTxBandwidth=dclVsLCoRequiredTxBandwidth, dclIdlePattern=dclIdlePattern, dclVsFramerStorageType=dclVsFramerStorageType, dclFramerStateEntry=dclFramerStateEntry, dcmeProfileV17EncodedAsG711G726=dcmeProfileV17EncodedAsG711G726, dclVsRowStatusEntry=dclVsRowStatusEntry, dclVsLCoDiscardPriority=dclVsLCoDiscardPriority, dcmeActiveDcmeLinksEntry=dcmeActiveDcmeLinksEntry, dcmeProfileMinVoiceBitRate=dcmeProfileMinVoiceBitRate, dclVsLCoHoldingPriority=dclVsLCoHoldingPriority, dclVsFramerVfpDebugIndex=dclVsFramerVfpDebugIndex, dcmeProfileIndex=dcmeProfileIndex, dclVsCallType=dclVsCallType, dclVsFramerVfpDebugRowStatusTable=dclVsFramerVfpDebugRowStatusTable, dcmeMaxUnrestricted64kCalls=dcmeMaxUnrestricted64kCalls, dclVsFramerPcmCaptureRowStatus=dclVsFramerPcmCaptureRowStatus, dclVsLCoSetupPriority=dclVsLCoSetupPriority, dcmeDLinksEntry=dcmeDLinksEntry, dclVsLCoReasonForNoRoute=dclVsLCoReasonForNoRoute, dclVsFramerLrcErrors=dclVsFramerLrcErrors, dcmeProfileHoldingPriority=dcmeProfileHoldingPriority, dclFramer=dclFramer, dclFramerRowStatusTable=dclFramerRowStatusTable, dclVsFramerInterfaceName=dclVsFramerInterfaceName, dclVsLCoRowStatus=dclVsLCoRowStatus, dclVsLCoPathFailureCount=dclVsLCoPathFailureCount, dclVsLCoIndex=dclVsLCoIndex, dcmeStatsTable=dcmeStatsTable, dclVsFramerProvTable=dclVsFramerProvTable, dclVsOperEntry=dclVsOperEntry, dclVsFramerNRatesRateIndex=dclVsFramerNRatesRateIndex, dclVsStatus=dclVsStatus, dclVsFramerMvpDebugIndex=dclVsFramerMvpDebugIndex, dclVsFramerPcmCaptureRowStatusTable=dclVsFramerPcmCaptureRowStatusTable, dclVsUsageState=dclVsUsageState, dclVsLCoRequiredCustomerParameter=dclVsLCoRequiredCustomerParameter, dclVsLCoStatsTable=dclVsLCoStatsTable, dcmeDLinksTable=dcmeDLinksTable, dcmeProfileComponentName=dcmeProfileComponentName, dcmeTrmSignalChangeInterval=dcmeTrmSignalChangeInterval, dclVsVsType=dclVsVsType, dclVsFramer=dclVsFramer, dclVsLCoPktsFromNetwork=dclVsLCoPktsFromNetwork, dcmeRowStatus=dcmeRowStatus, dcl=dcl, dclOperationalState=dclOperationalState, dclVsFramerOpCurrentEncoding=dclVsFramerOpCurrentEncoding)
mibBuilder.exportSymbols("Nortel-Magellan-Passport-DcmeMIB", dcmeCommentText=dcmeCommentText, dclActiveSpeechCalls=dclActiveSpeechCalls, dclVsFramerModemSilenceCells=dclVsFramerModemSilenceCells, dclFramerIndex=dclFramerIndex, dclActive64kCalls=dclActive64kCalls, dclDcme=dclDcme, dclVsFramerNEncodingEntry=dclVsFramerNEncodingEntry, dcmeProfileSilenceSuppression=dcmeProfileSilenceSuppression, dclVsStateTable=dclVsStateTable, dcmeProfileVoiceEncoding=dcmeProfileVoiceEncoding, dclVsFramerOperationalState=dclVsFramerOperationalState, dcmeUsageState=dcmeUsageState, dclVsLCoRetryCount=dclVsLCoRetryCount, dclVsStorageType=dclVsStorageType, dclVsFramerFrmFromNetworkTable=dclVsFramerFrmFromNetworkTable, dclVsFramerRowStatusEntry=dclVsFramerRowStatusEntry, dclVsFramerOperTable=dclVsFramerOperTable, dclVsFramerVfpDebugStorageType=dclVsFramerVfpDebugStorageType, dclFramerProvTable=dclFramerProvTable, dcmeProfile=dcmeProfile, dclVsFramerFrmUnderRuns=dclVsFramerFrmUnderRuns, dcmeProfileFaxIdleSuppressionG711G726=dcmeProfileFaxIdleSuppressionG711G726, dclCommentText=dclCommentText, dclVsLCoRequiredSecurity=dclVsLCoRequiredSecurity, dcmeIndex=dcmeIndex, dclFramerRowStatusEntry=dclFramerRowStatusEntry, dclVsProvEntry=dclVsProvEntry, dclVsFramerAdminState=dclVsFramerAdminState, dclVsFramerNegotiatedFisG711G726=dclVsFramerNegotiatedFisG711G726, dclVsFramerNRatesTable=dclVsFramerNRatesTable, dclVsFramerVfpDebugRowStatusEntry=dclVsFramerVfpDebugRowStatusEntry, dcmeProfileInsertedOutputDelay=dcmeProfileInsertedOutputDelay, dclVsFramerMvpDebugComponentName=dclVsFramerMvpDebugComponentName, dclVsFramerNegTable=dclVsFramerNegTable, dcmeProfileRowStatusEntry=dcmeProfileRowStatusEntry, dclUsageState=dclUsageState, dclFramerProvEntry=dclFramerProvEntry, dcmeDLinksRowStatus=dcmeDLinksRowStatus, dclRemoteNpi=dclRemoteNpi, dclOperTable=dclOperTable, dclVsLCoRowStatusTable=dclVsLCoRowStatusTable, dclVsLCoBytesFromNetwork=dclVsLCoBytesFromNetwork, dclRowStatusTable=dclRowStatusTable, dclVsFramerFrmFromNetworkEntry=dclVsFramerFrmFromNetworkEntry, dcmeStorageType=dcmeStorageType, dclVsFramerProvEntry=dclVsFramerProvEntry, dcmeDLinksValue=dcmeDLinksValue)
