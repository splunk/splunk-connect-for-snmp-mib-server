#
# PySNMP MIB module CISCO-WAN-CES-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-CES-PORT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:04:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
circuitEmulation, = mibBuilder.importSymbols("BASIS-MIB", "circuitEmulation")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Unsigned32, IpAddress, ModuleIdentity, Counter32, Gauge32, ObjectIdentity, NotificationType, TimeTicks, MibIdentifier, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Unsigned32", "IpAddress", "ModuleIdentity", "Counter32", "Gauge32", "ObjectIdentity", "NotificationType", "TimeTicks", "MibIdentifier", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoWanCesPortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 40))
ciscoWanCesPortMIB.setRevisions(('2002-11-13 00:00',))
if mibBuilder.loadTexts: ciscoWanCesPortMIB.setLastUpdated('200211130000Z')
if mibBuilder.loadTexts: ciscoWanCesPortMIB.setOrganization('Cisco Systems, Inc.')
cesmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1))
cesmPortCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1))
cesmPortCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1), )
if mibBuilder.loadTexts: cesmPortCnfGrpTable.setStatus('current')
cesmPortCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-CES-PORT-MIB", "cesPortNum"))
if mibBuilder.loadTexts: cesmPortCnfGrpEntry.setStatus('current')
cesPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortNum.setStatus('current')
cesPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortRowStatus.setStatus('current')
cesPortLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortLineNum.setStatus('current')
cesPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("structured", 1), ("unstructured", 2), ("framingOnVcDisconnect", 3), ("strau", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortType.setStatus('current')
cesPortDs0ConfigBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortDs0ConfigBitMap.setStatus('current')
cesPortNumOfDs0Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortNumOfDs0Slot.setStatus('current')
cesPortNumOfSCIPerDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortNumOfSCIPerDS0.setStatus('current')
cesPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44736))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortSpeed.setStatus('current')
cesPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notConfigured", 1), ("active", 2), ("remoteLoopback", 3), ("failedDueToLine", 4), ("failedDueToSignalling", 5), ("inactive", 6), ("inBert", 7), ("farEndRemoteLoopback", 8))).clone('notConfigured')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortState.setStatus('current')
cesPortBERTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortBERTEnable.setStatus('current')
cesPortNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortNextAvailable.setStatus('current')
cesPortsUsedLine1 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine1.setStatus('current')
cesPortsUsedLine2 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine2.setStatus('current')
cesPortsUsedLine3 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine3.setStatus('current')
cesPortsUsedLine4 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine4.setStatus('current')
cesPortsUsedLine5 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine5.setStatus('current')
cesPortsUsedLine6 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine6.setStatus('current')
cesPortsUsedLine7 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine7.setStatus('current')
cesPortsUsedLine8 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine8.setStatus('current')
ciscoWanCesPortMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 40, 2))
ciscoWanCesPortMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 40, 2, 1))
ciscoWanCesPortMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 40, 2, 2))
ciscoWanCesPortCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 40, 2, 2, 1)).setObjects(("CISCO-WAN-CES-PORT-MIB", "ciscoWanCesPortConfGroup"), ("CISCO-WAN-CES-PORT-MIB", "ciscoWanCesPortDs0InDs1Group"), ("CISCO-WAN-CES-PORT-MIB", "ciscoWanCesPortsUsedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCesPortCompliance = ciscoWanCesPortCompliance.setStatus('current')
ciscoWanCesPortsUsedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 40, 2, 1, 1)).setObjects(("CISCO-WAN-CES-PORT-MIB", "cesPortNextAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCesPortsUsedGroup = ciscoWanCesPortsUsedGroup.setStatus('current')
ciscoWanCesPortConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 40, 2, 1, 2)).setObjects(("CISCO-WAN-CES-PORT-MIB", "cesPortNum"), ("CISCO-WAN-CES-PORT-MIB", "cesPortRowStatus"), ("CISCO-WAN-CES-PORT-MIB", "cesPortLineNum"), ("CISCO-WAN-CES-PORT-MIB", "cesPortType"), ("CISCO-WAN-CES-PORT-MIB", "cesPortDs0ConfigBitMap"), ("CISCO-WAN-CES-PORT-MIB", "cesPortNumOfDs0Slot"), ("CISCO-WAN-CES-PORT-MIB", "cesPortNumOfSCIPerDS0"), ("CISCO-WAN-CES-PORT-MIB", "cesPortSpeed"), ("CISCO-WAN-CES-PORT-MIB", "cesPortState"), ("CISCO-WAN-CES-PORT-MIB", "cesPortBERTEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCesPortConfGroup = ciscoWanCesPortConfGroup.setStatus('current')
ciscoWanCesPortDs0InDs1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 40, 2, 1, 3)).setObjects(("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine1"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine2"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine3"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine4"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine5"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine6"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine7"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine8"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCesPortDs0InDs1Group = ciscoWanCesPortDs0InDs1Group.setStatus('current')
mibBuilder.exportSymbols("CISCO-WAN-CES-PORT-MIB", cesmPort=cesmPort, ciscoWanCesPortMIB=ciscoWanCesPortMIB, cesPortNumOfSCIPerDS0=cesPortNumOfSCIPerDS0, cesPortsUsedLine4=cesPortsUsedLine4, cesPortDs0ConfigBitMap=cesPortDs0ConfigBitMap, ciscoWanCesPortMIBConformance=ciscoWanCesPortMIBConformance, ciscoWanCesPortMIBGroups=ciscoWanCesPortMIBGroups, cesPortState=cesPortState, cesPortLineNum=cesPortLineNum, cesPortsUsedLine3=cesPortsUsedLine3, ciscoWanCesPortMIBCompliances=ciscoWanCesPortMIBCompliances, cesPortRowStatus=cesPortRowStatus, cesPortsUsedLine1=cesPortsUsedLine1, cesPortSpeed=cesPortSpeed, cesmPortCnfGrpEntry=cesmPortCnfGrpEntry, cesPortType=cesPortType, cesPortNextAvailable=cesPortNextAvailable, ciscoWanCesPortDs0InDs1Group=ciscoWanCesPortDs0InDs1Group, cesPortsUsedLine8=cesPortsUsedLine8, cesPortBERTEnable=cesPortBERTEnable, ciscoWanCesPortsUsedGroup=ciscoWanCesPortsUsedGroup, PYSNMP_MODULE_ID=ciscoWanCesPortMIB, cesPortsUsedLine6=cesPortsUsedLine6, cesPortsUsedLine7=cesPortsUsedLine7, ciscoWanCesPortCompliance=ciscoWanCesPortCompliance, cesmPortCnfGrpTable=cesmPortCnfGrpTable, cesPortNum=cesPortNum, cesPortsUsedLine5=cesPortsUsedLine5, ciscoWanCesPortConfGroup=ciscoWanCesPortConfGroup, cesPortNumOfDs0Slot=cesPortNumOfDs0Slot, cesmPortCnfGrp=cesmPortCnfGrp, cesPortsUsedLine2=cesPortsUsedLine2)
