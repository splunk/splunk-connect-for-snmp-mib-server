#
# PySNMP MIB module MICROSENS-CWDM8-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICROSENS-CWDM8-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:02:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, NotificationType, iso, ModuleIdentity, MibIdentifier, Bits, ObjectIdentity, Integer32, IpAddress, NotificationType, Unsigned32, enterprises, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "NotificationType", "iso", "ModuleIdentity", "MibIdentifier", "Bits", "ObjectIdentity", "Integer32", "IpAddress", "NotificationType", "Unsigned32", "enterprises", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
microsens = MibIdentifier((1, 3, 6, 1, 4, 1, 3181))
cwdm = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 6))
eightChannelCwdm = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 6, 4))
deviceTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1), )
if mibBuilder.loadTexts: deviceTable.setStatus('mandatory')
deviceTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "deviceId"))
if mibBuilder.loadTexts: deviceTableEntry.setStatus('mandatory')
deviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceId.setStatus('mandatory')
deviceArtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceArtNo.setStatus('mandatory')
deviceSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerNo.setStatus('mandatory')
deviceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDesc.setStatus('mandatory')
deviceTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTemperature.setStatus('mandatory')
deviceTempAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTempAlarmThreshold.setStatus('mandatory')
deviceTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -255))).clone(namedValues=NamedValues(("alarm", 1), ("no-alarm", 0), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTempAlarm.setStatus('mandatory')
deviceTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -255))).clone(namedValues=NamedValues(("alarm", 1), ("no-alarm", 0), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTempShutdown.setStatus('mandatory')
deviceTrPowerFailureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, -255))).clone(namedValues=NamedValues(("no-alarm", 0), ("alarm-channel-1-4", 1), ("alarm-channel-5-8", 2), ("alarm-channel-1-8", 3), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTrPowerFailureAlarm.setStatus('mandatory')
deviceMinorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -255))).clone(namedValues=NamedValues(("alarm", 1), ("no-alarm", 0), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMinorAlarm.setStatus('mandatory')
deviceMajorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0, -255))).clone(namedValues=NamedValues(("alarm", 1), ("no-alarm", 0), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMajorAlarm.setStatus('mandatory')
portTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
portTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "portId"))
if mibBuilder.loadTexts: portTableEntry.setStatus('mandatory')
portId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portId.setStatus('mandatory')
portChannelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portChannelEnabled.setStatus('mandatory')
portLinkThroughLocalLine = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkThroughLocalLine.setStatus('mandatory')
portLinkThroughLineLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkThroughLineLocal.setStatus('mandatory')
portLocalModuleInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocalModuleInstalled.setStatus('mandatory')
portLineModuleInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("not-installed", 0), ("installed", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLineModuleInstalled.setStatus('mandatory')
portLocalLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocalLink.setStatus('mandatory')
portLineLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLineLink.setStatus('mandatory')
portLocalTxFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("no-error", 0), ("error", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocalTxFault.setStatus('mandatory')
portLineTxFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("no-error", 0), ("error", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLineTxFault.setStatus('mandatory')
portLocalPowerFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("no-error", 0), ("error", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLocalPowerFault.setStatus('mandatory')
portLinePowerFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("no-error", 0), ("error", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinePowerFault.setStatus('mandatory')
portRateSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -255))).clone(namedValues=NamedValues(("reduced", 0), ("full", 1), ("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRateSelect.setStatus('mandatory')
localModuleTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3), )
if mibBuilder.loadTexts: localModuleTable.setStatus('mandatory')
localModuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "localModuleId"))
if mibBuilder.loadTexts: localModuleTableEntry.setStatus('mandatory')
localModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleId.setStatus('mandatory')
localModuleConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("unknown", 0), ("sc", 1), ("style1-copper", 2), ("style2-copper", 3), ("bnc-tnc", 4), ("coaxial-headers", 5), ("fiberjack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("opticalpigtail", 11), ("hssdc2", 32), ("copperpigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleConnector.setStatus('mandatory')
localModuleTrCodeSonet = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 16, 32, 64, 128, 256, 512))).clone(namedValues=NamedValues(("unknown", 0), ("oc3-multi-mode-short-reach", 1), ("oc3-single-mode-intermediate-reach", 2), ("oc3-single-mode-long-reach", 4), ("oc12-multi-mode-short-reach", 16), ("oc12-single-mode-intermediate-reach", 32), ("oc12-single-mode-long-reach", 64), ("oc48-short-reach", 128), ("oc48-intermediate-reach", 256), ("oc48-long-reach", 512)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTrCodeSonet.setStatus('mandatory')
localModuleTrCodeGigabit = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("unknown", 0), ("base-1000-sx", 1), ("base-1000-lx", 2), ("base-1000-cx", 4), ("base-1000-t", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTrCodeGigabit.setStatus('mandatory')
localModuleTrCodeFbLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("unknown", 0), ("long-distance", 1), ("intermediate-distance", 2), ("short-distance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTrCodeFbLinkLength.setStatus('mandatory')
localModuleTrCodeFbTrTech = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("unknown", 0), ("longwave-laser-LL", 1), ("shortwave-laser-OFC", 2), ("shortwave-laser-no-OFC", 4), ("electrical-intra-enclosure", 8), ("electrical-inter-enclosure", 16), ("longwave-laser-LC", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTrCodeFbTrTech.setStatus('mandatory')
localModuleTrCodeFbTrMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("unknown", 0), ("single-mode", 1), ("multi-mode-50", 4), ("multi-mode-62-5", 8), ("video-coax", 16), ("miniature-coax", 32), ("shielded-twisted-pair", 64), ("twin-axial-pair", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTrCodeFbTrMedia.setStatus('mandatory')
localModuleTrCodeFbSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 16))).clone(namedValues=NamedValues(("unknown", 0), ("speed-100MBytes-per-sec", 1), ("speed-200MBytes-per-sec", 4), ("speed-400MBytes-per-sec", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTrCodeFbSpeed.setStatus('mandatory')
localModuleBrNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleBrNominal.setStatus('mandatory')
localModuleLength9km = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLength9km.setStatus('mandatory')
localModuleLength9m = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLength9m.setStatus('mandatory')
localModuleLength50 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLength50.setStatus('mandatory')
localModuleLength62 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLength62.setStatus('mandatory')
localModuleLengthCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLengthCopper.setStatus('mandatory')
localModuleVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleVendorSN.setStatus('mandatory')
localModuleDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleDateCode.setStatus('mandatory')
localModuleLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLaserCurrent.setStatus('optional')
localModuleTransmittedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleTransmittedPower.setStatus('optional')
localModuleReceivedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleReceivedPower.setStatus('optional')
localModuleLaserTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleLaserTemperature.setStatus('optional')
localModuleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModuleVoltage.setStatus('optional')
lineModuleTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4), )
if mibBuilder.loadTexts: lineModuleTable.setStatus('mandatory')
lineModuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "lineModuleId"))
if mibBuilder.loadTexts: lineModuleTableEntry.setStatus('mandatory')
lineModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleId.setStatus('mandatory')
lineModuleConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("unknown", 0), ("sc", 1), ("style1-copper", 2), ("style2-copper", 3), ("bnc-tnc", 4), ("coaxial-headers", 5), ("fiberjack", 6), ("lc", 7), ("mt-rj", 8), ("mu", 9), ("sg", 10), ("opticalpigtail", 11), ("hssdc2", 32), ("copperpigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleConnector.setStatus('mandatory')
lineModuleTrCodeSonet = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 16, 32, 64, 128, 256, 512))).clone(namedValues=NamedValues(("unknown", 0), ("oc3-multi-mode-short-reach", 1), ("oc3-single-mode-intermediate-reach", 2), ("oc3-single-mode-long-reach", 4), ("oc12-multi-mode-short-reach", 16), ("oc12-single-mode-intermediate-reach", 32), ("oc12-single-mode-long-reach", 64), ("oc48-short-reach", 128), ("oc48-intermediate-reach", 256), ("oc48-long-reach", 512)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTrCodeSonet.setStatus('mandatory')
lineModuleTrCodeGigabit = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("unknown", 0), ("base-1000-SX", 1), ("base-1000-LX", 2), ("base-1000-CX", 4), ("base-1000-T", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTrCodeGigabit.setStatus('mandatory')
lineModuleTrCodeFbLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("unknown", 0), ("long-distance", 1), ("intermediate-distance", 2), ("short-distance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTrCodeFbLinkLength.setStatus('mandatory')
lineModuleTrCodeFbTrTech = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("unknown", 0), ("longwave-laser-LL", 1), ("shortwave-laser-OFC", 2), ("shortwave-laser-no-OFC", 4), ("electrical-intra-enclosure", 8), ("electrical-inter-enclosure", 16), ("longwave-laser-LC", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTrCodeFbTrTech.setStatus('mandatory')
lineModuleTrCodeFbTrMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("unknown", 0), ("single-mode", 1), ("multi-mode-50", 4), ("multi-mode-62-5", 8), ("video-coax", 16), ("miniature-coax", 32), ("shielded-twisted-pair", 64), ("twin-axial-pair", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTrCodeFbTrMedia.setStatus('mandatory')
lineModuleTrCodeFbSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 16))).clone(namedValues=NamedValues(("unknown", 0), ("speed-100MBytes-per-sec", 1), ("speed-200MBytes-per-sec", 4), ("speed-400MBytes-per-sec", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTrCodeFbSpeed.setStatus('mandatory')
lineModuleBrNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleBrNominal.setStatus('mandatory')
lineModuleLength9km = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLength9km.setStatus('mandatory')
lineModuleLength9m = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLength9m.setStatus('mandatory')
lineModuleLength50 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLength50.setStatus('mandatory')
lineModuleLength62 = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLength62.setStatus('mandatory')
lineModuleLengthCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLengthCopper.setStatus('mandatory')
lineModuleVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleVendorSN.setStatus('mandatory')
lineModuleDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleDateCode.setStatus('mandatory')
lineModuleLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLaserCurrent.setStatus('mandatory')
lineModuleTransmittedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleTransmittedPower.setStatus('mandatory')
lineModuleReceivedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleReceivedPower.setStatus('mandatory')
lineModuleLaserTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleLaserTemperature.setStatus('mandatory')
lineModuleVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineModuleVoltage.setStatus('mandatory')
powerTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5), )
if mibBuilder.loadTexts: powerTable.setStatus('mandatory')
powerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "powerId"))
if mibBuilder.loadTexts: powerTableEntry.setStatus('mandatory')
powerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerId.setStatus('mandatory')
powerArtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerArtNo.setStatus('mandatory')
powerSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSerNo.setStatus('mandatory')
powerDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDesc.setStatus('mandatory')
powerTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerTemperature.setStatus('mandatory')
powerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255, 0, 1))).clone(namedValues=NamedValues(("unknown", -255), ("not-active", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerStatus.setStatus('mandatory')
powerSuppliedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSuppliedPower.setStatus('mandatory')
powerLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerLoad.setStatus('mandatory')
powerFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255, 0, 1))).clone(namedValues=NamedValues(("unknown", -255), ("not-active", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerFanStatus.setStatus('mandatory')
lineIfTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6), )
if mibBuilder.loadTexts: lineIfTable.setStatus('mandatory')
lineIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "lineIfId"))
if mibBuilder.loadTexts: lineIfTableEntry.setStatus('mandatory')
lineIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfId.setStatus('mandatory')
lineIfArtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfArtNo.setStatus('mandatory')
lineIfSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfSerNo.setStatus('mandatory')
lineIfWestLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255, 0, 1))).clone(namedValues=NamedValues(("unknown", -255), ("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfWestLinkStatus.setStatus('optional')
lineIfEastLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255, 0, 1))).clone(namedValues=NamedValues(("unknown", -255), ("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfEastLinkStatus.setStatus('optional')
lineIfWestChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255, 0, 1))).clone(namedValues=NamedValues(("unknown", -255), ("not-in-use", 0), ("in-use", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfWestChannelStatus.setStatus('optional')
lineIfEastChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255, 0, 1))).clone(namedValues=NamedValues(("unknown", -255), ("not-in-use", 0), ("in-use", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfEastChannelStatus.setStatus('optional')
lineIfWestLinkRcvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfWestLinkRcvPower.setStatus('optional')
lineIfEastLinkRcvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-255))).clone(namedValues=NamedValues(("unknown", -255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineIfEastLinkRcvPower.setStatus('optional')
passiveTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 6, 4, 7), )
if mibBuilder.loadTexts: passiveTable.setStatus('mandatory')
passiveTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 6, 4, 7, 1), ).setIndexNames((0, "MICROSENS-CWDM8-MIB", "passiveId"))
if mibBuilder.loadTexts: passiveTableEntry.setStatus('mandatory')
passiveId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: passiveId.setStatus('mandatory')
passiveArtNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: passiveArtNo.setStatus('mandatory')
passiveSerNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 6, 4, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: passiveSerNo.setStatus('mandatory')
channelCount = MibScalar((1, 3, 6, 1, 4, 1, 3181, 6, 4, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelCount.setStatus('mandatory')
minorAlarmRelayTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,0)).setObjects(("MICROSENS-CWDM8-MIB", "deviceMinorAlarm"))
majorAlarmRelayTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,1)).setObjects(("MICROSENS-CWDM8-MIB", "deviceMajorAlarm"))
devicePowerSupplyTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,2)).setObjects(("MICROSENS-CWDM8-MIB", "powerId"), ("MICROSENS-CWDM8-MIB", "powerStatus"))
deviceTemperatureAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,3)).setObjects(("MICROSENS-CWDM8-MIB", "deviceTemperature"), ("MICROSENS-CWDM8-MIB", "deviceTempAlarm"))
deviceTemperatureShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,4)).setObjects(("MICROSENS-CWDM8-MIB", "deviceTemperature"), ("MICROSENS-CWDM8-MIB", "deviceTempShutdown"))
fanAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,5)).setObjects(("MICROSENS-CWDM8-MIB", "powerId"), ("MICROSENS-CWDM8-MIB", "powerFanStatus"))
portLocalLinkChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,6)).setObjects(("MICROSENS-CWDM8-MIB", "portId"), ("MICROSENS-CWDM8-MIB", "portLocalLink"))
portLineLinkChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3181, 6, 4) + (0,7)).setObjects(("MICROSENS-CWDM8-MIB", "portId"), ("MICROSENS-CWDM8-MIB", "portLineLink"))
mibBuilder.exportSymbols("MICROSENS-CWDM8-MIB", portLineModuleInstalled=portLineModuleInstalled, localModuleId=localModuleId, deviceMajorAlarm=deviceMajorAlarm, deviceTemperatureShutdownTrap=deviceTemperatureShutdownTrap, lineModuleTrCodeFbSpeed=lineModuleTrCodeFbSpeed, fanAlarmTrap=fanAlarmTrap, powerTemperature=powerTemperature, lineIfWestLinkStatus=lineIfWestLinkStatus, lineModuleDateCode=lineModuleDateCode, lineModuleTrCodeGigabit=lineModuleTrCodeGigabit, powerSerNo=powerSerNo, portLocalModuleInstalled=portLocalModuleInstalled, deviceArtNo=deviceArtNo, portTableEntry=portTableEntry, localModuleTransmittedPower=localModuleTransmittedPower, portLineLink=portLineLink, deviceTemperature=deviceTemperature, passiveTableEntry=passiveTableEntry, powerFanStatus=powerFanStatus, lineIfWestChannelStatus=lineIfWestChannelStatus, lineIfTable=lineIfTable, deviceTrPowerFailureAlarm=deviceTrPowerFailureAlarm, lineIfEastChannelStatus=lineIfEastChannelStatus, lineModuleLength9m=lineModuleLength9m, lineModuleTrCodeFbTrMedia=lineModuleTrCodeFbTrMedia, lineIfSerNo=lineIfSerNo, localModuleLength62=localModuleLength62, lineModuleTransmittedPower=lineModuleTransmittedPower, deviceTempShutdown=deviceTempShutdown, deviceTable=deviceTable, lineIfArtNo=lineIfArtNo, passiveArtNo=passiveArtNo, portChannelEnabled=portChannelEnabled, lineModuleBrNominal=lineModuleBrNominal, localModuleDateCode=localModuleDateCode, localModuleLength50=localModuleLength50, localModuleReceivedPower=localModuleReceivedPower, localModuleLaserCurrent=localModuleLaserCurrent, lineModuleLength50=lineModuleLength50, lineModuleVendorSN=lineModuleVendorSN, passiveTable=passiveTable, lineIfEastLinkStatus=lineIfEastLinkStatus, localModuleTrCodeFbSpeed=localModuleTrCodeFbSpeed, localModuleTable=localModuleTable, portLinePowerFault=portLinePowerFault, portTable=portTable, localModuleTrCodeFbLinkLength=localModuleTrCodeFbLinkLength, lineModuleTrCodeSonet=lineModuleTrCodeSonet, lineModuleTable=lineModuleTable, deviceTableEntry=deviceTableEntry, passiveSerNo=passiveSerNo, portLocalTxFault=portLocalTxFault, deviceMinorAlarm=deviceMinorAlarm, deviceDesc=deviceDesc, eightChannelCwdm=eightChannelCwdm, localModuleLaserTemperature=localModuleLaserTemperature, lineModuleConnector=lineModuleConnector, portLineLinkChangeTrap=portLineLinkChangeTrap, portLinkThroughLineLocal=portLinkThroughLineLocal, channelCount=channelCount, portLocalLinkChangeTrap=portLocalLinkChangeTrap, portLocalLink=portLocalLink, lineModuleLengthCopper=lineModuleLengthCopper, localModuleTrCodeGigabit=localModuleTrCodeGigabit, localModuleLength9m=localModuleLength9m, lineModuleTableEntry=lineModuleTableEntry, localModuleLengthCopper=localModuleLengthCopper, lineModuleLaserCurrent=lineModuleLaserCurrent, powerLoad=powerLoad, powerTable=powerTable, portId=portId, lineModuleLength9km=lineModuleLength9km, localModuleVoltage=localModuleVoltage, deviceTempAlarmThreshold=deviceTempAlarmThreshold, powerDesc=powerDesc, lineIfEastLinkRcvPower=lineIfEastLinkRcvPower, powerArtNo=powerArtNo, lineModuleTrCodeFbLinkLength=lineModuleTrCodeFbLinkLength, deviceTempAlarm=deviceTempAlarm, localModuleVendorSN=localModuleVendorSN, portLocalPowerFault=portLocalPowerFault, portRateSelect=portRateSelect, lineIfId=lineIfId, lineIfWestLinkRcvPower=lineIfWestLinkRcvPower, lineModuleId=lineModuleId, localModuleTrCodeFbTrMedia=localModuleTrCodeFbTrMedia, lineModuleReceivedPower=lineModuleReceivedPower, lineModuleTrCodeFbTrTech=lineModuleTrCodeFbTrTech, lineModuleVoltage=lineModuleVoltage, microsens=microsens, powerStatus=powerStatus, lineModuleLaserTemperature=lineModuleLaserTemperature, portLineTxFault=portLineTxFault, powerTableEntry=powerTableEntry, deviceSerNo=deviceSerNo, passiveId=passiveId, powerSuppliedPower=powerSuppliedPower, portLinkThroughLocalLine=portLinkThroughLocalLine, deviceTemperatureAlarmTrap=deviceTemperatureAlarmTrap, localModuleBrNominal=localModuleBrNominal, deviceId=deviceId, localModuleConnector=localModuleConnector, localModuleTableEntry=localModuleTableEntry, powerId=powerId, localModuleLength9km=localModuleLength9km, minorAlarmRelayTrap=minorAlarmRelayTrap, cwdm=cwdm, localModuleTrCodeSonet=localModuleTrCodeSonet, lineIfTableEntry=lineIfTableEntry, majorAlarmRelayTrap=majorAlarmRelayTrap, localModuleTrCodeFbTrTech=localModuleTrCodeFbTrTech, lineModuleLength62=lineModuleLength62, devicePowerSupplyTrap=devicePowerSupplyTrap)
