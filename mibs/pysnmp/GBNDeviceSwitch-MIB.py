#
# PySNMP MIB module GBNDeviceSwitch-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GBNDeviceSwitch-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:04:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
gbnDevice, = mibBuilder.importSymbols("GREENTECH-MASTER-MIB", "gbnDevice")
dot1qStaticMulticastEntry, VlanIndex, PortList = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qStaticMulticastEntry", "VlanIndex", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, ModuleIdentity, Gauge32, Counter64, Unsigned32, TimeTicks, Counter32, iso, Integer32, NotificationType, MibIdentifier, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Gauge32", "Counter64", "Unsigned32", "TimeTicks", "Counter32", "iso", "Integer32", "NotificationType", "MibIdentifier", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, DateAndTime, RowStatus, TextualConvention, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "RowStatus", "TextualConvention", "MacAddress", "TruthValue")
gbnDeviceSwitch = ModuleIdentity((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1))
gbnDeviceSwitch.setRevisions(('1900-11-02 00:00',))
if mibBuilder.loadTexts: gbnDeviceSwitch.setLastUpdated('0011020000Z')
if mibBuilder.loadTexts: gbnDeviceSwitch.setOrganization('Greentech')
gbnDeviceSwitchMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 1))
gbnDeviceSwitchPort = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 2))
gbnDeviceSwitchAggregation = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3))
gbnDeviceSwitchL3 = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4))
gbnDeviceSwitchLoopTest = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 5))
gbnDeviceSwitchSRM = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 6))
gbnDeviceSwitchFlowAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7))
gbnDeviceSwitchQueneScheduer = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8))
gbnDeviceSwitchLineRate = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 9))
gbnDeviceSwitchPortIsolation = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 10))
gbnDeviceSwitchStormControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11))
gbnDeviceSwitchBandWidth = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 12))
gbnDeviceSwitchNewStormControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13))
mirroringPort = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirroringPort.setStatus('current')
mirroredEgrPort = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirroredEgrPort.setStatus('current')
mirroredIgrPort = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirroredIgrPort.setStatus('current')
portTypeTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: portTypeTable.setStatus('current')
portTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "portNumber"))
if mibBuilder.loadTexts: portTypeEntry.setStatus('current')
portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('current')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("blank", 1), ("fE", 2), ("single100FX", 3), ("double100FX", 4), ("single1000FX", 5), ("double1000FX", 6), ("fE1000", 7), ("SM_2SC_1310_25", 9), ("MM_2SC_1310_2", 10), ("MM_2SC_850_2", 11), ("SM_1SC_1550_20", 12), ("SM_1SC_1310_20", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
aggTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: aggTable.setStatus('obsolete')
aggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "aggUnit"), (0, "GBNDeviceSwitch-MIB", "aggPort"))
if mibBuilder.loadTexts: aggEntry.setStatus('obsolete')
aggUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggUnit.setStatus('obsolete')
aggPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aggPort.setStatus('obsolete')
aggPortListPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggPortListPorts.setStatus('obsolete')
aggRule = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("srcMAC", 1), ("destMAC", 2), ("srcXORDestMAC", 3), ("srcIP", 4), ("destIP", 5), ("srcXORDestIP", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggRule.setStatus('obsolete')
aggRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 3, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aggRowstatus.setStatus('obsolete')
l3Table = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: l3Table.setStatus('current')
l3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "l3IpAddress"))
if mibBuilder.loadTexts: l3Entry.setStatus('current')
l3IpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3IpAddress.setStatus('current')
l3NextHopMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3NextHopMacAddress.setStatus('current')
l3Vlan = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3Vlan.setStatus('current')
l3Port = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3Port.setStatus('current')
l3CreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3CreateTime.setStatus('current')
l3UpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 4, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l3UpdateTime.setStatus('current')
loopTestPortno = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopTestPortno.setStatus('current')
loopTestType = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noop", 1), ("local", 2), ("remote", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loopTestType.setStatus('current')
loopTestSuccess = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loopTestSuccess.setStatus('current')
srmHardwareEnable = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srmHardwareEnable.setStatus('current')
srmHardwareDEFCPU = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: srmHardwareDEFCPU.setStatus('current')
portFlowAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1), )
if mibBuilder.loadTexts: portFlowAlarmTable.setStatus('current')
portFlowAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "portFlowAlarmPort"))
if mibBuilder.loadTexts: portFlowAlarmEntry.setStatus('current')
portFlowAlarmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26)))
if mibBuilder.loadTexts: portFlowAlarmPort.setStatus('current')
portFlowAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowAlarmEnable.setStatus('current')
portFlowAlarmExceedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowAlarmExceedStatus.setStatus('current')
portFlowAlarmExceedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowAlarmExceedThreshold.setStatus('current')
portFlowAlarmNormalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowAlarmNormalThreshold.setStatus('current')
portFlowAlarmGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowAlarmGlobalEnable.setStatus('current')
portFlowAlarmTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 5))
portFlowAlarmExceedTrap = NotificationType((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 5, 1)).setObjects(("GBNDeviceSwitch-MIB", "portFlowAlarmPort"))
if mibBuilder.loadTexts: portFlowAlarmExceedTrap.setStatus('current')
portFlowAlarmNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 7, 5, 2)).setObjects(("GBNDeviceSwitch-MIB", "portFlowAlarmPort"))
if mibBuilder.loadTexts: portFlowAlarmNormalTrap.setStatus('current')
qosQueueSchedulerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1))
qosWrrQueue1Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue1Weight.setStatus('current')
qosWrrQueue2Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue2Weight.setStatus('current')
qosWrrQueue3Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue3Weight.setStatus('current')
qosWrrQueue4Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue4Weight.setStatus('current')
qosWrrMaxDelayValue = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrMaxDelayValue.setStatus('current')
qosQueueSchedulerMode = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("strictPriority", 1), ("wrr", 2))).clone('strictPriority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosQueueSchedulerMode.setStatus('current')
qosWrrQueue5Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue5Weight.setStatus('current')
qosWrrQueue6Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue6Weight.setStatus('current')
qosWrrQueue7Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue7Weight.setStatus('current')
qosWrrQueue8Weight = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWrrQueue8Weight.setStatus('current')
qosPriorityRemapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2))
qosPriority0Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority0Remap.setStatus('current')
qosPriority1Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority1Remap.setStatus('current')
qosPriority2Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority2Remap.setStatus('current')
qosPriority3Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority3Remap.setStatus('current')
qosPriority4Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority4Remap.setStatus('current')
qosPriority5Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority5Remap.setStatus('current')
qosPriority6Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority6Remap.setStatus('current')
qosPriority7Remap = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriority7Remap.setStatus('current')
qosPriorityRemapStatus = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 8, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPriorityRemapStatus.setStatus('current')
qosLineRateTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 9, 1), )
if mibBuilder.loadTexts: qosLineRateTable.setStatus('current')
qosLineRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 9, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "qosLineRateInterface"))
if mibBuilder.loadTexts: qosLineRateEntry.setStatus('current')
qosLineRateInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLineRateInterface.setStatus('current')
qosLineRateTargetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosLineRateTargetRate.setStatus('current')
portIsolationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 10, 1))
portIsolationDownLinkPorts = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 10, 1, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIsolationDownLinkPorts.setStatus('current')
stormControlTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11, 1), )
if mibBuilder.loadTexts: stormControlTable.setStatus('current')
stormControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "stormControlInterface"), (0, "GBNDeviceSwitch-MIB", "stormControlType"))
if mibBuilder.loadTexts: stormControlEntry.setStatus('current')
stormControlInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormControlInterface.setStatus('current')
stormControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stormControlType.setStatus('current')
stormControlTargetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlTargetRate.setStatus('current')
stormControlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 11, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stormControlRowStatus.setStatus('current')
bandwidthcontrolTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 12, 1), )
if mibBuilder.loadTexts: bandwidthcontrolTable.setStatus('current')
bandwidthcontrolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 12, 1, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "controlPort"))
if mibBuilder.loadTexts: bandwidthcontrolEntry.setStatus('current')
controlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlPort.setStatus('current')
portEgressBandwidthcontrol = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portEgressBandwidthcontrol.setStatus('current')
portIngressBandwidthcontrol = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portIngressBandwidthcontrol.setStatus('current')
newStormControlType = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("broadcast", 1), ("ipmulticast", 2), ("broadcast_ipmulticast", 3), ("dlf", 4), ("broadcast_dlf", 5), ("ipmulticast_dlf", 6), ("broadcast_ipmulticast_dlf", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newStormControlType.setStatus('current')
newStormControlTargetRate = MibScalar((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 12, 25, 50))).clone(namedValues=NamedValues(("rate_one_sixteenth", 6), ("rate_one_eighth", 12), ("rate_one_fourth", 25), ("rate_one_half", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newStormControlTargetRate.setStatus('current')
newStormControlTable = MibTable((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13, 3), )
if mibBuilder.loadTexts: newStormControlTable.setStatus('current')
newStormControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13, 3, 1), ).setIndexNames((0, "GBNDeviceSwitch-MIB", "newStormControlInterface"))
if mibBuilder.loadTexts: newStormControlEntry.setStatus('current')
newStormControlInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: newStormControlInterface.setStatus('current')
newStormControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13464, 1, 2, 2, 1, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: newStormControlStatus.setStatus('current')
mibBuilder.exportSymbols("GBNDeviceSwitch-MIB", mirroringPort=mirroringPort, portFlowAlarmTable=portFlowAlarmTable, qosLineRateTable=qosLineRateTable, portFlowAlarmExceedThreshold=portFlowAlarmExceedThreshold, stormControlEntry=stormControlEntry, portFlowAlarmPort=portFlowAlarmPort, l3IpAddress=l3IpAddress, aggPortListPorts=aggPortListPorts, gbnDeviceSwitchLineRate=gbnDeviceSwitchLineRate, l3UpdateTime=l3UpdateTime, qosWrrQueue7Weight=qosWrrQueue7Weight, aggEntry=aggEntry, portFlowAlarmNormalTrap=portFlowAlarmNormalTrap, l3Vlan=l3Vlan, qosWrrQueue4Weight=qosWrrQueue4Weight, gbnDeviceSwitchL3=gbnDeviceSwitchL3, portFlowAlarmExceedTrap=portFlowAlarmExceedTrap, mirroredEgrPort=mirroredEgrPort, portTypeEntry=portTypeEntry, qosPriority4Remap=qosPriority4Remap, loopTestType=loopTestType, mirroredIgrPort=mirroredIgrPort, bandwidthcontrolEntry=bandwidthcontrolEntry, qosLineRateTargetRate=qosLineRateTargetRate, qosPriority1Remap=qosPriority1Remap, qosWrrMaxDelayValue=qosWrrMaxDelayValue, l3NextHopMacAddress=l3NextHopMacAddress, aggPort=aggPort, newStormControlTable=newStormControlTable, aggTable=aggTable, qosLineRateInterface=qosLineRateInterface, newStormControlTargetRate=newStormControlTargetRate, srmHardwareDEFCPU=srmHardwareDEFCPU, newStormControlEntry=newStormControlEntry, gbnDeviceSwitchLoopTest=gbnDeviceSwitchLoopTest, l3Entry=l3Entry, stormControlTable=stormControlTable, bandwidthcontrolTable=bandwidthcontrolTable, portTypeTable=portTypeTable, PYSNMP_MODULE_ID=gbnDeviceSwitch, gbnDeviceSwitchPort=gbnDeviceSwitchPort, portFlowAlarmEnable=portFlowAlarmEnable, aggUnit=aggUnit, qosWrrQueue5Weight=qosWrrQueue5Weight, qosWrrQueue3Weight=qosWrrQueue3Weight, qosPriority6Remap=qosPriority6Remap, gbnDeviceSwitchFlowAlarm=gbnDeviceSwitchFlowAlarm, newStormControlType=newStormControlType, newStormControlInterface=newStormControlInterface, gbnDeviceSwitchNewStormControl=gbnDeviceSwitchNewStormControl, qosPriorityRemapStatus=qosPriorityRemapStatus, portFlowAlarmGlobalEnable=portFlowAlarmGlobalEnable, qosWrrQueue1Weight=qosWrrQueue1Weight, portIsolationDownLinkPorts=portIsolationDownLinkPorts, portEgressBandwidthcontrol=portEgressBandwidthcontrol, l3Port=l3Port, gbnDeviceSwitchPortIsolation=gbnDeviceSwitchPortIsolation, portFlowAlarmNormalThreshold=portFlowAlarmNormalThreshold, controlPort=controlPort, qosPriority0Remap=qosPriority0Remap, qosLineRateEntry=qosLineRateEntry, stormControlRowStatus=stormControlRowStatus, gbnDeviceSwitch=gbnDeviceSwitch, qosPriority7Remap=qosPriority7Remap, qosPriorityRemapGroup=qosPriorityRemapGroup, portIsolationGroup=portIsolationGroup, gbnDeviceSwitchBandWidth=gbnDeviceSwitchBandWidth, qosQueueSchedulerMode=qosQueueSchedulerMode, loopTestPortno=loopTestPortno, srmHardwareEnable=srmHardwareEnable, stormControlInterface=stormControlInterface, newStormControlStatus=newStormControlStatus, gbnDeviceSwitchStormControl=gbnDeviceSwitchStormControl, aggRule=aggRule, gbnDeviceSwitchSRM=gbnDeviceSwitchSRM, qosWrrQueue2Weight=qosWrrQueue2Weight, l3CreateTime=l3CreateTime, qosPriority5Remap=qosPriority5Remap, gbnDeviceSwitchQueneScheduer=gbnDeviceSwitchQueneScheduer, portType=portType, gbnDeviceSwitchMirror=gbnDeviceSwitchMirror, stormControlTargetRate=stormControlTargetRate, portIngressBandwidthcontrol=portIngressBandwidthcontrol, qosPriority2Remap=qosPriority2Remap, portFlowAlarmExceedStatus=portFlowAlarmExceedStatus, portFlowAlarmTrap=portFlowAlarmTrap, qosWrrQueue8Weight=qosWrrQueue8Weight, gbnDeviceSwitchAggregation=gbnDeviceSwitchAggregation, qosQueueSchedulerGroup=qosQueueSchedulerGroup, portFlowAlarmEntry=portFlowAlarmEntry, qosWrrQueue6Weight=qosWrrQueue6Weight, l3Table=l3Table, portNumber=portNumber, aggRowstatus=aggRowstatus, loopTestSuccess=loopTestSuccess, qosPriority3Remap=qosPriority3Remap, stormControlType=stormControlType)
