#
# PySNMP MIB module HUAWEI-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-ACL-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:30:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
huaweiMgmt, = mibBuilder.importSymbols("HUAWEI-MIB", "huaweiMgmt")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, Counter64, Bits, TimeTicks, NotificationType, Integer32, IpAddress, Gauge32, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "Counter64", "Bits", "TimeTicks", "NotificationType", "Integer32", "IpAddress", "Gauge32", "iso", "Counter32")
TruthValue, MacAddress, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "DisplayString", "TextualConvention", "RowStatus")
hwAcl = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 1))
hwAcl.setRevisions(('2015-02-27 21:00', '2015-02-07 21:00', '2014-10-28 21:00', '2014-06-20 09:48', '2014-04-09 09:48', '2014-03-26 09:26', '2014-01-17 13:38', '2013-11-28 21:00', '2013-10-28 19:00', '2013-09-05 00:00', '2014-08-05 16:06',))
if mibBuilder.loadTexts: hwAcl.setLastUpdated('201502272100Z')
if mibBuilder.loadTexts: hwAcl.setOrganization('Huawei Technologies Co.,Ltd.')
hwAclMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1))
hwAclNumGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 2), )
if mibBuilder.loadTexts: hwAclNumGroupTable.setStatus('current')
hwAclNumGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 2, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclNumGroupAclNum"))
if mibBuilder.loadTexts: hwAclNumGroupEntry.setStatus('current')
hwAclNumGroupAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclNumGroupAclNum.setStatus('current')
hwAclNumGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclNumGroupMatchOrder.setStatus('current')
hwAclNumGroupSubitemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclNumGroupSubitemNum.setStatus('current')
hwAclNumGroupStep = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclNumGroupStep.setStatus('current')
hwAclNumGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclNumGroupDescription.setStatus('current')
hwAclNumGroupCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("notUsed", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclNumGroupCountClear.setStatus('current')
hwAclNumGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclNumGroupRowStatus.setStatus('current')
hwAclNumGroupAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclNumGroupAclName.setStatus('current')
hwAclNumGroupAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("basic", 1), ("advanced", 2), ("link", 3), ("user", 4), ("interface", 5), ("mpls", 6), ("mac", 7), ("ucl", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclNumGroupAclType.setStatus('current')
hwAclBasicRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4), )
if mibBuilder.loadTexts: hwAclBasicRuleTable.setStatus('current')
hwAclBasicRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclBasicAclNum"), (0, "HUAWEI-ACL-MIB", "hwAclBasicSubitem"))
if mibBuilder.loadTexts: hwAclBasicRuleEntry.setStatus('current')
hwAclBasicAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclBasicAclNum.setStatus('current')
hwAclBasicSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclBasicSubitem.setStatus('current')
hwAclBasicAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclBasicAct.setStatus('current')
hwAclBasicSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclBasicSrcIp.setStatus('current')
hwAclBasicSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclBasicSrcWild.setStatus('current')
hwAclBasicTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclBasicTimeRangeIndex.setStatus('current')
hwAclBasicFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("fragmentSubseq", 0), ("fragment", 1), ("nonFragment", 2), ("nonSubseq", 3), ("fragmentSpeFirst", 4), ("none", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclBasicFragments.setStatus('current')
hwAclBasicLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclBasicLog.setStatus('current')
hwAclBasicEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclBasicEnable.setStatus('current')
hwAclBasicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclBasicCount.setStatus('current')
hwAclBasicVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclBasicVrfName.setStatus('current')
hwAclBasicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclBasicRowStatus.setStatus('current')
hwAclBasicDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclBasicDescription.setStatus('current')
hwAclAdvancedRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5), )
if mibBuilder.loadTexts: hwAclAdvancedRuleTable.setStatus('current')
hwAclAdvancedRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclAdvancedAclNum"), (0, "HUAWEI-ACL-MIB", "hwAclAdvancedSubitem"))
if mibBuilder.loadTexts: hwAclAdvancedRuleEntry.setStatus('current')
hwAclAdvancedAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclAdvancedAclNum.setStatus('current')
hwAclAdvancedSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclAdvancedSubitem.setStatus('current')
hwAclAdvancedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedAct.setStatus('current')
hwAclAdvancedProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedProtocol.setStatus('current')
hwAclAdvancedSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedSrcIp.setStatus('current')
hwAclAdvancedSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedSrcWild.setStatus('current')
hwAclAdvancedSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0, 5))).clone(namedValues=NamedValues(("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("invalid", 0), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedSrcOp.setStatus('current')
hwAclAdvancedSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedSrcPort1.setStatus('current')
hwAclAdvancedSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedSrcPort2.setStatus('current')
hwAclAdvancedDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedDestIp.setStatus('current')
hwAclAdvancedDestWild = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedDestWild.setStatus('current')
hwAclAdvancedDestOp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0, 5))).clone(namedValues=NamedValues(("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("invalid", 0), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedDestOp.setStatus('current')
hwAclAdvancedDestPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedDestPort1.setStatus('current')
hwAclAdvancedDestPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedDestPort2.setStatus('current')
hwAclAdvancedPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedPrecedence.setStatus('current')
hwAclAdvancedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedTos.setStatus('current')
hwAclAdvancedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedDscp.setStatus('current')
hwAclAdvancedEstablish = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedEstablish.setStatus('current')
hwAclAdvancedTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedTimeRangeIndex.setStatus('current')
hwAclAdvancedIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedIcmpType.setStatus('current')
hwAclAdvancedIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedIcmpCode.setStatus('current')
hwAclAdvancedFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("fragmentSubseq", 0), ("fragment", 1), ("nonFragment", 2), ("nonSubseq", 3), ("fragmentSpeFirst", 4), ("none", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedFragments.setStatus('current')
hwAclAdvancedLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedLog.setStatus('current')
hwAclAdvancedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclAdvancedEnable.setStatus('current')
hwAclAdvancedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclAdvancedCount.setStatus('current')
hwAclAdvancedVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedVrfName.setStatus('current')
hwAclAdvancedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedRowStatus.setStatus('current')
hwAclAdvancedTcpSyncFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedTcpSyncFlag.setStatus('current')
hwAclAdvancedDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedDescription.setStatus('current')
hwAclAdvancedSrcPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedSrcPoolName.setStatus('current')
hwAclAdvancedDestPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedDestPoolName.setStatus('current')
hwAclAdvancedProtocolNew = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedProtocolNew.setStatus('current')
hwAclAdvancedVni = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedVni.setStatus('current')
hwAclAdvancedIgmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedIgmpType.setStatus('current')
hwAclAdvancedTtlOp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0, 5))).clone(namedValues=NamedValues(("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("invalid", 0), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedTtlOp.setStatus('current')
hwAclAdvancedTtlExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedTtlExpire.setStatus('current')
hwAclAdvancedTtlExpireEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedTtlExpireEnd.setStatus('current')
hwAclAdvancedPktLenOp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0, 5))).clone(namedValues=NamedValues(("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("invalid", 0), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedPktLenOp.setStatus('current')
hwAclAdvancedPktLenBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedPktLenBegin.setStatus('current')
hwAclAdvancedPktLenEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedPktLenEnd.setStatus('current')
hwAclAdvancedTcpFlagMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 5, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAdvancedTcpFlagMask.setStatus('current')
hwAclIfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 6), )
if mibBuilder.loadTexts: hwAclIfRuleTable.setStatus('current')
hwAclIfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 6, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclIfAclNum"), (0, "HUAWEI-ACL-MIB", "hwAclIfSubitem"))
if mibBuilder.loadTexts: hwAclIfRuleEntry.setStatus('current')
hwAclIfAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIfAclNum.setStatus('current')
hwAclIfSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIfSubitem.setStatus('current')
hwAclIfAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIfAct.setStatus('current')
hwAclIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 6, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIfIndex.setStatus('current')
hwAclIfAny = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 6, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIfAny.setStatus('current')
hwAclIfTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIfTimeRangeIndex.setStatus('current')
hwAclIfLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 6, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIfLog.setStatus('current')
hwAclIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIfEnable.setStatus('current')
hwAclIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 6, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIfCount.setStatus('current')
hwAclIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 6, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIfRowStatus.setStatus('current')
hwAclUserRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7), )
if mibBuilder.loadTexts: hwAclUserRuleTable.setStatus('current')
hwAclUserRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclUserAclNum"), (0, "HUAWEI-ACL-MIB", "hwAclUserSubitem"))
if mibBuilder.loadTexts: hwAclUserRuleEntry.setStatus('current')
hwAclUserAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclUserAclNum.setStatus('current')
hwAclUserSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclUserSubitem.setStatus('current')
hwAclUserAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserAct.setStatus('current')
hwAclUserProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserProtocol.setStatus('current')
hwAclUserSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserSrcIp.setStatus('current')
hwAclUserSrcWild = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserSrcWild.setStatus('current')
hwAclUserSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0, 5))).clone(namedValues=NamedValues(("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("invalid", 0), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserSrcOp.setStatus('current')
hwAclUserSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserSrcPort1.setStatus('current')
hwAclUserSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserSrcPort2.setStatus('current')
hwAclUserDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserDestIp.setStatus('current')
hwAclUserDestWild = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserDestWild.setStatus('current')
hwAclUserDestOp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0, 5))).clone(namedValues=NamedValues(("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("invalid", 0), ("range", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserDestOp.setStatus('current')
hwAclUserDestPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserDestPort1.setStatus('current')
hwAclUserDestPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserDestPort2.setStatus('current')
hwAclUserPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserPrecedence.setStatus('current')
hwAclUserTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserTos.setStatus('current')
hwAclUserDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserDscp.setStatus('current')
hwAclUserEstablish = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserEstablish.setStatus('current')
hwAclUserTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserTimeRangeIndex.setStatus('current')
hwAclUserIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserIcmpType.setStatus('current')
hwAclUserIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserIcmpCode.setStatus('current')
hwAclUserFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserFragments.setStatus('current')
hwAclUserLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserLog.setStatus('current')
hwAclUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclUserEnable.setStatus('current')
hwAclUserCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclUserCount.setStatus('current')
hwAclUserVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserVrfName.setStatus('current')
hwAclUserSrcUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserSrcUserGroupName.setStatus('current')
hwAclUserDestUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserDestUserGroupName.setStatus('current')
hwAclUserSrcModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserSrcModeType.setStatus('current')
hwAclUserDestModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserDestModeType.setStatus('current')
hwAclUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 31), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserRowStatus.setStatus('current')
hwAclUserTcpSyncFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 63), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserTcpSyncFlag.setStatus('current')
hwAclUserSrcUserGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 64000), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserSrcUserGroupNum.setStatus('current')
hwAclUserDestUserGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 64000), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclUserDestUserGroupNum.setStatus('current')
hwAclUserDestDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 7, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclUserDestDomainName.setStatus('current')
hwAclCompileEnableFlag = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAclCompileEnableFlag.setStatus('current')
hwAclCompileNumGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 11), )
if mibBuilder.loadTexts: hwAclCompileNumGroupTable.setStatus('current')
hwAclCompileNumGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 11, 1), )
hwAclNumGroupEntry.registerAugmentions(("HUAWEI-ACL-MIB", "hwAclCompileNumGroupEntry"))
hwAclCompileNumGroupEntry.setIndexNames(*hwAclNumGroupEntry.getIndexNames())
if mibBuilder.loadTexts: hwAclCompileNumGroupEntry.setStatus('current')
hwAclCompileNumGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notCompile", 1), ("compiled", 2), ("changeAfterCompile", 3))).clone('notCompile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAclCompileNumGroupStatus.setStatus('current')
hwAclIpv6BasicRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12), )
if mibBuilder.loadTexts: hwAclIpv6BasicRuleTable.setStatus('current')
hwAclIpv6BasicRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclIpv6BasicAclNum"), (0, "HUAWEI-ACL-MIB", "hwAclIpv6BasicSubitem"))
if mibBuilder.loadTexts: hwAclIpv6BasicRuleEntry.setStatus('current')
hwAclIpv6BasicAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6BasicAclNum.setStatus('current')
hwAclIpv6BasicSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6BasicSubitem.setStatus('current')
hwAclIpv6BasicAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6BasicAct.setStatus('current')
hwAclIpv6BasicSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 4), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6BasicSrcIp.setStatus('current')
hwAclIpv6BasicSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6BasicSrcPrefix.setStatus('current')
hwAclIpv6BasicTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6BasicTimeRangeIndex.setStatus('current')
hwAclIpv6BasicFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("fragmentSubseq", 0), ("fragment", 1), ("none", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6BasicFragment.setStatus('current')
hwAclIpv6BasicLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6BasicLog.setStatus('current')
hwAclIpv6BasicEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 9), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6BasicEnable.setStatus('current')
hwAclIpv6BasicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6BasicCount.setStatus('current')
hwAclIpv6BasicVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6BasicVrfName.setStatus('current')
hwAclIpv6BasicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6BasicRowStatus.setStatus('current')
hwAclIpv6BasicDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6BasicDescription.setStatus('current')
hwAclIpv6BasicSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 12, 1, 14), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6BasicSrcMask.setStatus('current')
hwAclIpv6AdvancedRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13), )
if mibBuilder.loadTexts: hwAclIpv6AdvancedRuleTable.setStatus('current')
hwAclIpv6AdvancedRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclIpv6AdvancedAclNum"), (0, "HUAWEI-ACL-MIB", "hwAclIpv6AdvancedSubitem"))
if mibBuilder.loadTexts: hwAclIpv6AdvancedRuleEntry.setStatus('current')
hwAclIpv6AdvancedAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6AdvancedAclNum.setStatus('current')
hwAclIpv6AdvancedSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6AdvancedSubitem.setStatus('current')
hwAclIpv6AdvancedAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedAct.setStatus('current')
hwAclIpv6AdvancedProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedProtocol.setStatus('current')
hwAclIpv6AdvancedSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 5), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedSrcIp.setStatus('current')
hwAclIpv6AdvancedSrcPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedSrcPrefix.setStatus('current')
hwAclIpv6AdvancedSrcOp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5), ("invalid", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedSrcOp.setStatus('current')
hwAclIpv6AdvancedSrcPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedSrcPort1.setStatus('current')
hwAclIpv6AdvancedSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedSrcPort2.setStatus('current')
hwAclIpv6AdvancedDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 10), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedDestIp.setStatus('current')
hwAclIpv6AdvancedDestPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedDestPrefix.setStatus('current')
hwAclIpv6AdvancedDestOp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("lt", 1), ("eq", 2), ("gt", 3), ("neq", 4), ("range", 5), ("invalid", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedDestOp.setStatus('current')
hwAclIpv6AdvancedDestPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedDestPort1.setStatus('current')
hwAclIpv6AdvancedDestPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedDestPort2.setStatus('current')
hwAclIpv6AdvancedPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedPrecedence.setStatus('current')
hwAclIpv6AdvancedTos = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedTos.setStatus('current')
hwAclIpv6AdvancedDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedDscp.setStatus('current')
hwAclIpv6AdvancedEstablish = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedEstablish.setStatus('current')
hwAclIpv6AdvancedTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedTimeRangeIndex.setStatus('current')
hwAclIpv6AdvancedIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedIcmpType.setStatus('current')
hwAclIpv6AdvancedIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedIcmpCode.setStatus('current')
hwAclIpv6AdvancedFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("fragmentSubseq", 0), ("fragment", 1), ("none", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedFragment.setStatus('current')
hwAclIpv6AdvancedLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 23), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedLog.setStatus('current')
hwAclIpv6AdvancedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 24), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6AdvancedEnable.setStatus('current')
hwAclIpv6AdvancedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6AdvancedCount.setStatus('current')
hwAclIpv6AdvancedVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedVrfName.setStatus('current')
hwAclIpv6AdvancedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedRowStatus.setStatus('current')
hwAclIpv6AdvancedDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedDescription.setStatus('current')
hwAclIpv6AdvancedSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 29), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedSrcMask.setStatus('current')
hwAclIpv6AdvancedDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 30), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedDestMask.setStatus('current')
hwAclIpv6AdvancedProtocolNew = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 13, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 255), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6AdvancedProtocolNew.setStatus('current')
hwAclEthernetFrameRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14), )
if mibBuilder.loadTexts: hwAclEthernetFrameRuleTable.setStatus('current')
hwAclEthernetFrameRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclEthernetFrameAclNum"), (0, "HUAWEI-ACL-MIB", "hwAclEthernetFrameSubitem"))
if mibBuilder.loadTexts: hwAclEthernetFrameRuleEntry.setStatus('current')
hwAclEthernetFrameAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclEthernetFrameAclNum.setStatus('current')
hwAclEthernetFrameSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclEthernetFrameSubitem.setStatus('current')
hwAclEthernetFrameAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameAct.setStatus('current')
hwAclEthernetFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameType.setStatus('current')
hwAclEthernetFrameTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameTypeMask.setStatus('current')
hwAclEthernetFrameSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameSrcMac.setStatus('current')
hwAclEthernetFrameSrcMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameSrcMacMask.setStatus('current')
hwAclEthernetFrameDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 8), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameDstMac.setStatus('current')
hwAclEthernetFrameDstMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 9), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameDstMacMask.setStatus('current')
hwAclEthernetFrameTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameTimeRangeIndex.setStatus('current')
hwAclEthernetFrameLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameLog.setStatus('current')
hwAclEthernetFrameEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 12), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclEthernetFrameEnable.setStatus('current')
hwAclEthernetFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclEthernetFrameCount.setStatus('current')
hwAclEthernetFrameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameRowStatus.setStatus('current')
hwAclEthernetFrameEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ether2", 1), ("ieee802dot3", 2), ("snap", 3), ("none", 255))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameEncapType.setStatus('current')
hwAclEthernetFrameDoubleTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameDoubleTag.setStatus('current')
hwAclEthernetFrameVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameVlanId.setStatus('current')
hwAclEthernetFrameVlanIdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameVlanIdMask.setStatus('current')
hwAclEthernetFrameCVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameCVlanId.setStatus('current')
hwAclEthernetFrameCVlanIdMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)).clone(4095)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameCVlanIdMask.setStatus('current')
hwAclEthernetFrameRule8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameRule8021p.setStatus('current')
hwAclEthernetFrameRuleCVlan8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameRuleCVlan8021p.setStatus('current')
hwAclEthernetFrameDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 14, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclEthernetFrameDescription.setStatus('current')
hwAclAppliedTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15), )
if mibBuilder.loadTexts: hwAclAppliedTable.setStatus('current')
hwAclAppliedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclAppliedOperation"), (0, "HUAWEI-ACL-MIB", "hwAclAppliedScopeType"), (0, "HUAWEI-ACL-MIB", "hwAclAppliedScopeIndex"), (0, "HUAWEI-ACL-MIB", "hwAclAppliedDirection"), (0, "HUAWEI-ACL-MIB", "hwAclAppliedAclNum"), (0, "HUAWEI-ACL-MIB", "hwAclAppliedSubitem"), (0, "HUAWEI-ACL-MIB", "hwAclAppliedAclNum2"), (0, "HUAWEI-ACL-MIB", "hwAclAppliedSubitem2"), (0, "HUAWEI-ACL-MIB", "hwAclAppliedIsIPv6Acl"))
if mibBuilder.loadTexts: hwAclAppliedEntry.setStatus('current')
hwAclAppliedOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("filter", 1), ("limit", 2), ("mirror", 3), ("redirectCpu", 4), ("redirectInterface", 5), ("redirectIpNextHop", 6), ("redirectIpv6NextHop", 7), ("remark8021p", 8), ("remarkDscp", 9), ("remarkIpPrecedence", 10), ("remarkLocalPrecedence", 11), ("remarkVlanId", 12), ("remarkCVlanId", 13), ("remarkDestMac", 14), ("statistic", 15))))
if mibBuilder.loadTexts: hwAclAppliedOperation.setStatus('current')
hwAclAppliedScopeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("global", 1), ("vlan", 2), ("interface", 3))))
if mibBuilder.loadTexts: hwAclAppliedScopeType.setStatus('current')
hwAclAppliedScopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 3), Integer32())
if mibBuilder.loadTexts: hwAclAppliedScopeIndex.setStatus('current')
hwAclAppliedDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: hwAclAppliedDirection.setStatus('current')
hwAclAppliedAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 4999)))
if mibBuilder.loadTexts: hwAclAppliedAclNum.setStatus('current')
hwAclAppliedSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 6), Integer32())
if mibBuilder.loadTexts: hwAclAppliedSubitem.setStatus('current')
hwAclAppliedAclNum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2000, 3999), ValueRangeConstraint(65535, 65535), )))
if mibBuilder.loadTexts: hwAclAppliedAclNum2.setStatus('current')
hwAclAppliedSubitem2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 8), Integer32())
if mibBuilder.loadTexts: hwAclAppliedSubitem2.setStatus('current')
hwAclAppliedStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("byPackets", 1), ("byBytes", 2))).clone('byPackets')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedStatMode.setStatus('current')
hwAclAppliedStatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclAppliedStatCount.setStatus('current')
hwAclAppliedLimitCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 10000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedLimitCir.setStatus('current')
hwAclAppliedLimitPir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(64, 10000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedLimitPir.setStatus('current')
hwAclAppliedLimitCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4096, 16773120), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedLimitCbs.setStatus('current')
hwAclAppliedLimitPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4096, 16773120), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedLimitPbs.setStatus('current')
hwAclAppliedLimitGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("drop", 2), ("passRemarkDscp", 3), ("passRemark8021p", 4))).clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedLimitGreenAction.setStatus('current')
hwAclAppliedLimitGreenValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedLimitGreenValue.setStatus('current')
hwAclAppliedLimitYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("drop", 2), ("passRemarkDscp", 3), ("passRemark8021p", 4))).clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedLimitYellowAction.setStatus('current')
hwAclAppliedLimitYellowValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedLimitYellowValue.setStatus('current')
hwAclAppliedLimitRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("drop", 2), ("passRemarkDscp", 3), ("passRemark8021p", 4))).clone('drop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedLimitRedAction.setStatus('current')
hwAclAppliedLimitRedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedLimitRedValue.setStatus('current')
hwAclAppliedMirrObservedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 21), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedMirrObservedPort.setStatus('current')
hwAclAppliedMirrRspanVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedMirrRspanVlan.setStatus('current')
hwAclAppliedRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedRedirectIfIndex.setStatus('current')
hwAclAppliedRedirectIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 24), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedRedirectIpAddr.setStatus('current')
hwAclAppliedRedirectIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 25), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedRedirectIpv6Addr.setStatus('current')
hwAclAppliedRemarkVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedRemarkVlan.setStatus('current')
hwAclAppliedRemarkCVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedRemarkCVlan.setStatus('current')
hwAclAppliedRemark8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedRemark8021p.setStatus('current')
hwAclAppliedRemarkDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedRemarkDscp.setStatus('current')
hwAclAppliedRemarkIpPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedRemarkIpPre.setStatus('current')
hwAclAppliedRemarkLocalPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedRemarkLocalPre.setStatus('current')
hwAclAppliedRemarkMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 32), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedRemarkMacAddr.setStatus('current')
hwAclAppliedIsIPv6Acl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 33), TruthValue())
if mibBuilder.loadTexts: hwAclAppliedIsIPv6Acl.setStatus('current')
hwAclAppliedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 15, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclAppliedRowStatus.setStatus('current')
hwAclIpv6NumGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 16), )
if mibBuilder.loadTexts: hwAclIpv6NumGroupTable.setStatus('current')
hwAclIpv6NumGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 16, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclIpv6NumGroupAclNum"))
if mibBuilder.loadTexts: hwAclIpv6NumGroupEntry.setStatus('current')
hwAclIpv6NumGroupAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6NumGroupAclNum.setStatus('current')
hwAclIpv6NumGroupMatchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("config", 1), ("auto", 2), ("default", 3))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6NumGroupMatchOrder.setStatus('current')
hwAclIpv6NumGroupSubitemNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6NumGroupSubitemNum.setStatus('current')
hwAclIpv6NumGroupCountClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("notUsed", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6NumGroupCountClear.setStatus('current')
hwAclIpv6NumGroupAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 16, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6NumGroupAclName.setStatus('current')
hwAclIpv6NumGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 16, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6NumGroupDescription.setStatus('current')
hwAclIpv6NumGroupAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("advanced", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6NumGroupAclType.setStatus('current')
hwAclIpv6NumGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 16, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6NumGroupRowStatus.setStatus('current')
hwAclIpv6NumGroupStep = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 16, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6NumGroupStep.setStatus('current')
hwAclIpv6IfRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 17), )
if mibBuilder.loadTexts: hwAclIpv6IfRuleTable.setStatus('current')
hwAclIpv6IfRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 17, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclIpv6IfAclNum"), (0, "HUAWEI-ACL-MIB", "hwAclIpv6IfSubitem"))
if mibBuilder.loadTexts: hwAclIpv6IfRuleEntry.setStatus('current')
hwAclIpv6IfAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6IfAclNum.setStatus('current')
hwAclIpv6IfSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 17, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6IfSubitem.setStatus('current')
hwAclIpv6IfAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6IfAct.setStatus('current')
hwAclIpv6IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 17, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6IfIndex.setStatus('current')
hwAclIpv6IfAny = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 17, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6IfAny.setStatus('current')
hwAclIpv6IfTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6IfTimeRangeIndex.setStatus('current')
hwAclIpv6IfLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 17, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6IfLog.setStatus('current')
hwAclIpv6IfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 17, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6IfEnable.setStatus('current')
hwAclIpv6IfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 17, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclIpv6IfCount.setStatus('current')
hwAclIpv6IfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 17, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclIpv6IfRowStatus.setStatus('current')
hwAclMplsRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18), )
if mibBuilder.loadTexts: hwAclMplsRuleTable.setStatus('current')
hwAclMplsRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclMplsAclNum"), (0, "HUAWEI-ACL-MIB", "hwAclMplsSubitem"))
if mibBuilder.loadTexts: hwAclMplsRuleEntry.setStatus('current')
hwAclMplsAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclMplsAclNum.setStatus('current')
hwAclMplsSubitem = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclMplsSubitem.setStatus('current')
hwAclMplsAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsAct.setStatus('current')
hwAclMplsExp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsExp1.setStatus('current')
hwAclMplsExp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsExp2.setStatus('current')
hwAclMplsExp3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsExp3.setStatus('current')
hwAclMplsExp4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsExp4.setStatus('current')
hwAclMplsLabel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1048575), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsLabel1.setStatus('current')
hwAclMplsLabel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1048575), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsLabel2.setStatus('current')
hwAclMplsLabel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1048575), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsLabel3.setStatus('current')
hwAclMplsLabel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1048575), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsLabel4.setStatus('current')
hwAclMplsTTLOP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 0, 255))).clone(namedValues=NamedValues(("lt", 1), ("eq", 2), ("gt", 3), ("range", 5), ("invalid", 0), ("any", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsTTLOP1.setStatus('current')
hwAclMplsTTL1Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsTTL1Begin.setStatus('current')
hwAclMplsTTL1End = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsTTL1End.setStatus('current')
hwAclMplsTTLOP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 0, 255))).clone(namedValues=NamedValues(("lt", 1), ("eq", 2), ("gt", 3), ("range", 5), ("invalid", 0), ("any", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsTTLOP2.setStatus('current')
hwAclMplsTTL2Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsTTL2Begin.setStatus('current')
hwAclMplsTTL2End = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsTTL2End.setStatus('current')
hwAclMplsTTLOP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 0, 255))).clone(namedValues=NamedValues(("lt", 1), ("eq", 2), ("gt", 3), ("range", 5), ("invalid", 0), ("any", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsTTLOP3.setStatus('current')
hwAclMplsTTL3Begin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsTTL3Begin.setStatus('current')
hwAclMplsTTL3End = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsTTL3End.setStatus('current')
hwAclMplsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclMplsRowStatus.setStatus('current')
hwAclMplsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 18, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAclMplsCount.setStatus('current')
hwAclDomainNameConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 19), )
if mibBuilder.loadTexts: hwAclDomainNameConfigTable.setStatus('current')
hwAclDomainNameConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 19, 1), ).setIndexNames((0, "HUAWEI-ACL-MIB", "hwAclDomainID"))
if mibBuilder.loadTexts: hwAclDomainNameConfigEntry.setStatus('current')
hwAclDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: hwAclDomainID.setStatus('current')
hwAclDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwAclDomainName.setStatus('current')
hwAclDomainNameConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 1, 1, 19, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAclDomainNameConfigRowStatus.setStatus('current')
hwAclMibTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2))
hwAclTrapOid = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 1))
hwAclTrapsDefine = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2))
hwAclTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2, 1))
hwAclResourceTrapsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2, 1, 1))
hwAclResSlotStr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2, 1, 1, 1), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAclResSlotStr.setStatus('current')
hwAclResStage = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2, 1, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAclResStage.setStatus('current')
hwAclResLimit = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwAclResLimit.setStatus('current')
hwAclResourceTrapsEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2, 1, 1, 4))
hwAclResThresholdExceedClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2, 1, 1, 4, 1)).setObjects(("HUAWEI-ACL-MIB", "hwAclResLimit"), ("HUAWEI-ACL-MIB", "hwAclResSlotStr"), ("HUAWEI-ACL-MIB", "hwAclResStage"))
if mibBuilder.loadTexts: hwAclResThresholdExceedClearTrap.setStatus('current')
hwAclResThresholdExceedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2, 1, 1, 4, 2)).setObjects(("HUAWEI-ACL-MIB", "hwAclResLimit"), ("HUAWEI-ACL-MIB", "hwAclResSlotStr"), ("HUAWEI-ACL-MIB", "hwAclResStage"))
if mibBuilder.loadTexts: hwAclResThresholdExceedTrap.setStatus('current')
hwAclResTotalCountExceedClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2, 1, 1, 4, 3)).setObjects(("HUAWEI-ACL-MIB", "hwAclResLimit"), ("HUAWEI-ACL-MIB", "hwAclResSlotStr"), ("HUAWEI-ACL-MIB", "hwAclResStage"))
if mibBuilder.loadTexts: hwAclResTotalCountExceedClearTrap.setStatus('current')
hwAclResTotalCountExceedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2, 1, 1, 4, 4)).setObjects(("HUAWEI-ACL-MIB", "hwAclResLimit"), ("HUAWEI-ACL-MIB", "hwAclResSlotStr"), ("HUAWEI-ACL-MIB", "hwAclResStage"))
if mibBuilder.loadTexts: hwAclResTotalCountExceedTrap.setStatus('current')
hwAclResourceTrapsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2, 1, 1, 5))
hwAclResourceTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 1, 2, 2, 1, 1, 5, 1)).setObjects(("HUAWEI-ACL-MIB", "hwAclResThresholdExceedClearTrap"), ("HUAWEI-ACL-MIB", "hwAclResThresholdExceedTrap"), ("HUAWEI-ACL-MIB", "hwAclResTotalCountExceedClearTrap"), ("HUAWEI-ACL-MIB", "hwAclResTotalCountExceedTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAclResourceTrapsGroup = hwAclResourceTrapsGroup.setStatus('current')
hwAclMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 1, 3))
hwAclMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 1, 3, 1))
hwAclMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 1, 3, 1, 1)).setObjects(("HUAWEI-ACL-MIB", "hwAclGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAclMibCompliance = hwAclMibCompliance.setStatus('current')
hwAclMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 1, 3, 2))
hwAclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 1, 3, 2, 1)).setObjects(("HUAWEI-ACL-MIB", "hwAclNumGroupMatchOrder"), ("HUAWEI-ACL-MIB", "hwAclNumGroupSubitemNum"), ("HUAWEI-ACL-MIB", "hwAclNumGroupAclName"), ("HUAWEI-ACL-MIB", "hwAclBasicAct"), ("HUAWEI-ACL-MIB", "hwAclBasicSrcIp"), ("HUAWEI-ACL-MIB", "hwAclBasicSrcWild"), ("HUAWEI-ACL-MIB", "hwAclBasicTimeRangeIndex"), ("HUAWEI-ACL-MIB", "hwAclBasicFragments"), ("HUAWEI-ACL-MIB", "hwAclBasicLog"), ("HUAWEI-ACL-MIB", "hwAclBasicEnable"), ("HUAWEI-ACL-MIB", "hwAclBasicCount"), ("HUAWEI-ACL-MIB", "hwAclBasicRowStatus"), ("HUAWEI-ACL-MIB", "hwAclAdvancedAct"), ("HUAWEI-ACL-MIB", "hwAclAdvancedProtocol"), ("HUAWEI-ACL-MIB", "hwAclAdvancedSrcIp"), ("HUAWEI-ACL-MIB", "hwAclAdvancedSrcWild"), ("HUAWEI-ACL-MIB", "hwAclAdvancedSrcOp"), ("HUAWEI-ACL-MIB", "hwAclAdvancedSrcPort1"), ("HUAWEI-ACL-MIB", "hwAclAdvancedSrcPort2"), ("HUAWEI-ACL-MIB", "hwAclAdvancedDestIp"), ("HUAWEI-ACL-MIB", "hwAclAdvancedDestWild"), ("HUAWEI-ACL-MIB", "hwAclAdvancedDestOp"), ("HUAWEI-ACL-MIB", "hwAclAdvancedDestPort1"), ("HUAWEI-ACL-MIB", "hwAclAdvancedDestPort2"), ("HUAWEI-ACL-MIB", "hwAclAdvancedPrecedence"), ("HUAWEI-ACL-MIB", "hwAclAdvancedTos"), ("HUAWEI-ACL-MIB", "hwAclAdvancedDscp"), ("HUAWEI-ACL-MIB", "hwAclAdvancedEstablish"), ("HUAWEI-ACL-MIB", "hwAclAdvancedTimeRangeIndex"), ("HUAWEI-ACL-MIB", "hwAclAdvancedIcmpType"), ("HUAWEI-ACL-MIB", "hwAclAdvancedIcmpCode"), ("HUAWEI-ACL-MIB", "hwAclAdvancedFragments"), ("HUAWEI-ACL-MIB", "hwAclAdvancedLog"), ("HUAWEI-ACL-MIB", "hwAclAdvancedEnable"), ("HUAWEI-ACL-MIB", "hwAclAdvancedCount"), ("HUAWEI-ACL-MIB", "hwAclAdvancedRowStatus"), ("HUAWEI-ACL-MIB", "hwAclAdvancedTcpSyncFlag"), ("HUAWEI-ACL-MIB", "hwAclAdvancedSrcPoolName"), ("HUAWEI-ACL-MIB", "hwAclAdvancedDestPoolName"), ("HUAWEI-ACL-MIB", "hwAclAdvancedProtocolNew"), ("HUAWEI-ACL-MIB", "hwAclAdvancedVni"), ("HUAWEI-ACL-MIB", "hwAclAdvancedIgmpType"), ("HUAWEI-ACL-MIB", "hwAclAdvancedTtlOp"), ("HUAWEI-ACL-MIB", "hwAclAdvancedTtlExpire"), ("HUAWEI-ACL-MIB", "hwAclAdvancedTtlExpireEnd"), ("HUAWEI-ACL-MIB", "hwAclIfAct"), ("HUAWEI-ACL-MIB", "hwAclIfIndex"), ("HUAWEI-ACL-MIB", "hwAclIfAny"), ("HUAWEI-ACL-MIB", "hwAclIfTimeRangeIndex"), ("HUAWEI-ACL-MIB", "hwAclIfLog"), ("HUAWEI-ACL-MIB", "hwAclIfEnable"), ("HUAWEI-ACL-MIB", "hwAclIfCount"), ("HUAWEI-ACL-MIB", "hwAclIfRowStatus"), ("HUAWEI-ACL-MIB", "hwAclUserAct"), ("HUAWEI-ACL-MIB", "hwAclUserProtocol"), ("HUAWEI-ACL-MIB", "hwAclUserSrcIp"), ("HUAWEI-ACL-MIB", "hwAclUserSrcWild"), ("HUAWEI-ACL-MIB", "hwAclUserSrcOp"), ("HUAWEI-ACL-MIB", "hwAclUserSrcPort1"), ("HUAWEI-ACL-MIB", "hwAclUserSrcPort2"), ("HUAWEI-ACL-MIB", "hwAclUserDestIp"), ("HUAWEI-ACL-MIB", "hwAclUserDestWild"), ("HUAWEI-ACL-MIB", "hwAclUserDestOp"), ("HUAWEI-ACL-MIB", "hwAclUserDestPort1"), ("HUAWEI-ACL-MIB", "hwAclUserDestPort2"), ("HUAWEI-ACL-MIB", "hwAclUserPrecedence"), ("HUAWEI-ACL-MIB", "hwAclUserTos"), ("HUAWEI-ACL-MIB", "hwAclUserDscp"), ("HUAWEI-ACL-MIB", "hwAclUserEstablish"), ("HUAWEI-ACL-MIB", "hwAclUserTimeRangeIndex"), ("HUAWEI-ACL-MIB", "hwAclUserIcmpType"), ("HUAWEI-ACL-MIB", "hwAclUserIcmpCode"), ("HUAWEI-ACL-MIB", "hwAclUserFragments"), ("HUAWEI-ACL-MIB", "hwAclUserLog"), ("HUAWEI-ACL-MIB", "hwAclUserEnable"), ("HUAWEI-ACL-MIB", "hwAclUserCount"), ("HUAWEI-ACL-MIB", "hwAclUserSrcUserGroupName"), ("HUAWEI-ACL-MIB", "hwAclUserDestUserGroupName"), ("HUAWEI-ACL-MIB", "hwAclUserSrcModeType"), ("HUAWEI-ACL-MIB", "hwAclUserDestModeType"), ("HUAWEI-ACL-MIB", "hwAclUserRowStatus"), ("HUAWEI-ACL-MIB", "hwAclCompileEnableFlag"), ("HUAWEI-ACL-MIB", "hwAclNumGroupAclNum"), ("HUAWEI-ACL-MIB", "hwAclBasicAclNum"), ("HUAWEI-ACL-MIB", "hwAclBasicSubitem"), ("HUAWEI-ACL-MIB", "hwAclAdvancedAclNum"), ("HUAWEI-ACL-MIB", "hwAclAdvancedSubitem"), ("HUAWEI-ACL-MIB", "hwAclIfAclNum"), ("HUAWEI-ACL-MIB", "hwAclIfSubitem"), ("HUAWEI-ACL-MIB", "hwAclUserAclNum"), ("HUAWEI-ACL-MIB", "hwAclUserSubitem"), ("HUAWEI-ACL-MIB", "hwAclUserVrfName"), ("HUAWEI-ACL-MIB", "hwAclUserTcpSyncFlag"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameEncapType"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameDoubleTag"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameVlanId"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameVlanIdMask"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameCVlanId"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameCVlanIdMask"), ("HUAWEI-ACL-MIB", "hwAclAppliedStatMode"), ("HUAWEI-ACL-MIB", "hwAclAppliedStatCount"), ("HUAWEI-ACL-MIB", "hwAclAppliedLimitCir"), ("HUAWEI-ACL-MIB", "hwAclAppliedLimitPir"), ("HUAWEI-ACL-MIB", "hwAclAppliedLimitCbs"), ("HUAWEI-ACL-MIB", "hwAclAppliedLimitPbs"), ("HUAWEI-ACL-MIB", "hwAclAppliedLimitGreenAction"), ("HUAWEI-ACL-MIB", "hwAclAppliedLimitGreenValue"), ("HUAWEI-ACL-MIB", "hwAclAppliedLimitYellowAction"), ("HUAWEI-ACL-MIB", "hwAclAppliedLimitYellowValue"), ("HUAWEI-ACL-MIB", "hwAclAppliedLimitRedAction"), ("HUAWEI-ACL-MIB", "hwAclAppliedLimitRedValue"), ("HUAWEI-ACL-MIB", "hwAclAppliedMirrObservedPort"), ("HUAWEI-ACL-MIB", "hwAclAppliedMirrRspanVlan"), ("HUAWEI-ACL-MIB", "hwAclAppliedRedirectIfIndex"), ("HUAWEI-ACL-MIB", "hwAclAppliedRedirectIpAddr"), ("HUAWEI-ACL-MIB", "hwAclAppliedRedirectIpv6Addr"), ("HUAWEI-ACL-MIB", "hwAclAppliedRemarkVlan"), ("HUAWEI-ACL-MIB", "hwAclAppliedRemarkCVlan"), ("HUAWEI-ACL-MIB", "hwAclAppliedRemark8021p"), ("HUAWEI-ACL-MIB", "hwAclAppliedRemarkDscp"), ("HUAWEI-ACL-MIB", "hwAclAppliedRemarkIpPre"), ("HUAWEI-ACL-MIB", "hwAclAppliedRemarkLocalPre"), ("HUAWEI-ACL-MIB", "hwAclAppliedRemarkMacAddr"), ("HUAWEI-ACL-MIB", "hwAclAppliedRowStatus"), ("HUAWEI-ACL-MIB", "hwAclCompileNumGroupStatus"), ("HUAWEI-ACL-MIB", "hwAclNumGroupStep"), ("HUAWEI-ACL-MIB", "hwAclNumGroupDescription"), ("HUAWEI-ACL-MIB", "hwAclNumGroupCountClear"), ("HUAWEI-ACL-MIB", "hwAclNumGroupRowStatus"), ("HUAWEI-ACL-MIB", "hwAclBasicVrfName"), ("HUAWEI-ACL-MIB", "hwAclAdvancedVrfName"), ("HUAWEI-ACL-MIB", "hwAclIpv6BasicAct"), ("HUAWEI-ACL-MIB", "hwAclIpv6BasicSrcIp"), ("HUAWEI-ACL-MIB", "hwAclIpv6BasicSrcPrefix"), ("HUAWEI-ACL-MIB", "hwAclIpv6BasicTimeRangeIndex"), ("HUAWEI-ACL-MIB", "hwAclIpv6BasicFragment"), ("HUAWEI-ACL-MIB", "hwAclIpv6BasicLog"), ("HUAWEI-ACL-MIB", "hwAclIpv6BasicEnable"), ("HUAWEI-ACL-MIB", "hwAclIpv6BasicCount"), ("HUAWEI-ACL-MIB", "hwAclIpv6BasicVrfName"), ("HUAWEI-ACL-MIB", "hwAclIpv6BasicRowStatus"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedAct"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedProtocol"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedSrcIp"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedSrcPrefix"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedSrcOp"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedSrcPort1"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedSrcPort2"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedDestIp"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedDestPrefix"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedDestOp"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedDestPort1"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedDestPort2"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedPrecedence"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedTos"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedDscp"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedEstablish"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedTimeRangeIndex"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedIcmpType"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedIcmpCode"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedFragment"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedLog"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedEnable"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedCount"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedVrfName"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedRowStatus"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedProtocolNew"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameAct"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameType"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameTypeMask"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameSrcMac"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameSrcMacMask"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameDstMac"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameDstMacMask"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameTimeRangeIndex"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameLog"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameEnable"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameCount"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameRowStatus"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameRule8021p"), ("HUAWEI-ACL-MIB", "hwAclEthernetFrameRuleCVlan8021p"), ("HUAWEI-ACL-MIB", "hwAclIpv6NumGroupMatchOrder"), ("HUAWEI-ACL-MIB", "hwAclIpv6NumGroupSubitemNum"), ("HUAWEI-ACL-MIB", "hwAclIpv6NumGroupCountClear"), ("HUAWEI-ACL-MIB", "hwAclIpv6NumGroupRowStatus"), ("HUAWEI-ACL-MIB", "hwAclIpv6NumGroupAclName"), ("HUAWEI-ACL-MIB", "hwAclIpv6IfAct"), ("HUAWEI-ACL-MIB", "hwAclIpv6IfIndex"), ("HUAWEI-ACL-MIB", "hwAclIpv6IfAny"), ("HUAWEI-ACL-MIB", "hwAclIpv6IfTimeRangeIndex"), ("HUAWEI-ACL-MIB", "hwAclIpv6IfLog"), ("HUAWEI-ACL-MIB", "hwAclIpv6IfEnable"), ("HUAWEI-ACL-MIB", "hwAclIpv6IfCount"), ("HUAWEI-ACL-MIB", "hwAclIpv6IfRowStatus"), ("HUAWEI-ACL-MIB", "hwAclMplsAct"), ("HUAWEI-ACL-MIB", "hwAclMplsExp1"), ("HUAWEI-ACL-MIB", "hwAclMplsExp2"), ("HUAWEI-ACL-MIB", "hwAclMplsExp3"), ("HUAWEI-ACL-MIB", "hwAclMplsExp4"), ("HUAWEI-ACL-MIB", "hwAclMplsLabel1"), ("HUAWEI-ACL-MIB", "hwAclMplsLabel2"), ("HUAWEI-ACL-MIB", "hwAclMplsLabel3"), ("HUAWEI-ACL-MIB", "hwAclMplsLabel4"), ("HUAWEI-ACL-MIB", "hwAclMplsTTLOP1"), ("HUAWEI-ACL-MIB", "hwAclMplsTTL1Begin"), ("HUAWEI-ACL-MIB", "hwAclMplsTTL1End"), ("HUAWEI-ACL-MIB", "hwAclMplsTTLOP2"), ("HUAWEI-ACL-MIB", "hwAclMplsTTL2Begin"), ("HUAWEI-ACL-MIB", "hwAclMplsTTL2End"), ("HUAWEI-ACL-MIB", "hwAclMplsTTLOP3"), ("HUAWEI-ACL-MIB", "hwAclMplsTTL3Begin"), ("HUAWEI-ACL-MIB", "hwAclMplsTTL3End"), ("HUAWEI-ACL-MIB", "hwAclMplsRowStatus"), ("HUAWEI-ACL-MIB", "hwAclMplsCount"), ("HUAWEI-ACL-MIB", "hwAclIpv6BasicSrcMask"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedSrcMask"), ("HUAWEI-ACL-MIB", "hwAclIpv6AdvancedDestMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAclGroup = hwAclGroup.setStatus('current')
mibBuilder.exportSymbols("HUAWEI-ACL-MIB", hwAclUserTimeRangeIndex=hwAclUserTimeRangeIndex, hwAclIfRowStatus=hwAclIfRowStatus, hwAclIpv6BasicRuleTable=hwAclIpv6BasicRuleTable, hwAclResTotalCountExceedClearTrap=hwAclResTotalCountExceedClearTrap, hwAclAppliedLimitGreenAction=hwAclAppliedLimitGreenAction, hwAclAppliedMirrRspanVlan=hwAclAppliedMirrRspanVlan, hwAclAdvancedRowStatus=hwAclAdvancedRowStatus, hwAclUserSrcWild=hwAclUserSrcWild, hwAclIpv6AdvancedDestPort2=hwAclIpv6AdvancedDestPort2, hwAclMplsLabel1=hwAclMplsLabel1, hwAclNumGroupTable=hwAclNumGroupTable, hwAclEthernetFrameVlanIdMask=hwAclEthernetFrameVlanIdMask, hwAclMplsTTL2Begin=hwAclMplsTTL2Begin, hwAclEthernetFrameRuleCVlan8021p=hwAclEthernetFrameRuleCVlan8021p, hwAclIpv6BasicTimeRangeIndex=hwAclIpv6BasicTimeRangeIndex, hwAclIpv6NumGroupMatchOrder=hwAclIpv6NumGroupMatchOrder, hwAclIpv6AdvancedDestIp=hwAclIpv6AdvancedDestIp, hwAclNumGroupStep=hwAclNumGroupStep, hwAclIpv6AdvancedRuleEntry=hwAclIpv6AdvancedRuleEntry, hwAclEthernetFrameRuleTable=hwAclEthernetFrameRuleTable, hwAclUserDestDomainName=hwAclUserDestDomainName, hwAclIfLog=hwAclIfLog, hwAclIfIndex=hwAclIfIndex, hwAclUserRuleTable=hwAclUserRuleTable, hwAclMplsLabel3=hwAclMplsLabel3, hwAclUserRuleEntry=hwAclUserRuleEntry, hwAclIpv6AdvancedFragment=hwAclIpv6AdvancedFragment, hwAclEthernetFrameTimeRangeIndex=hwAclEthernetFrameTimeRangeIndex, hwAclIpv6AdvancedSrcOp=hwAclIpv6AdvancedSrcOp, hwAclIpv6AdvancedSubitem=hwAclIpv6AdvancedSubitem, hwAclAdvancedSrcPort2=hwAclAdvancedSrcPort2, hwAclAdvancedDscp=hwAclAdvancedDscp, hwAclAdvancedTcpSyncFlag=hwAclAdvancedTcpSyncFlag, hwAclMplsRowStatus=hwAclMplsRowStatus, hwAclUserDestPort1=hwAclUserDestPort1, hwAclIpv6AdvancedProtocolNew=hwAclIpv6AdvancedProtocolNew, hwAclUserDestWild=hwAclUserDestWild, hwAclIpv6NumGroupAclName=hwAclIpv6NumGroupAclName, hwAclAdvancedSubitem=hwAclAdvancedSubitem, hwAclMplsRuleTable=hwAclMplsRuleTable, hwAclDomainNameConfigRowStatus=hwAclDomainNameConfigRowStatus, hwAclIpv6BasicVrfName=hwAclIpv6BasicVrfName, hwAclAppliedLimitYellowAction=hwAclAppliedLimitYellowAction, hwAclUserDestIp=hwAclUserDestIp, hwAclAdvancedDestPoolName=hwAclAdvancedDestPoolName, hwAclIpv6AdvancedLog=hwAclIpv6AdvancedLog, hwAclUserCount=hwAclUserCount, hwAclAppliedTable=hwAclAppliedTable, hwAclAppliedScopeType=hwAclAppliedScopeType, hwAclIpv6AdvancedRowStatus=hwAclIpv6AdvancedRowStatus, hwAclAdvancedTimeRangeIndex=hwAclAdvancedTimeRangeIndex, hwAclMplsExp4=hwAclMplsExp4, hwAclEthernetFrameDoubleTag=hwAclEthernetFrameDoubleTag, hwAclUserIcmpType=hwAclUserIcmpType, hwAclIfEnable=hwAclIfEnable, hwAclEthernetFrameVlanId=hwAclEthernetFrameVlanId, hwAclAdvancedAclNum=hwAclAdvancedAclNum, hwAclIfRuleTable=hwAclIfRuleTable, hwAclIpv6AdvancedTos=hwAclIpv6AdvancedTos, hwAclUserDestModeType=hwAclUserDestModeType, hwAclMibConformance=hwAclMibConformance, hwAclAdvancedCount=hwAclAdvancedCount, hwAclIpv6AdvancedSrcMask=hwAclIpv6AdvancedSrcMask, hwAclIpv6BasicSubitem=hwAclIpv6BasicSubitem, hwAclBasicDescription=hwAclBasicDescription, hwAclUserIcmpCode=hwAclUserIcmpCode, hwAclBasicVrfName=hwAclBasicVrfName, hwAclMplsAct=hwAclMplsAct, hwAclIpv6NumGroupEntry=hwAclIpv6NumGroupEntry, hwAclEthernetFrameDescription=hwAclEthernetFrameDescription, hwAclEthernetFrameRowStatus=hwAclEthernetFrameRowStatus, hwAclUserTos=hwAclUserTos, hwAclAppliedLimitCir=hwAclAppliedLimitCir, hwAclAdvancedSrcOp=hwAclAdvancedSrcOp, hwAclDomainID=hwAclDomainID, hwAclAppliedStatCount=hwAclAppliedStatCount, hwAclAppliedLimitRedAction=hwAclAppliedLimitRedAction, hwAclBasicRowStatus=hwAclBasicRowStatus, hwAclEthernetFrameLog=hwAclEthernetFrameLog, hwAclMibGroups=hwAclMibGroups, hwAclIfCount=hwAclIfCount, hwAclEthernetFrameSubitem=hwAclEthernetFrameSubitem, hwAclIpv6BasicFragment=hwAclIpv6BasicFragment, hwAclEthernetFrameSrcMacMask=hwAclEthernetFrameSrcMacMask, hwAclNumGroupRowStatus=hwAclNumGroupRowStatus, hwAclIpv6AdvancedVrfName=hwAclIpv6AdvancedVrfName, hwAclIpv6AdvancedTimeRangeIndex=hwAclIpv6AdvancedTimeRangeIndex, hwAclAppliedLimitPir=hwAclAppliedLimitPir, hwAclMplsTTL2End=hwAclMplsTTL2End, hwAclUserSrcUserGroupNum=hwAclUserSrcUserGroupNum, hwAclMibCompliance=hwAclMibCompliance, hwAclIpv6AdvancedSrcPrefix=hwAclIpv6AdvancedSrcPrefix, hwAclAdvancedAct=hwAclAdvancedAct, hwAclAdvancedVni=hwAclAdvancedVni, hwAclEthernetFrameDstMac=hwAclEthernetFrameDstMac, hwAclAppliedEntry=hwAclAppliedEntry, hwAclBasicSubitem=hwAclBasicSubitem, hwAclAdvancedRuleEntry=hwAclAdvancedRuleEntry, hwAclAdvancedPktLenEnd=hwAclAdvancedPktLenEnd, hwAclUserSrcPort1=hwAclUserSrcPort1, hwAclAdvancedVrfName=hwAclAdvancedVrfName, hwAclEthernetFrameCVlanIdMask=hwAclEthernetFrameCVlanIdMask, hwAclIpv6BasicSrcMask=hwAclIpv6BasicSrcMask, hwAclEthernetFrameCount=hwAclEthernetFrameCount, hwAclIpv6NumGroupAclNum=hwAclIpv6NumGroupAclNum, hwAclIfRuleEntry=hwAclIfRuleEntry, hwAclAdvancedSrcIp=hwAclAdvancedSrcIp, hwAclAppliedScopeIndex=hwAclAppliedScopeIndex, hwAclCompileEnableFlag=hwAclCompileEnableFlag, hwAclMplsSubitem=hwAclMplsSubitem, hwAclAdvancedProtocol=hwAclAdvancedProtocol, hwAclAppliedAclNum=hwAclAppliedAclNum, hwAclIpv6IfRuleEntry=hwAclIpv6IfRuleEntry, hwAclIpv6IfTimeRangeIndex=hwAclIpv6IfTimeRangeIndex, hwAclIpv6AdvancedCount=hwAclIpv6AdvancedCount, hwAclAdvancedTtlOp=hwAclAdvancedTtlOp, hwAclBasicAclNum=hwAclBasicAclNum, hwAclIfAct=hwAclIfAct, hwAclEthernetFrameAclNum=hwAclEthernetFrameAclNum, hwAclCompileNumGroupStatus=hwAclCompileNumGroupStatus, hwAclTrapsDefine=hwAclTrapsDefine, hwAclBasicTimeRangeIndex=hwAclBasicTimeRangeIndex, hwAclAppliedRemarkMacAddr=hwAclAppliedRemarkMacAddr, hwAclResStage=hwAclResStage, hwAcl=hwAcl, hwAclUserSrcModeType=hwAclUserSrcModeType, hwAclCompileNumGroupEntry=hwAclCompileNumGroupEntry, hwAclIpv6IfAny=hwAclIpv6IfAny, hwAclAdvancedTtlExpireEnd=hwAclAdvancedTtlExpireEnd, hwAclGroup=hwAclGroup, hwAclAdvancedEstablish=hwAclAdvancedEstablish, hwAclAdvancedIcmpCode=hwAclAdvancedIcmpCode, hwAclIpv6BasicRuleEntry=hwAclIpv6BasicRuleEntry, hwAclMplsTTLOP3=hwAclMplsTTLOP3, hwAclEthernetFrameTypeMask=hwAclEthernetFrameTypeMask, hwAclIpv6NumGroupCountClear=hwAclIpv6NumGroupCountClear, hwAclMplsExp3=hwAclMplsExp3, hwAclAdvancedIgmpType=hwAclAdvancedIgmpType, hwAclAdvancedPktLenOp=hwAclAdvancedPktLenOp, hwAclUserProtocol=hwAclUserProtocol, hwAclIpv6IfAclNum=hwAclIpv6IfAclNum, hwAclUserDscp=hwAclUserDscp, hwAclEthernetFrameSrcMac=hwAclEthernetFrameSrcMac, hwAclMplsTTL3Begin=hwAclMplsTTL3Begin, hwAclIpv6AdvancedDestPort1=hwAclIpv6AdvancedDestPort1, hwAclIpv6AdvancedDestMask=hwAclIpv6AdvancedDestMask, hwAclAdvancedRuleTable=hwAclAdvancedRuleTable, hwAclAppliedRemark8021p=hwAclAppliedRemark8021p, hwAclResourceTrapsEntry=hwAclResourceTrapsEntry, hwAclDomainNameConfigTable=hwAclDomainNameConfigTable, hwAclAdvancedLog=hwAclAdvancedLog, hwAclAppliedLimitRedValue=hwAclAppliedLimitRedValue, hwAclUserSrcIp=hwAclUserSrcIp, hwAclAdvancedDestOp=hwAclAdvancedDestOp, hwAclAdvancedDescription=hwAclAdvancedDescription, hwAclMplsExp2=hwAclMplsExp2, hwAclResTotalCountExceedTrap=hwAclResTotalCountExceedTrap, hwAclResourceTrapsGroup=hwAclResourceTrapsGroup, hwAclMibCompliances=hwAclMibCompliances, hwAclAppliedRowStatus=hwAclAppliedRowStatus, hwAclBasicLog=hwAclBasicLog, hwAclDomainName=hwAclDomainName, hwAclAdvancedTcpFlagMask=hwAclAdvancedTcpFlagMask, hwAclAdvancedDestPort1=hwAclAdvancedDestPort1, hwAclUserLog=hwAclUserLog, hwAclAdvancedPktLenBegin=hwAclAdvancedPktLenBegin, hwAclIpv6AdvancedDestOp=hwAclIpv6AdvancedDestOp, hwAclIpv6NumGroupAclType=hwAclIpv6NumGroupAclType, hwAclNumGroupAclName=hwAclNumGroupAclName, hwAclAdvancedSrcPort1=hwAclAdvancedSrcPort1, hwAclResLimit=hwAclResLimit, hwAclAppliedSubitem=hwAclAppliedSubitem, hwAclEthernetFrameEncapType=hwAclEthernetFrameEncapType, hwAclEthernetFrameCVlanId=hwAclEthernetFrameCVlanId, hwAclUserFragments=hwAclUserFragments, hwAclAdvancedFragments=hwAclAdvancedFragments, hwAclTraps=hwAclTraps, hwAclMplsRuleEntry=hwAclMplsRuleEntry, hwAclMplsTTLOP1=hwAclMplsTTLOP1, hwAclBasicSrcWild=hwAclBasicSrcWild, hwAclIpv6AdvancedPrecedence=hwAclIpv6AdvancedPrecedence, hwAclAppliedMirrObservedPort=hwAclAppliedMirrObservedPort, hwAclAppliedRedirectIfIndex=hwAclAppliedRedirectIfIndex, hwAclIpv6BasicAclNum=hwAclIpv6BasicAclNum, hwAclIpv6BasicLog=hwAclIpv6BasicLog, hwAclIpv6IfLog=hwAclIpv6IfLog, hwAclResourceTrapsTable=hwAclResourceTrapsTable, hwAclAdvancedDestWild=hwAclAdvancedDestWild, hwAclIpv6NumGroupSubitemNum=hwAclIpv6NumGroupSubitemNum, hwAclIpv6AdvancedAct=hwAclIpv6AdvancedAct, hwAclEthernetFrameRuleEntry=hwAclEthernetFrameRuleEntry, hwAclIpv6AdvancedProtocol=hwAclIpv6AdvancedProtocol, hwAclAdvancedSrcWild=hwAclAdvancedSrcWild, hwAclBasicCount=hwAclBasicCount, hwAclUserDestPort2=hwAclUserDestPort2, hwAclUserSrcUserGroupName=hwAclUserSrcUserGroupName, hwAclMplsTTL3End=hwAclMplsTTL3End, hwAclMplsCount=hwAclMplsCount, hwAclMplsLabel2=hwAclMplsLabel2, hwAclNumGroupAclType=hwAclNumGroupAclType, hwAclIpv6NumGroupStep=hwAclIpv6NumGroupStep, hwAclIpv6AdvancedRuleTable=hwAclIpv6AdvancedRuleTable, hwAclAppliedRemarkIpPre=hwAclAppliedRemarkIpPre, hwAclUserPrecedence=hwAclUserPrecedence, hwAclAppliedLimitGreenValue=hwAclAppliedLimitGreenValue, hwAclResThresholdExceedTrap=hwAclResThresholdExceedTrap, hwAclNumGroupSubitemNum=hwAclNumGroupSubitemNum, hwAclIpv6IfEnable=hwAclIpv6IfEnable, hwAclNumGroupDescription=hwAclNumGroupDescription, hwAclUserSrcOp=hwAclUserSrcOp, hwAclIpv6AdvancedAclNum=hwAclIpv6AdvancedAclNum, hwAclMplsAclNum=hwAclMplsAclNum, hwAclAdvancedIcmpType=hwAclAdvancedIcmpType, hwAclIpv6AdvancedEstablish=hwAclIpv6AdvancedEstablish, hwAclUserDestUserGroupNum=hwAclUserDestUserGroupNum, hwAclUserDestOp=hwAclUserDestOp, hwAclMibObjects=hwAclMibObjects, hwAclIpv6IfRuleTable=hwAclIpv6IfRuleTable, hwAclTrapOid=hwAclTrapOid, hwAclIpv6NumGroupTable=hwAclIpv6NumGroupTable, hwAclNumGroupCountClear=hwAclNumGroupCountClear, hwAclBasicRuleEntry=hwAclBasicRuleEntry, hwAclIpv6NumGroupRowStatus=hwAclIpv6NumGroupRowStatus, hwAclIpv6AdvancedSrcPort2=hwAclIpv6AdvancedSrcPort2, hwAclMplsTTL1End=hwAclMplsTTL1End, hwAclIpv6AdvancedSrcIp=hwAclIpv6AdvancedSrcIp, hwAclEthernetFrameDstMacMask=hwAclEthernetFrameDstMacMask, hwAclNumGroupEntry=hwAclNumGroupEntry, hwAclAppliedOperation=hwAclAppliedOperation, hwAclAdvancedPrecedence=hwAclAdvancedPrecedence, hwAclIpv6BasicEnable=hwAclIpv6BasicEnable, hwAclCompileNumGroupTable=hwAclCompileNumGroupTable, hwAclMplsExp1=hwAclMplsExp1, hwAclAppliedSubitem2=hwAclAppliedSubitem2, hwAclAdvancedEnable=hwAclAdvancedEnable, hwAclUserAclNum=hwAclUserAclNum, hwAclIpv6IfCount=hwAclIpv6IfCount, hwAclAdvancedDestIp=hwAclAdvancedDestIp, hwAclIpv6BasicDescription=hwAclIpv6BasicDescription, hwAclUserEstablish=hwAclUserEstablish, hwAclEthernetFrameType=hwAclEthernetFrameType, hwAclIpv6AdvancedIcmpType=hwAclIpv6AdvancedIcmpType, hwAclUserVrfName=hwAclUserVrfName, hwAclUserRowStatus=hwAclUserRowStatus, hwAclAppliedAclNum2=hwAclAppliedAclNum2, hwAclAppliedIsIPv6Acl=hwAclAppliedIsIPv6Acl, hwAclResourceTrapsGroups=hwAclResourceTrapsGroups, hwAclUserEnable=hwAclUserEnable, hwAclAppliedLimitPbs=hwAclAppliedLimitPbs, hwAclNumGroupAclNum=hwAclNumGroupAclNum, hwAclUserSrcPort2=hwAclUserSrcPort2, hwAclIpv6BasicSrcPrefix=hwAclIpv6BasicSrcPrefix, hwAclIpv6AdvancedDescription=hwAclIpv6AdvancedDescription, hwAclBasicEnable=hwAclBasicEnable)
mibBuilder.exportSymbols("HUAWEI-ACL-MIB", hwAclNumGroupMatchOrder=hwAclNumGroupMatchOrder, hwAclIpv6AdvancedIcmpCode=hwAclIpv6AdvancedIcmpCode, hwAclIpv6BasicAct=hwAclIpv6BasicAct, hwAclIpv6AdvancedDscp=hwAclIpv6AdvancedDscp, hwAclAdvancedTos=hwAclAdvancedTos, hwAclIpv6AdvancedDestPrefix=hwAclIpv6AdvancedDestPrefix, hwAclAppliedStatMode=hwAclAppliedStatMode, hwAclIfAclNum=hwAclIfAclNum, hwAclMplsLabel4=hwAclMplsLabel4, hwAclIfAny=hwAclIfAny, hwAclIpv6AdvancedEnable=hwAclIpv6AdvancedEnable, hwAclMplsTTL1Begin=hwAclMplsTTL1Begin, hwAclAppliedLimitCbs=hwAclAppliedLimitCbs, hwAclAdvancedSrcPoolName=hwAclAdvancedSrcPoolName, hwAclIpv6IfSubitem=hwAclIpv6IfSubitem, hwAclIpv6IfAct=hwAclIpv6IfAct, hwAclResThresholdExceedClearTrap=hwAclResThresholdExceedClearTrap, hwAclBasicSrcIp=hwAclBasicSrcIp, hwAclAppliedRemarkLocalPre=hwAclAppliedRemarkLocalPre, hwAclIpv6NumGroupDescription=hwAclIpv6NumGroupDescription, hwAclUserTcpSyncFlag=hwAclUserTcpSyncFlag, hwAclAppliedRemarkCVlan=hwAclAppliedRemarkCVlan, hwAclUserSubitem=hwAclUserSubitem, hwAclResSlotStr=hwAclResSlotStr, PYSNMP_MODULE_ID=hwAcl, hwAclBasicAct=hwAclBasicAct, hwAclEthernetFrameAct=hwAclEthernetFrameAct, hwAclAppliedDirection=hwAclAppliedDirection, hwAclBasicRuleTable=hwAclBasicRuleTable, hwAclIpv6AdvancedSrcPort1=hwAclIpv6AdvancedSrcPort1, hwAclMplsTTLOP2=hwAclMplsTTLOP2, hwAclDomainNameConfigEntry=hwAclDomainNameConfigEntry, hwAclEthernetFrameRule8021p=hwAclEthernetFrameRule8021p, hwAclUserDestUserGroupName=hwAclUserDestUserGroupName, hwAclUserAct=hwAclUserAct, hwAclAppliedRemarkDscp=hwAclAppliedRemarkDscp, hwAclIfSubitem=hwAclIfSubitem, hwAclEthernetFrameEnable=hwAclEthernetFrameEnable, hwAclIpv6IfRowStatus=hwAclIpv6IfRowStatus, hwAclAdvancedProtocolNew=hwAclAdvancedProtocolNew, hwAclAdvancedTtlExpire=hwAclAdvancedTtlExpire, hwAclIpv6BasicSrcIp=hwAclIpv6BasicSrcIp, hwAclBasicFragments=hwAclBasicFragments, hwAclIpv6BasicRowStatus=hwAclIpv6BasicRowStatus, hwAclIfTimeRangeIndex=hwAclIfTimeRangeIndex, hwAclMibTrap=hwAclMibTrap, hwAclAdvancedDestPort2=hwAclAdvancedDestPort2, hwAclAppliedRedirectIpv6Addr=hwAclAppliedRedirectIpv6Addr, hwAclIpv6IfIndex=hwAclIpv6IfIndex, hwAclAppliedLimitYellowValue=hwAclAppliedLimitYellowValue, hwAclIpv6BasicCount=hwAclIpv6BasicCount, hwAclAppliedRemarkVlan=hwAclAppliedRemarkVlan, hwAclAppliedRedirectIpAddr=hwAclAppliedRedirectIpAddr)
