#
# PySNMP MIB module ITOUCH-REPEATER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-REPEATER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:47:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
TypedAddress, iTouch = mibBuilder.importSymbols("ITOUCH-MIB", "TypedAddress", "iTouch")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Integer32, Bits, TimeTicks, IpAddress, Unsigned32, ObjectIdentity, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, NotificationType, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "Bits", "TimeTicks", "IpAddress", "Unsigned32", "ObjectIdentity", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "NotificationType", "MibIdentifier", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hubDeprecated = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 9))
xRepeater = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17))
xRepeaterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 1))
xRepeaterGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 2))
xRepeaterPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 3))
xRepeaterSlotInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 4))
xRepeaterSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 5))
xRepeaterRepeater = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 6))
xRepeaterRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 7))
class Segment(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("a", 1), ("b", 2), ("c", 3), ("d", 4), ("e", 5), ("f", 6), ("g", 7), ("h", 8), ("i", 9), ("j", 10), ("k", 11), ("l", 12), ("m", 13), ("n", 14), ("o", 15), ("p", 16), ("q", 17), ("r", 18), ("s", 19), ("t", 20), ("u", 21), ("v", 22), ("w", 23), ("x", 24), ("y", 25), ("z", 26), ("disabled", 27), ("notApplicable", 28))

class Repeater(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 1), ("repeater1", 2), ("repeater2", 3), ("repeater3", 4))

repeaterAccessViolation = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("disable", 2), ("trap", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterAccessViolation.setStatus('mandatory')
repeaterMyGroup = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterMyGroup.setStatus('mandatory')
repeaterFifoOverflows = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterFifoOverflows.setStatus('deprecated')
repeaterLEDDisplay = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activity", 1), ("collisions", 2))).clone('activity')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterLEDDisplay.setStatus('mandatory')
repeaterReports = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterReports.setStatus('deprecated')
repeaterHealthTrap = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterHealthTrap.setStatus('mandatory')
repeaterStatusChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterStatusChangeTrap.setStatus('mandatory')
repeaterAccessViolationTrap = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterAccessViolationTrap.setStatus('mandatory')
repeaterIntegrityLossTrap = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterIntegrityLossTrap.setStatus('mandatory')
repeaterRedundancyPathChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathChangeTrap.setStatus('mandatory')
repeaterGroupTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 2, 1), )
if mibBuilder.loadTexts: repeaterGroupTable.setStatus('mandatory')
repeaterGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterGroupIndex"))
if mibBuilder.loadTexts: repeaterGroupEntry.setStatus('mandatory')
repeaterGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupIndex.setStatus('mandatory')
repeaterGroupSQE = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupSQE.setStatus('deprecated')
repeaterGroupJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupJabbers.setStatus('deprecated')
repeaterGroupSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 4), Segment()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterGroupSegment.setStatus('deprecated')
repeaterGroupSecurityLock = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterGroupSecurityLock.setStatus('mandatory')
repeaterGroupIOCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupIOCardType.setStatus('mandatory')
repeaterGroupIOCardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupIOCardFirmwareVersion.setStatus('mandatory')
repeaterGroupIOCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("loadRequested", 1), ("loading", 2), ("dumpRequested", 3), ("dumping", 4), ("paramRequested", 5), ("paramLoading", 6), ("running", 7), ("initializing", 8), ("attended", 9), ("internal10", 10), ("internal11", 11), ("inhibited", 12), ("maxserverCard", 13), ("invalidConfigStorage", 14), ("securityLockdown", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupIOCardOperStatus.setStatus('mandatory')
repeaterGroupManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minimal", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupManagement.setStatus('mandatory')
repeaterGroupRepeaterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupRepeaterNumber.setStatus('mandatory')
repeaterGroupRepeaterHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupRepeaterHardwareVersion.setStatus('mandatory')
repeaterGroupManagerRepeater = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 12), Repeater()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterGroupManagerRepeater.setStatus('mandatory')
repeaterGroupFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupFifoErrors.setStatus('mandatory')
repeaterGroupCpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupCpuUtilization.setStatus('mandatory')
repeaterGroupMemoryUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupMemoryUtilization.setStatus('mandatory')
repeaterGroupAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupAlarmCount.setStatus('mandatory')
repeaterPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 3, 1), )
if mibBuilder.loadTexts: repeaterPortTable.setStatus('mandatory')
repeaterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterPortGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterPortIndex"))
if mibBuilder.loadTexts: repeaterPortEntry.setStatus('mandatory')
repeaterPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortGroupIndex.setStatus('mandatory')
repeaterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortIndex.setStatus('mandatory')
repeaterPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortName.setStatus('mandatory')
repeaterPortAutoPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAutoPolarity.setStatus('mandatory')
repeaterPortPolarityDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reversed", 1), ("normal", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortPolarityDirection.setStatus('mandatory')
repeaterPortPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortPulse.setStatus('mandatory')
repeaterPortPulseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notDetected", 1), ("detected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortPulseStatus.setStatus('mandatory')
repeaterPortPulseLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortPulseLosses.setStatus('mandatory')
repeaterPortDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortDistance.setStatus('mandatory')
repeaterPortSofMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortSofMissing.setStatus('mandatory')
repeaterPortMCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortMCVs.setStatus('mandatory')
repeaterPortZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortZero.setStatus('mandatory')
repeaterPortSinceZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortSinceZero.setStatus('mandatory')
repeaterPortAccessAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessAction.setStatus('mandatory')
repeaterPortAccessState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("notDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortAccessState.setStatus('mandatory')
repeaterPortAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("tenBaseT", 1), ("aui", 2), ("foirl", 3), ("mac", 4), ("lanbus", 5), ("tenBase2", 6), ("tenBaseFL", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortAccessType.setStatus('mandatory')
repeaterPortAccessAllStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessAllStatus.setStatus('mandatory')
repeaterPortPortLastViolationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortPortLastViolationAddress.setStatus('mandatory')
repeaterPortPortAddressViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortPortAddressViolations.setStatus('mandatory')
repeaterPortSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 20), Segment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortSegment.setStatus('mandatory')
repeaterPortAccessLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("single", 2), ("continuous", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessLearn.setStatus('mandatory')
repeaterPortEthernetRepeater = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("repeater1", 1), ("repeater2", 2), ("repeater3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortEthernetRepeater.setStatus('mandatory')
repeaterPortRepeatersAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortRepeatersAllowed.setStatus('mandatory')
repeaterPortGlobalSecurityAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 24), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortGlobalSecurityAddress.setStatus('mandatory')
repeaterPortGlobalAddressChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortGlobalAddressChanges.setStatus('mandatory')
repeaterPortPercentUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortPercentUtilization.setStatus('mandatory')
repeaterPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 3, 2), )
if mibBuilder.loadTexts: repeaterPortAccessTable.setStatus('mandatory')
repeaterPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 3, 2, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterPortAccessGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterPortAccessPortIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterPortAccessAddress"))
if mibBuilder.loadTexts: repeaterPortAccessEntry.setStatus('mandatory')
repeaterPortAccessGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortAccessGroupIndex.setStatus('mandatory')
repeaterPortAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortAccessPortIndex.setStatus('mandatory')
repeaterPortAccessAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortAccessAddress.setStatus('mandatory')
repeaterPortAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessStatus.setStatus('mandatory')
repeaterPortAccessGroupIndexShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessGroupIndexShadow.setStatus('mandatory')
repeaterPortAccessPortIndexShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessPortIndexShadow.setStatus('mandatory')
repeaterPortAccessAddressShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 3, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessAddressShadow.setStatus('mandatory')
repeaterPortAccessStatusShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2))).clone('ready')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessStatusShadow.setStatus('mandatory')
repeaterPort2Table = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 3, 7), )
if mibBuilder.loadTexts: repeaterPort2Table.setStatus('mandatory')
repeaterPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterPortGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterPortIndex"))
if mibBuilder.loadTexts: repeaterPort2Entry.setStatus('mandatory')
repeaterPort2RmonOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonOctets.setStatus('mandatory')
repeaterPort2RmonPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts.setStatus('mandatory')
repeaterPort2RmonBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonBroadcastPkts.setStatus('mandatory')
repeaterPort2RmonMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonMulticastPkts.setStatus('mandatory')
repeaterPort2RmonCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonCRCAlignErrors.setStatus('mandatory')
repeaterPort2RmonPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts64Octets.setStatus('mandatory')
repeaterPort2RmonPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts65to127Octets.setStatus('mandatory')
repeaterPort2RmonPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts128to255Octets.setStatus('mandatory')
repeaterPort2RmonPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts256to511Octets.setStatus('mandatory')
repeaterPort2RmonPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts512to1023Octets.setStatus('mandatory')
repeaterPort2RmonPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts1024to1518Octets.setStatus('mandatory')
repeaterPort2TrafficRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2TrafficRatio.setStatus('mandatory')
repeaterPort2CollisionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2CollisionRatio.setStatus('mandatory')
repeaterPort2ErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2ErrorRatio.setStatus('mandatory')
repeaterPort2BroadcastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2BroadcastRatio.setStatus('mandatory')
repeaterPort2MulticastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2MulticastRatio.setStatus('mandatory')
repeaterPort2UnicastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2UnicastRatio.setStatus('mandatory')
repeaterSlotSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 4, 1), )
if mibBuilder.loadTexts: repeaterSlotSegmentTable.setStatus('deprecated')
repeaterSlotSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 4, 1, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterSlotIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterSlotSegment"))
if mibBuilder.loadTexts: repeaterSlotSegmentEntry.setStatus('deprecated')
repeaterSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSlotIndex.setStatus('deprecated')
repeaterSlotSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 4, 1, 1, 2), Segment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSlotSegment.setStatus('deprecated')
repeaterSlotSegmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSlotSegmentStatus.setStatus('deprecated')
repeaterSecurityState = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityState.setStatus('mandatory')
repeaterSecurityPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 5, 2), )
if mibBuilder.loadTexts: repeaterSecurityPortTable.setStatus('mandatory')
repeaterSecurityPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 5, 2, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterPortGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterPortIndex"))
if mibBuilder.loadTexts: repeaterSecurityPortEntry.setStatus('mandatory')
repeaterSecurityPortUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("jam", 1), ("allow", 2))).clone('jam')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityPortUnicast.setStatus('mandatory')
repeaterSecurityPortMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("jam", 1), ("allow", 2))).clone('jam')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityPortMulticast.setStatus('mandatory')
repeaterSecurityPortAllStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityPortAllStatus.setStatus('mandatory')
repeaterSecurityPortSecurityLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("single", 2), ("continuous", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityPortSecurityLearn.setStatus('mandatory')
repeaterSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 5, 3), )
if mibBuilder.loadTexts: repeaterSecurityTable.setStatus('mandatory')
repeaterSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 5, 3, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterSecurityGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterSecurityPortIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterSecurityAddress"))
if mibBuilder.loadTexts: repeaterSecurityEntry.setStatus('mandatory')
repeaterSecurityGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSecurityGroupIndex.setStatus('mandatory')
repeaterSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSecurityPortIndex.setStatus('mandatory')
repeaterSecurityAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSecurityAddress.setStatus('mandatory')
repeaterSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityStatus.setStatus('mandatory')
repeaterSecurityAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("jam", 1), ("allow", 2))).clone('jam')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityAction.setStatus('mandatory')
repeaterSecurityGroupIndexShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityGroupIndexShadow.setStatus('mandatory')
repeaterSecurityPortIndexShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityPortIndexShadow.setStatus('mandatory')
repeaterSecurityAddressShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityAddressShadow.setStatus('mandatory')
repeaterSecurityStatusShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2))).clone('ready')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityStatusShadow.setStatus('mandatory')
repeaterSecurityGlobalAddressTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 5, 8), )
if mibBuilder.loadTexts: repeaterSecurityGlobalAddressTable.setStatus('mandatory')
repeaterSecurityGlobalAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 5, 8, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterSecurityGlobalAddress"))
if mibBuilder.loadTexts: repeaterSecurityGlobalAddressEntry.setStatus('mandatory')
repeaterSecurityGlobalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 8, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSecurityGlobalAddress.setStatus('mandatory')
repeaterSecurityGlobalAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityGlobalAddressStatus.setStatus('mandatory')
repeaterSecurityGlobalAddressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("jam", 1), ("allow", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityGlobalAddressAction.setStatus('mandatory')
repeaterSecurityGlobalDBID = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSecurityGlobalDBID.setStatus('mandatory')
repeaterSecurityGlobalSecurityAdminState = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityGlobalSecurityAdminState.setStatus('mandatory')
repeaterSecurityGlobalSecurityOperState = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("securityDisabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSecurityGlobalSecurityOperState.setStatus('mandatory')
repeaterRepeaterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 6, 1), )
if mibBuilder.loadTexts: repeaterRepeaterTable.setStatus('mandatory')
repeaterRepeaterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterRepeaterGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterRepeaterIndex"))
if mibBuilder.loadTexts: repeaterRepeaterEntry.setStatus('mandatory')
repeaterRepeaterGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterGroupIndex.setStatus('mandatory')
repeaterRepeaterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterIndex.setStatus('mandatory')
repeaterRepeaterSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 3), Segment()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRepeaterSegment.setStatus('mandatory')
repeaterRepeaterReports = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRepeaterReports.setStatus('mandatory')
repeaterRepeaterCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterCollisions.setStatus('mandatory')
repeaterRepeaterJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterJabbers.setStatus('mandatory')
repeaterRepeaterSQE = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterSQE.setStatus('mandatory')
repeaterRepeaterFifoOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterFifoOverflows.setStatus('mandatory')
repeaterRepeaterZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRepeaterZero.setStatus('mandatory')
repeaterRepeaterSinceZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterSinceZero.setStatus('mandatory')
repeaterRepeaterSegmentsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterSegmentsAllowed.setStatus('mandatory')
repeaterRepeaterTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterTotalOctets.setStatus('mandatory')
repeaterRepeaterTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterTotalFrames.setStatus('mandatory')
repeaterRepeaterPercentUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterPercentUtilization.setStatus('mandatory')
repeaterRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyState.setStatus('mandatory')
repeaterRedundancyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 7, 2), )
if mibBuilder.loadTexts: repeaterRedundancyGroupTable.setStatus('mandatory')
repeaterRedundancyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterRedundancyGroupGroupIndex"))
if mibBuilder.loadTexts: repeaterRedundancyGroupEntry.setStatus('mandatory')
repeaterRedundancyGroupGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyGroupGroupIndex.setStatus('mandatory')
repeaterRedundancyGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupStatus.setStatus('mandatory')
repeaterRedundancyGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupName.setStatus('mandatory')
repeaterRedundancyGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupAdminState.setStatus('mandatory')
repeaterRedundancyGroupTestInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 180000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupTestInterval.setStatus('mandatory')
repeaterRedundancyGroupRollbackAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupRollbackAdminState.setStatus('mandatory')
repeaterRedundancyGroupRollbackInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 180000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupRollbackInterval.setStatus('mandatory')
repeaterRedundancyGroupOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyGroupOperPath.setStatus('mandatory')
repeaterRedundancyGroupPathChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyGroupPathChanges.setStatus('mandatory')
repeaterRedundancyGroupRollbackAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyGroupRollbackAttempts.setStatus('mandatory')
repeaterRedundancyGroupZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupZero.setStatus('mandatory')
repeaterRedundancyGroupSinceZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyGroupSinceZero.setStatus('mandatory')
repeaterRedundancyGroupConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incomplete", 1), ("complete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyGroupConfigStatus.setStatus('mandatory')
repeaterRedundancyPathTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 7, 3), )
if mibBuilder.loadTexts: repeaterRedundancyPathTable.setStatus('mandatory')
repeaterRedundancyPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterRedundancyPathGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterRedundancyPathPathIndex"))
if mibBuilder.loadTexts: repeaterRedundancyPathEntry.setStatus('mandatory')
repeaterRedundancyPathGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyPathGroupIndex.setStatus('mandatory')
repeaterRedundancyPathPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyPathPathIndex.setStatus('mandatory')
repeaterRedundancyPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathStatus.setStatus('mandatory')
repeaterRedundancyPathSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathSlot.setStatus('mandatory')
repeaterRedundancyPathPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathPort.setStatus('mandatory')
repeaterRedundancyPathPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 6), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathPriority.setStatus('mandatory')
repeaterRedundancyPathActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathActivate.setStatus('mandatory')
repeaterRedundancyPathTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathTimeout.setStatus('mandatory')
repeaterRedundancyPathRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathRetryCount.setStatus('mandatory')
repeaterRedundancyPathTestAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyPathTestAttempts.setStatus('mandatory')
repeaterRedundancyPathLastTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notTested", 1), ("responded", 2), ("timeout", 3), ("noIntegrity", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyPathLastTestStatus.setStatus('mandatory')
repeaterRedundancyPathDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("null", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathDisposition.setStatus('mandatory')
repeaterRedundancyPathConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incomplete", 1), ("complete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyPathConfigStatus.setStatus('mandatory')
repeaterRedundancyPathAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathAdminState.setStatus('mandatory')
repeaterRedundancyAddressTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 7, 4), )
if mibBuilder.loadTexts: repeaterRedundancyAddressTable.setStatus('mandatory')
repeaterRedundancyAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterRedundancyAddressGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterRedundancyAddressPathIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterRedundancyAddressAddress"))
if mibBuilder.loadTexts: repeaterRedundancyAddressEntry.setStatus('mandatory')
repeaterRedundancyAddressGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyAddressGroupIndex.setStatus('mandatory')
repeaterRedundancyAddressPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyAddressPathIndex.setStatus('mandatory')
repeaterRedundancyAddressAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1, 3), TypedAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyAddressAddress.setStatus('mandatory')
repeaterRedundancyAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyAddressStatus.setStatus('mandatory')
repeaterRedundancyAddressResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyAddressResponses.setStatus('mandatory')
repeaterRedundancyAddressLastTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notTested", 1), ("responded", 2), ("timeout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyAddressLastTestStatus.setStatus('mandatory')
accessViolation = NotificationType((1, 3, 6, 1, 4, 1, 33, 17) + (0,1)).setObjects(("ITOUCH-REPEATER-MIB", "repeaterPortIndex"))
integrityLoss = NotificationType((1, 3, 6, 1, 4, 1, 33, 17) + (0,2)).setObjects(("ITOUCH-REPEATER-MIB", "repeaterPortIndex"), ("ITOUCH-REPEATER-MIB", "repeaterPortGroupIndex"))
redundancyPathChange = NotificationType((1, 3, 6, 1, 4, 1, 33, 17) + (0,3)).setObjects(("ITOUCH-REPEATER-MIB", "repeaterRedundancyGroupGroupIndex"), ("ITOUCH-REPEATER-MIB", "repeaterRedundancyGroupOperPath"))
mibBuilder.exportSymbols("ITOUCH-REPEATER-MIB", repeaterRedundancyGroupSinceZero=repeaterRedundancyGroupSinceZero, repeaterRedundancyAddressAddress=repeaterRedundancyAddressAddress, repeaterRedundancyGroupPathChanges=repeaterRedundancyGroupPathChanges, xRepeaterSecurity=xRepeaterSecurity, repeaterGroupSecurityLock=repeaterGroupSecurityLock, repeaterPortPolarityDirection=repeaterPortPolarityDirection, repeaterGroupRepeaterNumber=repeaterGroupRepeaterNumber, repeaterPortDistance=repeaterPortDistance, repeaterRepeaterSegmentsAllowed=repeaterRepeaterSegmentsAllowed, repeaterRedundancyAddressPathIndex=repeaterRedundancyAddressPathIndex, xRepeaterInfo=xRepeaterInfo, repeaterRedundancyGroupTable=repeaterRedundancyGroupTable, repeaterRedundancyGroupOperPath=repeaterRedundancyGroupOperPath, repeaterSecurityTable=repeaterSecurityTable, repeaterRedundancyPathTimeout=repeaterRedundancyPathTimeout, repeaterGroupRepeaterHardwareVersion=repeaterGroupRepeaterHardwareVersion, repeaterPort2RmonMulticastPkts=repeaterPort2RmonMulticastPkts, repeaterGroupCpuUtilization=repeaterGroupCpuUtilization, repeaterSecurityAddress=repeaterSecurityAddress, repeaterRedundancyPathEntry=repeaterRedundancyPathEntry, repeaterPortTable=repeaterPortTable, repeaterPort2UnicastRatio=repeaterPort2UnicastRatio, repeaterPort2RmonPkts1024to1518Octets=repeaterPort2RmonPkts1024to1518Octets, repeaterRedundancyState=repeaterRedundancyState, repeaterLEDDisplay=repeaterLEDDisplay, xRepeater=xRepeater, repeaterPortSinceZero=repeaterPortSinceZero, repeaterSecurityGlobalSecurityAdminState=repeaterSecurityGlobalSecurityAdminState, repeaterRepeaterIndex=repeaterRepeaterIndex, repeaterRedundancyGroupRollbackAdminState=repeaterRedundancyGroupRollbackAdminState, xRepeaterSlotInfo=xRepeaterSlotInfo, repeaterPortGlobalAddressChanges=repeaterPortGlobalAddressChanges, hubDeprecated=hubDeprecated, repeaterPort2RmonPkts128to255Octets=repeaterPort2RmonPkts128to255Octets, repeaterRedundancyAddressTable=repeaterRedundancyAddressTable, Segment=Segment, repeaterMyGroup=repeaterMyGroup, repeaterPortAccessGroupIndex=repeaterPortAccessGroupIndex, accessViolation=accessViolation, xRepeaterPortInfo=xRepeaterPortInfo, repeaterRepeaterEntry=repeaterRepeaterEntry, repeaterPortPercentUtilization=repeaterPortPercentUtilization, repeaterGroupManagement=repeaterGroupManagement, repeaterPort2RmonOctets=repeaterPort2RmonOctets, repeaterPortAccessEntry=repeaterPortAccessEntry, repeaterFifoOverflows=repeaterFifoOverflows, repeaterPortAccessStatusShadow=repeaterPortAccessStatusShadow, repeaterSecurityPortTable=repeaterSecurityPortTable, repeaterSecurityPortIndexShadow=repeaterSecurityPortIndexShadow, repeaterSecurityGlobalSecurityOperState=repeaterSecurityGlobalSecurityOperState, repeaterPortAccessGroupIndexShadow=repeaterPortAccessGroupIndexShadow, repeaterSlotSegmentTable=repeaterSlotSegmentTable, repeaterRepeaterReports=repeaterRepeaterReports, repeaterSecurityStatus=repeaterSecurityStatus, repeaterPortPortAddressViolations=repeaterPortPortAddressViolations, repeaterPortAutoPolarity=repeaterPortAutoPolarity, repeaterPortMCVs=repeaterPortMCVs, xRepeaterRedundancy=xRepeaterRedundancy, integrityLoss=integrityLoss, repeaterPortSegment=repeaterPortSegment, repeaterPortIndex=repeaterPortIndex, repeaterRedundancyGroupGroupIndex=repeaterRedundancyGroupGroupIndex, repeaterRedundancyPathActivate=repeaterRedundancyPathActivate, repeaterPortAccessLearn=repeaterPortAccessLearn, repeaterPortGroupIndex=repeaterPortGroupIndex, repeaterSecurityPortSecurityLearn=repeaterSecurityPortSecurityLearn, repeaterSlotSegmentEntry=repeaterSlotSegmentEntry, repeaterGroupIOCardType=repeaterGroupIOCardType, repeaterPortPortLastViolationAddress=repeaterPortPortLastViolationAddress, repeaterSecurityPortUnicast=repeaterSecurityPortUnicast, repeaterSecurityGlobalAddressStatus=repeaterSecurityGlobalAddressStatus, repeaterSecurityPortAllStatus=repeaterSecurityPortAllStatus, repeaterGroupIndex=repeaterGroupIndex, repeaterPortAccessAllStatus=repeaterPortAccessAllStatus, repeaterPortPulseLosses=repeaterPortPulseLosses, repeaterSecurityPortMulticast=repeaterSecurityPortMulticast, xRepeaterRepeater=xRepeaterRepeater, repeaterPort2RmonPkts512to1023Octets=repeaterPort2RmonPkts512to1023Octets, repeaterPortPulseStatus=repeaterPortPulseStatus, repeaterHealthTrap=repeaterHealthTrap, repeaterRedundancyGroupName=repeaterRedundancyGroupName, repeaterSecurityGlobalDBID=repeaterSecurityGlobalDBID, repeaterSecurityGroupIndex=repeaterSecurityGroupIndex, repeaterGroupFifoErrors=repeaterGroupFifoErrors, repeaterRedundancyPathTable=repeaterRedundancyPathTable, repeaterRedundancyPathTestAttempts=repeaterRedundancyPathTestAttempts, repeaterRedundancyPathChangeTrap=repeaterRedundancyPathChangeTrap, repeaterRedundancyPathGroupIndex=repeaterRedundancyPathGroupIndex, repeaterGroupSQE=repeaterGroupSQE, repeaterSecurityGlobalAddressAction=repeaterSecurityGlobalAddressAction, repeaterPortName=repeaterPortName, repeaterGroupTable=repeaterGroupTable, repeaterGroupAlarmCount=repeaterGroupAlarmCount, repeaterRedundancyPathConfigStatus=repeaterRedundancyPathConfigStatus, repeaterRedundancyPathLastTestStatus=repeaterRedundancyPathLastTestStatus, repeaterPortAccessAddress=repeaterPortAccessAddress, repeaterRedundancyPathPathIndex=repeaterRedundancyPathPathIndex, repeaterPortEthernetRepeater=repeaterPortEthernetRepeater, repeaterSecurityAddressShadow=repeaterSecurityAddressShadow, repeaterPortSofMissing=repeaterPortSofMissing, repeaterRepeaterSegment=repeaterRepeaterSegment, repeaterPort2TrafficRatio=repeaterPort2TrafficRatio, repeaterRepeaterTable=repeaterRepeaterTable, repeaterPort2CollisionRatio=repeaterPort2CollisionRatio, repeaterRedundancyGroupRollbackAttempts=repeaterRedundancyGroupRollbackAttempts, repeaterRedundancyGroupZero=repeaterRedundancyGroupZero, repeaterGroupJabbers=repeaterGroupJabbers, repeaterPortAccessAction=repeaterPortAccessAction, repeaterSecurityPortEntry=repeaterSecurityPortEntry, repeaterPort2RmonPkts64Octets=repeaterPort2RmonPkts64Octets, repeaterRedundancyGroupAdminState=repeaterRedundancyGroupAdminState, repeaterPortAccessState=repeaterPortAccessState, repeaterPort2Entry=repeaterPort2Entry, repeaterRedundancyPathSlot=repeaterRedundancyPathSlot, repeaterRedundancyPathAdminState=repeaterRedundancyPathAdminState, repeaterRedundancyAddressLastTestStatus=repeaterRedundancyAddressLastTestStatus, repeaterSecurityAction=repeaterSecurityAction, repeaterPortEntry=repeaterPortEntry, repeaterPortAccessType=repeaterPortAccessType, repeaterSecurityGroupIndexShadow=repeaterSecurityGroupIndexShadow, repeaterSecurityGlobalAddressEntry=repeaterSecurityGlobalAddressEntry, repeaterRedundancyPathPriority=repeaterRedundancyPathPriority, redundancyPathChange=redundancyPathChange, repeaterReports=repeaterReports, repeaterRepeaterZero=repeaterRepeaterZero, repeaterRepeaterGroupIndex=repeaterRepeaterGroupIndex, repeaterRepeaterJabbers=repeaterRepeaterJabbers, repeaterSecurityStatusShadow=repeaterSecurityStatusShadow, repeaterPort2BroadcastRatio=repeaterPort2BroadcastRatio, repeaterSlotSegment=repeaterSlotSegment, repeaterSecurityGlobalAddressTable=repeaterSecurityGlobalAddressTable, repeaterRepeaterCollisions=repeaterRepeaterCollisions, repeaterRepeaterSinceZero=repeaterRepeaterSinceZero, repeaterPortZero=repeaterPortZero, repeaterSecurityGlobalAddress=repeaterSecurityGlobalAddress, repeaterGroupManagerRepeater=repeaterGroupManagerRepeater, repeaterPort2RmonPkts256to511Octets=repeaterPort2RmonPkts256to511Octets, repeaterRepeaterTotalFrames=repeaterRepeaterTotalFrames, repeaterPort2RmonPkts=repeaterPort2RmonPkts, repeaterGroupSegment=repeaterGroupSegment, repeaterRedundancyAddressEntry=repeaterRedundancyAddressEntry, repeaterGroupIOCardOperStatus=repeaterGroupIOCardOperStatus, repeaterPort2ErrorRatio=repeaterPort2ErrorRatio, repeaterAccessViolationTrap=repeaterAccessViolationTrap, repeaterRedundancyGroupRollbackInterval=repeaterRedundancyGroupRollbackInterval, repeaterIntegrityLossTrap=repeaterIntegrityLossTrap, repeaterPortAccessAddressShadow=repeaterPortAccessAddressShadow, repeaterGroupIOCardFirmwareVersion=repeaterGroupIOCardFirmwareVersion, repeaterRepeaterPercentUtilization=repeaterRepeaterPercentUtilization, repeaterRepeaterSQE=repeaterRepeaterSQE, repeaterPort2RmonBroadcastPkts=repeaterPort2RmonBroadcastPkts, repeaterRedundancyGroupTestInterval=repeaterRedundancyGroupTestInterval, repeaterRedundancyPathStatus=repeaterRedundancyPathStatus, repeaterPortRepeatersAllowed=repeaterPortRepeatersAllowed, repeaterPortAccessTable=repeaterPortAccessTable, repeaterStatusChangeTrap=repeaterStatusChangeTrap, repeaterRedundancyGroupConfigStatus=repeaterRedundancyGroupConfigStatus, repeaterRedundancyPathDisposition=repeaterRedundancyPathDisposition, repeaterRepeaterTotalOctets=repeaterRepeaterTotalOctets, repeaterGroupEntry=repeaterGroupEntry, xRepeaterGroupInfo=xRepeaterGroupInfo, repeaterRedundancyAddressStatus=repeaterRedundancyAddressStatus, repeaterPort2RmonCRCAlignErrors=repeaterPort2RmonCRCAlignErrors, repeaterPort2RmonPkts65to127Octets=repeaterPort2RmonPkts65to127Octets, repeaterAccessViolation=repeaterAccessViolation, repeaterSlotIndex=repeaterSlotIndex, repeaterPortAccessPortIndex=repeaterPortAccessPortIndex, repeaterPortPulse=repeaterPortPulse, repeaterPortAccessPortIndexShadow=repeaterPortAccessPortIndexShadow, repeaterGroupMemoryUtilization=repeaterGroupMemoryUtilization, repeaterSecurityPortIndex=repeaterSecurityPortIndex, repeaterRedundancyPathRetryCount=repeaterRedundancyPathRetryCount, repeaterPort2MulticastRatio=repeaterPort2MulticastRatio, repeaterSlotSegmentStatus=repeaterSlotSegmentStatus, repeaterSecurityState=repeaterSecurityState, repeaterSecurityEntry=repeaterSecurityEntry, repeaterPort2Table=repeaterPort2Table, repeaterPortAccessStatus=repeaterPortAccessStatus, repeaterRedundancyAddressGroupIndex=repeaterRedundancyAddressGroupIndex, Repeater=Repeater, repeaterRedundancyAddressResponses=repeaterRedundancyAddressResponses, repeaterRepeaterFifoOverflows=repeaterRepeaterFifoOverflows, repeaterPortGlobalSecurityAddress=repeaterPortGlobalSecurityAddress, repeaterRedundancyPathPort=repeaterRedundancyPathPort, repeaterRedundancyGroupEntry=repeaterRedundancyGroupEntry, repeaterRedundancyGroupStatus=repeaterRedundancyGroupStatus)
