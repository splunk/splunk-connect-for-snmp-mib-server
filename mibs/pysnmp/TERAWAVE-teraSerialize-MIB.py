#
# PySNMP MIB module TERAWAVE-teraSerialize-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-teraSerialize-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, MibIdentifier, Bits, Counter64, Integer32, Counter32, iso, NotificationType, TimeTicks, enterprises, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Bits", "Counter64", "Integer32", "Counter32", "iso", "NotificationType", "TimeTicks", "enterprises", "Gauge32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
teraCardSerializeTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 17), )
if mibBuilder.loadTexts: teraCardSerializeTable.setStatus('mandatory')
teraCardSerializeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 17, 1), ).setIndexNames((0, "TERAWAVE-teraSerialize-MIB", "teraInstallSlotNumber"))
if mibBuilder.loadTexts: teraCardSerializeTableEntry.setStatus('mandatory')
teraCardMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 17, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCardMfgName.setStatus('mandatory')
teraCardMfgRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 17, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCardMfgRevision.setStatus('mandatory')
teraCardMfgSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 17, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCardMfgSerial.setStatus('mandatory')
teraCardMfgSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 17, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCardMfgSWVersion.setStatus('mandatory')
teraCardMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 17, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCardMfgDate.setStatus('mandatory')
teraCardMfgPN = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 17, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCardMfgPN.setStatus('mandatory')
teraCardMfgInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 17, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCardMfgInfo.setStatus('mandatory')
teraCardMfgReservedCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 17, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraCardMfgReservedCRC.setStatus('mandatory')
teraEEPROMSerializeTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 21), )
if mibBuilder.loadTexts: teraEEPROMSerializeTable.setStatus('mandatory')
teraEEPROMSerializeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 21, 1), ).setIndexNames((0, "TERAWAVE-teraSerialize-MIB", "teraInstallSlotNumber"), (0, "TERAWAVE-teraSerialize-MIB", "ifIndex"))
if mibBuilder.loadTexts: teraEEPROMSerializeTableEntry.setStatus('mandatory')
teraEEPROMMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 21, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraEEPROMMfgName.setStatus('mandatory')
teraEEPROMMfgRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 21, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraEEPROMMfgRevision.setStatus('mandatory')
teraEEPROMMfgSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 21, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraEEPROMMfgSerial.setStatus('mandatory')
teraEEPROMMfgHWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 21, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraEEPROMMfgHWVersion.setStatus('mandatory')
teraEEPROMMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 21, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraEEPROMMfgDate.setStatus('mandatory')
teraEEPROMMfgPN = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 21, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraEEPROMMfgPN.setStatus('mandatory')
teraEEPROMMfgInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 21, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraEEPROMMfgInfo.setStatus('mandatory')
teraEEPROMMfgReservedCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 21, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraEEPROMMfgReservedCRC.setStatus('mandatory')
mibBuilder.exportSymbols("TERAWAVE-teraSerialize-MIB", teraEEPROMMfgHWVersion=teraEEPROMMfgHWVersion, teraCardSerializeTable=teraCardSerializeTable, teraEEPROMMfgDate=teraEEPROMMfgDate, teraEEPROMMfgInfo=teraEEPROMMfgInfo, teraCardMfgInfo=teraCardMfgInfo, teraCardMfgPN=teraCardMfgPN, teraCardMfgName=teraCardMfgName, teraEEPROMMfgReservedCRC=teraEEPROMMfgReservedCRC, terawave=terawave, teraCardMfgDate=teraCardMfgDate, teraEEPROMMfgRevision=teraEEPROMMfgRevision, teraCardMfgRevision=teraCardMfgRevision, teraEEPROMMfgSerial=teraEEPROMMfgSerial, teraEEPROMMfgName=teraEEPROMMfgName, teraCardMfgSerial=teraCardMfgSerial, teraCardMfgSWVersion=teraCardMfgSWVersion, teraEEPROMSerializeTable=teraEEPROMSerializeTable, teraCardSerializeTableEntry=teraCardSerializeTableEntry, teraEEPROMMfgPN=teraEEPROMMfgPN, teraEEPROMSerializeTableEntry=teraEEPROMSerializeTableEntry, teraCardMfgReservedCRC=teraCardMfgReservedCRC)
