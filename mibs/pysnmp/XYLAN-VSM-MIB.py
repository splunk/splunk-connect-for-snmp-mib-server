#
# PySNMP MIB module XYLAN-VSM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-VSM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:39:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
XylanModuleSubunit, = mibBuilder.importSymbols("CHASSIS-MIB", "XylanModuleSubunit")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, TimeTicks, Counter32, IpAddress, Gauge32, ObjectIdentity, ModuleIdentity, MibIdentifier, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "TimeTicks", "Counter32", "IpAddress", "Gauge32", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanVsmArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanVsmArch")
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class VsmEnableDisabled(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2))

class VsmOnOff(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("on", 2))

class VsmVoiceCodingType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("aLawPcm", 1), ("muLawPcm", 2), ("ituG723-53", 3), ("ituG723-63", 4), ("ituG729AB", 5), ("t38-fax", 6))

vsmNetworkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 26, 1))
vsmSignalingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 26, 2))
vsmCodingProfileGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 26, 3))
vsmDialSchemeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 26, 4))
vsmPhysicalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 26, 5))
vsmConfigControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 26, 6))
vsmStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 26, 7))
vsmVNTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 1), )
if mibBuilder.loadTexts: vsmVNTemplateTable.setStatus('mandatory')
vsmVNTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 1, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmVNTmplIndex"))
if mibBuilder.loadTexts: vsmVNTemplateEntry.setStatus('mandatory')
vsmVNTmplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNTmplIndex.setStatus('mandatory')
vsmVNTmplName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNTmplName.setStatus('deprecated')
vsmVNTmplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNTmplRowStatus.setStatus('mandatory')
vsmVNTmplH323GateKeeperPhoneGroupTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 2), )
if mibBuilder.loadTexts: vsmVNTmplH323GateKeeperPhoneGroupTable.setStatus('mandatory')
vsmVNTmplH323GateKeeperPhoneGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 2, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmVNTmplName"), (0, "XYLAN-VSM-MIB", "vsmPhoneGroupName"))
if mibBuilder.loadTexts: vsmVNTmplH323GateKeeperPhoneGroupEntry.setStatus('mandatory')
vsmVNTmplH323GateKeeperPhoneGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNTmplH323GateKeeperPhoneGroupRowStatus.setStatus('mandatory')
vsmVNCardTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3), )
if mibBuilder.loadTexts: vsmVNCardTable.setStatus('mandatory')
vsmVNCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmCardSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmCardSubunitIndex"))
if mibBuilder.loadTexts: vsmVNCardEntry.setStatus('mandatory')
vsmVNCardH323DisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardH323DisplayName.setStatus('mandatory')
vsmVNCardRTPPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("sequential", 2))).clone('dynamic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardRTPPortMode.setStatus('mandatory')
vsmVNCardRTPPortBase = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534)).clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardRTPPortBase.setStatus('mandatory')
vsmVNCardH323OutFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1, 4), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardH323OutFastStart.setStatus('deprecated')
vsmVNCardH323InFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1, 5), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardH323InFastStart.setStatus('mandatory')
vsmVNCardH323GatekeeperCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1, 6), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardH323GatekeeperCtrl.setStatus('mandatory')
vsmVNCardH323GatekeeperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("manual", 2), ("auto", 3))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardH323GatekeeperMode.setStatus('mandatory')
vsmVNCardH323GatekeeperAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardH323GatekeeperAddr.setStatus('mandatory')
vsmVNCardH323AllowCallsWithoutGatekeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1, 9), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardH323AllowCallsWithoutGatekeeper.setStatus('mandatory')
vsmVNCardH323GatekeeperMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1, 10), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardH323GatekeeperMaxRetries.setStatus('mandatory')
vsmVNCardH323EndpointRegType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("gateway", 1), ("terminal", 2))).clone('gateway')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardH323EndpointRegType.setStatus('mandatory')
vsmVNCardH323Notification = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 3, 1, 12), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardH323Notification.setStatus('deprecated')
vsmVNCardH323GateKeeperPhoneGroupTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 4), )
if mibBuilder.loadTexts: vsmVNCardH323GateKeeperPhoneGroupTable.setStatus('mandatory')
vsmVNCardH323GateKeeperPhoneGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 4, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmCardSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmCardSubunitIndex"), (0, "XYLAN-VSM-MIB", "vsmPhoneGroupName"))
if mibBuilder.loadTexts: vsmVNCardH323GateKeeperPhoneGroupEntry.setStatus('mandatory')
vsmVNCardH323GateKeeperPhoneGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 1, 4, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmVNCardH323GateKeeperPhoneGroupRowStatus.setStatus('mandatory')
vsmSignalingTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 1), )
if mibBuilder.loadTexts: vsmSignalingTemplateTable.setStatus('mandatory')
vsmSignalingTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 1, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmSigTmplIndex"))
if mibBuilder.loadTexts: vsmSignalingTemplateEntry.setStatus('mandatory')
vsmSigTmplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigTmplIndex.setStatus('mandatory')
vsmSigTmplName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigTmplName.setStatus('deprecated')
vsmSigTmplRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigTmplRowStatus.setStatus('mandatory')
vsmSigTmplEmCommonTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 2), )
if mibBuilder.loadTexts: vsmSigTmplEmCommonTable.setStatus('mandatory')
vsmSigTmplEmCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 2, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmSigTmplIndex"))
if mibBuilder.loadTexts: vsmSigTmplEmCommonEntry.setStatus('mandatory')
vsmSigTmplEmCommonOffHookDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigTmplEmCommonOffHookDebounce.setStatus('deprecated')
vsmSigTmplEmDelayTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 3), )
if mibBuilder.loadTexts: vsmSigTmplEmDelayTable.setStatus('mandatory')
vsmSigTmplEmDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 3, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmSigTmplIndex"))
if mibBuilder.loadTexts: vsmSigTmplEmDelayEntry.setStatus('mandatory')
vsmSigTmplEmDelayInDelayDurMin = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigTmplEmDelayInDelayDurMin.setStatus('deprecated')
vsmSigTmplEmImmedTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 4), )
if mibBuilder.loadTexts: vsmSigTmplEmImmedTable.setStatus('mandatory')
vsmSigTmplEmImmedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 4, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmSigTmplIndex"))
if mibBuilder.loadTexts: vsmSigTmplEmImmedEntry.setStatus('mandatory')
vsmSigTmplEmImmedGlareReport = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigTmplEmImmedGlareReport.setStatus('deprecated')
vsmSigTmplEmWinkTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 5), )
if mibBuilder.loadTexts: vsmSigTmplEmWinkTable.setStatus('mandatory')
vsmSigTmplEmWinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 5, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmSigTmplIndex"))
if mibBuilder.loadTexts: vsmSigTmplEmWinkEntry.setStatus('mandatory')
vsmSigTmplEmWinkInWinkWaitMin = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigTmplEmWinkInWinkWaitMin.setStatus('deprecated')
vsmSigTmplFxoGSTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 6), )
if mibBuilder.loadTexts: vsmSigTmplFxoGSTable.setStatus('mandatory')
vsmSigTmplFxoGSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 6, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmSigTmplIndex"))
if mibBuilder.loadTexts: vsmSigTmplFxoGSEntry.setStatus('mandatory')
vsmSigTmplFxoGSConnectionLoopOpenDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6000)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigTmplFxoGSConnectionLoopOpenDebounce.setStatus('deprecated')
vsmSigTmplFxoLSTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 7), )
if mibBuilder.loadTexts: vsmSigTmplFxoLSTable.setStatus('mandatory')
vsmSigTmplFxoLSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 7, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmSigTmplIndex"))
if mibBuilder.loadTexts: vsmSigTmplFxoLSEntry.setStatus('mandatory')
vsmSigTmplFxoLSRingingDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigTmplFxoLSRingingDebounce.setStatus('deprecated')
vsmSigTmplFxsGSTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 8), )
if mibBuilder.loadTexts: vsmSigTmplFxsGSTable.setStatus('mandatory')
vsmSigTmplFxsGSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 8, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmSigTmplIndex"))
if mibBuilder.loadTexts: vsmSigTmplFxsGSEntry.setStatus('mandatory')
vsmSigTmplFxsGSSeizeDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigTmplFxsGSSeizeDetect.setStatus('deprecated')
vsmSigTmplFxsLSTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 9), )
if mibBuilder.loadTexts: vsmSigTmplFxsLSTable.setStatus('mandatory')
vsmSigTmplFxsLSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 9, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmSigTmplIndex"))
if mibBuilder.loadTexts: vsmSigTmplFxsLSEntry.setStatus('mandatory')
vsmSigTmplFxsLSOffHookDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigTmplFxsLSOffHookDebounce.setStatus('deprecated')
vsmSignalingChannelTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10), )
if mibBuilder.loadTexts: vsmSignalingChannelTable.setStatus('mandatory')
vsmSignalingChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmSignalingChannelEntry.setStatus('mandatory')
vsmSigChanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emDelayStart", 1), ("emImmedStart", 2), ("emWinkStart", 3), ("fxoGroundStart", 4), ("fxsGroundStart", 5), ("fxoLoopStart", 6), ("fxsLoopStart", 7), ("isdn", 8))).clone('emWinkStart')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanProtocol.setStatus('mandatory')
vsmSigChanCallerIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("private", 1), ("unavailable", 2), ("available", 3))).clone('unavailable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanCallerIdName.setStatus('mandatory')
vsmSigChanCallerIdNameStr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanCallerIdNameStr.setStatus('mandatory')
vsmSigChanCallerIdNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("private", 1), ("unavailable", 2), ("available", 3))).clone('unavailable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanCallerIdNumber.setStatus('mandatory')
vsmSigChanCallerIdNumberStr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanCallerIdNumberStr.setStatus('mandatory')
vsmSigChanToneTable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ringing", 1), ("silence", 2))).clone('ringing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanToneTable.setStatus('mandatory')
vsmSigChanOutWait = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOutWait.setStatus('mandatory')
vsmSigChanOutToneDigitDur = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 2000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOutToneDigitDur.setStatus('mandatory')
vsmSigChanOutToneInterDigitDur = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 2000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOutToneInterDigitDur.setStatus('mandatory')
vsmSigChanUnused = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanUnused.setStatus('deprecated')
vsmSigChanCallLimitCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 11), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanCallLimitCtrl.setStatus('mandatory')
vsmSigChanCallLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)).clone(65534)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanCallLimit.setStatus('mandatory')
vsmSigChanAnswerWaitLimitCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 13), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanAnswerWaitLimitCtrl.setStatus('mandatory')
vsmSigChanAnswerWaitLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)).clone(65534)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanAnswerWaitLimit.setStatus('mandatory')
vsmSigChanHangupWaitLimitCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 15), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanHangupWaitLimitCtrl.setStatus('mandatory')
vsmSigChanHangupWaitLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)).clone(65534)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanHangupWaitLimit.setStatus('mandatory')
vsmSigChanFaxHoldoverDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFaxHoldoverDelay.setStatus('mandatory')
vsmSigChanCompanding = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alaw", 1), ("mulaw", 2))).clone('mulaw')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanCompanding.setStatus('mandatory')
vsmSigChanReceiveGain = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-14, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanReceiveGain.setStatus('mandatory')
vsmSigChanTransmitGain = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-14, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanTransmitGain.setStatus('mandatory')
vsmSigChanIdleNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-7000, 7000)).clone(7000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanIdleNoise.setStatus('mandatory')
vsmSigChanOverrideInBandCallProgressTones = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 22), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOverrideInBandCallProgressTones.setStatus('mandatory')
vsmSigChanOverrideInBandCodecSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 23), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOverrideInBandCodecSwitching.setStatus('mandatory')
vsmSigChanOverridePSUCodecSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 24), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOverridePSUCodecSwitching.setStatus('mandatory')
vsmSigChanOverrideNetworkOverlapDialing = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 25), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOverrideNetworkOverlapDialing.setStatus('mandatory')
vsmSigChanOverrideFullCallProgressTones = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 26), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOverrideFullCallProgressTones.setStatus('mandatory')
vsmSigChanOverrideRingBack = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 27), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOverrideRingBack.setStatus('mandatory')
vsmSigChanOverrideInfoElementTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 28), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOverrideInfoElementTransport.setStatus('mandatory')
vsmSigChanOverrideQSIGInfoElementTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 29), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOverrideQSIGInfoElementTransport.setStatus('mandatory')
vsmSigChanOverrideDataSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 30), VsmOnOff().clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOverrideDataSetup.setStatus('mandatory')
vsmSigChanOverrideVoiceSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 31), VsmOnOff().clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOverrideVoiceSetup.setStatus('mandatory')
vsmSigChanOverrideFAXSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 32), VsmOnOff().clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOverrideFAXSetup.setStatus('mandatory')
vsmSigChanOverrideModemSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 33), VsmOnOff().clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOverrideModemSetup.setStatus('mandatory')
vsmSigChanCallProgressToneDetControl = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("relative", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanCallProgressToneDetControl.setStatus('mandatory')
vsmSigChanCallProgressToneDetCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("alternate", 2))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanCallProgressToneDetCfg.setStatus('mandatory')
vsmSigChanAssignTmplName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanAssignTmplName.setStatus('mandatory')
vsmSigChanAssignTmplStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("assign", 1))).clone('assign')).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vsmSigChanAssignTmplStatus.setStatus('mandatory')
vsmSigChanOutDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tone", 1), ("pulse", 2))).clone('tone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanOutDialType.setStatus('mandatory')
vsmSigChanV18ToneDetThHangTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32767)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanV18ToneDetThHangTime.setStatus('mandatory')
vsmSigChanV18ToneDetThLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, -15)).clone(-40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanV18ToneDetThLevel.setStatus('mandatory')
vsmSigChanV18ToneDetThFraction = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanV18ToneDetThFraction.setStatus('mandatory')
vsmSigChanSinFreqToneDetThLev = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, -15)).clone(-40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanSinFreqToneDetThLev.setStatus('mandatory')
vsmSigChanSinFreqToneDetThTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanSinFreqToneDetThTime.setStatus('mandatory')
vsmSigChanEchoCancelNonSens = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)).clone(327)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEchoCancelNonSens.setStatus('mandatory')
vsmSigChanAcousticEchoCancellerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 45), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanAcousticEchoCancellerMode.setStatus('mandatory')
vsmSigChanAcouEchoCanNonProc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 46), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanAcouEchoCanNonProc.setStatus('mandatory')
vsmSigChanAcEchoCanSetSpGain = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanAcEchoCanSetSpGain.setStatus('mandatory')
vsmSigChanAcEchoCanFreeSpGain = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanAcEchoCanFreeSpGain.setStatus('mandatory')
vsmSigChanAcousticEchoCanOper = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("handset", 1), ("handsfree", 2))).clone('handsfree')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanAcousticEchoCanOper.setStatus('mandatory')
vsmSigChanFxsLSCadenceCoefficient = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("northAmerica", 1), ("europe", 2))).clone('northAmerica')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsLSCadenceCoefficient.setStatus('mandatory')
vsmSigChanFxsLSRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("default", 1), ("zero", 2), ("one", 3), ("two", 4), ("three", 5), ("four", 6), ("five", 7), ("six", 8), ("seven", 9))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsLSRingId.setStatus('mandatory')
vsmSigChanFxsGSCadenceCoefficient = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("northAmerica", 1), ("europe", 2))).clone('northAmerica')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsGSCadenceCoefficient.setStatus('mandatory')
vsmSigChanFxsGSRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 10, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("default", 1), ("zero", 2), ("one", 3), ("two", 4), ("three", 5), ("four", 6), ("five", 7), ("six", 8), ("seven", 9))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsGSRingId.setStatus('mandatory')
vsmSigChanEmCommonTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11), )
if mibBuilder.loadTexts: vsmSigChanEmCommonTable.setStatus('mandatory')
vsmSigChanEmCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmSigChanEmCommonEntry.setStatus('mandatory')
vsmSigChanEmCommonOffHookDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmCommonOffHookDebounce.setStatus('mandatory')
vsmSigChanEmCommonOnHookDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmCommonOnHookDebounce.setStatus('mandatory')
vsmSigChanEmCommonSeizeDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5000)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmCommonSeizeDetect.setStatus('mandatory')
vsmSigChanEmCommonClearDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmCommonClearDetect.setStatus('mandatory')
vsmSigChanEmCommonClearConfDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmCommonClearConfDetect.setStatus('mandatory')
vsmSigChanEmCommonClearConfWaitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(60000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmCommonClearConfWaitMax.setStatus('mandatory')
vsmSigChanEmCommonGuardAll = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmCommonGuardAll.setStatus('mandatory')
vsmSigChanEmCommonGuardOut = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmCommonGuardOut.setStatus('mandatory')
vsmSigChanEmCommonDialTone = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11, 1, 9), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmCommonDialTone.setStatus('mandatory')
vsmSigChanEmCommonMinConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmCommonMinConnectTime.setStatus('mandatory')
vsmSigChanEmCommonHangUpWait = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmCommonHangUpWait.setStatus('mandatory')
vsmSigChanEmDelayTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 12), )
if mibBuilder.loadTexts: vsmSigChanEmDelayTable.setStatus('mandatory')
vsmSigChanEmDelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 12, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmSigChanEmDelayEntry.setStatus('mandatory')
vsmSigChanEmDelayInDelayDurMin = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmDelayInDelayDurMin.setStatus('mandatory')
vsmSigChanEmDelayInDelayDurMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(2500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmDelayInDelayDurMax.setStatus('mandatory')
vsmSigChanEmDelayInDigitIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmDelayInDigitIgnore.setStatus('mandatory')
vsmSigChanEmDelayOutDelayDurMin = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmDelayOutDelayDurMin.setStatus('mandatory')
vsmSigChanEmDelayOutDelayDurMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(8000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmDelayOutDelayDurMax.setStatus('mandatory')
vsmSigChanEmDelayOutIntegrityChk = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 12, 1, 6), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmDelayOutIntegrityChk.setStatus('mandatory')
vsmSigChanEmDelayOutDelayChk = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(170)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmDelayOutDelayChk.setStatus('mandatory')
vsmSigChanEmImmedTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 13), )
if mibBuilder.loadTexts: vsmSigChanEmImmedTable.setStatus('mandatory')
vsmSigChanEmImmedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 13, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmSigChanEmImmedEntry.setStatus('mandatory')
vsmSigChanEmImmedGlareReport = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmImmedGlareReport.setStatus('mandatory')
vsmSigChanEmImmedDigitWait = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 13, 1, 2), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmImmedDigitWait.setStatus('mandatory')
vsmSigChanEmWinkTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 14), )
if mibBuilder.loadTexts: vsmSigChanEmWinkTable.setStatus('mandatory')
vsmSigChanEmWinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 14, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmSigChanEmWinkEntry.setStatus('mandatory')
vsmSigChanEmWinkInWinkWaitMin = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmWinkInWinkWaitMin.setStatus('mandatory')
vsmSigChanEmWinkInWinkWaitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(290)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmWinkInWinkWaitMax.setStatus('mandatory')
vsmSigChanEmWinkInWinkDur = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmWinkInWinkDur.setStatus('mandatory')
vsmSigChanEmWinkInDigitIgnore = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmWinkInDigitIgnore.setStatus('mandatory')
vsmSigChanEmWinkOutWinkWaitMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(8000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmWinkOutWinkWaitMax.setStatus('mandatory')
vsmSigChanEmWinkOutWinkDurMin = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 14, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmWinkOutWinkDurMin.setStatus('mandatory')
vsmSigChanEmWinkOutWinkDurMax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60000)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanEmWinkOutWinkDurMax.setStatus('mandatory')
vsmSigChanFxoGSTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 15), )
if mibBuilder.loadTexts: vsmSigChanFxoGSTable.setStatus('mandatory')
vsmSigChanFxoGSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 15, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmSigChanFxoGSEntry.setStatus('mandatory')
vsmSigChanFxoGSConnectionLoopOpenDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6000)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoGSConnectionLoopOpenDebounce.setStatus('mandatory')
vsmSigChanFxoGSMaxTipGroundWait = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoGSMaxTipGroundWait.setStatus('mandatory')
vsmSigChanFxoGSTipGroundDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoGSTipGroundDebounce.setStatus('mandatory')
vsmSigChanFxoGSRingingDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoGSRingingDebounce.setStatus('mandatory')
vsmSigChanFxoGSRingingInterCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoGSRingingInterCycle.setStatus('mandatory')
vsmSigChanFxoGSRingingInterPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(550)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoGSRingingInterPulse.setStatus('mandatory')
vsmSigChanFxoGSCallerIdDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 15, 1, 7), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoGSCallerIdDetect.setStatus('mandatory')
vsmSigChanFxoGSAnswerAfterRings = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 15, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoGSAnswerAfterRings.setStatus('mandatory')
vsmSigChanFxoGSLoopCurrentDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 15, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoGSLoopCurrentDebounce.setStatus('mandatory')
vsmSigChanFxoGSBattReversalDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 15, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoGSBattReversalDebounce.setStatus('mandatory')
vsmSigChanFxoLSTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 16), )
if mibBuilder.loadTexts: vsmSigChanFxoLSTable.setStatus('mandatory')
vsmSigChanFxoLSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 16, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmSigChanFxoLSEntry.setStatus('mandatory')
vsmSigChanFxoLSRingingDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoLSRingingDebounce.setStatus('mandatory')
vsmSigChanFxoLSCPCDetectCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 16, 1, 2), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoLSCPCDetectCtrl.setStatus('mandatory')
vsmSigChanFxoLSCPCDetectDur = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoLSCPCDetectDur.setStatus('mandatory')
vsmSigChanFxoLSGuardOut = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoLSGuardOut.setStatus('mandatory')
vsmSigChanFxoLSRingingInterCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoLSRingingInterCycle.setStatus('mandatory')
vsmSigChanFxoLSRingingInterPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(550)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoLSRingingInterPulse.setStatus('mandatory')
vsmSigChanFxoLSCallerIdDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 16, 1, 7), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoLSCallerIdDetect.setStatus('mandatory')
vsmSigChanFxoLSAnswerAfterRings = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 16, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoLSAnswerAfterRings.setStatus('mandatory')
vsmSigChanFxoLSLoopCurrentDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 16, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoLSLoopCurrentDebounce.setStatus('mandatory')
vsmSigChanFxoLSBattReversalDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 16, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxoLSBattReversalDebounce.setStatus('mandatory')
vsmSigChanFxsGSTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 17), )
if mibBuilder.loadTexts: vsmSigChanFxsGSTable.setStatus('mandatory')
vsmSigChanFxsGSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 17, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmSigChanFxsGSEntry.setStatus('mandatory')
vsmSigChanFxsGSSeizeDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsGSSeizeDetect.setStatus('mandatory')
vsmSigChanFxsGSOnHookDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsGSOnHookDebounce.setStatus('mandatory')
vsmSigChanFxsGSOrigClearDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsGSOrigClearDetect.setStatus('mandatory')
vsmSigChanFxsGSAnswClearDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsGSAnswClearDetect.setStatus('mandatory')
vsmSigChanFxsGSMinRingGround = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsGSMinRingGround.setStatus('mandatory')
vsmSigChanFxsGSMaxWaitLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsGSMaxWaitLoop.setStatus('mandatory')
vsmSigChanFxsGSMinLoopOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 17, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsGSMinLoopOpen.setStatus('mandatory')
vsmSigChanFxsGSGenerateCallerId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 17, 1, 8), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsGSGenerateCallerId.setStatus('mandatory')
vsmSigChanFxsGSOffHookDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsGSOffHookDebounce.setStatus('mandatory')
vsmSigChanFxsGSRingGroundDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 17, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsGSRingGroundDebounce.setStatus('mandatory')
vsmSigChanFxsLSTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 18), )
if mibBuilder.loadTexts: vsmSigChanFxsLSTable.setStatus('mandatory')
vsmSigChanFxsLSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 18, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmSigChanFxsLSEntry.setStatus('mandatory')
vsmSigChanFxsLSOffHookDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsLSOffHookDebounce.setStatus('mandatory')
vsmSigChanFxsLSOnHookDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsLSOnHookDebounce.setStatus('mandatory')
vsmSigChanFxsLSSeizeDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(150)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsLSSeizeDetect.setStatus('mandatory')
vsmSigChanFxsLSOrigClearDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsLSOrigClearDetect.setStatus('mandatory')
vsmSigChanFxsLSAnswClearDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsLSAnswClearDetect.setStatus('mandatory')
vsmSigChanFxsLSCPCWait = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 18, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsLSCPCWait.setStatus('mandatory')
vsmSigChanFxsLSCPCDur = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 18, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60000)).clone(850)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsLSCPCDur.setStatus('mandatory')
vsmSigChanFxsLSGenerateCallerId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 2, 18, 1, 8), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmSigChanFxsLSGenerateCallerId.setStatus('mandatory')
vsmCodingProfileTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1), )
if mibBuilder.loadTexts: vsmCodingProfileTable.setStatus('mandatory')
vsmCodingProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmCodingProfName"))
if mibBuilder.loadTexts: vsmCodingProfEntry.setStatus('mandatory')
vsmCodingProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfId.setStatus('mandatory')
vsmCodingProfName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfName.setStatus('mandatory')
vsmCodingProfCallerId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 3), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfCallerId.setStatus('mandatory')
vsmCodingProfCodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 4), VsmVoiceCodingType().clone('ituG723-63')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfCodingType.setStatus('mandatory')
vsmCodingProfPktInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30, 40, 50, 60, 70, 80))).clone(namedValues=NamedValues(("interval1", 10), ("interval2", 20), ("interval3", 30), ("interval4", 40), ("interval5", 50), ("interval6", 60), ("interval7", 70), ("interval8", 80))).clone('interval3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfPktInterval.setStatus('mandatory')
vsmCodingProfVIF = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 6), Integer32().clone(384)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCodingProfVIF.setStatus('deprecated')
vsmCodingProfNetBufMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adaptive", 1), ("static", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfNetBufMode.setStatus('mandatory')
vsmCodingProfNetBufNomDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 8), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfNetBufNomDelay.setStatus('mandatory')
vsmCodingProfNetBufMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 9), Integer32().clone(240)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfNetBufMaxDelay.setStatus('mandatory')
vsmCodingProfDtmfRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 10), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfDtmfRelay.setStatus('mandatory')
vsmCodingProfVAD = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 11), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfVAD.setStatus('mandatory')
vsmCodingProfEC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 12), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfEC.setStatus('mandatory')
vsmCodingProfSwitchover = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 13), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfSwitchover.setStatus('mandatory')
vsmCodingProfCallProgToneDet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 15), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfCallProgToneDet.setStatus('mandatory')
vsmCodingProfV18ToneDet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 16), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfV18ToneDet.setStatus('mandatory')
vsmCodingProfVADThreshMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("adaptive", 1), ("relative", 2))).clone('adaptive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfVADThreshMode.setStatus('mandatory')
vsmCodingProfVADThreshLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 20)).clone(-13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfVADThreshLevel.setStatus('mandatory')
vsmCodingProfVEchoCanComfNoiseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("adaptive", 2))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfVEchoCanComfNoiseMode.setStatus('mandatory')
vsmCodingProfEchoCanRefreshCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frozen", 1), ("refresh", 2))).clone('frozen')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfEchoCanRefreshCfg.setStatus('mandatory')
vsmCodingProfEchoCanRefreshState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfEchoCanRefreshState.setStatus('mandatory')
vsmCodingProfECTailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 16, 32))).clone(namedValues=NamedValues(("delay1", 4), ("delay2", 8), ("delay3", 16), ("delay4", 32))).clone('delay3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfECTailDelay.setStatus('mandatory')
vsmCodingProfECNonLinear = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 23), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfECNonLinear.setStatus('mandatory')
vsmCodingProfFaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2400, 4800, 7200, 9600, 12000, 14400))).clone(namedValues=NamedValues(("rate1", 2400), ("rate2", 4800), ("rate3", 7200), ("rate4", 9600), ("rate5", 12000), ("rate6", 14400))).clone('rate6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfFaxRate.setStatus('mandatory')
vsmCodingProfFaxTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-13, 0)).clone(-13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfFaxTxLevel.setStatus('mandatory')
vsmCodingProfFaxCdThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("n26dBm", 1), ("n33dBm", 2), ("n43dBm", 3))).clone('n43dBm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfFaxCdThresh.setStatus('mandatory')
vsmCodingProfFaxTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3200)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfFaxTimeOut.setStatus('mandatory')
vsmCodingProfFaxHsPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 20, 30, 40))).clone(namedValues=NamedValues(("rate1", 10), ("rate2", 20), ("rate3", 30), ("rate4", 40))).clone('rate2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfFaxHsPktRate.setStatus('mandatory')
vsmCodingProfFaxLsRedun = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfFaxLsRedun.setStatus('mandatory')
vsmCodingProfFaxHsRedun = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfFaxHsRedun.setStatus('mandatory')
vsmCodingProfFaxTcfMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("network", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfFaxTcfMethod.setStatus('mandatory')
vsmCodingProfSilenceDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 43), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfSilenceDetect.setStatus('mandatory')
vsmCodingProfSilenceDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 32000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfSilenceDetectTime.setStatus('mandatory')
vsmCodingProfSilenceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, -40)).clone(-50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfSilenceLevel.setStatus('mandatory')
vsmCodingProfVoiceComfortNoiseLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-70, -40)).clone(-40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfVoiceComfortNoiseLevel.setStatus('mandatory')
vsmCodingProfG711ModemResampMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 47), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfG711ModemResampMode.setStatus('mandatory')
vsmCodingProfSinFreqToneDet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 48), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfSinFreqToneDet.setStatus('mandatory')
vsmCodingProfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 3, 1, 1, 49), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCodingProfRowStatus.setStatus('mandatory')
vsmDestinationsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 1), )
if mibBuilder.loadTexts: vsmDestinationsTable.setStatus('mandatory')
vsmDestinationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 1, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmDestinationsName"))
if mibBuilder.loadTexts: vsmDestinationsEntry.setStatus('mandatory')
vsmDestinationsName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmDestinationsName.setStatus('mandatory')
vsmDestinationsIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmDestinationsIpAddr.setStatus('mandatory')
vsmDestinationsNetworkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmDestinationsNetworkPort.setStatus('mandatory')
vsmDestinationsH323Name = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmDestinationsH323Name.setStatus('mandatory')
vsmDestinationsLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmDestinationsLocalPort.setStatus('mandatory')
vsmDestinationsStartChan = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmDestinationsStartChan.setStatus('mandatory')
vsmDestinationsEndChan = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmDestinationsEndChan.setStatus('mandatory')
vsmDestinationsType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("h323", 1))).clone('h323')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmDestinationsType.setStatus('mandatory')
vsmDestinationsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmDestinationsRowStatus.setStatus('mandatory')
vsmPhoneGroupTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2), )
if mibBuilder.loadTexts: vsmPhoneGroupTable.setStatus('mandatory')
vsmPhoneGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmPhoneGroupName"))
if mibBuilder.loadTexts: vsmPhoneGroupEntry.setStatus('mandatory')
vsmPhoneGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupName.setStatus('mandatory')
vsmPhoneGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("localExt", 1), ("nanpExt", 2), ("internationalExt", 3), ("nanpPstn", 4), ("internationalPstn", 5))).clone('localExt')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupType.setStatus('mandatory')
vsmPhoneGroupFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupFormat.setStatus('mandatory')
vsmPhoneGroupUsageVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 4), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupUsageVoice.setStatus('mandatory')
vsmPhoneGroupUsageFax = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 5), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupUsageFax.setStatus('mandatory')
vsmPhoneGroupUsageModem = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 6), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupUsageModem.setStatus('mandatory')
vsmPhoneGroupUsageData = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 7), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupUsageData.setStatus('mandatory')
vsmPhoneGroupSitePrefixEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 8), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupSitePrefixEnable.setStatus('mandatory')
vsmPhoneGroupSitePrefixString = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupSitePrefixString.setStatus('mandatory')
vsmPhoneGroupStripDigitLength = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupStripDigitLength.setStatus('mandatory')
vsmPhoneGroupForwardingPrefixEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 11), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupForwardingPrefixEnable.setStatus('mandatory')
vsmPhoneGroupForwardingPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupForwardingPrefix.setStatus('mandatory')
vsmPhoneGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 2, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPhoneGroupRowStatus.setStatus('mandatory')
vsmPGNumbersTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 3), )
if mibBuilder.loadTexts: vsmPGNumbersTable.setStatus('mandatory')
vsmPGNumbersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 3, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmPhoneGroupName"), (0, "XYLAN-VSM-MIB", "vsmPGNumber"))
if mibBuilder.loadTexts: vsmPGNumbersEntry.setStatus('mandatory')
vsmPGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmPGNumber.setStatus('mandatory')
vsmPGNumbersRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 3, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPGNumbersRowStatus.setStatus('mandatory')
vsmNumPlanTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 4), )
if mibBuilder.loadTexts: vsmNumPlanTable.setStatus('mandatory')
vsmNumPlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 4, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmNumPlanName"))
if mibBuilder.loadTexts: vsmNumPlanEntry.setStatus('mandatory')
vsmNumPlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmNumPlanName.setStatus('mandatory')
vsmNumPlanHuntMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("roundRobin", 1), ("topDown", 2))).clone('roundRobin')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmNumPlanHuntMethod.setStatus('mandatory')
vsmNumPlanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmNumPlanDescription.setStatus('mandatory')
vsmNumPlanAllActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activate", 1), ("active", 2), ("inactive", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmNumPlanAllActivate.setStatus('mandatory')
vsmNumPlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmNumPlanRowStatus.setStatus('mandatory')
vsmNPPhoneGroupTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 5), )
if mibBuilder.loadTexts: vsmNPPhoneGroupTable.setStatus('mandatory')
vsmNPPhoneGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 5, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmNumPlanName"), (0, "XYLAN-VSM-MIB", "vsmPhoneGroupName"))
if mibBuilder.loadTexts: vsmNPPhoneGroupEntry.setStatus('mandatory')
vsmNPPhoneGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 5, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmNPPhoneGroupRowStatus.setStatus('mandatory')
vsmNPDestinationsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 6), )
if mibBuilder.loadTexts: vsmNPDestinationsTable.setStatus('mandatory')
vsmNPDestinationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 6, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmNumPlanName"), (0, "XYLAN-VSM-MIB", "vsmDestinationsName"))
if mibBuilder.loadTexts: vsmNPDestinationsEntry.setStatus('mandatory')
vsmNPDestinationsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 4, 6, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmNPDestinationsRowStatus.setStatus('mandatory')
vsmCardConfTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1), )
if mibBuilder.loadTexts: vsmCardConfTable.setStatus('mandatory')
vsmCardConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmCardSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmCardSubunitIndex"))
if mibBuilder.loadTexts: vsmCardConfEntry.setStatus('mandatory')
vsmCardSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardSlotIndex.setStatus('mandatory')
vsmCardSubunitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 2), XylanModuleSubunit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmCardSubunitIndex.setStatus('mandatory')
vsmCardIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCardIpAddr.setStatus('mandatory')
vsmCardIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCardIpMask.setStatus('mandatory')
vsmCardIpDefGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCardIpDefGateway.setStatus('mandatory')
vsmCardFirstDigitWaitDur = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCardFirstDigitWaitDur.setStatus('mandatory')
vsmCardInterDigitWaitDur = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCardInterDigitWaitDur.setStatus('mandatory')
vsmCardDialTimeDur = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(30000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCardDialTimeDur.setStatus('mandatory')
vsmCardTermDigitStr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCardTermDigitStr.setStatus('mandatory')
vsmCardH323InFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 10), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCardH323InFastStart.setStatus('mandatory')
vsmCardH323OutFastStart = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 11), VsmEnableDisabled().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCardH323OutFastStart.setStatus('mandatory')
vsmCardH323AutomaticAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 12), VsmEnableDisabled().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCardH323AutomaticAnswer.setStatus('mandatory')
vsmCardConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("activate", 1), ("active", 2), ("inactive", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmCardConfigStatus.setStatus('mandatory')
vsmPortConfTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2), )
if mibBuilder.loadTexts: vsmPortConfTable.setStatus('mandatory')
vsmPortConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmPortSlotNum"), (0, "XYLAN-VSM-MIB", "vsmPortNum"))
if mibBuilder.loadTexts: vsmPortConfEntry.setStatus('mandatory')
vsmPortSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmPortSlotNum.setStatus('mandatory')
vsmPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmPortNum.setStatus('mandatory')
vsmPortInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("t1", 1), ("e1", 2), ("prie1", 3), ("e1IsdnPri", 4), ("briEuro", 5))).clone('t1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmPortInterfaceType.setStatus('mandatory')
vsmPortDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tone", 1), ("pulse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDialType.setStatus('deprecated')
vsmPortDsx1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("vsmPortDsx1ESF", 2), ("vsmPortDsx1D4", 3), ("vsmPortDsx1E1", 4), ("vsmPortDsx1E1-CRC", 5), ("vsmPortDsx1E1-MF", 6), ("vsmPortDsx1E1-CRC-MF", 7), ("vsmPortDsx1E1Unframed", 8))).clone('other')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1LineType.setStatus('mandatory')
vsmPortDsx1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vsmPortDsx1JBZS", 1), ("vsmPortDsx1B8ZS", 2), ("vsmPortDsx1HDB3", 3), ("vsmPortDsx1AMI", 4), ("other", 5))).clone('vsmPortDsx1JBZS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1LineCoding.setStatus('mandatory')
vsmPortDsx1SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vsmPortDsx1SendNoCode", 1), ("vsmPortDsx1SendLineCode", 2), ("vsmPortDsx1SendPayloadCode", 3), ("vsmPortDsx1SendResetCode", 4), ("vsmPortDsx1SendQRS", 5), ("vsmPortDsx1Send511Pattern", 6), ("vsmPortDsx1Send3in24Pattern", 7), ("vsmPortDsx1SendOtherTestPattern", 8))).clone('vsmPortDsx1SendNoCode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1SendCode.setStatus('mandatory')
vsmPortDsx1CircuitIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1CircuitIdentifier.setStatus('mandatory')
vsmPortDsx1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vsmPortDsx1NoLoop", 1), ("vsmPortDsx1PayloadLoop", 2), ("vsmPortDsx1LineLoop", 3), ("vsmDSx1Inward", 4), ("vsmPortDsx1OtherLoop", 5))).clone('vsmPortDsx1NoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1LoopbackConfig.setStatus('mandatory')
vsmPortDsx1LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmPortDsx1LineStatus.setStatus('deprecated')
vsmPortDsx1SignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("cas", 2), ("ccs", 3), ("messageOriented", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1SignalMode.setStatus('mandatory')
vsmPortDsx1TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3))).clone('loopTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1TransmitClockSource.setStatus('mandatory')
vsmPortDsx1Fdl = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vsmPortDsx1Fdl-none", 1), ("vsmPortDsx1Att-54016", 2), ("vsmPortDsx1Ansi-T1-403", 3), ("vsmPortDsx1T1-403-ATT", 4), ("other", 5))).clone('vsmPortDsx1Fdl-none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1Fdl.setStatus('mandatory')
vsmPortDsx1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("shortHaul", 1), ("longHaul", 2))).clone('shortHaul')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1LineBuildOut.setStatus('mandatory')
vsmPortDsx1CableType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cable75ohm", 1), ("cable120ohm", 2))).clone('cable120ohm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1CableType.setStatus('mandatory')
vsmPortDsx1LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1LineLength.setStatus('mandatory')
vsmPortDsx1LineStatusChangeTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1LineStatusChangeTrapEnable.setStatus('mandatory')
vsmPortDsx1LoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmPortDsx1LoopbackStatus.setStatus('deprecated')
vsmPortDsx1PortFdlRole = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("user", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1PortFdlRole.setStatus('mandatory')
vsmPortDsx1PortNfasAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1PortNfasAlign.setStatus('mandatory')
vsmPortDsx1PortAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("att1", 1), ("att2", 2), ("att3", 3), ("att4", 4))).clone('att1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortDsx1PortAttenuation.setStatus('mandatory')
vsmPortIsdnProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("net", 1), ("user", 2), ("qmaster", 3), ("qslave", 4))).clone('qmaster')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortIsdnProtocol.setStatus('mandatory')
vsmPortIsdnSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("net3", 1), ("net5", 2))).clone('net5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmPortIsdnSwitchType.setStatus('mandatory')
vsmChanConfTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3), )
if mibBuilder.loadTexts: vsmChanConfTable.setStatus('mandatory')
vsmChanConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmChanConfEntry.setStatus('mandatory')
vsmChanSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmChanSlotIndex.setStatus('mandatory')
vsmChanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmChanPortIndex.setStatus('mandatory')
vsmChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmChanIndex.setStatus('mandatory')
vsmChanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("telephony", 1), ("passThrough", 2), ("plar", 3), ("wan", 4))).clone('telephony')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmChanMode.setStatus('mandatory')
vsmChanPlarNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmChanPlarNumber.setStatus('mandatory')
vsmChanPerferredVoiceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmChanPerferredVoiceProfile.setStatus('mandatory')
vsmChanPerferredFaxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmChanPerferredFaxProfile.setStatus('mandatory')
vsmChanPerferredModemProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmChanPerferredModemProfile.setStatus('mandatory')
vsmChanISDNChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dchannel", 1), ("bchannel", 2), ("none", 3))).clone('bchannel')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmChanISDNChanType.setStatus('mandatory')
vsmChanDslId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmChanDslId.setStatus('deprecated')
vsmChanDChannelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmChanDChannelPort.setStatus('deprecated')
vsmChanDChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmChanDChannel.setStatus('deprecated')
vsmChanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("activate", 1), ("deactivate", 2), ("in-service", 3), ("out-of-service", 4), ("invalid", 5))).clone('out-of-service')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmChanStatus.setStatus('mandatory')
vsmAllowedCodingProfileTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 4), )
if mibBuilder.loadTexts: vsmAllowedCodingProfileTable.setStatus('mandatory')
vsmAllowedCodingProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 4, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"), (0, "XYLAN-VSM-MIB", "vsmCodingProfName"))
if mibBuilder.loadTexts: vsmAllowedCodingProfileEntry.setStatus('mandatory')
vsmAllowedCodingProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 5, 4, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmAllowedCodingProfileRowStatus.setStatus('mandatory')
vsmConfigDumpFlag = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 26, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmConfigDumpFlag.setStatus('mandatory')
vsmConfigRebootFlag = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 26, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmConfigRebootFlag.setStatus('mandatory')
vsmConfigDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 26, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vsmConfigDumpFileName.setStatus('mandatory')
vsmTeleLevelTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 1), )
if mibBuilder.loadTexts: vsmTeleLevelTable.setStatus('mandatory')
vsmTeleLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 1, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmTeleLevelEntry.setStatus('mandatory')
vsmTeleLevelRx = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTeleLevelRx.setStatus('mandatory')
vsmTeleLevelTx = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTeleLevelTx.setStatus('mandatory')
vsmTeleLevelRxMean = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTeleLevelRxMean.setStatus('mandatory')
vsmTeleLevelTxMean = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTeleLevelTxMean.setStatus('mandatory')
vsmTeleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 2), )
if mibBuilder.loadTexts: vsmTeleStatsTable.setStatus('mandatory')
vsmTeleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 2, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmTeleStatsEntry.setStatus('mandatory')
vsmNumOffHooks = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmNumOffHooks.setStatus('mandatory')
vsmNumOnHooks = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmNumOnHooks.setStatus('mandatory')
vsmNumSeizures = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmNumSeizures.setStatus('mandatory')
vsmNumToneDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmNumToneDigits.setStatus('mandatory')
vsmNumPulseDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmNumPulseDigits.setStatus('mandatory')
vsmResetTeleStats = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 2, 1, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vsmResetTeleStats.setStatus('mandatory')
vsmDspVPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 3), )
if mibBuilder.loadTexts: vsmDspVPStatsTable.setStatus('mandatory')
vsmDspVPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 3, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmDspVPStatsEntry.setStatus('mandatory')
vsmDspAvgPlayoutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspAvgPlayoutDelay.setStatus('mandatory')
vsmDspLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspLostPackets.setStatus('mandatory')
vsmDspReplayPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspReplayPackets.setStatus('mandatory')
vsmDspIdlePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspIdlePackets.setStatus('mandatory')
vsmDspDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspDroppedPackets.setStatus('mandatory')
vsmDspReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspReceivedPackets.setStatus('mandatory')
vsmDspRxAvgFrameJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspRxAvgFrameJitter.setStatus('mandatory')
vsmResetDspPlayOutStats = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 3, 1, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vsmResetDspPlayOutStats.setStatus('mandatory')
vsmDspRxTxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4), )
if mibBuilder.loadTexts: vsmDspRxTxStatsTable.setStatus('mandatory')
vsmDspRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmDspRxTxStatsEntry.setStatus('mandatory')
vsmDspRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspRxPackets.setStatus('mandatory')
vsmDspTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspTxPackets.setStatus('mandatory')
vsmDspSilencePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspSilencePackets.setStatus('mandatory')
vsmDspRxMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspRxMinJitter.setStatus('mandatory')
vsmDspRxMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspRxMaxJitter.setStatus('mandatory')
vsmDspRxAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspRxAvgJitter.setStatus('mandatory')
vsmTxDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTxDroppedFrames.setStatus('mandatory')
vsmTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmTxOctets.setStatus('mandatory')
vsmRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmRxOctets.setStatus('mandatory')
vsmAal2CodPrfChgs = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmAal2CodPrfChgs.setStatus('mandatory')
vsmDtmfTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDtmfTxOctets.setStatus('mandatory')
vsmDtmfRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDtmfRxOctets.setStatus('mandatory')
vsmResetDspRxTxStats = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 4, 1, 13), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vsmResetDspRxTxStats.setStatus('mandatory')
vsmDspVoiceErrorStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 5), )
if mibBuilder.loadTexts: vsmDspVoiceErrorStatsTable.setStatus('mandatory')
vsmDspVoiceErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 5, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmDspVoiceErrorStatsEntry.setStatus('mandatory')
vsmDspInvalidHeaderCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspInvalidHeaderCount.setStatus('mandatory')
vsmDspMicroOverflowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspMicroOverflowCount.setStatus('mandatory')
vsmDspLostEnhPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspLostEnhPackets.setStatus('mandatory')
vsmDspMissingCorePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspMissingCorePackets.setStatus('mandatory')
vsmDspPktsLostByNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspPktsLostByNetwork.setStatus('mandatory')
vsmResetDspErrorStats = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 5, 1, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vsmResetDspErrorStats.setStatus('mandatory')
vsmDspModemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 6), )
if mibBuilder.loadTexts: vsmDspModemStatsTable.setStatus('mandatory')
vsmDspModemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 6, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmDspModemStatsEntry.setStatus('mandatory')
vsmDspModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspModemStatus.setStatus('mandatory')
vsmDspModemRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspModemRxLevel.setStatus('mandatory')
vsmDspModemRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspModemRxRate.setStatus('mandatory')
vsmDspModemTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspModemTxLevel.setStatus('mandatory')
vsmDspModemTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspModemTxRate.setStatus('mandatory')
vsmDspModemCarrFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspModemCarrFreqOffset.setStatus('mandatory')
vsmDspModemTimeFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspModemTimeFreqOffset.setStatus('mandatory')
vsmResetDspModemStats = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 6, 1, 8), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vsmResetDspModemStats.setStatus('mandatory')
vsmDspFaxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 7), )
if mibBuilder.loadTexts: vsmDspFaxStatsTable.setStatus('mandatory')
vsmDspFaxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 7, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmDspFaxStatsEntry.setStatus('mandatory')
vsmDspFaxTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspFaxTxPackets.setStatus('mandatory')
vsmDspFaxRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspFaxRxPackets.setStatus('mandatory')
vsmDspFaxLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspFaxLostPackets.setStatus('mandatory')
vsmDspFaxDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspFaxDroppedPackets.setStatus('mandatory')
vsmDspFaxRxOutOfSeqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmDspFaxRxOutOfSeqPkts.setStatus('mandatory')
vsmResetDspFaxStats = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 7, 1, 6), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vsmResetDspFaxStats.setStatus('mandatory')
vsmISDNTeleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 9), )
if mibBuilder.loadTexts: vsmISDNTeleStatsTable.setStatus('mandatory')
vsmISDNTeleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 9, 1), ).setIndexNames((0, "XYLAN-VSM-MIB", "vsmChanSlotIndex"), (0, "XYLAN-VSM-MIB", "vsmChanPortIndex"), (0, "XYLAN-VSM-MIB", "vsmChanIndex"))
if mibBuilder.loadTexts: vsmISDNTeleStatsEntry.setStatus('mandatory')
vsmNbCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmNbCalls.setStatus('mandatory')
vsmNbLocalSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmNbLocalSetup.setStatus('mandatory')
vsmNbRemoteSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmNbRemoteSetup.setStatus('mandatory')
vsmNbDropCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmNbDropCalls.setStatus('mandatory')
vsmNbFaxSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmNbFaxSwitch.setStatus('mandatory')
vsmNbModemSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsmNbModemSwitch.setStatus('mandatory')
vsmResetISDNTeleStats = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 26, 7, 9, 1, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vsmResetISDNTeleStats.setStatus('mandatory')
mibBuilder.exportSymbols("XYLAN-VSM-MIB", vsmPortDialType=vsmPortDialType, vsmDspLostEnhPackets=vsmDspLostEnhPackets, vsmDspTxPackets=vsmDspTxPackets, vsmDspInvalidHeaderCount=vsmDspInvalidHeaderCount, vsmNumPlanTable=vsmNumPlanTable, vsmTeleStatsEntry=vsmTeleStatsEntry, vsmSignalingChannelEntry=vsmSignalingChannelEntry, vsmSigChanEmDelayTable=vsmSigChanEmDelayTable, vsmCodingProfFaxCdThresh=vsmCodingProfFaxCdThresh, vsmSigChanIdleNoise=vsmSigChanIdleNoise, vsmSigChanCompanding=vsmSigChanCompanding, vsmSigChanFxoLSRingingDebounce=vsmSigChanFxoLSRingingDebounce, vsmDspIdlePackets=vsmDspIdlePackets, vsmCardDialTimeDur=vsmCardDialTimeDur, vsmSigTmplEmWinkEntry=vsmSigTmplEmWinkEntry, vsmSigChanHangupWaitLimit=vsmSigChanHangupWaitLimit, vsmSigTmplFxsGSSeizeDetect=vsmSigTmplFxsGSSeizeDetect, vsmSigChanOverrideDataSetup=vsmSigChanOverrideDataSetup, vsmSigTmplEmDelayInDelayDurMin=vsmSigTmplEmDelayInDelayDurMin, vsmPortDsx1LoopbackConfig=vsmPortDsx1LoopbackConfig, vsmNumPulseDigits=vsmNumPulseDigits, vsmDspVPStatsTable=vsmDspVPStatsTable, vsmCodingProfFaxHsPktRate=vsmCodingProfFaxHsPktRate, vsmSigChanEmCommonDialTone=vsmSigChanEmCommonDialTone, vsmSigChanFxsGSGenerateCallerId=vsmSigChanFxsGSGenerateCallerId, vsmSigChanFxoGSRingingInterPulse=vsmSigChanFxoGSRingingInterPulse, vsmSigChanFxoGSLoopCurrentDebounce=vsmSigChanFxoGSLoopCurrentDebounce, vsmTeleLevelTable=vsmTeleLevelTable, vsmNbCalls=vsmNbCalls, vsmPhoneGroupSitePrefixString=vsmPhoneGroupSitePrefixString, vsmNPDestinationsTable=vsmNPDestinationsTable, vsmSigTmplFxoGSTable=vsmSigTmplFxoGSTable, vsmPortDsx1TransmitClockSource=vsmPortDsx1TransmitClockSource, vsmSigTmplEmWinkInWinkWaitMin=vsmSigTmplEmWinkInWinkWaitMin, vsmSigChanFxoLSLoopCurrentDebounce=vsmSigChanFxoLSLoopCurrentDebounce, vsmSigChanFxsGSOnHookDebounce=vsmSigChanFxsGSOnHookDebounce, vsmCodingProfVEchoCanComfNoiseMode=vsmCodingProfVEchoCanComfNoiseMode, vsmDestinationsType=vsmDestinationsType, vsmRxOctets=vsmRxOctets, vsmSigChanFxsLSTable=vsmSigChanFxsLSTable, vsmSigTmplName=vsmSigTmplName, vsmSigChanAcEchoCanSetSpGain=vsmSigChanAcEchoCanSetSpGain, vsmPortDsx1PortAttenuation=vsmPortDsx1PortAttenuation, vsmDspFaxDroppedPackets=vsmDspFaxDroppedPackets, vsmSigChanEmDelayOutDelayChk=vsmSigChanEmDelayOutDelayChk, vsmSigChanAssignTmplStatus=vsmSigChanAssignTmplStatus, vsmCodingProfFaxLsRedun=vsmCodingProfFaxLsRedun, vsmVNCardH323OutFastStart=vsmVNCardH323OutFastStart, vsmTeleLevelRx=vsmTeleLevelRx, vsmCardSubunitIndex=vsmCardSubunitIndex, vsmSigTmplFxsLSTable=vsmSigTmplFxsLSTable, vsmSigTmplFxsLSEntry=vsmSigTmplFxsLSEntry, vsmSigChanV18ToneDetThFraction=vsmSigChanV18ToneDetThFraction, vsmSigTmplFxoGSEntry=vsmSigTmplFxoGSEntry, vsmSigChanEmCommonOffHookDebounce=vsmSigChanEmCommonOffHookDebounce, vsmSigChanFxoLSBattReversalDebounce=vsmSigChanFxoLSBattReversalDebounce, vsmSigChanCallerIdName=vsmSigChanCallerIdName, vsmCardH323OutFastStart=vsmCardH323OutFastStart, vsmPhoneGroupSitePrefixEnable=vsmPhoneGroupSitePrefixEnable, vsmCodingProfEntry=vsmCodingProfEntry, vsmSigChanFxoLSTable=vsmSigChanFxoLSTable, vsmPhoneGroupName=vsmPhoneGroupName, vsmDspModemStatus=vsmDspModemStatus, vsmSigChanOverrideFullCallProgressTones=vsmSigChanOverrideFullCallProgressTones, vsmPhoneGroupType=vsmPhoneGroupType, vsmSigChanEchoCancelNonSens=vsmSigChanEchoCancelNonSens, vsmDspDroppedPackets=vsmDspDroppedPackets, vsmSigChanFxoLSAnswerAfterRings=vsmSigChanFxoLSAnswerAfterRings, vsmSigChanOverrideNetworkOverlapDialing=vsmSigChanOverrideNetworkOverlapDialing, vsmChanStatus=vsmChanStatus, vsmNumToneDigits=vsmNumToneDigits, vsmDspPktsLostByNetwork=vsmDspPktsLostByNetwork, vsmSigChanCallerIdNameStr=vsmSigChanCallerIdNameStr, vsmDspFaxRxPackets=vsmDspFaxRxPackets, vsmCodingProfNetBufMaxDelay=vsmCodingProfNetBufMaxDelay, vsmCardH323InFastStart=vsmCardH323InFastStart, vsmVNTmplH323GateKeeperPhoneGroupEntry=vsmVNTmplH323GateKeeperPhoneGroupEntry, vsmSigChanFxoGSRingingInterCycle=vsmSigChanFxoGSRingingInterCycle, vsmVNCardRTPPortMode=vsmVNCardRTPPortMode, vsmNumPlanDescription=vsmNumPlanDescription, vsmPhoneGroupFormat=vsmPhoneGroupFormat, vsmVNCardRTPPortBase=vsmVNCardRTPPortBase, vsmDspVoiceErrorStatsTable=vsmDspVoiceErrorStatsTable, vsmDspMicroOverflowCount=vsmDspMicroOverflowCount, vsmCodingProfileGroup=vsmCodingProfileGroup, vsmDestinationsNetworkPort=vsmDestinationsNetworkPort, vsmNPPhoneGroupTable=vsmNPPhoneGroupTable, vsmSignalingTemplateTable=vsmSignalingTemplateTable, vsmCodingProfFaxHsRedun=vsmCodingProfFaxHsRedun, vsmNumPlanName=vsmNumPlanName, vsmTeleLevelRxMean=vsmTeleLevelRxMean, vsmSigChanAnswerWaitLimitCtrl=vsmSigChanAnswerWaitLimitCtrl, vsmNumOffHooks=vsmNumOffHooks, vsmSigChanEmCommonTable=vsmSigChanEmCommonTable, vsmPhoneGroupUsageVoice=vsmPhoneGroupUsageVoice, vsmCardIpAddr=vsmCardIpAddr, vsmConfigDumpFileName=vsmConfigDumpFileName, vsmSigChanEmWinkOutWinkDurMax=vsmSigChanEmWinkOutWinkDurMax, vsmSigChanFxoLSRingingInterPulse=vsmSigChanFxoLSRingingInterPulse, vsmVNCardH323GateKeeperPhoneGroupTable=vsmVNCardH323GateKeeperPhoneGroupTable, vsmNbRemoteSetup=vsmNbRemoteSetup, vsmSigChanFxsLSOnHookDebounce=vsmSigChanFxsLSOnHookDebounce, vsmChanDslId=vsmChanDslId, vsmSigTmplFxoLSEntry=vsmSigTmplFxoLSEntry, vsmSigChanEmDelayOutDelayDurMin=vsmSigChanEmDelayOutDelayDurMin, vsmNbLocalSetup=vsmNbLocalSetup, vsmNPDestinationsRowStatus=vsmNPDestinationsRowStatus, vsmSigChanFxsLSCadenceCoefficient=vsmSigChanFxsLSCadenceCoefficient, vsmSigChanOverrideModemSetup=vsmSigChanOverrideModemSetup, vsmNumPlanHuntMethod=vsmNumPlanHuntMethod, vsmTeleLevelTx=vsmTeleLevelTx, vsmChanPlarNumber=vsmChanPlarNumber, vsmCodingProfV18ToneDet=vsmCodingProfV18ToneDet, vsmISDNTeleStatsTable=vsmISDNTeleStatsTable, vsmSigChanCallLimit=vsmSigChanCallLimit, vsmNbModemSwitch=vsmNbModemSwitch, vsmSigChanFxsLSAnswClearDetect=vsmSigChanFxsLSAnswClearDetect, vsmChanPerferredModemProfile=vsmChanPerferredModemProfile, vsmResetDspFaxStats=vsmResetDspFaxStats, vsmVNCardH323GateKeeperPhoneGroupRowStatus=vsmVNCardH323GateKeeperPhoneGroupRowStatus, vsmSigChanFxsLSGenerateCallerId=vsmSigChanFxsLSGenerateCallerId, vsmSigChanFxoGSConnectionLoopOpenDebounce=vsmSigChanFxoGSConnectionLoopOpenDebounce, vsmVNCardH323InFastStart=vsmVNCardH323InFastStart, vsmSigTmplIndex=vsmSigTmplIndex, vsmSigChanFxoGSTipGroundDebounce=vsmSigChanFxoGSTipGroundDebounce, vsmDestinationsStartChan=vsmDestinationsStartChan, vsmSigChanAssignTmplName=vsmSigChanAssignTmplName, vsmSigChanCallLimitCtrl=vsmSigChanCallLimitCtrl, vsmSigChanCallProgressToneDetCfg=vsmSigChanCallProgressToneDetCfg, vsmVNCardEntry=vsmVNCardEntry, vsmTeleLevelTxMean=vsmTeleLevelTxMean, vsmNumPlanAllActivate=vsmNumPlanAllActivate, vsmVNTmplRowStatus=vsmVNTmplRowStatus, vsmSigChanFxsLSSeizeDetect=vsmSigChanFxsLSSeizeDetect, vsmPhoneGroupUsageData=vsmPhoneGroupUsageData, vsmSigChanFxsLSCPCDur=vsmSigChanFxsLSCPCDur, vsmResetISDNTeleStats=vsmResetISDNTeleStats, vsmSigChanEmCommonClearConfWaitMax=vsmSigChanEmCommonClearConfWaitMax, vsmSigChanFxoGSMaxTipGroundWait=vsmSigChanFxoGSMaxTipGroundWait, vsmSigTmplFxsLSOffHookDebounce=vsmSigTmplFxsLSOffHookDebounce, vsmSigTmplEmCommonEntry=vsmSigTmplEmCommonEntry, vsmDspModemCarrFreqOffset=vsmDspModemCarrFreqOffset, vsmCodingProfSwitchover=vsmCodingProfSwitchover, vsmSigChanFaxHoldoverDelay=vsmSigChanFaxHoldoverDelay, vsmSigChanOutToneDigitDur=vsmSigChanOutToneDigitDur, vsmPortDsx1LineBuildOut=vsmPortDsx1LineBuildOut, vsmSigChanEmCommonGuardOut=vsmSigChanEmCommonGuardOut, vsmSigChanOutDialType=vsmSigChanOutDialType, vsmCodingProfSilenceLevel=vsmCodingProfSilenceLevel, vsmDspModemRxRate=vsmDspModemRxRate, vsmCardInterDigitWaitDur=vsmCardInterDigitWaitDur, vsmSigChanFxsGSMinLoopOpen=vsmSigChanFxsGSMinLoopOpen, vsmSigChanEmDelayOutIntegrityChk=vsmSigChanEmDelayOutIntegrityChk, vsmCodingProfCallProgToneDet=vsmCodingProfCallProgToneDet, vsmNbDropCalls=vsmNbDropCalls, vsmSigChanEmDelayInDigitIgnore=vsmSigChanEmDelayInDigitIgnore, vsmSigChanFxsLSCPCWait=vsmSigChanFxsLSCPCWait, vsmSigTmplFxsGSTable=vsmSigTmplFxsGSTable, vsmSigChanCallerIdNumber=vsmSigChanCallerIdNumber, vsmDestinationsRowStatus=vsmDestinationsRowStatus, vsmSigTmplEmImmedGlareReport=vsmSigTmplEmImmedGlareReport, vsmSigChanEmImmedTable=vsmSigChanEmImmedTable, vsmSigChanAnswerWaitLimit=vsmSigChanAnswerWaitLimit, vsmPhysicalGroup=vsmPhysicalGroup, vsmSigChanEmDelayInDelayDurMin=vsmSigChanEmDelayInDelayDurMin, vsmDestinationsEndChan=vsmDestinationsEndChan, vsmPortConfTable=vsmPortConfTable, vsmCardIpDefGateway=vsmCardIpDefGateway, vsmCodingProfFaxTimeOut=vsmCodingProfFaxTimeOut, vsmSigChanUnused=vsmSigChanUnused, vsmVNTemplateTable=vsmVNTemplateTable, vsmSigChanEmWinkTable=vsmSigChanEmWinkTable, vsmCodingProfileTable=vsmCodingProfileTable, vsmPhoneGroupForwardingPrefixEnable=vsmPhoneGroupForwardingPrefixEnable, vsmDspReplayPackets=vsmDspReplayPackets, vsmResetDspErrorStats=vsmResetDspErrorStats, vsmDspVoiceErrorStatsEntry=vsmDspVoiceErrorStatsEntry, vsmDspRxTxStatsEntry=vsmDspRxTxStatsEntry, vsmSigChanEmCommonOnHookDebounce=vsmSigChanEmCommonOnHookDebounce, vsmChanPerferredFaxProfile=vsmChanPerferredFaxProfile, vsmPhoneGroupRowStatus=vsmPhoneGroupRowStatus, vsmDspRxAvgFrameJitter=vsmDspRxAvgFrameJitter, vsmSigChanAcEchoCanFreeSpGain=vsmSigChanAcEchoCanFreeSpGain, vsmChanSlotIndex=vsmChanSlotIndex, vsmSigChanFxsLSRingId=vsmSigChanFxsLSRingId, vsmDestinationsIpAddr=vsmDestinationsIpAddr, vsmSigChanEmDelayOutDelayDurMax=vsmSigChanEmDelayOutDelayDurMax, vsmSigChanAcousticEchoCancellerMode=vsmSigChanAcousticEchoCancellerMode, vsmVNCardH323GatekeeperMode=vsmVNCardH323GatekeeperMode, vsmCodingProfFaxRate=vsmCodingProfFaxRate, vsmAllowedCodingProfileEntry=vsmAllowedCodingProfileEntry, vsmSigTmplEmDelayEntry=vsmSigTmplEmDelayEntry, vsmPGNumber=vsmPGNumber, vsmConfigRebootFlag=vsmConfigRebootFlag, vsmCodingProfRowStatus=vsmCodingProfRowStatus, vsmSigChanOutToneInterDigitDur=vsmSigChanOutToneInterDigitDur, vsmDestinationsH323Name=vsmDestinationsH323Name, vsmCardFirstDigitWaitDur=vsmCardFirstDigitWaitDur, vsmAllowedCodingProfileTable=vsmAllowedCodingProfileTable, vsmChanMode=vsmChanMode, vsmPhoneGroupTable=vsmPhoneGroupTable, vsmSigChanSinFreqToneDetThLev=vsmSigChanSinFreqToneDetThLev, vsmDspFaxStatsTable=vsmDspFaxStatsTable, vsmDspModemTimeFreqOffset=vsmDspModemTimeFreqOffset, vsmSignalingTemplateEntry=vsmSignalingTemplateEntry, vsmSigChanToneTable=vsmSigChanToneTable, vsmDspMissingCorePackets=vsmDspMissingCorePackets, vsmCodingProfVoiceComfortNoiseLevel=vsmCodingProfVoiceComfortNoiseLevel, vsmSignalingChannelTable=vsmSignalingChannelTable, vsmCodingProfEchoCanRefreshCfg=vsmCodingProfEchoCanRefreshCfg, vsmSigChanFxoGSTable=vsmSigChanFxoGSTable, vsmVNCardTable=vsmVNCardTable, vsmChanPerferredVoiceProfile=vsmChanPerferredVoiceProfile, vsmSigChanV18ToneDetThHangTime=vsmSigChanV18ToneDetThHangTime, vsmPhoneGroupStripDigitLength=vsmPhoneGroupStripDigitLength, vsmPortDsx1PortNfasAlign=vsmPortDsx1PortNfasAlign, vsmVNTemplateEntry=vsmVNTemplateEntry, vsmSigChanTransmitGain=vsmSigChanTransmitGain, vsmCodingProfFaxTxLevel=vsmCodingProfFaxTxLevel, vsmSigChanOverrideFAXSetup=vsmSigChanOverrideFAXSetup, vsmSigChanAcousticEchoCanOper=vsmSigChanAcousticEchoCanOper, vsmDspReceivedPackets=vsmDspReceivedPackets, vsmSigChanFxsLSEntry=vsmSigChanFxsLSEntry, vsmPortDsx1PortFdlRole=vsmPortDsx1PortFdlRole, vsmSigTmplFxoLSTable=vsmSigTmplFxoLSTable, vsmSigChanFxsGSRingGroundDebounce=vsmSigChanFxsGSRingGroundDebounce, vsmDspSilencePackets=vsmDspSilencePackets, vsmPhoneGroupUsageModem=vsmPhoneGroupUsageModem, vsmTeleStatsTable=vsmTeleStatsTable, vsmCodingProfNetBufMode=vsmCodingProfNetBufMode, vsmPortDsx1LineLength=vsmPortDsx1LineLength, vsmPortIsdnSwitchType=vsmPortIsdnSwitchType, vsmVNCardH323GatekeeperCtrl=vsmVNCardH323GatekeeperCtrl, vsmPortDsx1CircuitIdentifier=vsmPortDsx1CircuitIdentifier, vsmSigTmplFxoLSRingingDebounce=vsmSigTmplFxoLSRingingDebounce, vsmSigChanEmWinkInWinkWaitMax=vsmSigChanEmWinkInWinkWaitMax, vsmSigChanFxoLSCallerIdDetect=vsmSigChanFxoLSCallerIdDetect, vsmNPPhoneGroupRowStatus=vsmNPPhoneGroupRowStatus, vsmChanPortIndex=vsmChanPortIndex, vsmPortDsx1LoopbackStatus=vsmPortDsx1LoopbackStatus, vsmDspModemRxLevel=vsmDspModemRxLevel, vsmSigChanFxsGSSeizeDetect=vsmSigChanFxsGSSeizeDetect, vsmSigChanOverrideQSIGInfoElementTransport=vsmSigChanOverrideQSIGInfoElementTransport, vsmSigChanFxoLSGuardOut=vsmSigChanFxoLSGuardOut, vsmCodingProfPktInterval=vsmCodingProfPktInterval, vsmSigChanSinFreqToneDetThTime=vsmSigChanSinFreqToneDetThTime, vsmSigChanOverrideInfoElementTransport=vsmSigChanOverrideInfoElementTransport, vsmSigChanFxsGSTable=vsmSigChanFxsGSTable, vsmSigChanFxoLSEntry=vsmSigChanFxoLSEntry, vsmSigChanFxoLSCPCDetectDur=vsmSigChanFxoLSCPCDetectDur, vsmCodingProfSilenceDetect=vsmCodingProfSilenceDetect, vsmPortDsx1SendCode=vsmPortDsx1SendCode, vsmDspRxPackets=vsmDspRxPackets, vsmVNCardH323GatekeeperAddr=vsmVNCardH323GatekeeperAddr)
mibBuilder.exportSymbols("XYLAN-VSM-MIB", vsmSigChanOverrideVoiceSetup=vsmSigChanOverrideVoiceSetup, vsmDspFaxStatsEntry=vsmDspFaxStatsEntry, vsmPGNumbersRowStatus=vsmPGNumbersRowStatus, vsmSigChanEmDelayEntry=vsmSigChanEmDelayEntry, vsmSigChanEmWinkInDigitIgnore=vsmSigChanEmWinkInDigitIgnore, vsmSigChanEmWinkInWinkDur=vsmSigChanEmWinkInWinkDur, vsmDspRxTxStatsTable=vsmDspRxTxStatsTable, vsmSigTmplEmCommonOffHookDebounce=vsmSigTmplEmCommonOffHookDebounce, vsmNumPlanEntry=vsmNumPlanEntry, vsmNumOnHooks=vsmNumOnHooks, vsmSigChanEmImmedGlareReport=vsmSigChanEmImmedGlareReport, vsmDspLostPackets=vsmDspLostPackets, vsmPortDsx1LineType=vsmPortDsx1LineType, vsmSigChanEmWinkOutWinkDurMin=vsmSigChanEmWinkOutWinkDurMin, vsmDspFaxLostPackets=vsmDspFaxLostPackets, vsmPhoneGroupForwardingPrefix=vsmPhoneGroupForwardingPrefix, vsmDestinationsName=vsmDestinationsName, vsmSigChanOverrideRingBack=vsmSigChanOverrideRingBack, vsmCardSlotIndex=vsmCardSlotIndex, vsmNumPlanRowStatus=vsmNumPlanRowStatus, vsmPortDsx1CableType=vsmPortDsx1CableType, vsmNetworkGroup=vsmNetworkGroup, vsmSigChanFxoGSCallerIdDetect=vsmSigChanFxoGSCallerIdDetect, vsmCodingProfVADThreshLevel=vsmCodingProfVADThreshLevel, vsmCodingProfId=vsmCodingProfId, vsmSigChanFxsGSMaxWaitLoop=vsmSigChanFxsGSMaxWaitLoop, vsmVNCardH323Notification=vsmVNCardH323Notification, vsmSigChanFxoLSRingingInterCycle=vsmSigChanFxoLSRingingInterCycle, vsmCodingProfName=vsmCodingProfName, vsmTxOctets=vsmTxOctets, vsmISDNTeleStatsEntry=vsmISDNTeleStatsEntry, vsmResetTeleStats=vsmResetTeleStats, vsmDspVPStatsEntry=vsmDspVPStatsEntry, vsmPhoneGroupEntry=vsmPhoneGroupEntry, vsmVNCardH323DisplayName=vsmVNCardH323DisplayName, vsmNPPhoneGroupEntry=vsmNPPhoneGroupEntry, vsmAal2CodPrfChgs=vsmAal2CodPrfChgs, vsmDestinationsEntry=vsmDestinationsEntry, vsmStatsGroup=vsmStatsGroup, vsmCardConfigStatus=vsmCardConfigStatus, vsmSigChanHangupWaitLimitCtrl=vsmSigChanHangupWaitLimitCtrl, vsmDtmfRxOctets=vsmDtmfRxOctets, vsmSigChanOutWait=vsmSigChanOutWait, vsmSigChanAcouEchoCanNonProc=vsmSigChanAcouEchoCanNonProc, vsmChanConfEntry=vsmChanConfEntry, vsmDspModemStatsTable=vsmDspModemStatsTable, vsmSigChanFxsGSEntry=vsmSigChanFxsGSEntry, vsmSigChanFxsGSRingId=vsmSigChanFxsGSRingId, vsmSigChanFxsLSOffHookDebounce=vsmSigChanFxsLSOffHookDebounce, vsmSigTmplRowStatus=vsmSigTmplRowStatus, vsmCardTermDigitStr=vsmCardTermDigitStr, vsmVNTmplH323GateKeeperPhoneGroupTable=vsmVNTmplH323GateKeeperPhoneGroupTable, vsmPortNum=vsmPortNum, vsmSigChanFxoGSEntry=vsmSigChanFxoGSEntry, vsmSignalingGroup=vsmSignalingGroup, vsmPortDsx1SignalMode=vsmPortDsx1SignalMode, vsmSigTmplEmImmedTable=vsmSigTmplEmImmedTable, vsmSigChanFxsGSOrigClearDetect=vsmSigChanFxsGSOrigClearDetect, vsmSigChanFxsGSOffHookDebounce=vsmSigChanFxsGSOffHookDebounce, vsmVNCardH323AllowCallsWithoutGatekeeper=vsmVNCardH323AllowCallsWithoutGatekeeper, vsmCardH323AutomaticAnswer=vsmCardH323AutomaticAnswer, vsmPortSlotNum=vsmPortSlotNum, vsmPortDsx1LineCoding=vsmPortDsx1LineCoding, vsmDspModemStatsEntry=vsmDspModemStatsEntry, vsmPortDsx1LineStatusChangeTrapEnable=vsmPortDsx1LineStatusChangeTrapEnable, vsmSigChanFxoGSAnswerAfterRings=vsmSigChanFxoGSAnswerAfterRings, vsmSigChanCallProgressToneDetControl=vsmSigChanCallProgressToneDetControl, vsmPortDsx1LineStatus=vsmPortDsx1LineStatus, vsmConfigDumpFlag=vsmConfigDumpFlag, vsmSigTmplFxsGSEntry=vsmSigTmplFxsGSEntry, vsmNumSeizures=vsmNumSeizures, vsmChanIndex=vsmChanIndex, vsmDspRxMaxJitter=vsmDspRxMaxJitter, vsmCodingProfECTailDelay=vsmCodingProfECTailDelay, vsmCodingProfEchoCanRefreshState=vsmCodingProfEchoCanRefreshState, vsmSigTmplEmDelayTable=vsmSigTmplEmDelayTable, vsmSigChanFxsLSOrigClearDetect=vsmSigChanFxsLSOrigClearDetect, vsmSigChanEmCommonGuardAll=vsmSigChanEmCommonGuardAll, vsmSigChanProtocol=vsmSigChanProtocol, vsmCodingProfVIF=vsmCodingProfVIF, vsmSigChanFxsGSAnswClearDetect=vsmSigChanFxsGSAnswClearDetect, vsmSigChanFxsGSCadenceCoefficient=vsmSigChanFxsGSCadenceCoefficient, vsmCodingProfSilenceDetectTime=vsmCodingProfSilenceDetectTime, vsmPGNumbersTable=vsmPGNumbersTable, vsmTxDroppedFrames=vsmTxDroppedFrames, VsmEnableDisabled=VsmEnableDisabled, vsmCodingProfVADThreshMode=vsmCodingProfVADThreshMode, vsmCardConfEntry=vsmCardConfEntry, vsmDspModemTxLevel=vsmDspModemTxLevel, vsmVNTmplH323GateKeeperPhoneGroupRowStatus=vsmVNTmplH323GateKeeperPhoneGroupRowStatus, VsmOnOff=VsmOnOff, vsmAllowedCodingProfileRowStatus=vsmAllowedCodingProfileRowStatus, vsmSigChanEmWinkInWinkWaitMin=vsmSigChanEmWinkInWinkWaitMin, vsmVNCardH323EndpointRegType=vsmVNCardH323EndpointRegType, vsmSigChanReceiveGain=vsmSigChanReceiveGain, vsmTeleLevelEntry=vsmTeleLevelEntry, vsmDspAvgPlayoutDelay=vsmDspAvgPlayoutDelay, vsmCardConfTable=vsmCardConfTable, vsmSigTmplEmCommonTable=vsmSigTmplEmCommonTable, vsmSigTmplEmWinkTable=vsmSigTmplEmWinkTable, vsmSigTmplEmImmedEntry=vsmSigTmplEmImmedEntry, VsmVoiceCodingType=VsmVoiceCodingType, vsmSigChanFxoGSRingingDebounce=vsmSigChanFxoGSRingingDebounce, vsmCodingProfDtmfRelay=vsmCodingProfDtmfRelay, vsmNPDestinationsEntry=vsmNPDestinationsEntry, vsmCodingProfG711ModemResampMode=vsmCodingProfG711ModemResampMode, vsmSigChanEmDelayInDelayDurMax=vsmSigChanEmDelayInDelayDurMax, vsmConfigControlGroup=vsmConfigControlGroup, vsmNbFaxSwitch=vsmNbFaxSwitch, vsmCodingProfFaxTcfMethod=vsmCodingProfFaxTcfMethod, vsmSigChanV18ToneDetThLevel=vsmSigChanV18ToneDetThLevel, vsmCodingProfNetBufNomDelay=vsmCodingProfNetBufNomDelay, vsmResetDspRxTxStats=vsmResetDspRxTxStats, vsmCodingProfCodingType=vsmCodingProfCodingType, vsmSigChanEmWinkOutWinkWaitMax=vsmSigChanEmWinkOutWinkWaitMax, vsmSigChanOverrideInBandCodecSwitching=vsmSigChanOverrideInBandCodecSwitching, vsmChanConfTable=vsmChanConfTable, vsmSigChanCallerIdNumberStr=vsmSigChanCallerIdNumberStr, vsmCodingProfVAD=vsmCodingProfVAD, vsmSigTmplFxoGSConnectionLoopOpenDebounce=vsmSigTmplFxoGSConnectionLoopOpenDebounce, vsmChanDChannel=vsmChanDChannel, vsmSigChanEmCommonClearConfDetect=vsmSigChanEmCommonClearConfDetect, vsmPortConfEntry=vsmPortConfEntry, vsmDialSchemeGroup=vsmDialSchemeGroup, vsmCodingProfCallerId=vsmCodingProfCallerId, vsmVNTmplIndex=vsmVNTmplIndex, vsmVNCardH323GatekeeperMaxRetries=vsmVNCardH323GatekeeperMaxRetries, vsmVNTmplName=vsmVNTmplName, vsmSigChanEmCommonEntry=vsmSigChanEmCommonEntry, vsmChanISDNChanType=vsmChanISDNChanType, vsmCodingProfSinFreqToneDet=vsmCodingProfSinFreqToneDet, vsmPhoneGroupUsageFax=vsmPhoneGroupUsageFax, vsmChanDChannelPort=vsmChanDChannelPort, vsmSigChanOverrideInBandCallProgressTones=vsmSigChanOverrideInBandCallProgressTones, vsmPortInterfaceType=vsmPortInterfaceType, vsmCodingProfECNonLinear=vsmCodingProfECNonLinear, vsmSigChanEmWinkEntry=vsmSigChanEmWinkEntry, vsmSigChanFxsGSMinRingGround=vsmSigChanFxsGSMinRingGround, vsmResetDspPlayOutStats=vsmResetDspPlayOutStats, vsmDspRxAvgJitter=vsmDspRxAvgJitter, vsmDspFaxTxPackets=vsmDspFaxTxPackets, vsmSigChanEmCommonSeizeDetect=vsmSigChanEmCommonSeizeDetect, vsmDspRxMinJitter=vsmDspRxMinJitter, vsmCardIpMask=vsmCardIpMask, vsmDspFaxRxOutOfSeqPkts=vsmDspFaxRxOutOfSeqPkts, vsmDtmfTxOctets=vsmDtmfTxOctets, vsmDspModemTxRate=vsmDspModemTxRate, vsmDestinationsTable=vsmDestinationsTable, vsmCodingProfEC=vsmCodingProfEC, vsmResetDspModemStats=vsmResetDspModemStats, RowStatus=RowStatus, vsmPortIsdnProtocol=vsmPortIsdnProtocol, vsmVNCardH323GateKeeperPhoneGroupEntry=vsmVNCardH323GateKeeperPhoneGroupEntry, vsmPortDsx1Fdl=vsmPortDsx1Fdl, vsmSigChanFxoLSCPCDetectCtrl=vsmSigChanFxoLSCPCDetectCtrl, vsmPGNumbersEntry=vsmPGNumbersEntry, vsmSigChanEmCommonHangUpWait=vsmSigChanEmCommonHangUpWait, vsmSigChanEmImmedEntry=vsmSigChanEmImmedEntry, vsmSigChanFxoGSBattReversalDebounce=vsmSigChanFxoGSBattReversalDebounce, vsmDestinationsLocalPort=vsmDestinationsLocalPort, vsmSigChanEmCommonClearDetect=vsmSigChanEmCommonClearDetect, vsmSigChanEmCommonMinConnectTime=vsmSigChanEmCommonMinConnectTime, vsmSigChanEmImmedDigitWait=vsmSigChanEmImmedDigitWait, vsmSigChanOverridePSUCodecSwitching=vsmSigChanOverridePSUCodecSwitching)
