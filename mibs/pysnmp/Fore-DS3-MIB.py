#
# PySNMP MIB module Fore-DS3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-DS3-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:03:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
asx, = mibBuilder.importSymbols("Fore-Common-MIB", "asx")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ModuleIdentity, IpAddress, Bits, iso, Counter32, MibIdentifier, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "IpAddress", "Bits", "iso", "Counter32", "MibIdentifier", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "ObjectIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
foreDs3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3))
if mibBuilder.loadTexts: foreDs3.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: foreDs3.setOrganization('FORE')
ds3ConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1))
ds3StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2))
ds3ConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1), )
if mibBuilder.loadTexts: ds3ConfTable.setStatus('current')
ds3ConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1), ).setIndexNames((0, "Fore-DS3-MIB", "ds3ConfBoard"), (0, "Fore-DS3-MIB", "ds3ConfModule"), (0, "Fore-DS3-MIB", "ds3ConfPort"))
if mibBuilder.loadTexts: ds3ConfEntry.setStatus('current')
ds3ConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3ConfBoard.setStatus('current')
ds3ConfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3ConfModule.setStatus('current')
ds3ConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3ConfPort.setStatus('current')
ds3LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3Other", 1), ("ds3M23", 2), ("ds3SYNTRAN", 3), ("ds3CbitParity", 4), ("ds3ClearChannel", 5))).clone('ds3CbitParity')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3LineType.setStatus('current')
ds3LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3Other", 1), ("ds3B3ZS", 2))).clone('ds3B3ZS')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3LineCoding.setStatus('current')
ds3SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ds3SendNoCode", 1), ("ds3SendLineCode", 2), ("ds3SendPayloadCode", 3), ("ds3SendResetCode", 4), ("ds3SendDS1LoopCode", 5), ("ds3SendTestPattern", 6))).clone('ds3SendNoCode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3SendCode.setStatus('current')
ds3ReceiveCode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ds3ReceiveNoCode", 1), ("ds3ReceiveLineCode", 2), ("ds3ReceivePayloadCode", 3), ("ds3ReceiveResetCode", 4), ("ds3ReceiveDS1LoopCode", 5), ("ds3ReceiveTestPattern", 6))).clone('ds3ReceiveNoCode')).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3ReceiveCode.setStatus('current')
ds3LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ds3NoLoop", 1), ("ds3CellLoop", 2), ("ds3PayloadLoop", 3), ("ds3DiagLoop", 4), ("ds3LineLoop", 5), ("ds3OtherLoop", 6))).clone('ds3NoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3LoopbackConfig.setStatus('current')
ds3TxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rxTiming", 1), ("localTiming", 2))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3TxClockSource.setStatus('current')
ds3RxScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("descrambling", 1), ("noDescrambling", 2))).clone('noDescrambling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3RxScrambling.setStatus('current')
ds3TxScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scrambling", 1), ("noScrambling", 2))).clone('noScrambling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3TxScrambling.setStatus('current')
ds3LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3LineStatus.setStatus('current')
ds3IdleUnassignedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2))).clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3IdleUnassignedCells.setStatus('current')
ds3LineTypeFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3Hcs", 1), ("ds3Plcp", 2))).clone('ds3Hcs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3LineTypeFraming.setStatus('current')
ds3LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3LineLt225", 1), ("ds3LineGt225", 2))).clone('ds3LineGt225')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3LineLength.setStatus('current')
ds3PbitPErrThrSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 16), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3PbitPErrThrSeconds.setStatus('current')
ds3PbitPErrThrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3PbitPErrThrErrors.setStatus('current')
ds3PbitPErrFailEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3PbitPErrFailEnable.setStatus('current')
ds3SigFailBer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3SigFailBer.setStatus('current')
ds3SigDegradeBer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3SigDegradeBer.setStatus('current')
ds3BerErrorModel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("errorModelNone", 0), ("errorModelRandom", 1), ("errorModelBurst", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds3BerErrorModel.setStatus('current')
ds3BerState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("berStateOk", 0), ("berStateSigDegrade", 1), ("berStateSigFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3BerState.setStatus('current')
ds3FramingTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1), )
if mibBuilder.loadTexts: ds3FramingTable.setStatus('current')
ds3FramingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1), ).setIndexNames((0, "Fore-DS3-MIB", "ds3FramingBoard"), (0, "Fore-DS3-MIB", "ds3FramingModule"), (0, "Fore-DS3-MIB", "ds3FramingPort"))
if mibBuilder.loadTexts: ds3FramingEntry.setStatus('current')
ds3FramingBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingBoard.setStatus('current')
ds3FramingModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingModule.setStatus('current')
ds3FramingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingPort.setStatus('current')
ds3FramingLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingLOSs.setStatus('current')
ds3FramingLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingLCVs.setStatus('current')
ds3FramingSumLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingSumLCVs.setStatus('current')
ds3FramingFERRs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingFERRs.setStatus('current')
ds3FramingOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingOOFs.setStatus('current')
ds3FramingFERFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingFERFs.setStatus('current')
ds3FramingAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingAISs.setStatus('current')
ds3FramingPbitPERRs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingPbitPERRs.setStatus('current')
ds3FramingCbitPERRs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingCbitPERRs.setStatus('current')
ds3FramingFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingFEBEs.setStatus('current')
ds3FramingIDLEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3FramingIDLEs.setStatus('current')
ds3PlcpTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 2), )
if mibBuilder.loadTexts: ds3PlcpTable.setStatus('current')
ds3PlcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 2, 1), ).setIndexNames((0, "Fore-DS3-MIB", "ds3PlcpBoard"), (0, "Fore-DS3-MIB", "ds3PlcpModule"), (0, "Fore-DS3-MIB", "ds3PlcpPort"))
if mibBuilder.loadTexts: ds3PlcpEntry.setStatus('current')
ds3PlcpBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PlcpBoard.setStatus('current')
ds3PlcpModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PlcpModule.setStatus('current')
ds3PlcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PlcpPort.setStatus('current')
ds3PlcpFERRs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PlcpFERRs.setStatus('current')
ds3PlcpLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PlcpLOFs.setStatus('current')
ds3PlcpBIP8s = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PlcpBIP8s.setStatus('current')
ds3PlcpFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PlcpFEBEs.setStatus('current')
ds3PlcpYellows = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3PlcpYellows.setStatus('current')
ds3AtmTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 3), )
if mibBuilder.loadTexts: ds3AtmTable.setStatus('current')
ds3AtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 3, 1), ).setIndexNames((0, "Fore-DS3-MIB", "ds3AtmBoard"), (0, "Fore-DS3-MIB", "ds3AtmModule"), (0, "Fore-DS3-MIB", "ds3AtmPort"))
if mibBuilder.loadTexts: ds3AtmEntry.setStatus('current')
ds3AtmBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3AtmBoard.setStatus('current')
ds3AtmModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3AtmModule.setStatus('current')
ds3AtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3AtmPort.setStatus('current')
ds3AtmHCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3AtmHCSs.setStatus('current')
ds3AtmRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3AtmRxCells.setStatus('current')
ds3AtmTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3AtmTxCells.setStatus('current')
ds3AtmLCDs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 3, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3AtmLCDs.setStatus('current')
mibBuilder.exportSymbols("Fore-DS3-MIB", ds3PbitPErrFailEnable=ds3PbitPErrFailEnable, ds3ConfModule=ds3ConfModule, ds3LineTypeFraming=ds3LineTypeFraming, ds3FramingPort=ds3FramingPort, ds3SendCode=ds3SendCode, ds3AtmLCDs=ds3AtmLCDs, ds3PlcpYellows=ds3PlcpYellows, ds3LineLength=ds3LineLength, ds3AtmTxCells=ds3AtmTxCells, ds3BerState=ds3BerState, ds3AtmEntry=ds3AtmEntry, ds3FramingLOSs=ds3FramingLOSs, ds3FramingOOFs=ds3FramingOOFs, ds3AtmModule=ds3AtmModule, ds3BerErrorModel=ds3BerErrorModel, ds3ConfGroup=ds3ConfGroup, ds3TxScrambling=ds3TxScrambling, ds3FramingLCVs=ds3FramingLCVs, ds3LineType=ds3LineType, ds3PlcpBoard=ds3PlcpBoard, ds3PlcpModule=ds3PlcpModule, ds3RxScrambling=ds3RxScrambling, ds3FramingSumLCVs=ds3FramingSumLCVs, ds3ReceiveCode=ds3ReceiveCode, ds3FramingEntry=ds3FramingEntry, ds3FramingFERFs=ds3FramingFERFs, ds3LineCoding=ds3LineCoding, ds3FramingPbitPERRs=ds3FramingPbitPERRs, ds3PlcpPort=ds3PlcpPort, ds3FramingFEBEs=ds3FramingFEBEs, ds3PbitPErrThrErrors=ds3PbitPErrThrErrors, PYSNMP_MODULE_ID=foreDs3, ds3TxClockSource=ds3TxClockSource, ds3SigFailBer=ds3SigFailBer, ds3AtmPort=ds3AtmPort, ds3FramingBoard=ds3FramingBoard, ds3ConfEntry=ds3ConfEntry, ds3LoopbackConfig=ds3LoopbackConfig, ds3IdleUnassignedCells=ds3IdleUnassignedCells, foreDs3=foreDs3, ds3FramingModule=ds3FramingModule, ds3FramingFERRs=ds3FramingFERRs, ds3PlcpBIP8s=ds3PlcpBIP8s, ds3PlcpFERRs=ds3PlcpFERRs, ds3FramingCbitPERRs=ds3FramingCbitPERRs, ds3FramingIDLEs=ds3FramingIDLEs, ds3ConfTable=ds3ConfTable, ds3AtmBoard=ds3AtmBoard, ds3ConfPort=ds3ConfPort, ds3FramingAISs=ds3FramingAISs, ds3SigDegradeBer=ds3SigDegradeBer, ds3LineStatus=ds3LineStatus, ds3PbitPErrThrSeconds=ds3PbitPErrThrSeconds, ds3AtmHCSs=ds3AtmHCSs, ds3StatsGroup=ds3StatsGroup, ds3FramingTable=ds3FramingTable, ds3AtmTable=ds3AtmTable, ds3PlcpTable=ds3PlcpTable, ds3PlcpLOFs=ds3PlcpLOFs, ds3PlcpEntry=ds3PlcpEntry, ds3ConfBoard=ds3ConfBoard, ds3PlcpFEBEs=ds3PlcpFEBEs, ds3AtmRxCells=ds3AtmRxCells)
