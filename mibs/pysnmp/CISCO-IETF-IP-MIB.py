#
# PySNMP MIB module CISCO-IETF-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-IP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:43:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndexOrZero, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex", "InterfaceIndex")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Counter64, MibIdentifier, ObjectIdentity, Integer32, Bits, Unsigned32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, iso, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "MibIdentifier", "ObjectIdentity", "Integer32", "Bits", "Unsigned32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "iso", "Counter32", "IpAddress")
RowPointer, TextualConvention, PhysAddress, DisplayString, TruthValue, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "RowPointer", "TextualConvention", "PhysAddress", "DisplayString", "TruthValue", "TimeStamp")
ciscoIetfIpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 86))
ciscoIetfIpMIB.setRevisions(('2002-03-04 00:00',))
if mibBuilder.loadTexts: ciscoIetfIpMIB.setLastUpdated('200203040000Z')
if mibBuilder.loadTexts: ciscoIetfIpMIB.setOrganization('Cisco Systems, Inc.')
ciscoIetfIpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 86, 1))
cIp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1))
cIpv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 2))
cIcmp = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3))
class Ipv6AddrIfIdentifier(TextualConvention, OctetString):
    status = 'current'
    displayHint = '2x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class ScopeId(TextualConvention, Unsigned32):
    status = 'current'

cIpv6Forwarding = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("notForwarding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIpv6Forwarding.setStatus('current')
cIpv6DefaultHopLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIpv6DefaultHopLimit.setStatus('current')
cIpv6InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 2, 3), )
if mibBuilder.loadTexts: cIpv6InterfaceTable.setStatus('current')
cIpv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-IETF-IP-MIB", "cIpv6InterfaceIfIndex"))
if mibBuilder.loadTexts: cIpv6InterfaceEntry.setStatus('current')
cIpv6InterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cIpv6InterfaceIfIndex.setStatus('current')
cIpv6InterfaceEffectiveMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 2, 3, 1, 2), Unsigned32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6InterfaceEffectiveMtu.setStatus('current')
cIpv6InterfaceReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6InterfaceReasmMaxSize.setStatus('current')
cIpv6InterfaceIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 2, 3, 1, 4), Ipv6AddrIfIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIpv6InterfaceIdentifier.setStatus('current')
cIpv6InterfaceIdentifierLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setUnits('bits').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cIpv6InterfaceIdentifierLength.setStatus('current')
cIpv6InterfacePhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 2, 3, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6InterfacePhysicalAddress.setStatus('current')
cIpAddressPfxTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 1), )
if mibBuilder.loadTexts: cIpAddressPfxTable.setStatus('current')
cIpAddressPfxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-IETF-IP-MIB", "cIpAddressPfxIfIndex"), (0, "CISCO-IETF-IP-MIB", "cIpAddressPfxType"), (0, "CISCO-IETF-IP-MIB", "cIpAddressPfxPfx"), (0, "CISCO-IETF-IP-MIB", "cIpAddressPfxLength"))
if mibBuilder.loadTexts: cIpAddressPfxEntry.setStatus('current')
cIpAddressPfxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cIpAddressPfxIfIndex.setStatus('current')
cIpAddressPfxType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cIpAddressPfxType.setStatus('current')
cIpAddressPfxPfx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 1, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36)))
if mibBuilder.loadTexts: cIpAddressPfxPfx.setStatus('current')
cIpAddressPfxLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 1, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: cIpAddressPfxLength.setStatus('current')
cIpAddressPfxOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("manual", 2), ("wellknown", 3), ("dhcp", 4), ("routeradv", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpAddressPfxOrigin.setStatus('current')
cIpAddressPfxOnLinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpAddressPfxOnLinkFlag.setStatus('current')
cIpAddressPfxAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpAddressPfxAutonomousFlag.setStatus('current')
cIpAddressPfxAdvPfdLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpAddressPfxAdvPfdLifetime.setStatus('current')
cIpAddressPfxAdvValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 1, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpAddressPfxAdvValidLifetime.setStatus('current')
cIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 2), )
if mibBuilder.loadTexts: cIpAddressTable.setStatus('current')
cIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-IETF-IP-MIB", "cIpAddressAddrType"), (0, "CISCO-IETF-IP-MIB", "cIpAddressAddr"))
if mibBuilder.loadTexts: cIpAddressEntry.setStatus('current')
cIpAddressAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cIpAddressAddrType.setStatus('current')
cIpAddressAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36)))
if mibBuilder.loadTexts: cIpAddressAddr.setStatus('current')
cIpAddressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 2, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpAddressIfIndex.setStatus('current')
cIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("broadcast", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpAddressType.setStatus('current')
cIpAddressPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 2, 1, 5), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpAddressPrefix.setStatus('current')
cIpAddressOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("manual", 2), ("wellknown", 3), ("dhcp", 4), ("linklayer", 5), ("random", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpAddressOrigin.setStatus('current')
cIpAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("preferred", 1), ("deprecated", 2), ("invalid", 3), ("inaccessible", 4), ("unknown", 5), ("tentative", 6), ("duplicate", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpAddressStatus.setStatus('current')
cInetNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 3), )
if mibBuilder.loadTexts: cInetNetToMediaTable.setStatus('current')
cInetNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IETF-IP-MIB", "cInetNetToMediaNetAddressType"), (0, "CISCO-IETF-IP-MIB", "cInetNetToMediaNetAddress"))
if mibBuilder.loadTexts: cInetNetToMediaEntry.setStatus('current')
cInetNetToMediaNetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cInetNetToMediaNetAddressType.setStatus('current')
cInetNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 3, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36)))
if mibBuilder.loadTexts: cInetNetToMediaNetAddress.setStatus('current')
cInetNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 3, 1, 3), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cInetNetToMediaPhysAddress.setStatus('current')
cInetNetToMediaLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cInetNetToMediaLastUpdated.setStatus('current')
cInetNetToMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4), ("local", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cInetNetToMediaType.setStatus('current')
cInetNetToMediaState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reachable", 1), ("stale", 2), ("delay", 3), ("probe", 4), ("invalid", 5), ("unknown", 6), ("incomplete", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cInetNetToMediaState.setStatus('current')
cIpv6ScopeIdTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4), )
if mibBuilder.loadTexts: cIpv6ScopeIdTable.setStatus('current')
cIpv6ScopeIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-IETF-IP-MIB", "cIpv6ScopeIdIfIndex"))
if mibBuilder.loadTexts: cIpv6ScopeIdEntry.setStatus('current')
cIpv6ScopeIdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cIpv6ScopeIdIfIndex.setStatus('current')
cIpv6ScopeIdLinkLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 2), ScopeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6ScopeIdLinkLocal.setStatus('current')
cIpv6ScopeIdSubnetLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 3), ScopeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6ScopeIdSubnetLocal.setStatus('current')
cIpv6ScopeIdAdminLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 4), ScopeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6ScopeIdAdminLocal.setStatus('current')
cIpv6ScopeIdSiteLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 5), ScopeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6ScopeIdSiteLocal.setStatus('current')
cIpv6ScopeId6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 6), ScopeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6ScopeId6.setStatus('current')
cIpv6ScopeId7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 7), ScopeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6ScopeId7.setStatus('current')
cIpv6ScopeIdOrganizationLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 8), ScopeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6ScopeIdOrganizationLocal.setStatus('current')
cIpv6ScopeId9 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 9), ScopeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6ScopeId9.setStatus('current')
cIpv6ScopeIdA = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 10), ScopeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6ScopeIdA.setStatus('current')
cIpv6ScopeIdB = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 11), ScopeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6ScopeIdB.setStatus('current')
cIpv6ScopeIdC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 12), ScopeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6ScopeIdC.setStatus('current')
cIpv6ScopeIdD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 1, 4, 1, 13), ScopeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIpv6ScopeIdD.setStatus('current')
cInetIcmpTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 1), )
if mibBuilder.loadTexts: cInetIcmpTable.setStatus('current')
cInetIcmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-IETF-IP-MIB", "cInetIcmpAFType"), (0, "CISCO-IETF-IP-MIB", "cInetIcmpIfIndex"))
if mibBuilder.loadTexts: cInetIcmpEntry.setStatus('current')
cInetIcmpAFType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cInetIcmpAFType.setStatus('current')
cInetIcmpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 1, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: cInetIcmpIfIndex.setStatus('current')
cInetIcmpInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cInetIcmpInMsgs.setStatus('current')
cInetIcmpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cInetIcmpInErrors.setStatus('current')
cInetIcmpOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cInetIcmpOutMsgs.setStatus('current')
cInetIcmpOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cInetIcmpOutErrors.setStatus('current')
cInetIcmpMsgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 2), )
if mibBuilder.loadTexts: cInetIcmpMsgTable.setStatus('current')
cInetIcmpMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-IETF-IP-MIB", "cInetIcmpMsgAFType"), (0, "CISCO-IETF-IP-MIB", "cInetIcmpMsgIfIndex"), (0, "CISCO-IETF-IP-MIB", "cInetIcmpMsgType"), (0, "CISCO-IETF-IP-MIB", "cInetIcmpMsgCode"))
if mibBuilder.loadTexts: cInetIcmpMsgEntry.setStatus('current')
cInetIcmpMsgAFType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cInetIcmpMsgAFType.setStatus('current')
cInetIcmpMsgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 2, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: cInetIcmpMsgIfIndex.setStatus('current')
cInetIcmpMsgType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: cInetIcmpMsgType.setStatus('current')
cInetIcmpMsgCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)))
if mibBuilder.loadTexts: cInetIcmpMsgCode.setStatus('current')
cInetIcmpMsgInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cInetIcmpMsgInPkts.setStatus('current')
cInetIcmpMsgOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 86, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cInetIcmpMsgOutPkts.setStatus('current')
ciscoIpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 86, 2))
ciscoIpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 86, 2, 1))
ciscoIpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 86, 2, 2))
ciscoIpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 86, 2, 1, 1)).setObjects(("CISCO-IETF-IP-MIB", "ciscoIpAddressPfxGroup"), ("CISCO-IETF-IP-MIB", "ciscoIpAddressGroup"), ("CISCO-IETF-IP-MIB", "ciscoInetNetToMediaGroup"), ("CISCO-IETF-IP-MIB", "ciscoInetIcmpGroup"), ("CISCO-IETF-IP-MIB", "ciscoInetIcmpMsgGroup"), ("CISCO-IETF-IP-MIB", "ciscoIpv6GeneralGroup"), ("CISCO-IETF-IP-MIB", "ciscoIpv6InterfaceGroup"), ("CISCO-IETF-IP-MIB", "ciscoIpv6ScopeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpMIBCompliance = ciscoIpMIBCompliance.setStatus('current')
ciscoIpAddressPfxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 86, 2, 2, 1)).setObjects(("CISCO-IETF-IP-MIB", "cIpAddressPfxOrigin"), ("CISCO-IETF-IP-MIB", "cIpAddressPfxOnLinkFlag"), ("CISCO-IETF-IP-MIB", "cIpAddressPfxAutonomousFlag"), ("CISCO-IETF-IP-MIB", "cIpAddressPfxAdvPfdLifetime"), ("CISCO-IETF-IP-MIB", "cIpAddressPfxAdvValidLifetime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpAddressPfxGroup = ciscoIpAddressPfxGroup.setStatus('current')
ciscoIpAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 86, 2, 2, 2)).setObjects(("CISCO-IETF-IP-MIB", "cIpAddressIfIndex"), ("CISCO-IETF-IP-MIB", "cIpAddressType"), ("CISCO-IETF-IP-MIB", "cIpAddressPrefix"), ("CISCO-IETF-IP-MIB", "cIpAddressOrigin"), ("CISCO-IETF-IP-MIB", "cIpAddressStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpAddressGroup = ciscoIpAddressGroup.setStatus('current')
ciscoInetNetToMediaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 86, 2, 2, 3)).setObjects(("CISCO-IETF-IP-MIB", "cInetNetToMediaPhysAddress"), ("CISCO-IETF-IP-MIB", "cInetNetToMediaLastUpdated"), ("CISCO-IETF-IP-MIB", "cInetNetToMediaType"), ("CISCO-IETF-IP-MIB", "cInetNetToMediaState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoInetNetToMediaGroup = ciscoInetNetToMediaGroup.setStatus('current')
ciscoInetIcmpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 86, 2, 2, 4)).setObjects(("CISCO-IETF-IP-MIB", "cInetIcmpInMsgs"), ("CISCO-IETF-IP-MIB", "cInetIcmpInErrors"), ("CISCO-IETF-IP-MIB", "cInetIcmpOutMsgs"), ("CISCO-IETF-IP-MIB", "cInetIcmpOutErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoInetIcmpGroup = ciscoInetIcmpGroup.setStatus('current')
ciscoInetIcmpMsgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 86, 2, 2, 5)).setObjects(("CISCO-IETF-IP-MIB", "cInetIcmpMsgInPkts"), ("CISCO-IETF-IP-MIB", "cInetIcmpMsgOutPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoInetIcmpMsgGroup = ciscoInetIcmpMsgGroup.setStatus('current')
ciscoIpv6GeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 86, 2, 2, 6)).setObjects(("CISCO-IETF-IP-MIB", "cIpv6Forwarding"), ("CISCO-IETF-IP-MIB", "cIpv6DefaultHopLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpv6GeneralGroup = ciscoIpv6GeneralGroup.setStatus('current')
ciscoIpv6InterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 86, 2, 2, 7)).setObjects(("CISCO-IETF-IP-MIB", "cIpv6InterfaceEffectiveMtu"), ("CISCO-IETF-IP-MIB", "cIpv6InterfaceReasmMaxSize"), ("CISCO-IETF-IP-MIB", "cIpv6InterfaceIdentifier"), ("CISCO-IETF-IP-MIB", "cIpv6InterfaceIdentifierLength"), ("CISCO-IETF-IP-MIB", "cIpv6InterfacePhysicalAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpv6InterfaceGroup = ciscoIpv6InterfaceGroup.setStatus('current')
ciscoIpv6ScopeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 86, 2, 2, 8)).setObjects(("CISCO-IETF-IP-MIB", "cIpv6ScopeIdLinkLocal"), ("CISCO-IETF-IP-MIB", "cIpv6ScopeIdSubnetLocal"), ("CISCO-IETF-IP-MIB", "cIpv6ScopeIdAdminLocal"), ("CISCO-IETF-IP-MIB", "cIpv6ScopeIdSiteLocal"), ("CISCO-IETF-IP-MIB", "cIpv6ScopeId6"), ("CISCO-IETF-IP-MIB", "cIpv6ScopeId7"), ("CISCO-IETF-IP-MIB", "cIpv6ScopeIdOrganizationLocal"), ("CISCO-IETF-IP-MIB", "cIpv6ScopeId9"), ("CISCO-IETF-IP-MIB", "cIpv6ScopeIdA"), ("CISCO-IETF-IP-MIB", "cIpv6ScopeIdB"), ("CISCO-IETF-IP-MIB", "cIpv6ScopeIdC"), ("CISCO-IETF-IP-MIB", "cIpv6ScopeIdD"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpv6ScopeGroup = ciscoIpv6ScopeGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-IETF-IP-MIB", cIpAddressPfxIfIndex=cIpAddressPfxIfIndex, cIpAddressPfxPfx=cIpAddressPfxPfx, cIpv6ScopeIdSubnetLocal=cIpv6ScopeIdSubnetLocal, cIp=cIp, cInetIcmpMsgEntry=cInetIcmpMsgEntry, cIpv6InterfaceIdentifierLength=cIpv6InterfaceIdentifierLength, cIpAddressStatus=cIpAddressStatus, cInetIcmpMsgType=cInetIcmpMsgType, cInetNetToMediaState=cInetNetToMediaState, cIpv6InterfaceEffectiveMtu=cIpv6InterfaceEffectiveMtu, cInetIcmpMsgInPkts=cInetIcmpMsgInPkts, cIpv6ScopeIdOrganizationLocal=cIpv6ScopeIdOrganizationLocal, cIpAddressPfxOnLinkFlag=cIpAddressPfxOnLinkFlag, cIpv6DefaultHopLimit=cIpv6DefaultHopLimit, ciscoIpv6InterfaceGroup=ciscoIpv6InterfaceGroup, cIpAddressOrigin=cIpAddressOrigin, cIpAddressEntry=cIpAddressEntry, ciscoIetfIpMIB=ciscoIetfIpMIB, cInetIcmpMsgIfIndex=cInetIcmpMsgIfIndex, cIpv6=cIpv6, cIpv6ScopeId9=cIpv6ScopeId9, cInetIcmpOutErrors=cInetIcmpOutErrors, cIpv6ScopeId7=cIpv6ScopeId7, cInetIcmpOutMsgs=cInetIcmpOutMsgs, cIpv6InterfaceEntry=cIpv6InterfaceEntry, cInetNetToMediaLastUpdated=cInetNetToMediaLastUpdated, cIpv6ScopeIdEntry=cIpv6ScopeIdEntry, cIpv6InterfaceIdentifier=cIpv6InterfaceIdentifier, cIpv6ScopeId6=cIpv6ScopeId6, cIpv6ScopeIdIfIndex=cIpv6ScopeIdIfIndex, cInetNetToMediaTable=cInetNetToMediaTable, cIpv6ScopeIdD=cIpv6ScopeIdD, ciscoIpv6GeneralGroup=ciscoIpv6GeneralGroup, cIpAddressType=cIpAddressType, ciscoIpAddressPfxGroup=ciscoIpAddressPfxGroup, cIpv6ScopeIdAdminLocal=cIpv6ScopeIdAdminLocal, cIpv6ScopeIdA=cIpv6ScopeIdA, cIpAddressPfxType=cIpAddressPfxType, cIpAddressAddrType=cIpAddressAddrType, cInetNetToMediaPhysAddress=cInetNetToMediaPhysAddress, cInetIcmpInMsgs=cInetIcmpInMsgs, cInetIcmpMsgAFType=cInetIcmpMsgAFType, cInetIcmpMsgOutPkts=cInetIcmpMsgOutPkts, ciscoIpMIBGroups=ciscoIpMIBGroups, cInetIcmpEntry=cInetIcmpEntry, cIpAddressPfxAdvValidLifetime=cIpAddressPfxAdvValidLifetime, ciscoIpAddressGroup=ciscoIpAddressGroup, cIpAddressPfxOrigin=cIpAddressPfxOrigin, cIpAddressTable=cIpAddressTable, ciscoInetIcmpMsgGroup=ciscoInetIcmpMsgGroup, cIpAddressAddr=cIpAddressAddr, cIpAddressPfxEntry=cIpAddressPfxEntry, cIpv6ScopeIdTable=cIpv6ScopeIdTable, cIpv6Forwarding=cIpv6Forwarding, cIpAddressIfIndex=cIpAddressIfIndex, ciscoIpMIBConformance=ciscoIpMIBConformance, cInetIcmpMsgTable=cInetIcmpMsgTable, ciscoIpMIBCompliance=ciscoIpMIBCompliance, cInetNetToMediaType=cInetNetToMediaType, cIcmp=cIcmp, cIpAddressPfxAutonomousFlag=cIpAddressPfxAutonomousFlag, cInetIcmpInErrors=cInetIcmpInErrors, cInetNetToMediaEntry=cInetNetToMediaEntry, cIpv6ScopeIdC=cIpv6ScopeIdC, cIpv6ScopeIdLinkLocal=cIpv6ScopeIdLinkLocal, ciscoIpMIBCompliances=ciscoIpMIBCompliances, cIpAddressPfxLength=cIpAddressPfxLength, cIpv6InterfaceIfIndex=cIpv6InterfaceIfIndex, ciscoInetNetToMediaGroup=ciscoInetNetToMediaGroup, cIpv6InterfacePhysicalAddress=cIpv6InterfacePhysicalAddress, cIpAddressPfxAdvPfdLifetime=cIpAddressPfxAdvPfdLifetime, cIpv6ScopeIdB=cIpv6ScopeIdB, cInetNetToMediaNetAddress=cInetNetToMediaNetAddress, cInetIcmpAFType=cInetIcmpAFType, PYSNMP_MODULE_ID=ciscoIetfIpMIB, cInetNetToMediaNetAddressType=cInetNetToMediaNetAddressType, ciscoIetfIpMIBObjects=ciscoIetfIpMIBObjects, cInetIcmpTable=cInetIcmpTable, cIpv6ScopeIdSiteLocal=cIpv6ScopeIdSiteLocal, cInetIcmpMsgCode=cInetIcmpMsgCode, Ipv6AddrIfIdentifier=Ipv6AddrIfIdentifier, cIpAddressPrefix=cIpAddressPrefix, ScopeId=ScopeId, ciscoInetIcmpGroup=ciscoInetIcmpGroup, cIpv6InterfaceTable=cIpv6InterfaceTable, cInetIcmpIfIndex=cInetIcmpIfIndex, cIpAddressPfxTable=cIpAddressPfxTable, cIpv6InterfaceReasmMaxSize=cIpv6InterfaceReasmMaxSize, ciscoIpv6ScopeGroup=ciscoIpv6ScopeGroup)
