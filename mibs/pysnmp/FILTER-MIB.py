#
# PySNMP MIB module FILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FILTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:00:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Bits, Counter32, Integer32, MibIdentifier, IpAddress, iso, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "Counter32", "Integer32", "MibIdentifier", "IpAddress", "iso", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "ModuleIdentity", "NotificationType")
RowStatus, TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "MacAddress", "DisplayString")
swFilterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 37))
if mibBuilder.loadTexts: swFilterMIB.setLastUpdated('0808120000Z')
if mibBuilder.loadTexts: swFilterMIB.setOrganization('D-Link Corp.')
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swFilterDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 1))
swFilterNetbios = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 2))
swFilterExtNetbios = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 3))
swFilterCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 4))
swFilterEgress = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 5))
swFilterNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 100))
swFilterDhcpPermitTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 1), )
if mibBuilder.loadTexts: swFilterDhcpPermitTable.setStatus('current')
swFilterDhcpPermitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 1, 1), ).setIndexNames((0, "FILTER-MIB", "swFilterDhcpServerIP"), (0, "FILTER-MIB", "swFilterDhcpClientMac"))
if mibBuilder.loadTexts: swFilterDhcpPermitEntry.setStatus('current')
swFilterDhcpServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFilterDhcpServerIP.setStatus('current')
swFilterDhcpClientMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFilterDhcpClientMac.setStatus('current')
swFilterDhcpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 1, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swFilterDhcpPorts.setStatus('current')
swFilterDhcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swFilterDhcpStatus.setStatus('current')
swFilterDhcpPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 2), )
if mibBuilder.loadTexts: swFilterDhcpPortTable.setStatus('current')
swFilterDhcpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 2, 1), ).setIndexNames((0, "FILTER-MIB", "swFilterDhcpPortIndex"))
if mibBuilder.loadTexts: swFilterDhcpPortEntry.setStatus('current')
swFilterDhcpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFilterDhcpPortIndex.setStatus('current')
swFilterDhcpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterDhcpPortState.setStatus('current')
swFilterDhcpServerIllegalSerLogSuppressDuration = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duration_1min", 1), ("duration_5min", 2), ("duration_30min", 3))).clone('duration_5min')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterDhcpServerIllegalSerLogSuppressDuration.setStatus('current')
swFilterDhcpServerTrapLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 37, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterDhcpServerTrapLogState.setStatus('current')
swFilterNetbiosTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 37, 2, 1), )
if mibBuilder.loadTexts: swFilterNetbiosTable.setStatus('current')
swFilterNetbiosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 37, 2, 1, 1), ).setIndexNames((0, "FILTER-MIB", "swFilterNetbiosPortIndex"))
if mibBuilder.loadTexts: swFilterNetbiosEntry.setStatus('current')
swFilterNetbiosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFilterNetbiosPortIndex.setStatus('current')
swFilterNetbiosState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterNetbiosState.setStatus('current')
swFilterExtNetbiosTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 37, 3, 1), )
if mibBuilder.loadTexts: swFilterExtNetbiosTable.setStatus('current')
swFilterExtNetbiosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 37, 3, 1, 1), ).setIndexNames((0, "FILTER-MIB", "swFilterExtNetbiosPortIndex"))
if mibBuilder.loadTexts: swFilterExtNetbiosEntry.setStatus('current')
swFilterExtNetbiosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFilterExtNetbiosPortIndex.setStatus('current')
swFilterExtNetbiosState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterExtNetbiosState.setStatus('current')
swFilterCPUL3CtrlPktTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1), )
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktTable.setStatus('current')
swFilterCPUL3CtrlPktEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1), ).setIndexNames((0, "FILTER-MIB", "swFilterCPUL3CtrlPktPortIndex"))
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktEntry.setStatus('current')
swFilterCPUL3CtrlPktPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktPortIndex.setStatus('current')
swFilterCPUL3CtrlPktRIPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktRIPState.setStatus('current')
swFilterCPUL3CtrlPktOSPFState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktOSPFState.setStatus('current')
swFilterCPUL3CtrlPktVRRPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktVRRPState.setStatus('current')
swFilterCPUL3CtrlPktPIMState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktPIMState.setStatus('current')
swFilterCPUL3CtrlPktDVMRPState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktDVMRPState.setStatus('current')
swFilterCPUL3CtrlPktIGMPQueryState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFilterCPUL3CtrlPktIGMPQueryState.setStatus('current')
swPktEgressFilterCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 37, 5, 1), )
if mibBuilder.loadTexts: swPktEgressFilterCtrlTable.setStatus('current')
swPktEgressFilterCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 37, 5, 1, 1), ).setIndexNames((0, "FILTER-MIB", "swPktEgressFilterPortIndex"))
if mibBuilder.loadTexts: swPktEgressFilterCtrlEntry.setStatus('current')
swPktEgressFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPktEgressFilterPortIndex.setStatus('current')
swPktEgressFilterUnknownUnicastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPktEgressFilterUnknownUnicastStatus.setStatus('current')
swPktEgressFilterUnknownMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 37, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPktEgressFilterUnknownMulticastStatus.setStatus('current')
swFilterNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 100, 0))
swFilterDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 37, 100, 0, 1)).setObjects(("FILTER-MIB", "swFilterDetectedIP"), ("FILTER-MIB", "swFilterDetectedport"))
if mibBuilder.loadTexts: swFilterDetectedTrap.setStatus('current')
swFilterNotificationBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 37, 100, 2))
swFilterDetectedIP = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 37, 100, 2, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swFilterDetectedIP.setStatus('current')
swFilterDetectedport = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 37, 100, 2, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swFilterDetectedport.setStatus('current')
mibBuilder.exportSymbols("FILTER-MIB", swFilterDhcpPermitTable=swFilterDhcpPermitTable, swFilterExtNetbiosPortIndex=swFilterExtNetbiosPortIndex, swFilterCPUL3CtrlPktDVMRPState=swFilterCPUL3CtrlPktDVMRPState, swFilterCPUL3CtrlPktRIPState=swFilterCPUL3CtrlPktRIPState, swPktEgressFilterUnknownMulticastStatus=swPktEgressFilterUnknownMulticastStatus, swFilterDhcpPortIndex=swFilterDhcpPortIndex, PYSNMP_MODULE_ID=swFilterMIB, swFilterEgress=swFilterEgress, swFilterDetectedTrap=swFilterDetectedTrap, swFilterNotify=swFilterNotify, swFilterDhcpPortEntry=swFilterDhcpPortEntry, swFilterCPUL3CtrlPktEntry=swFilterCPUL3CtrlPktEntry, swFilterExtNetbiosEntry=swFilterExtNetbiosEntry, swFilterDhcpPortTable=swFilterDhcpPortTable, swFilterNotifyPrefix=swFilterNotifyPrefix, swFilterDhcpServerTrapLogState=swFilterDhcpServerTrapLogState, swFilterNetbiosTable=swFilterNetbiosTable, swFilterCPUL3CtrlPktPortIndex=swFilterCPUL3CtrlPktPortIndex, swFilterCPUL3CtrlPktOSPFState=swFilterCPUL3CtrlPktOSPFState, swFilterCPUL3CtrlPktTable=swFilterCPUL3CtrlPktTable, swPktEgressFilterPortIndex=swPktEgressFilterPortIndex, swFilterNetbiosState=swFilterNetbiosState, swFilterExtNetbiosState=swFilterExtNetbiosState, swFilterNetbiosPortIndex=swFilterNetbiosPortIndex, swFilterDhcpPorts=swFilterDhcpPorts, swFilterNetbiosEntry=swFilterNetbiosEntry, swFilterDhcpPermitEntry=swFilterDhcpPermitEntry, swFilterDhcpPortState=swFilterDhcpPortState, swFilterCPU=swFilterCPU, swFilterCPUL3CtrlPktVRRPState=swFilterCPUL3CtrlPktVRRPState, swFilterDhcpClientMac=swFilterDhcpClientMac, swFilterCPUL3CtrlPktIGMPQueryState=swFilterCPUL3CtrlPktIGMPQueryState, swFilterNotificationBindings=swFilterNotificationBindings, swFilterCPUL3CtrlPktPIMState=swFilterCPUL3CtrlPktPIMState, swFilterDhcp=swFilterDhcp, swPktEgressFilterCtrlEntry=swPktEgressFilterCtrlEntry, swPktEgressFilterUnknownUnicastStatus=swPktEgressFilterUnknownUnicastStatus, swFilterDhcpServerIllegalSerLogSuppressDuration=swFilterDhcpServerIllegalSerLogSuppressDuration, swFilterNetbios=swFilterNetbios, swPktEgressFilterCtrlTable=swPktEgressFilterCtrlTable, PortList=PortList, swFilterDetectedIP=swFilterDetectedIP, swFilterExtNetbios=swFilterExtNetbios, swFilterExtNetbiosTable=swFilterExtNetbiosTable, swFilterDhcpServerIP=swFilterDhcpServerIP, swFilterMIB=swFilterMIB, swFilterDetectedport=swFilterDetectedport, swFilterDhcpStatus=swFilterDhcpStatus)
