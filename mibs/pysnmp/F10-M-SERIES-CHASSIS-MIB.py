#
# PySNMP MIB module F10-M-SERIES-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-M-SERIES-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:57:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
chAlarmVarInteger, chAlarmVarSlot, chAlarmVarString, chAlarmVarPort = mibBuilder.importSymbols("F10-CHASSIS-MIB", "chAlarmVarInteger", "chAlarmVarSlot", "chAlarmVarString", "chAlarmVarPort")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
F10ChassisType, F10HundredthdB, F10SwDate, F10MSeriesPortType, F10ProcessorModuleType, F10MfgDate = mibBuilder.importSymbols("FORCE10-TC", "F10ChassisType", "F10HundredthdB", "F10SwDate", "F10MSeriesPortType", "F10ProcessorModuleType", "F10MfgDate")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, Gauge32, Counter32, iso, NotificationType, ObjectIdentity, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, Unsigned32, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "Counter32", "iso", "NotificationType", "ObjectIdentity", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "Unsigned32", "MibIdentifier", "TimeTicks")
RowStatus, TextualConvention, DisplayString, MacAddress, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "MacAddress", "DateAndTime")
f10MSerChassisMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 19))
f10MSerChassisMib.setRevisions(('2012-11-02 12:00', '2012-12-03 12:00', '2012-03-27 12:00', '2007-10-03 12:00',))
if mibBuilder.loadTexts: f10MSerChassisMib.setLastUpdated('201203271200Z')
if mibBuilder.loadTexts: f10MSerChassisMib.setOrganization('Dell Inc.')
f10MSerChassisObject = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1))
chObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 1))
chSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2))
chAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4))
class CodeType(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'x'

class UnitType(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'x'

chNumStackUnits = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumStackUnits.setStatus('current')
chNumMaxStackableUnits = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumMaxStackableUnits.setStatus('current')
chStackUnitIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitIndexNext.setStatus('current')
chStackUnitTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1), )
if mibBuilder.loadTexts: chStackUnitTable.setStatus('current')
chStackUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitIndex"))
if mibBuilder.loadTexts: chStackUnitEntry.setStatus('current')
chStackUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: chStackUnitIndex.setStatus('current')
chStackUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 6), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chStackUnitNumber.setStatus('current')
chStackUnitSID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chStackUnitSID.setStatus('deprecated')
chStackUnitMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mgmtUnit", 1), ("standbyUnit", 2), ("stackUnit", 3), ("unassigned", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chStackUnitMgmtStatus.setStatus('current')
chStackUnitHwMgmtPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("unsassigned", 1), ("assigned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitHwMgmtPreference.setStatus('current')
chStackUnitAdmMgmtPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 15), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chStackUnitAdmMgmtPreference.setStatus('current')
chStackUnitModelID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitModelID.setStatus('current')
chStackUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("unsupported", 2), ("codeMismatch", 3), ("configMismatch", 4), ("unitDown", 5), ("notPresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitStatus.setStatus('current')
chStackUnitDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chStackUnitDescription.setStatus('current')
chStackUnitCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCodeVersion.setStatus('current')
chStackUnitCodeVersionInFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCodeVersionInFlash.setStatus('current')
chStackUnitSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitSerialNumber.setStatus('current')
chStackUnitUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitUpTime.setStatus('current')
chStackUnitTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitTemp.setStatus('current')
chStackUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 15), UnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitType.setStatus('current')
chStackUnitSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 16), F10ChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitSysType.setStatus('current')
chStackUnitVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitVendorId.setStatus('current')
chStackUnitMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 18), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitMfgDate.setStatus('current')
chStackUnitMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitMacAddress.setStatus('current')
chStackUnitPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitPartNum.setStatus('current')
chStackUnitProductRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitProductRev.setStatus('current')
chStackUnitProductOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitProductOrder.setStatus('current')
chStackUnitCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCountryCode.setStatus('current')
chStackUnitNum10GigEtherPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNum10GigEtherPorts.setStatus('current')
chStackUnitNumGigEtherPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNumGigEtherPorts.setStatus('current')
chStackUnitNumFastEtherPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNumFastEtherPorts.setStatus('current')
chStackUnitNumFanTrays = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNumFanTrays.setStatus('current')
chStackUnitNumPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNumPowerSupplies.setStatus('current')
chStackUnitNumPluggableModules = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNumPluggableModules.setStatus('current')
chStackUnitNum40GigEtherPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNum40GigEtherPorts.setStatus('current')
chStackUnitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 31), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chStackUnitRowStatus.setStatus('current')
chStackUnitPiecePartID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitPiecePartID.setStatus('current')
chStackUnitPPIDRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitPPIDRevision.setStatus('current')
chStackUnitServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitServiceTag.setStatus('current')
chStackUnitExpressServiceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitExpressServiceCode.setStatus('current')
chSysPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 2), )
if mibBuilder.loadTexts: chSysPowerSupplyTable.setStatus('current')
chSysPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 2, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"), (0, "F10-M-SERIES-CHASSIS-MIB", "chSysPowerSupplyIndex"))
if mibBuilder.loadTexts: chSysPowerSupplyEntry.setStatus('current')
chSysPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyIndex.setStatus('current')
chSysPowerSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("shutdown", 4), ("notPresent", 5), ("notFunctioning", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyOperStatus.setStatus('current')
chSysPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ac", 2), ("dc", 3), ("externalPowerSupply", 4), ("internalRedundant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyType.setStatus('current')
chSysFanTrayTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 3), )
if mibBuilder.loadTexts: chSysFanTrayTable.setStatus('current')
chSysFanTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 3, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"), (0, "F10-M-SERIES-CHASSIS-MIB", "chSysFanTrayIndex"))
if mibBuilder.loadTexts: chSysFanTrayEntry.setStatus('current')
chSysFanTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayIndex.setStatus('current')
chSysFanTrayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayOperStatus.setStatus('current')
chSysPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4), )
if mibBuilder.loadTexts: chSysPortTable.setStatus('current')
chSysPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"), (0, "F10-M-SERIES-CHASSIS-MIB", "chSysPortIndex"))
if mibBuilder.loadTexts: chSysPortEntry.setStatus('current')
chSysPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIndex.setStatus('current')
chSysPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 2), F10MSeriesPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortType.setStatus('current')
chSysPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortAdminStatus.setStatus('current')
chSysPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ready", 1), ("portDown", 2), ("portProblem", 3), ("cardProblem", 4), ("cardDown", 5), ("notPresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortOperStatus.setStatus('current')
chSysPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIfIndex.setStatus('current')
chSysPortXfpRecvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 6), F10HundredthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortXfpRecvPower.setStatus('current')
chSysPortXfpRecvTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortXfpRecvTemp.setStatus('current')
chSysPortXfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 8), F10HundredthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortXfpTxPower.setStatus('current')
chSysStackPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5), )
if mibBuilder.loadTexts: chSysStackPortTable.setStatus('current')
chSysStackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"), (0, "F10-M-SERIES-CHASSIS-MIB", "chSysStackPortIndex"))
if mibBuilder.loadTexts: chSysStackPortEntry.setStatus('current')
chSysStackPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortIndex.setStatus('current')
chSysStackPortConfiguredMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stack", 1), ("ethernet", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortConfiguredMode.setStatus('current')
chSysStackPortRunningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stack", 1), ("ethernet", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortRunningMode.setStatus('current')
chSysStackPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortLinkStatus.setStatus('current')
chSysStackPortLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortLinkSpeed.setStatus('current')
chSysStackPortRxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortRxDataRate.setStatus('current')
chSysStackPortRxErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortRxErrorRate.setStatus('current')
chSysStackPortRxTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortRxTotalErrors.setStatus('current')
chSysStackPortTxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortTxDataRate.setStatus('current')
chSysStackPortTxErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortTxErrorRate.setStatus('current')
chSysStackPortTxTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortTxTotalErrors.setStatus('current')
chSysProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 6), )
if mibBuilder.loadTexts: chSysProcessorTable.setStatus('current')
chSysProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 6, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"))
if mibBuilder.loadTexts: chSysProcessorEntry.setStatus('current')
chSysProcessorModule = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 6, 1, 1), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorModule.setStatus('current')
chSysProcessorUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 6, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorUpTime.setStatus('current')
chSysProcessorNvramSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorNvramSize.setStatus('current')
chSysProcessorMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorMemSize.setStatus('current')
chSysSwModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7), )
if mibBuilder.loadTexts: chSysSwModuleTable.setStatus('current')
chSysSwModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"))
if mibBuilder.loadTexts: chSysSwModuleEntry.setStatus('current')
chSysSwRuntimeImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwRuntimeImgVersion.setStatus('current')
chSysSwRuntimeImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 2), F10SwDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwRuntimeImgDate.setStatus('current')
chSysSwCurrentBootImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgVersion.setStatus('current')
chSysSwCurrentBootImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgDate.setStatus('current')
chSysSwCurrentBootImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgStatus.setStatus('current')
chSysSwBackupBootImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgVersion.setStatus('current')
chSysSwBackupBootImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgDate.setStatus('current')
chSysSwBackupBootImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgStatus.setStatus('current')
chSysSwNextRebootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootImage-A", 1), ("bootImage-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwNextRebootImage.setStatus('current')
chSysSwCurrentBootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootImage-A", 1), ("bootImage-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImage.setStatus('current')
chSysSwInPartitionAImgVers = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwInPartitionAImgVers.setStatus('current')
chSysSwInPartitionBImgVers = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwInPartitionBImgVers.setStatus('current')
chStackUnitUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8), )
if mibBuilder.loadTexts: chStackUnitUtilTable.setStatus('current')
chStackUnitUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"))
if mibBuilder.loadTexts: chStackUnitUtilEntry.setStatus('current')
chStackUnitCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1, 1), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCpuType.setStatus('current')
chStackUnitCpuUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCpuUtil5Sec.setStatus('current')
chStackUnitCpuUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCpuUtil1Min.setStatus('current')
chStackUnitCpuUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCpuUtil5Min.setStatus('current')
chStackUnitMemUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitMemUsageUtil.setStatus('current')
chStackUnitFlashUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitFlashUsageUtil.setStatus('current')
chSysSwCoresTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9), )
if mibBuilder.loadTexts: chSysSwCoresTable.setStatus('current')
chSysCoresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"), (0, "F10-M-SERIES-CHASSIS-MIB", "chSysCoresInstance"))
if mibBuilder.loadTexts: chSysCoresEntry.setStatus('current')
chSysCoresInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresInstance.setStatus('current')
chSysCoresFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresFileName.setStatus('current')
chSysCoresTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9, 1, 3), F10SwDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresTimeCreated.setStatus('current')
chSysCoresStackUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresStackUnitNumber.setStatus('current')
chSysCoresProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresProcess.setStatus('current')
chAlarmMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0))
chAlarmStackUnitDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 1)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackUnitDown.setStatus('current')
chAlarmStackUnitUp = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 2)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackUnitUp.setStatus('current')
chAlarmStackUnitReset = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 3)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackUnitReset.setStatus('current')
chAlarmStackUnitOffline = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 4)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackUnitOffline.setStatus('current')
chAlarmStackUnitCodeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 5)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackUnitCodeMismatch.setStatus('current')
chAlarmStackPortLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 6)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackPortLinkUp.setStatus('current')
chAlarmStackPortLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 7)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackPortLinkDown.setStatus('current')
chAlarmStackUnitRoleChanged = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 8)).setObjects(("F10-M-SERIES-CHASSIS-MIB", "chStackUnitMgmtStatus"), ("F10-CHASSIS-MIB", "chAlarmVarString"))
if mibBuilder.loadTexts: chAlarmStackUnitRoleChanged.setStatus('current')
f10mSeriesMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2))
f10mSeriesMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2, 1))
f10mSeriesMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2, 2))
f10mSeriesMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2, 1, 1)).setObjects(("F10-M-SERIES-CHASSIS-MIB", "f10mSeriesComponentGroup"), ("F10-M-SERIES-CHASSIS-MIB", "f10mSeriesSystemGroup"), ("F10-M-SERIES-CHASSIS-MIB", "f10mSeriesNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10mSeriesMibCompliance = f10mSeriesMibCompliance.setStatus('current')
f10mSeriesComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2, 2, 1)).setObjects(("F10-M-SERIES-CHASSIS-MIB", "chNumStackUnits"), ("F10-M-SERIES-CHASSIS-MIB", "chNumMaxStackableUnits"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10mSeriesComponentGroup = f10mSeriesComponentGroup.setStatus('current')
f10mSeriesSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2, 2, 2)).setObjects(("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitSID"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitMgmtStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitHwMgmtPreference"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitAdmMgmtPreference"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitModelID"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitDescription"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCodeVersion"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCodeVersionInFlash"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitSerialNumber"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitUpTime"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitTemp"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitType"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitSysType"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitVendorId"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitMfgDate"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitMacAddress"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitPartNum"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitProductRev"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitProductOrder"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCountryCode"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNum10GigEtherPorts"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumGigEtherPorts"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumFastEtherPorts"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumFanTrays"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumPowerSupplies"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumPluggableModules"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitRowStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitPiecePartID"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitPPIDRevision"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitServiceTag"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitExpressServiceCode"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPowerSupplyIndex"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPowerSupplyOperStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPowerSupplyType"), ("F10-M-SERIES-CHASSIS-MIB", "chSysFanTrayIndex"), ("F10-M-SERIES-CHASSIS-MIB", "chSysFanTrayOperStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortIndex"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortType"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortAdminStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortOperStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortIfIndex"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortXfpRecvPower"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortXfpRecvTemp"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortXfpTxPower"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortIndex"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortConfiguredMode"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortRunningMode"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortLinkStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortLinkSpeed"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortRxDataRate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortRxErrorRate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortRxTotalErrors"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortTxDataRate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortTxErrorRate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortTxTotalErrors"), ("F10-M-SERIES-CHASSIS-MIB", "chSysProcessorModule"), ("F10-M-SERIES-CHASSIS-MIB", "chSysProcessorUpTime"), ("F10-M-SERIES-CHASSIS-MIB", "chSysProcessorNvramSize"), ("F10-M-SERIES-CHASSIS-MIB", "chSysProcessorMemSize"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwRuntimeImgVersion"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwRuntimeImgDate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImgVersion"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImgDate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImgStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwBackupBootImgVersion"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwBackupBootImgDate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwBackupBootImgStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwNextRebootImage"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImage"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwInPartitionAImgVers"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwInPartitionBImgVers"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCpuType"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCpuUtil5Sec"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCpuUtil1Min"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCpuUtil5Min"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitMemUsageUtil"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitFlashUsageUtil"), ("F10-M-SERIES-CHASSIS-MIB", "chSysCoresInstance"), ("F10-M-SERIES-CHASSIS-MIB", "chSysCoresFileName"), ("F10-M-SERIES-CHASSIS-MIB", "chSysCoresTimeCreated"), ("F10-M-SERIES-CHASSIS-MIB", "chSysCoresStackUnitNumber"), ("F10-M-SERIES-CHASSIS-MIB", "chSysCoresProcess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10mSeriesSystemGroup = f10mSeriesSystemGroup.setStatus('current')
f10mSeriesNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2, 2, 3)).setObjects(("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackUnitDown"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackUnitUp"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackUnitReset"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackUnitOffline"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackUnitCodeMismatch"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackPortLinkUp"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackPortLinkDown"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackUnitRoleChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10mSeriesNotificationGroup = f10mSeriesNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("F10-M-SERIES-CHASSIS-MIB", chSysStackPortConfiguredMode=chSysStackPortConfiguredMode, chSysObjects=chSysObjects, chStackUnitMemUsageUtil=chStackUnitMemUsageUtil, UnitType=UnitType, chSysProcessorNvramSize=chSysProcessorNvramSize, chSysFanTrayEntry=chSysFanTrayEntry, chSysStackPortTxErrorRate=chSysStackPortTxErrorRate, chSysStackPortTxTotalErrors=chSysStackPortTxTotalErrors, f10mSeriesMibConformance=f10mSeriesMibConformance, chSysStackPortIndex=chSysStackPortIndex, chSysPortEntry=chSysPortEntry, chSysSwModuleEntry=chSysSwModuleEntry, chSysProcessorMemSize=chSysProcessorMemSize, chSysSwBackupBootImgVersion=chSysSwBackupBootImgVersion, chSysSwBackupBootImgDate=chSysSwBackupBootImgDate, PYSNMP_MODULE_ID=f10MSerChassisMib, chStackUnitNumber=chStackUnitNumber, chStackUnitUtilEntry=chStackUnitUtilEntry, chSysPowerSupplyTable=chSysPowerSupplyTable, chStackUnitCpuUtil5Min=chStackUnitCpuUtil5Min, chStackUnitCodeVersionInFlash=chStackUnitCodeVersionInFlash, chSysSwRuntimeImgDate=chSysSwRuntimeImgDate, f10mSeriesComponentGroup=f10mSeriesComponentGroup, chSysCoresEntry=chSysCoresEntry, chNumMaxStackableUnits=chNumMaxStackableUnits, chStackUnitNumPowerSupplies=chStackUnitNumPowerSupplies, chSysStackPortLinkSpeed=chSysStackPortLinkSpeed, chSysPortIfIndex=chSysPortIfIndex, chAlarmStackUnitOffline=chAlarmStackUnitOffline, chStackUnitAdmMgmtPreference=chStackUnitAdmMgmtPreference, chSysProcessorUpTime=chSysProcessorUpTime, chStackUnitNumFanTrays=chStackUnitNumFanTrays, chStackUnitIndex=chStackUnitIndex, chSysProcessorModule=chSysProcessorModule, chAlarmStackUnitReset=chAlarmStackUnitReset, f10mSeriesMibCompliances=f10mSeriesMibCompliances, chAlarmStackUnitUp=chAlarmStackUnitUp, chSysStackPortRxErrorRate=chSysStackPortRxErrorRate, f10mSeriesSystemGroup=f10mSeriesSystemGroup, chStackUnitCpuType=chStackUnitCpuType, chSysSwCurrentBootImgStatus=chSysSwCurrentBootImgStatus, chSysSwCurrentBootImgDate=chSysSwCurrentBootImgDate, chStackUnitNum10GigEtherPorts=chStackUnitNum10GigEtherPorts, chSysFanTrayTable=chSysFanTrayTable, f10MSerChassisObject=f10MSerChassisObject, chStackUnitDescription=chStackUnitDescription, chSysSwCurrentBootImgVersion=chSysSwCurrentBootImgVersion, chSysPortXfpTxPower=chSysPortXfpTxPower, chStackUnitSysType=chStackUnitSysType, f10mSeriesMibGroups=f10mSeriesMibGroups, chAlarmMibNotifications=chAlarmMibNotifications, chStackUnitCodeVersion=chStackUnitCodeVersion, chStackUnitPPIDRevision=chStackUnitPPIDRevision, chSysSwBackupBootImgStatus=chSysSwBackupBootImgStatus, chStackUnitUpTime=chStackUnitUpTime, chAlarmStackPortLinkDown=chAlarmStackPortLinkDown, chSysSwCoresTable=chSysSwCoresTable, chSysPortTable=chSysPortTable, chStackUnitMfgDate=chStackUnitMfgDate, chSysStackPortLinkStatus=chSysStackPortLinkStatus, chSysPortType=chSysPortType, chSysSwInPartitionBImgVers=chSysSwInPartitionBImgVers, chStackUnitPiecePartID=chStackUnitPiecePartID, chObjects=chObjects, chSysSwModuleTable=chSysSwModuleTable, chNumStackUnits=chNumStackUnits, chAlarmStackUnitRoleChanged=chAlarmStackUnitRoleChanged, chStackUnitStatus=chStackUnitStatus, chSysPowerSupplyType=chSysPowerSupplyType, chSysCoresTimeCreated=chSysCoresTimeCreated, chSysPortIndex=chSysPortIndex, chStackUnitVendorId=chStackUnitVendorId, chStackUnitServiceTag=chStackUnitServiceTag, chSysPowerSupplyOperStatus=chSysPowerSupplyOperStatus, chStackUnitMacAddress=chStackUnitMacAddress, chStackUnitFlashUsageUtil=chStackUnitFlashUsageUtil, chStackUnitNumGigEtherPorts=chStackUnitNumGigEtherPorts, chStackUnitProductRev=chStackUnitProductRev, chStackUnitCountryCode=chStackUnitCountryCode, chSysPowerSupplyEntry=chSysPowerSupplyEntry, f10MSerChassisMib=f10MSerChassisMib, chSysProcessorEntry=chSysProcessorEntry, chAlarmStackUnitDown=chAlarmStackUnitDown, chAlarmObjects=chAlarmObjects, chStackUnitMgmtStatus=chStackUnitMgmtStatus, chSysSwCurrentBootImage=chSysSwCurrentBootImage, chStackUnitIndexNext=chStackUnitIndexNext, chSysPortXfpRecvPower=chSysPortXfpRecvPower, chStackUnitModelID=chStackUnitModelID, chStackUnitCpuUtil1Min=chStackUnitCpuUtil1Min, chSysCoresProcess=chSysCoresProcess, chSysProcessorTable=chSysProcessorTable, chStackUnitSerialNumber=chStackUnitSerialNumber, chSysCoresInstance=chSysCoresInstance, chStackUnitHwMgmtPreference=chStackUnitHwMgmtPreference, chStackUnitRowStatus=chStackUnitRowStatus, chSysStackPortRxTotalErrors=chSysStackPortRxTotalErrors, chSysStackPortRunningMode=chSysStackPortRunningMode, chStackUnitSID=chStackUnitSID, f10mSeriesMibCompliance=f10mSeriesMibCompliance, chSysPortOperStatus=chSysPortOperStatus, chStackUnitProductOrder=chStackUnitProductOrder, chSysFanTrayIndex=chSysFanTrayIndex, chSysStackPortTable=chSysStackPortTable, chStackUnitTemp=chStackUnitTemp, chStackUnitNumFastEtherPorts=chStackUnitNumFastEtherPorts, chSysSwRuntimeImgVersion=chSysSwRuntimeImgVersion, chStackUnitExpressServiceCode=chStackUnitExpressServiceCode, chSysStackPortRxDataRate=chSysStackPortRxDataRate, chSysStackPortEntry=chSysStackPortEntry, chAlarmStackPortLinkUp=chAlarmStackPortLinkUp, chStackUnitTable=chStackUnitTable, chAlarmStackUnitCodeMismatch=chAlarmStackUnitCodeMismatch, chStackUnitNumPluggableModules=chStackUnitNumPluggableModules, CodeType=CodeType, chStackUnitNum40GigEtherPorts=chStackUnitNum40GigEtherPorts, chStackUnitCpuUtil5Sec=chStackUnitCpuUtil5Sec, chSysSwNextRebootImage=chSysSwNextRebootImage, chStackUnitType=chStackUnitType, chSysCoresFileName=chSysCoresFileName, chSysFanTrayOperStatus=chSysFanTrayOperStatus, chStackUnitEntry=chStackUnitEntry, chSysPortXfpRecvTemp=chSysPortXfpRecvTemp, chSysCoresStackUnitNumber=chSysCoresStackUnitNumber, f10mSeriesNotificationGroup=f10mSeriesNotificationGroup, chStackUnitUtilTable=chStackUnitUtilTable, chSysPowerSupplyIndex=chSysPowerSupplyIndex, chStackUnitPartNum=chStackUnitPartNum, chSysStackPortTxDataRate=chSysStackPortTxDataRate, chSysSwInPartitionAImgVers=chSysSwInPartitionAImgVers, chSysPortAdminStatus=chSysPortAdminStatus)
