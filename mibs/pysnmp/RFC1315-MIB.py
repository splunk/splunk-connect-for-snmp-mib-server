#
# PySNMP MIB module RFC1315-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1315-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:59:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, Integer32, Counter64, IpAddress, ModuleIdentity, ObjectIdentity, transmission, iso, Unsigned32, Counter32, MibIdentifier, NotificationType, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "Integer32", "Counter64", "IpAddress", "ModuleIdentity", "ObjectIdentity", "transmission", "iso", "Unsigned32", "Counter32", "MibIdentifier", "NotificationType", "NotificationType", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
frame_relay = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32)).setLabel("frame-relay")
class Index(Integer32):
    pass

class DLCI(Integer32):
    pass

frDlcmiTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 1), )
if mibBuilder.loadTexts: frDlcmiTable.setStatus('mandatory')
frDlcmiEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 1, 1), ).setIndexNames((0, "RFC1315-MIB", "frDlcmiIfIndex"))
if mibBuilder.loadTexts: frDlcmiEntry.setStatus('mandatory')
frDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frDlcmiIfIndex.setStatus('mandatory')
frDlcmiState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noLmiConfigured", 1), ("lmiRev1", 2), ("ansiT1-617-D", 3), ("ansiT1-617-B", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiState.setStatus('mandatory')
frDlcmiAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiAddress.setStatus('mandatory')
frDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("two-octets", 2), ("three-octets", 3), ("four-octets", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiAddressLen.setStatus('mandatory')
frDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiPollingInterval.setStatus('mandatory')
frDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiFullEnquiryInterval.setStatus('mandatory')
frDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiErrorThreshold.setStatus('mandatory')
frDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMonitoredEvents.setStatus('mandatory')
frDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMaxSupportedVCs.setStatus('mandatory')
frDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frDlcmiMulticast.setStatus('mandatory')
frCircuitTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 2), )
if mibBuilder.loadTexts: frCircuitTable.setStatus('mandatory')
frCircuitEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 2, 1), ).setIndexNames((0, "RFC1315-MIB", "frCircuitIfIndex"), (0, "RFC1315-MIB", "frCircuitDlci"))
if mibBuilder.loadTexts: frCircuitEntry.setStatus('mandatory')
frCircuitIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitIfIndex.setStatus('mandatory')
frCircuitDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitDlci.setStatus('mandatory')
frCircuitState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitState.setStatus('mandatory')
frCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedFECNs.setStatus('mandatory')
frCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedBECNs.setStatus('mandatory')
frCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentFrames.setStatus('mandatory')
frCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitSentOctets.setStatus('mandatory')
frCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedFrames.setStatus('mandatory')
frCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitReceivedOctets.setStatus('mandatory')
frCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitCreationTime.setStatus('mandatory')
frCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frCircuitLastTimeChange.setStatus('mandatory')
frCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitCommittedBurst.setStatus('mandatory')
frCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitExcessBurst.setStatus('mandatory')
frCircuitThroughput = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frCircuitThroughput.setStatus('mandatory')
frErrTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 3), )
if mibBuilder.loadTexts: frErrTable.setStatus('mandatory')
frErrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 3, 1), ).setIndexNames((0, "RFC1315-MIB", "frErrIfIndex"))
if mibBuilder.loadTexts: frErrEntry.setStatus('mandatory')
frErrIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 1), Index()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrIfIndex.setStatus('mandatory')
frErrType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknownError", 1), ("receiveShort", 2), ("receiveLong", 3), ("illegalDLCI", 4), ("unknownDLCI", 5), ("dlcmiProtoErr", 6), ("dlcmiUnknownIE", 7), ("dlcmiSequenceErr", 8), ("dlcmiUnknownRpt", 9), ("noErrorSinceReset", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrType.setStatus('mandatory')
frErrData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrData.setStatus('mandatory')
frErrTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frErrTime.setStatus('mandatory')
frame_relay_globals = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32, 4)).setLabel("frame-relay-globals")
frTrapState = MibScalar((1, 3, 6, 1, 2, 1, 10, 32, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frTrapState.setStatus('mandatory')
frDLCIStatusChange = NotificationType((1, 3, 6, 1, 2, 1, 10, 32) + (0,1)).setObjects(("RFC1315-MIB", "frCircuitIfIndex"), ("RFC1315-MIB", "frCircuitDlci"), ("RFC1315-MIB", "frCircuitState"))
mibBuilder.exportSymbols("RFC1315-MIB", frCircuitReceivedFrames=frCircuitReceivedFrames, frCircuitLastTimeChange=frCircuitLastTimeChange, frCircuitSentOctets=frCircuitSentOctets, frDlcmiMonitoredEvents=frDlcmiMonitoredEvents, frErrTime=frErrTime, frDlcmiEntry=frDlcmiEntry, frDLCIStatusChange=frDLCIStatusChange, frCircuitExcessBurst=frCircuitExcessBurst, frErrIfIndex=frErrIfIndex, frDlcmiState=frDlcmiState, frDlcmiErrorThreshold=frDlcmiErrorThreshold, frCircuitReceivedFECNs=frCircuitReceivedFECNs, frCircuitSentFrames=frCircuitSentFrames, frCircuitCommittedBurst=frCircuitCommittedBurst, frCircuitEntry=frCircuitEntry, frDlcmiIfIndex=frDlcmiIfIndex, frErrTable=frErrTable, frDlcmiMulticast=frDlcmiMulticast, frCircuitThroughput=frCircuitThroughput, frErrData=frErrData, frDlcmiAddress=frDlcmiAddress, frCircuitState=frCircuitState, frDlcmiAddressLen=frDlcmiAddressLen, frDlcmiMaxSupportedVCs=frDlcmiMaxSupportedVCs, frDlcmiFullEnquiryInterval=frDlcmiFullEnquiryInterval, frCircuitTable=frCircuitTable, frCircuitIfIndex=frCircuitIfIndex, frCircuitReceivedBECNs=frCircuitReceivedBECNs, frErrType=frErrType, frame_relay=frame_relay, frDlcmiPollingInterval=frDlcmiPollingInterval, frCircuitReceivedOctets=frCircuitReceivedOctets, frCircuitCreationTime=frCircuitCreationTime, frDlcmiTable=frDlcmiTable, Index=Index, frame_relay_globals=frame_relay_globals, frCircuitDlci=frCircuitDlci, DLCI=DLCI, frTrapState=frTrapState, frErrEntry=frErrEntry)
