#
# PySNMP MIB module LINKB-OPT-FDDI-MIB-1-1-2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LINKB-OPT-FDDI-MIB-1-1-2
# Produced by pysmi-0.3.4 at Mon Apr 29 19:56:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
fddimibMACUnaDaFlag, fddimibPORTNeighborType, fddimibPORTLerCutoff, fddimibMACDaFlag, fddimibSMTCFState, fddimibMACFrameErrorRatio, fddimibPORTMyType, FddiTimeNano, fddimibMACOldDownstreamNbr, fddimibPORTCurrentPath, fddimibMACLostCts, fddimibPORTLerFlag, fddimibMACSMTAddress, fddimibMACAvailablePaths, fddimibMACRequestedPaths, fddimibPORTLemRejectCts, fddimibPORTPCWithhold, fddimibSMTPeerWrapFlag, fddimibMACOldUpstreamNbr, fddimibMACDownstreamNbr, fddimibMACFrameErrorFlag, fddimibPORTLerAlarm, fddimibPORTConnectState, fddimibMACCopiedCts, fddimibPORTRequestedPaths, FddiSMTStationIdType, fddimibMACNotCopiedFlag, fddimibMACNotCopiedCts, fddimibSMTStationId, fddimibMACFrameCts, fddimibMACErrorCts, fddimibMACNotCopiedRatio, fddimibMACCurrentPath, fddimibPORTLerEstimate, fddimibPORTAvailablePaths, fddimibMACUpstreamNbr, fddimibPORTLemCts = mibBuilder.importSymbols("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACUnaDaFlag", "fddimibPORTNeighborType", "fddimibPORTLerCutoff", "fddimibMACDaFlag", "fddimibSMTCFState", "fddimibMACFrameErrorRatio", "fddimibPORTMyType", "FddiTimeNano", "fddimibMACOldDownstreamNbr", "fddimibPORTCurrentPath", "fddimibMACLostCts", "fddimibPORTLerFlag", "fddimibMACSMTAddress", "fddimibMACAvailablePaths", "fddimibMACRequestedPaths", "fddimibPORTLemRejectCts", "fddimibPORTPCWithhold", "fddimibSMTPeerWrapFlag", "fddimibMACOldUpstreamNbr", "fddimibMACDownstreamNbr", "fddimibMACFrameErrorFlag", "fddimibPORTLerAlarm", "fddimibPORTConnectState", "fddimibMACCopiedCts", "fddimibPORTRequestedPaths", "FddiSMTStationIdType", "fddimibMACNotCopiedFlag", "fddimibMACNotCopiedCts", "fddimibSMTStationId", "fddimibMACFrameCts", "fddimibMACErrorCts", "fddimibMACNotCopiedRatio", "fddimibMACCurrentPath", "fddimibPORTLerEstimate", "fddimibPORTAvailablePaths", "fddimibMACUpstreamNbr", "fddimibPORTLemCts")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, Unsigned32, ModuleIdentity, NotificationType, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, ObjectIdentity, TimeTicks, iso, enterprises, Counter32, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "ModuleIdentity", "NotificationType", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "ObjectIdentity", "TimeTicks", "iso", "enterprises", "Counter32", "Gauge32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
lb3gh = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7))
lb3ghOptFddi = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 2))
lbOptSMT = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 2, 1))
lbOptMAC = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 2, 2))
lbOptPATH = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 2, 3))
lbOptPORT = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 7, 2, 4))
lbOptSMTTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1), )
if mibBuilder.loadTexts: lbOptSMTTable.setStatus('mandatory')
lbOptSMTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptSMTIndex"))
if mibBuilder.loadTexts: lbOptSMTEntry.setStatus('mandatory')
lbOptSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptSMTIndex.setStatus('mandatory')
lbOptSMTManufacturerOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptSMTManufacturerOUI.setStatus('mandatory')
lbOptSMTManufacturerData = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptSMTManufacturerData.setStatus('mandatory')
lbOptSMTHoldState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-implemented", 1), ("not-holding", 2), ("holding-prm", 3), ("holding-sec", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptSMTHoldState.setStatus('mandatory')
lbOptSMTSetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptSMTSetCount.setStatus('mandatory')
lbOptSMTLastSetStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 1, 1, 1, 6), FddiSMTStationIdType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptSMTLastSetStationId.setStatus('mandatory')
lbOptMACBridgeFunctionTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 1), )
if mibBuilder.loadTexts: lbOptMACBridgeFunctionTable.setStatus('mandatory')
lbOptMACBridgeFunctionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 1, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptMACBridgeFunctionSMTIndex"), (0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptMACBridgeFunctionMACIndex"))
if mibBuilder.loadTexts: lbOptMACBridgeFunctionEntry.setStatus('mandatory')
lbOptMACBridgeFunctionSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACBridgeFunctionSMTIndex.setStatus('mandatory')
lbOptMACBridgeFunctionMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACBridgeFunctionMACIndex.setStatus('mandatory')
lbOptMACBridgeFunctions = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACBridgeFunctions.setStatus('mandatory')
lbOptMACTPriTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2), )
if mibBuilder.loadTexts: lbOptMACTPriTable.setStatus('mandatory')
lbOptMACTPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptMACTPriSMTIndex"), (0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptMACTPriMACIndex"))
if mibBuilder.loadTexts: lbOptMACTPriEntry.setStatus('mandatory')
lbOptMACTPriSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPriSMTIndex.setStatus('mandatory')
lbOptMACTPriMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPriMACIndex.setStatus('mandatory')
lbOptMACTPri0 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 3), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri0.setStatus('mandatory')
lbOptMACTPri1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 4), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri1.setStatus('mandatory')
lbOptMACTPri2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 5), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri2.setStatus('mandatory')
lbOptMACTPri3 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 6), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri3.setStatus('mandatory')
lbOptMACTPri4 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 7), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri4.setStatus('mandatory')
lbOptMACTPri5 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 8), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri5.setStatus('mandatory')
lbOptMACTPri6 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 2, 2, 1, 9), FddiTimeNano()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptMACTPri6.setStatus('mandatory')
lbOptPATHRingTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1), )
if mibBuilder.loadTexts: lbOptPATHRingTable.setStatus('mandatory')
lbOptPATHRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPATHRingSMTIndex"), (0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPATHRingPATHIndex"))
if mibBuilder.loadTexts: lbOptPATHRingEntry.setStatus('mandatory')
lbOptPATHRingSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPATHRingSMTIndex.setStatus('mandatory')
lbOptPATHRingPATHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPATHRingPATHIndex.setStatus('mandatory')
lbOptPATHRingLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1, 1, 3), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPATHRingLatency.setStatus('mandatory')
lbOptPATHTraceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPATHTraceStatus.setStatus('mandatory')
lbOptPATHT_Rmode = MibScalar((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 1, 1, 5), FddiTimeNano()).setLabel("lbOptPATHT-Rmode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPATHT_Rmode.setStatus('mandatory')
lbOptPATHSbaTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2), )
if mibBuilder.loadTexts: lbOptPATHSbaTable.setStatus('mandatory')
lbOptPATHSbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPATHSbaSMTIndex"), (0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPATHSbaPATHIndex"))
if mibBuilder.loadTexts: lbOptPATHSbaEntry.setStatus('mandatory')
lbOptPATHSbaSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPATHSbaSMTIndex.setStatus('mandatory')
lbOptPATHSbaPATHIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPATHSbaPATHIndex.setStatus('mandatory')
lbOptPATHSbaPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1562))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPATHSbaPayload.setStatus('mandatory')
lbOptPATHSbaOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPATHSbaOverhead.setStatus('mandatory')
lbOptPATHSbaAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPATHSbaAvailable.setStatus('mandatory')
lbOptPORTTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 1), )
if mibBuilder.loadTexts: lbOptPORTTable.setStatus('mandatory')
lbOptPORTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 1, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPORTSMTIndex"), (0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPORTIndex"))
if mibBuilder.loadTexts: lbOptPORTEntry.setStatus('mandatory')
lbOptPORTSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPORTSMTIndex.setStatus('mandatory')
lbOptPORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPORTIndex.setStatus('mandatory')
lbOptPORTMACLoopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 1, 1, 3), FddiTimeNano()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPORTMACLoopTime.setStatus('mandatory')
lbOptPORTEBErrorCt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPORTEBErrorCt.setStatus('mandatory')
lbOptPORTLSTable = MibTable((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 2), )
if mibBuilder.loadTexts: lbOptPORTLSTable.setStatus('mandatory')
lbOptPORTLSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 2, 1), ).setIndexNames((0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPORTLSSMTIndex"), (0, "LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPORTLSPORTIndex"))
if mibBuilder.loadTexts: lbOptPORTLSEntry.setStatus('mandatory')
lbOptPORTLSSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPORTLSSMTIndex.setStatus('mandatory')
lbOptPORTLSPORTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPORTLSPORTIndex.setStatus('mandatory')
lbOptPORTMaintLS = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("quiet", 1), ("idle", 2), ("master", 3), ("halt", 4), ("receive-active", 5), ("receive-unknown", 6), ("receive-noise", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbOptPORTMaintLS.setStatus('mandatory')
lbOptPORTPCLS = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 7, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("quiet", 1), ("idle", 2), ("master", 3), ("halt", 4), ("receive-active", 5), ("receive-unknown", 6), ("receive-noise", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbOptPORTPCLS.setStatus('mandatory')
lbOptSMTHoldCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,1)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("LINKB-OPT-FDDI-MIB-1-1-2", "lbOptSMTHoldState"))
lbOptSMTPeerWrapCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,2)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTCFState"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTPeerWrapFlag"))
lbOptMACDuplicateAddressCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,3)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACSMTAddress"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACUpstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACDaFlag"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACUnaDaFlag"))
lbOptMACFrameErrorCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,4)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACFrameErrorFlag"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACFrameCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACErrorCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACLostCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACFrameErrorRatio"))
lbOptMACNotCopiedCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,5)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACNotCopiedCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACCopiedCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACNotCopiedRatio"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACNotCopiedFlag"))
lbOptMACNeighborChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,6)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACUpstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACOldUpstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACDownstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACOldDownstreamNbr"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACCurrentPath"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACSMTAddress"))
lbOptMACPathChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,7)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACAvailablePaths"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACCurrentPath"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibMACRequestedPaths"))
lbOptPORTLerCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,8)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLerCutoff"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLerAlarm"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLerEstimate"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLemRejectCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLemCts"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTLerFlag"))
lbOptPORTUndesiredConnAttemptEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,9)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTMyType"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTConnectState"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTNeighborType"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTPCWithhold"))
lbOptPORTEBErrorCondition = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,10)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("LINKB-OPT-FDDI-MIB-1-1-2", "lbOptPORTEBErrorCt"))
lbOptPORTPathChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 43, 7, 2) + (0,11)).setObjects(("DRAFT-FDDI-MIB-VER-3-2", "fddimibSMTStationId"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTAvailablePaths"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTCurrentPath"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTRequestedPaths"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTMyType"), ("DRAFT-FDDI-MIB-VER-3-2", "fddimibPORTNeighborType"))
mibBuilder.exportSymbols("LINKB-OPT-FDDI-MIB-1-1-2", lbOptPORTLSPORTIndex=lbOptPORTLSPORTIndex, a3Com=a3Com, lbOptSMT=lbOptSMT, lbOptPORTEBErrorCondition=lbOptPORTEBErrorCondition, lb3gh=lb3gh, lbOptMACTPriSMTIndex=lbOptMACTPriSMTIndex, lbOptMACNeighborChangeEvent=lbOptMACNeighborChangeEvent, lbOptPORTIndex=lbOptPORTIndex, lbOptMACBridgeFunctionMACIndex=lbOptMACBridgeFunctionMACIndex, lbOptMACTPriMACIndex=lbOptMACTPriMACIndex, lbOptMACBridgeFunctionTable=lbOptMACBridgeFunctionTable, lbOptMACFrameErrorCondition=lbOptMACFrameErrorCondition, lbOptPORTTable=lbOptPORTTable, lbOptPATHRingSMTIndex=lbOptPATHRingSMTIndex, lbOptPORTLSTable=lbOptPORTLSTable, lbOptPATHTraceStatus=lbOptPATHTraceStatus, lbOptMACPathChangeEvent=lbOptMACPathChangeEvent, lbOptPATHT_Rmode=lbOptPATHT_Rmode, lbOptSMTManufacturerOUI=lbOptSMTManufacturerOUI, lbOptMACTPri0=lbOptMACTPri0, lbOptPATH=lbOptPATH, lbOptPORTUndesiredConnAttemptEvent=lbOptPORTUndesiredConnAttemptEvent, lbOptMAC=lbOptMAC, lbOptPORTLerCondition=lbOptPORTLerCondition, lbOptSMTPeerWrapCondition=lbOptSMTPeerWrapCondition, lbOptMACDuplicateAddressCondition=lbOptMACDuplicateAddressCondition, lb3ghOptFddi=lb3ghOptFddi, lbOptPATHSbaPayload=lbOptPATHSbaPayload, lbOptPORTPathChangeEvent=lbOptPORTPathChangeEvent, lbOptSMTManufacturerData=lbOptSMTManufacturerData, lbOptPATHSbaEntry=lbOptPATHSbaEntry, lbOptSMTTable=lbOptSMTTable, lbOptPORTPCLS=lbOptPORTPCLS, lbOptSMTLastSetStationId=lbOptSMTLastSetStationId, lbOptMACTPri3=lbOptMACTPri3, lbOptPATHSbaTable=lbOptPATHSbaTable, lbOptPORTEBErrorCt=lbOptPORTEBErrorCt, lbOptMACTPri6=lbOptMACTPri6, lbOptPORTLSEntry=lbOptPORTLSEntry, lbOptSMTEntry=lbOptSMTEntry, lbOptMACTPri4=lbOptMACTPri4, lbOptPATHSbaSMTIndex=lbOptPATHSbaSMTIndex, lbOptMACBridgeFunctionEntry=lbOptMACBridgeFunctionEntry, lbOptSMTSetCount=lbOptSMTSetCount, lbOptMACTPriEntry=lbOptMACTPriEntry, lbOptPORTMACLoopTime=lbOptPORTMACLoopTime, lbOptPATHRingTable=lbOptPATHRingTable, lbOptPATHRingLatency=lbOptPATHRingLatency, lbOptPORT=lbOptPORT, lbOptPORTLSSMTIndex=lbOptPORTLSSMTIndex, lbOptPATHSbaOverhead=lbOptPATHSbaOverhead, lbOptMACTPri1=lbOptMACTPri1, lbOptPORTMaintLS=lbOptPORTMaintLS, lbOptMACTPri5=lbOptMACTPri5, lbOptPATHSbaPATHIndex=lbOptPATHSbaPATHIndex, lbOptMACTPri2=lbOptMACTPri2, lbOptPORTSMTIndex=lbOptPORTSMTIndex, lbOptPATHRingEntry=lbOptPATHRingEntry, lbOptPATHRingPATHIndex=lbOptPATHRingPATHIndex, lbOptMACNotCopiedCondition=lbOptMACNotCopiedCondition, lbOptSMTIndex=lbOptSMTIndex, lbOptMACBridgeFunctionSMTIndex=lbOptMACBridgeFunctionSMTIndex, lbOptMACBridgeFunctions=lbOptMACBridgeFunctions, lbOptSMTHoldCondition=lbOptSMTHoldCondition, lbOptPATHSbaAvailable=lbOptPATHSbaAvailable, lbOptPORTEntry=lbOptPORTEntry, lbOptMACTPriTable=lbOptMACTPriTable, lbOptSMTHoldState=lbOptSMTHoldState)
