#
# PySNMP MIB module OMNI-gx2Dm1000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2Dm1000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:23:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
gx2Dm1000, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Dm1000")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapNetworkElemAlarmStatus, trapIdentifier, trapPerceivedSeverity, trapNetworkElemModelNumber, trapText, trapNETrapLastTrapTimeStamp, trapNetworkElemOperState, trapChangedValueInteger, trapChangedObjectId, trapNetworkElemSerialNum, trapChangedValueDisplayString, trapNetworkElemAdminState, trapNetworkElemAvailStatus = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus", "trapIdentifier", "trapPerceivedSeverity", "trapNetworkElemModelNumber", "trapText", "trapNETrapLastTrapTimeStamp", "trapNetworkElemOperState", "trapChangedValueInteger", "trapChangedObjectId", "trapNetworkElemSerialNum", "trapChangedValueDisplayString", "trapNetworkElemAdminState", "trapNetworkElemAvailStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
NotificationType, Counter32, MibIdentifier, ObjectIdentity, Counter64, NotificationType, iso, Gauge32, ModuleIdentity, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "MibIdentifier", "ObjectIdentity", "Counter64", "NotificationType", "iso", "Gauge32", "ModuleIdentity", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2Dm1000Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 1))
gx2Dm1000AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2), )
if mibBuilder.loadTexts: gx2Dm1000AnalogTable.setStatus('mandatory')
gx2Dm1000AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1), ).setIndexNames((0, "OMNI-gx2Dm1000-MIB", "gx2Dm1000AnalogTableIndex"))
if mibBuilder.loadTexts: gx2Dm1000AnalogEntry.setStatus('mandatory')
gx2Dm1000DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3), )
if mibBuilder.loadTexts: gx2Dm1000DigitalTable.setStatus('mandatory')
gx2Dm1000DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2), ).setIndexNames((0, "OMNI-gx2Dm1000-MIB", "gx2Dm1000DigitalTableIndex"))
if mibBuilder.loadTexts: gx2Dm1000DigitalEntry.setStatus('mandatory')
gx2Dm1000StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4), )
if mibBuilder.loadTexts: gx2Dm1000StatusTable.setStatus('mandatory')
gx2Dm1000StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3), ).setIndexNames((0, "OMNI-gx2Dm1000-MIB", "gx2Dm1000StatusTableIndex"))
if mibBuilder.loadTexts: gx2Dm1000StatusEntry.setStatus('mandatory')
gx2Dm1000FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5), )
if mibBuilder.loadTexts: gx2Dm1000FactoryTable.setStatus('mandatory')
gx2Dm1000FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4), ).setIndexNames((0, "OMNI-gx2Dm1000-MIB", "gx2Dm1000FactoryTableIndex"))
if mibBuilder.loadTexts: gx2Dm1000FactoryEntry.setStatus('mandatory')
gx2Dm1000AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Dm1000AnalogTableIndex.setStatus('mandatory')
dm1000labelOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelOffsetNomMonitor.setStatus('optional')
dm1000uomOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000uomOffsetNomMonitor.setStatus('optional')
dm1000majorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorHighOffsetNomMonitor.setStatus('mandatory')
dm1000majorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorLowOffsetNomMonitor.setStatus('mandatory')
dm1000minorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorHighOffsetNomMonitor.setStatus('mandatory')
dm1000minorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorLowOffsetNomMonitor.setStatus('mandatory')
dm1000currentValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000currentValueOffsetNomMonitor.setStatus('mandatory')
dm1000stateFlagOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateFlagOffsetNomMonitor.setStatus('mandatory')
dm1000minValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minValueOffsetNomMonitor.setStatus('mandatory')
dm1000maxValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000maxValueOffsetNomMonitor.setStatus('mandatory')
dm1000alarmStateOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000alarmStateOffsetNomMonitor.setStatus('mandatory')
dm1000labelOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelOffsetNomCnt.setStatus('optional')
dm1000uomOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000uomOffsetNomCnt.setStatus('optional')
dm1000majorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorHighOffsetNomCnt.setStatus('obsolete')
dm1000majorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorLowOffsetNomCnt.setStatus('obsolete')
dm1000minorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorHighOffsetNomCnt.setStatus('obsolete')
dm1000minorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorLowOffsetNomCnt.setStatus('obsolete')
dm1000currentValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 19), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm1000currentValueOffsetNomCnt.setStatus('mandatory')
dm1000stateFlagOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateFlagOffsetNomCnt.setStatus('mandatory')
dm1000minValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minValueOffsetNomCnt.setStatus('mandatory')
dm1000maxValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000maxValueOffsetNomCnt.setStatus('mandatory')
dm1000alarmStateOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000alarmStateOffsetNomCnt.setStatus('obsolete')
dm1000labelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelAttenSetting.setStatus('optional')
dm1000uomAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000uomAttenSetting.setStatus('optional')
dm1000majorHighAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorHighAttenSetting.setStatus('obsolete')
dm1000majorLowAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorLowAttenSetting.setStatus('obsolete')
dm1000minorHighAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorHighAttenSetting.setStatus('obsolete')
dm1000minorLowAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorLowAttenSetting.setStatus('obsolete')
dm1000currentValueAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 30), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm1000currentValueAttenSetting.setStatus('mandatory')
dm1000stateFlagAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateFlagAttenSetting.setStatus('mandatory')
dm1000minValueAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minValueAttenSetting.setStatus('mandatory')
dm1000maxValueAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000maxValueAttenSetting.setStatus('mandatory')
dm1000alarmStateAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000alarmStateAttenSetting.setStatus('mandatory')
dm1000labelLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelLaserPower.setStatus('optional')
dm1000uomLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000uomLaserPower.setStatus('optional')
dm1000majorHighLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorHighLaserPower.setStatus('mandatory')
dm1000majorLowLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorLowLaserPower.setStatus('mandatory')
dm1000minorHighLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorHighLaserPower.setStatus('obsolete')
dm1000minorLowLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorLowLaserPower.setStatus('obsolete')
dm1000currentValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000currentValueLaserPower.setStatus('mandatory')
dm1000stateFlagLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateFlagLaserPower.setStatus('mandatory')
dm1000minValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minValueLaserPower.setStatus('mandatory')
dm1000maxValueLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000maxValueLaserPower.setStatus('mandatory')
dm1000alarmStateLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000alarmStateLaserPower.setStatus('mandatory')
dm1000labelLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelLaserTemp.setStatus('optional')
dm1000uomLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000uomLaserTemp.setStatus('optional')
dm1000majorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorHighLaserTemp.setStatus('mandatory')
dm1000majorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorLowLaserTemp.setStatus('mandatory')
dm1000minorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorHighLaserTemp.setStatus('obsolete')
dm1000minorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorLowLaserTemp.setStatus('obsolete')
dm1000currentValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000currentValueLaserTemp.setStatus('mandatory')
dm1000stateFlagLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateFlagLaserTemp.setStatus('mandatory')
dm1000minValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minValueLaserTemp.setStatus('mandatory')
dm1000maxValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000maxValueLaserTemp.setStatus('mandatory')
dm1000alarmStateLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000alarmStateLaserTemp.setStatus('mandatory')
dm1000labelLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelLaserCurrent.setStatus('optional')
dm1000uomLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000uomLaserCurrent.setStatus('optional')
dm1000majorHighLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorHighLaserCurrent.setStatus('mandatory')
dm1000majorLowLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorLowLaserCurrent.setStatus('mandatory')
dm1000minorHighLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorHighLaserCurrent.setStatus('obsolete')
dm1000minorLowLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorLowLaserCurrent.setStatus('obsolete')
dm1000currentValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000currentValueLaserCurrent.setStatus('mandatory')
dm1000stateFlagLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateFlagLaserCurrent.setStatus('mandatory')
dm1000minValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minValueLaserCurrent.setStatus('mandatory')
dm1000maxValueLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000maxValueLaserCurrent.setStatus('mandatory')
dm1000alarmStateLaserCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000alarmStateLaserCurrent.setStatus('mandatory')
dm1000labelTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelTecCurrent.setStatus('optional')
dm1000uomTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000uomTecCurrent.setStatus('optional')
dm1000majorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorHighTecCurrent.setStatus('mandatory')
dm1000majorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorLowTecCurrent.setStatus('mandatory')
dm1000minorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorHighTecCurrent.setStatus('obsolete')
dm1000minorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorLowTecCurrent.setStatus('obsolete')
dm1000currentValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000currentValueTecCurrent.setStatus('mandatory')
dm1000stateFlagTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateFlagTecCurrent.setStatus('mandatory')
dm1000minValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minValueTecCurrent.setStatus('mandatory')
dm1000maxValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000maxValueTecCurrent.setStatus('mandatory')
dm1000alarmStateTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000alarmStateTecCurrent.setStatus('mandatory')
dm1000labelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelModTemp.setStatus('optional')
dm1000uomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000uomModTemp.setStatus('optional')
dm1000majorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorHighModTemp.setStatus('mandatory')
dm1000majorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorLowModTemp.setStatus('mandatory')
dm1000minorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorHighModTemp.setStatus('mandatory')
dm1000minorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorLowModTemp.setStatus('mandatory')
dm1000currentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000currentValueModTemp.setStatus('mandatory')
dm1000stateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateFlagModTemp.setStatus('mandatory')
dm1000minValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minValueModTemp.setStatus('mandatory')
dm1000maxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000maxValueModTemp.setStatus('mandatory')
dm1000alarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000alarmStateModTemp.setStatus('mandatory')
dm1000labelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelFanCurrent.setStatus('optional')
dm1000uomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000uomFanCurrent.setStatus('optional')
dm1000majorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorHighFanCurrent.setStatus('mandatory')
dm1000majorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000majorLowFanCurrent.setStatus('mandatory')
dm1000minorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorHighFanCurrent.setStatus('obsolete')
dm1000minorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minorLowFanCurrent.setStatus('obsolete')
dm1000currentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000currentValueFanCurrent.setStatus('mandatory')
dm1000stateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateFlagFanCurrent.setStatus('mandatory')
dm1000minValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000minValueFanCurrent.setStatus('mandatory')
dm1000maxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000maxValueFanCurrent.setStatus('mandatory')
dm1000alarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000alarmStateFanCurrent.setStatus('mandatory')
gx2Dm1000DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Dm1000DigitalTableIndex.setStatus('mandatory')
dm1000labelRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelRfInput.setStatus('optional')
dm1000enumRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000enumRfInput.setStatus('optional')
dm1000valueRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm1000valueRfInput.setStatus('mandatory')
dm1000stateflagRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateflagRfInput.setStatus('mandatory')
dm1000labelOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelOptOutput.setStatus('optional')
dm1000enumOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000enumOptOutput.setStatus('optional')
dm1000valueOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm1000valueOptOutput.setStatus('mandatory')
dm1000stateflagOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateflagOptOutput.setStatus('mandatory')
dm1000labelSbsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelSbsControl.setStatus('optional')
dm1000enumSbsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000enumSbsControl.setStatus('optional')
dm1000valueSbsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm1000valueSbsControl.setStatus('mandatory')
dm1000stateflagSbsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateflagSbsControl.setStatus('mandatory')
dm1000labelLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelLaserMode.setStatus('optional')
dm1000enumLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000enumLaserMode.setStatus('optional')
dm1000valueLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preset", 1), ("set", 2), ("setEquate", 3), ("manual", 4), ("manualEquate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm1000valueLaserMode.setStatus('mandatory')
dm1000stateflagLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateflagLaserMode.setStatus('mandatory')
dm1000labelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelFactoryDefault.setStatus('optional')
dm1000enumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000enumFactoryDefault.setStatus('optional')
dm1000valueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dm1000valueFactoryDefault.setStatus('mandatory')
dm1000stateflagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateflagFactoryDefault.setStatus('mandatory')
gx2Dm1000StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Dm1000StatusTableIndex.setStatus('mandatory')
dm1000labelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelBoot.setStatus('optional')
dm1000valueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000valueBoot.setStatus('mandatory')
dm1000stateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateflagBoot.setStatus('mandatory')
dm1000labelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelFlash.setStatus('optional')
dm1000valueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000valueFlash.setStatus('mandatory')
dm1000stateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateflagFlash.setStatus('mandatory')
dm1000labelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelFactoryDataCRC.setStatus('optional')
dm1000valueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000valueFactoryDataCRC.setStatus('mandatory')
dm1000stateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateflagFactoryDataCRC.setStatus('mandatory')
dm1000labelLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelLaserDataCRC.setStatus('optional')
dm1000valueLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000valueLaserDataCRC.setStatus('mandatory')
dm1000stateflagLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateflagLaserDataCRC.setStatus('mandatory')
dm1000labelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelAlarmDataCrc.setStatus('optional')
dm1000valueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000valueAlarmDataCrc.setStatus('mandatory')
dm1000stateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateflagAlarmDataCrc.setStatus('mandatory')
dm1000labelRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000labelRFInputStatus.setStatus('optional')
dm1000valueRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000valueRFInputStatus.setStatus('mandatory')
dm1000stateflagRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000stateflagRFInputStatus.setStatus('mandatory')
gx2Dm1000FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Dm1000FactoryTableIndex.setStatus('mandatory')
dm1000bootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000bootControlByte.setStatus('mandatory')
dm1000bootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000bootStatusByte.setStatus('mandatory')
dm1000bank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000bank1CRC.setStatus('mandatory')
dm1000bank2CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000bank2CRC.setStatus('mandatory')
dm1000prgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000prgEEPROMByte.setStatus('mandatory')
dm1000factoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000factoryCRC.setStatus('mandatory')
dm1000calculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("na", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000calculateCRC.setStatus('obsolete')
dm1000hourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000hourMeter.setStatus('mandatory')
dm1000flashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000flashPrgCntA.setStatus('mandatory')
dm1000flashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000flashPrgCntB.setStatus('mandatory')
dm1000flashBankARev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000flashBankARev.setStatus('mandatory')
dm1000flashBankBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dm1000flashBankBRev.setStatus('mandatory')
trapDM1000ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000fanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000ModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000omiOffsetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000tecCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000LaserCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000LaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000LaserPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000BankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000CalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000ResetFacDefault = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000UserRFOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000UserOpticalOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000UserSBSOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000RFInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapDM1000RFOverloadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 28) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2Dm1000-MIB", dm1000minorHighOffsetNomMonitor=dm1000minorHighOffsetNomMonitor, gx2Dm1000FactoryTableIndex=gx2Dm1000FactoryTableIndex, trapDM1000FlashAlarm=trapDM1000FlashAlarm, dm1000minValueLaserPower=dm1000minValueLaserPower, dm1000stateFlagTecCurrent=dm1000stateFlagTecCurrent, dm1000valueFlash=dm1000valueFlash, dm1000alarmStateLaserPower=dm1000alarmStateLaserPower, dm1000minorLowOffsetNomCnt=dm1000minorLowOffsetNomCnt, trapDM1000ConfigChangeInteger=trapDM1000ConfigChangeInteger, trapDM1000ResetFacDefault=trapDM1000ResetFacDefault, dm1000majorHighLaserTemp=dm1000majorHighLaserTemp, dm1000labelLaserCurrent=dm1000labelLaserCurrent, dm1000valueBoot=dm1000valueBoot, dm1000labelTecCurrent=dm1000labelTecCurrent, dm1000minorHighModTemp=dm1000minorHighModTemp, dm1000stateflagRFInputStatus=dm1000stateflagRFInputStatus, dm1000minorLowFanCurrent=dm1000minorLowFanCurrent, dm1000uomAttenSetting=dm1000uomAttenSetting, dm1000flashBankBRev=dm1000flashBankBRev, trapDM1000BankBootAlarm=trapDM1000BankBootAlarm, dm1000minorHighLaserCurrent=dm1000minorHighLaserCurrent, dm1000stateflagBoot=dm1000stateflagBoot, gx2Dm1000FactoryEntry=gx2Dm1000FactoryEntry, trapDM1000UserSBSOffAlarm=trapDM1000UserSBSOffAlarm, dm1000minorLowLaserCurrent=dm1000minorLowLaserCurrent, dm1000labelOptOutput=dm1000labelOptOutput, gx2Dm1000AnalogTable=gx2Dm1000AnalogTable, dm1000flashPrgCntA=dm1000flashPrgCntA, trapDM1000omiOffsetAlarm=trapDM1000omiOffsetAlarm, dm1000stateFlagAttenSetting=dm1000stateFlagAttenSetting, dm1000alarmStateLaserTemp=dm1000alarmStateLaserTemp, dm1000labelAlarmDataCrc=dm1000labelAlarmDataCrc, dm1000majorLowOffsetNomMonitor=dm1000majorLowOffsetNomMonitor, gx2Dm1000DigitalTableIndex=gx2Dm1000DigitalTableIndex, dm1000valueFactoryDataCRC=dm1000valueFactoryDataCRC, dm1000maxValueOffsetNomMonitor=dm1000maxValueOffsetNomMonitor, dm1000calculateCRC=dm1000calculateCRC, gx2Dm1000StatusEntry=gx2Dm1000StatusEntry, dm1000bank1CRC=dm1000bank1CRC, dm1000valueAlarmDataCrc=dm1000valueAlarmDataCrc, trapDM1000ModuleTempAlarm=trapDM1000ModuleTempAlarm, dm1000minValueModTemp=dm1000minValueModTemp, dm1000labelRFInputStatus=dm1000labelRFInputStatus, dm1000uomOffsetNomCnt=dm1000uomOffsetNomCnt, trapDM1000LaserCurrentAlarm=trapDM1000LaserCurrentAlarm, trapDM1000LaserPowerAlarm=trapDM1000LaserPowerAlarm, dm1000majorLowTecCurrent=dm1000majorLowTecCurrent, dm1000enumSbsControl=dm1000enumSbsControl, dm1000bank2CRC=dm1000bank2CRC, dm1000uomModTemp=dm1000uomModTemp, dm1000stateflagRfInput=dm1000stateflagRfInput, dm1000valueLaserDataCRC=dm1000valueLaserDataCRC, dm1000stateFlagOffsetNomMonitor=dm1000stateFlagOffsetNomMonitor, dm1000uomFanCurrent=dm1000uomFanCurrent, dm1000stateflagOptOutput=dm1000stateflagOptOutput, dm1000bootStatusByte=dm1000bootStatusByte, trapDM1000UserOpticalOffAlarm=trapDM1000UserOpticalOffAlarm, dm1000enumLaserMode=dm1000enumLaserMode, dm1000maxValueLaserPower=dm1000maxValueLaserPower, dm1000stateFlagLaserCurrent=dm1000stateFlagLaserCurrent, dm1000valueSbsControl=dm1000valueSbsControl, dm1000stateflagFlash=dm1000stateflagFlash, dm1000minorHighLaserTemp=dm1000minorHighLaserTemp, dm1000stateflagSbsControl=dm1000stateflagSbsControl, trapDM1000RFOverloadAlarm=trapDM1000RFOverloadAlarm, dm1000majorHighOffsetNomCnt=dm1000majorHighOffsetNomCnt, dm1000alarmStateOffsetNomMonitor=dm1000alarmStateOffsetNomMonitor, dm1000stateFlagOffsetNomCnt=dm1000stateFlagOffsetNomCnt, dm1000majorHighLaserCurrent=dm1000majorHighLaserCurrent, dm1000minorHighOffsetNomCnt=dm1000minorHighOffsetNomCnt, dm1000labelFactoryDataCRC=dm1000labelFactoryDataCRC, dm1000majorLowAttenSetting=dm1000majorLowAttenSetting, dm1000maxValueTecCurrent=dm1000maxValueTecCurrent, dm1000majorLowLaserPower=dm1000majorLowLaserPower, dm1000stateflagFactoryDataCRC=dm1000stateflagFactoryDataCRC, trapDM1000CalDataCRCAlarm=trapDM1000CalDataCRCAlarm, dm1000flashBankARev=dm1000flashBankARev, gx2Dm1000DigitalTable=gx2Dm1000DigitalTable, dm1000alarmStateLaserCurrent=dm1000alarmStateLaserCurrent, dm1000currentValueTecCurrent=dm1000currentValueTecCurrent, dm1000alarmStateOffsetNomCnt=dm1000alarmStateOffsetNomCnt, gx2Dm1000AnalogTableIndex=gx2Dm1000AnalogTableIndex, dm1000labelLaserPower=dm1000labelLaserPower, dm1000labelFactoryDefault=dm1000labelFactoryDefault, trapDM1000AlarmDataCRCAlarm=trapDM1000AlarmDataCRCAlarm, dm1000stateFlagModTemp=dm1000stateFlagModTemp, gx2Dm1000Descriptor=gx2Dm1000Descriptor, dm1000uomLaserTemp=dm1000uomLaserTemp, dm1000labelFlash=dm1000labelFlash, gx2Dm1000FactoryTable=gx2Dm1000FactoryTable, dm1000labelLaserDataCRC=dm1000labelLaserDataCRC, dm1000minorLowModTemp=dm1000minorLowModTemp, dm1000enumFactoryDefault=dm1000enumFactoryDefault, dm1000minorHighFanCurrent=dm1000minorHighFanCurrent, dm1000labelLaserTemp=dm1000labelLaserTemp, dm1000minValueOffsetNomCnt=dm1000minValueOffsetNomCnt, dm1000maxValueModTemp=dm1000maxValueModTemp, dm1000enumOptOutput=dm1000enumOptOutput, dm1000stateFlagFanCurrent=dm1000stateFlagFanCurrent, dm1000minValueFanCurrent=dm1000minValueFanCurrent, dm1000majorLowModTemp=dm1000majorLowModTemp, dm1000valueRfInput=dm1000valueRfInput, gx2Dm1000StatusTableIndex=gx2Dm1000StatusTableIndex, dm1000factoryCRC=dm1000factoryCRC, dm1000stateflagAlarmDataCrc=dm1000stateflagAlarmDataCrc, dm1000labelRfInput=dm1000labelRfInput, dm1000alarmStateAttenSetting=dm1000alarmStateAttenSetting, dm1000uomLaserPower=dm1000uomLaserPower, dm1000currentValueLaserPower=dm1000currentValueLaserPower, dm1000currentValueLaserTemp=dm1000currentValueLaserTemp, dm1000majorLowFanCurrent=dm1000majorLowFanCurrent, dm1000maxValueOffsetNomCnt=dm1000maxValueOffsetNomCnt, dm1000majorLowLaserTemp=dm1000majorLowLaserTemp, gx2Dm1000StatusTable=gx2Dm1000StatusTable, dm1000labelSbsControl=dm1000labelSbsControl, gx2Dm1000AnalogEntry=gx2Dm1000AnalogEntry, dm1000alarmStateModTemp=dm1000alarmStateModTemp, dm1000prgEEPROMByte=dm1000prgEEPROMByte, gx2Dm1000DigitalEntry=gx2Dm1000DigitalEntry, dm1000majorHighTecCurrent=dm1000majorHighTecCurrent, dm1000majorHighFanCurrent=dm1000majorHighFanCurrent, dm1000stateflagLaserMode=dm1000stateflagLaserMode, dm1000maxValueAttenSetting=dm1000maxValueAttenSetting, dm1000maxValueLaserTemp=dm1000maxValueLaserTemp, dm1000uomTecCurrent=dm1000uomTecCurrent, dm1000currentValueFanCurrent=dm1000currentValueFanCurrent, dm1000minValueOffsetNomMonitor=dm1000minValueOffsetNomMonitor, dm1000valueFactoryDefault=dm1000valueFactoryDefault, dm1000valueRFInputStatus=dm1000valueRFInputStatus, dm1000labelAttenSetting=dm1000labelAttenSetting, dm1000majorHighAttenSetting=dm1000majorHighAttenSetting, Float=Float, dm1000uomOffsetNomMonitor=dm1000uomOffsetNomMonitor, dm1000minValueLaserTemp=dm1000minValueLaserTemp, dm1000minorLowAttenSetting=dm1000minorLowAttenSetting, dm1000majorHighLaserPower=dm1000majorHighLaserPower, dm1000alarmStateFanCurrent=dm1000alarmStateFanCurrent, trapDM1000tecCurrentAlarm=trapDM1000tecCurrentAlarm, trapDM1000fanCurrentAlarm=trapDM1000fanCurrentAlarm, dm1000stateFlagLaserPower=dm1000stateFlagLaserPower, dm1000majorHighModTemp=dm1000majorHighModTemp, dm1000flashPrgCntB=dm1000flashPrgCntB, dm1000majorLowOffsetNomCnt=dm1000majorLowOffsetNomCnt, dm1000minValueLaserCurrent=dm1000minValueLaserCurrent, dm1000hourMeter=dm1000hourMeter, dm1000minorLowLaserPower=dm1000minorLowLaserPower, dm1000labelLaserMode=dm1000labelLaserMode, dm1000labelModTemp=dm1000labelModTemp, dm1000minorLowTecCurrent=dm1000minorLowTecCurrent, dm1000minValueAttenSetting=dm1000minValueAttenSetting, dm1000minValueTecCurrent=dm1000minValueTecCurrent, dm1000bootControlByte=dm1000bootControlByte, dm1000minorLowOffsetNomMonitor=dm1000minorLowOffsetNomMonitor, dm1000labelBoot=dm1000labelBoot, dm1000labelOffsetNomCnt=dm1000labelOffsetNomCnt, dm1000minorHighLaserPower=dm1000minorHighLaserPower, dm1000currentValueOffsetNomMonitor=dm1000currentValueOffsetNomMonitor, dm1000minorHighAttenSetting=dm1000minorHighAttenSetting, dm1000maxValueLaserCurrent=dm1000maxValueLaserCurrent, dm1000currentValueAttenSetting=dm1000currentValueAttenSetting, dm1000alarmStateTecCurrent=dm1000alarmStateTecCurrent, trapDM1000ConfigChangeDisplayString=trapDM1000ConfigChangeDisplayString, dm1000labelOffsetNomMonitor=dm1000labelOffsetNomMonitor, dm1000labelFanCurrent=dm1000labelFanCurrent, dm1000stateFlagLaserTemp=dm1000stateFlagLaserTemp, dm1000maxValueFanCurrent=dm1000maxValueFanCurrent, dm1000majorHighOffsetNomMonitor=dm1000majorHighOffsetNomMonitor, dm1000currentValueOffsetNomCnt=dm1000currentValueOffsetNomCnt, dm1000enumRfInput=dm1000enumRfInput, dm1000minorHighTecCurrent=dm1000minorHighTecCurrent, trapDM1000RFInputAlarm=trapDM1000RFInputAlarm, dm1000majorLowLaserCurrent=dm1000majorLowLaserCurrent, dm1000minorLowLaserTemp=dm1000minorLowLaserTemp, trapDM1000UserRFOffAlarm=trapDM1000UserRFOffAlarm, trapDM1000FactoryDataCRCAlarm=trapDM1000FactoryDataCRCAlarm, dm1000stateflagLaserDataCRC=dm1000stateflagLaserDataCRC, dm1000uomLaserCurrent=dm1000uomLaserCurrent, dm1000valueLaserMode=dm1000valueLaserMode, trapDM1000LaserTempAlarm=trapDM1000LaserTempAlarm, dm1000valueOptOutput=dm1000valueOptOutput, dm1000currentValueLaserCurrent=dm1000currentValueLaserCurrent, dm1000currentValueModTemp=dm1000currentValueModTemp, dm1000stateflagFactoryDefault=dm1000stateflagFactoryDefault)
