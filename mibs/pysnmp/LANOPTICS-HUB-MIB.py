#
# PySNMP MIB module LANOPTICS-HUB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LANOPTICS-HUB-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:55:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter32, iso, Gauge32, Unsigned32, IpAddress, ModuleIdentity, Bits, MibIdentifier, NotificationType, enterprises, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "iso", "Gauge32", "Unsigned32", "IpAddress", "ModuleIdentity", "Bits", "MibIdentifier", "NotificationType", "enterprises", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class BITMAP(Integer32):
    pass

lanOptics = MibIdentifier((1, 3, 6, 1, 4, 1, 224))
lanOpticsHub = MibIdentifier((1, 3, 6, 1, 4, 1, 224, 1))
snMaxSlots = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snMaxSlots.setStatus('mandatory')
snSlotsNum = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snSlotsNum.setStatus('mandatory')
snConfig = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snConfig.setStatus('mandatory')
snLLActiveNMS = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snLLActiveNMS.setStatus('mandatory')
snReset = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snReset.setStatus('mandatory')
snInternalID = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snInternalID.setStatus('mandatory')
snDirtyBit = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 7), BITMAP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snDirtyBit.setStatus('mandatory')
snSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 224, 1, 8), )
if mibBuilder.loadTexts: snSlotsTable.setStatus('mandatory')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1) + (1000, ), Integer32())
snSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 1, 8, 1), ).setIndexNames((0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: snSlotsEntry.setStatus('mandatory')
snCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snCardName.setStatus('mandatory')
snCardDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snCardDescr.setStatus('mandatory')
snLLHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snLLHwRevision.setStatus('mandatory')
snLLSwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snLLSwRevision.setStatus('mandatory')
snLLControl0 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 14), BITMAP()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snLLControl0.setStatus('mandatory')
snLLControl1 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 15), BITMAP()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snLLControl1.setStatus('mandatory')
snPollInf = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snPollInf.setStatus('mandatory')
snResetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snResetSlot.setStatus('mandatory')
snPollInfCode = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 41), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPollInfCode.setStatus('mandatory')
snAssCode = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 8, 1, 42), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAssCode.setStatus('mandatory')
snPairAddress = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPairAddress.setStatus('mandatory')
snPairData = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPairData.setStatus('mandatory')
snHubSplitTable = MibTable((1, 3, 6, 1, 4, 1, 224, 1, 11), )
if mibBuilder.loadTexts: snHubSplitTable.setStatus('mandatory')
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 11, 1) + (1001, ), Integer32())
snHubSplitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 1, 11, 1), ).setIndexNames((0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1001"))
if mibBuilder.loadTexts: snHubSplitEntry.setStatus('mandatory')
snHubSplitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("splitted", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHubSplitStatus.setStatus('mandatory')
snHubPSTable = MibTable((1, 3, 6, 1, 4, 1, 224, 1, 12), )
if mibBuilder.loadTexts: snHubPSTable.setStatus('mandatory')
pysmiFakeCol1002 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 12, 1) + (1002, ), Integer32())
snHubPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 1, 12, 1), ).setIndexNames((0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1002"))
if mibBuilder.loadTexts: snHubPSEntry.setStatus('mandatory')
snHubPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("malfunctioning", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHubPSStatus.setStatus('mandatory')
snHubFanTable = MibTable((1, 3, 6, 1, 4, 1, 224, 1, 13), )
if mibBuilder.loadTexts: snHubFanTable.setStatus('mandatory')
pysmiFakeCol1003 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 13, 1) + (1003, ), Integer32())
snHubFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 1, 13, 1), ).setIndexNames((0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1003"))
if mibBuilder.loadTexts: snHubFanEntry.setStatus('mandatory')
snHubFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("malfunctioning", 1), ("missing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHubFanStatus.setStatus('mandatory')
snHubSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 224, 1, 14), )
if mibBuilder.loadTexts: snHubSlotsTable.setStatus('mandatory')
pysmiFakeCol1004 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 14, 1) + (1004, ), Integer32())
snHubSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 1, 14, 1), ).setIndexNames((0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1004"))
if mibBuilder.loadTexts: snHubSlotsEntry.setStatus('mandatory')
snHubSlotConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("disconnected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHubSlotConnected.setStatus('mandatory')
snHubSlotFreqError = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 16))).clone(namedValues=NamedValues(("slot-4M", 4), ("slot-16M", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHubSlotFreqError.setStatus('mandatory')
snHubSlotRevChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unchanged", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snHubSlotRevChanged.setStatus('mandatory')
snCompanionHW = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCompanionHW.setStatus('mandatory')
snCompanionReset = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snCompanionReset.setStatus('mandatory')
snCompanionStatus = MibScalar((1, 3, 6, 1, 4, 1, 224, 1, 17), BITMAP()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snCompanionStatus.setStatus('mandatory')
snGenPortsTable = MibTable((1, 3, 6, 1, 4, 1, 224, 1, 18), )
if mibBuilder.loadTexts: snGenPortsTable.setStatus('mandatory')
pysmiFakeCol1005 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 18, 1) + (1005, ), Integer32())
pysmiFakeCol1006 = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 18, 1) + (1006, ), Integer32())
snGenPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 224, 1, 18, 1), ).setIndexNames((0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1005"), (0, "LANOPTICS-HUB-MIB", "pysmiFakeCol1006"))
if mibBuilder.loadTexts: snGenPortsEntry.setStatus('mandatory')
snPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 224, 1, 18, 1, 1), BITMAP()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snPortValue.setStatus('mandatory')
mibBuilder.exportSymbols("LANOPTICS-HUB-MIB", snInternalID=snInternalID, snPairData=snPairData, pysmiFakeCol1004=pysmiFakeCol1004, snCompanionReset=snCompanionReset, snSlotsNum=snSlotsNum, snHubSlotRevChanged=snHubSlotRevChanged, snLLControl0=snLLControl0, snPollInf=snPollInf, snLLHwRevision=snLLHwRevision, snDirtyBit=snDirtyBit, snMaxSlots=snMaxSlots, pysmiFakeCol1000=pysmiFakeCol1000, snPollInfCode=snPollInfCode, pysmiFakeCol1003=pysmiFakeCol1003, pysmiFakeCol1006=pysmiFakeCol1006, snResetSlot=snResetSlot, lanOptics=lanOptics, pysmiFakeCol1001=pysmiFakeCol1001, snLLActiveNMS=snLLActiveNMS, snHubFanStatus=snHubFanStatus, snReset=snReset, snSlotsEntry=snSlotsEntry, snHubSlotsTable=snHubSlotsTable, pysmiFakeCol1002=pysmiFakeCol1002, snCompanionHW=snCompanionHW, pysmiFakeCol1005=pysmiFakeCol1005, snHubSlotConnected=snHubSlotConnected, snPortValue=snPortValue, lanOpticsHub=lanOpticsHub, BITMAP=BITMAP, snHubFanEntry=snHubFanEntry, snAssCode=snAssCode, snHubPSTable=snHubPSTable, snCardName=snCardName, snCardDescr=snCardDescr, snSlotsTable=snSlotsTable, snPairAddress=snPairAddress, snHubSplitStatus=snHubSplitStatus, snHubSlotsEntry=snHubSlotsEntry, snCompanionStatus=snCompanionStatus, snHubSplitTable=snHubSplitTable, snHubFanTable=snHubFanTable, snHubPSEntry=snHubPSEntry, snHubPSStatus=snHubPSStatus, snLLSwRevision=snLLSwRevision, snGenPortsTable=snGenPortsTable, snLLControl1=snLLControl1, snHubSplitEntry=snHubSplitEntry, snHubSlotFreqError=snHubSlotFreqError, snConfig=snConfig, snGenPortsEntry=snGenPortsEntry)
