#
# PySNMP MIB module ANS-MLBAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ANS-MLBAS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:06:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
RowPointer, DateAndTime, RowStatus, mlpmpR115 = mibBuilder.importSymbols("ANS-COMMON-MIB", "RowPointer", "DateAndTime", "RowStatus", "mlpmpR115")
ansSlotPosition, ansSlotSubrackIndex, ansBoardSystemNodeIndex, ansBoardSubrackIndex, ansBoardPosition, ansSlotSystemNodeIndex = mibBuilder.importSymbols("ANS-EQUIPMENT-MIB", "ansSlotPosition", "ansSlotSubrackIndex", "ansBoardSystemNodeIndex", "ansBoardSubrackIndex", "ansBoardPosition", "ansSlotSystemNodeIndex")
ansAccessUserPortSubrack, ansAccessUserPortSystemNode, ansAccessUserPortIndex, ansAccessUserPortPosition = mibBuilder.importSymbols("ANS-GS-MIB", "ansAccessUserPortSubrack", "ansAccessUserPortSystemNode", "ansAccessUserPortIndex", "ansAccessUserPortPosition")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Integer32, TimeTicks, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, Unsigned32, IpAddress, iso, ObjectIdentity, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "TimeTicks", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "Unsigned32", "IpAddress", "iso", "ObjectIdentity", "Counter32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mlbas = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5))
mlbasRadioNode = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1))
mlbasAccessTerminalSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2))
mlbasAccessTerminal = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3))
mlbasServiceUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4))
mlbasDownLinkPerf15min = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5))
mlbasUpLinkPerf15min = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6))
mlbasDownLinkPerf24hour = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7))
mlbasUpLinkPerf24hour = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8))
mlbasDownLinkLog15min = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9))
mlbasUpLinkLog15min = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10))
mlbasDownLinkLog24hour = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11))
mlbasUpLinkLog24hour = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12))
mlbasServiceUnitPort = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 13))
mlbasRadioNodeTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1), )
if mibBuilder.loadTexts: mlbasRadioNodeTable.setStatus('mandatory')
mlbasRadioNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"))
if mibBuilder.loadTexts: mlbasRadioNodeEntry.setStatus('mandatory')
mlbasRnCUId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCUId.setStatus('mandatory')
mlbasRnCUSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCUSecurity.setStatus('mandatory')
mlbasRnCUBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("ber3", 3), ("ber4", 4), ("ber5", 5), ("ber6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCUBerThreshold.setStatus('mandatory')
mlbasRnCUBwLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCUBwLimit.setStatus('mandatory')
mlbasRnCULoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("permanent", 2), ("selfTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCULoopMode.setStatus('mandatory')
mlbasRnCULoopPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modem", 1), ("radio", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCULoopPoint.setStatus('mandatory')
mlbasRnCUAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allAlarms", 1), ("filter", 2), ("noAlarms", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCUAlarmLevel.setStatus('mandatory')
mlbasRnCUSignedOnAts = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnCUSignedOnAts.setStatus('mandatory')
mlbasRnCUSignedOffAts = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnCUSignedOffAts.setStatus('mandatory')
mlbasRnCUChBw = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnCUChBw.setStatus('mandatory')
mlbasRnCUHwIdModem = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(41, 41)).setFixedLength(41)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnCUHwIdModem.setStatus('mandatory')
mlbasRnCUSwIdModem = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnCUSwIdModem.setStatus('mandatory')
mlbasRnRUDownFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnRUDownFreq.setStatus('mandatory')
mlbasRnRUUpFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUUpFreq.setStatus('mandatory')
mlbasRnRUDownFreqMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUDownFreqMin.setStatus('mandatory')
mlbasRnRUDownFreqMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUDownFreqMax.setStatus('mandatory')
mlbasRnRUFreqDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUFreqDuplex.setStatus('mandatory')
mlbasRnRUFreqStep = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUFreqStep.setStatus('mandatory')
mlbasRnRUOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnRUOutputPower.setStatus('mandatory')
mlbasRnRUOutputPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUOutputPowerMin.setStatus('mandatory')
mlbasRnRUOutputPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUOutputPowerMax.setStatus('mandatory')
mlbasRnRUHwIdRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(41, 41)).setFixedLength(41)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUHwIdRadio.setStatus('mandatory')
mlbasRnRUSwIdRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasRnRUSwIdRadio.setStatus('mandatory')
mlbasRnInterfLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3), ("manual", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnInterfLevel.setStatus('mandatory')
mlbasRnRSSIEXP = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnRSSIEXP.setStatus('mandatory')
mlbasRnCUSignOffAts = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("signOff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnCUSignOffAts.setStatus('mandatory')
mlbasRnSwitchBoardAction = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("switch-board", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasRnSwitchBoardAction.setStatus('mandatory')
mlbasAccessTerminalSlotTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1), )
if mibBuilder.loadTexts: mlbasAccessTerminalSlotTable.setStatus('mandatory')
mlbasAccessTerminalSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansSlotSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSlotSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSlotPosition"))
if mibBuilder.loadTexts: mlbasAccessTerminalSlotEntry.setStatus('mandatory')
mlbasAtSlotTerminalId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtSlotTerminalId.setStatus('mandatory')
mlbasAtSlotRnPos = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtSlotRnPos.setStatus('mandatory')
mlbasAtSlotLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtSlotLocation.setStatus('mandatory')
mlbasAtSlotSignOnAction = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtSlotSignOnAction.setStatus('mandatory')
mlbasAtSlotSignOnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("signedOn", 1), ("signedOff", 2), ("signingOn", 3), ("signingOff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtSlotSignOnStatus.setStatus('mandatory')
mlbasAtSlotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 2, 1, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtSlotRowStatus.setStatus('mandatory')
mlbasAccessTerminalTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1), )
if mibBuilder.loadTexts: mlbasAccessTerminalTable.setStatus('mandatory')
mlbasAccessTerminalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansSlotSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSlotSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansSlotPosition"))
if mibBuilder.loadTexts: mlbasAccessTerminalEntry.setStatus('mandatory')
mlbasAtCUPerformance = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtCUPerformance.setStatus('mandatory')
mlbasAtCUPerfStart = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUPerfStart.setStatus('mandatory')
mlbasAtCUAtmLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtCUAtmLoop.setStatus('mandatory')
mlbasAtCUBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6))).clone(namedValues=NamedValues(("ber3", 3), ("ber4", 4), ("ber5", 5), ("ber6", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasAtCUBerThreshold.setStatus('mandatory')
mlbasAtCUValid15MinPerf = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUValid15MinPerf.setStatus('mandatory')
mlbasAtCUInvalid15MinPerf = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUInvalid15MinPerf.setStatus('mandatory')
mlbasAtCUValid24HPerf = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUValid24HPerf.setStatus('mandatory')
mlbasAtCUInvalid24HPerf = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUInvalid24HPerf.setStatus('mandatory')
mlbasAtCUHwIdModem = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(41, 41)).setFixedLength(41)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUHwIdModem.setStatus('mandatory')
mlbasAtCUSwIdModem = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtCUSwIdModem.setStatus('mandatory')
mlbasAtRUDownFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtRUDownFreq.setStatus('mandatory')
mlbasAtRUUpFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtRUUpFreq.setStatus('mandatory')
mlbasAtRUOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtRUOutputPower.setStatus('mandatory')
mlbasAtRUHwIdRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(41, 41)).setFixedLength(41)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtRUHwIdRadio.setStatus('mandatory')
mlbasAtRUSwIdRadio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 3, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasAtRUSwIdRadio.setStatus('mandatory')
mlbasServiceUnitTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1), )
if mibBuilder.loadTexts: mlbasServiceUnitTable.setStatus('mandatory')
mlbasServiceUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"), (0, "ANS-MLBAS-MIB", "mlbasSuPos"))
if mibBuilder.loadTexts: mlbasServiceUnitEntry.setStatus('mandatory')
mlbasSuPos = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuPos.setStatus('mandatory')
mlbasSuManagedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unmanaged", 1), ("empty", 2), ("present", 3), ("managed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasSuManagedStatus.setStatus('mandatory')
mlbasSuOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuOperState.setStatus('mandatory')
mlbasSuHwId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(35, 35)).setFixedLength(35)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuHwId.setStatus('mandatory')
mlbasSuType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("any", 1), ("ethernet", 2), ("e1", 3), ("ds1", 4), ("atm", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mlbasSuType.setStatus('mandatory')
mlbasSuPciId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuPciId.setStatus('mandatory')
mlbasSuPciVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuPciVendor.setStatus('mandatory')
mlbasSuPortStartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuPortStartIndex.setStatus('mandatory')
mlbasSuNumOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSuNumOfPorts.setStatus('mandatory')
mlbasDownLinkPerf15minTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1), )
if mibBuilder.loadTexts: mlbasDownLinkPerf15minTable.setStatus('mandatory')
mlbasDownLinkPerf15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"), (0, "ANS-MLBAS-MIB", "mlbasDL15PeriodIndex"))
if mibBuilder.loadTexts: mlbasDownLinkPerf15minEntry.setStatus('mandatory')
mlbasDL15PeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PeriodIndex.setStatus('mandatory')
mlbasDL15UpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15UpdateTime.setStatus('mandatory')
mlbasDL15PerfCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfCellErrRatio.setStatus('mandatory')
mlbasDL15PerfCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfCellLossRatio.setStatus('mandatory')
mlbasDL15PerfUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfUbrDiscCell.setStatus('mandatory')
mlbasDL15PerfCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfCbrDiscCell.setStatus('mandatory')
mlbasDL15PerfAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfAvailTime.setStatus('mandatory')
mlbasDL15PerfUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfUnavailTime.setStatus('mandatory')
mlbasDL15PerfErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfErroredSecRatio.setStatus('mandatory')
mlbasDL15PerfSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfSevErroredSecRatio.setStatus('mandatory')
mlbasDL15PerfBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfBgBlockErrRatio.setStatus('mandatory')
mlbasDL15PerfMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfMinInPower.setStatus('mandatory')
mlbasDL15PerfMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfMaxInPower.setStatus('mandatory')
mlbasDL15PerfAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfAverageInPower.setStatus('mandatory')
mlbasDL15PerfMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfMinOutPower.setStatus('mandatory')
mlbasDL15PerfMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfMaxOutPower.setStatus('mandatory')
mlbasDL15PerfAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfAverageOutPower.setStatus('mandatory')
mlbasDL15PerfTerminalId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 5, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15PerfTerminalId.setStatus('mandatory')
mlbasUpLinkPerf15minTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1), )
if mibBuilder.loadTexts: mlbasUpLinkPerf15minTable.setStatus('mandatory')
mlbasUpLinkPerf15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"), (0, "ANS-MLBAS-MIB", "mlbasUL15PeriodIndex"))
if mibBuilder.loadTexts: mlbasUpLinkPerf15minEntry.setStatus('mandatory')
mlbasUL15PeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PeriodIndex.setStatus('mandatory')
mlbasUL15UpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15UpdateTime.setStatus('mandatory')
mlbasUL15PerfCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfCellErrRatio.setStatus('mandatory')
mlbasUL15PerfCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfCellLossRatio.setStatus('mandatory')
mlbasUL15PerfUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfUbrDiscCell.setStatus('mandatory')
mlbasUL15PerfCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfCbrDiscCell.setStatus('mandatory')
mlbasUL15PerfAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfAvailTime.setStatus('mandatory')
mlbasUL15PerfUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfUnavailTime.setStatus('mandatory')
mlbasUL15PerfErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfErroredSecRatio.setStatus('mandatory')
mlbasUL15PerfSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfSevErroredSecRatio.setStatus('mandatory')
mlbasUL15PerfBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfBgBlockErrRatio.setStatus('mandatory')
mlbasUL15PerfMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfMinInPower.setStatus('mandatory')
mlbasUL15PerfMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfMaxInPower.setStatus('mandatory')
mlbasUL15PerfAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfAverageInPower.setStatus('mandatory')
mlbasUL15PerfMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfMinOutPower.setStatus('mandatory')
mlbasUL15PerfMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfMaxOutPower.setStatus('mandatory')
mlbasUL15PerfAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfAverageOutPower.setStatus('mandatory')
mlbasUL15PerfTerminalId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 6, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15PerfTerminalId.setStatus('mandatory')
mlbasDownLinkPerf24hourTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1), )
if mibBuilder.loadTexts: mlbasDownLinkPerf24hourTable.setStatus('mandatory')
mlbasDownLinkPerf24hourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"), (0, "ANS-MLBAS-MIB", "mlbasDL24PeriodIndex"))
if mibBuilder.loadTexts: mlbasDownLinkPerf24hourEntry.setStatus('mandatory')
mlbasDL24PeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PeriodIndex.setStatus('mandatory')
mlbasDL24UpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24UpdateTime.setStatus('mandatory')
mlbasDL24PerfCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfCellErrRatio.setStatus('mandatory')
mlbasDL24PerfCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfCellLossRatio.setStatus('mandatory')
mlbasDL24PerfUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfUbrDiscCell.setStatus('mandatory')
mlbasDL24PerfCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfCbrDiscCell.setStatus('mandatory')
mlbasDL24PerfAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfAvailTime.setStatus('mandatory')
mlbasDL24PerfUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfUnavailTime.setStatus('mandatory')
mlbasDL24PerfErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfErroredSecRatio.setStatus('mandatory')
mlbasDL24PerfSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfSevErroredSecRatio.setStatus('mandatory')
mlbasDL24PerfBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfBgBlockErrRatio.setStatus('mandatory')
mlbasDL24PerfMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfMinInPower.setStatus('mandatory')
mlbasDL24PerfMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfMaxInPower.setStatus('mandatory')
mlbasDL24PerfAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfAverageInPower.setStatus('mandatory')
mlbasDL24PerfMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfMinOutPower.setStatus('mandatory')
mlbasDL24PerfMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfMaxOutPower.setStatus('mandatory')
mlbasDL24PerfAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfAverageOutPower.setStatus('mandatory')
mlbasDL24PerfTerminalId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 7, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24PerfTerminalId.setStatus('mandatory')
mlbasUpLinkPerf24hourTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1), )
if mibBuilder.loadTexts: mlbasUpLinkPerf24hourTable.setStatus('mandatory')
mlbasUpLinkPerf24hourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"), (0, "ANS-MLBAS-MIB", "mlbasUL24PeriodIndex"))
if mibBuilder.loadTexts: mlbasUpLinkPerf24hourEntry.setStatus('mandatory')
mlbasUL24PeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PeriodIndex.setStatus('mandatory')
mlbasUL24UpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24UpdateTime.setStatus('mandatory')
mlbasUL24PerfCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfCellErrRatio.setStatus('mandatory')
mlbasUL24PerfCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfCellLossRatio.setStatus('mandatory')
mlbasUL24PerfUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfUbrDiscCell.setStatus('mandatory')
mlbasUL24PerfCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfCbrDiscCell.setStatus('mandatory')
mlbasUL24PerfAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfAvailTime.setStatus('mandatory')
mlbasUL24PerfUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfUnavailTime.setStatus('mandatory')
mlbasUL24PerfErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfErroredSecRatio.setStatus('mandatory')
mlbasUL24PerfSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfSevErroredSecRatio.setStatus('mandatory')
mlbasUL24PerfBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfBgBlockErrRatio.setStatus('mandatory')
mlbasUL24PerfMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfMinInPower.setStatus('mandatory')
mlbasUL24PerfMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfMaxInPower.setStatus('mandatory')
mlbasUL24PerfAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfAverageInPower.setStatus('mandatory')
mlbasUL24PerfMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfMinOutPower.setStatus('mandatory')
mlbasUL24PerfMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfMaxOutPower.setStatus('mandatory')
mlbasUL24PerfAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfAverageOutPower.setStatus('mandatory')
mlbasUL24PerfTerminalId = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 8, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24PerfTerminalId.setStatus('mandatory')
mlbasDownLinkLog15minTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1), )
if mibBuilder.loadTexts: mlbasDownLinkLog15minTable.setStatus('mandatory')
mlbasDownLinkLog15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"))
if mibBuilder.loadTexts: mlbasDownLinkLog15minEntry.setStatus('mandatory')
mlbasDL15LogCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogCellErrRatio.setStatus('mandatory')
mlbasDL15LogCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogCellLossRatio.setStatus('mandatory')
mlbasDL15LogUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogUbrDiscCell.setStatus('mandatory')
mlbasDL15LogCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogCbrDiscCell.setStatus('mandatory')
mlbasDL15LogAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogAvailTime.setStatus('mandatory')
mlbasDL15LogUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogUnavailTime.setStatus('mandatory')
mlbasDL15LogErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogErroredSecRatio.setStatus('mandatory')
mlbasDL15LogSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogSevErroredSecRatio.setStatus('mandatory')
mlbasDL15LogBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogBgBlockErrRatio.setStatus('mandatory')
mlbasDL15LogMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogMinInPower.setStatus('mandatory')
mlbasDL15LogMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogMaxInPower.setStatus('mandatory')
mlbasDL15LogAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogAverageInPower.setStatus('mandatory')
mlbasDL15LogMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogMinOutPower.setStatus('mandatory')
mlbasDL15LogMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogMaxOutPower.setStatus('mandatory')
mlbasDL15LogAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 9, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL15LogAverageOutPower.setStatus('mandatory')
mlbasUpLinkLog15minTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1), )
if mibBuilder.loadTexts: mlbasUpLinkLog15minTable.setStatus('mandatory')
mlbasUpLinkLog15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"))
if mibBuilder.loadTexts: mlbasUpLinkLog15minEntry.setStatus('mandatory')
mlbasUL15LogCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogCellErrRatio.setStatus('mandatory')
mlbasUL15LogCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogCellLossRatio.setStatus('mandatory')
mlbasUL15LogUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogUbrDiscCell.setStatus('mandatory')
mlbasUL15LogCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogCbrDiscCell.setStatus('mandatory')
mlbasUL15LogAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogAvailTime.setStatus('mandatory')
mlbasUL15LogUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogUnavailTime.setStatus('mandatory')
mlbasUL15LogErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogErroredSecRatio.setStatus('mandatory')
mlbasUL15LogSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogSevErroredSecRatio.setStatus('mandatory')
mlbasUL15LogBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogBgBlockErrRatio.setStatus('mandatory')
mlbasUL15LogMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogMinInPower.setStatus('mandatory')
mlbasUL15LogMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogMaxInPower.setStatus('mandatory')
mlbasUL15LogAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogAverageInPower.setStatus('mandatory')
mlbasUL15LogMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogMinOutPower.setStatus('mandatory')
mlbasUL15LogMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogMaxOutPower.setStatus('mandatory')
mlbasUL15LogAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 10, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL15LogAverageOutPower.setStatus('mandatory')
mlbasDownLinkLog24hourTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1), )
if mibBuilder.loadTexts: mlbasDownLinkLog24hourTable.setStatus('mandatory')
mlbasDownLinkLog24hourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"))
if mibBuilder.loadTexts: mlbasDownLinkLog24hourEntry.setStatus('mandatory')
mlbasDL24LogCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogCellErrRatio.setStatus('mandatory')
mlbasDL24LogCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogCellLossRatio.setStatus('mandatory')
mlbasDL24LogUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogUbrDiscCell.setStatus('mandatory')
mlbasDL24LogCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogCbrDiscCell.setStatus('mandatory')
mlbasDL24LogAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogAvailTime.setStatus('mandatory')
mlbasDL24LogUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogUnavailTime.setStatus('mandatory')
mlbasDL24LogErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogErroredSecRatio.setStatus('mandatory')
mlbasDL24LogSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogSevErroredSecRatio.setStatus('mandatory')
mlbasDL24LogBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogBgBlockErrRatio.setStatus('mandatory')
mlbasDL24LogMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogMinInPower.setStatus('mandatory')
mlbasDL24LogMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogMaxInPower.setStatus('mandatory')
mlbasDL24LogAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogAverageInPower.setStatus('mandatory')
mlbasDL24LogMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogMinOutPower.setStatus('mandatory')
mlbasDL24LogMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogMaxOutPower.setStatus('mandatory')
mlbasDL24LogAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 11, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasDL24LogAverageOutPower.setStatus('mandatory')
mlbasUpLinkLog24hourTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1), )
if mibBuilder.loadTexts: mlbasUpLinkLog24hourTable.setStatus('mandatory')
mlbasUpLinkLog24hourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"))
if mibBuilder.loadTexts: mlbasUpLinkLog24hourEntry.setStatus('mandatory')
mlbasUL24LogCellErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogCellErrRatio.setStatus('mandatory')
mlbasUL24LogCellLossRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogCellLossRatio.setStatus('mandatory')
mlbasUL24LogUbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogUbrDiscCell.setStatus('mandatory')
mlbasUL24LogCbrDiscCell = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogCbrDiscCell.setStatus('mandatory')
mlbasUL24LogAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogAvailTime.setStatus('mandatory')
mlbasUL24LogUnavailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogUnavailTime.setStatus('mandatory')
mlbasUL24LogErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogErroredSecRatio.setStatus('mandatory')
mlbasUL24LogSevErroredSecRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogSevErroredSecRatio.setStatus('mandatory')
mlbasUL24LogBgBlockErrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogBgBlockErrRatio.setStatus('mandatory')
mlbasUL24LogMinInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogMinInPower.setStatus('mandatory')
mlbasUL24LogMaxInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogMaxInPower.setStatus('mandatory')
mlbasUL24LogAverageInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogAverageInPower.setStatus('mandatory')
mlbasUL24LogMinOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogMinOutPower.setStatus('mandatory')
mlbasUL24LogMaxOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogMaxOutPower.setStatus('mandatory')
mlbasUL24LogAverageOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 12, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasUL24LogAverageOutPower.setStatus('mandatory')
mlbasServiceUnitPortTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 13, 1), )
if mibBuilder.loadTexts: mlbasServiceUnitPortTable.setStatus('mandatory')
mlbasServiceUnitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 13, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansAccessUserPortSystemNode"), (0, "ANS-GS-MIB", "ansAccessUserPortSubrack"), (0, "ANS-GS-MIB", "ansAccessUserPortPosition"), (0, "ANS-GS-MIB", "ansAccessUserPortIndex"))
if mibBuilder.loadTexts: mlbasServiceUnitPortEntry.setStatus('mandatory')
mlbasSUPortPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSUPortPosition.setStatus('mandatory')
mlbasSUPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 5, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mlbasSUPortIndex.setStatus('mandatory')
mibBuilder.exportSymbols("ANS-MLBAS-MIB", mlbasDownLinkLog15min=mlbasDownLinkLog15min, mlbasRnRUOutputPowerMin=mlbasRnRUOutputPowerMin, mlbasAtSlotLocation=mlbasAtSlotLocation, mlbasDL15LogUnavailTime=mlbasDL15LogUnavailTime, mlbasAccessTerminal=mlbasAccessTerminal, mlbasDL15LogAverageOutPower=mlbasDL15LogAverageOutPower, mlbasAtCUBerThreshold=mlbasAtCUBerThreshold, mlbasRnRUDownFreqMax=mlbasRnRUDownFreqMax, mlbasDL15PerfMaxOutPower=mlbasDL15PerfMaxOutPower, mlbasUL24PerfMinInPower=mlbasUL24PerfMinInPower, mlbasDL15LogCellLossRatio=mlbasDL15LogCellLossRatio, mlbasUpLinkLog24hour=mlbasUpLinkLog24hour, mlbasUL24PerfAverageInPower=mlbasUL24PerfAverageInPower, mlbasAtRUOutputPower=mlbasAtRUOutputPower, mlbasUL15PerfTerminalId=mlbasUL15PerfTerminalId, mlbasUL15PerfAverageInPower=mlbasUL15PerfAverageInPower, mlbasUL24PerfSevErroredSecRatio=mlbasUL24PerfSevErroredSecRatio, mlbasDL15LogMaxInPower=mlbasDL15LogMaxInPower, mlbasDL24LogMinOutPower=mlbasDL24LogMinOutPower, mlbasAtRUSwIdRadio=mlbasAtRUSwIdRadio, mlbasDL24PerfCbrDiscCell=mlbasDL24PerfCbrDiscCell, mlbasDownLinkLog15minEntry=mlbasDownLinkLog15minEntry, mlbasUL15LogMinOutPower=mlbasUL15LogMinOutPower, mlbasDL15PerfCellErrRatio=mlbasDL15PerfCellErrRatio, mlbasDL15LogCbrDiscCell=mlbasDL15LogCbrDiscCell, mlbasUL24LogCbrDiscCell=mlbasUL24LogCbrDiscCell, mlbasAtSlotRnPos=mlbasAtSlotRnPos, mlbasUL15UpdateTime=mlbasUL15UpdateTime, mlbasDL24LogMaxInPower=mlbasDL24LogMaxInPower, mlbasSuPciVendor=mlbasSuPciVendor, mlbasUL15PerfCellErrRatio=mlbasUL15PerfCellErrRatio, mlbasRnCUChBw=mlbasRnCUChBw, mlbasUL24PerfMaxInPower=mlbasUL24PerfMaxInPower, mlbasSuOperState=mlbasSuOperState, mlbasSuNumOfPorts=mlbasSuNumOfPorts, mlbasSUPortIndex=mlbasSUPortIndex, mlbasDownLinkLog24hourTable=mlbasDownLinkLog24hourTable, mlbasUL15PerfErroredSecRatio=mlbasUL15PerfErroredSecRatio, mlbasDownLinkLog24hourEntry=mlbasDownLinkLog24hourEntry, mlbasUL15LogMaxInPower=mlbasUL15LogMaxInPower, mlbasUpLinkLog24hourEntry=mlbasUpLinkLog24hourEntry, mlbasUL24PerfBgBlockErrRatio=mlbasUL24PerfBgBlockErrRatio, mlbasRnCULoopPoint=mlbasRnCULoopPoint, mlbasDL15PerfMinInPower=mlbasDL15PerfMinInPower, mlbasDL15UpdateTime=mlbasDL15UpdateTime, mlbasAtCUValid15MinPerf=mlbasAtCUValid15MinPerf, mlbasAtSlotTerminalId=mlbasAtSlotTerminalId, mlbasRnRUUpFreq=mlbasRnRUUpFreq, mlbasDL15PerfMinOutPower=mlbasDL15PerfMinOutPower, mlbasUL24PerfCellLossRatio=mlbasUL24PerfCellLossRatio, mlbasUL24LogMinInPower=mlbasUL24LogMinInPower, mlbasUL24LogMaxOutPower=mlbasUL24LogMaxOutPower, mlbasUL15LogMaxOutPower=mlbasUL15LogMaxOutPower, mlbasDL15LogSevErroredSecRatio=mlbasDL15LogSevErroredSecRatio, mlbasAtCUInvalid15MinPerf=mlbasAtCUInvalid15MinPerf, mlbasUL15LogAvailTime=mlbasUL15LogAvailTime, mlbasDownLinkPerf15minEntry=mlbasDownLinkPerf15minEntry, mlbasDL24PerfAverageInPower=mlbasDL24PerfAverageInPower, mlbasRnCULoopMode=mlbasRnCULoopMode, mlbasRnCUSwIdModem=mlbasRnCUSwIdModem, mlbasRnCUId=mlbasRnCUId, mlbasAtCUInvalid24HPerf=mlbasAtCUInvalid24HPerf, mlbasUpLinkPerf15minEntry=mlbasUpLinkPerf15minEntry, mlbasUL15LogAverageOutPower=mlbasUL15LogAverageOutPower, mlbasRnRUFreqDuplex=mlbasRnRUFreqDuplex, mlbasDL15LogCellErrRatio=mlbasDL15LogCellErrRatio, mlbasDownLinkPerf24hour=mlbasDownLinkPerf24hour, mlbasServiceUnitEntry=mlbasServiceUnitEntry, mlbasRnRUFreqStep=mlbasRnRUFreqStep, mlbasUL24PerfCellErrRatio=mlbasUL24PerfCellErrRatio, mlbasDL15LogAverageInPower=mlbasDL15LogAverageInPower, mlbasDL24LogMaxOutPower=mlbasDL24LogMaxOutPower, mlbasUL24LogCellErrRatio=mlbasUL24LogCellErrRatio, mlbasUL24LogBgBlockErrRatio=mlbasUL24LogBgBlockErrRatio, mlbasUpLinkPerf24hour=mlbasUpLinkPerf24hour, mlbasAtRUHwIdRadio=mlbasAtRUHwIdRadio, mlbasSuType=mlbasSuType, mlbasUpLinkPerf15minTable=mlbasUpLinkPerf15minTable, mlbasAtRUUpFreq=mlbasAtRUUpFreq, mlbasDL24LogCellLossRatio=mlbasDL24LogCellLossRatio, mlbasAtCUPerfStart=mlbasAtCUPerfStart, mlbasUL24LogAvailTime=mlbasUL24LogAvailTime, mlbasUpLinkLog24hourTable=mlbasUpLinkLog24hourTable, mlbasUL24LogSevErroredSecRatio=mlbasUL24LogSevErroredSecRatio, mlbasRnCUBwLimit=mlbasRnCUBwLimit, mlbasAccessTerminalSlot=mlbasAccessTerminalSlot, mlbasDL15PerfAverageInPower=mlbasDL15PerfAverageInPower, mlbasDL24PerfUnavailTime=mlbasDL24PerfUnavailTime, mlbasUL24PerfUbrDiscCell=mlbasUL24PerfUbrDiscCell, mlbasAccessTerminalEntry=mlbasAccessTerminalEntry, mlbasRnRUSwIdRadio=mlbasRnRUSwIdRadio, mlbasUpLinkLog15minTable=mlbasUpLinkLog15minTable, mlbasRnCUBerThreshold=mlbasRnCUBerThreshold, mlbasUL24PerfAverageOutPower=mlbasUL24PerfAverageOutPower, mlbasDownLinkPerf15minTable=mlbasDownLinkPerf15minTable, mlbasDL15PerfMaxInPower=mlbasDL15PerfMaxInPower, mlbasDL24PerfUbrDiscCell=mlbasDL24PerfUbrDiscCell, mlbasDL15PeriodIndex=mlbasDL15PeriodIndex, mlbasDL15PerfAverageOutPower=mlbasDL15PerfAverageOutPower, mlbasUL15PerfAverageOutPower=mlbasUL15PerfAverageOutPower, mlbasUL24PerfUnavailTime=mlbasUL24PerfUnavailTime, mlbasUL24UpdateTime=mlbasUL24UpdateTime, mlbasDL24LogErroredSecRatio=mlbasDL24LogErroredSecRatio, mlbasDL15PerfTerminalId=mlbasDL15PerfTerminalId, mlbasDL24PerfTerminalId=mlbasDL24PerfTerminalId, mlbasDL15LogAvailTime=mlbasDL15LogAvailTime, mlbasUL15PerfUnavailTime=mlbasUL15PerfUnavailTime, mlbasRnRUOutputPower=mlbasRnRUOutputPower, mlbasUL24LogCellLossRatio=mlbasUL24LogCellLossRatio, mlbasUL24PeriodIndex=mlbasUL24PeriodIndex, mlbasUL15PerfCbrDiscCell=mlbasUL15PerfCbrDiscCell, mlbasUL15PerfSevErroredSecRatio=mlbasUL15PerfSevErroredSecRatio, mlbasDL15LogUbrDiscCell=mlbasDL15LogUbrDiscCell, mlbasUL15LogErroredSecRatio=mlbasUL15LogErroredSecRatio, mlbasUL15LogCellErrRatio=mlbasUL15LogCellErrRatio, mlbasUL15LogBgBlockErrRatio=mlbasUL15LogBgBlockErrRatio, mlbasDL15LogMinOutPower=mlbasDL15LogMinOutPower, mlbasRadioNode=mlbasRadioNode, mlbasDL24PerfMaxInPower=mlbasDL24PerfMaxInPower, mlbasAtCUAtmLoop=mlbasAtCUAtmLoop, mlbasUL15PerfMinOutPower=mlbasUL15PerfMinOutPower, mlbasUL24PerfMinOutPower=mlbasUL24PerfMinOutPower, mlbasAtSlotSignOnStatus=mlbasAtSlotSignOnStatus, mlbasDL15PerfUnavailTime=mlbasDL15PerfUnavailTime, mlbasDL24PerfSevErroredSecRatio=mlbasDL24PerfSevErroredSecRatio, mlbasDL15PerfCbrDiscCell=mlbasDL15PerfCbrDiscCell, mlbasSuPortStartIndex=mlbasSuPortStartIndex, mlbasDL15PerfAvailTime=mlbasDL15PerfAvailTime, mlbasAccessTerminalSlotTable=mlbasAccessTerminalSlotTable, mlbasUL24LogErroredSecRatio=mlbasUL24LogErroredSecRatio, mlbasUL24PerfMaxOutPower=mlbasUL24PerfMaxOutPower, mlbasRnRUDownFreqMin=mlbasRnRUDownFreqMin, mlbasServiceUnitPortTable=mlbasServiceUnitPortTable, mlbasRnCUSignedOnAts=mlbasRnCUSignedOnAts, mlbasUL15LogSevErroredSecRatio=mlbasUL15LogSevErroredSecRatio, mlbasAccessTerminalSlotEntry=mlbasAccessTerminalSlotEntry, mlbasUL24LogAverageInPower=mlbasUL24LogAverageInPower, mlbasUpLinkLog15min=mlbasUpLinkLog15min, mlbasUL15PeriodIndex=mlbasUL15PeriodIndex, mlbasUL15PerfMaxInPower=mlbasUL15PerfMaxInPower, mlbasRnRUHwIdRadio=mlbasRnRUHwIdRadio, mlbasUL24PerfErroredSecRatio=mlbasUL24PerfErroredSecRatio, mlbasDL15LogMaxOutPower=mlbasDL15LogMaxOutPower, mlbasUpLinkPerf24hourEntry=mlbasUpLinkPerf24hourEntry, mlbasDL24LogCellErrRatio=mlbasDL24LogCellErrRatio, mlbasDL15PerfCellLossRatio=mlbasDL15PerfCellLossRatio, mlbasUL24PerfAvailTime=mlbasUL24PerfAvailTime, mlbasUL15PerfAvailTime=mlbasUL15PerfAvailTime, mlbasServiceUnit=mlbasServiceUnit, mlbasRnSwitchBoardAction=mlbasRnSwitchBoardAction, mlbasUL15PerfUbrDiscCell=mlbasUL15PerfUbrDiscCell, mlbasDL24PerfMinOutPower=mlbasDL24PerfMinOutPower, mlbasUL24PerfCbrDiscCell=mlbasUL24PerfCbrDiscCell, mlbasUL15LogAverageInPower=mlbasUL15LogAverageInPower, mlbasRnRSSIEXP=mlbasRnRSSIEXP, mlbasDL24LogAverageInPower=mlbasDL24LogAverageInPower, mlbasSUPortPosition=mlbasSUPortPosition, mlbasDownLinkLog24hour=mlbasDownLinkLog24hour, mlbasUL15LogCbrDiscCell=mlbasUL15LogCbrDiscCell, mlbasDL24LogMinInPower=mlbasDL24LogMinInPower, mlbasDL15PerfBgBlockErrRatio=mlbasDL15PerfBgBlockErrRatio, mlbasDL24PerfCellErrRatio=mlbasDL24PerfCellErrRatio, mlbasDL15PerfUbrDiscCell=mlbasDL15PerfUbrDiscCell, mlbasDL24PerfMinInPower=mlbasDL24PerfMinInPower, mlbasDownLinkPerf24hourEntry=mlbasDownLinkPerf24hourEntry, mlbasUL15LogUbrDiscCell=mlbasUL15LogUbrDiscCell, mlbasUL15LogUnavailTime=mlbasUL15LogUnavailTime, mlbasUL24PerfTerminalId=mlbasUL24PerfTerminalId, mlbasDL15PerfErroredSecRatio=mlbasDL15PerfErroredSecRatio, mlbasRnCUSignOffAts=mlbasRnCUSignOffAts, mlbasAccessTerminalTable=mlbasAccessTerminalTable, mlbasAtSlotSignOnAction=mlbasAtSlotSignOnAction, mlbasSuPos=mlbasSuPos, mlbasDL15PerfSevErroredSecRatio=mlbasDL15PerfSevErroredSecRatio, mlbasDownLinkPerf24hourTable=mlbasDownLinkPerf24hourTable, mlbasDL24LogAverageOutPower=mlbasDL24LogAverageOutPower, mlbasDL24PerfAverageOutPower=mlbasDL24PerfAverageOutPower, mlbasDL24PeriodIndex=mlbasDL24PeriodIndex, mlbasDL24LogCbrDiscCell=mlbasDL24LogCbrDiscCell, mlbasRnCUSignedOffAts=mlbasRnCUSignedOffAts, mlbasRnCUHwIdModem=mlbasRnCUHwIdModem, mlbasDL24PerfBgBlockErrRatio=mlbasDL24PerfBgBlockErrRatio, mlbasDL15LogMinInPower=mlbasDL15LogMinInPower, mlbasDL24LogUbrDiscCell=mlbasDL24LogUbrDiscCell, mlbasDL24LogBgBlockErrRatio=mlbasDL24LogBgBlockErrRatio, mlbasRnCUSecurity=mlbasRnCUSecurity, mlbasDL15LogErroredSecRatio=mlbasDL15LogErroredSecRatio, mlbasRnInterfLevel=mlbasRnInterfLevel, mlbasDL24PerfMaxOutPower=mlbasDL24PerfMaxOutPower, mlbasAtCUValid24HPerf=mlbasAtCUValid24HPerf, mlbasDL24LogSevErroredSecRatio=mlbasDL24LogSevErroredSecRatio, mlbasUpLinkPerf15min=mlbasUpLinkPerf15min, mlbasRnRUDownFreq=mlbasRnRUDownFreq, mlbasUL24LogAverageOutPower=mlbasUL24LogAverageOutPower, mlbasServiceUnitPortEntry=mlbasServiceUnitPortEntry, mlbasUL15LogCellLossRatio=mlbasUL15LogCellLossRatio, mlbasSuHwId=mlbasSuHwId, mlbasRadioNodeTable=mlbasRadioNodeTable, mlbasServiceUnitTable=mlbasServiceUnitTable, mlbasDL24PerfErroredSecRatio=mlbasDL24PerfErroredSecRatio, mlbasUL15PerfCellLossRatio=mlbasUL15PerfCellLossRatio, mlbasDL24LogAvailTime=mlbasDL24LogAvailTime, mlbasUL24LogMinOutPower=mlbasUL24LogMinOutPower, mlbasUpLinkLog15minEntry=mlbasUpLinkLog15minEntry, mlbasRadioNodeEntry=mlbasRadioNodeEntry, mlbasDL24LogUnavailTime=mlbasDL24LogUnavailTime, mlbasUpLinkPerf24hourTable=mlbasUpLinkPerf24hourTable, mlbasUL15PerfBgBlockErrRatio=mlbasUL15PerfBgBlockErrRatio, mlbasDL24PerfAvailTime=mlbasDL24PerfAvailTime, mlbasSuManagedStatus=mlbasSuManagedStatus, mlbasAtCUPerformance=mlbasAtCUPerformance, mlbas=mlbas, mlbasDownLinkPerf15min=mlbasDownLinkPerf15min, mlbasRnRUOutputPowerMax=mlbasRnRUOutputPowerMax, mlbasUL15PerfMinInPower=mlbasUL15PerfMinInPower, mlbasDownLinkLog15minTable=mlbasDownLinkLog15minTable, mlbasDL15LogBgBlockErrRatio=mlbasDL15LogBgBlockErrRatio, mlbasAtSlotRowStatus=mlbasAtSlotRowStatus, mlbasAtCUSwIdModem=mlbasAtCUSwIdModem, mlbasUL24LogMaxInPower=mlbasUL24LogMaxInPower, mlbasAtCUHwIdModem=mlbasAtCUHwIdModem, mlbasUL24LogUnavailTime=mlbasUL24LogUnavailTime, mlbasDL24PerfCellLossRatio=mlbasDL24PerfCellLossRatio, mlbasSuPciId=mlbasSuPciId, mlbasRnCUAlarmLevel=mlbasRnCUAlarmLevel, mlbasServiceUnitPort=mlbasServiceUnitPort, mlbasDL24UpdateTime=mlbasDL24UpdateTime, mlbasAtRUDownFreq=mlbasAtRUDownFreq, mlbasUL15LogMinInPower=mlbasUL15LogMinInPower, mlbasUL24LogUbrDiscCell=mlbasUL24LogUbrDiscCell, mlbasUL15PerfMaxOutPower=mlbasUL15PerfMaxOutPower)
