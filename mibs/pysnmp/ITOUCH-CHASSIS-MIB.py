#
# PySNMP MIB module ITOUCH-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
HardwareType, iTouch, IOType, AddressType = mibBuilder.importSymbols("ITOUCH-MIB", "HardwareType", "iTouch", "IOType", "AddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ObjectIdentity, Counter64, Counter32, Bits, NotificationType, MibIdentifier, Unsigned32, IpAddress, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "Counter64", "Counter32", "Bits", "NotificationType", "MibIdentifier", "Unsigned32", "IpAddress", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16))
xChassisBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 1))
xSegment = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 2))
xPort = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 3))
xController = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 4))
xInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 5))
xSlotBootControl = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 6))
xSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 7))
xPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 8))
xFirmwareUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 16, 9))
class NetworkType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("unknown", 1), ("other", 2), ("ethernet", 3), ("tokenRing", 4), ("fddi", 5), ("wan", 6), ("ethernetRepeater", 7), ("tokenRingConcentrator", 8), ("fddiConcentrator", 9), ("atm", 10), ("isdn", 11), ("switchplane", 12), ("switchedEthernet", 13))

class SerialNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 6)

class Letter(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))
    namedValues = NamedValues(("a", 1), ("b", 2), ("c", 3), ("d", 4), ("e", 5), ("f", 6), ("g", 7), ("h", 8), ("i", 9), ("j", 10), ("k", 11), ("l", 12), ("m", 13), ("n", 14), ("o", 15), ("p", 16), ("q", 17), ("r", 18), ("s", 19), ("t", 20), ("u", 21), ("v", 22), ("w", 23), ("x", 24), ("y", 25), ("z", 26))

basicBase802Address = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicBase802Address.setStatus('mandatory')
basicSlot = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSlot.setStatus('mandatory')
basicSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basicSlotNumber.setStatus('mandatory')
basicNewBase802Address = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basicNewBase802Address.setStatus('mandatory')
segmentTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 2, 1), )
if mibBuilder.loadTexts: segmentTable.setStatus('mandatory')
segmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 2, 1, 1), ).setIndexNames((0, "ITOUCH-CHASSIS-MIB", "segmentType"), (0, "ITOUCH-CHASSIS-MIB", "segmentIndex"))
if mibBuilder.loadTexts: segmentEntry.setStatus('mandatory')
segmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 2, 1, 1, 1), NetworkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segmentType.setStatus('mandatory')
segmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 2, 1, 1, 2), Letter()).setMaxAccess("readonly")
if mibBuilder.loadTexts: segmentIndex.setStatus('mandatory')
portIOCardType = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 3, 1), IOType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIOCardType.setStatus('mandatory')
portIOCardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 3, 2), SerialNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIOCardSerialNumber.setStatus('mandatory')
portIOCardOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 16, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("mismatch", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIOCardOperStatus.setStatus('mandatory')
portTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 3, 4), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 3, 4, 1), ).setIndexNames((0, "ITOUCH-CHASSIS-MIB", "portType"), (0, "ITOUCH-CHASSIS-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 3, 4, 1, 1), NetworkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('mandatory')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
controllerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 4, 1), )
if mibBuilder.loadTexts: controllerTable.setStatus('mandatory')
controllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 4, 1, 1), ).setIndexNames((0, "ITOUCH-CHASSIS-MIB", "controllerType"), (0, "ITOUCH-CHASSIS-MIB", "controllerIndex"))
if mibBuilder.loadTexts: controllerEntry.setStatus('mandatory')
controllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 4, 1, 1, 1), NetworkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerType.setStatus('mandatory')
controllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerIndex.setStatus('mandatory')
controllerNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controllerNetwork.setStatus('mandatory')
interfaceTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 5, 1), )
if mibBuilder.loadTexts: interfaceTable.setStatus('mandatory')
interfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 5, 1, 1), ).setIndexNames((0, "ITOUCH-CHASSIS-MIB", "interfaceIndex"))
if mibBuilder.loadTexts: interfaceEntry.setStatus('mandatory')
interfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceIndex.setStatus('mandatory')
interfaceNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 5, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: interfaceNetwork.setStatus('mandatory')
slotBootControlTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 6, 1), )
if mibBuilder.loadTexts: slotBootControlTable.setStatus('mandatory')
slotBootControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1), ).setIndexNames((0, "ITOUCH-CHASSIS-MIB", "slotBootControlSlot"), (0, "ITOUCH-CHASSIS-MIB", "slotBootControlIndex"))
if mibBuilder.loadTexts: slotBootControlEntry.setStatus('mandatory')
slotBootControlSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootControlSlot.setStatus('mandatory')
slotBootControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootControlIndex.setStatus('mandatory')
slotBootControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlStatus.setStatus('mandatory')
slotBootControlController = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlController.setStatus('mandatory')
slotBootControlNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlNetwork.setStatus('mandatory')
slotBootControlMopFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlMopFile.setStatus('mandatory')
slotBootControlInternetFile = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlInternetFile.setStatus('mandatory')
slotBootControlInternetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlInternetAddress.setStatus('mandatory')
slotBootControlInternetServer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlInternetServer.setStatus('mandatory')
slotBootControlInternetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlInternetGateway.setStatus('mandatory')
slotBootControlInternetDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlInternetDelimiter.setStatus('mandatory')
slotBootControlFlagTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 6, 2), )
if mibBuilder.loadTexts: slotBootControlFlagTable.setStatus('mandatory')
slotBootControlFlagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1), ).setIndexNames((0, "ITOUCH-CHASSIS-MIB", "slotBootControlSlot"), (0, "ITOUCH-CHASSIS-MIB", "slotBootControlIndex"))
if mibBuilder.loadTexts: slotBootControlFlagEntry.setStatus('mandatory')
slotBootControlFlagLoadBootpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagLoadBootpTftp.setStatus('mandatory')
slotBootControlFlagParamBootpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagParamBootpTftp.setStatus('mandatory')
slotBootControlFlagDumpBootpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagDumpBootpTftp.setStatus('mandatory')
slotBootControlFlagLoadTftpDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagLoadTftpDirect.setStatus('mandatory')
slotBootControlFlagParamTftpDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagParamTftpDirect.setStatus('mandatory')
slotBootControlFlagDumpTftpDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagDumpTftpDirect.setStatus('mandatory')
slotBootControlFlagLoadLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagLoadLocal.setStatus('mandatory')
slotBootControlFlagParamLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagParamLocal.setStatus('mandatory')
slotBootControlFlagDumpLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagDumpLocal.setStatus('mandatory')
slotBootControlFlagLoadMop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagLoadMop.setStatus('mandatory')
slotBootControlFlagParamMop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagParamMop.setStatus('mandatory')
slotBootControlFlagDumpMop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagDumpMop.setStatus('mandatory')
slotBootControlFlagLoadXmop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagLoadXmop.setStatus('mandatory')
slotBootControlFlagParamXmop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagParamXmop.setStatus('mandatory')
slotBootControlFlagDumpXmop = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagDumpXmop.setStatus('mandatory')
slotBootControlFlagLoadRarpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagLoadRarpTftp.setStatus('mandatory')
slotBootControlFlagParamRarpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagParamRarpTftp.setStatus('mandatory')
slotBootControlFlagDumpRarpTftp = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotBootControlFlagDumpRarpTftp.setStatus('mandatory')
slotBootControlStorageTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 6, 3), )
if mibBuilder.loadTexts: slotBootControlStorageTable.setStatus('mandatory')
slotBootControlStorageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 6, 3, 1), ).setIndexNames((0, "ITOUCH-CHASSIS-MIB", "slotBootControlStorageClientSlot"), (0, "ITOUCH-CHASSIS-MIB", "slotBootControlStorageServerSlot"))
if mibBuilder.loadTexts: slotBootControlStorageEntry.setStatus('mandatory')
slotBootControlStorageClientSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootControlStorageClientSlot.setStatus('mandatory')
slotBootControlStorageServerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootControlStorageServerSlot.setStatus('mandatory')
slotBootControlStorageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("present", 1), ("failed", 2), ("ok", 3), ("notpresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootControlStorageStatus.setStatus('mandatory')
slotBootControlStorageFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootControlStorageFailures.setStatus('mandatory')
slotTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 7, 1), )
if mibBuilder.loadTexts: slotTable.setStatus('mandatory')
slotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1), ).setIndexNames((0, "ITOUCH-CHASSIS-MIB", "slotIndex"))
if mibBuilder.loadTexts: slotEntry.setStatus('mandatory')
slotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIndex.setStatus('mandatory')
slotAdminAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("reset", 2), ("resetHold", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotAdminAction.setStatus('mandatory')
slotOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 64, 65, 66, 67, 68, 69))).clone(namedValues=NamedValues(("loadRequested", 1), ("loading", 2), ("dumpRequested", 3), ("dumping", 4), ("paramRequested", 5), ("paramLoading", 6), ("running", 7), ("initializing", 8), ("attended", 9), ("internal10", 10), ("internal11", 11), ("inhibited", 12), ("maxserverCard", 13), ("invalidConfigStorage", 14), ("securityLockdown", 15), ("resetHold", 64), ("selfTest", 65), ("notResponding", 66), ("broken", 67), ("unknown", 68), ("notApplicable", 69)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotOperStatus.setStatus('mandatory')
slotSecondsSinceReset = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotSecondsSinceReset.setStatus('mandatory')
slotHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 5), HardwareType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotHardwareType.setStatus('mandatory')
slotHardwareSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 6), SerialNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotHardwareSerialNumber.setStatus('mandatory')
slotHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotHardwareRevision.setStatus('mandatory')
slotIOCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 8), IOType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIOCardType.setStatus('mandatory')
slotIOCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 9), SerialNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIOCardSerialNumber.setStatus('mandatory')
slotIOCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("mismatch", 2), ("good", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIOCardOperStatus.setStatus('mandatory')
slotBootstrapFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootstrapFirmwareRevision.setStatus('mandatory')
slotElementalFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotElementalFirmwareRevision.setStatus('mandatory')
slotMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMemorySize.setStatus('mandatory')
slotLedNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotLedNumber.setStatus('mandatory')
slotLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotLedStatus.setStatus('mandatory')
slotBase802Address = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBase802Address.setStatus('mandatory')
slotIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIpAddress.setStatus('mandatory')
slotPlus5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("broken", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPlus5Status.setStatus('mandatory')
slotPlus12Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("broken", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPlus12Status.setStatus('mandatory')
slotMinus12Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("broken", 2), ("good", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMinus12Status.setStatus('mandatory')
slotPlus5Watts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPlus5Watts.setStatus('mandatory')
slotPlus12Watts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotPlus12Watts.setStatus('mandatory')
slotMinus12Watts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotMinus12Watts.setStatus('mandatory')
slotIOCardHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotIOCardHardwareVersion.setStatus('mandatory')
slotRestoreNVS = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotRestoreNVS.setStatus('mandatory')
slotDefaultNVS = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: slotDefaultNVS.setStatus('mandatory')
slotBootTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 7, 2), )
if mibBuilder.loadTexts: slotBootTable.setStatus('mandatory')
slotBootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1), ).setIndexNames((0, "ITOUCH-CHASSIS-MIB", "slotBootIndex"))
if mibBuilder.loadTexts: slotBootEntry.setStatus('mandatory')
slotBootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootIndex.setStatus('mandatory')
slotBootIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootIfIndex.setStatus('mandatory')
slotBootNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootNetwork.setStatus('mandatory')
slotBootProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("mop", 3), ("xmop", 4), ("rarpTftp", 5), ("bootpTftp", 6), ("tftp", 7), ("local", 8), ("managementBus", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootProtocol.setStatus('mandatory')
slotBoot802Address = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBoot802Address.setStatus('mandatory')
slotBootAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 6), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootAddressType.setStatus('mandatory')
slotBootAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootAddress.setStatus('mandatory')
slotBootServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 8), AddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootServerAddressType.setStatus('mandatory')
slotBootServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootServerAddress.setStatus('mandatory')
slotBootGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootGatewayAddress.setStatus('mandatory')
slotBootFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootFileName.setStatus('mandatory')
slotBootBlockNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootBlockNumber.setStatus('mandatory')
slotBootCrashCode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotBootCrashCode.setStatus('mandatory')
slotControllerTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 7, 3), )
if mibBuilder.loadTexts: slotControllerTable.setStatus('mandatory')
slotControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 7, 3, 1), ).setIndexNames((0, "ITOUCH-CHASSIS-MIB", "slotControllerType"), (0, "ITOUCH-CHASSIS-MIB", "slotControllerIndex"))
if mibBuilder.loadTexts: slotControllerEntry.setStatus('mandatory')
slotControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 3, 1, 1), NetworkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotControllerType.setStatus('mandatory')
slotControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotControllerIndex.setStatus('mandatory')
slotControllerNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 7, 3, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotControllerNetwork.setStatus('mandatory')
powerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 8, 1), )
if mibBuilder.loadTexts: powerSupplyTable.setStatus('mandatory')
powerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1), ).setIndexNames((0, "ITOUCH-CHASSIS-MIB", "powerSupplyIndex"))
if mibBuilder.loadTexts: powerSupplyEntry.setStatus('mandatory')
powerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyIndex.setStatus('mandatory')
powerSupplyAdminAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("reset", 2), ("resetHold", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSupplyAdminAction.setStatus('mandatory')
powerSupplyFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyFirmwareVersion.setStatus('mandatory')
powerSupplyRedundancyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("redundant", 3), ("engaged", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyRedundancyStatus.setStatus('mandatory')
powerSupplyPlus5Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPlus5Status.setStatus('mandatory')
powerSupplyPlus12Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPlus12Status.setStatus('mandatory')
powerSupplyMinus12Status = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyMinus12Status.setStatus('mandatory')
powerSupplyThermalWarningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyThermalWarningStatus.setStatus('mandatory')
powerSupplyThermalShutdownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyThermalShutdownStatus.setStatus('mandatory')
powerSupplyFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyFanStatus.setStatus('mandatory')
powerSupplyHardwareInhibitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyHardwareInhibitStatus.setStatus('mandatory')
powerSupplyPlus5History = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPlus5History.setStatus('mandatory')
powerSupplyPlus12History = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPlus12History.setStatus('mandatory')
powerSupplyMinus12History = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyMinus12History.setStatus('mandatory')
powerSupplyThermalWarningHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyThermalWarningHistory.setStatus('mandatory')
powerSupplyThermalShutdownHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyThermalShutdownHistory.setStatus('mandatory')
powerSupplyFanHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyFanHistory.setStatus('mandatory')
powerSupplyHardwareInhibitHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("good", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyHardwareInhibitHistory.setStatus('mandatory')
powerSupplyPlus5Volts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPlus5Volts.setStatus('mandatory')
powerSupplyPlus12Volts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyPlus12Volts.setStatus('mandatory')
powerSupplyMinus12Volts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyMinus12Volts.setStatus('mandatory')
powerSupplyWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyWatts.setStatus('mandatory')
powerSupplyWattsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyWattsMax.setStatus('mandatory')
powerSupplyChassisWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyChassisWatts.setStatus('mandatory')
powerSupplyChassisWattsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyChassisWattsMax.setStatus('mandatory')
powerSupplyHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 8, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ps130", 2), ("bb190", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyHardwareType.setStatus('mandatory')
firmwareUpdateTable = MibTable((1, 3, 6, 1, 4, 1, 33, 16, 9, 1), )
if mibBuilder.loadTexts: firmwareUpdateTable.setStatus('mandatory')
firmwareUpdateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1), ).setIndexNames((0, "ITOUCH-CHASSIS-MIB", "firmwareUpdateSlotIndex"))
if mibBuilder.loadTexts: firmwareUpdateEntry.setStatus('mandatory')
firmwareUpdateSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateSlotIndex.setStatus('mandatory')
firmwareUpdateDefaultFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateDefaultFileName.setStatus('mandatory')
firmwareUpdateFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateFileName.setStatus('mandatory')
firmwareUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateStatus.setStatus('mandatory')
firmwareUpdateState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("writing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateState.setStatus('mandatory')
firmwareUpdateCompletionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("noTarget", 3), ("busError", 4), ("badFileName", 5), ("targetError", 6), ("timeout", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareUpdateCompletionStatus.setStatus('mandatory')
firmwareUpdateMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 16, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("card", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firmwareUpdateMethod.setStatus('mandatory')
mibBuilder.exportSymbols("ITOUCH-CHASSIS-MIB", powerSupplyChassisWatts=powerSupplyChassisWatts, powerSupplyMinus12History=powerSupplyMinus12History, interfaceEntry=interfaceEntry, slotBootControlFlagParamBootpTftp=slotBootControlFlagParamBootpTftp, slotBootTable=slotBootTable, slotControllerIndex=slotControllerIndex, slotBootControlFlagTable=slotBootControlFlagTable, slotBootControlFlagParamLocal=slotBootControlFlagParamLocal, slotIOCardHardwareVersion=slotIOCardHardwareVersion, slotRestoreNVS=slotRestoreNVS, slotBootControlInternetFile=slotBootControlInternetFile, powerSupplyMinus12Volts=powerSupplyMinus12Volts, powerSupplyHardwareInhibitStatus=powerSupplyHardwareInhibitStatus, firmwareUpdateMethod=firmwareUpdateMethod, xSlotBootControl=xSlotBootControl, powerSupplyHardwareInhibitHistory=powerSupplyHardwareInhibitHistory, slotBootControlSlot=slotBootControlSlot, basicNewBase802Address=basicNewBase802Address, slotBootControlFlagLoadXmop=slotBootControlFlagLoadXmop, powerSupplyAdminAction=powerSupplyAdminAction, powerSupplyIndex=powerSupplyIndex, slotBootControlStorageStatus=slotBootControlStorageStatus, slotBootControlFlagLoadTftpDirect=slotBootControlFlagLoadTftpDirect, powerSupplyHardwareType=powerSupplyHardwareType, slotBootControlStorageTable=slotBootControlStorageTable, slotBase802Address=slotBase802Address, controllerEntry=controllerEntry, xChassis=xChassis, NetworkType=NetworkType, xPowerSupply=xPowerSupply, slotIpAddress=slotIpAddress, slotBootControlInternetGateway=slotBootControlInternetGateway, slotBootControlMopFile=slotBootControlMopFile, slotPlus5Status=slotPlus5Status, firmwareUpdateStatus=firmwareUpdateStatus, portTable=portTable, powerSupplyThermalWarningHistory=powerSupplyThermalWarningHistory, portEntry=portEntry, slotMinus12Status=slotMinus12Status, portIOCardOperStatus=portIOCardOperStatus, powerSupplyMinus12Status=powerSupplyMinus12Status, powerSupplyWatts=powerSupplyWatts, slotHardwareSerialNumber=slotHardwareSerialNumber, powerSupplyTable=powerSupplyTable, slotControllerType=slotControllerType, portIndex=portIndex, slotBootControlFlagDumpXmop=slotBootControlFlagDumpXmop, slotBootControlStorageFailures=slotBootControlStorageFailures, powerSupplyFanStatus=powerSupplyFanStatus, firmwareUpdateState=firmwareUpdateState, powerSupplyThermalWarningStatus=powerSupplyThermalWarningStatus, xSlot=xSlot, slotBootControlFlagLoadMop=slotBootControlFlagLoadMop, powerSupplyThermalShutdownStatus=powerSupplyThermalShutdownStatus, xInterface=xInterface, slotBootControlFlagParamRarpTftp=slotBootControlFlagParamRarpTftp, xSegment=xSegment, portIOCardSerialNumber=portIOCardSerialNumber, slotBootControlEntry=slotBootControlEntry, slotBootControlFlagDumpMop=slotBootControlFlagDumpMop, powerSupplyPlus12Status=powerSupplyPlus12Status, slotLedStatus=slotLedStatus, controllerIndex=controllerIndex, slotBootIndex=slotBootIndex, basicBase802Address=basicBase802Address, slotControllerNetwork=slotControllerNetwork, slotHardwareType=slotHardwareType, xChassisBasic=xChassisBasic, interfaceNetwork=interfaceNetwork, slotBootControlStatus=slotBootControlStatus, slotPlus12Watts=slotPlus12Watts, slotBootstrapFirmwareRevision=slotBootstrapFirmwareRevision, powerSupplyEntry=powerSupplyEntry, slotBootAddress=slotBootAddress, SerialNumber=SerialNumber, slotBootControlFlagDumpTftpDirect=slotBootControlFlagDumpTftpDirect, slotTable=slotTable, slotIndex=slotIndex, slotBootControlFlagParamXmop=slotBootControlFlagParamXmop, slotBootGatewayAddress=slotBootGatewayAddress, slotControllerTable=slotControllerTable, slotIOCardType=slotIOCardType, controllerTable=controllerTable, interfaceIndex=interfaceIndex, powerSupplyPlus5Status=powerSupplyPlus5Status, slotBootServerAddress=slotBootServerAddress, firmwareUpdateSlotIndex=firmwareUpdateSlotIndex, portIOCardType=portIOCardType, slotBootNetwork=slotBootNetwork, slotBoot802Address=slotBoot802Address, controllerType=controllerType, xPort=xPort, segmentIndex=segmentIndex, slotBootControlFlagParamTftpDirect=slotBootControlFlagParamTftpDirect, slotMinus12Watts=slotMinus12Watts, slotBootFileName=slotBootFileName, slotBootControlTable=slotBootControlTable, Letter=Letter, firmwareUpdateTable=firmwareUpdateTable, slotBootControlController=slotBootControlController, slotMemorySize=slotMemorySize, slotPlus12Status=slotPlus12Status, slotEntry=slotEntry, slotAdminAction=slotAdminAction, powerSupplyPlus12History=powerSupplyPlus12History, powerSupplyPlus5Volts=powerSupplyPlus5Volts, powerSupplyFanHistory=powerSupplyFanHistory, slotBootControlNetwork=slotBootControlNetwork, slotBootControlFlagEntry=slotBootControlFlagEntry, basicSlotNumber=basicSlotNumber, slotBootControlStorageClientSlot=slotBootControlStorageClientSlot, slotSecondsSinceReset=slotSecondsSinceReset, slotBootControlFlagParamMop=slotBootControlFlagParamMop, powerSupplyFirmwareVersion=powerSupplyFirmwareVersion, segmentEntry=segmentEntry, slotControllerEntry=slotControllerEntry, slotOperStatus=slotOperStatus, slotBootControlFlagDumpRarpTftp=slotBootControlFlagDumpRarpTftp, slotBootBlockNumber=slotBootBlockNumber, slotBootControlInternetDelimiter=slotBootControlInternetDelimiter, xController=xController, xFirmwareUpdate=xFirmwareUpdate, slotBootAddressType=slotBootAddressType, slotBootCrashCode=slotBootCrashCode, slotDefaultNVS=slotDefaultNVS, slotBootControlFlagLoadLocal=slotBootControlFlagLoadLocal, slotBootControlInternetServer=slotBootControlInternetServer, slotBootControlIndex=slotBootControlIndex, powerSupplyThermalShutdownHistory=powerSupplyThermalShutdownHistory, firmwareUpdateCompletionStatus=firmwareUpdateCompletionStatus, slotBootControlInternetAddress=slotBootControlInternetAddress, slotPlus5Watts=slotPlus5Watts, firmwareUpdateFileName=firmwareUpdateFileName, basicSlot=basicSlot, controllerNetwork=controllerNetwork, powerSupplyWattsMax=powerSupplyWattsMax, slotBootEntry=slotBootEntry, slotIOCardOperStatus=slotIOCardOperStatus, segmentType=segmentType, slotHardwareRevision=slotHardwareRevision, slotElementalFirmwareRevision=slotElementalFirmwareRevision, slotBootIfIndex=slotBootIfIndex, slotBootProtocol=slotBootProtocol, firmwareUpdateDefaultFileName=firmwareUpdateDefaultFileName, powerSupplyChassisWattsMax=powerSupplyChassisWattsMax, slotBootControlStorageServerSlot=slotBootControlStorageServerSlot, segmentTable=segmentTable, powerSupplyPlus12Volts=powerSupplyPlus12Volts, slotIOCardSerialNumber=slotIOCardSerialNumber, powerSupplyPlus5History=powerSupplyPlus5History, slotBootControlFlagDumpBootpTftp=slotBootControlFlagDumpBootpTftp, slotBootControlFlagLoadBootpTftp=slotBootControlFlagLoadBootpTftp, firmwareUpdateEntry=firmwareUpdateEntry, slotBootControlStorageEntry=slotBootControlStorageEntry, portType=portType, slotLedNumber=slotLedNumber, slotBootControlFlagLoadRarpTftp=slotBootControlFlagLoadRarpTftp, slotBootServerAddressType=slotBootServerAddressType, powerSupplyRedundancyStatus=powerSupplyRedundancyStatus, slotBootControlFlagDumpLocal=slotBootControlFlagDumpLocal, interfaceTable=interfaceTable)
