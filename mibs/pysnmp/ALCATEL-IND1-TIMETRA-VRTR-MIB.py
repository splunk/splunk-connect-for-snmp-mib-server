#
# PySNMP MIB module ALCATEL-IND1-TIMETRA-VRTR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-TIMETRA-VRTR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:04:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
TmnxSlotNum, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-CHASSIS-MIB", "TmnxSlotNum")
TIPFilterID, TFilterID = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-FILTER-MIB", "TIPFilterID", "TFilterID")
tmnxSRConfs, timetraSRMIBModules, tmnxSRObjs, tmnxSRNotifyPrefix = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-GLOBAL-MIB", "tmnxSRConfs", "timetraSRMIBModules", "tmnxSRObjs", "tmnxSRNotifyPrefix")
tmnxPortType, tmnxPortNotifyPortId = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortType", "tmnxPortNotifyPortId")
TNetworkPolicyID, = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-QOS-MIB", "TNetworkPolicyID")
sapEncapValue, sapPortId = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue", "sapPortId")
svcDhcpLseStateNewCiAddr, svcDhcpClientLease, svcDhcpLseStateNewChAddr = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr", "svcDhcpClientLease", "svcDhcpLseStateNewChAddr")
TmnxVPNRouteDistinguisher, TmnxServId, TmnxCustId, TmnxAdminState, IpAddressPrefixLength, TmnxStatus, TDSCPValueOrNone, TmnxVRtrIDOrZero, TmnxEncapVal, TmnxTunnelType, TDSCPValue, TNamedItemOrEmpty, TPolicyStatementNameOrEmpty, TNamedItem, TFCType, TmnxPortID, TmnxBgpAutonomousSystem, TmnxOperState, TmnxTunnelID, TCpmProtPolicyID, TItemLongDescription, TmnxVRtrID, TItemDescription, TmnxDHCP6MsgType, Dot1PPriority = mibBuilder.importSymbols("ALCATEL-IND1-TIMETRA-TC-MIB", "TmnxVPNRouteDistinguisher", "TmnxServId", "TmnxCustId", "TmnxAdminState", "IpAddressPrefixLength", "TmnxStatus", "TDSCPValueOrNone", "TmnxVRtrIDOrZero", "TmnxEncapVal", "TmnxTunnelType", "TDSCPValue", "TNamedItemOrEmpty", "TPolicyStatementNameOrEmpty", "TNamedItem", "TFCType", "TmnxPortID", "TmnxBgpAutonomousSystem", "TmnxOperState", "TmnxTunnelID", "TCpmProtPolicyID", "TItemLongDescription", "TmnxVRtrID", "TItemDescription", "TmnxDHCP6MsgType", "Dot1PPriority")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType, InetAddressIPv6, InetAddressPrefixLength, InetAddressIPv6z = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressIPv6", "InetAddressPrefixLength", "InetAddressIPv6z")
ipCidrRouteEntry, = mibBuilder.importSymbols("IP-FORWARD-MIB", "ipCidrRouteEntry")
ipNetToMediaEntry, = mibBuilder.importSymbols("IP-MIB", "ipNetToMediaEntry")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Integer32, ModuleIdentity, Unsigned32, TimeTicks, Gauge32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, MibIdentifier, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Integer32", "ModuleIdentity", "Unsigned32", "TimeTicks", "Gauge32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "MibIdentifier", "Counter32", "IpAddress")
TextualConvention, RowStatus, TimeStamp, MacAddress, DisplayString, TestAndIncr, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TimeStamp", "MacAddress", "DisplayString", "TestAndIncr", "TruthValue")
timetraVRtrMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 3))
timetraVRtrMIBModule.setRevisions(('1908-01-01 00:00', '1907-01-01 00:00', '1906-02-28 00:00', '1905-08-31 00:00', '1905-01-24 00:00', '1904-01-15 00:00', '1903-08-15 00:00', '1903-01-20 00:00', '1900-08-14 00:00',))
if mibBuilder.loadTexts: timetraVRtrMIBModule.setLastUpdated('0801010000Z')
if mibBuilder.loadTexts: timetraVRtrMIBModule.setOrganization('Alcatel')
tmnxVRtrObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3))
tmnxVRtrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3))
tmnxVRtrNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3))
tmnxVRtrNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0))
class TmnxVPNId(TextualConvention, OctetString):
    reference = "RFC 2685, Fox & Gleeson, 'Virtual Private Networks Identifier', September 1999."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 7)

class TmnxInetAddrState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("unknown", 0), ("tentative", 1), ("duplicated", 2), ("inaccessible", 3), ("deprecated", 4), ("preferred", 5))

class TDSCPAppId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))
    namedValues = NamedValues(("bgp", 1), ("cflowd", 2), ("dhcp", 3), ("dns", 4), ("ftp", 5), ("icmp", 6), ("igmp", 7), ("ldp", 8), ("mld", 9), ("msdp", 10), ("ndis", 11), ("ntp", 12), ("ospf", 13), ("pim", 14), ("radius", 15), ("rip", 16), ("rsvp", 17), ("snmp", 18), ("snmp-notification", 19), ("srrp", 20), ("ssh", 21), ("syslog", 22), ("tacplus", 23), ("telnet", 24), ("tftp", 25), ("traceroute", 26), ("vrrp", 27))

class TDot1pAppId(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("arp", 1), ("isis", 2), ("pppoe", 3))

tmnxVRtrGlobalObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 15))
vRtrNextVRtrID = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 15, 1), TestAndIncr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrNextVRtrID.setStatus('current')
vRtrConfiguredVRtrs = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 15, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrConfiguredVRtrs.setStatus('current')
vRtrActiveVRtrs = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 15, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrActiveVRtrs.setStatus('current')
vRtrRouteThresholdSoakTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 15, 4), Unsigned32().clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrRouteThresholdSoakTime.setStatus('current')
vRtrMaxARPEntries = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 15, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMaxARPEntries.setStatus('current')
vRtrIPv6RouteThresholdSoakTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 15, 6), Unsigned32().clone(600)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIPv6RouteThresholdSoakTime.setStatus('current')
vRtrConfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1), )
if mibBuilder.loadTexts: vRtrConfTable.setStatus('current')
vRtrConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"))
if mibBuilder.loadTexts: vRtrConfEntry.setStatus('current')
vRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 1), TmnxVRtrID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrID.setStatus('current')
vRtrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrRowStatus.setStatus('current')
vRtrAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 3), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAdminState.setStatus('current')
vRtrName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 4), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrName.setStatus('current')
vRtrMaxNumRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMaxNumRoutes.setStatus('current')
vRtrBgpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 6), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrBgpStatus.setStatus('current')
vRtrMplsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 7), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMplsStatus.setStatus('current')
vRtrOspfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 8), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrOspfStatus.setStatus('obsolete')
vRtrRipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 9), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrRipStatus.setStatus('current')
vRtrRsvpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 10), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrRsvpStatus.setStatus('current')
vRtrEcmpMaxRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrEcmpMaxRoutes.setStatus('current')
vRtrAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 12), TmnxBgpAutonomousSystem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAS.setStatus('current')
vRtrNewIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 13), TestAndIncr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrNewIfIndex.setStatus('current')
vRtrLdpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 14), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrLdpStatus.setStatus('current')
vRtrIsIsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 15), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIsIsStatus.setStatus('current')
vRtrRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrRouterId.setStatus('current')
vRtrTriggeredPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrTriggeredPolicy.setStatus('current')
vRtrConfederationAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 18), TmnxBgpAutonomousSystem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrConfederationAS.setStatus('current')
vRtrRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 19), TmnxVPNRouteDistinguisher().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrRouteDistinguisher.setStatus('current')
vRtrMidRouteThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMidRouteThreshold.setStatus('current')
vRtrHighRouteThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrHighRouteThreshold.setStatus('current')
vRtrIllegalLabelThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIllegalLabelThreshold.setStatus('current')
vRtrVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 23), TmnxVPNId().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrVpnId.setStatus('current')
vRtrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 25), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrDescription.setStatus('current')
vRtrGracefulRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrGracefulRestart.setStatus('current')
vRtrGracefulRestartType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("never", 0), ("manual", 1), ("automatic", 2))).clone('never')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrGracefulRestartType.setStatus('current')
vRtrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("baseRouter", 1), ("vprn", 2), ("vr", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrType.setStatus('current')
vRtrServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 29), TmnxServId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrServiceId.setStatus('current')
vRtrCustId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 30), TmnxCustId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrCustId.setStatus('current')
vRtrIgmpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 31), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIgmpStatus.setStatus('current')
vRtrMaxNumRoutesLogOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 32), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMaxNumRoutesLogOnly.setStatus('current')
vRtrVrfTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 33), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrVrfTarget.setStatus('current')
vRtrVrfExportTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 34), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrVrfExportTarget.setStatus('current')
vRtrVrfImportTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 35), TNamedItemOrEmpty()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrVrfImportTarget.setStatus('current')
vRtrPimStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 36), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrPimStatus.setStatus('current')
vRtrMaxMcastNumRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMaxMcastNumRoutes.setStatus('current')
vRtrMaxMcastNumRoutesLogOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 38), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMaxMcastNumRoutesLogOnly.setStatus('current')
vRtrMcastMidRouteThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMcastMidRouteThreshold.setStatus('current')
vRtrIgnoreIcmpRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 40), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIgnoreIcmpRedirect.setStatus('current')
vRtrOspfv3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 41), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrOspfv3Status.setStatus('obsolete')
vRtrMsdpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 42), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMsdpStatus.setStatus('current')
vRtrVprnType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("regular", 1), ("hub", 2), ("spoke", 3), ("subscriberSplitHorizon", 4))).clone('regular')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrVprnType.setStatus('current')
vRtrSecondaryVrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 44), TmnxVRtrIDOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrSecondaryVrfId.setStatus('current')
vRtrMldStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 45), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMldStatus.setStatus('current')
vRtrIPv6MaxNumRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIPv6MaxNumRoutes.setStatus('current')
vRtrIPv6MidRouteThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIPv6MidRouteThreshold.setStatus('current')
vRtrIPv6HighRouteThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIPv6HighRouteThreshold.setStatus('current')
vRtrIPv6MaxNumRoutesLogOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 49), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIPv6MaxNumRoutesLogOnly.setStatus('current')
vRtrIPv6IgnoreIcmpRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 50), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIPv6IgnoreIcmpRedirect.setStatus('current')
vRtrMcPathMgmtPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 1, 1, 51), TNamedItem().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrMcPathMgmtPlcyName.setStatus('current')
vRtrPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 16), )
if mibBuilder.loadTexts: vRtrPolicyTable.setStatus('current')
vRtrPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 16, 1), )
vRtrConfEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrPolicyEntry"))
vRtrPolicyEntry.setIndexNames(*vRtrConfEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrPolicyEntry.setStatus('current')
vRtrImportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 16, 1, 1), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrImportPolicy1.setStatus('current')
vRtrImportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 16, 1, 2), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrImportPolicy2.setStatus('current')
vRtrImportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 16, 1, 3), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrImportPolicy3.setStatus('current')
vRtrImportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 16, 1, 4), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrImportPolicy4.setStatus('current')
vRtrImportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 16, 1, 5), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrImportPolicy5.setStatus('current')
vRtrExportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 16, 1, 6), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrExportPolicy1.setStatus('current')
vRtrExportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 16, 1, 7), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrExportPolicy2.setStatus('current')
vRtrExportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 16, 1, 8), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrExportPolicy3.setStatus('current')
vRtrExportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 16, 1, 9), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrExportPolicy4.setStatus('current')
vRtrExportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 16, 1, 10), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrExportPolicy5.setStatus('current')
vRtrStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2), )
if mibBuilder.loadTexts: vRtrStatTable.setStatus('current')
vRtrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1), )
vRtrConfEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatEntry"))
vRtrStatEntry.setIndexNames(*vRtrConfEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrStatEntry.setStatus('current')
vRtrOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 1), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrOperState.setStatus('current')
vRtrDirectRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrDirectRoutes.setStatus('current')
vRtrDirectActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrDirectActiveRoutes.setStatus('current')
vRtrStaticRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticRoutes.setStatus('current')
vRtrStaticActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticActiveRoutes.setStatus('current')
vRtrOSPFRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrOSPFRoutes.setStatus('current')
vRtrOSPFActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrOSPFActiveRoutes.setStatus('current')
vRtrBGPRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrBGPRoutes.setStatus('current')
vRtrBGPActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrBGPActiveRoutes.setStatus('current')
vRtrISISRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrISISRoutes.setStatus('current')
vRtrISISActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrISISActiveRoutes.setStatus('current')
vRtrRIPRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrRIPRoutes.setStatus('current')
vRtrRIPActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrRIPActiveRoutes.setStatus('current')
vRtrAggregateRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrAggregateRoutes.setStatus('current')
vRtrAggregateActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrAggregateActiveRoutes.setStatus('current')
vRtrStatConfiguredIfs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatConfiguredIfs.setStatus('current')
vRtrStatActiveIfs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatActiveIfs.setStatus('current')
vRtrStatIllegalLabels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatIllegalLabels.setStatus('current')
vRtrStatCurrNumRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatCurrNumRoutes.setStatus('current')
vRtrStatBGPVpnRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatBGPVpnRoutes.setStatus('current')
vRtrStatBGPVpnActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatBGPVpnActiveRoutes.setStatus('current')
vRtrStatTotalLdpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatTotalLdpTunnels.setStatus('current')
vRtrStatTotalSdpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatTotalSdpTunnels.setStatus('current')
vRtrStatActiveLdpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatActiveLdpTunnels.setStatus('current')
vRtrStatActiveSdpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatActiveSdpTunnels.setStatus('current')
vRtrMulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrMulticastRoutes.setStatus('current')
vRtrStatActiveARPEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatActiveARPEntries.setStatus('current')
vRtrStatTotalARPEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatTotalARPEntries.setStatus('current')
vRtrV6DirectRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6DirectRoutes.setStatus('current')
vRtrV6DirectActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6DirectActiveRoutes.setStatus('current')
vRtrV6StaticRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StaticRoutes.setStatus('current')
vRtrV6StaticActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StaticActiveRoutes.setStatus('current')
vRtrV6OSPFRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6OSPFRoutes.setStatus('current')
vRtrV6OSPFActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6OSPFActiveRoutes.setStatus('current')
vRtrV6BGPRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6BGPRoutes.setStatus('current')
vRtrV6BGPActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6BGPActiveRoutes.setStatus('current')
vRtrV6ISISRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6ISISRoutes.setStatus('current')
vRtrV6ISISActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6ISISActiveRoutes.setStatus('current')
vRtrV6RIPRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6RIPRoutes.setStatus('current')
vRtrV6RIPActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6RIPActiveRoutes.setStatus('current')
vRtrV6AggregateRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6AggregateRoutes.setStatus('current')
vRtrV6AggregateActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6AggregateActiveRoutes.setStatus('current')
vRtrV6StatConfiguredIfs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatConfiguredIfs.setStatus('current')
vRtrV6StatActiveIfs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatActiveIfs.setStatus('current')
vRtrV6StatIllegalLabels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatIllegalLabels.setStatus('current')
vRtrV6StatCurrNumRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatCurrNumRoutes.setStatus('current')
vRtrV6StatBGPVpnRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatBGPVpnRoutes.setStatus('current')
vRtrV6StatBGPVpnActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatBGPVpnActiveRoutes.setStatus('current')
vRtrV6StatTotalLdpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatTotalLdpTunnels.setStatus('current')
vRtrV6StatTotalSdpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatTotalSdpTunnels.setStatus('current')
vRtrV6StatActiveLdpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatActiveLdpTunnels.setStatus('current')
vRtrV6StatActiveSdpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatActiveSdpTunnels.setStatus('current')
vRtrV6MulticastRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6MulticastRoutes.setStatus('current')
vRtrV6StatActiveNbrEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatActiveNbrEntries.setStatus('current')
vRtrV6StatTotalNbrEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatTotalNbrEntries.setStatus('current')
vRtrSubMgmtRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrSubMgmtRoutes.setStatus('current')
vRtrSubMgmtActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrSubMgmtActiveRoutes.setStatus('current')
vRtrStatTotalRsvpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatTotalRsvpTunnels.setStatus('current')
vRtrStatActiveRsvpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatActiveRsvpTunnels.setStatus('current')
vRtrV6StatTotalRsvpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatTotalRsvpTunnels.setStatus('current')
vRtrV6StatActiveRsvpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6StatActiveRsvpTunnels.setStatus('current')
vRtrHostRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrHostRoutes.setStatus('current')
vRtrHostActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrHostActiveRoutes.setStatus('current')
vRtrV6HostRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6HostRoutes.setStatus('current')
vRtrV6HostActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrV6HostActiveRoutes.setStatus('current')
vRtrStatLocalARPEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatLocalARPEntries.setStatus('current')
vRtrStatStaticARPEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatStaticARPEntries.setStatus('current')
vRtrStatDynamicARPEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatDynamicARPEntries.setStatus('current')
vRtrStatManagedARPEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatManagedARPEntries.setStatus('current')
vRtrStatInternalARPEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStatInternalARPEntries.setStatus('current')
vRtrManagedRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrManagedRoutes.setStatus('current')
vRtrManagedActiveRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 2, 1, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrManagedActiveRoutes.setStatus('current')
vRtrIfTotalNumber = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfTotalNumber.setStatus('current')
vRtrIfTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4), )
if mibBuilder.loadTexts: vRtrIfTable.setStatus('current')
vRtrIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"))
if mibBuilder.loadTexts: vRtrIfEntry.setStatus('current')
vRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrIfIndex.setStatus('current')
vRtrIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfRowStatus.setStatus('current')
vRtrIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("network", 1), ("service", 2), ("serviceIes", 3), ("serviceRtdVpls", 4), ("serviceVprn", 5), ("serviceIesSubscriber", 6), ("serviceIesGroup", 7), ("serviceVprnSubscriber", 8), ("serviceVprnGroup", 9), ("serviceIesRedundant", 10), ("serviceVprnRedundant", 11), ("serviceVpls", 12), ("serviceIesCem", 13), ("serviceVprnCem", 14), ("serviceVprnIPsec", 15), ("serviceVprnIPMirror", 16)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfType.setStatus('current')
vRtrIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 4), TNamedItem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfName.setStatus('current')
vRtrIfPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 5), TmnxPortID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfPortID.setStatus('current')
vRtrIfChannelID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfChannelID.setStatus('obsolete')
vRtrIfEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 7), TmnxEncapVal()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfEncapValue.setStatus('current')
vRtrIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 8), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfAdminState.setStatus('current')
vRtrIfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 9), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfOperState.setStatus('current')
vRtrIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfAlias.setStatus('current')
vRtrIfPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 11), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfPhysicalAddress.setStatus('current')
vRtrIfArpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(14400)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfArpTimeout.setStatus('current')
vRtrIfIcmpMaskReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 13), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpMaskReply.setStatus('current')
vRtrIfIcmpRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 14), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpRedirects.setStatus('current')
vRtrIfIcmpNumRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpNumRedirects.setStatus('current')
vRtrIfIcmpRedirectsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpRedirectsTime.setStatus('current')
vRtrIfIcmpUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 17), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpUnreachables.setStatus('current')
vRtrIfIcmpNumUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpNumUnreachables.setStatus('current')
vRtrIfIcmpUnreachablesTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpUnreachablesTime.setStatus('current')
vRtrIfIcmpTtlExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 20), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpTtlExpired.setStatus('current')
vRtrIfIcmpNumTtlExpired = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpNumTtlExpired.setStatus('current')
vRtrIfIcmpTtlExpiredTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpTtlExpiredTime.setStatus('current')
vRtrIfNtpBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfNtpBroadcast.setStatus('current')
vRtrIfUnnumbered = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 24), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfUnnumbered.setStatus('current')
vRtrIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(512, 9000), ))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfMtu.setStatus('current')
vRtrIfQosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 26), TNetworkPolicyID().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfQosPolicyId.setStatus('current')
vRtrIfIngressFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 27), TIPFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIngressFilterId.setStatus('current')
vRtrIfEgressFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 28), TIPFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfEgressFilterId.setStatus('current')
vRtrIfDirectedBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 29), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDirectedBroadcast.setStatus('current')
vRtrIfMplsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 30), TmnxStatus().clone('delete')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfMplsStatus.setStatus('current')
vRtrIfUnnumberedIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfUnnumberedIf.setStatus('current')
vRtrIfCflowd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("acl", 2), ("interface", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfCflowd.setStatus('current')
vRtrIfVPNClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("carrierOfCarrier", 1), ("enterprise", 2), ("interProvider", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfVPNClass.setStatus('current')
vRtrIfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 34), TItemLongDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDescription.setStatus('current')
vRtrIfProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 35), Bits().clone(namedValues=NamedValues(("ospfv2", 0), ("rip", 1), ("isis", 2), ("bgp", 3), ("mpls", 4), ("rsvp", 5), ("ldp", 6), ("igmp", 7), ("pim", 8), ("ospf3", 9), ("mld", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfProtocol.setStatus('current')
vRtrIfTosMarkingTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 36), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfTosMarkingTrusted.setStatus('current')
vRtrIfServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 37), TmnxServId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfServiceId.setStatus('current')
vRtrIfArpPopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfArpPopulate.setStatus('current')
vRtrIfIPv6ConfigAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 39), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIPv6ConfigAllowed.setStatus('current')
vRtrIfIPv6OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 40), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIPv6OperState.setStatus('current')
vRtrIfIPv6IngressFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 41), TIPFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIPv6IngressFilterId.setStatus('current')
vRtrIfIPv6EgressFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 42), TIPFilterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIPv6EgressFilterId.setStatus('current')
vRtrIfIcmpV6Redirects = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 43), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6Redirects.setStatus('current')
vRtrIfIcmpV6NumRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6NumRedirects.setStatus('current')
vRtrIfIcmpV6RedirectsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6RedirectsTime.setStatus('current')
vRtrIfIcmpV6Unreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 46), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6Unreachables.setStatus('current')
vRtrIfIcmpV6NumUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6NumUnreachables.setStatus('current')
vRtrIfIcmpV6UnreachablesTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6UnreachablesTime.setStatus('current')
vRtrIfIcmpV6TimeExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 49), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6TimeExceeded.setStatus('current')
vRtrIfIcmpV6NumTimeExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6NumTimeExceeded.setStatus('current')
vRtrIfIcmpV6TimeExceededTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6TimeExceededTime.setStatus('current')
vRtrIfIcmpV6PktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 52), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6PktTooBig.setStatus('current')
vRtrIfIcmpV6NumPktTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6NumPktTooBig.setStatus('current')
vRtrIfIcmpV6PktTooBigTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 54), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6PktTooBigTime.setStatus('current')
vRtrIfIcmpV6ParamProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 55), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6ParamProblem.setStatus('current')
vRtrIfIcmpV6NumParamProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6NumParamProblem.setStatus('current')
vRtrIfIcmpV6ParamProblemTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIcmpV6ParamProblemTime.setStatus('current')
vRtrIfLinkLocalAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 58), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfLinkLocalAddressType.setStatus('current')
vRtrIfLinkLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 59), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfLinkLocalAddress.setStatus('current')
vRtrIfLinkLocalAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 60), TmnxInetAddrState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfLinkLocalAddressState.setStatus('current')
vRtrIfLastOperStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 61), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfLastOperStateChange.setStatus('current')
vRtrIfOperMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 62), Unsigned32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfOperMtu.setStatus('current')
vRtrIfGlobalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 63), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfGlobalIndex.setStatus('current')
vRtrIfDelaySeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 64), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1200))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDelaySeconds.setStatus('current')
vRtrIfDelayUpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 65), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDelayUpTimer.setStatus('current')
vRtrIfLocalDhcpServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 66), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfLocalDhcpServerName.setStatus('current')
vRtrIfInitDelayEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 67), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfInitDelayEnable.setStatus('current')
vRtrIfCpmProtPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 68), TCpmProtPolicyID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfCpmProtPolicyId.setStatus('current')
vRtrIfCpmProtUncfgdProtoDropCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfCpmProtUncfgdProtoDropCnt.setStatus('current')
vRtrIfLdpSyncTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 4, 1, 70), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1800), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfLdpSyncTimer.setStatus('current')
vRtrIcmp6Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31), )
if mibBuilder.loadTexts: vRtrIcmp6Table.setStatus('current')
vRtrIcmp6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1), )
vRtrConfEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6Entry"))
vRtrIcmp6Entry.setIndexNames(*vRtrConfEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrIcmp6Entry.setStatus('current')
vRtrIcmp6InMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InMsgs.setStatus('current')
vRtrIcmp6InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InErrors.setStatus('current')
vRtrIcmp6InDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InDestUnreachs.setStatus('current')
vRtrIcmp6InAdminProhibs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InAdminProhibs.setStatus('current')
vRtrIcmp6InTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InTimeExcds.setStatus('current')
vRtrIcmp6InParmProblems = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InParmProblems.setStatus('current')
vRtrIcmp6InPktTooBigs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InPktTooBigs.setStatus('current')
vRtrIcmp6InEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InEchos.setStatus('current')
vRtrIcmp6InEchoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InEchoReplies.setStatus('current')
vRtrIcmp6InRtrSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InRtrSolicits.setStatus('current')
vRtrIcmp6InRtrAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InRtrAdvertisements.setStatus('current')
vRtrIcmp6InNbrSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InNbrSolicits.setStatus('current')
vRtrIcmp6InNbrAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InNbrAdvertisements.setStatus('current')
vRtrIcmp6InRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InRedirects.setStatus('current')
vRtrIcmp6InGrpMembQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InGrpMembQueries.setStatus('current')
vRtrIcmp6InGrpMembResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InGrpMembResponses.setStatus('current')
vRtrIcmp6InGrpMembReductions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6InGrpMembReductions.setStatus('current')
vRtrIcmp6OutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutMsgs.setStatus('current')
vRtrIcmp6OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutErrors.setStatus('current')
vRtrIcmp6OutDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutDestUnreachs.setStatus('current')
vRtrIcmp6OutAdminProhibs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutAdminProhibs.setStatus('current')
vRtrIcmp6OutTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutTimeExcds.setStatus('current')
vRtrIcmp6OutParmProblems = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutParmProblems.setStatus('current')
vRtrIcmp6OutPktTooBigs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutPktTooBigs.setStatus('current')
vRtrIcmp6OutEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutEchos.setStatus('current')
vRtrIcmp6OutEchoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutEchoReplies.setStatus('current')
vRtrIcmp6OutRtrSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutRtrSolicits.setStatus('current')
vRtrIcmp6OutRtrAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutRtrAdvertisements.setStatus('current')
vRtrIcmp6OutNbrSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutNbrSolicits.setStatus('current')
vRtrIcmp6OutNbrAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutNbrAdvertisements.setStatus('current')
vRtrIcmp6OutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutRedirects.setStatus('current')
vRtrIcmp6OutGrpMembQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutGrpMembQueries.setStatus('current')
vRtrIcmp6OutGrpMembResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutGrpMembResponses.setStatus('current')
vRtrIcmp6OutGrpMembReductions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 31, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIcmp6OutGrpMembReductions.setStatus('current')
vRtrIfIcmp6Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32), )
if mibBuilder.loadTexts: vRtrIfIcmp6Table.setStatus('current')
vRtrIfIcmp6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1), )
vRtrIfEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6Entry"))
vRtrIfIcmp6Entry.setIndexNames(*vRtrIfEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrIfIcmp6Entry.setStatus('current')
vRtrIfIcmp6InMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InMsgs.setStatus('current')
vRtrIfIcmp6InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InErrors.setStatus('current')
vRtrIfIcmp6InDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InDestUnreachs.setStatus('current')
vRtrIfIcmp6InAdminProhibs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InAdminProhibs.setStatus('current')
vRtrIfIcmp6InTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InTimeExcds.setStatus('current')
vRtrIfIcmp6InParmProblems = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InParmProblems.setStatus('current')
vRtrIfIcmp6InPktTooBigs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InPktTooBigs.setStatus('current')
vRtrIfIcmp6InEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InEchos.setStatus('current')
vRtrIfIcmp6InEchoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InEchoReplies.setStatus('current')
vRtrIfIcmp6InRtrSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InRtrSolicits.setStatus('current')
vRtrIfIcmp6InRtrAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InRtrAdvertisements.setStatus('current')
vRtrIfIcmp6InNbrSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InNbrSolicits.setStatus('current')
vRtrIfIcmp6InNbrAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InNbrAdvertisements.setStatus('current')
vRtrIfIcmp6InRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InRedirects.setStatus('current')
vRtrIfIcmp6InGrpMembQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InGrpMembQueries.setStatus('current')
vRtrIfIcmp6InGrpMembResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InGrpMembResponses.setStatus('current')
vRtrIfIcmp6InGrpMembReductions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6InGrpMembReductions.setStatus('current')
vRtrIfIcmp6OutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutMsgs.setStatus('current')
vRtrIfIcmp6OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutErrors.setStatus('current')
vRtrIfIcmp6OutDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutDestUnreachs.setStatus('current')
vRtrIfIcmp6OutAdminProhibs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutAdminProhibs.setStatus('current')
vRtrIfIcmp6OutTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutTimeExcds.setStatus('current')
vRtrIfIcmp6OutParmProblems = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutParmProblems.setStatus('current')
vRtrIfIcmp6OutPktTooBigs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutPktTooBigs.setStatus('current')
vRtrIfIcmp6OutEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutEchos.setStatus('current')
vRtrIfIcmp6OutEchoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutEchoReplies.setStatus('current')
vRtrIfIcmp6OutRtrSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutRtrSolicits.setStatus('current')
vRtrIfIcmp6OutRtrSolicitsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 28), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutRtrSolicitsTime.setStatus('current')
vRtrIfIcmp6OutRtrAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutRtrAdvertisements.setStatus('current')
vRtrIfIcmp6OutRtrAdvTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 30), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutRtrAdvTime.setStatus('current')
vRtrIfIcmp6OutNbrSolicits = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutNbrSolicits.setStatus('current')
vRtrIfIcmp6OutNbrSolicitsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 32), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutNbrSolicitsTime.setStatus('current')
vRtrIfIcmp6OutNbrAdvertisements = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutNbrAdvertisements.setStatus('current')
vRtrIfIcmp6OutNbrAdvTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 34), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutNbrAdvTime.setStatus('current')
vRtrIfIcmp6OutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutRedirects.setStatus('current')
vRtrIfIcmp6OutGrpMembQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutGrpMembQueries.setStatus('current')
vRtrIfIcmp6OutGrpMembResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutGrpMembResponses.setStatus('current')
vRtrIfIcmp6OutGrpMembReductions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 32, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfIcmp6OutGrpMembReductions.setStatus('current')
vRtrIfBfdTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 33), )
if mibBuilder.loadTexts: vRtrIfBfdTable.setStatus('current')
vRtrIfBfdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 33, 1), )
vRtrIfEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdEntry"))
vRtrIfBfdEntry.setIndexNames(*vRtrIfEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrIfBfdEntry.setStatus('current')
vRtrIfBfdAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 33, 1, 1), TmnxAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIfBfdAdminState.setStatus('current')
vRtrIfBfdTransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 33, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000)).clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIfBfdTransmitInterval.setStatus('current')
vRtrIfBfdReceiveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 33, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(100, 100000)).clone(100)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIfBfdReceiveInterval.setStatus('current')
vRtrIfBfdMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 33, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 20)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIfBfdMultiplier.setStatus('current')
vRtrIfBfdEchoInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 33, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(100, 100000), ))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vRtrIfBfdEchoInterval.setStatus('current')
vRtrIfBfdSessionTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34), )
if mibBuilder.loadTexts: vRtrIfBfdSessionTable.setStatus('current')
vRtrIfBfdSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionLclAddrType"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionLclAddr"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionRemAddrType"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionRemAddr"))
if mibBuilder.loadTexts: vRtrIfBfdSessionEntry.setStatus('current')
vRtrIfBfdSessionLclAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 1), InetAddressType())
if mibBuilder.loadTexts: vRtrIfBfdSessionLclAddrType.setStatus('current')
vRtrIfBfdSessionLclAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), )))
if mibBuilder.loadTexts: vRtrIfBfdSessionLclAddr.setStatus('current')
vRtrIfBfdSessionRemAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 3), InetAddressType())
if mibBuilder.loadTexts: vRtrIfBfdSessionRemAddrType.setStatus('current')
vRtrIfBfdSessionRemAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), )))
if mibBuilder.loadTexts: vRtrIfBfdSessionRemAddr.setStatus('current')
vRtrIfBfdSessionOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 5), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionOperState.setStatus('current')
vRtrIfBfdSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("adminDown", 0), ("down", 1), ("init", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionState.setStatus('current')
vRtrIfBfdSessionOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 7), Bits().clone(namedValues=NamedValues(("noProtocols", 0), ("noHeartBeat", 1), ("echoFailed", 2), ("nbrSignalDown", 3), ("fwdPlaneReset", 4), ("pathDown", 5), ("nbrAdminDown", 6), ("adminClear", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionOperFlags.setStatus('current')
vRtrIfBfdSessionMesgRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionMesgRecv.setStatus('current')
vRtrIfBfdSessionMesgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionMesgSent.setStatus('current')
vRtrIfBfdSessionLastDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionLastDownTime.setStatus('current')
vRtrIfBfdSessionLastUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionLastUpTime.setStatus('current')
vRtrIfBfdSessionUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionUpCount.setStatus('current')
vRtrIfBfdSessionDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionDownCount.setStatus('current')
vRtrIfBfdSessionLclDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionLclDisc.setStatus('current')
vRtrIfBfdSessionRemDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionRemDisc.setStatus('current')
vRtrIfBfdSessionProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 16), Bits().clone(namedValues=NamedValues(("ospfv2", 0), ("pim", 1), ("isis", 2), ("staticRoute", 3), ("mcRing", 4), ("rsvp", 5), ("bgp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionProtocols.setStatus('current')
vRtrIfBfdSessionTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 17), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionTxInterval.setStatus('current')
vRtrIfBfdSessionRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 18), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionRxInterval.setStatus('current')
vRtrIfBfdSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 34, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iom", 1), ("cpm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfBfdSessionType.setStatus('current')
vRtrIfProxyArpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 18), )
if mibBuilder.loadTexts: vRtrIfProxyArpTable.setStatus('current')
vRtrIfProxyArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 18, 1), )
vRtrIfEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpEntry"))
vRtrIfProxyArpEntry.setIndexNames(*vRtrIfEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrIfProxyArpEntry.setStatus('current')
vRtrIfProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 18, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyArp.setStatus('current')
vRtrIfProxyArpLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 18, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyArpLocal.setStatus('current')
vRtrIfProxyArpPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 18, 1, 3), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyArpPolicy1.setStatus('current')
vRtrIfProxyArpPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 18, 1, 4), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyArpPolicy2.setStatus('current')
vRtrIfProxyArpPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 18, 1, 5), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyArpPolicy3.setStatus('current')
vRtrIfProxyArpPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 18, 1, 6), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyArpPolicy4.setStatus('current')
vRtrIfProxyArpPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 18, 1, 7), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyArpPolicy5.setStatus('current')
vRtrIfDHCPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19), )
if mibBuilder.loadTexts: vRtrIfDHCPTable.setStatus('current')
vRtrIfDHCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1), )
vRtrIfEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPEntry"))
vRtrIfDHCPEntry.setIndexNames(*vRtrIfEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrIfDHCPEntry.setStatus('current')
vRtrIfDHCPRelayInfoOption = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayInfoOption.setStatus('obsolete')
vRtrIfDHCPRelayInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("drop", 2), ("keep", 3))).clone('keep')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayInfoAction.setStatus('current')
vRtrIfDHCPRelayCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ifIndex", 1), ("asciiTuple", 2), ("sapId", 3), ("vlanAsciiTuple", 4))).clone('asciiTuple')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayCircuitId.setStatus('current')
vRtrIfDHCPRelayRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("none", 2), ("remote-id", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayRemoteId.setStatus('current')
vRtrIfDHCPAutoFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPAutoFilter.setStatus('obsolete')
vRtrIfDHCPRelayServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayServer1.setStatus('current')
vRtrIfDHCPRelayServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayServer2.setStatus('current')
vRtrIfDHCPRelayServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayServer3.setStatus('current')
vRtrIfDHCPRelayServer4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayServer4.setStatus('current')
vRtrIfDHCPRelayServer5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 10), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayServer5.setStatus('current')
vRtrIfDHCPRelayServer6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayServer6.setStatus('current')
vRtrIfDHCPRelayServer7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 12), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayServer7.setStatus('current')
vRtrIfDHCPRelayServer8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayServer8.setStatus('current')
vRtrIfDHCPRelayTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayTrusted.setStatus('current')
vRtrIfDHCPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 15), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPAdminState.setStatus('current')
vRtrIfDHCPSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPSnooping.setStatus('obsolete')
vRtrIfDHCPDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 17), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPDescription.setStatus('current')
vRtrIfDHCPAutoFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 18), TFilterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPAutoFilterId.setStatus('obsolete')
vRtrIfDHCPOperAutoFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPOperAutoFilter.setStatus('obsolete')
vRtrIfDHCPAuthPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 20), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPAuthPolicy.setStatus('current')
vRtrIfDHCPLeasePopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPLeasePopulate.setStatus('current')
vRtrIfDHCPOperLeasePopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPOperLeasePopulate.setStatus('current')
vRtrIfDHCPGiAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 23), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPGiAddressType.setStatus('current')
vRtrIfDHCPGiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 24), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPGiAddress.setStatus('current')
vRtrIfDHCPGiAddressAsSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPGiAddressAsSrc.setStatus('current')
vRtrIfDHCPMatchOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPMatchOption82.setStatus('current')
vRtrIfDHCPRelayRemoteIdStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPRelayRemoteIdStr.setStatus('current')
vRtrIfDHCPProxyAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 28), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPProxyAdminState.setStatus('current')
vRtrIfDHCPProxyServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 29), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPProxyServerAddr.setStatus('current')
vRtrIfDHCPProxyLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(300, 315446399), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPProxyLeaseTime.setStatus('current')
vRtrIfDHCPProxyLTRadiusOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 31), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPProxyLTRadiusOverride.setStatus('current')
vRtrIfDHCPVendorIncludeOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 32), Bits().clone(namedValues=NamedValues(("systemId", 0), ("clientMac", 1), ("serviceId", 2), ("sapId", 3))).clone(namedValues=NamedValues(("systemId", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPVendorIncludeOptions.setStatus('current')
vRtrIfDHCPVendorOptionString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPVendorOptionString.setStatus('current')
vRtrIfDHCPLayer2Header = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 34), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPLayer2Header.setStatus('current')
vRtrIfDHCPAntiSpoofMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 35), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPAntiSpoofMacAddr.setStatus('current')
vRtrIfDHCPClientApplications = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 19, 1, 36), Bits().clone(namedValues=NamedValues(("dhcp", 0), ("pppoe", 1))).clone(namedValues=NamedValues(("dhcp", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCPClientApplications.setStatus('current')
vRtrIfDHCPRelayStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20), )
if mibBuilder.loadTexts: vRtrIfDHCPRelayStatsTable.setStatus('current')
vRtrIfDHCPRelayStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1), )
vRtrIfEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayStatsEntry"))
vRtrIfDHCPRelayStatsEntry.setIndexNames(*vRtrIfEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrIfDHCPRelayStatsEntry.setStatus('current')
vRtrIfDHCPRelayRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayRxPkts.setStatus('current')
vRtrIfDHCPRelayTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayTxPkts.setStatus('current')
vRtrIfDHCPRelayRxMalformedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayRxMalformedPkts.setStatus('current')
vRtrIfDHCPRelayRxUntrustedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayRxUntrustedPkts.setStatus('current')
vRtrIfDHCPRelayClientPktsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayClientPktsDiscarded.setStatus('current')
vRtrIfDHCPRelayClientPktsRelayed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayClientPktsRelayed.setStatus('current')
vRtrIfDHCPRelayServerPktsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayServerPktsDiscarded.setStatus('current')
vRtrIfDHCPRelayServerPktsRelayed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayServerPktsRelayed.setStatus('current')
vRtrIfDHCPRelayAuthPktsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayAuthPktsDiscarded.setStatus('current')
vRtrIfDHCPRelayAuthPktsSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayAuthPktsSuccess.setStatus('current')
vRtrIfDHCPRelayClientPktsSnooped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayClientPktsSnooped.setStatus('current')
vRtrIfDHCPRelayServerPktsSnooped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayServerPktsSnooped.setStatus('current')
vRtrIfDHCPRelayClientPktsProxRad = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayClientPktsProxRad.setStatus('current')
vRtrIfDHCPRelayClientPktsProxLS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayClientPktsProxLS.setStatus('current')
vRtrIfDHCPRelayPktsGenRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayPktsGenRelease.setStatus('current')
vRtrIfDHCPRelayPktsGenForceRenew = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 20, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPRelayPktsGenForceRenew.setStatus('current')
vRtrIfDHCPLeaseStateTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 22), )
if mibBuilder.loadTexts: vRtrIfDHCPLeaseStateTable.setStatus('obsolete')
vRtrIfDHCPLeaseStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 22, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPLseStateCiAddr"))
if mibBuilder.loadTexts: vRtrIfDHCPLeaseStateEntry.setStatus('obsolete')
vRtrIfDHCPLseStateCiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 22, 1, 1), IpAddress())
if mibBuilder.loadTexts: vRtrIfDHCPLseStateCiAddr.setStatus('obsolete')
vRtrIfDHCPLseStateChAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 22, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPLseStateChAddr.setStatus('obsolete')
vRtrIfDHCPLseStateRemainLseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 22, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPLseStateRemainLseTime.setStatus('obsolete')
vRtrIfDHCPLseStateOption82 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 22, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPLseStateOption82.setStatus('obsolete')
vRtrIfDHCPLseStatePersistKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 22, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCPLseStatePersistKey.setStatus('obsolete')
vRtrIfDHCP6TableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 35), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCP6TableLastChanged.setStatus('current')
vRtrIfDHCP6Table = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36), )
if mibBuilder.loadTexts: vRtrIfDHCP6Table.setStatus('current')
vRtrIfDHCP6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1), )
vRtrIfEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6Entry"))
vRtrIfDHCP6Entry.setIndexNames(*vRtrIfEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrIfDHCP6Entry.setStatus('current')
vRtrIfDHCP6LastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCP6LastChanged.setStatus('current')
vRtrIfDHCP6AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 2), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6AdminState.setStatus('current')
vRtrIfDHCP6OperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("noIPv6Pfx", 3), ("noServerConfigured", 4), ("noValidSourceAddr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCP6OperState.setStatus('current')
vRtrIfDHCP6Description = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 4), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6Description.setStatus('current')
vRtrIfDHCP6RelayServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 5), InetAddressIPv6z().clone(hexValue="0000000000000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6RelayServer1.setStatus('current')
vRtrIfDHCP6RelayServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 6), InetAddressIPv6z().clone(hexValue="0000000000000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6RelayServer2.setStatus('current')
vRtrIfDHCP6RelayServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 7), InetAddressIPv6z().clone(hexValue="0000000000000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6RelayServer3.setStatus('current')
vRtrIfDHCP6RelayServer4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 8), InetAddressIPv6z().clone(hexValue="0000000000000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6RelayServer4.setStatus('current')
vRtrIfDHCP6RelayServer5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 9), InetAddressIPv6z().clone(hexValue="0000000000000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6RelayServer5.setStatus('current')
vRtrIfDHCP6RelayServer6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 10), InetAddressIPv6z().clone(hexValue="0000000000000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6RelayServer6.setStatus('current')
vRtrIfDHCP6RelayServer7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 11), InetAddressIPv6z().clone(hexValue="0000000000000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6RelayServer7.setStatus('current')
vRtrIfDHCP6RelayServer8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 12), InetAddressIPv6z().clone(hexValue="0000000000000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6RelayServer8.setStatus('current')
vRtrIfDHCP6RelayItfIdOption = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ifIndex", 1), ("asciiTuple", 2), ("sapId", 3), ("string", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6RelayItfIdOption.setStatus('current')
vRtrIfDHCP6LeasePopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6LeasePopulate.setStatus('current')
vRtrIfDHCP6CurrLeasePopulate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCP6CurrLeasePopulate.setStatus('current')
vRtrIfDHCP6SourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 16), InetAddressIPv6().clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6SourceAddress.setStatus('current')
vRtrIfDHCP6EnableNgbrResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6EnableNgbrResolution.setStatus('current')
vRtrIfDHCP6RemoteIdOption = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 18), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6RemoteIdOption.setStatus('current')
vRtrIfDHCP6PfxdAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6PfxdAdminState.setStatus('current')
vRtrIfDHCP6ServerMaxLeaseStates = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000)).clone(8000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6ServerMaxLeaseStates.setStatus('current')
vRtrIfDHCP6CurrServerLeaseStates = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCP6CurrServerLeaseStates.setStatus('current')
vRtrIfDHCP6ItfIdString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 36, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6ItfIdString.setStatus('current')
vRtrIfNameTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 5), )
if mibBuilder.loadTexts: vRtrIfNameTable.setStatus('current')
vRtrIfNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (1, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfName"))
if mibBuilder.loadTexts: vRtrIfNameEntry.setStatus('current')
vRtrIfNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfNameIndex.setStatus('current')
vRtrIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6), )
if mibBuilder.loadTexts: vRtrIpAddrTable.setStatus('current')
vRtrIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaIndex"))
if mibBuilder.loadTexts: vRtrIpAddrEntry.setStatus('current')
vRiaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: vRiaIndex.setStatus('current')
vRiaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaRowStatus.setStatus('current')
vRiaIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaIpAddress.setStatus('current')
vRiaNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 4), IpAddress().clone(hexValue="FFFFFF00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaNetMask.setStatus('current')
vRiaBcastAddrFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allOnes", 1), ("hostOnes", 2))).clone('hostOnes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaBcastAddrFormat.setStatus('current')
vRiaReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaReasmMaxSize.setStatus('current')
vRiaIgpInhibit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaIgpInhibit.setStatus('current')
vRiaInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 8), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaInetAddressType.setStatus('current')
vRiaInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 9), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaInetAddress.setStatus('current')
vRiaInetPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 10), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaInetPrefixLen.setStatus('current')
vRiaInetAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 11), TmnxInetAddrState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRiaInetAddrState.setStatus('current')
vRiaInetEui64 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaInetEui64.setStatus('current')
vRiaInetOperAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRiaInetOperAddress.setStatus('current')
vRiaInetGwAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 14), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaInetGwAddressType.setStatus('current')
vRiaInetGwAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 15), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaInetGwAddress.setStatus('current')
vRiaInetRemoteIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 16), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaInetRemoteIpType.setStatus('current')
vRiaInetRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 6, 1, 17), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRiaInetRemoteIp.setStatus('current')
vRtrIpCidrRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 7), )
if mibBuilder.loadTexts: vRtrIpCidrRouteTable.setStatus('current')
vRtrIpCidrRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 7, 1), )
ipCidrRouteEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIpCidrRouteEntry"))
vRtrIpCidrRouteEntry.setIndexNames(*ipCidrRouteEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrIpCidrRouteEntry.setStatus('current')
vRtrIpCidrRouteLastEnabledTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 7, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIpCidrRouteLastEnabledTime.setStatus('current')
vRtrIpCidrRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIpCidrRoutePreference.setStatus('current')
vRtrIpCidrRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIpCidrRouteMetric.setStatus('current')
vRtrStaticRouteNumber = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticRouteNumber.setStatus('current')
vRtrStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9), )
if mibBuilder.loadTexts: vRtrStaticRouteTable.setStatus('current')
vRtrStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteDest"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteMask"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteIndex"))
if mibBuilder.loadTexts: vRtrStaticRouteEntry.setStatus('current')
vRtrStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticRouteDest.setStatus('current')
vRtrStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticRouteMask.setStatus('current')
vRtrStaticRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticRouteIndex.setStatus('current')
vRtrStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticRouteRowStatus.setStatus('current')
vRtrStaticRouteLastEnabledTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticRouteLastEnabledTime.setStatus('current')
vRtrStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticRouteStatus.setStatus('current')
vRtrStaticRouteStaticType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("nextHop", 1), ("indirect", 2), ("blackHole", 3))).clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticRouteStaticType.setStatus('current')
vRtrStaticRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticRoutePreference.setStatus('current')
vRtrStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticRouteMetric.setStatus('current')
vRtrStaticRouteEgressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticRouteEgressIfIndex.setStatus('current')
vRtrStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticRouteNextHop.setStatus('current')
vRtrStaticRouteNextHopUnnumberedIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticRouteNextHopUnnumberedIf.setStatus('current')
vRtrStaticRouteAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 14), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticRouteAdminState.setStatus('current')
vRtrStaticRouteIgpShortcut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 15), Bits().clone(namedValues=NamedValues(("te", 0), ("ldp", 1), ("ip", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticRouteIgpShortcut.setStatus('current')
vRtrStaticRouteDisallowIgp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticRouteDisallowIgp.setStatus('current')
vRtrStaticRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 9, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrStaticRouteTag.setStatus('current')
vRtrSvcIpRangeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 10), )
if mibBuilder.loadTexts: vRtrSvcIpRangeTable.setStatus('current')
vRtrSvcIpRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 10, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSvcIpRangeAddress"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSvcIpRangeMask"))
if mibBuilder.loadTexts: vRtrSvcIpRangeEntry.setStatus('current')
vRtrSvcIpRangeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 10, 1, 1), IpAddress())
if mibBuilder.loadTexts: vRtrSvcIpRangeAddress.setStatus('current')
vRtrSvcIpRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: vRtrSvcIpRangeMask.setStatus('current')
vRtrSvcIpRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrSvcIpRangeRowStatus.setStatus('current')
vRtrSvcIpRangeExclusive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 10, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrSvcIpRangeExclusive.setStatus('current')
vRtrIpNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 11), )
if mibBuilder.loadTexts: vRtrIpNetToMediaTable.setStatus('current')
vRtrIpNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 11, 1), )
ipNetToMediaEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIpNetToMediaEntry"))
vRtrIpNetToMediaEntry.setIndexNames(*ipNetToMediaEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrIpNetToMediaEntry.setStatus('current')
vRtrIpNetToMediaTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIpNetToMediaTimer.setStatus('current')
vRtrIpNetToMediaOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 11, 1, 2), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIpNetToMediaOperState.setStatus('current')
vRtrInstanceAggregationTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 12), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInstanceAggregationTableLastChanged.setStatus('current')
vRtrInstanceAggregationTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 13), )
if mibBuilder.loadTexts: vRtrInstanceAggregationTable.setStatus('current')
vRtrInstanceAggregationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 13, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationIpPrefix"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationIpPrefixMask"))
if mibBuilder.loadTexts: vRtrInstanceAggregationEntry.setStatus('current')
vRtrAggregationIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 13, 1, 1), IpAddress())
if mibBuilder.loadTexts: vRtrAggregationIpPrefix.setStatus('current')
vRtrAggregationIpPrefixMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 13, 1, 2), IpAddressPrefixLength())
if mibBuilder.loadTexts: vRtrAggregationIpPrefixMask.setStatus('current')
vRtrAggregationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 13, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAggregationRowStatus.setStatus('current')
vRtrAggregationLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 13, 1, 4), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAggregationLastChanged.setStatus('current')
vRtrAggregationSummaryOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 13, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAggregationSummaryOnly.setStatus('current')
vRtrAggregationASSet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 13, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAggregationASSet.setStatus('current')
vRtrAggregationAggregatorAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 13, 1, 7), TmnxBgpAutonomousSystem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAggregationAggregatorAS.setStatus('current')
vRtrAggregationAggregatorIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 13, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAggregationAggregatorIPAddr.setStatus('current')
vRtrAggregationOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 13, 1, 9), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrAggregationOperState.setStatus('current')
vRtrStaticRouteIndexTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 14), )
if mibBuilder.loadTexts: vRtrStaticRouteIndexTable.setStatus('current')
vRtrStaticRouteIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 14, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteIndexDest"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteIndexMask"))
if mibBuilder.loadTexts: vRtrStaticRouteIndexEntry.setStatus('current')
vRtrStaticRouteIndexDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 14, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticRouteIndexDest.setStatus('current')
vRtrStaticRouteIndexMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 14, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticRouteIndexMask.setStatus('current')
vRtrStaticRouteAvailableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 14, 1, 3), TestAndIncr().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrStaticRouteAvailableIndex.setStatus('current')
vRtrTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 17), )
if mibBuilder.loadTexts: vRtrTunnelTable.setStatus('current')
vRtrTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 17, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTunnelDest"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTunnelMask"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTunnelPreference"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTunnelType"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTunnelID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTunnelNexthop"))
if mibBuilder.loadTexts: vRtrTunnelEntry.setStatus('current')
vRtrTunnelDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 17, 1, 1), IpAddress())
if mibBuilder.loadTexts: vRtrTunnelDest.setStatus('current')
vRtrTunnelMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 17, 1, 2), IpAddress())
if mibBuilder.loadTexts: vRtrTunnelMask.setStatus('current')
vRtrTunnelPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 17, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vRtrTunnelPreference.setStatus('current')
vRtrTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 17, 1, 4), TmnxTunnelType())
if mibBuilder.loadTexts: vRtrTunnelType.setStatus('current')
vRtrTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 17, 1, 5), TmnxTunnelID())
if mibBuilder.loadTexts: vRtrTunnelID.setStatus('current')
vRtrTunnelNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 17, 1, 6), IpAddress())
if mibBuilder.loadTexts: vRtrTunnelNexthop.setStatus('current')
vRtrTunnelMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 17, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrTunnelMetric.setStatus('current')
vRtrTunnelAge = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 17, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrTunnelAge.setStatus('current')
vRtrAdvPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 23), )
if mibBuilder.loadTexts: vRtrAdvPrefixTable.setStatus('current')
vRtrAdvPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 23, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixIfIndex"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixPrefix"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixLength"))
if mibBuilder.loadTexts: vRtrAdvPrefixEntry.setStatus('current')
vRtrAdvPrefixIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 23, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: vRtrAdvPrefixIfIndex.setStatus('current')
vRtrAdvPrefixPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 23, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: vRtrAdvPrefixPrefix.setStatus('current')
vRtrAdvPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 23, 1, 3), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(4, 127)))
if mibBuilder.loadTexts: vRtrAdvPrefixLength.setStatus('current')
vRtrAdvPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 23, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAdvPrefixRowStatus.setStatus('current')
vRtrAdvPrefixOnLinkFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 23, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAdvPrefixOnLinkFlag.setStatus('current')
vRtrAdvPrefixAutonomousFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 23, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAdvPrefixAutonomousFlag.setStatus('current')
vRtrAdvPrefixPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 23, 1, 7), Unsigned32().clone(604800)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAdvPrefixPreferredLifetime.setStatus('current')
vRtrAdvPrefixValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 23, 1, 8), Unsigned32().clone(2592000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrAdvPrefixValidLifetime.setStatus('current')
vRtrInetStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24), )
if mibBuilder.loadTexts: vRtrInetStaticRouteTable.setStatus('current')
vRtrInetStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteDestType"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteDest"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteDestPfxLen"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteIndex"))
if mibBuilder.loadTexts: vRtrInetStaticRouteEntry.setStatus('current')
vRtrInetStaticRouteDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 1), InetAddressType())
if mibBuilder.loadTexts: vRtrInetStaticRouteDestType.setStatus('current')
vRtrInetStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 2), InetAddress())
if mibBuilder.loadTexts: vRtrInetStaticRouteDest.setStatus('current')
vRtrInetStaticRouteDestPfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: vRtrInetStaticRouteDestPfxLen.setStatus('current')
vRtrInetStaticRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vRtrInetStaticRouteIndex.setStatus('current')
vRtrInetStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteRowStatus.setStatus('current')
vRtrInetStaticRouteLastEnabledTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInetStaticRouteLastEnabledTime.setStatus('current')
vRtrInetStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInetStaticRouteStatus.setStatus('current')
vRtrInetStaticRouteStaticType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("nextHop", 1), ("indirect", 2), ("blackHole", 3))).clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteStaticType.setStatus('current')
vRtrInetStaticRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRoutePreference.setStatus('current')
vRtrInetStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteMetric.setStatus('current')
vRtrInetStaticRouteEgressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInetStaticRouteEgressIfIndex.setStatus('current')
vRtrInetStaticRouteNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 12), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteNextHopType.setStatus('current')
vRtrInetStaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 13), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteNextHop.setStatus('current')
vRtrInetStaticRouteNextHopIf = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteNextHopIf.setStatus('current')
vRtrInetStaticRouteAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 15), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteAdminState.setStatus('current')
vRtrInetStaticRouteIgpShortcut = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 16), Bits().clone(namedValues=NamedValues(("te", 0), ("ldp", 1), ("ip", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteIgpShortcut.setStatus('current')
vRtrInetStaticRouteDisallowIgp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteDisallowIgp.setStatus('current')
vRtrInetStaticRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteTag.setStatus('current')
vRtrInetStaticRouteEnableBfd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteEnableBfd.setStatus('current')
vRtrInetStaticRouteCpeAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 20), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteCpeAddrType.setStatus('current')
vRtrInetStaticRouteCpeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 21), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteCpeAddr.setStatus('current')
vRtrInetStaticRouteCpeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteCpeInterval.setStatus('current')
vRtrInetStaticRouteCpeDropCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteCpeDropCnt.setStatus('current')
vRtrInetStaticRouteCpeEnableLog = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 24, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetStaticRouteCpeEnableLog.setStatus('current')
vRtrInetStaticRouteIndexTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 25), )
if mibBuilder.loadTexts: vRtrInetStaticRouteIndexTable.setStatus('current')
vRtrInetStaticRouteIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 25, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteDestType"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteDest"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteDestPfxLen"))
if mibBuilder.loadTexts: vRtrInetStaticRouteIndexEntry.setStatus('current')
vRtrInetStaticRouteAvailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 25, 1, 1), TestAndIncr().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInetStaticRouteAvailIndex.setStatus('current')
vRtrInetInstAggrTblLastChged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 26), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInetInstAggrTblLastChged.setStatus('current')
vRtrInetInstAggrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 27), )
if mibBuilder.loadTexts: vRtrInetInstAggrTable.setStatus('current')
vRtrInetInstAggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 27, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrIpPrefixType"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrIpPrefix"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrIpPrefixLen"))
if mibBuilder.loadTexts: vRtrInetInstAggrEntry.setStatus('current')
vRtrInetAggrIpPrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 27, 1, 1), InetAddressType())
if mibBuilder.loadTexts: vRtrInetAggrIpPrefixType.setStatus('current')
vRtrInetAggrIpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 27, 1, 2), InetAddress())
if mibBuilder.loadTexts: vRtrInetAggrIpPrefix.setStatus('current')
vRtrInetAggrIpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 27, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: vRtrInetAggrIpPrefixLen.setStatus('current')
vRtrInetAggrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 27, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetAggrRowStatus.setStatus('current')
vRtrInetAggrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 27, 1, 5), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetAggrLastChanged.setStatus('current')
vRtrInetAggrSummaryOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 27, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetAggrSummaryOnly.setStatus('current')
vRtrInetAggrASSet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 27, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetAggrASSet.setStatus('current')
vRtrInetAggrAggregatorAS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 27, 1, 8), TmnxBgpAutonomousSystem()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetAggrAggregatorAS.setStatus('current')
vRtrInetAggrAggregatorIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 27, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetAggrAggregatorIPAddr.setStatus('current')
vRtrInetAggrOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 27, 1, 10), TmnxOperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInetAggrOperState.setStatus('current')
vRtrInetSvcIpRangeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 28), )
if mibBuilder.loadTexts: vRtrInetSvcIpRangeTable.setStatus('current')
vRtrInetSvcIpRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 28, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetSvcIpRangeAddrType"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetSvcIpRangeAddr"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetSvcIpRangePfxLen"))
if mibBuilder.loadTexts: vRtrInetSvcIpRangeEntry.setStatus('current')
vRtrInetSvcIpRangeAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 28, 1, 1), InetAddressType())
if mibBuilder.loadTexts: vRtrInetSvcIpRangeAddrType.setStatus('current')
vRtrInetSvcIpRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 28, 1, 2), InetAddress())
if mibBuilder.loadTexts: vRtrInetSvcIpRangeAddr.setStatus('current')
vRtrInetSvcIpRangePfxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 28, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: vRtrInetSvcIpRangePfxLen.setStatus('current')
vRtrInetSvcIpRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 28, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetSvcIpRangeRowStatus.setStatus('current')
vRtrInetSvcIpRangeExclusive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 28, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrInetSvcIpRangeExclusive.setStatus('current')
vRtrIfGlobalIndexTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 37), )
if mibBuilder.loadTexts: vRtrIfGlobalIndexTable.setStatus('current')
vRtrIfGlobalIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 37, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfGlobalIndex"))
if mibBuilder.loadTexts: vRtrIfGlobalIndexEntry.setStatus('current')
vRtrIfGlobalIndexvRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 37, 1, 1), TmnxVRtrID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfGlobalIndexvRtrID.setStatus('current')
vRtrIfGlobalIndexvRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 37, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfGlobalIndexvRtrIfIndex.setStatus('current')
vRtrIfProxyNDTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 38), )
if mibBuilder.loadTexts: vRtrIfProxyNDTable.setStatus('current')
vRtrIfProxyNDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 38, 1), )
vRtrIfEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyNDEntry"))
vRtrIfProxyNDEntry.setIndexNames(*vRtrIfEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrIfProxyNDEntry.setStatus('current')
vRtrIfProxyNDLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 38, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyNDLocal.setStatus('current')
vRtrIfProxyNDPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 38, 1, 2), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyNDPolicy1.setStatus('current')
vRtrIfProxyNDPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 38, 1, 3), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyNDPolicy2.setStatus('current')
vRtrIfProxyNDPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 38, 1, 4), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyNDPolicy3.setStatus('current')
vRtrIfProxyNDPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 38, 1, 5), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyNDPolicy4.setStatus('current')
vRtrIfProxyNDPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 38, 1, 6), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfProxyNDPolicy5.setStatus('current')
vRtrIfDHCP6PfxDelegationLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 39), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCP6PfxDelegationLstChgd.setStatus('current')
vRtrIfDHCP6PfxDelegationTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 40), )
if mibBuilder.loadTexts: vRtrIfDHCP6PfxDelegationTable.setStatus('current')
vRtrIfDHCP6PfxDelegationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 40, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6PfxdPrefix"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6PfxdPrefixLen"))
if mibBuilder.loadTexts: vRtrIfDHCP6PfxDelegationEntry.setStatus('current')
vRtrIfDHCP6PfxdPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 40, 1, 1), InetAddressIPv6())
if mibBuilder.loadTexts: vRtrIfDHCP6PfxdPrefix.setStatus('current')
vRtrIfDHCP6PfxdPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 40, 1, 2), InetAddressPrefixLength())
if mibBuilder.loadTexts: vRtrIfDHCP6PfxdPrefixLen.setStatus('current')
vRtrIfDHCP6PfxdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 40, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6PfxdRowStatus.setStatus('current')
vRtrIfDHCP6PfxdLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 40, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrIfDHCP6PfxdLastChanged.setStatus('current')
vRtrIfDHCP6PfxdDUID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 40, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6PfxdDUID.setStatus('current')
vRtrIfDHCP6PfxdIAID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 40, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6PfxdIAID.setStatus('current')
vRtrIfDHCP6PfxdPrefLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 40, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(604800)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6PfxdPrefLifetime.setStatus('current')
vRtrIfDHCP6PfxdValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 40, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(2592000)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfDHCP6PfxdValidLifetime.setStatus('current')
vRtrDHCP6DropStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 41), )
if mibBuilder.loadTexts: vRtrDHCP6DropStatTable.setStatus('current')
vRtrDHCP6DropStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 41, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6DropStatReason"))
if mibBuilder.loadTexts: vRtrDHCP6DropStatEntry.setStatus('current')
vRtrDHCP6DropStatReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 41, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("none", 0), ("srcOperDown", 1), ("dstOperDown", 2), ("rlyReplyOnClientItf", 3), ("hopCount", 4), ("badRelayedMsg", 5), ("clientItfNotFound", 6), ("noMemory", 7), ("noGlobalPfx", 8), ("noSrcIp", 9), ("noRteToServer", 10), ("subMgmtUpdFail", 11), ("relayForw", 12), ("msgTooSmall", 13), ("msgNotForServer", 14), ("noServerId", 15), ("noClientId", 16), ("serverIdInClientMsg", 17), ("wrongServerId", 18), ("illegalUnicast", 19), ("illegalSrcIp", 20), ("pdMsgNotSupported", 21), ("nbrAddrsExceeded", 22), ("clientMacNotResolved", 23), ("illegalAssignedAddr", 24), ("msgEncodingError", 25))))
if mibBuilder.loadTexts: vRtrDHCP6DropStatReason.setStatus('current')
vRtrDHCP6DropStatLastCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 41, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrDHCP6DropStatLastCleared.setStatus('current')
vRtrDHCP6DropStatPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 41, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrDHCP6DropStatPktsDropped.setStatus('current')
vRtrDHCP6MsgStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 42), )
if mibBuilder.loadTexts: vRtrDHCP6MsgStatTable.setStatus('current')
vRtrDHCP6MsgStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 42, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6MsgStatsMsgType"))
if mibBuilder.loadTexts: vRtrDHCP6MsgStatEntry.setStatus('current')
vRtrDHCP6MsgStatsMsgType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 42, 1, 1), TmnxDHCP6MsgType())
if mibBuilder.loadTexts: vRtrDHCP6MsgStatsMsgType.setStatus('current')
vRtrDHCP6MsgStatsLstClrd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 42, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrDHCP6MsgStatsLstClrd.setStatus('current')
vRtrDHCP6MsgStatsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 42, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrDHCP6MsgStatsRcvd.setStatus('current')
vRtrDHCP6MsgStatsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 42, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrDHCP6MsgStatsSent.setStatus('current')
vRtrDHCP6MsgStatsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 42, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrDHCP6MsgStatsDropped.setStatus('current')
vRtrIfIpcpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 43), )
if mibBuilder.loadTexts: vRtrIfIpcpTable.setStatus('current')
vRtrIfIpcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 43, 1), )
vRtrIfEntry.registerAugmentions(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIpcpEntry"))
vRtrIfIpcpEntry.setIndexNames(*vRtrIfEntry.getIndexNames())
if mibBuilder.loadTexts: vRtrIfIpcpEntry.setStatus('current')
vRtrIfIpcpPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 43, 1, 1), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIpcpPeerAddrType.setStatus('current')
vRtrIfIpcpPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 43, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIpcpPeerAddr.setStatus('current')
vRtrIfIpcpPriDnsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 43, 1, 3), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIpcpPriDnsAddrType.setStatus('current')
vRtrIfIpcpPriDnsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 43, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIpcpPriDnsAddr.setStatus('current')
vRtrIfIpcpSecDnsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 43, 1, 5), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIpcpSecDnsAddrType.setStatus('current')
vRtrIfIpcpSecDnsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 43, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vRtrIfIpcpSecDnsAddr.setStatus('current')
vRtrInetStatRteCpeChkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 44), )
if mibBuilder.loadTexts: vRtrInetStatRteCpeChkStatsTable.setStatus('current')
vRtrInetStatRteCpeChkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 44, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteDestType"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteDest"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteDestPfxLen"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteIndex"))
if mibBuilder.loadTexts: vRtrInetStatRteCpeChkStatsEntry.setStatus('current')
vRtrInetStatRteCpeChkUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 44, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInetStatRteCpeChkUpTime.setStatus('current')
vRtrInetStatRteCpeChkInPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 44, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInetStatRteCpeChkInPktCnt.setStatus('current')
vRtrInetStatRteCpeChkOutPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 44, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInetStatRteCpeChkOutPktCnt.setStatus('current')
vRtrInetStatRteCpeChkDownTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 44, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInetStatRteCpeChkDownTrans.setStatus('current')
vRtrInetStatRteCpeChkUpTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 44, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInetStatRteCpeChkUpTrans.setStatus('current')
vRtrInetStatRteCpeChkTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 44, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: vRtrInetStatRteCpeChkTTL.setStatus('current')
tmnxDscpAppTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 45), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDscpAppTableLastChanged.setStatus('current')
tmnxDscpAppTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 46), )
if mibBuilder.loadTexts: tmnxDscpAppTable.setStatus('current')
tmnxDscpAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 46, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDscpAppId"))
if mibBuilder.loadTexts: tmnxDscpAppEntry.setStatus('current')
tmnxDscpAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 46, 1, 1), TDSCPAppId())
if mibBuilder.loadTexts: tmnxDscpAppId.setStatus('current')
tmnxDscpAppLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 46, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDscpAppLastChanged.setStatus('current')
tmnxDscpAppDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 46, 1, 3), TDSCPValueOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDscpAppDscpValue.setStatus('current')
tmnxDscpFCTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 47), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDscpFCTableLastChanged.setStatus('current')
tmnxDscpFCTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 48), )
if mibBuilder.loadTexts: tmnxDscpFCTable.setStatus('current')
tmnxDscpFCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 48, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDscpFCDscpValue"))
if mibBuilder.loadTexts: tmnxDscpFCEntry.setStatus('current')
tmnxDscpFCDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 48, 1, 1), TDSCPValue())
if mibBuilder.loadTexts: tmnxDscpFCDscpValue.setStatus('current')
tmnxDscpFCLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 48, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDscpFCLastChanged.setStatus('current')
tmnxDscpFCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 48, 1, 4), TFCType().clone('be')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDscpFCValue.setStatus('current')
tmnxDot1pAppTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 49), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1pAppTableLastChanged.setStatus('current')
tmnxDot1pAppTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 50), )
if mibBuilder.loadTexts: tmnxDot1pAppTable.setStatus('current')
tmnxDot1pAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 50, 1), ).setIndexNames((0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), (0, "ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDot1pAppId"))
if mibBuilder.loadTexts: tmnxDot1pAppEntry.setStatus('current')
tmnxDot1pAppId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 50, 1, 1), TDot1pAppId())
if mibBuilder.loadTexts: tmnxDot1pAppId.setStatus('current')
tmnxDot1pAppLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 50, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxDot1pAppLastChanged.setStatus('current')
tmnxDot1pAppValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 50, 1, 3), Dot1PPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDot1pAppValue.setStatus('current')
tmnxVRtrNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21))
vRtrAutoFilterDHCPClientAddress = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrAutoFilterDHCPClientAddress.setStatus('obsolete')
vRtrAutoFilterDHCPClientLease = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrAutoFilterDHCPClientLease.setStatus('obsolete')
vRtrDHCPClientLease = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCPClientLease.setStatus('obsolete')
vRtrDhcpLseStateOldCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 4), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDhcpLseStateOldCiAddr.setStatus('obsolete')
vRtrDhcpLseStateOldChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 5), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDhcpLseStateOldChAddr.setStatus('obsolete')
vRtrDhcpLseStateNewCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 6), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDhcpLseStateNewCiAddr.setStatus('obsolete')
vRtrDhcpLseStateNewChAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 7), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDhcpLseStateNewChAddr.setStatus('obsolete')
vRtrDhcpRestoreLseStateCiAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 8), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDhcpRestoreLseStateCiAddr.setStatus('obsolete')
vRtrDhcpRestoreLseStateVRtrId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 9), TmnxVRtrID()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDhcpRestoreLseStateVRtrId.setStatus('obsolete')
vRtrDhcpRestoreLseStateIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 10), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDhcpRestoreLseStateIfIndex.setStatus('obsolete')
vRtrDhcpRestoreLseStateProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDhcpRestoreLseStateProblem.setStatus('obsolete')
vRtrDhcpPacketProblem = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDhcpPacketProblem.setStatus('current')
vRtrDhcpLseStatePopulateError = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDhcpLseStatePopulateError.setStatus('obsolete')
vRtrBfdSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 14), TmnxSlotNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrBfdSlotNumber.setStatus('current')
vRtrNumberOfBfdSessionsOnSlot = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 15), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrNumberOfBfdSessionsOnSlot.setStatus('current')
vRtrBfdMaxSessionReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 16), Bits().clone(namedValues=NamedValues(("maxSessionsPerSlot", 0), ("maxTxPacketRate", 1), ("maxRxPacketRate", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrBfdMaxSessionReason.setStatus('current')
vRtrDHCP6ServerNetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 17), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6ServerNetAddrType.setStatus('current')
vRtrDHCP6ServerNetAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 18), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6ServerNetAddr.setStatus('current')
vRtrDHCP6ClientNetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 19), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6ClientNetAddrType.setStatus('current')
vRtrDHCP6ClientNetAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 20), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6ClientNetAddr.setStatus('current')
vRtrDHCP6AssignedNetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 21), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6AssignedNetAddrType.setStatus('current')
vRtrDHCP6AssignedNetAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 22), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6AssignedNetAddr.setStatus('current')
vRtrDHCP6AssignedPrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 23), InetAddressPrefixLength()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6AssignedPrefixLen.setStatus('current')
vRtrDHCP6OldAssignedNetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 24), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6OldAssignedNetAddrType.setStatus('current')
vRtrDHCP6OldAssignedNetAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 25), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6OldAssignedNetAddr.setStatus('current')
vRtrDHCP6OldAssignedPrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 26), InetAddressPrefixLength()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6OldAssignedPrefixLen.setStatus('current')
vRtrDHCP6NewClientId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6NewClientId.setStatus('current')
vRtrDHCP6OldClientId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6OldClientId.setStatus('current')
vRtrDHCP6LeaseOverrideResult = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 29), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrDHCP6LeaseOverrideResult.setStatus('current')
vRtrInetStatRteCpeNotifyAddrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 30), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrInetStatRteCpeNotifyAddrType.setStatus('current')
vRtrInetStatRteCpeNotifyAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 31), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrInetStatRteCpeNotifyAddr.setStatus('current')
vRtrInetStaticRouteCpeStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("reachable", 0), ("unreachable", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrInetStaticRouteCpeStatus.setStatus('current')
vRtrManagedRouteInetAddrType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 33), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrManagedRouteInetAddrType.setStatus('current')
vRtrManagedRouteInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 34), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrManagedRouteInetAddr.setStatus('current')
vRtrManagedRoutePrefixLen = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 35), InetAddressPrefixLength()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrManagedRoutePrefixLen.setStatus('current')
vRtrFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 3, 21, 36), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vRtrFailureDescription.setStatus('current')
tmnxVRtrMidRouteTCA = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 1)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatCurrNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMidRouteThreshold"))
if mibBuilder.loadTexts: tmnxVRtrMidRouteTCA.setStatus('current')
tmnxVRtrHighRouteTCA = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 2)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatCurrNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrHighRouteThreshold"))
if mibBuilder.loadTexts: tmnxVRtrHighRouteTCA.setStatus('current')
tmnxVRtrHighRouteCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 3)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatCurrNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrHighRouteThreshold"))
if mibBuilder.loadTexts: tmnxVRtrHighRouteCleared.setStatus('current')
tmnxVRtrIllegalLabelTCA = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 4)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatIllegalLabels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIllegalLabelThreshold"))
if mibBuilder.loadTexts: tmnxVRtrIllegalLabelTCA.setStatus('current')
tmnxVRtrMcastMidRouteTCA = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 5)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMulticastRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMcastMidRouteThreshold"))
if mibBuilder.loadTexts: tmnxVRtrMcastMidRouteTCA.setStatus('current')
tmnxVRtrMcastMaxRoutesTCA = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 6)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMulticastRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxMcastNumRoutes"))
if mibBuilder.loadTexts: tmnxVRtrMcastMaxRoutesTCA.setStatus('current')
tmnxVRtrMcastMaxRoutesCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 7)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMulticastRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxMcastNumRoutes"))
if mibBuilder.loadTexts: tmnxVRtrMcastMaxRoutesCleared.setStatus('current')
tmnxVRtrMaxArpEntriesTCA = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 8)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxARPEntries"))
if mibBuilder.loadTexts: tmnxVRtrMaxArpEntriesTCA.setStatus('current')
tmnxVRtrMaxArpEntriesCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 9)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxARPEntries"))
if mibBuilder.loadTexts: tmnxVRtrMaxArpEntriesCleared.setStatus('current')
tmnxVRtrDHCPAFEntriesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 10)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPOperAutoFilter"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAutoFilterDHCPClientAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAutoFilterDHCPClientLease"))
if mibBuilder.loadTexts: tmnxVRtrDHCPAFEntriesExceeded.setStatus('obsolete')
tmnxVRtrMaxRoutes = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 11)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatCurrNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxNumRoutes"))
if mibBuilder.loadTexts: tmnxVRtrMaxRoutes.setStatus('current')
tmnxVRtrDHCPLseStsExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 12)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCPClientLease"))
if mibBuilder.loadTexts: tmnxVRtrDHCPLseStsExceeded.setStatus('obsolete')
tmnxVRtrDHCPLeaseStateOverride = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 13)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStateOldCiAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStateOldChAddr"))
if mibBuilder.loadTexts: tmnxVRtrDHCPLeaseStateOverride.setStatus('obsolete')
tmnxVRtrDHCPSuspiciousPcktRcvd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 14)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpPacketProblem"))
if mibBuilder.loadTexts: tmnxVRtrDHCPSuspiciousPcktRcvd.setStatus('current')
tmnxVRtrDHCPLseStRestoreProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 15)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpRestoreLseStateVRtrId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpRestoreLseStateIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpRestoreLseStateCiAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpRestoreLseStateProblem"))
if mibBuilder.loadTexts: tmnxVRtrDHCPLseStRestoreProblem.setStatus('obsolete')
tmnxVRtrDHCPLseStatePopulateErr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 16)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStatePopulateError"))
if mibBuilder.loadTexts: tmnxVRtrDHCPLseStatePopulateErr.setStatus('obsolete')
tmnxVRtrBfdSessionDown = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 17)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionLclDisc"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionOperFlags"))
if mibBuilder.loadTexts: tmnxVRtrBfdSessionDown.setStatus('current')
tmnxVRtrBfdMaxSessionOnSlot = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 18)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBfdSlotNumber"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrNumberOfBfdSessionsOnSlot"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBfdMaxSessionReason"))
if mibBuilder.loadTexts: tmnxVRtrBfdMaxSessionOnSlot.setStatus('current')
tmnxVRtrBfdPortTypeNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 19)).setObjects(("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortNotifyPortId"), ("ALCATEL-IND1-TIMETRA-PORT-MIB", "tmnxPortType"))
if mibBuilder.loadTexts: tmnxVRtrBfdPortTypeNotSupported.setStatus('current')
tmnxVRtrDHCPIfLseStatesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 20)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapPortId"), ("ALCATEL-IND1-TIMETRA-SAP-MIB", "sapEncapValue"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPLeasePopulate"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpClientLease"))
if mibBuilder.loadTexts: tmnxVRtrDHCPIfLseStatesExceeded.setStatus('current')
tmnxVRtrDHCP6RelayLseStExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 21)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6LeasePopulate"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedPrefixLen"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6NewClientId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpClientLease"))
if mibBuilder.loadTexts: tmnxVRtrDHCP6RelayLseStExceeded.setStatus('current')
tmnxVRtrDHCP6ServerLseStExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 22)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6ServerMaxLeaseStates"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedPrefixLen"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6NewClientId"), ("ALCATEL-IND1-TIMETRA-SERV-MIB", "svcDhcpClientLease"))
if mibBuilder.loadTexts: tmnxVRtrDHCP6ServerLseStExceeded.setStatus('current')
tmnxVRtrDHCP6LseStateOverride = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 23)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6OldAssignedNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6OldAssignedNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6OldAssignedPrefixLen"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStateOldChAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6OldClientId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedPrefixLen"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6NewClientId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6LeaseOverrideResult"))
if mibBuilder.loadTexts: tmnxVRtrDHCP6LseStateOverride.setStatus('current')
tmnxVRtrDHCP6RelayReplyStripUni = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 24)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ServerNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ServerNetAddr"))
if mibBuilder.loadTexts: tmnxVRtrDHCP6RelayReplyStripUni.setStatus('current')
tmnxVRtrDHCP6IllegalClientAddr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 25)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ClientNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ClientNetAddr"))
if mibBuilder.loadTexts: tmnxVRtrDHCP6IllegalClientAddr.setStatus('current')
tmnxVRtrDHCP6AssignedIllegSubnet = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 26)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ClientNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ClientNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedPrefixLen"))
if mibBuilder.loadTexts: tmnxVRtrDHCP6AssignedIllegSubnet.setStatus('current')
tmnxVRtrDHCP6ClientMacUnresolved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 27)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ClientNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ClientNetAddr"))
if mibBuilder.loadTexts: tmnxVRtrDHCP6ClientMacUnresolved.setStatus('current')
tmnxVRtrBfdSessionUp = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 28)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionLclDisc"))
if mibBuilder.loadTexts: tmnxVRtrBfdSessionUp.setStatus('current')
tmnxVRtrIPv6MidRouteTCA = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 29)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatCurrNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIPv6MidRouteThreshold"))
if mibBuilder.loadTexts: tmnxVRtrIPv6MidRouteTCA.setStatus('current')
tmnxVRtrIPv6HighRouteTCA = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 30)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatCurrNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIPv6HighRouteThreshold"))
if mibBuilder.loadTexts: tmnxVRtrIPv6HighRouteTCA.setStatus('current')
tmnxVRtrIPv6HighRouteCleared = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 31)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatCurrNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIPv6HighRouteThreshold"))
if mibBuilder.loadTexts: tmnxVRtrIPv6HighRouteCleared.setStatus('current')
tmnxVRtrStaticRouteCPEStatus = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 32)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStatRteCpeNotifyAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStatRteCpeNotifyAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteCpeStatus"))
if mibBuilder.loadTexts: tmnxVRtrStaticRouteCPEStatus.setStatus('current')
tmnxVRtrBfdSessionDeleted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 33)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionLclDisc"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionOperFlags"))
if mibBuilder.loadTexts: tmnxVRtrBfdSessionDeleted.setStatus('current')
tmnxVRtrBfdSessionProtChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 34)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionLclDisc"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionProtocols"))
if mibBuilder.loadTexts: tmnxVRtrBfdSessionProtChange.setStatus('current')
tmnxVRtrManagedRouteAddFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 3, 0, 35)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrManagedRouteInetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrManagedRouteInetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrManagedRoutePrefixLen"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrFailureDescription"))
if mibBuilder.loadTexts: tmnxVRtrManagedRouteAddFailed.setStatus('current')
tmnxVRtrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 1))
tmnxVRtrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2))
tmnxVRtr7450V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 1, 4)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrGlobalR2r1Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrV4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfV4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIpV4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrNotificationV4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfSubscrAuthV3v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtr7450V4v0Compliance = tmnxVRtr7450V4v0Compliance.setStatus('obsolete')
tmnxVRtr7750V4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 1, 5)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrGlobalR2r1Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrV4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfV4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIpV4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIPv6V4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIPv6IpV4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIPv6IfV4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrNotificationV4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfSubscrAuthV3v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtr7750V4v0Compliance = tmnxVRtr7750V4v0Compliance.setStatus('obsolete')
tmnxVRtr7450V5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 1, 6)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrGlobalR2r1Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIpV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrNotificationV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfSubscrAuthV3v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtr7450V5v0Compliance = tmnxVRtr7450V5v0Compliance.setStatus('obsolete')
tmnxVRtr7750V5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 1, 7)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrGlobalR2r1Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIpV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIPv6V4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIPv6IpV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIPv6IfV4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrNotificationV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfSubscrAuthV3v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdV4v0Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtr7750V5v0Compliance = tmnxVRtr7750V5v0Compliance.setStatus('obsolete')
tmnxVRtr7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 1, 8)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrGlobalV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIpV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrNotificationV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfSubscrAuthV3v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrStaticRteCPEChkV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDscpAppV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfDHCPRelayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtr7450V6v0Compliance = tmnxVRtr7450V6v0Compliance.setStatus('current')
tmnxVRtr77x0V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 1, 9)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrGlobalV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIpV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIPv6V4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIPv6IpV5v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIPv6IfV4v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfDhcpServerGroup"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrNotificationV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfSubscrAuthV3v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrStaticRteCPEChkV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfIpcpV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfCpmProtectGroup"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDscpAppV6v0Group"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIfDHCPRelayGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtr77x0V6v0Compliance = tmnxVRtr77x0V6v0Compliance.setStatus('current')
tmnxVRtrGlobalR2r1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 10)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrNextVRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrConfiguredVRtrs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrActiveVRtrs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRouteThresholdSoakTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxARPEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrGlobalR2r1Group = tmnxVRtrGlobalR2r1Group.setStatus('obsolete')
tmnxVRtrIfSubscrAuthV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 11)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPAuthPolicy"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayAuthPktsDiscarded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayAuthPktsSuccess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIfSubscrAuthV3v0Group = tmnxVRtrIfSubscrAuthV3v0Group.setStatus('current')
tmnxVRtrV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 14)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrName"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBgpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMplsStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOspfStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRipStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRsvpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrEcmpMaxRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAS"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrNewIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrLdpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIsIsStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRouterId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTriggeredPolicy"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrConfederationAS"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRouteDistinguisher"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMidRouteThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrHighRouteThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIllegalLabelThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVpnId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDescription"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrGracefulRestart"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrGracefulRestartType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrCustId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIgmpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxNumRoutesLogOnly"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVrfTarget"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVrfExportTarget"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVrfImportTarget"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrPimStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxMcastNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxMcastNumRoutesLogOnly"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMcastMidRouteThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIgnoreIcmpRedirect"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOspfv3Status"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDirectRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDirectActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOSPFRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOSPFActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBGPRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBGPActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrISISRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrISISActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRIPRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRIPActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregateRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregateActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatConfiguredIfs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveIfs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatIllegalLabels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatCurrNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatBGPVpnRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatBGPVpnActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalLdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalSdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveLdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveSdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMulticastRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSubMgmtRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSubMgmtActiveRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrV4v0Group = tmnxVRtrV4v0Group.setStatus('obsolete')
tmnxVRtrIfV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 15)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfTotalNumber"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfName"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfPortID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfChannelID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfEncapValue"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfAlias"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfPhysicalAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfArpTimeout"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpMaskReply"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpRedirects"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpNumRedirects"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpRedirectsTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpUnreachables"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpNumUnreachables"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpUnreachablesTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpTtlExpired"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpNumTtlExpired"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpTtlExpiredTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfNtpBroadcast"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfUnnumbered"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfMtu"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfQosPolicyId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIngressFilterId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfEgressFilterId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDirectedBroadcast"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfMplsStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfUnnumberedIf"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfCflowd"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfVPNClass"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDescription"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProtocol"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfTosMarkingTrusted"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfArpPopulate"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArp"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpLocal"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpPolicy1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpPolicy2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpPolicy3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpPolicy4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpPolicy5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfNameIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayInfoAction"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayCircuitId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRemoteId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer6"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer7"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer8"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayTrusted"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPDescription"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRxPkts"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayTxPkts"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRxMalformedPkts"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRxUntrustedPkts"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsDiscarded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsRelayed"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServerPktsDiscarded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServerPktsRelayed"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsSnooped"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServerPktsSnooped"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPLeasePopulate"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPOperLeasePopulate"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPGiAddressType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPGiAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPGiAddressAsSrc"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPMatchOption82"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIfV4v0Group = tmnxVRtrIfV4v0Group.setStatus('obsolete')
tmnxVRtrIpV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 16)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaIpAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaNetMask"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaBcastAddrFormat"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaReasmMaxSize"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaIgpInhibit"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetAddressType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetPrefixLen"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetAddrState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetEui64"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetOperAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIpCidrRouteLastEnabledTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIpCidrRoutePreference"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIpCidrRouteMetric"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteDest"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteMask"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteNumber"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteLastEnabledTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteStaticType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRoutePreference"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteMetric"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteEgressIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteNextHop"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteNextHopUnnumberedIf"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteIgpShortcut"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteDisallowIgp"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteTag"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteIndexDest"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteIndexMask"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteAvailableIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteLastEnabledTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteStaticType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRoutePreference"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteMetric"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteEgressIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteNextHopType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteNextHop"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteNextHopIf"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteIgpShortcut"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteDisallowIgp"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteTag"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteEnableBfd"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteAvailIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSvcIpRangeAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSvcIpRangeMask"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSvcIpRangeRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSvcIpRangeExclusive"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIpNetToMediaTimer"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIpNetToMediaOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInstanceAggregationTableLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationSummaryOnly"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationASSet"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationAggregatorAS"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationAggregatorIPAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTunnelMetric"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTunnelAge"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixOnLinkFlag"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixAutonomousFlag"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixPreferredLifetime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixValidLifetime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetInstAggrTblLastChged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrSummaryOnly"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrASSet"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrAggregatorAS"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrAggregatorIPAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetSvcIpRangeRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetSvcIpRangeExclusive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIpV4v0Group = tmnxVRtrIpV4v0Group.setStatus('obsolete')
tmnxVRtrObsoletedObjectsV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 17)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPLseStateChAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPLseStateRemainLseTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPLseStateOption82"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPLseStatePersistKey"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCPClientLease"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStateOldCiAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStateOldChAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStateNewCiAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStateNewChAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpRestoreLseStateCiAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpRestoreLseStateVRtrId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpRestoreLseStateIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpRestoreLseStateProblem"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpLseStatePopulateError"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayInfoOption"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPAutoFilter"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPSnooping"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPAutoFilterId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPOperAutoFilter"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAutoFilterDHCPClientAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAutoFilterDHCPClientLease"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrObsoletedObjectsV4v0Group = tmnxVRtrObsoletedObjectsV4v0Group.setStatus('current')
tmnxVRtrBfdV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 18)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdTransmitInterval"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdReceiveInterval"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdMultiplier"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionOperFlags"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionMesgRecv"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionMesgSent"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionLastDownTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionLastUpTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionUpCount"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionDownCount"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionLclDisc"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionRemDisc"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionProtocols"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionTxInterval"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionRxInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrBfdV4v0Group = tmnxVRtrBfdV4v0Group.setStatus('obsolete')
tmnxVRtrNotificationV4v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 19)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMidRouteTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrHighRouteTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrHighRouteCleared"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIllegalLabelTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMcastMidRouteTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMcastMaxRoutesTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMcastMaxRoutesCleared"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMaxArpEntriesTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMaxArpEntriesCleared"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMaxRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCPSuspiciousPcktRcvd"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdSessionDown"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdMaxSessionOnSlot"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdPortTypeNotSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrNotificationV4v0Group = tmnxVRtrNotificationV4v0Group.setStatus('obsolete')
tmnxVRtrIPv6IfV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 20)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIPv6ConfigAllowed"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIPv6OperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIPv6IngressFilterId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIPv6EgressFilterId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6Redirects"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6NumRedirects"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6RedirectsTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6Unreachables"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6NumUnreachables"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6UnreachablesTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6TimeExceeded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6NumTimeExceeded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6TimeExceededTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6PktTooBig"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6NumPktTooBig"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6PktTooBigTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6ParamProblem"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6NumParamProblem"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpV6ParamProblemTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfLinkLocalAddressType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfLinkLocalAddressState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfLinkLocalAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InMsgs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InErrors"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InDestUnreachs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InAdminProhibs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InTimeExcds"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InParmProblems"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InPktTooBigs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InEchos"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InEchoReplies"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InRtrSolicits"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InRtrAdvertisements"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InNbrSolicits"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InNbrAdvertisements"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InRedirects"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InGrpMembQueries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InGrpMembResponses"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6InGrpMembReductions"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutMsgs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutErrors"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutDestUnreachs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutAdminProhibs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutTimeExcds"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutParmProblems"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutPktTooBigs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutEchos"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutEchoReplies"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutRtrSolicits"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutRtrSolicitsTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutRtrAdvertisements"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutRtrAdvTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutNbrSolicits"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutNbrSolicitsTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutNbrAdvertisements"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutNbrAdvTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutRedirects"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutGrpMembQueries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutGrpMembResponses"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmp6OutGrpMembReductions"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InMsgs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InErrors"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InDestUnreachs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InAdminProhibs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InTimeExcds"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InParmProblems"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InPktTooBigs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InEchos"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InEchoReplies"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InRtrSolicits"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InRtrAdvertisements"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InNbrSolicits"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InNbrAdvertisements"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InRedirects"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InGrpMembQueries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InGrpMembResponses"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6InGrpMembReductions"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutMsgs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutErrors"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutDestUnreachs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutAdminProhibs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutTimeExcds"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutParmProblems"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutPktTooBigs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutEchos"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutEchoReplies"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutRtrSolicits"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutRtrAdvertisements"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutNbrSolicits"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutNbrAdvertisements"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutRedirects"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutGrpMembQueries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutGrpMembResponses"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIcmp6OutGrpMembReductions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIPv6IfV4v0Group = tmnxVRtrIPv6IfV4v0Group.setStatus('current')
tmnxVRtrIPv6V4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 21)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6DirectRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6DirectActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StaticRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StaticActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6OSPFRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6OSPFActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6BGPRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6BGPActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6ISISRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6ISISActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6RIPRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6RIPActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6AggregateRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6AggregateActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatConfiguredIfs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatActiveIfs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatIllegalLabels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatCurrNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatBGPVpnRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatBGPVpnActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatTotalLdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatTotalSdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatActiveLdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatActiveSdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6MulticastRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatActiveNbrEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatTotalNbrEntries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIPv6V4v0Group = tmnxVRtrIPv6V4v0Group.setStatus('current')
tmnxVRtrIPv6IpV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 22)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixOnLinkFlag"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixAutonomousFlag"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixPreferredLifetime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixValidLifetime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIPv6IpV4v0Group = tmnxVRtrIPv6IpV4v0Group.setStatus('obsolete')
tmnxVRtrObsoleteNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 23)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCPAFEntriesExceeded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCPLseStsExceeded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCPLeaseStateOverride"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCPLseStRestoreProblem"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCPLseStatePopulateErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrObsoleteNotificationGroup = tmnxVRtrObsoleteNotificationGroup.setStatus('current')
tmnxVRtrIPv6IpV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 24)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixOnLinkFlag"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixAutonomousFlag"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixPreferredLifetime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixValidLifetime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6TableLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6LastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6AdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6OperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6Description"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6RelayServer1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6RelayServer2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6RelayServer3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6RelayServer4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6RelayServer5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6RelayServer6"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6RelayServer7"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6RelayServer8"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6RelayItfIdOption"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6LeasePopulate"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6CurrLeasePopulate"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6SourceAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6EnableNgbrResolution"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6RemoteIdOption"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6PfxdAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6ServerMaxLeaseStates"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6CurrServerLeaseStates"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6ItfIdString"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyNDLocal"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyNDPolicy1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyNDPolicy2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyNDPolicy3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyNDPolicy4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyNDPolicy5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6PfxdRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6PfxdLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6PfxdDUID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6PfxdIAID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6PfxdPrefLifetime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6PfxdValidLifetime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCP6PfxDelegationLstChgd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIPv6IpV5v0Group = tmnxVRtrIPv6IpV5v0Group.setStatus('current')
tmnxVRtrIfV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 25)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfTotalNumber"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfName"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfPortID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfEncapValue"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfAlias"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfPhysicalAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfArpTimeout"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpMaskReply"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpRedirects"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpNumRedirects"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpRedirectsTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpUnreachables"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpNumUnreachables"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpUnreachablesTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpTtlExpired"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpNumTtlExpired"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIcmpTtlExpiredTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfNtpBroadcast"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfUnnumbered"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfMtu"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfQosPolicyId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIngressFilterId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfEgressFilterId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDirectedBroadcast"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfMplsStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfUnnumberedIf"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfCflowd"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfVPNClass"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDescription"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProtocol"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfTosMarkingTrusted"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfArpPopulate"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfLastOperStateChange"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfOperMtu"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfGlobalIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArp"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpLocal"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpPolicy1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpPolicy2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpPolicy3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpPolicy4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfProxyArpPolicy5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfNameIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayInfoAction"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayCircuitId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRemoteId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer6"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer7"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer8"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayTrusted"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPDescription"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRxPkts"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayTxPkts"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRxMalformedPkts"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRxUntrustedPkts"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsDiscarded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsRelayed"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServerPktsDiscarded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServerPktsRelayed"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsSnooped"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServerPktsSnooped"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsProxRad"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsProxLS"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayPktsGenRelease"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayPktsGenForceRenew"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPLeasePopulate"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPOperLeasePopulate"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPGiAddressType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPGiAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPGiAddressAsSrc"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPMatchOption82"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRemoteIdStr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPProxyAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPProxyServerAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPProxyLeaseTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPProxyLTRadiusOverride"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPVendorIncludeOptions"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPVendorOptionString"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfGlobalIndexvRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfGlobalIndexvRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDelaySeconds"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDelayUpTimer"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfInitDelayEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIfV5v0Group = tmnxVRtrIfV5v0Group.setStatus('current')
tmnxVRtrIpV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 26)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaIpAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaNetMask"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaBcastAddrFormat"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaReasmMaxSize"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaIgpInhibit"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetAddressType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetPrefixLen"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetAddrState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetEui64"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetOperAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetGwAddressType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetGwAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetRemoteIpType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRiaInetRemoteIp"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIpCidrRouteLastEnabledTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIpCidrRoutePreference"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIpCidrRouteMetric"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteDest"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteMask"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteNumber"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteLastEnabledTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteStaticType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRoutePreference"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteMetric"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteEgressIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteNextHop"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteNextHopUnnumberedIf"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteIgpShortcut"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteDisallowIgp"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteTag"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteIndexDest"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteIndexMask"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRouteAvailableIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteLastEnabledTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteStaticType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRoutePreference"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteMetric"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteEgressIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteNextHopType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteNextHop"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteNextHopIf"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteIgpShortcut"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteDisallowIgp"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteTag"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteEnableBfd"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteAvailIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSvcIpRangeAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSvcIpRangeMask"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSvcIpRangeRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSvcIpRangeExclusive"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIpNetToMediaTimer"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIpNetToMediaOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInstanceAggregationTableLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationSummaryOnly"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationASSet"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationAggregatorAS"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationAggregatorIPAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregationOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTunnelMetric"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTunnelAge"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixOnLinkFlag"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixAutonomousFlag"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixPreferredLifetime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixValidLifetime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdvPrefixRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetInstAggrTblLastChged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrSummaryOnly"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrASSet"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrAggregatorAS"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrAggregatorIPAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetAggrOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetSvcIpRangeRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetSvcIpRangeExclusive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIpV5v0Group = tmnxVRtrIpV5v0Group.setStatus('current')
tmnxVRtrV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 27)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrName"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBgpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMplsStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRipStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRsvpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrEcmpMaxRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAS"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrNewIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrLdpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIsIsStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRouterId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTriggeredPolicy"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrConfederationAS"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRouteDistinguisher"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMidRouteThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrHighRouteThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIllegalLabelThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVpnId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDescription"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrGracefulRestart"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrGracefulRestartType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrCustId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIgmpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxNumRoutesLogOnly"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVrfTarget"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVrfExportTarget"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVrfImportTarget"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrPimStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxMcastNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxMcastNumRoutesLogOnly"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMcastMidRouteThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIgnoreIcmpRedirect"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMsdpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVprnType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSecondaryVrfId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMldStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDirectRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDirectActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOSPFRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOSPFActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBGPRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBGPActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrISISRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrISISActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRIPRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRIPActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregateRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregateActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatConfiguredIfs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveIfs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatIllegalLabels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatCurrNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatBGPVpnRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatBGPVpnActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalLdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalSdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveLdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveSdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMulticastRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSubMgmtRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSubMgmtActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalRsvpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveRsvpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatTotalRsvpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatActiveRsvpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6DropStatLastCleared"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6DropStatPktsDropped"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6MsgStatsLstClrd"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6MsgStatsRcvd"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6MsgStatsSent"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6MsgStatsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrV5v0Group = tmnxVRtrV5v0Group.setStatus('obsolete')
tmnxVRtrNotificationV5v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 28)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMidRouteTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrHighRouteTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrHighRouteCleared"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIllegalLabelTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMcastMidRouteTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMcastMaxRoutesTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMcastMaxRoutesCleared"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMaxArpEntriesTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMaxArpEntriesCleared"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMaxRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCPSuspiciousPcktRcvd"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdSessionDown"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdMaxSessionOnSlot"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdPortTypeNotSupported"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCPIfLseStatesExceeded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6RelayLseStExceeded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6ServerLseStExceeded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6LseStateOverride"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6RelayReplyStripUni"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6IllegalClientAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6AssignedIllegSubnet"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6ClientMacUnresolved"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdSessionUp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrNotificationV5v0Group = tmnxVRtrNotificationV5v0Group.setStatus('obsolete')
tmnxVRtrObsoleteV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 29)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOspfStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOspfv3Status"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfChannelID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrObsoleteV5v0Group = tmnxVRtrObsoleteV5v0Group.setStatus('current')
tmnxVRtrNotificationObjV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 30)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpPacketProblem"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBfdSlotNumber"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrNumberOfBfdSessionsOnSlot"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBfdMaxSessionReason"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ServerNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ServerNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ClientNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ClientNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedPrefixLen"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6OldAssignedNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6OldAssignedNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6OldAssignedPrefixLen"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6NewClientId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6OldClientId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6LeaseOverrideResult"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrNotificationObjV5v0Group = tmnxVRtrNotificationObjV5v0Group.setStatus('obsolete')
tmnxVRtrIfDhcpServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 31)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfLocalDhcpServerName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIfDhcpServerGroup = tmnxVRtrIfDhcpServerGroup.setStatus('current')
tmnxVRtrV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 32)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRowStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrName"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBgpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMplsStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRipStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRsvpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrEcmpMaxRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAS"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrNewIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrLdpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIsIsStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRouterId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrTriggeredPolicy"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrConfederationAS"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRouteDistinguisher"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMidRouteThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrHighRouteThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIllegalLabelThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVpnId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDescription"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrGracefulRestart"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrGracefulRestartType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrServiceId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrCustId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIgmpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxNumRoutesLogOnly"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVrfTarget"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVrfExportTarget"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVrfImportTarget"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrPimStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxMcastNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxMcastNumRoutesLogOnly"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMcastMidRouteThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIgnoreIcmpRedirect"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMsdpStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrVprnType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSecondaryVrfId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMldStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIPv6MaxNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIPv6MidRouteThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIPv6HighRouteThreshold"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIPv6MaxNumRoutesLogOnly"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIPv6IgnoreIcmpRedirect"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMcPathMgmtPlcyName"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrImportPolicy5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrExportPolicy5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDirectRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDirectActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStaticActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOSPFRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrOSPFActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBGPRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBGPActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrISISRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrISISActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRIPRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRIPActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregateRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrAggregateActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatConfiguredIfs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveIfs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatIllegalLabels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatCurrNumRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatBGPVpnRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatBGPVpnActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalLdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalSdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveLdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveSdpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMulticastRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSubMgmtRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrSubMgmtActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatTotalRsvpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatActiveRsvpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatTotalRsvpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6StatActiveRsvpTunnels"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrHostRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrHostActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6HostRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrV6HostActiveRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatLocalARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatStaticARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatDynamicARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatManagedARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrStatInternalARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6DropStatLastCleared"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6DropStatPktsDropped"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6MsgStatsLstClrd"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6MsgStatsRcvd"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6MsgStatsSent"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6MsgStatsDropped"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrManagedRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrManagedActiveRoutes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrV6v0Group = tmnxVRtrV6v0Group.setStatus('current')
tmnxVRtrStaticRteCPEChkV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 33)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteCpeAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteCpeAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteCpeInterval"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteCpeDropCnt"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteCpeEnableLog"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStatRteCpeChkUpTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStatRteCpeChkInPktCnt"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStatRteCpeChkOutPktCnt"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStatRteCpeChkUpTrans"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStatRteCpeChkDownTrans"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStatRteCpeChkTTL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrStaticRteCPEChkV6v0Group = tmnxVRtrStaticRteCPEChkV6v0Group.setStatus('current')
tmnxVRtrIfIpcpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 34)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIpcpPeerAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIpcpPeerAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIpcpPriDnsAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIpcpPriDnsAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIpcpSecDnsAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIpcpSecDnsAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIfIpcpV6v0Group = tmnxVRtrIfIpcpV6v0Group.setStatus('current')
tmnxVRtrIfCpmProtectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 35)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfCpmProtPolicyId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfCpmProtUncfgdProtoDropCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIfCpmProtectGroup = tmnxVRtrIfCpmProtectGroup.setStatus('current')
tmnxDscpAppV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 36)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDscpAppLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDscpAppDscpValue"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDscpFCLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDscpFCValue"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDscpAppTableLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDscpFCTableLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDot1pAppTableLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDot1pAppLastChanged"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxDot1pAppValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxDscpAppV6v0Group = tmnxDscpAppV6v0Group.setStatus('current')
tmnxVRtrIfDHCPRelayGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 37)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayInfoAction"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayCircuitId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRemoteId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer1"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer2"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer3"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer4"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer5"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer6"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer7"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServer8"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayTrusted"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPDescription"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRxPkts"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayTxPkts"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRxMalformedPkts"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRxUntrustedPkts"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsDiscarded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsRelayed"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServerPktsDiscarded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServerPktsRelayed"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsSnooped"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayServerPktsSnooped"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsProxRad"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayClientPktsProxLS"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayPktsGenRelease"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayPktsGenForceRenew"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPLeasePopulate"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPOperLeasePopulate"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPGiAddressType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPGiAddress"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPGiAddressAsSrc"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPMatchOption82"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPRelayRemoteIdStr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPProxyAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPProxyServerAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPProxyLeaseTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPProxyLTRadiusOverride"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPVendorIncludeOptions"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPVendorOptionString"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPLayer2Header"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPAntiSpoofMacAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfDHCPClientApplications"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfLdpSyncTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrIfDHCPRelayGroup = tmnxVRtrIfDHCPRelayGroup.setStatus('current')
tmnxVRtrGlobalV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 38)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrNextVRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrConfiguredVRtrs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrActiveVRtrs"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrRouteThresholdSoakTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrMaxARPEntries"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIPv6RouteThresholdSoakTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrGlobalV6v0Group = tmnxVRtrGlobalV6v0Group.setStatus('current')
tmnxVRtrNotificationObjV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 39)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrID"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfIndex"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDhcpPacketProblem"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBfdSlotNumber"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrNumberOfBfdSessionsOnSlot"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrBfdMaxSessionReason"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ServerNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ServerNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ClientNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6ClientNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6AssignedPrefixLen"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6OldAssignedNetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6OldAssignedNetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6OldAssignedPrefixLen"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6NewClientId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6OldClientId"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrDHCP6LeaseOverrideResult"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStatRteCpeNotifyAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStatRteCpeNotifyAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrInetStaticRouteCpeStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrManagedRouteInetAddrType"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrManagedRouteInetAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrManagedRoutePrefixLen"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrFailureDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrNotificationObjV6v0Group = tmnxVRtrNotificationObjV6v0Group.setStatus('current')
tmnxVRtrNotificationV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 40)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMidRouteTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrHighRouteTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrHighRouteCleared"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIllegalLabelTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMcastMidRouteTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMcastMaxRoutesTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMcastMaxRoutesCleared"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMaxArpEntriesTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMaxArpEntriesCleared"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrMaxRoutes"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCPSuspiciousPcktRcvd"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdSessionDown"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdMaxSessionOnSlot"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdPortTypeNotSupported"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCPIfLseStatesExceeded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6RelayLseStExceeded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6ServerLseStExceeded"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6LseStateOverride"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6RelayReplyStripUni"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6IllegalClientAddr"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6AssignedIllegSubnet"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrDHCP6ClientMacUnresolved"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdSessionUp"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIPv6MidRouteTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIPv6HighRouteTCA"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrIPv6HighRouteCleared"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrStaticRouteCPEStatus"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdSessionDeleted"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrBfdSessionProtChange"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "tmnxVRtrManagedRouteAddFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrNotificationV6v0Group = tmnxVRtrNotificationV6v0Group.setStatus('current')
tmnxVRtrBfdV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 3, 2, 41)).setObjects(("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdAdminState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdTransmitInterval"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdReceiveInterval"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdMultiplier"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionOperState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionState"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionOperFlags"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionMesgRecv"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionMesgSent"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionLastDownTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionLastUpTime"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionUpCount"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionDownCount"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionLclDisc"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionRemDisc"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionProtocols"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionTxInterval"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionRxInterval"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdEchoInterval"), ("ALCATEL-IND1-TIMETRA-VRTR-MIB", "vRtrIfBfdSessionType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxVRtrBfdV6v0Group = tmnxVRtrBfdV6v0Group.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-VRTR-MIB", vRtrRipStatus=vRtrRipStatus, tmnxVRtrMaxArpEntriesCleared=tmnxVRtrMaxArpEntriesCleared, vRtrIfIpcpEntry=vRtrIfIpcpEntry, vRtrV6BGPActiveRoutes=vRtrV6BGPActiveRoutes, vRtrIfDHCPRelayClientPktsProxRad=vRtrIfDHCPRelayClientPktsProxRad, vRtrIpNetToMediaEntry=vRtrIpNetToMediaEntry, vRtrIfDHCPRelayRxUntrustedPkts=vRtrIfDHCPRelayRxUntrustedPkts, vRtrStatTotalRsvpTunnels=vRtrStatTotalRsvpTunnels, tmnxVRtrBfdMaxSessionOnSlot=tmnxVRtrBfdMaxSessionOnSlot, vRtrIfBfdSessionEntry=vRtrIfBfdSessionEntry, tmnxVRtrDHCP6RelayLseStExceeded=tmnxVRtrDHCP6RelayLseStExceeded, vRtrIPv6RouteThresholdSoakTime=vRtrIPv6RouteThresholdSoakTime, vRtrV6StatBGPVpnRoutes=vRtrV6StatBGPVpnRoutes, vRtrStatEntry=vRtrStatEntry, tmnxVRtrIpV5v0Group=tmnxVRtrIpV5v0Group, vRtrName=vRtrName, vRtrIfIcmp6InParmProblems=vRtrIfIcmp6InParmProblems, vRtrVrfImportTarget=vRtrVrfImportTarget, vRtrIfIcmpV6NumParamProblem=vRtrIfIcmpV6NumParamProblem, vRtrIfProxyArpTable=vRtrIfProxyArpTable, vRtrInetStaticRouteMetric=vRtrInetStaticRouteMetric, vRtrIfProxyArpLocal=vRtrIfProxyArpLocal, vRtrIfDHCPRelayClientPktsRelayed=vRtrIfDHCPRelayClientPktsRelayed, vRtrOspfStatus=vRtrOspfStatus, vRtrIfDHCPProxyAdminState=vRtrIfDHCPProxyAdminState, vRtrAggregationRowStatus=vRtrAggregationRowStatus, vRtrIsIsStatus=vRtrIsIsStatus, vRtrTunnelType=vRtrTunnelType, vRtrIfIpcpTable=vRtrIfIpcpTable, vRtrIfDHCPRelayAuthPktsSuccess=vRtrIfDHCPRelayAuthPktsSuccess, vRtrIfIcmp6InAdminProhibs=vRtrIfIcmp6InAdminProhibs, tmnxVRtrNotifyPrefix=tmnxVRtrNotifyPrefix, vRtrInetStaticRouteEgressIfIndex=vRtrInetStaticRouteEgressIfIndex, vRtrMcastMidRouteThreshold=vRtrMcastMidRouteThreshold, vRtrInetStaticRouteIgpShortcut=vRtrInetStaticRouteIgpShortcut, vRtrIfIcmp6InNbrAdvertisements=vRtrIfIcmp6InNbrAdvertisements, vRtrIfDHCP6SourceAddress=vRtrIfDHCP6SourceAddress, vRtrIfIcmp6OutEchos=vRtrIfIcmp6OutEchos, vRtrIfIpcpPeerAddr=vRtrIfIpcpPeerAddr, vRtrStaticActiveRoutes=vRtrStaticActiveRoutes, tmnxDscpAppLastChanged=tmnxDscpAppLastChanged, vRtrIcmp6OutTimeExcds=vRtrIcmp6OutTimeExcds, vRtrRouterId=vRtrRouterId, PYSNMP_MODULE_ID=timetraVRtrMIBModule, vRtrIPv6MidRouteThreshold=vRtrIPv6MidRouteThreshold, vRtrIfIcmpTtlExpired=vRtrIfIcmpTtlExpired, vRtrInetStatRteCpeChkStatsTable=vRtrInetStatRteCpeChkStatsTable, vRtrIfDHCPRelayServerPktsDiscarded=vRtrIfDHCPRelayServerPktsDiscarded, vRtrBGPActiveRoutes=vRtrBGPActiveRoutes, vRiaNetMask=vRiaNetMask, vRtrIfProxyArpPolicy2=vRtrIfProxyArpPolicy2, vRtrIfProxyArpPolicy1=vRtrIfProxyArpPolicy1, vRtrIfProxyNDPolicy1=vRtrIfProxyNDPolicy1, vRtrIgnoreIcmpRedirect=vRtrIgnoreIcmpRedirect, vRtrInetAggrAggregatorAS=vRtrInetAggrAggregatorAS, vRtrIfIpcpSecDnsAddr=vRtrIfIpcpSecDnsAddr, vRtrAggregationSummaryOnly=vRtrAggregationSummaryOnly, vRtrIllegalLabelThreshold=vRtrIllegalLabelThreshold, vRtrIfIcmpV6ParamProblem=vRtrIfIcmpV6ParamProblem, vRtrStatInternalARPEntries=vRtrStatInternalARPEntries, tmnxVRtrMcastMaxRoutesCleared=tmnxVRtrMcastMaxRoutesCleared, vRtrImportPolicy1=vRtrImportPolicy1, vRtrIfProxyNDEntry=vRtrIfProxyNDEntry, vRtrDHCP6MsgStatTable=vRtrDHCP6MsgStatTable, tmnxVRtrNotificationV4v0Group=tmnxVRtrNotificationV4v0Group, vRiaInetAddressType=vRiaInetAddressType, vRtrIfDHCPLayer2Header=vRtrIfDHCPLayer2Header, vRtrImportPolicy3=vRtrImportPolicy3, vRtrIfEgressFilterId=vRtrIfEgressFilterId, vRtrIfIcmpV6NumTimeExceeded=vRtrIfIcmpV6NumTimeExceeded, vRtrIfBfdSessionMesgSent=vRtrIfBfdSessionMesgSent, tmnxDscpAppEntry=tmnxDscpAppEntry, vRtrConfTable=vRtrConfTable, vRtrIfUnnumbered=vRtrIfUnnumbered, vRtrDHCP6ClientNetAddrType=vRtrDHCP6ClientNetAddrType, vRtrMcPathMgmtPlcyName=vRtrMcPathMgmtPlcyName, vRtrDHCP6NewClientId=vRtrDHCP6NewClientId, vRtrIfDHCPAutoFilterId=vRtrIfDHCPAutoFilterId, tmnxVRtrNotificationObjV6v0Group=tmnxVRtrNotificationObjV6v0Group, vRtrIfBfdAdminState=vRtrIfBfdAdminState, vRtrV6DirectActiveRoutes=vRtrV6DirectActiveRoutes, vRtrAggregationOperState=vRtrAggregationOperState, vRtrIfCflowd=vRtrIfCflowd, vRtrIfDHCPRelayClientPktsSnooped=vRtrIfDHCPRelayClientPktsSnooped, vRtrIfBfdSessionUpCount=vRtrIfBfdSessionUpCount, vRtrPimStatus=vRtrPimStatus, vRtrIfProxyNDPolicy3=vRtrIfProxyNDPolicy3, vRtrIfDHCPTable=vRtrIfDHCPTable, vRtrIfIcmpV6UnreachablesTime=vRtrIfIcmpV6UnreachablesTime, vRtrIfDelaySeconds=vRtrIfDelaySeconds, vRtrIfDHCPVendorOptionString=vRtrIfDHCPVendorOptionString, vRtrTunnelPreference=vRtrTunnelPreference, vRtrIfBfdSessionLclAddrType=vRtrIfBfdSessionLclAddrType, vRtrHighRouteThreshold=vRtrHighRouteThreshold, vRtrAggregateRoutes=vRtrAggregateRoutes, vRtrIfNtpBroadcast=vRtrIfNtpBroadcast, vRtrDHCP6MsgStatsMsgType=vRtrDHCP6MsgStatsMsgType, tmnxVRtr7450V5v0Compliance=tmnxVRtr7450V5v0Compliance, vRtrIfMtu=vRtrIfMtu, vRtrIfVPNClass=vRtrIfVPNClass, vRtrDHCP6DropStatReason=vRtrDHCP6DropStatReason, vRtrAdvPrefixIfIndex=vRtrAdvPrefixIfIndex, tmnxDot1pAppId=tmnxDot1pAppId, vRtrIfIcmp6InRtrSolicits=vRtrIfIcmp6InRtrSolicits, tmnxVRtrGlobalV6v0Group=tmnxVRtrGlobalV6v0Group, vRiaIpAddress=vRiaIpAddress, vRtrIfDHCP6Entry=vRtrIfDHCP6Entry, vRtrIfDHCPLeaseStateEntry=vRtrIfDHCPLeaseStateEntry, vRtrInetStatRteCpeNotifyAddr=vRtrInetStatRteCpeNotifyAddr, vRtrCustId=vRtrCustId, vRtrV6StatCurrNumRoutes=vRtrV6StatCurrNumRoutes, vRtrAutoFilterDHCPClientLease=vRtrAutoFilterDHCPClientLease, vRtrMaxARPEntries=vRtrMaxARPEntries, vRtrIfIcmpV6PktTooBigTime=vRtrIfIcmpV6PktTooBigTime, vRtrDhcpLseStateNewChAddr=vRtrDhcpLseStateNewChAddr, vRtrIfBfdTable=vRtrIfBfdTable, vRtrMplsStatus=vRtrMplsStatus, vRtrV6StatTotalLdpTunnels=vRtrV6StatTotalLdpTunnels, vRtrIfBfdEntry=vRtrIfBfdEntry, vRtrDHCP6AssignedNetAddr=vRtrDHCP6AssignedNetAddr, tmnxDot1pAppTableLastChanged=tmnxDot1pAppTableLastChanged, vRtrIfIndex=vRtrIfIndex, tmnxVRtrIPv6HighRouteTCA=tmnxVRtrIPv6HighRouteTCA, vRtrBfdMaxSessionReason=vRtrBfdMaxSessionReason, vRtrIfDirectedBroadcast=vRtrIfDirectedBroadcast, vRtrIcmp6OutGrpMembQueries=vRtrIcmp6OutGrpMembQueries, vRtrStaticRouteDisallowIgp=vRtrStaticRouteDisallowIgp, vRtrIcmp6OutEchoReplies=vRtrIcmp6OutEchoReplies, vRtrIfIngressFilterId=vRtrIfIngressFilterId, vRtrV6StatBGPVpnActiveRoutes=vRtrV6StatBGPVpnActiveRoutes, vRtrIfIcmpMaskReply=vRtrIfIcmpMaskReply, vRtrIfDHCPRelayServer1=vRtrIfDHCPRelayServer1, vRtrIcmp6InDestUnreachs=vRtrIcmp6InDestUnreachs, vRtrIfDHCPRelayPktsGenRelease=vRtrIfDHCPRelayPktsGenRelease, vRtrIfIcmpV6Unreachables=vRtrIfIcmpV6Unreachables, vRtrIfIcmp6OutErrors=vRtrIfIcmp6OutErrors, vRtrIfDHCP6RelayServer8=vRtrIfDHCP6RelayServer8, vRtrInetStaticRoutePreference=vRtrInetStaticRoutePreference, vRtrStatTotalARPEntries=vRtrStatTotalARPEntries, vRtrIfDHCPAdminState=vRtrIfDHCPAdminState, vRtrIfDHCP6PfxdPrefix=vRtrIfDHCP6PfxdPrefix, vRtrBGPRoutes=vRtrBGPRoutes, vRtrSubMgmtActiveRoutes=vRtrSubMgmtActiveRoutes, vRtrIfNameTable=vRtrIfNameTable, vRtrRIPRoutes=vRtrRIPRoutes, vRtrPolicyTable=vRtrPolicyTable, vRtrIfDHCPRelayServer6=vRtrIfDHCPRelayServer6, vRtrInetStaticRouteEntry=vRtrInetStaticRouteEntry, vRtrManagedActiveRoutes=vRtrManagedActiveRoutes, tmnxDscpAppV6v0Group=tmnxDscpAppV6v0Group, vRtrIcmp6OutMsgs=vRtrIcmp6OutMsgs, vRiaIgpInhibit=vRiaIgpInhibit, vRtrV6StatActiveIfs=vRtrV6StatActiveIfs, vRtrIfDHCP6LeasePopulate=vRtrIfDHCP6LeasePopulate, TmnxVPNId=TmnxVPNId, vRtrIfDHCP6OperState=vRtrIfDHCP6OperState, vRtrIcmp6InRedirects=vRtrIcmp6InRedirects, vRtrIfIcmpV6NumPktTooBig=vRtrIfIcmpV6NumPktTooBig, tmnxVRtrObsoleteNotificationGroup=tmnxVRtrObsoleteNotificationGroup, vRtrIfChannelID=vRtrIfChannelID, vRtrIfIcmp6OutTimeExcds=vRtrIfIcmp6OutTimeExcds, vRtrIfDHCPRelayClientPktsProxLS=vRtrIfDHCPRelayClientPktsProxLS, tmnxVRtrDHCPAFEntriesExceeded=tmnxVRtrDHCPAFEntriesExceeded, vRtrIfBfdSessionMesgRecv=vRtrIfBfdSessionMesgRecv, vRtrInetStatRteCpeChkInPktCnt=vRtrInetStatRteCpeChkInPktCnt, vRtrIcmp6InParmProblems=vRtrIcmp6InParmProblems, vRtrIfBfdSessionType=vRtrIfBfdSessionType, tmnxDscpAppDscpValue=tmnxDscpAppDscpValue, vRtrIfLinkLocalAddress=vRtrIfLinkLocalAddress, vRtrIfDHCPLeasePopulate=vRtrIfDHCPLeasePopulate, tmnxVRtrObsoletedObjectsV4v0Group=tmnxVRtrObsoletedObjectsV4v0Group, vRtrIfDHCP6PfxdLastChanged=vRtrIfDHCP6PfxdLastChanged, vRtrDHCP6OldAssignedNetAddrType=vRtrDHCP6OldAssignedNetAddrType, vRtrIfIpcpPriDnsAddrType=vRtrIfIpcpPriDnsAddrType, vRtrIfDHCPLseStatePersistKey=vRtrIfDHCPLseStatePersistKey, tmnxVRtrHighRouteCleared=tmnxVRtrHighRouteCleared, vRtrIfDHCPDescription=vRtrIfDHCPDescription, vRtrIfIcmp6OutRedirects=vRtrIfIcmp6OutRedirects, tmnxVRtrBfdSessionDeleted=tmnxVRtrBfdSessionDeleted, tmnxDscpAppId=tmnxDscpAppId, vRtrIfDHCPRelayStatsEntry=vRtrIfDHCPRelayStatsEntry, vRiaInetRemoteIpType=vRiaInetRemoteIpType, vRtrStaticRouteDest=vRtrStaticRouteDest, tmnxVRtrNotificationV5v0Group=tmnxVRtrNotificationV5v0Group, vRtrIfGlobalIndexvRtrIfIndex=vRtrIfGlobalIndexvRtrIfIndex, vRtrInetStaticRouteLastEnabledTime=vRtrInetStaticRouteLastEnabledTime, vRtrIfDHCPOperLeasePopulate=vRtrIfDHCPOperLeasePopulate, vRtrIfDHCP6RelayServer6=vRtrIfDHCP6RelayServer6, vRtrIgmpStatus=vRtrIgmpStatus, vRtrIPv6IgnoreIcmpRedirect=vRtrIPv6IgnoreIcmpRedirect, vRtrInetSvcIpRangeTable=vRtrInetSvcIpRangeTable, vRtrIfDHCPRelayRemoteId=vRtrIfDHCPRelayRemoteId, vRtrIfDHCPRelayAuthPktsDiscarded=vRtrIfDHCPRelayAuthPktsDiscarded, vRtrDHCP6DropStatTable=vRtrDHCP6DropStatTable, vRtrBgpStatus=vRtrBgpStatus, vRtrAdvPrefixEntry=vRtrAdvPrefixEntry, vRtrIfDHCP6CurrServerLeaseStates=vRtrIfDHCP6CurrServerLeaseStates, vRtrV6StaticActiveRoutes=vRtrV6StaticActiveRoutes, vRtrDHCP6MsgStatsSent=vRtrDHCP6MsgStatsSent, vRtrIcmp6OutGrpMembReductions=vRtrIcmp6OutGrpMembReductions, vRtrTunnelMetric=vRtrTunnelMetric, vRtrStaticRouteTag=vRtrStaticRouteTag, vRtrBfdSlotNumber=vRtrBfdSlotNumber, vRtrV6RIPActiveRoutes=vRtrV6RIPActiveRoutes, vRtrIfIcmpV6NumUnreachables=vRtrIfIcmpV6NumUnreachables, tmnxDot1pAppEntry=tmnxDot1pAppEntry, vRtrDHCP6DropStatPktsDropped=vRtrDHCP6DropStatPktsDropped, vRtrActiveVRtrs=vRtrActiveVRtrs, vRtrV6RIPRoutes=vRtrV6RIPRoutes, vRtrIfIcmp6OutParmProblems=vRtrIfIcmp6OutParmProblems, vRtrAdvPrefixValidLifetime=vRtrAdvPrefixValidLifetime, vRtrDhcpRestoreLseStateVRtrId=vRtrDhcpRestoreLseStateVRtrId, tmnxVRtr7750V4v0Compliance=tmnxVRtr7750V4v0Compliance, tmnxVRtrMidRouteTCA=tmnxVRtrMidRouteTCA, tmnxVRtrMaxArpEntriesTCA=tmnxVRtrMaxArpEntriesTCA, vRtrManagedRoutes=vRtrManagedRoutes, tmnxVRtrV4v0Group=tmnxVRtrV4v0Group, vRtrIfNameIndex=vRtrIfNameIndex, tmnxVRtrGlobalR2r1Group=tmnxVRtrGlobalR2r1Group, vRtrVrfExportTarget=vRtrVrfExportTarget, vRtrIcmp6InGrpMembResponses=vRtrIcmp6InGrpMembResponses, tmnxVRtrIfIpcpV6v0Group=tmnxVRtrIfIpcpV6v0Group, vRtrAggregationAggregatorIPAddr=vRtrAggregationAggregatorIPAddr, vRtrIfDHCPRelayRxMalformedPkts=vRtrIfDHCPRelayRxMalformedPkts, vRtrIcmp6InPktTooBigs=vRtrIcmp6InPktTooBigs, vRtrIfIcmp6OutPktTooBigs=vRtrIfIcmp6OutPktTooBigs, vRtrExportPolicy4=vRtrExportPolicy4, vRtrIfAlias=vRtrIfAlias, vRtrIfDHCPRelayStatsTable=vRtrIfDHCPRelayStatsTable, vRtrAdvPrefixAutonomousFlag=vRtrAdvPrefixAutonomousFlag, vRtrDhcpLseStateOldChAddr=vRtrDhcpLseStateOldChAddr, vRtrIfLinkLocalAddressType=vRtrIfLinkLocalAddressType, tmnxDot1pAppValue=tmnxDot1pAppValue, vRtrStatTotalSdpTunnels=vRtrStatTotalSdpTunnels, vRtrIfDHCPRelayServer8=vRtrIfDHCPRelayServer8, vRtrIfDHCPGiAddress=vRtrIfDHCPGiAddress, tmnxVRtrV6v0Group=tmnxVRtrV6v0Group, vRtrLdpStatus=vRtrLdpStatus, vRtrExportPolicy2=vRtrExportPolicy2, vRtrIfIcmpV6TimeExceeded=vRtrIfIcmpV6TimeExceeded, vRtrTunnelAge=vRtrTunnelAge, vRtrInetStaticRouteCpeInterval=vRtrInetStaticRouteCpeInterval, vRtrIfDHCPRelayCircuitId=vRtrIfDHCPRelayCircuitId, tmnxVRtr7450V6v0Compliance=tmnxVRtr7450V6v0Compliance, vRtrV6ISISActiveRoutes=vRtrV6ISISActiveRoutes, vRtrIfDHCP6PfxDelegationTable=vRtrIfDHCP6PfxDelegationTable, vRtrInetStaticRouteDestType=vRtrInetStaticRouteDestType, vRtrInetStaticRouteEnableBfd=vRtrInetStaticRouteEnableBfd, tmnxVRtrIPv6MidRouteTCA=tmnxVRtrIPv6MidRouteTCA, tmnxVRtrIfDhcpServerGroup=tmnxVRtrIfDhcpServerGroup, vRtrIfOperState=vRtrIfOperState, vRtrInetAggrIpPrefixLen=vRtrInetAggrIpPrefixLen, vRtrIfIcmp6InGrpMembResponses=vRtrIfIcmp6InGrpMembResponses, tmnxDscpFCTable=tmnxDscpFCTable)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-VRTR-MIB", vRtrIcmp6OutGrpMembResponses=vRtrIcmp6OutGrpMembResponses, vRtrIfDHCPRelayServer2=vRtrIfDHCPRelayServer2, vRtrV6StatActiveNbrEntries=vRtrV6StatActiveNbrEntries, vRtrIfCpmProtPolicyId=vRtrIfCpmProtPolicyId, vRtrIcmp6Entry=vRtrIcmp6Entry, vRtrInetAggrAggregatorIPAddr=vRtrInetAggrAggregatorIPAddr, vRtrImportPolicy4=vRtrImportPolicy4, vRtrInetAggrIpPrefixType=vRtrInetAggrIpPrefixType, vRtrSvcIpRangeAddress=vRtrSvcIpRangeAddress, tmnxVRtrDHCP6LseStateOverride=tmnxVRtrDHCP6LseStateOverride, vRtrIcmp6OutNbrAdvertisements=vRtrIcmp6OutNbrAdvertisements, vRtrDhcpRestoreLseStateIfIndex=vRtrDhcpRestoreLseStateIfIndex, vRtrInetSvcIpRangeAddr=vRtrInetSvcIpRangeAddr, vRtrIPv6MaxNumRoutesLogOnly=vRtrIPv6MaxNumRoutesLogOnly, vRtrV6StatActiveRsvpTunnels=vRtrV6StatActiveRsvpTunnels, vRtrV6StatActiveLdpTunnels=vRtrV6StatActiveLdpTunnels, vRtrStaticRouteMask=vRtrStaticRouteMask, vRtrPolicyEntry=vRtrPolicyEntry, tmnxVRtrDHCP6IllegalClientAddr=tmnxVRtrDHCP6IllegalClientAddr, tmnxVRtrHighRouteTCA=tmnxVRtrHighRouteTCA, vRtrDHCP6ServerNetAddrType=vRtrDHCP6ServerNetAddrType, vRtrIfIcmpV6NumRedirects=vRtrIfIcmpV6NumRedirects, vRtrRsvpStatus=vRtrRsvpStatus, vRiaBcastAddrFormat=vRiaBcastAddrFormat, vRtrInetInstAggrTblLastChged=vRtrInetInstAggrTblLastChged, vRtrInetSvcIpRangeExclusive=vRtrInetSvcIpRangeExclusive, vRtrIfIcmp6InEchoReplies=vRtrIfIcmp6InEchoReplies, tmnxDscpFCLastChanged=tmnxDscpFCLastChanged, vRtrIfIcmpNumRedirects=vRtrIfIcmpNumRedirects, vRtrIfDHCPRelayTrusted=vRtrIfDHCPRelayTrusted, vRtrV6DirectRoutes=vRtrV6DirectRoutes, vRtrOSPFRoutes=vRtrOSPFRoutes, vRtrStatConfiguredIfs=vRtrStatConfiguredIfs, vRtrDHCP6OldAssignedNetAddr=vRtrDHCP6OldAssignedNetAddr, vRiaReasmMaxSize=vRiaReasmMaxSize, vRtrNewIfIndex=vRtrNewIfIndex, vRtrSvcIpRangeExclusive=vRtrSvcIpRangeExclusive, vRtrIcmp6OutEchos=vRtrIcmp6OutEchos, vRtrDHCP6MsgStatsRcvd=vRtrDHCP6MsgStatsRcvd, vRtrStatManagedARPEntries=vRtrStatManagedARPEntries, vRtrIfIcmpUnreachables=vRtrIfIcmpUnreachables, vRtrVprnType=vRtrVprnType, vRtrV6OSPFRoutes=vRtrV6OSPFRoutes, vRtrIfDHCPRelayPktsGenForceRenew=vRtrIfDHCPRelayPktsGenForceRenew, vRtrTunnelDest=vRtrTunnelDest, vRtrIfIcmp6OutGrpMembResponses=vRtrIfIcmp6OutGrpMembResponses, vRtrIfDHCPRelayServer3=vRtrIfDHCPRelayServer3, vRtrIfIcmp6InRtrAdvertisements=vRtrIfIcmp6InRtrAdvertisements, vRtrV6HostRoutes=vRtrV6HostRoutes, vRtrAdvPrefixRowStatus=vRtrAdvPrefixRowStatus, vRtrID=vRtrID, vRiaInetAddrState=vRiaInetAddrState, vRtrAggregationIpPrefix=vRtrAggregationIpPrefix, vRtrSvcIpRangeRowStatus=vRtrSvcIpRangeRowStatus, vRtrIpCidrRouteMetric=vRtrIpCidrRouteMetric, vRtrInetAggrIpPrefix=vRtrInetAggrIpPrefix, vRtrIfDHCPAntiSpoofMacAddr=vRtrIfDHCPAntiSpoofMacAddr, vRtrInetStaticRouteRowStatus=vRtrInetStaticRouteRowStatus, vRtrIfDHCP6RelayServer3=vRtrIfDHCP6RelayServer3, vRtrV6HostActiveRoutes=vRtrV6HostActiveRoutes, vRtrIfEncapValue=vRtrIfEncapValue, vRtrStaticRouteIndexMask=vRtrStaticRouteIndexMask, tmnxVRtrStaticRouteCPEStatus=tmnxVRtrStaticRouteCPEStatus, vRtrDHCP6MsgStatsDropped=vRtrDHCP6MsgStatsDropped, vRtrIfDHCP6EnableNgbrResolution=vRtrIfDHCP6EnableNgbrResolution, vRtrIfDHCP6PfxdRowStatus=vRtrIfDHCP6PfxdRowStatus, vRtrNextVRtrID=vRtrNextVRtrID, vRtrIfDHCPLseStateRemainLseTime=vRtrIfDHCPLseStateRemainLseTime, tmnxVRtrBfdV4v0Group=tmnxVRtrBfdV4v0Group, vRtrISISRoutes=vRtrISISRoutes, vRtrIfIcmp6OutRtrAdvertisements=vRtrIfIcmp6OutRtrAdvertisements, vRtrIfDHCPProxyServerAddr=vRtrIfDHCPProxyServerAddr, tmnxVRtrIfCpmProtectGroup=tmnxVRtrIfCpmProtectGroup, vRtrIfDHCP6RemoteIdOption=vRtrIfDHCP6RemoteIdOption, vRtrIfName=vRtrIfName, tmnxVRtrIfV4v0Group=tmnxVRtrIfV4v0Group, vRtrIfIPv6IngressFilterId=vRtrIfIPv6IngressFilterId, vRtrIfArpPopulate=vRtrIfArpPopulate, vRtrIfDHCP6RelayServer2=vRtrIfDHCP6RelayServer2, vRtrIfDHCPVendorIncludeOptions=vRtrIfDHCPVendorIncludeOptions, vRtrIfDHCPAuthPolicy=vRtrIfDHCPAuthPolicy, tmnxVRtrDHCP6AssignedIllegSubnet=tmnxVRtrDHCP6AssignedIllegSubnet, vRtrDirectRoutes=vRtrDirectRoutes, vRtrInstanceAggregationTableLastChanged=vRtrInstanceAggregationTableLastChanged, vRtrStatStaticARPEntries=vRtrStatStaticARPEntries, vRtrIfType=vRtrIfType, vRtrIfDHCPAutoFilter=vRtrIfDHCPAutoFilter, vRtrAdvPrefixPreferredLifetime=vRtrAdvPrefixPreferredLifetime, vRtrIcmp6InTimeExcds=vRtrIcmp6InTimeExcds, vRtrInetStatRteCpeChkTTL=vRtrInetStatRteCpeChkTTL, tmnxVRtrIfSubscrAuthV3v0Group=tmnxVRtrIfSubscrAuthV3v0Group, vRtrIfPortID=vRtrIfPortID, vRtrIfDHCP6PfxdDUID=vRtrIfDHCP6PfxdDUID, vRtrIfBfdSessionProtocols=vRtrIfBfdSessionProtocols, vRtrIfBfdSessionRemAddrType=vRtrIfBfdSessionRemAddrType, tmnxDscpFCValue=tmnxDscpFCValue, tmnxVRtrDHCPLeaseStateOverride=tmnxVRtrDHCPLeaseStateOverride, vRtrExportPolicy5=vRtrExportPolicy5, vRtrStatBGPVpnActiveRoutes=vRtrStatBGPVpnActiveRoutes, vRtrTunnelMask=vRtrTunnelMask, vRtrV6StatConfiguredIfs=vRtrV6StatConfiguredIfs, vRtrIfProxyArpPolicy4=vRtrIfProxyArpPolicy4, vRtrIfIpcpPriDnsAddr=vRtrIfIpcpPriDnsAddr, vRtrIpNetToMediaTable=vRtrIpNetToMediaTable, vRtrIfDHCP6Table=vRtrIfDHCP6Table, vRiaInetGwAddress=vRiaInetGwAddress, vRtrIfBfdSessionLclAddr=vRtrIfBfdSessionLclAddr, vRtrInetStaticRouteDisallowIgp=vRtrInetStaticRouteDisallowIgp, vRtrIfIPv6OperState=vRtrIfIPv6OperState, vRtrIfIPv6ConfigAllowed=vRtrIfIPv6ConfigAllowed, vRiaInetPrefixLen=vRiaInetPrefixLen, vRtrIfIcmpV6TimeExceededTime=vRtrIfIcmpV6TimeExceededTime, vRtrDHCP6DropStatLastCleared=vRtrDHCP6DropStatLastCleared, tmnxVRtrConformance=tmnxVRtrConformance, vRtrInetSvcIpRangePfxLen=vRtrInetSvcIpRangePfxLen, vRtrIfIcmp6OutRtrSolicitsTime=vRtrIfIcmp6OutRtrSolicitsTime, vRtrSecondaryVrfId=vRtrSecondaryVrfId, vRtrAggregationLastChanged=vRtrAggregationLastChanged, vRtrDHCPClientLease=vRtrDHCPClientLease, tmnxVRtrBfdSessionDown=tmnxVRtrBfdSessionDown, vRtrIfDHCPMatchOption82=vRtrIfDHCPMatchOption82, vRtrIfBfdSessionDownCount=vRtrIfBfdSessionDownCount, vRtrIfDHCP6RelayServer4=vRtrIfDHCP6RelayServer4, vRtrIfDHCP6PfxDelegationEntry=vRtrIfDHCP6PfxDelegationEntry, vRtrIfDHCPEntry=vRtrIfDHCPEntry, vRtrIfIcmp6OutMsgs=vRtrIfIcmp6OutMsgs, vRtrIfGlobalIndexvRtrID=vRtrIfGlobalIndexvRtrID, vRtrRouteThresholdSoakTime=vRtrRouteThresholdSoakTime, timetraVRtrMIBModule=timetraVRtrMIBModule, vRtrDHCP6OldClientId=vRtrDHCP6OldClientId, vRtrV6StatIllegalLabels=vRtrV6StatIllegalLabels, vRtrSvcIpRangeEntry=vRtrSvcIpRangeEntry, tmnxVRtrNotificationObjects=tmnxVRtrNotificationObjects, tmnxVRtrCompliances=tmnxVRtrCompliances, vRtrIfServiceId=vRtrIfServiceId, vRtrIfIcmpRedirects=vRtrIfIcmpRedirects, vRtrType=vRtrType, vRtrIcmp6InErrors=vRtrIcmp6InErrors, vRtrIpCidrRouteLastEnabledTime=vRtrIpCidrRouteLastEnabledTime, vRtrGracefulRestart=vRtrGracefulRestart, vRtrStaticRouteIndexEntry=vRtrStaticRouteIndexEntry, vRtrIfIcmp6InMsgs=vRtrIfIcmp6InMsgs, vRtrInetInstAggrEntry=vRtrInetInstAggrEntry, vRtrIfDHCPRelayTxPkts=vRtrIfDHCPRelayTxPkts, vRtrIcmp6InNbrSolicits=vRtrIcmp6InNbrSolicits, vRtrIfQosPolicyId=vRtrIfQosPolicyId, vRtrIfDHCPRelayServerPktsSnooped=vRtrIfDHCPRelayServerPktsSnooped, vRtrIfDHCPRelayServerPktsRelayed=vRtrIfDHCPRelayServerPktsRelayed, vRtrRouteDistinguisher=vRtrRouteDistinguisher, vRtrIcmp6Table=vRtrIcmp6Table, vRtrIfIcmpTtlExpiredTime=vRtrIfIcmpTtlExpiredTime, vRtrAdvPrefixTable=vRtrAdvPrefixTable, vRtrIfBfdSessionTxInterval=vRtrIfBfdSessionTxInterval, vRtrHostRoutes=vRtrHostRoutes, vRtrIfDHCP6Description=vRtrIfDHCP6Description, vRtrConfEntry=vRtrConfEntry, tmnxDscpFCDscpValue=tmnxDscpFCDscpValue, vRtrIfBfdSessionRxInterval=vRtrIfBfdSessionRxInterval, vRtrOperState=vRtrOperState, vRtrIfDHCPProxyLTRadiusOverride=vRtrIfDHCPProxyLTRadiusOverride, vRiaRowStatus=vRiaRowStatus, vRtrIfIcmpV6RedirectsTime=vRtrIfIcmpV6RedirectsTime, tmnxVRtrDHCP6ServerLseStExceeded=tmnxVRtrDHCP6ServerLseStExceeded, vRtrIfIcmp6Entry=vRtrIfIcmp6Entry, vRtrIfIcmp6InPktTooBigs=vRtrIfIcmp6InPktTooBigs, vRtrStaticRouteStatus=vRtrStaticRouteStatus, tmnxVRtrV5v0Group=tmnxVRtrV5v0Group, vRtrInetStaticRouteCpeAddr=vRtrInetStaticRouteCpeAddr, vRtrIfIcmp6OutGrpMembQueries=vRtrIfIcmp6OutGrpMembQueries, vRtrIcmp6InNbrAdvertisements=vRtrIcmp6InNbrAdvertisements, vRtrV6StatTotalRsvpTunnels=vRtrV6StatTotalRsvpTunnels, vRtrDHCP6MsgStatEntry=vRtrDHCP6MsgStatEntry, vRtrInetStaticRouteIndexEntry=vRtrInetStaticRouteIndexEntry, tmnxVRtrDHCP6ClientMacUnresolved=tmnxVRtrDHCP6ClientMacUnresolved, vRtrStatLocalARPEntries=vRtrStatLocalARPEntries, vRtrStaticRouteNumber=vRtrStaticRouteNumber, vRtrIfProxyNDPolicy5=vRtrIfProxyNDPolicy5, tmnxDot1pAppTable=tmnxDot1pAppTable, tmnxVRtrIPv6IfV4v0Group=tmnxVRtrIPv6IfV4v0Group, vRtrIfGlobalIndexEntry=vRtrIfGlobalIndexEntry, vRtrInetAggrSummaryOnly=vRtrInetAggrSummaryOnly, vRtrIfBfdSessionState=vRtrIfBfdSessionState, vRtrIfBfdSessionLastUpTime=vRtrIfBfdSessionLastUpTime, vRtrInetStaticRouteCpeEnableLog=vRtrInetStaticRouteCpeEnableLog, vRtrDescription=vRtrDescription, TmnxInetAddrState=TmnxInetAddrState, vRtrIcmp6InRtrSolicits=vRtrIcmp6InRtrSolicits, vRtrStaticRouteIndexTable=vRtrStaticRouteIndexTable, vRtrIfProxyArpPolicy3=vRtrIfProxyArpPolicy3, tmnxDot1pAppLastChanged=tmnxDot1pAppLastChanged, vRtrIfDHCPRelayServer5=vRtrIfDHCPRelayServer5, vRtrIpCidrRoutePreference=vRtrIpCidrRoutePreference, vRtrVpnId=vRtrVpnId, tmnxVRtrNotificationV6v0Group=tmnxVRtrNotificationV6v0Group, vRtrIfIpcpPeerAddrType=vRtrIfIpcpPeerAddrType, vRtrIfDHCPRelayRxPkts=vRtrIfDHCPRelayRxPkts, vRtrIfDHCPRelayInfoOption=vRtrIfDHCPRelayInfoOption, vRtrIfDHCP6TableLastChanged=vRtrIfDHCP6TableLastChanged, vRtrIfIcmp6OutRtrAdvTime=vRtrIfIcmp6OutRtrAdvTime, vRtrAggregateActiveRoutes=vRtrAggregateActiveRoutes, tmnxVRtrBfdSessionProtChange=tmnxVRtrBfdSessionProtChange, tmnxDscpFCEntry=tmnxDscpFCEntry, vRtrIfDHCP6PfxdPrefixLen=vRtrIfDHCP6PfxdPrefixLen, vRtrStaticRoutes=vRtrStaticRoutes, vRtrVrfTarget=vRtrVrfTarget, vRtrIfDHCP6ItfIdString=vRtrIfDHCP6ItfIdString, vRtrInetStaticRouteTable=vRtrInetStaticRouteTable, vRtrIfDHCPRelayInfoAction=vRtrIfDHCPRelayInfoAction, vRtrStatActiveLdpTunnels=vRtrStatActiveLdpTunnels, vRtrIfLdpSyncTimer=vRtrIfLdpSyncTimer, vRtrIfBfdSessionOperFlags=vRtrIfBfdSessionOperFlags, vRtrEcmpMaxRoutes=vRtrEcmpMaxRoutes, vRtrIfArpTimeout=vRtrIfArpTimeout, vRtrTunnelEntry=vRtrTunnelEntry, vRtrAggregationAggregatorAS=vRtrAggregationAggregatorAS, vRtrIPv6MaxNumRoutes=vRtrIPv6MaxNumRoutes, vRtrIcmp6InAdminProhibs=vRtrIcmp6InAdminProhibs, vRtrIfTosMarkingTrusted=vRtrIfTosMarkingTrusted, vRtrIcmp6OutRtrAdvertisements=vRtrIcmp6OutRtrAdvertisements, vRtrIfGlobalIndexTable=vRtrIfGlobalIndexTable, vRtrIfIcmpRedirectsTime=vRtrIfIcmpRedirectsTime, vRtrInetStaticRouteCpeStatus=vRtrInetStaticRouteCpeStatus, vRtrIpAddrEntry=vRtrIpAddrEntry, vRiaInetEui64=vRiaInetEui64, vRtrTunnelTable=vRtrTunnelTable, vRtrIfProtocol=vRtrIfProtocol, vRtrStatDynamicARPEntries=vRtrStatDynamicARPEntries, vRtrIcmp6InGrpMembQueries=vRtrIcmp6InGrpMembQueries, vRtrIfIcmp6OutAdminProhibs=vRtrIfIcmp6OutAdminProhibs, tmnxVRtrObjs=tmnxVRtrObjs, vRtrImportPolicy2=vRtrImportPolicy2, vRtrInetAggrLastChanged=vRtrInetAggrLastChanged, vRtrStatActiveRsvpTunnels=vRtrStatActiveRsvpTunnels, vRtrIfEntry=vRtrIfEntry, vRtrV6BGPRoutes=vRtrV6BGPRoutes, vRtrIfIcmpV6Redirects=vRtrIfIcmpV6Redirects, vRtrIfIcmp6InErrors=vRtrIfIcmp6InErrors, vRtrIfDHCP6PfxdPrefLifetime=vRtrIfDHCP6PfxdPrefLifetime, vRtrIcmp6OutPktTooBigs=vRtrIcmp6OutPktTooBigs, vRtrIfIPv6EgressFilterId=vRtrIfIPv6EgressFilterId, vRtrInetAggrOperState=vRtrInetAggrOperState, tmnxVRtrIPv6HighRouteCleared=tmnxVRtrIPv6HighRouteCleared, vRtrIpCidrRouteEntry=vRtrIpCidrRouteEntry, vRiaInetOperAddress=vRiaInetOperAddress, vRtrStatCurrNumRoutes=vRtrStatCurrNumRoutes, vRtrStatActiveSdpTunnels=vRtrStatActiveSdpTunnels, vRtrIfLinkLocalAddressState=vRtrIfLinkLocalAddressState, vRtrIfIcmp6InNbrSolicits=vRtrIfIcmp6InNbrSolicits, vRtrIfDHCPGiAddressType=vRtrIfDHCPGiAddressType, vRtrIpAddrTable=vRtrIpAddrTable, vRiaInetRemoteIp=vRiaInetRemoteIp, vRtrStatTotalLdpTunnels=vRtrStatTotalLdpTunnels, vRtrIcmp6OutNbrSolicits=vRtrIcmp6OutNbrSolicits, vRtrIfDHCP6ServerMaxLeaseStates=vRtrIfDHCP6ServerMaxLeaseStates)
mibBuilder.exportSymbols("ALCATEL-IND1-TIMETRA-VRTR-MIB", vRtrStaticRouteEntry=vRtrStaticRouteEntry, tmnxVRtrMcastMaxRoutesTCA=tmnxVRtrMcastMaxRoutesTCA, vRtrIfInitDelayEnable=vRtrIfInitDelayEnable, vRtrInetStaticRouteCpeAddrType=vRtrInetStaticRouteCpeAddrType, tmnxDscpAppTableLastChanged=tmnxDscpAppTableLastChanged, vRtrStatBGPVpnRoutes=vRtrStatBGPVpnRoutes, vRtrV6StatTotalSdpTunnels=vRtrV6StatTotalSdpTunnels, vRtrInetStaticRouteNextHopType=vRtrInetStaticRouteNextHopType, vRtrInetStatRteCpeChkStatsEntry=vRtrInetStatRteCpeChkStatsEntry, tmnxVRtrDHCPLseStRestoreProblem=tmnxVRtrDHCPLseStRestoreProblem, vRtrIfIcmp6InTimeExcds=vRtrIfIcmp6InTimeExcds, vRtrMidRouteThreshold=vRtrMidRouteThreshold, vRtrIfIcmpV6ParamProblemTime=vRtrIfIcmpV6ParamProblemTime, vRtrIfDHCPProxyLeaseTime=vRtrIfDHCPProxyLeaseTime, vRtrIfDHCP6AdminState=vRtrIfDHCP6AdminState, vRtrIfDelayUpTimer=vRtrIfDelayUpTimer, vRtrImportPolicy5=vRtrImportPolicy5, vRtrIfDHCPLseStateCiAddr=vRtrIfDHCPLseStateCiAddr, vRtrStatActiveIfs=vRtrStatActiveIfs, vRtrMaxMcastNumRoutes=vRtrMaxMcastNumRoutes, vRtrInetAggrASSet=vRtrInetAggrASSet, vRtrSvcIpRangeTable=vRtrSvcIpRangeTable, vRtrDHCP6AssignedPrefixLen=vRtrDHCP6AssignedPrefixLen, vRtrExportPolicy1=vRtrExportPolicy1, vRtrIfMplsStatus=vRtrIfMplsStatus, tmnxVRtrManagedRouteAddFailed=tmnxVRtrManagedRouteAddFailed, TDSCPAppId=TDSCPAppId, vRtrIfIcmp6InEchos=vRtrIfIcmp6InEchos, vRtrInetStaticRouteAvailIndex=vRtrInetStaticRouteAvailIndex, vRtrDhcpRestoreLseStateProblem=vRtrDhcpRestoreLseStateProblem, vRtrMldStatus=vRtrMldStatus, vRtrIfIcmp6InGrpMembQueries=vRtrIfIcmp6InGrpMembQueries, vRtrIfBfdSessionRemAddr=vRtrIfBfdSessionRemAddr, vRtrAS=vRtrAS, vRtrAdvPrefixOnLinkFlag=vRtrAdvPrefixOnLinkFlag, vRtrInetStatRteCpeChkOutPktCnt=vRtrInetStatRteCpeChkOutPktCnt, vRtrDHCP6LeaseOverrideResult=vRtrDHCP6LeaseOverrideResult, vRtrStaticRouteAdminState=vRtrStaticRouteAdminState, vRtrIfIcmp6OutDestUnreachs=vRtrIfIcmp6OutDestUnreachs, vRtrInetStaticRouteNextHopIf=vRtrInetStaticRouteNextHopIf, vRtrIfBfdSessionTable=vRtrIfBfdSessionTable, vRtrIfDHCP6PfxDelegationLstChgd=vRtrIfDHCP6PfxDelegationLstChgd, vRtrStaticRouteLastEnabledTime=vRtrStaticRouteLastEnabledTime, tmnxDscpFCTableLastChanged=tmnxDscpFCTableLastChanged, vRtrRIPActiveRoutes=vRtrRIPActiveRoutes, vRtrV6OSPFActiveRoutes=vRtrV6OSPFActiveRoutes, vRtrIfDHCP6PfxdAdminState=vRtrIfDHCP6PfxdAdminState, vRtrStaticRoutePreference=vRtrStaticRoutePreference, vRtrIcmp6InEchoReplies=vRtrIcmp6InEchoReplies, vRtrV6ISISRoutes=vRtrV6ISISRoutes, vRtrIfIcmp6Table=vRtrIfIcmp6Table, vRtrMsdpStatus=vRtrMsdpStatus, vRtrIfIcmp6OutNbrAdvTime=vRtrIfIcmp6OutNbrAdvTime, vRtrStaticRouteIndexDest=vRtrStaticRouteIndexDest, vRtrAdminState=vRtrAdminState, tmnxVRtrDHCPIfLseStatesExceeded=tmnxVRtrDHCPIfLseStatesExceeded, vRtrStaticRouteRowStatus=vRtrStaticRouteRowStatus, vRtrIfIcmp6OutNbrSolicitsTime=vRtrIfIcmp6OutNbrSolicitsTime, tmnxVRtrBfdSessionUp=tmnxVRtrBfdSessionUp, vRtrConfederationAS=vRtrConfederationAS, vRtrInetSvcIpRangeEntry=vRtrInetSvcIpRangeEntry, tmnxVRtrBfdPortTypeNotSupported=tmnxVRtrBfdPortTypeNotSupported, vRtrIfTable=vRtrIfTable, vRtrIfBfdMultiplier=vRtrIfBfdMultiplier, vRtrAggregationASSet=vRtrAggregationASSet, vRtrIcmp6InRtrAdvertisements=vRtrIcmp6InRtrAdvertisements, vRtrIfIpcpSecDnsAddrType=vRtrIfIpcpSecDnsAddrType, vRtrIfDHCPSnooping=vRtrIfDHCPSnooping, vRtrTriggeredPolicy=vRtrTriggeredPolicy, vRtrOspfv3Status=vRtrOspfv3Status, vRtrIfPhysicalAddress=vRtrIfPhysicalAddress, vRtrIfProxyNDPolicy4=vRtrIfProxyNDPolicy4, vRtrIfLastOperStateChange=vRtrIfLastOperStateChange, vRtrIfDHCPClientApplications=vRtrIfDHCPClientApplications, vRtrIfDHCP6LastChanged=vRtrIfDHCP6LastChanged, vRtrIfDHCP6RelayServer7=vRtrIfDHCP6RelayServer7, vRiaInetGwAddressType=vRiaInetGwAddressType, vRtrAdvPrefixLength=vRtrAdvPrefixLength, tmnxVRtrDHCP6RelayReplyStripUni=tmnxVRtrDHCP6RelayReplyStripUni, tmnxVRtrObsoleteV5v0Group=tmnxVRtrObsoleteV5v0Group, vRtrIfDHCP6CurrLeasePopulate=vRtrIfDHCP6CurrLeasePopulate, vRtrDHCP6AssignedNetAddrType=vRtrDHCP6AssignedNetAddrType, vRtrIfBfdTransmitInterval=vRtrIfBfdTransmitInterval, vRtrNumberOfBfdSessionsOnSlot=vRtrNumberOfBfdSessionsOnSlot, tmnxVRtrIfV5v0Group=tmnxVRtrIfV5v0Group, vRtrInetStaticRouteDestPfxLen=vRtrInetStaticRouteDestPfxLen, vRtrDHCP6MsgStatsLstClrd=vRtrDHCP6MsgStatsLstClrd, vRtrIcmp6OutRedirects=vRtrIcmp6OutRedirects, vRtrInetStatRteCpeChkDownTrans=vRtrInetStatRteCpeChkDownTrans, vRtrStaticRouteIgpShortcut=vRtrStaticRouteIgpShortcut, vRtrInetStaticRouteNextHop=vRtrInetStaticRouteNextHop, vRtrManagedRoutePrefixLen=vRtrManagedRoutePrefixLen, vRtrInetStaticRouteStatus=vRtrInetStaticRouteStatus, vRtrIpCidrRouteTable=vRtrIpCidrRouteTable, vRtrV6MulticastRoutes=vRtrV6MulticastRoutes, vRtrStaticRouteTable=vRtrStaticRouteTable, vRtrIfIcmp6OutRtrSolicits=vRtrIfIcmp6OutRtrSolicits, vRtrFailureDescription=vRtrFailureDescription, vRtrInetAggrRowStatus=vRtrInetAggrRowStatus, vRtrIfBfdSessionOperState=vRtrIfBfdSessionOperState, vRtrStaticRouteStaticType=vRtrStaticRouteStaticType, vRtrIfDHCPOperAutoFilter=vRtrIfDHCPOperAutoFilter, vRtrIcmp6InMsgs=vRtrIcmp6InMsgs, vRtrIfProxyNDLocal=vRtrIfProxyNDLocal, vRtrIfIcmpV6PktTooBig=vRtrIfIcmpV6PktTooBig, vRtrDirectActiveRoutes=vRtrDirectActiveRoutes, vRtrMaxNumRoutesLogOnly=vRtrMaxNumRoutesLogOnly, vRtrV6StatActiveSdpTunnels=vRtrV6StatActiveSdpTunnels, vRtrIfCpmProtUncfgdProtoDropCnt=vRtrIfCpmProtUncfgdProtoDropCnt, vRtrIfBfdSessionLclDisc=vRtrIfBfdSessionLclDisc, vRtrIfDescription=vRtrIfDescription, vRtrTunnelID=vRtrTunnelID, vRtrIfGlobalIndex=vRtrIfGlobalIndex, vRtrInetInstAggrTable=vRtrInetInstAggrTable, vRtrIfOperMtu=vRtrIfOperMtu, vRtrIfDHCP6PfxdValidLifetime=vRtrIfDHCP6PfxdValidLifetime, vRtrIfIcmp6InGrpMembReductions=vRtrIfIcmp6InGrpMembReductions, vRtrIfIcmp6OutGrpMembReductions=vRtrIfIcmp6OutGrpMembReductions, vRtrIfNameEntry=vRtrIfNameEntry, vRtrInetStaticRouteTag=vRtrInetStaticRouteTag, vRtrIfProxyNDTable=vRtrIfProxyNDTable, vRtrIfDHCPLeaseStateTable=vRtrIfDHCPLeaseStateTable, vRtrIfBfdEchoInterval=vRtrIfBfdEchoInterval, vRtrAggregationIpPrefixMask=vRtrAggregationIpPrefixMask, vRtrStatTable=vRtrStatTable, vRtrV6StaticRoutes=vRtrV6StaticRoutes, vRtrIcmp6OutDestUnreachs=vRtrIcmp6OutDestUnreachs, vRtrStaticRouteAvailableIndex=vRtrStaticRouteAvailableIndex, vRtrInetStatRteCpeChkUpTrans=vRtrInetStatRteCpeChkUpTrans, vRtrStaticRouteIndex=vRtrStaticRouteIndex, tmnxVRtrBfdV6v0Group=tmnxVRtrBfdV6v0Group, vRtrDhcpRestoreLseStateCiAddr=vRtrDhcpRestoreLseStateCiAddr, vRtrIfProxyArp=vRtrIfProxyArp, tmnxVRtrIpV4v0Group=tmnxVRtrIpV4v0Group, vRtrIcmp6InEchos=vRtrIcmp6InEchos, vRtrHostActiveRoutes=vRtrHostActiveRoutes, vRtrDhcpPacketProblem=vRtrDhcpPacketProblem, tmnxVRtrStaticRteCPEChkV6v0Group=tmnxVRtrStaticRteCPEChkV6v0Group, vRtrStaticRouteMetric=vRtrStaticRouteMetric, vRtrGracefulRestartType=vRtrGracefulRestartType, tmnxVRtrGroups=tmnxVRtrGroups, vRtrDHCP6ClientNetAddr=vRtrDHCP6ClientNetAddr, vRtrInetStaticRouteIndexTable=vRtrInetStaticRouteIndexTable, vRtrIfDHCPRelayRemoteIdStr=vRtrIfDHCPRelayRemoteIdStr, vRtrInstanceAggregationTable=vRtrInstanceAggregationTable, vRtrOSPFActiveRoutes=vRtrOSPFActiveRoutes, tmnxVRtrMcastMidRouteTCA=tmnxVRtrMcastMidRouteTCA, tmnxVRtrMaxRoutes=tmnxVRtrMaxRoutes, vRtrInetSvcIpRangeAddrType=vRtrInetSvcIpRangeAddrType, vRtrV6StatTotalNbrEntries=vRtrV6StatTotalNbrEntries, vRtrIfDHCP6RelayServer5=vRtrIfDHCP6RelayServer5, vRtrMaxNumRoutes=vRtrMaxNumRoutes, vRtrDhcpLseStateNewCiAddr=vRtrDhcpLseStateNewCiAddr, tmnxVRtr77x0V6v0Compliance=tmnxVRtr77x0V6v0Compliance, vRtrIcmp6OutRtrSolicits=vRtrIcmp6OutRtrSolicits, tmnxVRtrIPv6V4v0Group=tmnxVRtrIPv6V4v0Group, tmnxVRtrIfDHCPRelayGroup=tmnxVRtrIfDHCPRelayGroup, vRtrIfTotalNumber=vRtrIfTotalNumber, vRtrISISActiveRoutes=vRtrISISActiveRoutes, vRtrIfIcmp6InRedirects=vRtrIfIcmp6InRedirects, vRtrRowStatus=vRtrRowStatus, TDot1pAppId=TDot1pAppId, vRtrStaticRouteEgressIfIndex=vRtrStaticRouteEgressIfIndex, vRtrInetStaticRouteCpeDropCnt=vRtrInetStaticRouteCpeDropCnt, tmnxVRtrIPv6IpV4v0Group=tmnxVRtrIPv6IpV4v0Group, vRtrIfDHCPRelayServer4=vRtrIfDHCPRelayServer4, vRtrInetStatRteCpeNotifyAddrType=vRtrInetStatRteCpeNotifyAddrType, vRtrExportPolicy3=vRtrExportPolicy3, vRtrIfRowStatus=vRtrIfRowStatus, tmnxVRtrDHCPSuspiciousPcktRcvd=tmnxVRtrDHCPSuspiciousPcktRcvd, vRtrV6AggregateActiveRoutes=vRtrV6AggregateActiveRoutes, vRtrAdvPrefixPrefix=vRtrAdvPrefixPrefix, tmnxVRtrGlobalObjs=tmnxVRtrGlobalObjs, vRtrIcmp6InGrpMembReductions=vRtrIcmp6InGrpMembReductions, vRtrConfiguredVRtrs=vRtrConfiguredVRtrs, vRtrIcmp6OutParmProblems=vRtrIcmp6OutParmProblems, vRtrIfProxyArpEntry=vRtrIfProxyArpEntry, vRtrIfProxyNDPolicy2=vRtrIfProxyNDPolicy2, vRtrIfDHCPLseStateOption82=vRtrIfDHCPLseStateOption82, vRtrMulticastRoutes=vRtrMulticastRoutes, vRtrIfAdminState=vRtrIfAdminState, vRtrIfIcmpNumTtlExpired=vRtrIfIcmpNumTtlExpired, vRtrStatActiveARPEntries=vRtrStatActiveARPEntries, vRtrIpNetToMediaOperState=vRtrIpNetToMediaOperState, tmnxVRtrNotifications=tmnxVRtrNotifications, vRtrAutoFilterDHCPClientAddress=vRtrAutoFilterDHCPClientAddress, vRtrIfProxyArpPolicy5=vRtrIfProxyArpPolicy5, vRtrIfDHCPLseStateChAddr=vRtrIfDHCPLseStateChAddr, vRtrIfIcmp6OutNbrAdvertisements=vRtrIfIcmp6OutNbrAdvertisements, vRtrIfBfdReceiveInterval=vRtrIfBfdReceiveInterval, vRtrManagedRouteInetAddr=vRtrManagedRouteInetAddr, vRtrIfBfdSessionLastDownTime=vRtrIfBfdSessionLastDownTime, vRtrIfBfdSessionRemDisc=vRtrIfBfdSessionRemDisc, vRtrIpNetToMediaTimer=vRtrIpNetToMediaTimer, vRtrIfDHCPRelayServer7=vRtrIfDHCPRelayServer7, vRtrInetStatRteCpeChkUpTime=vRtrInetStatRteCpeChkUpTime, vRtrInetStaticRouteDest=vRtrInetStaticRouteDest, vRtrIfUnnumberedIf=vRtrIfUnnumberedIf, vRiaInetAddress=vRiaInetAddress, tmnxVRtrIPv6IpV5v0Group=tmnxVRtrIPv6IpV5v0Group, vRtrIfDHCPRelayClientPktsDiscarded=vRtrIfDHCPRelayClientPktsDiscarded, vRtrIfIcmp6OutNbrSolicits=vRtrIfIcmp6OutNbrSolicits, vRtrIfIcmp6OutEchoReplies=vRtrIfIcmp6OutEchoReplies, tmnxVRtrNotificationObjV5v0Group=tmnxVRtrNotificationObjV5v0Group, tmnxDscpAppTable=tmnxDscpAppTable, vRtrIcmp6OutErrors=vRtrIcmp6OutErrors, vRtrManagedRouteInetAddrType=vRtrManagedRouteInetAddrType, vRtrDHCP6ServerNetAddr=vRtrDHCP6ServerNetAddr, vRtrIfIcmpUnreachablesTime=vRtrIfIcmpUnreachablesTime, vRtrDhcpLseStatePopulateError=vRtrDhcpLseStatePopulateError, tmnxVRtr7450V4v0Compliance=tmnxVRtr7450V4v0Compliance, vRtrMaxMcastNumRoutesLogOnly=vRtrMaxMcastNumRoutesLogOnly, tmnxVRtrDHCPLseStsExceeded=tmnxVRtrDHCPLseStsExceeded, vRiaIndex=vRiaIndex, vRtrV6AggregateRoutes=vRtrV6AggregateRoutes, vRtrStaticRouteNextHopUnnumberedIf=vRtrStaticRouteNextHopUnnumberedIf, vRtrIPv6HighRouteThreshold=vRtrIPv6HighRouteThreshold, vRtrIfDHCPGiAddressAsSrc=vRtrIfDHCPGiAddressAsSrc, vRtrSvcIpRangeMask=vRtrSvcIpRangeMask, vRtrStatIllegalLabels=vRtrStatIllegalLabels, vRtrInetStaticRouteStaticType=vRtrInetStaticRouteStaticType, vRtrIfDHCP6RelayServer1=vRtrIfDHCP6RelayServer1, tmnxVRtrDHCPLseStatePopulateErr=tmnxVRtrDHCPLseStatePopulateErr, vRtrInetStaticRouteIndex=vRtrInetStaticRouteIndex, vRtrServiceId=vRtrServiceId, vRtrIfLocalDhcpServerName=vRtrIfLocalDhcpServerName, vRtrStaticRouteNextHop=vRtrStaticRouteNextHop, vRtrInetStaticRouteAdminState=vRtrInetStaticRouteAdminState, vRtrIfDHCP6PfxdIAID=vRtrIfDHCP6PfxdIAID, vRtrSubMgmtRoutes=vRtrSubMgmtRoutes, vRtrIfDHCP6RelayItfIdOption=vRtrIfDHCP6RelayItfIdOption, vRtrDHCP6OldAssignedPrefixLen=vRtrDHCP6OldAssignedPrefixLen, vRtrIfIcmp6InDestUnreachs=vRtrIfIcmp6InDestUnreachs, tmnxVRtrIllegalLabelTCA=tmnxVRtrIllegalLabelTCA, vRtrTunnelNexthop=vRtrTunnelNexthop, vRtrIfIcmpNumUnreachables=vRtrIfIcmpNumUnreachables, vRtrInetSvcIpRangeRowStatus=vRtrInetSvcIpRangeRowStatus, vRtrDhcpLseStateOldCiAddr=vRtrDhcpLseStateOldCiAddr, vRtrInstanceAggregationEntry=vRtrInstanceAggregationEntry, tmnxVRtr7750V5v0Compliance=tmnxVRtr7750V5v0Compliance, vRtrIcmp6OutAdminProhibs=vRtrIcmp6OutAdminProhibs, vRtrDHCP6DropStatEntry=vRtrDHCP6DropStatEntry)
