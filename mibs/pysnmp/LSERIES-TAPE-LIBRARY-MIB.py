#
# PySNMP MIB module LSERIES-TAPE-LIBRARY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LSERIES-TAPE-LIBRARY-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:58:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Counter64, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, NotificationType, NotificationType, Unsigned32, MibIdentifier, Integer32, ObjectIdentity, enterprises, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "NotificationType", "NotificationType", "Unsigned32", "MibIdentifier", "Integer32", "ObjectIdentity", "enterprises", "Gauge32", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
storagetek = MibIdentifier((1, 3, 6, 1, 4, 1, 1211))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1))
lseriesTapeLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12))
lserAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1))
lserTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 2))
lserLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3))
lserDrives = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4))
lserCaps = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5))
lserPassThru = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6))
lserInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7))
lserStorage = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8))
lserPlayground = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9))
lserHardwareMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10))
class LserSnmpPort(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(161, 161), ValueRangeConstraint(1024, 65535), )
class LserSnmpTrapPort(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(162, 162), ValueRangeConstraint(1024, 65535), )
class LserCmdClear(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("noaction", 1), ("clear", 2))

class LserDeviceStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("ok", 2), ("error", 3), ("warning", 4))

class LserMediaErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("load", 1), ("unload", 2), ("error", 3), ("unknown", 4))

lserAgentRevision = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserAgentRevision.setStatus('mandatory')
lserAgentBootDate = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserAgentBootDate.setStatus('mandatory')
lserAgentURL = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserAgentURL.setStatus('mandatory')
lserAgentPort = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 6), LserSnmpPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentPort.setStatus('mandatory')
lserAgentCommunity = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentCommunity.setStatus('mandatory')
lserAgentTrapSink = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8))
lserAgentTrapSinkClear = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 1), LserCmdClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentTrapSinkClear.setStatus('mandatory')
lserAgentTrapSinkNum = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserAgentTrapSinkNum.setStatus('mandatory')
lserAgentTrapSinkTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3), )
if mibBuilder.loadTexts: lserAgentTrapSinkTable.setStatus('mandatory')
lserAgentTrapSinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserAgentTrapSinkTableIndex"))
if mibBuilder.loadTexts: lserAgentTrapSinkEntry.setStatus('mandatory')
lserAgentTrapSinkTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserAgentTrapSinkTableIndex.setStatus('mandatory')
lserAgentTrapSinkNetName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentTrapSinkNetName.setStatus('mandatory')
lserAgentTrapSinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1, 3), LserSnmpTrapPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentTrapSinkPort.setStatus('mandatory')
lserAgentTrapSinkCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentTrapSinkCommunity.setStatus('mandatory')
lserAgentTrapSinkVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpV1", 1), ("snmpV2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentTrapSinkVersion.setStatus('mandatory')
lserAgentTrapSinkClearEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 1, 8, 3, 1, 6), LserCmdClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserAgentTrapSinkClearEntry.setStatus('mandatory')
lserTrapText = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTrapText.setStatus('mandatory')
lserTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("warning", 2), ("info", 3), ("configuration", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserTrapSeverity.setStatus('mandatory')
lserTrapError = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,1)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserTrapText"), ("LSERIES-TAPE-LIBRARY-MIB", "lserTrapSeverity"))
lserTrapWarning = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,2)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserTrapText"), ("LSERIES-TAPE-LIBRARY-MIB", "lserTrapSeverity"))
lserTrapInformation = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,3)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserTrapText"), ("LSERIES-TAPE-LIBRARY-MIB", "lserTrapSeverity"))
lserTrapConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,4)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserTrapText"), ("LSERIES-TAPE-LIBRARY-MIB", "lserTrapSeverity"))
lserTrapAgentStart = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,11)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserAgentBootDate"))
lserTrapLibStatusGood = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,21)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibStkBaseModel"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibSerialNumber"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"))
lserTrapLibStatusCheck = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,25)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibStkBaseModel"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibSerialNumber"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"))
lserTrapDrvStatusGood = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,41)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserDriveState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserDriveIndex"), ("LSERIES-TAPE-LIBRARY-MIB", "lserDriveSerialNum"))
lserTrapDrvStatusCheck = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,45)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserDriveState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserDriveIndex"), ("LSERIES-TAPE-LIBRARY-MIB", "lserDriveSerialNum"))
lserTrapCapStatusGood = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,61)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserCapState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserCapIndex"))
lserTrapCapStatusOpen = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,63)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserCapState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserCapIndex"))
lserTrapCapStatusCheck = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,65)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserCapState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserCapIndex"))
lserTrapPtpStatusGood = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,81)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserPtpState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserPtpIndex"))
lserTrapPtpStatusCheck = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,85)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserLibNetworkName"), ("LSERIES-TAPE-LIBRARY-MIB", "lserPtpState"), ("LSERIES-TAPE-LIBRARY-MIB", "lserPtpIndex"))
lserTrapMediaStat = NotificationType((1, 3, 6, 1, 4, 1, 1211, 1, 12) + (0,101)).setObjects(("LSERIES-TAPE-LIBRARY-MIB", "lserMediaErrorTapeLabel"), ("LSERIES-TAPE-LIBRARY-MIB", "lserMediaErrorDriveSerialNum"), ("LSERIES-TAPE-LIBRARY-MIB", "lserMediaErrorDateTime"), ("LSERIES-TAPE-LIBRARY-MIB", "lserLibMediaErrorEnum"), ("LSERIES-TAPE-LIBRARY-MIB", "lserMediaErrorOccurrenceCount"))
lserLibStkBaseModel = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStkBaseModel.setStatus('mandatory')
lserLibConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: lserLibConfigPassword.setStatus('mandatory')
lserLibVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 3))
lserLibVersionFirmRev = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibVersionFirmRev.setStatus('mandatory')
lserLibVersionFirmDate = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibVersionFirmDate.setStatus('mandatory')
lserLibVersionBootRev = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 3, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibVersionBootRev.setStatus('mandatory')
lserLibVersionFibre = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibVersionFibre.setStatus('mandatory')
lserLibVersionHardware = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibVersionHardware.setStatus('mandatory')
lserLibSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibSerialNumber.setStatus('mandatory')
lserLibHostInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 5))
lserLibHostInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 5, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibHostInterfaceType.setStatus('mandatory')
lserLibConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6))
lserLibCfgNumPanels = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumPanels.setStatus('mandatory')
lserLibCfgNumHandCells = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumHandCells.setStatus('mandatory')
lserLibCfgMinHandAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMinHandAddr.setStatus('mandatory')
lserLibCfgMaxHandAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMaxHandAddr.setStatus('mandatory')
lserLibCfgNumPlayCells = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumPlayCells.setStatus('mandatory')
lserLibCfgMinPlayAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMinPlayAddr.setStatus('mandatory')
lserLibCfgMaxPlayAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMaxPlayAddr.setStatus('mandatory')
lserLibCfgNumCaps = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumCaps.setStatus('mandatory')
lserLibCfgNumCapColumns = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumCapColumns.setStatus('mandatory')
lserLibCfgNumCapCells = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumCapCells.setStatus('mandatory')
lserLibCfgMinCapAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMinCapAddr.setStatus('mandatory')
lserLibCfgMaxCapAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMaxCapAddr.setStatus('mandatory')
lserLibCfgNumDriveColumns = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumDriveColumns.setStatus('mandatory')
lserLibCfgNumDrives = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumDrives.setStatus('mandatory')
lserLibCfgMinDriveAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMinDriveAddr.setStatus('mandatory')
lserLibCfgMaxDriveAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMaxDriveAddr.setStatus('mandatory')
lserLibCfgNumStorageCells = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumStorageCells.setStatus('mandatory')
lserLibCfgMinStorageAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMinStorageAddr.setStatus('mandatory')
lserLibCfgMaxStorageAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMaxStorageAddr.setStatus('mandatory')
lserLibCfgNumPtps = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumPtps.setStatus('mandatory')
lserLibCfgNumPtpColumns = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumPtpColumns.setStatus('mandatory')
lserLibCfgNumPtpCells = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgNumPtpCells.setStatus('mandatory')
lserLibCfgMinPtpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMinPtpAddr.setStatus('mandatory')
lserLibCfgMaxPtpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 6, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCfgMaxPtpAddr.setStatus('mandatory')
lserLibState = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibState.setStatus('mandatory')
lserLibStatusEnum = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 8), LserDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatusEnum.setStatus('mandatory')
lserLibLog = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9))
lserLibLogClear = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 1), LserCmdClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLogClear.setStatus('mandatory')
lserLibLogNumFscs = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogNumFscs.setStatus('mandatory')
lserLibLogTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3), )
if mibBuilder.loadTexts: lserLibLogTable.setStatus('mandatory')
lserLibLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserLibLogTableIndex"))
if mibBuilder.loadTexts: lserLibLogEntry.setStatus('mandatory')
lserLibLogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogTableIndex.setStatus('mandatory')
lserLibLogFscNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogFscNumber.setStatus('mandatory')
lserLibLogMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogMechanism.setStatus('mandatory')
lserLibLogFscCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogFscCount.setStatus('mandatory')
lserLibLogDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogDateTime.setStatus('mandatory')
lserLibLogSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogSummary.setStatus('mandatory')
lserLibLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogText.setStatus('mandatory')
lserLibLogClearEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 8), LserCmdClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLogClearEntry.setStatus('mandatory')
lserLibLogSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 9, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("silent", 1), ("error", 2), ("warning", 3), ("info", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibLogSeverity.setStatus('mandatory')
lserLibDeviceID = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDeviceID.setStatus('mandatory')
lserLibFastLoad = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibFastLoad.setStatus('mandatory')
lserLibLocation = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12))
lserLibLocatContact = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatContact.setStatus('mandatory')
lserLibLocatStreet = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatStreet.setStatus('mandatory')
lserLibLocatState = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatState.setStatus('mandatory')
lserLibLocatZip = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatZip.setStatus('mandatory')
lserLibLocatCountry = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatCountry.setStatus('mandatory')
lserLibLocatDescr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatDescr.setStatus('mandatory')
lserLibLocatCity = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 12, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibLocatCity.setStatus('mandatory')
lserLibNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13))
lserLibNetworkIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkIpAddr.setStatus('mandatory')
lserLibNetworkGateway = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkGateway.setStatus('mandatory')
lserLibNetworkEthAddr = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibNetworkEthAddr.setStatus('mandatory')
lserLibNetworkName = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkName.setStatus('mandatory')
lserLibNetworkNetmask = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkNetmask.setStatus('mandatory')
lserLibNetworkFibrePresent = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notpresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibNetworkFibrePresent.setStatus('mandatory')
lserLibNetworkFibreID = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibNetworkFibreID.setStatus('mandatory')
lserLibNetworkFibreNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibNetworkFibreNumPorts.setStatus('mandatory')
lserLibNetworkDhcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkDhcpEnabled.setStatus('mandatory')
lserLibNetworkDomainName = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkDomainName.setStatus('mandatory')
lserLibNetworkPrimaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkPrimaryDNS.setStatus('mandatory')
lserLibNetworkSecondaryDNS = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 13, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibNetworkSecondaryDNS.setStatus('mandatory')
lserLibStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14))
lserLibStatsNumIPL = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumIPL.setStatus('mandatory')
lserLibStatsNumDoorOpens = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumDoorOpens.setStatus('mandatory')
lserLibStatsNumGetRetries = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumGetRetries.setStatus('mandatory')
lserLibStatsNumGetFails = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumGetFails.setStatus('mandatory')
lserLibStatsNumPutRetries = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumPutRetries.setStatus('mandatory')
lserLibStatsNumPutFails = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumPutFails.setStatus('mandatory')
lserLibStatsNumLabelRetries = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumLabelRetries.setStatus('mandatory')
lserLibStatsNumLabelFails = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumLabelFails.setStatus('mandatory')
lserLibStatsNumTargetRetries = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumTargetRetries.setStatus('mandatory')
lserLibStatsNumTargetFails = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumTargetFails.setStatus('mandatory')
lserLibStatsNumMoves = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumMoves.setStatus('mandatory')
lserLibStatsNumMounts = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumMounts.setStatus('mandatory')
lserLibStatsNumTargetReads = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumTargetReads.setStatus('mandatory')
lserLibStatsNumEmptyReads = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumEmptyReads.setStatus('mandatory')
lserLibStatsNumLabelReads = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStatsNumLabelReads.setStatus('mandatory')
lserLibStats5minuteSample = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16))
lserLibStats5minSampleCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5minSampleCount.setStatus('mandatory')
lserLibStats5minIdle = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5minIdle.setStatus('mandatory')
lserLibStats5min1to25 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min1to25.setStatus('mandatory')
lserLibStats5min26to50 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min26to50.setStatus('mandatory')
lserLibStats5min51to75 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min51to75.setStatus('mandatory')
lserLibStats5min76to100 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min76to100.setStatus('mandatory')
lserLibStats5min101to125 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min101to125.setStatus('mandatory')
lserLibStats5min126to150 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min126to150.setStatus('mandatory')
lserLibStats5min151to175 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min151to175.setStatus('mandatory')
lserLibStats5min176to200 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min176to200.setStatus('mandatory')
lserLibStats5min201to225 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min201to225.setStatus('mandatory')
lserLibStats5min226to250 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min226to250.setStatus('mandatory')
lserLibStats5min251to300 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min251to300.setStatus('mandatory')
lserLibStats5min301to350 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min301to350.setStatus('mandatory')
lserLibStats5min351to400 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min351to400.setStatus('mandatory')
lserLibStats5min401to450 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min401to450.setStatus('mandatory')
lserLibStats5min451to500 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min451to500.setStatus('mandatory')
lserLibStats5min501to550 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min501to550.setStatus('mandatory')
lserLibStats5min551to600 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min551to600.setStatus('mandatory')
lserLibStats5min601to650 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min601to650.setStatus('mandatory')
lserLibStats5min651to700 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5min651to700.setStatus('mandatory')
lserLibStats5minOver700 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 16, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats5minOver700.setStatus('mandatory')
lserLibStats15minuteSample = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17))
lserLibStats15minSampleCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15minSampleCount.setStatus('mandatory')
lserLibStats15minIdle = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15minIdle.setStatus('mandatory')
lserLibStats15min1to25 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min1to25.setStatus('mandatory')
lserLibStats15min26to50 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min26to50.setStatus('mandatory')
lserLibStats15min51to75 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min51to75.setStatus('mandatory')
lserLibStats15min76to100 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min76to100.setStatus('mandatory')
lserLibStats15min101to125 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min101to125.setStatus('mandatory')
lserLibStats15min126to150 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min126to150.setStatus('mandatory')
lserLibStats15min151to175 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min151to175.setStatus('mandatory')
lserLibStats15min176to200 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min176to200.setStatus('mandatory')
lserLibStats15min201to225 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min201to225.setStatus('mandatory')
lserLibStats15min226to250 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min226to250.setStatus('mandatory')
lserLibStats15min251to300 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min251to300.setStatus('mandatory')
lserLibStats15min301to350 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min301to350.setStatus('mandatory')
lserLibStats15min351to400 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min351to400.setStatus('mandatory')
lserLibStats15min401to450 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min401to450.setStatus('mandatory')
lserLibStats15min451to500 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min451to500.setStatus('mandatory')
lserLibStats15min501to550 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min501to550.setStatus('mandatory')
lserLibStats15min551to600 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min551to600.setStatus('mandatory')
lserLibStats15min601to650 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min601to650.setStatus('mandatory')
lserLibStats15min651to700 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15min651to700.setStatus('mandatory')
lserLibStats15minOver700 = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 17, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibStats15minOver700.setStatus('mandatory')
lserLibStatsGlobalClear = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 18), LserCmdClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibStatsGlobalClear.setStatus('mandatory')
lserLibMediaErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19))
lserMediaErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserMediaErrorCount.setStatus('mandatory')
lserLibMediaErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2), )
if mibBuilder.loadTexts: lserLibMediaErrorTable.setStatus('mandatory')
lserLibMediaErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserMediaErrorIndex"))
if mibBuilder.loadTexts: lserLibMediaErrorEntry.setStatus('mandatory')
lserMediaErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserMediaErrorIndex.setStatus('mandatory')
lserMediaErrorTapeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserMediaErrorTapeLabel.setStatus('mandatory')
lserMediaErrorDriveSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserMediaErrorDriveSerialNum.setStatus('mandatory')
lserMediaErrorDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserMediaErrorDateTime.setStatus('mandatory')
lserLibMediaErrorEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1, 5), LserMediaErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibMediaErrorEnum.setStatus('mandatory')
lserMediaErrorOccurrenceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 14, 19, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserMediaErrorOccurrenceCount.setStatus('mandatory')
lserLibDate = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15))
lserLibDateMonth = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDateMonth.setStatus('mandatory')
lserLibDateDay = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDateDay.setStatus('mandatory')
lserLibDateYear = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDateYear.setStatus('mandatory')
lserLibDateHour = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDateHour.setStatus('mandatory')
lserLibDateMinute = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDateMinute.setStatus('mandatory')
lserLibDateSecond = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibDateSecond.setStatus('mandatory')
lserLibDateString = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 15, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibDateString.setStatus('mandatory')
lserLibPersonality = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 16))
lserLibPersonVendor = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 16, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibPersonVendor.setStatus('mandatory')
lserLibPersonModel = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 16, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibPersonModel.setStatus('mandatory')
lserLibPersonWebEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 16, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibPersonWebEnabled.setStatus('mandatory')
lserLibPersonLibSize = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 16, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibPersonLibSize.setStatus('mandatory')
lserLibCleaning = MibIdentifier((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17))
lserLibCleanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibCleanEnabled.setStatus('mandatory')
lserLibCleanNumCartTypes = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCleanNumCartTypes.setStatus('mandatory')
lserLibCleanWarnTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 3), )
if mibBuilder.loadTexts: lserLibCleanWarnTable.setStatus('mandatory')
lserLibCleanWarnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 3, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserLibCleanWarnIndex"))
if mibBuilder.loadTexts: lserLibCleanWarnEntry.setStatus('mandatory')
lserLibCleanWarnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCleanWarnIndex.setStatus('mandatory')
lserLibCleanCartType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCleanCartType.setStatus('mandatory')
lserLibCleanWarnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserLibCleanWarnCount.setStatus('mandatory')
lserLibCleanNumCarts = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserLibCleanNumCarts.setStatus('mandatory')
lserLibCleanCartTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5), )
if mibBuilder.loadTexts: lserLibCleanCartTable.setStatus('mandatory')
lserLibCleanCartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserCleanCartIndex"))
if mibBuilder.loadTexts: lserLibCleanCartEntry.setStatus('mandatory')
lserCleanCartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCleanCartIndex.setStatus('mandatory')
lserCleanCartLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCleanCartLabel.setStatus('mandatory')
lserCleanCartType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCleanCartType.setStatus('mandatory')
lserCleanCartLocationElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCleanCartLocationElementID.setStatus('mandatory')
lserCleanCartHostAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCleanCartHostAccessible.setStatus('mandatory')
lserCleanCartUsageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 3, 17, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCleanCartUsageCount.setStatus('mandatory')
lserDriveCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveCount.setStatus('mandatory')
lserDriveTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2), )
if mibBuilder.loadTexts: lserDriveTable.setStatus('mandatory')
lserDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserDriveIndex"))
if mibBuilder.loadTexts: lserDriveEntry.setStatus('mandatory')
lserDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveIndex.setStatus('mandatory')
lserDriveElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveElementID.setStatus('mandatory')
lserDriveRowInLib = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveRowInLib.setStatus('mandatory')
lserDriveColInLib = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveColInLib.setStatus('mandatory')
lserDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveType.setStatus('mandatory')
lserDriveVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveVendor.setStatus('mandatory')
lserDriveSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveSerialNum.setStatus('mandatory')
lserDriveInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("scsi", 2), ("fibre", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveInterfaceType.setStatus('mandatory')
lserDriveID = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserDriveID.setStatus('mandatory')
lserDriveState = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveState.setStatus('mandatory')
lserDriveStatusEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 11), LserDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveStatusEnum.setStatus('mandatory')
lserDriveCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveCodeVer.setStatus('mandatory')
lserDriveVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveVersion.setStatus('mandatory')
lserDriveFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFirmwareVer.setStatus('mandatory')
lserDriveGetRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveGetRetries.setStatus('mandatory')
lserDrivePutRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDrivePutRetries.setStatus('mandatory')
lserDriveCommandClean = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserDriveCommandClean.setStatus('mandatory')
lserDriveCellStatusEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveCellStatusEnum.setStatus('mandatory')
lserDriveCellStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveCellStatusText.setStatus('mandatory')
lserDriveCellContentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveCellContentLabel.setStatus('mandatory')
lserDriveCellContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveCellContentType.setStatus('mandatory')
lserDriveIdleSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveIdleSeconds.setStatus('mandatory')
lserDriveNumMounts = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveNumMounts.setStatus('mandatory')
lserDriveUsageSampleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsageSampleCount.setStatus('mandatory')
lserDriveUsageMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsageMinimum.setStatus('mandatory')
lserDriveUsage5min = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsage5min.setStatus('mandatory')
lserDriveUsage5to10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsage5to10.setStatus('mandatory')
lserDriveUsage10to30 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsage10to30.setStatus('mandatory')
lserDriveUsage30to60 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsage30to60.setStatus('mandatory')
lserDriveUsageMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveUsageMaximum.setStatus('mandatory')
lserDriveFibreCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibreCount.setStatus('mandatory')
lserDriveFibreTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4), )
if mibBuilder.loadTexts: lserDriveFibreTable.setStatus('mandatory')
lserDriveFibreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserDriveFibreIndex"))
if mibBuilder.loadTexts: lserDriveFibreEntry.setStatus('mandatory')
class LserDriveFibreLoopId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 125), )
class LserDriveFibreSpeed(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("oneGbit", 2), ("twoGbit", 3))

class LserDriveFibreAddressing(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("hard", 1), ("soft", 2))

lserDriveFibreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibreIndex.setStatus('mandatory')
lserDriveFibreSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibreSerialNum.setStatus('mandatory')
lserDriveFibreNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibreNodeName.setStatus('mandatory')
lserDriveFibrePortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("dual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortCount.setStatus('mandatory')
lserDriveFibrePortAWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortAWWN.setStatus('mandatory')
lserDriveFibrePortAAddressingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 6), LserDriveFibreAddressing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortAAddressingMode.setStatus('mandatory')
lserDriveFibrePortAPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortAPortEnabled.setStatus('mandatory')
lserDriveFibrePortALoopId = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 8), LserDriveFibreLoopId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortALoopId.setStatus('mandatory')
lserDriveFibrePortAPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 9), LserDriveFibreSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortAPortSpeed.setStatus('mandatory')
lserDriveFibrePortBWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortBWWN.setStatus('mandatory')
lserDriveFibrePortBAddressingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 11), LserDriveFibreAddressing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortBAddressingMode.setStatus('mandatory')
lserDriveFibrePortBPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortBPortEnabled.setStatus('mandatory')
lserDriveFibrePortBLoopId = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 13), LserDriveFibreLoopId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortBLoopId.setStatus('mandatory')
lserDriveFibrePortBPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 4, 1, 14), LserDriveFibreSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveFibrePortBPortSpeed.setStatus('mandatory')
lserDriveWWNEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserDriveWWNEnabled.setStatus('mandatory')
lserCapCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapCount.setStatus('mandatory')
lserCapTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2), )
if mibBuilder.loadTexts: lserCapTable.setStatus('mandatory')
lserCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserCapIndex"))
if mibBuilder.loadTexts: lserCapEntry.setStatus('mandatory')
lserCapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapIndex.setStatus('mandatory')
lserCapAccessibility = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapAccessibility.setStatus('mandatory')
lserCapAccessStateEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("open", 2), ("close", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapAccessStateEnum.setStatus('mandatory')
lserCapState = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapState.setStatus('mandatory')
lserCapStatusEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 5), LserDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapStatusEnum.setStatus('mandatory')
lserCapUsageGetSampleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGetSampleCount.setStatus('mandatory')
lserCapUsageGetIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGetIdle.setStatus('mandatory')
lserCapUsageGet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet1.setStatus('mandatory')
lserCapUsageGet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet2.setStatus('mandatory')
lserCapUsageGet3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet3.setStatus('mandatory')
lserCapUsageGet4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet4.setStatus('mandatory')
lserCapUsageGet5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet5.setStatus('mandatory')
lserCapUsageGet6to10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet6to10.setStatus('mandatory')
lserCapUsageGet11to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet11to15.setStatus('mandatory')
lserCapUsageGet16to20 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet16to20.setStatus('mandatory')
lserCapUsageGet21toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsageGet21toMax.setStatus('mandatory')
lserCapUsagePutSampleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePutSampleCount.setStatus('mandatory')
lserCapUsagePutIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePutIdle.setStatus('mandatory')
lserCapUsagePut1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut1.setStatus('mandatory')
lserCapUsagePut2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut2.setStatus('mandatory')
lserCapUsagePut3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut3.setStatus('mandatory')
lserCapUsagePut4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut4.setStatus('mandatory')
lserCapUsagePut5 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut5.setStatus('mandatory')
lserCapUsagePut6to10 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut6to10.setStatus('mandatory')
lserCapUsagePut11to15 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut11to15.setStatus('mandatory')
lserCapUsagePut16to20 = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut16to20.setStatus('mandatory')
lserCapUsagePut21toMax = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapUsagePut21toMax.setStatus('mandatory')
lserCapName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 5, 2, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCapName.setStatus('mandatory')
lserPtpCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCount.setStatus('mandatory')
lserPtpTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2), )
if mibBuilder.loadTexts: lserPtpTable.setStatus('mandatory')
lserPtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserPtpIndex"))
if mibBuilder.loadTexts: lserPtpEntry.setStatus('mandatory')
lserPtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpIndex.setStatus('mandatory')
lserPtpState = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpState.setStatus('mandatory')
lserPtpStatusEnum = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 3), LserDeviceStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpStatusEnum.setStatus('mandatory')
lserPtpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpSerialNumber.setStatus('mandatory')
lserPtpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpPartNumber.setStatus('mandatory')
lserPtpFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpFirmwareVersion.setStatus('mandatory')
lserPtpFirmwareDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpFirmwareDate.setStatus('mandatory')
lserPtpSoftwareResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpSoftwareResetCount.setStatus('mandatory')
lserPtpDoorOpenCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpDoorOpenCount.setStatus('mandatory')
lserPtpInitializationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpInitializationCount.setStatus('mandatory')
lserPtpInoperativeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpInoperativeCount.setStatus('mandatory')
lserPtpGoodCommandCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpGoodCommandCount.setStatus('mandatory')
lserPtpFailCommandCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpFailCommandCount.setStatus('mandatory')
lserPtpGoodEmptyMotionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpGoodEmptyMotionCount.setStatus('mandatory')
lserPtpFailEmptyMotionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpFailEmptyMotionCount.setStatus('mandatory')
lserPtpGoodPartMotionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpGoodPartMotionCount.setStatus('mandatory')
lserPtpFailPartMotionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpFailPartMotionCount.setStatus('mandatory')
lserPtpGoodFullMotionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpGoodFullMotionCount.setStatus('mandatory')
lserPtpFailFullMotionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpFailFullMotionCount.setStatus('mandatory')
lserPtpCompLibNetworkIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserPtpCompLibNetworkIpAddr.setStatus('mandatory')
lserPtpCompLibNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserPtpCompLibNetworkName.setStatus('mandatory')
lserPtpCompLibSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCompLibSerialNumber.setStatus('mandatory')
lserPtpCompLibPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCompLibPartNumber.setStatus('mandatory')
lserPtpCompLibVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCompLibVendorName.setStatus('mandatory')
lserPtpCompLibModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCompLibModelName.setStatus('mandatory')
lserPtpCompLibFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCompLibFirmwareVersion.setStatus('mandatory')
lserPtpCompLibFirmwareDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 6, 2, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPtpCompLibFirmwareDate.setStatus('mandatory')
lserTapeCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTapeCount.setStatus('mandatory')
lserTapeTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2), )
if mibBuilder.loadTexts: lserTapeTable.setStatus('mandatory')
lserTapeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserTapeIndex"))
if mibBuilder.loadTexts: lserTapeEntry.setStatus('mandatory')
lserTapeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTapeIndex.setStatus('mandatory')
lserTapeLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTapeLabel.setStatus('mandatory')
lserTapeType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTapeType.setStatus('mandatory')
lserTapeLocationElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTapeLocationElementID.setStatus('mandatory')
lserTapeHostAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserTapeHostAccessible.setStatus('mandatory')
lserCellCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellCount.setStatus('mandatory')
lserCellTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2), )
if mibBuilder.loadTexts: lserCellTable.setStatus('mandatory')
lserCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserCellIndex"))
if mibBuilder.loadTexts: lserCellEntry.setStatus('mandatory')
lserCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellIndex.setStatus('mandatory')
lserCellElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellElementID.setStatus('mandatory')
lserCellHostAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellHostAccessible.setStatus('mandatory')
lserCellContentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellContentStatus.setStatus('mandatory')
lserCellContentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellContentLabel.setStatus('mandatory')
lserCellContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellContentType.setStatus('mandatory')
lserCellGetRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellGetRetryCount.setStatus('mandatory')
lserCellPutRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserCellPutRetryCount.setStatus('mandatory')
lserStorageFreeCells = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserStorageFreeCells.setStatus('mandatory')
lserPlayCellCount = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPlayCellCount.setStatus('mandatory')
lserPlayCellTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2), )
if mibBuilder.loadTexts: lserPlayCellTable.setStatus('mandatory')
lserPlayCellEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserPlayCellIndex"))
if mibBuilder.loadTexts: lserPlayCellEntry.setStatus('mandatory')
lserPlayCellIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPlayCellIndex.setStatus('mandatory')
lserPlayCellElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPlayCellElementID.setStatus('mandatory')
lserPlayCellContentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPlayCellContentStatus.setStatus('mandatory')
lserPlayCellContentLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPlayCellContentLabel.setStatus('mandatory')
lserPlayCellContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 9, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserPlayCellContentType.setStatus('mandatory')
lserHdwNumTempSensors = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwNumTempSensors.setStatus('mandatory')
lserHdwTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2), )
if mibBuilder.loadTexts: lserHdwTempSensorTable.setStatus('mandatory')
lserHdwTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserHdwTempSensorIndex"))
if mibBuilder.loadTexts: lserHdwTempSensorEntry.setStatus('mandatory')
lserHdwTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwTempSensorIndex.setStatus('mandatory')
lserHdwTempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwTempSensorName.setStatus('mandatory')
lserHdwTempSensorCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwTempSensorCurrentTemp.setStatus('mandatory')
lserHdwTempSensorHighTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwTempSensorHighTemp.setStatus('mandatory')
lserHdwTempSensorWarnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserHdwTempSensorWarnThreshold.setStatus('mandatory')
lserHdwTempSensorFailThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lserHdwTempSensorFailThreshold.setStatus('mandatory')
lserHdwNumFans = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwNumFans.setStatus('mandatory')
lserHdwFanTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 4), )
if mibBuilder.loadTexts: lserHdwFanTable.setStatus('mandatory')
lserHdwFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 4, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserHdwFanIndex"))
if mibBuilder.loadTexts: lserHdwFanEntry.setStatus('mandatory')
lserHdwFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwFanIndex.setStatus('mandatory')
lserHdwFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwFanName.setStatus('mandatory')
lserHdwFanOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwFanOperational.setStatus('mandatory')
lserHdwNumSupplies = MibScalar((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwNumSupplies.setStatus('mandatory')
lserHdwSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 6), )
if mibBuilder.loadTexts: lserHdwSupplyTable.setStatus('mandatory')
lserHdwSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 6, 1), ).setIndexNames((0, "LSERIES-TAPE-LIBRARY-MIB", "lserHdwSupplyIndex"))
if mibBuilder.loadTexts: lserHdwSupplyEntry.setStatus('mandatory')
lserHdwSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwSupplyIndex.setStatus('mandatory')
lserHdwSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwSupplyName.setStatus('mandatory')
lserHdwSupplyInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notinstalled", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwSupplyInstalled.setStatus('mandatory')
lserHdwSupplyOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 1211, 1, 12, 10, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lserHdwSupplyOperational.setStatus('mandatory')
mibBuilder.exportSymbols("LSERIES-TAPE-LIBRARY-MIB", lserDriveVersion=lserDriveVersion, lserDriveFibrePortBPortSpeed=lserDriveFibrePortBPortSpeed, lserPassThru=lserPassThru, lserPtpState=lserPtpState, lserLibStatsNumLabelReads=lserLibStatsNumLabelReads, lserCapUsagePut11to15=lserCapUsagePut11to15, lserLibStats5min226to250=lserLibStats5min226to250, lserAgentTrapSinkTableIndex=lserAgentTrapSinkTableIndex, lserPlayCellContentStatus=lserPlayCellContentStatus, lserPtpTable=lserPtpTable, lserCapEntry=lserCapEntry, lserLibNetworkGateway=lserLibNetworkGateway, lserCapUsagePut3=lserCapUsagePut3, lserCapUsagePutIdle=lserCapUsagePutIdle, lserCapUsagePut1=lserCapUsagePut1, lserAgentURL=lserAgentURL, lserLibLogTable=lserLibLogTable, lserLibLogMechanism=lserLibLogMechanism, lserDriveFibrePortBPortEnabled=lserDriveFibrePortBPortEnabled, lserPtpFirmwareVersion=lserPtpFirmwareVersion, lserTrapPtpStatusCheck=lserTrapPtpStatusCheck, lserPlayCellContentType=lserPlayCellContentType, lserLibConfigPassword=lserLibConfigPassword, lserLibStatsNumGetRetries=lserLibStatsNumGetRetries, lserDriveFibreCount=lserDriveFibreCount, lserLibDateMonth=lserLibDateMonth, lserAgent=lserAgent, lserLibStats5min76to100=lserLibStats5min76to100, lserDriveElementID=lserDriveElementID, lserLibDateYear=lserLibDateYear, lserDriveFibrePortAPortEnabled=lserDriveFibrePortAPortEnabled, lserCapUsagePut2=lserCapUsagePut2, lserAgentTrapSinkClearEntry=lserAgentTrapSinkClearEntry, lserTrapText=lserTrapText, lserLibLocatCity=lserLibLocatCity, lserLibCleaning=lserLibCleaning, lserLibCfgNumDriveColumns=lserLibCfgNumDriveColumns, lserLibCleanWarnIndex=lserLibCleanWarnIndex, lserPtpPartNumber=lserPtpPartNumber, lserCellEntry=lserCellEntry, lserLibStats15min401to450=lserLibStats15min401to450, lserLibPersonModel=lserLibPersonModel, lserLibLogClearEntry=lserLibLogClearEntry, lserDriveFibreTable=lserDriveFibreTable, lserPlayground=lserPlayground, lserLibLog=lserLibLog, lserCapUsagePut4=lserCapUsagePut4, lserCellPutRetryCount=lserCellPutRetryCount, lserCapUsagePut16to20=lserCapUsagePut16to20, lserHdwFanTable=lserHdwFanTable, lserLibStats15minuteSample=lserLibStats15minuteSample, lserLibStats15min351to400=lserLibStats15min351to400, lserCapCount=lserCapCount, lserStorageFreeCells=lserStorageFreeCells, lserTrapSeverity=lserTrapSeverity, lserCapUsagePutSampleCount=lserCapUsagePutSampleCount, lserTapeLabel=lserTapeLabel, lserLibStats5min151to175=lserLibStats5min151to175, lserLibLogClear=lserLibLogClear, lserDriveFibrePortBAddressingMode=lserDriveFibrePortBAddressingMode, lserDriveColInLib=lserDriveColInLib, lserLibCfgMaxDriveAddr=lserLibCfgMaxDriveAddr, lserMediaErrorCount=lserMediaErrorCount, lserPlayCellCount=lserPlayCellCount, lserDriveCellStatusEnum=lserDriveCellStatusEnum, lserHdwFanIndex=lserHdwFanIndex, lserInventory=lserInventory, lserCapTable=lserCapTable, lserLibCfgMinHandAddr=lserLibCfgMinHandAddr, lserLibDate=lserLibDate, lserPtpCompLibModelName=lserPtpCompLibModelName, lserTapeEntry=lserTapeEntry, lserLibVersion=lserLibVersion, LserSnmpPort=LserSnmpPort, lserDriveFibreEntry=lserDriveFibreEntry, lserLibVersionFibre=lserLibVersionFibre, lserStorage=lserStorage, lserCleanCartLabel=lserCleanCartLabel, lserHdwTempSensorHighTemp=lserHdwTempSensorHighTemp, lserLibVersionFirmRev=lserLibVersionFirmRev, lserPlayCellTable=lserPlayCellTable, lserAgentBootDate=lserAgentBootDate, LserDeviceStatus=LserDeviceStatus, lserMediaErrorDriveSerialNum=lserMediaErrorDriveSerialNum, lserTrapInformation=lserTrapInformation, lserLibStats15min51to75=lserLibStats15min51to75, lserLibStats5min201to225=lserLibStats5min201to225, lserTrap=lserTrap, lserDriveFibreIndex=lserDriveFibreIndex, lserLibNetworkName=lserLibNetworkName, lserLibCfgMaxCapAddr=lserLibCfgMaxCapAddr, lserHdwSupplyIndex=lserHdwSupplyIndex, lserPtpCompLibSerialNumber=lserPtpCompLibSerialNumber, lserTrapLibStatusCheck=lserTrapLibStatusCheck, lserLibConfig=lserLibConfig, lserDriveCellStatusText=lserDriveCellStatusText, lserLibStatsGlobalClear=lserLibStatsGlobalClear, lserLibLogFscNumber=lserLibLogFscNumber, lserDriveVendor=lserDriveVendor, lserCapUsagePut5=lserCapUsagePut5, lserDriveTable=lserDriveTable, lserLibMediaErrorEntry=lserLibMediaErrorEntry, lserMediaErrorDateTime=lserMediaErrorDateTime, lserCellCount=lserCellCount, lserLibStatusEnum=lserLibStatusEnum, lserTapeCount=lserTapeCount, lseriesTapeLibrary=lseriesTapeLibrary, lserLibLocation=lserLibLocation, lserPtpCompLibNetworkName=lserPtpCompLibNetworkName, lserLibStats5minSampleCount=lserLibStats5minSampleCount, lserLibLogText=lserLibLogText, lserLibMediaErrorEnum=lserLibMediaErrorEnum, lserDriveState=lserDriveState, lserPtpFirmwareDate=lserPtpFirmwareDate, lserPtpStatusEnum=lserPtpStatusEnum, lserHdwSupplyOperational=lserHdwSupplyOperational, lserLibCfgNumDrives=lserLibCfgNumDrives, lserPtpCount=lserPtpCount, lserCellHostAccessible=lserCellHostAccessible, lserLibStats15min76to100=lserLibStats15min76to100, lserCapUsageGet2=lserCapUsageGet2, lserLibStats15min501to550=lserLibStats15min501to550, lserPtpInoperativeCount=lserPtpInoperativeCount, lserLibrary=lserLibrary, lserLibCfgNumCapColumns=lserLibCfgNumCapColumns, lserLibStatsNumTargetRetries=lserLibStatsNumTargetRetries, LserSnmpTrapPort=LserSnmpTrapPort, lserDriveCellContentLabel=lserDriveCellContentLabel, lserTrapError=lserTrapError, lserLibStats15min551to600=lserLibStats15min551to600, lserTrapPtpStatusGood=lserTrapPtpStatusGood, lserPtpSoftwareResetCount=lserPtpSoftwareResetCount, lserPlayCellContentLabel=lserPlayCellContentLabel, lserHdwTempSensorIndex=lserHdwTempSensorIndex, lserLibLogSummary=lserLibLogSummary, lserHdwTempSensorName=lserHdwTempSensorName, lserDriveFibrePortCount=lserDriveFibrePortCount, lserTrapDrvStatusGood=lserTrapDrvStatusGood, lserCellElementID=lserCellElementID, lserLibCleanWarnEntry=lserLibCleanWarnEntry, lserLibVersionHardware=lserLibVersionHardware, lserLibNetworkIpAddr=lserLibNetworkIpAddr, lserLibCfgNumPtpColumns=lserLibCfgNumPtpColumns, lserLibStats15min651to700=lserLibStats15min651to700, lserLibDateSecond=lserLibDateSecond, lserDriveInterfaceType=lserDriveInterfaceType, lserPtpFailEmptyMotionCount=lserPtpFailEmptyMotionCount, lserLibStats15minSampleCount=lserLibStats15minSampleCount, lserLibCleanCartType=lserLibCleanCartType, lserMediaErrorTapeLabel=lserMediaErrorTapeLabel, lserCellGetRetryCount=lserCellGetRetryCount, lserCleanCartIndex=lserCleanCartIndex, lserLibNetworkDomainName=lserLibNetworkDomainName, lserTrapCapStatusCheck=lserTrapCapStatusCheck, lserCleanCartHostAccessible=lserCleanCartHostAccessible, lserLibVersionFirmDate=lserLibVersionFirmDate, lserLibStats15min201to225=lserLibStats15min201to225, lserMediaErrorOccurrenceCount=lserMediaErrorOccurrenceCount, lserDriveFibrePortBWWN=lserDriveFibrePortBWWN, lserLibCleanWarnTable=lserLibCleanWarnTable, storagetek=storagetek, lserLibLocatState=lserLibLocatState, lserLibNetworkNetmask=lserLibNetworkNetmask, lserDriveUsage30to60=lserDriveUsage30to60, lserLibCleanCartTable=lserLibCleanCartTable, lserLibPersonality=lserLibPersonality, lserLibStats15min1to25=lserLibStats15min1to25, lserCleanCartType=lserCleanCartType, lserLibStatsNumTargetReads=lserLibStatsNumTargetReads, products=products, lserLibStats5min176to200=lserLibStats5min176to200, lserDriveFibreNodeName=lserDriveFibreNodeName, lserCapUsagePut21toMax=lserCapUsagePut21toMax, lserDriveFibreSerialNum=lserDriveFibreSerialNum, lserDriveSerialNum=lserDriveSerialNum, lserLibStatsNumTargetFails=lserLibStatsNumTargetFails, lserCapUsageGet6to10=lserCapUsageGet6to10, lserLibStats5min601to650=lserLibStats5min601to650, lserTrapConfiguration=lserTrapConfiguration, lserDriveType=lserDriveType, lserLibLocatStreet=lserLibLocatStreet, lserLibNetworkSecondaryDNS=lserLibNetworkSecondaryDNS, lserHdwTempSensorCurrentTemp=lserHdwTempSensorCurrentTemp, lserLibCfgNumStorageCells=lserLibCfgNumStorageCells, lserLibStats5minuteSample=lserLibStats5minuteSample, lserLibStats15min451to500=lserLibStats15min451to500, lserLibStats5min1to25=lserLibStats5min1to25, lserDriveWWNEnabled=lserDriveWWNEnabled, lserLibMediaErrors=lserLibMediaErrors, lserPtpGoodFullMotionCount=lserPtpGoodFullMotionCount, lserLibStatsNumGetFails=lserLibStatsNumGetFails, lserAgentTrapSinkVersion=lserAgentTrapSinkVersion, lserLibCfgNumCapCells=lserLibCfgNumCapCells, lserLibCfgMinPtpAddr=lserLibCfgMinPtpAddr, lserCapUsageGet11to15=lserCapUsageGet11to15, lserCleanCartUsageCount=lserCleanCartUsageCount, lserDriveFirmwareVer=lserDriveFirmwareVer, lserLibLogFscCount=lserLibLogFscCount, lserCapStatusEnum=lserCapStatusEnum, lserTrapMediaStat=lserTrapMediaStat, lserLibCleanNumCarts=lserLibCleanNumCarts, lserHdwNumTempSensors=lserHdwNumTempSensors, lserLibCfgMaxHandAddr=lserLibCfgMaxHandAddr, lserLibFastLoad=lserLibFastLoad, lserLibStats15minOver700=lserLibStats15minOver700, lserDriveCodeVer=lserDriveCodeVer, lserDrives=lserDrives, lserLibStats5min101to125=lserLibStats5min101to125, lserTrapCapStatusGood=lserTrapCapStatusGood, lserLibCfgNumCaps=lserLibCfgNumCaps, lserHdwFanEntry=lserHdwFanEntry, lserHdwSupplyInstalled=lserHdwSupplyInstalled, lserPtpIndex=lserPtpIndex, lserLibPersonLibSize=lserLibPersonLibSize, lserAgentRevision=lserAgentRevision, lserDriveFibrePortAPortSpeed=lserDriveFibrePortAPortSpeed, lserAgentTrapSinkClear=lserAgentTrapSinkClear, LserDriveFibreAddressing=LserDriveFibreAddressing, lserCapUsagePut6to10=lserCapUsagePut6to10, lserPtpFailPartMotionCount=lserPtpFailPartMotionCount, lserHdwTempSensorTable=lserHdwTempSensorTable, lserLibStats15min251to300=lserLibStats15min251to300, lserTapeType=lserTapeType, lserAgentTrapSink=lserAgentTrapSink, lserLibLogDateTime=lserLibLogDateTime, lserLibStats15min151to175=lserLibStats15min151to175, lserLibHostInterface=lserLibHostInterface, lserCaps=lserCaps, lserLibCfgMaxPlayAddr=lserLibCfgMaxPlayAddr, lserCapAccessStateEnum=lserCapAccessStateEnum, lserPtpDoorOpenCount=lserPtpDoorOpenCount, lserDriveNumMounts=lserDriveNumMounts, lserLibCleanCartEntry=lserLibCleanCartEntry, lserPtpGoodPartMotionCount=lserPtpGoodPartMotionCount, lserCapUsageGetIdle=lserCapUsageGetIdle, lserLibLocatCountry=lserLibLocatCountry, lserLibNetworkEthAddr=lserLibNetworkEthAddr, lserLibStatsNumPutFails=lserLibStatsNumPutFails, lserDriveCount=lserDriveCount, lserLibStats15min601to650=lserLibStats15min601to650, lserCellContentLabel=lserCellContentLabel, lserLibVersionBootRev=lserLibVersionBootRev, lserTrapWarning=lserTrapWarning, lserLibLocatZip=lserLibLocatZip, lserLibLogTableIndex=lserLibLogTableIndex, lserHardwareMonitor=lserHardwareMonitor, lserLibCleanNumCartTypes=lserLibCleanNumCartTypes, lserHdwSupplyEntry=lserHdwSupplyEntry, lserCapUsageGet16to20=lserCapUsageGet16to20, lserPtpCompLibVendorName=lserPtpCompLibVendorName, lserLibStats15min226to250=lserLibStats15min226to250, LserCmdClear=LserCmdClear, lserDrivePutRetries=lserDrivePutRetries, lserHdwNumSupplies=lserHdwNumSupplies)
mibBuilder.exportSymbols("LSERIES-TAPE-LIBRARY-MIB", lserLibStatistics=lserLibStatistics, lserDriveUsageSampleCount=lserDriveUsageSampleCount, lserLibCfgNumPtps=lserLibCfgNumPtps, lserDriveEntry=lserDriveEntry, lserDriveUsage10to30=lserDriveUsage10to30, lserAgentTrapSinkEntry=lserAgentTrapSinkEntry, lserLibDateHour=lserLibDateHour, lserLibStats5min51to75=lserLibStats5min51to75, lserLibStats15min101to125=lserLibStats15min101to125, lserLibLocatDescr=lserLibLocatDescr, lserLibStats5min126to150=lserLibStats5min126to150, lserHdwTempSensorEntry=lserHdwTempSensorEntry, lserCellContentStatus=lserCellContentStatus, lserTrapCapStatusOpen=lserTrapCapStatusOpen, lserCapIndex=lserCapIndex, lserLibCfgMaxStorageAddr=lserLibCfgMaxStorageAddr, lserLibStats15min26to50=lserLibStats15min26to50, lserDriveIndex=lserDriveIndex, lserDriveUsageMinimum=lserDriveUsageMinimum, lserTapeTable=lserTapeTable, lserPtpEntry=lserPtpEntry, lserPlayCellEntry=lserPlayCellEntry, lserHdwTempSensorFailThreshold=lserHdwTempSensorFailThreshold, lserLibStats5min451to500=lserLibStats5min451to500, lserCellContentType=lserCellContentType, lserPtpSerialNumber=lserPtpSerialNumber, lserAgentTrapSinkPort=lserAgentTrapSinkPort, lserLibPersonVendor=lserLibPersonVendor, lserDriveGetRetries=lserDriveGetRetries, lserLibCfgNumPlayCells=lserLibCfgNumPlayCells, lserDriveStatusEnum=lserDriveStatusEnum, lserTapeLocationElementID=lserTapeLocationElementID, lserLibCfgNumPtpCells=lserLibCfgNumPtpCells, lserLibNetworkFibrePresent=lserLibNetworkFibrePresent, lserDriveFibrePortBLoopId=lserDriveFibrePortBLoopId, lserTapeIndex=lserTapeIndex, lserLibDateMinute=lserLibDateMinute, lserCellIndex=lserCellIndex, lserLibNetwork=lserLibNetwork, lserLibSerialNumber=lserLibSerialNumber, lserTapeHostAccessible=lserTapeHostAccessible, lserLibStats5min651to700=lserLibStats5min651to700, lserDriveUsageMaximum=lserDriveUsageMaximum, lserDriveFibrePortALoopId=lserDriveFibrePortALoopId, lserAgentPort=lserAgentPort, lserDriveCellContentType=lserDriveCellContentType, LserMediaErrorType=LserMediaErrorType, lserHdwFanName=lserHdwFanName, lserLibLogSeverity=lserLibLogSeverity, lserAgentTrapSinkNetName=lserAgentTrapSinkNetName, lserLibStkBaseModel=lserLibStkBaseModel, lserLibStats15min176to200=lserLibStats15min176to200, lserPtpCompLibFirmwareVersion=lserPtpCompLibFirmwareVersion, lserCapUsageGet5=lserCapUsageGet5, lserCapAccessibility=lserCapAccessibility, lserLibStatsNumLabelRetries=lserLibStatsNumLabelRetries, lserLibStats15min301to350=lserLibStats15min301to350, lserLibLogEntry=lserLibLogEntry, lserLibLocatContact=lserLibLocatContact, lserLibStats5min301to350=lserLibStats5min301to350, lserDriveIdleSeconds=lserDriveIdleSeconds, lserHdwTempSensorWarnThreshold=lserHdwTempSensorWarnThreshold, lserLibStats5min26to50=lserLibStats5min26to50, lserCapName=lserCapName, lserLibStatsNumMoves=lserLibStatsNumMoves, lserLibCfgMinCapAddr=lserLibCfgMinCapAddr, lserAgentTrapSinkTable=lserAgentTrapSinkTable, lserLibNetworkFibreID=lserLibNetworkFibreID, lserDriveCommandClean=lserDriveCommandClean, lserCleanCartLocationElementID=lserCleanCartLocationElementID, lserPtpGoodEmptyMotionCount=lserPtpGoodEmptyMotionCount, lserCapUsageGet4=lserCapUsageGet4, lserLibStats15minIdle=lserLibStats15minIdle, lserDriveFibrePortAAddressingMode=lserDriveFibrePortAAddressingMode, lserLibState=lserLibState, lserMediaErrorIndex=lserMediaErrorIndex, lserPtpCompLibFirmwareDate=lserPtpCompLibFirmwareDate, lserLibStats5minIdle=lserLibStats5minIdle, lserLibNetworkDhcpEnabled=lserLibNetworkDhcpEnabled, lserLibStats15min126to150=lserLibStats15min126to150, lserHdwFanOperational=lserHdwFanOperational, lserCapUsageGet3=lserCapUsageGet3, lserCapUsageGet21toMax=lserCapUsageGet21toMax, lserPtpCompLibNetworkIpAddr=lserPtpCompLibNetworkIpAddr, lserLibNetworkFibreNumPorts=lserLibNetworkFibreNumPorts, lserLibStats5min351to400=lserLibStats5min351to400, lserAgentCommunity=lserAgentCommunity, lserLibNetworkPrimaryDNS=lserLibNetworkPrimaryDNS, lserLibMediaErrorTable=lserLibMediaErrorTable, lserLibCfgNumPanels=lserLibCfgNumPanels, lserLibStats5min501to550=lserLibStats5min501to550, lserLibPersonWebEnabled=lserLibPersonWebEnabled, lserDriveRowInLib=lserDriveRowInLib, lserPlayCellElementID=lserPlayCellElementID, lserTrapAgentStart=lserTrapAgentStart, lserTrapLibStatusGood=lserTrapLibStatusGood, lserPtpInitializationCount=lserPtpInitializationCount, lserCapUsageGetSampleCount=lserCapUsageGetSampleCount, lserLibStatsNumEmptyReads=lserLibStatsNumEmptyReads, lserCapState=lserCapState, lserLibCfgMinPlayAddr=lserLibCfgMinPlayAddr, lserDriveUsage5min=lserDriveUsage5min, lserLibStatsNumPutRetries=lserLibStatsNumPutRetries, lserLibDateString=lserLibDateString, lserLibStats5min251to300=lserLibStats5min251to300, lserLibCleanWarnCount=lserLibCleanWarnCount, lserHdwNumFans=lserHdwNumFans, lserLibCfgMinStorageAddr=lserLibCfgMinStorageAddr, lserLibStatsNumMounts=lserLibStatsNumMounts, lserPtpGoodCommandCount=lserPtpGoodCommandCount, lserHdwSupplyName=lserHdwSupplyName, lserLibCfgNumHandCells=lserLibCfgNumHandCells, lserLibStatsNumLabelFails=lserLibStatsNumLabelFails, lserLibStats5min551to600=lserLibStats5min551to600, lserLibLogNumFscs=lserLibLogNumFscs, lserLibStatsNumIPL=lserLibStatsNumIPL, lserLibDateDay=lserLibDateDay, lserHdwSupplyTable=lserHdwSupplyTable, LserDriveFibreSpeed=LserDriveFibreSpeed, lserTrapDrvStatusCheck=lserTrapDrvStatusCheck, lserPtpCompLibPartNumber=lserPtpCompLibPartNumber, lserCapUsageGet1=lserCapUsageGet1, lserLibStatsNumDoorOpens=lserLibStatsNumDoorOpens, lserLibHostInterfaceType=lserLibHostInterfaceType, lserLibCfgMaxPtpAddr=lserLibCfgMaxPtpAddr, lserDriveID=lserDriveID, lserCellTable=lserCellTable, lserPlayCellIndex=lserPlayCellIndex, lserDriveUsage5to10=lserDriveUsage5to10, lserLibDeviceID=lserLibDeviceID, lserAgentTrapSinkNum=lserAgentTrapSinkNum, lserLibCfgMinDriveAddr=lserLibCfgMinDriveAddr, lserPtpFailCommandCount=lserPtpFailCommandCount, LserDriveFibreLoopId=LserDriveFibreLoopId, lserDriveFibrePortAWWN=lserDriveFibrePortAWWN, lserLibStats5minOver700=lserLibStats5minOver700, lserAgentTrapSinkCommunity=lserAgentTrapSinkCommunity, lserLibStats5min401to450=lserLibStats5min401to450, lserLibCleanEnabled=lserLibCleanEnabled, lserPtpFailFullMotionCount=lserPtpFailFullMotionCount)
