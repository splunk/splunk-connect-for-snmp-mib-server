#
# PySNMP MIB module DLINK-3100-vlan-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-vlan-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:34:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
rnd, = mibBuilder.importSymbols("DLINK-3100-MIB", "rnd")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType")
dot1qVlanIndex, PortList, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex", "PortList", "VlanIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, NotificationType, IpAddress, TimeTicks, MibIdentifier, Unsigned32, ModuleIdentity, ObjectIdentity, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "NotificationType", "IpAddress", "TimeTicks", "MibIdentifier", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Counter32", "Gauge32")
DisplayString, TextualConvention, MacAddress, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "TruthValue", "RowStatus")
vlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48))
vlan.setRevisions(('2006-02-12 00:00', '2004-04-19 00:00',))
if mibBuilder.loadTexts: vlan.setLastUpdated('200602120000Z')
if mibBuilder.loadTexts: vlan.setOrganization('Dlink, Inc.')
vlanMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMibVersion.setStatus('current')
vlanMaxTableNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxTableNumber.setStatus('current')
vlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 21), )
if mibBuilder.loadTexts: vlanNameTable.setStatus('current')
vlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 21, 1), ).setIndexNames((0, "DLINK-3100-vlan-MIB", "vlanNameName"))
if mibBuilder.loadTexts: vlanNameEntry.setStatus('current')
vlanNameName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 21, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNameName.setStatus('current')
vlanNameTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNameTag.setStatus('current')
vlanNameIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNameIfIndex.setStatus('current')
vlanPortModeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 22), )
if mibBuilder.loadTexts: vlanPortModeTable.setStatus('current')
vlanPortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 22, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPortModeEntry.setStatus('current')
vlanPortModeState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 22, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortModeState.setStatus('current')
vlanSendUnknownToAllPorts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 27), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSendUnknownToAllPorts.setStatus('current')
vlanDefaultSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanDefaultSupported.setStatus('current')
vlanDot1vSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanDot1vSupported.setStatus('current')
vlanDefaultEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultEnabled.setStatus('current')
vlanSpecialTagTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 33), )
if mibBuilder.loadTexts: vlanSpecialTagTable.setStatus('current')
vlanSpecialTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 33, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanSpecialTagEntry.setStatus('current')
vlanSpecialTagVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 33, 1, 1), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSpecialTagVID.setStatus('current')
vlanSpecialTagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 33, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanSpecialTagStatus.setStatus('current')
vlanSpecialTagCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 34), )
if mibBuilder.loadTexts: vlanSpecialTagCurrentTable.setStatus('current')
vlanSpecialTagCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 34, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanSpecialTagCurrentEntry.setStatus('current')
vlanSpecialTagCurrentVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 34, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpecialTagCurrentVID.setStatus('current')
vlanSpecialTagCurrentReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 34, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpecialTagCurrentReserved.setStatus('current')
vlanSpecialTagCurrentActive = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 34, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSpecialTagCurrentActive.setStatus('current')
vlanPrivateEdgeSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeSupported.setStatus('current')
vlanPrivateEdgeVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeVersion.setStatus('current')
vlanPrivateEdgeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 37), )
if mibBuilder.loadTexts: vlanPrivateEdgeTable.setStatus('current')
vlanPrivateEdgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 37, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPrivateEdgeEntry.setStatus('current')
vlanPrivateEdgeUplink = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateEdgeUplink.setStatus('current')
vlanPrivateEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 37, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateEdgeStatus.setStatus('current')
vlanDynamicVlanSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanDynamicVlanSupported.setStatus('current')
vlanDynamicVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 39), )
if mibBuilder.loadTexts: vlanDynamicVlanTable.setStatus('current')
vlanDynamicVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 39, 1), ).setIndexNames((0, "DLINK-3100-vlan-MIB", "vlanDynamicVlanMacAddress"))
if mibBuilder.loadTexts: vlanDynamicVlanEntry.setStatus('current')
vlanDynamicVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 39, 1, 1), MacAddress())
if mibBuilder.loadTexts: vlanDynamicVlanMacAddress.setStatus('current')
vlanDynamicVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 39, 1, 2), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDynamicVlanTag.setStatus('current')
vlanDynamicVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 39, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDynamicVlanStatus.setStatus('current')
vlanPortModeExtTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 40), )
if mibBuilder.loadTexts: vlanPortModeExtTable.setStatus('current')
vlanPortModeExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 40, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPortModeExtEntry.setStatus('current')
vlanPortModeExtState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 40, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortModeExtState.setStatus('current')
vlanPortModeExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 40, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortModeExtStatus.setStatus('current')
vlanPrivateSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 41), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateSupported.setStatus('current')
vlanPrivateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 42), )
if mibBuilder.loadTexts: vlanPrivateTable.setStatus('current')
vlanPrivateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 42, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanPrivateEntry.setStatus('current')
vlanPrivateIsolatedVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 42, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateIsolatedVlanTag.setStatus('current')
vlanPrivateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 42, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateStatus.setStatus('current')
vlanPrivateCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 43), )
if mibBuilder.loadTexts: vlanPrivateCommunityTable.setStatus('current')
vlanPrivateCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 43, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"), (0, "DLINK-3100-vlan-MIB", "vlanPrivateCommunityVlanTag"))
if mibBuilder.loadTexts: vlanPrivateCommunityEntry.setStatus('current')
vlanPrivateCommunityVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 43, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vlanPrivateCommunityVlanTag.setStatus('current')
vlanPrivateCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 43, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateCommunityStatus.setStatus('current')
vlanMulticastTvTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 44), )
if mibBuilder.loadTexts: vlanMulticastTvTable.setStatus('current')
vlanMulticastTvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 44, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanMulticastTvEntry.setStatus('current')
vlanMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 44, 1, 1), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMulticastTvVID.setStatus('current')
vlanMulticastTvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 44, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMulticastTvStatus.setStatus('current')
vlanMacBaseVlanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 45), )
if mibBuilder.loadTexts: vlanMacBaseVlanGroupTable.setStatus('current')
vlanMacBaseVlanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 45, 1), ).setIndexNames((0, "DLINK-3100-vlan-MIB", "vlanMacBaseVlanMacAddress"), (0, "DLINK-3100-vlan-MIB", "vlanMacBaseVlanMacMask"))
if mibBuilder.loadTexts: vlanMacBaseVlanGroupEntry.setStatus('current')
vlanMacBaseVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 45, 1, 1), MacAddress())
if mibBuilder.loadTexts: vlanMacBaseVlanMacAddress.setStatus('current')
vlanMacBaseVlanMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 45, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9, 48)))
if mibBuilder.loadTexts: vlanMacBaseVlanMacMask.setStatus('current')
vlanMacBaseVlanGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 45, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMacBaseVlanGroupId.setStatus('current')
vlanMacBaseVlanGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 45, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMacBaseVlanGroupRowStatus.setStatus('current')
vlanMacBaseVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 46), )
if mibBuilder.loadTexts: vlanMacBaseVlanPortTable.setStatus('current')
vlanMacBaseVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 46, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "DLINK-3100-vlan-MIB", "vlanMacBaseVlanPortGroupId"))
if mibBuilder.loadTexts: vlanMacBaseVlanPortEntry.setStatus('current')
vlanMacBaseVlanPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vlanMacBaseVlanPortGroupId.setStatus('current')
vlanMacBaseVlanPortGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 46, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMacBaseVlanPortGroupVid.setStatus('current')
vlanMacBaseVlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 46, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMacBaseVlanPortRowStatus.setStatus('current')
vlanPrivateEdgeGroupTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 47), )
if mibBuilder.loadTexts: vlanPrivateEdgeGroupTable.setStatus('current')
vlanPrivateEdgeGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 47, 1), ).setIndexNames((0, "DLINK-3100-vlan-MIB", "vlanPrivateEdgeGroupSource"))
if mibBuilder.loadTexts: vlanPrivateEdgeGroupEntry.setStatus('current')
vlanPrivateEdgeGroupSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 47, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupSource.setStatus('current')
vlanPrivateEdgeGroupUplink = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 47, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupUplink.setStatus('current')
vlanPrivateEdgeGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 47, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupStatus.setStatus('current')
vlanPrivateEdgeGroupIfIndexTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 48), )
if mibBuilder.loadTexts: vlanPrivateEdgeGroupIfIndexTable.setStatus('current')
vlanPrivateEdgeGroupIfIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 48, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanPrivateEdgeGroupIfIndexEntry.setStatus('current')
vlanPrivateEdgeGroupIfIndexID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 48, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupIfIndexID.setStatus('current')
vlanPrivateEdgeGroupIfIndexDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 48, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanPrivateEdgeGroupIfIndexDomainID.setStatus('current')
vlanSubnetRangeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 49), )
if mibBuilder.loadTexts: vlanSubnetRangeTable.setStatus('current')
vlanSubnetRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 49, 1), ).setIndexNames((0, "DLINK-3100-vlan-MIB", "vlanSubnetRangeAddr"), (0, "DLINK-3100-vlan-MIB", "vlanSubnetRangeMask"))
if mibBuilder.loadTexts: vlanSubnetRangeEntry.setStatus('current')
vlanSubnetRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 49, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSubnetRangeAddr.setStatus('current')
vlanSubnetRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 49, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanSubnetRangeMask.setStatus('current')
vlanSubnetRangeGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 49, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSubnetRangeGroupId.setStatus('current')
vlanSubnetRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 49, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSubnetRangeRowStatus.setStatus('current')
vlanSubnetPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 50), )
if mibBuilder.loadTexts: vlanSubnetPortTable.setStatus('current')
vlanSubnetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 50, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"), (0, "DLINK-3100-vlan-MIB", "vlanSubnetPortGroupId"))
if mibBuilder.loadTexts: vlanSubnetPortEntry.setStatus('current')
vlanSubnetPortGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vlanSubnetPortGroupId.setStatus('current')
vlanSubnetPortGroupVid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 50, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSubnetPortGroupVid.setStatus('current')
vlanSubnetPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 50, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanSubnetPortRowStatus.setStatus('current')
vlanTriplePlayTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 51), )
if mibBuilder.loadTexts: vlanTriplePlayTable.setStatus('current')
vlanTriplePlayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 51, 1), ).setIndexNames((0, "DLINK-3100-vlan-MIB", "vlanTriplePlayInnerVID"))
if mibBuilder.loadTexts: vlanTriplePlayEntry.setStatus('current')
vlanTriplePlayInnerVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 51, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vlanTriplePlayInnerVID.setStatus('current')
vlanTriplePlayMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 51, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTriplePlayMulticastTvVID.setStatus('current')
vlanTriplePlayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 51, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTriplePlayRowStatus.setStatus('current')
vlanTriplePlayMulticastTvTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 52), )
if mibBuilder.loadTexts: vlanTriplePlayMulticastTvTable.setStatus('current')
vlanTriplePlayMulticatTvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 52, 1), ).setIndexNames((0, "DLINK-3100-vlan-MIB", "vlanTriplePlayMulticastTvMulticastTvVID"))
if mibBuilder.loadTexts: vlanTriplePlayMulticatTvEntry.setStatus('current')
vlanTriplePlayMulticastTvMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 52, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTriplePlayMulticastTvMulticastTvVID.setStatus('current')
vlanTriplePlayMulticastTvMulticastTvPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 52, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTriplePlayMulticastTvMulticastTvPortList.setStatus('current')
vlanDefaultExtManagment = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 53), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultExtManagment.setStatus('current')
vlanVoice = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54))
vlanVoiceAgingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 43200)).clone(1440)).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceAgingTimeout.setStatus('current')
vlanVoiceTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 2), )
if mibBuilder.loadTexts: vlanVoiceTable.setStatus('current')
vlanVoiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 2, 1), ).setIndexNames((0, "Q-BRIDGE-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: vlanVoiceEntry.setStatus('current')
vlanVoicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoicePriority.setStatus('current')
vlanVoicePriorityRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanVoicePriorityRemark.setStatus('current')
vlanVoiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanVoiceRowStatus.setStatus('current')
vlanVoiceOUITable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 3), )
if mibBuilder.loadTexts: vlanVoiceOUITable.setStatus('current')
vlanVoiceOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 3, 1), ).setIndexNames((0, "DLINK-3100-vlan-MIB", "vlanVoiceOUIPrefix"))
if mibBuilder.loadTexts: vlanVoiceOUIEntry.setStatus('current')
vlanVoiceOUIPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3))
if mibBuilder.loadTexts: vlanVoiceOUIPrefix.setStatus('current')
vlanVoiceOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUIDescription.setStatus('current')
vlanVoiceOUIEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanVoiceOUIEntryRowStatus.setStatus('current')
vlanVoicePortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 4), )
if mibBuilder.loadTexts: vlanVoicePortTable.setStatus('current')
vlanVoicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: vlanVoicePortEntry.setStatus('current')
vlanVoicePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 4, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoicePortEnable.setStatus('current')
vlanVoicePortVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 4, 1, 2), VlanIndex().clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoicePortVlanIndex.setStatus('current')
vlanVoicePortSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 4, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoicePortSecure.setStatus('current')
vlanVoicePortCurrentMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVoicePortCurrentMembership.setStatus('current')
vlanVoiceOUISetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 54, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanVoiceOUISetToDefault.setStatus('current')
vlanDefault = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 55))
vlanDefaultTaggedPorts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 55, 1), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultTaggedPorts.setStatus('current')
vlanDefaultEnabledPorts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 55, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultEnabledPorts.setStatus('current')
vlanInetTriplePlayTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 56), )
if mibBuilder.loadTexts: vlanInetTriplePlayTable.setStatus('current')
vlanInetTriplePlayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 56, 1), ).setIndexNames((0, "DLINK-3100-vlan-MIB", "vlanInetTriplePlayInetAddressType"), (0, "DLINK-3100-vlan-MIB", "vlanTriplePlayInnerVID"))
if mibBuilder.loadTexts: vlanInetTriplePlayEntry.setStatus('current')
vlanInetTriplePlayInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 56, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInetTriplePlayInetAddressType.setStatus('current')
vlanInetTriplePlayInnerVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 56, 1, 2), VlanIndex())
if mibBuilder.loadTexts: vlanInetTriplePlayInnerVID.setStatus('current')
vlanInetTriplePlayMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 56, 1, 3), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInetTriplePlayMulticastTvVID.setStatus('current')
vlanInetTriplePlayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 56, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanInetTriplePlayRowStatus.setStatus('current')
vlanInetTriplePlayMulticastTvTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 57), )
if mibBuilder.loadTexts: vlanInetTriplePlayMulticastTvTable.setStatus('current')
vlanInetTriplePlayMulticatTvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 57, 1), ).setIndexNames((0, "DLINK-3100-vlan-MIB", "vlanTriplePlayMulticastTvMulticastTvVID"))
if mibBuilder.loadTexts: vlanInetTriplePlayMulticatTvEntry.setStatus('current')
vlanInetTriplePlayMulticastTvMulticastTvVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 57, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInetTriplePlayMulticastTvMulticastTvVID.setStatus('current')
vlanInetTriplePlayMulticastTvMulticastTvPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 57, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanInetTriplePlayMulticastTvMulticastTvPortList.setStatus('current')
vlanAsymmetricEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 48, 58), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAsymmetricEnabled.setStatus('current')
mibBuilder.exportSymbols("DLINK-3100-vlan-MIB", vlanPortModeState=vlanPortModeState, vlanDot1vSupported=vlanDot1vSupported, vlanVoicePortEntry=vlanVoicePortEntry, vlanMulticastTvTable=vlanMulticastTvTable, vlanVoice=vlanVoice, vlanPortModeEntry=vlanPortModeEntry, vlanMacBaseVlanMacAddress=vlanMacBaseVlanMacAddress, vlanSubnetPortEntry=vlanSubnetPortEntry, vlanTriplePlayMulticastTvMulticastTvPortList=vlanTriplePlayMulticastTvMulticastTvPortList, vlanSubnetRangeRowStatus=vlanSubnetRangeRowStatus, vlanPortModeExtStatus=vlanPortModeExtStatus, vlanPrivateCommunityVlanTag=vlanPrivateCommunityVlanTag, vlanMacBaseVlanPortGroupVid=vlanMacBaseVlanPortGroupVid, vlanDefaultExtManagment=vlanDefaultExtManagment, vlanVoicePortEnable=vlanVoicePortEnable, vlanSpecialTagStatus=vlanSpecialTagStatus, vlanPrivateEdgeStatus=vlanPrivateEdgeStatus, vlanTriplePlayMulticastTvTable=vlanTriplePlayMulticastTvTable, vlanPrivateEdgeGroupIfIndexID=vlanPrivateEdgeGroupIfIndexID, vlanPrivateEdgeGroupIfIndexEntry=vlanPrivateEdgeGroupIfIndexEntry, vlanVoiceOUIEntryRowStatus=vlanVoiceOUIEntryRowStatus, vlanSubnetPortGroupId=vlanSubnetPortGroupId, vlanInetTriplePlayRowStatus=vlanInetTriplePlayRowStatus, vlanSubnetRangeMask=vlanSubnetRangeMask, vlanNameTable=vlanNameTable, vlanSpecialTagVID=vlanSpecialTagVID, vlanTriplePlayEntry=vlanTriplePlayEntry, vlanPortModeExtState=vlanPortModeExtState, vlanDynamicVlanEntry=vlanDynamicVlanEntry, vlanSubnetPortTable=vlanSubnetPortTable, vlanPrivateEdgeGroupTable=vlanPrivateEdgeGroupTable, vlanVoiceOUIEntry=vlanVoiceOUIEntry, vlanPrivateEdgeSupported=vlanPrivateEdgeSupported, vlanVoicePortVlanIndex=vlanVoicePortVlanIndex, vlanPrivateEdgeGroupStatus=vlanPrivateEdgeGroupStatus, vlanNameIfIndex=vlanNameIfIndex, vlanSubnetPortRowStatus=vlanSubnetPortRowStatus, vlanPrivateIsolatedVlanTag=vlanPrivateIsolatedVlanTag, vlanVoiceTable=vlanVoiceTable, vlanSubnetPortGroupVid=vlanSubnetPortGroupVid, vlanInetTriplePlayTable=vlanInetTriplePlayTable, vlanPrivateEdgeGroupSource=vlanPrivateEdgeGroupSource, vlanDynamicVlanStatus=vlanDynamicVlanStatus, vlanSendUnknownToAllPorts=vlanSendUnknownToAllPorts, vlanMulticastTvVID=vlanMulticastTvVID, vlanMibVersion=vlanMibVersion, vlanPrivateStatus=vlanPrivateStatus, vlanVoiceRowStatus=vlanVoiceRowStatus, vlanPortModeExtEntry=vlanPortModeExtEntry, vlanTriplePlayRowStatus=vlanTriplePlayRowStatus, vlanInetTriplePlayMulticastTvMulticastTvVID=vlanInetTriplePlayMulticastTvMulticastTvVID, vlanMacBaseVlanGroupEntry=vlanMacBaseVlanGroupEntry, vlanTriplePlayMulticastTvVID=vlanTriplePlayMulticastTvVID, vlanInetTriplePlayMulticatTvEntry=vlanInetTriplePlayMulticatTvEntry, vlanTriplePlayMulticastTvMulticastTvVID=vlanTriplePlayMulticastTvMulticastTvVID, vlanPrivateEdgeGroupIfIndexTable=vlanPrivateEdgeGroupIfIndexTable, vlanVoicePortSecure=vlanVoicePortSecure, vlanDefaultEnabledPorts=vlanDefaultEnabledPorts, vlanVoiceOUIPrefix=vlanVoiceOUIPrefix, vlanInetTriplePlayMulticastTvVID=vlanInetTriplePlayMulticastTvVID, vlanInetTriplePlayMulticastTvTable=vlanInetTriplePlayMulticastTvTable, vlanDynamicVlanSupported=vlanDynamicVlanSupported, vlanDefaultSupported=vlanDefaultSupported, vlanPrivateEdgeTable=vlanPrivateEdgeTable, vlanPrivateEntry=vlanPrivateEntry, vlanInetTriplePlayInetAddressType=vlanInetTriplePlayInetAddressType, vlanNameName=vlanNameName, vlanVoicePriority=vlanVoicePriority, vlanNameEntry=vlanNameEntry, vlanDefault=vlanDefault, vlanPrivateEdgeGroupEntry=vlanPrivateEdgeGroupEntry, vlanSpecialTagCurrentEntry=vlanSpecialTagCurrentEntry, vlanMacBaseVlanGroupRowStatus=vlanMacBaseVlanGroupRowStatus, vlanVoiceOUIDescription=vlanVoiceOUIDescription, vlanVoiceOUISetToDefault=vlanVoiceOUISetToDefault, vlanDefaultEnabled=vlanDefaultEnabled, vlanSpecialTagCurrentTable=vlanSpecialTagCurrentTable, vlanPrivateEdgeEntry=vlanPrivateEdgeEntry, vlan=vlan, vlanPrivateCommunityEntry=vlanPrivateCommunityEntry, vlanDynamicVlanTag=vlanDynamicVlanTag, vlanMulticastTvStatus=vlanMulticastTvStatus, vlanSpecialTagEntry=vlanSpecialTagEntry, vlanVoicePriorityRemark=vlanVoicePriorityRemark, vlanSubnetRangeEntry=vlanSubnetRangeEntry, vlanSpecialTagCurrentReserved=vlanSpecialTagCurrentReserved, vlanVoiceAgingTimeout=vlanVoiceAgingTimeout, vlanNameTag=vlanNameTag, vlanPortModeTable=vlanPortModeTable, vlanMacBaseVlanGroupId=vlanMacBaseVlanGroupId, PYSNMP_MODULE_ID=vlan, vlanDynamicVlanTable=vlanDynamicVlanTable, vlanVoicePortTable=vlanVoicePortTable, vlanPrivateTable=vlanPrivateTable, vlanTriplePlayTable=vlanTriplePlayTable, vlanVoiceEntry=vlanVoiceEntry, vlanInetTriplePlayInnerVID=vlanInetTriplePlayInnerVID, vlanPrivateCommunityTable=vlanPrivateCommunityTable, vlanMacBaseVlanMacMask=vlanMacBaseVlanMacMask, vlanPortModeExtTable=vlanPortModeExtTable, vlanPrivateEdgeGroupUplink=vlanPrivateEdgeGroupUplink, vlanPrivateEdgeVersion=vlanPrivateEdgeVersion, vlanTriplePlayInnerVID=vlanTriplePlayInnerVID, vlanSpecialTagTable=vlanSpecialTagTable, vlanSubnetRangeTable=vlanSubnetRangeTable, vlanMacBaseVlanPortRowStatus=vlanMacBaseVlanPortRowStatus, vlanVoicePortCurrentMembership=vlanVoicePortCurrentMembership, vlanMaxTableNumber=vlanMaxTableNumber, vlanTriplePlayMulticatTvEntry=vlanTriplePlayMulticatTvEntry, vlanSubnetRangeAddr=vlanSubnetRangeAddr, vlanMacBaseVlanGroupTable=vlanMacBaseVlanGroupTable, vlanInetTriplePlayEntry=vlanInetTriplePlayEntry, vlanSpecialTagCurrentActive=vlanSpecialTagCurrentActive, vlanMacBaseVlanPortEntry=vlanMacBaseVlanPortEntry, vlanMacBaseVlanPortTable=vlanMacBaseVlanPortTable, vlanPrivateEdgeUplink=vlanPrivateEdgeUplink, vlanDefaultTaggedPorts=vlanDefaultTaggedPorts, vlanInetTriplePlayMulticastTvMulticastTvPortList=vlanInetTriplePlayMulticastTvMulticastTvPortList, vlanPrivateSupported=vlanPrivateSupported, vlanSubnetRangeGroupId=vlanSubnetRangeGroupId, vlanAsymmetricEnabled=vlanAsymmetricEnabled, vlanPrivateEdgeGroupIfIndexDomainID=vlanPrivateEdgeGroupIfIndexDomainID, vlanSpecialTagCurrentVID=vlanSpecialTagCurrentVID, vlanDynamicVlanMacAddress=vlanDynamicVlanMacAddress, vlanMacBaseVlanPortGroupId=vlanMacBaseVlanPortGroupId, vlanVoiceOUITable=vlanVoiceOUITable, vlanPrivateCommunityStatus=vlanPrivateCommunityStatus, vlanMulticastTvEntry=vlanMulticastTvEntry)
