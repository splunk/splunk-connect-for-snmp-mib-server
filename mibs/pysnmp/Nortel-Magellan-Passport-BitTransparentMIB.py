#
# PySNMP MIB module Nortel-Magellan-Passport-BitTransparentMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-BitTransparentMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:17:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
InterfaceIndex, StorageType, Unsigned32, RowStatus, Gauge32, Integer32, PassportCounter64, Counter32, DisplayString = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "InterfaceIndex", "StorageType", "Unsigned32", "RowStatus", "Gauge32", "Integer32", "PassportCounter64", "Counter32", "DisplayString")
EnterpriseDateAndTime, Link, AsciiString, Hex, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "EnterpriseDateAndTime", "Link", "AsciiString", "Hex", "NonReplicated")
components, passportMIBs = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "components", "passportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, NotificationType, IpAddress, TimeTicks, iso, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, ObjectIdentity, ModuleIdentity, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "IpAddress", "TimeTicks", "iso", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
bitTransparentMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 46))
btds = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81))
btdsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 1), )
if mibBuilder.loadTexts: btdsRowStatusTable.setStatus('mandatory')
btdsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"))
if mibBuilder.loadTexts: btdsRowStatusEntry.setStatus('mandatory')
btdsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsRowStatus.setStatus('mandatory')
btdsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsComponentName.setStatus('mandatory')
btdsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsStorageType.setStatus('mandatory')
btdsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: btdsIndex.setStatus('mandatory')
btdsCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 100), )
if mibBuilder.loadTexts: btdsCidDataTable.setStatus('mandatory')
btdsCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 100, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"))
if mibBuilder.loadTexts: btdsCidDataEntry.setStatus('mandatory')
btdsCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 100, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsCustomerIdentifier.setStatus('mandatory')
btdsIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 101), )
if mibBuilder.loadTexts: btdsIfEntryTable.setStatus('mandatory')
btdsIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 101, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"))
if mibBuilder.loadTexts: btdsIfEntryEntry.setStatus('mandatory')
btdsIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 101, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsIfAdminStatus.setStatus('mandatory')
btdsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 101, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsIfIndex.setStatus('mandatory')
btdsOperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 102), )
if mibBuilder.loadTexts: btdsOperStatusTable.setStatus('mandatory')
btdsOperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 102, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"))
if mibBuilder.loadTexts: btdsOperStatusEntry.setStatus('mandatory')
btdsSnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 102, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsSnmpOperStatus.setStatus('mandatory')
btdsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 103), )
if mibBuilder.loadTexts: btdsStateTable.setStatus('mandatory')
btdsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 103, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"))
if mibBuilder.loadTexts: btdsStateEntry.setStatus('mandatory')
btdsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 103, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsAdminState.setStatus('mandatory')
btdsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 103, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsOperationalState.setStatus('mandatory')
btdsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 103, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsUsageState.setStatus('mandatory')
btdsAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 103, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsAvailabilityStatus.setStatus('mandatory')
btdsProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 103, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsProceduralStatus.setStatus('mandatory')
btdsControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 103, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsControlStatus.setStatus('mandatory')
btdsAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 103, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsAlarmStatus.setStatus('mandatory')
btdsStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 103, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsStandbyStatus.setStatus('mandatory')
btdsUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 103, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsUnknownStatus.setStatus('mandatory')
btdsOperationalTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 105), )
if mibBuilder.loadTexts: btdsOperationalTable.setStatus('mandatory')
btdsOperationalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 105, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"))
if mibBuilder.loadTexts: btdsOperationalEntry.setStatus('mandatory')
btdsServiceFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 105, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsServiceFailureReason.setStatus('mandatory')
btdsFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2))
btdsFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 1), )
if mibBuilder.loadTexts: btdsFramerRowStatusTable.setStatus('mandatory')
btdsFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsFramerIndex"))
if mibBuilder.loadTexts: btdsFramerRowStatusEntry.setStatus('mandatory')
btdsFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerRowStatus.setStatus('mandatory')
btdsFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerComponentName.setStatus('mandatory')
btdsFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerStorageType.setStatus('mandatory')
btdsFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: btdsFramerIndex.setStatus('mandatory')
btdsFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 10), )
if mibBuilder.loadTexts: btdsFramerProvTable.setStatus('mandatory')
btdsFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsFramerIndex"))
if mibBuilder.loadTexts: btdsFramerProvEntry.setStatus('mandatory')
btdsFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsFramerInterfaceName.setStatus('mandatory')
btdsFramerChannelTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 11), )
if mibBuilder.loadTexts: btdsFramerChannelTable.setStatus('mandatory')
btdsFramerChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsFramerIndex"))
if mibBuilder.loadTexts: btdsFramerChannelEntry.setStatus('mandatory')
btdsFramerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("hdlc", 1), ("nrziHdlc", 2), ("universal", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsFramerProtocol.setStatus('mandatory')
btdsFramerNumOfIdleBytesToMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 11, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsFramerNumOfIdleBytesToMonitor.setStatus('mandatory')
btdsFramerIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 11, 1, 9), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsFramerIdlePattern.setStatus('mandatory')
btdsFramerTimeSlotAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unaligned", 0), ("frameAligned", 1))).clone('unaligned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsFramerTimeSlotAlignment.setStatus('mandatory')
btdsFramerInsertedOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 11, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 50)).clone(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsFramerInsertedOutputDelay.setStatus('mandatory')
btdsFramerBtdsCellSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("n44", 0), ("n84", 1))).clone('n44')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsFramerBtdsCellSize.setStatus('mandatory')
btdsFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 12), )
if mibBuilder.loadTexts: btdsFramerStateTable.setStatus('mandatory')
btdsFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsFramerIndex"))
if mibBuilder.loadTexts: btdsFramerStateEntry.setStatus('mandatory')
btdsFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerAdminState.setStatus('mandatory')
btdsFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerOperationalState.setStatus('mandatory')
btdsFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerUsageState.setStatus('mandatory')
btdsFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 13), )
if mibBuilder.loadTexts: btdsFramerStatsTable.setStatus('mandatory')
btdsFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsFramerIndex"))
if mibBuilder.loadTexts: btdsFramerStatsEntry.setStatus('mandatory')
btdsFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerFrmFromIf.setStatus('mandatory')
btdsFramerSuppressedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerSuppressedFrames.setStatus('mandatory')
btdsFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerFrmToIf.setStatus('mandatory')
btdsFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerLrcErrors.setStatus('mandatory')
btdsFramerFrmLostInNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerFrmLostInNetwork.setStatus('mandatory')
btdsFramerFrmUnderRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerFrmUnderRuns.setStatus('mandatory')
btdsFramerFrmDumped = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 2, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsFramerFrmDumped.setStatus('mandatory')
btdsPlc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3))
btdsPlcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 1), )
if mibBuilder.loadTexts: btdsPlcRowStatusTable.setStatus('mandatory')
btdsPlcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsPlcIndex"))
if mibBuilder.loadTexts: btdsPlcRowStatusEntry.setStatus('mandatory')
btdsPlcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsPlcRowStatus.setStatus('mandatory')
btdsPlcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsPlcComponentName.setStatus('mandatory')
btdsPlcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsPlcStorageType.setStatus('mandatory')
btdsPlcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: btdsPlcIndex.setStatus('mandatory')
btdsPlcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10), )
if mibBuilder.loadTexts: btdsPlcProvTable.setStatus('mandatory')
btdsPlcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsPlcIndex"))
if mibBuilder.loadTexts: btdsPlcProvEntry.setStatus('mandatory')
btdsPlcRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcRemoteName.setStatus('mandatory')
btdsPlcSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcSetupPriority.setStatus('mandatory')
btdsPlcHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcHoldingPriority.setStatus('mandatory')
btdsPlcRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcRequiredTxBandwidth.setStatus('mandatory')
btdsPlcRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(64000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcRequiredRxBandwidth.setStatus('mandatory')
btdsPlcRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7))).clone('video')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcRequiredTrafficType.setStatus('mandatory')
btdsPlcPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="f8")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcPermittedTrunkTypes.setStatus('mandatory')
btdsPlcRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcRequiredSecurity.setStatus('mandatory')
btdsPlcRequiredCustomerParm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcRequiredCustomerParm.setStatus('mandatory')
btdsPlcPathAttributeToMinimize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cost", 0), ("delay", 1))).clone('cost')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcPathAttributeToMinimize.setStatus('mandatory')
btdsPlcMaximumAcceptableCost = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1280)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcMaximumAcceptableCost.setStatus('mandatory')
btdsPlcMaximumAcceptableDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcMaximumAcceptableDelay.setStatus('mandatory')
btdsPlcEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcEmissionPriority.setStatus('mandatory')
btdsPlcDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcDiscardPriority.setStatus('mandatory')
btdsPlcPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcPathType.setStatus('mandatory')
btdsPlcPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1))).clone('reRoutePath')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcPathFailureAction.setStatus('mandatory')
btdsPlcBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1))).clone('bumpWhenNecessary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcBumpPreference.setStatus('mandatory')
btdsPlcOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcOptimization.setStatus('mandatory')
btdsPlcMpathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 262), )
if mibBuilder.loadTexts: btdsPlcMpathTable.setStatus('mandatory')
btdsPlcMpathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 262, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsPlcIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsPlcMpathIndex"))
if mibBuilder.loadTexts: btdsPlcMpathEntry.setStatus('mandatory')
btdsPlcMpathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 262, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9)))
if mibBuilder.loadTexts: btdsPlcMpathIndex.setStatus('mandatory')
btdsPlcMpathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 3, 262, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsPlcMpathValue.setStatus('mandatory')
btdsLCo = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4))
btdsLCoRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 1), )
if mibBuilder.loadTexts: btdsLCoRowStatusTable.setStatus('mandatory')
btdsLCoRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsLCoIndex"))
if mibBuilder.loadTexts: btdsLCoRowStatusEntry.setStatus('mandatory')
btdsLCoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoRowStatus.setStatus('mandatory')
btdsLCoComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoComponentName.setStatus('mandatory')
btdsLCoStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoStorageType.setStatus('mandatory')
btdsLCoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: btdsLCoIndex.setStatus('mandatory')
btdsLCoPathDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10), )
if mibBuilder.loadTexts: btdsLCoPathDataTable.setStatus('mandatory')
btdsLCoPathDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsLCoIndex"))
if mibBuilder.loadTexts: btdsLCoPathDataEntry.setStatus('mandatory')
btdsLCoState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("pathDown", 0), ("selectingRoute", 1), ("connecting", 2), ("pathUp", 3), ("pathDownRetrying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoState.setStatus('mandatory')
btdsLCoOverrideRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsLCoOverrideRemoteName.setStatus('mandatory')
btdsLCoEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("calling", 0), ("called", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoEnd.setStatus('mandatory')
btdsLCoCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoCostMetric.setStatus('mandatory')
btdsLCoDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoDelayMetric.setStatus('mandatory')
btdsLCoRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoRoundTripDelay.setStatus('mandatory')
btdsLCoSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoSetupPriority.setStatus('mandatory')
btdsLCoHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoHoldingPriority.setStatus('mandatory')
btdsLCoRequiredTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoRequiredTxBandwidth.setStatus('mandatory')
btdsLCoRequiredRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoRequiredRxBandwidth.setStatus('mandatory')
btdsLCoRequiredTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("voice", 0), ("data", 1), ("video", 2), ("trafficType1", 3), ("trafficType2", 4), ("trafficType3", 5), ("trafficType4", 6), ("trafficType5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoRequiredTrafficType.setStatus('mandatory')
btdsLCoPermittedTrunkTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoPermittedTrunkTypes.setStatus('mandatory')
btdsLCoRequiredSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoRequiredSecurity.setStatus('mandatory')
btdsLCoRequiredCustomerParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoRequiredCustomerParameter.setStatus('mandatory')
btdsLCoEmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoEmissionPriority.setStatus('mandatory')
btdsLCoDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoDiscardPriority.setStatus('mandatory')
btdsLCoPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("manual", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoPathType.setStatus('mandatory')
btdsLCoRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoRetryCount.setStatus('mandatory')
btdsLCoPathFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoPathFailureCount.setStatus('mandatory')
btdsLCoReasonForNoRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("none", 0), ("destinationNameTooLong", 1), ("destinationNotSpecified", 2), ("unknownDestinationName", 3), ("incorrectDestination", 4), ("incorrectDestinationEndPoint", 5), ("unknownSource", 6), ("unknownDestination", 7), ("sameNode", 8), ("routeCostTooMuch", 9), ("routesDelayTooLong", 10), ("attributesNotMet", 11), ("anError", 12), ("attributeProfileProblem", 13), ("manualPathIndexProblem", 14))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoReasonForNoRoute.setStatus('mandatory')
btdsLCoLastTearDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("none", 0), ("normalShutDown", 1), ("insufficientTxLcOrBandwidth", 2), ("insufficientRxLcOrBandwidth", 3), ("trunkFailure", 4), ("trunkCardFailure", 5), ("operatorForced", 6), ("lostLcnClash", 7), ("networkCongestion", 8), ("trunkNotFound", 9), ("farEndNotFound", 10), ("wrongModuleReached", 11), ("farEndBusy", 12), ("callLoopedBack", 13), ("unknownReason", 14), ("farEndNotReady", 15), ("remoteNameMismatch", 16), ("serviceTypeMismatch", 17), ("reconnectFromFarEnd", 18), ("bumped", 19), ("accessCardFailure", 20), ("optimized", 21), ("overrideRemoteName", 22), ("trunkOrFarEndDidNotSupportMode", 23))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoLastTearDownReason.setStatus('mandatory')
btdsLCoPathFailureAction = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnectConnection", 0), ("reRoutePath", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoPathFailureAction.setStatus('mandatory')
btdsLCoBumpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bumpWhenNecessary", 0), ("bumpToObtainBestRoute", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoBumpPreference.setStatus('mandatory')
btdsLCoOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoOptimization.setStatus('mandatory')
btdsLCoPathUpDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 10, 1, 25), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoPathUpDateTime.setStatus('mandatory')
btdsLCoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 11), )
if mibBuilder.loadTexts: btdsLCoStatsTable.setStatus('mandatory')
btdsLCoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsLCoIndex"))
if mibBuilder.loadTexts: btdsLCoStatsEntry.setStatus('mandatory')
btdsLCoPktsToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 11, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoPktsToNetwork.setStatus('mandatory')
btdsLCoBytesToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 11, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoBytesToNetwork.setStatus('mandatory')
btdsLCoPktsFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 11, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoPktsFromNetwork.setStatus('mandatory')
btdsLCoBytesFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 11, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoBytesFromNetwork.setStatus('mandatory')
btdsLCoPathTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 264), )
if mibBuilder.loadTexts: btdsLCoPathTable.setStatus('mandatory')
btdsLCoPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 264, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsLCoIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsLCoPathValue"))
if mibBuilder.loadTexts: btdsLCoPathEntry.setStatus('mandatory')
btdsLCoPathValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 4, 264, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsLCoPathValue.setStatus('mandatory')
btdsDpnss1 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5))
btdsDpnss1RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 1), )
if mibBuilder.loadTexts: btdsDpnss1RowStatusTable.setStatus('mandatory')
btdsDpnss1RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsDpnss1Index"))
if mibBuilder.loadTexts: btdsDpnss1RowStatusEntry.setStatus('mandatory')
btdsDpnss1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsDpnss1RowStatus.setStatus('mandatory')
btdsDpnss1ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1ComponentName.setStatus('mandatory')
btdsDpnss1StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1StorageType.setStatus('mandatory')
btdsDpnss1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: btdsDpnss1Index.setStatus('mandatory')
btdsDpnss1ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 10), )
if mibBuilder.loadTexts: btdsDpnss1ProvTable.setStatus('mandatory')
btdsDpnss1ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsDpnss1Index"))
if mibBuilder.loadTexts: btdsDpnss1ProvEntry.setStatus('mandatory')
btdsDpnss1TimeslotsX = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsDpnss1TimeslotsX.setStatus('mandatory')
btdsDpnss1VdcdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 12), )
if mibBuilder.loadTexts: btdsDpnss1VdcdTable.setStatus('mandatory')
btdsDpnss1VdcdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsDpnss1Index"))
if mibBuilder.loadTexts: btdsDpnss1VdcdEntry.setStatus('mandatory')
btdsDpnss1NewVoiceCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1NewVoiceCalls.setStatus('mandatory')
btdsDpnss1NewDataCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1NewDataCalls.setStatus('mandatory')
btdsDpnss1VoiceToData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1VoiceToData.setStatus('mandatory')
btdsDpnss1DataToVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1DataToVoice.setStatus('mandatory')
btdsDpnss1CallClears = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1CallClears.setStatus('mandatory')
btdsDpnss1FramesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 13), )
if mibBuilder.loadTexts: btdsDpnss1FramesTable.setStatus('mandatory')
btdsDpnss1FramesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsDpnss1Index"))
if mibBuilder.loadTexts: btdsDpnss1FramesEntry.setStatus('mandatory')
btdsDpnss1FrmProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1FrmProcessed.setStatus('mandatory')
btdsDpnss1FrmInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1FrmInvalid.setStatus('mandatory')
btdsDpnss1HdlcTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 14), )
if mibBuilder.loadTexts: btdsDpnss1HdlcTable.setStatus('mandatory')
btdsDpnss1HdlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsDpnss1Index"))
if mibBuilder.loadTexts: btdsDpnss1HdlcEntry.setStatus('mandatory')
btdsDpnss1FrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1FrmFromIf.setStatus('mandatory')
btdsDpnss1Aborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1Aborts.setStatus('mandatory')
btdsDpnss1CrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1CrcErrors.setStatus('mandatory')
btdsDpnss1NonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1NonOctetErrors.setStatus('mandatory')
btdsDpnss1Overruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1Overruns.setStatus('mandatory')
btdsDpnss1LargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1LargeFrmErrors.setStatus('mandatory')
btdsDpnss1TSlotTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 286), )
if mibBuilder.loadTexts: btdsDpnss1TSlotTable.setStatus('mandatory')
btdsDpnss1TSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 286, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsDpnss1Index"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsDpnss1TSlotIndex"))
if mibBuilder.loadTexts: btdsDpnss1TSlotEntry.setStatus('mandatory')
btdsDpnss1TSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 286, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: btdsDpnss1TSlotIndex.setStatus('mandatory')
btdsDpnss1TSlotValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 5, 286, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("voice", 1), ("data", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsDpnss1TSlotValue.setStatus('mandatory')
btdsMcdn = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6))
btdsMcdnRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 1), )
if mibBuilder.loadTexts: btdsMcdnRowStatusTable.setStatus('mandatory')
btdsMcdnRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsMcdnIndex"))
if mibBuilder.loadTexts: btdsMcdnRowStatusEntry.setStatus('mandatory')
btdsMcdnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsMcdnRowStatus.setStatus('mandatory')
btdsMcdnComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnComponentName.setStatus('mandatory')
btdsMcdnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnStorageType.setStatus('mandatory')
btdsMcdnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: btdsMcdnIndex.setStatus('mandatory')
btdsMcdnProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 10), )
if mibBuilder.loadTexts: btdsMcdnProvTable.setStatus('mandatory')
btdsMcdnProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsMcdnIndex"))
if mibBuilder.loadTexts: btdsMcdnProvEntry.setStatus('mandatory')
btdsMcdnAdjPbxSide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("slave", 0), ("master", 1))).clone('slave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btdsMcdnAdjPbxSide.setStatus('mandatory')
btdsMcdnVdcdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 12), )
if mibBuilder.loadTexts: btdsMcdnVdcdTable.setStatus('mandatory')
btdsMcdnVdcdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsMcdnIndex"))
if mibBuilder.loadTexts: btdsMcdnVdcdEntry.setStatus('mandatory')
btdsMcdnNewVoiceCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnNewVoiceCalls.setStatus('mandatory')
btdsMcdnNewDataCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnNewDataCalls.setStatus('mandatory')
btdsMcdnVoiceToData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnVoiceToData.setStatus('mandatory')
btdsMcdnDataToVoice = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnDataToVoice.setStatus('mandatory')
btdsMcdnCallClears = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnCallClears.setStatus('mandatory')
btdsMcdnFramesTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 13), )
if mibBuilder.loadTexts: btdsMcdnFramesTable.setStatus('mandatory')
btdsMcdnFramesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsMcdnIndex"))
if mibBuilder.loadTexts: btdsMcdnFramesEntry.setStatus('mandatory')
btdsMcdnFrmProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnFrmProcessed.setStatus('mandatory')
btdsMcdnFrmInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnFrmInvalid.setStatus('mandatory')
btdsMcdnHdlcTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 14), )
if mibBuilder.loadTexts: btdsMcdnHdlcTable.setStatus('mandatory')
btdsMcdnHdlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsMcdnIndex"))
if mibBuilder.loadTexts: btdsMcdnHdlcEntry.setStatus('mandatory')
btdsMcdnFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnFrmFromIf.setStatus('mandatory')
btdsMcdnAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnAborts.setStatus('mandatory')
btdsMcdnCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnCrcErrors.setStatus('mandatory')
btdsMcdnNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnNonOctetErrors.setStatus('mandatory')
btdsMcdnOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnOverruns.setStatus('mandatory')
btdsMcdnLargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnLargeFrmErrors.setStatus('mandatory')
btdsMcdnTSlotTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 286), )
if mibBuilder.loadTexts: btdsMcdnTSlotTable.setStatus('mandatory')
btdsMcdnTSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 286, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsMcdnIndex"), (0, "Nortel-Magellan-Passport-BitTransparentMIB", "btdsMcdnTSlotIndex"))
if mibBuilder.loadTexts: btdsMcdnTSlotEntry.setStatus('mandatory')
btdsMcdnTSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 286, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: btdsMcdnTSlotIndex.setStatus('mandatory')
btdsMcdnTSlotValue = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 81, 6, 286, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("voice", 1), ("data", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btdsMcdnTSlotValue.setStatus('mandatory')
bitTransparentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 46, 1))
bitTransparentGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 46, 1, 5))
bitTransparentGroupBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 46, 1, 5, 2))
bitTransparentGroupBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 46, 1, 5, 2, 2))
bitTransparentCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 46, 3))
bitTransparentCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 46, 3, 5))
bitTransparentCapabilitiesBE01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 46, 3, 5, 2))
bitTransparentCapabilitiesBE01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 46, 3, 5, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-BitTransparentMIB", btdsPlcPathFailureAction=btdsPlcPathFailureAction, btdsFramerRowStatus=btdsFramerRowStatus, btdsPlcMaximumAcceptableCost=btdsPlcMaximumAcceptableCost, btdsMcdnFrmInvalid=btdsMcdnFrmInvalid, btdsFramerInterfaceName=btdsFramerInterfaceName, btdsRowStatusEntry=btdsRowStatusEntry, btdsDpnss1=btdsDpnss1, btdsFramerComponentName=btdsFramerComponentName, btdsMcdnIndex=btdsMcdnIndex, btdsLCoDiscardPriority=btdsLCoDiscardPriority, btdsPlcRowStatus=btdsPlcRowStatus, btdsPlcIndex=btdsPlcIndex, btdsFramerOperationalState=btdsFramerOperationalState, btdsFramerStatsTable=btdsFramerStatsTable, btdsDpnss1TSlotIndex=btdsDpnss1TSlotIndex, btdsFramerLrcErrors=btdsFramerLrcErrors, btdsLCoLastTearDownReason=btdsLCoLastTearDownReason, btdsMcdnStorageType=btdsMcdnStorageType, btdsFramerFrmFromIf=btdsFramerFrmFromIf, btdsMcdnNewDataCalls=btdsMcdnNewDataCalls, btdsLCoState=btdsLCoState, btdsUnknownStatus=btdsUnknownStatus, btdsAvailabilityStatus=btdsAvailabilityStatus, btdsPlcRowStatusTable=btdsPlcRowStatusTable, btdsFramerChannelEntry=btdsFramerChannelEntry, btdsPlcEmissionPriority=btdsPlcEmissionPriority, btdsLCoRetryCount=btdsLCoRetryCount, btdsDpnss1ComponentName=btdsDpnss1ComponentName, btdsLCoBytesFromNetwork=btdsLCoBytesFromNetwork, btdsMcdnNonOctetErrors=btdsMcdnNonOctetErrors, btdsPlcMpathTable=btdsPlcMpathTable, btdsFramerIndex=btdsFramerIndex, btdsLCoRowStatusTable=btdsLCoRowStatusTable, btdsDpnss1Overruns=btdsDpnss1Overruns, btdsDpnss1TSlotEntry=btdsDpnss1TSlotEntry, btdsMcdnVoiceToData=btdsMcdnVoiceToData, btdsLCoRequiredTxBandwidth=btdsLCoRequiredTxBandwidth, btdsLCoPathType=btdsLCoPathType, btdsDpnss1VoiceToData=btdsDpnss1VoiceToData, btdsStandbyStatus=btdsStandbyStatus, btdsFramerRowStatusTable=btdsFramerRowStatusTable, btdsPlcRequiredCustomerParm=btdsPlcRequiredCustomerParm, btdsControlStatus=btdsControlStatus, btdsDpnss1HdlcTable=btdsDpnss1HdlcTable, bitTransparentCapabilities=bitTransparentCapabilities, btdsDpnss1FramesTable=btdsDpnss1FramesTable, btdsMcdnLargeFrmErrors=btdsMcdnLargeFrmErrors, btdsLCoPermittedTrunkTypes=btdsLCoPermittedTrunkTypes, btdsLCoStatsTable=btdsLCoStatsTable, btdsMcdnRowStatusTable=btdsMcdnRowStatusTable, btdsFramerStateTable=btdsFramerStateTable, btdsPlcRequiredTxBandwidth=btdsPlcRequiredTxBandwidth, btdsPlcMaximumAcceptableDelay=btdsPlcMaximumAcceptableDelay, btdsLCoOverrideRemoteName=btdsLCoOverrideRemoteName, btdsLCoDelayMetric=btdsLCoDelayMetric, btdsDpnss1Index=btdsDpnss1Index, btdsFramerProtocol=btdsFramerProtocol, btdsPlcRemoteName=btdsPlcRemoteName, btdsAlarmStatus=btdsAlarmStatus, btdsPlcProvTable=btdsPlcProvTable, btdsFramerProvEntry=btdsFramerProvEntry, btdsLCoPathDataEntry=btdsLCoPathDataEntry, btdsLCoRequiredTrafficType=btdsLCoRequiredTrafficType, btdsPlcPathType=btdsPlcPathType, btdsLCoReasonForNoRoute=btdsLCoReasonForNoRoute, btdsDpnss1NonOctetErrors=btdsDpnss1NonOctetErrors, btdsFramerStateEntry=btdsFramerStateEntry, bitTransparentCapabilitiesBE=bitTransparentCapabilitiesBE, btdsCustomerIdentifier=btdsCustomerIdentifier, btdsCidDataEntry=btdsCidDataEntry, btdsLCoPathFailureCount=btdsLCoPathFailureCount, btdsDpnss1TSlotValue=btdsDpnss1TSlotValue, btdsMcdnFrmFromIf=btdsMcdnFrmFromIf, btdsFramerSuppressedFrames=btdsFramerSuppressedFrames, btdsLCoPktsFromNetwork=btdsLCoPktsFromNetwork, btdsLCoPktsToNetwork=btdsLCoPktsToNetwork, btdsPlcRowStatusEntry=btdsPlcRowStatusEntry, btdsOperationalTable=btdsOperationalTable, btdsLCoPathEntry=btdsLCoPathEntry, btdsDpnss1FrmInvalid=btdsDpnss1FrmInvalid, btdsDpnss1CrcErrors=btdsDpnss1CrcErrors, btdsFramerInsertedOutputDelay=btdsFramerInsertedOutputDelay, btdsAdminState=btdsAdminState, btdsLCoEmissionPriority=btdsLCoEmissionPriority, btdsOperStatusTable=btdsOperStatusTable, btdsMcdn=btdsMcdn, btdsLCoStorageType=btdsLCoStorageType, btdsMcdnAdjPbxSide=btdsMcdnAdjPbxSide, btdsDpnss1RowStatus=btdsDpnss1RowStatus, btdsFramerProvTable=btdsFramerProvTable, btdsLCoOptimization=btdsLCoOptimization, btdsMcdnAborts=btdsMcdnAborts, btdsIfEntryEntry=btdsIfEntryEntry, btdsMcdnTSlotTable=btdsMcdnTSlotTable, btds=btds, btdsLCoPathTable=btdsLCoPathTable, btdsFramerStorageType=btdsFramerStorageType, btdsLCoRowStatus=btdsLCoRowStatus, btdsMcdnRowStatus=btdsMcdnRowStatus, bitTransparentCapabilitiesBE01A=bitTransparentCapabilitiesBE01A, btdsDpnss1CallClears=btdsDpnss1CallClears, btdsFramerFrmDumped=btdsFramerFrmDumped, btdsDpnss1NewVoiceCalls=btdsDpnss1NewVoiceCalls, btdsFramerNumOfIdleBytesToMonitor=btdsFramerNumOfIdleBytesToMonitor, btdsDpnss1TSlotTable=btdsDpnss1TSlotTable, btdsLCoPathValue=btdsLCoPathValue, btdsMcdnRowStatusEntry=btdsMcdnRowStatusEntry, btdsLCoRequiredSecurity=btdsLCoRequiredSecurity, btdsMcdnProvTable=btdsMcdnProvTable, btdsMcdnNewVoiceCalls=btdsMcdnNewVoiceCalls, btdsStorageType=btdsStorageType, btdsMcdnFramesTable=btdsMcdnFramesTable, btdsFramerBtdsCellSize=btdsFramerBtdsCellSize, btdsPlcMpathValue=btdsPlcMpathValue, btdsDpnss1StorageType=btdsDpnss1StorageType, btdsMcdnComponentName=btdsMcdnComponentName, btdsMcdnTSlotValue=btdsMcdnTSlotValue, btdsPlcRequiredRxBandwidth=btdsPlcRequiredRxBandwidth, btdsDpnss1Aborts=btdsDpnss1Aborts, btdsDpnss1VdcdTable=btdsDpnss1VdcdTable, bitTransparentCapabilitiesBE01=bitTransparentCapabilitiesBE01, btdsDpnss1FrmFromIf=btdsDpnss1FrmFromIf, btdsLCoRequiredCustomerParameter=btdsLCoRequiredCustomerParameter, btdsLCoPathFailureAction=btdsLCoPathFailureAction, btdsMcdnFramesEntry=btdsMcdnFramesEntry, btdsLCoComponentName=btdsLCoComponentName, btdsIndex=btdsIndex, bitTransparentGroup=bitTransparentGroup, btdsFramerTimeSlotAlignment=btdsFramerTimeSlotAlignment, btdsLCoPathDataTable=btdsLCoPathDataTable, bitTransparentGroupBE01A=bitTransparentGroupBE01A, btdsPlcStorageType=btdsPlcStorageType, btdsLCoSetupPriority=btdsLCoSetupPriority, bitTransparentGroupBE01=bitTransparentGroupBE01, btdsDpnss1DataToVoice=btdsDpnss1DataToVoice, btdsProceduralStatus=btdsProceduralStatus, btdsComponentName=btdsComponentName, btdsLCoStatsEntry=btdsLCoStatsEntry, btdsFramerIdlePattern=btdsFramerIdlePattern, btdsPlcPathAttributeToMinimize=btdsPlcPathAttributeToMinimize, btdsLCoRowStatusEntry=btdsLCoRowStatusEntry, btdsDpnss1FramesEntry=btdsDpnss1FramesEntry, btdsLCoIndex=btdsLCoIndex, btdsPlcComponentName=btdsPlcComponentName, btdsDpnss1RowStatusEntry=btdsDpnss1RowStatusEntry, btdsPlcBumpPreference=btdsPlcBumpPreference, btdsLCoBumpPreference=btdsLCoBumpPreference, btdsDpnss1NewDataCalls=btdsDpnss1NewDataCalls, btdsFramerStatsEntry=btdsFramerStatsEntry, btdsIfEntryTable=btdsIfEntryTable, btdsDpnss1LargeFrmErrors=btdsDpnss1LargeFrmErrors, btdsRowStatus=btdsRowStatus, btdsStateTable=btdsStateTable, btdsLCoRoundTripDelay=btdsLCoRoundTripDelay, btdsLCoCostMetric=btdsLCoCostMetric, btdsDpnss1FrmProcessed=btdsDpnss1FrmProcessed, btdsPlc=btdsPlc, btdsPlcRequiredTrafficType=btdsPlcRequiredTrafficType, btdsDpnss1RowStatusTable=btdsDpnss1RowStatusTable, bitTransparentGroupBE=bitTransparentGroupBE, btdsOperationalEntry=btdsOperationalEntry, btdsFramerFrmToIf=btdsFramerFrmToIf, btdsMcdnProvEntry=btdsMcdnProvEntry, btdsUsageState=btdsUsageState, btdsPlcPermittedTrunkTypes=btdsPlcPermittedTrunkTypes, btdsCidDataTable=btdsCidDataTable, btdsMcdnTSlotIndex=btdsMcdnTSlotIndex, btdsStateEntry=btdsStateEntry, btdsFramerAdminState=btdsFramerAdminState, btdsDpnss1ProvTable=btdsDpnss1ProvTable, btdsFramerUsageState=btdsFramerUsageState, btdsLCoRequiredRxBandwidth=btdsLCoRequiredRxBandwidth, btdsDpnss1TimeslotsX=btdsDpnss1TimeslotsX, btdsPlcRequiredSecurity=btdsPlcRequiredSecurity, btdsMcdnCrcErrors=btdsMcdnCrcErrors, btdsPlcHoldingPriority=btdsPlcHoldingPriority, btdsPlcDiscardPriority=btdsPlcDiscardPriority, btdsPlcProvEntry=btdsPlcProvEntry, btdsMcdnTSlotEntry=btdsMcdnTSlotEntry, btdsFramerFrmUnderRuns=btdsFramerFrmUnderRuns, btdsMcdnOverruns=btdsMcdnOverruns, btdsMcdnVdcdEntry=btdsMcdnVdcdEntry, btdsPlcMpathIndex=btdsPlcMpathIndex, btdsRowStatusTable=btdsRowStatusTable, btdsLCoPathUpDateTime=btdsLCoPathUpDateTime, btdsSnmpOperStatus=btdsSnmpOperStatus, btdsMcdnHdlcEntry=btdsMcdnHdlcEntry, btdsDpnss1VdcdEntry=btdsDpnss1VdcdEntry, bitTransparentMIB=bitTransparentMIB, btdsServiceFailureReason=btdsServiceFailureReason, btdsMcdnCallClears=btdsMcdnCallClears, btdsFramer=btdsFramer, btdsLCoEnd=btdsLCoEnd, btdsIfIndex=btdsIfIndex, btdsOperStatusEntry=btdsOperStatusEntry, btdsOperationalState=btdsOperationalState, btdsFramerRowStatusEntry=btdsFramerRowStatusEntry, btdsLCoBytesToNetwork=btdsLCoBytesToNetwork, btdsIfAdminStatus=btdsIfAdminStatus, btdsFramerChannelTable=btdsFramerChannelTable, btdsLCo=btdsLCo, btdsPlcOptimization=btdsPlcOptimization, btdsPlcSetupPriority=btdsPlcSetupPriority, btdsMcdnVdcdTable=btdsMcdnVdcdTable, btdsDpnss1ProvEntry=btdsDpnss1ProvEntry, btdsLCoHoldingPriority=btdsLCoHoldingPriority, btdsMcdnDataToVoice=btdsMcdnDataToVoice, btdsPlcMpathEntry=btdsPlcMpathEntry, btdsDpnss1HdlcEntry=btdsDpnss1HdlcEntry, btdsMcdnFrmProcessed=btdsMcdnFrmProcessed, btdsFramerFrmLostInNetwork=btdsFramerFrmLostInNetwork, btdsMcdnHdlcTable=btdsMcdnHdlcTable)
