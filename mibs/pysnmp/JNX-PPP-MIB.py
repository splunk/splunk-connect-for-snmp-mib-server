#
# PySNMP MIB module JNX-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JNX-PPP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:47:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndexOrZero, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex", "InterfaceIndex")
Ipv6AddressIfIdentifier, = mibBuilder.importSymbols("IPV6-TC", "Ipv6AddressIfIdentifier")
jnxPppMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxPppMibRoot")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, TimeTicks, Counter64, Unsigned32, Gauge32, ObjectIdentity, Integer32, ModuleIdentity, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "TimeTicks", "Counter64", "Unsigned32", "Gauge32", "ObjectIdentity", "Integer32", "ModuleIdentity", "MibIdentifier", "iso")
TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
jnxPppMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1))
jnxPppMIB.setRevisions(('2013-09-19 00:00', '2013-06-13 00:00', '2012-06-08 00:00', '2011-11-29 00:00', '2010-07-22 09:42',))
if mibBuilder.loadTexts: jnxPppMIB.setLastUpdated('201309190942Z')
if mibBuilder.loadTexts: jnxPppMIB.setOrganization('Juniper Networks, Inc.')
class JnxPppAuthentication(TextualConvention, Integer32):
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("none", 0), ("pap", 1), ("chap", 2), ("papChap", 3), ("chapPap", 4))

class JnxPppMlPppBundleName(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 60)

class JnxPppAuthentication2(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("pap", 1), ("chap", 2), ("eap", 3))

class JnxNibbleConfig(TextualConvention, Integer32):
    status = 'current'

jnxPPPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1))
jnxPppLcp = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1))
jnxPppSec = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 2))
jnxPppIp = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3))
jnxPppOsi = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4))
jnxPppSession = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5))
jnxPppMlPpp = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6))
jnxPppSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7))
jnxPppIpv6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8))
jnxPppGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 9))
jnxPppLinkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1), )
if mibBuilder.loadTexts: jnxPppLinkStatusTable.setStatus('current')
jnxPppLinkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppLinkStatusEntry.setStatus('current')
jnxPppLinkStatusTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("adminDisable", 2), ("lowerLayerDown", 3), ("noUpperInterface", 4), ("authenticationFailure", 5), ("peerTerminated", 6), ("peerRenegotiated", 7), ("maxRetriesExceeded", 8), ("negotiationFailure", 9), ("keepaliveFailure", 10), ("sessionTimeout", 11), ("inactivityTimeout", 12), ("addressLeaseExpired", 13), ("adminLogout", 14), ("tunnelFailed", 15), ("tunnelDisconnected", 16), ("loopback", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusTerminateReason.setStatus('current')
jnxPppLinkStatusTerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localMru", 2), ("remoteMru", 3), ("localMagicNumber", 4), ("remoteMagicNumber", 5), ("localAuthentication", 6), ("localToRemoteProtocolCompression", 7), ("localToRemoteACCompression", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusTerminateNegFailOption.setStatus('current')
jnxPppLinkStatusInKeepaliveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusInKeepaliveRequests.setStatus('current')
jnxPppLinkStatusOutKeepaliveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusOutKeepaliveRequests.setStatus('current')
jnxPppLinkStatusInKeepaliveReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusInKeepaliveReplies.setStatus('current')
jnxPppLinkStatusOutKeepaliveReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusOutKeepaliveReplies.setStatus('current')
jnxPppLinkStatusKeepaliveFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusKeepaliveFailures.setStatus('current')
jnxPppLinkStatusLocalMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusLocalMagicNumber.setStatus('deprecated')
jnxPppLinkStatusRemoteMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusRemoteMagicNumber.setStatus('deprecated')
jnxPppLinkStatusLocalAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 10), JnxPppAuthentication2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusLocalAuthentication.setStatus('current')
jnxPppLinkStatusTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusTunnelIfIndex.setStatus('current')
jnxPppLinkStatuslcpRenegoTerminates = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatuslcpRenegoTerminates.setStatus('current')
jnxPppLinkStatusLocalMagicNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusLocalMagicNumber1.setStatus('current')
jnxPppLinkStatusRemoteMagicNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkStatusRemoteMagicNumber1.setStatus('current')
jnxPppLinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2), )
if mibBuilder.loadTexts: jnxPppLinkConfigTable.setStatus('current')
jnxPppLinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1), ).setIndexNames((0, "JNX-PPP-MIB", "jnxPppLinkConfigIfIndex"))
if mibBuilder.loadTexts: jnxPppLinkConfigEntry.setStatus('current')
jnxPppLinkConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxPppLinkConfigIfIndex.setStatus('current')
jnxPppLinkConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigRowStatus.setStatus('current')
jnxPppLinkConfigLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigLowerIfIndex.setStatus('current')
jnxPppLinkConfigKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64800)).clone(30)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigKeepalive.setStatus('current')
jnxPppLinkConfigAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 5), JnxPppAuthentication().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigAuthentication.setStatus('deprecated')
jnxPppLinkConfigMaxAuthenRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigMaxAuthenRetries.setStatus('current')
jnxPppLinkConfigStandardIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 7), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigStandardIfIndex.setStatus('current')
jnxPppLinkConfigChapMinChallengeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 63)).clone(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigChapMinChallengeLength.setStatus('current')
jnxPppLinkConfigChapMaxChallengeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 63)).clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigChapMaxChallengeLength.setStatus('current')
jnxPppLinkConfigPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigPassiveMode.setStatus('current')
jnxPppLinkConfigAuthenticatorLogicalSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigAuthenticatorLogicalSystem.setStatus('current')
jnxPppLinkConfigAuthenticatorRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigAuthenticatorRoutingInstance.setStatus('current')
jnxPppLinkConfigAaaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigAaaProfile.setStatus('current')
jnxPppLinkConfigAuthentication2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 14), JnxNibbleConfig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigAuthentication2.setStatus('current')
jnxPppLinkConfigIgnoreMagicNumberMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigIgnoreMagicNumberMismatch.setStatus('current')
jnxPppLinkConfigMaxLcpRenegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppLinkConfigMaxLcpRenegotiation.setStatus('current')
jnxPppNextIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppNextIfIndex.setStatus('current')
jnxPppIpTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1), )
if mibBuilder.loadTexts: jnxPppIpTable.setStatus('current')
jnxPppIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppIpEntry.setStatus('current')
jnxPppIpServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpServiceStatus.setStatus('current')
jnxPppIpTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("noService", 2), ("admin", 3), ("linkDown", 4), ("peerTerminated", 5), ("peerRenegotiated", 6), ("maxRetriesExceeded", 7), ("negotiationFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpTerminateReason.setStatus('current')
jnxPppIpTerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localIpAddress", 2), ("remoteIpAddress", 3), ("remotePrimaryDnsAddress", 4), ("remoteSecondaryDnsAddress", 5), ("remotePrimaryWinsAddress", 6), ("remoteSecondaryWinsAddress", 7), ("localIpAddressMask", 8), ("remoteIpAddressMask", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpTerminateNegFailOption.setStatus('current')
jnxPppIpLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpLocalIpAddress.setStatus('current')
jnxPppIpRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpRemoteIpAddress.setStatus('current')
jnxPppIpRemotePrimaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpRemotePrimaryDnsAddress.setStatus('current')
jnxPppIpRemoteSecondaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpRemoteSecondaryDnsAddress.setStatus('current')
jnxPppIpRemotePrimaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpRemotePrimaryWinsAddress.setStatus('current')
jnxPppIpRemoteSecondaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpRemoteSecondaryWinsAddress.setStatus('current')
jnxPppIpNetworkStatusIpcpRenegoTerminates = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpNetworkStatusIpcpRenegoTerminates.setStatus('current')
jnxPppIpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2), )
if mibBuilder.loadTexts: jnxPppIpConfigTable.setStatus('current')
jnxPppIpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppIpConfigEntry.setStatus('current')
jnxPppIpConfigPeerDnsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigPeerDnsPriority.setStatus('current')
jnxPppIpConfigPeerWinsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigPeerWinsPriority.setStatus('current')
jnxPppIpConfigIpcpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigIpcpNetmask.setStatus('current')
jnxPppIpConfigInitiateIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigInitiateIp.setStatus('current')
jnxPppIpConfigMaxIpcpRenegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigMaxIpcpRenegotiation.setStatus('current')
jnxPppIpConfigPromptIpcpDnsOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigPromptIpcpDnsOption.setStatus('current')
jnxPppIpConfigIpcpLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpConfigIpcpLockout.setStatus('current')
jnxPppOsiTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1), )
if mibBuilder.loadTexts: jnxPppOsiTable.setStatus('current')
jnxPppOsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppOsiEntry.setStatus('current')
jnxPppOsiServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiServiceStatus.setStatus('current')
jnxPppOsiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("notOpened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiOperStatus.setStatus('current')
jnxPppOsiTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("noService", 2), ("admin", 3), ("linkDown", 4), ("peerTerminated", 5), ("peerRenegotiated", 6), ("maxRetriesExceeded", 7), ("negotiationFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiTerminateReason.setStatus('current')
jnxPppOsiTerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localAlignNpdu", 2), ("remoteAlignNpdu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiTerminateNegFailOption.setStatus('current')
jnxPppOsiLocalAlignNpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("none", 0), ("oneModulo4", 1), ("twoModulo4", 2), ("threeModulo4", 3), ("fourModulo4", 4), ("even", 254), ("odd", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiLocalAlignNpdu.setStatus('current')
jnxPppOsiRemoteAlignNpdu = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 254, 255))).clone(namedValues=NamedValues(("none", 0), ("oneModulo4", 1), ("twoModulo4", 2), ("threeModulo4", 3), ("fourModulo4", 4), ("even", 254), ("odd", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiRemoteAlignNpdu.setStatus('current')
jnxPppOsiConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 2), )
if mibBuilder.loadTexts: jnxPppOsiConfigTable.setStatus('current')
jnxPppOsiConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppOsiConfigEntry.setStatus('current')
jnxPppOsiConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppOsiConfigAdminStatus.setStatus('current')
jnxPppSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1), )
if mibBuilder.loadTexts: jnxPppSessionTable.setStatus('current')
jnxPppSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppSessionEntry.setStatus('current')
jnxPppSessionGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionGrant.setStatus('current')
jnxPppSessionTerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("userRequest", 2), ("keepaliveFailure", 3), ("sessionTimeout", 4), ("inactivityTimeout", 5), ("adminDisable", 6), ("lowerLayerDown", 7), ("noUpperInterface", 8), ("deny", 9), ("noHardware", 10), ("noResources", 11), ("noInterface", 12), ("challengeTimeout", 13), ("requestTimeout", 14), ("authenticatorTimeout", 15), ("addressLeaseExpired", 16), ("adminLogout", 17), ("tunnelFailed", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionTerminateReason.setStatus('current')
jnxPppSessionStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionStartTime.setStatus('current')
jnxPppSessionInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 4), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInOctets.setStatus('deprecated')
jnxPppSessionOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 5), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionOutOctets.setStatus('deprecated')
jnxPppSessionInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInPackets.setStatus('deprecated')
jnxPppSessionOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionOutPackets.setStatus('deprecated')
jnxPppSessionSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionSessionTimeout.setStatus('current')
jnxPppSessionInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInactivityTimeout.setStatus('current')
jnxPppSessionAccountingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionAccountingInterval.setStatus('current')
jnxPppSessionRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionRemoteIpAddress.setStatus('current')
jnxPppSessionRemotePrimaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionRemotePrimaryDnsAddress.setStatus('current')
jnxPppSessionRemoteSecondaryDnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionRemoteSecondaryDnsAddress.setStatus('current')
jnxPppSessionRemotePrimaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionRemotePrimaryWinsAddress.setStatus('current')
jnxPppSessionRemoteSecondaryWinsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionRemoteSecondaryWinsAddress.setStatus('current')
jnxPppSessionRemoteIpv6AddressIfIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 16), Ipv6AddressIfIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionRemoteIpv6AddressIfIdentifier.setStatus('current')
jnxPppSessionInhibitIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInhibitIp.setStatus('current')
jnxPppSessionInhibitIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInhibitIpv6.setStatus('current')
jnxPppSessionInOctets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 19), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInOctets64.setStatus('current')
jnxPppSessionOutOctets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 20), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionOutOctets64.setStatus('current')
jnxPppSessionInPackets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 21), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionInPackets64.setStatus('current')
jnxPppSessionOutPackets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 5, 1, 1, 22), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSessionOutPackets64.setStatus('current')
jnxPppMlPppBundleTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 1), )
if mibBuilder.loadTexts: jnxPppMlPppBundleTable.setStatus('current')
jnxPppMlPppBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 1, 1), ).setIndexNames((0, "JNX-PPP-MIB", "jnxPppMlPppBundleName"))
if mibBuilder.loadTexts: jnxPppMlPppBundleEntry.setStatus('current')
jnxPppMlPppBundleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 1, 1, 1), JnxPppMlPppBundleName())
if mibBuilder.loadTexts: jnxPppMlPppBundleName.setStatus('current')
jnxPppMlPppBundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 1, 1, 2), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppBundleRowStatus.setStatus('current')
jnxPppMlPppBundleNetworkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppBundleNetworkIfIndex.setStatus('current')
jnxPppMlPppNextLinkIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppNextLinkIfIndex.setStatus('current')
jnxPppMlPppLinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3), )
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigTable.setStatus('current')
jnxPppMlPppLinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1), ).setIndexNames((0, "JNX-PPP-MIB", "jnxPppMlPppLinkConfigIfIndex"))
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigEntry.setStatus('current')
jnxPppMlPppLinkConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigIfIndex.setStatus('current')
jnxPppMlPppLinkConfigLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigLowerIfIndex.setStatus('current')
jnxPppMlPppLinkConfigKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 64800), )).clone(30)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigKeepalive.setStatus('current')
jnxPppMlPppLinkConfigAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 5), JnxPppAuthentication().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAuthentication.setStatus('deprecated')
jnxPppMlPppLinkConfigMaxAuthenRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigMaxAuthenRetries.setStatus('current')
jnxPppMlPppLinkConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 7), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigRowStatus.setStatus('current')
jnxPppMlPppLinkConfigAaaProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAaaProfile.setStatus('current')
jnxPppMlPppLinkConfigChapMinChallengeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 63)).clone(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigChapMinChallengeLength.setStatus('current')
jnxPppMlPppLinkConfigChapMaxChallengeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 63)).clone(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigChapMaxChallengeLength.setStatus('current')
jnxPppMlPppLinkConfigPassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigPassiveMode.setStatus('current')
jnxPppMlPppLinkConfigAuthenticatorLogicalSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAuthenticatorLogicalSystem.setStatus('current')
jnxPppMlPppLinkConfigAuthenticatorRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAuthenticatorRoutingInstance.setStatus('current')
jnxPppMlPppLinkConfigFragmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigFragmentation.setStatus('current')
jnxPppMlPppLinkConfigReassembly = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigReassembly.setStatus('current')
jnxPppMlPppLinkConfigMaxReceiveReconstructedUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(64, 65535), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigMaxReceiveReconstructedUnit.setStatus('current')
jnxPppMlPppLinkConfigFragmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(128, 65535), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigFragmentSize.setStatus('current')
jnxPppMlPppLinkConfigHashLinkSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigHashLinkSelection.setStatus('current')
jnxPppMlPppLinkConfigAuthentication2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 19), JnxNibbleConfig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigAuthentication2.setStatus('current')
jnxPppMlPppLinkConfigIgnoreMagicNumberMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigIgnoreMagicNumberMismatch.setStatus('current')
jnxPppMlPppLinkConfigMultilinkMulticlass = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigMultilinkMulticlass.setStatus('current')
jnxPppMlPppLinkConfigMultilinkMaxMultiClasses = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppLinkConfigMultilinkMaxMultiClasses.setStatus('current')
jnxPppMlPppNextNetworkIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppNextNetworkIfIndex.setStatus('current')
jnxPppMlPppNetworkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 5), )
if mibBuilder.loadTexts: jnxPppMlPppNetworkConfigTable.setStatus('current')
jnxPppMlPppNetworkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 5, 1), ).setIndexNames((0, "JNX-PPP-MIB", "jnxPppMlPppNetworkConfigIfIndex"))
if mibBuilder.loadTexts: jnxPppMlPppNetworkConfigEntry.setStatus('current')
jnxPppMlPppNetworkConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxPppMlPppNetworkConfigIfIndex.setStatus('current')
jnxPppMlPppNetworkConfigLowerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 5, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppNetworkConfigLowerIfIndex.setStatus('current')
jnxPppMlPppNetworkBundleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 5, 1, 3), JnxPppMlPppBundleName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppNetworkBundleName.setStatus('current')
jnxPppMlPppNetworkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 5, 1, 4), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppNetworkRowStatus.setStatus('current')
jnxPppMlPppLinkBindTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 6), )
if mibBuilder.loadTexts: jnxPppMlPppLinkBindTable.setStatus('current')
jnxPppMlPppLinkBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 6, 1), ).setIndexNames((0, "JNX-PPP-MIB", "jnxPppMlPppBindNetworkIfIndex"), (0, "JNX-PPP-MIB", "jnxPppMlPppBindLinkIfIndex"))
if mibBuilder.loadTexts: jnxPppMlPppLinkBindEntry.setStatus('current')
jnxPppMlPppBindNetworkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxPppMlPppBindNetworkIfIndex.setStatus('current')
jnxPppMlPppBindLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 6, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: jnxPppMlPppBindLinkIfIndex.setStatus('current')
jnxPppMlPppBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 6, 6, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppMlPppBindRowStatus.setStatus('current')
jnxPppSummaryPppInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppInterfaceCount.setStatus('current')
jnxPppSummaryPppIpNCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpNCPs.setStatus('current')
jnxPppSummaryPppOsiNCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNCPs.setStatus('current')
jnxPppSummaryPppIfAdminUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfAdminUp.setStatus('current')
jnxPppSummaryPppIfAdminDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfAdminDown.setStatus('current')
jnxPppSummaryPppIfOperUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfOperUp.setStatus('current')
jnxPppSummaryPppIfOperDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfOperDown.setStatus('current')
jnxPppSummaryPppIfOperDormant = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfOperDormant.setStatus('current')
jnxPppSummaryPppIfNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfNotPresent.setStatus('current')
jnxPppSummaryPppIfLowerLayerDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfLowerLayerDown.setStatus('current')
jnxPppSummaryPppIpNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpOpened.setStatus('current')
jnxPppSummaryPppIpNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpClosed.setStatus('current')
jnxPppSummaryPppOsiNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNcpOpened.setStatus('current')
jnxPppSummaryPppOsiNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNcpClosed.setStatus('current')
jnxPppSummaryPppIfLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIfLastChangeTime.setStatus('current')
jnxPppSummaryPppLinkInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkInterfaceCount.setStatus('current')
jnxPppSummaryPppLinkIfAdminUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfAdminUp.setStatus('current')
jnxPppSummaryPppLinkIfAdminDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfAdminDown.setStatus('current')
jnxPppSummaryPppLinkIfOperUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfOperUp.setStatus('current')
jnxPppSummaryPppLinkIfOperDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfOperDown.setStatus('current')
jnxPppSummaryPppLinkIfOperDormant = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfOperDormant.setStatus('current')
jnxPppSummaryPppLinkIfNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfNotPresent.setStatus('current')
jnxPppSummaryPppLinkIfLowerLayerDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfLowerLayerDown.setStatus('current')
jnxPppSummaryPppLinkIfLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 25), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkIfLastChangeTime.setStatus('current')
jnxPppSummaryPppNetworkInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkInterfaceCount.setStatus('current')
jnxPppSummaryPppNetworkIpNCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNCPs.setStatus('current')
jnxPppSummaryPppNetworkOsiNCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNCPs.setStatus('current')
jnxPppSummaryPppNetworkIfAdminUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfAdminUp.setStatus('current')
jnxPppSummaryPppNetworkIfAdminDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfAdminDown.setStatus('current')
jnxPppSummaryPppNetworkIfOperUp = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfOperUp.setStatus('current')
jnxPppSummaryPppNetworkIfOperDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfOperDown.setStatus('current')
jnxPppSummaryPppNetworkIfOperDormant = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfOperDormant.setStatus('current')
jnxPppSummaryPppNetworkIfNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfNotPresent.setStatus('current')
jnxPppSummaryPppNetworkIfLowerLayerDown = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfLowerLayerDown.setStatus('current')
jnxPppSummaryPppNetworkIpNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpOpened.setStatus('current')
jnxPppSummaryPppNetworkIpNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpClosed.setStatus('current')
jnxPppSummaryPppNetworkOsiNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNcpOpened.setStatus('current')
jnxPppSummaryPppNetworkOsiNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNcpClosed.setStatus('current')
jnxPppSummaryPppNetworkIfLastChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 40), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIfLastChangeTime.setStatus('current')
jnxPppSummaryPppIpv6NCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NCPs.setStatus('current')
jnxPppSummaryPppIpv6NcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpOpened.setStatus('current')
jnxPppSummaryPppIpv6NcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpClosed.setStatus('current')
jnxPppSummaryPppNetworkIpv6NCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NCPs.setStatus('current')
jnxPppSummaryPppNetworkIpv6NcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpOpened.setStatus('current')
jnxPppSummaryPppNetworkIpv6NcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpClosed.setStatus('current')
jnxPppSummaryPppStaticInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppStaticInterfaceCount.setStatus('current')
jnxPppSummaryPppMplsNCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNCPs.setStatus('current')
jnxPppSummaryPppIpAdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpAdminOpen.setStatus('current')
jnxPppSummaryPppIpAdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpAdminClose.setStatus('current')
jnxPppSummaryPppIpv6AdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6AdminOpen.setStatus('current')
jnxPppSummaryPppIpv6AdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6AdminClose.setStatus('current')
jnxPppSummaryPppOsiAdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiAdminOpen.setStatus('current')
jnxPppSummaryPppOsiAdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiAdminClose.setStatus('current')
jnxPppSummaryPppMplsAdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsAdminOpen.setStatus('current')
jnxPppSummaryPppMplsAdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsAdminClose.setStatus('current')
jnxPppSummaryPppIpNcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpNotPresent.setStatus('current')
jnxPppSummaryPppIpNcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpNcpNoResources.setStatus('current')
jnxPppSummaryPppIpv6NcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpNotPresent.setStatus('current')
jnxPppSummaryPppIpv6NcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppIpv6NcpNoResources.setStatus('current')
jnxPppSummaryPppOsiNcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNcpNotPresent.setStatus('current')
jnxPppSummaryPppOsiNcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppOsiNcpNoResources.setStatus('current')
jnxPppSummaryPppMplsNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNcpOpened.setStatus('current')
jnxPppSummaryPppMplsNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNcpClosed.setStatus('current')
jnxPppSummaryPppMplsNcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNcpNotPresent.setStatus('current')
jnxPppSummaryPppMplsNcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppMplsNcpNoResources.setStatus('current')
jnxPppSummaryPppLinkStaticInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppLinkStaticInterfaceCount.setStatus('current')
jnxPppSummaryPppNetworkStaticInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkStaticInterfaceCount.setStatus('current')
jnxPppSummaryPppNetworkMplsNCPs = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNCPs.setStatus('current')
jnxPppSummaryPppNetworkIpAdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpAdminOpen.setStatus('current')
jnxPppSummaryPppNetworkIpAdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpAdminClose.setStatus('current')
jnxPppSummaryPppNetworkIpv6AdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6AdminOpen.setStatus('current')
jnxPppSummaryPppNetworkIpv6AdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6AdminClose.setStatus('current')
jnxPppSummaryPppNetworkOsiAdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiAdminOpen.setStatus('current')
jnxPppSummaryPppNetworkOsiAdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiAdminClose.setStatus('current')
jnxPppSummaryPppNetworkMplsAdminOpen = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsAdminOpen.setStatus('current')
jnxPppSummaryPppNetworkMplsAdminClose = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsAdminClose.setStatus('current')
jnxPppSummaryPppNetworkIpNcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpNotPresent.setStatus('current')
jnxPppSummaryPppNetworkIpNcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpNcpNoResources.setStatus('current')
jnxPppSummaryPppNetworkIpv6NcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpNotPresent.setStatus('current')
jnxPppSummaryPppNetworkIpv6NcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkIpv6NcpNoResources.setStatus('current')
jnxPppSummaryPppNetworkOsiNcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNcpNotPresent.setStatus('current')
jnxPppSummaryPppNetworkOsiNcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkOsiNcpNoResources.setStatus('current')
jnxPppSummaryPppNetworkMplsNcpOpened = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNcpOpened.setStatus('current')
jnxPppSummaryPppNetworkMplsNcpClosed = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNcpClosed.setStatus('current')
jnxPppSummaryPppNetworkMplsNcpNotPresent = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNcpNotPresent.setStatus('current')
jnxPppSummaryPppNetworkMplsNcpNoResources = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 7, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppSummaryPppNetworkMplsNcpNoResources.setStatus('current')
jnxPppIpv6Table = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1), )
if mibBuilder.loadTexts: jnxPppIpv6Table.setStatus('current')
jnxPppIpv6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppIpv6Entry.setStatus('current')
jnxPppIpv6ServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6ServiceStatus.setStatus('current')
jnxPppIpv6OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("notOpened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6OperStatus.setStatus('current')
jnxPppIpv6TerminateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("noService", 2), ("admin", 3), ("linkDown", 4), ("peerTerminated", 5), ("peerRenegotiated", 6), ("maxRetriesExceeded", 7), ("negotiationFailure", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6TerminateReason.setStatus('current')
jnxPppIpv6TerminateNegFailOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("other", 1), ("localIpv6AddressIfIdentifier", 2), ("remoteIpv6AddressIfIdentifier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6TerminateNegFailOption.setStatus('current')
jnxPppIpv6LocalIpv6AddressIfIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 5), Ipv6AddressIfIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6LocalIpv6AddressIfIdentifier.setStatus('current')
jnxPppIpv6RemoteIpv6AddressIfIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 6), Ipv6AddressIfIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6RemoteIpv6AddressIfIdentifier.setStatus('current')
jnxPppIpv6NetworkStatusIpv6cpRenegoTerminates = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6NetworkStatusIpv6cpRenegoTerminates.setStatus('current')
jnxPppIpv6ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 2), )
if mibBuilder.loadTexts: jnxPppIpv6ConfigTable.setStatus('current')
jnxPppIpv6ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxPppIpv6ConfigEntry.setStatus('current')
jnxPppIpv6ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6ConfigAdminStatus.setStatus('current')
jnxPppIpv6ConfigInitiateIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6ConfigInitiateIpv6.setStatus('current')
jnxPppIpv6ConfigMaxIpv6cpRenegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppIpv6ConfigMaxIpv6cpRenegotiation.setStatus('current')
jnxPppPeerIpAddressOptional = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 68, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxPppPeerIpAddressOptional.setStatus('current')
mibBuilder.exportSymbols("JNX-PPP-MIB", jnxPppLinkStatusTunnelIfIndex=jnxPppLinkStatusTunnelIfIndex, jnxPppLinkConfigMaxLcpRenegotiation=jnxPppLinkConfigMaxLcpRenegotiation, jnxPppMlPpp=jnxPppMlPpp, jnxPppSummaryPppIfLastChangeTime=jnxPppSummaryPppIfLastChangeTime, jnxPppSummaryPppLinkIfOperUp=jnxPppSummaryPppLinkIfOperUp, jnxPppSummaryPppMplsAdminOpen=jnxPppSummaryPppMplsAdminOpen, jnxPppSummaryPppIpAdminOpen=jnxPppSummaryPppIpAdminOpen, jnxPppOsi=jnxPppOsi, jnxPppSummaryPppMplsAdminClose=jnxPppSummaryPppMplsAdminClose, jnxPppSessionInOctets64=jnxPppSessionInOctets64, jnxPppMlPppBindLinkIfIndex=jnxPppMlPppBindLinkIfIndex, jnxPppIpLocalIpAddress=jnxPppIpLocalIpAddress, jnxPppSummaryPppNetworkOsiNCPs=jnxPppSummaryPppNetworkOsiNCPs, jnxPppSummaryPppNetworkIpNcpOpened=jnxPppSummaryPppNetworkIpNcpOpened, jnxPppOsiLocalAlignNpdu=jnxPppOsiLocalAlignNpdu, jnxPppSummaryPppMplsNcpClosed=jnxPppSummaryPppMplsNcpClosed, jnxPppSummaryPppIpNcpNoResources=jnxPppSummaryPppIpNcpNoResources, JnxNibbleConfig=JnxNibbleConfig, jnxPppSummaryPppNetworkOsiAdminOpen=jnxPppSummaryPppNetworkOsiAdminOpen, jnxPppLinkStatusTerminateReason=jnxPppLinkStatusTerminateReason, jnxPppMlPppBindNetworkIfIndex=jnxPppMlPppBindNetworkIfIndex, jnxPppMlPppLinkBindTable=jnxPppMlPppLinkBindTable, jnxPppSummaryPppNetworkMplsAdminClose=jnxPppSummaryPppNetworkMplsAdminClose, jnxPppSummaryPppMplsNcpNoResources=jnxPppSummaryPppMplsNcpNoResources, jnxPppSummaryPppOsiNcpClosed=jnxPppSummaryPppOsiNcpClosed, jnxPppIpv6ConfigTable=jnxPppIpv6ConfigTable, jnxPppLinkStatusKeepaliveFailures=jnxPppLinkStatusKeepaliveFailures, jnxPppSummaryPppLinkInterfaceCount=jnxPppSummaryPppLinkInterfaceCount, jnxPppSessionRemotePrimaryWinsAddress=jnxPppSessionRemotePrimaryWinsAddress, jnxPppMlPppLinkConfigMaxReceiveReconstructedUnit=jnxPppMlPppLinkConfigMaxReceiveReconstructedUnit, jnxPppLinkStatusInKeepaliveReplies=jnxPppLinkStatusInKeepaliveReplies, jnxPppSummaryPppNetworkIpv6AdminOpen=jnxPppSummaryPppNetworkIpv6AdminOpen, jnxPppMlPppLinkConfigMultilinkMulticlass=jnxPppMlPppLinkConfigMultilinkMulticlass, jnxPppMlPppNetworkRowStatus=jnxPppMlPppNetworkRowStatus, jnxPppSessionGrant=jnxPppSessionGrant, jnxPppSummaryPppIfAdminUp=jnxPppSummaryPppIfAdminUp, jnxPppIp=jnxPppIp, jnxPppOsiOperStatus=jnxPppOsiOperStatus, jnxPppLinkStatusRemoteMagicNumber1=jnxPppLinkStatusRemoteMagicNumber1, jnxPppIpEntry=jnxPppIpEntry, jnxPppSessionRemoteSecondaryDnsAddress=jnxPppSessionRemoteSecondaryDnsAddress, jnxPppMlPppLinkConfigFragmentSize=jnxPppMlPppLinkConfigFragmentSize, jnxPppSummaryPppNetworkIpNcpNoResources=jnxPppSummaryPppNetworkIpNcpNoResources, jnxPppSummaryPppLinkIfNotPresent=jnxPppSummaryPppLinkIfNotPresent, jnxPppLinkStatusInKeepaliveRequests=jnxPppLinkStatusInKeepaliveRequests, jnxPppSummaryPppNetworkMplsNcpClosed=jnxPppSummaryPppNetworkMplsNcpClosed, jnxPppSummaryPppNetworkIfAdminDown=jnxPppSummaryPppNetworkIfAdminDown, jnxPppIpv6=jnxPppIpv6, jnxPppLinkStatusOutKeepaliveRequests=jnxPppLinkStatusOutKeepaliveRequests, jnxPppSessionOutOctets64=jnxPppSessionOutOctets64, JnxPppAuthentication=JnxPppAuthentication, jnxPppMlPppLinkConfigMultilinkMaxMultiClasses=jnxPppMlPppLinkConfigMultilinkMaxMultiClasses, jnxPppIpv6LocalIpv6AddressIfIdentifier=jnxPppIpv6LocalIpv6AddressIfIdentifier, jnxPppIpv6ConfigEntry=jnxPppIpv6ConfigEntry, jnxPppIpConfigInitiateIp=jnxPppIpConfigInitiateIp, jnxPppSummaryPppOsiNcpNoResources=jnxPppSummaryPppOsiNcpNoResources, jnxPppSummaryPppMplsNcpOpened=jnxPppSummaryPppMplsNcpOpened, jnxPppSummaryPppNetworkIfOperUp=jnxPppSummaryPppNetworkIfOperUp, jnxPppLinkConfigPassiveMode=jnxPppLinkConfigPassiveMode, jnxPppSummaryPppNetworkIpv6NCPs=jnxPppSummaryPppNetworkIpv6NCPs, jnxPppIpv6OperStatus=jnxPppIpv6OperStatus, jnxPppMlPppLinkConfigAuthenticatorRoutingInstance=jnxPppMlPppLinkConfigAuthenticatorRoutingInstance, jnxPppSummaryPppNetworkIfLastChangeTime=jnxPppSummaryPppNetworkIfLastChangeTime, jnxPppSummaryPppNetworkIfAdminUp=jnxPppSummaryPppNetworkIfAdminUp, jnxPppIpv6Table=jnxPppIpv6Table, jnxPppIpTerminateReason=jnxPppIpTerminateReason, jnxPppSessionRemoteSecondaryWinsAddress=jnxPppSessionRemoteSecondaryWinsAddress, jnxPppMlPppLinkConfigMaxAuthenRetries=jnxPppMlPppLinkConfigMaxAuthenRetries, jnxPppPeerIpAddressOptional=jnxPppPeerIpAddressOptional, jnxPppIpv6ConfigAdminStatus=jnxPppIpv6ConfigAdminStatus, jnxPppSummaryPppIpv6NcpNoResources=jnxPppSummaryPppIpv6NcpNoResources, jnxPppMlPppNextLinkIfIndex=jnxPppMlPppNextLinkIfIndex, jnxPppSummaryPppOsiNcpOpened=jnxPppSummaryPppOsiNcpOpened, jnxPppMlPppBundleNetworkIfIndex=jnxPppMlPppBundleNetworkIfIndex, jnxPppSummaryPppNetworkInterfaceCount=jnxPppSummaryPppNetworkInterfaceCount, jnxPppLinkStatusTerminateNegFailOption=jnxPppLinkStatusTerminateNegFailOption, jnxPppSummaryPppNetworkOsiAdminClose=jnxPppSummaryPppNetworkOsiAdminClose, jnxPppSummaryPppNetworkIpNcpNotPresent=jnxPppSummaryPppNetworkIpNcpNotPresent, jnxPppIpConfigPeerDnsPriority=jnxPppIpConfigPeerDnsPriority, jnxPppMlPppLinkConfigHashLinkSelection=jnxPppMlPppLinkConfigHashLinkSelection, jnxPppMlPppLinkConfigLowerIfIndex=jnxPppMlPppLinkConfigLowerIfIndex, jnxPppSummaryPppLinkIfAdminUp=jnxPppSummaryPppLinkIfAdminUp, jnxPppSummaryPppOsiAdminOpen=jnxPppSummaryPppOsiAdminOpen, jnxPppOsiEntry=jnxPppOsiEntry, jnxPppMlPppLinkConfigRowStatus=jnxPppMlPppLinkConfigRowStatus, jnxPppMlPppNextNetworkIfIndex=jnxPppMlPppNextNetworkIfIndex, jnxPppMlPppLinkConfigChapMaxChallengeLength=jnxPppMlPppLinkConfigChapMaxChallengeLength, jnxPppIpRemoteIpAddress=jnxPppIpRemoteIpAddress, jnxPppLinkStatusRemoteMagicNumber=jnxPppLinkStatusRemoteMagicNumber, jnxPppIpConfigPromptIpcpDnsOption=jnxPppIpConfigPromptIpcpDnsOption, jnxPppSummaryPppOsiNCPs=jnxPppSummaryPppOsiNCPs, jnxPppLcp=jnxPppLcp, jnxPppSummaryPppLinkIfOperDormant=jnxPppSummaryPppLinkIfOperDormant, jnxPppSummaryPppNetworkIpNcpClosed=jnxPppSummaryPppNetworkIpNcpClosed, jnxPppLinkConfigKeepalive=jnxPppLinkConfigKeepalive, jnxPppSummary=jnxPppSummary, jnxPppSummaryPppNetworkIfOperDormant=jnxPppSummaryPppNetworkIfOperDormant, jnxPppSummaryPppMplsNCPs=jnxPppSummaryPppMplsNCPs, jnxPppIpv6RemoteIpv6AddressIfIdentifier=jnxPppIpv6RemoteIpv6AddressIfIdentifier, jnxPppIpConfigPeerWinsPriority=jnxPppIpConfigPeerWinsPriority, jnxPppIpv6NetworkStatusIpv6cpRenegoTerminates=jnxPppIpv6NetworkStatusIpv6cpRenegoTerminates, jnxPppSummaryPppIfOperDown=jnxPppSummaryPppIfOperDown, jnxPppLinkConfigIfIndex=jnxPppLinkConfigIfIndex, jnxPppLinkConfigLowerIfIndex=jnxPppLinkConfigLowerIfIndex, jnxPppLinkConfigAuthenticatorRoutingInstance=jnxPppLinkConfigAuthenticatorRoutingInstance, jnxPppSessionInactivityTimeout=jnxPppSessionInactivityTimeout, jnxPppSummaryPppIpv6NcpClosed=jnxPppSummaryPppIpv6NcpClosed, jnxPppMlPppNetworkConfigTable=jnxPppMlPppNetworkConfigTable, jnxPppSummaryPppIpv6NcpNotPresent=jnxPppSummaryPppIpv6NcpNotPresent, jnxPppSummaryPppInterfaceCount=jnxPppSummaryPppInterfaceCount, jnxPppLinkStatusOutKeepaliveReplies=jnxPppLinkStatusOutKeepaliveReplies, jnxPppSummaryPppIpNcpOpened=jnxPppSummaryPppIpNcpOpened, jnxPppIpConfigMaxIpcpRenegotiation=jnxPppIpConfigMaxIpcpRenegotiation, jnxPppSummaryPppNetworkIpv6NcpNotPresent=jnxPppSummaryPppNetworkIpv6NcpNotPresent, jnxPppSessionTable=jnxPppSessionTable, jnxPppSessionRemoteIpAddress=jnxPppSessionRemoteIpAddress, jnxPppLinkConfigEntry=jnxPppLinkConfigEntry, jnxPppLinkConfigAuthenticatorLogicalSystem=jnxPppLinkConfigAuthenticatorLogicalSystem, jnxPppSessionInhibitIp=jnxPppSessionInhibitIp, jnxPppMlPppLinkConfigAuthenticatorLogicalSystem=jnxPppMlPppLinkConfigAuthenticatorLogicalSystem, jnxPppSummaryPppLinkIfLastChangeTime=jnxPppSummaryPppLinkIfLastChangeTime, jnxPppSummaryPppNetworkMplsNCPs=jnxPppSummaryPppNetworkMplsNCPs, jnxPppLinkConfigAuthentication2=jnxPppLinkConfigAuthentication2, jnxPppSummaryPppNetworkIpAdminOpen=jnxPppSummaryPppNetworkIpAdminOpen, jnxPppIpConfigIpcpNetmask=jnxPppIpConfigIpcpNetmask, jnxPppMlPppNetworkConfigEntry=jnxPppMlPppNetworkConfigEntry, jnxPppSummaryPppNetworkIpv6NcpOpened=jnxPppSummaryPppNetworkIpv6NcpOpened, jnxPppSummaryPppOsiNcpNotPresent=jnxPppSummaryPppOsiNcpNotPresent, jnxPppSessionOutPackets64=jnxPppSessionOutPackets64, PYSNMP_MODULE_ID=jnxPppMIB, jnxPppLinkConfigRowStatus=jnxPppLinkConfigRowStatus, jnxPppSummaryPppIfNotPresent=jnxPppSummaryPppIfNotPresent, jnxPppSessionRemotePrimaryDnsAddress=jnxPppSessionRemotePrimaryDnsAddress, jnxPppLinkConfigAuthentication=jnxPppLinkConfigAuthentication, jnxPppSummaryPppNetworkMplsNcpNotPresent=jnxPppSummaryPppNetworkMplsNcpNotPresent, jnxPppSummaryPppNetworkIpNCPs=jnxPppSummaryPppNetworkIpNCPs, jnxPppSessionAccountingInterval=jnxPppSessionAccountingInterval, jnxPppMlPppLinkConfigTable=jnxPppMlPppLinkConfigTable, jnxPppIpServiceStatus=jnxPppIpServiceStatus, jnxPppSessionEntry=jnxPppSessionEntry, jnxPppIpv6TerminateNegFailOption=jnxPppIpv6TerminateNegFailOption, jnxPppSessionRemoteIpv6AddressIfIdentifier=jnxPppSessionRemoteIpv6AddressIfIdentifier, jnxPppLinkStatusTable=jnxPppLinkStatusTable, jnxPppSummaryPppNetworkOsiNcpNotPresent=jnxPppSummaryPppNetworkOsiNcpNotPresent, jnxPppSummaryPppIfLowerLayerDown=jnxPppSummaryPppIfLowerLayerDown, jnxPppMIB=jnxPppMIB, jnxPppMlPppLinkConfigFragmentation=jnxPppMlPppLinkConfigFragmentation, jnxPppSummaryPppNetworkStaticInterfaceCount=jnxPppSummaryPppNetworkStaticInterfaceCount, jnxPppSummaryPppNetworkIfOperDown=jnxPppSummaryPppNetworkIfOperDown, jnxPppSummaryPppNetworkMplsNcpNoResources=jnxPppSummaryPppNetworkMplsNcpNoResources, jnxPppOsiConfigEntry=jnxPppOsiConfigEntry, jnxPppMlPppBundleName=jnxPppMlPppBundleName, jnxPppMlPppLinkConfigChapMinChallengeLength=jnxPppMlPppLinkConfigChapMinChallengeLength, jnxPppIpv6Entry=jnxPppIpv6Entry, jnxPppGlobalConfig=jnxPppGlobalConfig, jnxPppLinkStatusLocalAuthentication=jnxPppLinkStatusLocalAuthentication, jnxPppSummaryPppNetworkIfNotPresent=jnxPppSummaryPppNetworkIfNotPresent, jnxPppSessionInOctets=jnxPppSessionInOctets, jnxPppMlPppLinkConfigKeepalive=jnxPppMlPppLinkConfigKeepalive, jnxPppSummaryPppNetworkIpv6NcpNoResources=jnxPppSummaryPppNetworkIpv6NcpNoResources, jnxPppSummaryPppIfOperDormant=jnxPppSummaryPppIfOperDormant, jnxPppSec=jnxPppSec, jnxPppLinkConfigIgnoreMagicNumberMismatch=jnxPppLinkConfigIgnoreMagicNumberMismatch, jnxPppIpConfigEntry=jnxPppIpConfigEntry, jnxPppOsiConfigAdminStatus=jnxPppOsiConfigAdminStatus, jnxPppSummaryPppLinkIfOperDown=jnxPppSummaryPppLinkIfOperDown, jnxPppSummaryPppNetworkMplsNcpOpened=jnxPppSummaryPppNetworkMplsNcpOpened, jnxPppIpv6TerminateReason=jnxPppIpv6TerminateReason, jnxPppIpTerminateNegFailOption=jnxPppIpTerminateNegFailOption, jnxPppOsiTable=jnxPppOsiTable, jnxPppMlPppLinkConfigAaaProfile=jnxPppMlPppLinkConfigAaaProfile, jnxPppSummaryPppNetworkIpv6NcpClosed=jnxPppSummaryPppNetworkIpv6NcpClosed, jnxPppSummaryPppNetworkMplsAdminOpen=jnxPppSummaryPppNetworkMplsAdminOpen, jnxPppLinkStatusLocalMagicNumber=jnxPppLinkStatusLocalMagicNumber, jnxPppMlPppBundleEntry=jnxPppMlPppBundleEntry, jnxPppSessionSessionTimeout=jnxPppSessionSessionTimeout, jnxPppMlPppBindRowStatus=jnxPppMlPppBindRowStatus, jnxPppSummaryPppLinkStaticInterfaceCount=jnxPppSummaryPppLinkStaticInterfaceCount, JnxPppMlPppBundleName=JnxPppMlPppBundleName, jnxPppMlPppLinkConfigAuthentication=jnxPppMlPppLinkConfigAuthentication, jnxPppIpRemotePrimaryWinsAddress=jnxPppIpRemotePrimaryWinsAddress, jnxPppSummaryPppNetworkIfLowerLayerDown=jnxPppSummaryPppNetworkIfLowerLayerDown, jnxPppLinkStatusLocalMagicNumber1=jnxPppLinkStatusLocalMagicNumber1, jnxPppMlPppLinkConfigAuthentication2=jnxPppMlPppLinkConfigAuthentication2, jnxPppLinkConfigChapMinChallengeLength=jnxPppLinkConfigChapMinChallengeLength, jnxPppNextIfIndex=jnxPppNextIfIndex, jnxPppLinkStatusEntry=jnxPppLinkStatusEntry, jnxPppSummaryPppIpv6NCPs=jnxPppSummaryPppIpv6NCPs, JnxPppAuthentication2=JnxPppAuthentication2, jnxPppIpTable=jnxPppIpTable, jnxPppSummaryPppIpv6NcpOpened=jnxPppSummaryPppIpv6NcpOpened, jnxPppLinkConfigMaxAuthenRetries=jnxPppLinkConfigMaxAuthenRetries, jnxPppLinkConfigTable=jnxPppLinkConfigTable, jnxPppSummaryPppOsiAdminClose=jnxPppSummaryPppOsiAdminClose, jnxPppOsiTerminateNegFailOption=jnxPppOsiTerminateNegFailOption, jnxPppSummaryPppIpNCPs=jnxPppSummaryPppIpNCPs, jnxPppSummaryPppNetworkOsiNcpClosed=jnxPppSummaryPppNetworkOsiNcpClosed, jnxPppLinkStatuslcpRenegoTerminates=jnxPppLinkStatuslcpRenegoTerminates, jnxPppMlPppLinkConfigReassembly=jnxPppMlPppLinkConfigReassembly, jnxPppLinkConfigChapMaxChallengeLength=jnxPppLinkConfigChapMaxChallengeLength, jnxPppMlPppLinkConfigIgnoreMagicNumberMismatch=jnxPppMlPppLinkConfigIgnoreMagicNumberMismatch, jnxPppSummaryPppLinkIfAdminDown=jnxPppSummaryPppLinkIfAdminDown, jnxPppSummaryPppIpv6AdminClose=jnxPppSummaryPppIpv6AdminClose, jnxPppIpv6ConfigInitiateIpv6=jnxPppIpv6ConfigInitiateIpv6, jnxPppIpRemotePrimaryDnsAddress=jnxPppIpRemotePrimaryDnsAddress, jnxPppSessionTerminateReason=jnxPppSessionTerminateReason, jnxPppSummaryPppNetworkIpAdminClose=jnxPppSummaryPppNetworkIpAdminClose, jnxPppSummaryPppNetworkOsiNcpNoResources=jnxPppSummaryPppNetworkOsiNcpNoResources, jnxPppIpRemoteSecondaryDnsAddress=jnxPppIpRemoteSecondaryDnsAddress, jnxPppSummaryPppStaticInterfaceCount=jnxPppSummaryPppStaticInterfaceCount, jnxPppSummaryPppIfOperUp=jnxPppSummaryPppIfOperUp, jnxPppSummaryPppNetworkOsiNcpOpened=jnxPppSummaryPppNetworkOsiNcpOpened, jnxPppIpNetworkStatusIpcpRenegoTerminates=jnxPppIpNetworkStatusIpcpRenegoTerminates, jnxPppSummaryPppIpAdminClose=jnxPppSummaryPppIpAdminClose, jnxPppOsiServiceStatus=jnxPppOsiServiceStatus, jnxPppIpRemoteSecondaryWinsAddress=jnxPppIpRemoteSecondaryWinsAddress, jnxPppLinkConfigAaaProfile=jnxPppLinkConfigAaaProfile, jnxPppSessionOutPackets=jnxPppSessionOutPackets, jnxPppSessionInPackets64=jnxPppSessionInPackets64, jnxPppMlPppNetworkConfigLowerIfIndex=jnxPppMlPppNetworkConfigLowerIfIndex, jnxPppSessionStartTime=jnxPppSessionStartTime, jnxPppMlPppLinkConfigIfIndex=jnxPppMlPppLinkConfigIfIndex, jnxPppMlPppLinkConfigPassiveMode=jnxPppMlPppLinkConfigPassiveMode, jnxPppSummaryPppNetworkIpv6AdminClose=jnxPppSummaryPppNetworkIpv6AdminClose, jnxPppSummaryPppIpv6AdminOpen=jnxPppSummaryPppIpv6AdminOpen, jnxPPPObjects=jnxPPPObjects, jnxPppIpConfigTable=jnxPppIpConfigTable, jnxPppIpConfigIpcpLockout=jnxPppIpConfigIpcpLockout, jnxPppSummaryPppIfAdminDown=jnxPppSummaryPppIfAdminDown, jnxPppSession=jnxPppSession, jnxPppLinkConfigStandardIfIndex=jnxPppLinkConfigStandardIfIndex, jnxPppMlPppLinkBindEntry=jnxPppMlPppLinkBindEntry, jnxPppMlPppBundleRowStatus=jnxPppMlPppBundleRowStatus, jnxPppMlPppBundleTable=jnxPppMlPppBundleTable, jnxPppMlPppNetworkBundleName=jnxPppMlPppNetworkBundleName, jnxPppMlPppLinkConfigEntry=jnxPppMlPppLinkConfigEntry, jnxPppSummaryPppLinkIfLowerLayerDown=jnxPppSummaryPppLinkIfLowerLayerDown, jnxPppSummaryPppMplsNcpNotPresent=jnxPppSummaryPppMplsNcpNotPresent, jnxPppIpv6ConfigMaxIpv6cpRenegotiation=jnxPppIpv6ConfigMaxIpv6cpRenegotiation, jnxPppSessionOutOctets=jnxPppSessionOutOctets, jnxPppMlPppNetworkConfigIfIndex=jnxPppMlPppNetworkConfigIfIndex, jnxPppOsiTerminateReason=jnxPppOsiTerminateReason, jnxPppSummaryPppIpNcpNotPresent=jnxPppSummaryPppIpNcpNotPresent, jnxPppOsiRemoteAlignNpdu=jnxPppOsiRemoteAlignNpdu, jnxPppSummaryPppIpNcpClosed=jnxPppSummaryPppIpNcpClosed, jnxPppOsiConfigTable=jnxPppOsiConfigTable, jnxPppIpv6ServiceStatus=jnxPppIpv6ServiceStatus, jnxPppSessionInPackets=jnxPppSessionInPackets, jnxPppSessionInhibitIpv6=jnxPppSessionInhibitIpv6)
