#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:22:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
StorageType, Integer32, DisplayString, Unsigned32, RowStatus = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "StorageType", "Integer32", "DisplayString", "Unsigned32", "RowStatus")
HexString, NonReplicated, Hex, EnterpriseDateAndTime, DigitString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "HexString", "NonReplicated", "Hex", "EnterpriseDateAndTime", "DigitString")
mscTraceRcvr, mscTraceSessionIndex, mscTraceSession, mscTraceRcvrIndex, mscTraceIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvr", "mscTraceSessionIndex", "mscTraceSession", "mscTraceRcvrIndex", "mscTraceIndex")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, ObjectIdentity, Integer32, iso, Gauge32, ModuleIdentity, MibIdentifier, Unsigned32, TimeTicks, Counter32, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "ObjectIdentity", "Integer32", "iso", "Gauge32", "ModuleIdentity", "MibIdentifier", "Unsigned32", "TimeTicks", "Counter32", "NotificationType", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
x25TraceRcvrMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 62))
mscTraceRcvrX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2))
mscTraceRcvrX25RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 1), )
if mibBuilder.loadTexts: mscTraceRcvrX25RowStatusTable.setStatus('mandatory')
mscTraceRcvrX25RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25Index"))
if mibBuilder.loadTexts: mscTraceRcvrX25RowStatusEntry.setStatus('mandatory')
mscTraceRcvrX25RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25RowStatus.setStatus('mandatory')
mscTraceRcvrX25ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25ComponentName.setStatus('mandatory')
mscTraceRcvrX25StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25StorageType.setStatus('mandatory')
mscTraceRcvrX25Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscTraceRcvrX25Index.setStatus('mandatory')
mscTraceRcvrX25Dna = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2))
mscTraceRcvrX25DnaRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 1), )
if mibBuilder.loadTexts: mscTraceRcvrX25DnaRowStatusTable.setStatus('mandatory')
mscTraceRcvrX25DnaRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25DnaIndex"))
if mibBuilder.loadTexts: mscTraceRcvrX25DnaRowStatusEntry.setStatus('mandatory')
mscTraceRcvrX25DnaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaRowStatus.setStatus('mandatory')
mscTraceRcvrX25DnaComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaComponentName.setStatus('mandatory')
mscTraceRcvrX25DnaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaStorageType.setStatus('mandatory')
mscTraceRcvrX25DnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscTraceRcvrX25DnaIndex.setStatus('mandatory')
mscTraceRcvrX25DnaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 10), )
if mibBuilder.loadTexts: mscTraceRcvrX25DnaAddressTable.setStatus('mandatory')
mscTraceRcvrX25DnaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25DnaIndex"))
if mibBuilder.loadTexts: mscTraceRcvrX25DnaAddressEntry.setStatus('mandatory')
mscTraceRcvrX25DnaNumberingPlanIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaNumberingPlanIndicator.setStatus('mandatory')
mscTraceRcvrX25DnaDataNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaDataNetworkAddress.setStatus('mandatory')
mscTraceRcvrX25DnaOutgoingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 11), )
if mibBuilder.loadTexts: mscTraceRcvrX25DnaOutgoingOptionsTable.setStatus('mandatory')
mscTraceRcvrX25DnaOutgoingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25DnaIndex"))
if mibBuilder.loadTexts: mscTraceRcvrX25DnaOutgoingOptionsEntry.setStatus('mandatory')
mscTraceRcvrX25DnaOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaOutCalls.setStatus('mandatory')
mscTraceRcvrX25DnaOutDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1))).clone('high')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaOutDefaultPriority.setStatus('mandatory')
mscTraceRcvrX25DnaOutIntl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaOutIntl.setStatus('mandatory')
mscTraceRcvrX25DnaOutDefaultPathSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("throughput", 0), ("delay", 1))).clone('throughput')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaOutDefaultPathSensitivity.setStatus('obsolete')
mscTraceRcvrX25DnaOutDefaultPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1))).clone('high')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaOutDefaultPathReliability.setStatus('mandatory')
mscTraceRcvrX25DnaOutPathReliabilityOverRide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaOutPathReliabilityOverRide.setStatus('mandatory')
mscTraceRcvrX25DnaOutPathReliabilitySignal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaOutPathReliabilitySignal.setStatus('mandatory')
mscTraceRcvrX25DnaOutAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaOutAccess.setStatus('mandatory')
mscTraceRcvrX25DnaIncomingOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 12), )
if mibBuilder.loadTexts: mscTraceRcvrX25DnaIncomingOptionsTable.setStatus('mandatory')
mscTraceRcvrX25DnaIncomingOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25DnaIndex"))
if mibBuilder.loadTexts: mscTraceRcvrX25DnaIncomingOptionsEntry.setStatus('mandatory')
mscTraceRcvrX25DnaIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaIncCalls.setStatus('mandatory')
mscTraceRcvrX25DnaCallOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 13), )
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCallOptionsTable.setStatus('mandatory')
mscTraceRcvrX25DnaCallOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25DnaIndex"))
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCallOptionsEntry.setStatus('mandatory')
mscTraceRcvrX25DnaPacketSizes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 13, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="0100")).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaPacketSizes.setStatus('mandatory')
mscTraceRcvrX25DnaDefaultRecvFrmNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n2048')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaDefaultRecvFrmNetworkPacketSize.setStatus('mandatory')
mscTraceRcvrX25DnaDefaultSendToNetworkPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12))).clone('n2048')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaDefaultSendToNetworkPacketSize.setStatus('mandatory')
mscTraceRcvrX25DnaDefaultRecvFrmNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaDefaultRecvFrmNetworkThruputClass.setStatus('mandatory')
mscTraceRcvrX25DnaDefaultSendToNetworkThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaDefaultSendToNetworkThruputClass.setStatus('mandatory')
mscTraceRcvrX25DnaDefaultRecvFrmNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaDefaultRecvFrmNetworkWindowSize.setStatus('mandatory')
mscTraceRcvrX25DnaDefaultSendToNetworkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaDefaultSendToNetworkWindowSize.setStatus('mandatory')
mscTraceRcvrX25DnaPacketSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("endToEnd", 0), ("local", 1))).clone('local')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaPacketSizeNegotiation.setStatus('mandatory')
mscTraceRcvrX25DnaCugFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("basic", 0), ("extended", 1))).clone('basic')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugFormat.setStatus('mandatory')
mscTraceRcvrX25DnaCug = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2))
mscTraceRcvrX25DnaCugRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugRowStatusTable.setStatus('mandatory')
mscTraceRcvrX25DnaCugRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25DnaIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25DnaCugIndex"))
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugRowStatusEntry.setStatus('mandatory')
mscTraceRcvrX25DnaCugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugRowStatus.setStatus('mandatory')
mscTraceRcvrX25DnaCugComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugComponentName.setStatus('mandatory')
mscTraceRcvrX25DnaCugStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugStorageType.setStatus('mandatory')
mscTraceRcvrX25DnaCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugIndex.setStatus('mandatory')
mscTraceRcvrX25DnaCugCugOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 10), )
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugCugOptionsTable.setStatus('mandatory')
mscTraceRcvrX25DnaCugCugOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25DnaIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25DnaCugIndex"))
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugCugOptionsEntry.setStatus('mandatory')
mscTraceRcvrX25DnaCugType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("national", 0), ("international", 1))).clone('national')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugType.setStatus('mandatory')
mscTraceRcvrX25DnaCugDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 10, 1, 2), DigitString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="30303030")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugDnic.setStatus('mandatory')
mscTraceRcvrX25DnaCugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugInterlockCode.setStatus('mandatory')
mscTraceRcvrX25DnaCugPreferential = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugPreferential.setStatus('mandatory')
mscTraceRcvrX25DnaCugOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('allowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugOutCalls.setStatus('mandatory')
mscTraceRcvrX25DnaCugIncCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disallowed", 0), ("allowed", 1))).clone('disallowed')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugIncCalls.setStatus('mandatory')
mscTraceRcvrX25DnaCugPrivileged = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 2, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DnaCugPrivileged.setStatus('mandatory')
mscTraceRcvrX25Dc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3))
mscTraceRcvrX25DcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3, 1), )
if mibBuilder.loadTexts: mscTraceRcvrX25DcRowStatusTable.setStatus('mandatory')
mscTraceRcvrX25DcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25DcIndex"))
if mibBuilder.loadTexts: mscTraceRcvrX25DcRowStatusEntry.setStatus('mandatory')
mscTraceRcvrX25DcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DcRowStatus.setStatus('mandatory')
mscTraceRcvrX25DcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DcComponentName.setStatus('mandatory')
mscTraceRcvrX25DcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DcStorageType.setStatus('mandatory')
mscTraceRcvrX25DcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscTraceRcvrX25DcIndex.setStatus('mandatory')
mscTraceRcvrX25DcOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3, 10), )
if mibBuilder.loadTexts: mscTraceRcvrX25DcOptionsTable.setStatus('mandatory')
mscTraceRcvrX25DcOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceRcvrIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceRcvrX25DcIndex"))
if mibBuilder.loadTexts: mscTraceRcvrX25DcOptionsEntry.setStatus('mandatory')
mscTraceRcvrX25DcRemoteNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1))).clone('x121')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DcRemoteNpi.setStatus('mandatory')
mscTraceRcvrX25DcRemoteDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3, 10, 1, 4), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DcRemoteDna.setStatus('mandatory')
mscTraceRcvrX25DcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("switched", 0), ("permanentMaster", 1), ("permanentSlave", 2), ("permanentBackupSlave", 3))).clone('switched')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceRcvrX25DcType.setStatus('mandatory')
mscTraceRcvrX25DcUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 2, 2, 3, 10, 1, 8), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscTraceRcvrX25DcUserData.setStatus('mandatory')
mscTraceSessionX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2))
mscTraceSessionX25RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 1), )
if mibBuilder.loadTexts: mscTraceSessionX25RowStatusTable.setStatus('mandatory')
mscTraceSessionX25RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceSessionX25Index"))
if mibBuilder.loadTexts: mscTraceSessionX25RowStatusEntry.setStatus('mandatory')
mscTraceSessionX25RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25RowStatus.setStatus('mandatory')
mscTraceSessionX25ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25ComponentName.setStatus('mandatory')
mscTraceSessionX25StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25StorageType.setStatus('mandatory')
mscTraceSessionX25Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscTraceSessionX25Index.setStatus('mandatory')
mscTraceSessionX25Vc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2))
mscTraceSessionX25VcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 1), )
if mibBuilder.loadTexts: mscTraceSessionX25VcRowStatusTable.setStatus('mandatory')
mscTraceSessionX25VcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceSessionX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceSessionX25VcIndex"))
if mibBuilder.loadTexts: mscTraceSessionX25VcRowStatusEntry.setStatus('mandatory')
mscTraceSessionX25VcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcRowStatus.setStatus('mandatory')
mscTraceSessionX25VcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcComponentName.setStatus('mandatory')
mscTraceSessionX25VcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcStorageType.setStatus('mandatory')
mscTraceSessionX25VcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscTraceSessionX25VcIndex.setStatus('mandatory')
mscTraceSessionX25VcCadTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10), )
if mibBuilder.loadTexts: mscTraceSessionX25VcCadTable.setStatus('mandatory')
mscTraceSessionX25VcCadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceSessionX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceSessionX25VcIndex"))
if mibBuilder.loadTexts: mscTraceSessionX25VcCadEntry.setStatus('mandatory')
mscTraceSessionX25VcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("svc", 0), ("pvc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcType.setStatus('mandatory')
mscTraceSessionX25VcState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcState.setStatus('mandatory')
mscTraceSessionX25VcPreviousState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("creating", 0), ("readyP1", 1), ("dteWaitingP2", 2), ("dceWaitingP3", 3), ("dataTransferP4", 4), ("unsupportedP5", 5), ("dteClearRequestP6", 6), ("dceClearIndicationP7", 7), ("termination", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcPreviousState.setStatus('mandatory')
mscTraceSessionX25VcDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcDiagnosticCode.setStatus('mandatory')
mscTraceSessionX25VcPreviousDiagnosticCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcPreviousDiagnosticCode.setStatus('mandatory')
mscTraceSessionX25VcCalledNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcCalledNpi.setStatus('mandatory')
mscTraceSessionX25VcCalledDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 7), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcCalledDna.setStatus('mandatory')
mscTraceSessionX25VcCalledLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcCalledLcn.setStatus('mandatory')
mscTraceSessionX25VcCallingNpi = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("x121", 0), ("e164", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcCallingNpi.setStatus('mandatory')
mscTraceSessionX25VcCallingDna = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 10), DigitString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcCallingDna.setStatus('mandatory')
mscTraceSessionX25VcCallingLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcCallingLcn.setStatus('mandatory')
mscTraceSessionX25VcAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcAccountingEnabled.setStatus('mandatory')
mscTraceSessionX25VcFastSelectCall = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcFastSelectCall.setStatus('mandatory')
mscTraceSessionX25VcLocalRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcLocalRxPktSize.setStatus('mandatory')
mscTraceSessionX25VcLocalTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcLocalTxPktSize.setStatus('mandatory')
mscTraceSessionX25VcLocalTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcLocalTxWindowSize.setStatus('mandatory')
mscTraceSessionX25VcLocalRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcLocalRxWindowSize.setStatus('mandatory')
mscTraceSessionX25VcPathReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("high", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcPathReliability.setStatus('mandatory')
mscTraceSessionX25VcAccountingEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("callingEnd", 0), ("calledEnd", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcAccountingEnd.setStatus('mandatory')
mscTraceSessionX25VcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcPriority.setStatus('mandatory')
mscTraceSessionX25VcSegmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcSegmentSize.setStatus('mandatory')
mscTraceSessionX25VcSubnetTxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcSubnetTxPktSize.setStatus('mandatory')
mscTraceSessionX25VcSubnetTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcSubnetTxWindowSize.setStatus('mandatory')
mscTraceSessionX25VcSubnetRxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 0), ("n16", 4), ("n32", 5), ("n64", 6), ("n128", 7), ("n256", 8), ("n512", 9), ("n1024", 10), ("n2048", 11), ("n4096", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcSubnetRxPktSize.setStatus('mandatory')
mscTraceSessionX25VcSubnetRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcSubnetRxWindowSize.setStatus('mandatory')
mscTraceSessionX25VcMaxSubnetPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcMaxSubnetPktSize.setStatus('mandatory')
mscTraceSessionX25VcTransferPriorityToNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcTransferPriorityToNetwork.setStatus('mandatory')
mscTraceSessionX25VcTransferPriorityFromNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 10, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9))).clone(namedValues=NamedValues(("normal", 0), ("high", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcTransferPriorityFromNetwork.setStatus('mandatory')
mscTraceSessionX25VcIntdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 11), )
if mibBuilder.loadTexts: mscTraceSessionX25VcIntdTable.setStatus('mandatory')
mscTraceSessionX25VcIntdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceSessionX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceSessionX25VcIndex"))
if mibBuilder.loadTexts: mscTraceSessionX25VcIntdEntry.setStatus('mandatory')
mscTraceSessionX25VcCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 11, 1, 1), Hex().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcCallReferenceNumber.setStatus('obsolete')
mscTraceSessionX25VcElapsedTimeTillNow = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcElapsedTimeTillNow.setStatus('mandatory')
mscTraceSessionX25VcSegmentsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcSegmentsRx.setStatus('mandatory')
mscTraceSessionX25VcSegmentsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcSegmentsSent.setStatus('mandatory')
mscTraceSessionX25VcStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 11, 1, 5), EnterpriseDateAndTime().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(19, 19), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcStartTime.setStatus('mandatory')
mscTraceSessionX25VcCallReferenceNumberDecimal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 11, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcCallReferenceNumberDecimal.setStatus('mandatory')
mscTraceSessionX25VcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12), )
if mibBuilder.loadTexts: mscTraceSessionX25VcStatsTable.setStatus('mandatory')
mscTraceSessionX25VcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceIndex"), (0, "Nortel-MsCarrier-MscPassport-TraceBaseMIB", "mscTraceSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceSessionX25Index"), (0, "Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", "mscTraceSessionX25VcIndex"))
if mibBuilder.loadTexts: mscTraceSessionX25VcStatsEntry.setStatus('mandatory')
mscTraceSessionX25VcAckStackingTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcAckStackingTimeouts.setStatus('mandatory')
mscTraceSessionX25VcOutOfRangeFrmFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcOutOfRangeFrmFromSubnet.setStatus('mandatory')
mscTraceSessionX25VcDuplicatesFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcDuplicatesFromSubnet.setStatus('mandatory')
mscTraceSessionX25VcFrmRetryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcFrmRetryTimeouts.setStatus('mandatory')
mscTraceSessionX25VcPeakRetryQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcPeakRetryQueueSize.setStatus('mandatory')
mscTraceSessionX25VcPeakOoSeqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcPeakOoSeqQueueSize.setStatus('mandatory')
mscTraceSessionX25VcPeakOoSeqFrmForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcPeakOoSeqFrmForwarded.setStatus('mandatory')
mscTraceSessionX25VcPeakStackedAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcPeakStackedAcksRx.setStatus('mandatory')
mscTraceSessionX25VcSubnetRecoveries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcSubnetRecoveries.setStatus('mandatory')
mscTraceSessionX25VcWindowClosuresToSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcWindowClosuresToSubnet.setStatus('mandatory')
mscTraceSessionX25VcWindowClosuresFromSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcWindowClosuresFromSubnet.setStatus('mandatory')
mscTraceSessionX25VcWrTriggers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 106, 3, 2, 2, 12, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscTraceSessionX25VcWrTriggers.setStatus('mandatory')
x25TraceRcvrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 62, 1))
x25TraceRcvrGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 62, 1, 1))
x25TraceRcvrGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 62, 1, 1, 3))
x25TraceRcvrGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 62, 1, 1, 3, 2))
x25TraceRcvrCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 62, 3))
x25TraceRcvrCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 62, 3, 1))
x25TraceRcvrCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 62, 3, 1, 3))
x25TraceRcvrCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 62, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-X25TraceRcvrMIB", mscTraceSessionX25VcCallReferenceNumber=mscTraceSessionX25VcCallReferenceNumber, mscTraceSessionX25VcDiagnosticCode=mscTraceSessionX25VcDiagnosticCode, mscTraceSessionX25VcCallingDna=mscTraceSessionX25VcCallingDna, mscTraceSessionX25VcStatsTable=mscTraceSessionX25VcStatsTable, mscTraceRcvrX25DnaCugRowStatusTable=mscTraceRcvrX25DnaCugRowStatusTable, mscTraceSessionX25VcMaxSubnetPktSize=mscTraceSessionX25VcMaxSubnetPktSize, mscTraceRcvrX25DnaRowStatusEntry=mscTraceRcvrX25DnaRowStatusEntry, mscTraceSessionX25VcStorageType=mscTraceSessionX25VcStorageType, mscTraceSessionX25VcAccountingEnd=mscTraceSessionX25VcAccountingEnd, mscTraceSessionX25VcCadEntry=mscTraceSessionX25VcCadEntry, mscTraceSessionX25VcSegmentSize=mscTraceSessionX25VcSegmentSize, mscTraceRcvrX25DnaDefaultSendToNetworkWindowSize=mscTraceRcvrX25DnaDefaultSendToNetworkWindowSize, mscTraceSessionX25VcStatsEntry=mscTraceSessionX25VcStatsEntry, mscTraceSessionX25VcSegmentsRx=mscTraceSessionX25VcSegmentsRx, mscTraceRcvrX25DcRowStatus=mscTraceRcvrX25DcRowStatus, mscTraceRcvrX25DnaCugCugOptionsTable=mscTraceRcvrX25DnaCugCugOptionsTable, mscTraceSessionX25RowStatusTable=mscTraceSessionX25RowStatusTable, mscTraceRcvrX25DnaAddressTable=mscTraceRcvrX25DnaAddressTable, mscTraceSessionX25VcRowStatusEntry=mscTraceSessionX25VcRowStatusEntry, mscTraceSessionX25VcPriority=mscTraceSessionX25VcPriority, mscTraceSessionX25VcIntdEntry=mscTraceSessionX25VcIntdEntry, mscTraceSessionX25VcStartTime=mscTraceSessionX25VcStartTime, mscTraceRcvrX25DnaDefaultRecvFrmNetworkWindowSize=mscTraceRcvrX25DnaDefaultRecvFrmNetworkWindowSize, x25TraceRcvrCapabilitiesCA02=x25TraceRcvrCapabilitiesCA02, mscTraceRcvrX25DnaOutDefaultPriority=mscTraceRcvrX25DnaOutDefaultPriority, mscTraceRcvrX25DcIndex=mscTraceRcvrX25DcIndex, mscTraceSessionX25VcIntdTable=mscTraceSessionX25VcIntdTable, mscTraceRcvrX25DnaCugRowStatusEntry=mscTraceRcvrX25DnaCugRowStatusEntry, mscTraceRcvrX25DnaOutCalls=mscTraceRcvrX25DnaOutCalls, mscTraceRcvrX25DnaOutAccess=mscTraceRcvrX25DnaOutAccess, mscTraceSessionX25VcCallReferenceNumberDecimal=mscTraceSessionX25VcCallReferenceNumberDecimal, mscTraceRcvrX25DnaCugIndex=mscTraceRcvrX25DnaCugIndex, mscTraceSessionX25VcPreviousState=mscTraceSessionX25VcPreviousState, mscTraceSessionX25VcWrTriggers=mscTraceSessionX25VcWrTriggers, mscTraceRcvrX25DcComponentName=mscTraceRcvrX25DcComponentName, mscTraceRcvrX25DcRemoteDna=mscTraceRcvrX25DcRemoteDna, mscTraceSessionX25Vc=mscTraceSessionX25Vc, mscTraceSessionX25ComponentName=mscTraceSessionX25ComponentName, mscTraceRcvrX25DnaCugStorageType=mscTraceRcvrX25DnaCugStorageType, x25TraceRcvrGroupCA02=x25TraceRcvrGroupCA02, mscTraceSessionX25VcIndex=mscTraceSessionX25VcIndex, mscTraceSessionX25VcSubnetTxWindowSize=mscTraceSessionX25VcSubnetTxWindowSize, mscTraceRcvrX25DnaOutDefaultPathReliability=mscTraceRcvrX25DnaOutDefaultPathReliability, mscTraceSessionX25VcType=mscTraceSessionX25VcType, mscTraceRcvrX25DnaIndex=mscTraceRcvrX25DnaIndex, mscTraceSessionX25VcAckStackingTimeouts=mscTraceSessionX25VcAckStackingTimeouts, mscTraceSessionX25VcLocalRxWindowSize=mscTraceSessionX25VcLocalRxWindowSize, mscTraceSessionX25VcFrmRetryTimeouts=mscTraceSessionX25VcFrmRetryTimeouts, mscTraceSessionX25VcWindowClosuresFromSubnet=mscTraceSessionX25VcWindowClosuresFromSubnet, mscTraceRcvrX25DnaCugOutCalls=mscTraceRcvrX25DnaCugOutCalls, mscTraceRcvrX25=mscTraceRcvrX25, mscTraceSessionX25VcCalledDna=mscTraceSessionX25VcCalledDna, mscTraceRcvrX25DcStorageType=mscTraceRcvrX25DcStorageType, mscTraceSessionX25VcDuplicatesFromSubnet=mscTraceSessionX25VcDuplicatesFromSubnet, mscTraceSessionX25RowStatusEntry=mscTraceSessionX25RowStatusEntry, mscTraceSessionX25VcRowStatus=mscTraceSessionX25VcRowStatus, mscTraceRcvrX25DnaCugRowStatus=mscTraceRcvrX25DnaCugRowStatus, mscTraceRcvrX25DcOptionsTable=mscTraceRcvrX25DcOptionsTable, mscTraceSessionX25VcLocalTxPktSize=mscTraceSessionX25VcLocalTxPktSize, mscTraceRcvrX25DcRowStatusTable=mscTraceRcvrX25DcRowStatusTable, mscTraceSessionX25VcRowStatusTable=mscTraceSessionX25VcRowStatusTable, mscTraceRcvrX25DcType=mscTraceRcvrX25DcType, mscTraceSessionX25VcCalledLcn=mscTraceSessionX25VcCalledLcn, mscTraceSessionX25VcSegmentsSent=mscTraceSessionX25VcSegmentsSent, mscTraceSessionX25Index=mscTraceSessionX25Index, mscTraceSessionX25VcSubnetRxWindowSize=mscTraceSessionX25VcSubnetRxWindowSize, mscTraceSessionX25VcState=mscTraceSessionX25VcState, mscTraceRcvrX25Index=mscTraceRcvrX25Index, mscTraceRcvrX25ComponentName=mscTraceRcvrX25ComponentName, mscTraceRcvrX25DnaCugComponentName=mscTraceRcvrX25DnaCugComponentName, mscTraceSessionX25VcLocalTxWindowSize=mscTraceSessionX25VcLocalTxWindowSize, mscTraceSessionX25VcAccountingEnabled=mscTraceSessionX25VcAccountingEnabled, mscTraceRcvrX25DnaAddressEntry=mscTraceRcvrX25DnaAddressEntry, mscTraceRcvrX25RowStatusEntry=mscTraceRcvrX25RowStatusEntry, mscTraceRcvrX25DnaCug=mscTraceRcvrX25DnaCug, mscTraceRcvrX25DnaOutIntl=mscTraceRcvrX25DnaOutIntl, mscTraceSessionX25VcElapsedTimeTillNow=mscTraceSessionX25VcElapsedTimeTillNow, mscTraceRcvrX25DcOptionsEntry=mscTraceRcvrX25DcOptionsEntry, mscTraceRcvrX25DnaDefaultRecvFrmNetworkThruputClass=mscTraceRcvrX25DnaDefaultRecvFrmNetworkThruputClass, mscTraceRcvrX25DnaOutgoingOptionsEntry=mscTraceRcvrX25DnaOutgoingOptionsEntry, mscTraceRcvrX25DnaOutPathReliabilitySignal=mscTraceRcvrX25DnaOutPathReliabilitySignal, mscTraceSessionX25VcTransferPriorityFromNetwork=mscTraceSessionX25VcTransferPriorityFromNetwork, mscTraceSessionX25VcCadTable=mscTraceSessionX25VcCadTable, mscTraceRcvrX25DnaIncCalls=mscTraceRcvrX25DnaIncCalls, mscTraceRcvrX25DnaDefaultSendToNetworkPacketSize=mscTraceRcvrX25DnaDefaultSendToNetworkPacketSize, mscTraceRcvrX25DnaDataNetworkAddress=mscTraceRcvrX25DnaDataNetworkAddress, mscTraceRcvrX25DnaIncomingOptionsTable=mscTraceRcvrX25DnaIncomingOptionsTable, mscTraceSessionX25VcPreviousDiagnosticCode=mscTraceSessionX25VcPreviousDiagnosticCode, mscTraceRcvrX25DnaCugPreferential=mscTraceRcvrX25DnaCugPreferential, mscTraceSessionX25StorageType=mscTraceSessionX25StorageType, mscTraceSessionX25VcPeakOoSeqFrmForwarded=mscTraceSessionX25VcPeakOoSeqFrmForwarded, mscTraceSessionX25VcSubnetTxPktSize=mscTraceSessionX25VcSubnetTxPktSize, mscTraceRcvrX25StorageType=mscTraceRcvrX25StorageType, mscTraceRcvrX25RowStatusTable=mscTraceRcvrX25RowStatusTable, mscTraceRcvrX25DnaCallOptionsEntry=mscTraceRcvrX25DnaCallOptionsEntry, mscTraceRcvrX25DnaCugPrivileged=mscTraceRcvrX25DnaCugPrivileged, mscTraceRcvrX25DnaPacketSizeNegotiation=mscTraceRcvrX25DnaPacketSizeNegotiation, x25TraceRcvrCapabilitiesCA02A=x25TraceRcvrCapabilitiesCA02A, mscTraceRcvrX25DnaRowStatusTable=mscTraceRcvrX25DnaRowStatusTable, mscTraceRcvrX25DcUserData=mscTraceRcvrX25DcUserData, x25TraceRcvrCapabilitiesCA=x25TraceRcvrCapabilitiesCA, mscTraceSessionX25VcPeakRetryQueueSize=mscTraceSessionX25VcPeakRetryQueueSize, mscTraceSessionX25VcComponentName=mscTraceSessionX25VcComponentName, mscTraceRcvrX25DnaCallOptionsTable=mscTraceRcvrX25DnaCallOptionsTable, mscTraceSessionX25VcFastSelectCall=mscTraceSessionX25VcFastSelectCall, mscTraceSessionX25VcTransferPriorityToNetwork=mscTraceSessionX25VcTransferPriorityToNetwork, mscTraceRcvrX25DnaNumberingPlanIndicator=mscTraceRcvrX25DnaNumberingPlanIndicator, mscTraceSessionX25VcSubnetRxPktSize=mscTraceSessionX25VcSubnetRxPktSize, mscTraceRcvrX25DnaCugCugOptionsEntry=mscTraceRcvrX25DnaCugCugOptionsEntry, mscTraceSessionX25VcWindowClosuresToSubnet=mscTraceSessionX25VcWindowClosuresToSubnet, x25TraceRcvrGroup=x25TraceRcvrGroup, mscTraceRcvrX25DnaComponentName=mscTraceRcvrX25DnaComponentName, x25TraceRcvrCapabilities=x25TraceRcvrCapabilities, mscTraceRcvrX25DcRowStatusEntry=mscTraceRcvrX25DcRowStatusEntry, mscTraceRcvrX25DnaPacketSizes=mscTraceRcvrX25DnaPacketSizes, mscTraceSessionX25VcOutOfRangeFrmFromSubnet=mscTraceSessionX25VcOutOfRangeFrmFromSubnet, mscTraceRcvrX25Dc=mscTraceRcvrX25Dc, mscTraceRcvrX25DnaCugFormat=mscTraceRcvrX25DnaCugFormat, mscTraceSessionX25VcCalledNpi=mscTraceSessionX25VcCalledNpi, x25TraceRcvrGroupCA=x25TraceRcvrGroupCA, mscTraceRcvrX25DnaOutPathReliabilityOverRide=mscTraceRcvrX25DnaOutPathReliabilityOverRide, mscTraceRcvrX25DnaStorageType=mscTraceRcvrX25DnaStorageType, mscTraceRcvrX25DnaDefaultSendToNetworkThruputClass=mscTraceRcvrX25DnaDefaultSendToNetworkThruputClass, mscTraceRcvrX25Dna=mscTraceRcvrX25Dna, mscTraceRcvrX25DnaRowStatus=mscTraceRcvrX25DnaRowStatus, mscTraceRcvrX25DnaOutDefaultPathSensitivity=mscTraceRcvrX25DnaOutDefaultPathSensitivity, mscTraceRcvrX25DnaDefaultRecvFrmNetworkPacketSize=mscTraceRcvrX25DnaDefaultRecvFrmNetworkPacketSize, mscTraceRcvrX25DcRemoteNpi=mscTraceRcvrX25DcRemoteNpi, mscTraceSessionX25VcPeakOoSeqQueueSize=mscTraceSessionX25VcPeakOoSeqQueueSize, mscTraceRcvrX25RowStatus=mscTraceRcvrX25RowStatus, mscTraceRcvrX25DnaCugIncCalls=mscTraceRcvrX25DnaCugIncCalls, x25TraceRcvrGroupCA02A=x25TraceRcvrGroupCA02A, mscTraceSessionX25VcLocalRxPktSize=mscTraceSessionX25VcLocalRxPktSize, x25TraceRcvrMIB=x25TraceRcvrMIB, mscTraceRcvrX25DnaCugType=mscTraceRcvrX25DnaCugType, mscTraceSessionX25RowStatus=mscTraceSessionX25RowStatus, mscTraceSessionX25VcPeakStackedAcksRx=mscTraceSessionX25VcPeakStackedAcksRx, mscTraceRcvrX25DnaIncomingOptionsEntry=mscTraceRcvrX25DnaIncomingOptionsEntry, mscTraceSessionX25VcPathReliability=mscTraceSessionX25VcPathReliability, mscTraceSessionX25=mscTraceSessionX25, mscTraceSessionX25VcCallingNpi=mscTraceSessionX25VcCallingNpi, mscTraceSessionX25VcSubnetRecoveries=mscTraceSessionX25VcSubnetRecoveries, mscTraceRcvrX25DnaCugInterlockCode=mscTraceRcvrX25DnaCugInterlockCode, mscTraceSessionX25VcCallingLcn=mscTraceSessionX25VcCallingLcn, mscTraceRcvrX25DnaCugDnic=mscTraceRcvrX25DnaCugDnic, mscTraceRcvrX25DnaOutgoingOptionsTable=mscTraceRcvrX25DnaOutgoingOptionsTable)
