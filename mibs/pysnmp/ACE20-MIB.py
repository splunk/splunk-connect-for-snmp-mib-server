#
# PySNMP MIB module ACE20-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACE20-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:57:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
AtmTrafficDescrParamIndex, = mibBuilder.importSymbols("ATM-MIB", "AtmTrafficDescrParamIndex")
ifAlias, = mibBuilder.importSymbols("IF-MIB", "ifAlias")
agnIndication, alarmSeverity, alarmState, TimeSlots, radAtm, agnLed = mibBuilder.importSymbols("RAD-MIB", "agnIndication", "alarmSeverity", "alarmState", "TimeSlots", "radAtm", "agnLed")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, NotificationType, Counter64, ObjectIdentity, Gauge32, ModuleIdentity, MibIdentifier, Unsigned32, Integer32, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "NotificationType", "Counter64", "ObjectIdentity", "Gauge32", "ModuleIdentity", "MibIdentifier", "Unsigned32", "Integer32", "TimeTicks", "iso")
TimeStamp, TextualConvention, RowStatus, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "RowStatus", "DisplayString", "MacAddress")
atmSu = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4))
atmSuSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 1))
atmSuSystemSwOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemSwOperStatus.setStatus('current')
atmSuSystemSwSwitchVersionsCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemSwSwitchVersionsCmd.setStatus('current')
atmSuSystemHistoryAlrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3), )
if mibBuilder.loadTexts: atmSuSystemHistoryAlrTable.setStatus('current')
atmSuSystemHistoryAlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1), ).setIndexNames((0, "ACE20-MIB", "atmSuSystemHistoryAlrIndex"))
if mibBuilder.loadTexts: atmSuSystemHistoryAlrEntry.setStatus('current')
atmSuSystemHistoryAlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrIndex.setStatus('current')
atmSuSystemHistoryAlrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrIfIndex.setStatus('current')
atmSuSystemHistoryAlrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrDescription.setStatus('current')
atmSuSystemHistoryAlrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("event", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrStatus.setStatus('current')
atmSuSystemHistoryAlrOccurrenceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrOccurrenceTime.setStatus('current')
atmSuSystemHistoryAlrVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrVpi.setStatus('current')
atmSuSystemHistoryAlrVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemHistoryAlrVci.setStatus('current')
atmSuSystemClearHistoryAlrListCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemClearHistoryAlrListCmd.setStatus('current')
atmSuSystemCurrentAlrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 5), )
if mibBuilder.loadTexts: atmSuSystemCurrentAlrTable.setStatus('current')
atmSuSystemCurrentAlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 5, 1), ).setIndexNames((0, "ACE20-MIB", "atmSuSystemCurrentAlrIndex"))
if mibBuilder.loadTexts: atmSuSystemCurrentAlrEntry.setStatus('current')
atmSuSystemCurrentAlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemCurrentAlrIndex.setStatus('current')
atmSuSystemCurrentAlrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemCurrentAlrIfIndex.setStatus('current')
atmSuSystemCurrentAlrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemCurrentAlrDescription.setStatus('current')
atmSuSystemILMICommunity = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemILMICommunity.setStatus('current')
atmSuSystemTrapMaxManagers = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 7), Integer32().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemTrapMaxManagers.setStatus('current')
atmSuSystemAalSelection = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("aal2", 2), ("aal1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemAalSelection.setStatus('current')
atmSuSystemCodingLaw = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("aLaw", 2), ("uLaw", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemCodingLaw.setStatus('current')
atmSuSystemISDNDataLinkActivation = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("nonPermanent", 2), ("permanent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemISDNDataLinkActivation.setStatus('current')
atmSuSystemJitterBuffer = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemJitterBuffer.setStatus('current')
atmSuSystemOperMode = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("ima", 2), ("miniDslam", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuSystemOperMode.setStatus('current')
atmSuSystemDSPGain = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuSystemDSPGain.setStatus('current')
atmSuPort = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 2))
atmSuPortDataCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1), )
if mibBuilder.loadTexts: atmSuPortDataCnfgTable.setStatus('current')
atmSuPortDataCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortDataCnfgEntry.setStatus('current')
atmSuPortDataApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("frameRelay", 1), ("atmDxi", 2), ("bridgedEthernet", 3), ("smdsDxi", 4), ("aal1Stream", 5), ("routedEthernet", 6), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataApplication.setStatus('current')
atmSuPortDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 255))).clone(namedValues=NamedValues(("r64KBps", 1), ("r128KBps", 2), ("r192KBps", 3), ("r256KBps", 4), ("r320KBps", 5), ("r384KBps", 6), ("r448KBps", 7), ("r512KBps", 8), ("r576KBps", 9), ("r640KBps", 10), ("r704KBps", 11), ("r768KBps", 12), ("r832KBps", 13), ("r896KBps", 14), ("r960KBps", 15), ("r1024KBps", 16), ("r1088KBps", 17), ("r1152KBps", 18), ("r1216KBps", 19), ("r1280KBps", 20), ("r1344KBps", 21), ("r1408KBps", 22), ("r1472KBps", 23), ("r1536KBps", 24), ("r1544network", 25), ("r1600KBps", 26), ("r1664KBps", 27), ("r1728KBps", 28), ("r1792KBps", 29), ("r1856KBps", 30), ("r1920KBps", 31), ("r1984KBps", 32), ("r2048KBps", 33), ("r2048network", 34), ("r8192KBps", 35), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataRate.setStatus('current')
atmSuPortDataDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("obeyRtsDcdOn", 3), ("obeyRtsDcdOff", 4), ("ignoreRtsDcdOn", 5), ("ignoreRtsDcdOff", 6), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataDCD.setStatus('current')
atmSuPortDataMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("nrzi", 1), ("nrz", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDataMode.setStatus('deprecated')
atmSuPortDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("cRC16", 1), ("cRC32", 2), ("noCRC", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataCRC.setStatus('current')
atmSuPortDataClock = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("dce", 1), ("edce", 2), ("dte", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataClock.setStatus('current')
atmSuPortDataMaxNoOfConns = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDataMaxNoOfConns.setStatus('current')
atmSuPortDataConfNoOfConns = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDataConfNoOfConns.setStatus('current')
atmSuPortDataIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataIdleCode.setStatus('current')
atmSuPortDataInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("x21", 2), ("v35", 3), ("v36", 4), ("rs530", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataInterfaceType.setStatus('current')
atmSuPortDataClkPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("inverted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDataClkPolarity.setStatus('current')
atmSuPortDataCtsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDataCtsStatus.setStatus('current')
atmSuPortDataRtsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDataRtsStatus.setStatus('current')
atmSuPortDs1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2))
atmSuPortDs1CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1), )
if mibBuilder.loadTexts: atmSuPortDs1CnfgTable.setStatus('current')
atmSuPortDs1CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortDs1CnfgEntry.setStatus('current')
atmSuPortDs1CnfgRxSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("s12dB", 1), ("s30dB", 2), ("s36dB", 3), ("s15dB", 4), ("s43dB", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CnfgRxSensitivity.setStatus('current')
atmSuPortDs1CnfgLBO = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("txGain0db", 1), ("txGain7dot5db", 2), ("txGain15db", 3), ("txGain22dot5db", 4), ("len0p133ft", 5), ("len133p266ft", 6), ("len266p399ft", 7), ("len399p533ft", 8), ("len533p655ft", 9), ("unbalanceE1", 10), ("balanceE1", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CnfgLBO.setStatus('current')
atmSuPortDs1CnfgRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ccittE1", 1), ("restoreT1secFast", 2), ("restoreT10sec62411", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CnfgRestoreTime.setStatus('current')
atmSuPortDs1CnfgInbandMng = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6))).clone(namedValues=NamedValues(("off", 2), ("dedicatedTs", 4), ("dedicatedFr", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CnfgInbandMng.setStatus('current')
atmSuPortDs1CnfgDedicatedTs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CnfgDedicatedTs.setStatus('current')
atmSuPortDs1CbrCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2), )
if mibBuilder.loadTexts: atmSuPortDs1CbrCnfgTable.setStatus('current')
atmSuPortDs1CbrCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortDs1CbrCnfgEntry.setStatus('current')
atmSuPortDs1CbrIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CbrIdleCode.setStatus('current')
atmSuPortDs1CbrRxTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1, 2), TimeSlots()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDs1CbrRxTimeSlots.setStatus('current')
atmSuPortDs1CbrTxTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1, 3), TimeSlots()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDs1CbrTxTimeSlots.setStatus('current')
atmSuPortDs1CbrMaxNoOfConns = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDs1CbrMaxNoOfConns.setStatus('current')
atmSuPortDs1CbrConfNoOfConns = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortDs1CbrConfNoOfConns.setStatus('current')
atmSuPortDs1CbrSignallingSampleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("msec100", 1), ("msec200", 2), ("msec500", 3), ("msec1000", 4), ("msec1500", 5), ("msec2000", 6))).clone('msec500')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDs1CbrSignallingSampleTime.setStatus('current')
atmSuPortAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3))
atmSuPortAtmCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1), )
if mibBuilder.loadTexts: atmSuPortAtmCnfgTable.setStatus('current')
atmSuPortAtmCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortAtmCnfgEntry.setStatus('current')
atmSuPortAtmCnfgIdleCellCLP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clp0", 1), ("clp1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmCnfgIdleCellCLP.setStatus('current')
atmSuPortAtmCnfgScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmCnfgScramble.setStatus('current')
atmSuPortAtmSNMPVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmSNMPVpi.setStatus('current')
atmSuPortAtmSNMPVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmSNMPVci.setStatus('current')
atmSuPortAtmSNMPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmSNMPStatus.setStatus('current')
atmSuPortAtmILMIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmILMIStatus.setStatus('current')
atmSuPortAtmSNMPIp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmSNMPIp.setStatus('current')
atmSuPortAtmCnfgCDVOptimization = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmCnfgCDVOptimization.setStatus('current')
atmSuPortAtmCnfgShapingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("sw", 2), ("hwNcits1", 3), ("hwNcits2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmCnfgShapingMode.setStatus('current')
atmSuPortAtmSNMPTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 1, 1, 10), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortAtmSNMPTrafficDescrIndex.setStatus('current')
atmSuPortAtmIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2), )
if mibBuilder.loadTexts: atmSuPortAtmIfStatsTable.setStatus('current')
atmSuPortAtmIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortAtmIfStatsEntry.setStatus('current')
atmSuPortAtmRxClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmRxClp0Cells.setStatus('current')
atmSuPortAtmRxClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmRxClp1Cells.setStatus('current')
atmSuPortAtmRxEfciSetCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmRxEfciSetCells.setStatus('current')
atmSuPortAtmRxOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmRxOamCells.setStatus('current')
atmSuPortAtmTxClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmTxClp0Cells.setStatus('current')
atmSuPortAtmTxClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmTxClp1Cells.setStatus('current')
atmSuPortAtmTxEfciSetCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmTxEfciSetCells.setStatus('current')
atmSuPortAtmTxOamCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmTxOamCells.setStatus('current')
atmSuPortAtmVclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3), )
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTable.setStatus('current')
atmSuPortAtmVclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"), (0, "ACE20-MIB", "atmVclVpi"), (0, "ACE20-MIB", "atmVclVci"))
if mibBuilder.loadTexts: atmSuPortAtmVclStatsEntry.setStatus('current')
atmSuPortAtmVclStatsRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxCells.setStatus('current')
atmSuPortAtmVclStatsRxClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxClp0Cells.setStatus('current')
atmSuPortAtmVclStatsRxClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxClp1Cells.setStatus('current')
atmSuPortAtmVclStatsRxDiscardsCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxDiscardsCells.setStatus('current')
atmSuPortAtmVclStatsTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxCells.setStatus('current')
atmSuPortAtmVclStatsTxClp0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxClp0Cells.setStatus('current')
atmSuPortAtmVclStatsTxClp1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxClp1Cells.setStatus('current')
atmSuPortAtmVclStatsRxTotalAISCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalAISCells.setStatus('current')
atmSuPortAtmVclStatsRxTotalCCCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalCCCells.setStatus('current')
atmSuPortAtmVclStatsTotalSuccLoopbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTotalSuccLoopbacks.setStatus('current')
atmSuPortAtmVclStatsTotalFailLoopbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTotalFailLoopbacks.setStatus('current')
atmSuPortAtmVclStatsRxTotalRDICells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalRDICells.setStatus('current')
atmSuPortAtmVclStatsTotalLOCSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTotalLOCSeconds.setStatus('current')
atmSuPortAtmVclStatsRxTotalLoopbackRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalLoopbackRequests.setStatus('current')
atmSuPortAtmVclStatsTxTotalAISCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalAISCells.setStatus('current')
atmSuPortAtmVclStatsTxTotalCCCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalCCCells.setStatus('current')
atmSuPortAtmVclStatsTxTotalRDICells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalRDICells.setStatus('current')
atmSuPortAtmVclStatsTxTotalLoopbackResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalLoopbackResponses.setStatus('current')
atmSuPortAtmVclStatsTxTotalLoopbackRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsTxTotalLoopbackRequests.setStatus('current')
atmSuPortAtmVclStatsRxTotalLoopbackResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortAtmVclStatsRxTotalLoopbackResponses.setStatus('current')
atmSuPortFr = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4))
atmSuPortFrLportTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1), )
if mibBuilder.loadTexts: atmSuPortFrLportTable.setStatus('current')
atmSuPortFrLportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortFrLportEntry.setStatus('current')
atmSuPortFrLportSNMPDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortFrLportSNMPDlci.setStatus('current')
atmSuPortFrLportSNMPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortFrLportSNMPStatus.setStatus('current')
atmSuPortFrLportVCSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ccittQ933A", 2), ("ansiT1617D", 3), ("lmi", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortFrLportVCSigProtocol.setStatus('current')
atmSuPortFrLportVCSigProcedure = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("u2nnet", 2), ("u2nuser", 3), ("bidirect", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortFrLportVCSigProcedure.setStatus('current')
atmSuPortFrLportCLLM = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortFrLportCLLM.setStatus('current')
atmSuPortFrLportSNMPIp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortFrLportSNMPIp.setStatus('current')
atmSuPortFrPvcEndptTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2), )
if mibBuilder.loadTexts: atmSuPortFrPvcEndptTable.setStatus('current')
atmSuPortFrPvcEndptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"), (0, "ACE20-MIB", "frPVCEndptDLCIIndex"))
if mibBuilder.loadTexts: atmSuPortFrPvcEndptEntry.setStatus('current')
atmSuPortFrPvcEndptTxFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortFrPvcEndptTxFECNs.setStatus('current')
atmSuPortFrPvcEndptTxBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortFrPvcEndptTxBECNs.setStatus('current')
atmSuPortFrPvcEndptTxDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortFrPvcEndptTxDEs.setStatus('current')
atmSuPortFrPvcEndptRxFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortFrPvcEndptRxFECNs.setStatus('current')
atmSuPortFrPvcEndptRxBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuPortFrPvcEndptRxBECNs.setStatus('current')
atmSuPortDxi = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 5))
atmSuPortDxiConfTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 5, 1), )
if mibBuilder.loadTexts: atmSuPortDxiConfTable.setStatus('current')
atmSuPortDxiConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 5, 1, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortDxiConfEntry.setStatus('current')
atmSuPortDxiPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode1a", 1), ("mode1b", 2), ("mode2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDxiPortMode.setStatus('current')
atmSuPortDxiSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDxiSigProtocol.setStatus('current')
atmSuPortDxiSigDfa = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortDxiSigDfa.setStatus('current')
atmSuPortCmdTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 6), )
if mibBuilder.loadTexts: atmSuPortCmdTable.setStatus('current')
atmSuPortCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 6, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortCmdEntry.setStatus('current')
atmSuResetPortStatsCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuResetPortStatsCmd.setStatus('current')
atmSuResetConnsStatsCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuResetConnsStatsCmd.setStatus('current')
atmSuPortEther = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7))
atmSuPortEtherTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1), )
if mibBuilder.loadTexts: atmSuPortEtherTable.setStatus('current')
atmSuPortEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1), ).setIndexNames((0, "ACE20-MIB", "ifIndex"))
if mibBuilder.loadTexts: atmSuPortEtherEntry.setStatus('current')
atmSuPortEtherIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherIP.setStatus('current')
atmSuPortEtherMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherMask.setStatus('current')
atmSuPortEtherDefaultGateWayIp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherDefaultGateWayIp.setStatus('current')
atmSuPortEtherDefaultCrossConnectId = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherDefaultCrossConnectId.setStatus('current')
atmSuPortEtherDefaultGatewayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherDefaultGatewayStatus.setStatus('current')
atmSuPortEtherSNMPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("active", 1), ("notActive", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherSNMPStatus.setStatus('current')
atmSuPortEtherFragmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 255))).clone(namedValues=NamedValues(("no", 2), ("yes", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherFragmentation.setStatus('current')
atmSuPortEtherRIPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("rip1And2", 3), ("none", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherRIPMode.setStatus('current')
atmSuPortEtherBridgingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("accessOnly", 1), ("accessAndSwitching", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherBridgingMode.setStatus('current')
atmSuPortEtherARPTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherARPTimeout.setStatus('current')
atmSuPortEtherAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherAgingTime.setStatus('current')
atmSuPortEtherPppOEEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherPppOEEnable.setStatus('current')
atmSuPortEtherStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 2, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmSuPortEtherStatus.setStatus('current')
atmSuCrossConnect = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3))
atmSuCrossConnectAtmFr = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1))
atmSuCrossConnectAtmFrDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 1))
atmFrCrossConnectNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 1, 1))
atmFrCrossConnectService = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 1, 2))
atmFrDescrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2), )
if mibBuilder.loadTexts: atmFrDescrTable.setStatus('current')
atmFrDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1), ).setIndexNames((0, "ACE20-MIB", "atmFrDescrIndex"))
if mibBuilder.loadTexts: atmFrDescrEntry.setStatus('current')
atmFrDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrDescrIndex.setStatus('current')
atmFrDescrType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrDescrType.setStatus('current')
atmFrDescrClp2De = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("convSscs", 1), ("conv", 2), ("always0", 3), ("always1", 4))).clone('conv')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrDescrClp2De.setStatus('current')
atmFrDescrDe2Clp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("conv", 1), ("always0", 2), ("always1", 3))).clone('conv')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrDescrDe2Clp.setStatus('current')
atmFrDescrFecn2Efci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("conv", 1), ("always0", 2))).clone('conv')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrDescrFecn2Efci.setStatus('current')
atmFrDescrMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparent", 1), ("translation", 2))).clone('translation')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrDescrMappingMode.setStatus('current')
atmFrDescrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 2, 1, 7), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrDescrRowStatus.setStatus('current')
atmSuCrossConnectAtmFrIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuCrossConnectAtmFrIndexNext.setStatus('current')
atmFrCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4), )
if mibBuilder.loadTexts: atmFrCnfgTable.setStatus('current')
atmFrCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1), ).setIndexNames((0, "ACE20-MIB", "atmFrCnfgCrossConnectIndex"), (0, "ACE20-MIB", "atmFrCnfgAtmIfIndex"), (0, "ACE20-MIB", "atmFrCnfgAtmVpi"), (0, "ACE20-MIB", "atmFrCnfgAtmVci"), (0, "ACE20-MIB", "atmFrCnfgFrIfIndex"), (0, "ACE20-MIB", "atmFrCnfgDlci"))
if mibBuilder.loadTexts: atmFrCnfgEntry.setStatus('current')
atmFrCnfgCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgCrossConnectIndex.setStatus('current')
atmFrCnfgAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgAtmIfIndex.setStatus('current')
atmFrCnfgAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgAtmVpi.setStatus('current')
atmFrCnfgAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgAtmVci.setStatus('current')
atmFrCnfgFrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgFrIfIndex.setStatus('current')
atmFrCnfgDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgDlci.setStatus('current')
atmFrCnfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgAdminStatus.setStatus('current')
atmFrCnfgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgOperStatus.setStatus('current')
atmFrCnfgLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrCnfgLastChange.setStatus('current')
atmFrCnfgMappingDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgMappingDescrIndex.setStatus('current')
atmFrCnfgSscsDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgSscsDlci.setStatus('current')
atmFrCnfgTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 12), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgTrafficDescrIndex.setStatus('current')
atmFrCnfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highPriority", 1), ("mediumPriority", 2), ("lowPriority", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgPriority.setStatus('current')
atmFrCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgRowStatus.setStatus('current')
atmFrCnfgAllocatedBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 217)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmFrCnfgAllocatedBuffers.setStatus('current')
atmFrMaxMany2OneConnsPerVcc = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmFrMaxMany2OneConnsPerVcc.setStatus('current')
atmSuCrossConnectAtmDxi = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2))
atmSuCrossConnectAtmDxiIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuCrossConnectAtmDxiIndexNext.setStatus('current')
atmDxiCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2), )
if mibBuilder.loadTexts: atmDxiCnfgTable.setStatus('current')
atmDxiCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1), ).setIndexNames((0, "ACE20-MIB", "atmDxiCnfgCrossConnectIndex"), (0, "ACE20-MIB", "atmDxiCnfgAtmIfIndex"), (0, "ACE20-MIB", "atmDxiCnfgAtmVpi"), (0, "ACE20-MIB", "atmDxiCnfgAtmVci"), (0, "ACE20-MIB", "atmDxiCnfgDxiIfIndex"), (0, "ACE20-MIB", "atmDxiCnfgDfa"))
if mibBuilder.loadTexts: atmDxiCnfgEntry.setStatus('current')
atmDxiCnfgCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgCrossConnectIndex.setStatus('current')
atmDxiCnfgAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgAtmIfIndex.setStatus('current')
atmDxiCnfgAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgAtmVpi.setStatus('current')
atmDxiCnfgAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgAtmVci.setStatus('current')
atmDxiCnfgDxiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgDxiIfIndex.setStatus('current')
atmDxiCnfgDfa = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgDfa.setStatus('current')
atmDxiCnfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmDxiCnfgAdminStatus.setStatus('current')
atmDxiCnfgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgOperStatus.setStatus('current')
atmDxiCnfgLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmDxiCnfgLastChange.setStatus('current')
atmDxiCnfgTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 10), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmDxiCnfgTrafficDescrIndex.setStatus('current')
atmDxiCnfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highPriority", 1), ("mediumPriority", 2), ("lowPriority", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmDxiCnfgPriority.setStatus('current')
atmDxiCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 2, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmDxiCnfgRowStatus.setStatus('current')
atmSuAtmCbr = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3))
atmCbrCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1), )
if mibBuilder.loadTexts: atmCbrCnfgTable.setStatus('current')
atmCbrCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1), ).setIndexNames((0, "ACE20-MIB", "atmCbrCnfgAtmIfIndex"), (0, "ACE20-MIB", "atmCbrCnfgAtmVpi"), (0, "ACE20-MIB", "atmCbrCnfgAtmVci"), (0, "ACE20-MIB", "atmCbrCnfgCbrIfIndex"))
if mibBuilder.loadTexts: atmCbrCnfgEntry.setStatus('current')
atmCbrCnfgAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCbrCnfgAtmIfIndex.setStatus('current')
atmCbrCnfgAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCbrCnfgAtmVpi.setStatus('current')
atmCbrCnfgAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCbrCnfgAtmVci.setStatus('current')
atmCbrCnfgCbrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCbrCnfgCbrIfIndex.setStatus('current')
atmCbrCnfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgAdminStatus.setStatus('current')
atmCbrCnfgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCbrCnfgOperStatus.setStatus('current')
atmCbrCnfgLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCbrCnfgLastChange.setStatus('current')
atmCbrCnfgAAL1Signalling = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgAAL1Signalling.setStatus('current')
atmCbrCnfgRxTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 9), TimeSlots()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgRxTimeSlots.setStatus('current')
atmCbrCnfgRxBytesPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 10), Integer32().clone(47)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgRxBytesPerCell.setStatus('current')
atmCbrCnfgTxTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 11), TimeSlots()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgTxTimeSlots.setStatus('current')
atmCbrCnfgTxBytesPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 12), Integer32().clone(47)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgTxBytesPerCell.setStatus('current')
atmCbrCnfgParity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("notApplicable", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgParity.setStatus('current')
atmCbrCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgRowStatus.setStatus('current')
atmCbrCnfgService = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("unstructured", 2), ("structured", 3), ("structuredWithPointer", 4), ("structuredWithoutPointer", 5), ("structuredControlSignalsTransport", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmCbrCnfgService.setStatus('current')
atmCESConfExtnsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2), )
if mibBuilder.loadTexts: atmCESConfExtnsTable.setStatus('current')
atmCESConfExtnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1), ).setIndexNames((0, "ACE20-MIB", "atmfCESCbrIndex"))
if mibBuilder.loadTexts: atmCESConfExtnsEntry.setStatus('current')
atmCESLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCESLastChange.setStatus('current')
atmCESRxBytesPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 47)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESRxBytesPerCell.setStatus('current')
atmCESTxBytesPerCell = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 47)).clone(47)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESTxBytesPerCell.setStatus('current')
atmCESAal1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ces", 1), ("dbces", 2), ("transparent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESAal1Type.setStatus('current')
atmCESParity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESParity.setStatus('current')
atmCESSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("eAndmOrPlar", 1), ("fxoLoopStart", 2), ("fxsLoopStart", 3), ("fxoGroundStart", 4), ("fxsGroundStart", 5), ("r2", 6), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESSigType.setStatus('current')
atmCESSigABBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmCESSigABBits.setStatus('current')
atmSuCrossConnectAtmEther = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4))
atmSuCrossConnectAtmEtherIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmSuCrossConnectAtmEtherIndexNext.setStatus('current')
atmEtherCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2), )
if mibBuilder.loadTexts: atmEtherCnfgTable.setStatus('current')
atmEtherCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1), ).setIndexNames((0, "ACE20-MIB", "atmEtherCnfgCrossConnectIndex"), (0, "ACE20-MIB", "atmEtherCnfgAtmIfIndex"), (0, "ACE20-MIB", "atmEtherCnfgAtmVpi"), (0, "ACE20-MIB", "atmEtherCnfgAtmVci"), (0, "ACE20-MIB", "atmEtherCnfgEtherIfIndex"))
if mibBuilder.loadTexts: atmEtherCnfgEntry.setStatus('current')
atmEtherCnfgCrossConnectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgCrossConnectIndex.setStatus('current')
atmEtherCnfgAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgAtmIfIndex.setStatus('current')
atmEtherCnfgAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgAtmVpi.setStatus('current')
atmEtherCnfgAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgAtmVci.setStatus('current')
atmEtherCnfgEtherIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgEtherIfIndex.setStatus('current')
atmEtherCnfgMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgMacAddr.setStatus('deprecated')
atmEtherCnfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgAdminStatus.setStatus('current')
atmEtherCnfgOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgOperStatus.setStatus('current')
atmEtherCnfgLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmEtherCnfgLastChange.setStatus('current')
atmEtherCnfgTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 10), AtmTrafficDescrParamIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgTrafficDescrIndex.setStatus('current')
atmEtherCnfgEncapsulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atmBridgedEther", 1), ("atmBridgedEtherCRC", 2))).clone('atmBridgedEther')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgEncapsulationMode.setStatus('deprecated')
atmEtherCnfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("highPriority", 1), ("mediumPriority", 2), ("lowPriority", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgPriority.setStatus('current')
atmEtherCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgRowStatus.setStatus('current')
atmEtherCnfgRouterIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgRouterIP.setStatus('current')
atmEtherCnfgRouterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgRouterMask.setStatus('current')
atmEtherCnfgRouterFragmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 255))).clone(namedValues=NamedValues(("no", 2), ("yes", 3), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgRouterFragmentation.setStatus('current')
atmEtherCnfgRouterRIPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("rip1And2", 3), ("none", 4), ("notApplicable", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgRouterRIPMode.setStatus('current')
atmEtherCnfgRouterMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgRouterMTU.setStatus('deprecated')
atmEtherCnfgPPPEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("rfc1483", 3), ("pppVcMuxed", 4), ("pppLlcMuxed", 5))).clone('rfc1483')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgPPPEncapsulation.setStatus('current')
atmEtherCnfgAllocatedBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 217)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmEtherCnfgAllocatedBuffers.setStatus('current')
atmSuCrossConnectTranslate = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5))
atmTranslateTable = MibTable((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5, 1), )
if mibBuilder.loadTexts: atmTranslateTable.setStatus('current')
atmTranslateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5, 1, 1), ).setIndexNames((0, "ACE20-MIB", "atmTranslateAtmIfIndex"), (0, "ACE20-MIB", "atmTranslateAtmVpi"), (0, "ACE20-MIB", "atmTranslateAtmVci"))
if mibBuilder.loadTexts: atmTranslateEntry.setStatus('current')
atmTranslateAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTranslateAtmIfIndex.setStatus('current')
atmTranslateAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTranslateAtmVpi.setStatus('current')
atmTranslateAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTranslateAtmVci.setStatus('current')
atmTranslateUserIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 12, 4, 3, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmTranslateUserIfIndex.setStatus('current')
radAtmEvents = ObjectIdentity((1, 3, 6, 1, 4, 1, 164, 12, 0))
if mibBuilder.loadTexts: radAtmEvents.setStatus('current')
alarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 1))
if mibBuilder.loadTexts: alarmTrap.setStatus('current')
statusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 2)).setObjects(("RAD-MIB", "agnLed"), ("RAD-MIB", "agnIndication"))
if mibBuilder.loadTexts: statusChangeTrap.setStatus('current')
atmSuAgnNoBufferToNetwork = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 3)).setObjects(("RAD-MIB", "alarmSeverity"))
if mibBuilder.loadTexts: atmSuAgnNoBufferToNetwork.setStatus('current')
atmSuJitterBufferOverrun = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 4)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: atmSuJitterBufferOverrun.setStatus('current')
atmSuJitterBufferUnderrun = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 5)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: atmSuJitterBufferUnderrun.setStatus('current')
atmSuDataLocalLoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 6)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: atmSuDataLocalLoopbackTrap.setStatus('current')
atmSuDataRemoteLoopbackTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 12, 0, 7)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: atmSuDataRemoteLoopbackTrap.setStatus('current')
mibBuilder.exportSymbols("ACE20-MIB", atmSuPortAtmCnfgTable=atmSuPortAtmCnfgTable, atmSuPortDs1CnfgLBO=atmSuPortDs1CnfgLBO, atmSuPortEtherPppOEEnable=atmSuPortEtherPppOEEnable, atmEtherCnfgRowStatus=atmEtherCnfgRowStatus, atmSuPortFrPvcEndptTxFECNs=atmSuPortFrPvcEndptTxFECNs, atmFrDescrIndex=atmFrDescrIndex, atmSuPortDs1CbrSignallingSampleTime=atmSuPortDs1CbrSignallingSampleTime, atmSuPortAtmVclStatsRxCells=atmSuPortAtmVclStatsRxCells, atmFrCnfgOperStatus=atmFrCnfgOperStatus, atmFrDescrTable=atmFrDescrTable, atmFrCnfgAllocatedBuffers=atmFrCnfgAllocatedBuffers, atmSuCrossConnectAtmDxi=atmSuCrossConnectAtmDxi, atmSuPortDataCtsStatus=atmSuPortDataCtsStatus, atmSuPortAtm=atmSuPortAtm, atmDxiCnfgTrafficDescrIndex=atmDxiCnfgTrafficDescrIndex, atmEtherCnfgRouterMask=atmEtherCnfgRouterMask, atmSuPortAtmVclStatsTotalFailLoopbacks=atmSuPortAtmVclStatsTotalFailLoopbacks, atmSuPortDataMaxNoOfConns=atmSuPortDataMaxNoOfConns, atmDxiCnfgCrossConnectIndex=atmDxiCnfgCrossConnectIndex, atmCbrCnfgAdminStatus=atmCbrCnfgAdminStatus, atmCbrCnfgService=atmCbrCnfgService, atmEtherCnfgEntry=atmEtherCnfgEntry, atmFrDescrDe2Clp=atmFrDescrDe2Clp, atmFrDescrEntry=atmFrDescrEntry, atmFrCnfgRowStatus=atmFrCnfgRowStatus, atmEtherCnfgPriority=atmEtherCnfgPriority, atmSuPortFrPvcEndptRxBECNs=atmSuPortFrPvcEndptRxBECNs, atmSuPortFr=atmSuPortFr, atmSuPortEtherBridgingMode=atmSuPortEtherBridgingMode, atmSuPortEtherDefaultCrossConnectId=atmSuPortEtherDefaultCrossConnectId, atmFrCrossConnectNetwork=atmFrCrossConnectNetwork, atmSuPortAtmVclStatsTxTotalCCCells=atmSuPortAtmVclStatsTxTotalCCCells, atmSuSystemHistoryAlrEntry=atmSuSystemHistoryAlrEntry, atmSuPortDs1=atmSuPortDs1, atmSuPortEtherFragmentation=atmSuPortEtherFragmentation, atmFrMaxMany2OneConnsPerVcc=atmFrMaxMany2OneConnsPerVcc, atmCbrCnfgTxBytesPerCell=atmCbrCnfgTxBytesPerCell, atmCESConfExtnsTable=atmCESConfExtnsTable, atmSuPortDs1CbrCnfgTable=atmSuPortDs1CbrCnfgTable, atmSuSystemSwSwitchVersionsCmd=atmSuSystemSwSwitchVersionsCmd, atmSuPortAtmCnfgShapingMode=atmSuPortAtmCnfgShapingMode, atmCbrCnfgAAL1Signalling=atmCbrCnfgAAL1Signalling, atmSuPortEtherRIPMode=atmSuPortEtherRIPMode, atmFrCnfgAtmVpi=atmFrCnfgAtmVpi, alarmTrap=alarmTrap, atmFrCnfgAdminStatus=atmFrCnfgAdminStatus, atmSuPortDataIdleCode=atmSuPortDataIdleCode, atmSuPortAtmCnfgScramble=atmSuPortAtmCnfgScramble, atmSuPortEtherARPTimeout=atmSuPortEtherARPTimeout, atmSuSystemOperMode=atmSuSystemOperMode, atmSuPortAtmRxClp1Cells=atmSuPortAtmRxClp1Cells, atmSuPortCmdEntry=atmSuPortCmdEntry, atmSuPortAtmCnfgEntry=atmSuPortAtmCnfgEntry, atmCbrCnfgTable=atmCbrCnfgTable, atmSuSystemHistoryAlrTable=atmSuSystemHistoryAlrTable, atmSuPortAtmRxEfciSetCells=atmSuPortAtmRxEfciSetCells, atmSuSystemCurrentAlrTable=atmSuSystemCurrentAlrTable, atmSuResetPortStatsCmd=atmSuResetPortStatsCmd, atmSuSystemCurrentAlrDescription=atmSuSystemCurrentAlrDescription, atmSuPortDs1CnfgDedicatedTs=atmSuPortDs1CnfgDedicatedTs, atmSuPortFrPvcEndptRxFECNs=atmSuPortFrPvcEndptRxFECNs, atmSuPortEtherStatus=atmSuPortEtherStatus, atmSuCrossConnect=atmSuCrossConnect, atmEtherCnfgEtherIfIndex=atmEtherCnfgEtherIfIndex, atmSuPortAtmIfStatsEntry=atmSuPortAtmIfStatsEntry, atmFrCnfgAtmVci=atmFrCnfgAtmVci, atmSuSystemISDNDataLinkActivation=atmSuSystemISDNDataLinkActivation, atmDxiCnfgEntry=atmDxiCnfgEntry, atmSuSystemCurrentAlrEntry=atmSuSystemCurrentAlrEntry, atmSuPortDataInterfaceType=atmSuPortDataInterfaceType, atmSuSystemHistoryAlrOccurrenceTime=atmSuSystemHistoryAlrOccurrenceTime, atmFrCnfgFrIfIndex=atmFrCnfgFrIfIndex, atmDxiCnfgPriority=atmDxiCnfgPriority, atmFrCnfgTrafficDescrIndex=atmFrCnfgTrafficDescrIndex, atmSuCrossConnectTranslate=atmSuCrossConnectTranslate, atmEtherCnfgLastChange=atmEtherCnfgLastChange, atmSuDataRemoteLoopbackTrap=atmSuDataRemoteLoopbackTrap, atmSuPortAtmVclStatsRxClp1Cells=atmSuPortAtmVclStatsRxClp1Cells, atmSuPortEtherMask=atmSuPortEtherMask, atmEtherCnfgEncapsulationMode=atmEtherCnfgEncapsulationMode, atmDxiCnfgRowStatus=atmDxiCnfgRowStatus, atmSuPortDataDCD=atmSuPortDataDCD, atmSuSystemHistoryAlrVpi=atmSuSystemHistoryAlrVpi, atmSuSystemTrapMaxManagers=atmSuSystemTrapMaxManagers, atmSuPortDs1CbrRxTimeSlots=atmSuPortDs1CbrRxTimeSlots, atmSuPortAtmTxClp1Cells=atmSuPortAtmTxClp1Cells, atmSuPortDataRtsStatus=atmSuPortDataRtsStatus, atmSuPortAtmVclStatsTable=atmSuPortAtmVclStatsTable, atmSuPortAtmVclStatsRxTotalRDICells=atmSuPortAtmVclStatsRxTotalRDICells, atmCbrCnfgAtmVci=atmCbrCnfgAtmVci, atmSuPortAtmCnfgIdleCellCLP=atmSuPortAtmCnfgIdleCellCLP, atmTranslateAtmVpi=atmTranslateAtmVpi, atmDxiCnfgAdminStatus=atmDxiCnfgAdminStatus, atmSuPortAtmSNMPTrafficDescrIndex=atmSuPortAtmSNMPTrafficDescrIndex, atmSuPortAtmSNMPIp=atmSuPortAtmSNMPIp, atmSuPortAtmVclStatsRxTotalAISCells=atmSuPortAtmVclStatsRxTotalAISCells, atmSuPortCmdTable=atmSuPortCmdTable, atmSuPortDs1CbrCnfgEntry=atmSuPortDs1CbrCnfgEntry, atmSuCrossConnectAtmFrIndexNext=atmSuCrossConnectAtmFrIndexNext, atmEtherCnfgRouterRIPMode=atmEtherCnfgRouterRIPMode, atmSuPortDxiPortMode=atmSuPortDxiPortMode, atmSuPortFrLportTable=atmSuPortFrLportTable, atmSuPortAtmSNMPVpi=atmSuPortAtmSNMPVpi, atmSuPortDxiSigProtocol=atmSuPortDxiSigProtocol, atmCbrCnfgAtmIfIndex=atmCbrCnfgAtmIfIndex, atmCESAal1Type=atmCESAal1Type, atmCESTxBytesPerCell=atmCESTxBytesPerCell, atmSuPortDs1CnfgRxSensitivity=atmSuPortDs1CnfgRxSensitivity, atmSuPortEtherSNMPStatus=atmSuPortEtherSNMPStatus, atmSuSystem=atmSuSystem, atmEtherCnfgAdminStatus=atmEtherCnfgAdminStatus, atmFrCrossConnectService=atmFrCrossConnectService, atmFrCnfgCrossConnectIndex=atmFrCnfgCrossConnectIndex, atmSuPortAtmVclStatsTxTotalLoopbackResponses=atmSuPortAtmVclStatsTxTotalLoopbackResponses, atmDxiCnfgAtmIfIndex=atmDxiCnfgAtmIfIndex, atmSuPortDs1CnfgEntry=atmSuPortDs1CnfgEntry, atmSuPortAtmVclStatsTxClp0Cells=atmSuPortAtmVclStatsTxClp0Cells, atmEtherCnfgCrossConnectIndex=atmEtherCnfgCrossConnectIndex, atmSu=atmSu, atmFrCnfgLastChange=atmFrCnfgLastChange, atmSuPortAtmVclStatsTotalSuccLoopbacks=atmSuPortAtmVclStatsTotalSuccLoopbacks, atmFrDescrFecn2Efci=atmFrDescrFecn2Efci, atmDxiCnfgTable=atmDxiCnfgTable, atmEtherCnfgOperStatus=atmEtherCnfgOperStatus, atmEtherCnfgRouterIP=atmEtherCnfgRouterIP, atmEtherCnfgRouterFragmentation=atmEtherCnfgRouterFragmentation, atmSuPortDs1CnfgRestoreTime=atmSuPortDs1CnfgRestoreTime, atmSuSystemSwOperStatus=atmSuSystemSwOperStatus, atmSuSystemILMICommunity=atmSuSystemILMICommunity, atmSuSystemDSPGain=atmSuSystemDSPGain, atmEtherCnfgMacAddr=atmEtherCnfgMacAddr, atmSuPortAtmVclStatsRxClp0Cells=atmSuPortAtmVclStatsRxClp0Cells, atmSuSystemHistoryAlrIndex=atmSuSystemHistoryAlrIndex, atmSuPortAtmIfStatsTable=atmSuPortAtmIfStatsTable, atmSuCrossConnectAtmFrDescriptor=atmSuCrossConnectAtmFrDescriptor, atmDxiCnfgLastChange=atmDxiCnfgLastChange, atmCbrCnfgRxBytesPerCell=atmCbrCnfgRxBytesPerCell, atmEtherCnfgAtmVci=atmEtherCnfgAtmVci, atmSuPortDataCRC=atmSuPortDataCRC, atmSuJitterBufferOverrun=atmSuJitterBufferOverrun, atmSuPortDataMode=atmSuPortDataMode, atmSuCrossConnectAtmDxiIndexNext=atmSuCrossConnectAtmDxiIndexNext, atmCESSigABBits=atmCESSigABBits, atmSuAgnNoBufferToNetwork=atmSuAgnNoBufferToNetwork, atmSuPortDs1CnfgInbandMng=atmSuPortDs1CnfgInbandMng, atmSuPortDxi=atmSuPortDxi, atmSuCrossConnectAtmEther=atmSuCrossConnectAtmEther, atmEtherCnfgAtmVpi=atmEtherCnfgAtmVpi, atmEtherCnfgAllocatedBuffers=atmEtherCnfgAllocatedBuffers, atmSuCrossConnectAtmEtherIndexNext=atmSuCrossConnectAtmEtherIndexNext, atmSuSystemCurrentAlrIndex=atmSuSystemCurrentAlrIndex, atmFrDescrRowStatus=atmFrDescrRowStatus, atmCESRxBytesPerCell=atmCESRxBytesPerCell, atmSuSystemAalSelection=atmSuSystemAalSelection, atmSuPortEtherEntry=atmSuPortEtherEntry, atmFrCnfgMappingDescrIndex=atmFrCnfgMappingDescrIndex, atmEtherCnfgAtmIfIndex=atmEtherCnfgAtmIfIndex, atmSuSystemClearHistoryAlrListCmd=atmSuSystemClearHistoryAlrListCmd, atmSuResetConnsStatsCmd=atmSuResetConnsStatsCmd, atmCbrCnfgCbrIfIndex=atmCbrCnfgCbrIfIndex, statusChangeTrap=statusChangeTrap, atmTranslateAtmVci=atmTranslateAtmVci, atmSuSystemHistoryAlrStatus=atmSuSystemHistoryAlrStatus, atmSuPortDxiConfTable=atmSuPortDxiConfTable, atmSuPortAtmTxEfciSetCells=atmSuPortAtmTxEfciSetCells, atmSuPortAtmRxClp0Cells=atmSuPortAtmRxClp0Cells, atmDxiCnfgAtmVpi=atmDxiCnfgAtmVpi, atmCbrCnfgTxTimeSlots=atmCbrCnfgTxTimeSlots, atmSuPortEther=atmSuPortEther, atmSuPortEtherDefaultGateWayIp=atmSuPortEtherDefaultGateWayIp, atmSuPortDs1CnfgTable=atmSuPortDs1CnfgTable, atmSuPort=atmSuPort, atmSuPortAtmCnfgCDVOptimization=atmSuPortAtmCnfgCDVOptimization, atmSuPortAtmTxClp0Cells=atmSuPortAtmTxClp0Cells, atmFrCnfgPriority=atmFrCnfgPriority, atmTranslateAtmIfIndex=atmTranslateAtmIfIndex, atmSuPortDataClock=atmSuPortDataClock, atmSuPortAtmVclStatsRxTotalLoopbackRequests=atmSuPortAtmVclStatsRxTotalLoopbackRequests, atmSuPortAtmVclStatsTotalLOCSeconds=atmSuPortAtmVclStatsTotalLOCSeconds, atmCbrCnfgAtmVpi=atmCbrCnfgAtmVpi, atmSuPortFrPvcEndptEntry=atmSuPortFrPvcEndptEntry, atmDxiCnfgDxiIfIndex=atmDxiCnfgDxiIfIndex, atmFrDescrMappingMode=atmFrDescrMappingMode, atmSuSystemHistoryAlrVci=atmSuSystemHistoryAlrVci, atmSuPortDxiSigDfa=atmSuPortDxiSigDfa, atmSuDataLocalLoopbackTrap=atmSuDataLocalLoopbackTrap, atmCESParity=atmCESParity, atmSuPortDxiConfEntry=atmSuPortDxiConfEntry, atmDxiCnfgDfa=atmDxiCnfgDfa, atmSuPortAtmVclStatsRxTotalCCCells=atmSuPortAtmVclStatsRxTotalCCCells, atmFrDescrType=atmFrDescrType, atmSuSystemHistoryAlrIfIndex=atmSuSystemHistoryAlrIfIndex, atmCESConfExtnsEntry=atmCESConfExtnsEntry, atmSuPortDs1CbrMaxNoOfConns=atmSuPortDs1CbrMaxNoOfConns, atmSuPortAtmVclStatsTxClp1Cells=atmSuPortAtmVclStatsTxClp1Cells, atmSuPortEtherIP=atmSuPortEtherIP, atmTranslateUserIfIndex=atmTranslateUserIfIndex, atmSuPortAtmVclStatsTxTotalRDICells=atmSuPortAtmVclStatsTxTotalRDICells, atmSuPortAtmVclStatsTxTotalAISCells=atmSuPortAtmVclStatsTxTotalAISCells, atmSuPortDs1CbrTxTimeSlots=atmSuPortDs1CbrTxTimeSlots, atmSuSystemCurrentAlrIfIndex=atmSuSystemCurrentAlrIfIndex, atmSuPortAtmVclStatsRxTotalLoopbackResponses=atmSuPortAtmVclStatsRxTotalLoopbackResponses, atmSuPortDataClkPolarity=atmSuPortDataClkPolarity, atmSuPortDataCnfgTable=atmSuPortDataCnfgTable, atmCbrCnfgRxTimeSlots=atmCbrCnfgRxTimeSlots, atmSuSystemHistoryAlrDescription=atmSuSystemHistoryAlrDescription, atmSuPortFrLportEntry=atmSuPortFrLportEntry, atmSuPortAtmVclStatsRxDiscardsCells=atmSuPortAtmVclStatsRxDiscardsCells, atmSuPortEtherAgingTime=atmSuPortEtherAgingTime, atmSuAtmCbr=atmSuAtmCbr, atmCbrCnfgLastChange=atmCbrCnfgLastChange, atmSuCrossConnectAtmFr=atmSuCrossConnectAtmFr, atmSuPortDataConfNoOfConns=atmSuPortDataConfNoOfConns, atmSuPortAtmILMIStatus=atmSuPortAtmILMIStatus, atmTranslateTable=atmTranslateTable, atmEtherCnfgTable=atmEtherCnfgTable, atmFrCnfgEntry=atmFrCnfgEntry, atmSuPortFrLportSNMPStatus=atmSuPortFrLportSNMPStatus, atmSuPortAtmVclStatsEntry=atmSuPortAtmVclStatsEntry, atmFrDescrClp2De=atmFrDescrClp2De, atmEtherCnfgRouterMTU=atmEtherCnfgRouterMTU, atmCbrCnfgOperStatus=atmCbrCnfgOperStatus, atmEtherCnfgTrafficDescrIndex=atmEtherCnfgTrafficDescrIndex, atmFrCnfgDlci=atmFrCnfgDlci, atmCESLastChange=atmCESLastChange, atmSuPortAtmVclStatsTxTotalLoopbackRequests=atmSuPortAtmVclStatsTxTotalLoopbackRequests, atmSuPortFrPvcEndptTable=atmSuPortFrPvcEndptTable, atmDxiCnfgOperStatus=atmDxiCnfgOperStatus, atmSuPortDataRate=atmSuPortDataRate, atmSuSystemCodingLaw=atmSuSystemCodingLaw, atmSuPortAtmSNMPVci=atmSuPortAtmSNMPVci, atmSuPortFrPvcEndptTxDEs=atmSuPortFrPvcEndptTxDEs, atmFrCnfgSscsDlci=atmFrCnfgSscsDlci, atmSuPortDataCnfgEntry=atmSuPortDataCnfgEntry, atmSuPortAtmVclStatsTxCells=atmSuPortAtmVclStatsTxCells, atmCbrCnfgParity=atmCbrCnfgParity, atmDxiCnfgAtmVci=atmDxiCnfgAtmVci, atmSuPortEtherTable=atmSuPortEtherTable, atmSuPortDs1CbrIdleCode=atmSuPortDs1CbrIdleCode, atmSuPortAtmRxOamCells=atmSuPortAtmRxOamCells, atmSuPortAtmTxOamCells=atmSuPortAtmTxOamCells, atmFrCnfgAtmIfIndex=atmFrCnfgAtmIfIndex, atmFrCnfgTable=atmFrCnfgTable, radAtmEvents=radAtmEvents, atmSuPortFrLportVCSigProcedure=atmSuPortFrLportVCSigProcedure, atmSuPortFrLportVCSigProtocol=atmSuPortFrLportVCSigProtocol, atmSuSystemJitterBuffer=atmSuSystemJitterBuffer, atmSuPortDataApplication=atmSuPortDataApplication, atmSuPortAtmSNMPStatus=atmSuPortAtmSNMPStatus, atmTranslateEntry=atmTranslateEntry, atmSuPortFrPvcEndptTxBECNs=atmSuPortFrPvcEndptTxBECNs, atmSuPortFrLportSNMPIp=atmSuPortFrLportSNMPIp, atmCbrCnfgRowStatus=atmCbrCnfgRowStatus, atmSuPortFrLportSNMPDlci=atmSuPortFrLportSNMPDlci)
mibBuilder.exportSymbols("ACE20-MIB", atmCbrCnfgEntry=atmCbrCnfgEntry, atmCESSigType=atmCESSigType, atmSuPortEtherDefaultGatewayStatus=atmSuPortEtherDefaultGatewayStatus, atmSuPortFrLportCLLM=atmSuPortFrLportCLLM, atmEtherCnfgPPPEncapsulation=atmEtherCnfgPPPEncapsulation, atmSuPortDs1CbrConfNoOfConns=atmSuPortDs1CbrConfNoOfConns, atmSuJitterBufferUnderrun=atmSuJitterBufferUnderrun)
