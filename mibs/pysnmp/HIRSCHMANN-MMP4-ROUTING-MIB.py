#
# PySNMP MIB module HIRSCHMANN-MMP4-ROUTING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HIRSCHMANN-MMP4-ROUTING-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:18:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hmPlatform4, = mibBuilder.importSymbols("HIRSCHMANN-MMP4-BASICL2-MIB", "hmPlatform4")
ospfVirtIfEntry, ospfIfEntry = mibBuilder.importSymbols("OSPF-MIB", "ospfVirtIfEntry", "ospfIfEntry")
rip2IfConfEntry, = mibBuilder.importSymbols("RIPv2-MIB", "rip2IfConfEntry")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, MibIdentifier, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, Integer32, NotificationType, Counter64, IpAddress, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "MibIdentifier", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "Integer32", "NotificationType", "Counter64", "IpAddress", "iso", "ObjectIdentity")
RowStatus, DisplayString, TextualConvention, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "MacAddress", "TruthValue")
hmPlatform4Routing = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 15, 2))
hmPlatform4Routing.setRevisions(('2005-08-18 12:00', '2003-04-02 17:00',))
if mibBuilder.loadTexts: hmPlatform4Routing.setLastUpdated('200508181200Z')
if mibBuilder.loadTexts: hmPlatform4Routing.setOrganization('Hirschmann Automation and Control GmbH')
hmAgentSwitchArpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 2, 1))
hmAgentSwitchArpAgeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 21600)).clone(1200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchArpAgeoutTime.setStatus('current')
hmAgentSwitchArpResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchArpResponseTime.setStatus('current')
hmAgentSwitchArpMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchArpMaxRetries.setStatus('current')
hmAgentSwitchArpCacheSize = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchArpCacheSize.setStatus('current')
hmAgentSwitchArpDynamicRenew = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchArpDynamicRenew.setStatus('current')
hmAgentSwitchArpTotalEntryCountCurrent = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchArpTotalEntryCountCurrent.setStatus('current')
hmAgentSwitchArpTotalEntryCountPeak = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchArpTotalEntryCountPeak.setStatus('current')
hmAgentSwitchArpStaticEntryCountCurrent = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchArpStaticEntryCountCurrent.setStatus('current')
hmAgentSwitchArpStaticEntryCountMax = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchArpStaticEntryCountMax.setStatus('current')
hmAgentSwitchArpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 10), )
if mibBuilder.loadTexts: hmAgentSwitchArpTable.setStatus('current')
hmAgentSwitchArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 10, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentSwitchArpIpAddress"))
if mibBuilder.loadTexts: hmAgentSwitchArpEntry.setStatus('current')
hmAgentSwitchArpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 10, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchArpAge.setStatus('current')
hmAgentSwitchArpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchArpIpAddress.setStatus('current')
hmAgentSwitchArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 10, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentSwitchArpMacAddress.setStatus('current')
hmAgentSwitchArpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchArpInterface.setStatus('current')
hmAgentSwitchArpType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("gateway", 2), ("static", 3), ("dynamic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchArpType.setStatus('current')
hmAgentSwitchArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 10, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchArpStatus.setStatus('current')
hmAgentSwitchArpSparseLearn = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchArpSparseLearn.setStatus('current')
hmAgentSwitchIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 2, 2))
hmAgentSwitchIpRoutingMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpRoutingMode.setStatus('current')
hmAgentSwitchIpVRRPMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpVRRPMode.setStatus('current')
hmAgentSwitchIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 3), )
if mibBuilder.loadTexts: hmAgentSwitchIpInterfaceTable.setStatus('current')
hmAgentSwitchIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 3, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentSwitchIpInterfaceIfIndex"))
if mibBuilder.loadTexts: hmAgentSwitchIpInterfaceEntry.setStatus('current')
hmAgentSwitchIpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchIpInterfaceIfIndex.setStatus('current')
hmAgentSwitchIpInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpInterfaceIpAddress.setStatus('current')
hmAgentSwitchIpInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpInterfaceNetMask.setStatus('current')
hmAgentSwitchIpInterfaceClearIp = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpInterfaceClearIp.setStatus('current')
hmAgentSwitchIpInterfaceRoutingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpInterfaceRoutingMode.setStatus('current')
hmAgentSwitchIpInterfaceProxyARPMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpInterfaceProxyARPMode.setStatus('current')
hmAgentSwitchIpInterfaceMtuValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(68, 9000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpInterfaceMtuValue.setStatus('current')
hmAgentSwitchIpInterfaceSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchIpInterfaceSlotNum.setStatus('current')
hmAgentSwitchIpInterfacePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchIpInterfacePortNum.setStatus('current')
hmAgentSwitchIpInterfaceNetdirectedBCMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpInterfaceNetdirectedBCMode.setStatus('current')
hmAgentSwitchIpRouterDiscoveryTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 4), )
if mibBuilder.loadTexts: hmAgentSwitchIpRouterDiscoveryTable.setStatus('current')
hmAgentSwitchIpRouterDiscoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 4, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentSwitchIpRouterDiscoveryIfIndex"))
if mibBuilder.loadTexts: hmAgentSwitchIpRouterDiscoveryEntry.setStatus('current')
hmAgentSwitchIpRouterDiscoveryIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchIpRouterDiscoveryIfIndex.setStatus('current')
hmAgentSwitchIpRouterDiscoveryAdvertiseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpRouterDiscoveryAdvertiseMode.setStatus('current')
hmAgentSwitchIpRouterDiscoveryMaxAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpRouterDiscoveryMaxAdvertisementInterval.setStatus('current')
hmAgentSwitchIpRouterDiscoveryMinAdvertisementInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1800)).clone(450)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpRouterDiscoveryMinAdvertisementInterval.setStatus('current')
hmAgentSwitchIpRouterDiscoveryAdvertisementLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 9000)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpRouterDiscoveryAdvertisementLifetime.setStatus('current')
hmAgentSwitchIpRouterDiscoveryPreferenceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpRouterDiscoveryPreferenceLevel.setStatus('current')
hmAgentSwitchIpRouterDiscoveryAdvertisementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 4, 1, 7), IpAddress().clone(hexValue="E0000001")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpRouterDiscoveryAdvertisementAddress.setStatus('current')
hmAgentSwitchIpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 5), )
if mibBuilder.loadTexts: hmAgentSwitchIpVlanTable.setStatus('current')
hmAgentSwitchIpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 5, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentSwitchIpVlanId"))
if mibBuilder.loadTexts: hmAgentSwitchIpVlanEntry.setStatus('current')
hmAgentSwitchIpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchIpVlanId.setStatus('current')
hmAgentSwitchIpVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchIpVlanIfIndex.setStatus('current')
hmAgentSwitchIpVlanRoutingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentSwitchIpVlanRoutingStatus.setStatus('current')
hmAgentSwitchSecondaryAddressTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 6), )
if mibBuilder.loadTexts: hmAgentSwitchSecondaryAddressTable.setStatus('current')
hmAgentSwitchSecondaryAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 6, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentSwitchIpInterfaceIfIndex"), (0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentSwitchSecondaryIpAddress"))
if mibBuilder.loadTexts: hmAgentSwitchSecondaryAddressEntry.setStatus('current')
hmAgentSwitchSecondaryIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: hmAgentSwitchSecondaryIpAddress.setStatus('current')
hmAgentSwitchSecondaryNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 6, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentSwitchSecondaryNetMask.setStatus('current')
hmAgentSwitchSecondaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentSwitchSecondaryStatus.setStatus('current')
hmAgentSwitchIpRoutePreferenceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 7), )
if mibBuilder.loadTexts: hmAgentSwitchIpRoutePreferenceTable.setStatus('current')
hmAgentSwitchIpRoutePreferenceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 7, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentSwitchIpRoutePreferenceSource"))
if mibBuilder.loadTexts: hmAgentSwitchIpRoutePreferenceEntry.setStatus('current')
hmAgentSwitchIpRoutePreferenceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("connected", 1), ("static", 2), ("ospf-intra", 3), ("ospf-inter", 4), ("ospf-ext-t1", 5), ("ospf-ext-t2", 6), ("rip", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchIpRoutePreferenceSource.setStatus('current')
hmAgentSwitchIpRoutePreferenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpRoutePreferenceValue.setStatus('current')
hmAgentSwitchIpRouteStaticTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 8), )
if mibBuilder.loadTexts: hmAgentSwitchIpRouteStaticTable.setStatus('current')
hmAgentSwitchIpRouteStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 8, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentSwitchIpRouteStaticDestination"), (0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentSwitchIpRouteStaticDestinationMask"), (0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentSwitchIpRouteStaticNextHop"))
if mibBuilder.loadTexts: hmAgentSwitchIpRouteStaticEntry.setStatus('current')
hmAgentSwitchIpRouteStaticDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 8, 1, 1), IpAddress())
if mibBuilder.loadTexts: hmAgentSwitchIpRouteStaticDestination.setStatus('current')
hmAgentSwitchIpRouteStaticDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 8, 1, 2), IpAddress())
if mibBuilder.loadTexts: hmAgentSwitchIpRouteStaticDestinationMask.setStatus('current')
hmAgentSwitchIpRouteStaticNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 8, 1, 3), IpAddress())
if mibBuilder.loadTexts: hmAgentSwitchIpRouteStaticNextHop.setStatus('current')
hmAgentSwitchIpRouteStaticPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpRouteStaticPreference.setStatus('current')
hmAgentSwitchIpRouteStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 8, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpRouteStaticStatus.setStatus('current')
hmAgentSwitchIpRouteStaticTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpRouteStaticTrackId.setStatus('current')
hmAgentSwitchIpVlanSingleMacMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpVlanSingleMacMode.setStatus('current')
hmAgentSwitchIpTableSizesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 101))
hmAgentSwitchIpTableSizeArp = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 101, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpTableSizeArp.setStatus('current')
hmAgentSwitchIpTableSizeUCRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 101, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpTableSizeUCRoutes.setStatus('current')
hmAgentSwitchIpTableSizeMCRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 101, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSwitchIpTableSizeMCRoutes.setStatus('current')
hmAgentSwitchIpCurrentTableSizeArp = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 101, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchIpCurrentTableSizeArp.setStatus('current')
hmAgentSwitchIpCurrentTableSizeUCRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 101, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchIpCurrentTableSizeUCRoutes.setStatus('current')
hmAgentSwitchIpCurrentTableSizeMCRoutes = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 2, 101, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentSwitchIpCurrentTableSizeMCRoutes.setStatus('current')
hmAgentRouterRipConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 2, 3))
hmAgentRouterRipAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRouterRipAdminState.setStatus('current')
hmAgentRouterRipSplitHorizonMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("poisonReverse", 3))).clone('simple')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRouterRipSplitHorizonMode.setStatus('current')
hmAgentRouterRipAutoSummaryMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRouterRipAutoSummaryMode.setStatus('current')
hmAgentRouterRipHostRoutesAcceptMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRouterRipHostRoutesAcceptMode.setStatus('current')
hmAgentRouterRipDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRouterRipDefaultMetric.setStatus('current')
hmAgentRouterRipDefaultMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRouterRipDefaultMetricConfigured.setStatus('current')
hmAgentRouterRipDefaultInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRouterRipDefaultInfoOriginate.setStatus('current')
hmAgentRipRouteRedistTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8), )
if mibBuilder.loadTexts: hmAgentRipRouteRedistTable.setStatus('current')
hmAgentRipRouteRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentRipRouteRedistSource"))
if mibBuilder.loadTexts: hmAgentRipRouteRedistEntry.setStatus('current')
hmAgentRipRouteRedistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connected", 1), ("static", 2), ("ospf", 3), ("bgp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentRipRouteRedistSource.setStatus('current')
hmAgentRipRouteRedistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRipRouteRedistMode.setStatus('current')
hmAgentRipRouteRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRipRouteRedistMetric.setStatus('current')
hmAgentRipRouteRedistMetricConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRipRouteRedistMetricConfigured.setStatus('current')
hmAgentRipRouteRedistMatchInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRipRouteRedistMatchInternal.setStatus('current')
hmAgentRipRouteRedistMatchExternal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRipRouteRedistMatchExternal1.setStatus('current')
hmAgentRipRouteRedistMatchExternal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRipRouteRedistMatchExternal2.setStatus('current')
hmAgentRipRouteRedistMatchNSSAExternal1 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRipRouteRedistMatchNSSAExternal1.setStatus('current')
hmAgentRipRouteRedistMatchNSSAExternal2 = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRipRouteRedistMatchNSSAExternal2.setStatus('current')
hmAgentRipRouteRedistDistList = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRipRouteRedistDistList.setStatus('current')
hmAgentRipRouteRedistDistListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 8, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRipRouteRedistDistListConfigured.setStatus('current')
hmAgentRip2IfConfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 9), )
if mibBuilder.loadTexts: hmAgentRip2IfConfTable.setStatus('current')
hmAgentRip2IfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 9, 1), )
rip2IfConfEntry.registerAugmentions(("HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentRip2IfConfEntry"))
hmAgentRip2IfConfEntry.setIndexNames(*rip2IfConfEntry.getIndexNames())
if mibBuilder.loadTexts: hmAgentRip2IfConfEntry.setStatus('current')
hmAgentRip2IfConfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentRip2IfConfAuthKeyId.setStatus('current')
hmAgentRip2InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 10), )
if mibBuilder.loadTexts: hmAgentRip2InterfaceTable.setStatus('current')
hmAgentRip2InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 10, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentRip2InterfaceIfIndex"))
if mibBuilder.loadTexts: hmAgentRip2InterfaceEntry.setStatus('current')
hmAgentRip2InterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentRip2InterfaceIfIndex.setStatus('current')
hmAgentRip2InterfaceAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simplePassword", 2), ("md5", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRip2InterfaceAuthType.setStatus('current')
hmAgentRip2InterfaceAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRip2InterfaceAuthKey.setStatus('current')
hmAgentRip2InterfaceAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRip2InterfaceAuthKeyId.setStatus('current')
hmAgentRip2InterfaceSendVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doNotSend", 1), ("ripVersion1", 2), ("rip1Compatible", 3), ("ripVersion2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRip2InterfaceSendVersion.setStatus('current')
hmAgentRip2InterfaceReceiveVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("rip1OrRip2", 3), ("doNotReceive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRip2InterfaceReceiveVersion.setStatus('current')
hmAgentRip2InterfaceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRip2InterfaceAdminState.setStatus('current')
hmAgentRip2RcvBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentRip2RcvBadPackets.setStatus('current')
hmAgentRip2RcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentRip2RcvBadRoutes.setStatus('current')
hmAgentRip2SentUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentRip2SentUpdates.setStatus('current')
hmAgentRouterRipUpdateTimerInterval = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 3, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRouterRipUpdateTimerInterval.setStatus('current')
hmAgentRouterOspfConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 2, 4))
hmAgentOspfDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfDefaultMetric.setStatus('current')
hmAgentOspfDefaultMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfDefaultMetricConfigured.setStatus('current')
hmAgentOspfDefaultInfoOriginate = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfDefaultInfoOriginate.setStatus('current')
hmAgentOspfDefaultInfoOriginateAlways = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfDefaultInfoOriginateAlways.setStatus('current')
hmAgentOspfDefaultInfoOriginateMetric = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfDefaultInfoOriginateMetric.setStatus('current')
hmAgentOspfDefaultInfoOriginateMetricConfigured = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfDefaultInfoOriginateMetricConfigured.setStatus('current')
hmAgentOspfDefaultInfoOriginateMetricType = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfDefaultInfoOriginateMetricType.setStatus('current')
hmAgentOspfRouteRedistTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 8), )
if mibBuilder.loadTexts: hmAgentOspfRouteRedistTable.setStatus('current')
hmAgentOspfRouteRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 8, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentOspfRouteRedistSource"))
if mibBuilder.loadTexts: hmAgentOspfRouteRedistEntry.setStatus('current')
hmAgentOspfRouteRedistSource = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connected", 1), ("static", 2), ("rip", 3), ("bgp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAgentOspfRouteRedistSource.setStatus('current')
hmAgentOspfRouteRedistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfRouteRedistMode.setStatus('current')
hmAgentOspfRouteRedistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfRouteRedistMetric.setStatus('current')
hmAgentOspfRouteRedistMetricConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 8, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfRouteRedistMetricConfigured.setStatus('current')
hmAgentOspfRouteRedistMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalType1", 1), ("externalType2", 2))).clone('externalType2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfRouteRedistMetricType.setStatus('current')
hmAgentOspfRouteRedistTag = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 8, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfRouteRedistTag.setStatus('current')
hmAgentOspfRouteRedistSubnets = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 8, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfRouteRedistSubnets.setStatus('current')
hmAgentOspfRouteRedistDistList = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfRouteRedistDistList.setStatus('current')
hmAgentOspfRouteRedistDistListConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 8, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfRouteRedistDistListConfigured.setStatus('current')
hmAgentOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 9), )
if mibBuilder.loadTexts: hmAgentOspfIfTable.setStatus('current')
hmAgentOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 9, 1), )
ospfIfEntry.registerAugmentions(("HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentOspfIfEntry"))
hmAgentOspfIfEntry.setIndexNames(*ospfIfEntry.getIndexNames())
if mibBuilder.loadTexts: hmAgentOspfIfEntry.setStatus('current')
hmAgentOspfIfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentOspfIfAuthKeyId.setStatus('current')
hmAgentOspfIfIpMtuIgnoreFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentOspfIfIpMtuIgnoreFlag.setStatus('current')
hmAgentOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 10), )
if mibBuilder.loadTexts: hmAgentOspfVirtIfTable.setStatus('current')
hmAgentOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 10, 1), )
ospfVirtIfEntry.registerAugmentions(("HIRSCHMANN-MMP4-ROUTING-MIB", "hmAgentOspfVirtIfEntry"))
hmAgentOspfVirtIfEntry.setIndexNames(*ospfVirtIfEntry.getIndexNames())
if mibBuilder.loadTexts: hmAgentOspfVirtIfEntry.setStatus('current')
hmAgentOspfVirtIfAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmAgentOspfVirtIfAuthKeyId.setStatus('current')
hmAgentRouterOspfRFC1583CompatibilityMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRouterOspfRFC1583CompatibilityMode.setStatus('current')
hmAgentSnmpTrapFlagsConfigGroupLayer3 = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 2, 5))
hmAgentSnmpVRRPNewMasterTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpVRRPNewMasterTrapFlag.setStatus('current')
hmAgentSnmpVRRPAuthFailureTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentSnmpVRRPAuthFailureTrapFlag.setStatus('current')
hmAgentECMPGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 2, 7))
hmAgentECMPOspfMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 7, 1), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentECMPOspfMaxPaths.setStatus('current')
hmAgentRouterVrrpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 2, 8))
hmAgentRouterVrrpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 15, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmAgentRouterVrrpAdminState.setStatus('current')
hmVrrpExtGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 15, 2, 9))
hmVrrpTrackingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 1), )
if mibBuilder.loadTexts: hmVrrpTrackingTable.setStatus('current')
hmVrrpTrackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 1, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmVrrpTrackIfIndex"), (0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmVrrpTrackVrid"), (0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmVrrpTrackId"))
if mibBuilder.loadTexts: hmVrrpTrackingEntry.setStatus('current')
hmVrrpTrackIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hmVrrpTrackIfIndex.setStatus('current')
hmVrrpTrackVrid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hmVrrpTrackVrid.setStatus('current')
hmVrrpTrackId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: hmVrrpTrackId.setStatus('current')
hmVrrpTrackDecrement = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 253))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmVrrpTrackDecrement.setStatus('current')
hmVrrpTrackOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmVrrpTrackOperStatus.setStatus('current')
hmVrrpTrackRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hmVrrpTrackRowStatus.setStatus('current')
hmVrrpExtTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2), )
if mibBuilder.loadTexts: hmVrrpExtTable.setStatus('current')
hmVrrpExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmVrrpExtIfIndex"), (0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmVrrpExtVrid"))
if mibBuilder.loadTexts: hmVrrpExtEntry.setStatus('current')
hmVrrpExtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hmVrrpExtIfIndex.setStatus('current')
hmVrrpExtVrid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hmVrrpExtVrid.setStatus('current')
hmVrrpExtDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmVrrpExtDomainId.setStatus('current')
hmVrrpExtDomainRole = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("member", 2), ("supervisor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmVrrpExtDomainRole.setStatus('current')
hmVrrpExtDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noError", 1), ("noSupervisor", 2), ("supervisorDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmVrrpExtDomainStatus.setStatus('current')
hmVrrpExtAdvertAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmVrrpExtAdvertAddress.setStatus('current')
hmVrrpExtAdvertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 255000))).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmVrrpExtAdvertTimer.setStatus('current')
hmVrrpExtOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmVrrpExtOperPriority.setStatus('current')
hmVrrpExtNotifyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmVrrpExtNotifyAddress.setStatus('current')
hmVrrpExtNotifyLinkdown = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmVrrpExtNotifyLinkdown.setStatus('current')
hmVrrpExtPreemptionDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmVrrpExtPreemptionDelay.setStatus('current')
hmVrrpDomainTable = MibTable((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 3), )
if mibBuilder.loadTexts: hmVrrpDomainTable.setStatus('current')
hmVrrpDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 3, 1), ).setIndexNames((0, "HIRSCHMANN-MMP4-ROUTING-MIB", "hmVrrpDomainId"))
if mibBuilder.loadTexts: hmVrrpDomainEntry.setStatus('current')
hmVrrpDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: hmVrrpDomainId.setStatus('current')
hmVrrpDomainMemberSendAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmVrrpDomainMemberSendAdv.setStatus('current')
hmVrrpDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noError", 1), ("noSupervisor", 2), ("supervisorDown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmVrrpDomainStatus.setStatus('current')
hmVrrpDomainSupervisorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmVrrpDomainSupervisorIfIndex.setStatus('current')
hmVrrpDomainSupervisorVrid = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmVrrpDomainSupervisorVrid.setStatus('current')
hmVrrpDomainOperPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmVrrpDomainOperPriority.setStatus('current')
hmVrrpDomainSupervisorOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 15, 2, 9, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initialize", 1), ("backup", 2), ("master", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmVrrpDomainSupervisorOperState.setStatus('current')
mibBuilder.exportSymbols("HIRSCHMANN-MMP4-ROUTING-MIB", hmAgentOspfDefaultInfoOriginateMetricType=hmAgentOspfDefaultInfoOriginateMetricType, hmAgentRouterOspfRFC1583CompatibilityMode=hmAgentRouterOspfRFC1583CompatibilityMode, hmAgentSwitchIpRouteStaticDestinationMask=hmAgentSwitchIpRouteStaticDestinationMask, hmAgentOspfRouteRedistMetricConfigured=hmAgentOspfRouteRedistMetricConfigured, hmAgentSwitchSecondaryAddressEntry=hmAgentSwitchSecondaryAddressEntry, hmAgentOspfIfEntry=hmAgentOspfIfEntry, hmVrrpDomainEntry=hmVrrpDomainEntry, hmVrrpDomainOperPriority=hmVrrpDomainOperPriority, hmAgentSwitchArpAge=hmAgentSwitchArpAge, hmAgentOspfRouteRedistSource=hmAgentOspfRouteRedistSource, hmAgentRipRouteRedistTable=hmAgentRipRouteRedistTable, hmAgentRipRouteRedistMatchExternal2=hmAgentRipRouteRedistMatchExternal2, hmAgentRipRouteRedistDistList=hmAgentRipRouteRedistDistList, hmVrrpExtPreemptionDelay=hmVrrpExtPreemptionDelay, hmVrrpTrackRowStatus=hmVrrpTrackRowStatus, hmAgentOspfIfIpMtuIgnoreFlag=hmAgentOspfIfIpMtuIgnoreFlag, hmAgentSwitchIpRouterDiscoveryPreferenceLevel=hmAgentSwitchIpRouterDiscoveryPreferenceLevel, hmVrrpExtVrid=hmVrrpExtVrid, hmAgentRipRouteRedistMetricConfigured=hmAgentRipRouteRedistMetricConfigured, hmAgentSwitchIpRouteStaticPreference=hmAgentSwitchIpRouteStaticPreference, hmAgentRip2InterfaceTable=hmAgentRip2InterfaceTable, hmAgentRip2RcvBadPackets=hmAgentRip2RcvBadPackets, hmAgentOspfIfTable=hmAgentOspfIfTable, hmAgentRip2InterfaceEntry=hmAgentRip2InterfaceEntry, hmAgentSwitchIpInterfaceRoutingMode=hmAgentSwitchIpInterfaceRoutingMode, hmAgentSwitchIpVlanTable=hmAgentSwitchIpVlanTable, hmAgentOspfRouteRedistMetricType=hmAgentOspfRouteRedistMetricType, hmAgentSwitchArpEntry=hmAgentSwitchArpEntry, hmAgentSwitchIpRoutingMode=hmAgentSwitchIpRoutingMode, hmAgentSwitchIpCurrentTableSizeUCRoutes=hmAgentSwitchIpCurrentTableSizeUCRoutes, hmVrrpDomainStatus=hmVrrpDomainStatus, hmAgentRip2InterfaceReceiveVersion=hmAgentRip2InterfaceReceiveVersion, hmAgentSwitchIpRouterDiscoveryMaxAdvertisementInterval=hmAgentSwitchIpRouterDiscoveryMaxAdvertisementInterval, hmAgentSwitchIpRouteStaticNextHop=hmAgentSwitchIpRouteStaticNextHop, hmAgentSwitchArpTotalEntryCountCurrent=hmAgentSwitchArpTotalEntryCountCurrent, hmAgentSwitchIpInterfaceProxyARPMode=hmAgentSwitchIpInterfaceProxyARPMode, hmAgentSnmpVRRPAuthFailureTrapFlag=hmAgentSnmpVRRPAuthFailureTrapFlag, hmAgentOspfDefaultMetricConfigured=hmAgentOspfDefaultMetricConfigured, hmAgentSnmpTrapFlagsConfigGroupLayer3=hmAgentSnmpTrapFlagsConfigGroupLayer3, hmAgentRip2InterfaceAdminState=hmAgentRip2InterfaceAdminState, hmVrrpExtOperPriority=hmVrrpExtOperPriority, hmAgentSwitchIpInterfaceNetdirectedBCMode=hmAgentSwitchIpInterfaceNetdirectedBCMode, hmAgentRouterVrrpConfigGroup=hmAgentRouterVrrpConfigGroup, hmVrrpDomainMemberSendAdv=hmVrrpDomainMemberSendAdv, hmAgentRip2IfConfEntry=hmAgentRip2IfConfEntry, hmAgentRipRouteRedistSource=hmAgentRipRouteRedistSource, hmAgentSnmpVRRPNewMasterTrapFlag=hmAgentSnmpVRRPNewMasterTrapFlag, hmVrrpExtEntry=hmVrrpExtEntry, hmAgentOspfRouteRedistMode=hmAgentOspfRouteRedistMode, hmVrrpTrackId=hmVrrpTrackId, hmAgentSwitchArpCacheSize=hmAgentSwitchArpCacheSize, hmAgentRouterRipAutoSummaryMode=hmAgentRouterRipAutoSummaryMode, hmAgentSwitchArpResponseTime=hmAgentSwitchArpResponseTime, hmAgentSwitchIpRoutePreferenceEntry=hmAgentSwitchIpRoutePreferenceEntry, hmAgentRip2InterfaceAuthType=hmAgentRip2InterfaceAuthType, hmAgentSwitchIpVlanEntry=hmAgentSwitchIpVlanEntry, hmAgentRouterRipSplitHorizonMode=hmAgentRouterRipSplitHorizonMode, hmAgentSwitchIpVRRPMode=hmAgentSwitchIpVRRPMode, hmAgentSwitchIpRouterDiscoveryAdvertisementAddress=hmAgentSwitchIpRouterDiscoveryAdvertisementAddress, hmAgentRouterRipDefaultMetricConfigured=hmAgentRouterRipDefaultMetricConfigured, hmAgentOspfDefaultInfoOriginate=hmAgentOspfDefaultInfoOriginate, hmAgentOspfVirtIfEntry=hmAgentOspfVirtIfEntry, hmVrrpExtNotifyAddress=hmVrrpExtNotifyAddress, hmVrrpExtGroup=hmVrrpExtGroup, hmAgentSwitchIpRoutePreferenceSource=hmAgentSwitchIpRoutePreferenceSource, hmVrrpDomainSupervisorVrid=hmVrrpDomainSupervisorVrid, hmAgentSwitchArpInterface=hmAgentSwitchArpInterface, hmAgentOspfRouteRedistMetric=hmAgentOspfRouteRedistMetric, hmVrrpDomainTable=hmVrrpDomainTable, hmAgentSwitchIpInterfaceClearIp=hmAgentSwitchIpInterfaceClearIp, hmAgentSwitchIpRouteStaticTable=hmAgentSwitchIpRouteStaticTable, hmVrrpExtDomainId=hmVrrpExtDomainId, hmAgentSwitchIpRouteStaticDestination=hmAgentSwitchIpRouteStaticDestination, hmAgentSwitchSecondaryIpAddress=hmAgentSwitchSecondaryIpAddress, hmAgentRip2InterfaceAuthKey=hmAgentRip2InterfaceAuthKey, hmAgentSwitchArpGroup=hmAgentSwitchArpGroup, hmAgentSwitchIpInterfaceNetMask=hmAgentSwitchIpInterfaceNetMask, hmAgentRipRouteRedistMatchNSSAExternal1=hmAgentRipRouteRedistMatchNSSAExternal1, hmPlatform4Routing=hmPlatform4Routing, hmAgentRip2SentUpdates=hmAgentRip2SentUpdates, hmAgentRipRouteRedistMetric=hmAgentRipRouteRedistMetric, hmAgentSwitchArpSparseLearn=hmAgentSwitchArpSparseLearn, hmAgentSwitchIpTableSizeMCRoutes=hmAgentSwitchIpTableSizeMCRoutes, hmAgentSwitchArpDynamicRenew=hmAgentSwitchArpDynamicRenew, hmAgentSwitchArpIpAddress=hmAgentSwitchArpIpAddress, hmVrrpTrackIfIndex=hmVrrpTrackIfIndex, hmAgentRip2RcvBadRoutes=hmAgentRip2RcvBadRoutes, hmAgentOspfRouteRedistSubnets=hmAgentOspfRouteRedistSubnets, hmAgentSwitchArpMacAddress=hmAgentSwitchArpMacAddress, hmAgentOspfRouteRedistDistList=hmAgentOspfRouteRedistDistList, hmVrrpDomainSupervisorIfIndex=hmVrrpDomainSupervisorIfIndex, hmAgentSwitchArpTable=hmAgentSwitchArpTable, hmVrrpDomainSupervisorOperState=hmVrrpDomainSupervisorOperState, hmVrrpTrackOperStatus=hmVrrpTrackOperStatus, hmAgentRouterRipHostRoutesAcceptMode=hmAgentRouterRipHostRoutesAcceptMode, hmVrrpExtAdvertTimer=hmVrrpExtAdvertTimer, hmAgentRouterVrrpAdminState=hmAgentRouterVrrpAdminState, hmVrrpTrackingEntry=hmVrrpTrackingEntry, hmAgentSwitchArpMaxRetries=hmAgentSwitchArpMaxRetries, hmAgentSwitchIpRouterDiscoveryEntry=hmAgentSwitchIpRouterDiscoveryEntry, hmAgentRipRouteRedistMatchNSSAExternal2=hmAgentRipRouteRedistMatchNSSAExternal2, hmAgentSwitchIpInterfaceEntry=hmAgentSwitchIpInterfaceEntry, hmAgentSwitchArpStaticEntryCountCurrent=hmAgentSwitchArpStaticEntryCountCurrent, hmAgentECMPGroup=hmAgentECMPGroup, hmAgentOspfIfAuthKeyId=hmAgentOspfIfAuthKeyId, hmAgentSwitchIpInterfaceIfIndex=hmAgentSwitchIpInterfaceIfIndex, hmAgentSwitchIpRouterDiscoveryTable=hmAgentSwitchIpRouterDiscoveryTable, hmAgentSwitchSecondaryStatus=hmAgentSwitchSecondaryStatus, hmAgentSwitchIpRouteStaticTrackId=hmAgentSwitchIpRouteStaticTrackId, hmAgentRip2InterfaceSendVersion=hmAgentRip2InterfaceSendVersion, hmAgentSwitchIpVlanId=hmAgentSwitchIpVlanId, hmAgentSwitchIpInterfacePortNum=hmAgentSwitchIpInterfacePortNum, hmVrrpTrackVrid=hmVrrpTrackVrid, hmAgentSwitchIpTableSizeUCRoutes=hmAgentSwitchIpTableSizeUCRoutes, hmAgentOspfDefaultInfoOriginateMetric=hmAgentOspfDefaultInfoOriginateMetric, hmAgentSwitchIpVlanRoutingStatus=hmAgentSwitchIpVlanRoutingStatus, hmVrrpDomainId=hmVrrpDomainId, hmAgentRouterOspfConfigGroup=hmAgentRouterOspfConfigGroup, hmAgentOspfRouteRedistDistListConfigured=hmAgentOspfRouteRedistDistListConfigured, hmVrrpTrackingTable=hmVrrpTrackingTable, hmAgentSwitchSecondaryAddressTable=hmAgentSwitchSecondaryAddressTable, hmAgentSwitchIpInterfaceMtuValue=hmAgentSwitchIpInterfaceMtuValue, hmAgentOspfDefaultInfoOriginateMetricConfigured=hmAgentOspfDefaultInfoOriginateMetricConfigured, hmAgentRip2InterfaceAuthKeyId=hmAgentRip2InterfaceAuthKeyId, hmAgentRouterRipAdminState=hmAgentRouterRipAdminState, hmAgentSwitchIpVlanIfIndex=hmAgentSwitchIpVlanIfIndex, hmAgentSwitchIpRouteStaticEntry=hmAgentSwitchIpRouteStaticEntry, hmAgentSwitchArpStatus=hmAgentSwitchArpStatus, hmAgentSwitchArpAgeoutTime=hmAgentSwitchArpAgeoutTime, hmAgentRipRouteRedistDistListConfigured=hmAgentRipRouteRedistDistListConfigured, hmAgentSwitchIpGroup=hmAgentSwitchIpGroup, hmAgentSwitchIpVlanSingleMacMode=hmAgentSwitchIpVlanSingleMacMode, hmAgentECMPOspfMaxPaths=hmAgentECMPOspfMaxPaths, hmVrrpExtAdvertAddress=hmVrrpExtAdvertAddress, hmAgentSwitchIpRouterDiscoveryIfIndex=hmAgentSwitchIpRouterDiscoveryIfIndex, hmAgentSwitchArpTotalEntryCountPeak=hmAgentSwitchArpTotalEntryCountPeak, hmAgentRip2InterfaceIfIndex=hmAgentRip2InterfaceIfIndex, hmAgentOspfDefaultInfoOriginateAlways=hmAgentOspfDefaultInfoOriginateAlways, hmAgentOspfVirtIfAuthKeyId=hmAgentOspfVirtIfAuthKeyId, hmAgentRipRouteRedistMatchExternal1=hmAgentRipRouteRedistMatchExternal1, hmAgentRip2IfConfAuthKeyId=hmAgentRip2IfConfAuthKeyId, hmAgentSwitchArpStaticEntryCountMax=hmAgentSwitchArpStaticEntryCountMax, hmAgentSwitchIpRoutePreferenceValue=hmAgentSwitchIpRoutePreferenceValue, hmVrrpExtDomainStatus=hmVrrpExtDomainStatus, hmAgentRipRouteRedistEntry=hmAgentRipRouteRedistEntry, hmAgentSwitchIpTableSizesGroup=hmAgentSwitchIpTableSizesGroup, hmVrrpExtIfIndex=hmVrrpExtIfIndex, hmVrrpExtTable=hmVrrpExtTable, hmAgentSwitchArpType=hmAgentSwitchArpType, hmAgentSwitchSecondaryNetMask=hmAgentSwitchSecondaryNetMask, hmAgentRouterRipConfigGroup=hmAgentRouterRipConfigGroup, hmAgentOspfDefaultMetric=hmAgentOspfDefaultMetric, hmAgentSwitchIpInterfaceSlotNum=hmAgentSwitchIpInterfaceSlotNum, hmAgentRouterRipDefaultMetric=hmAgentRouterRipDefaultMetric, hmAgentRouterRipUpdateTimerInterval=hmAgentRouterRipUpdateTimerInterval, hmAgentRipRouteRedistMatchInternal=hmAgentRipRouteRedistMatchInternal, hmAgentSwitchIpCurrentTableSizeArp=hmAgentSwitchIpCurrentTableSizeArp, hmAgentSwitchIpCurrentTableSizeMCRoutes=hmAgentSwitchIpCurrentTableSizeMCRoutes, hmAgentOspfRouteRedistTag=hmAgentOspfRouteRedistTag, hmAgentSwitchIpTableSizeArp=hmAgentSwitchIpTableSizeArp, hmAgentOspfRouteRedistEntry=hmAgentOspfRouteRedistEntry, hmAgentOspfVirtIfTable=hmAgentOspfVirtIfTable, hmAgentSwitchIpRouteStaticStatus=hmAgentSwitchIpRouteStaticStatus, hmVrrpExtDomainRole=hmVrrpExtDomainRole, hmAgentSwitchIpInterfaceTable=hmAgentSwitchIpInterfaceTable, hmAgentSwitchIpRouterDiscoveryMinAdvertisementInterval=hmAgentSwitchIpRouterDiscoveryMinAdvertisementInterval, hmAgentSwitchIpRoutePreferenceTable=hmAgentSwitchIpRoutePreferenceTable, hmAgentRip2IfConfTable=hmAgentRip2IfConfTable, hmAgentRipRouteRedistMode=hmAgentRipRouteRedistMode, hmVrrpTrackDecrement=hmVrrpTrackDecrement, hmAgentOspfRouteRedistTable=hmAgentOspfRouteRedistTable, hmAgentRouterRipDefaultInfoOriginate=hmAgentRouterRipDefaultInfoOriginate, hmAgentSwitchIpInterfaceIpAddress=hmAgentSwitchIpInterfaceIpAddress, hmAgentSwitchIpRouterDiscoveryAdvertiseMode=hmAgentSwitchIpRouterDiscoveryAdvertiseMode, hmVrrpExtNotifyLinkdown=hmVrrpExtNotifyLinkdown, PYSNMP_MODULE_ID=hmPlatform4Routing, hmAgentSwitchIpRouterDiscoveryAdvertisementLifetime=hmAgentSwitchIpRouterDiscoveryAdvertisementLifetime)
