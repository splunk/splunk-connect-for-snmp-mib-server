#
# PySNMP MIB module CXAsyncIo-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXAsyncIo-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:16:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
Alias, cxAsyncIo = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxAsyncIo")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, IpAddress, ModuleIdentity, Integer32, NotificationType, TimeTicks, NotificationType, MibIdentifier, ObjectIdentity, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "IpAddress", "ModuleIdentity", "Integer32", "NotificationType", "TimeTicks", "NotificationType", "MibIdentifier", "ObjectIdentity", "Gauge32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
asioSapOprTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1), )
if mibBuilder.loadTexts: asioSapOprTable.setStatus('mandatory')
asioSapOprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1), ).setIndexNames((0, "CXAsyncIo-MIB", "asioSapOprNumber"))
if mibBuilder.loadTexts: asioSapOprEntry.setStatus('mandatory')
asioSapOprNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprNumber.setStatus('mandatory')
asioSapOprAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 2), Alias()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprAlias.setStatus('mandatory')
asioSapOprPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 115200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortSpeed.setStatus('mandatory')
asioSapOprPortCharacterSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortCharacterSize.setStatus('mandatory')
asioSapOprPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("one-point-five", 2), ("two", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortStopBits.setStatus('mandatory')
asioSapOprPortBreakLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortBreakLength.setStatus('mandatory')
asioSapOprPortMaxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortMaxQueueLength.setStatus('mandatory')
asioSapOprPortQueueUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortQueueUpperThreshold.setStatus('mandatory')
asioSapOprPortQueueLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortQueueLowerThreshold.setStatus('mandatory')
asioSapOprPortSignalDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortSignalDownTimer.setStatus('mandatory')
asioSapOprPortMaxTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortMaxTimeDelay.setStatus('mandatory')
asioSapOprPortMaxInterruptCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortMaxInterruptCharacters.setStatus('obsolete')
asioSapOprPortSignalSamplingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortSignalSamplingPeriod.setStatus('mandatory')
asioSapOprPortDcdDtrSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortDcdDtrSignalSamples.setStatus('mandatory')
asioSapOprPortCtsRtsSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortCtsRtsSignalSamples.setStatus('mandatory')
asioSapOprPortDsrDrsSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortDsrDrsSignalSamples.setStatus('mandatory')
asioSapOprPortTmLlSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortTmLlSignalSamples.setStatus('mandatory')
asioSapOprPortRiRlSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortRiRlSignalSamples.setStatus('mandatory')
asioSapOprPortStatisticsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapOprPortStatisticsTimer.setStatus('mandatory')
asioSapOprPortCarrierAction = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapOprPortCarrierAction.setStatus('mandatory')
asioOprPortTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioOprPortTrap.setStatus('mandatory')
asioOprControlLine = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forceDown", 1), ("forceUp", 2), ("forceReset", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: asioOprControlLine.setStatus('mandatory')
asioOprControlStats = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearSapStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: asioOprControlStats.setStatus('mandatory')
asioStatOprPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("dte", 2), ("dce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprPortType.setStatus('mandatory')
asioStatOprPortInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("rs232d", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprPortInterfaceType.setStatus('mandatory')
asioStatOprPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("portUp", 1), ("portDown", 2), ("portShutDown", 3), ("portDownBadConfiguration", 4), ("portOutOfOrder", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprPortState.setStatus('mandatory')
asioStatOprDCDState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDCDState.setStatus('mandatory')
asioStatOprDTRState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDTRState.setStatus('mandatory')
asioStatOprRTSState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRTSState.setStatus('mandatory')
asioStatOprCTSState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprCTSState.setStatus('mandatory')
asioStatOprDSRState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDSRState.setStatus('mandatory')
asioStatOprDRSState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDRSState.setStatus('mandatory')
asioStatOprTMState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTMState.setStatus('mandatory')
asioStatOprLLState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprLLState.setStatus('mandatory')
asioStatOprRIState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRIState.setStatus('mandatory')
asioStatOprRLState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("inactive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRLState.setStatus('mandatory')
asioStatOprTxBps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTxBps.setStatus('mandatory')
asioStatOprRxBps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxBps.setStatus('mandatory')
asioStatOprTxBpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTxBpsMax.setStatus('mandatory')
asioStatOprRxBpsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxBpsMax.setStatus('mandatory')
asioStatOprTxCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTxCharacters.setStatus('mandatory')
asioStatOprTxBadStateDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTxBadStateDiscards.setStatus('mandatory')
asioStatOprTxResetDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTxResetDiscards.setStatus('mandatory')
asioStatOprTxSysCongestionDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTxSysCongestionDiscards.setStatus('mandatory')
asioStatOprRxCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxCharacters.setStatus('mandatory')
asioStatOprRxOverrunErrorCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxOverrunErrorCharacters.setStatus('mandatory')
asioStatOprRxParityErrorCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxParityErrorCharacters.setStatus('mandatory')
asioStatOprRxFramingErrorCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxFramingErrorCharacters.setStatus('mandatory')
asioStatOprRxNoiseErrorCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxNoiseErrorCharacters.setStatus('mandatory')
asioStatOprRxBreakCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxBreakCharacters.setStatus('mandatory')
asioStatOprRxBadStateDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxBadStateDiscards.setStatus('mandatory')
asioStatOprRxBusyDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRxBusyDiscards.setStatus('mandatory')
asioStatOprPortStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprPortStateChanges.setStatus('mandatory')
asioStatOprDCDStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDCDStateChanges.setStatus('mandatory')
asioStatOprDTRStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDTRStateChanges.setStatus('mandatory')
asioStatOprRTSStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRTSStateChanges.setStatus('mandatory')
asioStatOprCTSStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprCTSStateChanges.setStatus('mandatory')
asioStatOprDSRStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDSRStateChanges.setStatus('mandatory')
asioStatOprDRSStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprDRSStateChanges.setStatus('mandatory')
asioStatOprTMStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprTMStateChanges.setStatus('mandatory')
asioStatOprLLStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprLLStateChanges.setStatus('mandatory')
asioStatOprRIStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRIStateChanges.setStatus('mandatory')
asioStatOprRLStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprRLStateChanges.setStatus('mandatory')
asioStatOprPortResets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioStatOprPortResets.setStatus('mandatory')
asioSapAdmTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2), )
if mibBuilder.loadTexts: asioSapAdmTable.setStatus('mandatory')
asioSapAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1), ).setIndexNames((0, "CXAsyncIo-MIB", "asioSapAdmNumber"))
if mibBuilder.loadTexts: asioSapAdmEntry.setStatus('mandatory')
asioSapAdmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asioSapAdmNumber.setStatus('mandatory')
asioSapAdmAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 2), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmAlias.setStatus('mandatory')
asioSapAdmPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 115200)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortSpeed.setStatus('mandatory')
asioSapAdmPortCharacterSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortCharacterSize.setStatus('mandatory')
asioSapAdmPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("one-point-five", 2), ("two", 3))).clone('one')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortStopBits.setStatus('mandatory')
asioSapAdmPortBreakLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortBreakLength.setStatus('mandatory')
asioSapAdmPortMaxQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortMaxQueueLength.setStatus('mandatory')
asioSapAdmPortQueueUpperThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortQueueUpperThreshold.setStatus('mandatory')
asioSapAdmPortQueueLowerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortQueueLowerThreshold.setStatus('mandatory')
asioSapAdmPortSignalDownTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortSignalDownTimer.setStatus('mandatory')
asioSapAdmPortMaxTimeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortMaxTimeDelay.setStatus('mandatory')
asioSapAdmPortMaxInterruptCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 40)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortMaxInterruptCharacters.setStatus('obsolete')
asioSapAdmPortSignalSamplingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortSignalSamplingPeriod.setStatus('mandatory')
asioSapAdmPortDcdDtrSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortDcdDtrSignalSamples.setStatus('mandatory')
asioSapAdmPortCtsRtsSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortCtsRtsSignalSamples.setStatus('mandatory')
asioSapAdmPortDsrDrsSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortDsrDrsSignalSamples.setStatus('mandatory')
asioSapAdmPortTmLlSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortTmLlSignalSamples.setStatus('mandatory')
asioSapAdmPortRiRlSignalSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortRiRlSignalSamples.setStatus('mandatory')
asioSapAdmPortStatisticsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortStatisticsTimer.setStatus('mandatory')
asioSapAdmPortCarrierAction = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioSapAdmPortCarrierAction.setStatus('mandatory')
asioAdmPortTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asioAdmPortTrap.setStatus('mandatory')
asioPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 44) + (0,1)).setObjects(("CXAsyncIo-MIB", "asioSapOprNumber"), ("CXAsyncIo-MIB", "asioStatOprPortState"))
mibBuilder.exportSymbols("CXAsyncIo-MIB", asioSapOprPortCharacterSize=asioSapOprPortCharacterSize, asioSapOprTable=asioSapOprTable, asioStatOprTMState=asioStatOprTMState, asioStatOprRxOverrunErrorCharacters=asioStatOprRxOverrunErrorCharacters, asioSapAdmPortSignalSamplingPeriod=asioSapAdmPortSignalSamplingPeriod, asioStatOprTxCharacters=asioStatOprTxCharacters, asioSapOprPortCarrierAction=asioSapOprPortCarrierAction, asioStatOprDCDState=asioStatOprDCDState, asioSapOprAlias=asioSapOprAlias, asioStatOprTxSysCongestionDiscards=asioStatOprTxSysCongestionDiscards, asioSapOprPortQueueUpperThreshold=asioSapOprPortQueueUpperThreshold, asioStatOprTMStateChanges=asioStatOprTMStateChanges, asioSapAdmPortBreakLength=asioSapAdmPortBreakLength, asioStatOprRTSState=asioStatOprRTSState, asioStatOprRxNoiseErrorCharacters=asioStatOprRxNoiseErrorCharacters, asioSapAdmPortMaxTimeDelay=asioSapAdmPortMaxTimeDelay, asioSapOprPortTmLlSignalSamples=asioSapOprPortTmLlSignalSamples, asioStatOprTxBadStateDiscards=asioStatOprTxBadStateDiscards, asioStatOprRxFramingErrorCharacters=asioStatOprRxFramingErrorCharacters, asioStatOprDSRStateChanges=asioStatOprDSRStateChanges, asioSapAdmPortDcdDtrSignalSamples=asioSapAdmPortDcdDtrSignalSamples, asioStatOprLLState=asioStatOprLLState, asioStatOprDTRStateChanges=asioStatOprDTRStateChanges, asioStatOprRTSStateChanges=asioStatOprRTSStateChanges, asioSapAdmPortCtsRtsSignalSamples=asioSapAdmPortCtsRtsSignalSamples, asioOprControlLine=asioOprControlLine, asioStatOprLLStateChanges=asioStatOprLLStateChanges, asioSapOprPortSpeed=asioSapOprPortSpeed, asioSapAdmTable=asioSapAdmTable, asioSapOprPortSignalDownTimer=asioSapOprPortSignalDownTimer, asioSapAdmPortRiRlSignalSamples=asioSapAdmPortRiRlSignalSamples, asioStatOprTxBpsMax=asioStatOprTxBpsMax, asioSapAdmPortSignalDownTimer=asioSapAdmPortSignalDownTimer, asioStatOprPortInterfaceType=asioStatOprPortInterfaceType, asioStatOprDRSStateChanges=asioStatOprDRSStateChanges, asioStatOprRLStateChanges=asioStatOprRLStateChanges, asioStatOprPortResets=asioStatOprPortResets, asioSapAdmPortMaxInterruptCharacters=asioSapAdmPortMaxInterruptCharacters, asioSapAdmPortDsrDrsSignalSamples=asioSapAdmPortDsrDrsSignalSamples, asioSapAdmAlias=asioSapAdmAlias, asioStatOprDRSState=asioStatOprDRSState, asioSapOprPortMaxInterruptCharacters=asioSapOprPortMaxInterruptCharacters, asioStatOprCTSStateChanges=asioStatOprCTSStateChanges, asioSapOprPortStatisticsTimer=asioSapOprPortStatisticsTimer, asioSapOprPortDsrDrsSignalSamples=asioSapOprPortDsrDrsSignalSamples, asioSapAdmPortTmLlSignalSamples=asioSapAdmPortTmLlSignalSamples, asioStatOprRIStateChanges=asioStatOprRIStateChanges, asioStatOprDTRState=asioStatOprDTRState, asioSapAdmPortQueueLowerThreshold=asioSapAdmPortQueueLowerThreshold, asioStatOprRIState=asioStatOprRIState, asioStatOprTxBps=asioStatOprTxBps, asioOprControlStats=asioOprControlStats, asioSapOprNumber=asioSapOprNumber, asioSapOprPortRiRlSignalSamples=asioSapOprPortRiRlSignalSamples, asioStatOprRxBadStateDiscards=asioStatOprRxBadStateDiscards, asioSapOprPortMaxQueueLength=asioSapOprPortMaxQueueLength, asioSapOprPortSignalSamplingPeriod=asioSapOprPortSignalSamplingPeriod, asioSapOprPortBreakLength=asioSapOprPortBreakLength, asioStatOprCTSState=asioStatOprCTSState, asioSapOprPortDcdDtrSignalSamples=asioSapOprPortDcdDtrSignalSamples, asioSapOprPortQueueLowerThreshold=asioSapOprPortQueueLowerThreshold, asioSapOprPortMaxTimeDelay=asioSapOprPortMaxTimeDelay, asioSapAdmPortCharacterSize=asioSapAdmPortCharacterSize, asioSapOprEntry=asioSapOprEntry, asioStatOprRLState=asioStatOprRLState, asioPortStatusChange=asioPortStatusChange, asioStatOprPortType=asioStatOprPortType, asioSapAdmEntry=asioSapAdmEntry, asioSapAdmPortCarrierAction=asioSapAdmPortCarrierAction, asioStatOprRxCharacters=asioStatOprRxCharacters, asioStatOprRxParityErrorCharacters=asioStatOprRxParityErrorCharacters, asioSapAdmPortQueueUpperThreshold=asioSapAdmPortQueueUpperThreshold, asioStatOprDCDStateChanges=asioStatOprDCDStateChanges, asioStatOprPortState=asioStatOprPortState, asioAdmPortTrap=asioAdmPortTrap, asioStatOprRxBreakCharacters=asioStatOprRxBreakCharacters, asioStatOprTxResetDiscards=asioStatOprTxResetDiscards, asioStatOprRxBusyDiscards=asioStatOprRxBusyDiscards, asioSapOprPortCtsRtsSignalSamples=asioSapOprPortCtsRtsSignalSamples, asioSapAdmPortStopBits=asioSapAdmPortStopBits, asioOprPortTrap=asioOprPortTrap, asioSapAdmPortSpeed=asioSapAdmPortSpeed, asioSapAdmPortMaxQueueLength=asioSapAdmPortMaxQueueLength, asioStatOprPortStateChanges=asioStatOprPortStateChanges, asioSapAdmPortStatisticsTimer=asioSapAdmPortStatisticsTimer, asioStatOprRxBpsMax=asioStatOprRxBpsMax, asioStatOprRxBps=asioStatOprRxBps, asioStatOprDSRState=asioStatOprDSRState, asioSapAdmNumber=asioSapAdmNumber, asioSapOprPortStopBits=asioSapOprPortStopBits)
