#
# PySNMP MIB module DESKSNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DESKSNMP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:26:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, IpAddress, Unsigned32, NotificationType, ObjectIdentity, Integer32, ModuleIdentity, Counter32, MibIdentifier, TimeTicks, mib_2, iso, Counter64, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Unsigned32", "NotificationType", "ObjectIdentity", "Integer32", "ModuleIdentity", "Counter32", "MibIdentifier", "TimeTicks", "mib-2", "iso", "Counter64", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sni = MibIdentifier((1, 3, 6, 1, 4, 1, 231))
sniProductMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2))
sniExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10))
sniDesktopMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3))
sniDeskInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1))
sniPCInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2))
sniPCManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCManufacturer.setStatus('mandatory')
sniPCName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCName.setStatus('mandatory')
sniProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProductVersion.setStatus('mandatory')
sniPCSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCSerialNumber.setStatus('mandatory')
sniChassisType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-desktop", 3), ("e-low-profile-desktop", 4), ("e-pizza-box", 5), ("e-mini-tower", 6), ("e-tower", 7), ("e-portable", 8), ("e-laptop", 9), ("e-notebook", 10), ("e-handheld", 11), ("e-docking-station", 12), ("e-all-in-one", 13), ("e-sub-notebook", 14), ("e-space-saving", 15), ("e-lunch-box", 16), ("e-mainserver", 17), ("e-expansion-chassis", 18), ("e-sub-chassis", 19), ("e-bus-expansion-chassis", 20), ("e-peripheral-chassis", 21), ("e-raid-chassis", 22), ("e-rack-mount-chassis", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniChassisType.setStatus('mandatory')
sniChassisColor = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniChassisColor.setStatus('mandatory')
sniHousingGeometry = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniHousingGeometry.setStatus('mandatory')
sniCustomerSpecificSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCustomerSpecificSerialNumber.setStatus('mandatory')
sniUUID = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniUUID.setStatus('mandatory')
sniBios = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3))
sniBiosManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBiosManufacturer.setStatus('mandatory')
sniAdaptions = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAdaptions.setStatus('mandatory')
sniFeatures = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFeatures.setStatus('mandatory')
sniBiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBiosVersion.setStatus('mandatory')
sniLoaderVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLoaderVersion.setStatus('mandatory')
sniRomSizekB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRomSizekB.setStatus('mandatory')
sniBiosDate = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBiosDate.setStatus('mandatory')
sniStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniStatus.setStatus('mandatory')
sniStartaddress = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniStartaddress.setStatus('mandatory')
sniEndaddress = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEndaddress.setStatus('mandatory')
sniISABus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniISABus.setStatus('mandatory')
sniMCABus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMCABus.setStatus('mandatory')
sniEISABus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEISABus.setStatus('mandatory')
sniPCIBus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIBus.setStatus('mandatory')
sniPCMCIAInterface = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCMCIAInterface.setStatus('mandatory')
sniPlugandPlayPnP = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPlugandPlayPnP.setStatus('mandatory')
sniAdvPowerManagemAPM = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAdvPowerManagemAPM.setStatus('mandatory')
sniVLBus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVLBus.setStatus('mandatory')
sniESCDBus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniESCDBus.setStatus('mandatory')
sniIRDABus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIRDABus.setStatus('mandatory')
sniBootfromCDROM = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBootfromCDROM.setStatus('mandatory')
sniBootfromPCMCIA = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBootfromPCMCIA.setStatus('mandatory')
sniBiosShadowing = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBiosShadowing.setStatus('mandatory')
sniSavetoDiskStd = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSavetoDiskStd.setStatus('mandatory')
sniSecurity = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSecurity.setStatus('mandatory')
sniUSB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniUSB.setStatus('mandatory')
sniSoftwarePowerOff = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSoftwarePowerOff.setStatus('mandatory')
sniRemoteOn = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRemoteOn.setStatus('mandatory')
sniAPMSpecificVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAPMSpecificVersion.setStatus('mandatory')
sniPNPSpecificVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPNPSpecificVersion.setStatus('mandatory')
sniFlashBIOS = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFlashBIOS.setStatus('mandatory')
sniPC98 = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPC98.setStatus('mandatory')
sniBootDeviceSelectable = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBootDeviceSelectable.setStatus('mandatory')
sniBIOSRomSocketed = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBIOSRomSocketed.setStatus('mandatory')
sniEnhancedDiskDriveEDD = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEnhancedDiskDriveEDD.setStatus('mandatory')
sniNEC9800FloppySupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNEC9800FloppySupport.setStatus('mandatory')
sniToshibaFloppySupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniToshibaFloppySupport.setStatus('mandatory')
sni360kBFloppySupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sni360kBFloppySupport.setStatus('mandatory')
sni720kBFloppySupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sni720kBFloppySupport.setStatus('mandatory')
sni1MB2FloppySupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sni1MB2FloppySupport.setStatus('mandatory')
sni2MB88FloppySupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sni2MB88FloppySupport.setStatus('mandatory')
sniInt5PrintScreenService = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInt5PrintScreenService.setStatus('mandatory')
sniInt9Keyboard8042Supp = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInt9Keyboard8042Supp.setStatus('mandatory')
sniSoftwarePowerOn = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSoftwarePowerOn.setStatus('mandatory')
sniISAMemoryGapSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniISAMemoryGapSupport.setStatus('mandatory')
sniIEEE1394Support = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIEEE1394Support.setStatus('mandatory')
sniDMISupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDMISupport.setStatus('mandatory')
sniACPISupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniACPISupport.setStatus('mandatory')
sniSystemMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSystemMonitoring.setStatus('mandatory')
sniInt14SerialServices = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInt14SerialServices.setStatus('mandatory')
sniInt17PrinterServices = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInt17PrinterServices.setStatus('mandatory')
sniInt10CGAVideoServices = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInt10CGAVideoServices.setStatus('mandatory')
sniAGPSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAGPSupport.setStatus('mandatory')
sniI2OBootSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniI2OBootSupport.setStatus('mandatory')
sniLS120BootSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLS120BootSupport.setStatus('mandatory')
sniAtapiZIPDriveBootSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAtapiZIPDriveBootSupport.setStatus('mandatory')
sniSMARTBatterieSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTBatterieSupport.setStatus('mandatory')
sniMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4))
sniPhysicalMemoryMB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalMemoryMB.setStatus('mandatory')
sniBaseMemorykB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBaseMemorykB.setStatus('mandatory')
sniFreePhysicalMemorykB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFreePhysicalMemorykB.setStatus('mandatory')
sniFreeUserResourcesPercentage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFreeUserResourcesPercentage.setStatus('mandatory')
sniFreeGDIResourcesPercentage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFreeGDIResourcesPercentage.setStatus('mandatory')
sniVirtualMemoryType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-no-paging", 1), ("e-dos-paging", 2), ("e-protected-paging", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVirtualMemoryType.setStatus('mandatory')
sniSwapFileName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSwapFileName.setStatus('mandatory')
sniSwapFileSizekB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSwapFileSizekB.setStatus('mandatory')
sniSwapFileUsedPercentage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSwapFileUsedPercentage.setStatus('mandatory')
sniEMMSizekB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEMMSizekB.setStatus('mandatory')
sniEMMFreekB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEMMFreekB.setStatus('mandatory')
sniEMMDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEMMDriverVersion.setStatus('mandatory')
sniEMMDriverName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEMMDriverName.setStatus('mandatory')
sniXMSSizekB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniXMSSizekB.setStatus('mandatory')
sniXMSFreeMemorykB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniXMSFreeMemorykB.setStatus('mandatory')
sniXMSDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniXMSDriverVersion.setStatus('mandatory')
sniXMSDriverName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniXMSDriverName.setStatus('mandatory')
sniGraphic = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5))
sniGraphicCardManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGraphicCardManufacturer.setStatus('mandatory')
sniGraphicController = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGraphicController.setStatus('mandatory')
sniGraphicCardDate = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGraphicCardDate.setStatus('mandatory')
sniShadowed = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniShadowed.setStatus('mandatory')
sniGraphicType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-cga", 3), ("e-ega", 4), ("e-vga", 5), ("e-svga", 6), ("e-mda", 7), ("e-hgc", 8), ("e-mcga", 9), ("e-8514a", 10), ("e-xga", 11), ("e-frame-buffer", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGraphicType.setStatus('mandatory')
sniDriver = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDriver.setStatus('mandatory')
sniGraphicmode = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGraphicmode.setStatus('mandatory')
snivertResolutionPixel = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snivertResolutionPixel.setStatus('mandatory')
snihorResolutionPixel = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snihorResolutionPixel.setStatus('mandatory')
sniColorResolution = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniColorResolution.setStatus('mandatory')
sniRefreshrateHz = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRefreshrateHz.setStatus('mandatory')
sniScanMode = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-interlaced", 3), ("e-non-interlaced", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniScanMode.setStatus('mandatory')
sniMinRefreshrateHz = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMinRefreshrateHz.setStatus('mandatory')
sniMaxRefreshrateHz = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxRefreshrateHz.setStatus('mandatory')
sniMemorySizeKB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemorySizeKB.setStatus('mandatory')
sniMemoryType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-vram", 3), ("e-dram", 4), ("e-sram", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryType.setStatus('mandatory')
sniGraphicCardLocation = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-integrated", 3), ("e-add-on", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGraphicCardLocation.setStatus('mandatory')
sniStandardBios = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniStandardBios.setStatus('mandatory')
sniVESAExtensions = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVESAExtensions.setStatus('mandatory')
sniDPMS = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDPMS.setStatus('mandatory')
sniDDC = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDDC.setStatus('mandatory')
sniShadowing = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniShadowing.setStatus('mandatory')
sniUpgradable = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniUpgradable.setStatus('mandatory')
sniMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6))
sniMonitorName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMonitorName.setStatus('mandatory')
sniSizeInch = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSizeInch.setStatus('mandatory')
sniDDCSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDDCSupport.setStatus('mandatory')
sniDPMSSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDPMSSupport.setStatus('mandatory')
sniMaxhorizResolution = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxhorizResolution.setStatus('mandatory')
sniMaxverticalResolution = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxverticalResolution.setStatus('mandatory')
sniMaxhorizontalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxhorizontalFrequency.setStatus('mandatory')
sniMinhorizontalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMinhorizontalFrequency.setStatus('mandatory')
sniMaximumRefreshrate = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaximumRefreshrate.setStatus('mandatory')
sniMinimumRefreshrate = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMinimumRefreshrate.setStatus('mandatory')
sniSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSerialNumber.setStatus('mandatory')
sniWeekofManufacture = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWeekofManufacture.setStatus('mandatory')
sniYearofManufacture = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniYearofManufacture.setStatus('mandatory')
sniOperatingSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7))
sniOSName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSName.setStatus('mandatory')
sniOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSVersion.setStatus('mandatory')
sniOSLanguage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSLanguage.setStatus('mandatory')
sniOSInstallationDirectory = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSInstallationDirectory.setStatus('mandatory')
sniOSNameSecondary = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSNameSecondary.setStatus('mandatory')
sniOSVersionSecondary = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSVersionSecondary.setStatus('mandatory')
sniOSLanguageSecondary = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSLanguageSecondary.setStatus('mandatory')
sniOSInstallDirSec = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSInstallDirSec.setStatus('mandatory')
sniPreInstallationVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPreInstallationVersion.setStatus('mandatory')
sniPreInstallationLanguage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPreInstallationLanguage.setStatus('mandatory')
sniSoftware = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8), )
if mibBuilder.loadTexts: sniSoftware.setStatus('mandatory')
sniSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniSoftwareIndex"))
if mibBuilder.loadTexts: sniSoftwareEntry.setStatus('mandatory')
sniSoftwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSoftwareIndex.setStatus('mandatory')
sniSoftwareName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSoftwareName.setStatus('mandatory')
sniSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSoftwareVersion.setStatus('mandatory')
sniInstallationDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInstallationDirectory.setStatus('mandatory')
sniAtPreInstallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAtPreInstallTime.setStatus('mandatory')
sniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVersion.setStatus('mandatory')
sniHardware = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 10), )
if mibBuilder.loadTexts: sniHardware.setStatus('mandatory')
sniHardwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 10, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniHardwareIndex"))
if mibBuilder.loadTexts: sniHardwareEntry.setStatus('mandatory')
sniHardwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniHardwareIndex.setStatus('mandatory')
sniHardwareName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniHardwareName.setStatus('mandatory')
sniDriverDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDriverDirectory.setStatus('mandatory')
sniLogicalDrives = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12), )
if mibBuilder.loadTexts: sniLogicalDrives.setStatus('mandatory')
sniLogicalDrivesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniDriveletter"))
if mibBuilder.loadTexts: sniLogicalDrivesEntry.setStatus('mandatory')
sniDriveletter = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDriveletter.setStatus('mandatory')
sniLogicalDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-harddisk", 3), ("e-removable-disk", 4), ("e-remote", 5), ("e-cd-rom", 6), ("e-floppy-disk", 7), ("e-ramdrive", 8), ("e-disk-array", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDriveType.setStatus('mandatory')
sniVolumename = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVolumename.setStatus('mandatory')
sniLogicalDriveSizekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDriveSizekB.setStatus('mandatory')
sniLogicalDriveFreeSpacekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDriveFreeSpacekB.setStatus('mandatory')
sniLogicalDriveSectorSizeByte = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDriveSectorSizeByte.setStatus('mandatory')
sniClusterSizeByte = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniClusterSizeByte.setStatus('mandatory')
sniSectorsPerCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSectorsPerCluster.setStatus('mandatory')
sniClusters = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniClusters.setStatus('mandatory')
sniSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSectors.setStatus('mandatory')
sniNetworkpath = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNetworkpath.setStatus('mandatory')
sniLogicalDrivePartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionName.setStatus('mandatory')
sniLogicalDrivePartitionSizekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionSizekB.setStatus('mandatory')
sniLogicalDrivePartitionFreeSpacekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionFreeSpacekB.setStatus('mandatory')
sniLogicalDrivePartitionLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionLabel.setStatus('mandatory')
sniLogicalDrivePartitionFilesystem = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-fat", 3), ("e-hpfs", 4), ("e-ntfs", 5), ("e-ofs", 6), ("e-mfs", 7), ("e-hfs", 8), ("e-vxfs", 9), ("e-sfs", 10), ("e-s5", 11), ("e-s52k", 12), ("e-ufs", 13), ("e-ffs", 14), ("e-netware286", 15), ("e-netware386", 16), ("e-cdfs", 17), ("e-fat32", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionFilesystem.setStatus('mandatory')
sniLogicalDrivePartitionCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionCompressed.setStatus('mandatory')
sniLogicalDrivePartitionEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionEncrypted.setStatus('mandatory')
sniLogicalDrivePartitionActive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionActive.setStatus('mandatory')
sniLogicalDrivePartitionBootable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionBootable.setStatus('mandatory')
sniPhysicalDrives = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14), )
if mibBuilder.loadTexts: sniPhysicalDrives.setStatus('mandatory')
sniPhysicalDrivesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPhysicalDrive"))
if mibBuilder.loadTexts: sniPhysicalDrivesEntry.setStatus('mandatory')
sniPhysicalDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDrive.setStatus('mandatory')
sniPhysicalDriveName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveName.setStatus('mandatory')
sniPhysicalDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-harddisk", 3), ("e-floppydisk", 4), ("e-optical-rom", 5), ("e-optical-worm", 6), ("e-optical-rw", 7), ("e-cd", 8), ("e-flash-disk", 9), ("e-bernoulli-disk", 10), ("e-optical-fd", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveType.setStatus('mandatory')
sniInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-scsi", 3), ("e-esdi", 4), ("e-ide", 5), ("e-cmd", 6), ("e-ipi", 7), ("e-st506", 8), ("e-dssi", 9), ("e-parallel", 10), ("e-hippi", 11), ("e-qic2", 12), ("e-fd", 13), ("e-pcmcia", 14), ("e-eide", 15), ("e-ide-eide", 16), ("e-atapi", 17), ("e-usb", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInterface.setStatus('mandatory')
sniMediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMediaLoaded.setStatus('mandatory')
sniRemovableDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRemovableDrive.setStatus('mandatory')
sniRemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRemovableMedia.setStatus('mandatory')
sniSCSIID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSCSIID.setStatus('mandatory')
sniSCSILUN = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSCSILUN.setStatus('mandatory')
sniPhysicalDriveTotalSpacekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveTotalSpacekB.setStatus('mandatory')
sniTracks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTracks.setStatus('mandatory')
sniSectorsPerTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSectorsPerTrack.setStatus('mandatory')
sniHeads = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniHeads.setStatus('mandatory')
sniWritePreComp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWritePreComp.setStatus('mandatory')
sniLandingZone = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLandingZone.setStatus('mandatory')
sniPhysicalDriveSectorSizeByte = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveSectorSizeByte.setStatus('mandatory')
sniBadBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBadBlocks.setStatus('mandatory')
sniPhysicalDrivePartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDrivePartitions.setStatus('mandatory')
sniPhysicalDriveLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-internal", 3), ("e-external", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveLocation.setStatus('mandatory')
sniSMART = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-ok", 3), ("e-warning", 4), ("e-critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMART.setStatus('mandatory')
sniSMARTCrossreference = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTCrossreference.setStatus('mandatory')
sniPartitions = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16), )
if mibBuilder.loadTexts: sniPartitions.setStatus('mandatory')
sniPartitionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPhysicalDriveIndex"), (0, "DESKSNMP-MIB", "sniPartitionIndex"))
if mibBuilder.loadTexts: sniPartitionsEntry.setStatus('mandatory')
sniPhysicalDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveIndex.setStatus('mandatory')
sniPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionIndex.setStatus('mandatory')
sniPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionName.setStatus('mandatory')
sniPartitionSizekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionSizekB.setStatus('mandatory')
sniPartitionFreeSpacekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionFreeSpacekB.setStatus('mandatory')
sniLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLabel.setStatus('mandatory')
sniPartitionFilesystem = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-fat", 3), ("e-hpfs", 4), ("e-ntfs", 5), ("e-ofs", 6), ("e-mfs", 7), ("e-hfs", 8), ("e-vxfs", 9), ("e-sfs", 10), ("e-s5", 11), ("e-s52k", 12), ("e-ufs", 13), ("e-ffs", 14), ("e-netware286", 15), ("e-netware386", 16), ("e-cdfs", 17), ("e-fat32", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionFilesystem.setStatus('mandatory')
sniPartitionCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionCompressed.setStatus('mandatory')
sniPartitionEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionEncrypted.setStatus('mandatory')
sniPartitionActive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionActive.setStatus('mandatory')
sniPartitionBootable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionBootable.setStatus('mandatory')
sniMainboard = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18))
sniMainboardManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMainboardManufacturer.setStatus('mandatory')
sniMainboardName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMainboardName.setStatus('mandatory')
sniMainboardVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMainboardVersion.setStatus('mandatory')
sniProductID = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProductID.setStatus('mandatory')
sniProductType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProductType.setStatus('mandatory')
sniMaxMemoryMB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxMemoryMB.setStatus('mandatory')
sniUsedMemorySlots = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniUsedMemorySlots.setStatus('mandatory')
sniNumberMemorySlots = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberMemorySlots.setStatus('mandatory')
sniOnBoardMouse = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOnBoardMouse.setStatus('mandatory')
sniHarddiskAccelerator = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniHarddiskAccelerator.setStatus('mandatory')
sniMainboardGSNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMainboardGSNumber.setStatus('mandatory')
sniMainboardVariant = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMainboardVariant.setStatus('mandatory')
sniMainboardProcessors = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19), )
if mibBuilder.loadTexts: sniMainboardProcessors.setStatus('mandatory')
sniMainboardProcessorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniProcessorIndex"))
if mibBuilder.loadTexts: sniMainboardProcessorsEntry.setStatus('mandatory')
sniProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProcessorIndex.setStatus('mandatory')
sniProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-cpu", 3), ("e-co-processor", 4), ("e-sound-processor", 5), ("e-graphic-processor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProcessorType.setStatus('mandatory')
sniFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFamily.setStatus('mandatory')
sniProcessorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProcessorVersion.setStatus('mandatory')
sniCurrentProcSpeedMHz = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCurrentProcSpeedMHz.setStatus('mandatory')
sniMaxBoardSpeedMHz = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxBoardSpeedMHz.setStatus('mandatory')
sniProcessorSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProcessorSerialnumber.setStatus('mandatory')
sniMainboardCache = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21), )
if mibBuilder.loadTexts: sniMainboardCache.setStatus('mandatory')
sniMainboardCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniCacheIndex"))
if mibBuilder.loadTexts: sniMainboardCacheEntry.setStatus('mandatory')
sniCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheIndex.setStatus('mandatory')
sniCacheActive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheActive.setStatus('mandatory')
sniCacheSizekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheSizekB.setStatus('mandatory')
sniMaximumSizekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaximumSizekB.setStatus('mandatory')
sniLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLevel.setStatus('mandatory')
sniCacheBurstType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-non-burst", 1), ("e-burst", 2), ("e-burst-nonburst", 3), ("e-pipelinedburst", 4), ("e-nonburst-pipelinedburst", 5), ("e-burst-pipelinedburst", 6), ("e-burst-nonburst-pipelinedburst", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheBurstType.setStatus('mandatory')
sniCacheSynchron = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-yes", 1), ("e-no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheSynchron.setStatus('mandatory')
sniCacheSRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 128))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheSRAM.setStatus('mandatory')
sniBurstTypeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-non-burst", 1), ("e-burst", 2), ("e-burst-nonburst", 3), ("e-pipelinedburst", 4), ("e-nonburst-pipelinedburst", 5), ("e-burst-pipelinedburst", 6), ("e-burst-nonburst-pipelinedburst", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBurstTypeSupport.setStatus('mandatory')
sniSynchronSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-synchron", 1), ("e-asynchron", 2), ("e-synchron-asynchron", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSynchronSupport.setStatus('mandatory')
sniSRAMSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 128))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSRAMSupport.setStatus('mandatory')
sniWriteThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWriteThrough.setStatus('mandatory')
sniWriteBack = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWriteBack.setStatus('mandatory')
sniDataCache = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDataCache.setStatus('mandatory')
sniInstructionCache = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInstructionCache.setStatus('mandatory')
sniInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInternal.setStatus('mandatory')
sniInSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInSocket.setStatus('mandatory')
sniMainboardPorts = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23), )
if mibBuilder.loadTexts: sniMainboardPorts.setStatus('mandatory')
sniMainboardPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPortIndex"))
if mibBuilder.loadTexts: sniMainboardPortsEntry.setStatus('mandatory')
sniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPortIndex.setStatus('mandatory')
sniPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPortName.setStatus('mandatory')
sniPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 2147483647))).clone(namedValues=NamedValues(("e-unknown", 255), ("e-no-interface", 0), ("e-proprietary", 1), ("e-centronics", 2), ("e-mini-centronics", 3), ("e-db25-male", 4), ("e-db25-female", 5), ("e-db15-male", 6), ("e-db15-female", 7), ("e-db9-male", 8), ("e-db9-female", 9), ("e-rj11", 10), ("e-rj45", 11), ("e-mini-scsi", 12), ("e-mini-din", 13), ("e-micro-din", 14), ("e-ps2", 15), ("e-infra-red", 16), ("e-hp-hil", 17), ("e-access-bus", 18), ("e-ssa-scsi", 19), ("e-circ-din8-male", 20), ("e-circ-din8-female", 21), ("e-ide", 22), ("e-fd", 23), ("e-dil9", 24), ("e-dil25", 25), ("e-dil50", 26), ("e-dil68", 27), ("e-cd-rom-sound", 28), ("e-centronics14", 29), ("e-centronics26", 30), ("e-pc98", 31), ("e-pc98-hireso", 32), ("e-pch98", 33), ("e-pc98note", 34), ("e-pc98full", 35), ("e-usb", 36), ("e-mini-jack", 37), ("e-firewire", 38), ("e-other", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPortType.setStatus('mandatory')
sniIOBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIOBaseAddress.setStatus('mandatory')
sniPortIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPortIRQ.setStatus('mandatory')
sniPortDMA = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPortDMA.setStatus('mandatory')
sniMainboardSystemSlots = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25), )
if mibBuilder.loadTexts: sniMainboardSystemSlots.setStatus('mandatory')
sniMainboardSystemSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniSystemSlotIndex"))
if mibBuilder.loadTexts: sniMainboardSystemSlotsEntry.setStatus('mandatory')
sniSystemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSystemSlotIndex.setStatus('mandatory')
sniSystemSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSystemSlotName.setStatus('mandatory')
sniSystemSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-isa", 3), ("e-mca", 4), ("e-eisa", 5), ("e-pci", 6), ("e-pcmcia", 7), ("e-vlb", 8), ("e-proprietary", 9), ("e-processor-card", 10), ("e-memory-card", 11), ("e-riser-card", 12), ("e-nubus", 13), ("e-pci66", 14), ("e-pc98c20", 15), ("e-pc98c24", 16), ("e-pc98e", 17), ("e-pc98-localbus", 18), ("e-pc98-card", 19), ("e-agp", 20), ("e-agp2x", 21), ("e-agp4x", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSystemSlotType.setStatus('mandatory')
sniNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumber.setStatus('mandatory')
sniInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInUse.setStatus('mandatory')
sniBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-8", 3), ("e-16", 4), ("e-32", 5), ("e-64", 6), ("e-128", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBusWidth.setStatus('mandatory')
sniSlotLength = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-full", 3), ("e-half", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSlotLength.setStatus('mandatory')
sniSharedSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSharedSlot.setStatus('mandatory')
sniMainboardOnboardDevices = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 27), )
if mibBuilder.loadTexts: sniMainboardOnboardDevices.setStatus('mandatory')
sniMainboardOnboardDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 27, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniOnboardDeviceIndex"))
if mibBuilder.loadTexts: sniMainboardOnboardDevicesEntry.setStatus('mandatory')
sniOnboardDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOnboardDeviceIndex.setStatus('mandatory')
sniOnboardDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 27, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOnboardDeviceName.setStatus('mandatory')
sniOnboardDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-graphic-card", 3), ("e-scsi", 4), ("e-ethernet-card", 5), ("e-tokenring-card", 6), ("e-sound-card", 7), ("e-mouse", 8), ("e-hd-accelerator", 9), ("e-sni-chip", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOnboardDeviceType.setStatus('mandatory')
sniOnboardDeviceActive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOnboardDeviceActive.setStatus('mandatory')
sniMainboardMemory = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29), )
if mibBuilder.loadTexts: sniMainboardMemory.setStatus('mandatory')
sniMainboardMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniMemoryControllerIndex"))
if mibBuilder.loadTexts: sniMainboardMemoryEntry.setStatus('mandatory')
sniMemoryControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryControllerIndex.setStatus('mandatory')
sniNumberOfMemoryModules = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberOfMemoryModules.setStatus('mandatory')
sniMaxNumberofModules = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxNumberofModules.setStatus('mandatory')
sniMaximumModuleSizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaximumModuleSizeMB.setStatus('mandatory')
sniSupportedSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4, 8, 16))).clone(namedValues=NamedValues(("e-other", 0), ("e-unknown", 2), ("e-70-ns", 4), ("e-60-ns", 8), ("e-50-ns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSupportedSpeeds.setStatus('mandatory')
sniErrorCorrectionECC = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 8))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-no", 3), ("e-single-bit", 4), ("e-double-bit", 5), ("e-scrubbing", 6), ("e-other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorCorrectionECC.setStatus('mandatory')
sniStandardSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniStandardSupport.setStatus('mandatory')
sniFastPageModeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 8))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFastPageModeSupport.setStatus('mandatory')
sniEDOSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 16))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEDOSupport.setStatus('mandatory')
sniParitySupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 32))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniParitySupport.setStatus('mandatory')
sniECCSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 64))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniECCSupport.setStatus('mandatory')
sniSIMMSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 128))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSIMMSupport.setStatus('mandatory')
sniDIMMSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 256))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDIMMSupport.setStatus('mandatory')
sniRIMMSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 512))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 512)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRIMMSupport.setStatus('mandatory')
sniMaximumNumberOfLowLevelDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaximumNumberOfLowLevelDevices.setStatus('mandatory')
sniTotalNumberOfLowLevelDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTotalNumberOfLowLevelDevices.setStatus('mandatory')
sniMainboardMemoryModules = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31), )
if mibBuilder.loadTexts: sniMainboardMemoryModules.setStatus('mandatory')
sniMainboardMemoryModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniMemoryController"), (0, "DESKSNMP-MIB", "sniMemoryModule"))
if mibBuilder.loadTexts: sniMainboardMemoryModulesEntry.setStatus('mandatory')
sniMemoryController = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryController.setStatus('mandatory')
sniMemoryModule = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryModule.setStatus('mandatory')
sniMemoryModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryModuleName.setStatus('mandatory')
sniModuleSizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModuleSizeMB.setStatus('mandatory')
sniSpeedns = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSpeedns.setStatus('mandatory')
sniStandardMemoryModule = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniStandardMemoryModule.setStatus('mandatory')
sniEDO = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 16))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEDO.setStatus('mandatory')
sniSIMM = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 128))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSIMM.setStatus('mandatory')
sniDIMM = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 256))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDIMM.setStatus('mandatory')
sniFastPageMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 8))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFastPageMode.setStatus('mandatory')
sniParity = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 32))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniParity.setStatus('mandatory')
sniECC = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 64))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniECC.setStatus('mandatory')
sniMemoryBank = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryBank.setStatus('mandatory')
sniAttachedMemoryBank = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAttachedMemoryBank.setStatus('mandatory')
sniRIMM = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 512))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 512)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRIMM.setStatus('mandatory')
sniStateOfSupplySystemData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 33))
sniSystemName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 33, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSystemName.setStatus('mandatory')
sniIdentNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 33, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIdentNumber.setStatus('mandatory')
sniSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 33, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSystemSerialNumber.setStatus('mandatory')
sniProductionMonth = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 33, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProductionMonth.setStatus('mandatory')
sniStateOfSupplyMainboard = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 34))
sniProductName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 34, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProductName.setStatus('mandatory')
sniGSNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 34, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGSNumber.setStatus('mandatory')
sniMainboardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 34, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMainboardSerialNumber.setStatus('mandatory')
sniBIOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 34, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBIOSVersion.setStatus('mandatory')
sniStateOfSupplyInternalDevices = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35), )
if mibBuilder.loadTexts: sniStateOfSupplyInternalDevices.setStatus('mandatory')
sniStateOfSupplyInternalDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniDeviceIndex"))
if mibBuilder.loadTexts: sniStateOfSupplyInternalDevicesEntry.setStatus('mandatory')
sniDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceIndex.setStatus('mandatory')
sniDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceName.setStatus('mandatory')
sniDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-power-supply", 3), ("e-harddisk", 4), ("e-floppydisk", 5), ("e-cd-rom", 6), ("e-magneto-optical-disk", 7), ("e-streamer", 8), ("e-floptical-disk", 9), ("e-chipcard-reader", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceType.setStatus('mandatory')
sniDeviceSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceSerialnumber.setStatus('mandatory')
sniNumberofDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberofDevices.setStatus('mandatory')
sniStateOfSupplyAddOnModules = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37), )
if mibBuilder.loadTexts: sniStateOfSupplyAddOnModules.setStatus('mandatory')
sniStateOfSupplyAddOnModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniModuleIndex"))
if mibBuilder.loadTexts: sniStateOfSupplyAddOnModulesEntry.setStatus('mandatory')
sniModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModuleIndex.setStatus('mandatory')
sniModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModuleName.setStatus('mandatory')
sniModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-cache", 3), ("e-dram", 4), ("e-video-memory", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModuleType.setStatus('mandatory')
sniModuleSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModuleSerialnumber.setStatus('mandatory')
sniNumberofModules = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberofModules.setStatus('mandatory')
sniStateOfSupplyAddOnBoards = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39), )
if mibBuilder.loadTexts: sniStateOfSupplyAddOnBoards.setStatus('mandatory')
sniStateOfSupplyAddOnBoardsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniBoardIndex"))
if mibBuilder.loadTexts: sniStateOfSupplyAddOnBoardsEntry.setStatus('mandatory')
sniBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBoardIndex.setStatus('mandatory')
sniBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBoardName.setStatus('mandatory')
sniBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-video", 3), ("e-net", 4), ("e-scsi", 5), ("e-audio", 6), ("e-fax", 7), ("e-modem", 8), ("e-tv", 9), ("e-mpeg", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBoardType.setStatus('mandatory')
sniBoardSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBoardSerialnumber.setStatus('mandatory')
sniNumberofBoards = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberofBoards.setStatus('mandatory')
sniVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVendorID.setStatus('mandatory')
sniBoardIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBoardIRQ.setStatus('mandatory')
sniBoardDMA = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBoardDMA.setStatus('mandatory')
sniIOAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIOAddress.setStatus('mandatory')
sniMemoryMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryMapping.setStatus('mandatory')
sniStateOfSupplySCSIDevices = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41), )
if mibBuilder.loadTexts: sniStateOfSupplySCSIDevices.setStatus('mandatory')
sniStateOfSupplySCSIDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniSCSIDeviceIndex"))
if mibBuilder.loadTexts: sniStateOfSupplySCSIDevicesEntry.setStatus('mandatory')
sniSCSIDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSCSIDeviceIndex.setStatus('mandatory')
sniSCSIDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSCSIDeviceName.setStatus('mandatory')
sniSCSIDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-tape", 3), ("e-printer", 4), ("e-processor", 5), ("e-worm", 6), ("e-cdrom", 7), ("e-scanner", 8), ("e-optical-disk", 9), ("e-jukebox", 10), ("e-communication", 11), ("e-ascit8-defined", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSCSIDeviceType.setStatus('mandatory')
sniTargetID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTargetID.setStatus('mandatory')
sniHostAdapterID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniHostAdapterID.setStatus('mandatory')
sniCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCapacity.setStatus('mandatory')
sniSCSIDeviceSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSCSIDeviceSerialnumber.setStatus('mandatory')
sniInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInfo.setStatus('mandatory')
sniNumberOfSCSIDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberOfSCSIDevices.setStatus('mandatory')
sniAntiVirus = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43), )
if mibBuilder.loadTexts: sniAntiVirus.setStatus('mandatory')
sniAntiVirusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniAntiVirusProgramIndex"))
if mibBuilder.loadTexts: sniAntiVirusEntry.setStatus('mandatory')
sniAntiVirusProgramIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAntiVirusProgramIndex.setStatus('mandatory')
sniAntiVirusLogfile = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAntiVirusLogfile.setStatus('mandatory')
sniScannerName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniScannerName.setStatus('mandatory')
sniErrorKeyword1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword1.setStatus('mandatory')
sniErrorKeyword2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword2.setStatus('mandatory')
sniErrorKeyword3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword3.setStatus('mandatory')
sniErrorKeyword4 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword4.setStatus('mandatory')
sniErrorKeyword5 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword5.setStatus('mandatory')
sniErrorKeyword6 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword6.setStatus('mandatory')
sniErrorKeyword7 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword7.setStatus('mandatory')
sniErrorKeyword8 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword8.setStatus('mandatory')
sniErrorKeyword9 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword9.setStatus('mandatory')
sniErrorKeyword10 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword10.setStatus('mandatory')
sniWarningKeyword1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword1.setStatus('mandatory')
sniWarningKeyword2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword2.setStatus('mandatory')
sniWarningKeyword3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword3.setStatus('mandatory')
sniWarningKeyword4 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword4.setStatus('mandatory')
sniWarningKeyword5 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword5.setStatus('mandatory')
sniWarningKeyword6 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword6.setStatus('mandatory')
sniWarningKeyword7 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword7.setStatus('mandatory')
sniWarningKeyword8 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword8.setStatus('mandatory')
sniWarningKeyword9 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword9.setStatus('mandatory')
sniWarningKeyword10 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword10.setStatus('mandatory')
sniDistinguishWarningError = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDistinguishWarningError.setStatus('mandatory')
sniMouse = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45))
sniMouseManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMouseManufacturer.setStatus('mandatory')
sniMouseDriverName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMouseDriverName.setStatus('mandatory')
sniDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDriverVersion.setStatus('mandatory')
sniMouseInterface = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-serial", 3), ("e-ps-2", 4), ("e-infra-red", 5), ("e-bus", 6), ("e-usb", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMouseInterface.setStatus('mandatory')
sniMouseIRQ = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMouseIRQ.setStatus('mandatory')
sniMousePort = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMousePort.setStatus('mandatory')
sniSupportedButtons = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSupportedButtons.setStatus('mandatory')
sniButtonsExchanged = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniButtonsExchanged.setStatus('mandatory')
sniSpeedPercentage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSpeedPercentage.setStatus('mandatory')
sniShowMouseTrails = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniShowMouseTrails.setStatus('mandatory')
sniKeyboard = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46))
sniKeyboardType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniKeyboardType.setStatus('mandatory')
sniLayout = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLayout.setStatus('mandatory')
sniInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-mini-din", 3), ("e-micro-din", 4), ("e-ps-2", 5), ("e-infra-red", 6), ("e-hp-hil", 7), ("e-db-9", 8), ("e-access-bus", 9), ("e-usb", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInterfaceType.setStatus('mandatory')
sniCodepage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCodepage.setStatus('mandatory')
sniWindowsDriver = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWindowsDriver.setStatus('mandatory')
sniDOSDriver = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDOSDriver.setStatus('mandatory')
sniDeskViewVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47))
sniSysInf32Version = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSysInf32Version.setStatus('mandatory')
sniSysInf16Version = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSysInf16Version.setStatus('mandatory')
sniDeskInfoAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeskInfoAgentVersion.setStatus('mandatory')
sniDINetVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDINetVersion.setStatus('mandatory')
sniDNAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNAgentVersion.setStatus('mandatory')
sniDNBrowserVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNBrowserVersion.setStatus('mandatory')
sniSMARTValues = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48), )
if mibBuilder.loadTexts: sniSMARTValues.setStatus('mandatory')
sniSMARTValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniSMARTIndex"))
if mibBuilder.loadTexts: sniSMARTValuesEntry.setStatus('mandatory')
sniSMARTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTIndex.setStatus('mandatory')
sniPhysicalDriveCrossreference = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveCrossreference.setStatus('mandatory')
sniSMARTID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTID.setStatus('mandatory')
sniSMARTName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTName.setStatus('mandatory')
sniSMARTErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTErrorThreshold.setStatus('mandatory')
sniSMARTWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTWarningThreshold.setStatus('mandatory')
sniCurrentSMARTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCurrentSMARTValue.setStatus('mandatory')
sniSMARTState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-ok", 3), ("e-warning", 4), ("e-critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTState.setStatus('mandatory')
sniHardwarePowersupply = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50), )
if mibBuilder.loadTexts: sniHardwarePowersupply.setStatus('mandatory')
sniHardwarePowersupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPowersupplyIndex"))
if mibBuilder.loadTexts: sniHardwarePowersupplyEntry.setStatus('mandatory')
sniPowersupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplyIndex.setStatus('mandatory')
sniPowersupplySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplySerialNumber.setStatus('mandatory')
sniPowersupplyGSLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplyGSLevel.setStatus('mandatory')
sniPowersupplyRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplyRevision.setStatus('mandatory')
sniPowersupplyManufacturingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplyManufacturingDate.setStatus('mandatory')
sniOutputPowerW = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOutputPowerW.setStatus('mandatory')
sniMonitorOutletSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMonitorOutletSupported.setStatus('mandatory')
sniMonitorOutlet = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-off", 3), ("e-on", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMonitorOutlet.setStatus('mandatory')
sniVoltage5V = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVoltage5V.setStatus('mandatory')
sniVoltage12V = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVoltage12V.setStatus('mandatory')
sniMin5VCurrentA = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMin5VCurrentA.setStatus('mandatory')
sniOutputCurrentmA = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOutputCurrentmA.setStatus('mandatory')
sniPulsPerRevolution = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPulsPerRevolution.setStatus('mandatory')
sniPowersFanControlSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersFanControlSupp.setStatus('mandatory')
sniPowersupplyFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-controlled", 3), ("e-full-speed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplyFanSpeed.setStatus('mandatory')
sniPowersupplyFanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-not-controlled", 3), ("e-on-off", 4), ("e-full-controlled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplyFanControl.setStatus('mandatory')
sniHardwareDriveBays = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 52), )
if mibBuilder.loadTexts: sniHardwareDriveBays.setStatus('mandatory')
sniHardwareDriveBaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 52, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniDriveBayIndex"))
if mibBuilder.loadTexts: sniHardwareDriveBaysEntry.setStatus('mandatory')
sniDriveBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 52, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDriveBayIndex.setStatus('mandatory')
sniDriveBayType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 52, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-3-5-inch", 3), ("e-5-25-inch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDriveBayType.setStatus('mandatory')
sniNumberOfDriveBays = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 52, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberOfDriveBays.setStatus('mandatory')
sniAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 52, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAccessible.setStatus('mandatory')
sniMainboardResourceUsage = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 54), )
if mibBuilder.loadTexts: sniMainboardResourceUsage.setStatus('mandatory')
sniMainboardResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 54, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniResourceUsageIndex"))
if mibBuilder.loadTexts: sniMainboardResourceUsageEntry.setStatus('mandatory')
sniResourceUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 54, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniResourceUsageIndex.setStatus('mandatory')
sniBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 54, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-pci", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBusType.setStatus('mandatory')
sniBusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 54, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBusLoad.setStatus('mandatory')
sniHardwarePCIBaseAddress = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56), )
if mibBuilder.loadTexts: sniHardwarePCIBaseAddress.setStatus('mandatory')
sniHardwarePCIBaseAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPCIBaseAddressIndex"))
if mibBuilder.loadTexts: sniHardwarePCIBaseAddressEntry.setStatus('mandatory')
sniPCIBaseAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIBaseAddressIndex.setStatus('mandatory')
sniPCIIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIIndex1.setStatus('mandatory')
sniMemoryIOSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-memory-space", 3), ("e-io-space", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryIOSpace.setStatus('mandatory')
sniPrefetchable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPrefetchable.setStatus('mandatory')
sniPCIMemoryMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-in-32bit-space", 3), ("e-below-1-mbyte", 4), ("e-in-64bit-space", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIMemoryMapping.setStatus('mandatory')
sniBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBaseAddress.setStatus('mandatory')
sniHardwarePCICharacteristics = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58), )
if mibBuilder.loadTexts: sniHardwarePCICharacteristics.setStatus('mandatory')
sniHardwarePCICharacteristicsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPCICharacteristicsIndex"))
if mibBuilder.loadTexts: sniHardwarePCICharacteristicsEntry.setStatus('mandatory')
sniPCICharacteristicsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCICharacteristicsIndex.setStatus('mandatory')
sniPCIIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIIndex2.setStatus('mandatory')
sniCharacteristicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCharacteristicNumber.setStatus('mandatory')
sniCharacteristicInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCharacteristicInfo.setStatus('mandatory')
sniModeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModeNumber.setStatus('mandatory')
sniModeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModeInfo.setStatus('mandatory')
sniHardwarePCIInfo = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60), )
if mibBuilder.loadTexts: sniHardwarePCIInfo.setStatus('mandatory')
sniHardwarePCIInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPCIInfoIndex"))
if mibBuilder.loadTexts: sniHardwarePCIInfoEntry.setStatus('mandatory')
sniPCIInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIInfoIndex.setStatus('mandatory')
sniPCIIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIIndex3.setStatus('mandatory')
sniDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceID.setStatus('mandatory')
sniPCIDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIDeviceType.setStatus('mandatory')
sniPCIDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIDeviceName.setStatus('mandatory')
sniRevisionID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRevisionID.setStatus('mandatory')
sniPCIBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIBusNumber.setStatus('mandatory')
sniPCISlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCISlotNumber.setStatus('mandatory')
sniPCIVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIVendorID.setStatus('mandatory')
sniVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVendorName.setStatus('mandatory')
sniBaseClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBaseClassID.setStatus('mandatory')
sniSubClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubClassID.setStatus('mandatory')
sniProgrammingInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProgrammingInterfaceID.setStatus('mandatory')
sniBaseClassDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBaseClassDescription.setStatus('mandatory')
sniSubClassDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubClassDescription.setStatus('mandatory')
sniSingleMultiFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-single", 3), ("e-multi", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSingleMultiFunction.setStatus('mandatory')
sniDeviceCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceCommand.setStatus('mandatory')
sniDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceStatus.setStatus('mandatory')
sniCacheLineSize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheLineSize.setStatus('mandatory')
sniLatencyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLatencyTimer.setStatus('mandatory')
sniCompletionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCompletionCode.setStatus('mandatory')
sniBuildinSelfTestSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBuildinSelfTestSupport.setStatus('mandatory')
sniInterruptLine = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInterruptLine.setStatus('mandatory')
sniInterruptPin = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-none", 3), ("e-inta", 4), ("e-intb", 5), ("e-intc", 6), ("e-intd", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInterruptPin.setStatus('mandatory')
sniMinimumGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMinimumGrant.setStatus('mandatory')
sniMaximumLatencyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaximumLatencyTime.setStatus('mandatory')
sniSubVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubVendorID.setStatus('mandatory')
sniSubSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubSystemID.setStatus('mandatory')
sniCIS = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCIS.setStatus('mandatory')
sniExpROMBaseAddressReg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniExpROMBaseAddressReg.setStatus('mandatory')
sniExpansionROMBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniExpansionROMBaseAddress.setStatus('mandatory')
sniDecodeenabled = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDecodeenabled.setStatus('mandatory')
sniFunctionnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFunctionnumber.setStatus('mandatory')
sniDevicenumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDevicenumber.setStatus('mandatory')
sniMainboardMemoryModulesEx = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62), )
if mibBuilder.loadTexts: sniMainboardMemoryModulesEx.setStatus('mandatory')
sniMainboardMemoryModulesExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniMemoryController2"), (0, "DESKSNMP-MIB", "sniMemoryModule2"))
if mibBuilder.loadTexts: sniMainboardMemoryModulesExEntry.setStatus('mandatory')
sniMemoryController2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryController2.setStatus('mandatory')
sniMemoryModule2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryModule2.setStatus('mandatory')
sniMemoryModuleSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryModuleSerialnumber.setStatus('mandatory')
sniMemoryModuleManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryModuleManufacturer.setStatus('mandatory')
sniLocationMemoryBank = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLocationMemoryBank.setStatus('mandatory')
sniNumberOfLowLevelDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberOfLowLevelDevices.setStatus('mandatory')
sniSpeedMHz = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSpeedMHz.setStatus('mandatory')
sniMemoryTypeEx = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("e-other", 1), ("e-unknown", 2), ("e-dram", 3), ("e-edram", 4), ("e-vram", 5), ("e-sram", 6), ("e-ram", 7), ("e-rom", 8), ("e-flash", 9), ("e-eeprom", 10), ("e-feprom", 11), ("e-eprom", 12), ("e-cdram", 13), ("e-3dram", 14), ("e-sdram", 15), ("e-sgram", 16), ("e-rdram", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryTypeEx.setStatus('mandatory')
sniMemorymoduleFormfactorandType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemorymoduleFormfactorandType.setStatus('mandatory')
sniUSER = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64))
sniUsername = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniUsername.setStatus('mandatory')
sniPhonenumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhonenumber.setStatus('mandatory')
sniPlace = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPlace.setStatus('mandatory')
sniDepartment = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDepartment.setStatus('mandatory')
sniJobTitle = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniJobTitle.setStatus('mandatory')
sniContact = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniContact.setStatus('mandatory')
sniAdditionalUserInformation = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAdditionalUserInformation.setStatus('mandatory')
sniServicePartner = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniServicePartner.setStatus('mandatory')
sniServiceContact = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniServiceContact.setStatus('mandatory')
sniEndOfContract = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEndOfContract.setStatus('mandatory')
sniAdditionalServiceInformation = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAdditionalServiceInformation.setStatus('mandatory')
sniGeneralInformation = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGeneralInformation.setStatus('mandatory')
sniNetwork = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65), )
if mibBuilder.loadTexts: sniNetwork.setStatus('mandatory')
sniNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniNetworkAdapterIndex"))
if mibBuilder.loadTexts: sniNetworkEntry.setStatus('mandatory')
sniNetworkAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNetworkAdapterIndex.setStatus('mandatory')
sniNetworkAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNetworkAdapter.setStatus('mandatory')
sniMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMACAddress.setStatus('mandatory')
sniComputerName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniComputerName.setStatus('mandatory')
sniDHCPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDHCPServer.setStatus('mandatory')
sniDNSHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSHostname.setStatus('mandatory')
sniDNSDomainname = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSDomainname.setStatus('mandatory')
sniDNSServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSServer1.setStatus('mandatory')
sniDNSServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSServer2.setStatus('mandatory')
sniDNSServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSServer3.setStatus('mandatory')
sniDNSServer4 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSServer4.setStatus('mandatory')
sniDNSServer5 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSServer5.setStatus('mandatory')
sniIPAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIPAddress1.setStatus('mandatory')
sniIPAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIPAddress2.setStatus('mandatory')
sniIPAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIPAddress3.setStatus('mandatory')
sniIPAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIPAddress4.setStatus('mandatory')
sniIPAddress5 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIPAddress5.setStatus('mandatory')
sniSubnetMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubnetMask1.setStatus('mandatory')
sniSubnetMask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubnetMask2.setStatus('mandatory')
sniSubnetMask3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubnetMask3.setStatus('mandatory')
sniSubnetMask4 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubnetMask4.setStatus('mandatory')
sniSubnetMask5 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubnetMask5.setStatus('mandatory')
sniGateway1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGateway1.setStatus('mandatory')
sniGateway2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGateway2.setStatus('mandatory')
sniGateway3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGateway3.setStatus('mandatory')
sniGateway4 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGateway4.setStatus('mandatory')
sniGateway5 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGateway5.setStatus('mandatory')
mibBuilder.exportSymbols("DESKSNMP-MIB", sniInfo=sniInfo, sniMainboardSystemSlotsEntry=sniMainboardSystemSlotsEntry, sniPCICharacteristicsIndex=sniPCICharacteristicsIndex, sniProductionMonth=sniProductionMonth, sniDPMSSupport=sniDPMSSupport, sniPCIDeviceName=sniPCIDeviceName, sniMainboardName=sniMainboardName, sniIPAddress2=sniIPAddress2, sniMainboardPorts=sniMainboardPorts, sniMainboardMemory=sniMainboardMemory, sniClusters=sniClusters, sniShadowing=sniShadowing, sniHardwarePowersupplyEntry=sniHardwarePowersupplyEntry, sniSCSILUN=sniSCSILUN, sniFastPageModeSupport=sniFastPageModeSupport, sniSwapFileSizekB=sniSwapFileSizekB, sniXMSDriverName=sniXMSDriverName, sniNumberOfSCSIDevices=sniNumberOfSCSIDevices, sniOnboardDeviceType=sniOnboardDeviceType, sniInUse=sniInUse, sniPartitionIndex=sniPartitionIndex, sniBIOSRomSocketed=sniBIOSRomSocketed, sniMemoryModuleName=sniMemoryModuleName, sniSizeInch=sniSizeInch, sniDeviceID=sniDeviceID, sniOSInstallationDirectory=sniOSInstallationDirectory, sniSubClassDescription=sniSubClassDescription, sniXMSDriverVersion=sniXMSDriverVersion, sniMainboardSystemSlots=sniMainboardSystemSlots, sniMainboard=sniMainboard, sniOnboardDeviceActive=sniOnboardDeviceActive, sniHousingGeometry=sniHousingGeometry, sniOSVersion=sniOSVersion, sniFreeUserResourcesPercentage=sniFreeUserResourcesPercentage, sniErrorKeyword4=sniErrorKeyword4, sniInt17PrinterServices=sniInt17PrinterServices, sniAPMSpecificVersion=sniAPMSpecificVersion, sniShowMouseTrails=sniShowMouseTrails, sniMonitor=sniMonitor, sniMainboardMemoryModulesEntry=sniMainboardMemoryModulesEntry, sniGraphic=sniGraphic, sniGraphicCardManufacturer=sniGraphicCardManufacturer, sniPartitionCompressed=sniPartitionCompressed, sniErrorKeyword7=sniErrorKeyword7, sniMouseIRQ=sniMouseIRQ, sniPCIBusNumber=sniPCIBusNumber, sniWarningKeyword5=sniWarningKeyword5, sniMemoryController=sniMemoryController, sniGeneralInformation=sniGeneralInformation, sniAdaptions=sniAdaptions, sniGraphicCardDate=sniGraphicCardDate, sniMinRefreshrateHz=sniMinRefreshrateHz, sniInterruptPin=sniInterruptPin, sniPhysicalDrives=sniPhysicalDrives, sniVendorName=sniVendorName, sniMaximumSizekB=sniMaximumSizekB, sniMainboardVariant=sniMainboardVariant, sniPlugandPlayPnP=sniPlugandPlayPnP, sniInternal=sniInternal, sniHardwareEntry=sniHardwareEntry, sniBaseClassDescription=sniBaseClassDescription, sniCIS=sniCIS, sniStateOfSupplySCSIDevices=sniStateOfSupplySCSIDevices, sniSpeedMHz=sniSpeedMHz, sniCacheSizekB=sniCacheSizekB, sniGateway5=sniGateway5, sniHeads=sniHeads, sniNEC9800FloppySupport=sniNEC9800FloppySupport, sniMinimumGrant=sniMinimumGrant, sniOSVersionSecondary=sniOSVersionSecondary, sniHarddiskAccelerator=sniHarddiskAccelerator, sniPCIBaseAddressIndex=sniPCIBaseAddressIndex, sniMemoryBank=sniMemoryBank, sniPartitionBootable=sniPartitionBootable, sniECC=sniECC, sniPhysicalMemoryMB=sniPhysicalMemoryMB, sniDeviceStatus=sniDeviceStatus, sniWarningKeyword8=sniWarningKeyword8, sniVirtualMemoryType=sniVirtualMemoryType, sniCurrentSMARTValue=sniCurrentSMARTValue, sniCodepage=sniCodepage, sniStatus=sniStatus, sniLogicalDriveFreeSpacekB=sniLogicalDriveFreeSpacekB, sniWarningKeyword10=sniWarningKeyword10, sniISABus=sniISABus, sniDNSServer1=sniDNSServer1, sniExtensions=sniExtensions, sniRIMM=sniRIMM, sniResourceUsageIndex=sniResourceUsageIndex, sniSoftwareVersion=sniSoftwareVersion, sniPartitionSizekB=sniPartitionSizekB, sniMouseDriverName=sniMouseDriverName, sniStartaddress=sniStartaddress, sniProcessorType=sniProcessorType, sniDriveBayType=sniDriveBayType, sniEndaddress=sniEndaddress, sniMinhorizontalFrequency=sniMinhorizontalFrequency, sniOutputPowerW=sniOutputPowerW, sniKeyboard=sniKeyboard, sniFreePhysicalMemorykB=sniFreePhysicalMemorykB, sniMaximumRefreshrate=sniMaximumRefreshrate, snivertResolutionPixel=snivertResolutionPixel, sniVoltage12V=sniVoltage12V, sniSMARTErrorThreshold=sniSMARTErrorThreshold, sniMaximumNumberOfLowLevelDevices=sniMaximumNumberOfLowLevelDevices, sniSpeedPercentage=sniSpeedPercentage, sniDesktopMgmt=sniDesktopMgmt, sniProductType=sniProductType, sniIPAddress5=sniIPAddress5, sniModuleSizeMB=sniModuleSizeMB, sniAntiVirusLogfile=sniAntiVirusLogfile, sniServiceContact=sniServiceContact, sniGSNumber=sniGSNumber, sniStateOfSupplyInternalDevices=sniStateOfSupplyInternalDevices, sniKeyboardType=sniKeyboardType, sniPhysicalDrive=sniPhysicalDrive, sniPowersupplyFanControl=sniPowersupplyFanControl, sniMainboardCacheEntry=sniMainboardCacheEntry, sniMainboardMemoryModulesExEntry=sniMainboardMemoryModulesExEntry, sniSMARTState=sniSMARTState, sniMemoryControllerIndex=sniMemoryControllerIndex, sniBiosShadowing=sniBiosShadowing, sniMaxhorizResolution=sniMaxhorizResolution, sniNumberofBoards=sniNumberofBoards, sniBoardIRQ=sniBoardIRQ, sniPartitions=sniPartitions, sniWarningKeyword1=sniWarningKeyword1, sniPC98=sniPC98, sniECCSupport=sniECCSupport, sniMaximumLatencyTime=sniMaximumLatencyTime, sniEDOSupport=sniEDOSupport, sniHardwareIndex=sniHardwareIndex, sniSubnetMask2=sniSubnetMask2, sniIPAddress4=sniIPAddress4, sniColorResolution=sniColorResolution, sniGateway2=sniGateway2, sniInt9Keyboard8042Supp=sniInt9Keyboard8042Supp, sniSoftwarePowerOff=sniSoftwarePowerOff, sniFunctionnumber=sniFunctionnumber, sniPreInstallationVersion=sniPreInstallationVersion, sniErrorKeyword10=sniErrorKeyword10, sniSCSIDeviceIndex=sniSCSIDeviceIndex, sniMaximumModuleSizeMB=sniMaximumModuleSizeMB, sniHardwarePCICharacteristics=sniHardwarePCICharacteristics, sniPhysicalDriveLocation=sniPhysicalDriveLocation, sniPhysicalDrivesEntry=sniPhysicalDrivesEntry, sniEISABus=sniEISABus, sniLevel=sniLevel, sniSwapFileName=sniSwapFileName, sniAdditionalUserInformation=sniAdditionalUserInformation, sni360kBFloppySupport=sni360kBFloppySupport, sniMemoryType=sniMemoryType, sniErrorKeyword8=sniErrorKeyword8, sniHardwarePowersupply=sniHardwarePowersupply, sniMACAddress=sniMACAddress, sniInstructionCache=sniInstructionCache, sniSystemSlotName=sniSystemSlotName, snihorResolutionPixel=snihorResolutionPixel, sniSIMM=sniSIMM, sniWeekofManufacture=sniWeekofManufacture, sniOSInstallDirSec=sniOSInstallDirSec, sniMainboardResourceUsageEntry=sniMainboardResourceUsageEntry, sniDeviceSerialnumber=sniDeviceSerialnumber, sniSysInf32Version=sniSysInf32Version, sni2MB88FloppySupport=sni2MB88FloppySupport, sniMaxverticalResolution=sniMaxverticalResolution, sniDIMM=sniDIMM, sniMonitorOutlet=sniMonitorOutlet, sniWindowsDriver=sniWindowsDriver, sniSubnetMask5=sniSubnetMask5, sniDeskViewVersion=sniDeskViewVersion, sniVLBus=sniVLBus, sniPowersFanControlSupp=sniPowersFanControlSupp, sniHardwarePCICharacteristicsEntry=sniHardwarePCICharacteristicsEntry, sniPhysicalDriveType=sniPhysicalDriveType, sniHardware=sniHardware, sniSoftwarePowerOn=sniSoftwarePowerOn, sniSoftware=sniSoftware, sniWarningKeyword7=sniWarningKeyword7, sniLogicalDriveSectorSizeByte=sniLogicalDriveSectorSizeByte, sniFlashBIOS=sniFlashBIOS, sniInt5PrintScreenService=sniInt5PrintScreenService, sni720kBFloppySupport=sni720kBFloppySupport, sniSMART=sniSMART, sniDeskInfoAgentVersion=sniDeskInfoAgentVersion, sniSubnetMask3=sniSubnetMask3, sniBiosDate=sniBiosDate, sniDNSDomainname=sniDNSDomainname, sniMainboardResourceUsage=sniMainboardResourceUsage, sniMainboardMemoryModulesEx=sniMainboardMemoryModulesEx, sniDNSServer5=sniDNSServer5, sniPCIIndex3=sniPCIIndex3, sniCacheSynchron=sniCacheSynchron, sniPreInstallationLanguage=sniPreInstallationLanguage, sniErrorKeyword6=sniErrorKeyword6, sniMouse=sniMouse, sniMemorySizeKB=sniMemorySizeKB, sniMCABus=sniMCABus, sniLogicalDrivePartitionSizekB=sniLogicalDrivePartitionSizekB, sniUSB=sniUSB, sniPCIBus=sniPCIBus, sniUpgradable=sniUpgradable, sniAdvPowerManagemAPM=sniAdvPowerManagemAPM, sniStateOfSupplySCSIDevicesEntry=sniStateOfSupplySCSIDevicesEntry, sniPCIIndex1=sniPCIIndex1, sniIPAddress3=sniIPAddress3, sniBiosVersion=sniBiosVersion, sniGateway1=sniGateway1, sniLogicalDrivePartitionCompressed=sniLogicalDrivePartitionCompressed, sniMaxBoardSpeedMHz=sniMaxBoardSpeedMHz, sniPowersupplyGSLevel=sniPowersupplyGSLevel, sniNetworkAdapterIndex=sniNetworkAdapterIndex, sniProductMibs=sniProductMibs, sniPulsPerRevolution=sniPulsPerRevolution, sniStateOfSupplyInternalDevicesEntry=sniStateOfSupplyInternalDevicesEntry, sniErrorKeyword1=sniErrorKeyword1, sniEMMDriverName=sniEMMDriverName, sniPrefetchable=sniPrefetchable, sniNetworkAdapter=sniNetworkAdapter, sniTargetID=sniTargetID, sniComputerName=sniComputerName, sniProductVersion=sniProductVersion, sniUsername=sniUsername, sniWritePreComp=sniWritePreComp, sniPlace=sniPlace, sniChassisType=sniChassisType, sniMainboardProcessors=sniMainboardProcessors, sniMediaLoaded=sniMediaLoaded, sniRIMMSupport=sniRIMMSupport, sniVESAExtensions=sniVESAExtensions, sniSharedSlot=sniSharedSlot, sniMemoryModule2=sniMemoryModule2, sniInterface=sniInterface, sniFreeGDIResourcesPercentage=sniFreeGDIResourcesPercentage, sniStateOfSupplyAddOnBoards=sniStateOfSupplyAddOnBoards, sniContact=sniContact, sniStateOfSupplyMainboard=sniStateOfSupplyMainboard, sniUSER=sniUSER, sniHardwareName=sniHardwareName, sniModeInfo=sniModeInfo, sniCompletionCode=sniCompletionCode, sniDNBrowserVersion=sniDNBrowserVersion, sniSMARTWarningThreshold=sniSMARTWarningThreshold, sniLoaderVersion=sniLoaderVersion, sniMainboardOnboardDevicesEntry=sniMainboardOnboardDevicesEntry, sniGraphicmode=sniGraphicmode, sniTracks=sniTracks, sniMaxRefreshrateHz=sniMaxRefreshrateHz, sniHardwarePCIInfo=sniHardwarePCIInfo, sniDriveletter=sniDriveletter, sniWarningKeyword3=sniWarningKeyword3, sniNumberOfLowLevelDevices=sniNumberOfLowLevelDevices, sniBusType=sniBusType, sniHardwareDriveBays=sniHardwareDriveBays)
mibBuilder.exportSymbols("DESKSNMP-MIB", sniLogicalDrivePartitionFreeSpacekB=sniLogicalDrivePartitionFreeSpacekB, sniMouseInterface=sniMouseInterface, sniPortName=sniPortName, sniLogicalDrivePartitionEncrypted=sniLogicalDrivePartitionEncrypted, sniMainboardMemoryEntry=sniMainboardMemoryEntry, sniInterfaceType=sniInterfaceType, sniPhysicalDriveTotalSpacekB=sniPhysicalDriveTotalSpacekB, sniWriteBack=sniWriteBack, sniCacheBurstType=sniCacheBurstType, sniPortType=sniPortType, sniDriver=sniDriver, sniErrorKeyword5=sniErrorKeyword5, sniAntiVirus=sniAntiVirus, sniYearofManufacture=sniYearofManufacture, sniModuleType=sniModuleType, sniLocationMemoryBank=sniLocationMemoryBank, sniMainboardVersion=sniMainboardVersion, sniVendorID=sniVendorID, sniInstallationDirectory=sniInstallationDirectory, sniSystemSlotIndex=sniSystemSlotIndex, sniSysInf16Version=sniSysInf16Version, sniModuleSerialnumber=sniModuleSerialnumber, sniMainboardPortsEntry=sniMainboardPortsEntry, sniBoardDMA=sniBoardDMA, sniPCManufacturer=sniPCManufacturer, sniIEEE1394Support=sniIEEE1394Support, sniNetwork=sniNetwork, sniBuildinSelfTestSupport=sniBuildinSelfTestSupport, sniCapacity=sniCapacity, sniMinimumRefreshrate=sniMinimumRefreshrate, sniExpROMBaseAddressReg=sniExpROMBaseAddressReg, sniFamily=sniFamily, sniMemoryController2=sniMemoryController2, sniDeskInfo=sniDeskInfo, sniSIMMSupport=sniSIMMSupport, sniGateway3=sniGateway3, sniACPISupport=sniACPISupport, sniGraphicType=sniGraphicType, sniDNSServer3=sniDNSServer3, sniPCIDeviceType=sniPCIDeviceType, sniPCName=sniPCName, sniSCSIDeviceType=sniSCSIDeviceType, sniMainboardOnboardDevices=sniMainboardOnboardDevices, sniDeviceType=sniDeviceType, sniJobTitle=sniJobTitle, sniMainboardGSNumber=sniMainboardGSNumber, sniDistinguishWarningError=sniDistinguishWarningError, sniMemoryModuleManufacturer=sniMemoryModuleManufacturer, sniHostAdapterID=sniHostAdapterID, sniSystemSlotType=sniSystemSlotType, sniOSLanguageSecondary=sniOSLanguageSecondary, sniScannerName=sniScannerName, sniOSName=sniOSName, sniSerialNumber=sniSerialNumber, sniMaxhorizontalFrequency=sniMaxhorizontalFrequency, sniLatencyTimer=sniLatencyTimer, sniAtPreInstallTime=sniAtPreInstallTime, sniLogicalDrivePartitionActive=sniLogicalDrivePartitionActive, sniCacheLineSize=sniCacheLineSize, sniPCIVendorID=sniPCIVendorID, sniXMSFreeMemorykB=sniXMSFreeMemorykB, sniSlotLength=sniSlotLength, sniSupportedButtons=sniSupportedButtons, sniPowersupplySerialNumber=sniPowersupplySerialNumber, sniXMSSizekB=sniXMSSizekB, sniSynchronSupport=sniSynchronSupport, sniNumberofModules=sniNumberofModules, sniOSLanguage=sniOSLanguage, sniAtapiZIPDriveBootSupport=sniAtapiZIPDriveBootSupport, sniLabel=sniLabel, sniBurstTypeSupport=sniBurstTypeSupport, sniSingleMultiFunction=sniSingleMultiFunction, sniFastPageMode=sniFastPageMode, sniPartitionEncrypted=sniPartitionEncrypted, sniProductID=sniProductID, sniLogicalDriveSizekB=sniLogicalDriveSizekB, sniLogicalDrivePartitionLabel=sniLogicalDrivePartitionLabel, sniPartitionsEntry=sniPartitionsEntry, sniFeatures=sniFeatures, sniDNSHostname=sniDNSHostname, sniServicePartner=sniServicePartner, sniBoardType=sniBoardType, sniEndOfContract=sniEndOfContract, sniLogicalDriveType=sniLogicalDriveType, sniAccessible=sniAccessible, sniDriverVersion=sniDriverVersion, sniMainboardSerialNumber=sniMainboardSerialNumber, sniBaseClassID=sniBaseClassID, sniOnBoardMouse=sniOnBoardMouse, sniDeviceIndex=sniDeviceIndex, sniSCSIDeviceName=sniSCSIDeviceName, sniBios=sniBios, sniStateOfSupplySystemData=sniStateOfSupplySystemData, sniMonitorOutletSupported=sniMonitorOutletSupported, sniSMARTCrossreference=sniSMARTCrossreference, sniSpeedns=sniSpeedns, sniRevisionID=sniRevisionID, sniPNPSpecificVersion=sniPNPSpecificVersion, sniDHCPServer=sniDHCPServer, sniAntiVirusProgramIndex=sniAntiVirusProgramIndex, sniOutputCurrentmA=sniOutputCurrentmA, sniHardwarePCIInfoEntry=sniHardwarePCIInfoEntry, sniPCIMemoryMapping=sniPCIMemoryMapping, sniPCSerialNumber=sniPCSerialNumber, sniSectors=sniSectors, sniIRDABus=sniIRDABus, sniErrorKeyword9=sniErrorKeyword9, sniPhysicalDriveCrossreference=sniPhysicalDriveCrossreference, sniISAMemoryGapSupport=sniISAMemoryGapSupport, sniErrorCorrectionECC=sniErrorCorrectionECC, sniCacheIndex=sniCacheIndex, sniBootfromPCMCIA=sniBootfromPCMCIA, sniNumber=sniNumber, sniDNAgentVersion=sniDNAgentVersion, sniSoftwareName=sniSoftwareName, sniMouseManufacturer=sniMouseManufacturer, sniPCIInfoIndex=sniPCIInfoIndex, sniDDC=sniDDC, sniSystemMonitoring=sniSystemMonitoring, sniSectorsPerTrack=sniSectorsPerTrack, sniMemoryIOSpace=sniMemoryIOSpace, sniPCMCIAInterface=sniPCMCIAInterface, sniNumberofDevices=sniNumberofDevices, sniNetworkpath=sniNetworkpath, sniEDO=sniEDO, sniProcessorVersion=sniProcessorVersion, sniWriteThrough=sniWriteThrough, sniSCSIID=sniSCSIID, sniBusWidth=sniBusWidth, sniInt14SerialServices=sniInt14SerialServices, sniProcessorSerialnumber=sniProcessorSerialnumber, sniInt10CGAVideoServices=sniInt10CGAVideoServices, sniInSocket=sniInSocket, sniEMMFreekB=sniEMMFreekB, sniWarningKeyword6=sniWarningKeyword6, sniMainboardMemoryModules=sniMainboardMemoryModules, sniLogicalDrivePartitionName=sniLogicalDrivePartitionName, sniOSNameSecondary=sniOSNameSecondary, sniStandardSupport=sniStandardSupport, sniMin5VCurrentA=sniMin5VCurrentA, sniSwapFileUsedPercentage=sniSwapFileUsedPercentage, sniPhysicalDriveIndex=sniPhysicalDriveIndex, sniIdentNumber=sniIdentNumber, sniPhonenumber=sniPhonenumber, sniSubClassID=sniSubClassID, sniShadowed=sniShadowed, sniLayout=sniLayout, sniModuleIndex=sniModuleIndex, sniPartitionActive=sniPartitionActive, sniMaxNumberofModules=sniMaxNumberofModules, sniPowersupplyRevision=sniPowersupplyRevision, sniStateOfSupplyAddOnModules=sniStateOfSupplyAddOnModules, sniDecodeenabled=sniDecodeenabled, sniProgrammingInterfaceID=sniProgrammingInterfaceID, sniBusLoad=sniBusLoad, sniMainboardCache=sniMainboardCache, sniVolumename=sniVolumename, sniButtonsExchanged=sniButtonsExchanged, sni1MB2FloppySupport=sni1MB2FloppySupport, sniStandardBios=sniStandardBios, sniPortIRQ=sniPortIRQ, sniVersion=sniVersion, sniModeNumber=sniModeNumber, sniHardwarePCIBaseAddressEntry=sniHardwarePCIBaseAddressEntry, sniPartitionName=sniPartitionName, sniSMARTID=sniSMARTID, sniDataCache=sniDataCache, sniSectorsPerCluster=sniSectorsPerCluster, sniMemoryTypeEx=sniMemoryTypeEx, sniCharacteristicNumber=sniCharacteristicNumber, sniSRAMSupport=sniSRAMSupport, sniRefreshrateHz=sniRefreshrateHz, sniIPAddress1=sniIPAddress1, sniWarningKeyword2=sniWarningKeyword2, sniRomSizekB=sniRomSizekB, sniSoftwareIndex=sniSoftwareIndex, sniLogicalDrivesEntry=sniLogicalDrivesEntry, sniGateway4=sniGateway4, sniMemoryModuleSerialnumber=sniMemoryModuleSerialnumber, sniPhysicalDriveName=sniPhysicalDriveName, sniDPMS=sniDPMS, sniLogicalDrives=sniLogicalDrives, sniHardwarePCIBaseAddress=sniHardwarePCIBaseAddress, sniEnhancedDiskDriveEDD=sniEnhancedDiskDriveEDD, sniDevicenumber=sniDevicenumber, sniSupportedSpeeds=sniSupportedSpeeds, sniStateOfSupplyAddOnModulesEntry=sniStateOfSupplyAddOnModulesEntry, sniRemoteOn=sniRemoteOn, sniCacheActive=sniCacheActive, sniDeviceCommand=sniDeviceCommand, sniSMARTBatterieSupport=sniSMARTBatterieSupport, sniDNSServer2=sniDNSServer2, sniSubnetMask4=sniSubnetMask4, sniBIOSVersion=sniBIOSVersion, sniDriverDirectory=sniDriverDirectory, sniAntiVirusEntry=sniAntiVirusEntry, sniCustomerSpecificSerialNumber=sniCustomerSpecificSerialNumber, sniOperatingSystem=sniOperatingSystem, sniDINetVersion=sniDINetVersion, sniBoardSerialnumber=sniBoardSerialnumber, sniParitySupport=sniParitySupport, sniMemorymoduleFormfactorandType=sniMemorymoduleFormfactorandType, sniStateOfSupplyAddOnBoardsEntry=sniStateOfSupplyAddOnBoardsEntry, sniWarningKeyword9=sniWarningKeyword9, sniMainboardManufacturer=sniMainboardManufacturer, sniSystemName=sniSystemName, sniInterruptLine=sniInterruptLine, sniProductName=sniProductName, sniPortDMA=sniPortDMA, sniChassisColor=sniChassisColor, sniLogicalDrivePartitionFilesystem=sniLogicalDrivePartitionFilesystem, sniNetworkEntry=sniNetworkEntry, sniRemovableMedia=sniRemovableMedia, sniESCDBus=sniESCDBus, sniGraphicCardLocation=sniGraphicCardLocation, sniDIMMSupport=sniDIMMSupport, sniErrorKeyword2=sniErrorKeyword2, sniDriveBayIndex=sniDriveBayIndex, sniLandingZone=sniLandingZone, sniBiosManufacturer=sniBiosManufacturer, sniPCISlotNumber=sniPCISlotNumber, sniSubSystemID=sniSubSystemID, sniDMISupport=sniDMISupport, sniNumberOfDriveBays=sniNumberOfDriveBays, sniUsedMemorySlots=sniUsedMemorySlots, sniParity=sniParity, sniWarningKeyword4=sniWarningKeyword4, sniMemoryMapping=sniMemoryMapping, sniMainboardProcessorsEntry=sniMainboardProcessorsEntry, sniErrorKeyword3=sniErrorKeyword3, sniBaseMemorykB=sniBaseMemorykB, sniBootDeviceSelectable=sniBootDeviceSelectable, sniSMARTName=sniSMARTName, sniBoardIndex=sniBoardIndex, sniBoardName=sniBoardName, sniPCIIndex2=sniPCIIndex2, sniLogicalDrivePartitionBootable=sniLogicalDrivePartitionBootable, sniSMARTValuesEntry=sniSMARTValuesEntry, sniStandardMemoryModule=sniStandardMemoryModule, sniPartitionFilesystem=sniPartitionFilesystem, sniDeviceName=sniDeviceName, sniDepartment=sniDepartment, sniGraphicController=sniGraphicController, sniSavetoDiskStd=sniSavetoDiskStd, sniRemovableDrive=sniRemovableDrive, sniOnboardDeviceName=sniOnboardDeviceName, sniPhysicalDrivePartitions=sniPhysicalDrivePartitions, sniSubVendorID=sniSubVendorID, sniMonitorName=sniMonitorName, sniCurrentProcSpeedMHz=sniCurrentProcSpeedMHz, sniTotalNumberOfLowLevelDevices=sniTotalNumberOfLowLevelDevices, sniModuleName=sniModuleName, sniScanMode=sniScanMode, sniBaseAddress=sniBaseAddress)
mibBuilder.exportSymbols("DESKSNMP-MIB", sniEMMSizekB=sniEMMSizekB, sniNumberMemorySlots=sniNumberMemorySlots, sniMousePort=sniMousePort, sniToshibaFloppySupport=sniToshibaFloppySupport, sniHardwareDriveBaysEntry=sniHardwareDriveBaysEntry, sniEMMDriverVersion=sniEMMDriverVersion, sniPortIndex=sniPortIndex, sniMemory=sniMemory, sniProcessorIndex=sniProcessorIndex, sniBadBlocks=sniBadBlocks, sniPartitionFreeSpacekB=sniPartitionFreeSpacekB, sniSMARTIndex=sniSMARTIndex, sniAttachedMemoryBank=sniAttachedMemoryBank, sniUUID=sniUUID, sniIOAddress=sniIOAddress, sniSubnetMask1=sniSubnetMask1, sniCacheSRAM=sniCacheSRAM, sniPowersupplyFanSpeed=sniPowersupplyFanSpeed, sniDDCSupport=sniDDCSupport, sniClusterSizeByte=sniClusterSizeByte, sniIOBaseAddress=sniIOBaseAddress, sniMemoryModule=sniMemoryModule, sniVoltage5V=sniVoltage5V, sniCharacteristicInfo=sniCharacteristicInfo, sniPhysicalDriveSectorSizeByte=sniPhysicalDriveSectorSizeByte, sniI2OBootSupport=sniI2OBootSupport, sni=sni, sniOnboardDeviceIndex=sniOnboardDeviceIndex, sniDOSDriver=sniDOSDriver, sniSoftwareEntry=sniSoftwareEntry, sniSMARTValues=sniSMARTValues, sniBootfromCDROM=sniBootfromCDROM, sniAGPSupport=sniAGPSupport, sniMaxMemoryMB=sniMaxMemoryMB, sniPCInformation=sniPCInformation, sniPowersupplyIndex=sniPowersupplyIndex, sniNumberOfMemoryModules=sniNumberOfMemoryModules, sniExpansionROMBaseAddress=sniExpansionROMBaseAddress, sniAdditionalServiceInformation=sniAdditionalServiceInformation, sniLS120BootSupport=sniLS120BootSupport, sniSystemSerialNumber=sniSystemSerialNumber, sniDNSServer4=sniDNSServer4, sniPowersupplyManufacturingDate=sniPowersupplyManufacturingDate, sniSecurity=sniSecurity, sniSCSIDeviceSerialnumber=sniSCSIDeviceSerialnumber)
