#
# PySNMP MIB module OA-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OA-QOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:22:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
oacExpIMIp, = mibBuilder.importSymbols("ONEACCESS-GLOBAL-REG", "oacExpIMIp")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, iso, Bits, IpAddress, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, Counter32, ObjectIdentity, Gauge32, Integer32, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "Bits", "IpAddress", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "Counter32", "ObjectIdentity", "Gauge32", "Integer32", "Counter64", "MibIdentifier")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
oacQOS = ModuleIdentity((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3))
if mibBuilder.loadTexts: oacQOS.setLastUpdated('0301201245Z')
if mibBuilder.loadTexts: oacQOS.setOrganization(' OneAccess ')
class QosObjectType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))
    namedValues = NamedValues(("policymap", 1), ("classmap", 2), ("matchStatement", 3), ("queueing", 4), ("randomDetect", 5), ("police", 7), ("set", 8))

class TrafficDirection(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("input", 1), ("output", 2))

class QosClassInfo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("matchAll", 2), ("matchAny", 3))

class QosMatchInfo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("matchNot", 2))

class InterfaceType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("mainInterface", 1), ("subInterface", 2))

class QueueingBandwidthUnits(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("kbps", 1), ("percentage", 2), ("percentageRemaining", 3))

class PoliceAction(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("transmit", 1), ("setIpDSCP", 2), ("setIpPrecedence", 3), ("setQosGroup", 4), ("drop", 5), ("setAtmClp", 6), ("setDiscardClass", 7))

class SetFeatureType(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("ipDscp", 0), ("ipPrecedence", 1), ("qosGroupNumber", 2), ("atmClpBit", 3), ("discardClass", 4))

class WREDMechanism(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("precedence", 1), ("dscp", 2))

class QosQueueUnitType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("packets", 1), ("cells", 2), ("bytes", 3))

class QosQueueDepth(TextualConvention, Gauge32):
    status = 'current'

oacQosServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 1), )
if mibBuilder.loadTexts: oacQosServicePolicyTable.setStatus('current')
oacQosServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 1, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"))
if mibBuilder.loadTexts: oacQosServicePolicyEntry.setStatus('current')
oacQosPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 1, 1, 1), Gauge32())
if mibBuilder.loadTexts: oacQosPolicyIndex.setStatus('current')
oacQosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosIfIndex.setStatus('current')
oacQosIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 1, 1, 3), InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosIfType.setStatus('current')
oacQosPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 1, 1, 4), TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPolicyDirection.setStatus('current')
oacQosInterfacePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 2), )
if mibBuilder.loadTexts: oacQosInterfacePolicyTable.setStatus('current')
oacQosInterfacePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "OA-QOS-MIB", "oacQosPolicyDirection"))
if mibBuilder.loadTexts: oacQosInterfacePolicyEntry.setStatus('current')
oacQosInterfacePolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosInterfacePolicyIndex.setStatus('current')
oacQosObjectsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 3), )
if mibBuilder.loadTexts: oacQosObjectsTable.setStatus('current')
oacQosObjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 3, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"), (0, "OA-QOS-MIB", "oacQosObjectsIndex"))
if mibBuilder.loadTexts: oacQosObjectsEntry.setStatus('current')
oacQosObjectsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 3, 1, 1), Gauge32())
if mibBuilder.loadTexts: oacQosObjectsIndex.setStatus('current')
oacQosConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosConfigIndex.setStatus('current')
oacQosObjectsType = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 3, 1, 3), QosObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosObjectsType.setStatus('current')
oacQosParentObjectsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosParentObjectsIndex.setStatus('current')
oacQosPolicyMapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 4), )
if mibBuilder.loadTexts: oacQosPolicyMapConfigTable.setStatus('current')
oacQosPolicyMapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 4, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosPolicyMapConfigEntry.setStatus('current')
oacQosPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPolicyMapName.setStatus('current')
oacQosClassMapConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 5), )
if mibBuilder.loadTexts: oacQosClassMapConfigTable.setStatus('current')
oacQosClassMapConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 5, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosClassMapConfigEntry.setStatus('current')
oacQosClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapName.setStatus('current')
oacQosClassMapInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 5, 1, 2), QosClassInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapInfo.setStatus('current')
oacQosClassMapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6), )
if mibBuilder.loadTexts: oacQosClassMapStatsTable.setStatus('current')
oacQosClassMapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"), (0, "OA-QOS-MIB", "oacQosObjectsIndex"))
if mibBuilder.loadTexts: oacQosClassMapStatsEntry.setStatus('current')
oacQosClassMapPreExecutePkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPreExecutePkt.setStatus('current')
oacQosClassMapPreExecutePkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPreExecutePkt64.setStatus('current')
oacQosClassMapPreExecuteByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPreExecuteByte.setStatus('current')
oacQosClassMapPreExecuteByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPreExecuteByte64.setStatus('current')
oacQosClassMapPreExecuteBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 5), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPreExecuteBitRate.setStatus('current')
oacQosClassMapPostExecuteByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPostExecuteByte.setStatus('current')
oacQosClassMapPostExecuteByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPostExecuteByte64.setStatus('current')
oacQosClassMapPostExecuteBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 8), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapPostExecuteBitRate.setStatus('current')
oacQosClassMapDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapDropPkt.setStatus('current')
oacQosClassMapDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapDropPkt64.setStatus('current')
oacQosClassMapDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapDropByte.setStatus('current')
oacQosClassMapDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapDropByte64.setStatus('current')
oacQosClassMapDropBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 13), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapDropBitRate.setStatus('current')
oacQosClassMapRemarkedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapRemarkedPkt.setStatus('current')
oacQosClassMapRemarkedPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapRemarkedPkt64.setStatus('current')
oacQosClassMapRemarkedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapRemarkedByte.setStatus('current')
oacQosClassMapRemarkedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 6, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosClassMapRemarkedByte64.setStatus('current')
oacQosMatchConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 7), )
if mibBuilder.loadTexts: oacQosMatchConfigTable.setStatus('current')
oacQosMatchConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 7, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosMatchConfigEntry.setStatus('current')
oacQosMatchName = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchName.setStatus('current')
oacQosMatchInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 7, 1, 2), QosMatchInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchInfo.setStatus('current')
oacQosMatchStatsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8), )
if mibBuilder.loadTexts: oacQosMatchStatsTable.setStatus('current')
oacQosMatchStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"), (0, "OA-QOS-MIB", "oacQosObjectsIndex"))
if mibBuilder.loadTexts: oacQosMatchStatsEntry.setStatus('current')
oacQosMatchPreExecutePkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchPreExecutePkt.setStatus('current')
oacQosMatchPreExecutePkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchPreExecutePkt64.setStatus('current')
oacQosMatchPreExecuteByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchPreExecuteByte.setStatus('current')
oacQosMatchPreExecuteByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchPreExecuteByte64.setStatus('current')
oacQosMatchPreExecuteBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 8, 1, 5), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosMatchPreExecuteBitRate.setStatus('current')
oacQosSetConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9), )
if mibBuilder.loadTexts: oacQosSetConfigTable.setStatus('current')
oacQosSetConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosSetConfigEntry.setStatus('current')
oacQosSetConfigFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9, 1, 1), SetFeatureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosSetConfigFeature.setStatus('current')
oacQosSetConfigIpDSCPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosSetConfigIpDSCPValue.setStatus('current')
oacQosSetConfigIpPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosSetConfigIpPrecedenceValue.setStatus('current')
oacQosSetConfigQosGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosSetConfigQosGroupValue.setStatus('current')
oacQosSetConfigDiscardClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 9, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosSetConfigDiscardClassValue.setStatus('current')
oacQosPoliceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10), )
if mibBuilder.loadTexts: oacQosPoliceConfigTable.setStatus('current')
oacQosPoliceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosPoliceConfigEntry.setStatus('current')
oacQosPoliceConfigCir = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(8000, 2000000000))).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigCir.setStatus('current')
oacQosPoliceConfigCir64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 2), Counter64()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigCir64.setStatus('current')
oacQosPoliceConfigConformBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1000, 512000000))).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigConformBurstSize.setStatus('current')
oacQosPoliceConfigPir = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(8000, 2000000000))).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigPir.setStatus('current')
oacQosPoliceConfigPeakBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1000, 512000000))).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigPeakBurstSize.setStatus('current')
oacQosPoliceConfigConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 6), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigConformAction.setStatus('deprecated')
oacQosPoliceConfigConformSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigConformSetValue.setStatus('deprecated')
oacQosPoliceConfigExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 8), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigExceedAction.setStatus('deprecated')
oacQosPoliceConfigExceedSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigExceedSetValue.setStatus('deprecated')
oacQosPoliceConfigViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 10), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigViolateAction.setStatus('deprecated')
oacQosPoliceConfigViolateSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 10, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConfigViolateSetValue.setStatus('deprecated')
oacQosPoliceActionConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11), )
if mibBuilder.loadTexts: oacQosPoliceActionConfigTable.setStatus('current')
oacQosPoliceActionConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"), (0, "OA-QOS-MIB", "oacQosPoliceActionConfigIndex"))
if mibBuilder.loadTexts: oacQosPoliceActionConfigEntry.setStatus('current')
oacQosPoliceActionConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 1), Gauge32())
if mibBuilder.loadTexts: oacQosPoliceActionConfigIndex.setStatus('current')
oacQosPoliceActionConfigConform = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 2), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceActionConfigConform.setStatus('current')
oacQosPoliceActionConfigConformSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceActionConfigConformSetValue.setStatus('current')
oacQosPoliceActionConfigExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 4), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceActionConfigExceed.setStatus('current')
oacQosPoliceActionConfigExceedSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceActionConfigExceedSetValue.setStatus('current')
oacQosPoliceActionConfigViolate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 6), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceActionConfigViolate.setStatus('current')
oacQosPoliceActionConfigViolateSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 11, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceActionConfigViolateSetValue.setStatus('current')
oacQosPoliceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12), )
if mibBuilder.loadTexts: oacQosPoliceStatsTable.setStatus('current')
oacQosPoliceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"), (0, "OA-QOS-MIB", "oacQosObjectsIndex"))
if mibBuilder.loadTexts: oacQosPoliceStatsEntry.setStatus('current')
oacQosPoliceConformPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConformPkt.setStatus('current')
oacQosPoliceConformPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConformPkt64.setStatus('current')
oacQosPoliceConformByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConformByte.setStatus('current')
oacQosPoliceConformByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConformByte64.setStatus('current')
oacQosPoliceConformBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 5), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceConformBitRate.setStatus('current')
oacQosPoliceExceedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceExceedPkt.setStatus('current')
oacQosPoliceExceedPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceExceedPkt64.setStatus('current')
oacQosPoliceExceedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 8), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceExceedByte.setStatus('current')
oacQosPoliceExceedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 9), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceExceedByte64.setStatus('current')
oacQosPoliceExceedBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 10), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceExceedBitRate.setStatus('current')
oacQosPoliceViolatePkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceViolatePkt.setStatus('current')
oacQosPoliceViolatePkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceViolatePkt64.setStatus('current')
oacQosPoliceViolateByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 13), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceViolateByte.setStatus('current')
oacQosPoliceViolateByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 14), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceViolateByte64.setStatus('current')
oacQosPoliceViolateBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 12, 1, 15), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosPoliceViolateBitRate.setStatus('current')
oacQosWREDConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 13), )
if mibBuilder.loadTexts: oacQosWREDConfigTable.setStatus('current')
oacQosWREDConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 13, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosWREDConfigEntry.setStatus('current')
oacQosWREDConfigExponentialWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDConfigExponentialWeight.setStatus('current')
oacQosWREDConfigDscpPrecQosGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 13, 1, 2), WREDMechanism()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDConfigDscpPrecQosGroup.setStatus('current')
oacQosWREDConfigECNEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 13, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDConfigECNEnabled.setStatus('current')
oacQosWREDClassConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14), )
if mibBuilder.loadTexts: oacQosWREDClassConfigTable.setStatus('current')
oacQosWREDClassConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"), (0, "OA-QOS-MIB", "oacQosWREDValue"))
if mibBuilder.loadTexts: oacQosWREDClassConfigEntry.setStatus('current')
oacQosWREDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: oacQosWREDValue.setStatus('current')
oacQosWREDConfigPktDropProb = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setUnits('').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDConfigPktDropProb.setStatus('current')
oacQosWREDClassConfigThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14, 1, 3), QosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDClassConfigThresholdUnit.setStatus('current')
oacQosWREDClassConfigMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14, 1, 4), QosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDClassConfigMinThreshold.setStatus('current')
oacQosWREDClassConfigMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 14, 1, 5), QosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDClassConfigMaxThreshold.setStatus('current')
oacQosWREDClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15), )
if mibBuilder.loadTexts: oacQosWREDClassStatsTable.setStatus('current')
oacQosWREDClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"), (0, "OA-QOS-MIB", "oacQosObjectsIndex"), (0, "OA-QOS-MIB", "oacQosWREDValue"))
if mibBuilder.loadTexts: oacQosWREDClassStatsEntry.setStatus('current')
oacQosWREDAverageQueueSizeUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 1), QosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDAverageQueueSizeUnits.setStatus('current')
oacQosWREDAverageQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 2), QosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDAverageQueueSize.setStatus('current')
oacQosWREDRandomDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDRandomDropPkt.setStatus('current')
oacQosWREDRandomDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDRandomDropPkt64.setStatus('current')
oacQosWREDRandomDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 5), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDRandomDropByte.setStatus('current')
oacQosWREDRandomDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 6), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDRandomDropByte64.setStatus('current')
oacQosWREDTailDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTailDropPkt.setStatus('current')
oacQosWREDTailDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTailDropPkt64.setStatus('current')
oacQosWREDTailDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 9), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTailDropByte.setStatus('current')
oacQosWREDTailDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTailDropByte64.setStatus('current')
oacQosWREDTransmitPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 11), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTransmitPkt.setStatus('current')
oacQosWREDTransmitPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTransmitPkt64.setStatus('current')
oacQosWREDTransmitByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 13), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTransmitByte.setStatus('current')
oacQosWREDTransmitByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 14), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDTransmitByte64.setStatus('current')
oacQosWREDECNMarkPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDECNMarkPkt.setStatus('current')
oacQosWREDECNMarkPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 16), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDECNMarkPkt64.setStatus('current')
oacQosWREDECNMarkByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 17), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDECNMarkByte.setStatus('current')
oacQosWREDECNMarkByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 15, 1, 18), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosWREDECNMarkByte64.setStatus('current')
oacQosQueueConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16), )
if mibBuilder.loadTexts: oacQosQueueConfigTable.setStatus('current')
oacQosQueueConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosConfigIndex"))
if mibBuilder.loadTexts: oacQosQueueConfigEntry.setStatus('current')
oacQosQueueConfigFlowBasedEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigFlowBasedEnabled.setStatus('current')
oacQosQueueConfigPriorityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigPriorityEnabled.setStatus('current')
oacQosQueueConfigBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigBandwidth.setStatus('current')
oacQosQueueConfigBandwidthUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 4), QueueingBandwidthUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigBandwidthUnits.setStatus('current')
oacQosQueueConfigFlowBasedQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigFlowBasedQSize.setStatus('current')
oacQosQueueConfigFlowBasedQNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigFlowBasedQNumber.setStatus('current')
oacQosQueueConfigPrioBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 7), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(32, 64000000))).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigPrioBurstSize.setStatus('current')
oacQosQueueConfigQueueLimitUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 8), QosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigQueueLimitUnits.setStatus('current')
oacQosQueueConfigQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 16, 1, 9), QosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueConfigQueueLimit.setStatus('current')
oacQosQueueStatsTable = MibTable((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17), )
if mibBuilder.loadTexts: oacQosQueueStatsTable.setStatus('current')
oacQosQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1), ).setIndexNames((0, "OA-QOS-MIB", "oacQosPolicyIndex"), (0, "OA-QOS-MIB", "oacQosObjectsIndex"))
if mibBuilder.loadTexts: oacQosQueueStatsEntry.setStatus('current')
oacQosQueueDiscardByte = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1, 1), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueDiscardByte.setStatus('current')
oacQosQueueDiscardByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1, 2), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueDiscardByte64.setStatus('current')
oacQosQueueDiscardPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1, 3), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueDiscardPkt.setStatus('current')
oacQosQueueDiscardPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueDiscardPkt64.setStatus('current')
oacQosQueueCurrentQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1, 5), Gauge32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueCurrentQDepth.setStatus('current')
oacQosQueueMaxQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 13191, 10, 3, 1, 3, 17, 1, 6), Gauge32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: oacQosQueueMaxQDepth.setStatus('current')
mibBuilder.exportSymbols("OA-QOS-MIB", QueueingBandwidthUnits=QueueingBandwidthUnits, oacQosWREDRandomDropByte64=oacQosWREDRandomDropByte64, oacQosWREDClassStatsEntry=oacQosWREDClassStatsEntry, oacQosPoliceConfigCir64=oacQosPoliceConfigCir64, QosObjectType=QosObjectType, oacQosClassMapRemarkedPkt64=oacQosClassMapRemarkedPkt64, oacQosQueueConfigQueueLimit=oacQosQueueConfigQueueLimit, oacQosWREDECNMarkPkt64=oacQosWREDECNMarkPkt64, oacQosClassMapPostExecuteByte64=oacQosClassMapPostExecuteByte64, oacQosPoliceConformByte64=oacQosPoliceConformByte64, oacQosPoliceActionConfigConform=oacQosPoliceActionConfigConform, oacQosMatchStatsTable=oacQosMatchStatsTable, oacQosClassMapStatsTable=oacQosClassMapStatsTable, oacQosMatchConfigTable=oacQosMatchConfigTable, oacQosWREDConfigPktDropProb=oacQosWREDConfigPktDropProb, oacQosPoliceActionConfigViolate=oacQosPoliceActionConfigViolate, oacQosSetConfigTable=oacQosSetConfigTable, oacQosWREDTailDropByte=oacQosWREDTailDropByte, oacQosPoliceActionConfigExceedSetValue=oacQosPoliceActionConfigExceedSetValue, oacQosClassMapPreExecutePkt64=oacQosClassMapPreExecutePkt64, oacQosQueueDiscardPkt=oacQosQueueDiscardPkt, oacQosMatchPreExecutePkt=oacQosMatchPreExecutePkt, oacQosPoliceConfigEntry=oacQosPoliceConfigEntry, oacQosPoliceConfigExceedAction=oacQosPoliceConfigExceedAction, oacQosPoliceConfigPir=oacQosPoliceConfigPir, oacQosQueueConfigBandwidth=oacQosQueueConfigBandwidth, oacQosWREDRandomDropPkt=oacQosWREDRandomDropPkt, TrafficDirection=TrafficDirection, oacQosWREDTransmitPkt=oacQosWREDTransmitPkt, oacQosMatchPreExecuteByte=oacQosMatchPreExecuteByte, oacQosQueueConfigFlowBasedEnabled=oacQosQueueConfigFlowBasedEnabled, oacQosWREDValue=oacQosWREDValue, oacQosMatchName=oacQosMatchName, oacQosPoliceActionConfigTable=oacQosPoliceActionConfigTable, oacQosQueueConfigFlowBasedQSize=oacQosQueueConfigFlowBasedQSize, oacQosWREDAverageQueueSizeUnits=oacQosWREDAverageQueueSizeUnits, oacQosQueueConfigBandwidthUnits=oacQosQueueConfigBandwidthUnits, oacQosWREDECNMarkByte=oacQosWREDECNMarkByte, oacQosPoliceActionConfigExceed=oacQosPoliceActionConfigExceed, oacQosPoliceConfigCir=oacQosPoliceConfigCir, oacQosIfIndex=oacQosIfIndex, oacQosObjectsTable=oacQosObjectsTable, oacQosPoliceActionConfigIndex=oacQosPoliceActionConfigIndex, QosQueueUnitType=QosQueueUnitType, oacQosClassMapDropPkt64=oacQosClassMapDropPkt64, PoliceAction=PoliceAction, oacQosClassMapDropByte64=oacQosClassMapDropByte64, oacQosWREDAverageQueueSize=oacQosWREDAverageQueueSize, oacQosPoliceStatsEntry=oacQosPoliceStatsEntry, oacQOS=oacQOS, oacQosInterfacePolicyEntry=oacQosInterfacePolicyEntry, oacQosClassMapConfigTable=oacQosClassMapConfigTable, oacQosPoliceConformPkt=oacQosPoliceConformPkt, oacQosQueueConfigPrioBurstSize=oacQosQueueConfigPrioBurstSize, oacQosServicePolicyEntry=oacQosServicePolicyEntry, oacQosServicePolicyTable=oacQosServicePolicyTable, oacQosIfType=oacQosIfType, oacQosClassMapRemarkedPkt=oacQosClassMapRemarkedPkt, oacQosWREDClassConfigMaxThreshold=oacQosWREDClassConfigMaxThreshold, oacQosWREDConfigDscpPrecQosGroup=oacQosWREDConfigDscpPrecQosGroup, oacQosPolicyDirection=oacQosPolicyDirection, oacQosPoliceConformBitRate=oacQosPoliceConformBitRate, oacQosQueueConfigTable=oacQosQueueConfigTable, oacQosClassMapDropByte=oacQosClassMapDropByte, oacQosWREDTailDropPkt=oacQosWREDTailDropPkt, oacQosQueueStatsEntry=oacQosQueueStatsEntry, oacQosPoliceExceedBitRate=oacQosPoliceExceedBitRate, oacQosPoliceExceedPkt64=oacQosPoliceExceedPkt64, oacQosQueueStatsTable=oacQosQueueStatsTable, oacQosWREDECNMarkByte64=oacQosWREDECNMarkByte64, oacQosClassMapInfo=oacQosClassMapInfo, oacQosWREDTransmitByte=oacQosWREDTransmitByte, oacQosMatchPreExecuteBitRate=oacQosMatchPreExecuteBitRate, oacQosClassMapPostExecuteByte=oacQosClassMapPostExecuteByte, oacQosPoliceViolateByte=oacQosPoliceViolateByte, oacQosWREDTransmitPkt64=oacQosWREDTransmitPkt64, oacQosMatchConfigEntry=oacQosMatchConfigEntry, oacQosPoliceConfigViolateAction=oacQosPoliceConfigViolateAction, oacQosSetConfigQosGroupValue=oacQosSetConfigQosGroupValue, oacQosWREDRandomDropPkt64=oacQosWREDRandomDropPkt64, oacQosWREDConfigExponentialWeight=oacQosWREDConfigExponentialWeight, oacQosPoliceConformByte=oacQosPoliceConformByte, InterfaceType=InterfaceType, oacQosWREDTailDropByte64=oacQosWREDTailDropByte64, WREDMechanism=WREDMechanism, oacQosPolicyMapConfigTable=oacQosPolicyMapConfigTable, oacQosClassMapPreExecuteByte=oacQosClassMapPreExecuteByte, oacQosPoliceConfigViolateSetValue=oacQosPoliceConfigViolateSetValue, oacQosMatchPreExecutePkt64=oacQosMatchPreExecutePkt64, oacQosPolicyIndex=oacQosPolicyIndex, oacQosPoliceConfigTable=oacQosPoliceConfigTable, oacQosObjectsIndex=oacQosObjectsIndex, oacQosPoliceConformPkt64=oacQosPoliceConformPkt64, oacQosWREDTailDropPkt64=oacQosWREDTailDropPkt64, oacQosWREDRandomDropByte=oacQosWREDRandomDropByte, oacQosSetConfigEntry=oacQosSetConfigEntry, oacQosParentObjectsIndex=oacQosParentObjectsIndex, oacQosQueueMaxQDepth=oacQosQueueMaxQDepth, oacQosPoliceActionConfigViolateSetValue=oacQosPoliceActionConfigViolateSetValue, oacQosQueueConfigQueueLimitUnits=oacQosQueueConfigQueueLimitUnits, oacQosPoliceActionConfigEntry=oacQosPoliceActionConfigEntry, oacQosPoliceStatsTable=oacQosPoliceStatsTable, oacQosWREDClassConfigTable=oacQosWREDClassConfigTable, oacQosPoliceConfigExceedSetValue=oacQosPoliceConfigExceedSetValue, oacQosInterfacePolicyIndex=oacQosInterfacePolicyIndex, oacQosWREDECNMarkPkt=oacQosWREDECNMarkPkt, oacQosInterfacePolicyTable=oacQosInterfacePolicyTable, oacQosWREDClassStatsTable=oacQosWREDClassStatsTable, oacQosObjectsType=oacQosObjectsType, oacQosSetConfigIpPrecedenceValue=oacQosSetConfigIpPrecedenceValue, oacQosClassMapConfigEntry=oacQosClassMapConfigEntry, oacQosQueueDiscardByte=oacQosQueueDiscardByte, oacQosWREDClassConfigEntry=oacQosWREDClassConfigEntry, oacQosWREDTransmitByte64=oacQosWREDTransmitByte64, oacQosSetConfigIpDSCPValue=oacQosSetConfigIpDSCPValue, oacQosPoliceConfigPeakBurstSize=oacQosPoliceConfigPeakBurstSize, QosMatchInfo=QosMatchInfo, oacQosSetConfigDiscardClassValue=oacQosSetConfigDiscardClassValue, oacQosClassMapPreExecuteBitRate=oacQosClassMapPreExecuteBitRate, oacQosPoliceExceedPkt=oacQosPoliceExceedPkt, oacQosQueueCurrentQDepth=oacQosQueueCurrentQDepth, oacQosPolicyMapName=oacQosPolicyMapName, oacQosPoliceConfigConformBurstSize=oacQosPoliceConfigConformBurstSize, oacQosPoliceConfigConformAction=oacQosPoliceConfigConformAction, oacQosQueueDiscardByte64=oacQosQueueDiscardByte64, oacQosClassMapPreExecuteByte64=oacQosClassMapPreExecuteByte64, oacQosQueueDiscardPkt64=oacQosQueueDiscardPkt64, oacQosObjectsEntry=oacQosObjectsEntry, oacQosMatchStatsEntry=oacQosMatchStatsEntry, oacQosSetConfigFeature=oacQosSetConfigFeature, oacQosMatchPreExecuteByte64=oacQosMatchPreExecuteByte64, oacQosQueueConfigEntry=oacQosQueueConfigEntry, SetFeatureType=SetFeatureType, oacQosWREDConfigECNEnabled=oacQosWREDConfigECNEnabled, oacQosQueueConfigFlowBasedQNumber=oacQosQueueConfigFlowBasedQNumber, oacQosClassMapRemarkedByte=oacQosClassMapRemarkedByte, oacQosClassMapDropPkt=oacQosClassMapDropPkt, oacQosMatchInfo=oacQosMatchInfo, oacQosWREDClassConfigThresholdUnit=oacQosWREDClassConfigThresholdUnit, oacQosPoliceViolateBitRate=oacQosPoliceViolateBitRate, oacQosPoliceConfigConformSetValue=oacQosPoliceConfigConformSetValue, oacQosQueueConfigPriorityEnabled=oacQosQueueConfigPriorityEnabled, oacQosWREDConfigTable=oacQosWREDConfigTable, oacQosPoliceActionConfigConformSetValue=oacQosPoliceActionConfigConformSetValue, oacQosClassMapRemarkedByte64=oacQosClassMapRemarkedByte64, PYSNMP_MODULE_ID=oacQOS, oacQosPoliceViolateByte64=oacQosPoliceViolateByte64, oacQosClassMapName=oacQosClassMapName, oacQosPoliceViolatePkt=oacQosPoliceViolatePkt, oacQosClassMapStatsEntry=oacQosClassMapStatsEntry, oacQosClassMapPostExecuteBitRate=oacQosClassMapPostExecuteBitRate, QosClassInfo=QosClassInfo, QosQueueDepth=QosQueueDepth, oacQosWREDClassConfigMinThreshold=oacQosWREDClassConfigMinThreshold, oacQosClassMapDropBitRate=oacQosClassMapDropBitRate, oacQosWREDConfigEntry=oacQosWREDConfigEntry, oacQosClassMapPreExecutePkt=oacQosClassMapPreExecutePkt, oacQosPolicyMapConfigEntry=oacQosPolicyMapConfigEntry, oacQosPoliceViolatePkt64=oacQosPoliceViolatePkt64, oacQosPoliceExceedByte=oacQosPoliceExceedByte, oacQosConfigIndex=oacQosConfigIndex, oacQosPoliceExceedByte64=oacQosPoliceExceedByte64)
