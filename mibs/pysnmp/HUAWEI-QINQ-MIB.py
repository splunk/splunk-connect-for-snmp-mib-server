#
# PySNMP MIB module HUAWEI-QINQ-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-QINQ-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:36:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
VlanList, = mibBuilder.importSymbols("HUAWEI-L2IF-MIB", "VlanList")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, NotificationType, Counter64, iso, Counter32, Unsigned32, MibIdentifier, IpAddress, Bits, Integer32, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "NotificationType", "Counter64", "iso", "Counter32", "Unsigned32", "MibIdentifier", "IpAddress", "Bits", "Integer32", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "MacAddress")
hwQinQ = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116))
if mibBuilder.loadTexts: hwQinQ.setLastUpdated('200612141629Z')
if mibBuilder.loadTexts: hwQinQ.setOrganization('Huawei Technologies Co.,Ltd.')
class BpduIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53))
    namedValues = NamedValues(("stp01", 1), ("pauseFrame", 2), ("reserved02", 3), ("reserved03", 4), ("reserved04", 5), ("reserved05", 6), ("reserved06", 7), ("reserved07", 8), ("stp02", 9), ("reserved08", 10), ("hgmp", 11), ("reserved09", 12), ("reserved10", 13), ("reserved11", 14), ("reserved12", 15), ("reserved13", 16), ("reserved14", 17), ("reserved15", 18), ("reserved16", 19), ("reserved17", 20), ("isisLevel01", 21), ("isisLevel02", 22), ("reserved18", 23), ("reserved19", 24), ("reserved20", 25), ("reserved21", 26), ("reserved22", 27), ("reserved23", 28), ("reserved24", 29), ("reserved25", 30), ("reserved26", 31), ("reserved27", 32), ("gmrp", 33), ("gvrp", 34), ("reserved28", 35), ("reserved29", 36), ("reserved30", 37), ("reserved31", 38), ("reserved32", 39), ("reserved33", 40), ("reserved34", 41), ("reserved35", 42), ("reserved36", 43), ("reserved37", 44), ("reserved38", 45), ("reserved39", 46), ("reserved40", 47), ("reserved41", 48), ("lacp", 49), ("cdp", 50), ("pagp", 51), ("udld", 52), ("vtp", 53))

hwQinQSystemBase = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 1))
hwQinQSystemWellKnowMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSystemWellKnowMac.setStatus('current')
hwQinQSystemBridgeRole = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("provider", 2), ("customer", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSystemBridgeRole.setStatus('current')
hwBpduSystemDropPacketSta = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBpduSystemDropPacketSta.setStatus('current')
hwQinQSystemEtherType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSystemEtherType.setStatus('current')
hwQinQMngObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2))
hwQinQBpduTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1), )
if mibBuilder.loadTexts: hwQinQBpduTunnelTable.setStatus('current')
hwQinQBpduTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQBpduTunnelIndex"))
if mibBuilder.loadTexts: hwQinQBpduTunnelEntry.setStatus('current')
hwQinQBpduTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwQinQBpduTunnelIndex.setStatus('current')
hwQinQEtherEncpsType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQEtherEncpsType.setStatus('current')
hwQinQBpduTunnelEnableOneQBpduTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQBpduTunnelEnableOneQBpduTunnel.setStatus('current')
hwQinQBpduTunnelEnableBpduTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 4), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQBpduTunnelEnableBpduTag.setStatus('current')
hwQinQBpduTunnelEnableTwoQBpduTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQBpduTunnelEnableTwoQBpduTunnel.setStatus('current')
hwQinQBpduTunnelCustomerBpduTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQBpduTunnelCustomerBpduTag.setStatus('current')
hwQinQBpduTunnelCustomerBpduTagListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQBpduTunnelCustomerBpduTagListLow.setStatus('current')
hwQinQBpduTunnelCustomerBpduTagListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQBpduTunnelCustomerBpduTagListHigh.setStatus('current')
hwQinQRemarkOuterTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hexffff", 1), ("hex88a8", 2), ("hex9100", 3), ("hex8100", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQRemarkOuterTpid.setStatus('current')
hwQinQBpduTunnelEnableBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 1, 1, 10), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQBpduTunnelEnableBpduFilter.setStatus('current')
hwQinQSubIfVlanStackingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2), )
if mibBuilder.loadTexts: hwQinQSubIfVlanStackingTable.setStatus('current')
hwQinQSubIfVlanStackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfStackingIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfStackingCEVlanStart"))
if mibBuilder.loadTexts: hwQinQSubIfVlanStackingEntry.setStatus('current')
hwQinQSubIfStackingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfStackingIfIndex.setStatus('current')
hwQinQSubIfStackingCEVlanStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfStackingCEVlanStart.setStatus('current')
hwQinQSubIfStackingCEVlanEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfStackingCEVlanEnd.setStatus('current')
hwQinQSubIfStackGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfStackGroupId.setStatus('current')
hwQinQSubIfStackingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfStackingRowStatus.setStatus('current')
hwQinQSubIfStackingPEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfStackingPEVlan.setStatus('current')
hwQinQSubIfStackingStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3), )
if mibBuilder.loadTexts: hwQinQSubIfStackingStatTable.setStatus('current')
hwQinQSubIfStackingStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatCEVlan"))
if mibBuilder.loadTexts: hwQinQSubIfStackingStatEntry.setStatus('current')
hwQinQSubIfStackingStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfStackingStatIfIndex.setStatus('current')
hwQinQSubIfStackingStatCEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfStackingStatCEVlan.setStatus('current')
hwQinQSubIfStackStatGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatGroupId.setStatus('current')
hwQinQSubIfStackingStatOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackingStatOutPackets.setStatus('current')
hwQinQSubIfStackingStatOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackingStatOutBytes.setStatus('current')
hwQinQSubIfStackingStatInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackingStatInPackets.setStatus('current')
hwQinQSubIfStackingStatInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackingStatInBytes.setStatus('current')
hwQinQSubIfStackStatOutBdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatOutBdPackets.setStatus('current')
hwQinQSubIfStackStatInBdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatInBdPackets.setStatus('current')
hwQinQSubIfStackStatOutMuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatOutMuPackets.setStatus('current')
hwQinQSubIfStackStatInMuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatInMuPackets.setStatus('current')
hwQinQSubIfStackStatOutUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatOutUniPackets.setStatus('current')
hwQinQSubIfStackStatInUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfStackStatInUniPackets.setStatus('current')
hwQinQSubIfTermTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4), )
if mibBuilder.loadTexts: hwQinQSubIfTermTable.setStatus('current')
hwQinQSubIfTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfTermIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfTermPEVlan"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfTermCEVlanStart"))
if mibBuilder.loadTexts: hwQinQSubIfTermEntry.setStatus('current')
hwQinQSubIfTermIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfTermIfIndex.setStatus('current')
hwQinQSubIfTermPEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfTermPEVlan.setStatus('current')
hwQinQSubIfTermCEVlanStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1, 3), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfTermCEVlanStart.setStatus('current')
hwQinQSubIfTermCEVlanEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1, 4), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfTermCEVlanEnd.setStatus('current')
hwQinQSubIfTermGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfTermGroupId.setStatus('current')
hwQinQSubIfTermRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfTermRowStatus.setStatus('current')
hwQinQSubIfTermStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5), )
if mibBuilder.loadTexts: hwQinQSubIfTermStatTable.setStatus('current')
hwQinQSubIfTermStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatPEVlan"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatCEVlan"))
if mibBuilder.loadTexts: hwQinQSubIfTermStatEntry.setStatus('current')
hwQinQSubIfTermStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfTermStatIfIndex.setStatus('current')
hwQinQSubIfTermStatPEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfTermStatPEVlan.setStatus('current')
hwQinQSubIfTermStatCEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 3), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfTermStatCEVlan.setStatus('current')
hwQinQSubIfTermStatGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatGroupId.setStatus('current')
hwQinQSubIfTermStatOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutPackets.setStatus('current')
hwQinQSubIfTermStatOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutBytes.setStatus('current')
hwQinQSubIfTermStatInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatInPackets.setStatus('current')
hwQinQSubIfTermStatInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatInBytes.setStatus('current')
hwQinQSubIfTermStatOutBdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutBdPackets.setStatus('current')
hwQinQSubIfTermStatInBdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatInBdPackets.setStatus('current')
hwQinQSubIfTermStatOutMuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutMuPackets.setStatus('current')
hwQinQSubIfTermStatInMuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatInMuPackets.setStatus('current')
hwQinQSubIfTermStatOutUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatOutUniPackets.setStatus('current')
hwQinQSubIfTermStatInUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfTermStatInUniPackets.setStatus('current')
hwQinQStaticARPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6), )
if mibBuilder.loadTexts: hwQinQStaticARPCfgTable.setStatus('current')
hwQinQStaticARPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQStaticARPCfgIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQStaticARPCfgIp"))
if mibBuilder.loadTexts: hwQinQStaticARPCfgEntry.setStatus('current')
hwQinQStaticARPCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQStaticARPCfgIfIndex.setStatus('current')
hwQinQStaticARPCfgIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwQinQStaticARPCfgIp.setStatus('current')
hwQinQStaticARPCfgMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticARPCfgMac.setStatus('current')
hwQinQStaticARPCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1, 4), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticARPCfgVlan.setStatus('current')
hwQinQStaticARPCfgCEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticARPCfgCEVlan.setStatus('current')
hwQinQStaticARPCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticARPCfgRowStatus.setStatus('current')
hwQinQStaticMACCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7), )
if mibBuilder.loadTexts: hwQinQStaticMACCfgTable.setStatus('current')
hwQinQStaticMACCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgMac"), (0, "HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgVsiName"), (0, "HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgVlan"))
if mibBuilder.loadTexts: hwQinQStaticMACCfgEntry.setStatus('current')
hwQinQStaticMACCfgMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwQinQStaticMACCfgMac.setStatus('current')
hwQinQStaticMACCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQStaticMACCfgVlan.setStatus('current')
hwQinQStaticMACCfgVsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31)))
if mibBuilder.loadTexts: hwQinQStaticMACCfgVsiName.setStatus('current')
hwQinQStaticMACCfgPEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 4), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticMACCfgPEVlan.setStatus('current')
hwQinQStaticMACCfgCEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticMACCfgCEVlan.setStatus('current')
hwQinQStaticMACCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("dynamid", 1), ("static", 2), ("blackhole", 3), ("toobig", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticMACCfgType.setStatus('current')
hwQinQStaticMACCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 7), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticMACCfgIfIndex.setStatus('current')
hwQinQStaticMACCfgFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vlan", 1), ("vsi", 2), ("mapping", 3), ("qinqtermination", 4), ("dot1qtermination", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticMACCfgFlag.setStatus('current')
hwQinQStaticMACCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 7, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStaticMACCfgRowStatus.setStatus('current')
hwQinQSubIfDot1qTermTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8), )
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermTable.setStatus('current')
hwQinQSubIfDot1qTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermVidStart"))
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermEntry.setStatus('current')
hwQinQSubIfDot1qTermIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermIfIndex.setStatus('current')
hwQinQSubIfDot1qTermVidStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermVidStart.setStatus('current')
hwQinQSubIfDot1qTermVidEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8, 1, 3), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermVidEnd.setStatus('current')
hwQinQSubIfDot1qTermGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermGroupId.setStatus('current')
hwQinQSubIfDot1qTermRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermRowStatus.setStatus('current')
hwQinQSubIfDot1qTermStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9), )
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatTable.setStatus('current')
hwQinQSubIfDot1qTermStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatCEVlan"))
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatEntry.setStatus('current')
hwQinQSubIfDot1qTermStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatIfIndex.setStatus('current')
hwQinQSubIfDot1qTermStatCEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 2), VlanId())
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatCEVlan.setStatus('current')
hwQinQSubIfDot1qTermStatGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatGroupId.setStatus('current')
hwQinQSubIfDot1qTermStatOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutPackets.setStatus('current')
hwQinQSubIfDot1qTermStatOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutBytes.setStatus('current')
hwQinQSubIfDot1qTermStatInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInPackets.setStatus('current')
hwQinQSubIfDot1qTermStatInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInBytes.setStatus('current')
hwQinQSubIfDot1qTermStatOutBdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutBdPackets.setStatus('current')
hwQinQSubIfDot1qTermStatInBdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInBdPackets.setStatus('current')
hwQinQSubIfDot1qTermStatOutMuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutMuPackets.setStatus('current')
hwQinQSubIfDot1qTermStatInMuPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInMuPackets.setStatus('current')
hwQinQSubIfDot1qTermStatOutUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatOutUniPackets.setStatus('current')
hwQinQSubIfDot1qTermStatInUniPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 9, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwQinQSubIfDot1qTermStatInUniPackets.setStatus('current')
hwQinQModeCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 10), )
if mibBuilder.loadTexts: hwQinQModeCfgTable.setStatus('current')
hwQinQModeCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 10, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQModeCfgIfIndex"))
if mibBuilder.loadTexts: hwQinQModeCfgEntry.setStatus('current')
hwQinQModeCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 10, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQModeCfgIfIndex.setStatus('current')
hwQinQModeCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("common", 1), ("qinq", 2))).clone('common')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQModeCfgMode.setStatus('current')
hwQinQEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQEtherType.setStatus('current')
hwQinQCeEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQCeEtherType.setStatus('current')
hwQinQCtrlVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11), )
if mibBuilder.loadTexts: hwQinQCtrlVlanCfgTable.setStatus('current')
hwQinQCtrlVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQCtrlVlanCfgIfIndex"))
if mibBuilder.loadTexts: hwQinQCtrlVlanCfgEntry.setStatus('current')
hwQinQCtrlVlanCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQCtrlVlanCfgIfIndex.setStatus('current')
hwQinQCtrlVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQCtrlVlan.setStatus('current')
hwQinQSubIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qinq", 1), ("dot1q", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfType.setStatus('current')
hwQinQCtrlVlanFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rtprotocolenable", 1), ("original", 2), ("localswitch", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQCtrlVlanFlag.setStatus('current')
hwQinQCtrlVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQCtrlVlanRowStatus.setStatus('current')
hwQinQFlexibleFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 11, 1, 6), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQFlexibleFlag.setStatus('current')
hwQinQGroupCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12), )
if mibBuilder.loadTexts: hwQinQGroupCfgTable.setStatus('current')
hwQinQGroupCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQGroupCfgIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQGroupId"))
if mibBuilder.loadTexts: hwQinQGroupCfgEntry.setStatus('current')
hwQinQGroupCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQGroupCfgIfIndex.setStatus('current')
hwQinQGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: hwQinQGroupId.setStatus('current')
hwQinQGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("single", 1), ("multi", 2))).clone('single')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQGroupType.setStatus('current')
hwQinQGroupStat = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12, 1, 4), EnabledStatus().clone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQGroupStat.setStatus('current')
hwQinQGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQGroupRowStatus.setStatus('current')
hwQinQAsymmetryCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 13), )
if mibBuilder.loadTexts: hwQinQAsymmetryCfgTable.setStatus('current')
hwQinQAsymmetryCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 13, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQAsymmetryCfgIfIndex"))
if mibBuilder.loadTexts: hwQinQAsymmetryCfgEntry.setStatus('current')
hwQinQAsymmetryCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 13, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQAsymmetryCfgIfIndex.setStatus('current')
hwQinQSubIfAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("symmetry", 1), ("asymmetry", 2), ("transparent", 3))).clone('asymmetry')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSubIfAsymmetry.setStatus('current')
hwQinQAsymmetryUserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 13, 1, 3), EnabledStatus().clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQAsymmetryUserMode.setStatus('current')
hwQinQRemarkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 14), )
if mibBuilder.loadTexts: hwQinQRemarkCfgTable.setStatus('current')
hwQinQRemarkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 14, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQRemarkCfgIfIndex"))
if mibBuilder.loadTexts: hwQinQRemarkCfgEntry.setStatus('current')
hwQinQRemarkCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 14, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQRemarkCfgIfIndex.setStatus('current')
hwQinQPriorityRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("specify0", 0), ("specify1", 1), ("specify2", 2), ("specify3", 3), ("specify4", 4), ("specify5", 5), ("specify6", 6), ("specify7", 7), ("cevid", 8), ("pevid", 9))).clone('pevid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQPriorityRemark.setStatus('current')
hwBpduTunnelIngressTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 15), )
if mibBuilder.loadTexts: hwBpduTunnelIngressTable.setStatus('current')
hwBpduTunnelIngressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 15, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwBpduTunnelIngressPortIndex"), (0, "HUAWEI-QINQ-MIB", "hwBpduTunnelBpduIngressMacIndex"))
if mibBuilder.loadTexts: hwBpduTunnelIngressEntry.setStatus('current')
hwBpduTunnelIngressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwBpduTunnelIngressPortIndex.setStatus('current')
hwBpduTunnelBpduIngressMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 15, 1, 2), BpduIndex())
if mibBuilder.loadTexts: hwBpduTunnelBpduIngressMacIndex.setStatus('current')
hwBpduTunnelIngressAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 15, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnelIngressAddress.setStatus('current')
hwBpduTunnelIngressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 15, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnelIngressRowStatus.setStatus('current')
hwBpduTunnelEgressTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 16), )
if mibBuilder.loadTexts: hwBpduTunnelEgressTable.setStatus('current')
hwBpduTunnelEgressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 16, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwBpduTunnelEgressPortIndex"), (0, "HUAWEI-QINQ-MIB", "hwBpduTunnelBpduEgressMacIndex"))
if mibBuilder.loadTexts: hwBpduTunnelEgressEntry.setStatus('current')
hwBpduTunnelEgressPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwBpduTunnelEgressPortIndex.setStatus('current')
hwBpduTunnelBpduEgressMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 16, 1, 2), BpduIndex())
if mibBuilder.loadTexts: hwBpduTunnelBpduEgressMacIndex.setStatus('current')
hwBpduTunnelEgressAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 16, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnelEgressAddress.setStatus('current')
hwBpduTunnelEgressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 16, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnelEgressRowStatus.setStatus('current')
hwBpduTunnelVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 17), )
if mibBuilder.loadTexts: hwBpduTunnelVlanTable.setStatus('current')
hwBpduTunnelVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 17, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwBpduTunnelPortIndex"))
if mibBuilder.loadTexts: hwBpduTunnelVlanEntry.setStatus('current')
hwBpduTunnelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hwBpduTunnelPortIndex.setStatus('current')
hwBpduTunnelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBpduTunnelEnable.setStatus('current')
hwBpduTunnelVlanListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 17, 1, 3), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBpduTunnelVlanListLow.setStatus('current')
hwBpduTunnelVlanListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 17, 1, 4), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBpduTunnelVlanListHigh.setStatus('current')
hwBpduTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 18), )
if mibBuilder.loadTexts: hwBpduTunnelTable.setStatus('current')
hwBpduTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 18, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwBpduTunnelBpduIndex"))
if mibBuilder.loadTexts: hwBpduTunnelEntry.setStatus('current')
hwBpduTunnelBpduIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 18, 1, 1), BpduIndex())
if mibBuilder.loadTexts: hwBpduTunnelBpduIndex.setStatus('current')
hwBpduTunnelBpduEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBpduTunnelBpduEnable.setStatus('current')
hwBpduTunnelMultiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 18, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnelMultiAddress.setStatus('current')
hwBpduTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 18, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBpduTunnelRowStatus.setStatus('current')
hwQinQSwapCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 19), )
if mibBuilder.loadTexts: hwQinQSwapCfgTable.setStatus('current')
hwQinQSwapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 19, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSwapCfgIfIndex"))
if mibBuilder.loadTexts: hwQinQSwapCfgEntry.setStatus('current')
hwQinQSwapCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 19, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSwapCfgIfIndex.setStatus('current')
hwQinQSwapCfgFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 19, 1, 2), EnabledStatus().clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSwapCfgFlag.setStatus('current')
hwQinQSubIfMapTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20), )
if mibBuilder.loadTexts: hwQinQSubIfMapTable.setStatus('current')
hwQinQSubIfMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQSubIfMapIfIndex"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfPEVlan"), (0, "HUAWEI-QINQ-MIB", "hwQinQSubIfCEVlanStart"))
if mibBuilder.loadTexts: hwQinQSubIfMapEntry.setStatus('current')
hwQinQSubIfMapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQSubIfMapIfIndex.setStatus('current')
hwQinQSubIfPEVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hwQinQSubIfPEVlan.setStatus('current')
hwQinQSubIfCEVlanStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hwQinQSubIfCEVlanStart.setStatus('current')
hwQinQSubIfCEVlanEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfCEVlanEnd.setStatus('current')
hwQinQSubIfPEVlanMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfPEVlanMap.setStatus('current')
hwQinQSubIfPEEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfPEEtherType.setStatus('current')
hwQinQSubIfCEVlanMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfCEVlanMap.setStatus('current')
hwQinQSubIfCEEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfCEEtherType.setStatus('current')
hwQinQSubIfMapGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfMapGroupId.setStatus('current')
hwQinQSubIfMapPe8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("specify0", 0), ("specify1", 1), ("specify2", 2), ("specify3", 3), ("specify4", 4), ("specify5", 5), ("specify6", 6), ("specify7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSubIfMapPe8021p.setStatus('current')
hwQinQSubIfMapCe8021p = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("specify0", 0), ("specify1", 1), ("specify2", 2), ("specify3", 3), ("specify4", 4), ("specify5", 5), ("specify6", 6), ("specify7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwQinQSubIfMapCe8021p.setStatus('current')
hwQinQSubIfMapCetoPeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 12), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfMapCetoPeFlag.setStatus('current')
hwQinQSubIfMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 20, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQSubIfMapRowStatus.setStatus('current')
hwQinQStackingVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 21), )
if mibBuilder.loadTexts: hwQinQStackingVlanCfgTable.setStatus('current')
hwQinQStackingVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 21, 1), ).setIndexNames((0, "HUAWEI-QINQ-MIB", "hwQinQStackingVlanCfgIfIndex"))
if mibBuilder.loadTexts: hwQinQStackingVlanCfgEntry.setStatus('current')
hwQinQStackingVlanCfgIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 21, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwQinQStackingVlanCfgIfIndex.setStatus('current')
hwQinQStackingVlanCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 21, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStackingVlanCfgVlanId.setStatus('current')
hwQinQStackingVlanCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 2, 21, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwQinQStackingVlanCfgRowStatus.setStatus('current')
hwQinQConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3))
hwQinQGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1))
hwQinQCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 2))
hwQinQCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 2, 1)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSystemBaseGroup"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelGroup"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfVlanStackingGroup"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatGroup"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermGroup"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQCompliance = hwQinQCompliance.setStatus('current')
hwQinQSystemBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 1)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSystemWellKnowMac"), ("HUAWEI-QINQ-MIB", "hwQinQSystemBridgeRole"), ("HUAWEI-QINQ-MIB", "hwBpduSystemDropPacketSta"), ("HUAWEI-QINQ-MIB", "hwQinQSystemEtherType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSystemBaseGroup = hwQinQSystemBaseGroup.setStatus('current')
hwQinQBpduTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 2)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQEtherEncpsType"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelEnableOneQBpduTunnel"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelEnableBpduTag"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelEnableTwoQBpduTunnel"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelCustomerBpduTag"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelCustomerBpduTagListLow"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelCustomerBpduTagListHigh"), ("HUAWEI-QINQ-MIB", "hwQinQRemarkOuterTpid"), ("HUAWEI-QINQ-MIB", "hwQinQBpduTunnelEnableBpduFilter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQBpduTunnelGroup = hwQinQBpduTunnelGroup.setStatus('current')
hwQinQSubIfVlanStackingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 3)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingCEVlanEnd"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingRowStatus"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingPEVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfVlanStackingGroup = hwQinQSubIfVlanStackingGroup.setStatus('current')
hwQinQSubIfStackingStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 4)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatOutPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatOutBytes"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatInPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackingStatInBytes"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatOutBdPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatInBdPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatOutMuPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatInMuPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatOutUniPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfStackStatInUniPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfStackingStatGroup = hwQinQSubIfStackingStatGroup.setStatus('current')
hwQinQSubIfTermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 5)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfTermCEVlanEnd"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfTermGroup = hwQinQSubIfTermGroup.setStatus('current')
hwQinQSubIfTermStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 6)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatOutPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatOutBytes"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatInPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatInBytes"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatOutBdPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatInBdPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatOutMuPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatInMuPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatOutUniPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfTermStatInUniPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfTermStatGroup = hwQinQSubIfTermStatGroup.setStatus('current')
hwQinQStaticARPCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 7)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQStaticARPCfgMac"), ("HUAWEI-QINQ-MIB", "hwQinQStaticARPCfgVlan"), ("HUAWEI-QINQ-MIB", "hwQinQStaticARPCfgCEVlan"), ("HUAWEI-QINQ-MIB", "hwQinQStaticARPCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQStaticARPCfgGroup = hwQinQStaticARPCfgGroup.setStatus('current')
hwQinQStaticMACCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 8)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgPEVlan"), ("HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgCEVlan"), ("HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgType"), ("HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgIfIndex"), ("HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgFlag"), ("HUAWEI-QINQ-MIB", "hwQinQStaticMACCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQStaticMACCfgGroup = hwQinQStaticMACCfgGroup.setStatus('current')
hwQinQSubIfDot1qTermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 9)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermVidEnd"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfDot1qTermGroup = hwQinQSubIfDot1qTermGroup.setStatus('current')
hwQinQSubIfDot1qTermStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 10)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatOutPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatOutBytes"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatInPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatInBytes"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatOutBdPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatInBdPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatOutMuPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatInMuPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatOutUniPackets"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfDot1qTermStatInUniPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfDot1qTermStatGroup = hwQinQSubIfDot1qTermStatGroup.setStatus('current')
hwQinQModeCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 11)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQModeCfgMode"), ("HUAWEI-QINQ-MIB", "hwQinQEtherType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQModeCfgGroup = hwQinQModeCfgGroup.setStatus('current')
hwQinQCtrlVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 12)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQCtrlVlan"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfType"), ("HUAWEI-QINQ-MIB", "hwQinQCtrlVlanFlag"), ("HUAWEI-QINQ-MIB", "hwQinQCtrlVlanRowStatus"), ("HUAWEI-QINQ-MIB", "hwQinQFlexibleFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQCtrlVlanCfgGroup = hwQinQCtrlVlanCfgGroup.setStatus('current')
hwQinQGroupCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 13)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQGroupType"), ("HUAWEI-QINQ-MIB", "hwQinQGroupStat"), ("HUAWEI-QINQ-MIB", "hwQinQGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQGroupCfgGroup = hwQinQGroupCfgGroup.setStatus('current')
hwQinQAsymmetryCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 14)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfAsymmetry"), ("HUAWEI-QINQ-MIB", "hwQinQAsymmetryUserMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQAsymmetryCfgGroup = hwQinQAsymmetryCfgGroup.setStatus('current')
hwQinQRemarkCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 15)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQPriorityRemark"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQRemarkCfgGroup = hwQinQRemarkCfgGroup.setStatus('current')
hwBpduTunnelIngressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 16)).setObjects(("HUAWEI-QINQ-MIB", "hwBpduTunnelIngressAddress"), ("HUAWEI-QINQ-MIB", "hwBpduTunnelIngressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBpduTunnelIngressGroup = hwBpduTunnelIngressGroup.setStatus('current')
hwBpduTunnelEgressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 17)).setObjects(("HUAWEI-QINQ-MIB", "hwBpduTunnelEgressAddress"), ("HUAWEI-QINQ-MIB", "hwBpduTunnelEgressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBpduTunnelEgressGroup = hwBpduTunnelEgressGroup.setStatus('current')
hwBpduTunnelVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 18)).setObjects(("HUAWEI-QINQ-MIB", "hwBpduTunnelEnable"), ("HUAWEI-QINQ-MIB", "hwBpduTunnelVlanListLow"), ("HUAWEI-QINQ-MIB", "hwBpduTunnelVlanListHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBpduTunnelVlanGroup = hwBpduTunnelVlanGroup.setStatus('current')
hwBpduTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 19)).setObjects(("HUAWEI-QINQ-MIB", "hwBpduTunnelBpduEnable"), ("HUAWEI-QINQ-MIB", "hwBpduTunnelMultiAddress"), ("HUAWEI-QINQ-MIB", "hwBpduTunnelRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBpduTunnelGroup = hwBpduTunnelGroup.setStatus('current')
hwQinQSwapCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 20)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSwapCfgFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSwapCfgGroup = hwQinQSwapCfgGroup.setStatus('current')
hwQinQSubIfMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 21)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQSubIfCEVlanEnd"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfPEVlanMap"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfPEEtherType"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfCEVlanMap"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfCEEtherType"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfMapGroupId"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfMapRowStatus"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfMapPe8021p"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfMapCe8021p"), ("HUAWEI-QINQ-MIB", "hwQinQSubIfMapCetoPeFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQSubIfMapGroup = hwQinQSubIfMapGroup.setStatus('current')
hwQinQStackingVlanCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 116, 3, 1, 22)).setObjects(("HUAWEI-QINQ-MIB", "hwQinQStackingVlanCfgVlanId"), ("HUAWEI-QINQ-MIB", "hwQinQStackingVlanCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwQinQStackingVlanCfgGroup = hwQinQStackingVlanCfgGroup.setStatus('current')
mibBuilder.exportSymbols("HUAWEI-QINQ-MIB", hwQinQBpduTunnelEnableBpduTag=hwQinQBpduTunnelEnableBpduTag, hwQinQSubIfStackingStatInBytes=hwQinQSubIfStackingStatInBytes, hwQinQSubIfStackStatInBdPackets=hwQinQSubIfStackStatInBdPackets, hwQinQSwapCfgFlag=hwQinQSwapCfgFlag, hwQinQSubIfMapIfIndex=hwQinQSubIfMapIfIndex, hwQinQSubIfDot1qTermStatIfIndex=hwQinQSubIfDot1qTermStatIfIndex, hwQinQSubIfDot1qTermVidStart=hwQinQSubIfDot1qTermVidStart, hwQinQSubIfTermStatOutPackets=hwQinQSubIfTermStatOutPackets, hwQinQAsymmetryUserMode=hwQinQAsymmetryUserMode, hwQinQAsymmetryCfgEntry=hwQinQAsymmetryCfgEntry, hwQinQSubIfStackStatOutMuPackets=hwQinQSubIfStackStatOutMuPackets, hwQinQSubIfDot1qTermStatInBytes=hwQinQSubIfDot1qTermStatInBytes, hwBpduTunnelIngressPortIndex=hwBpduTunnelIngressPortIndex, hwBpduTunnelIngressGroup=hwBpduTunnelIngressGroup, hwQinQRemarkCfgIfIndex=hwQinQRemarkCfgIfIndex, hwQinQStaticMACCfgIfIndex=hwQinQStaticMACCfgIfIndex, hwBpduTunnelPortIndex=hwBpduTunnelPortIndex, hwQinQBpduTunnelEnableBpduFilter=hwQinQBpduTunnelEnableBpduFilter, hwQinQModeCfgTable=hwQinQModeCfgTable, hwQinQSwapCfgTable=hwQinQSwapCfgTable, hwQinQSubIfMapCe8021p=hwQinQSubIfMapCe8021p, hwQinQSystemBase=hwQinQSystemBase, hwQinQSubIfDot1qTermStatOutUniPackets=hwQinQSubIfDot1qTermStatOutUniPackets, hwQinQGroupRowStatus=hwQinQGroupRowStatus, hwQinQStaticMACCfgCEVlan=hwQinQStaticMACCfgCEVlan, hwBpduTunnelVlanGroup=hwBpduTunnelVlanGroup, hwBpduTunnelVlanListLow=hwBpduTunnelVlanListLow, hwQinQSubIfTermTable=hwQinQSubIfTermTable, hwQinQSubIfDot1qTermStatInUniPackets=hwQinQSubIfDot1qTermStatInUniPackets, hwBpduTunnelVlanEntry=hwBpduTunnelVlanEntry, hwQinQBpduTunnelCustomerBpduTagListLow=hwQinQBpduTunnelCustomerBpduTagListLow, hwQinQSubIfMapCetoPeFlag=hwQinQSubIfMapCetoPeFlag, hwQinQGroupCfgGroup=hwQinQGroupCfgGroup, hwQinQSubIfStackStatOutUniPackets=hwQinQSubIfStackStatOutUniPackets, hwQinQBpduTunnelTable=hwQinQBpduTunnelTable, hwQinQSubIfStackingStatCEVlan=hwQinQSubIfStackingStatCEVlan, hwQinQModeCfgMode=hwQinQModeCfgMode, hwQinQRemarkCfgEntry=hwQinQRemarkCfgEntry, hwQinQSubIfDot1qTermIfIndex=hwQinQSubIfDot1qTermIfIndex, hwQinQCtrlVlanFlag=hwQinQCtrlVlanFlag, hwQinQSubIfTermCEVlanEnd=hwQinQSubIfTermCEVlanEnd, hwQinQSubIfDot1qTermStatCEVlan=hwQinQSubIfDot1qTermStatCEVlan, hwBpduTunnelRowStatus=hwBpduTunnelRowStatus, hwQinQSubIfMapEntry=hwQinQSubIfMapEntry, hwQinQBpduTunnelEnableTwoQBpduTunnel=hwQinQBpduTunnelEnableTwoQBpduTunnel, hwBpduTunnelEntry=hwBpduTunnelEntry, hwQinQSubIfVlanStackingTable=hwQinQSubIfVlanStackingTable, hwQinQSubIfDot1qTermGroup=hwQinQSubIfDot1qTermGroup, hwQinQSubIfDot1qTermVidEnd=hwQinQSubIfDot1qTermVidEnd, hwQinQCeEtherType=hwQinQCeEtherType, hwQinQStaticARPCfgVlan=hwQinQStaticARPCfgVlan, hwQinQSubIfTermStatInPackets=hwQinQSubIfTermStatInPackets, hwBpduTunnelVlanListHigh=hwBpduTunnelVlanListHigh, hwQinQSubIfStackStatInMuPackets=hwQinQSubIfStackStatInMuPackets, hwQinQSystemWellKnowMac=hwQinQSystemWellKnowMac, hwQinQSubIfTermStatIfIndex=hwQinQSubIfTermStatIfIndex, hwQinQRemarkCfgGroup=hwQinQRemarkCfgGroup, hwQinQSubIfTermCEVlanStart=hwQinQSubIfTermCEVlanStart, hwBpduSystemDropPacketSta=hwBpduSystemDropPacketSta, hwQinQSubIfCEEtherType=hwQinQSubIfCEEtherType, hwQinQSubIfStackStatInUniPackets=hwQinQSubIfStackStatInUniPackets, hwQinQStaticMACCfgTable=hwQinQStaticMACCfgTable, hwBpduTunnelIngressTable=hwBpduTunnelIngressTable, hwQinQModeCfgEntry=hwQinQModeCfgEntry, hwQinQGroups=hwQinQGroups, hwQinQCtrlVlanCfgEntry=hwQinQCtrlVlanCfgEntry, hwBpduTunnelIngressEntry=hwBpduTunnelIngressEntry, hwQinQStaticARPCfgRowStatus=hwQinQStaticARPCfgRowStatus, hwQinQSwapCfgIfIndex=hwQinQSwapCfgIfIndex, hwBpduTunnelEgressGroup=hwBpduTunnelEgressGroup, hwQinQSystemEtherType=hwQinQSystemEtherType, hwQinQCtrlVlanRowStatus=hwQinQCtrlVlanRowStatus, hwQinQMngObjects=hwQinQMngObjects, hwQinQBpduTunnelGroup=hwQinQBpduTunnelGroup, hwQinQSubIfStackingCEVlanEnd=hwQinQSubIfStackingCEVlanEnd, hwQinQStackingVlanCfgRowStatus=hwQinQStackingVlanCfgRowStatus, hwQinQSubIfTermStatInMuPackets=hwQinQSubIfTermStatInMuPackets, hwQinQStackingVlanCfgTable=hwQinQStackingVlanCfgTable, hwQinQSubIfTermStatOutBdPackets=hwQinQSubIfTermStatOutBdPackets, hwQinQBpduTunnelCustomerBpduTag=hwQinQBpduTunnelCustomerBpduTag, hwQinQSubIfPEEtherType=hwQinQSubIfPEEtherType, hwQinQSubIfDot1qTermStatEntry=hwQinQSubIfDot1qTermStatEntry, hwQinQStaticARPCfgEntry=hwQinQStaticARPCfgEntry, hwQinQGroupCfgTable=hwQinQGroupCfgTable, hwQinQSubIfDot1qTermTable=hwQinQSubIfDot1qTermTable, hwQinQSubIfDot1qTermStatOutBdPackets=hwQinQSubIfDot1qTermStatOutBdPackets, hwQinQSubIfStackingRowStatus=hwQinQSubIfStackingRowStatus, hwQinQStackingVlanCfgVlanId=hwQinQStackingVlanCfgVlanId, hwQinQSubIfTermGroupId=hwQinQSubIfTermGroupId, hwQinQSubIfVlanStackingGroup=hwQinQSubIfVlanStackingGroup, hwQinQGroupCfgEntry=hwQinQGroupCfgEntry, hwQinQSubIfTermStatGroup=hwQinQSubIfTermStatGroup, hwQinQStaticMACCfgVsiName=hwQinQStaticMACCfgVsiName, hwQinQSubIfStackStatOutBdPackets=hwQinQSubIfStackStatOutBdPackets, hwQinQSubIfDot1qTermRowStatus=hwQinQSubIfDot1qTermRowStatus, hwQinQPriorityRemark=hwQinQPriorityRemark, hwQinQSubIfTermStatEntry=hwQinQSubIfTermStatEntry, hwQinQSwapCfgGroup=hwQinQSwapCfgGroup, hwQinQCtrlVlanCfgIfIndex=hwQinQCtrlVlanCfgIfIndex, hwQinQStaticARPCfgMac=hwQinQStaticARPCfgMac, hwQinQCompliances=hwQinQCompliances, hwQinQRemarkOuterTpid=hwQinQRemarkOuterTpid, hwQinQSubIfDot1qTermStatOutMuPackets=hwQinQSubIfDot1qTermStatOutMuPackets, hwQinQStaticMACCfgVlan=hwQinQStaticMACCfgVlan, hwQinQSubIfPEVlanMap=hwQinQSubIfPEVlanMap, hwQinQSubIfTermStatInBytes=hwQinQSubIfTermStatInBytes, hwQinQSubIfStackStatGroupId=hwQinQSubIfStackStatGroupId, hwBpduTunnelBpduIndex=hwBpduTunnelBpduIndex, hwQinQStaticMACCfgFlag=hwQinQStaticMACCfgFlag, hwQinQGroupCfgIfIndex=hwQinQGroupCfgIfIndex, hwQinQSubIfDot1qTermStatTable=hwQinQSubIfDot1qTermStatTable, hwQinQBpduTunnelEnableOneQBpduTunnel=hwQinQBpduTunnelEnableOneQBpduTunnel, hwQinQGroupStat=hwQinQGroupStat, hwBpduTunnelEgressTable=hwBpduTunnelEgressTable, hwQinQSubIfDot1qTermStatGroup=hwQinQSubIfDot1qTermStatGroup, hwQinQSubIfMapGroup=hwQinQSubIfMapGroup, hwQinQSubIfAsymmetry=hwQinQSubIfAsymmetry, hwQinQConformance=hwQinQConformance, hwQinQSubIfMapGroupId=hwQinQSubIfMapGroupId, hwQinQCtrlVlanCfgTable=hwQinQCtrlVlanCfgTable, hwQinQSubIfDot1qTermStatGroupId=hwQinQSubIfDot1qTermStatGroupId, hwQinQSubIfPEVlan=hwQinQSubIfPEVlan, hwQinQSubIfDot1qTermGroupId=hwQinQSubIfDot1qTermGroupId, hwQinQSubIfStackingStatTable=hwQinQSubIfStackingStatTable, hwQinQSubIfTermStatOutMuPackets=hwQinQSubIfTermStatOutMuPackets, hwQinQStaticMACCfgGroup=hwQinQStaticMACCfgGroup, hwQinQStaticARPCfgGroup=hwQinQStaticARPCfgGroup, BpduIndex=BpduIndex, hwBpduTunnelBpduEgressMacIndex=hwBpduTunnelBpduEgressMacIndex, hwQinQStackingVlanCfgIfIndex=hwQinQStackingVlanCfgIfIndex, hwQinQGroupId=hwQinQGroupId, hwQinQSystemBaseGroup=hwQinQSystemBaseGroup, hwBpduTunnelEnable=hwBpduTunnelEnable, hwQinQSubIfStackGroupId=hwQinQSubIfStackGroupId, hwBpduTunnelEgressPortIndex=hwBpduTunnelEgressPortIndex, hwQinQSubIfStackingPEVlan=hwQinQSubIfStackingPEVlan, hwQinQSubIfMapPe8021p=hwQinQSubIfMapPe8021p, hwQinQModeCfgIfIndex=hwQinQModeCfgIfIndex, hwBpduTunnelBpduIngressMacIndex=hwBpduTunnelBpduIngressMacIndex, hwQinQSubIfType=hwQinQSubIfType, hwBpduTunnelVlanTable=hwBpduTunnelVlanTable, hwQinQStaticMACCfgRowStatus=hwQinQStaticMACCfgRowStatus, hwQinQSubIfCEVlanMap=hwQinQSubIfCEVlanMap, hwQinQSubIfTermStatOutBytes=hwQinQSubIfTermStatOutBytes, hwQinQGroupType=hwQinQGroupType, hwQinQSubIfMapRowStatus=hwQinQSubIfMapRowStatus, hwBpduTunnelTable=hwBpduTunnelTable, hwBpduTunnelBpduEnable=hwBpduTunnelBpduEnable, hwQinQEtherType=hwQinQEtherType, hwBpduTunnelGroup=hwBpduTunnelGroup, hwQinQSubIfDot1qTermStatOutBytes=hwQinQSubIfDot1qTermStatOutBytes, hwBpduTunnelEgressEntry=hwBpduTunnelEgressEntry, hwQinQSubIfTermStatCEVlan=hwQinQSubIfTermStatCEVlan, hwQinQSubIfDot1qTermStatOutPackets=hwQinQSubIfDot1qTermStatOutPackets, hwQinQBpduTunnelIndex=hwQinQBpduTunnelIndex, hwQinQSubIfStackingIfIndex=hwQinQSubIfStackingIfIndex, hwQinQSubIfTermIfIndex=hwQinQSubIfTermIfIndex, hwQinQSubIfStackingStatIfIndex=hwQinQSubIfStackingStatIfIndex, hwQinQSubIfStackingStatEntry=hwQinQSubIfStackingStatEntry, hwQinQStaticMACCfgEntry=hwQinQStaticMACCfgEntry, hwQinQEtherEncpsType=hwQinQEtherEncpsType, hwQinQAsymmetryCfgTable=hwQinQAsymmetryCfgTable, hwBpduTunnelMultiAddress=hwBpduTunnelMultiAddress, hwQinQSubIfTermStatTable=hwQinQSubIfTermStatTable, hwQinQStaticARPCfgCEVlan=hwQinQStaticARPCfgCEVlan, hwQinQStaticMACCfgMac=hwQinQStaticMACCfgMac, hwQinQFlexibleFlag=hwQinQFlexibleFlag, hwQinQSubIfMapTable=hwQinQSubIfMapTable, hwQinQStackingVlanCfgEntry=hwQinQStackingVlanCfgEntry, hwQinQ=hwQinQ, hwQinQSubIfTermStatPEVlan=hwQinQSubIfTermStatPEVlan, hwQinQStaticARPCfgTable=hwQinQStaticARPCfgTable, hwQinQCompliance=hwQinQCompliance, hwQinQSubIfStackingStatOutBytes=hwQinQSubIfStackingStatOutBytes, hwQinQBpduTunnelCustomerBpduTagListHigh=hwQinQBpduTunnelCustomerBpduTagListHigh, hwBpduTunnelEgressRowStatus=hwBpduTunnelEgressRowStatus, hwQinQSubIfVlanStackingEntry=hwQinQSubIfVlanStackingEntry, hwQinQSubIfTermRowStatus=hwQinQSubIfTermRowStatus, hwQinQSubIfTermStatInBdPackets=hwQinQSubIfTermStatInBdPackets, hwQinQModeCfgGroup=hwQinQModeCfgGroup, hwQinQStaticMACCfgPEVlan=hwQinQStaticMACCfgPEVlan, hwQinQSubIfDot1qTermStatInBdPackets=hwQinQSubIfDot1qTermStatInBdPackets, hwBpduTunnelEgressAddress=hwBpduTunnelEgressAddress, hwQinQRemarkCfgTable=hwQinQRemarkCfgTable, hwQinQSubIfTermStatInUniPackets=hwQinQSubIfTermStatInUniPackets, hwQinQSubIfTermStatGroupId=hwQinQSubIfTermStatGroupId, hwQinQSubIfCEVlanEnd=hwQinQSubIfCEVlanEnd, hwQinQCtrlVlanCfgGroup=hwQinQCtrlVlanCfgGroup, hwQinQSubIfStackingStatInPackets=hwQinQSubIfStackingStatInPackets, hwQinQStaticMACCfgType=hwQinQStaticMACCfgType, hwQinQAsymmetryCfgGroup=hwQinQAsymmetryCfgGroup, hwQinQSystemBridgeRole=hwQinQSystemBridgeRole, hwQinQCtrlVlan=hwQinQCtrlVlan, hwQinQSubIfDot1qTermEntry=hwQinQSubIfDot1qTermEntry, hwQinQSubIfDot1qTermStatInMuPackets=hwQinQSubIfDot1qTermStatInMuPackets, hwQinQSubIfStackingCEVlanStart=hwQinQSubIfStackingCEVlanStart, hwQinQBpduTunnelEntry=hwQinQBpduTunnelEntry, hwQinQSubIfStackingStatOutPackets=hwQinQSubIfStackingStatOutPackets, hwQinQSubIfStackingStatGroup=hwQinQSubIfStackingStatGroup, hwQinQStackingVlanCfgGroup=hwQinQStackingVlanCfgGroup, hwBpduTunnelIngressAddress=hwBpduTunnelIngressAddress, hwQinQSwapCfgEntry=hwQinQSwapCfgEntry, hwQinQStaticARPCfgIfIndex=hwQinQStaticARPCfgIfIndex, hwBpduTunnelIngressRowStatus=hwBpduTunnelIngressRowStatus, hwQinQSubIfTermGroup=hwQinQSubIfTermGroup, hwQinQSubIfDot1qTermStatInPackets=hwQinQSubIfDot1qTermStatInPackets, hwQinQSubIfTermPEVlan=hwQinQSubIfTermPEVlan, PYSNMP_MODULE_ID=hwQinQ, hwQinQSubIfCEVlanStart=hwQinQSubIfCEVlanStart, hwQinQAsymmetryCfgIfIndex=hwQinQAsymmetryCfgIfIndex, hwQinQStaticARPCfgIp=hwQinQStaticARPCfgIp, hwQinQSubIfTermEntry=hwQinQSubIfTermEntry, hwQinQSubIfTermStatOutUniPackets=hwQinQSubIfTermStatOutUniPackets)
