#
# PySNMP MIB module NOVELL-NLSP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOVELL-NLSP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:14:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
mibDoc, = mibBuilder.importSymbols("NOVELL-IPX-MIB", "mibDoc")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, TimeTicks, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, MibIdentifier, Counter64, Bits, ObjectIdentity, Counter32, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "MibIdentifier", "Counter64", "Bits", "ObjectIdentity", "Counter32", "Integer32", "ModuleIdentity")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
nlsp = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19))
nlspSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 1))
nlspCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 2))
nlspForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 3))
nlspNeighbors = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 4))
nlspTranslation = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 5))
nlspGraph = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 6))
nlspLSP = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 19, 7))
class SystemID(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class NLSPID(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(7, 7)
    fixedLength = 7

class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

nlspSysTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1), )
if mibBuilder.loadTexts: nlspSysTable.setStatus('mandatory')
nlspSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspSysInstance"))
if mibBuilder.loadTexts: nlspSysEntry.setStatus('mandatory')
nlspSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysInstance.setStatus('mandatory')
nlspSysState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("nlspLevel1Router", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysState.setStatus('mandatory')
nlspSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 3), SystemID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysID.setStatus('mandatory')
nlspSysMinNonBcastLSPTransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysMinNonBcastLSPTransInt.setStatus('mandatory')
nlspSysMinBcastLSPTransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysMinBcastLSPTransInt.setStatus('mandatory')
nlspSysMinLSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysMinLSPGenInt.setStatus('mandatory')
nlspSysMaxLSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50000)).clone(7200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysMaxLSPGenInt.setStatus('mandatory')
nlspSysMaxLSPAge = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50000)).clone(7500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysMaxLSPAge.setStatus('mandatory')
nlspSysBcastHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysBcastHelloInt.setStatus('mandatory')
nlspSysNonBcastHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysNonBcastHelloInt.setStatus('mandatory')
nlspSysDRBcastHelloInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysDRBcastHelloInt.setStatus('mandatory')
nlspSysHoldTimeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 20)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysHoldTimeMultiplier.setStatus('mandatory')
nlspSysCompSNPInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysCompSNPInt.setStatus('mandatory')
nlspSysPartSNPInt = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysPartSNPInt.setStatus('mandatory')
nlspSysWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysWaitTime.setStatus('mandatory')
nlspSysOrigL1LSPBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 4096)).clone(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysOrigL1LSPBufSize.setStatus('mandatory')
nlspSysVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysVersion.setStatus('mandatory')
nlspSysCorrLSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysCorrLSPs.setStatus('mandatory')
nlspSysL1Overloaded = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysL1Overloaded.setStatus('mandatory')
nlspSysL1DbaseOverloads = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysL1DbaseOverloads.setStatus('mandatory')
nlspSysMaxSeqNums = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysMaxSeqNums.setStatus('mandatory')
nlspSysSeqNumSkips = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysSeqNumSkips.setStatus('mandatory')
nlspSysTransmittedLSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysTransmittedLSPs.setStatus('mandatory')
nlspSysReceivedLSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysReceivedLSPs.setStatus('mandatory')
nlspSysOwnLSPPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysOwnLSPPurges.setStatus('mandatory')
nlspSysVersionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysVersionErrors.setStatus('mandatory')
nlspSysIncorrectPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysIncorrectPackets.setStatus('mandatory')
nlspSysNearestL2DefaultExists = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysNearestL2DefaultExists.setStatus('mandatory')
nlspSysNearestL2DefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 29), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysNearestL2DefaultRouter.setStatus('mandatory')
nlspSysResourceFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspSysResourceFailures.setStatus('mandatory')
nlspSysAreaTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 2), )
if mibBuilder.loadTexts: nlspSysAreaTable.setStatus('mandatory')
nlspSysAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 2, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspSysAreaSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspSysAreaNet"), (0, "NOVELL-NLSP-MIB", "nlspSysAreaMask"))
if mibBuilder.loadTexts: nlspSysAreaEntry.setStatus('mandatory')
nlspSysAreaSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysAreaSysInstance.setStatus('mandatory')
nlspSysAreaNet = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysAreaNet.setStatus('mandatory')
nlspSysAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspSysAreaMask.setStatus('mandatory')
nlspActAreaTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 3), )
if mibBuilder.loadTexts: nlspActAreaTable.setStatus('mandatory')
nlspActAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 3, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspActAreaSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspActAreaNet"), (0, "NOVELL-NLSP-MIB", "nlspActAreaMask"))
if mibBuilder.loadTexts: nlspActAreaEntry.setStatus('mandatory')
nlspActAreaSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspActAreaSysInstance.setStatus('mandatory')
nlspActAreaNet = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspActAreaNet.setStatus('mandatory')
nlspActAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspActAreaMask.setStatus('mandatory')
nlspCircTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1), )
if mibBuilder.loadTexts: nlspCircTable.setStatus('mandatory')
nlspCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspCircSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspCircIndex"))
if mibBuilder.loadTexts: nlspCircEntry.setStatus('mandatory')
nlspCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircSysInstance.setStatus('mandatory')
nlspCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircIndex.setStatus('mandatory')
nlspCircState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircState.setStatus('mandatory')
nlspCircPace = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircPace.setStatus('mandatory')
nlspCircHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircHelloTimer.setStatus('mandatory')
nlspCircL1DefaultCost = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircL1DefaultCost.setStatus('mandatory')
nlspCircL1DesRouterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nlspCircL1DesRouterPriority.setStatus('mandatory')
nlspCircL1CircID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircL1CircID.setStatus('mandatory')
nlspCircL1DesRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 9), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircL1DesRouter.setStatus('mandatory')
nlspCircLANL1DesRouterChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircLANL1DesRouterChanges.setStatus('mandatory')
nlspCircNeighChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircNeighChanges.setStatus('mandatory')
nlspCircRejNeighbors = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircRejNeighbors.setStatus('mandatory')
nlspCircOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircOutPackets.setStatus('mandatory')
nlspCircInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircInPackets.setStatus('mandatory')
nlspCircActualMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircActualMaxPacketSize.setStatus('mandatory')
nlspCircPSNPsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircPSNPsSent.setStatus('mandatory')
nlspCircPSNPsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspCircPSNPsReceived.setStatus('mandatory')
nlspDestTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1), )
if mibBuilder.loadTexts: nlspDestTable.setStatus('mandatory')
nlspDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspDestSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspDestNetNum"))
if mibBuilder.loadTexts: nlspDestEntry.setStatus('mandatory')
nlspDestSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestSysInstance.setStatus('mandatory')
nlspDestNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestNetNum.setStatus('mandatory')
nlspDestID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 3), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestID.setStatus('mandatory')
nlspDestEstDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestEstDelay.setStatus('mandatory')
nlspDestEstThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestEstThroughput.setStatus('mandatory')
nlspDestNextHopID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 6), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestNextHopID.setStatus('mandatory')
nlspDestCost = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspDestCost.setStatus('mandatory')
nlspNeighTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1), )
if mibBuilder.loadTexts: nlspNeighTable.setStatus('mandatory')
nlspNeighEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspNeighSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspNeighCircIndex"), (0, "NOVELL-NLSP-MIB", "nlspNeighIndex"))
if mibBuilder.loadTexts: nlspNeighEntry.setStatus('mandatory')
nlspNeighSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighSysInstance.setStatus('mandatory')
nlspNeighCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighCircIndex.setStatus('mandatory')
nlspNeighIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighIndex.setStatus('mandatory')
nlspNeighState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initializing", 1), ("up", 2), ("failed", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighState.setStatus('mandatory')
nlspNeighNICAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 5), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighNICAddress.setStatus('mandatory')
nlspNeighSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("nlspLevel1Router", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighSysType.setStatus('mandatory')
nlspNeighSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 7), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighSysID.setStatus('mandatory')
nlspNeighName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighName.setStatus('mandatory')
nlspNeighUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("undefined", 1), ("level1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighUsage.setStatus('mandatory')
nlspNeighHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighHoldTimer.setStatus('mandatory')
nlspNeighRemainingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighRemainingTime.setStatus('mandatory')
nlspNeighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNeighPriority.setStatus('mandatory')
nlspIDMapTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 1), )
if mibBuilder.loadTexts: nlspIDMapTable.setStatus('mandatory')
nlspIDMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspIDMapSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspIDMapID"))
if mibBuilder.loadTexts: nlspIDMapEntry.setStatus('mandatory')
nlspIDMapSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspIDMapSysInstance.setStatus('mandatory')
nlspIDMapID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 1, 1, 2), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspIDMapID.setStatus('mandatory')
nlspIDMapServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspIDMapServerName.setStatus('mandatory')
nlspIDMapNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 1, 1, 4), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspIDMapNetNum.setStatus('mandatory')
nlspNetMapTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 2), )
if mibBuilder.loadTexts: nlspNetMapTable.setStatus('mandatory')
nlspNetMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 2, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspNetMapSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspNetMapNetNum"))
if mibBuilder.loadTexts: nlspNetMapEntry.setStatus('mandatory')
nlspNetMapSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNetMapSysInstance.setStatus('mandatory')
nlspNetMapNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 2, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNetMapNetNum.setStatus('mandatory')
nlspNetMapServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNetMapServerName.setStatus('mandatory')
nlspNetMapID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 2, 1, 4), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNetMapID.setStatus('mandatory')
nlspNameMapTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 3), )
if mibBuilder.loadTexts: nlspNameMapTable.setStatus('mandatory')
nlspNameMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 3, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspNameMapSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspNameMapServerName"))
if mibBuilder.loadTexts: nlspNameMapEntry.setStatus('mandatory')
nlspNameMapSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNameMapSysInstance.setStatus('mandatory')
nlspNameMapServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNameMapServerName.setStatus('mandatory')
nlspNameMapNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 3, 1, 3), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNameMapNetNum.setStatus('mandatory')
nlspNameMapID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 5, 3, 1, 4), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNameMapID.setStatus('mandatory')
nlspNodeTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1), )
if mibBuilder.loadTexts: nlspNodeTable.setStatus('mandatory')
nlspNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspNodeSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspNodeID"))
if mibBuilder.loadTexts: nlspNodeEntry.setStatus('mandatory')
nlspNodeSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeSysInstance.setStatus('mandatory')
nlspNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 2), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeID.setStatus('mandatory')
nlspNodeNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 3), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeNetNum.setStatus('mandatory')
nlspNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("nlspLevel1Router", 2), ("nlspLevel2Router", 3), ("router", 4), ("network", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeType.setStatus('mandatory')
nlspNodeEstDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeEstDelay.setStatus('mandatory')
nlspNodeEstThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeEstThroughput.setStatus('mandatory')
nlspNodeMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeMaxPacketSize.setStatus('mandatory')
nlspNodeCost = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeCost.setStatus('mandatory')
nlspNodeOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeOverload.setStatus('mandatory')
nlspNodeReachable = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspNodeReachable.setStatus('mandatory')
nlspLinkTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2), )
if mibBuilder.loadTexts: nlspLinkTable.setStatus('mandatory')
nlspLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspLinkSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspLinkNLSPID"), (0, "NOVELL-NLSP-MIB", "nlspLinkIndex"))
if mibBuilder.loadTexts: nlspLinkEntry.setStatus('mandatory')
nlspLinkSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkSysInstance.setStatus('mandatory')
nlspLinkNLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 2), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkNLSPID.setStatus('mandatory')
nlspLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkIndex.setStatus('mandatory')
nlspLinkNeighNLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 4), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkNeighNLSPID.setStatus('mandatory')
nlspLinkFromNeighCost = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkFromNeighCost.setStatus('mandatory')
nlspLinkMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkMaxPacketSize.setStatus('mandatory')
nlspLinkThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkThroughput.setStatus('mandatory')
nlspLinkDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkDelay.setStatus('mandatory')
nlspLinkMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkMediaType.setStatus('mandatory')
nlspLinkToNeighCost = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLinkToNeighCost.setStatus('mandatory')
nlspPathTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 3), )
if mibBuilder.loadTexts: nlspPathTable.setStatus('mandatory')
nlspPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 3, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspPathSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspPathDestNLSPID"), (0, "NOVELL-NLSP-MIB", "nlspPathLinkIndex"))
if mibBuilder.loadTexts: nlspPathEntry.setStatus('mandatory')
nlspPathSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspPathSysInstance.setStatus('mandatory')
nlspPathDestNLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 3, 1, 2), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspPathDestNLSPID.setStatus('mandatory')
nlspPathLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspPathLinkIndex.setStatus('mandatory')
nlspGraphXRouteTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4), )
if mibBuilder.loadTexts: nlspGraphXRouteTable.setStatus('mandatory')
nlspGraphXRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspGraphXRouteSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspGraphXRouteNLSPID"), (0, "NOVELL-NLSP-MIB", "nlspGraphXRouteNetNum"))
if mibBuilder.loadTexts: nlspGraphXRouteEntry.setStatus('mandatory')
nlspGraphXRouteSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphXRouteSysInstance.setStatus('mandatory')
nlspGraphXRouteNLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4, 1, 2), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphXRouteNLSPID.setStatus('mandatory')
nlspGraphXRouteNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4, 1, 3), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphXRouteNetNum.setStatus('mandatory')
nlspGraphXRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphXRouteCost.setStatus('mandatory')
nlspGraphXRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphXRouteHopCount.setStatus('mandatory')
nlspGraphServTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5), )
if mibBuilder.loadTexts: nlspGraphServTable.setStatus('mandatory')
nlspGraphServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspGraphServSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspGraphServNLSPID"), (0, "NOVELL-NLSP-MIB", "nlspGraphServName"), (0, "NOVELL-NLSP-MIB", "nlspGraphServTypeValue"))
if mibBuilder.loadTexts: nlspGraphServEntry.setStatus('mandatory')
nlspGraphServSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServSysInstance.setStatus('mandatory')
nlspGraphServNLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 2), NLSPID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServNLSPID.setStatus('mandatory')
nlspGraphServName = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServName.setStatus('mandatory')
nlspGraphServTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServTypeValue.setStatus('mandatory')
nlspGraphServType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unknown", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServType.setStatus('mandatory')
nlspGraphServNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 6), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServNetNum.setStatus('mandatory')
nlspGraphServNode = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServNode.setStatus('mandatory')
nlspGraphServSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 6, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspGraphServSocket.setStatus('mandatory')
nlspLSPTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1), )
if mibBuilder.loadTexts: nlspLSPTable.setStatus('mandatory')
nlspLSPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspLSPSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspLSPID"))
if mibBuilder.loadTexts: nlspLSPEntry.setStatus('mandatory')
nlspLSPSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPSysInstance.setStatus('mandatory')
nlspLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPID.setStatus('mandatory')
nlspLSPLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPLifetime.setStatus('mandatory')
nlspLSPSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPSeqNum.setStatus('mandatory')
nlspLSPChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPChecksum.setStatus('mandatory')
nlspLSPRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("nlspLevel1Router", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPRouterType.setStatus('mandatory')
nlspLSPOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOverload.setStatus('mandatory')
nlspLSPHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(27, 27)).setFixedLength(27)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPHeader.setStatus('mandatory')
nlspLSPOptTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2), )
if mibBuilder.loadTexts: nlspLSPOptTable.setStatus('mandatory')
nlspLSPOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1), ).setIndexNames((0, "NOVELL-NLSP-MIB", "nlspLSPOptSysInstance"), (0, "NOVELL-NLSP-MIB", "nlspLSPOptLSPID"), (0, "NOVELL-NLSP-MIB", "nlspLSPOptIndex"))
if mibBuilder.loadTexts: nlspLSPOptEntry.setStatus('mandatory')
nlspLSPOptSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOptSysInstance.setStatus('mandatory')
nlspLSPOptLSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOptLSPID.setStatus('mandatory')
nlspLSPOptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOptIndex.setStatus('mandatory')
nlspLSPOptCode = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOptCode.setStatus('mandatory')
nlspLSPOptLength = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOptLength.setStatus('mandatory')
nlspLSPOptValue = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 19, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nlspLSPOptValue.setStatus('mandatory')
mibBuilder.exportSymbols("NOVELL-NLSP-MIB", nlspLSPOptLSPID=nlspLSPOptLSPID, nlspSysDRBcastHelloInt=nlspSysDRBcastHelloInt, nlspGraphXRouteEntry=nlspGraphXRouteEntry, nlspLinkNLSPID=nlspLinkNLSPID, nlspSysCorrLSPs=nlspSysCorrLSPs, nlspGraphServEntry=nlspGraphServEntry, nlspNetMapEntry=nlspNetMapEntry, nlspCircPSNPsReceived=nlspCircPSNPsReceived, nlspNeighUsage=nlspNeighUsage, nlspSysNearestL2DefaultExists=nlspSysNearestL2DefaultExists, nlspSysResourceFailures=nlspSysResourceFailures, nlspGraphServType=nlspGraphServType, nlspForwarding=nlspForwarding, nlspNameMapNetNum=nlspNameMapNetNum, nlspLSPHeader=nlspLSPHeader, nlspNetMapServerName=nlspNetMapServerName, nlspIDMapNetNum=nlspIDMapNetNum, nlspLSPOptTable=nlspLSPOptTable, nlspDestNextHopID=nlspDestNextHopID, nlspCircNeighChanges=nlspCircNeighChanges, nlspLSPSeqNum=nlspLSPSeqNum, nlspLSP=nlspLSP, nlspNodeEstDelay=nlspNodeEstDelay, nlspNameMapEntry=nlspNameMapEntry, nlspNodeEntry=nlspNodeEntry, nlspNodeOverload=nlspNodeOverload, nlspNodeSysInstance=nlspNodeSysInstance, nlspNameMapID=nlspNameMapID, nlspLSPOptLength=nlspLSPOptLength, nlspDestID=nlspDestID, nlspLinkThroughput=nlspLinkThroughput, nlspGraphServNLSPID=nlspGraphServNLSPID, nlspLSPOverload=nlspLSPOverload, nlspSysTable=nlspSysTable, nlspCircActualMaxPacketSize=nlspCircActualMaxPacketSize, nlspSysL1Overloaded=nlspSysL1Overloaded, nlspSysAreaNet=nlspSysAreaNet, nlspCircOutPackets=nlspCircOutPackets, nlspNeighRemainingTime=nlspNeighRemainingTime, nlspNameMapSysInstance=nlspNameMapSysInstance, nlspLinkSysInstance=nlspLinkSysInstance, nlspGraph=nlspGraph, nlspLinkFromNeighCost=nlspLinkFromNeighCost, nlspLSPOptValue=nlspLSPOptValue, nlspNeighPriority=nlspNeighPriority, nlspLSPOptCode=nlspLSPOptCode, nlspPathLinkIndex=nlspPathLinkIndex, nlspCircHelloTimer=nlspCircHelloTimer, nlspIDMapSysInstance=nlspIDMapSysInstance, nlspGraphXRouteNLSPID=nlspGraphXRouteNLSPID, nlsp=nlsp, nlspNameMapServerName=nlspNameMapServerName, nlspSysMaxSeqNums=nlspSysMaxSeqNums, nlspSysVersion=nlspSysVersion, nlspIDMapTable=nlspIDMapTable, nlspSysAreaTable=nlspSysAreaTable, NetNumber=NetNumber, nlspIDMapEntry=nlspIDMapEntry, nlspNetMapSysInstance=nlspNetMapSysInstance, nlspLSPEntry=nlspLSPEntry, nlspSysCompSNPInt=nlspSysCompSNPInt, nlspLSPTable=nlspLSPTable, nlspSysTransmittedLSPs=nlspSysTransmittedLSPs, SystemID=SystemID, nlspSysMaxLSPGenInt=nlspSysMaxLSPGenInt, nlspSysHoldTimeMultiplier=nlspSysHoldTimeMultiplier, nlspSysOrigL1LSPBufSize=nlspSysOrigL1LSPBufSize, nlspSysReceivedLSPs=nlspSysReceivedLSPs, nlspActAreaMask=nlspActAreaMask, nlspGraphServSocket=nlspGraphServSocket, nlspNeighName=nlspNeighName, nlspNeighState=nlspNeighState, nlspNeighCircIndex=nlspNeighCircIndex, nlspLinkIndex=nlspLinkIndex, nlspActAreaEntry=nlspActAreaEntry, nlspLinkEntry=nlspLinkEntry, nlspLSPLifetime=nlspLSPLifetime, nlspLSPOptIndex=nlspLSPOptIndex, nlspCircL1DesRouterPriority=nlspCircL1DesRouterPriority, nlspSysMinLSPGenInt=nlspSysMinLSPGenInt, nlspNodeNetNum=nlspNodeNetNum, nlspNeighbors=nlspNeighbors, nlspLinkMaxPacketSize=nlspLinkMaxPacketSize, nlspNeighTable=nlspNeighTable, nlspNodeEstThroughput=nlspNodeEstThroughput, nlspLSPRouterType=nlspLSPRouterType, nlspCircuit=nlspCircuit, nlspSysMinNonBcastLSPTransInt=nlspSysMinNonBcastLSPTransInt, nlspLSPID=nlspLSPID, nlspCircPace=nlspCircPace, nlspLSPSysInstance=nlspLSPSysInstance, nlspCircInPackets=nlspCircInPackets, nlspCircLANL1DesRouterChanges=nlspCircLANL1DesRouterChanges, nlspSysAreaEntry=nlspSysAreaEntry, nlspGraphXRouteTable=nlspGraphXRouteTable, nlspSysIncorrectPackets=nlspSysIncorrectPackets, nlspGraphServNetNum=nlspGraphServNetNum, nlspCircState=nlspCircState, nlspNeighSysType=nlspNeighSysType, nlspSysMinBcastLSPTransInt=nlspSysMinBcastLSPTransInt, nlspNameMapTable=nlspNameMapTable, nlspDestSysInstance=nlspDestSysInstance, NLSPID=NLSPID, nlspGraphServName=nlspGraphServName, nlspSysPartSNPInt=nlspSysPartSNPInt, nlspIDMapServerName=nlspIDMapServerName, nlspGraphXRouteNetNum=nlspGraphXRouteNetNum, nlspLinkMediaType=nlspLinkMediaType, nlspCircRejNeighbors=nlspCircRejNeighbors, nlspSysSeqNumSkips=nlspSysSeqNumSkips, nlspNeighEntry=nlspNeighEntry, nlspLinkToNeighCost=nlspLinkToNeighCost, nlspGraphServNode=nlspGraphServNode, nlspCircIndex=nlspCircIndex, nlspNeighNICAddress=nlspNeighNICAddress, nlspPathSysInstance=nlspPathSysInstance, nlspPathDestNLSPID=nlspPathDestNLSPID, nlspCircSysInstance=nlspCircSysInstance, nlspCircPSNPsSent=nlspCircPSNPsSent, nlspSysBcastHelloInt=nlspSysBcastHelloInt, nlspDestTable=nlspDestTable, nlspGraphXRouteCost=nlspGraphXRouteCost, nlspDestEntry=nlspDestEntry, nlspCircEntry=nlspCircEntry, nlspNeighSysInstance=nlspNeighSysInstance, nlspNodeMaxPacketSize=nlspNodeMaxPacketSize, nlspSysWaitTime=nlspSysWaitTime, nlspActAreaTable=nlspActAreaTable, nlspSysNonBcastHelloInt=nlspSysNonBcastHelloInt, nlspActAreaSysInstance=nlspActAreaSysInstance, nlspActAreaNet=nlspActAreaNet, nlspIDMapID=nlspIDMapID, nlspNodeCost=nlspNodeCost, nlspSysMaxLSPAge=nlspSysMaxLSPAge, nlspNetMapID=nlspNetMapID, nlspGraphXRouteHopCount=nlspGraphXRouteHopCount, nlspSysEntry=nlspSysEntry, nlspSysOwnLSPPurges=nlspSysOwnLSPPurges, nlspNetMapNetNum=nlspNetMapNetNum, nlspSysAreaMask=nlspSysAreaMask, nlspDestEstThroughput=nlspDestEstThroughput, nlspNodeTable=nlspNodeTable, nlspPathTable=nlspPathTable, nlspNodeType=nlspNodeType, nlspGraphServTypeValue=nlspGraphServTypeValue, nlspTranslation=nlspTranslation, nlspGraphServSysInstance=nlspGraphServSysInstance, nlspNeighHoldTimer=nlspNeighHoldTimer, nlspDestEstDelay=nlspDestEstDelay, nlspLSPChecksum=nlspLSPChecksum, nlspSysVersionErrors=nlspSysVersionErrors, nlspLinkTable=nlspLinkTable, nlspNodeID=nlspNodeID, nlspNetMapTable=nlspNetMapTable, nlspGraphServTable=nlspGraphServTable, nlspCircL1CircID=nlspCircL1CircID, nlspLSPOptEntry=nlspLSPOptEntry, nlspSysNearestL2DefaultRouter=nlspSysNearestL2DefaultRouter, nlspNeighIndex=nlspNeighIndex, nlspDestNetNum=nlspDestNetNum, nlspLSPOptSysInstance=nlspLSPOptSysInstance, nlspSystem=nlspSystem, nlspLinkDelay=nlspLinkDelay, nlspNeighSysID=nlspNeighSysID, nlspCircL1DesRouter=nlspCircL1DesRouter, nlspSysID=nlspSysID, nlspSysL1DbaseOverloads=nlspSysL1DbaseOverloads, nlspSysState=nlspSysState, nlspNodeReachable=nlspNodeReachable, nlspPathEntry=nlspPathEntry, nlspLinkNeighNLSPID=nlspLinkNeighNLSPID, nlspDestCost=nlspDestCost, nlspSysInstance=nlspSysInstance, nlspGraphXRouteSysInstance=nlspGraphXRouteSysInstance, nlspCircTable=nlspCircTable, nlspCircL1DefaultCost=nlspCircL1DefaultCost, nlspSysAreaSysInstance=nlspSysAreaSysInstance)
