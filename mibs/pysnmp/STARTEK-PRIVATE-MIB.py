#
# PySNMP MIB module STARTEK-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/STARTEK-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:03:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, enterprises, Counter64, Gauge32, Unsigned32, MibIdentifier, IpAddress, Opaque, ModuleIdentity, NotificationType, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "enterprises", "Counter64", "Gauge32", "Unsigned32", "MibIdentifier", "IpAddress", "Opaque", "ModuleIdentity", "NotificationType", "TimeTicks", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
startek = MibIdentifier((1, 3, 6, 1, 4, 1, 260))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1))
maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 2))
fSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 2))
stackable = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 3))
m828Series = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 1))
m828Hubs = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 1, 1))
m828HubNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubNumber.setStatus('mandatory')
m828HubTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2), )
if mibBuilder.loadTexts: m828HubTable.setStatus('mandatory')
m828HubTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "m828HubTableIndex"))
if mibBuilder.loadTexts: m828HubTableEntry.setStatus('mandatory')
m828HubTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubTableIndex.setStatus('mandatory')
m828HubModel = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("model-4", 1), ("model-5", 2), ("model-6", 3), ("model-7", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubModel.setStatus('mandatory')
m828Hub485Address = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828Hub485Address.setStatus('mandatory')
m828HubRiFTolSw = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubRiFTolSw.setStatus('mandatory')
m828HubRiFTolState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m828HubRiFTolState.setStatus('mandatory')
m828HubRiMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolate", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m828HubRiMask.setStatus('mandatory')
m828HubRiPhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubRiPhDet.setStatus('mandatory')
m828HubRiNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubRiNsrtStatus.setStatus('mandatory')
m828HubRiBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubRiBcnRemStatus.setStatus('mandatory')
m828RiNeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("series828", 1), ("fSeries", 2), ("tokenRingMAC", 3), ("none", 4), ("stackable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828RiNeighborType.setStatus('mandatory')
m828RiNeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828RiNeighborAddr.setStatus('mandatory')
m828RiTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828RiTimeStamp.setStatus('mandatory')
m828HubRoFTolSw = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubRoFTolSw.setStatus('mandatory')
m828HubRoFTolState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m828HubRoFTolState.setStatus('mandatory')
m828HubRoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolate", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m828HubRoMask.setStatus('mandatory')
m828HubRoPhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wireFault", 1), ("phantOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubRoPhDet.setStatus('mandatory')
m828HubRoNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubRoNsrtStatus.setStatus('mandatory')
m828HubRoBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubRoBcnRemStatus.setStatus('mandatory')
m828RoNeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("series828", 1), ("fSeries", 2), ("tokenRingMAC", 3), ("none", 4), ("stackable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828RoNeighborType.setStatus('mandatory')
m828RoNeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828RoNeighborAddr.setStatus('mandatory')
m828RoTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828RoTimeStamp.setStatus('mandatory')
m828HubDataRateSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s4Mbps", 1), ("s16Mbps", 2), ("noSwitch", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubDataRateSwitch.setStatus('mandatory')
m828HubDataRateState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s4Mbps", 1), ("s16Mbps", 2), ("autoConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m828HubDataRateState.setStatus('mandatory')
m828HubDataRateTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 24), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubDataRateTimeStamp.setStatus('mandatory')
m828HubMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubMgmtStatus.setStatus('mandatory')
m828HubProxyAgentID = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubProxyAgentID.setStatus('mandatory')
m828HubCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubCodeVersion.setStatus('mandatory')
m828HubRawCommandData = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 2, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m828HubRawCommandData.setStatus('mandatory')
m828HubLobeNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubLobeNumber.setStatus('mandatory')
m828HubLobeTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 4), )
if mibBuilder.loadTexts: m828HubLobeTable.setStatus('mandatory')
m828HubLobeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 4, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "m828HubIndex"), (0, "STARTEK-PRIVATE-MIB", "m828HubLobePort"))
if mibBuilder.loadTexts: m828HubLobeEntry.setStatus('mandatory')
m828HubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubIndex.setStatus('mandatory')
m828HubLobePort = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubLobePort.setStatus('mandatory')
m828HubLobePhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubLobePhDet.setStatus('mandatory')
m828HubLobeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolated", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m828HubLobeMask.setStatus('mandatory')
m828HubLobeNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubLobeNsrtStatus.setStatus('mandatory')
m828HubLobeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubLobeMacAddr.setStatus('mandatory')
m828HubLobeBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubLobeBcnRemStatus.setStatus('mandatory')
m828HubLobeTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 1, 1, 4, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m828HubLobeTimeStamp.setStatus('mandatory')
fChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 2, 1))
fTRMainRing = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 2, 2))
fTRLobe = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 2, 3))
fEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 2, 4))
fFddi = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 2, 5))
fTwx = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 2, 6))
fChassisNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fChassisNumber.setStatus('mandatory')
fChassisTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 2, 1, 2), )
if mibBuilder.loadTexts: fChassisTable.setStatus('mandatory')
fChassisTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 2, 1, 2, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "fChassisIndex"))
if mibBuilder.loadTexts: fChassisTableEntry.setStatus('mandatory')
fChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fChassisIndex.setStatus('mandatory')
fChassisModel = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("twoslot-10100", 1), ("fiveslot-10101", 2), ("fiveslotredundant-10102", 3), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fChassisModel.setStatus('mandatory')
fChassisPowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("singleSupOK", 1), ("dualSupOK", 2), ("dualSup-BSupBAD", 3), ("dualSup-ASupBAD", 4), ("illegal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fChassisPowStatus.setStatus('mandatory')
fChassisLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fChassisLocation.setStatus('mandatory')
fTRMainRingNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingNumber.setStatus('mandatory')
fTRMainRingTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2), )
if mibBuilder.loadTexts: fTRMainRingTable.setStatus('mandatory')
fTRMainRingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "fTRMainRingTableIndex"))
if mibBuilder.loadTexts: fTRMainRingTableEntry.setStatus('mandatory')
fTRMainRingTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingTableIndex.setStatus('mandatory')
fTRMainRingModel = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("f10154RiRoExpModule", 1), ("f10155RiRoFiberExpModule", 2), ("f10150RiRoExpModuleAgent", 3), ("f10151RiRoFiberExpModuleAgent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingModel.setStatus('mandatory')
fTRMainRing485Address = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRing485Address.setStatus('mandatory')
fTRMainRingSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingSlotIndex.setStatus('mandatory')
fTRMainRingChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingChassisIndex.setStatus('mandatory')
fTRMainRingRiFTolState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRMainRingRiFTolState.setStatus('mandatory')
fTRMainRingRiMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolate", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRMainRingRiMask.setStatus('mandatory')
fTRMainRingRiPhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRiPhDet.setStatus('mandatory')
fTRMainRingRiNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRiNsrtStatus.setStatus('mandatory')
fTRMainRingRiBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRiBcnRemStatus.setStatus('mandatory')
fTRMainRingRiCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRiCableType.setStatus('mandatory')
fTRMainRingRiNghbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("series828", 1), ("fSeries", 2), ("tokenRingMAC", 3), ("none", 4), ("stackable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRiNghbrType.setStatus('mandatory')
fTRMainRingRiNghbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRiNghbrAddr.setStatus('mandatory')
fTRMainRingRiTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRiTimeStamp.setStatus('mandatory')
fTRMainRingRoFTolState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRMainRingRoFTolState.setStatus('mandatory')
fTRMainRingRoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolate", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRMainRingRoMask.setStatus('mandatory')
fTRMainRingRoPhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wireFault", 1), ("phantOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRoPhDet.setStatus('mandatory')
fTRMainRingRoNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRoNsrtStatus.setStatus('mandatory')
fTRMainRingRoBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRoBcnRemStatus.setStatus('mandatory')
fTRMainRingRoCableType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRoCableType.setStatus('mandatory')
fTRMainRingRoNghbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("series828", 1), ("fSeries", 2), ("tokenRingMAC", 3), ("none", 4), ("stackable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRoNghbrType.setStatus('mandatory')
fTRMainRingRoNghbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRoNghbrAddr.setStatus('mandatory')
fTRMainRingRoTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingRoTimeStamp.setStatus('mandatory')
fTRMainRingDataRateState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("s4Mbps", 1), ("s16Mbps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRMainRingDataRateState.setStatus('mandatory')
fTRMainRingDataRateTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 25), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingDataRateTimeStamp.setStatus('mandatory')
fTRMainRingBkPlnNsrtState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inserted", 1), ("bypassed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRMainRingBkPlnNsrtState.setStatus('mandatory')
fTRMainRingBkPlnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingBkPlnTimeStamp.setStatus('mandatory')
fTRMainRingLobePhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingLobePhDet.setStatus('mandatory')
fTRMainRingLobeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolated", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRMainRingLobeMask.setStatus('mandatory')
fTRMainRingLobeNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingLobeNsrtStatus.setStatus('mandatory')
fTRMainRingLobeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingLobeMacAddr.setStatus('mandatory')
fTRMainRingLobeBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingLobeBcnRemStatus.setStatus('mandatory')
fTRMainRingLobeTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 33), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingLobeTimeStamp.setStatus('mandatory')
fTRMainRingMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingMgmtStatus.setStatus('mandatory')
fTRMainRingProxyAgentID = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingProxyAgentID.setStatus('mandatory')
fTRMainRingAttachedAgentType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tokenring", 1), ("tokenring-ethernet", 2), ("reserved", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingAttachedAgentType.setStatus('mandatory')
fTRMainRingAttachedAgentState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRMainRingAttachedAgentState.setStatus('mandatory')
fTRMainRingTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingTemperatureStatus.setStatus('mandatory')
fTRMainRingAutoRecovControl = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("reset", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRMainRingAutoRecovControl.setStatus('mandatory')
fTRMainRingAutoRecovRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRMainRingAutoRecovRetries.setStatus('mandatory')
fTRMainRingCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingCodeVersion.setStatus('mandatory')
fTRMainRingAutoRecovState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in-recovery", 1), ("normal", 2), ("halted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingAutoRecovState.setStatus('mandatory')
fTRMainRingRawCommandData = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRMainRingRawCommandData.setStatus('mandatory')
fTRMainRingPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("singleSupOK", 1), ("dualSupOK", 2), ("dualSup-BSupBAD", 3), ("dualSup-ASupBAD", 4), ("illegal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingPowerStatus.setStatus('mandatory')
fTRMainRingCageType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("twoslot-10100", 1), ("fiveslot-10101", 2), ("fiveslotredundant-10102", 3), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRMainRingCageType.setStatus('mandatory')
fTRMainRingAutoRecovMode = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 2, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("selfEnabling", 1), ("non-selfEnabling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRMainRingAutoRecovMode.setStatus('mandatory')
fTRLobeNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeNumber.setStatus('mandatory')
fTRLobeTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2), )
if mibBuilder.loadTexts: fTRLobeTable.setStatus('mandatory')
fTRLobeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "fTRLobeTableIndex"))
if mibBuilder.loadTexts: fTRLobeTableEntry.setStatus('mandatory')
fTRLobeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeTableIndex.setStatus('mandatory')
fTRLobeModel = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("f10157trPassiveMau", 1), ("f10158trActiveMau", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeModel.setStatus('mandatory')
fTRLobe485Address = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobe485Address.setStatus('mandatory')
fTRLobeSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeSlotIndex.setStatus('mandatory')
fTRLobeChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeChassisIndex.setStatus('mandatory')
fTRLobeDataRateState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("s4Mbps", 1), ("s16Mbps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRLobeDataRateState.setStatus('mandatory')
fTRLobeDataRateTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeDataRateTimeStamp.setStatus('mandatory')
fTRLobeBkPlnNsrtState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inserted", 1), ("bypassed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRLobeBkPlnNsrtState.setStatus('mandatory')
fTRLobeBkPlnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeBkPlnTimeStamp.setStatus('mandatory')
fTRLobeMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeMgmtStatus.setStatus('mandatory')
fTRLobeProxyAgentID = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeProxyAgentID.setStatus('mandatory')
fTRLobeTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeTemperatureStatus.setStatus('mandatory')
fTRLobeAutoRecovControl = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRLobeAutoRecovControl.setStatus('mandatory')
fTRLobeAutoRecovMode = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("selfEnabling", 1), ("non-selfEnabling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRLobeAutoRecovMode.setStatus('mandatory')
fTRLobeAutoRecovRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRLobeAutoRecovRetries.setStatus('mandatory')
fTRLobeCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeCodeVersion.setStatus('mandatory')
fTRLobeAutoRecovState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in-recovery", 1), ("normal", 2), ("halted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeAutoRecovState.setStatus('mandatory')
fTRLobeRawCommandData = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRLobeRawCommandData.setStatus('mandatory')
fTRLobePowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("singleSupOK", 1), ("dualSupOK", 2), ("dualSup-BSupBAD", 3), ("dualSup-ASupBAD", 4), ("illegal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobePowerStatus.setStatus('mandatory')
fTRLobeCageType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("twoslot-10100", 1), ("fiveslot-10101", 2), ("fiveslotredundant-10102", 3), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeCageType.setStatus('mandatory')
fTRLobeConnectNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeConnectNumber.setStatus('mandatory')
fTRLobeConnectTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 4), )
if mibBuilder.loadTexts: fTRLobeConnectTable.setStatus('mandatory')
fTRLobeConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 4, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "fTRLobeIndex"), (0, "STARTEK-PRIVATE-MIB", "fTRLobeConnectPort"))
if mibBuilder.loadTexts: fTRLobeConnectEntry.setStatus('mandatory')
fTRLobeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeIndex.setStatus('mandatory')
fTRLobeConnectPort = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeConnectPort.setStatus('mandatory')
fTRLobeConnectPhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeConnectPhDet.setStatus('mandatory')
fTRLobeConnectMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolated", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTRLobeConnectMask.setStatus('mandatory')
fTRLobeConnectNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeConnectNsrtStatus.setStatus('mandatory')
fTRLobeConnectMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeConnectMacAddr.setStatus('mandatory')
fTRLobeConnectBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeConnectBcnRemStatus.setStatus('mandatory')
fTRLobeConnectBcnRemCause = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("no-removal", 1), ("phantom-error", 2), ("no-carrier", 3), ("bad-rate", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeConnectBcnRemCause.setStatus('mandatory')
fTRLobeConnectTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 3, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fTRLobeConnectTimeStamp.setStatus('mandatory')
fEthernetNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernetNumber.setStatus('mandatory')
fEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2), )
if mibBuilder.loadTexts: fEthernetTable.setStatus('mandatory')
fEthernetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "fEthernetTableIndex"))
if mibBuilder.loadTexts: fEthernetTableEntry.setStatus('mandatory')
fEthernetTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernetTableIndex.setStatus('mandatory')
fEthernetModel = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("f10160", 1), ("f10161", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernetModel.setStatus('mandatory')
fEthernet485Address = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernet485Address.setStatus('mandatory')
fEthernetSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernetSlotIndex.setStatus('mandatory')
fEthernetChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernetChassisIndex.setStatus('mandatory')
fEthernetBkPlnNsrtState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inserted", 1), ("bypassed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fEthernetBkPlnNsrtState.setStatus('mandatory')
fEthernetBkPlnTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernetBkPlnTimeStamp.setStatus('mandatory')
fEthernetMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernetMgmtStatus.setStatus('mandatory')
fEthernetProxyAgentID = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernetProxyAgentID.setStatus('mandatory')
fEthernetTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernetTemperatureStatus.setStatus('mandatory')
fEthernetCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernetCodeVersion.setStatus('mandatory')
fEthernetRawCommandData = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fEthernetRawCommandData.setStatus('mandatory')
fEthernetPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("singleSupOK", 1), ("dualSupOK", 2), ("dualSup-BSupBAD", 3), ("dualSup-ASupBAD", 4), ("illegal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernetPowerStatus.setStatus('mandatory')
fEthernetCageType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("twoslot-10100", 1), ("fiveslot-10101", 2), ("fiveslotredundant-10102", 3), ("reserved4", 4), ("reserved5", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fEthernetCageType.setStatus('mandatory')
rmonAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 2, 7))
rmonAgentDescription = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAgentDescription.setStatus('mandatory')
rmonAgentID = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentID.setStatus('mandatory')
rmonAgentOOBNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentOOBNumber.setStatus('mandatory')
rmonAgentOOBTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 4), )
if mibBuilder.loadTexts: rmonAgentOOBTable.setStatus('mandatory')
rmonAgentOOBTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 4, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "rmonAgentOOBTableIndex"))
if mibBuilder.loadTexts: rmonAgentOOBTableEntry.setStatus('mandatory')
rmonAgentOOBTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentOOBTableIndex.setStatus('mandatory')
rmonAgentOOBTableDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAgentOOBTableDescription.setStatus('mandatory')
rmonAgentOOBTableData = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 4, 1, 3), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentOOBTableData.setStatus('mandatory')
rmonAgentOOBRawDataCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAgentOOBRawDataCommand.setStatus('mandatory')
rmonAgentIBNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBNumber.setStatus('mandatory')
rmonAgentIBTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6), )
if mibBuilder.loadTexts: rmonAgentIBTable.setStatus('mandatory')
rmonAgentIBTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "rmonAgentIBTableIndex"))
if mibBuilder.loadTexts: rmonAgentIBTableEntry.setStatus('mandatory')
rmonAgentIBTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBTableIndex.setStatus('mandatory')
rmonAgentIBTableDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAgentIBTableDescription.setStatus('mandatory')
rmonAgentIBNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tokenring", 1), ("ethernet", 2), ("fddi", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBNetworkType.setStatus('mandatory')
rmonAgentIBSampleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAgentIBSampleInterval.setStatus('mandatory')
rmonAgentIBMacFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMacFrames.setStatus('mandatory')
rmonAgentIBDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBDataFrames.setStatus('mandatory')
rmonAgentIBMacBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMacBytes.setStatus('mandatory')
rmonAgentIBDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBDataBytes.setStatus('mandatory')
rmonAgentIBUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBUtilization.setStatus('mandatory')
rmonAgentIBMACUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACUtilization.setStatus('mandatory')
rmonAgentIBNonMACUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBNonMACUtilization.setStatus('mandatory')
rmonAgentIBMACData0 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 12), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACData0.setStatus('mandatory')
rmonAgentIBMACData1 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 13), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACData1.setStatus('mandatory')
rmonAgentIBMACData2 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 14), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACData2.setStatus('mandatory')
rmonAgentIBMACData3 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 15), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACData3.setStatus('mandatory')
rmonAgentIBMACData4 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 16), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACData4.setStatus('mandatory')
rmonAgentIBMACData5 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 17), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACData5.setStatus('mandatory')
rmonAgentIBMACData6 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 18), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACData6.setStatus('mandatory')
rmonAgentIBMACData7 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 19), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACData7.setStatus('mandatory')
rmonAgentIBMACData8 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 20), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACData8.setStatus('mandatory')
rmonAgentIBMACData9 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 21), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACData9.setStatus('mandatory')
rmonAgentIBMACData10 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 22), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACData10.setStatus('mandatory')
rmonAgentIBMACData11 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 6, 1, 23), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentIBMACData11.setStatus('mandatory')
rmonAgentMonitorCommand = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAgentMonitorCommand.setStatus('mandatory')
rmonAgentMonitorResponse = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentMonitorResponse.setStatus('mandatory')
rmonAgentDownloadData = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAgentDownloadData.setStatus('mandatory')
rmonAgentNoMapOid = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 10), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAgentNoMapOid.setStatus('mandatory')
rmonAgentMACStatTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 11), )
if mibBuilder.loadTexts: rmonAgentMACStatTable.setStatus('mandatory')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 11, 1) + (1000, ), Integer32())
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 11, 1) + (1001, ), Integer32())
rmonAgentMACStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 11, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "pysmiFakeCol1000"), (0, "STARTEK-PRIVATE-MIB", "pysmiFakeCol1001"))
if mibBuilder.loadTexts: rmonAgentMACStatTableEntry.setStatus('mandatory')
rmonAgentMACStatTableData = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 11, 1, 1), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmonAgentMACStatTableData.setStatus('mandatory')
rmonAgentIPAdressControl = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 2, 7, 12), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmonAgentIPAdressControl.setStatus('mandatory')
stackableHubs = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 3, 1))
stackableHubNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubNumber.setStatus('mandatory')
stackableHubTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2), )
if mibBuilder.loadTexts: stackableHubTable.setStatus('mandatory')
stackableHubTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "stackableHubTableIndex"))
if mibBuilder.loadTexts: stackableHubTableEntry.setStatus('mandatory')
stackableHubTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubTableIndex.setStatus('mandatory')
stackableHubModel = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("standard-issue", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubModel.setStatus('mandatory')
stackableHub485Address = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHub485Address.setStatus('mandatory')
stackableHubRiFTolState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackableHubRiFTolState.setStatus('mandatory')
stackableHubRiMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolate", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackableHubRiMask.setStatus('mandatory')
stackableHubRiPhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubRiPhDet.setStatus('mandatory')
stackableHubRiNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubRiNsrtStatus.setStatus('mandatory')
stackableHubRiBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubRiBcnRemStatus.setStatus('mandatory')
stackableHubRiNeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("series828", 1), ("fSeries", 2), ("tokenRingMAC", 3), ("none", 4), ("stackable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubRiNeighborType.setStatus('mandatory')
stackableHubRiNeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubRiNeighborAddr.setStatus('mandatory')
stackableHubRiTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubRiTimeStamp.setStatus('mandatory')
stackableHubRoFTolState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackableHubRoFTolState.setStatus('mandatory')
stackableHubRoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolate", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackableHubRoMask.setStatus('mandatory')
stackableHubRoPhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wireFault", 1), ("phantOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubRoPhDet.setStatus('mandatory')
stackableHubRoNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubRoNsrtStatus.setStatus('mandatory')
stackableHubRoBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubRoBcnRemStatus.setStatus('mandatory')
stackableHubRoNeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("series828", 1), ("fSeries", 2), ("tokenRingMAC", 3), ("none", 4), ("stackable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubRoNeighborType.setStatus('mandatory')
stackableHubRoNeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubRoNeighborAddr.setStatus('mandatory')
stackableHubRoTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubRoTimeStamp.setStatus('mandatory')
stackableHubDataRateState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s4Mbps", 1), ("s16Mbps", 2), ("autoConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackableHubDataRateState.setStatus('mandatory')
stackableHubDataRateTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubDataRateTimeStamp.setStatus('mandatory')
stackableHubMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubMgmtStatus.setStatus('mandatory')
stackableHubProxyAgentID = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubProxyAgentID.setStatus('mandatory')
stackableHubAttachedAgentType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tokenring", 1), ("tokenring-ethernet", 2), ("reserved", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubAttachedAgentType.setStatus('mandatory')
stackableHubAttachedAgentState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackableHubAttachedAgentState.setStatus('mandatory')
stackableHubTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubTemperatureStatus.setStatus('mandatory')
stackableHubAutoRecovControl = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("reset", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackableHubAutoRecovControl.setStatus('mandatory')
stackableHubAutoRecovRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackableHubAutoRecovRetries.setStatus('mandatory')
stackableHubCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubCodeVersion.setStatus('mandatory')
stackableHubAutoRecovState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in-recovery", 1), ("normal", 2), ("halted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubAutoRecovState.setStatus('mandatory')
stackableHubRawCommandData = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackableHubRawCommandData.setStatus('mandatory')
stackableHubAutoRecovMode = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("selfEnabling", 1), ("non-selfEnabling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackableHubAutoRecovMode.setStatus('mandatory')
stackableHubLobeNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubLobeNumber.setStatus('mandatory')
stackableHubLobeTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 4), )
if mibBuilder.loadTexts: stackableHubLobeTable.setStatus('mandatory')
stackableHubLobeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 4, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "stackableHubIndex"), (0, "STARTEK-PRIVATE-MIB", "stackableHubLobePort"))
if mibBuilder.loadTexts: stackableHubLobeEntry.setStatus('mandatory')
stackableHubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubIndex.setStatus('mandatory')
stackableHubLobePort = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubLobePort.setStatus('mandatory')
stackableHubLobePhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubLobePhDet.setStatus('mandatory')
stackableHubLobeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolated", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stackableHubLobeMask.setStatus('mandatory')
stackableHubLobeNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubLobeNsrtStatus.setStatus('mandatory')
stackableHubLobeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubLobeMacAddr.setStatus('mandatory')
stackableHubLobeBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubLobeBcnRemStatus.setStatus('mandatory')
stackableHubLobeBcnRemCause = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("no-removal", 1), ("phantom-error", 2), ("no-carrier", 3), ("bad-rate", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubLobeBcnRemCause.setStatus('mandatory')
stackableHubLobeTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 1, 4, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stackableHubLobeTimeStamp.setStatus('mandatory')
superStackHubs = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 1, 3, 2))
superStackHubNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubNumber.setStatus('mandatory')
superStackHubTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2), )
if mibBuilder.loadTexts: superStackHubTable.setStatus('mandatory')
superStackHubTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "superStackHubTableIndex"))
if mibBuilder.loadTexts: superStackHubTableEntry.setStatus('mandatory')
superStackHubTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubTableIndex.setStatus('mandatory')
superStackHubModel = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active-12-port-base-mau", 1), ("active-24-port-expansion-mau", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubModel.setStatus('mandatory')
superStackHub485Address = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHub485Address.setStatus('mandatory')
superStackHubStackPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubStackPosition.setStatus('mandatory')
superStackRiConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("no-ring-in-configured", 1), ("copper-ring-in-configured", 2), ("fiber-ring-in-configured", 3), ("copper-ring-in-disabled", 4), ("fiber-ring-in-disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackRiConfiguration.setStatus('mandatory')
superStackHubRiFTolState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubRiFTolState.setStatus('mandatory')
superStackHubRiMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolate", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubRiMask.setStatus('mandatory')
superStackHubRiPhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubRiPhDet.setStatus('mandatory')
superStackHubRiNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubRiNsrtStatus.setStatus('mandatory')
superStackHubRiBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubRiBcnRemStatus.setStatus('mandatory')
superStackRoConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("no-ring-out-configured", 1), ("copper-ring-out-configured", 2), ("fiber-ring-out-configured", 3), ("copper-ring-out-disabled", 4), ("fiber-ring-out-disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackRoConfiguration.setStatus('mandatory')
superStackHubRoFTolState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubRoFTolState.setStatus('mandatory')
superStackHubRoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolate", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubRoMask.setStatus('mandatory')
superStackHubRoPhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubRoPhDet.setStatus('mandatory')
superStackHubRoNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubRoNsrtStatus.setStatus('mandatory')
superStackHubRoBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubRoBcnRemStatus.setStatus('mandatory')
superStackHubCascadeUpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolate", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubCascadeUpMask.setStatus('mandatory')
superStackHubCascadeUpPhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubCascadeUpPhDet.setStatus('mandatory')
superStackHubCascadeUpNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubCascadeUpNsrtStatus.setStatus('mandatory')
superStackHubCascadeUpBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubCascadeUpBcnRemStatus.setStatus('mandatory')
superStackHubCascadeDownMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolate", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubCascadeDownMask.setStatus('mandatory')
superStackHubCascadeDownPhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubCascadeDownPhDet.setStatus('mandatory')
superStackHubCascadeDownNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubCascadeDownNsrtStatus.setStatus('mandatory')
superStackHubCascadeDownBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubCascadeDownBcnRemStatus.setStatus('mandatory')
superStackHubDataRateState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s4Mbps", 1), ("s16Mbps", 2), ("autoConfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubDataRateState.setStatus('mandatory')
superStackHubDeviceTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 26), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubDeviceTimeStamp.setStatus('mandatory')
superStackHubMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubMgmtStatus.setStatus('mandatory')
superStackHubProxyAgentID = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubProxyAgentID.setStatus('mandatory')
superStackHubAttachedAgentType = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("unknown", 2), ("basic-68000", 3), ("advanced-960", 4), ("reserved1", 5), ("reserved2", 6), ("reserved3", 7), ("reserved4", 8), ("reserved5", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubAttachedAgentType.setStatus('mandatory')
superStackHubAttachedAgentState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("not-applicable", 1), ("normal", 2), ("duplicate-detected", 3), ("management-disabled", 4), ("hardware-faulted", 5), ("agent-MAC-auto-isolated", 6), ("agent-MAC-mgmt-isolated", 7), ("reserved1", 8), ("reserved2", 9), ("reserved3", 10), ("reserved4", 11), ("reserved5", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubAttachedAgentState.setStatus('mandatory')
superStackHubAttachedAgentControl = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enable-MAC-insertion", 3), ("isolate-MAC-insertion", 4), ("read-value", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubAttachedAgentControl.setStatus('mandatory')
superStackHubTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubTemperatureStatus.setStatus('mandatory')
superStackHubPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal-AC-power", 1), ("normal-redundant-DC-power", 2), ("non-redundant-DC-power", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubPowerStatus.setStatus('mandatory')
superStackHubAutoRecovControl = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("reset", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubAutoRecovControl.setStatus('mandatory')
superStackHubAutoRecovRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubAutoRecovRetries.setStatus('mandatory')
superStackHubCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubCodeVersion.setStatus('mandatory')
superStackHubAutoRecovState = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in-recovery", 1), ("normal", 2), ("halted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubAutoRecovState.setStatus('mandatory')
superStackHubRawCommandData = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubRawCommandData.setStatus('mandatory')
superStackHubAutoRecovMode = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("selfEnabling", 1), ("non-selfEnabling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubAutoRecovMode.setStatus('mandatory')
superStackHubRouterPortPhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubRouterPortPhDet.setStatus('mandatory')
superStackHubRouterPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolated", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubRouterPortMask.setStatus('mandatory')
superStackHubRouterPortNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubRouterPortNsrtStatus.setStatus('mandatory')
superStackHubRouterPortMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 43), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubRouterPortMacAddr.setStatus('mandatory')
superStackHubRouterPortBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubRouterPortBcnRemStatus.setStatus('mandatory')
superStackHubRouterPortBcnRemCause = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("no-removal", 1), ("phantom-error", 2), ("no-carrier", 3), ("bad-rate", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubRouterPortBcnRemCause.setStatus('mandatory')
superStackHubLobeNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubLobeNumber.setStatus('mandatory')
superStackHubLobeTable = MibTable((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 4), )
if mibBuilder.loadTexts: superStackHubLobeTable.setStatus('mandatory')
superStackHubLobeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 4, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "superStackHubIndex"), (0, "STARTEK-PRIVATE-MIB", "superStackHubLobePort"))
if mibBuilder.loadTexts: superStackHubLobeEntry.setStatus('mandatory')
superStackHubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubIndex.setStatus('mandatory')
superStackHubLobePort = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubLobePort.setStatus('mandatory')
superStackHubLobeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("user-normal", 1), ("ring-out-unused", 2), ("ring-in-unused", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubLobeConfig.setStatus('mandatory')
superStackHubLobePhDet = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noPhantom", 1), ("phantDetected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubLobePhDet.setStatus('mandatory')
superStackHubLobeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isolated", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: superStackHubLobeMask.setStatus('mandatory')
superStackHubLobeNsrtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bypassed", 1), ("inserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubLobeNsrtStatus.setStatus('mandatory')
superStackHubLobeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubLobeMacAddr.setStatus('mandatory')
superStackHubLobeBcnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("autoIsolated", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubLobeBcnRemStatus.setStatus('mandatory')
superStackHubLobeBcnRemCause = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 1, 3, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("no-removal", 1), ("phantom-error", 2), ("no-carrier", 3), ("bad-rate", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: superStackHubLobeBcnRemCause.setStatus('mandatory')
managers = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 2, 1))
mgrNumber = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgrNumber.setStatus('mandatory')
mgrAutoAdd = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgrAutoAdd.setStatus('mandatory')
mgrAutoAge = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgrAutoAge.setStatus('mandatory')
mgrAgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgrAgeInterval.setStatus('mandatory')
mgrTable = MibTable((1, 3, 6, 1, 4, 1, 260, 2, 1, 5), )
if mibBuilder.loadTexts: mgrTable.setStatus('mandatory')
mgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 2, 1, 5, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "mgrIndex"))
if mibBuilder.loadTexts: mgrEntry.setStatus('mandatory')
mgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 1, 5, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgrIndex.setStatus('mandatory')
mgrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 1, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgrIpAddr.setStatus('mandatory')
mgrCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgrCommunity.setStatus('mandatory')
mgrTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 1, 5, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgrTimeStamp.setStatus('mandatory')
mgrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgrStatus.setStatus('mandatory')
mgrPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 1, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgrPhysAddr.setStatus('mandatory')
mgrInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 1, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgrInterfaceIndex.setStatus('mandatory')
versions = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 2, 2))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 2, 3))
versionHardware = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionHardware.setStatus('mandatory')
versionEPROMFirmware = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionEPROMFirmware.setStatus('mandatory')
versionFLASHFirmware = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: versionFLASHFirmware.setStatus('mandatory')
configEPROMSize = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configEPROMSize.setStatus('mandatory')
configFLASHSize = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFLASHSize.setStatus('mandatory')
configFLASHCount = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configFLASHCount.setStatus('mandatory')
configDRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configDRAMSize.setStatus('mandatory')
configDRAMCount = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configDRAMCount.setStatus('mandatory')
configRS232Number = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configRS232Number.setStatus('mandatory')
configRS232PortTable = MibTable((1, 3, 6, 1, 4, 1, 260, 2, 3, 7), )
if mibBuilder.loadTexts: configRS232PortTable.setStatus('mandatory')
configRS232PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 2, 3, 7, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "configRS232PortIndex"))
if mibBuilder.loadTexts: configRS232PortEntry.setStatus('mandatory')
configRS232PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configRS232PortIndex.setStatus('mandatory')
configRS232PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 3, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configRS232PortName.setStatus('mandatory')
configRS232BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("b1200", 1), ("b2400", 2), ("b4800", 3), ("b9600", 4), ("b19200", 5), ("b38400", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configRS232BaudRate.setStatus('mandatory')
configRS232ModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("modemDetected", 1), ("autobauding", 2), ("noModemDetected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configRS232ModemStatus.setStatus('mandatory')
configRS232ConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("connected", 1), ("connectionWait", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configRS232ConnectionStatus.setStatus('mandatory')
configRS232ModemConfigString = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 3, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configRS232ModemConfigString.setStatus('mandatory')
configRS232OutputData = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 3, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configRS232OutputData.setStatus('mandatory')
configRS232InputData = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 3, 7, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configRS232InputData.setStatus('mandatory')
configRS232HardwareFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 3, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configRS232HardwareFlowControl.setStatus('mandatory')
configMonitorMode = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("monitor", 1), ("slip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMonitorMode.setStatus('mandatory')
configMonitorInput = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMonitorInput.setStatus('mandatory')
configMonitorDiags = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configMonitorDiags.setStatus('mandatory')
configParseControl = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("parseAll", 1), ("parseMost", 2), ("parseLess", 3), ("parseNone", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configParseControl.setStatus('mandatory')
configBootSource = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eprom", 1), ("flash", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: configBootSource.setStatus('mandatory')
security = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 2, 4))
securityControl = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityControl.setStatus('mandatory')
securityMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 260, 2, 4, 2), )
if mibBuilder.loadTexts: securityMacAddressTable.setStatus('mandatory')
pysmiFakeCol1002 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 4, 2, 1) + (1002, ), Integer32())
securityMacAddressTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 2, 4, 2, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "pysmiFakeCol1002"))
if mibBuilder.loadTexts: securityMacAddressTableEntry.setStatus('mandatory')
securityMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityMacAddress.setStatus('mandatory')
securityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("disallowed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: securityStatus.setStatus('mandatory')
securityLockoutCount = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 2, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: securityLockoutCount.setStatus('mandatory')
recovery = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 2, 5))
recoveryControl = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recoveryControl.setStatus('mandatory')
recovery828Support = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recovery828Support.setStatus('mandatory')
recoveryRetryLimit = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recoveryRetryLimit.setStatus('mandatory')
recoveryRetryTimePeriod = MibScalar((1, 3, 6, 1, 4, 1, 260, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recoveryRetryTimePeriod.setStatus('mandatory')
rmonextns = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 4))
stationstatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 4, 1))
stationhistory = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 4, 2))
trHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 260, 4, 2, 1), )
if mibBuilder.loadTexts: trHistoryTable.setStatus('mandatory')
trHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "trHistoryIndex"), (0, "STARTEK-PRIVATE-MIB", "trHistorySampleIndex"))
if mibBuilder.loadTexts: trHistoryEntry.setStatus('mandatory')
trHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryIndex.setStatus('mandatory')
trHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistorySampleIndex.setStatus('mandatory')
trHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryIntervalStart.setStatus('mandatory')
trHistoryInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryInPkts.setStatus('mandatory')
trHistoryOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryOutPkts.setStatus('mandatory')
trHistoryInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryInOctets.setStatus('mandatory')
trHistoryOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryOutOctets.setStatus('mandatory')
trHistoryOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryOutBroadcastPkts.setStatus('mandatory')
trHistoryOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryOutMulticastPkts.setStatus('mandatory')
trHistoryClaimTokenPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryClaimTokenPkts.setStatus('mandatory')
trHistoryInLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryInLineErrors.setStatus('mandatory')
trHistoryOutLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryOutLineErrors.setStatus('mandatory')
trHistoryInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryInternalErrors.setStatus('mandatory')
trHistoryInBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryInBurstErrors.setStatus('mandatory')
trHistoryOutBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryOutBurstErrors.setStatus('mandatory')
trHistoryACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryACErrors.setStatus('mandatory')
trHistoryAbortErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryAbortErrors.setStatus('mandatory')
trHistoryLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryLostFrameErrors.setStatus('mandatory')
trHistoryCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryCongestionErrors.setStatus('mandatory')
trHistoryFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryFrameCopiedErrors.setStatus('mandatory')
trHistoryFrequencyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryFrequencyErrors.setStatus('optional')
trHistoryTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryTokenErrors.setStatus('mandatory')
trHistoryInBeaconErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryInBeaconErrors.setStatus('mandatory')
trHistoryOutBeaconErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryOutBeaconErrors.setStatus('mandatory')
trHistoryInsertions = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryInsertions.setStatus('mandatory')
trHistorySoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistorySoftErrors.setStatus('mandatory')
trHistoryOpaqueTable = MibTable((1, 3, 6, 1, 4, 1, 260, 4, 2, 2), )
if mibBuilder.loadTexts: trHistoryOpaqueTable.setStatus('mandatory')
pysmiFakeCol1003 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 2, 1) + (1003, ), Integer32())
pysmiFakeCol1004 = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 2, 1) + (1004, ), Integer32())
trHistoryOpaqueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 4, 2, 2, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "pysmiFakeCol1003"), (0, "STARTEK-PRIVATE-MIB", "pysmiFakeCol1004"))
if mibBuilder.loadTexts: trHistoryOpaqueEntry.setStatus('mandatory')
trHistoryTableData = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 2, 2, 1, 1), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trHistoryTableData.setStatus('mandatory')
protocolstatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 260, 4, 3))
protocolData = MibScalar((1, 3, 6, 1, 4, 1, 260, 4, 3, 1), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolData.setStatus('mandatory')
protocolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 260, 4, 3, 2), )
if mibBuilder.loadTexts: protocolStatsTable.setStatus('mandatory')
protocolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 260, 4, 3, 2, 1), ).setIndexNames((0, "STARTEK-PRIVATE-MIB", "protocolIfIndex"), (0, "STARTEK-PRIVATE-MIB", "protocolID"))
if mibBuilder.loadTexts: protocolStatsEntry.setStatus('mandatory')
protocolIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolIfIndex.setStatus('mandatory')
protocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82))).clone(namedValues=NamedValues(("all-packets", 1), ("unknown-protocols", 2), ("ieee8025-mac-protocol", 3), ("ieee8025-source-routed-packets", 4), ("ieee8025-nonsource-routed-packets", 5), ("dix-ethernet-packets", 6), ("ieee8022-llc-protocol", 7), ("ieee8022-llc-snap", 8), ("ip", 9), ("ip-icmp", 10), ("ip-gcp", 11), ("ip-tcp", 12), ("ip-egp", 13), ("ip-igp", 14), ("ip-chaos", 15), ("ip-udp", 16), ("ip-tp4", 17), ("ip-other", 18), ("arp", 19), ("netware-ipx", 20), ("llc-null-sap", 21), ("llc-individual-mgmt-sap", 22), ("llc-group-mgmt-sap", 23), ("llc-individual-sna-path-ctrl-sap", 24), ("llc-group-sna-path-ctrl-sap", 25), ("llc-arpanet-ip-sap", 26), ("llc-3com-xns-sap", 27), ("llc-netbios-sap", 28), ("llc-individual-lan-mgmt-sap", 29), ("llc-group-lan-mgmt-sap", 30), ("llc-remote-program-load-sap", 31), ("llc-iso-network-layer-sap", 32), ("llc-global-sap", 33), ("other-llc-sap", 34), ("chaosnet", 35), ("banyan-vines", 36), ("decnet", 37), ("dec-lat", 38), ("dec-lanbridge", 39), ("appletalk", 40), ("xerox-3com", 41), ("ipx-uknown", 42), ("ipx-routinginformationpacket", 43), ("ipx-echopacket", 44), ("ipx-errorpacket", 45), ("ipx-packetexchangeprotocol", 46), ("ipx-sequencedpacketprotocol", 47), ("ipx-netwarecoreprotocol", 48), ("ipx-other", 49), ("ncp", 50), ("ncp-create", 51), ("ncp-request", 52), ("ncp-reply", 53), ("ncp-destroyserviceconnection", 54), ("ncp-requestinprogressresponse", 55), ("ncp-other", 56), ("sap-generalservicequery", 57), ("sap-generalserviceresponse", 58), ("sap-nearestserverquery", 59), ("sap-nearestserverresponse", 60), ("llc-startekdiscovery", 61), ("reserved62", 62), ("reserved63", 63), ("reserved64", 64), ("reserved65", 65), ("reserved66", 66), ("reserved67", 67), ("reserved68", 68), ("reserved69", 69), ("reserved70", 70), ("reserved71", 71), ("reserved72", 72), ("reserved73", 73), ("reserved74", 74), ("reserved75", 75), ("reserved76", 76), ("reserved77", 77), ("reserved78", 78), ("reserved79", 79), ("reserved80", 80), ("reserved81", 81), ("reserved82", 82)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolID.setStatus('mandatory')
protocolPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolPkts.setStatus('mandatory')
protocolOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 260, 4, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolOctets.setStatus('mandatory')
mibBuilder.exportSymbols("STARTEK-PRIVATE-MIB", recovery=recovery, protocolPkts=protocolPkts, stationstatistics=stationstatistics, m828RiNeighborType=m828RiNeighborType, m828HubRoFTolState=m828HubRoFTolState, fTRLobeConnectTimeStamp=fTRLobeConnectTimeStamp, rmonAgentIBNumber=rmonAgentIBNumber, superStackHubLobeBcnRemStatus=superStackHubLobeBcnRemStatus, managers=managers, rmonAgentID=rmonAgentID, trHistoryInOctets=trHistoryInOctets, rmonAgentOOBTableData=rmonAgentOOBTableData, rmonAgentIBMACData11=rmonAgentIBMACData11, pysmiFakeCol1002=pysmiFakeCol1002, stackableHubAttachedAgentState=stackableHubAttachedAgentState, superStackHubRouterPortNsrtStatus=superStackHubRouterPortNsrtStatus, m828HubDataRateSwitch=m828HubDataRateSwitch, fTRLobeRawCommandData=fTRLobeRawCommandData, fChassis=fChassis, stackableHubLobeTimeStamp=stackableHubLobeTimeStamp, m828HubLobeEntry=m828HubLobeEntry, trHistoryTableData=trHistoryTableData, configRS232OutputData=configRS232OutputData, stackableHubProxyAgentID=stackableHubProxyAgentID, superStackHubCodeVersion=superStackHubCodeVersion, trHistorySoftErrors=trHistorySoftErrors, stackableHubModel=stackableHubModel, stackableHubRoMask=stackableHubRoMask, fEthernet485Address=fEthernet485Address, protocolOctets=protocolOctets, stackableHubLobeMask=stackableHubLobeMask, rmonAgentIBMACData9=rmonAgentIBMACData9, fEthernet=fEthernet, configRS232PortIndex=configRS232PortIndex, securityControl=securityControl, fTRMainRingRoBcnRemStatus=fTRMainRingRoBcnRemStatus, recoveryRetryTimePeriod=recoveryRetryTimePeriod, stackableHubLobeTable=stackableHubLobeTable, stackableHubRiNsrtStatus=stackableHubRiNsrtStatus, fChassisLocation=fChassisLocation, fEthernetTableIndex=fEthernetTableIndex, mgrTimeStamp=mgrTimeStamp, fTRLobeConnectPort=fTRLobeConnectPort, fTRLobeTableIndex=fTRLobeTableIndex, fChassisNumber=fChassisNumber, fTRLobe=fTRLobe, versionEPROMFirmware=versionEPROMFirmware, fTRMainRingAutoRecovRetries=fTRMainRingAutoRecovRetries, fTRLobeChassisIndex=fTRLobeChassisIndex, fTRMainRingRiNsrtStatus=fTRMainRingRiNsrtStatus, superStackHubPowerStatus=superStackHubPowerStatus, superStackHubRouterPortBcnRemCause=superStackHubRouterPortBcnRemCause, fTRMainRingRawCommandData=fTRMainRingRawCommandData, trHistoryOutBurstErrors=trHistoryOutBurstErrors, superStackHubRouterPortPhDet=superStackHubRouterPortPhDet, rmonAgentIBMACData5=rmonAgentIBMACData5, trHistoryInLineErrors=trHistoryInLineErrors, stackableHubRiNeighborType=stackableHubRiNeighborType, m828HubProxyAgentID=m828HubProxyAgentID, superStackHubAutoRecovControl=superStackHubAutoRecovControl, superStackHubRouterPortMask=superStackHubRouterPortMask, mgrEntry=mgrEntry, fTRLobeAutoRecovState=fTRLobeAutoRecovState, stackableHubAutoRecovRetries=stackableHubAutoRecovRetries, superStackHubRoNsrtStatus=superStackHubRoNsrtStatus, m828HubRiPhDet=m828HubRiPhDet, fTRMainRingPowerStatus=fTRMainRingPowerStatus, fTRLobePowerStatus=fTRLobePowerStatus, rmonAgentMonitorCommand=rmonAgentMonitorCommand, stackableHubRawCommandData=stackableHubRawCommandData, m828HubRawCommandData=m828HubRawCommandData, m828HubLobePhDet=m828HubLobePhDet, superStackHubCascadeUpMask=superStackHubCascadeUpMask, fTRLobeTemperatureStatus=fTRLobeTemperatureStatus, fTRLobeConnectEntry=fTRLobeConnectEntry, trHistoryInBeaconErrors=trHistoryInBeaconErrors, mgrCommunity=mgrCommunity, m828HubRiFTolSw=m828HubRiFTolSw, superStackHubNumber=superStackHubNumber, fTRMainRingChassisIndex=fTRMainRingChassisIndex, m828HubTableIndex=m828HubTableIndex, stackableHubAutoRecovState=stackableHubAutoRecovState, fTRLobeConnectNumber=fTRLobeConnectNumber, fEthernetCageType=fEthernetCageType, m828Hub485Address=m828Hub485Address, fEthernetTableEntry=fEthernetTableEntry, superStackHubs=superStackHubs, fTRMainRingCageType=fTRMainRingCageType, stackableHubDataRateTimeStamp=stackableHubDataRateTimeStamp, configRS232ModemStatus=configRS232ModemStatus, superStackHubTemperatureStatus=superStackHubTemperatureStatus, rmonAgentNoMapOid=rmonAgentNoMapOid, fTRLobeAutoRecovMode=fTRLobeAutoRecovMode, trHistorySampleIndex=trHistorySampleIndex, fEthernetTable=fEthernetTable, superStackHubRiNsrtStatus=superStackHubRiNsrtStatus, m828Hubs=m828Hubs, fEthernetRawCommandData=fEthernetRawCommandData, stackableHubRoNeighborAddr=stackableHubRoNeighborAddr, trHistoryCongestionErrors=trHistoryCongestionErrors, m828HubModel=m828HubModel, fTRMainRingAutoRecovControl=fTRMainRingAutoRecovControl, superStackHubAutoRecovState=superStackHubAutoRecovState, rmonAgentIBMACData1=rmonAgentIBMACData1, fTRLobeConnectBcnRemCause=fTRLobeConnectBcnRemCause, fChassisIndex=fChassisIndex, protocolID=protocolID, fTRMainRingTable=fTRMainRingTable, m828HubRoNsrtStatus=m828HubRoNsrtStatus, configuration=configuration, configBootSource=configBootSource, superStackHubRoPhDet=superStackHubRoPhDet, maintenance=maintenance, startek=startek, fTRLobeBkPlnTimeStamp=fTRLobeBkPlnTimeStamp, fTRMainRingRiTimeStamp=fTRMainRingRiTimeStamp, fTRMainRingModel=fTRMainRingModel, fTRMainRingRiPhDet=fTRMainRingRiPhDet, protocolStatsTable=protocolStatsTable, fTRMainRing=fTRMainRing, recovery828Support=recovery828Support, fTRMainRingLobePhDet=fTRMainRingLobePhDet, recoveryRetryLimit=recoveryRetryLimit, stackableHub485Address=stackableHub485Address, configMonitorDiags=configMonitorDiags, fTRMainRingLobeTimeStamp=fTRMainRingLobeTimeStamp, fTRLobeProxyAgentID=fTRLobeProxyAgentID, m828HubRoMask=m828HubRoMask, superStackHubLobeConfig=superStackHubLobeConfig, fTRMainRingLobeNsrtStatus=fTRMainRingLobeNsrtStatus, fTRMainRingAutoRecovState=fTRMainRingAutoRecovState, fTRLobeConnectBcnRemStatus=fTRLobeConnectBcnRemStatus, stackableHubDataRateState=stackableHubDataRateState, pysmiFakeCol1003=pysmiFakeCol1003, superStackHubTable=superStackHubTable, stackableHubTableEntry=stackableHubTableEntry, stackableHubTableIndex=stackableHubTableIndex, fChassisTable=fChassisTable, fTRLobeDataRateTimeStamp=fTRLobeDataRateTimeStamp, rmonAgentIBNetworkType=rmonAgentIBNetworkType, trHistoryClaimTokenPkts=trHistoryClaimTokenPkts, rmonAgentIBSampleInterval=rmonAgentIBSampleInterval, m828HubLobePort=m828HubLobePort, rmonAgentOOBTableIndex=rmonAgentOOBTableIndex, fTRMainRingLobeBcnRemStatus=fTRMainRingLobeBcnRemStatus, rmonextns=rmonextns, fTRLobeSlotIndex=fTRLobeSlotIndex, rmonAgentIBMACData8=rmonAgentIBMACData8, fTRLobeConnectMask=fTRLobeConnectMask, superStackHubLobePhDet=superStackHubLobePhDet, superStackHubAutoRecovMode=superStackHubAutoRecovMode, configDRAMCount=configDRAMCount, mgrTable=mgrTable, trHistoryInBurstErrors=trHistoryInBurstErrors, mgrInterfaceIndex=mgrInterfaceIndex, configRS232ModemConfigString=configRS232ModemConfigString, securityLockoutCount=securityLockoutCount, superStackRiConfiguration=superStackRiConfiguration, superStackHubAttachedAgentState=superStackHubAttachedAgentState, superStackHubRoBcnRemStatus=superStackHubRoBcnRemStatus, pysmiFakeCol1000=pysmiFakeCol1000, fTRMainRingRiNghbrAddr=fTRMainRingRiNghbrAddr, fTRLobeModel=fTRLobeModel, protocolData=protocolData, superStackHubRouterPortBcnRemStatus=superStackHubRouterPortBcnRemStatus, superStackHubStackPosition=superStackHubStackPosition, fTRLobeConnectTable=fTRLobeConnectTable, securityMacAddressTableEntry=securityMacAddressTableEntry, stackableHubLobeNsrtStatus=stackableHubLobeNsrtStatus, fTRMainRingRiNghbrType=fTRMainRingRiNghbrType, superStackHubRoMask=superStackHubRoMask, fTRLobeNumber=fTRLobeNumber, rmonAgentIBMACData10=rmonAgentIBMACData10, configRS232PortEntry=configRS232PortEntry, superStackHubLobePort=superStackHubLobePort, trHistoryInternalErrors=trHistoryInternalErrors, stackableHubLobeEntry=stackableHubLobeEntry, fTRLobeBkPlnNsrtState=fTRLobeBkPlnNsrtState, fTRMainRingRoNsrtStatus=fTRMainRingRoNsrtStatus, superStackHubAttachedAgentType=superStackHubAttachedAgentType, configRS232PortTable=configRS232PortTable, superStackHubLobeNumber=superStackHubLobeNumber, fTRLobe485Address=fTRLobe485Address, fEthernetCodeVersion=fEthernetCodeVersion, fTRMainRingTableIndex=fTRMainRingTableIndex, superStackHubMgmtStatus=superStackHubMgmtStatus, superStackHubLobeTable=superStackHubLobeTable, superStackHubLobeEntry=superStackHubLobeEntry, mgrAutoAge=mgrAutoAge, m828HubRiBcnRemStatus=m828HubRiBcnRemStatus, trHistoryInsertions=trHistoryInsertions, superStackRoConfiguration=superStackRoConfiguration, configFLASHCount=configFLASHCount, stackableHubRiBcnRemStatus=stackableHubRiBcnRemStatus, superStackHub485Address=superStackHub485Address, stackable=stackable, versionFLASHFirmware=versionFLASHFirmware, products=products, rmonAgentIBMACData7=rmonAgentIBMACData7, fTRMainRingRiBcnRemStatus=fTRMainRingRiBcnRemStatus, stackableHubMgmtStatus=stackableHubMgmtStatus, trHistoryInPkts=trHistoryInPkts, m828HubLobeTable=m828HubLobeTable, fTRMainRing485Address=fTRMainRing485Address, stackableHubRoFTolState=stackableHubRoFTolState, rmonAgentOOBTableDescription=rmonAgentOOBTableDescription, fTRMainRingBkPlnNsrtState=fTRMainRingBkPlnNsrtState, m828HubLobeBcnRemStatus=m828HubLobeBcnRemStatus, trHistoryIntervalStart=trHistoryIntervalStart, rmonAgentIBDataBytes=rmonAgentIBDataBytes, fEthernetChassisIndex=fEthernetChassisIndex, superStackHubRiFTolState=superStackHubRiFTolState, configEPROMSize=configEPROMSize, trHistoryEntry=trHistoryEntry, fTRMainRingTemperatureStatus=fTRMainRingTemperatureStatus, trHistoryOutBroadcastPkts=trHistoryOutBroadcastPkts, fTRLobeCodeVersion=fTRLobeCodeVersion, stackableHubRiFTolState=stackableHubRiFTolState, superStackHubRawCommandData=superStackHubRawCommandData, superStackHubAutoRecovRetries=superStackHubAutoRecovRetries, fTRMainRingRiMask=fTRMainRingRiMask, rmonAgentIPAdressControl=rmonAgentIPAdressControl, stackableHubLobeBcnRemCause=stackableHubLobeBcnRemCause, stackableHubAttachedAgentType=stackableHubAttachedAgentType, fTRLobeIndex=fTRLobeIndex, stackableHubLobeNumber=stackableHubLobeNumber, configRS232ConnectionStatus=configRS232ConnectionStatus, fTRMainRingRiFTolState=fTRMainRingRiFTolState, m828HubCodeVersion=m828HubCodeVersion, superStackHubRiMask=superStackHubRiMask, fTRMainRingRoCableType=fTRMainRingRoCableType, securityMacAddressTable=securityMacAddressTable, mgrNumber=mgrNumber, trHistoryACErrors=trHistoryACErrors, fTRLobeTable=fTRLobeTable, superStackHubLobeMask=superStackHubLobeMask, trHistoryTokenErrors=trHistoryTokenErrors, superStackHubCascadeDownMask=superStackHubCascadeDownMask, superStackHubCascadeDownNsrtStatus=superStackHubCascadeDownNsrtStatus, configRS232InputData=configRS232InputData, securityStatus=securityStatus, recoveryControl=recoveryControl, configMonitorMode=configMonitorMode, trHistoryOpaqueEntry=trHistoryOpaqueEntry, stackableHubAutoRecovMode=stackableHubAutoRecovMode, m828HubNumber=m828HubNumber, fTRLobeMgmtStatus=fTRLobeMgmtStatus, stackableHubTemperatureStatus=stackableHubTemperatureStatus, mgrAutoAdd=mgrAutoAdd, fTRMainRingAttachedAgentType=fTRMainRingAttachedAgentType, trHistoryFrequencyErrors=trHistoryFrequencyErrors, superStackHubRiBcnRemStatus=superStackHubRiBcnRemStatus, superStackHubCascadeUpPhDet=superStackHubCascadeUpPhDet, superStackHubTableIndex=superStackHubTableIndex)
mibBuilder.exportSymbols("STARTEK-PRIVATE-MIB", security=security, stationhistory=stationhistory, fEthernetModel=fEthernetModel, fTRMainRingDataRateTimeStamp=fTRMainRingDataRateTimeStamp, rmonAgentOOBRawDataCommand=rmonAgentOOBRawDataCommand, versionHardware=versionHardware, mgrAgeInterval=mgrAgeInterval, fTRMainRingDataRateState=fTRMainRingDataRateState, configRS232PortName=configRS232PortName, rmonAgentIBTableEntry=rmonAgentIBTableEntry, trHistoryOutBeaconErrors=trHistoryOutBeaconErrors, rmonAgentIBMACData4=rmonAgentIBMACData4, mgrIndex=mgrIndex, stackableHubRoTimeStamp=stackableHubRoTimeStamp, fTRLobeAutoRecovRetries=fTRLobeAutoRecovRetries, superStackHubRoFTolState=superStackHubRoFTolState, stackableHubCodeVersion=stackableHubCodeVersion, mgrIpAddr=mgrIpAddr, configRS232BaudRate=configRS232BaudRate, trHistoryAbortErrors=trHistoryAbortErrors, fTRLobeConnectNsrtStatus=fTRLobeConnectNsrtStatus, superStackHubDeviceTimeStamp=superStackHubDeviceTimeStamp, fTRLobeTableEntry=fTRLobeTableEntry, trHistoryTable=trHistoryTable, superStackHubProxyAgentID=superStackHubProxyAgentID, stackableHubTable=stackableHubTable, fTRMainRingAutoRecovMode=fTRMainRingAutoRecovMode, stackableHubRiNeighborAddr=stackableHubRiNeighborAddr, rmonAgentDownloadData=rmonAgentDownloadData, fTRMainRingNumber=fTRMainRingNumber, configRS232HardwareFlowControl=configRS232HardwareFlowControl, fTRMainRingRoFTolState=fTRMainRingRoFTolState, fTRMainRingCodeVersion=fTRMainRingCodeVersion, superStackHubModel=superStackHubModel, superStackHubLobeBcnRemCause=superStackHubLobeBcnRemCause, stackableHubLobePhDet=stackableHubLobePhDet, stackableHubRoPhDet=stackableHubRoPhDet, trHistoryFrameCopiedErrors=trHistoryFrameCopiedErrors, fTRMainRingRoPhDet=fTRMainRingRoPhDet, m828HubTable=m828HubTable, fChassisTableEntry=fChassisTableEntry, configParseControl=configParseControl, fTRMainRingRoNghbrType=fTRMainRingRoNghbrType, stackableHubNumber=stackableHubNumber, stackableHubRiTimeStamp=stackableHubRiTimeStamp, m828HubLobeTimeStamp=m828HubLobeTimeStamp, configMonitorInput=configMonitorInput, fEthernetSlotIndex=fEthernetSlotIndex, fTwx=fTwx, superStackHubAttachedAgentControl=superStackHubAttachedAgentControl, fTRMainRingRoMask=fTRMainRingRoMask, stackableHubs=stackableHubs, fTRMainRingBkPlnTimeStamp=fTRMainRingBkPlnTimeStamp, rmonAgentOOBTableEntry=rmonAgentOOBTableEntry, fFddi=fFddi, stackableHubLobeMacAddr=stackableHubLobeMacAddr, fTRMainRingRoNghbrAddr=fTRMainRingRoNghbrAddr, m828HubRoFTolSw=m828HubRoFTolSw, fTRLobeConnectPhDet=fTRLobeConnectPhDet, stackableHubRiMask=stackableHubRiMask, m828RiNeighborAddr=m828RiNeighborAddr, m828HubRoPhDet=m828HubRoPhDet, pysmiFakeCol1004=pysmiFakeCol1004, stackableHubRoNsrtStatus=stackableHubRoNsrtStatus, fEthernetNumber=fEthernetNumber, rmonAgentIBNonMACUtilization=rmonAgentIBNonMACUtilization, fChassisModel=fChassisModel, m828HubTableEntry=m828HubTableEntry, superStackHubCascadeUpNsrtStatus=superStackHubCascadeUpNsrtStatus, configDRAMSize=configDRAMSize, m828HubLobeMacAddr=m828HubLobeMacAddr, rmonAgentIBUtilization=rmonAgentIBUtilization, fTRMainRingSlotIndex=fTRMainRingSlotIndex, superStackHubRiPhDet=superStackHubRiPhDet, trHistoryIndex=trHistoryIndex, trHistoryOpaqueTable=trHistoryOpaqueTable, fTRMainRingProxyAgentID=fTRMainRingProxyAgentID, m828HubRiMask=m828HubRiMask, superStackHubCascadeDownBcnRemStatus=superStackHubCascadeDownBcnRemStatus, superStackHubLobeMacAddr=superStackHubLobeMacAddr, protocolStatsEntry=protocolStatsEntry, trHistoryOutLineErrors=trHistoryOutLineErrors, m828RoTimeStamp=m828RoTimeStamp, rmonAgentIBMACData2=rmonAgentIBMACData2, superStackHubIndex=superStackHubIndex, rmonAgentMonitorResponse=rmonAgentMonitorResponse, m828Series=m828Series, m828HubRiFTolState=m828HubRiFTolState, superStackHubDataRateState=superStackHubDataRateState, fTRMainRingRoTimeStamp=fTRMainRingRoTimeStamp, fTRMainRingLobeMacAddr=fTRMainRingLobeMacAddr, mgrPhysAddr=mgrPhysAddr, fEthernetProxyAgentID=fEthernetProxyAgentID, m828HubDataRateTimeStamp=m828HubDataRateTimeStamp, m828HubMgmtStatus=m828HubMgmtStatus, fTRMainRingAttachedAgentState=fTRMainRingAttachedAgentState, configRS232Number=configRS232Number, trHistoryOutMulticastPkts=trHistoryOutMulticastPkts, stackableHubLobePort=stackableHubLobePort, rmonAgentIBTableDescription=rmonAgentIBTableDescription, rmonAgentIBMACData3=rmonAgentIBMACData3, superStackHubTableEntry=superStackHubTableEntry, securityMacAddress=securityMacAddress, fTRMainRingRiCableType=fTRMainRingRiCableType, m828RoNeighborType=m828RoNeighborType, stackableHubRiPhDet=stackableHubRiPhDet, m828HubLobeMask=m828HubLobeMask, rmonAgentMACStatTableEntry=rmonAgentMACStatTableEntry, stackableHubAutoRecovControl=stackableHubAutoRecovControl, trHistoryLostFrameErrors=trHistoryLostFrameErrors, rmonAgentIBTableIndex=rmonAgentIBTableIndex, rmonAgentDescription=rmonAgentDescription, stackableHubRoBcnRemStatus=stackableHubRoBcnRemStatus, trHistoryOutPkts=trHistoryOutPkts, stackableHubIndex=stackableHubIndex, superStackHubLobeNsrtStatus=superStackHubLobeNsrtStatus, superStackHubCascadeUpBcnRemStatus=superStackHubCascadeUpBcnRemStatus, protocolstatistics=protocolstatistics, fTRLobeDataRateState=fTRLobeDataRateState, protocolIfIndex=protocolIfIndex, versions=versions, fTRMainRingLobeMask=fTRMainRingLobeMask, rmonAgentOOBNumber=rmonAgentOOBNumber, m828HubLobeNsrtStatus=m828HubLobeNsrtStatus, fEthernetMgmtStatus=fEthernetMgmtStatus, rmonAgentMACStatTable=rmonAgentMACStatTable, rmonAgentIBMACData0=rmonAgentIBMACData0, pysmiFakeCol1001=pysmiFakeCol1001, m828RiTimeStamp=m828RiTimeStamp, m828HubRiNsrtStatus=m828HubRiNsrtStatus, m828HubIndex=m828HubIndex, fTRLobeAutoRecovControl=fTRLobeAutoRecovControl, fTRLobeCageType=fTRLobeCageType, rmonAgentIBMACUtilization=rmonAgentIBMACUtilization, rmonAgentMACStatTableData=rmonAgentMACStatTableData, rmonAgentIBTable=rmonAgentIBTable, rmonAgent=rmonAgent, rmonAgentIBMacBytes=rmonAgentIBMacBytes, stackableHubRoNeighborType=stackableHubRoNeighborType, m828RoNeighborAddr=m828RoNeighborAddr, fTRMainRingTableEntry=fTRMainRingTableEntry, fEthernetBkPlnTimeStamp=fEthernetBkPlnTimeStamp, fTRMainRingMgmtStatus=fTRMainRingMgmtStatus, mgrStatus=mgrStatus, rmonAgentIBMACData6=rmonAgentIBMACData6, fSeries=fSeries, fEthernetBkPlnNsrtState=fEthernetBkPlnNsrtState, fTRLobeConnectMacAddr=fTRLobeConnectMacAddr, fEthernetPowerStatus=fEthernetPowerStatus, superStackHubCascadeDownPhDet=superStackHubCascadeDownPhDet, m828HubDataRateState=m828HubDataRateState, configFLASHSize=configFLASHSize, trHistoryOutOctets=trHistoryOutOctets, fChassisPowStatus=fChassisPowStatus, stackableHubLobeBcnRemStatus=stackableHubLobeBcnRemStatus, fEthernetTemperatureStatus=fEthernetTemperatureStatus, superStackHubRouterPortMacAddr=superStackHubRouterPortMacAddr, rmonAgentIBDataFrames=rmonAgentIBDataFrames, m828HubLobeNumber=m828HubLobeNumber, rmonAgentOOBTable=rmonAgentOOBTable, m828HubRoBcnRemStatus=m828HubRoBcnRemStatus, rmonAgentIBMacFrames=rmonAgentIBMacFrames)
