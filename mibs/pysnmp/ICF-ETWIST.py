#
# PySNMP MIB module ICF-ETWIST (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ICF-ETWIST
# Produced by pysmi-0.3.4 at Mon Apr 29 19:40:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
hubIntruderPort, hubIntruderAddress = mibBuilder.importSymbols("HP-ICF-GENERIC-RPTR", "hubIntruderPort", "hubIntruderAddress")
bridge1010, advStack12, repeaterAgent, advStackU16, icfHub, icfCommon, icfConfig, icfBridge, bridgeRemote, etherTwist24S, etherTwist48, thinLAN, advStack24, advStack48, fiberOptic, hpicfEnetSMM, etherTwist12, advStackU8 = mibBuilder.importSymbols("HP-ICF-OID", "bridge1010", "advStack12", "repeaterAgent", "advStackU16", "icfHub", "icfCommon", "icfConfig", "icfBridge", "bridgeRemote", "etherTwist24S", "etherTwist48", "thinLAN", "advStack24", "advStack48", "fiberOptic", "hpicfEnetSMM", "etherTwist12", "advStackU8")
ifAdminStatus, = mibBuilder.importSymbols("IF-MIB", "ifAdminStatus")
rptrPortAdminStatus, rptrAddrTrackLastSourceAddress = mibBuilder.importSymbols("SNMP-REPEATER-MIB", "rptrPortAdminStatus", "rptrAddrTrackLastSourceAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32, Bits, TimeTicks, ObjectIdentity, MibIdentifier, IpAddress, iso, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32", "Bits", "TimeTicks", "ObjectIdentity", "MibIdentifier", "IpAddress", "iso", "ModuleIdentity", "Gauge32")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
icfEtwistMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 1))
icfEtwistMib.setRevisions(('2000-11-03 22:20', '1996-09-06 02:58', '1994-02-25 00:00', '1993-07-09 00:00', '1992-04-16 00:00', '1991-04-24 00:00',))
if mibBuilder.loadTexts: icfEtwistMib.setLastUpdated('200011032220Z')
if mibBuilder.loadTexts: icfEtwistMib.setOrganization('Hewlett Packard Company, Network Infrastructure Solutions')
icfCommonAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11))
icfETwistConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2))
lastSetError = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111))).clone(namedValues=NamedValues(("unexpectedError", 100), ("resourceLimitExceeded", 101), ("disallowedSTPPortState", 102), ("incompleteSetlet", 103), ("invalidEventObject", 104), ("disallowedRemoteDevice", 105), ("disallowedLAPBAdrsPair", 106), ("adrsAlreadyPresent", 107), ("staticSectionFull", 108), ("cantDeletePermAdrs", 109), ("inconsistentValues", 110), ("downloadInProgress", 111)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastSetError.setStatus('obsolete')
password = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: password.setStatus('obsolete')
reset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reset.setStatus('obsolete')
selfTest = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selfTest.setStatus('obsolete')
semaphore = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: semaphore.setStatus('obsolete')
discovery = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6))
pollResponse = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pollResponse.setStatus('obsolete')
announceAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: announceAddress.setStatus('obsolete')
mapAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mapAddress.setStatus('obsolete')
mapState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapState.setStatus('obsolete')
mapPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapPort.setStatus('obsolete')
ipSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSubnetMask.setStatus('obsolete')
icfEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7))
eventNotificationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 1))
evtIpNotify = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evtIpNotify.setStatus('obsolete')
evtIpxNotify = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evtIpxNotify.setStatus('obsolete')
evtTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 2), )
if mibBuilder.loadTexts: evtTable.setStatus('obsolete')
evtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("warmStartEvent", 1), ("coldStartEvent", 2), ("spanTreeOrLinkBeatEvent", 3), ("temperatureOrSegmentationEvent", 4), ("backupLinkEvent", 5), ("intrusionEvent", 6), ("addressMovedEvent", 7), ("newAddressEvent", 8), ("rptrHealthEvent", 9), ("rptrResetEvent", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtIndex.setStatus('obsolete')
evtArm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evtArm.setStatus('obsolete')
evtTimeSinceOccurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtTimeSinceOccurrence.setStatus('obsolete')
evtThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3), )
if mibBuilder.loadTexts: evtThresholdTable.setStatus('obsolete')
evthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evthIndex.setStatus('obsolete')
evthArm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evthArm.setStatus('obsolete')
evthObject = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evthObject.setStatus('obsolete')
evthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evthThreshold.setStatus('obsolete')
evthHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evthHysteresis.setStatus('obsolete')
evthTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evthTimeInterval.setStatus('obsolete')
evthTimeSinceOccurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evthTimeSinceOccurrence.setStatus('obsolete')
linkTest = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8))
linkTestAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 1))
linkTest802MacAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTest802MacAddress.setStatus('obsolete')
linkTestIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestIpAddress.setStatus('obsolete')
linkTestIpxAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestIpxAddress.setStatus('obsolete')
linkTestRepetitions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestRepetitions.setStatus('obsolete')
linkTestSuccess = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestSuccess.setStatus('obsolete')
linkTestTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestTimeout.setStatus('obsolete')
icf8023MacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9), )
if mibBuilder.loadTexts: icf8023MacTable.setStatus('obsolete')
icf8023MacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacIndex.setStatus('obsolete')
icf8023MacInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacInBroadcastPkts.setStatus('obsolete')
icf8023MacOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacOutBroadcastPkts.setStatus('obsolete')
icf8023MacInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacInMulticastPkts.setStatus('obsolete')
icf8023MacOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacOutMulticastPkts.setStatus('obsolete')
icf8023MacRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacRunts.setStatus('obsolete')
icf8023MacGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacGiants.setStatus('obsolete')
icf8023MacMissedPktErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacMissedPktErrors.setStatus('obsolete')
icf8023MacExcessDeferrals = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacExcessDeferrals.setStatus('obsolete')
icf8023MacTotalMediaErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacTotalMediaErrors.setStatus('obsolete')
icf8023MacSpuriousIntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacSpuriousIntrs.setStatus('obsolete')
icfDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 10))
icfDownloadAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 10, 1))
icfDownloadIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfDownloadIpAddress.setStatus('obsolete')
icfDownloadIpxAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfDownloadIpxAddress.setStatus('obsolete')
icfDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfDownloadFilename.setStatus('obsolete')
hubThinlanFault = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubThinlanFault.setStatus('obsolete')
hubGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2))
hubGlobalErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalErrors.setStatus('obsolete')
hubGlobalCollisions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalCollisions.setStatus('obsolete')
hubGlobalPktFragments = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalPktFragments.setStatus('obsolete')
hubGlobalRunts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalRunts.setStatus('obsolete')
hubGlobalGiants = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalGiants.setStatus('obsolete')
hubGlobalCrcErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalCrcErrors.setStatus('obsolete')
hubGlobalAlignmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalAlignmentErrors.setStatus('obsolete')
hubGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalInOctets.setStatus('obsolete')
hubGlobalInUcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalInUcastPkts.setStatus('obsolete')
hubGlobalInNUcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalInNUcastPkts.setStatus('obsolete')
hubGlobalInBroadcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalInBroadcastPkts.setStatus('obsolete')
hubPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3), )
if mibBuilder.loadTexts: hubPortTable.setStatus('obsolete')
hubPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortIndex.setStatus('obsolete')
hubPortPktFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortPktFragments.setStatus('obsolete')
hubPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortCollisions.setStatus('obsolete')
hubPortSegmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortSegmentation.setStatus('obsolete')
hubPortLinkBeatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortLinkBeatStatus.setStatus('obsolete')
hubPortLinkBeatEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubPortLinkBeatEnable.setStatus('obsolete')
hubPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortMacAddress.setStatus('obsolete')
hubPortAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubPortAddressState.setStatus('obsolete')
hubPortPolarityReversed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortPolarityReversed.setStatus('obsolete')
hubPortLateEventDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortLateEventDisable.setStatus('obsolete')
hubBitmaps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 4))
hubPortsOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortsOperStatus.setStatus('obsolete')
hubAddressTableMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubAddressTableMaxAge.setStatus('obsolete')
hubAddressTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 6), )
if mibBuilder.loadTexts: hubAddressTable.setStatus('obsolete')
hubAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddressIndex.setStatus('obsolete')
hubAddressChunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(408, 408)).setFixedLength(408)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddressChunk.setStatus('obsolete')
hubNumBkpLinks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubNumBkpLinks.setStatus('obsolete')
hubBkpLinkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8), )
if mibBuilder.loadTexts: hubBkpLinkTable.setStatus('obsolete')
hubBkpLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubBkpLinkIndex.setStatus('obsolete')
hubBackupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubBackupPort.setStatus('obsolete')
hubPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubPrimaryPort.setStatus('obsolete')
hubBackupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubBackupAddress.setStatus('obsolete')
hubBackupTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubBackupTestTime.setStatus('obsolete')
hubBackupConsecutiveFails = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubBackupConsecutiveFails.setStatus('obsolete')
hubSqeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubSqeEnabled.setStatus('obsolete')
hubAddressMoveLogTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11), )
if mibBuilder.loadTexts: hubAddressMoveLogTable.setStatus('obsolete')
hubAddressMoveLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1), ).setIndexNames((0, "ICF-ETWIST", "hubAddrMoveIndex"))
if mibBuilder.loadTexts: hubAddressMoveLogEntry.setStatus('obsolete')
hubAddrMoveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddrMoveIndex.setStatus('obsolete')
hubAddrMoveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddrMoveAddress.setStatus('obsolete')
hubAddrMoveOldGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddrMoveOldGroup.setStatus('obsolete')
hubAddrMoveOldPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddrMoveOldPort.setStatus('obsolete')
hubAddrMoveNewGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddrMoveNewGroup.setStatus('obsolete')
hubAddrMoveNewPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddrMoveNewPort.setStatus('obsolete')
hubLateEventMonitor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onSingle", 2), ("onAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubLateEventMonitor.setStatus('obsolete')
operationalState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operationalState.setStatus('obsolete')
forwardDbMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forwardDbMaxAge.setStatus('obsolete')
addressTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 3), )
if mibBuilder.loadTexts: addressTable.setStatus('obsolete')
addressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressIndex.setStatus('obsolete')
addressChunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(410, 410)).setFixedLength(410)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addressChunk.setStatus('obsolete')
brgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 4), )
if mibBuilder.loadTexts: brgPortTable.setStatus('obsolete')
brgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPortIndex.setStatus('obsolete')
brgPortCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPortCacheHits.setStatus('obsolete')
brgPortCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPortCacheMisses.setStatus('obsolete')
brgPortForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPortForwardedPkts.setStatus('obsolete')
brgPortFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPortFilteredPkts.setStatus('obsolete')
wildcardTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5), )
if mibBuilder.loadTexts: wildcardTable.setStatus('obsolete')
wildcardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wildcardIndex.setStatus('obsolete')
wildcardFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wildcardFilter.setStatus('obsolete')
wildcardMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wildcardMask.setStatus('obsolete')
wildcardOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wildcardOffset.setStatus('obsolete')
wildcardUserOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wildcardUserOffset.setStatus('obsolete')
wildcardArm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wildcardArm.setStatus('obsolete')
stp = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6))
stpBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpBridgeId.setStatus('obsolete')
stpTopoChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTopoChangeTime.setStatus('obsolete')
stpTopoNumChanges = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTopoNumChanges.setStatus('obsolete')
stpTopoChange = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTopoChange.setStatus('obsolete')
stpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpDesignatedRoot.setStatus('obsolete')
stpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootCost.setStatus('obsolete')
stpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootPort.setStatus('obsolete')
stpCurrentMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpCurrentMaxAge.setStatus('obsolete')
stpCurrentHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpCurrentHelloTime.setStatus('obsolete')
stpCurrentForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpCurrentForwardDelay.setStatus('obsolete')
stpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpMaxAge.setStatus('obsolete')
stpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpHelloTime.setStatus('obsolete')
stpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpForwardDelay.setStatus('obsolete')
stpPriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriority.setStatus('obsolete')
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15), )
if mibBuilder.loadTexts: stpPortTable.setStatus('obsolete')
stpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortIndex.setStatus('obsolete')
stpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortState.setStatus('obsolete')
stpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortId.setStatus('obsolete')
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('obsolete')
stpPortRootId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortRootId.setStatus('obsolete')
stpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedCost.setStatus('obsolete')
stpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedBridge.setStatus('obsolete')
stpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedPort.setStatus('obsolete')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('obsolete')
hdlcErrorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7), )
if mibBuilder.loadTexts: hdlcErrorTable.setStatus('obsolete')
hdlcErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcErrorIndex.setStatus('obsolete')
hdlcErrorIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcErrorIndications.setStatus('obsolete')
hdlcT1Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcT1Timeouts.setStatus('obsolete')
hdlcMissedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMissedPackets.setStatus('obsolete')
hdlcRcvOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRcvOverruns.setStatus('obsolete')
hdlcXmtUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcXmtUnderruns.setStatus('obsolete')
hdlcProviderLostPrimitives = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcProviderLostPrimitives.setStatus('obsolete')
hdlcRuntFrameReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRuntFrameReceives.setStatus('obsolete')
hdlcGiantFrameReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcGiantFrameReceives.setStatus('obsolete')
hdlcBadFrameReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcBadFrameReceives.setStatus('obsolete')
hdlcRejectFrameReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRejectFrameReceives.setStatus('obsolete')
hdlcRejectFrameSends = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRejectFrameSends.setStatus('obsolete')
hdlcFrameRejectFrameRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcFrameRejectFrameRecs.setStatus('obsolete')
hdlcLocalTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8), )
if mibBuilder.loadTexts: hdlcLocalTable.setStatus('obsolete')
hdlcLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalIndex.setStatus('obsolete')
hdlcLocalResetRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalResetRequests.setStatus('obsolete')
hdlcLocalResetConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalResetConfirms.setStatus('obsolete')
hdlcLocalConnectRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalConnectRequests.setStatus('obsolete')
hdlcLocalConnectConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalConnectConfirms.setStatus('obsolete')
hdlcLocalDisconnectRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalDisconnectRequests.setStatus('obsolete')
hdlcLocalDisconnectConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalDisconnectConfirms.setStatus('obsolete')
hdlcLocalState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalState.setStatus('obsolete')
hdlcLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("hdlcDTEAddress", 1), ("hdlcDCEAddress", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdlcLocalAddress.setStatus('obsolete')
hdlcLocalPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalPhase.setStatus('obsolete')
hdlcRemoteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9), )
if mibBuilder.loadTexts: hdlcRemoteTable.setStatus('obsolete')
hdlcRemoteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteIndex.setStatus('obsolete')
hdlcRemoteResetRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteResetRequests.setStatus('obsolete')
hdlcRemoteResetConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteResetConfirms.setStatus('obsolete')
hdlcRemoteConnectRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteConnectRequests.setStatus('obsolete')
hdlcRemoteConnectConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteConnectConfirms.setStatus('obsolete')
hdlcRemoteDisconnectRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteDisconnectRequests.setStatus('obsolete')
hdlcRemoteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteState.setStatus('obsolete')
hdlcRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("hdlcDTEAddress", 1), ("hdlcDCEAddress", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdlcRemoteAddress.setStatus('obsolete')
hdlcRemoteXidCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteXidCommands.setStatus('obsolete')
hdlcRemoteXidResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteXidResponses.setStatus('obsolete')
hdlcRemoteTestCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteTestCommands.setStatus('obsolete')
hdlcRemoteTestResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteTestResponses.setStatus('obsolete')
hdlcRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdlcRemoteNodeId.setStatus('obsolete')
x25Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 10), )
if mibBuilder.loadTexts: x25Table.setStatus('obsolete')
x25Index = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25Index.setStatus('obsolete')
x25T1Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 10, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25T1Timer.setStatus('obsolete')
x25N2Count = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25N2Count.setStatus('obsolete')
x25T3Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 10, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25T3Timer.setStatus('obsolete')
icfConfigIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1), )
if mibBuilder.loadTexts: icfConfigIfTable.setStatus('obsolete')
icfConfigIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1), ).setIndexNames((0, "ICF-ETWIST", "icfConfigIfIndex"))
if mibBuilder.loadTexts: icfConfigIfEntry.setStatus('obsolete')
icfConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icfConfigIfIndex.setStatus('obsolete')
icfConfigIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfConfigIfIpAddress.setStatus('obsolete')
icfConfigIfNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfConfigIfNetMask.setStatus('obsolete')
icfConfigIfDefaultGate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfConfigIfDefaultGate.setStatus('obsolete')
icfConfigIpTTL = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfConfigIpTTL.setStatus('obsolete')
icfConfigBootpEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfConfigBootpEnable.setStatus('obsolete')
bridge1010TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 1, 0))
bridgeRemoteTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 2, 0))
etherTwist12TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0))
fiberOpticTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0))
etherTwist48TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0))
thinLANTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0))
etherTwist24STrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0))
advStack12TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 7, 0))
advStack24TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 8, 0))
advStack48TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 9, 0))
advStackU8TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 11, 0))
advStackU16TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 12, 0))
repeaterAgentTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0))
hpicfEnetSMMTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0))
thresholdTrap1010 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 1, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrap1010.setStatus('obsolete')
thresholdTrapRem = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 2, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapRem.setStatus('obsolete')
thresholdTrapET12 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapET12.setStatus('obsolete')
thresholdTrapET48 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapET48.setStatus('obsolete')
thresholdTrapTLAN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapTLAN.setStatus('obsolete')
thresholdTrapFiber = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapFiber.setStatus('obsolete')
thresholdTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapET24S.setStatus('obsolete')
thresholdTrapAS12 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 7, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapAS12.setStatus('obsolete')
thresholdTrapAS24 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 8, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapAS24.setStatus('obsolete')
thresholdTrapAS48 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 9, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapAS48.setStatus('obsolete')
thresholdTrapASU8 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 11, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapASU8.setStatus('obsolete')
thresholdTrapASU16 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 12, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapASU16.setStatus('obsolete')
thresholdTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapASEN.setStatus('obsolete')
thresholdTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapSMM.setStatus('obsolete')
linkBeatTrapET12 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapET12.setStatus('obsolete')
linkBeatTrapET48 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapET48.setStatus('obsolete')
linkBeatTrapTLAN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapTLAN.setStatus('obsolete')
linkBeatTrapFiber = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapFiber.setStatus('obsolete')
linkBeatTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapET24S.setStatus('obsolete')
linkBeatTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapASEN.setStatus('obsolete')
linkBeatTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapSMM.setStatus('obsolete')
segmentationTrapET12 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapET12.setStatus('obsolete')
segmentationTrapET48 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapET48.setStatus('obsolete')
segmentationTrapTLAN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapTLAN.setStatus('obsolete')
segmentationTrapFiber = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapFiber.setStatus('obsolete')
segmentationTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapET24S.setStatus('obsolete')
segmentationTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapASEN.setStatus('obsolete')
segmentationTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapSMM.setStatus('obsolete')
backupLinkTrapET12 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0, 5)).setObjects(("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapET12.setStatus('obsolete')
backupLinkTrapET48 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0, 5)).setObjects(("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapET48.setStatus('obsolete')
backupLinkTrapTLAN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0, 5)).setObjects(("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapTLAN.setStatus('obsolete')
backupLinkTrapFiber = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0, 5)).setObjects(("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapFiber.setStatus('obsolete')
backupLinkTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 5)).setObjects(("SNMP-REPEATER-MIB", "rptrPortAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapET24S.setStatus('obsolete')
backupLinkTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 5)).setObjects(("SNMP-REPEATER-MIB", "rptrPortAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapASEN.setStatus('obsolete')
backupLinkTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 5)).setObjects(("SNMP-REPEATER-MIB", "rptrPortAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapSMM.setStatus('obsolete')
intrusionTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 6)).setObjects(("HP-ICF-GENERIC-RPTR", "hubIntruderAddress"), ("HP-ICF-GENERIC-RPTR", "hubIntruderPort"))
if mibBuilder.loadTexts: intrusionTrapET24S.setStatus('obsolete')
intrusionTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 6)).setObjects(("HP-ICF-GENERIC-RPTR", "hubIntruderAddress"), ("HP-ICF-GENERIC-RPTR", "hubIntruderPort"))
if mibBuilder.loadTexts: intrusionTrapASEN.setStatus('obsolete')
intrusionTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 6)).setObjects(("HP-ICF-GENERIC-RPTR", "hubIntruderAddress"), ("HP-ICF-GENERIC-RPTR", "hubIntruderPort"))
if mibBuilder.loadTexts: intrusionTrapSMM.setStatus('obsolete')
addressMovedTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 7)).setObjects(("ICF-ETWIST", "hubAddrMoveAddress"), ("ICF-ETWIST", "hubAddrMoveOldGroup"), ("ICF-ETWIST", "hubAddrMoveOldPort"), ("ICF-ETWIST", "hubAddrMoveNewGroup"), ("ICF-ETWIST", "hubAddrMoveNewPort"))
if mibBuilder.loadTexts: addressMovedTrapET24S.setStatus('obsolete')
addressMovedTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 7)).setObjects(("ICF-ETWIST", "hubAddrMoveAddress"), ("ICF-ETWIST", "hubAddrMoveOldGroup"), ("ICF-ETWIST", "hubAddrMoveOldPort"), ("ICF-ETWIST", "hubAddrMoveNewGroup"), ("ICF-ETWIST", "hubAddrMoveNewPort"))
if mibBuilder.loadTexts: addressMovedTrapASEN.setStatus('obsolete')
addressMovedTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 7)).setObjects(("ICF-ETWIST", "hubAddrMoveAddress"), ("ICF-ETWIST", "hubAddrMoveOldGroup"), ("ICF-ETWIST", "hubAddrMoveOldPort"), ("ICF-ETWIST", "hubAddrMoveNewGroup"), ("ICF-ETWIST", "hubAddrMoveNewPort"))
if mibBuilder.loadTexts: addressMovedTrapSMM.setStatus('obsolete')
newAddressTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 8)).setObjects(("SNMP-REPEATER-MIB", "rptrAddrTrackLastSourceAddress"))
if mibBuilder.loadTexts: newAddressTrapET24S.setStatus('obsolete')
newAddressTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 8)).setObjects(("SNMP-REPEATER-MIB", "rptrAddrTrackLastSourceAddress"))
if mibBuilder.loadTexts: newAddressTrapASEN.setStatus('obsolete')
newAddressTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 8)).setObjects(("SNMP-REPEATER-MIB", "rptrAddrTrackLastSourceAddress"))
if mibBuilder.loadTexts: newAddressTrapSMM.setStatus('obsolete')
stpTrap1010 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 1, 0, 3)).setObjects(("ICF-ETWIST", "stpPortState"))
if mibBuilder.loadTexts: stpTrap1010.setStatus('obsolete')
stpTrapRem = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 2, 0, 3)).setObjects(("ICF-ETWIST", "stpPortState"))
if mibBuilder.loadTexts: stpTrapRem.setStatus('obsolete')
temperatureTrap1010 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 1, 0, 4))
if mibBuilder.loadTexts: temperatureTrap1010.setStatus('obsolete')
temperatureTrapRem = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 2, 0, 4))
if mibBuilder.loadTexts: temperatureTrapRem.setStatus('obsolete')
icfETCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1))
icfETGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2))
icfETwistHubCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 1)).setObjects(("ICF-ETWIST", "icfCommonBasicGroup"), ("ICF-ETWIST", "icfCommonIpGroup"), ("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icf8023MacGroup"), ("ICF-ETWIST", "icfEncryptedPasswordGroup"), ("ICF-ETWIST", "hubBasicGroup"), ("ICF-ETWIST", "hubMappingGroup"), ("ICF-ETWIST", "hubLinkBeatControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfETwistHubCompliance = icfETwistHubCompliance.setStatus('obsolete')
icfETwistBridgeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 2)).setObjects(("ICF-ETWIST", "icfCommonBasicGroup"), ("ICF-ETWIST", "icfCommonIpGroup"), ("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icf8023MacGroup"), ("ICF-ETWIST", "icfEncryptedPasswordGroup"), ("ICF-ETWIST", "icfBridgeBasicGroup"), ("ICF-ETWIST", "icfBridgeSpanningTreeGroup"), ("ICF-ETWIST", "icfRemoteBridgeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfETwistBridgeCompliance = icfETwistBridgeCompliance.setStatus('obsolete')
icfETwistHubDCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 3)).setObjects(("ICF-ETWIST", "icfCommonBasicGroup"), ("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icf8023MacGroup"), ("ICF-ETWIST", "icfEncryptedPasswordGroup"), ("ICF-ETWIST", "hubBasicGroup"), ("ICF-ETWIST", "hubMappingGroup"), ("ICF-ETWIST", "hubBasicAddrTableGroup"), ("ICF-ETWIST", "icfCommonIpGroup"), ("ICF-ETWIST", "icfCommonIpxGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icfIpxMappingGroup"), ("ICF-ETWIST", "icfDownloadGroup"), ("ICF-ETWIST", "hubLinkBeatControlGroup"), ("ICF-ETWIST", "hubBasicEnhancementsGroup"), ("ICF-ETWIST", "hubReadableAddrTableGroup"), ("ICF-ETWIST", "hubBackupLinkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfETwistHubDCompliance = icfETwistHubDCompliance.setStatus('obsolete')
icfETwistBridgeDCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 4)).setObjects(("ICF-ETWIST", "icfCommonBasicGroup"), ("ICF-ETWIST", "icfCommonIpGroup"), ("ICF-ETWIST", "icfCommonIpxGroup"), ("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icfIpxMappingGroup"), ("ICF-ETWIST", "icf8023MacGroup"), ("ICF-ETWIST", "icfDownloadGroup"), ("ICF-ETWIST", "icfEncryptedPasswordGroup"), ("ICF-ETWIST", "icfBridgeBasicGroup"), ("ICF-ETWIST", "icfBridgeSpanningTreeGroup"), ("ICF-ETWIST", "icfRemoteBridgeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfETwistBridgeDCompliance = icfETwistBridgeDCompliance.setStatus('obsolete')
icfETwistHub24SCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 5)).setObjects(("ICF-ETWIST", "icfCommonBasicGroup"), ("ICF-ETWIST", "icfCommonIpGroup"), ("ICF-ETWIST", "icfCommonIpxGroup"), ("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icfIpxMappingGroup"), ("ICF-ETWIST", "icf8023MacGroup"), ("ICF-ETWIST", "icfDownloadGroup"), ("ICF-ETWIST", "hubBasicGroup"), ("ICF-ETWIST", "hubBasicEnhancementsGroup"), ("ICF-ETWIST", "hubNewEnhancementsGroup"), ("ICF-ETWIST", "hubLinkBeatControlGroup"), ("ICF-ETWIST", "hubMappingGroup"), ("ICF-ETWIST", "hubBasicAddrTableGroup"), ("ICF-ETWIST", "hubReadableAddrTableGroup"), ("ICF-ETWIST", "hubBackupLinkGroup"), ("ICF-ETWIST", "hubAddressMoveGroup"), ("ICF-ETWIST", "icfConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfETwistHub24SCompliance = icfETwistHub24SCompliance.setStatus('obsolete')
icfAdvStkCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 6)).setObjects(("ICF-ETWIST", "icfCommonBasicGroup"), ("ICF-ETWIST", "icfCommonIpGroup"), ("ICF-ETWIST", "icfCommonIpxGroup"), ("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icfIpxMappingGroup"), ("ICF-ETWIST", "icf8023MacGroup"), ("ICF-ETWIST", "hubBasicGroup"), ("ICF-ETWIST", "hubBasicEnhancementsGroup"), ("ICF-ETWIST", "hubNewEnhancementsGroup"), ("ICF-ETWIST", "hubLinkBeatControlGroup"), ("ICF-ETWIST", "hubMappingGroup"), ("ICF-ETWIST", "hubBasicAddrTableGroup"), ("ICF-ETWIST", "hubReadableAddrTableGroup"), ("ICF-ETWIST", "hubBackupLinkGroup"), ("ICF-ETWIST", "hubAddressMoveGroup"), ("ICF-ETWIST", "hubLateEventMonitorGroup"), ("ICF-ETWIST", "icfConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfAdvStkCompliance = icfAdvStkCompliance.setStatus('obsolete')
icfAdvStkSlaveCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 7)).setObjects(("ICF-ETWIST", "icfSlaveMappingGroup"), ("ICF-ETWIST", "icf8023MacSlaveGroup"), ("ICF-ETWIST", "hubBasicSlaveGroup"), ("ICF-ETWIST", "hubMappingGroup"), ("ICF-ETWIST", "hubLinkBeatControlGroup"), ("ICF-ETWIST", "hubBasicEnhancementsGroup"), ("ICF-ETWIST", "hubNewEnhancementsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfAdvStkSlaveCompliance = icfAdvStkSlaveCompliance.setStatus('obsolete')
icfAdvStkVGCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 8)).setObjects(("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icfIpxMappingGroup"), ("ICF-ETWIST", "icfConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfAdvStkVGCompliance = icfAdvStkVGCompliance.setStatus('obsolete')
icfAdvStkVGSlaveCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 9)).setObjects(("ICF-ETWIST", "icfSlaveMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfAdvStkVGSlaveCompliance = icfAdvStkVGSlaveCompliance.setStatus('obsolete')
icfCommonBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 1)).setObjects(("ICF-ETWIST", "lastSetError"), ("ICF-ETWIST", "reset"), ("ICF-ETWIST", "selfTest"), ("ICF-ETWIST", "semaphore"), ("ICF-ETWIST", "pollResponse"), ("ICF-ETWIST", "evtIndex"), ("ICF-ETWIST", "evtArm"), ("ICF-ETWIST", "evtTimeSinceOccurrence"), ("ICF-ETWIST", "evthIndex"), ("ICF-ETWIST", "evthArm"), ("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"), ("ICF-ETWIST", "evthTimeSinceOccurrence"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfCommonBasicGroup = icfCommonBasicGroup.setStatus('obsolete')
icfCommonIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 2)).setObjects(("ICF-ETWIST", "ipSubnetMask"), ("ICF-ETWIST", "evtIpNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfCommonIpGroup = icfCommonIpGroup.setStatus('obsolete')
icfCommonIpxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 3)).setObjects(("ICF-ETWIST", "evtIpxNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfCommonIpxGroup = icfCommonIpxGroup.setStatus('obsolete')
icfEncryptedPasswordGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 4)).setObjects(("ICF-ETWIST", "password"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfEncryptedPasswordGroup = icfEncryptedPasswordGroup.setStatus('obsolete')
icfMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 5)).setObjects(("ICF-ETWIST", "announceAddress"), ("ICF-ETWIST", "mapAddress"), ("ICF-ETWIST", "mapState"), ("ICF-ETWIST", "mapPort"), ("ICF-ETWIST", "linkTest802MacAddress"), ("ICF-ETWIST", "linkTestRepetitions"), ("ICF-ETWIST", "linkTestSuccess"), ("ICF-ETWIST", "linkTestTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfMappingGroup = icfMappingGroup.setStatus('obsolete')
icfIpMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 6)).setObjects(("ICF-ETWIST", "linkTestIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfIpMappingGroup = icfIpMappingGroup.setStatus('obsolete')
icfIpxMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 7)).setObjects(("ICF-ETWIST", "linkTestIpxAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfIpxMappingGroup = icfIpxMappingGroup.setStatus('obsolete')
icfSlaveMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 8)).setObjects(("ICF-ETWIST", "mapAddress"), ("ICF-ETWIST", "mapState"), ("ICF-ETWIST", "mapPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfSlaveMappingGroup = icfSlaveMappingGroup.setStatus('obsolete')
icf8023MacGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 9)).setObjects(("ICF-ETWIST", "icf8023MacIndex"), ("ICF-ETWIST", "icf8023MacInBroadcastPkts"), ("ICF-ETWIST", "icf8023MacOutBroadcastPkts"), ("ICF-ETWIST", "icf8023MacInMulticastPkts"), ("ICF-ETWIST", "icf8023MacOutMulticastPkts"), ("ICF-ETWIST", "icf8023MacRunts"), ("ICF-ETWIST", "icf8023MacGiants"), ("ICF-ETWIST", "icf8023MacMissedPktErrors"), ("ICF-ETWIST", "icf8023MacExcessDeferrals"), ("ICF-ETWIST", "icf8023MacTotalMediaErrors"), ("ICF-ETWIST", "icf8023MacSpuriousIntrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icf8023MacGroup = icf8023MacGroup.setStatus('obsolete')
icf8023MacSlaveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 10)).setObjects(("ICF-ETWIST", "icf8023MacIndex"), ("ICF-ETWIST", "icf8023MacRunts"), ("ICF-ETWIST", "icf8023MacGiants"), ("ICF-ETWIST", "icf8023MacMissedPktErrors"), ("ICF-ETWIST", "icf8023MacExcessDeferrals"), ("ICF-ETWIST", "icf8023MacTotalMediaErrors"), ("ICF-ETWIST", "icf8023MacSpuriousIntrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icf8023MacSlaveGroup = icf8023MacSlaveGroup.setStatus('obsolete')
icfDownloadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 11)).setObjects(("ICF-ETWIST", "icfDownloadIpAddress"), ("ICF-ETWIST", "icfDownloadIpxAddress"), ("ICF-ETWIST", "icfDownloadFilename"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfDownloadGroup = icfDownloadGroup.setStatus('obsolete')
hubBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 12)).setObjects(("ICF-ETWIST", "hubThinlanFault"), ("ICF-ETWIST", "hubGlobalErrors"), ("ICF-ETWIST", "hubGlobalCollisions"), ("ICF-ETWIST", "hubGlobalPktFragments"), ("ICF-ETWIST", "hubGlobalRunts"), ("ICF-ETWIST", "hubGlobalGiants"), ("ICF-ETWIST", "hubGlobalCrcErrors"), ("ICF-ETWIST", "hubGlobalAlignmentErrors"), ("ICF-ETWIST", "hubGlobalInOctets"), ("ICF-ETWIST", "hubGlobalInUcastPkts"), ("ICF-ETWIST", "hubGlobalInNUcastPkts"), ("ICF-ETWIST", "hubGlobalInBroadcastPkts"), ("ICF-ETWIST", "hubPortPktFragments"), ("ICF-ETWIST", "hubPortCollisions"), ("ICF-ETWIST", "hubPortSegmentation"), ("ICF-ETWIST", "hubPortLinkBeatStatus"), ("ICF-ETWIST", "hubPortsOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubBasicGroup = hubBasicGroup.setStatus('obsolete')
hubBasicSlaveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 13)).setObjects(("ICF-ETWIST", "hubThinlanFault"), ("ICF-ETWIST", "hubGlobalErrors"), ("ICF-ETWIST", "hubGlobalCollisions"), ("ICF-ETWIST", "hubGlobalPktFragments"), ("ICF-ETWIST", "hubGlobalRunts"), ("ICF-ETWIST", "hubGlobalGiants"), ("ICF-ETWIST", "hubGlobalCrcErrors"), ("ICF-ETWIST", "hubGlobalAlignmentErrors"), ("ICF-ETWIST", "hubGlobalInOctets"), ("ICF-ETWIST", "hubPortPktFragments"), ("ICF-ETWIST", "hubPortCollisions"), ("ICF-ETWIST", "hubPortSegmentation"), ("ICF-ETWIST", "hubPortLinkBeatStatus"), ("ICF-ETWIST", "hubPortsOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubBasicSlaveGroup = hubBasicSlaveGroup.setStatus('obsolete')
hubMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 14)).setObjects(("ICF-ETWIST", "hubPortIndex"), ("ICF-ETWIST", "hubPortMacAddress"), ("ICF-ETWIST", "hubPortAddressState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubMappingGroup = hubMappingGroup.setStatus('obsolete')
hubLinkBeatControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 15)).setObjects(("ICF-ETWIST", "hubPortLinkBeatEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubLinkBeatControlGroup = hubLinkBeatControlGroup.setStatus('obsolete')
hubBasicEnhancementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 16)).setObjects(("ICF-ETWIST", "hubSqeEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubBasicEnhancementsGroup = hubBasicEnhancementsGroup.setStatus('obsolete')
hubBasicAddrTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 17)).setObjects(("ICF-ETWIST", "hubAddressTableMaxAge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubBasicAddrTableGroup = hubBasicAddrTableGroup.setStatus('obsolete')
hubReadableAddrTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 18)).setObjects(("ICF-ETWIST", "hubAddressIndex"), ("ICF-ETWIST", "hubAddressChunk"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubReadableAddrTableGroup = hubReadableAddrTableGroup.setStatus('obsolete')
hubBackupLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 19)).setObjects(("ICF-ETWIST", "hubNumBkpLinks"), ("ICF-ETWIST", "hubBkpLinkIndex"), ("ICF-ETWIST", "hubBackupPort"), ("ICF-ETWIST", "hubPrimaryPort"), ("ICF-ETWIST", "hubBackupAddress"), ("ICF-ETWIST", "hubBackupTestTime"), ("ICF-ETWIST", "hubBackupConsecutiveFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubBackupLinkGroup = hubBackupLinkGroup.setStatus('obsolete')
hubNewEnhancementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 20)).setObjects(("ICF-ETWIST", "hubPortPolarityReversed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubNewEnhancementsGroup = hubNewEnhancementsGroup.setStatus('obsolete')
hubAddressMoveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 21)).setObjects(("ICF-ETWIST", "hubAddrMoveIndex"), ("ICF-ETWIST", "hubAddrMoveAddress"), ("ICF-ETWIST", "hubAddrMoveOldGroup"), ("ICF-ETWIST", "hubAddrMoveOldPort"), ("ICF-ETWIST", "hubAddrMoveNewGroup"), ("ICF-ETWIST", "hubAddrMoveNewPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubAddressMoveGroup = hubAddressMoveGroup.setStatus('obsolete')
hubLateEventMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 22)).setObjects(("ICF-ETWIST", "hubPortLateEventDisable"), ("ICF-ETWIST", "hubLateEventMonitor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubLateEventMonitorGroup = hubLateEventMonitorGroup.setStatus('obsolete')
icfBridgeBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 23)).setObjects(("ICF-ETWIST", "operationalState"), ("ICF-ETWIST", "forwardDbMaxAge"), ("ICF-ETWIST", "addressIndex"), ("ICF-ETWIST", "addressChunk"), ("ICF-ETWIST", "brgPortIndex"), ("ICF-ETWIST", "brgPortCacheHits"), ("ICF-ETWIST", "brgPortCacheMisses"), ("ICF-ETWIST", "brgPortForwardedPkts"), ("ICF-ETWIST", "brgPortFilteredPkts"), ("ICF-ETWIST", "wildcardIndex"), ("ICF-ETWIST", "wildcardFilter"), ("ICF-ETWIST", "wildcardMask"), ("ICF-ETWIST", "wildcardOffset"), ("ICF-ETWIST", "wildcardUserOffset"), ("ICF-ETWIST", "wildcardArm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfBridgeBasicGroup = icfBridgeBasicGroup.setStatus('obsolete')
icfBridgeSpanningTreeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 24)).setObjects(("ICF-ETWIST", "stpBridgeId"), ("ICF-ETWIST", "stpTopoChangeTime"), ("ICF-ETWIST", "stpTopoNumChanges"), ("ICF-ETWIST", "stpTopoChange"), ("ICF-ETWIST", "stpDesignatedRoot"), ("ICF-ETWIST", "stpRootCost"), ("ICF-ETWIST", "stpRootPort"), ("ICF-ETWIST", "stpCurrentMaxAge"), ("ICF-ETWIST", "stpCurrentHelloTime"), ("ICF-ETWIST", "stpCurrentForwardDelay"), ("ICF-ETWIST", "stpMaxAge"), ("ICF-ETWIST", "stpHelloTime"), ("ICF-ETWIST", "stpForwardDelay"), ("ICF-ETWIST", "stpPriority"), ("ICF-ETWIST", "stpPortIndex"), ("ICF-ETWIST", "stpPortState"), ("ICF-ETWIST", "stpPortId"), ("ICF-ETWIST", "stpPortPathCost"), ("ICF-ETWIST", "stpPortRootId"), ("ICF-ETWIST", "stpPortDesignatedCost"), ("ICF-ETWIST", "stpPortDesignatedBridge"), ("ICF-ETWIST", "stpPortDesignatedPort"), ("ICF-ETWIST", "stpPortPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfBridgeSpanningTreeGroup = icfBridgeSpanningTreeGroup.setStatus('obsolete')
icfRemoteBridgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 25)).setObjects(("ICF-ETWIST", "hdlcErrorIndex"), ("ICF-ETWIST", "hdlcErrorIndications"), ("ICF-ETWIST", "hdlcT1Timeouts"), ("ICF-ETWIST", "hdlcMissedPackets"), ("ICF-ETWIST", "hdlcRcvOverruns"), ("ICF-ETWIST", "hdlcXmtUnderruns"), ("ICF-ETWIST", "hdlcProviderLostPrimitives"), ("ICF-ETWIST", "hdlcRuntFrameReceives"), ("ICF-ETWIST", "hdlcGiantFrameReceives"), ("ICF-ETWIST", "hdlcBadFrameReceives"), ("ICF-ETWIST", "hdlcRejectFrameReceives"), ("ICF-ETWIST", "hdlcRejectFrameSends"), ("ICF-ETWIST", "hdlcFrameRejectFrameRecs"), ("ICF-ETWIST", "hdlcLocalIndex"), ("ICF-ETWIST", "hdlcLocalResetRequests"), ("ICF-ETWIST", "hdlcLocalResetConfirms"), ("ICF-ETWIST", "hdlcLocalConnectRequests"), ("ICF-ETWIST", "hdlcLocalConnectConfirms"), ("ICF-ETWIST", "hdlcLocalDisconnectRequests"), ("ICF-ETWIST", "hdlcLocalDisconnectConfirms"), ("ICF-ETWIST", "hdlcLocalState"), ("ICF-ETWIST", "hdlcLocalAddress"), ("ICF-ETWIST", "hdlcLocalPhase"), ("ICF-ETWIST", "hdlcRemoteIndex"), ("ICF-ETWIST", "hdlcRemoteResetRequests"), ("ICF-ETWIST", "hdlcRemoteResetConfirms"), ("ICF-ETWIST", "hdlcRemoteConnectRequests"), ("ICF-ETWIST", "hdlcRemoteConnectConfirms"), ("ICF-ETWIST", "hdlcRemoteDisconnectRequests"), ("ICF-ETWIST", "hdlcRemoteState"), ("ICF-ETWIST", "hdlcRemoteAddress"), ("ICF-ETWIST", "hdlcRemoteXidCommands"), ("ICF-ETWIST", "hdlcRemoteXidResponses"), ("ICF-ETWIST", "hdlcRemoteTestCommands"), ("ICF-ETWIST", "hdlcRemoteTestResponses"), ("ICF-ETWIST", "hdlcRemoteNodeId"), ("ICF-ETWIST", "x25Index"), ("ICF-ETWIST", "x25T1Timer"), ("ICF-ETWIST", "x25N2Count"), ("ICF-ETWIST", "x25T3Timer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfRemoteBridgeGroup = icfRemoteBridgeGroup.setStatus('obsolete')
icfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 26)).setObjects(("ICF-ETWIST", "icfConfigIfIndex"), ("ICF-ETWIST", "icfConfigIfIpAddress"), ("ICF-ETWIST", "icfConfigIfNetMask"), ("ICF-ETWIST", "icfConfigIfDefaultGate"), ("ICF-ETWIST", "icfConfigIpTTL"), ("ICF-ETWIST", "icfConfigBootpEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfConfigGroup = icfConfigGroup.setStatus('obsolete')
mibBuilder.exportSymbols("ICF-ETWIST", hdlcProviderLostPrimitives=hdlcProviderLostPrimitives, hdlcLocalTable=hdlcLocalTable, icf8023MacInMulticastPkts=icf8023MacInMulticastPkts, hubBkpLinkTable=hubBkpLinkTable, icf8023MacOutMulticastPkts=icf8023MacOutMulticastPkts, stpTrap1010=stpTrap1010, hdlcErrorIndications=hdlcErrorIndications, thresholdTrapET12=thresholdTrapET12, linkTestTimeout=linkTestTimeout, wildcardIndex=wildcardIndex, hubAddressChunk=hubAddressChunk, linkBeatTrapET24S=linkBeatTrapET24S, evtIpNotify=evtIpNotify, semaphore=semaphore, icfETwistHubCompliance=icfETwistHubCompliance, thresholdTrapRem=thresholdTrapRem, hubNewEnhancementsGroup=hubNewEnhancementsGroup, icfBridgeSpanningTreeGroup=icfBridgeSpanningTreeGroup, hpicfEnetSMMTrapPrefix=hpicfEnetSMMTrapPrefix, thresholdTrapAS24=thresholdTrapAS24, hubNumBkpLinks=hubNumBkpLinks, hubPortMacAddress=hubPortMacAddress, addressIndex=addressIndex, icf8023MacSpuriousIntrs=icf8023MacSpuriousIntrs, hubBackupTestTime=hubBackupTestTime, newAddressTrapET24S=newAddressTrapET24S, hdlcErrorTable=hdlcErrorTable, icfConfigBootpEnable=icfConfigBootpEnable, linkTestIpxAddress=linkTestIpxAddress, hdlcRemoteNodeId=hdlcRemoteNodeId, stpPortTable=stpPortTable, bridgeRemoteTrapPrefix=bridgeRemoteTrapPrefix, hdlcRemoteState=hdlcRemoteState, thresholdTrapASU16=thresholdTrapASU16, intrusionTrapET24S=intrusionTrapET24S, icfConfigIfIndex=icfConfigIfIndex, advStack24TrapPrefix=advStack24TrapPrefix, icfAdvStkVGCompliance=icfAdvStkVGCompliance, addressMovedTrapASEN=addressMovedTrapASEN, icfMappingGroup=icfMappingGroup, hdlcFrameRejectFrameRecs=hdlcFrameRejectFrameRecs, hdlcXmtUnderruns=hdlcXmtUnderruns, brgPortCacheHits=brgPortCacheHits, mapState=mapState, thresholdTrapASEN=thresholdTrapASEN, backupLinkTrapET48=backupLinkTrapET48, stpCurrentForwardDelay=stpCurrentForwardDelay, selfTest=selfTest, ipSubnetMask=ipSubnetMask, linkTest=linkTest, hubBackupConsecutiveFails=hubBackupConsecutiveFails, icfCommonIpGroup=icfCommonIpGroup, icf8023MacGiants=icf8023MacGiants, hubGlobalErrors=hubGlobalErrors, discovery=discovery, hubGlobalInNUcastPkts=hubGlobalInNUcastPkts, hdlcLocalIndex=hdlcLocalIndex, hdlcLocalPhase=hdlcLocalPhase, intrusionTrapSMM=intrusionTrapSMM, linkTestIpAddress=linkTestIpAddress, icf8023MacInBroadcastPkts=icf8023MacInBroadcastPkts, stpDesignatedRoot=stpDesignatedRoot, temperatureTrapRem=temperatureTrapRem, linkBeatTrapSMM=linkBeatTrapSMM, stpPortState=stpPortState, stpRootPort=stpRootPort, thresholdTrapET48=thresholdTrapET48, icfSlaveMappingGroup=icfSlaveMappingGroup, hubSqeEnabled=hubSqeEnabled, stpTopoNumChanges=stpTopoNumChanges, hdlcRemoteResetConfirms=hdlcRemoteResetConfirms, icfEvent=icfEvent, linkBeatTrapFiber=linkBeatTrapFiber, hubReadableAddrTableGroup=hubReadableAddrTableGroup, hubAddressMoveLogTable=hubAddressMoveLogTable, linkTestAddress=linkTestAddress, hubAddressTable=hubAddressTable, evtThresholdTable=evtThresholdTable, evtTable=evtTable, icf8023MacGroup=icf8023MacGroup, hubPortsOperStatus=hubPortsOperStatus, hubGlobalCollisions=hubGlobalCollisions, stpCurrentMaxAge=stpCurrentMaxAge, addressMovedTrapET24S=addressMovedTrapET24S, hdlcLocalConnectConfirms=hdlcLocalConnectConfirms, icfETwistBridgeDCompliance=icfETwistBridgeDCompliance, icfAdvStkVGSlaveCompliance=icfAdvStkVGSlaveCompliance, hubPortCollisions=hubPortCollisions, eventNotificationNode=eventNotificationNode, hubBkpLinkIndex=hubBkpLinkIndex, hubAddrMoveAddress=hubAddrMoveAddress, evthTimeInterval=evthTimeInterval, backupLinkTrapASEN=backupLinkTrapASEN, hubPortTable=hubPortTable, hdlcRuntFrameReceives=hdlcRuntFrameReceives, backupLinkTrapTLAN=backupLinkTrapTLAN, stpForwardDelay=stpForwardDelay, linkBeatTrapET48=linkBeatTrapET48, segmentationTrapSMM=segmentationTrapSMM, advStack48TrapPrefix=advStack48TrapPrefix, icf8023MacRunts=icf8023MacRunts, icf8023MacOutBroadcastPkts=icf8023MacOutBroadcastPkts, x25T1Timer=x25T1Timer, newAddressTrapASEN=newAddressTrapASEN, icfRemoteBridgeGroup=icfRemoteBridgeGroup, hubAddressTableMaxAge=hubAddressTableMaxAge, thresholdTrapTLAN=thresholdTrapTLAN, icfAdvStkSlaveCompliance=icfAdvStkSlaveCompliance, icfETwistConformance=icfETwistConformance, linkTestSuccess=linkTestSuccess, thresholdTrapSMM=thresholdTrapSMM, hdlcMissedPackets=hdlcMissedPackets, mapPort=mapPort, evtTimeSinceOccurrence=evtTimeSinceOccurrence, hdlcRemoteTable=hdlcRemoteTable, evtIndex=evtIndex, evthThreshold=evthThreshold, hdlcLocalAddress=hdlcLocalAddress, hdlcRejectFrameSends=hdlcRejectFrameSends, hubBackupAddress=hubBackupAddress, hdlcLocalResetConfirms=hdlcLocalResetConfirms, stpMaxAge=stpMaxAge, thresholdTrapASU8=thresholdTrapASU8, brgPortIndex=brgPortIndex, backupLinkTrapSMM=backupLinkTrapSMM, brgPortFilteredPkts=brgPortFilteredPkts, announceAddress=announceAddress, evtIpxNotify=evtIpxNotify, backupLinkTrapFiber=backupLinkTrapFiber, icf8023MacExcessDeferrals=icf8023MacExcessDeferrals, addressMovedTrapSMM=addressMovedTrapSMM, hubPortSegmentation=hubPortSegmentation, linkTestRepetitions=linkTestRepetitions, hdlcLocalResetRequests=hdlcLocalResetRequests, hdlcLocalDisconnectRequests=hdlcLocalDisconnectRequests, thresholdTrapAS12=thresholdTrapAS12, wildcardMask=wildcardMask, icfConfigIfDefaultGate=icfConfigIfDefaultGate, hubThinlanFault=hubThinlanFault, hubGlobalInBroadcastPkts=hubGlobalInBroadcastPkts, hubAddrMoveNewPort=hubAddrMoveNewPort, x25T3Timer=x25T3Timer, hdlcRemoteXidResponses=hdlcRemoteXidResponses, icfDownloadGroup=icfDownloadGroup, hdlcRemoteXidCommands=hdlcRemoteXidCommands, hdlcLocalConnectRequests=hdlcLocalConnectRequests, hdlcRemoteConnectConfirms=hdlcRemoteConnectConfirms, icfEncryptedPasswordGroup=icfEncryptedPasswordGroup, icfConfigIfTable=icfConfigIfTable, stpPortPriority=stpPortPriority, brgPortTable=brgPortTable, hubLinkBeatControlGroup=hubLinkBeatControlGroup, icfConfigGroup=icfConfigGroup, pollResponse=pollResponse, hdlcRejectFrameReceives=hdlcRejectFrameReceives, icfDownloadAddress=icfDownloadAddress, advStack12TrapPrefix=advStack12TrapPrefix, segmentationTrapTLAN=segmentationTrapTLAN, intrusionTrapASEN=intrusionTrapASEN, hubBasicGroup=hubBasicGroup, hubMappingGroup=hubMappingGroup, icfConfigIfEntry=icfConfigIfEntry, bridge1010TrapPrefix=bridge1010TrapPrefix, thresholdTrapFiber=thresholdTrapFiber, icfConfigIfNetMask=icfConfigIfNetMask, stpPortIndex=stpPortIndex, segmentationTrapET12=segmentationTrapET12, evthHysteresis=evthHysteresis, hubPortLinkBeatStatus=hubPortLinkBeatStatus, hubBackupPort=hubBackupPort, stpPortRootId=stpPortRootId, icfCommonIpxGroup=icfCommonIpxGroup, icfIpMappingGroup=icfIpMappingGroup, stpHelloTime=stpHelloTime, hubLateEventMonitorGroup=hubLateEventMonitorGroup, icfDownload=icfDownload, wildcardTable=wildcardTable, stpBridgeId=stpBridgeId, PYSNMP_MODULE_ID=icfEtwistMib, icfETwistHub24SCompliance=icfETwistHub24SCompliance, evthTimeSinceOccurrence=evthTimeSinceOccurrence, stpTopoChange=stpTopoChange, stpPortPathCost=stpPortPathCost, hubGlobalGiants=hubGlobalGiants, hubBitmaps=hubBitmaps, hdlcBadFrameReceives=hdlcBadFrameReceives, hubGlobalRunts=hubGlobalRunts, addressTable=addressTable, segmentationTrapFiber=segmentationTrapFiber, repeaterAgentTrapPrefix=repeaterAgentTrapPrefix, hdlcRemoteDisconnectRequests=hdlcRemoteDisconnectRequests, icfCommonBasicGroup=icfCommonBasicGroup, etherTwist12TrapPrefix=etherTwist12TrapPrefix, hubGlobal=hubGlobal, x25Index=x25Index, hubAddrMoveOldPort=hubAddrMoveOldPort, backupLinkTrapET24S=backupLinkTrapET24S, hdlcRemoteTestResponses=hdlcRemoteTestResponses, fiberOpticTrapPrefix=fiberOpticTrapPrefix, hubPortPolarityReversed=hubPortPolarityReversed, stpPortDesignatedCost=stpPortDesignatedCost, icfEtwistMib=icfEtwistMib, wildcardOffset=wildcardOffset, icfETCompliances=icfETCompliances, icf8023MacTotalMediaErrors=icf8023MacTotalMediaErrors, evthArm=evthArm, hubLateEventMonitor=hubLateEventMonitor, icf8023MacTable=icf8023MacTable, hdlcT1Timeouts=hdlcT1Timeouts, hdlcLocalDisconnectConfirms=hdlcLocalDisconnectConfirms, linkBeatTrapTLAN=linkBeatTrapTLAN, thresholdTrapAS48=thresholdTrapAS48, hubPortLinkBeatEnable=hubPortLinkBeatEnable, thinLANTrapPrefix=thinLANTrapPrefix, icfIpxMappingGroup=icfIpxMappingGroup, evtArm=evtArm, segmentationTrapASEN=segmentationTrapASEN, hdlcRemoteAddress=hdlcRemoteAddress, hubGlobalCrcErrors=hubGlobalCrcErrors, stpTopoChangeTime=stpTopoChangeTime, icf8023MacSlaveGroup=icf8023MacSlaveGroup, hubPrimaryPort=hubPrimaryPort, temperatureTrap1010=temperatureTrap1010, hubAddressMoveGroup=hubAddressMoveGroup, hubPortLateEventDisable=hubPortLateEventDisable, hdlcRemoteTestCommands=hdlcRemoteTestCommands, advStackU8TrapPrefix=advStackU8TrapPrefix, hubAddrMoveNewGroup=hubAddrMoveNewGroup, hdlcGiantFrameReceives=hdlcGiantFrameReceives, hubBackupLinkGroup=hubBackupLinkGroup, hubGlobalPktFragments=hubGlobalPktFragments, x25N2Count=x25N2Count, segmentationTrapET48=segmentationTrapET48, hubBasicSlaveGroup=hubBasicSlaveGroup, reset=reset, linkTest802MacAddress=linkTest802MacAddress, addressChunk=addressChunk, mapAddress=mapAddress, hubBasicEnhancementsGroup=hubBasicEnhancementsGroup, icfETwistHubDCompliance=icfETwistHubDCompliance, lastSetError=lastSetError, hubPortAddressState=hubPortAddressState, hubAddressIndex=hubAddressIndex, hubBasicAddrTableGroup=hubBasicAddrTableGroup, operationalState=operationalState, stpPortId=stpPortId, stpTrapRem=stpTrapRem, icfConfigIfIpAddress=icfConfigIfIpAddress, hdlcErrorIndex=hdlcErrorIndex, icf8023MacMissedPktErrors=icf8023MacMissedPktErrors, password=password, stpPortDesignatedBridge=stpPortDesignatedBridge, etherTwist48TrapPrefix=etherTwist48TrapPrefix, hdlcRemoteConnectRequests=hdlcRemoteConnectRequests)
mibBuilder.exportSymbols("ICF-ETWIST", hdlcRemoteResetRequests=hdlcRemoteResetRequests, forwardDbMaxAge=forwardDbMaxAge, icfETwistBridgeCompliance=icfETwistBridgeCompliance, hdlcLocalState=hdlcLocalState, hubGlobalAlignmentErrors=hubGlobalAlignmentErrors, etherTwist24STrapPrefix=etherTwist24STrapPrefix, icfDownloadIpAddress=icfDownloadIpAddress, icf8023MacIndex=icf8023MacIndex, advStackU16TrapPrefix=advStackU16TrapPrefix, hubGlobalInUcastPkts=hubGlobalInUcastPkts, hubAddrMoveOldGroup=hubAddrMoveOldGroup, stpPriority=stpPriority, stp=stp, backupLinkTrapET12=backupLinkTrapET12, evthIndex=evthIndex, icfDownloadFilename=icfDownloadFilename, wildcardUserOffset=wildcardUserOffset, icfCommonAdmin=icfCommonAdmin, x25Table=x25Table, thresholdTrapET24S=thresholdTrapET24S, icfBridgeBasicGroup=icfBridgeBasicGroup, hubPortIndex=hubPortIndex, evthObject=evthObject, wildcardArm=wildcardArm, hubGlobalInOctets=hubGlobalInOctets, hubAddrMoveIndex=hubAddrMoveIndex, brgPortCacheMisses=brgPortCacheMisses, stpCurrentHelloTime=stpCurrentHelloTime, hubPortPktFragments=hubPortPktFragments, icfConfigIpTTL=icfConfigIpTTL, thresholdTrap1010=thresholdTrap1010, linkBeatTrapET12=linkBeatTrapET12, icfETGroups=icfETGroups, hdlcRcvOverruns=hdlcRcvOverruns, icfAdvStkCompliance=icfAdvStkCompliance, newAddressTrapSMM=newAddressTrapSMM, brgPortForwardedPkts=brgPortForwardedPkts, hdlcRemoteIndex=hdlcRemoteIndex, segmentationTrapET24S=segmentationTrapET24S, wildcardFilter=wildcardFilter, stpRootCost=stpRootCost, hubAddressMoveLogEntry=hubAddressMoveLogEntry, stpPortDesignatedPort=stpPortDesignatedPort, icfDownloadIpxAddress=icfDownloadIpxAddress, linkBeatTrapASEN=linkBeatTrapASEN)
