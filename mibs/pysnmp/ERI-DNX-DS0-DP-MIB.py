#
# PySNMP MIB module ERI-DNX-DS0-DP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ERI-DNX-DS0-DP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:51:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
trapSequence, devices, PortStatus, LinkPortAddress, FunctionSwitch = mibBuilder.importSymbols("ERI-DNX-SMC-MIB", "trapSequence", "devices", "PortStatus", "LinkPortAddress", "FunctionSwitch")
eriMibs, = mibBuilder.importSymbols("ERI-ROOT-SMI", "eriMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Bits, Gauge32, iso, Unsigned32, ObjectIdentity, TimeTicks, ModuleIdentity, MibIdentifier, IpAddress, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Bits", "Gauge32", "iso", "Unsigned32", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "MibIdentifier", "IpAddress", "Integer32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
eriDNXDs0dpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 644, 3, 10))
eriDNXDs0dpMIB.setRevisions(('2002-10-30 00:00', '2002-05-21 00:00', '2002-04-11 00:00', '2001-08-01 00:00',))
if mibBuilder.loadTexts: eriDNXDs0dpMIB.setLastUpdated('200210300000Z')
if mibBuilder.loadTexts: eriDNXDs0dpMIB.setOrganization('Eastern Research, Inc.')
dnxDS0DP = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6))
ds0DpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1))
ds0DpDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2))
ds0DpPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 1), )
if mibBuilder.loadTexts: ds0DpPortConfigTable.setStatus('current')
ds0DpPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 1, 1), ).setIndexNames((0, "ERI-DNX-DS0-DP-MIB", "ds0DpCfgPortAddr"))
if mibBuilder.loadTexts: ds0DpPortConfigEntry.setStatus('current')
ds0DpCfgPortAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 1, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0DpCfgPortAddr.setStatus('current')
ds0DpCfgResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0DpCfgResource.setStatus('current')
ds0DpCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0DpCfgPortName.setStatus('current')
ds0DpCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 1, 1, 4), PortStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0DpCfgStatus.setStatus('current')
ds0DpCfgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("r64K", 0), ("r56K", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0DpCfgRate.setStatus('current')
ds0DpCfgZeroCodeEnf = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 1, 1, 6), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0DpCfgZeroCodeEnf.setStatus('current')
ds0DpCfgLoopDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 1, 1, 7), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0DpCfgLoopDetect.setStatus('current')
ds0DpCfgCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 7, 9, 12, 101, 107, 109, 112, 400, 401, 403, 406, 407, 410, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update", 1), ("inServiceAll", 7), ("copyToAll", 9), ("outOfServiceAll", 12), ("update-successful", 101), ("insvc-successful", 107), ("copy-successful", 109), ("oos-successful", 112), ("err-general-config-error", 400), ("err-invalid-port-status", 401), ("err-invalid-port-command", 403), ("err-invalid-zero-code", 406), ("err-invalid-port-rate", 407), ("err-invalid-network-loop", 410), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0DpCfgCmdStatus.setStatus('current')
ds0DpClockConfigTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 2), )
if mibBuilder.loadTexts: ds0DpClockConfigTable.setStatus('current')
ds0DpClockConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 2, 1), ).setIndexNames((0, "ERI-DNX-DS0-DP-MIB", "ds0DpCompClockAddr"))
if mibBuilder.loadTexts: ds0DpClockConfigEntry.setStatus('current')
ds0DpCompClockAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 2, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0DpCompClockAddr.setStatus('current')
ds0DpCompClockResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0DpCompClockResource.setStatus('current')
ds0DpCompClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 2, 1, 3), FunctionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0DpCompClockStatus.setStatus('current')
ds0DpCompClockCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 101, 400, 401, 403, 450, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update", 1), ("update-successful", 101), ("err-general-clock-config-error", 400), ("err-invalid-clock-status", 401), ("err-invalid-clock-command", 403), ("err-data-locked-by-another-user", 450), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0DpCompClockCmdStatus.setStatus('current')
ds0dpPortDiagTable = MibTable((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1), )
if mibBuilder.loadTexts: ds0dpPortDiagTable.setStatus('current')
ds0dpPortDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1), ).setIndexNames((0, "ERI-DNX-DS0-DP-MIB", "ds0dpDiagAddr"))
if mibBuilder.loadTexts: ds0dpPortDiagEntry.setStatus('current')
ds0dpDiagAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1, 1), LinkPortAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0dpDiagAddr.setStatus('current')
ds0dpDiagResource = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0dpDiagResource.setStatus('current')
ds0dpDiagState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8, 16, 64, 65535, 2147483647))).clone(namedValues=NamedValues(("ok", 0), ("net-loop", 8), ("drop-loop", 16), ("los", 64), ("oos", 65535), ("errors", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0dpDiagState.setStatus('current')
ds0dpDiagErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0dpDiagErrSecs.setStatus('current')
ds0dpDiagDropLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 40, 41, 42, 43, 49))).clone(namedValues=NamedValues(("off", 0), ("ocu", 40), ("csu", 41), ("ds0ToDrop", 42), ("local", 43), ("ds0FromDrop", 49)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0dpDiagDropLoop.setStatus('current')
ds0dpDiagNetLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 44, 45, 46, 47, 48))).clone(namedValues=NamedValues(("off", 5), ("local", 44), ("ocu", 45), ("csu", 46), ("ds0ToNet", 47), ("ds0FromNet", 48)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0dpDiagNetLoop.setStatus('current')
ds0dpDiagBertState = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(51, 93, 94, 95, 96, 97, 98, 99, 100))).clone(namedValues=NamedValues(("bertOff", 51), ("dropAllOnes", 93), ("drop511", 94), ("drop2047", 95), ("dropQRSS", 96), ("netAllOnes", 97), ("net511", 98), ("net2047", 99), ("netQRSS", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0dpDiagBertState.setStatus('current')
ds0dpDiagTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0dpDiagTestDuration.setStatus('current')
ds0dpDiagBertErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0dpDiagBertErrSecs.setStatus('current')
ds0dpDiagBpvErrSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds0dpDiagBpvErrSecs.setStatus('current')
ds0dpDiagInsErrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bert-error", 1), ("bpv", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0dpDiagInsErrMode.setStatus('current')
ds0dpDiagCmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 14, 16, 101, 114, 116, 200, 201, 202, 203, 205, 206, 208, 500, 501, 502))).clone(namedValues=NamedValues(("ready-for-command", 0), ("update", 1), ("clearErrors", 14), ("insertError", 16), ("update-successful", 101), ("clear-successful", 114), ("insert-successful", 116), ("err-general-diag-error", 200), ("err-link-out-of-service", 201), ("err-invalid-loop", 202), ("err-invalid-bert", 203), ("err-test-in-progress", 205), ("err-field-cannot-be-set", 206), ("err-invalid-command", 208), ("err-snmp-parse-failed", 500), ("err-invalid-snmp-type", 501), ("err-invalid-snmp-var-size", 502)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds0dpDiagCmdStatus.setStatus('current')
dnxDS0DPEnterprise = ObjectIdentity((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 0))
if mibBuilder.loadTexts: dnxDS0DPEnterprise.setStatus('current')
ds0DpPortConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 0, 1)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-DS0-DP-MIB", "ds0DpCfgPortAddr"), ("ERI-DNX-DS0-DP-MIB", "ds0DpCfgCmdStatus"))
if mibBuilder.loadTexts: ds0DpPortConfigTrap.setStatus('current')
ds0DpClockConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 644, 2, 4, 2, 6, 0, 2)).setObjects(("ERI-DNX-SMC-MIB", "trapSequence"), ("ERI-DNX-DS0-DP-MIB", "ds0DpCompClockAddr"), ("ERI-DNX-DS0-DP-MIB", "ds0DpCompClockCmdStatus"))
if mibBuilder.loadTexts: ds0DpClockConfigTrap.setStatus('current')
mibBuilder.exportSymbols("ERI-DNX-DS0-DP-MIB", ds0DpCfgLoopDetect=ds0DpCfgLoopDetect, PYSNMP_MODULE_ID=eriDNXDs0dpMIB, ds0DpCfgPortAddr=ds0DpCfgPortAddr, ds0dpDiagDropLoop=ds0dpDiagDropLoop, ds0DpClockConfigTrap=ds0DpClockConfigTrap, ds0DpPortConfigEntry=ds0DpPortConfigEntry, ds0dpDiagBertErrSecs=ds0dpDiagBertErrSecs, ds0DpClockConfigTable=ds0DpClockConfigTable, ds0dpPortDiagEntry=ds0dpPortDiagEntry, ds0DpCompClockCmdStatus=ds0DpCompClockCmdStatus, ds0dpDiagNetLoop=ds0dpDiagNetLoop, ds0dpDiagBpvErrSecs=ds0dpDiagBpvErrSecs, ds0DpCfgResource=ds0DpCfgResource, ds0DpCompClockStatus=ds0DpCompClockStatus, ds0DpPortConfigTable=ds0DpPortConfigTable, dnxDS0DP=dnxDS0DP, ds0dpDiagResource=ds0dpDiagResource, ds0dpDiagInsErrMode=ds0dpDiagInsErrMode, ds0dpDiagCmdStatus=ds0dpDiagCmdStatus, ds0DpCfgStatus=ds0DpCfgStatus, ds0DpClockConfigEntry=ds0DpClockConfigEntry, ds0dpDiagTestDuration=ds0dpDiagTestDuration, ds0DpPortConfigTrap=ds0DpPortConfigTrap, ds0dpDiagState=ds0dpDiagState, ds0dpDiagAddr=ds0dpDiagAddr, dnxDS0DPEnterprise=dnxDS0DPEnterprise, ds0DpConfig=ds0DpConfig, ds0DpCfgRate=ds0DpCfgRate, ds0DpCfgCmdStatus=ds0DpCfgCmdStatus, ds0DpDiag=ds0DpDiag, ds0dpPortDiagTable=ds0dpPortDiagTable, ds0DpCompClockAddr=ds0DpCompClockAddr, ds0DpCfgZeroCodeEnf=ds0DpCfgZeroCodeEnf, ds0dpDiagBertState=ds0dpDiagBertState, ds0DpCfgPortName=ds0DpCfgPortName, ds0DpCompClockResource=ds0DpCompClockResource, ds0dpDiagErrSecs=ds0dpDiagErrSecs, eriDNXDs0dpMIB=eriDNXDs0dpMIB)
