#
# PySNMP MIB module DIRECTORY-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DIRECTORY-SERVER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:32:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
applIndex, URLString, DistinguishedName = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "applIndex", "URLString", "DistinguishedName")
ZeroBasedCounter32, = mibBuilder.importSymbols("RMON2-MIB", "ZeroBasedCounter32")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, mib_2, Counter64, MibIdentifier, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, ModuleIdentity, Counter32, Integer32, iso, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "mib-2", "Counter64", "MibIdentifier", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "ModuleIdentity", "Counter32", "Integer32", "iso", "Gauge32", "Bits")
DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TextualConvention")
dsMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 66))
dsMIB.setRevisions(('1999-06-07 00:00', '1993-11-25 00:00',))
if mibBuilder.loadTexts: dsMIB.setLastUpdated('9906070000Z')
if mibBuilder.loadTexts: dsMIB.setOrganization('IETF Mail and Directory Management Working Group')
dsTable = MibTable((1, 3, 6, 1, 2, 1, 66, 1), )
if mibBuilder.loadTexts: dsTable.setStatus('current')
dsTableEntry = MibTableRow((1, 3, 6, 1, 2, 1, 66, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: dsTableEntry.setStatus('current')
dsServerType = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 1, 1, 1), Bits().clone(namedValues=NamedValues(("frontEndDirectoryServer", 0), ("backEndDirectoryServer", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsServerType.setStatus('current')
dsServerDescription = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsServerDescription.setStatus('current')
dsMasterEntries = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsMasterEntries.setStatus('current')
dsCopyEntries = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsCopyEntries.setStatus('current')
dsCacheEntries = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsCacheEntries.setStatus('current')
dsCacheHits = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsCacheHits.setStatus('current')
dsSlaveHits = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSlaveHits.setStatus('current')
dsApplIfOpsTable = MibTable((1, 3, 6, 1, 2, 1, 66, 2), )
if mibBuilder.loadTexts: dsApplIfOpsTable.setStatus('current')
dsApplIfOpsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 66, 2, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "DIRECTORY-SERVER-MIB", "dsApplIfProtocolIndex"))
if mibBuilder.loadTexts: dsApplIfOpsEntry.setStatus('current')
dsApplIfProtocolIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfProtocolIndex.setStatus('current')
dsApplIfProtocol = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfProtocol.setStatus('current')
dsApplIfUnauthBinds = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfUnauthBinds.setStatus('current')
dsApplIfSimpleAuthBinds = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfSimpleAuthBinds.setStatus('current')
dsApplIfStrongAuthBinds = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfStrongAuthBinds.setStatus('current')
dsApplIfBindSecurityErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfBindSecurityErrors.setStatus('current')
dsApplIfInOps = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfInOps.setStatus('current')
dsApplIfReadOps = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfReadOps.setStatus('current')
dsApplIfCompareOps = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfCompareOps.setStatus('current')
dsApplIfAddEntryOps = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfAddEntryOps.setStatus('current')
dsApplIfRemoveEntryOps = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfRemoveEntryOps.setStatus('current')
dsApplIfModifyEntryOps = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfModifyEntryOps.setStatus('current')
dsApplIfModifyRDNOps = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfModifyRDNOps.setStatus('current')
dsApplIfListOps = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfListOps.setStatus('current')
dsApplIfSearchOps = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfSearchOps.setStatus('current')
dsApplIfOneLevelSearchOps = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfOneLevelSearchOps.setStatus('current')
dsApplIfWholeSubtreeSearchOps = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfWholeSubtreeSearchOps.setStatus('current')
dsApplIfReferrals = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfReferrals.setStatus('current')
dsApplIfChainings = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfChainings.setStatus('current')
dsApplIfSecurityErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfSecurityErrors.setStatus('current')
dsApplIfErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfErrors.setStatus('current')
dsApplIfReplicationUpdatesIn = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfReplicationUpdatesIn.setStatus('current')
dsApplIfReplicationUpdatesOut = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfReplicationUpdatesOut.setStatus('current')
dsApplIfInBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfInBytes.setStatus('current')
dsApplIfOutBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsApplIfOutBytes.setStatus('current')
dsIntTable = MibTable((1, 3, 6, 1, 2, 1, 66, 3), )
if mibBuilder.loadTexts: dsIntTable.setStatus('current')
dsIntEntry = MibTableRow((1, 3, 6, 1, 2, 1, 66, 3, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "DIRECTORY-SERVER-MIB", "dsIntEntIndex"), (0, "DIRECTORY-SERVER-MIB", "dsApplIfProtocolIndex"))
if mibBuilder.loadTexts: dsIntEntry.setStatus('current')
dsIntEntIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dsIntEntIndex.setStatus('current')
dsIntEntDirectoryName = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 3, 1, 2), DistinguishedName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsIntEntDirectoryName.setStatus('current')
dsIntEntTimeOfCreation = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsIntEntTimeOfCreation.setStatus('current')
dsIntEntTimeOfLastAttempt = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsIntEntTimeOfLastAttempt.setStatus('current')
dsIntEntTimeOfLastSuccess = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsIntEntTimeOfLastSuccess.setStatus('current')
dsIntEntFailuresSinceLastSuccess = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsIntEntFailuresSinceLastSuccess.setStatus('current')
dsIntEntFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 3, 1, 7), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsIntEntFailures.setStatus('current')
dsIntEntSuccesses = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 3, 1, 8), ZeroBasedCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsIntEntSuccesses.setStatus('current')
dsIntEntURL = MibTableColumn((1, 3, 6, 1, 2, 1, 66, 3, 1, 9), URLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsIntEntURL.setStatus('current')
dsConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 66, 4))
dsGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 66, 4, 1))
dsCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 66, 4, 2))
dsEntryCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 66, 4, 2, 1)).setObjects(("DIRECTORY-SERVER-MIB", "dsEntryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsEntryCompliance = dsEntryCompliance.setStatus('current')
dsOpsCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 66, 4, 2, 2)).setObjects(("DIRECTORY-SERVER-MIB", "dsEntryGroup"), ("DIRECTORY-SERVER-MIB", "dsOpsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsOpsCompliance = dsOpsCompliance.setStatus('current')
dsIntCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 66, 4, 2, 3)).setObjects(("DIRECTORY-SERVER-MIB", "dsEntryGroup"), ("DIRECTORY-SERVER-MIB", "dsIntGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsIntCompliance = dsIntCompliance.setStatus('current')
dsOpsIntCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 66, 4, 2, 4)).setObjects(("DIRECTORY-SERVER-MIB", "dsEntryGroup"), ("DIRECTORY-SERVER-MIB", "dsOpsGroup"), ("DIRECTORY-SERVER-MIB", "dsIntGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsOpsIntCompliance = dsOpsIntCompliance.setStatus('current')
dsEntryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 66, 4, 1, 1)).setObjects(("DIRECTORY-SERVER-MIB", "dsServerType"), ("DIRECTORY-SERVER-MIB", "dsServerDescription"), ("DIRECTORY-SERVER-MIB", "dsMasterEntries"), ("DIRECTORY-SERVER-MIB", "dsCopyEntries"), ("DIRECTORY-SERVER-MIB", "dsCacheEntries"), ("DIRECTORY-SERVER-MIB", "dsCacheHits"), ("DIRECTORY-SERVER-MIB", "dsSlaveHits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsEntryGroup = dsEntryGroup.setStatus('current')
dsOpsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 66, 4, 1, 2)).setObjects(("DIRECTORY-SERVER-MIB", "dsApplIfProtocolIndex"), ("DIRECTORY-SERVER-MIB", "dsApplIfProtocol"), ("DIRECTORY-SERVER-MIB", "dsApplIfUnauthBinds"), ("DIRECTORY-SERVER-MIB", "dsApplIfSimpleAuthBinds"), ("DIRECTORY-SERVER-MIB", "dsApplIfStrongAuthBinds"), ("DIRECTORY-SERVER-MIB", "dsApplIfBindSecurityErrors"), ("DIRECTORY-SERVER-MIB", "dsApplIfInOps"), ("DIRECTORY-SERVER-MIB", "dsApplIfReadOps"), ("DIRECTORY-SERVER-MIB", "dsApplIfCompareOps"), ("DIRECTORY-SERVER-MIB", "dsApplIfAddEntryOps"), ("DIRECTORY-SERVER-MIB", "dsApplIfRemoveEntryOps"), ("DIRECTORY-SERVER-MIB", "dsApplIfModifyEntryOps"), ("DIRECTORY-SERVER-MIB", "dsApplIfModifyRDNOps"), ("DIRECTORY-SERVER-MIB", "dsApplIfListOps"), ("DIRECTORY-SERVER-MIB", "dsApplIfSearchOps"), ("DIRECTORY-SERVER-MIB", "dsApplIfOneLevelSearchOps"), ("DIRECTORY-SERVER-MIB", "dsApplIfWholeSubtreeSearchOps"), ("DIRECTORY-SERVER-MIB", "dsApplIfReferrals"), ("DIRECTORY-SERVER-MIB", "dsApplIfChainings"), ("DIRECTORY-SERVER-MIB", "dsApplIfSecurityErrors"), ("DIRECTORY-SERVER-MIB", "dsApplIfErrors"), ("DIRECTORY-SERVER-MIB", "dsApplIfReplicationUpdatesIn"), ("DIRECTORY-SERVER-MIB", "dsApplIfReplicationUpdatesOut"), ("DIRECTORY-SERVER-MIB", "dsApplIfInBytes"), ("DIRECTORY-SERVER-MIB", "dsApplIfOutBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsOpsGroup = dsOpsGroup.setStatus('current')
dsIntGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 66, 4, 1, 3)).setObjects(("DIRECTORY-SERVER-MIB", "dsIntEntDirectoryName"), ("DIRECTORY-SERVER-MIB", "dsIntEntTimeOfCreation"), ("DIRECTORY-SERVER-MIB", "dsIntEntTimeOfLastAttempt"), ("DIRECTORY-SERVER-MIB", "dsIntEntTimeOfLastSuccess"), ("DIRECTORY-SERVER-MIB", "dsIntEntFailuresSinceLastSuccess"), ("DIRECTORY-SERVER-MIB", "dsIntEntFailures"), ("DIRECTORY-SERVER-MIB", "dsIntEntSuccesses"), ("DIRECTORY-SERVER-MIB", "dsIntEntURL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dsIntGroup = dsIntGroup.setStatus('current')
mibBuilder.exportSymbols("DIRECTORY-SERVER-MIB", dsServerDescription=dsServerDescription, dsTableEntry=dsTableEntry, dsApplIfOpsTable=dsApplIfOpsTable, dsApplIfModifyRDNOps=dsApplIfModifyRDNOps, dsOpsGroup=dsOpsGroup, dsGroups=dsGroups, dsApplIfReadOps=dsApplIfReadOps, dsCompliances=dsCompliances, dsApplIfProtocol=dsApplIfProtocol, dsCopyEntries=dsCopyEntries, dsApplIfInBytes=dsApplIfInBytes, dsIntEntTimeOfCreation=dsIntEntTimeOfCreation, dsApplIfReplicationUpdatesIn=dsApplIfReplicationUpdatesIn, dsApplIfCompareOps=dsApplIfCompareOps, dsApplIfOutBytes=dsApplIfOutBytes, dsApplIfErrors=dsApplIfErrors, dsOpsIntCompliance=dsOpsIntCompliance, dsCacheHits=dsCacheHits, dsEntryCompliance=dsEntryCompliance, dsApplIfStrongAuthBinds=dsApplIfStrongAuthBinds, dsIntGroup=dsIntGroup, dsApplIfProtocolIndex=dsApplIfProtocolIndex, dsIntEntIndex=dsIntEntIndex, dsApplIfUnauthBinds=dsApplIfUnauthBinds, dsApplIfReferrals=dsApplIfReferrals, dsIntEntSuccesses=dsIntEntSuccesses, dsApplIfModifyEntryOps=dsApplIfModifyEntryOps, dsTable=dsTable, dsApplIfSimpleAuthBinds=dsApplIfSimpleAuthBinds, dsApplIfChainings=dsApplIfChainings, dsApplIfOneLevelSearchOps=dsApplIfOneLevelSearchOps, dsIntEntFailures=dsIntEntFailures, dsApplIfSecurityErrors=dsApplIfSecurityErrors, PYSNMP_MODULE_ID=dsMIB, dsServerType=dsServerType, dsApplIfBindSecurityErrors=dsApplIfBindSecurityErrors, dsApplIfListOps=dsApplIfListOps, dsApplIfAddEntryOps=dsApplIfAddEntryOps, dsApplIfOpsEntry=dsApplIfOpsEntry, dsIntTable=dsIntTable, dsApplIfReplicationUpdatesOut=dsApplIfReplicationUpdatesOut, dsApplIfRemoveEntryOps=dsApplIfRemoveEntryOps, dsApplIfInOps=dsApplIfInOps, dsIntEntTimeOfLastAttempt=dsIntEntTimeOfLastAttempt, dsOpsCompliance=dsOpsCompliance, dsIntEntDirectoryName=dsIntEntDirectoryName, dsApplIfWholeSubtreeSearchOps=dsApplIfWholeSubtreeSearchOps, dsIntEntURL=dsIntEntURL, dsMIB=dsMIB, dsEntryGroup=dsEntryGroup, dsApplIfSearchOps=dsApplIfSearchOps, dsCacheEntries=dsCacheEntries, dsConformance=dsConformance, dsIntEntFailuresSinceLastSuccess=dsIntEntFailuresSinceLastSuccess, dsIntCompliance=dsIntCompliance, dsSlaveHits=dsSlaveHits, dsIntEntry=dsIntEntry, dsIntEntTimeOfLastSuccess=dsIntEntTimeOfLastSuccess, dsMasterEntries=dsMasterEntries)
