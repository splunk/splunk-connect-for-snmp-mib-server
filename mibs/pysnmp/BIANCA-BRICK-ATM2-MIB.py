#
# PySNMP MIB module BIANCA-BRICK-ATM2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-ATM2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1158-MIB", "DisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, NotificationType, Gauge32, IpAddress, ObjectIdentity, MibIdentifier, Integer32, Bits, Counter32, Unsigned32, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "Gauge32", "IpAddress", "ObjectIdentity", "MibIdentifier", "Integer32", "Bits", "Counter32", "Unsigned32", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
atm = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 16))
atmIfTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 16, 10), )
if mibBuilder.loadTexts: atmIfTable.setStatus('mandatory')
atmIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1), ).setIndexNames((0, "BIANCA-BRICK-ATM2-MIB", "atmIfIndex"))
if mibBuilder.loadTexts: atmIfEntry.setStatus('mandatory')
atmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfIndex.setStatus('mandatory')
atmIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("adsl", 2), ("shdsl", 3), ("vdsl", 4))).clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfType.setStatus('mandatory')
atmIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfDescr.setStatus('mandatory')
atmIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfAdminStatus.setStatus('mandatory')
atmIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfOperStatus.setStatus('mandatory')
atmIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfLastChange.setStatus('mandatory')
atmIfMaxTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmIfMaxTxRate.setStatus('mandatory')
atmIfOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atm", 1), ("efm", 2))).clone('atm')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfOperMode.setStatus('mandatory')
atmIfInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfInPkts.setStatus('mandatory')
atmIfOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfOutPkts.setStatus('mandatory')
atmIfRxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfRxSpeed.setStatus('mandatory')
atmIfTxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfTxSpeed.setStatus('mandatory')
atmIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfInOctets.setStatus('mandatory')
atmIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfInDiscards.setStatus('mandatory')
atmIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfInErrors.setStatus('mandatory')
atmIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfOutOctets.setStatus('mandatory')
atmIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfOutDiscards.setStatus('mandatory')
atmIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 10, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmIfOutErrors.setStatus('mandatory')
atmVpcTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 16, 11), )
if mibBuilder.loadTexts: atmVpcTable.setStatus('mandatory')
atmVpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 16, 11, 1), ).setIndexNames((0, "BIANCA-BRICK-ATM2-MIB", "atmVpcPortIndex"), (0, "BIANCA-BRICK-ATM2-MIB", "atmVpcVpi"))
if mibBuilder.loadTexts: atmVpcEntry.setStatus('mandatory')
atmVpcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVpcPortIndex.setStatus('mandatory')
atmVpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVpcVpi.setStatus('mandatory')
atmVpcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("end2endUp", 2), ("end2endDown", 3), ("localUpEnd2endUnknown", 4), ("localDown", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVpcOperStatus.setStatus('mandatory')
atmVccTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 16, 12), )
if mibBuilder.loadTexts: atmVccTable.setStatus('mandatory')
atmVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 16, 12, 1), ).setIndexNames((0, "BIANCA-BRICK-ATM2-MIB", "atmVccPortIndex"), (0, "BIANCA-BRICK-ATM2-MIB", "atmVccVpi"), (0, "BIANCA-BRICK-ATM2-MIB", "atmVccVci"))
if mibBuilder.loadTexts: atmVccEntry.setStatus('mandatory')
atmVccPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVccPortIndex.setStatus('mandatory')
atmVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVccVpi.setStatus('mandatory')
atmVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVccVci.setStatus('mandatory')
atmVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("end2endUp", 2), ("end2endDown", 3), ("localUpEnd2endUnknown", 4), ("localDown", 5))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmVccOperStatus.setStatus('mandatory')
atmOamTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 16, 13), )
if mibBuilder.loadTexts: atmOamTable.setStatus('mandatory')
atmOamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1), ).setIndexNames((0, "BIANCA-BRICK-ATM2-MIB", "atmOamAtmIfIndex"), (0, "BIANCA-BRICK-ATM2-MIB", "atmOamVpi"), (0, "BIANCA-BRICK-ATM2-MIB", "atmOamVci"))
if mibBuilder.loadTexts: atmOamEntry.setStatus('mandatory')
atmOamAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamAtmIfIndex.setStatus('mandatory')
atmOamVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamVpi.setStatus('mandatory')
atmOamVci = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamVci.setStatus('mandatory')
atmOamFlowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("f5", 1), ("f4", 2), ("delete", 10))).clone('f5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamFlowLevel.setStatus('mandatory')
atmOamLoopbackEnd2End = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamLoopbackEnd2End.setStatus('mandatory')
atmOamLoopbackSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamLoopbackSegment.setStatus('mandatory')
atmOamLoopbackEnd2EndInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamLoopbackEnd2EndInterval.setStatus('mandatory')
atmOamLoopbackSegmentInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamLoopbackSegmentInterval.setStatus('mandatory')
atmOamLoopbackEnd2EndMaxPending = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamLoopbackEnd2EndMaxPending.setStatus('mandatory')
atmOamLoopbackSegmentMaxPending = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamLoopbackSegmentMaxPending.setStatus('mandatory')
atmOamCCEnd2EndActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("passive", 1), ("active", 2), ("both", 3), ("no-negotiation", 4), ("none", 5))).clone('passive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamCCEnd2EndActivation.setStatus('mandatory')
atmOamCCSegmentActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("passive", 1), ("active", 2), ("both", 3), ("no-negotiation", 4), ("none", 5))).clone('passive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamCCSegmentActivation.setStatus('mandatory')
atmOamCCEnd2EndDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sink", 1), ("source", 2), ("both", 3), ("none", 4))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamCCEnd2EndDirection.setStatus('mandatory')
atmOamCCSegmentDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sink", 1), ("source", 2), ("both", 3), ("none", 4))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmOamCCSegmentDirection.setStatus('mandatory')
atmOamStatTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 16, 14), )
if mibBuilder.loadTexts: atmOamStatTable.setStatus('mandatory')
atmOamStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1), ).setIndexNames((0, "BIANCA-BRICK-ATM2-MIB", "atmOamStatAtmIfIndex"), (0, "BIANCA-BRICK-ATM2-MIB", "atmOamStatVpi"), (0, "BIANCA-BRICK-ATM2-MIB", "atmOamStatVci"))
if mibBuilder.loadTexts: atmOamStatEntry.setStatus('mandatory')
atmOamStatAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatAtmIfIndex.setStatus('mandatory')
atmOamStatVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatVpi.setStatus('mandatory')
atmOamStatVci = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatVci.setStatus('mandatory')
atmOamStatFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("f5-segment", 1), ("f5-end2end", 2), ("f4-segment", 3), ("f4-end2end", 4))).clone('f5-end2end')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatFlowType.setStatus('mandatory')
atmOamStatLoopbackTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatLoopbackTxCells.setStatus('mandatory')
atmOamStatLoopbackRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatLoopbackRxCells.setStatus('mandatory')
atmOamStatLoopbackPending = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatLoopbackPending.setStatus('mandatory')
atmOamStatLoopbackCorr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatLoopbackCorr.setStatus('mandatory')
atmOamStatAisState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatAisState.setStatus('mandatory')
atmOamStatAisTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatAisTxCells.setStatus('mandatory')
atmOamStatAisRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatAisRxCells.setStatus('mandatory')
atmOamStatTotalAisTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatTotalAisTxCells.setStatus('mandatory')
atmOamStatTotalAisRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatTotalAisRxCells.setStatus('mandatory')
atmOamStatRdiState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatRdiState.setStatus('mandatory')
atmOamStatRdiTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatRdiTxCells.setStatus('mandatory')
atmOamStatRdiRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatRdiRxCells.setStatus('mandatory')
atmOamStatTotalRdiTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatTotalRdiTxCells.setStatus('mandatory')
atmOamStatTotalRdiRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatTotalRdiRxCells.setStatus('mandatory')
atmOamStatCCActivatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("wait-act-con", 2), ("active", 3), ("wait-deact-con", 4))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatCCActivatorState.setStatus('mandatory')
atmOamStatCCActivatorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sink", 1), ("source", 2), ("both", 3), ("not-applicable", 4))).clone('not-applicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatCCActivatorDirection.setStatus('mandatory')
atmOamStatCCActivatorCorr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatCCActivatorCorr.setStatus('mandatory')
atmOamStatCCResponderState = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("active", 3), ("wait-deact-con", 4))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatCCResponderState.setStatus('mandatory')
atmOamStatCCResponderDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("source", 1), ("sink", 2), ("both", 3), ("not-applicable", 4))).clone('not-applicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatCCResponderDirection.setStatus('mandatory')
atmOamStatCCResponderCorr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatCCResponderCorr.setStatus('mandatory')
atmOamStatCCTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatCCTxCells.setStatus('mandatory')
atmOamStatCCRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 14, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmOamStatCCRxCells.setStatus('mandatory')
ethoaPvcTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 16, 15), )
if mibBuilder.loadTexts: ethoaPvcTable.setStatus('mandatory')
ethoaPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 16, 15, 1), ).setIndexNames((0, "BIANCA-BRICK-ATM2-MIB", "ethoaPvcVpi"), (0, "BIANCA-BRICK-ATM2-MIB", "ethoaPvcVci"), (0, "BIANCA-BRICK-ATM2-MIB", "ethoaPvcAtmIfIndex"))
if mibBuilder.loadTexts: ethoaPvcEntry.setStatus('mandatory')
ethoaPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethoaPvcIfIndex.setStatus('mandatory')
ethoaPvcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 15, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethoaPvcDescr.setStatus('mandatory')
ethoaPvcAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 15, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethoaPvcAtmIfIndex.setStatus('mandatory')
ethoaPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethoaPvcVpi.setStatus('mandatory')
ethoaPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethoaPvcVci.setStatus('mandatory')
ethoaPvcEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("bridged-no-fcs", 1), ("bridged-fcs", 2), ("vc-multiplexed", 3), ("delete", 10))).clone('bridged-no-fcs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethoaPvcEncapsulation.setStatus('mandatory')
ethoaPvcPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 15, 1, 7), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethoaPvcPhysAddress.setStatus('mandatory')
rpoaPvcTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 16, 16), )
if mibBuilder.loadTexts: rpoaPvcTable.setStatus('mandatory')
rpoaPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 16, 16, 1), ).setIndexNames((0, "BIANCA-BRICK-ATM2-MIB", "rpoaPvcVpi"), (0, "BIANCA-BRICK-ATM2-MIB", "rpoaPvcVci"), (0, "BIANCA-BRICK-ATM2-MIB", "rpoaPvcAtmIfIndex"))
if mibBuilder.loadTexts: rpoaPvcEntry.setStatus('mandatory')
rpoaPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpoaPvcIfIndex.setStatus('mandatory')
rpoaPvcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 16, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpoaPvcDescr.setStatus('mandatory')
rpoaPvcAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpoaPvcAtmIfIndex.setStatus('mandatory')
rpoaPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 16, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpoaPvcVpi.setStatus('mandatory')
rpoaPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpoaPvcVci.setStatus('mandatory')
rpoaPvcEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("non-iso", 1), ("iso", 2), ("vc-multiplexed", 3), ("delete", 10))).clone('non-iso')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpoaPvcEncapsulation.setStatus('mandatory')
pppoaPvcTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 16, 17), )
if mibBuilder.loadTexts: pppoaPvcTable.setStatus('mandatory')
pppoaPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 16, 17, 1), ).setIndexNames((0, "BIANCA-BRICK-ATM2-MIB", "pppoaPvcVpi"), (0, "BIANCA-BRICK-ATM2-MIB", "pppoaPvcVci"), (0, "BIANCA-BRICK-ATM2-MIB", "pppoaPvcAtmIfIndex"))
if mibBuilder.loadTexts: pppoaPvcEntry.setStatus('mandatory')
pppoaPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppoaPvcIfIndex.setStatus('mandatory')
pppoaPvcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 17, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoaPvcDescr.setStatus('mandatory')
pppoaPvcAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 17, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoaPvcAtmIfIndex.setStatus('mandatory')
pppoaPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoaPvcVpi.setStatus('mandatory')
pppoaPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoaPvcVci.setStatus('mandatory')
pppoaPvcEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10))).clone(namedValues=NamedValues(("vc-multiplexed", 1), ("llc", 2), ("delete", 10))).clone('vc-multiplexed')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoaPvcEncapsulation.setStatus('mandatory')
pppoaPvcClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanent", 1), ("on-demand", 2))).clone('on-demand')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoaPvcClientType.setStatus('mandatory')
atmQosVccTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 16, 19), )
if mibBuilder.loadTexts: atmQosVccTable.setStatus('mandatory')
atmQosVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 16, 19, 1), ).setIndexNames((0, "BIANCA-BRICK-ATM2-MIB", "atmQosVccAtmIfIndex"), (0, "BIANCA-BRICK-ATM2-MIB", "atmQosVccVpi"), (0, "BIANCA-BRICK-ATM2-MIB", "atmQosVccVci"))
if mibBuilder.loadTexts: atmQosVccEntry.setStatus('mandatory')
atmQosVccAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 19, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosVccAtmIfIndex.setStatus('mandatory')
atmQosVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosVccVpi.setStatus('mandatory')
atmQosVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosVccVci.setStatus('mandatory')
atmQosVccService = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 20))).clone(namedValues=NamedValues(("cbr", 1), ("vbr", 2), ("vbr3", 4), ("ubr", 8), ("delete", 20))).clone('ubr')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosVccService.setStatus('mandatory')
atmQosVccOutPcr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 19, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosVccOutPcr.setStatus('mandatory')
atmQosVccOutScr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 19, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosVccOutScr.setStatus('mandatory')
atmQosVccOutMbs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 19, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosVccOutMbs.setStatus('mandatory')
atmQosVccOutMcr = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 19, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmQosVccOutMcr.setStatus('mandatory')
atmAturPerfDataTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 16, 20), )
if mibBuilder.loadTexts: atmAturPerfDataTable.setStatus('mandatory')
atmAturPerfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1), ).setIndexNames((0, "BIANCA-BRICK-ATM2-MIB", "atmAturPerfIfIndex"))
if mibBuilder.loadTexts: atmAturPerfDataEntry.setStatus('mandatory')
atmAturPerfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfIfIndex.setStatus('mandatory')
atmAturPerfIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfIdleCells.setStatus('mandatory')
atmAturPerfDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfDataCells.setStatus('mandatory')
atmAturPerfLcds = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfLcds.setStatus('mandatory')
atmAturPerfHecs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfHecs.setStatus('mandatory')
atmAturPerfCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfCurr15MinTimeElapsed.setStatus('mandatory')
atmAturPerfCurr15MinIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfCurr15MinIdleCells.setStatus('mandatory')
atmAturPerfCurr15MinDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfCurr15MinDataCells.setStatus('mandatory')
atmAturPerfCurr15MinLcds = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfCurr15MinLcds.setStatus('mandatory')
atmAturPerfCurr15MinHecs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfCurr15MinHecs.setStatus('mandatory')
atmAturPerfCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfCurr1DayTimeElapsed.setStatus('mandatory')
atmAturPerfCurr1DayIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfCurr1DayIdleCells.setStatus('mandatory')
atmAturPerfCurr1DayDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfCurr1DayDataCells.setStatus('mandatory')
atmAturPerfCurr1DayLcds = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfCurr1DayLcds.setStatus('mandatory')
atmAturPerfCurr1DayHecs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfCurr1DayHecs.setStatus('mandatory')
atmAturPerfPrev1DayIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfPrev1DayIdleCells.setStatus('mandatory')
atmAturPerfPrev1DayDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfPrev1DayDataCells.setStatus('mandatory')
atmAturPerfPrev1DayLcds = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfPrev1DayLcds.setStatus('mandatory')
atmAturPerfPrev1DayHecs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 20, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAturPerfPrev1DayHecs.setStatus('mandatory')
atmAtucPerfDataTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 16, 21), )
if mibBuilder.loadTexts: atmAtucPerfDataTable.setStatus('mandatory')
atmAtucPerfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1), ).setIndexNames((0, "BIANCA-BRICK-ATM2-MIB", "atmAtucPerfIfIndex"))
if mibBuilder.loadTexts: atmAtucPerfDataEntry.setStatus('mandatory')
atmAtucPerfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfIfIndex.setStatus('mandatory')
atmAtucPerfIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfIdleCells.setStatus('mandatory')
atmAtucPerfDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfDataCells.setStatus('mandatory')
atmAtucPerfLcds = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfLcds.setStatus('mandatory')
atmAtucPerfHecs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfHecs.setStatus('mandatory')
atmAtucPerfCurr15MinTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfCurr15MinTimeElapsed.setStatus('mandatory')
atmAtucPerfCurr15MinIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfCurr15MinIdleCells.setStatus('mandatory')
atmAtucPerfCurr15MinDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfCurr15MinDataCells.setStatus('mandatory')
atmAtucPerfCurr15MinLcds = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfCurr15MinLcds.setStatus('mandatory')
atmAtucPerfCurr15MinHecs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfCurr15MinHecs.setStatus('mandatory')
atmAtucPerfCurr1DayTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86399))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfCurr1DayTimeElapsed.setStatus('mandatory')
atmAtucPerfCurr1DayIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfCurr1DayIdleCells.setStatus('mandatory')
atmAtucPerfCurr1DayDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfCurr1DayDataCells.setStatus('mandatory')
atmAtucPerfCurr1DayLcds = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfCurr1DayLcds.setStatus('mandatory')
atmAtucPerfCurr1DayHecs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfCurr1DayHecs.setStatus('mandatory')
atmAtucPerfPrev1DayIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfPrev1DayIdleCells.setStatus('mandatory')
atmAtucPerfPrev1DayDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfPrev1DayDataCells.setStatus('mandatory')
atmAtucPerfPrev1DayLcds = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfPrev1DayLcds.setStatus('mandatory')
atmAtucPerfPrev1DayHecs = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 16, 21, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmAtucPerfPrev1DayHecs.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-ATM2-MIB", atmOamVpi=atmOamVpi, atmOamCCEnd2EndActivation=atmOamCCEnd2EndActivation, ethoaPvcVci=ethoaPvcVci, atmAtucPerfCurr1DayDataCells=atmAtucPerfCurr1DayDataCells, atmAtucPerfCurr15MinIdleCells=atmAtucPerfCurr15MinIdleCells, atmOamTable=atmOamTable, atmVccTable=atmVccTable, ethoaPvcEntry=ethoaPvcEntry, atmAtucPerfPrev1DayHecs=atmAtucPerfPrev1DayHecs, rpoaPvcVci=rpoaPvcVci, atmOamStatVpi=atmOamStatVpi, atmOamStatCCActivatorDirection=atmOamStatCCActivatorDirection, atmAtucPerfCurr15MinHecs=atmAtucPerfCurr15MinHecs, atmIfTxSpeed=atmIfTxSpeed, pppoaPvcIfIndex=pppoaPvcIfIndex, atmIfOutPkts=atmIfOutPkts, ethoaPvcVpi=ethoaPvcVpi, atmVccVci=atmVccVci, atmOamStatLoopbackTxCells=atmOamStatLoopbackTxCells, atmAturPerfCurr15MinLcds=atmAturPerfCurr15MinLcds, pppoaPvcTable=pppoaPvcTable, atmIfTable=atmIfTable, atmOamStatTotalAisRxCells=atmOamStatTotalAisRxCells, ethoaPvcDescr=ethoaPvcDescr, atmAturPerfCurr1DayLcds=atmAturPerfCurr1DayLcds, atmIfInErrors=atmIfInErrors, atmQosVccTable=atmQosVccTable, atmIfOperMode=atmIfOperMode, atmOamCCSegmentActivation=atmOamCCSegmentActivation, pppoaPvcEntry=pppoaPvcEntry, atmOamStatTotalAisTxCells=atmOamStatTotalAisTxCells, atmIfLastChange=atmIfLastChange, atmIfInPkts=atmIfInPkts, atmOamStatVci=atmOamStatVci, atmIfIndex=atmIfIndex, atmAturPerfCurr1DayHecs=atmAturPerfCurr1DayHecs, atmOamLoopbackEnd2EndInterval=atmOamLoopbackEnd2EndInterval, atmIfMaxTxRate=atmIfMaxTxRate, rpoaPvcEntry=rpoaPvcEntry, bibo=bibo, atmOamStatCCRxCells=atmOamStatCCRxCells, atmIfRxSpeed=atmIfRxSpeed, rpoaPvcIfIndex=rpoaPvcIfIndex, atmAtucPerfPrev1DayIdleCells=atmAtucPerfPrev1DayIdleCells, atmVccEntry=atmVccEntry, atmIfOutErrors=atmIfOutErrors, atm=atm, atmAtucPerfCurr1DayHecs=atmAtucPerfCurr1DayHecs, atmOamStatEntry=atmOamStatEntry, rpoaPvcAtmIfIndex=rpoaPvcAtmIfIndex, atmAtucPerfCurr1DayLcds=atmAtucPerfCurr1DayLcds, ethoaPvcEncapsulation=ethoaPvcEncapsulation, atmIfDescr=atmIfDescr, atmOamCCSegmentDirection=atmOamCCSegmentDirection, atmOamStatTotalRdiTxCells=atmOamStatTotalRdiTxCells, atmAturPerfIfIndex=atmAturPerfIfIndex, atmQosVccService=atmQosVccService, atmAturPerfCurr15MinHecs=atmAturPerfCurr15MinHecs, atmAturPerfHecs=atmAturPerfHecs, atmAtucPerfDataCells=atmAtucPerfDataCells, atmOamLoopbackEnd2EndMaxPending=atmOamLoopbackEnd2EndMaxPending, atmAtucPerfCurr15MinDataCells=atmAtucPerfCurr15MinDataCells, atmAturPerfCurr15MinDataCells=atmAturPerfCurr15MinDataCells, atmAtucPerfIfIndex=atmAtucPerfIfIndex, atmOamStatAtmIfIndex=atmOamStatAtmIfIndex, atmAtucPerfCurr1DayIdleCells=atmAtucPerfCurr1DayIdleCells, atmVpcOperStatus=atmVpcOperStatus, atmQosVccVci=atmQosVccVci, atmAtucPerfIdleCells=atmAtucPerfIdleCells, atmOamStatRdiTxCells=atmOamStatRdiTxCells, ethoaPvcPhysAddress=ethoaPvcPhysAddress, atmOamStatCCResponderState=atmOamStatCCResponderState, atmAtucPerfCurr15MinLcds=atmAtucPerfCurr15MinLcds, atmAturPerfPrev1DayIdleCells=atmAturPerfPrev1DayIdleCells, atmOamLoopbackSegmentMaxPending=atmOamLoopbackSegmentMaxPending, atmAturPerfCurr1DayTimeElapsed=atmAturPerfCurr1DayTimeElapsed, atmOamStatCCResponderCorr=atmOamStatCCResponderCorr, atmVpcTable=atmVpcTable, atmQosVccEntry=atmQosVccEntry, atmOamLoopbackSegmentInterval=atmOamLoopbackSegmentInterval, rpoaPvcTable=rpoaPvcTable, atmQosVccVpi=atmQosVccVpi, atmQosVccOutMcr=atmQosVccOutMcr, atmAturPerfDataEntry=atmAturPerfDataEntry, atmIfOutOctets=atmIfOutOctets, atmIfEntry=atmIfEntry, pppoaPvcClientType=pppoaPvcClientType, atmAturPerfPrev1DayDataCells=atmAturPerfPrev1DayDataCells, atmQosVccOutScr=atmQosVccOutScr, ethoaPvcAtmIfIndex=ethoaPvcAtmIfIndex, atmAturPerfIdleCells=atmAturPerfIdleCells, atmVpcEntry=atmVpcEntry, atmAtucPerfDataEntry=atmAtucPerfDataEntry, atmAtucPerfCurr15MinTimeElapsed=atmAtucPerfCurr15MinTimeElapsed, atmVpcVpi=atmVpcVpi, atmOamAtmIfIndex=atmOamAtmIfIndex, atmVccOperStatus=atmVccOperStatus, bintec=bintec, ethoaPvcTable=ethoaPvcTable, atmVccPortIndex=atmVccPortIndex, atmAturPerfDataCells=atmAturPerfDataCells, atmIfAdminStatus=atmIfAdminStatus, atmOamCCEnd2EndDirection=atmOamCCEnd2EndDirection, atmOamStatTotalRdiRxCells=atmOamStatTotalRdiRxCells, atmVccVpi=atmVccVpi, atmOamStatAisState=atmOamStatAisState, atmQosVccAtmIfIndex=atmQosVccAtmIfIndex, rpoaPvcVpi=rpoaPvcVpi, atmOamStatRdiRxCells=atmOamStatRdiRxCells, atmQosVccOutPcr=atmQosVccOutPcr, atmOamStatTable=atmOamStatTable, atmAtucPerfHecs=atmAtucPerfHecs, atmOamStatRdiState=atmOamStatRdiState, atmAturPerfLcds=atmAturPerfLcds, atmOamStatCCResponderDirection=atmOamStatCCResponderDirection, atmAturPerfCurr1DayIdleCells=atmAturPerfCurr1DayIdleCells, atmAturPerfPrev1DayHecs=atmAturPerfPrev1DayHecs, atmOamLoopbackSegment=atmOamLoopbackSegment, atmIfOperStatus=atmIfOperStatus, atmQosVccOutMbs=atmQosVccOutMbs, atmOamLoopbackEnd2End=atmOamLoopbackEnd2End, atmIfType=atmIfType, atmAtucPerfDataTable=atmAtucPerfDataTable, pppoaPvcEncapsulation=pppoaPvcEncapsulation, atmIfOutDiscards=atmIfOutDiscards, atmOamStatLoopbackRxCells=atmOamStatLoopbackRxCells, atmAturPerfCurr15MinTimeElapsed=atmAturPerfCurr15MinTimeElapsed, rpoaPvcDescr=rpoaPvcDescr, atmOamStatLoopbackPending=atmOamStatLoopbackPending, pppoaPvcDescr=pppoaPvcDescr, atmVpcPortIndex=atmVpcPortIndex, pppoaPvcVci=pppoaPvcVci, rpoaPvcEncapsulation=rpoaPvcEncapsulation, atmAturPerfCurr15MinIdleCells=atmAturPerfCurr15MinIdleCells, atmOamStatCCActivatorCorr=atmOamStatCCActivatorCorr, atmOamStatAisRxCells=atmOamStatAisRxCells, pppoaPvcAtmIfIndex=pppoaPvcAtmIfIndex, atmOamStatCCActivatorState=atmOamStatCCActivatorState, atmAtucPerfPrev1DayLcds=atmAtucPerfPrev1DayLcds, atmOamStatFlowType=atmOamStatFlowType, atmOamStatAisTxCells=atmOamStatAisTxCells, atmAtucPerfPrev1DayDataCells=atmAtucPerfPrev1DayDataCells, atmOamStatLoopbackCorr=atmOamStatLoopbackCorr, atmOamFlowLevel=atmOamFlowLevel, atmAturPerfDataTable=atmAturPerfDataTable, atmAtucPerfCurr1DayTimeElapsed=atmAtucPerfCurr1DayTimeElapsed, atmIfInOctets=atmIfInOctets, atmOamStatCCTxCells=atmOamStatCCTxCells, atmAtucPerfLcds=atmAtucPerfLcds, pppoaPvcVpi=pppoaPvcVpi, atmOamVci=atmOamVci, atmAturPerfPrev1DayLcds=atmAturPerfPrev1DayLcds, atmAturPerfCurr1DayDataCells=atmAturPerfCurr1DayDataCells, atmIfInDiscards=atmIfInDiscards, ethoaPvcIfIndex=ethoaPvcIfIndex, atmOamEntry=atmOamEntry)
