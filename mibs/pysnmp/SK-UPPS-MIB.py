#
# PySNMP MIB module SK-UPPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SK-UPPS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:56:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Unsigned32, NotificationType, Gauge32, ModuleIdentity, ObjectIdentity, iso, IpAddress, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Unsigned32", "NotificationType", "Gauge32", "ModuleIdentity", "ObjectIdentity", "iso", "IpAddress", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "Integer32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class FddiMACLongAddressType(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sk = MibIdentifier((1, 3, 6, 1, 4, 1, 179))
skMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2))
sk_board = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2)).setLabel("sk-board")
sk_board_status = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2, 1)).setLabel("sk-board-status")
sk_board_client = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2, 2)).setLabel("sk-board-client")
eth = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2, 3))
tok = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2, 4))
fddi = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2, 5))
sk_board_statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 179, 2, 2, 6)).setLabel("sk-board-statistics")
stTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1), )
if mibBuilder.loadTexts: stTable.setStatus('mandatory')
stEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1), ).setIndexNames((0, "SK-UPPS-MIB", "stIfIndex"))
if mibBuilder.loadTexts: stEntry.setStatus('mandatory')
stIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stIfIndex.setStatus('mandatory')
stVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stVersion.setStatus('mandatory')
stLogAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stLogAddress.setStatus('mandatory')
stInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stInterrupt.setStatus('mandatory')
stBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stBaseAddress.setStatus('mandatory')
stRAMSize = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stRAMSize.setStatus('mandatory')
stIOPort = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stIOPort.setStatus('mandatory')
stDMALine = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stDMALine.setStatus('mandatory')
stNumMbufs = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stNumMbufs.setStatus('mandatory')
stMaxTxMbufs = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stMaxTxMbufs.setStatus('mandatory')
stMaxRxMbufs = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stMaxRxMbufs.setStatus('mandatory')
stCurrentPacketFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stCurrentPacketFilter.setStatus('mandatory')
stServiceInterrupt = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stServiceInterrupt.setStatus('mandatory')
stOEMSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stOEMSignature.setStatus('mandatory')
stTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("fddi", 2), ("token-ring", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTopology.setStatus('mandatory')
stIORange = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stIORange.setStatus('mandatory')
clTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1), )
if mibBuilder.loadTexts: clTable.setStatus('mandatory')
clEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1), ).setIndexNames((0, "SK-UPPS-MIB", "clPID"))
if mibBuilder.loadTexts: clEntry.setStatus('mandatory')
clIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clIfIndex.setStatus('mandatory')
clType = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clType.setStatus('mandatory')
clMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMulticast.setStatus('mandatory')
clName = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clName.setStatus('mandatory')
clMode = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clMode.setStatus('mandatory')
clPID = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clPID.setStatus('mandatory')
ethStatsTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1), )
if mibBuilder.loadTexts: ethStatsTable.setStatus('mandatory')
ethStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1), ).setIndexNames((0, "SK-UPPS-MIB", "ethStatsIndex"))
if mibBuilder.loadTexts: ethStatsEntry.setStatus('mandatory')
ethStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsIndex.setStatus('mandatory')
ethStatsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsAlignmentErrors.setStatus('mandatory')
ethStatsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsFCSErrors.setStatus('mandatory')
ethStatsSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsSingleCollisionFrames.setStatus('mandatory')
ethStatsMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsMultipleCollisionFrames.setStatus('mandatory')
ethStatsSQETestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsSQETestErrors.setStatus('mandatory')
ethStatsDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsDeferredTransmissions.setStatus('mandatory')
ethStatsLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsLateCollisions.setStatus('mandatory')
ethStatsExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsExcessiveCollisions.setStatus('mandatory')
ethStatsInternalMacTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsInternalMacTransErrors.setStatus('mandatory')
ethStatsCarrierSenseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsCarrierSenseErrors.setStatus('mandatory')
ethStatsExcessiveDeferrals = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsExcessiveDeferrals.setStatus('mandatory')
ethStatsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsFrameTooLongs.setStatus('mandatory')
ethStatsInRangeLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsInRangeLengthErrors.setStatus('mandatory')
ethStatsOutOfRangeLengthFields = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsOutOfRangeLengthFields.setStatus('mandatory')
ethStatsInternalMacRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsInternalMacRecvErrors.setStatus('mandatory')
tokStatsTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1), )
if mibBuilder.loadTexts: tokStatsTable.setStatus('mandatory')
tokStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1), ).setIndexNames((0, "SK-UPPS-MIB", "tokStatsIndex"))
if mibBuilder.loadTexts: tokStatsEntry.setStatus('mandatory')
tokStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsIndex.setStatus('mandatory')
tokStatsUpstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsUpstreamNbr.setStatus('mandatory')
tokStatsLocalRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsLocalRingNumber.setStatus('mandatory')
tokStatsRingUpCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsRingUpCounts.setStatus('mandatory')
tokStatsSignalLossErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsSignalLossErrors.setStatus('mandatory')
tokStatsLobeWireFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsLobeWireFaults.setStatus('mandatory')
tokStatsRingRecoveryCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsRingRecoveryCounts.setStatus('mandatory')
tokStatsLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsLineErrors.setStatus('mandatory')
tokStatsBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsBurstErrors.setStatus('mandatory')
tokStatsARI_FCIErrors = MibScalar((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 10), Counter32()).setLabel("tokStatsARI-FCIErrors").setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsARI_FCIErrors.setStatus('mandatory')
tokStatsLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsLostFrameErrors.setStatus('mandatory')
tokStatsReceiveCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsReceiveCongestionErrors.setStatus('mandatory')
tokStatsFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsFrameCopiedErrors.setStatus('mandatory')
tokStatsTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsTokenErrors.setStatus('mandatory')
tokStatsDMABusErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsDMABusErrors.setStatus('mandatory')
tokStatsDMAParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsDMAParityErrors.setStatus('mandatory')
tokStatsReceiveOverflowErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tokStatsReceiveOverflowErrors.setStatus('mandatory')
fddiStatsTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1), )
if mibBuilder.loadTexts: fddiStatsTable.setStatus('mandatory')
fddiStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1), ).setIndexNames((0, "SK-UPPS-MIB", "fddiStatsIndex"))
if mibBuilder.loadTexts: fddiStatsEntry.setStatus('mandatory')
fddiStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiStatsIndex.setStatus('mandatory')
fddiSMTOpVersionId = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiSMTOpVersionId.setStatus('mandatory')
fddiSMTCFState = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiSMTCFState.setStatus('mandatory')
fddiSMTFrameSends = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiSMTFrameSends.setStatus('mandatory')
fddiSMTFrameReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiSMTFrameReceives.setStatus('mandatory')
fddiSMTRingUps = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiSMTRingUps.setStatus('mandatory')
fddiMACUpstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 7), FddiMACLongAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiMACUpstreamNbr.setStatus('mandatory')
fddiMACDownstreamNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 8), FddiMACLongAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiMACDownstreamNbr.setStatus('mandatory')
fddiMACFrameCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiMACFrameCts.setStatus('mandatory')
fddiMACErrorCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiMACErrorCts.setStatus('mandatory')
fddiMACLostCts = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiMACLostCts.setStatus('mandatory')
fddiPORT1LerEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiPORT1LerEstimate.setStatus('mandatory')
fddiPORT2LerEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiPORT2LerEstimate.setStatus('mandatory')
fddiATTACHMENTClass = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single-attachment", 1), ("dual-attachment", 2), ("concentrator", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiATTACHMENTClass.setStatus('mandatory')
fddiATTACHOptBypassPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fddiATTACHOptBypassPresent.setStatus('mandatory')
statsTable = MibTable((1, 3, 6, 1, 4, 1, 179, 2, 2, 6, 1), )
if mibBuilder.loadTexts: statsTable.setStatus('mandatory')
statsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 179, 2, 2, 6, 1, 1), ).setIndexNames((0, "SK-UPPS-MIB", "statsIfIndex"))
if mibBuilder.loadTexts: statsEntry.setStatus('mandatory')
statsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsIfIndex.setStatus('mandatory')
statsFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsFCSErrors.setStatus('mandatory')
statsAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsAlignmentErrors.setStatus('mandatory')
statsFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 179, 2, 2, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: statsFrameTooLongs.setStatus('mandatory')
mibBuilder.exportSymbols("SK-UPPS-MIB", stMaxTxMbufs=stMaxTxMbufs, ethStatsInRangeLengthErrors=ethStatsInRangeLengthErrors, sk_board_statistics=sk_board_statistics, stTable=stTable, tokStatsLocalRingNumber=tokStatsLocalRingNumber, ethStatsOutOfRangeLengthFields=ethStatsOutOfRangeLengthFields, stMaxRxMbufs=stMaxRxMbufs, clIfIndex=clIfIndex, stEntry=stEntry, stServiceInterrupt=stServiceInterrupt, fddiSMTFrameReceives=fddiSMTFrameReceives, fddiPORT2LerEstimate=fddiPORT2LerEstimate, ethStatsInternalMacRecvErrors=ethStatsInternalMacRecvErrors, clTable=clTable, stIfIndex=stIfIndex, stBaseAddress=stBaseAddress, ethStatsEntry=ethStatsEntry, tokStatsFrameCopiedErrors=tokStatsFrameCopiedErrors, ethStatsIndex=ethStatsIndex, tokStatsLostFrameErrors=tokStatsLostFrameErrors, fddiStatsIndex=fddiStatsIndex, ethStatsMultipleCollisionFrames=ethStatsMultipleCollisionFrames, stNumMbufs=stNumMbufs, tokStatsTokenErrors=tokStatsTokenErrors, tokStatsRingRecoveryCounts=tokStatsRingRecoveryCounts, fddiMACErrorCts=fddiMACErrorCts, statsFrameTooLongs=statsFrameTooLongs, ethStatsLateCollisions=ethStatsLateCollisions, fddiStatsEntry=fddiStatsEntry, ethStatsFCSErrors=ethStatsFCSErrors, statsEntry=statsEntry, fddiSMTRingUps=fddiSMTRingUps, FddiMACLongAddressType=FddiMACLongAddressType, statsAlignmentErrors=statsAlignmentErrors, fddiATTACHOptBypassPresent=fddiATTACHOptBypassPresent, sk=sk, stVersion=stVersion, fddiSMTOpVersionId=fddiSMTOpVersionId, statsIfIndex=statsIfIndex, tokStatsUpstreamNbr=tokStatsUpstreamNbr, fddiStatsTable=fddiStatsTable, ethStatsExcessiveDeferrals=ethStatsExcessiveDeferrals, stIOPort=stIOPort, tokStatsLobeWireFaults=tokStatsLobeWireFaults, sk_board=sk_board, tokStatsReceiveOverflowErrors=tokStatsReceiveOverflowErrors, fddiMACLostCts=fddiMACLostCts, fddiSMTCFState=fddiSMTCFState, fddiPORT1LerEstimate=fddiPORT1LerEstimate, fddiMACFrameCts=fddiMACFrameCts, stCurrentPacketFilter=stCurrentPacketFilter, clPID=clPID, tokStatsTable=tokStatsTable, tokStatsARI_FCIErrors=tokStatsARI_FCIErrors, clMode=clMode, ethStatsInternalMacTransErrors=ethStatsInternalMacTransErrors, stLogAddress=stLogAddress, clMulticast=clMulticast, clName=clName, stInterrupt=stInterrupt, clType=clType, stIORange=stIORange, tokStatsDMAParityErrors=tokStatsDMAParityErrors, tokStatsEntry=tokStatsEntry, ethStatsTable=ethStatsTable, tok=tok, skMibs=skMibs, fddiMACDownstreamNbr=fddiMACDownstreamNbr, stTopology=stTopology, tokStatsDMABusErrors=tokStatsDMABusErrors, tokStatsBurstErrors=tokStatsBurstErrors, ethStatsFrameTooLongs=ethStatsFrameTooLongs, ethStatsAlignmentErrors=ethStatsAlignmentErrors, ethStatsCarrierSenseErrors=ethStatsCarrierSenseErrors, fddi=fddi, stOEMSignature=stOEMSignature, tokStatsSignalLossErrors=tokStatsSignalLossErrors, statsFCSErrors=statsFCSErrors, tokStatsReceiveCongestionErrors=tokStatsReceiveCongestionErrors, statsTable=statsTable, sk_board_status=sk_board_status, ethStatsDeferredTransmissions=ethStatsDeferredTransmissions, fddiATTACHMENTClass=fddiATTACHMENTClass, stDMALine=stDMALine, fddiMACUpstreamNbr=fddiMACUpstreamNbr, eth=eth, clEntry=clEntry, ethStatsSingleCollisionFrames=ethStatsSingleCollisionFrames, fddiSMTFrameSends=fddiSMTFrameSends, ethStatsSQETestErrors=ethStatsSQETestErrors, ethStatsExcessiveCollisions=ethStatsExcessiveCollisions, stRAMSize=stRAMSize, sk_board_client=sk_board_client, tokStatsIndex=tokStatsIndex, tokStatsRingUpCounts=tokStatsRingUpCounts, tokStatsLineErrors=tokStatsLineErrors)
