#
# PySNMP MIB module MALLOC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MALLOC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:59:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
IANAmallocRangeSource, IANAscopeSource = mibBuilder.importSymbols("IANA-MALLOC-MIB", "IANAmallocRangeSource", "IANAscopeSource")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
LanguageTag, = mibBuilder.importSymbols("IPMROUTE-STD-MIB", "LanguageTag")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, TimeTicks, NotificationType, Integer32, Counter32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Bits, IpAddress, mib_2, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "NotificationType", "Integer32", "Counter32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Bits", "IpAddress", "mib-2", "MibIdentifier", "Unsigned32")
TextualConvention, RowStatus, DisplayString, StorageType, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "StorageType", "TruthValue")
mallocMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 101))
mallocMIB.setRevisions(('2003-06-09 00:00',))
if mibBuilder.loadTexts: mallocMIB.setLastUpdated('200306090000Z')
if mibBuilder.loadTexts: mallocMIB.setOrganization('IETF MALLOC Working Group')
mallocMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 1))
malloc = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 1, 1))
madcap = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 1, 2))
mallocCapabilities = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 1, 1), Bits().clone(namedValues=NamedValues(("startTime", 0), ("serverMobility", 1), ("retryAfter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocCapabilities.setStatus('current')
mallocScopeTable = MibTable((1, 3, 6, 1, 2, 1, 101, 1, 1, 2), )
if mibBuilder.loadTexts: mallocScopeTable.setStatus('current')
mallocScopeEntry = MibTableRow((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1), ).setIndexNames((0, "MALLOC-MIB", "mallocScopeAddressType"), (0, "MALLOC-MIB", "mallocScopeFirstAddress"))
if mibBuilder.loadTexts: mallocScopeEntry.setStatus('current')
mallocScopeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mallocScopeAddressType.setStatus('current')
mallocScopeFirstAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: mallocScopeFirstAddress.setStatus('current')
mallocScopeLastAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocScopeLastAddress.setStatus('current')
mallocScopeHopLimit = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocScopeHopLimit.setStatus('current')
mallocScopeStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocScopeStatus.setStatus('current')
mallocScopeSource = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 6), IANAscopeSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocScopeSource.setStatus('current')
mallocScopeDivisible = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocScopeDivisible.setStatus('current')
mallocScopeServerAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 8), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocScopeServerAddressType.setStatus('current')
mallocScopeServerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 9), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocScopeServerAddress.setStatus('current')
mallocScopeSSM = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocScopeSSM.setStatus('current')
mallocScopeStorage = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 2, 1, 11), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocScopeStorage.setStatus('current')
mallocScopeNameTable = MibTable((1, 3, 6, 1, 2, 1, 101, 1, 1, 3), )
if mibBuilder.loadTexts: mallocScopeNameTable.setStatus('current')
mallocScopeNameEntry = MibTableRow((1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1), ).setIndexNames((0, "MALLOC-MIB", "mallocScopeAddressType"), (0, "MALLOC-MIB", "mallocScopeFirstAddress"), (1, "MALLOC-MIB", "mallocScopeNameLangName"))
if mibBuilder.loadTexts: mallocScopeNameEntry.setStatus('current')
mallocScopeNameLangName = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 1), LanguageTag().subtype(subtypeSpec=ValueSizeConstraint(1, 94)))
if mibBuilder.loadTexts: mallocScopeNameLangName.setStatus('current')
mallocScopeNameScopeName = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocScopeNameScopeName.setStatus('current')
mallocScopeNameDefault = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocScopeNameDefault.setStatus('current')
mallocScopeNameStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocScopeNameStatus.setStatus('current')
mallocScopeNameStorage = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 3, 1, 5), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocScopeNameStorage.setStatus('current')
mallocAllocRangeTable = MibTable((1, 3, 6, 1, 2, 1, 101, 1, 1, 4), )
if mibBuilder.loadTexts: mallocAllocRangeTable.setStatus('current')
mallocAllocRangeEntry = MibTableRow((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1), ).setIndexNames((0, "MALLOC-MIB", "mallocScopeAddressType"), (0, "MALLOC-MIB", "mallocScopeFirstAddress"), (0, "MALLOC-MIB", "mallocAllocRangeFirstAddress"))
if mibBuilder.loadTexts: mallocAllocRangeEntry.setStatus('current')
mallocAllocRangeFirstAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 1), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: mallocAllocRangeFirstAddress.setStatus('current')
mallocAllocRangeLastAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocAllocRangeLastAddress.setStatus('current')
mallocAllocRangeStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocAllocRangeStatus.setStatus('current')
mallocAllocRangeSource = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 4), IANAmallocRangeSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocAllocRangeSource.setStatus('current')
mallocAllocRangeLifetime = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocAllocRangeLifetime.setStatus('current')
mallocAllocRangeMaxLeaseAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocAllocRangeMaxLeaseAddrs.setStatus('current')
mallocAllocRangeMaxLeaseTime = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 7), Unsigned32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocAllocRangeMaxLeaseTime.setStatus('current')
mallocAllocRangeNumAllocatedAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocAllocRangeNumAllocatedAddrs.setStatus('current')
mallocAllocRangeNumOfferedAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocAllocRangeNumOfferedAddrs.setStatus('current')
mallocAllocRangeNumWaitingAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocAllocRangeNumWaitingAddrs.setStatus('current')
mallocAllocRangeNumTryingAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocAllocRangeNumTryingAddrs.setStatus('current')
mallocAllocRangeAdvertisable = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocAllocRangeAdvertisable.setStatus('current')
mallocAllocRangeTotalAllocatedAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocAllocRangeTotalAllocatedAddrs.setStatus('current')
mallocAllocRangeTotalRequestedAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocAllocRangeTotalRequestedAddrs.setStatus('current')
mallocAllocRangeStorage = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 4, 1, 15), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mallocAllocRangeStorage.setStatus('current')
mallocRequestTable = MibTable((1, 3, 6, 1, 2, 1, 101, 1, 1, 5), )
if mibBuilder.loadTexts: mallocRequestTable.setStatus('current')
mallocRequestEntry = MibTableRow((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1), ).setIndexNames((0, "MALLOC-MIB", "mallocRequestId"))
if mibBuilder.loadTexts: mallocRequestEntry.setStatus('current')
mallocRequestId = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: mallocRequestId.setStatus('current')
mallocRequestScopeAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocRequestScopeAddressType.setStatus('current')
mallocRequestScopeFirstAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocRequestScopeFirstAddress.setStatus('current')
mallocRequestStartTime = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocRequestStartTime.setStatus('current')
mallocRequestEndTime = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocRequestEndTime.setStatus('current')
mallocRequestNumAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocRequestNumAddrs.setStatus('current')
mallocRequestState = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allocated", 1), ("offered", 2), ("waiting", 3), ("trying", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocRequestState.setStatus('current')
mallocRequestClientAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocRequestClientAddressType.setStatus('current')
mallocRequestClientAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocRequestClientAddress.setStatus('current')
mallocRequestServerAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocRequestServerAddressType.setStatus('current')
mallocRequestServerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 11), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocRequestServerAddress.setStatus('current')
mallocRequestLeaseIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 5, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocRequestLeaseIdentifier.setStatus('current')
mallocAddressTable = MibTable((1, 3, 6, 1, 2, 1, 101, 1, 1, 6), )
if mibBuilder.loadTexts: mallocAddressTable.setStatus('current')
mallocAddressEntry = MibTableRow((1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1), ).setIndexNames((0, "MALLOC-MIB", "mallocAddressAddressType"), (0, "MALLOC-MIB", "mallocAddressFirstAddress"))
if mibBuilder.loadTexts: mallocAddressEntry.setStatus('current')
mallocAddressAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: mallocAddressAddressType.setStatus('current')
mallocAddressFirstAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: mallocAddressFirstAddress.setStatus('current')
mallocAddressNumAddrs = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocAddressNumAddrs.setStatus('current')
mallocAddressRequestId = MibTableColumn((1, 3, 6, 1, 2, 1, 101, 1, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mallocAddressRequestId.setStatus('current')
madcapConfig = ObjectIdentity((1, 3, 6, 1, 2, 1, 101, 1, 2, 1))
if mibBuilder.loadTexts: madcapConfig.setStatus('current')
madcapConfigExtraAllocationTime = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 1), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: madcapConfigExtraAllocationTime.setStatus('current')
madcapConfigNoResponseDelay = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 2), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: madcapConfigNoResponseDelay.setStatus('current')
madcapConfigOfferHold = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: madcapConfigOfferHold.setStatus('current')
madcapConfigResponseCacheInterval = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: madcapConfigResponseCacheInterval.setStatus('current')
madcapConfigClockSkewAllowance = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: madcapConfigClockSkewAllowance.setStatus('current')
madcapCounters = ObjectIdentity((1, 3, 6, 1, 2, 1, 101, 1, 2, 2))
if mibBuilder.loadTexts: madcapCounters.setStatus('current')
madcapTotalErrors = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madcapTotalErrors.setStatus('current')
madcapRequestsDenied = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madcapRequestsDenied.setStatus('current')
madcapInvalidRequests = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madcapInvalidRequests.setStatus('current')
madcapExcessiveClockSkews = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madcapExcessiveClockSkews.setStatus('current')
madcapBadLeaseIds = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madcapBadLeaseIds.setStatus('current')
madcapDiscovers = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madcapDiscovers.setStatus('current')
madcapInforms = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madcapInforms.setStatus('current')
madcapRequests = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madcapRequests.setStatus('current')
madcapRenews = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madcapRenews.setStatus('current')
madcapReleases = MibScalar((1, 3, 6, 1, 2, 1, 101, 1, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: madcapReleases.setStatus('current')
mallocConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 2))
mallocCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 2, 1))
mallocGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 101, 2, 2))
mallocServerReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 101, 2, 1, 1)).setObjects(("MALLOC-MIB", "mallocBasicGroup"), ("MALLOC-MIB", "mallocServerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mallocServerReadOnlyCompliance = mallocServerReadOnlyCompliance.setStatus('current')
mallocClientReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 101, 2, 1, 2)).setObjects(("MALLOC-MIB", "mallocBasicGroup"), ("MALLOC-MIB", "mallocClientGroup"), ("MALLOC-MIB", "mallocClientScopeGroup"), ("MALLOC-MIB", "madcapClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mallocClientReadOnlyCompliance = mallocClientReadOnlyCompliance.setStatus('current')
mallocPrefixCoordinatorReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 101, 2, 1, 3)).setObjects(("MALLOC-MIB", "mallocBasicGroup"), ("MALLOC-MIB", "mallocPrefixCoordinatorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mallocPrefixCoordinatorReadOnlyCompliance = mallocPrefixCoordinatorReadOnlyCompliance.setStatus('current')
mallocServerFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 101, 2, 1, 4)).setObjects(("MALLOC-MIB", "mallocBasicGroup"), ("MALLOC-MIB", "mallocServerGroup"), ("MALLOC-MIB", "madcapServerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mallocServerFullCompliance = mallocServerFullCompliance.setStatus('current')
mallocClientFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 101, 2, 1, 5)).setObjects(("MALLOC-MIB", "mallocBasicGroup"), ("MALLOC-MIB", "mallocClientGroup"), ("MALLOC-MIB", "mallocClientScopeGroup"), ("MALLOC-MIB", "madcapClientGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mallocClientFullCompliance = mallocClientFullCompliance.setStatus('current')
mallocPrefixCoordinatorFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 101, 2, 1, 6)).setObjects(("MALLOC-MIB", "mallocBasicGroup"), ("MALLOC-MIB", "mallocPrefixCoordinatorGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mallocPrefixCoordinatorFullCompliance = mallocPrefixCoordinatorFullCompliance.setStatus('current')
mallocBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 1)).setObjects(("MALLOC-MIB", "mallocCapabilities"), ("MALLOC-MIB", "mallocRequestScopeAddressType"), ("MALLOC-MIB", "mallocRequestScopeFirstAddress"), ("MALLOC-MIB", "mallocRequestStartTime"), ("MALLOC-MIB", "mallocRequestEndTime"), ("MALLOC-MIB", "mallocRequestNumAddrs"), ("MALLOC-MIB", "mallocRequestState"), ("MALLOC-MIB", "mallocAddressNumAddrs"), ("MALLOC-MIB", "mallocAddressRequestId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mallocBasicGroup = mallocBasicGroup.setStatus('current')
mallocServerGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 2)).setObjects(("MALLOC-MIB", "mallocScopeLastAddress"), ("MALLOC-MIB", "mallocScopeHopLimit"), ("MALLOC-MIB", "mallocScopeSSM"), ("MALLOC-MIB", "mallocScopeStatus"), ("MALLOC-MIB", "mallocScopeStorage"), ("MALLOC-MIB", "mallocAllocRangeLastAddress"), ("MALLOC-MIB", "mallocAllocRangeLifetime"), ("MALLOC-MIB", "mallocAllocRangeNumAllocatedAddrs"), ("MALLOC-MIB", "mallocAllocRangeNumOfferedAddrs"), ("MALLOC-MIB", "mallocAllocRangeNumWaitingAddrs"), ("MALLOC-MIB", "mallocAllocRangeNumTryingAddrs"), ("MALLOC-MIB", "mallocAllocRangeMaxLeaseAddrs"), ("MALLOC-MIB", "mallocAllocRangeMaxLeaseTime"), ("MALLOC-MIB", "mallocAllocRangeSource"), ("MALLOC-MIB", "mallocAllocRangeStatus"), ("MALLOC-MIB", "mallocAllocRangeStorage"), ("MALLOC-MIB", "mallocScopeDivisible"), ("MALLOC-MIB", "mallocScopeSource"), ("MALLOC-MIB", "mallocScopeNameScopeName"), ("MALLOC-MIB", "mallocScopeNameDefault"), ("MALLOC-MIB", "mallocScopeNameStatus"), ("MALLOC-MIB", "mallocScopeNameStorage"), ("MALLOC-MIB", "mallocRequestClientAddressType"), ("MALLOC-MIB", "mallocRequestClientAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mallocServerGroup = mallocServerGroup.setStatus('current')
mallocClientGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 3)).setObjects(("MALLOC-MIB", "mallocRequestServerAddressType"), ("MALLOC-MIB", "mallocRequestServerAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mallocClientGroup = mallocClientGroup.setStatus('current')
madcapServerGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 4)).setObjects(("MALLOC-MIB", "madcapConfigClockSkewAllowance"), ("MALLOC-MIB", "madcapConfigExtraAllocationTime"), ("MALLOC-MIB", "madcapConfigOfferHold"), ("MALLOC-MIB", "madcapConfigResponseCacheInterval"), ("MALLOC-MIB", "madcapTotalErrors"), ("MALLOC-MIB", "madcapRequestsDenied"), ("MALLOC-MIB", "madcapInvalidRequests"), ("MALLOC-MIB", "madcapBadLeaseIds"), ("MALLOC-MIB", "madcapExcessiveClockSkews"), ("MALLOC-MIB", "madcapDiscovers"), ("MALLOC-MIB", "madcapInforms"), ("MALLOC-MIB", "madcapRequests"), ("MALLOC-MIB", "madcapRenews"), ("MALLOC-MIB", "madcapReleases"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    madcapServerGroup = madcapServerGroup.setStatus('current')
madcapClientGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 5)).setObjects(("MALLOC-MIB", "mallocRequestLeaseIdentifier"), ("MALLOC-MIB", "madcapConfigNoResponseDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    madcapClientGroup = madcapClientGroup.setStatus('current')
mallocClientScopeGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 6)).setObjects(("MALLOC-MIB", "mallocScopeLastAddress"), ("MALLOC-MIB", "mallocScopeHopLimit"), ("MALLOC-MIB", "mallocScopeStatus"), ("MALLOC-MIB", "mallocScopeStorage"), ("MALLOC-MIB", "mallocScopeSource"), ("MALLOC-MIB", "mallocScopeServerAddressType"), ("MALLOC-MIB", "mallocScopeServerAddress"), ("MALLOC-MIB", "mallocScopeSSM"), ("MALLOC-MIB", "mallocScopeNameScopeName"), ("MALLOC-MIB", "mallocScopeNameDefault"), ("MALLOC-MIB", "mallocScopeNameStatus"), ("MALLOC-MIB", "mallocScopeNameStorage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mallocClientScopeGroup = mallocClientScopeGroup.setStatus('current')
mallocPrefixCoordinatorGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 101, 2, 2, 7)).setObjects(("MALLOC-MIB", "mallocAllocRangeLastAddress"), ("MALLOC-MIB", "mallocAllocRangeLifetime"), ("MALLOC-MIB", "mallocAllocRangeStatus"), ("MALLOC-MIB", "mallocAllocRangeStorage"), ("MALLOC-MIB", "mallocAllocRangeSource"), ("MALLOC-MIB", "mallocAllocRangeTotalAllocatedAddrs"), ("MALLOC-MIB", "mallocAllocRangeTotalRequestedAddrs"), ("MALLOC-MIB", "mallocAllocRangeAdvertisable"), ("MALLOC-MIB", "mallocScopeLastAddress"), ("MALLOC-MIB", "mallocScopeDivisible"), ("MALLOC-MIB", "mallocScopeSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mallocPrefixCoordinatorGroup = mallocPrefixCoordinatorGroup.setStatus('current')
mibBuilder.exportSymbols("MALLOC-MIB", mallocServerGroup=mallocServerGroup, madcapCounters=madcapCounters, mallocRequestServerAddressType=mallocRequestServerAddressType, mallocRequestScopeFirstAddress=mallocRequestScopeFirstAddress, madcapInvalidRequests=madcapInvalidRequests, mallocScopeTable=mallocScopeTable, mallocAddressRequestId=mallocAddressRequestId, madcapInforms=madcapInforms, mallocAllocRangeLifetime=mallocAllocRangeLifetime, mallocScopeNameEntry=mallocScopeNameEntry, mallocAllocRangeSource=mallocAllocRangeSource, mallocScopeFirstAddress=mallocScopeFirstAddress, mallocRequestTable=mallocRequestTable, mallocScopeNameLangName=mallocScopeNameLangName, mallocRequestState=mallocRequestState, mallocMIB=mallocMIB, madcapConfigExtraAllocationTime=madcapConfigExtraAllocationTime, mallocRequestNumAddrs=mallocRequestNumAddrs, madcapDiscovers=madcapDiscovers, mallocRequestEntry=mallocRequestEntry, mallocScopeStatus=mallocScopeStatus, mallocScopeAddressType=mallocScopeAddressType, mallocAllocRangeEntry=mallocAllocRangeEntry, mallocRequestLeaseIdentifier=mallocRequestLeaseIdentifier, mallocScopeSource=mallocScopeSource, madcapRenews=madcapRenews, mallocAllocRangeAdvertisable=mallocAllocRangeAdvertisable, mallocRequestId=mallocRequestId, mallocAllocRangeNumAllocatedAddrs=mallocAllocRangeNumAllocatedAddrs, madcapClientGroup=madcapClientGroup, madcap=madcap, mallocScopeHopLimit=mallocScopeHopLimit, malloc=malloc, mallocAllocRangeTotalAllocatedAddrs=mallocAllocRangeTotalAllocatedAddrs, mallocRequestClientAddress=mallocRequestClientAddress, mallocBasicGroup=mallocBasicGroup, mallocPrefixCoordinatorFullCompliance=mallocPrefixCoordinatorFullCompliance, mallocCompliances=mallocCompliances, mallocRequestServerAddress=mallocRequestServerAddress, mallocAddressFirstAddress=mallocAddressFirstAddress, mallocScopeNameTable=mallocScopeNameTable, mallocRequestEndTime=mallocRequestEndTime, mallocScopeSSM=mallocScopeSSM, mallocAllocRangeTotalRequestedAddrs=mallocAllocRangeTotalRequestedAddrs, mallocPrefixCoordinatorReadOnlyCompliance=mallocPrefixCoordinatorReadOnlyCompliance, madcapRequests=madcapRequests, mallocMIBObjects=mallocMIBObjects, madcapConfig=madcapConfig, madcapReleases=madcapReleases, madcapConfigOfferHold=madcapConfigOfferHold, mallocRequestScopeAddressType=mallocRequestScopeAddressType, madcapConfigNoResponseDelay=madcapConfigNoResponseDelay, mallocRequestClientAddressType=mallocRequestClientAddressType, madcapConfigResponseCacheInterval=madcapConfigResponseCacheInterval, madcapRequestsDenied=madcapRequestsDenied, mallocAllocRangeTable=mallocAllocRangeTable, mallocAddressEntry=mallocAddressEntry, mallocScopeServerAddressType=mallocScopeServerAddressType, mallocScopeNameDefault=mallocScopeNameDefault, mallocAllocRangeMaxLeaseAddrs=mallocAllocRangeMaxLeaseAddrs, mallocServerFullCompliance=mallocServerFullCompliance, mallocAllocRangeStatus=mallocAllocRangeStatus, mallocAllocRangeNumOfferedAddrs=mallocAllocRangeNumOfferedAddrs, mallocAllocRangeMaxLeaseTime=mallocAllocRangeMaxLeaseTime, mallocAllocRangeLastAddress=mallocAllocRangeLastAddress, mallocAllocRangeFirstAddress=mallocAllocRangeFirstAddress, mallocClientScopeGroup=mallocClientScopeGroup, mallocScopeNameStatus=mallocScopeNameStatus, mallocPrefixCoordinatorGroup=mallocPrefixCoordinatorGroup, mallocScopeNameStorage=mallocScopeNameStorage, mallocScopeStorage=mallocScopeStorage, mallocClientReadOnlyCompliance=mallocClientReadOnlyCompliance, mallocCapabilities=mallocCapabilities, mallocScopeLastAddress=mallocScopeLastAddress, mallocConformance=mallocConformance, mallocClientFullCompliance=mallocClientFullCompliance, mallocScopeServerAddress=mallocScopeServerAddress, madcapBadLeaseIds=madcapBadLeaseIds, mallocServerReadOnlyCompliance=mallocServerReadOnlyCompliance, mallocAllocRangeNumTryingAddrs=mallocAllocRangeNumTryingAddrs, PYSNMP_MODULE_ID=mallocMIB, mallocAllocRangeStorage=mallocAllocRangeStorage, mallocScopeNameScopeName=mallocScopeNameScopeName, mallocRequestStartTime=mallocRequestStartTime, mallocAddressTable=mallocAddressTable, madcapExcessiveClockSkews=madcapExcessiveClockSkews, mallocScopeEntry=mallocScopeEntry, mallocAddressNumAddrs=mallocAddressNumAddrs, madcapServerGroup=madcapServerGroup, mallocGroups=mallocGroups, madcapTotalErrors=madcapTotalErrors, mallocClientGroup=mallocClientGroup, mallocAddressAddressType=mallocAddressAddressType, mallocAllocRangeNumWaitingAddrs=mallocAllocRangeNumWaitingAddrs, mallocScopeDivisible=mallocScopeDivisible, madcapConfigClockSkewAllowance=madcapConfigClockSkewAllowance)
