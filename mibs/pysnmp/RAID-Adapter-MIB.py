#
# PySNMP MIB module RAID-Adapter-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAID-Adapter-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:43:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, NotificationType, MibIdentifier, IpAddress, Counter64, Unsigned32, ModuleIdentity, Bits, iso, Integer32, NotificationType, Gauge32, ObjectIdentity, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "NotificationType", "MibIdentifier", "IpAddress", "Counter64", "Unsigned32", "ModuleIdentity", "Bits", "iso", "Integer32", "NotificationType", "Gauge32", "ObjectIdentity", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lsi = MibIdentifier((1, 3, 6, 1, 4, 1, 3582))
megaRaid = MibIdentifier((1, 3, 6, 1, 4, 1, 3582, 1))
megaRaidMib = MibIdentifier((1, 3, 6, 1, 4, 1, 3582, 1, 1))
adapterTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1), )
if mibBuilder.loadTexts: adapterTable.setStatus('optional')
adapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "adpAdapterNumber"))
if mibBuilder.loadTexts: adapterEntry.setStatus('optional')
adpAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpAdapterNumber.setStatus('optional')
numLogicalDrives = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numLogicalDrives.setStatus('optional')
firmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: firmwareVersion.setStatus('optional')
biosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: biosVersion.setStatus('optional')
dramSizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dramSizeInMB.setStatus('optional')
rebuildRateInPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rebuildRateInPercent.setStatus('optional')
flushInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6, 8, 10))).clone(namedValues=NamedValues(("twoSec", 2), ("fourSec", 4), ("sixSec", 6), ("eightSec", 8), ("tenSec", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flushInterval.setStatus('optional')
maxConcurrentCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxConcurrentCmds.setStatus('optional')
spinupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spinupDelay.setStatus('optional')
spinupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spinupCount.setStatus('optional')
adpIOReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpIOReadsPerSec.setStatus('optional')
adpIOWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpIOWritesPerSec.setStatus('optional')
adpReadKBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpReadKBsPerSec.setStatus('optional')
adpWriteKBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpWriteKBsPerSec.setStatus('optional')
adpReadFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpReadFailuresPerSec.setStatus('optional')
adpWriteFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpWriteFailuresPerSec.setStatus('optional')
scanChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scanOver", 1), ("startScan", 2), ("scanInProg", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scanChannels.setStatus('optional')
adpBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpBasePort.setStatus('optional')
numSCSIChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numSCSIChannels.setStatus('optional')
numFCLoops = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numFCLoops.setStatus('optional')
subSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subSystemID.setStatus('optional')
subSystemVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subSystemVendorID.setStatus('optional')
productName = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('optional')
adpSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 20))).clone(namedValues=NamedValues(("fiveMB", 1), ("tenMB", 2), ("twentyMB", 3), ("fortyMB", 4), ("eightyMB", 5), ("oneHundredSixtyMB", 6), ("threeHundredTwentyMB", 7), ("unAvailable", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adpSpeed.setStatus('optional')
logicaldriveTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2), )
if mibBuilder.loadTexts: logicaldriveTable.setStatus('optional')
logicaldriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "ldAdapterNumber"), (0, "RAID-Adapter-MIB", "logicalDriveNumber"))
if mibBuilder.loadTexts: logicaldriveEntry.setStatus('optional')
ldAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldAdapterNumber.setStatus('optional')
logicalDriveNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logicalDriveNumber.setStatus('optional')
status = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("offLine", 0), ("degraded", 1), ("optimal", 2), ("initialize", 3), ("checkConsistency", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: status.setStatus('optional')
sizeInMB = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sizeInMB.setStatus('optional')
raidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 5))).clone(namedValues=NamedValues(("rAID0", 0), ("rAID1", 1), ("rAID3", 3), ("rAID5", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: raidLevel.setStatus('optional')
stripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128))).clone(namedValues=NamedValues(("oneKB", 1), ("twoKB", 2), ("fourKB", 4), ("eightKB", 8), ("sixteenKB", 16), ("thirtyTwoKB", 32), ("sixtyFourKB", 64), ("oneTwentyEightKB", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stripeSize.setStatus('optional')
readPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("normal", 0), ("readAhead", 1), ("adaptive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readPolicy.setStatus('optional')
writePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("writeThru", 0), ("writeBack", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: writePolicy.setStatus('optional')
cachePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cachedIO", 0), ("directIO", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cachePolicy.setStatus('optional')
enquiryString = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: enquiryString.setStatus('optional')
numberOfSpans = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfSpans.setStatus('optional')
numberOfStripes = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfStripes.setStatus('optional')
checkConsistencyOrInitializeProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: checkConsistencyOrInitializeProgress.setStatus('optional')
ldIOReadsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldIOReadsPerSec.setStatus('optional')
ldIOWritesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldIOWritesPerSec.setStatus('optional')
ldReadKBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldReadKBsPerSec.setStatus('optional')
ldWriteKBsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldWriteKBsPerSec.setStatus('optional')
ldReadFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldReadFailuresPerSec.setStatus('optional')
ldWriteFailuresPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldWriteFailuresPerSec.setStatus('optional')
physicaldriveTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3), )
if mibBuilder.loadTexts: physicaldriveTable.setStatus('optional')
physicaldriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "physAdapterNumber"), (0, "RAID-Adapter-MIB", "physChannel"), (0, "RAID-Adapter-MIB", "targetID"), (0, "RAID-Adapter-MIB", "lunNumber"))
if mibBuilder.loadTexts: physicaldriveEntry.setStatus('optional')
physAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physAdapterNumber.setStatus('optional')
physChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physChannel.setStatus('optional')
targetID = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetID.setStatus('optional')
state = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 20))).clone(namedValues=NamedValues(("ready", 1), ("online", 3), ("failed", 4), ("rebuild", 5), ("hotSpare", 6), ("nonDisk", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: state.setStatus('optional')
arrayPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayPosition.setStatus('optional')
sizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sizeMB.setStatus('optional')
deviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("disk", 0), ("tape", 1), ("printer", 2), ("processor", 3), ("wORM", 4), ("cDROM", 5), ("scanner", 6), ("optical", 7), ("changer", 8), ("communication", 9), ("asynchronousLow", 10), ("asynchronousHigh", 11), ("reservedLow", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceType.setStatus('optional')
inquiryString = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: inquiryString.setStatus('optional')
scsiLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sCSI1", 1), ("sCSI2", 2), ("sCSI3", 3), ("sCSI4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scsiLevel.setStatus('optional')
maximumQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maximumQueueDepth.setStatus('optional')
rebuildProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rebuildProgress.setStatus('optional')
mediumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mediumErrors.setStatus('optional')
physSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physSlotStatus.setStatus('optional')
physSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physSlotNumber.setStatus('optional')
otherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: otherErrors.setStatus('optional')
physTermination = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 20))).clone(namedValues=NamedValues(("wide", 0), ("narrow", 1), ("notSupported", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physTermination.setStatus('optional')
physSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 20))).clone(namedValues=NamedValues(("maximum", 0), ("asynchronous", 1), ("fiveMB", 2), ("tenMB", 3), ("twentyMB", 4), ("fortyMB", 5), ("eightyMB", 6), ("oneHundredSixtyMB", 7), ("threeHundredTwentyMB", 8), ("notSupported", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physSpeed.setStatus('optional')
lunNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lunNumber.setStatus('optional')
channelTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4), )
if mibBuilder.loadTexts: channelTable.setStatus('optional')
channelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "chanAdapterNumber"), (0, "RAID-Adapter-MIB", "channel"))
if mibBuilder.loadTexts: channelEntry.setStatus('optional')
chanAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanAdapterNumber.setStatus('optional')
channel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: channel.setStatus('optional')
terminations = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("higher8Bits", 1), ("wideTerminations", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: terminations.setStatus('optional')
channelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quiet", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelStatus.setStatus('optional')
channelType = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sCSI", 0), ("rAID", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: channelType.setStatus('mandatory')
fcDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5), )
if mibBuilder.loadTexts: fcDeviceTable.setStatus('optional')
fcDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "fcPhysAdapterNumber"), (0, "RAID-Adapter-MIB", "fcPhysChannel"), (0, "RAID-Adapter-MIB", "fcTargetId"))
if mibBuilder.loadTexts: fcDeviceEntry.setStatus('optional')
fcPhysAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPhysAdapterNumber.setStatus('optional')
fcPhysChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPhysChannel.setStatus('optional')
fcTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcTargetId.setStatus('optional')
fcLoopID_0 = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("inLoop0", 1), ("inLoop1", 2), ("notInTheLoop", 255)))).setLabel("fcLoopID-0").setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLoopID_0.setStatus('optional')
fcLoopID_1 = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("inLoop0", 1), ("inLoop1", 2), ("notInTheLoop", 255)))).setLabel("fcLoopID-1").setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLoopID_1.setStatus('optional')
fcWwn = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcWwn.setStatus('optional')
fcState = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 20))).clone(namedValues=NamedValues(("ready", 1), ("online", 3), ("failed", 4), ("rebuild", 5), ("hotspare", 6), ("nonDisk", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcState.setStatus('optional')
fcArrayPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcArrayPosition.setStatus('optional')
fcSizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcSizeMB.setStatus('optional')
fcInquiryString = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(29, 29)).setFixedLength(29)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcInquiryString.setStatus('optional')
fcScsiLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sCSI1", 1), ("sCSI2", 2), ("sCSI3", 3), ("sCSI4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcScsiLevel.setStatus('optional')
fcRebuildProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcRebuildProgress.setStatus('optional')
fcMediumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcMediumErrors.setStatus('optional')
fcOtherErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcOtherErrors.setStatus('optional')
fcChannelTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6), )
if mibBuilder.loadTexts: fcChannelTable.setStatus('optional')
fcChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "fcChanAdapterNumber"), (0, "RAID-Adapter-MIB", "fcChannel"))
if mibBuilder.loadTexts: fcChannelEntry.setStatus('optional')
fcChanAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcChanAdapterNumber.setStatus('optional')
fcChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcChannel.setStatus('optional')
fcLoopNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLoopNumber.setStatus('optional')
fcLoopStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("quiet", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcLoopStatus.setStatus('optional')
fcNumberofDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcNumberofDevices.setStatus('optional')
fcProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcProcessorType.setStatus('optional')
ioReadsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioReadsPerSec.setStatus('optional')
ioWritesPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioWritesPerSec.setStatus('optional')
readKBsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readKBsPerSec.setStatus('optional')
writeKBsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeKBsPerSec.setStatus('optional')
readFailuresPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: readFailuresPerSec.setStatus('optional')
writeFailuresPerSec = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: writeFailuresPerSec.setStatus('optional')
enclConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15), )
if mibBuilder.loadTexts: enclConfigurationTable.setStatus('optional')
enclConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "enclNumber"))
if mibBuilder.loadTexts: enclConfigurationEntry.setStatus('optional')
enclAdapterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclAdapterNumber.setStatus('optional')
enclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumber.setStatus('optional')
enclChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclChannel.setStatus('optional')
enclNumDeviceSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumDeviceSlots.setStatus('optional')
enclNumFans = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumFans.setStatus('optional')
enclNumTempSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumTempSensors.setStatus('optional')
enclNumPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumPowerSupplies.setStatus('optional')
enclDoorLockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 0), ("unlocked", 1), ("locked", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclDoorLockStatus.setStatus('optional')
enclAudibleAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAudibleAlarm", 0), ("audibleAlarm", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclAudibleAlarm.setStatus('optional')
enclAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclAlarmStatus.setStatus('optional')
enclTemperatureScale = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("fahrenheit", 0), ("celsius", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTemperatureScale.setStatus('optional')
enclTotalPowerOnMins = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTotalPowerOnMins.setStatus('optional')
enclTotalPowerOnCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTotalPowerOnCycles.setStatus('optional')
enclFanTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 16), )
if mibBuilder.loadTexts: enclFanTable.setStatus('optional')
enclFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 16, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "enclNumberFan"), (0, "RAID-Adapter-MIB", "enclFanIndex"))
if mibBuilder.loadTexts: enclFanEntry.setStatus('optional')
enclNumberFan = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumberFan.setStatus('optional')
enclFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFanIndex.setStatus('optional')
enclFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 128))).clone(namedValues=NamedValues(("operational", 0), ("malfunction", 1), ("notInstalled", 2), ("unknown", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclFanStatus.setStatus('optional')
enclPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 17), )
if mibBuilder.loadTexts: enclPowerSupplyTable.setStatus('optional')
enclPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 17, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "enclNumberPower"), (0, "RAID-Adapter-MIB", "enclPowerSupplyIndex"))
if mibBuilder.loadTexts: enclPowerSupplyEntry.setStatus('optional')
enclNumberPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumberPower.setStatus('optional')
enclPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSupplyIndex.setStatus('optional')
enclPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 128))).clone(namedValues=NamedValues(("operationalON", 0), ("operationalOFF", 1), ("malfunctionON", 2), ("malfunctionOFF", 3), ("notPresent", 4), ("present", 5), ("unknown", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclPowerSupplyStatus.setStatus('optional')
enclTempSensorsTable = MibTable((1, 3, 6, 1, 4, 1, 3582, 1, 1, 18), )
if mibBuilder.loadTexts: enclTempSensorsTable.setStatus('optional')
enclTempSensorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3582, 1, 1, 18, 1), ).setIndexNames((0, "RAID-Adapter-MIB", "enclNumberTemp"), (0, "RAID-Adapter-MIB", "enclTempSensorIndex"))
if mibBuilder.loadTexts: enclTempSensorsEntry.setStatus('optional')
enclNumberTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclNumberTemp.setStatus('optional')
enclTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTempSensorIndex.setStatus('optional')
enclTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3582, 1, 1, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 245))).setMaxAccess("readonly")
if mibBuilder.loadTexts: enclTemperature.setStatus('optional')
raidTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200))
rtAdapterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1001), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtAdapterNumber.setStatus('optional')
rtLogicalDriveNumber = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1002), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtLogicalDriveNumber.setStatus('optional')
rtChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1003), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtChannelNumber.setStatus('optional')
rtTargetID = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1004), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtTargetID.setStatus('optional')
rtOldDriveState = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1005), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtOldDriveState.setStatus('optional')
rtNewDriveState = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1006), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtNewDriveState.setStatus('optional')
rtSenseKey = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1007), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtSenseKey.setStatus('optional')
rtASC = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1008), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtASC.setStatus('optional')
rtASCQ = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1009), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtASCQ.setStatus('optional')
rtDriveVendor = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1010), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtDriveVendor.setStatus('optional')
rtEnclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1011), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEnclNumber.setStatus('optional')
rtEnclTempSensorIndex = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1012), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEnclTempSensorIndex.setStatus('optional')
rtEnclTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1013), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEnclTemperature.setStatus('optional')
rtEnclFanIndex = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1014), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEnclFanIndex.setStatus('optional')
rtEnclPowerSupplyIndex = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1015), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtEnclPowerSupplyIndex.setStatus('optional')
rtWWN = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1016), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtWWN.setStatus('optional')
rtOldLoopID = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1017), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtOldLoopID.setStatus('optional')
rtNewLoopID = MibScalar((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200, 1018), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtNewLoopID.setStatus('optional')
rtConfigUpdated = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9001)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"))
rtPhysicalDriveStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9002)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
rtLogicalDriveStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9003)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
rtInitializeStarted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9004)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
rtInitializeCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9005)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
rtInitializeAborted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9006)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
rtInitializeFailed = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9007)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
rtCheckConsistencyStarted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9008)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
rtCheckConsistencyCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9009)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
rtCheckConsistencyAborted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9010)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
rtConsistencyCorrected = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9011)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
rtCheckConsistencyFailed = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9012)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
rtReconstructionStarted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9013)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
rtReconstructionCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9014)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
rtReconstructionFailed = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9015)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"))
rtPredictiveFailuresExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9016)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtDriveVendor"), ("RAID-Adapter-MIB", "rtSenseKey"), ("RAID-Adapter-MIB", "rtASC"), ("RAID-Adapter-MIB", "rtASCQ"))
rtPredictiveFailuresFalse = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9017)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtDriveVendor"), ("RAID-Adapter-MIB", "rtSenseKey"), ("RAID-Adapter-MIB", "rtASC"), ("RAID-Adapter-MIB", "rtASCQ"))
rtCheckConditionStatus = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9018)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtSenseKey"), ("RAID-Adapter-MIB", "rtASC"), ("RAID-Adapter-MIB", "rtASCQ"))
rtNewDriveInserted = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9019)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"))
rtBatteryMissing = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9020)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"))
rtBatteryVolatageLow = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9021)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"))
rtBatteryTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9022)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"))
rtPhysicalDriveStateReady = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9023)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
rtPhysicalDriveStateOnline = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9024)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
rtPhysicalDriveStateFailed = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9025)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
rtPhysicalDriveStateRebuild = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9026)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
rtPhysicalDriveStateHotspare = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9027)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtTargetID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
rtLogicalDriveStateOffline = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9028)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
rtLogicalDriveStateDegraded = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9029)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
rtLogicalDriveStateOptimal = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9030)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
rtLogicalDriveStateInitialize = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9031)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
rtLogicalDriveStateChkConsist = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9032)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtLogicalDriveNumber"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
rtEnclTemperatureOutofRange = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9033)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtEnclNumber"), ("RAID-Adapter-MIB", "rtEnclTempSensorIndex"), ("RAID-Adapter-MIB", "rtEnclTemperature"))
rtEnclTemperatureNormal = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9034)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtEnclNumber"), ("RAID-Adapter-MIB", "rtEnclTempSensorIndex"), ("RAID-Adapter-MIB", "rtEnclTemperature"))
rtEnclFanMalfunction = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9035)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtEnclNumber"), ("RAID-Adapter-MIB", "rtEnclFanIndex"))
rtEnclFanOk = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9036)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtEnclNumber"), ("RAID-Adapter-MIB", "rtEnclFanIndex"))
rtEnclPowerSupplyMalfunction = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9037)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtEnclNumber"), ("RAID-Adapter-MIB", "rtEnclPowerSupplyIndex"))
rtEnclPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9038)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtChannelNumber"), ("RAID-Adapter-MIB", "rtEnclNumber"), ("RAID-Adapter-MIB", "rtEnclPowerSupplyIndex"))
rtFCLooplStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3582, 1, 1, 200) + (0,9040)).setObjects(("RAID-Adapter-MIB", "rtAdapterNumber"), ("RAID-Adapter-MIB", "rtOldLoopID"), ("RAID-Adapter-MIB", "rtOldDriveState"), ("RAID-Adapter-MIB", "rtNewDriveState"))
mibBuilder.exportSymbols("RAID-Adapter-MIB", lunNumber=lunNumber, scanChannels=scanChannels, ldReadFailuresPerSec=ldReadFailuresPerSec, inquiryString=inquiryString, channelType=channelType, physSlotStatus=physSlotStatus, fcChannel=fcChannel, checkConsistencyOrInitializeProgress=checkConsistencyOrInitializeProgress, enclConfigurationTable=enclConfigurationTable, fcLoopID_0=fcLoopID_0, writeFailuresPerSec=writeFailuresPerSec, rtOldLoopID=rtOldLoopID, enclPowerSupplyEntry=enclPowerSupplyEntry, ldReadKBsPerSec=ldReadKBsPerSec, rtASCQ=rtASCQ, fcDeviceTable=fcDeviceTable, rtBatteryTemperatureHigh=rtBatteryTemperatureHigh, rtInitializeFailed=rtInitializeFailed, enclPowerSupplyIndex=enclPowerSupplyIndex, enclFanIndex=enclFanIndex, rtLogicalDriveStateInitialize=rtLogicalDriveStateInitialize, physTermination=physTermination, rtInitializeCompleted=rtInitializeCompleted, biosVersion=biosVersion, spinupDelay=spinupDelay, physSlotNumber=physSlotNumber, terminations=terminations, rtASC=rtASC, fcChannelTable=fcChannelTable, rtPhysicalDriveStateChange=rtPhysicalDriveStateChange, enclTempSensorIndex=enclTempSensorIndex, rtPhysicalDriveStateHotspare=rtPhysicalDriveStateHotspare, otherErrors=otherErrors, enclNumber=enclNumber, raidTraps=raidTraps, adpWriteKBsPerSec=adpWriteKBsPerSec, fcProcessorType=fcProcessorType, channelTable=channelTable, rtLogicalDriveStateOptimal=rtLogicalDriveStateOptimal, channelStatus=channelStatus, fcLoopNumber=fcLoopNumber, adpIOWritesPerSec=adpIOWritesPerSec, arrayPosition=arrayPosition, mediumErrors=mediumErrors, rtConsistencyCorrected=rtConsistencyCorrected, stripeSize=stripeSize, enclConfigurationEntry=enclConfigurationEntry, megaRaidMib=megaRaidMib, fcWwn=fcWwn, fcPhysChannel=fcPhysChannel, rtLogicalDriveStateOffline=rtLogicalDriveStateOffline, logicaldriveTable=logicaldriveTable, fcNumberofDevices=fcNumberofDevices, rtNewDriveInserted=rtNewDriveInserted, physChannel=physChannel, enclAudibleAlarm=enclAudibleAlarm, rtPhysicalDriveStateFailed=rtPhysicalDriveStateFailed, rtPhysicalDriveStateOnline=rtPhysicalDriveStateOnline, megaRaid=megaRaid, ldIOWritesPerSec=ldIOWritesPerSec, enclPowerSupplyTable=enclPowerSupplyTable, numFCLoops=numFCLoops, rtDriveVendor=rtDriveVendor, rtFCLooplStateChange=rtFCLooplStateChange, sizeInMB=sizeInMB, fcSizeMB=fcSizeMB, rtPredictiveFailuresExceeded=rtPredictiveFailuresExceeded, state=state, fcOtherErrors=fcOtherErrors, adpReadFailuresPerSec=adpReadFailuresPerSec, physicaldriveEntry=physicaldriveEntry, sizeMB=sizeMB, physicaldriveTable=physicaldriveTable, enclFanEntry=enclFanEntry, enclTempSensorsTable=enclTempSensorsTable, rtAdapterNumber=rtAdapterNumber, rtLogicalDriveStateChkConsist=rtLogicalDriveStateChkConsist, rtEnclTemperature=rtEnclTemperature, maximumQueueDepth=maximumQueueDepth, status=status, rtReconstructionFailed=rtReconstructionFailed, ldWriteKBsPerSec=ldWriteKBsPerSec, channel=channel, rtNewDriveState=rtNewDriveState, rtSenseKey=rtSenseKey, rtBatteryMissing=rtBatteryMissing, enquiryString=enquiryString, cachePolicy=cachePolicy, adpAdapterNumber=adpAdapterNumber, ioWritesPerSec=ioWritesPerSec, rtPredictiveFailuresFalse=rtPredictiveFailuresFalse, logicaldriveEntry=logicaldriveEntry, scsiLevel=scsiLevel, rtChannelNumber=rtChannelNumber, rtInitializeAborted=rtInitializeAborted, enclNumDeviceSlots=enclNumDeviceSlots, ioReadsPerSec=ioReadsPerSec, flushInterval=flushInterval, enclNumPowerSupplies=enclNumPowerSupplies, rtConfigUpdated=rtConfigUpdated, rtEnclTemperatureOutofRange=rtEnclTemperatureOutofRange, readKBsPerSec=readKBsPerSec, adapterEntry=adapterEntry, enclNumTempSensors=enclNumTempSensors, enclNumberTemp=enclNumberTemp, adpSpeed=adpSpeed, rebuildProgress=rebuildProgress, rtNewLoopID=rtNewLoopID, adpWriteFailuresPerSec=adpWriteFailuresPerSec, adpReadKBsPerSec=adpReadKBsPerSec, numSCSIChannels=numSCSIChannels, ldIOReadsPerSec=ldIOReadsPerSec, enclTotalPowerOnMins=enclTotalPowerOnMins, rtEnclPowerSupplyMalfunction=rtEnclPowerSupplyMalfunction, readFailuresPerSec=readFailuresPerSec, numberOfSpans=numberOfSpans, enclTotalPowerOnCycles=enclTotalPowerOnCycles, numLogicalDrives=numLogicalDrives, fcDeviceEntry=fcDeviceEntry, rtOldDriveState=rtOldDriveState, ldAdapterNumber=ldAdapterNumber, physSpeed=physSpeed, lsi=lsi, fcPhysAdapterNumber=fcPhysAdapterNumber, fcState=fcState, rtCheckConsistencyStarted=rtCheckConsistencyStarted, rtPhysicalDriveStateReady=rtPhysicalDriveStateReady, enclFanStatus=enclFanStatus, rtEnclTempSensorIndex=rtEnclTempSensorIndex, deviceType=deviceType, enclFanTable=enclFanTable, rtReconstructionStarted=rtReconstructionStarted, subSystemVendorID=subSystemVendorID, rtReconstructionCompleted=rtReconstructionCompleted, rtEnclPowerSupplyOk=rtEnclPowerSupplyOk, fcMediumErrors=fcMediumErrors, rtCheckConsistencyAborted=rtCheckConsistencyAborted, rtLogicalDriveStateChange=rtLogicalDriveStateChange, maxConcurrentCmds=maxConcurrentCmds, fcLoopStatus=fcLoopStatus, enclNumFans=enclNumFans, rtEnclFanOk=rtEnclFanOk, numberOfStripes=numberOfStripes, raidLevel=raidLevel, subSystemID=subSystemID, rtCheckConsistencyCompleted=rtCheckConsistencyCompleted, firmwareVersion=firmwareVersion, rtEnclFanMalfunction=rtEnclFanMalfunction, fcChannelEntry=fcChannelEntry, enclDoorLockStatus=enclDoorLockStatus, fcLoopID_1=fcLoopID_1, fcScsiLevel=fcScsiLevel, writeKBsPerSec=writeKBsPerSec, rtEnclNumber=rtEnclNumber, rtEnclFanIndex=rtEnclFanIndex, rtLogicalDriveNumber=rtLogicalDriveNumber, rtEnclPowerSupplyIndex=rtEnclPowerSupplyIndex, rtWWN=rtWWN, adapterTable=adapterTable, rtTargetID=rtTargetID, writePolicy=writePolicy, fcChanAdapterNumber=fcChanAdapterNumber, enclChannel=enclChannel, enclTempSensorsEntry=enclTempSensorsEntry, rtCheckConditionStatus=rtCheckConditionStatus, enclNumberFan=enclNumberFan, productName=productName, fcRebuildProgress=fcRebuildProgress, physAdapterNumber=physAdapterNumber, fcTargetId=fcTargetId, fcArrayPosition=fcArrayPosition, enclNumberPower=enclNumberPower, rtPhysicalDriveStateRebuild=rtPhysicalDriveStateRebuild, ldWriteFailuresPerSec=ldWriteFailuresPerSec, dramSizeInMB=dramSizeInMB, fcInquiryString=fcInquiryString, enclAdapterNumber=enclAdapterNumber, spinupCount=spinupCount, targetID=targetID, rtInitializeStarted=rtInitializeStarted, logicalDriveNumber=logicalDriveNumber, rtCheckConsistencyFailed=rtCheckConsistencyFailed, adpBasePort=adpBasePort, channelEntry=channelEntry, rtLogicalDriveStateDegraded=rtLogicalDriveStateDegraded, rtEnclTemperatureNormal=rtEnclTemperatureNormal, rebuildRateInPercent=rebuildRateInPercent, adpIOReadsPerSec=adpIOReadsPerSec, rtBatteryVolatageLow=rtBatteryVolatageLow, enclTemperature=enclTemperature, enclAlarmStatus=enclAlarmStatus, enclPowerSupplyStatus=enclPowerSupplyStatus, enclTemperatureScale=enclTemperatureScale, chanAdapterNumber=chanAdapterNumber, readPolicy=readPolicy)
