#
# PySNMP MIB module IEEE8023-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE8023-LAG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:47:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, NotificationType, IpAddress, Counter64, MibIdentifier, ObjectIdentity, Integer32, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "IpAddress", "Counter64", "MibIdentifier", "ObjectIdentity", "Integer32", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Gauge32", "Counter32")
TextualConvention, MacAddress, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString", "TruthValue")
lagMIB = ModuleIdentity((1, 2, 840, 10006, 300, 43))
lagMIB.setRevisions(('2014-12-18 00:00', '2012-01-16 00:00', '2007-06-29 00:00', '2000-06-27 00:00',))
if mibBuilder.loadTexts: lagMIB.setLastUpdated('201412180000Z')
if mibBuilder.loadTexts: lagMIB.setOrganization('IEEE 802.1 Working Group')
class LacpKey(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class LacpState(TextualConvention, Bits):
    reference = '7.3.2.1.20'
    status = 'current'
    namedValues = NamedValues(("lacpActivity", 0), ("lacpTimeout", 1), ("aggregation", 2), ("synchronization", 3), ("collecting", 4), ("distributing", 5), ("defaulted", 6), ("expired", 7))

class DrcpState(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("homeGateway", 0), ("neighborGateway", 1), ("otherGateway", 2), ("ippActivity", 3), ("timeout", 4), ("gatewaySync", 5), ("portSync", 6), ("expired", 7))

class ChurnState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noChurn", 1), ("churn", 2), ("churnMonitor", 3))

class AggState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("up", 1), ("down", 2))

class DrniConvAdminGatewayList(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x,'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(3, 3)
    fixedLength = 3

class PortalLinkList(TextualConvention, OctetString):
    status = 'current'
    displayHint = '4d,'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(12, 12)
    fixedLength = 12

class ServiceIdList(TextualConvention, OctetString):
    status = 'current'
    displayHint = '4d,'

lagMIBNotifications = MibIdentifier((1, 2, 840, 10006, 300, 43, 0))
lagMIBObjects = MibIdentifier((1, 2, 840, 10006, 300, 43, 1))
dot3adAggConformance = MibIdentifier((1, 2, 840, 10006, 300, 43, 2))
dot3adAgg = MibIdentifier((1, 2, 840, 10006, 300, 43, 1, 1))
dot3adAggPort = MibIdentifier((1, 2, 840, 10006, 300, 43, 1, 2))
dot3adDrni = MibIdentifier((1, 2, 840, 10006, 300, 43, 1, 4))
dot3adIPP = MibIdentifier((1, 2, 840, 10006, 300, 43, 1, 5))
dot3adTablesLastChanged = MibScalar((1, 2, 840, 10006, 300, 43, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adTablesLastChanged.setStatus('current')
dot3adAggTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 1, 1), )
if mibBuilder.loadTexts: dot3adAggTable.setStatus('current')
dot3adAggEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 1, 1, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adAggIndex"))
if mibBuilder.loadTexts: dot3adAggEntry.setStatus('current')
dot3adAggIndex = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dot3adAggIndex.setStatus('current')
dot3adAggMACAddress = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggMACAddress.setStatus('current')
dot3adAggActorSystemPriority = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggActorSystemPriority.setStatus('current')
dot3adAggActorSystemID = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggActorSystemID.setStatus('current')
dot3adAggAggregateOrIndividual = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggAggregateOrIndividual.setStatus('current')
dot3adAggActorAdminKey = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 1, 1, 6), LacpKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggActorAdminKey.setStatus('current')
dot3adAggActorOperKey = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 1, 1, 7), LacpKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggActorOperKey.setStatus('current')
dot3adAggPartnerSystemID = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPartnerSystemID.setStatus('current')
dot3adAggPartnerSystemPriority = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPartnerSystemPriority.setStatus('current')
dot3adAggPartnerOperKey = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 1, 1, 10), LacpKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPartnerOperKey.setStatus('current')
dot3adAggCollectorMaxDelay = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggCollectorMaxDelay.setStatus('current')
dot3adAggPortListTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 1, 2), )
if mibBuilder.loadTexts: dot3adAggPortListTable.setStatus('current')
dot3adAggPortListEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 1, 2, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adAggIndex"))
if mibBuilder.loadTexts: dot3adAggPortListEntry.setStatus('current')
dot3adAggPortListPorts = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 2, 1, 1), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortListPorts.setStatus('current')
dot3adAggXTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 1, 3), )
if mibBuilder.loadTexts: dot3adAggXTable.setStatus('current')
dot3adAggXEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1), )
dot3adAggEntry.registerAugmentions(("IEEE8023-LAG-MIB", "dot3adAggXEntry"))
dot3adAggXEntry.setIndexNames(*dot3adAggEntry.getIndexNames())
if mibBuilder.loadTexts: dot3adAggXEntry.setStatus('current')
dot3adAggDescription = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggDescription.setStatus('current')
dot3adAggName = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggName.setStatus('current')
dot3adAggAdminState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 3), AggState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggAdminState.setStatus('current')
dot3adAggOperState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 4), AggState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggOperState.setStatus('current')
dot3adAggTimeOfLastOperChange = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggTimeOfLastOperChange.setStatus('current')
dot3adAggDataRate = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggDataRate.setStatus('current')
dot3adAggOctetsTxOK = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 7), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggOctetsTxOK.setStatus('current')
dot3adAggOctetsRxOK = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 8), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggOctetsRxOK.setStatus('current')
dot3adAggFramesTxOK = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 9), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggFramesTxOK.setStatus('current')
dot3adAggFramesRxOK = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 10), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggFramesRxOK.setStatus('current')
dot3adAggMulticastFramesTxOK = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 11), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggMulticastFramesTxOK.setStatus('current')
dot3adAggMulticastFramesRxOK = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 12), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggMulticastFramesRxOK.setStatus('current')
dot3adAggBroadcastFramesTxOK = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 13), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggBroadcastFramesTxOK.setStatus('current')
dot3adAggBroadcastFramesRxOK = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 14), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggBroadcastFramesRxOK.setStatus('current')
dot3adAggFramesDiscardedOnTx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 15), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggFramesDiscardedOnTx.setStatus('current')
dot3adAggFramesDiscardedOnRx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 16), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggFramesDiscardedOnRx.setStatus('current')
dot3adAggFramesWithTxErrors = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 17), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggFramesWithTxErrors.setStatus('current')
dot3adAggFramesWithRxErrors = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 18), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggFramesWithRxErrors.setStatus('current')
dot3adAggUnknownProtocolFrames = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 19), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggUnknownProtocolFrames.setStatus('current')
dot3adAggLinkUpDownNotificationEnable = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggLinkUpDownNotificationEnable.setStatus('current')
dot3adAggPortAlgorithm = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortAlgorithm.setStatus('current')
dot3adAggPartnerAdminPortAlgorithm = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPartnerAdminPortAlgorithm.setStatus('current')
dot3adAggPartnerAdminPortConversationListDigest = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPartnerAdminPortConversationListDigest.setStatus('current')
dot3adAggAdminDiscardWrongConversation = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggAdminDiscardWrongConversation.setStatus('current')
dot3adAggPartnerAdminConvServiceMappingDigest = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 3, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPartnerAdminConvServiceMappingDigest.setStatus('current')
dot3adAggConversationAdminLinkTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 1, 4), )
if mibBuilder.loadTexts: dot3adAggConversationAdminLinkTable.setStatus('current')
dot3adAggConversationAdminLinkEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 1, 4, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adAggConversationAdminLinkId"), (0, "IEEE8023-LAG-MIB", "dot3adAggIndex"))
if mibBuilder.loadTexts: dot3adAggConversationAdminLinkEntry.setStatus('current')
dot3adAggConversationAdminLinkId = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: dot3adAggConversationAdminLinkId.setStatus('current')
dot3adAggConversationAdminLinkList = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 4, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggConversationAdminLinkList.setStatus('current')
dot3adAggAdminServiceConversationMapTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 1, 5), )
if mibBuilder.loadTexts: dot3adAggAdminServiceConversationMapTable.setStatus('current')
dot3adAggAdminServiceConversationMapEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 1, 5, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adAggAdminServiceConversationMapId"), (0, "IEEE8023-LAG-MIB", "dot3adAggIndex"))
if mibBuilder.loadTexts: dot3adAggAdminServiceConversationMapEntry.setStatus('current')
dot3adAggAdminServiceConversationMapId = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: dot3adAggAdminServiceConversationMapId.setStatus('current')
dot3adAggAdminServiceConversationServiceIDList = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 1, 5, 1, 2), ServiceIdList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggAdminServiceConversationServiceIDList.setStatus('current')
dot3adAggPortTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 2, 1), )
if mibBuilder.loadTexts: dot3adAggPortTable.setStatus('current')
dot3adAggPortEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adAggPortIndex"))
if mibBuilder.loadTexts: dot3adAggPortEntry.setStatus('current')
dot3adAggPortIndex = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dot3adAggPortIndex.setStatus('current')
dot3adAggPortActorSystemPriority = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortActorSystemPriority.setStatus('current')
dot3adAggPortActorSystemID = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortActorSystemID.setStatus('current')
dot3adAggPortActorAdminKey = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 4), LacpKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortActorAdminKey.setStatus('current')
dot3adAggPortActorOperKey = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 5), LacpKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortActorOperKey.setStatus('current')
dot3adAggPortPartnerAdminSystemPriority = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortPartnerAdminSystemPriority.setStatus('current')
dot3adAggPortPartnerOperSystemPriority = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortPartnerOperSystemPriority.setStatus('current')
dot3adAggPortPartnerAdminSystemID = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 8), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortPartnerAdminSystemID.setStatus('current')
dot3adAggPortPartnerOperSystemID = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortPartnerOperSystemID.setStatus('current')
dot3adAggPortPartnerAdminKey = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 10), LacpKey()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortPartnerAdminKey.setStatus('current')
dot3adAggPortPartnerOperKey = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 11), LacpKey()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortPartnerOperKey.setStatus('current')
dot3adAggPortSelectedAggID = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 12), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortSelectedAggID.setStatus('current')
dot3adAggPortAttachedAggID = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 13), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortAttachedAggID.setStatus('current')
dot3adAggPortActorPort = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortActorPort.setStatus('current')
dot3adAggPortActorPortPriority = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortActorPortPriority.setStatus('current')
dot3adAggPortPartnerAdminPort = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortPartnerAdminPort.setStatus('current')
dot3adAggPortPartnerOperPort = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortPartnerOperPort.setStatus('current')
dot3adAggPortPartnerAdminPortPriority = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortPartnerAdminPortPriority.setStatus('current')
dot3adAggPortPartnerOperPortPriority = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortPartnerOperPortPriority.setStatus('current')
dot3adAggPortActorAdminState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 20), LacpState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortActorAdminState.setStatus('current')
dot3adAggPortActorOperState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 21), LacpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortActorOperState.setStatus('current')
dot3adAggPortPartnerAdminState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 22), LacpState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortPartnerAdminState.setStatus('current')
dot3adAggPortPartnerOperState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 23), LacpState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortPartnerOperState.setStatus('current')
dot3adAggPortAggregateOrIndividual = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 1, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortAggregateOrIndividual.setStatus('current')
dot3adAggPortStatsTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 2, 2), )
if mibBuilder.loadTexts: dot3adAggPortStatsTable.setStatus('current')
dot3adAggPortStatsEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 2, 2, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adAggPortIndex"))
if mibBuilder.loadTexts: dot3adAggPortStatsEntry.setStatus('current')
dot3adAggPortStatsLACPDUsRx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortStatsLACPDUsRx.setStatus('current')
dot3adAggPortStatsMarkerPDUsRx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortStatsMarkerPDUsRx.setStatus('current')
dot3adAggPortStatsMarkerResponsePDUsRx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortStatsMarkerResponsePDUsRx.setStatus('current')
dot3adAggPortStatsUnknownRx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortStatsUnknownRx.setStatus('current')
dot3adAggPortStatsIllegalRx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortStatsIllegalRx.setStatus('current')
dot3adAggPortStatsLACPDUsTx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortStatsLACPDUsTx.setStatus('current')
dot3adAggPortStatsMarkerPDUsTx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortStatsMarkerPDUsTx.setStatus('current')
dot3adAggPortStatsMarkerResponsePDUsTx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortStatsMarkerResponsePDUsTx.setStatus('current')
dot3adAggPortDebugTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 2, 3), )
if mibBuilder.loadTexts: dot3adAggPortDebugTable.setStatus('current')
dot3adAggPortDebugEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adAggPortIndex"))
if mibBuilder.loadTexts: dot3adAggPortDebugEntry.setStatus('current')
dot3adAggPortDebugRxState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("currentRx", 1), ("expired", 2), ("defaulted", 3), ("initialize", 4), ("lacpDisabled", 5), ("portDisabled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugRxState.setStatus('current')
dot3adAggPortDebugLastRxTime = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugLastRxTime.setStatus('current')
dot3adAggPortDebugMuxState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("detached", 1), ("waiting", 2), ("attached", 3), ("collecting", 4), ("distributing", 5), ("collectingDistributing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugMuxState.setStatus('current')
dot3adAggPortDebugMuxReason = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugMuxReason.setStatus('current')
dot3adAggPortDebugActorChurnState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1, 5), ChurnState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugActorChurnState.setStatus('current')
dot3adAggPortDebugPartnerChurnState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1, 6), ChurnState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugPartnerChurnState.setStatus('current')
dot3adAggPortDebugActorChurnCount = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugActorChurnCount.setStatus('current')
dot3adAggPortDebugPartnerChurnCount = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugPartnerChurnCount.setStatus('current')
dot3adAggPortDebugActorSyncTransitionCount = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugActorSyncTransitionCount.setStatus('current')
dot3adAggPortDebugPartnerSyncTransitionCount = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugPartnerSyncTransitionCount.setStatus('current')
dot3adAggPortDebugActorChangeCount = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugActorChangeCount.setStatus('current')
dot3adAggPortDebugPartnerChangeCount = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugPartnerChangeCount.setStatus('current')
dot3adAggPortXTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 2, 4), )
if mibBuilder.loadTexts: dot3adAggPortXTable.setStatus('current')
dot3adAggPortXEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 2, 4, 1), )
dot3adAggPortEntry.registerAugmentions(("IEEE8023-LAG-MIB", "dot3adAggPortXEntry"))
dot3adAggPortXEntry.setIndexNames(*dot3adAggPortEntry.getIndexNames())
if mibBuilder.loadTexts: dot3adAggPortXEntry.setStatus('current')
dot3adAggPortProtocolDA = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 4, 1, 1), MacAddress().clone(hexValue="0180C2000002")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortProtocolDA.setStatus('current')
dot3adAggPortSecondXTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 2, 5), )
if mibBuilder.loadTexts: dot3adAggPortSecondXTable.setStatus('current')
dot3adAggPortSecondXEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 2, 5, 1), )
dot3adAggPortEntry.registerAugmentions(("IEEE8023-LAG-MIB", "dot3adAggPortSecondXEntry"))
dot3adAggPortSecondXEntry.setIndexNames(*dot3adAggPortEntry.getIndexNames())
if mibBuilder.loadTexts: dot3adAggPortSecondXEntry.setStatus('current')
dot3adAggPortOperConversationPasses = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortOperConversationPasses.setStatus('current')
dot3adAggPortOperConversationCollected = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortOperConversationCollected.setStatus('current')
dot3adAggPortLinkNumberId = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortLinkNumberId.setStatus('current')
dot3adAggPortPartnerAdminLinkNumberId = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortPartnerAdminLinkNumberId.setStatus('current')
dot3adAggPortWTRTime = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 12), ValueRangeConstraint(100, 100), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adAggPortWTRTime.setStatus('current')
dot3adAggPortDebugXTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 2, 6), )
if mibBuilder.loadTexts: dot3adAggPortDebugXTable.setStatus('current')
dot3adAggPortDebugXEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 2, 6, 1), )
dot3adAggPortDebugEntry.registerAugmentions(("IEEE8023-LAG-MIB", "dot3adAggPortDebugXEntry"))
dot3adAggPortDebugXEntry.setIndexNames(*dot3adAggPortDebugEntry.getIndexNames())
if mibBuilder.loadTexts: dot3adAggPortDebugXEntry.setStatus('current')
dot3adAggPortDebugActorCDSChurnState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 6, 1, 1), ChurnState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugActorCDSChurnState.setStatus('current')
dot3adAggPortDebugPartnerCDSChurnState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 6, 1, 2), ChurnState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugPartnerCDSChurnState.setStatus('current')
dot3adAggPortDebugActorCDSChurnCount = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 6, 1, 3), Counter64()).setUnits('times entered ACTOR_CDS_CHURN').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugActorCDSChurnCount.setStatus('current')
dot3adAggPortDebugPartnerCDSChurnCount = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 2, 6, 1, 4), Counter64()).setUnits('times entered PARTNER_CDS_CHURN').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adAggPortDebugPartnerCDSChurnCount.setStatus('current')
dot3adDrniTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 4, 1), )
if mibBuilder.loadTexts: dot3adDrniTable.setStatus('current')
dot3adDrniEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adDrniIndex"))
if mibBuilder.loadTexts: dot3adDrniEntry.setStatus('current')
dot3adDrniIndex = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dot3adDrniIndex.setStatus('current')
dot3adDrniDescription = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adDrniDescription.setStatus('current')
dot3adDrniName = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 3), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniName.setStatus('current')
dot3adDrniPortalAddr = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniPortalAddr.setStatus('current')
dot3adDrniPortalPriority = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniPortalPriority.setStatus('current')
dot3adDrniThreePortalSystem = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniThreePortalSystem.setStatus('current')
dot3adDrniPortalSystemNumber = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniPortalSystemNumber.setStatus('current')
dot3adDrniIntraPortalLinkList = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 8), PortalLinkList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniIntraPortalLinkList.setStatus('current')
dot3adDrniAggregator = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 9), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniAggregator.setStatus('current')
dot3adDrniNeighborAdminConvGatewayListDigest = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniNeighborAdminConvGatewayListDigest.setStatus('current')
dot3adDrniNeighborAdminConvPortListDigest = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniNeighborAdminConvPortListDigest.setStatus('current')
dot3adDrniGatewayAlgorithm = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniGatewayAlgorithm.setStatus('current')
dot3adDrniNeighborAdminGatewayAlgorithm = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniNeighborAdminGatewayAlgorithm.setStatus('current')
dot3adDrniNeighborAdminPortAlgorithm = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniNeighborAdminPortAlgorithm.setStatus('current')
dot3adDrniNeighborAdminDRCPState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 15), DrcpState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniNeighborAdminDRCPState.setStatus('current')
dot3adDrniEncapsulationMethod = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4).clone(hexValue="0080C200")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniEncapsulationMethod.setStatus('current')
dot3adDrniDRPortConversationPasses = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adDrniDRPortConversationPasses.setStatus('current')
dot3adDrniDRGatewayConversationPasses = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adDrniDRGatewayConversationPasses.setStatus('current')
dot3adDrniPSI = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adDrniPSI.setStatus('current')
dot3adDrniPortConversationControl = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniPortConversationControl.setStatus('current')
dot3adDrniIntraPortalPortProtocolDA = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 1, 1, 21), MacAddress().clone(hexValue="0180C2000003")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniIntraPortalPortProtocolDA.setStatus('current')
dot3adDrniConvAdminGatewayTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 4, 2), )
if mibBuilder.loadTexts: dot3adDrniConvAdminGatewayTable.setStatus('current')
dot3adDrniConvAdminGatewayEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 4, 2, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adDrniGatewayConversationID"), (0, "IEEE8023-LAG-MIB", "dot3adDrniIndex"))
if mibBuilder.loadTexts: dot3adDrniConvAdminGatewayEntry.setStatus('current')
dot3adDrniGatewayConversationID = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: dot3adDrniGatewayConversationID.setStatus('current')
dot3adDrniConvAdminGatewayList = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 2, 1, 2), DrniConvAdminGatewayList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniConvAdminGatewayList.setStatus('current')
dot3adDrniIPLEncapMapTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 4, 3), )
if mibBuilder.loadTexts: dot3adDrniIPLEncapMapTable.setStatus('current')
dot3adDrniIPLEncapMapEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 4, 3, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adDrniGatewayConversationID"), (0, "IEEE8023-LAG-MIB", "dot3adDrniIndex"))
if mibBuilder.loadTexts: dot3adDrniIPLEncapMapEntry.setStatus('current')
dot3adDrniIPLFrameIdValue = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniIPLFrameIdValue.setStatus('current')
dot3adDrniNetEncapMapTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 4, 4), )
if mibBuilder.loadTexts: dot3adDrniNetEncapMapTable.setStatus('current')
dot3adDrniNetEncapMapEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 4, 4, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adDrniGatewayConversationID"), (0, "IEEE8023-LAG-MIB", "dot3adDrniIndex"))
if mibBuilder.loadTexts: dot3adDrniNetEncapMapEntry.setStatus('current')
dot3adDrniNetFrameIdValue = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 4, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adDrniNetFrameIdValue.setStatus('current')
dot3adIPPAttributeTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 5, 1), )
if mibBuilder.loadTexts: dot3adIPPAttributeTable.setStatus('current')
dot3adIPPAttributeEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 5, 1, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adIPPIndex"))
if mibBuilder.loadTexts: dot3adIPPAttributeEntry.setStatus('current')
dot3adIPPIndex = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dot3adIPPIndex.setStatus('current')
dot3adIPPPortConversationPasses = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adIPPPortConversationPasses.setStatus('current')
dot3adIPPGatewayConversationDirection = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adIPPGatewayConversationDirection.setStatus('current')
dot3adIPPAdminState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 5, 1, 1, 4), AggState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot3adIPPAdminState.setStatus('current')
dot3adIPPOperState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 5, 1, 1, 5), AggState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adIPPOperState.setStatus('current')
dot3adIPPTimeOfLastOperChange = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adIPPTimeOfLastOperChange.setStatus('current')
dot3adIPPStatsTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 5, 2), )
if mibBuilder.loadTexts: dot3adIPPStatsTable.setStatus('current')
dot3adIPPStatsEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 5, 2, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adIPPIndex"))
if mibBuilder.loadTexts: dot3adIPPStatsEntry.setStatus('current')
dot3adIPPStatsDRCPDUsRx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 5, 2, 1, 1), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adIPPStatsDRCPDUsRx.setStatus('current')
dot3adIPPStatsIllegalRx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 5, 2, 1, 2), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adIPPStatsIllegalRx.setStatus('current')
dot3adIPPStatsDRCPDUsTx = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 5, 2, 1, 3), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adIPPStatsDRCPDUsTx.setStatus('current')
dot3adIPPDebugTable = MibTable((1, 2, 840, 10006, 300, 43, 1, 5, 3), )
if mibBuilder.loadTexts: dot3adIPPDebugTable.setStatus('current')
dot3adIPPDebugEntry = MibTableRow((1, 2, 840, 10006, 300, 43, 1, 5, 3, 1), ).setIndexNames((0, "IEEE8023-LAG-MIB", "dot3adIPPIndex"))
if mibBuilder.loadTexts: dot3adIPPDebugEntry.setStatus('current')
dot3adIPPDebugDRCPRxState = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("current", 1), ("expired", 2), ("defaulted", 3), ("initialize", 4), ("reportToManagement", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adIPPDebugDRCPRxState.setStatus('current')
dot3adIPPDebugLastRxTime = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 5, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adIPPDebugLastRxTime.setStatus('current')
dot3adIPPDebugDifferPortalReason = MibTableColumn((1, 2, 840, 10006, 300, 43, 1, 5, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3adIPPDebugDifferPortalReason.setStatus('current')
dot3adAggLinkUpNotification = NotificationType((1, 2, 840, 10006, 300, 43, 0, 1))
if mibBuilder.loadTexts: dot3adAggLinkUpNotification.setStatus('current')
dot3adAggLinkDownNotification = NotificationType((1, 2, 840, 10006, 300, 43, 0, 2))
if mibBuilder.loadTexts: dot3adAggLinkDownNotification.setStatus('current')
dot3adAggGroups = MibIdentifier((1, 2, 840, 10006, 300, 43, 2, 1))
dot3adAggCompliances = MibIdentifier((1, 2, 840, 10006, 300, 43, 2, 2))
dot3adAggGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 1)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggActorSystemID"), ("IEEE8023-LAG-MIB", "dot3adAggActorSystemPriority"), ("IEEE8023-LAG-MIB", "dot3adAggAggregateOrIndividual"), ("IEEE8023-LAG-MIB", "dot3adAggActorAdminKey"), ("IEEE8023-LAG-MIB", "dot3adAggMACAddress"), ("IEEE8023-LAG-MIB", "dot3adAggActorOperKey"), ("IEEE8023-LAG-MIB", "dot3adAggPartnerSystemID"), ("IEEE8023-LAG-MIB", "dot3adAggPartnerSystemPriority"), ("IEEE8023-LAG-MIB", "dot3adAggPartnerOperKey"), ("IEEE8023-LAG-MIB", "dot3adAggCollectorMaxDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adAggGroup = dot3adAggGroup.setStatus('current')
dot3adAggPortListGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 2)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggPortListPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adAggPortListGroup = dot3adAggPortListGroup.setStatus('current')
dot3adAggPortGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 3)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggPortActorSystemPriority"), ("IEEE8023-LAG-MIB", "dot3adAggPortActorSystemID"), ("IEEE8023-LAG-MIB", "dot3adAggPortActorAdminKey"), ("IEEE8023-LAG-MIB", "dot3adAggPortActorOperKey"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerAdminSystemPriority"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerOperSystemPriority"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerAdminSystemID"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerOperSystemID"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerAdminKey"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerOperKey"), ("IEEE8023-LAG-MIB", "dot3adAggPortSelectedAggID"), ("IEEE8023-LAG-MIB", "dot3adAggPortAttachedAggID"), ("IEEE8023-LAG-MIB", "dot3adAggPortActorPort"), ("IEEE8023-LAG-MIB", "dot3adAggPortActorPortPriority"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerAdminPort"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerOperPort"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerAdminPortPriority"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerOperPortPriority"), ("IEEE8023-LAG-MIB", "dot3adAggPortActorAdminState"), ("IEEE8023-LAG-MIB", "dot3adAggPortActorOperState"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerAdminState"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerOperState"), ("IEEE8023-LAG-MIB", "dot3adAggPortAggregateOrIndividual"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adAggPortGroup = dot3adAggPortGroup.setStatus('current')
dot3adAggPortStatsGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 4)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggPortStatsLACPDUsRx"), ("IEEE8023-LAG-MIB", "dot3adAggPortStatsMarkerPDUsRx"), ("IEEE8023-LAG-MIB", "dot3adAggPortStatsMarkerResponsePDUsRx"), ("IEEE8023-LAG-MIB", "dot3adAggPortStatsUnknownRx"), ("IEEE8023-LAG-MIB", "dot3adAggPortStatsIllegalRx"), ("IEEE8023-LAG-MIB", "dot3adAggPortStatsLACPDUsTx"), ("IEEE8023-LAG-MIB", "dot3adAggPortStatsMarkerPDUsTx"), ("IEEE8023-LAG-MIB", "dot3adAggPortStatsMarkerResponsePDUsTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adAggPortStatsGroup = dot3adAggPortStatsGroup.setStatus('current')
dot3adAggPortDebugGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 5)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggPortDebugRxState"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugLastRxTime"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugMuxState"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugMuxReason"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugActorChurnState"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugPartnerChurnState"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugActorChurnCount"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugPartnerChurnCount"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugActorSyncTransitionCount"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugPartnerSyncTransitionCount"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugActorChangeCount"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugPartnerChangeCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adAggPortDebugGroup = dot3adAggPortDebugGroup.setStatus('current')
dot3adTablesLastChangedGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 6)).setObjects(("IEEE8023-LAG-MIB", "dot3adTablesLastChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adTablesLastChangedGroup = dot3adTablesLastChangedGroup.setStatus('current')
dot3adAggPortProtocolDAGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 7)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggPortProtocolDA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adAggPortProtocolDAGroup = dot3adAggPortProtocolDAGroup.setStatus('current')
dot3adAggNotificationGroup = NotificationGroup((1, 2, 840, 10006, 300, 43, 2, 1, 8)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggLinkUpNotification"), ("IEEE8023-LAG-MIB", "dot3adAggLinkDownNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adAggNotificationGroup = dot3adAggNotificationGroup.setStatus('current')
dot3adAggXGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 9)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggDescription"), ("IEEE8023-LAG-MIB", "dot3adAggName"), ("IEEE8023-LAG-MIB", "dot3adAggAdminState"), ("IEEE8023-LAG-MIB", "dot3adAggOperState"), ("IEEE8023-LAG-MIB", "dot3adAggTimeOfLastOperChange"), ("IEEE8023-LAG-MIB", "dot3adAggDataRate"), ("IEEE8023-LAG-MIB", "dot3adAggFramesTxOK"), ("IEEE8023-LAG-MIB", "dot3adAggFramesRxOK"), ("IEEE8023-LAG-MIB", "dot3adAggLinkUpDownNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adAggXGroup = dot3adAggXGroup.setStatus('current')
dot3adAggRecommendedGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 10)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggOctetsTxOK"), ("IEEE8023-LAG-MIB", "dot3adAggOctetsRxOK"), ("IEEE8023-LAG-MIB", "dot3adAggFramesDiscardedOnTx"), ("IEEE8023-LAG-MIB", "dot3adAggFramesDiscardedOnRx"), ("IEEE8023-LAG-MIB", "dot3adAggFramesWithTxErrors"), ("IEEE8023-LAG-MIB", "dot3adAggFramesWithRxErrors"), ("IEEE8023-LAG-MIB", "dot3adAggUnknownProtocolFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adAggRecommendedGroup = dot3adAggRecommendedGroup.setStatus('current')
dot3adAggOptionalGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 11)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggMulticastFramesTxOK"), ("IEEE8023-LAG-MIB", "dot3adAggMulticastFramesRxOK"), ("IEEE8023-LAG-MIB", "dot3adAggBroadcastFramesTxOK"), ("IEEE8023-LAG-MIB", "dot3adAggBroadcastFramesRxOK"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adAggOptionalGroup = dot3adAggOptionalGroup.setStatus('current')
dot3adPerServiceFrameDistGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 12)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggConversationAdminLinkList"), ("IEEE8023-LAG-MIB", "dot3adAggPortAlgorithm"), ("IEEE8023-LAG-MIB", "dot3adAggPartnerAdminPortAlgorithm"), ("IEEE8023-LAG-MIB", "dot3adAggPartnerAdminPortConversationListDigest"), ("IEEE8023-LAG-MIB", "dot3adAggAdminDiscardWrongConversation"), ("IEEE8023-LAG-MIB", "dot3adAggPartnerAdminConvServiceMappingDigest"), ("IEEE8023-LAG-MIB", "dot3adAggAdminServiceConversationServiceIDList"), ("IEEE8023-LAG-MIB", "dot3adAggPortLinkNumberId"), ("IEEE8023-LAG-MIB", "dot3adAggPortPartnerAdminLinkNumberId"), ("IEEE8023-LAG-MIB", "dot3adAggPortOperConversationPasses"), ("IEEE8023-LAG-MIB", "dot3adAggPortOperConversationCollected"), ("IEEE8023-LAG-MIB", "dot3adAggPortWTRTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adPerServiceFrameDistGroup = dot3adPerServiceFrameDistGroup.setStatus('current')
dot3adAggPortDebugXGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 13)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggPortDebugActorCDSChurnState"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugPartnerCDSChurnState"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugActorCDSChurnCount"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugPartnerCDSChurnCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adAggPortDebugXGroup = dot3adAggPortDebugXGroup.setStatus('current')
dot3adDrniGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 14)).setObjects(("IEEE8023-LAG-MIB", "dot3adDrniDescription"), ("IEEE8023-LAG-MIB", "dot3adDrniName"), ("IEEE8023-LAG-MIB", "dot3adDrniPortalAddr"), ("IEEE8023-LAG-MIB", "dot3adDrniPortalPriority"), ("IEEE8023-LAG-MIB", "dot3adDrniThreePortalSystem"), ("IEEE8023-LAG-MIB", "dot3adDrniPortalSystemNumber"), ("IEEE8023-LAG-MIB", "dot3adDrniIntraPortalLinkList"), ("IEEE8023-LAG-MIB", "dot3adDrniAggregator"), ("IEEE8023-LAG-MIB", "dot3adDrniNeighborAdminConvGatewayListDigest"), ("IEEE8023-LAG-MIB", "dot3adDrniNeighborAdminConvPortListDigest"), ("IEEE8023-LAG-MIB", "dot3adDrniGatewayAlgorithm"), ("IEEE8023-LAG-MIB", "dot3adDrniNeighborAdminGatewayAlgorithm"), ("IEEE8023-LAG-MIB", "dot3adDrniNeighborAdminPortAlgorithm"), ("IEEE8023-LAG-MIB", "dot3adDrniNeighborAdminDRCPState"), ("IEEE8023-LAG-MIB", "dot3adDrniEncapsulationMethod"), ("IEEE8023-LAG-MIB", "dot3adDrniDRPortConversationPasses"), ("IEEE8023-LAG-MIB", "dot3adDrniDRGatewayConversationPasses"), ("IEEE8023-LAG-MIB", "dot3adDrniConvAdminGatewayList"), ("IEEE8023-LAG-MIB", "dot3adDrniIPLFrameIdValue"), ("IEEE8023-LAG-MIB", "dot3adDrniNetFrameIdValue"), ("IEEE8023-LAG-MIB", "dot3adDrniPSI"), ("IEEE8023-LAG-MIB", "dot3adDrniPortConversationControl"), ("IEEE8023-LAG-MIB", "dot3adDrniIntraPortalPortProtocolDA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adDrniGroup = dot3adDrniGroup.setStatus('current')
dot3adIPPGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 15)).setObjects(("IEEE8023-LAG-MIB", "dot3adIPPPortConversationPasses"), ("IEEE8023-LAG-MIB", "dot3adIPPGatewayConversationDirection"), ("IEEE8023-LAG-MIB", "dot3adIPPAdminState"), ("IEEE8023-LAG-MIB", "dot3adIPPOperState"), ("IEEE8023-LAG-MIB", "dot3adIPPTimeOfLastOperChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adIPPGroup = dot3adIPPGroup.setStatus('current')
dot3adIPPStatsGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 16)).setObjects(("IEEE8023-LAG-MIB", "dot3adIPPStatsDRCPDUsRx"), ("IEEE8023-LAG-MIB", "dot3adIPPStatsIllegalRx"), ("IEEE8023-LAG-MIB", "dot3adIPPStatsDRCPDUsTx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adIPPStatsGroup = dot3adIPPStatsGroup.setStatus('current')
dot3adIPPDebugGroup = ObjectGroup((1, 2, 840, 10006, 300, 43, 2, 1, 17)).setObjects(("IEEE8023-LAG-MIB", "dot3adIPPDebugDRCPRxState"), ("IEEE8023-LAG-MIB", "dot3adIPPDebugLastRxTime"), ("IEEE8023-LAG-MIB", "dot3adIPPDebugDifferPortalReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adIPPDebugGroup = dot3adIPPDebugGroup.setStatus('current')
dot3adAggCompliance = ModuleCompliance((1, 2, 840, 10006, 300, 43, 2, 2, 1)).setObjects(("IEEE8023-LAG-MIB", "dot3adAggGroup"), ("IEEE8023-LAG-MIB", "dot3adAggPortGroup"), ("IEEE8023-LAG-MIB", "dot3adAggNotificationGroup"), ("IEEE8023-LAG-MIB", "dot3adTablesLastChangedGroup"), ("IEEE8023-LAG-MIB", "dot3adAggPortListGroup"), ("IEEE8023-LAG-MIB", "dot3adAggXGroup"), ("IEEE8023-LAG-MIB", "dot3adAggPortStatsGroup"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugGroup"), ("IEEE8023-LAG-MIB", "dot3adAggPortDebugXGroup"), ("IEEE8023-LAG-MIB", "dot3adAggPortProtocolDAGroup"), ("IEEE8023-LAG-MIB", "dot3adAggOptionalGroup"), ("IEEE8023-LAG-MIB", "dot3adAggRecommendedGroup"), ("IEEE8023-LAG-MIB", "dot3adPerServiceFrameDistGroup"), ("IEEE8023-LAG-MIB", "dot3adDrniGroup"), ("IEEE8023-LAG-MIB", "dot3adIPPGroup"), ("IEEE8023-LAG-MIB", "dot3adIPPStatsGroup"), ("IEEE8023-LAG-MIB", "dot3adIPPDebugGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dot3adAggCompliance = dot3adAggCompliance.setStatus('current')
mibBuilder.exportSymbols("IEEE8023-LAG-MIB", dot3adAggPortPartnerOperState=dot3adAggPortPartnerOperState, dot3adAggPortPartnerAdminPortPriority=dot3adAggPortPartnerAdminPortPriority, dot3adAggMACAddress=dot3adAggMACAddress, dot3adAggPortActorSystemID=dot3adAggPortActorSystemID, dot3adIPPAttributeTable=dot3adIPPAttributeTable, dot3adIPPStatsDRCPDUsTx=dot3adIPPStatsDRCPDUsTx, AggState=AggState, dot3adAggPortAlgorithm=dot3adAggPortAlgorithm, dot3adAggPortDebugEntry=dot3adAggPortDebugEntry, dot3adAggPortPartnerOperSystemPriority=dot3adAggPortPartnerOperSystemPriority, dot3adAggPortListPorts=dot3adAggPortListPorts, dot3adAggPortStatsLACPDUsRx=dot3adAggPortStatsLACPDUsRx, dot3adAggMulticastFramesRxOK=dot3adAggMulticastFramesRxOK, dot3adDrniConvAdminGatewayTable=dot3adDrniConvAdminGatewayTable, dot3adDrniPortalSystemNumber=dot3adDrniPortalSystemNumber, dot3adDrniNeighborAdminConvPortListDigest=dot3adDrniNeighborAdminConvPortListDigest, dot3adIPPIndex=dot3adIPPIndex, dot3adAggRecommendedGroup=dot3adAggRecommendedGroup, dot3adAggPortPartnerAdminSystemPriority=dot3adAggPortPartnerAdminSystemPriority, dot3adDrniIndex=dot3adDrniIndex, dot3adDrniGatewayConversationID=dot3adDrniGatewayConversationID, dot3adIPPPortConversationPasses=dot3adIPPPortConversationPasses, dot3adAggAdminServiceConversationMapEntry=dot3adAggAdminServiceConversationMapEntry, dot3adDrniNeighborAdminGatewayAlgorithm=dot3adDrniNeighborAdminGatewayAlgorithm, dot3adTablesLastChanged=dot3adTablesLastChanged, dot3adAggLinkDownNotification=dot3adAggLinkDownNotification, dot3adAggOctetsTxOK=dot3adAggOctetsTxOK, dot3adAggAdminServiceConversationServiceIDList=dot3adAggAdminServiceConversationServiceIDList, dot3adAggPortDebugPartnerChangeCount=dot3adAggPortDebugPartnerChangeCount, dot3adDrniDRGatewayConversationPasses=dot3adDrniDRGatewayConversationPasses, LacpState=LacpState, dot3adAggPortPartnerOperSystemID=dot3adAggPortPartnerOperSystemID, dot3adAggPortPartnerAdminPort=dot3adAggPortPartnerAdminPort, dot3adDrniNeighborAdminDRCPState=dot3adDrniNeighborAdminDRCPState, dot3adAggActorOperKey=dot3adAggActorOperKey, dot3adAggAdminDiscardWrongConversation=dot3adAggAdminDiscardWrongConversation, dot3adIPPDebugDRCPRxState=dot3adIPPDebugDRCPRxState, dot3adAggPortPartnerAdminState=dot3adAggPortPartnerAdminState, dot3adDrniThreePortalSystem=dot3adDrniThreePortalSystem, dot3adAggPortActorSystemPriority=dot3adAggPortActorSystemPriority, dot3adAgg=dot3adAgg, dot3adAggPortDebugPartnerChurnState=dot3adAggPortDebugPartnerChurnState, dot3adDrniConvAdminGatewayEntry=dot3adDrniConvAdminGatewayEntry, dot3adAggDataRate=dot3adAggDataRate, dot3adAggOctetsRxOK=dot3adAggOctetsRxOK, dot3adAggPortStatsLACPDUsTx=dot3adAggPortStatsLACPDUsTx, dot3adDrniIntraPortalPortProtocolDA=dot3adDrniIntraPortalPortProtocolDA, dot3adAggPortStatsGroup=dot3adAggPortStatsGroup, dot3adAggPortIndex=dot3adAggPortIndex, dot3adIPPOperState=dot3adIPPOperState, dot3adDrniNetFrameIdValue=dot3adDrniNetFrameIdValue, dot3adAggPortListTable=dot3adAggPortListTable, dot3adAggPortTable=dot3adAggPortTable, dot3adAggPartnerAdminConvServiceMappingDigest=dot3adAggPartnerAdminConvServiceMappingDigest, dot3adAggPortStatsMarkerResponsePDUsRx=dot3adAggPortStatsMarkerResponsePDUsRx, dot3adDrniTable=dot3adDrniTable, dot3adAggPortDebugLastRxTime=dot3adAggPortDebugLastRxTime, dot3adDrniIntraPortalLinkList=dot3adDrniIntraPortalLinkList, dot3adAggXEntry=dot3adAggXEntry, PortalLinkList=PortalLinkList, dot3adIPPDebugDifferPortalReason=dot3adIPPDebugDifferPortalReason, dot3adAggPortDebugPartnerSyncTransitionCount=dot3adAggPortDebugPartnerSyncTransitionCount, dot3adAggPortStatsMarkerPDUsTx=dot3adAggPortStatsMarkerPDUsTx, dot3adAggAdminServiceConversationMapId=dot3adAggAdminServiceConversationMapId, dot3adAggConversationAdminLinkId=dot3adAggConversationAdminLinkId, dot3adAggPartnerSystemID=dot3adAggPartnerSystemID, dot3adIPPGroup=dot3adIPPGroup, dot3adAggFramesDiscardedOnRx=dot3adAggFramesDiscardedOnRx, dot3adAggPartnerOperKey=dot3adAggPartnerOperKey, dot3adAggPortSelectedAggID=dot3adAggPortSelectedAggID, dot3adAggPortEntry=dot3adAggPortEntry, dot3adAggPortStatsTable=dot3adAggPortStatsTable, dot3adAggPortStatsEntry=dot3adAggPortStatsEntry, dot3adAggPortStatsMarkerPDUsRx=dot3adAggPortStatsMarkerPDUsRx, dot3adDrni=dot3adDrni, dot3adAggPortDebugXGroup=dot3adAggPortDebugXGroup, dot3adDrniNeighborAdminPortAlgorithm=dot3adDrniNeighborAdminPortAlgorithm, dot3adIPPDebugEntry=dot3adIPPDebugEntry, dot3adAggCompliance=dot3adAggCompliance, dot3adDrniName=dot3adDrniName, dot3adAggPortPartnerOperPort=dot3adAggPortPartnerOperPort, dot3adAggPortProtocolDAGroup=dot3adAggPortProtocolDAGroup, dot3adAggActorAdminKey=dot3adAggActorAdminKey, dot3adAggPortListEntry=dot3adAggPortListEntry, dot3adDrniPSI=dot3adDrniPSI, dot3adDrniDescription=dot3adDrniDescription, dot3adAggPortStatsIllegalRx=dot3adAggPortStatsIllegalRx, dot3adAggPortDebugPartnerCDSChurnCount=dot3adAggPortDebugPartnerCDSChurnCount, dot3adPerServiceFrameDistGroup=dot3adPerServiceFrameDistGroup, dot3adAggGroups=dot3adAggGroups, dot3adIPP=dot3adIPP, dot3adAggPartnerSystemPriority=dot3adAggPartnerSystemPriority, dot3adAggPortActorAdminState=dot3adAggPortActorAdminState, dot3adAggOptionalGroup=dot3adAggOptionalGroup, dot3adIPPDebugLastRxTime=dot3adIPPDebugLastRxTime, dot3adAggPortXTable=dot3adAggPortXTable, dot3adAggIndex=dot3adAggIndex, dot3adAggUnknownProtocolFrames=dot3adAggUnknownProtocolFrames, dot3adIPPGatewayConversationDirection=dot3adIPPGatewayConversationDirection, dot3adIPPStatsDRCPDUsRx=dot3adIPPStatsDRCPDUsRx, ChurnState=ChurnState, dot3adAggPortSecondXTable=dot3adAggPortSecondXTable, dot3adDrniPortalAddr=dot3adDrniPortalAddr, dot3adAggOperState=dot3adAggOperState, dot3adAggPortDebugActorCDSChurnCount=dot3adAggPortDebugActorCDSChurnCount, dot3adAggPort=dot3adAggPort, dot3adAggPortPartnerAdminSystemID=dot3adAggPortPartnerAdminSystemID, dot3adDrniDRPortConversationPasses=dot3adDrniDRPortConversationPasses, dot3adAggPortDebugActorCDSChurnState=dot3adAggPortDebugActorCDSChurnState, dot3adAggConversationAdminLinkEntry=dot3adAggConversationAdminLinkEntry, dot3adAggActorSystemID=dot3adAggActorSystemID, dot3adAggConversationAdminLinkList=dot3adAggConversationAdminLinkList, dot3adDrniIPLEncapMapTable=dot3adDrniIPLEncapMapTable, dot3adAggMulticastFramesTxOK=dot3adAggMulticastFramesTxOK, dot3adDrniPortConversationControl=dot3adDrniPortConversationControl, dot3adIPPStatsEntry=dot3adIPPStatsEntry, dot3adAggAdminState=dot3adAggAdminState, dot3adAggDescription=dot3adAggDescription, dot3adDrniEncapsulationMethod=dot3adDrniEncapsulationMethod, dot3adAggPortPartnerOperKey=dot3adAggPortPartnerOperKey, dot3adAggPortOperConversationPasses=dot3adAggPortOperConversationPasses, dot3adIPPStatsGroup=dot3adIPPStatsGroup, dot3adAggPortActorAdminKey=dot3adAggPortActorAdminKey, dot3adAggLinkUpNotification=dot3adAggLinkUpNotification, dot3adAggPortDebugActorChurnCount=dot3adAggPortDebugActorChurnCount, dot3adAggPortDebugMuxState=dot3adAggPortDebugMuxState, dot3adIPPStatsIllegalRx=dot3adIPPStatsIllegalRx, dot3adAggPortActorPort=dot3adAggPortActorPort, dot3adDrniIPLFrameIdValue=dot3adDrniIPLFrameIdValue, dot3adAggAdminServiceConversationMapTable=dot3adAggAdminServiceConversationMapTable, dot3adAggPortAttachedAggID=dot3adAggPortAttachedAggID, dot3adAggXGroup=dot3adAggXGroup, dot3adAggAggregateOrIndividual=dot3adAggAggregateOrIndividual, DrcpState=DrcpState, dot3adAggLinkUpDownNotificationEnable=dot3adAggLinkUpDownNotificationEnable, lagMIBNotifications=lagMIBNotifications, dot3adAggPortListGroup=dot3adAggPortListGroup, dot3adAggPortStatsUnknownRx=dot3adAggPortStatsUnknownRx, dot3adIPPDebugTable=dot3adIPPDebugTable, dot3adDrniGroup=dot3adDrniGroup, dot3adAggPortAggregateOrIndividual=dot3adAggPortAggregateOrIndividual, dot3adDrniNetEncapMapEntry=dot3adDrniNetEncapMapEntry, dot3adAggPortPartnerAdminLinkNumberId=dot3adAggPortPartnerAdminLinkNumberId, dot3adAggPortActorPortPriority=dot3adAggPortActorPortPriority, dot3adAggPortActorOperState=dot3adAggPortActorOperState, dot3adAggPortWTRTime=dot3adAggPortWTRTime, dot3adAggFramesTxOK=dot3adAggFramesTxOK, dot3adAggPortXEntry=dot3adAggPortXEntry, dot3adTablesLastChangedGroup=dot3adTablesLastChangedGroup, dot3adAggPortDebugPartnerCDSChurnState=dot3adAggPortDebugPartnerCDSChurnState, dot3adIPPTimeOfLastOperChange=dot3adIPPTimeOfLastOperChange, dot3adAggNotificationGroup=dot3adAggNotificationGroup, dot3adAggPortActorOperKey=dot3adAggPortActorOperKey, dot3adAggPortProtocolDA=dot3adAggPortProtocolDA, dot3adAggPortSecondXEntry=dot3adAggPortSecondXEntry, dot3adAggPartnerAdminPortAlgorithm=dot3adAggPartnerAdminPortAlgorithm, dot3adAggPortDebugGroup=dot3adAggPortDebugGroup, dot3adIPPDebugGroup=dot3adIPPDebugGroup, dot3adDrniGatewayAlgorithm=dot3adDrniGatewayAlgorithm, PYSNMP_MODULE_ID=lagMIB, LacpKey=LacpKey, lagMIBObjects=lagMIBObjects, dot3adAggFramesDiscardedOnTx=dot3adAggFramesDiscardedOnTx, dot3adAggPortDebugPartnerChurnCount=dot3adAggPortDebugPartnerChurnCount, dot3adDrniNeighborAdminConvGatewayListDigest=dot3adDrniNeighborAdminConvGatewayListDigest, dot3adAggPortPartnerAdminKey=dot3adAggPortPartnerAdminKey, dot3adAggCompliances=dot3adAggCompliances, dot3adAggTable=dot3adAggTable, ServiceIdList=ServiceIdList, lagMIB=lagMIB, dot3adAggPortStatsMarkerResponsePDUsTx=dot3adAggPortStatsMarkerResponsePDUsTx, dot3adAggPortPartnerOperPortPriority=dot3adAggPortPartnerOperPortPriority, dot3adAggTimeOfLastOperChange=dot3adAggTimeOfLastOperChange, dot3adAggFramesWithTxErrors=dot3adAggFramesWithTxErrors, dot3adIPPAdminState=dot3adIPPAdminState, dot3adAggPortDebugXTable=dot3adAggPortDebugXTable, dot3adAggPortGroup=dot3adAggPortGroup, dot3adAggConformance=dot3adAggConformance, dot3adAggBroadcastFramesTxOK=dot3adAggBroadcastFramesTxOK, DrniConvAdminGatewayList=DrniConvAdminGatewayList, dot3adDrniIPLEncapMapEntry=dot3adDrniIPLEncapMapEntry, dot3adDrniNetEncapMapTable=dot3adDrniNetEncapMapTable, dot3adAggEntry=dot3adAggEntry, dot3adAggFramesWithRxErrors=dot3adAggFramesWithRxErrors, dot3adAggPortLinkNumberId=dot3adAggPortLinkNumberId, dot3adAggPortDebugRxState=dot3adAggPortDebugRxState, dot3adAggPortDebugXEntry=dot3adAggPortDebugXEntry, dot3adDrniAggregator=dot3adDrniAggregator, dot3adAggPortOperConversationCollected=dot3adAggPortOperConversationCollected, dot3adDrniConvAdminGatewayList=dot3adDrniConvAdminGatewayList, dot3adAggConversationAdminLinkTable=dot3adAggConversationAdminLinkTable, dot3adIPPStatsTable=dot3adIPPStatsTable, dot3adAggCollectorMaxDelay=dot3adAggCollectorMaxDelay, dot3adDrniEntry=dot3adDrniEntry, dot3adAggActorSystemPriority=dot3adAggActorSystemPriority, dot3adAggXTable=dot3adAggXTable, dot3adAggName=dot3adAggName, dot3adAggPortDebugActorChangeCount=dot3adAggPortDebugActorChangeCount, dot3adAggFramesRxOK=dot3adAggFramesRxOK, dot3adAggPortDebugActorSyncTransitionCount=dot3adAggPortDebugActorSyncTransitionCount, dot3adDrniPortalPriority=dot3adDrniPortalPriority, dot3adAggGroup=dot3adAggGroup, dot3adAggPortDebugActorChurnState=dot3adAggPortDebugActorChurnState, dot3adIPPAttributeEntry=dot3adIPPAttributeEntry, dot3adAggPartnerAdminPortConversationListDigest=dot3adAggPartnerAdminPortConversationListDigest, dot3adAggPortDebugTable=dot3adAggPortDebugTable, dot3adAggPortDebugMuxReason=dot3adAggPortDebugMuxReason, dot3adAggBroadcastFramesRxOK=dot3adAggBroadcastFramesRxOK)
