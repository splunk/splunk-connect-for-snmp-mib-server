#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMGENERIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMGENERIC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:26:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, TimeTicks, Gauge32, ModuleIdentity, iso, NotificationType, Integer32, Counter64, ObjectIdentity, Bits, Counter32, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "Gauge32", "ModuleIdentity", "iso", "NotificationType", "Integer32", "Counter64", "ObjectIdentity", "Bits", "Counter32", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ncm_generic, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-generic")
ncmNodeCurrTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1001), )
if mibBuilder.loadTexts: ncmNodeCurrTable.setStatus('mandatory')
ncmNodeCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmNodeCurrIndex"))
if mibBuilder.loadTexts: ncmNodeCurrEntry.setStatus('mandatory')
ncmNodeCurrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNodeCurrIndex.setStatus('mandatory')
ncmNodeCurrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1001, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNodeCurrAddress.setStatus('mandatory')
ncmActiveNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmActiveNodeStatus.setStatus('mandatory')
ncmNodeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002), )
if mibBuilder.loadTexts: ncmNodeInfoTable.setStatus('mandatory')
ncmNodeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmNodeIndex"))
if mibBuilder.loadTexts: ncmNodeInfoEntry.setStatus('mandatory')
ncmNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNodeIndex.setStatus('mandatory')
ncmNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNodeAddress.setStatus('mandatory')
ncmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmTime.setStatus('mandatory')
ncmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDate.setStatus('mandatory')
ncmNodeShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNodeShelf.setStatus('mandatory')
ncmNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNodeID.setStatus('mandatory')
ncmControllerEqID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1002, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmControllerEqID.setStatus('mandatory')
ncmShelfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003), )
if mibBuilder.loadTexts: ncmShelfInfoTable.setStatus('mandatory')
ncmShelfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfIndex"))
if mibBuilder.loadTexts: ncmShelfInfoEntry.setStatus('mandatory')
ncmShelfNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfNIDIndex.setStatus('mandatory')
ncmShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfIndex.setStatus('mandatory')
ncmShelfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfNumber.setStatus('mandatory')
ncmShelfHardware = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 52, 54))).clone(namedValues=NamedValues(("uninstalled", 1), ("duallineshelf", 2), ("multilineshelf", 3), ("nb-2200lineshelf", 4), ("nb-2200-4ilineshelf", 10), ("nb-2200qlineshelf", 52), ("nb-2200-4iqlineshelf", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfHardware.setStatus('mandatory')
ncmNumberofCards = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumberofCards.setStatus('mandatory')
ncmListCardsInShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1003, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListCardsInShelf.setStatus('mandatory')
ncmCardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004), )
if mibBuilder.loadTexts: ncmCardInfoTable.setStatus('mandatory')
ncmCardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCardNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCardIndex"))
if mibBuilder.loadTexts: ncmCardInfoEntry.setStatus('mandatory')
ncmCardNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardNIDIndex.setStatus('mandatory')
ncmCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardIndex.setStatus('mandatory')
ncmFirmwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(48, 64, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 77, 80, 81, 82, 83, 85, 86, 87, 88, 96, 97, 98, 112, 113, 114, 115, 116, 117, 119))).clone(namedValues=NamedValues(("card-sigma-sam", 48), ("card-sigma-sam-1", 64), ("card-sigma-csu", 49), ("card-sigma-dsu", 50), ("card-sigma-ddsu", 51), ("card-sigma-tu", 52), ("card-sigma-smds", 53), ("card-sigma-idc-sam", 54), ("card-sigma-idc", 55), ("card-ct1-sam", 56), ("card-ct1-csu", 57), ("card-ct1-dsu", 58), ("card-ct1-tu", 60), ("card-sigma-dsu-dds", 61), ("card-sigma-dsu-dsu", 62), ("card-sigma-aps", 63), ("card-sigma-vcu", 77), ("e1-ace-firmware", 80), ("t1-ace-firmware", 81), ("quad-T1-ace-firmware", 82), ("quad-E1-ace-firmware", 83), ("imux-tabs-firmware", 85), ("ace-dual-t1-firmware", 86), ("ace-dual-e1-firmware", 87), ("ds3-cdsu-firmware", 88), ("ncm-t1-firmware", 96), ("card-sigma-diu-2144", 97), ("card-sigma-dsu-2131", 98), ("ace-fw-isdn-T1", 112), ("ace-fw-isdn-E1", 113), ("quad-fw-isdn-T1", 114), ("quad-fw-isdn-E1", 115), ("dual-port-ds3", 116), ("m13-2113-firmware", 117), ("imux-2164-firmware", 119)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmFirmwareType.setStatus('mandatory')
ncmCimType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 32, 33, 34, 35, 36, 56, 37, 48, 49, 50, 51, 52, 62, 64, 65, 82, 83, 88, 89, 90, 255))).clone(namedValues=NamedValues(("cim-2001-e1", 16), ("cim-2002-e1", 17), ("cim-2003-e1", 18), ("cim-2004-e1", 19), ("cim-2005-e1", 20), ("cim-2006-e1", 21), ("cim-nim-2000", 22), ("cim-2101-t1", 32), ("cim-2102-t1", 33), ("cim-2164", 34), ("cim-2168", 35), ("cim-2162", 36), ("cim-2061", 56), ("cim-2065", 37), ("cim-hssi", 48), ("cim-v35", 49), ("cim-eia530A", 50), ("cim-eia530", 51), ("cim-rs449", 52), ("cim-hsm-2113", 62), ("cim-vcu-4W", 64), ("cim-vcu-2W", 65), ("cim-dim-2435", 82), ("cim-dim-2530", 83), ("cim-dim-2035", 88), ("cim-dim-2449", 89), ("cim-dim-2232", 90), ("cim-uninstall", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCimType.setStatus('mandatory')
ncmClearCardInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1004, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmClearCardInfo.setStatus('mandatory')
ncmShelfSyncSourceTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005), )
if mibBuilder.loadTexts: ncmShelfSyncSourceTable.setStatus('mandatory')
ncmShelfSyncSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfSyncNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfSyncSourceIndex"))
if mibBuilder.loadTexts: ncmShelfSyncSourceEntry.setStatus('mandatory')
ncmShelfSyncNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfSyncNIDIndex.setStatus('mandatory')
ncmShelfSyncSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfSyncSourceIndex.setStatus('mandatory')
ncmSourceOneShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceOneShelfNum.setStatus('mandatory')
ncmSourceOneCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceOneCardNum.setStatus('mandatory')
ncmSourceOneClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("ncmdata-port1", 9), ("ncmdata-port2", 10), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceOneClockRef.setStatus('mandatory')
ncmAutoRestore1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAutoRestore1.setStatus('mandatory')
ncmSourceTwoShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceTwoShelfNum.setStatus('mandatory')
ncmSourceTwoCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceTwoCardNum.setStatus('mandatory')
ncmSourceTwoClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("ncmdata-port1", 9), ("ncmdata-port2", 10), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceTwoClockRef.setStatus('mandatory')
ncmAutoRestore2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAutoRestore2.setStatus('mandatory')
ncmSourceThreeShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceThreeShelfNum.setStatus('mandatory')
ncmSourceThreeCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceThreeCardNum.setStatus('mandatory')
ncmSourceThreeClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("ncmdata-port1", 9), ("ncmdata-port2", 10), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceThreeClockRef.setStatus('mandatory')
ncmAutoRestore3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAutoRestore3.setStatus('mandatory')
ncmShelfCurrentSyncSource = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1005, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source1", 1), ("source2", 2), ("source3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmShelfCurrentSyncSource.setStatus('mandatory')
ncmCardSyncSourceTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006), )
if mibBuilder.loadTexts: ncmCardSyncSourceTable.setStatus('mandatory')
ncmCardSyncSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCardSyncNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCardSyncSourceIndex"))
if mibBuilder.loadTexts: ncmCardSyncSourceEntry.setStatus('mandatory')
ncmCardSyncNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardSyncNIDIndex.setStatus('mandatory')
ncmCardSyncSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardSyncSourceIndex.setStatus('mandatory')
ncmCardReceiveClockFromShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardReceiveClockFromShelf.setStatus('mandatory')
ncmCardSourceOneShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceOneShelfNum.setStatus('mandatory')
ncmCardSourceOneCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceOneCardNum.setStatus('mandatory')
ncmCardSourceOneClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("data-port1", 9), ("data-port2", 10), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceOneClockRef.setStatus('mandatory')
ncmCardAutoRestore1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardAutoRestore1.setStatus('mandatory')
ncmCardSourceTwoShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceTwoShelfNum.setStatus('mandatory')
ncmCardSourceTwoCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceTwoCardNum.setStatus('mandatory')
ncmCardSourceTwoClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("data-port1", 9), ("data-port2", 10), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceTwoClockRef.setStatus('mandatory')
ncmCardAutoRestore2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardAutoRestore2.setStatus('mandatory')
ncmCardSourceThreeShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceThreeShelfNum.setStatus('mandatory')
ncmCardSourceThreeCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceThreeCardNum.setStatus('mandatory')
ncmCardSourceThreeClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("data-port1", 9), ("data-port2", 10), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardSourceThreeClockRef.setStatus('mandatory')
ncmCardAutoRestore3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardAutoRestore3.setStatus('mandatory')
ncmCardCurrentSyncSource = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1006, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source1", 1), ("source2", 2), ("source3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCardCurrentSyncSource.setStatus('mandatory')
ncmIDPromTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007), )
if mibBuilder.loadTexts: ncmIDPromTable.setStatus('mandatory')
ncmIDPromEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmIDPromNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmIDPromIndex"))
if mibBuilder.loadTexts: ncmIDPromEntry.setStatus('mandatory')
ncmIDPromNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmIDPromNIDIndex.setStatus('mandatory')
ncmIDPromIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmIDPromIndex.setStatus('mandatory')
ncmCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ace-card", 1), ("quad-card-for-imux", 2), ("dual-csu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardType.setStatus('mandatory')
ncmCardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardRevision.setStatus('mandatory')
ncmCardDate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardDate.setStatus('mandatory')
ncmCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCardSerialNumber.setStatus('mandatory')
ncmManufacturePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmManufacturePartNumber.setStatus('mandatory')
ncmVendorCageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmVendorCageCode.setStatus('mandatory')
ncmIDCimType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 32, 33, 34, 35, 36, 56, 37, 22, 255))).clone(namedValues=NamedValues(("cIM29004", 16), ("cIM29005", 17), ("cIM29006", 18), ("cIM29007", 19), ("cIM29008", 20), ("cIM29009", 21), ("cIM29010", 32), ("cIM29011", 33), ("cIM-2164", 34), ("cIM-2168", 35), ("cIM29003", 36), ("cIM29002", 56), ("cIM29001", 37), ("nIM2000", 22), ("cIM-UNINSTALLED", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmIDCimType.setStatus('mandatory')
ncmCimRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCimRevision.setStatus('mandatory')
ncmCimDate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCimDate.setStatus('mandatory')
ncmCimSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCimSerialNumber.setStatus('mandatory')
ncmCimManufacturePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCimManufacturePartNumber.setStatus('mandatory')
ncmCimVendorCageCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1007, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCimVendorCageCode.setStatus('mandatory')
ncmE1PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008), )
if mibBuilder.loadTexts: ncmE1PortConfigTable.setStatus('mandatory')
ncmE1PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1ConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PortLineIndex"))
if mibBuilder.loadTexts: ncmE1PortConfigEntry.setStatus('mandatory')
ncmE1ConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1ConfigNIDIndex.setStatus('mandatory')
ncmE1PortLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLineIndex.setStatus('mandatory')
ncmE1PortCRC4 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortCRC4.setStatus('mandatory')
ncmE1PortCarrierFailureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortCarrierFailureAlarm.setStatus('mandatory')
ncmE1PortFaseAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minor", 1), ("major", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortFaseAlarm.setStatus('mandatory')
ncmE1PortInbandISDNEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disablebothinbandisdn", 1), ("enableinband", 2), ("enableisdn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortInbandISDNEnableDisable.setStatus('mandatory')
ncmE1PortRepeaterLoopbackTimeoutEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortRepeaterLoopbackTimeoutEnable.setStatus('mandatory')
ncmE1PortFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cAS", 1), ("cCS", 2), ("thirty-one-Ch", 3), ("g703", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortFraming.setStatus('mandatory')
ncmE1PortRepeaterLoopbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortRepeaterLoopbackTimeout.setStatus('mandatory')
ncmE1PortCarrierFailureAlarmDeclareTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortCarrierFailureAlarmDeclareTime.setStatus('mandatory')
ncmE1PortServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("out-of-service", 1), ("in-service", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortServiceState.setStatus('mandatory')
ncmE1PortIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1PortIdlePattern.setStatus('mandatory')
ncmE1TimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TimeSlot.setStatus('mandatory')
ncmE1TimeSlotSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1008, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1TimeSlotSelect.setStatus('mandatory')
ncmE1PortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009), )
if mibBuilder.loadTexts: ncmE1PortStatusTable.setStatus('mandatory')
ncmE1PortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PortStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PortStatusIndex"))
if mibBuilder.loadTexts: ncmE1PortStatusEntry.setStatus('mandatory')
ncmE1PortStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortStatusNIDIndex.setStatus('mandatory')
ncmE1PortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortStatusIndex.setStatus('mandatory')
ncmE1PortCRC4Error = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortCRC4Error.setStatus('mandatory')
ncmE1PortFramingSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortFramingSlip.setStatus('mandatory')
ncmE1PortRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortRAI.setStatus('mandatory')
ncmE1PortLOFA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLOFA.setStatus('mandatory')
ncmE1PortAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortAIS.setStatus('mandatory')
ncmE1PortLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLOS.setStatus('mandatory')
ncmE1PortBPVThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortBPVThresholdExceeded.setStatus('mandatory')
ncmE1BlockErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1BlockErrorCounter.setStatus('mandatory')
ncmE1CodeViolationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("count-HDB3", 1), ("count-FEBE", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CodeViolationMode.setStatus('mandatory')
ncmE1CurrentHDB3ORFEBEErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentHDB3ORFEBEErrorCounts.setStatus('mandatory')
ncmE1CurrentFrameErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentFrameErrorCounts.setStatus('mandatory')
ncmE1CurrentCRC4ErrorCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentCRC4ErrorCounts.setStatus('mandatory')
ncmE1ResetPerfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1ResetPerfCount.setStatus('mandatory')
ncmE1PortSendRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortSendRAI.setStatus('mandatory')
ncmE1PortSendAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortSendAIS.setStatus('mandatory')
ncmE1PortRFA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortRFA.setStatus('mandatory')
ncmE1PortBERThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortBERThresholdExceeded.setStatus('mandatory')
ncmE1PortLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLLB.setStatus('mandatory')
ncmE1PortPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortPLB.setStatus('mandatory')
ncmE1PortLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLOC.setStatus('mandatory')
ncmE1PortTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1009, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("three-24", 2), ("qRSS", 3), ("two-n-20-1", 4), ("one-in-8", 5), ("two-n-15-1", 6), ("all-zeros", 7), ("fifty-octets", 8), ("all-ones", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortTestPattern.setStatus('mandatory')
ncmE1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010), )
if mibBuilder.loadTexts: ncmE1CurrentTable.setStatus('mandatory')
ncmE1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1CurrentNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1CurrentIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1CurrentEndType"))
if mibBuilder.loadTexts: ncmE1CurrentEntry.setStatus('mandatory')
ncmE1CurrentNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentNIDIndex.setStatus('mandatory')
ncmE1CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentIndex.setStatus('mandatory')
ncmE1CurrentEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentEndType.setStatus('mandatory')
ncmE1CRC4Status = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CRC4Status.setStatus('mandatory')
ncmE1Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1Timestamp.setStatus('mandatory')
ncmE1Timestamp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1Timestamp1.setStatus('mandatory')
ncmE1CurrentIntervalSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentIntervalSec.setStatus('mandatory')
ncmE1CurrentASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentASs.setStatus('mandatory')
ncmE1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentUASs.setStatus('mandatory')
ncmE1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentESs.setStatus('mandatory')
ncmE1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentSESs.setStatus('mandatory')
ncmE1CurrentFAE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentFAE.setStatus('mandatory')
ncmE1CurrentBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentBBE.setStatus('mandatory')
ncmE1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentSEFSs.setStatus('mandatory')
ncmE1CurrentAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentAISSs.setStatus('mandatory')
ncmE1CurrentLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentLOSSs.setStatus('mandatory')
ncmE1CurrentLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentLOFSs.setStatus('mandatory')
ncmE1CurrentOOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentOOFSs.setStatus('mandatory')
ncmE1CurrentCVPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentCVPath.setStatus('mandatory')
ncmE1CurrentCVLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentCVLine.setStatus('mandatory')
ncmE1CurrentESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentESsLine.setStatus('mandatory')
ncmE1CurrentSESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentSESsLine.setStatus('mandatory')
ncmE1CurrentFECPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentFECPath.setStatus('mandatory')
ncmE1CurrentFECLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1010, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CurrentFECLine.setStatus('mandatory')
ncmE1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011), )
if mibBuilder.loadTexts: ncmE1IntervalTable.setStatus('mandatory')
ncmE1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1IntervalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1IntervalIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1IntervalEndType"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1IntervalNumber"))
if mibBuilder.loadTexts: ncmE1IntervalEntry.setStatus('mandatory')
ncmE1IntervalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalNIDIndex.setStatus('mandatory')
ncmE1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalIndex.setStatus('mandatory')
ncmE1IntervalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalEndType.setStatus('mandatory')
ncmE1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalNumber.setStatus('mandatory')
ncmE1IntervalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalASs.setStatus('mandatory')
ncmE1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalUASs.setStatus('mandatory')
ncmE1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalESs.setStatus('mandatory')
ncmE1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalSESs.setStatus('mandatory')
ncmE1IntervalFAE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalFAE.setStatus('mandatory')
ncmE1IntervalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalBBE.setStatus('mandatory')
ncmE1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalSEFSs.setStatus('mandatory')
ncmE1IntervalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalAISSs.setStatus('mandatory')
ncmE1IntervalLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalLOSSs.setStatus('mandatory')
ncmE1IntervalLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalLOFSs.setStatus('mandatory')
ncmE1IntervalOOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalOOFSs.setStatus('mandatory')
ncmE1IntervalCVPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalCVPath.setStatus('mandatory')
ncmE1IntervalCVLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalCVLine.setStatus('mandatory')
ncmE1IntervalESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalESsLine.setStatus('mandatory')
ncmE1IntervalSESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalSESsLine.setStatus('mandatory')
ncmE1IntervalFECPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalFECPath.setStatus('mandatory')
ncmE1IntervalFECLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1011, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1IntervalFECLine.setStatus('mandatory')
ncmE1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012), )
if mibBuilder.loadTexts: ncmE1TotalTable.setStatus('mandatory')
ncmE1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1TotalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1TotalIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1TotalEndType"))
if mibBuilder.loadTexts: ncmE1TotalEntry.setStatus('mandatory')
ncmE1TotalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalNIDIndex.setStatus('mandatory')
ncmE1TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalIndex.setStatus('mandatory')
ncmE1TotalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalEndType.setStatus('mandatory')
ncmE1NumberOfValidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1NumberOfValidInterval.setStatus('mandatory')
ncmE1TotalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalASs.setStatus('mandatory')
ncmE1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalUASs.setStatus('mandatory')
ncmE1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalESs.setStatus('mandatory')
ncmE1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalSESs.setStatus('mandatory')
ncmE1TotalFAE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalFAE.setStatus('mandatory')
ncmE1TotalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalBBE.setStatus('mandatory')
ncmE1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalSEFSs.setStatus('mandatory')
ncmE1TotalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalAISSs.setStatus('mandatory')
ncmE1TotalLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalLOSSs.setStatus('mandatory')
ncmE1TotalLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalLOFSs.setStatus('mandatory')
ncmE1TotalOOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalOOFSs.setStatus('mandatory')
ncmE1TotalCVPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalCVPath.setStatus('mandatory')
ncmE1TotalCVLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalCVLine.setStatus('mandatory')
ncmE1TotalESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalESsLine.setStatus('mandatory')
ncmE1TotalSESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalSESsLine.setStatus('mandatory')
ncmE1TotalFECPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalFECPath.setStatus('mandatory')
ncmE1TotalFECLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1012, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TotalFECLine.setStatus('mandatory')
ncmE1PrevTotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013), )
if mibBuilder.loadTexts: ncmE1PrevTotalTable.setStatus('mandatory')
ncmE1PrevTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PrevTotalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PrevTotalIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PrevTotalEndType"))
if mibBuilder.loadTexts: ncmE1PrevTotalEntry.setStatus('mandatory')
ncmE1PrevTotalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalNIDIndex.setStatus('mandatory')
ncmE1PrevTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalIndex.setStatus('mandatory')
ncmE1PrevTotalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalEndType.setStatus('mandatory')
ncmE1PrevTotalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalASs.setStatus('mandatory')
ncmE1PrevTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalUASs.setStatus('mandatory')
ncmE1PrevTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalESs.setStatus('mandatory')
ncmE1PrevTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalSESs.setStatus('mandatory')
ncmE1PrevTotalFAE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalFAE.setStatus('mandatory')
ncmE1PrevTotalBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalBBE.setStatus('mandatory')
ncmE1PrevTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalSEFSs.setStatus('mandatory')
ncmE1PrevTotalAISSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalAISSs.setStatus('mandatory')
ncmE1PrevTotalLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalLOSSs.setStatus('mandatory')
ncmE1PrevTotalLOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalLOFSs.setStatus('mandatory')
ncmE1PrevTotalOOFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalOOFSs.setStatus('mandatory')
ncmE1PrevTotalCVPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalCVPath.setStatus('mandatory')
ncmE1PrevTotalCVLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalCVLine.setStatus('mandatory')
ncmE1PrevTotalESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalESsLine.setStatus('mandatory')
ncmE1PrevTotalSESsLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalSESsLine.setStatus('mandatory')
ncmE1PrevTotalFECPath = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalFECPath.setStatus('mandatory')
ncmE1PrevTotalFECLine = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1013, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PrevTotalFECLine.setStatus('mandatory')
ncmE1PerformanceSnapShotTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014), )
if mibBuilder.loadTexts: ncmE1PerformanceSnapShotTable.setStatus('mandatory')
ncmE1PerformanceSnapShotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1SnapShotNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1SnapShotIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1SnapShotEndType"))
if mibBuilder.loadTexts: ncmE1PerformanceSnapShotEntry.setStatus('mandatory')
ncmE1SnapShotNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1SnapShotNIDIndex.setStatus('mandatory')
ncmE1SnapShotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1SnapShotIndex.setStatus('mandatory')
ncmE1SnapShotEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1SnapShotEndType.setStatus('mandatory')
ncmE1SnapShot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1SnapShot.setStatus('mandatory')
ncmE1TimeStampSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TimeStampSec.setStatus('mandatory')
ncmE1TimeMilliSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1TimeMilliSec.setStatus('mandatory')
ncmE1SecInCurrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1SecInCurrInterval.setStatus('mandatory')
ncmE1ResetPerfReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1014, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1ResetPerfReg.setStatus('mandatory')
ncmE1PortLatchedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015), )
if mibBuilder.loadTexts: ncmE1PortLatchedStatusTable.setStatus('mandatory')
ncmE1PortLatchedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PortLatchedStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1PortLatchedStatusIndex"))
if mibBuilder.loadTexts: ncmE1PortLatchedStatusEntry.setStatus('mandatory')
ncmE1PortLatchedStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedStatusNIDIndex.setStatus('mandatory')
ncmE1PortLatchedStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedStatusIndex.setStatus('mandatory')
ncmE1PortLatchedCRC4Error = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedCRC4Error.setStatus('mandatory')
ncmE1PortLatchedFramingSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedFramingSlip.setStatus('mandatory')
ncmE1PortLatchedRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedRAI.setStatus('mandatory')
ncmE1PortLatchedLOFA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedLOFA.setStatus('mandatory')
ncmE1PortLatchedAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedAIS.setStatus('mandatory')
ncmE1PortLatchedLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedLOS.setStatus('mandatory')
ncmE1PortLatchedBPVThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1015, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1PortLatchedBPVThresholdExceeded.setStatus('mandatory')
ncmE1ThresholdStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016), )
if mibBuilder.loadTexts: ncmE1ThresholdStatusTable.setStatus('mandatory')
ncmE1ThresholdStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1ThresholdStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1ThresholdStatusIndex"))
if mibBuilder.loadTexts: ncmE1ThresholdStatusEntry.setStatus('mandatory')
ncmE1ThresholdStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1ThresholdStatusNIDIndex.setStatus('mandatory')
ncmE1ThresholdStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1ThresholdStatusIndex.setStatus('mandatory')
ncmE1CRCThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CRCThreshold.setStatus('mandatory')
ncmE1CRCExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1CRCExceeded.setStatus('mandatory')
ncmE1SESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1SESThreshold.setStatus('mandatory')
ncmE1SESExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1SESExceeded.setStatus('mandatory')
ncmE1UASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1UASThreshold.setStatus('mandatory')
ncmE1UASExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1UASExceeded.setStatus('mandatory')
ncmE1BPVThresholdst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1BPVThresholdst.setStatus('mandatory')
ncmE1BPVExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1BPVExceeded.setStatus('mandatory')
ncmE1BERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1BERThreshold.setStatus('mandatory')
ncmE1BERExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1BERExceeded.setStatus('mandatory')
ncmE1RestoreState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("out-of-servcie", 1), ("in-servcie", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1RestoreState.setStatus('mandatory')
ncmE1LineRestoreSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1016, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1LineRestoreSec.setStatus('mandatory')
ncmT1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017), )
if mibBuilder.loadTexts: ncmT1ConfigTable.setStatus('mandatory')
ncmT1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1ConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1LineIndex"))
if mibBuilder.loadTexts: ncmT1ConfigEntry.setStatus('mandatory')
ncmT1ConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ConfigNIDIndex.setStatus('mandatory')
ncmT1LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LineIndex.setStatus('mandatory')
ncmT1CRC6 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1CRC6.setStatus('mandatory')
ncmT1FramingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sF", 1), ("eSF", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1FramingFormat.setStatus('mandatory')
ncmT1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aMI", 1), ("b8ZS", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1LineCoding.setStatus('mandatory')
ncmT1FramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cAS-BR", 1), ("cAS-CC", 2), ("cCS", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1FramingType.setStatus('mandatory')
ncmT1FDL = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1FDL.setStatus('mandatory')
ncmT1InbandISDNEnableDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disablebothinbandisdn", 1), ("enableinband", 2), ("enableisdn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1InbandISDNEnableDisable.setStatus('mandatory')
ncmT1EnableNetLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1EnableNetLoopback.setStatus('mandatory')
ncmT1EnableNetOnesDensity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1EnableNetOnesDensity.setStatus('mandatory')
ncmT1DensityPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("d80Zeros", 1), ("d15Zeros", 2), ("d12d5c80Zero", 3), ("tR-62411", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1DensityPattern.setStatus('mandatory')
ncmT1EnableRepeaterLpbkTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1EnableRepeaterLpbkTimeout.setStatus('mandatory')
ncmT1RepeaterLoopbackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1RepeaterLoopbackTimeout.setStatus('mandatory')
ncmT1UserAlarmDeclareTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1UserAlarmDeclareTime.setStatus('mandatory')
ncmT1State = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("out-of-service", 1), ("in-service", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1State.setStatus('mandatory')
ncmT1NetworkLBOEQLIZ = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bldLn-0db-FT-0-133", 1), ("bldLnNeg7d5db-FT-133-266", 2), ("bldLnNeg15db-FT-266-399", 3), ("bldLnNeg22d5-FT-399-533", 4), ("fT-533-655", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1NetworkLBOEQLIZ.setStatus('mandatory')
ncmT1TimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TimeSlot.setStatus('mandatory')
ncmT1TimeSlotSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1017, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1TimeSlotSelect.setStatus('mandatory')
ncmT1PortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018), )
if mibBuilder.loadTexts: ncmT1PortStatusTable.setStatus('mandatory')
ncmT1PortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PortStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PortStatusIndex"))
if mibBuilder.loadTexts: ncmT1PortStatusEntry.setStatus('mandatory')
ncmT1PortStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortStatusNIDIndex.setStatus('mandatory')
ncmT1PortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortStatusIndex.setStatus('mandatory')
ncmT1PortCRC6Error = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortCRC6Error.setStatus('mandatory')
ncmT1PortFramingSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortFramingSlip.setStatus('mandatory')
ncmT1PortRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortRAI.setStatus('mandatory')
ncmT1PortLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortLOF.setStatus('mandatory')
ncmT1PortAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortAIS.setStatus('mandatory')
ncmT1PortLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortLOS.setStatus('mandatory')
ncmT1PortBPVThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortBPVThresholdExceeded.setStatus('mandatory')
ncmT1BlockErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1BlockErrorCounter.setStatus('mandatory')
ncmT1BERExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1BERExceeded.setStatus('mandatory')
ncmT1PortSendRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortSendRAI.setStatus('mandatory')
ncmT1PortSendAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortSendAIS.setStatus('mandatory')
ncmT1PortCGA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortCGA.setStatus('mandatory')
ncmT1PortLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortLLB.setStatus('mandatory')
ncmT1PortPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortPLB.setStatus('mandatory')
ncmT1PortLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortLOC.setStatus('mandatory')
ncmT1PortTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1018, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("three-24", 2), ("qRSS", 3), ("two-n-20-1", 4), ("one-in-8", 5), ("two-n-15-1", 6), ("all-zeros", 7), ("fifty-octets", 8), ("all-ones", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PortTestPattern.setStatus('mandatory')
ncmT1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019), )
if mibBuilder.loadTexts: ncmT1CurrentTable.setStatus('mandatory')
ncmT1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1CurrentNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1CurrentIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1CurrentEndType"))
if mibBuilder.loadTexts: ncmT1CurrentEntry.setStatus('mandatory')
ncmT1CurrentNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentNIDIndex.setStatus('mandatory')
ncmT1CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentIndex.setStatus('mandatory')
ncmT1CurrentEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentEndType.setStatus('mandatory')
ncmT1Timestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1Timestamp.setStatus('mandatory')
ncmT1Timestamp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1Timestamp1.setStatus('mandatory')
ncmT1CurrentIntervalSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentIntervalSec.setStatus('mandatory')
ncmT1CurrentASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentASs.setStatus('mandatory')
ncmT1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentUASs.setStatus('mandatory')
ncmT1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentESs.setStatus('mandatory')
ncmT1CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentBESs.setStatus('mandatory')
ncmT1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentSESs.setStatus('mandatory')
ncmT1CurrentSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentSEFs.setStatus('mandatory')
ncmT1CurrentLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentLOSs.setStatus('mandatory')
ncmT1CurrentAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentAISs.setStatus('mandatory')
ncmT1CurrentLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentLOFs.setStatus('mandatory')
ncmT1CurrentOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentOOFs.setStatus('mandatory')
ncmT1CurrentESsTypeA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentESsTypeA.setStatus('mandatory')
ncmT1CurrentSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentSASs.setStatus('mandatory')
ncmT1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentCSSs.setStatus('mandatory')
ncmT1CurrentLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentLOFC.setStatus('mandatory')
ncmT1CurrentFrameErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentFrameErrCount.setStatus('mandatory')
ncmT1CurrentErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentErrorFreeSec.setStatus('mandatory')
ncmT1CurrentDegradedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1019, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrentDegradedMin.setStatus('mandatory')
ncmT1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020), )
if mibBuilder.loadTexts: ncmT1IntervalTable.setStatus('mandatory')
ncmT1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1IntervalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1IntervalIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1IntervalEndType"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1IntervalNumber"))
if mibBuilder.loadTexts: ncmT1IntervalEntry.setStatus('mandatory')
ncmT1IntervalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalNIDIndex.setStatus('mandatory')
ncmT1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalIndex.setStatus('mandatory')
ncmT1IntervalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalEndType.setStatus('mandatory')
ncmT1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalNumber.setStatus('mandatory')
ncmT1IntervalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalASs.setStatus('mandatory')
ncmT1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalUASs.setStatus('mandatory')
ncmT1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalESs.setStatus('mandatory')
ncmT1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalBESs.setStatus('mandatory')
ncmT1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalSESs.setStatus('mandatory')
ncmT1IntervalSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalSEFs.setStatus('mandatory')
ncmT1IntervalLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalLOSs.setStatus('mandatory')
ncmT1IntervalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalAISs.setStatus('mandatory')
ncmT1IntervalLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalLOFs.setStatus('mandatory')
ncmT1IntervalOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalOOFs.setStatus('mandatory')
ncmT1IntervalESsTypeA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalESsTypeA.setStatus('mandatory')
ncmT1IntervalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalSASs.setStatus('mandatory')
ncmT1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalCSSs.setStatus('mandatory')
ncmT1IntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalLOFC.setStatus('mandatory')
ncmT1IntervalFrameErr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalFrameErr.setStatus('mandatory')
ncmT1IntervalErrFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalErrFreeSec.setStatus('mandatory')
ncmT1IntervalDegradMin = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1020, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1IntervalDegradMin.setStatus('mandatory')
ncmT1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021), )
if mibBuilder.loadTexts: ncmT1TotalTable.setStatus('mandatory')
ncmT1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1TotalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1TotalIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1TotalEndType"))
if mibBuilder.loadTexts: ncmT1TotalEntry.setStatus('mandatory')
ncmT1TotalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalNIDIndex.setStatus('mandatory')
ncmT1TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalIndex.setStatus('mandatory')
ncmT1TotalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalEndType.setStatus('mandatory')
ncmT1NumberOfValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1NumberOfValidIntervals.setStatus('mandatory')
ncmT1TotalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalASs.setStatus('mandatory')
ncmT1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalUASs.setStatus('mandatory')
ncmT1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalESs.setStatus('mandatory')
ncmT1TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalBESs.setStatus('mandatory')
ncmT1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalSESs.setStatus('mandatory')
ncmT1TotalSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalSEFs.setStatus('mandatory')
ncmT1TotalLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalLOSs.setStatus('mandatory')
ncmT1TotalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalAISs.setStatus('mandatory')
ncmT1TotalLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalLOFs.setStatus('mandatory')
ncmT1TotalOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalOOFs.setStatus('mandatory')
ncmT1TotalESsTypeA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalESsTypeA.setStatus('mandatory')
ncmT1TotalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalSASs.setStatus('mandatory')
ncmT1TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalCSSs.setStatus('mandatory')
ncmT1TotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalLOFC.setStatus('mandatory')
ncmT1TotalFrameErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalFrameErrCount.setStatus('mandatory')
ncmT1TotalErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalErrorFreeSec.setStatus('mandatory')
ncmT1TotalDegradedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1021, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TotalDegradedMin.setStatus('mandatory')
ncmT1PrevTotalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022), )
if mibBuilder.loadTexts: ncmT1PrevTotalTable.setStatus('mandatory')
ncmT1PrevTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PrevTotalNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PrevTotalIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PrevTotalEndType"))
if mibBuilder.loadTexts: ncmT1PrevTotalEntry.setStatus('mandatory')
ncmT1PrevTotalNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalNIDIndex.setStatus('mandatory')
ncmT1PrevTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalIndex.setStatus('mandatory')
ncmT1PrevTotalEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalEndType.setStatus('mandatory')
ncmT1PrevTotalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalASs.setStatus('mandatory')
ncmT1PrevTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalUASs.setStatus('mandatory')
ncmT1PrevTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalESs.setStatus('mandatory')
ncmT1PrevTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalBESs.setStatus('mandatory')
ncmT1PrevTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalSESs.setStatus('mandatory')
ncmT1PrevTotalSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalSEFs.setStatus('mandatory')
ncmT1PrevTotalLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalLOSs.setStatus('mandatory')
ncmT1PrevTotalAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalAISs.setStatus('mandatory')
ncmT1PrevTotalLOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalLOFs.setStatus('mandatory')
ncmT1PrevTotalOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalOOFs.setStatus('mandatory')
ncmT1PrevTotalESsTypeA = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalESsTypeA.setStatus('mandatory')
ncmT1PrevTotalSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalSASs.setStatus('mandatory')
ncmT1PrevTotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalCSSs.setStatus('mandatory')
ncmT1PrevTotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalLOFC.setStatus('mandatory')
ncmT1PrevTotalFrameErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalFrameErrCount.setStatus('mandatory')
ncmT1PrevTotalErrorFreeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalErrorFreeSec.setStatus('mandatory')
ncmT1PrevTotalDegradedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1022, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PrevTotalDegradedMin.setStatus('mandatory')
ncmT1PreformanceSnapShotTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023), )
if mibBuilder.loadTexts: ncmT1PreformanceSnapShotTable.setStatus('mandatory')
ncmT1PreformanceSnapShotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1SnapShotNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1SnapShotIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1SnapShotEndType"))
if mibBuilder.loadTexts: ncmT1PreformanceSnapShotEntry.setStatus('mandatory')
ncmT1SnapShotNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1SnapShotNIDIndex.setStatus('mandatory')
ncmT1SnapShotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1SnapShotIndex.setStatus('mandatory')
ncmT1SnapShotEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1SnapShotEndType.setStatus('mandatory')
ncmT1SnapShot = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1SnapShot.setStatus('mandatory')
ncmT1TimeStampSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TimeStampSec.setStatus('mandatory')
ncmT1TimeStampMilliSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1TimeStampMilliSec.setStatus('mandatory')
ncmT1CurrIntervalSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1CurrIntervalSec.setStatus('mandatory')
ncmT1ResetPerfReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1023, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1ResetPerfReg.setStatus('mandatory')
ncmAdvancedT1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024), )
if mibBuilder.loadTexts: ncmAdvancedT1ConfigTable.setStatus('mandatory')
ncmAdvancedT1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAdvancedT1NIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAdvancedT1LineIndex"))
if mibBuilder.loadTexts: ncmAdvancedT1ConfigEntry.setStatus('mandatory')
ncmAdvancedT1NIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAdvancedT1NIDIndex.setStatus('mandatory')
ncmAdvancedT1LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAdvancedT1LineIndex.setStatus('mandatory')
ncmadvfdlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terminated", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlMode.setStatus('mandatory')
ncmadvfdlStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("type-54016", 1), ("type-T1-403", 2), ("type-both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlStandard.setStatus('mandatory')
ncmadvfdlPerformanceReport = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("user", 2), ("telco", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlPerformanceReport.setStatus('mandatory')
ncmadvfdlLBEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlLBEnable.setStatus('mandatory')
ncmadvfdlLLBT1BOPMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlLLBT1BOPMsg.setStatus('mandatory')
ncmadvfdlPLBT1BOPMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlPLBT1BOPMsg.setStatus('mandatory')
ncmadvfdlIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("all-ones", 1), ("flags", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlIdlePattern.setStatus('mandatory')
ncmadvfdlMonitoringCsuType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1024, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("polling", 1), ("no-polling", 2), ("unsolicited-messages", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmadvfdlMonitoringCsuType.setStatus('mandatory')
ncmT1LatchedStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025), )
if mibBuilder.loadTexts: ncmT1LatchedStatusTable.setStatus('mandatory')
ncmT1LatchedStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1LatchedStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1LatchedStatusIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1LatchedStatusEndType"))
if mibBuilder.loadTexts: ncmT1LatchedStatusEntry.setStatus('mandatory')
ncmT1LatchedStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusNIDIndex.setStatus('mandatory')
ncmT1LatchedStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusIndex.setStatus('mandatory')
ncmT1LatchedStatusEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusEndType.setStatus('mandatory')
ncmT1LatchedStatusCRC6Error = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusCRC6Error.setStatus('mandatory')
ncmT1LatchedStatusFramingSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusFramingSlip.setStatus('mandatory')
ncmT1LatchedStatusRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusRAI.setStatus('mandatory')
ncmT1LatchedStatusLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusLOF.setStatus('mandatory')
ncmT1LatchedStatusAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusAIS.setStatus('mandatory')
ncmT1LatchedStatusLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusLOS.setStatus('mandatory')
ncmT1LatchedStatusBPVThreExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusBPVThreExcd.setStatus('mandatory')
ncmT1LatchedStatusBERExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1025, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1LatchedStatusBERExceeded.setStatus('mandatory')
ncmT1ThresholdStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026), )
if mibBuilder.loadTexts: ncmT1ThresholdStatusTable.setStatus('mandatory')
ncmT1ThresholdStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1ThresholdStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1ThresholdStatusIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1ThresholdStatusEndType"))
if mibBuilder.loadTexts: ncmT1ThresholdStatusEntry.setStatus('mandatory')
ncmT1ThresholdStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdStatusNIDIndex.setStatus('mandatory')
ncmT1ThresholdStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdStatusIndex.setStatus('mandatory')
ncmT1ThresholdStatusEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdStatusEndType.setStatus('mandatory')
ncmT1ThresholdRestoreState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("out-of-service", 1), ("in-service", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdRestoreState.setStatus('mandatory')
ncmT1ThresholdSecLineRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdSecLineRestore.setStatus('mandatory')
ncmT1ThresholdBERExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdBERExceeded.setStatus('mandatory')
ncmT1ThresholdBERCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdBERCount.setStatus('mandatory')
ncmT1ThresholdSESExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdSESExceeded.setStatus('mandatory')
ncmT1ThresholdSESCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdSESCount.setStatus('mandatory')
ncmT1ThresholdUASExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdUASExceeded.setStatus('mandatory')
ncmT1ThresholdUASCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdUASCount.setStatus('mandatory')
ncmT1ThresholdCRCExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdCRCExceeded.setStatus('mandatory')
ncmT1ThresholdCRCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdCRCCount.setStatus('mandatory')
ncmT1ThresholdBPVExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdBPVExceeded.setStatus('mandatory')
ncmT1ThresholdBPVCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1026, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1ThresholdBPVCount.setStatus('mandatory')
ncmT1PerformanceCountersTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027), )
if mibBuilder.loadTexts: ncmT1PerformanceCountersTable.setStatus('mandatory')
ncmT1PerformanceCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PerfCountNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PerfCountIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmT1PerfCountEndType"))
if mibBuilder.loadTexts: ncmT1PerformanceCountersEntry.setStatus('mandatory')
ncmT1PerfCountNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountNIDIndex.setStatus('mandatory')
ncmT1PerfCountIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountIndex.setStatus('mandatory')
ncmT1PerfCountEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountEndType.setStatus('mandatory')
ncmT1PerfCountFrameMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("d4", 1), ("esf", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountFrameMode.setStatus('mandatory')
ncmT1PerfCountCurESFErrEvt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountCurESFErrEvt.setStatus('mandatory')
ncmT1PerfCountCurBPVErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountCurBPVErrCnt.setStatus('mandatory')
ncmT1PerfCountCurFrameErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountCurFrameErrCnt.setStatus('mandatory')
ncmT1PerfCountCurCRC6Error = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmT1PerfCountCurCRC6Error.setStatus('mandatory')
ncmT1ResetPerfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1027, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmT1ResetPerfCount.setStatus('mandatory')
ncmDataPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028), )
if mibBuilder.loadTexts: ncmDataPortConfigTable.setStatus('mandatory')
ncmDataPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmDataPortConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmDataPortConfigIndex"))
if mibBuilder.loadTexts: ncmDataPortConfigEntry.setStatus('mandatory')
ncmDataPortConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortConfigNIDIndex.setStatus('mandatory')
ncmDataPortConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortConfigIndex.setStatus('mandatory')
ncmDataPortConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortConfigMode.setStatus('mandatory')
ncmDataPortConfigLineIndicate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active-low", 1), ("active-high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortConfigLineIndicate.setStatus('mandatory')
ncmDataPortLineStatusCDCC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortLineStatusCDCC.setStatus('mandatory')
ncmDataPortLineStatusCACB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortLineStatusCACB.setStatus('mandatory')
ncmDataPortLineStatusLLCJ = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortLineStatusLLCJ.setStatus('mandatory')
ncmDataPortLineStatusRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortLineStatusRLTM.setStatus('mandatory')
ncmDataPortConfigLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortConfigLOS.setStatus('mandatory')
ncmDataPortConfigServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-in-service", 1), ("in-service", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortConfigServiceState.setStatus('mandatory')
ncmDataPortConfigClkOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1028, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("st", 1), ("invertedst", 2), ("tt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDataPortConfigClkOpt.setStatus('mandatory')
ncmDataPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029), )
if mibBuilder.loadTexts: ncmDataPortStatusTable.setStatus('mandatory')
ncmDataPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmDataPortStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmDataPortStatusIndex"))
if mibBuilder.loadTexts: ncmDataPortStatusEntry.setStatus('mandatory')
ncmDataPortStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusNIDIndex.setStatus('mandatory')
ncmDataPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusIndex.setStatus('mandatory')
ncmDataPortStatusMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusMode.setStatus('mandatory')
ncmDataPortStatusLineIndicate = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active-low", 1), ("active-high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLineIndicate.setStatus('mandatory')
ncmDataPortStatusLineCDCC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLineCDCC.setStatus('mandatory')
ncmDataPortStatusLineCACB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLineCACB.setStatus('mandatory')
ncmDataPortStatusLineLLCJ = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLineLLCJ.setStatus('mandatory')
ncmDataPortStatusLineRLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLineRLTM.setStatus('mandatory')
ncmDataPortStatusLineLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLineLOS.setStatus('mandatory')
ncmDataPortStatusServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-in-service", 1), ("in-service", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusServiceState.setStatus('mandatory')
ncmDataPortStatusCimType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 32, 33, 34, 56, 255))).clone(namedValues=NamedValues(("cim-2000-E1", 16), ("cim-2002-E1", 17), ("cim-2003-E1", 18), ("cim-2004-E1", 19), ("cim-2005-E1", 20), ("cim-2006-E1", 21), ("cim-2101-T1", 32), ("cim-2102-T1", 33), ("cim-2164-T1", 34), ("cim-2061-E1", 56), ("cim-UNINSTALLED", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusCimType.setStatus('mandatory')
ncmDataPortStatusLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortStatusLoopback.setStatus('mandatory')
ncmDataPortTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("d3-in-D24", 2), ("qrss", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortTestPattern.setStatus('mandatory')
ncmDataPortTstPatErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1029, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDataPortTstPatErrCount.setStatus('mandatory')
ncmALARMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030), )
if mibBuilder.loadTexts: ncmALARMConfigTable.setStatus('mandatory')
ncmALARMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAlarmConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAlarmConfigIndex"))
if mibBuilder.loadTexts: ncmALARMConfigEntry.setStatus('mandatory')
ncmAlarmConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAlarmConfigNIDIndex.setStatus('mandatory')
ncmAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAlarmConfigIndex.setStatus('mandatory')
ncmAlmCfgDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgDomain.setStatus('mandatory')
ncmAlmCfgSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgSrcAddr.setStatus('mandatory')
ncmAlmCfgCard = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgCard.setStatus('mandatory')
ncmAlmCfgShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgShelf.setStatus('mandatory')
ncmAlmCfgE1T1Port1EnableAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgE1T1Port1EnableAlmRpt.setStatus('mandatory')
ncmAlmCfgE1T1Port2EnableAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgE1T1Port2EnableAlmRpt.setStatus('mandatory')
ncmAlmCfgE1T1Port3EnableAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgE1T1Port3EnableAlmRpt.setStatus('mandatory')
ncmAlmCfgE1T1Port4EnableAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgE1T1Port4EnableAlmRpt.setStatus('mandatory')
ncmAlmCfgDataPort1EnableAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgDataPort1EnableAlmRpt.setStatus('mandatory')
ncmAlmCfgDataPort2EnableAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgDataPort2EnableAlmRpt.setStatus('mandatory')
ncmAlmCfgEnableCardAlmRpt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgEnableCardAlmRpt.setStatus('mandatory')
ncmAlmCfgDeclareTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1030, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAlmCfgDeclareTime.setStatus('mandatory')
ncmCURRENTAlarmMsgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1031), )
if mibBuilder.loadTexts: ncmCURRENTAlarmMsgTable.setStatus('mandatory')
ncmCURRENTAlarmMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1031, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCurrAlarmMsgNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCurrAlarmMsgIndex"))
if mibBuilder.loadTexts: ncmCURRENTAlarmMsgEntry.setStatus('mandatory')
ncmCurrAlarmMsgNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1031, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCurrAlarmMsgNIDIndex.setStatus('mandatory')
ncmCurrAlarmMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1031, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCurrAlarmMsgIndex.setStatus('mandatory')
ncmCurrAlarmMsgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1031, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCurrAlarmMsgNumber.setStatus('mandatory')
ncmCurrAlarmMsgEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1031, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCurrAlarmMsgEquipID.setStatus('mandatory')
ncmPrevAlarmMsgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032), )
if mibBuilder.loadTexts: ncmPrevAlarmMsgTable.setStatus('mandatory')
ncmPrevAlarmMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmPrevAlarmMsgNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmPrevAlarmMsgIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmPrevAlarmMsgNumber"))
if mibBuilder.loadTexts: ncmPrevAlarmMsgEntry.setStatus('mandatory')
ncmPrevAlarmMsgNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgNIDIndex.setStatus('mandatory')
ncmPrevAlarmMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgIndex.setStatus('mandatory')
ncmPrevAlarmMsgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgNumber.setStatus('mandatory')
ncmPrevAlarmMsgTimeStampSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgTimeStampSec.setStatus('mandatory')
ncmPrevAlarmMsgTimeStampms = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgTimeStampms.setStatus('mandatory')
ncmPrevAlarmMsgAlarmCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgAlarmCode.setStatus('mandatory')
ncmPrevAlarmMsgAlarmInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgAlarmInstance.setStatus('mandatory')
ncmPrevAlarmMsgObjType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17))).clone(namedValues=NamedValues(("e1-PortID", 1), ("dataPort", 2), ("circuit", 3), ("power", 4), ("clkRef", 5), ("timeBus", 6), ("refBus", 7), ("notUsed", 8), ("software", 9), ("equipment", 10), ("t1-PortID", 11), ("dS3-Port", 16), ("hssi-Port", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgObjType.setStatus('mandatory')
ncmPrevAlarmMsgSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1032, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cleared", 1), ("informational", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPrevAlarmMsgSeverity.setStatus('mandatory')
ncmEnhanAlmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033), )
if mibBuilder.loadTexts: ncmEnhanAlmCfgTable.setStatus('mandatory')
ncmEnhanAlmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmEnhanAlmCfgNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmEnhanAlmCfgIndex"))
if mibBuilder.loadTexts: ncmEnhanAlmCfgEntry.setStatus('mandatory')
ncmEnhanAlmCfgNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmEnhanAlmCfgNIDIndex.setStatus('mandatory')
ncmEnhanAlmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmEnhanAlmCfgIndex.setStatus('mandatory')
ncmEnhanAlmCfgCRCThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgCRCThreshold.setStatus('mandatory')
ncmEnhanAlmCfgSESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgSESThreshold.setStatus('mandatory')
ncmEnhanAlmCfgUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgUASThreshold.setStatus('mandatory')
ncmEnhanAlmCfgBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disable", 1), ("d10E-4", 2), ("d10E-5", 3), ("d10E-6", 4), ("d10E-7", 5), ("d10E-8", 6), ("d10E-9", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgBERThreshold.setStatus('mandatory')
ncmEnhanAlmCfgBPVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgBPVThreshold.setStatus('mandatory')
ncmEnhanAlmCfgLineRestoral = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("automatic", 2), ("manual", 3), ("time-of-day", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgLineRestoral.setStatus('mandatory')
ncmEnhanAlmCfgTODHour = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgTODHour.setStatus('mandatory')
ncmEnhanAlmCfgTODMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgTODMinute.setStatus('mandatory')
ncmEnhanAlmCfgLinRestEvalPer = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1033, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmEnhanAlmCfgLinRestEvalPer.setStatus('mandatory')
ncmLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034), )
if mibBuilder.loadTexts: ncmLoopbackTable.setStatus('mandatory')
ncmLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmLpbkNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmLpbkLineIndex"))
if mibBuilder.loadTexts: ncmLoopbackEntry.setStatus('mandatory')
ncmLpbkNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLpbkNIDIndex.setStatus('mandatory')
ncmLpbkLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLpbkLineIndex.setStatus('mandatory')
ncmSetAllOnes = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSetAllOnes.setStatus('mandatory')
ncmTimeoutLOCSec = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmTimeoutLOCSec.setStatus('mandatory')
ncmRemoteLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmRemoteLB.setStatus('mandatory')
ncmActivateDeactLBType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1034, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10000, 1, 2, 4, 8, 16, 32, 64, 128, 10016, 10032, 10064, 10128))).clone(namedValues=NamedValues(("deactivate", 10000), ("lineLoop", 1), ("payloadLoop", 2), ("localLoopbk", 4), ("dPLoop", 8), ("act-LLBBOP", 16), ("act-PLBBOP", 32), ("aCT-SIX-TWO-FOUR-ONE-ONE-INBAND", 64), ("aCT-FT1-LOOP-CODE", 128), ("deact-LLBBOP", 10016), ("deact-PLBBOP", 10032), ("deact-SIX-TWO-FOUR-ONE-ONE-INBAND", 10064), ("deact-FT1-LOOP-CODE", 10128)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmActivateDeactLBType.setStatus('mandatory')
ncmTestPatternTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035), )
if mibBuilder.loadTexts: ncmTestPatternTable.setStatus('mandatory')
ncmTestPatternEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmTstpattNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmTstpattLineIndex"))
if mibBuilder.loadTexts: ncmTestPatternEntry.setStatus('mandatory')
ncmTstpattNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmTstpattNIDIndex.setStatus('mandatory')
ncmTstpattLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmTstpattLineIndex.setStatus('mandatory')
ncmTstpattTestPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmTstpattTestPeriod.setStatus('mandatory')
ncmStartStopTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("stop", 100), ("three-In-Twentyfour", 1), ("qrss", 2), ("two-N-Twenty-One", 3), ("one-In-Eight", 4), ("two-N-Fifteen-One", 5), ("all-Zeroes", 6), ("fiftyfive-Octets", 7), ("all-Ones", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmStartStopTestPattern.setStatus('mandatory')
ncmResetTestCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1035, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmResetTestCounter.setStatus('mandatory')
ncmCircuitInfoTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036), )
if mibBuilder.loadTexts: ncmCircuitInfoTable.setStatus('mandatory')
ncmCircuitInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmCircuitInfoNIDIndex"))
if mibBuilder.loadTexts: ncmCircuitInfoEntry.setStatus('mandatory')
ncmCircuitInfoNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCircuitInfoNIDIndex.setStatus('mandatory')
ncmCircuitInfoCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoCircName.setStatus('mandatory')
ncmCircuitInfoCircPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ccb-CPRIO-LOW", 1), ("ccb-CPRIO-NRML", 2), ("ccb-CPRIO-HIGH", 3), ("ccb-CPRIO-CRIT", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoCircPriority.setStatus('mandatory')
ncmCircuitInfoCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ccb-CTYPE-RESERVED", 1), ("ccb-CTYPE-PERMANENT", 2), ("ccb-CTYPE-SWITCHED", 3), ("ccb-CTYPE-PRIMARY", 4), ("ccb-CTYPE-BACKUP", 5), ("ccb-CTYPE-BACKUP-ND", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoCircType.setStatus('mandatory')
ncmCircuitInfoCircMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ccb-CMODE-NX56-DATA", 1), ("ccb-CMODE-NX64-DATA", 2), ("ccb-CMODE-SIG-VOICE", 3), ("ccb-CMODE-NSIG-VOICE", 4), ("ccb-CMODE-RESERVED", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoCircMode.setStatus('mandatory')
ncmCircuitInfoSrcPortSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoSrcPortSite.setStatus('mandatory')
ncmCircuitInfoSrcCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoSrcCardEquipID.setStatus('mandatory')
ncmCircuitInfoSrcPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("ccb-UNKNOWN-PORT", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoSrcPortID.setStatus('mandatory')
ncmCircuitInfoSrcTimeslotmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoSrcTimeslotmap.setStatus('mandatory')
ncmCircuitInfoDstPortSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoDstPortSite.setStatus('mandatory')
ncmCircuitInfoDstCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoDstCardEquipID.setStatus('mandatory')
ncmCircuitInfoDstPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("ccb-UNKNOWN-PORT", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoDstPortID.setStatus('mandatory')
ncmCircuitInfoDstTimeslotmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoDstTimeslotmap.setStatus('mandatory')
ncmCircuitInfoBackPlaneBusID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ccb-BKPL-BUS-A1", 1), ("ccb-BKPL-BUS-A2", 2), ("ccb-BKPL-BUS-A3", 3), ("ccb-BKPL-BUS-A4", 4), ("ccb-BKPL-BUS-A5", 5), ("ccb-BKPL-BUS-A6", 6), ("ccb-BKPL-BUS-A7", 7), ("ccb-BKPL-BUS-A8", 8), ("ccb-BKPL-BUS-B", 9), ("ccb-BKPL-BUS-C", 10), ("ccb-BKPL-BUS-NONE", 11), ("ccb-BKPL-BUS-AUTO", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoBackPlaneBusID.setStatus('mandatory')
ncmCircuitInfoAssoCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoAssoCircName.setStatus('mandatory')
ncmCircuitInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("add", 1), ("edit", 2), ("delete", 3), ("activate", 4), ("deactivate", 5), ("getdetailinfo", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCircuitInfoAction.setStatus('mandatory')
ncmAddEditActDeactCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44))).clone(namedValues=NamedValues(("ccb-BUILD-SUCCESS", 1), ("ccb-BUILD-NO-PORT-BW", 2), ("ccb-BUILD-CKT-EXIST", 3), ("ccb-BUILD-INVALID-DATA", 4), ("ccb-BUILD-PROM-FAILURE", 5), ("ccb-BUILD-NO-BUS-BW", 6), ("ccb-BUILD-NO-PEER-CARD", 7), ("ccb-BUILD-PEER-NO-PORT-BW", 8), ("ccb-BUILD-PEER-CKT-EXIST", 9), ("ccb-BUILD-PEER-INVALID-DATA", 10), ("ccb-BUILD-PEER-PROM-FAILURE", 11), ("ccb-BUILD-PEER-NO-BUS-BW", 12), ("ccb-BUILD-CIRCDBASE-OVRFLOW", 13), ("ccb-BUILD-CKT-NOT-EXIST", 14), ("ccb-BUILD-PORT-SETUP-FAIL", 15), ("ccb-BUILD-CKT-INACTIVE", 16), ("ccb-BUILD-NOT-ACT-CIRC", 17), ("ccb-BUILD-SCHECK-OK", 21), ("ccb-BUILD-SCHECK-BAD-CARD", 22), ("ccb-BUILD-SCHECK-BAD-CTYPE", 23), ("ccb-BUILD-SCHECK-BAD-CMODE", 24), ("ccb-BUILD-SCHECK-DIFF-ncmSHELF", 25), ("ccb-BUILD-SCHECK-DIFF-TSNUM", 26), ("ccb-BUILD-SCHECK-BAD-BUS", 27), ("ccb-BUILD-DCHECK-OK", 31), ("ccb-BUILD-DCHECK-MISSCARD", 32), ("ccb-BUILD-DCHECK-DIFFCARD", 33), ("ccb-BUILD-DCHECK-BUS-TS-CNFL", 34), ("ccb-BUILD-DCHECK-BUS-DRV-CNFL", 35), ("ccb-BUILD-DCHECK-PORT-CNFL", 36), ("ccb-BUILD-DBKCHECK-NO-PRICIRC", 41), ("ccb-BUILD-DBKCHECK-NO-BKPCIRC", 42), ("ccb-BUILD-DBKCHECK-NO-SHRPORT", 43), ("ccb-BUILD-DBKCHECK-NO-PRIPORT", 44)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAddEditActDeactCircuitStatus.setStatus('mandatory')
ncmDeleteCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ccb-DELETE-SUCCESS", 1), ("ccb-DELETE-PROM-FAILURE", 2), ("ccb-DELETE-CANT-FIND", 3), ("ccb-DELETE-NO-PEER-CARD", 4), ("ccb-DELETE-PEER-PROM-FAILURE", 5), ("ccb-DELETE-PEER-CANT-FIND", 6), ("ccb-DELETE-CKT-NOT-EXIST", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDeleteCircuitStatus.setStatus('mandatory')
ncmGetDetailCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1036, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ccb-CSTAT-SPARE", 1), ("ccb-CSTAT-EDITING", 2), ("ccb-CSTAT-ACTIVE", 3), ("ccb-CSTAT-INACTIVE", 4), ("ccb-CSTAT-PREEMPTED", 5), ("ccb-CSTAT-BROKEN", 6), ("ccb-CSTAT-LINE-ERR", 7), ("ccb-CSTAT-BACKUPPED", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmGetDetailCircuitStatus.setStatus('mandatory')
ncmPortTimeslotAllocTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037), )
if mibBuilder.loadTexts: ncmPortTimeslotAllocTable.setStatus('mandatory')
ncmPortTimeslotAllocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmPortTimeslotAllocNIDIndex"))
if mibBuilder.loadTexts: ncmPortTimeslotAllocEntry.setStatus('mandatory')
ncmPortTimeslotAllocNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPortTimeslotAllocNIDIndex.setStatus('mandatory')
ncmPortTimeslotCardSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPortTimeslotCardSite.setStatus('mandatory')
ncmPortTimeslotCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPortTimeslotCardEquipID.setStatus('mandatory')
ncmPortTimeslotPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("ccb-UNKNOWN-PORT", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPortTimeslotPortID.setStatus('mandatory')
ncmPortAllocTimeSlotMap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1037, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPortAllocTimeSlotMap.setStatus('mandatory')
ncmDialBkUpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038), )
if mibBuilder.loadTexts: ncmDialBkUpInfoTable.setStatus('mandatory')
ncmDialBkUpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmDialBkUpInfoNIDIndex"))
if mibBuilder.loadTexts: ncmDialBkUpInfoEntry.setStatus('mandatory')
ncmDialBkUpInfoNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDialBkUpInfoNIDIndex.setStatus('mandatory')
ncmDialBkUpReqCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDialBkUpReqCircName.setStatus('mandatory')
ncmPrimaryCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPrimaryCircName.setStatus('mandatory')
ncmBackupCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmBackupCircName.setStatus('mandatory')
ncmCallReferenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCallReferenceNumber.setStatus('mandatory')
ncmCirSrcPortErrsetupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("ccb-DBKP-ALM-AIS-CTS", 1), ("ccb-DBKP-ALM-YEL-DSR", 2), ("ccb-DBKP-ALM-LOS-DCD", 4), ("ccb-DBKP-ALM-LOF", 8), ("ccb-DBKP-ALM-UAS", 16), ("ccb-DBKP-ALM-SES", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCirSrcPortErrsetupMask.setStatus('mandatory')
ncmCirDstPortErrsetupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("ccb-DBKP-ALM-AIS-CTS", 1), ("ccb-DBKP-ALM-YEL-DSR", 2), ("ccb-DBKP-ALM-LOS-DCD", 4), ("ccb-DBKP-ALM-LOF", 8), ("ccb-DBKP-ALM-UAS", 16), ("ccb-DBKP-ALM-SES", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCirDstPortErrsetupMask.setStatus('mandatory')
ncmCirErrClearanceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32))).clone(namedValues=NamedValues(("ccb-DBKP-ALM-AIS-CTS", 1), ("ccb-DBKP-ALM-YEL-DSR", 2), ("ccb-DBKP-ALM-LOS-DCD", 4), ("ccb-DBKP-ALM-LOF", 8), ("ccb-DBKP-ALM-UAS", 16), ("ccb-DBKP-ALM-SES", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCirErrClearanceMask.setStatus('mandatory')
ncmDialBkUpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDialBkUpTimeout.setStatus('mandatory')
ncmDialBkUpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmDialBkUpAction.setStatus('mandatory')
ncmDialBkUpSetupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1038, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 41, 42, 43, 44))).clone(namedValues=NamedValues(("ccb-BUILD-SUCCESS", 1), ("ccb-BUILD-NO-PORT-BW", 2), ("ccb-BUILD-CKT-EXIST", 3), ("ccb-BUILD-INVALID-DATA", 4), ("ccb-BUILD-PROM-FAILURE", 5), ("ccb-BUILD-NO-BUS-BW", 6), ("ccb-BUILD-NO-PEER-CARD", 7), ("ccb-BUILD-PEER-NO-PORT-BW", 8), ("ccb-BUILD-PEER-CKT-EXIST", 9), ("ccb-BUILD-PEER-INVALID-DATA", 10), ("ccb-BUILD-PEER-PROM-FAILURE", 11), ("ccb-BUILD-PEER-NO-BUS-BW", 12), ("ccb-BUILD-CIRCDBASE-OVRFLOW", 13), ("ccb-BUILD-CKT-NOT-EXIST", 14), ("ccb-BUILD-PORT-SETUP-FAIL", 15), ("ccb-BUILD-CKT-INACTIVE", 16), ("ccb-BUILD-NOT-ACT-CIRC", 17), ("ccb-BUILD-SCHECK-OK", 21), ("ccb-BUILD-SCHECK-BAD-CARD", 22), ("ccb-BUILD-SCHECK-BAD-CTYPE", 23), ("ccb-BUILD-SCHECK-BAD-CMODE", 24), ("ccb-BUILD-SCHECK-DIFF-ncmSHELF", 25), ("ccb-BUILD-SCHECK-DIFF-TSNUM", 26), ("ccb-BUILD-SCHECK-BAD-BUS", 27), ("ccb-BUILD-DCHECK-OK", 31), ("ccb-BUILD-DCHECK-MISSCARD", 32), ("ccb-BUILD-DCHECK-DIFFCARD", 33), ("ccb-BUILD-DCHECK-BUS-TS-CNFL", 34), ("ccb-BUILD-DCHECK-BUS-DRV-CNFL", 35), ("ccb-BUILD-DCHECK-PORT-CNFL", 36), ("ccb-BUILD-DBKCHECK-NO-PRICIRC", 41), ("ccb-BUILD-DBKCHECK-NO-BKPCIRC", 42), ("ccb-BUILD-DBKCHECK-NO-SHRPORT", 43), ("ccb-BUILD-DBKCHECK-NO-PRIPORT", 44)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDialBkUpSetupStatus.setStatus('mandatory')
ncmClearCircuitGrpTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039), )
if mibBuilder.loadTexts: ncmClearCircuitGrpTable.setStatus('mandatory')
ncmClearCircuitGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmClearCircuitGrpNIDIndex"))
if mibBuilder.loadTexts: ncmClearCircuitGrpEntry.setStatus('mandatory')
ncmClearCircuitGrpNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmClearCircuitGrpNIDIndex.setStatus('mandatory')
ncmClearCircuitGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ccb-CDEL-ALL", 1), ("ccb-CDEL-INACTIVE", 2), ("ccb-CDEL-CARD-CKT", 3), ("ccb-CDEL-PORT-CKT", 4), ("ccb-CDEL-BUS-CKT", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmClearCircuitGrpName.setStatus('mandatory')
ncmClearCircuitGrpSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmClearCircuitGrpSite.setStatus('mandatory')
ncmClearCircuitCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmClearCircuitCardEquipID.setStatus('mandatory')
ncmClearCircuitPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("ccb-UNKNOWN-PORT", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmClearCircuitPortID.setStatus('mandatory')
ncmClearCircuitAction = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1039, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmClearCircuitAction.setStatus('mandatory')
ncmListGetMsgNumTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040), )
if mibBuilder.loadTexts: ncmListGetMsgNumTable.setStatus('mandatory')
ncmListGetMsgNumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmListMsgNumNIDIndex"))
if mibBuilder.loadTexts: ncmListGetMsgNumEntry.setStatus('mandatory')
ncmListMsgNumNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListMsgNumNIDIndex.setStatus('mandatory')
ncmListMsgNumCircuitGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ccb-CLIST-ALL", 1), ("ccb-CLIST-ACTIVE", 2), ("ccb-CLIST-PORT-CKT", 3), ("ccb-CLIST-CARD-CKT", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmListMsgNumCircuitGroup.setStatus('mandatory')
ncmListMsgNumPageNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmListMsgNumPageNumber.setStatus('mandatory')
ncmListMsgNumCardSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmListMsgNumCardSite.setStatus('mandatory')
ncmListMsgNumCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmListMsgNumCardEquipID.setStatus('mandatory')
ncmListMsgNumPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("ccb-UNKNOWN-PORT", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmListMsgNumPortID.setStatus('mandatory')
ncmNumofGetListMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumofGetListMessage.setStatus('mandatory')
ncmTotalCircDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1040, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmTotalCircDatabase.setStatus('mandatory')
ncmCircListccbTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041), )
if mibBuilder.loadTexts: ncmCircListccbTable.setStatus('mandatory')
ncmCircListccbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmListccbNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmNumofCircListMessage"))
if mibBuilder.loadTexts: ncmCircListccbEntry.setStatus('mandatory')
ncmListccbNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbNIDIndex.setStatus('mandatory')
ncmNumofCircListMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmNumofCircListMessage.setStatus('mandatory')
ncmListccbCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbCircName.setStatus('mandatory')
ncmListccbCircPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ccb-CPRIO-LOW", 1), ("ccb-CPRIO-NRML", 2), ("ccb-CPRIO-HIGH", 3), ("ccb-CPRIO-CRIT", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbCircPriority.setStatus('mandatory')
ncmListccbCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ccb-CTYPE-RESERVED", 1), ("ccb-CTYPE-PERMANENT", 2), ("ccb-CTYPE-SWITCHED", 3), ("ccb-CTYPE-PRIMARY", 4), ("ccb-CTYPE-BACKUP", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbCircType.setStatus('mandatory')
ncmListccbCircMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ccb-CMODE-NX56-DATA", 1), ("ccb-CMODE-NX64-DATA", 2), ("ccb-CMODE-SIG-VOICE", 3), ("ccb-CMODE-NSIG-VOICE", 4), ("ccb-CMODE-RESERVED", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbCircMode.setStatus('mandatory')
ncmSrcPortSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSrcPortSite.setStatus('mandatory')
ncmSrcCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSrcCardEquipID.setStatus('mandatory')
ncmSrcPortIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("cb-UNKNOWN-PORT", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSrcPortIdentifier.setStatus('mandatory')
ncmSrcTimeslotmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSrcTimeslotmap.setStatus('mandatory')
ncmDstPortSite = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDstPortSite.setStatus('mandatory')
ncmDstCardEquipID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(77, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 112, 113, 116, 96))).clone(namedValues=NamedValues(("card-SIGMA-VCU", 77), ("ace-FW-E1", 80), ("ace-FW-T1", 81), ("ace-FW-QUAD-T1", 82), ("ace-FW-QUAD-E1", 83), ("ace-Reserved", 84), ("tabs-IMUX", 85), ("ace-FW-DUAL-T1", 86), ("ace-FW-DUAL-E1", 87), ("fw-DS3-CDSU", 88), ("fw-DS3-CDSU-CHANNEL", 89), ("ace-FW-ISDN-T1", 112), ("ace-FW-ISDN-E1", 113), ("fw-DS3-DUDS3", 116), ("fw-NCM", 96)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDstCardEquipID.setStatus('mandatory')
ncmDstPortIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ccb-NET-PORT-1", 1), ("ccb-NET-PORT-2", 2), ("ccb-NET-PORT-3", 3), ("ccb-NET-PORT-4", 4), ("ccb-DATA-PORT-1", 5), ("ccb-DATA-PORT-2", 6), ("ccb-TAC-NET-PORT", 7), ("ccb-TAC-EQP-PORT", 8), ("cb-UNKNOWN-PORT", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDstPortIdentifier.setStatus('mandatory')
ncmDstTimeslotmap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmDstTimeslotmap.setStatus('mandatory')
ncmListccbBackPlaneBusID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ccb-BKPL-BUS-A1", 1), ("ccb-BKPL-BUS-A2", 2), ("ccb-BKPL-BUS-A3", 3), ("ccb-BKPL-BUS-A4", 4), ("ccb-BKPL-BUS-A5", 5), ("ccb-BKPL-BUS-A6", 6), ("ccb-BKPL-BUS-A7", 7), ("ccb-BKPL-BUS-A8", 8), ("ccb-BKPL-BUS-B", 9), ("ccb-BKPL-BUS-C", 10), ("ccb-BKPL-BUS-NONE", 11), ("ccb-BKPL-BUS-AUTO", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbBackPlaneBusID.setStatus('mandatory')
ncmListccbCircStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1041, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ccb-CSTAT-SPARE", 1), ("ccb-CSTAT-EDITING", 2), ("ccb-CSTAT-ACTIVE", 3), ("ccb-CSTAT-INACTIVE", 4), ("ccb-CSTAT-PREEMPTED", 5), ("ccb-CSTAT-BROKEN", 6), ("ccb-CSTAT-LINE-ERR", 7), ("ccb-CSTAT-BACKUPPED", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmListccbCircStatus.setStatus('mandatory')
ncmEquipmentIDTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042), )
if mibBuilder.loadTexts: ncmEquipmentIDTable.setStatus('mandatory')
ncmEquipmentIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmEquipmentIDNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmEquipmentIDLineIndex"))
if mibBuilder.loadTexts: ncmEquipmentIDEntry.setStatus('mandatory')
ncmEquipmentIDNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmEquipmentIDNIDIndex.setStatus('mandatory')
ncmEquipmentIDLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmEquipmentIDLineIndex.setStatus('mandatory')
ncmFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmFirmwareVersion.setStatus('mandatory')
ncmFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmFirmwareRevision.setStatus('mandatory')
ncmEquipmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmEquipmentType.setStatus('mandatory')
ncmHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmHardwareVersion.setStatus('mandatory')
ncmHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmHardwareRevision.setStatus('mandatory')
ncmLocationID = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1042, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLocationID.setStatus('mandatory')
ncmE1AlarmThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043), )
if mibBuilder.loadTexts: ncmE1AlarmThresholdConfigTable.setStatus('mandatory')
ncmE1AlarmThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1AlarmThresholdConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1AlarmThresholdConfigIndex"))
if mibBuilder.loadTexts: ncmE1AlarmThresholdConfigEntry.setStatus('mandatory')
ncmE1AlarmThresholdConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1AlarmThresholdConfigNIDIndex.setStatus('mandatory')
ncmE1AlarmThresholdConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1AlarmThresholdConfigIndex.setStatus('mandatory')
ncmE1LOFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1LOFThreshold.setStatus('mandatory')
ncmE1LOFTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1LOFTimeInterval.setStatus('mandatory')
ncmE1LOSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1LOSThreshold.setStatus('mandatory')
ncmE1LOSTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1LOSTimeInterval.setStatus('mandatory')
ncmE1RAIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1RAIThreshold.setStatus('mandatory')
ncmE1RAITimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1RAITimeInterval.setStatus('mandatory')
ncmE1AISThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1AISThreshold.setStatus('mandatory')
ncmE1AISTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1AISTimeInterval.setStatus('mandatory')
ncmE1BPVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1BPVThreshold.setStatus('mandatory')
ncmE1BPVTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1BPVTimeInterval.setStatus('mandatory')
ncmE1ES15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1ES15MINThreshold.setStatus('mandatory')
ncmE1ES24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1ES24HRThreshold.setStatus('mandatory')
ncmE1SES15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1SES15MINThreshold.setStatus('mandatory')
ncmE1SES24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmE1SES24HRThreshold.setStatus('mandatory')
ncmCVP15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCVP15MINThreshold.setStatus('mandatory')
ncmCVP24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCVP24HRThreshold.setStatus('mandatory')
ncmCVL15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCVL15MINThreshold.setStatus('mandatory')
ncmCVL24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmCVL24HRThreshold.setStatus('mandatory')
ncmESL15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmESL15MINThreshold.setStatus('mandatory')
ncmESL24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmESL24HRThreshold.setStatus('mandatory')
ncmSESL15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSESL15MINThreshold.setStatus('mandatory')
ncmSESL24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSESL24HRThreshold.setStatus('mandatory')
ncmUASP15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmUASP15MINThreshold.setStatus('mandatory')
ncmUASP24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1043, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmUASP24HRThreshold.setStatus('mandatory')
ncmE1AlarmThresholdStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044), )
if mibBuilder.loadTexts: ncmE1AlarmThresholdStatusTable.setStatus('mandatory')
ncmE1AlarmThresholdStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1AlarmThresholdStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmE1AlarmThresholdStatusIndex"))
if mibBuilder.loadTexts: ncmE1AlarmThresholdStatusEntry.setStatus('mandatory')
ncmE1AlarmThresholdStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1AlarmThresholdStatusNIDIndex.setStatus('mandatory')
ncmE1AlarmThresholdStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmE1AlarmThresholdStatusIndex.setStatus('mandatory')
ncmLOFExceededE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOFExceededE1.setStatus('mandatory')
ncmLOSExceededE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOSExceededE1.setStatus('mandatory')
ncmRAIExceededE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmRAIExceededE1.setStatus('mandatory')
ncmAISExceededE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAISExceededE1.setStatus('mandatory')
ncmBPVExceededE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmBPVExceededE1.setStatus('mandatory')
ncmES15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmES15MINExceeded.setStatus('mandatory')
ncmES24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmES24HRExceeded.setStatus('mandatory')
ncmSES15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSES15MINExceeded.setStatus('mandatory')
ncmSES24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSES24HRExceeded.setStatus('mandatory')
ncmCVP15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVP15MINExceeded.setStatus('mandatory')
ncmCVP24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVP24HRExceeded.setStatus('mandatory')
ncmCVL15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVL15MINExceeded.setStatus('mandatory')
ncmCVL24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVL24HRExceeded.setStatus('mandatory')
ncmESL15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmESL15MINExceeded.setStatus('mandatory')
ncmESL24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmESL24HRExceeded.setStatus('mandatory')
ncmSESL15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSESL15MINExceeded.setStatus('mandatory')
ncmSESL24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSESL24HRExceeded.setStatus('mandatory')
ncmUASP15MINExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmUASP15MINExceeded.setStatus('mandatory')
ncmUASP24HRExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmUASP24HRExceeded.setStatus('mandatory')
ncmLOFThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOFThresholdCount.setStatus('mandatory')
ncmLOFTimeIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOFTimeIntervals.setStatus('mandatory')
ncmLOSThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOSThresholdCount.setStatus('mandatory')
ncmLOSTimeIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOSTimeIntervals.setStatus('mandatory')
ncmRAIThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmRAIThresholdCount.setStatus('mandatory')
ncmRAITimeIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmRAITimeIntervals.setStatus('mandatory')
ncmAISThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAISThresholdCount.setStatus('mandatory')
ncmAISTimeIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAISTimeIntervals.setStatus('mandatory')
ncmBPVThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmBPVThresholdCount.setStatus('mandatory')
ncmBPVTimeIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmBPVTimeIntervals.setStatus('mandatory')
ncmES15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmES15MINThresholdCount.setStatus('mandatory')
ncmES24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmES24HRThresholdCount.setStatus('mandatory')
ncmSES15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSES15MINThresholdCount.setStatus('mandatory')
ncmSES24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSES24HRThresholdCount.setStatus('mandatory')
ncmCVP15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVP15MINThresholdCount.setStatus('mandatory')
ncmCVP24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVP24HRThresholdCount.setStatus('mandatory')
ncmCVL15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVL15MINThresholdCount.setStatus('mandatory')
ncmCVL24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmCVL24HRThresholdCount.setStatus('mandatory')
ncmESL15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmESL15MINThresholdCount.setStatus('mandatory')
ncmESL24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmESL24HRThresholdCount.setStatus('mandatory')
ncmSESL15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSESL15MINThresholdCount.setStatus('mandatory')
ncmSESL24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSESL24HRThresholdCount.setStatus('mandatory')
ncmUASP15MINThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmUASP15MINThresholdCount.setStatus('mandatory')
ncmUASP24HRThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1044, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmUASP24HRThresholdCount.setStatus('mandatory')
ncmAlarmThresholdConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045), )
if mibBuilder.loadTexts: ncmAlarmThresholdConfigTable.setStatus('mandatory')
ncmAlarmThresholdConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAlarmThresholdConfigNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAlarmThresholdConfigIndex"))
if mibBuilder.loadTexts: ncmAlarmThresholdConfigEntry.setStatus('mandatory')
ncmAlarmThresholdConfigNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAlarmThresholdConfigNIDIndex.setStatus('mandatory')
ncmAlarmThresholdConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAlarmThresholdConfigIndex.setStatus('mandatory')
ncmLOFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmLOFThreshold.setStatus('mandatory')
ncmLOFTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmLOFTimeInterval.setStatus('mandatory')
ncmLOSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmLOSThreshold.setStatus('mandatory')
ncmLOSTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmLOSTimeInterval.setStatus('mandatory')
ncmRAIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmRAIThreshold.setStatus('mandatory')
ncmRAITimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmRAITimeInterval.setStatus('mandatory')
ncmAISThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAISThreshold.setStatus('mandatory')
ncmAISTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmAISTimeInterval.setStatus('mandatory')
ncmBPVThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmBPVThreshold.setStatus('mandatory')
ncmBPVTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmBPVTimeInterval.setStatus('mandatory')
ncmES15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmES15MINThreshold.setStatus('mandatory')
ncmES24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmES24HRThreshold.setStatus('mandatory')
ncmSES15MINThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSES15MINThreshold.setStatus('mandatory')
ncmSES24HRThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1045, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSES24HRThreshold.setStatus('mandatory')
ncmAlarmThresholdStatusTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046), )
if mibBuilder.loadTexts: ncmAlarmThresholdStatusTable.setStatus('mandatory')
ncmAlarmThresholdStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAlarmThresholdStatusNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmAlarmThresholdStatusIndex"))
if mibBuilder.loadTexts: ncmAlarmThresholdStatusEntry.setStatus('mandatory')
ncmAlarmThresholdStatusNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAlarmThresholdStatusNIDIndex.setStatus('mandatory')
ncmAlarmThresholdStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAlarmThresholdStatusIndex.setStatus('mandatory')
ncmLOFExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOFExceeded.setStatus('mandatory')
ncmLOSExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOSExceeded.setStatus('mandatory')
ncmAISExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAISExceeded.setStatus('mandatory')
ncmRAIExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmRAIExceeded.setStatus('mandatory')
ncmBPVExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmBPVExceeded.setStatus('mandatory')
ncmESExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmESExceeded.setStatus('mandatory')
ncmSESExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSESExceeded.setStatus('mandatory')
ncmLOFThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOFThresholdCountst.setStatus('mandatory')
ncmLOFTimeIntervalst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOFTimeIntervalst.setStatus('mandatory')
ncmLOSThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOSThresholdCountst.setStatus('mandatory')
ncmLOSTimeIntervalst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmLOSTimeIntervalst.setStatus('mandatory')
ncmRAIThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmRAIThresholdCountst.setStatus('mandatory')
ncmRAITimeIntervalst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmRAITimeIntervalst.setStatus('mandatory')
ncmAISThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAISThresholdCountst.setStatus('mandatory')
ncmAISTimeIntervalst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmAISTimeIntervalst.setStatus('mandatory')
ncmBPVThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmBPVThresholdCountst.setStatus('mandatory')
ncmBPVTimeIntervalst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmBPVTimeIntervalst.setStatus('mandatory')
ncmES15MINThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmES15MINThresholdCountst.setStatus('mandatory')
ncmES24HRThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmES24HRThresholdCountst.setStatus('mandatory')
ncmSES15MINThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSES15MINThresholdCountst.setStatus('mandatory')
ncmSES24HRThresholdCountst = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmSES24HRThresholdCountst.setStatus('mandatory')
ncmResetAlmThresholdCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1046, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmResetAlmThresholdCount.setStatus('mandatory')
ncmShelfSyncSourceSegTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050), )
if mibBuilder.loadTexts: ncmShelfSyncSourceSegTable.setStatus('mandatory')
ncmShelfSyncSourceSegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfSyncSegNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfSyncSourceSegIndex"), (0, "VERILINK-ENTERPRISE-NCMGENERIC-MIB", "ncmShelfSyncSourceSegNum"))
if mibBuilder.loadTexts: ncmShelfSyncSourceSegEntry.setStatus('mandatory')
ncmShelfSyncSegNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfSyncSegNIDIndex.setStatus('mandatory')
ncmShelfSyncSourceSegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfSyncSourceSegIndex.setStatus('mandatory')
ncmShelfSyncSourceSegNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfSyncSourceSegNum.setStatus('mandatory')
ncmShelfTypeSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 10, 52, 54))).clone(namedValues=NamedValues(("uninstalled", 1), ("dualLineShelf", 2), ("multiLineShelf", 3), ("nb-2200LineShelf", 4), ("nb-2200-4ILineShelf", 10), ("nb-2200QLineShelf", 52), ("nb-2200-4IQLineShelf", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmShelfTypeSeg.setStatus('mandatory')
ncmRefBusSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("c", 1), ("a", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmRefBusSeg.setStatus('mandatory')
ncmSourceSegOneShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegOneShelfNum.setStatus('mandatory')
ncmSourceSegOneCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegOneCardNum.setStatus('mandatory')
ncmSourceSegOneClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegOneClockRef.setStatus('mandatory')
ncmSourceSegAutoRestore1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegAutoRestore1.setStatus('mandatory')
ncmSourceSegTwoShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegTwoShelfNum.setStatus('mandatory')
ncmSourceSegTwoCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegTwoCardNum.setStatus('mandatory')
ncmSourceSegTwoClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegTwoClockRef.setStatus('mandatory')
ncmSourceSegAutoRestore2 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegAutoRestore2.setStatus('mandatory')
ncmSourceSegThreeShelfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegThreeShelfNum.setStatus('mandatory')
ncmSourceSegThreeCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegThreeCardNum.setStatus('mandatory')
ncmSourceSegThreeClockRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 11, 12))).clone(namedValues=NamedValues(("e1-t1port1", 5), ("e1-t1port2", 6), ("external-timing", 7), ("internal-timing", 8), ("quad-t1-port3", 11), ("quad-t1-port4", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegThreeClockRef.setStatus('mandatory')
ncmSourceSegAutoRestore3 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmSourceSegAutoRestore3.setStatus('mandatory')
ncmShelfCurrentSyncSourceSeg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3012, 1050, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source1", 1), ("source2", 2), ("source3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmShelfCurrentSyncSourceSeg.setStatus('mandatory')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMGENERIC-MIB", ncmT1TotalLOFC=ncmT1TotalLOFC, ncmPortTimeslotCardSite=ncmPortTimeslotCardSite, ncmUASP24HRThreshold=ncmUASP24HRThreshold, ncmShelfSyncSourceSegTable=ncmShelfSyncSourceSegTable, ncmT1LatchedStatusFramingSlip=ncmT1LatchedStatusFramingSlip, ncmCircuitInfoBackPlaneBusID=ncmCircuitInfoBackPlaneBusID, ncmE1SES15MINThreshold=ncmE1SES15MINThreshold, ncmT1PortCRC6Error=ncmT1PortCRC6Error, ncmE1ES24HRThreshold=ncmE1ES24HRThreshold, ncmE1IntervalFAE=ncmE1IntervalFAE, ncmDataPortConfigLineIndicate=ncmDataPortConfigLineIndicate, ncmT1ConfigEntry=ncmT1ConfigEntry, ncmRAIExceeded=ncmRAIExceeded, ncmE1ThresholdStatusEntry=ncmE1ThresholdStatusEntry, ncmE1IntervalEntry=ncmE1IntervalEntry, ncmShelfNIDIndex=ncmShelfNIDIndex, ncmT1IntervalEndType=ncmT1IntervalEndType, ncmPrevAlarmMsgIndex=ncmPrevAlarmMsgIndex, ncmDataPortLineStatusCACB=ncmDataPortLineStatusCACB, ncmDataPortConfigLOS=ncmDataPortConfigLOS, ncmRAIThresholdCountst=ncmRAIThresholdCountst, ncmT1IntervalNumber=ncmT1IntervalNumber, ncmT1PortBPVThresholdExceeded=ncmT1PortBPVThresholdExceeded, ncmCimDate=ncmCimDate, ncmE1IntervalESs=ncmE1IntervalESs, ncmCardSyncSourceIndex=ncmCardSyncSourceIndex, ncmE1CurrentCVPath=ncmE1CurrentCVPath, ncmE1PrevTotalLOFSs=ncmE1PrevTotalLOFSs, ncmSrcCardEquipID=ncmSrcCardEquipID, ncmE1PortServiceState=ncmE1PortServiceState, ncmE1ThresholdStatusIndex=ncmE1ThresholdStatusIndex, ncmE1PrevTotalEndType=ncmE1PrevTotalEndType, ncmPortAllocTimeSlotMap=ncmPortAllocTimeSlotMap, ncmE1CurrentFECPath=ncmE1CurrentFECPath, ncmT1IntervalTable=ncmT1IntervalTable, ncmCurrAlarmMsgEquipID=ncmCurrAlarmMsgEquipID, ncmE1PortLatchedRAI=ncmE1PortLatchedRAI, ncmT1EnableNetLoopback=ncmT1EnableNetLoopback, ncmT1ConfigNIDIndex=ncmT1ConfigNIDIndex, ncmE1ResetPerfCount=ncmE1ResetPerfCount, ncmE1PrevTotalESsLine=ncmE1PrevTotalESsLine, ncmT1TotalBESs=ncmT1TotalBESs, ncmE1IntervalLOSSs=ncmE1IntervalLOSSs, ncmAlmCfgShelf=ncmAlmCfgShelf, ncmCircuitInfoCircMode=ncmCircuitInfoCircMode, ncmT1IntervalASs=ncmT1IntervalASs, ncmAddEditActDeactCircuitStatus=ncmAddEditActDeactCircuitStatus, ncmListMsgNumPortID=ncmListMsgNumPortID, ncmNodeCurrAddress=ncmNodeCurrAddress, ncmGetDetailCircuitStatus=ncmGetDetailCircuitStatus, ncmUASP15MINThresholdCount=ncmUASP15MINThresholdCount, ncmadvfdlPerformanceReport=ncmadvfdlPerformanceReport, ncmCallReferenceNumber=ncmCallReferenceNumber, ncmBPVTimeIntervalst=ncmBPVTimeIntervalst, ncmNodeIndex=ncmNodeIndex, ncmSESL15MINExceeded=ncmSESL15MINExceeded, ncmE1BPVTimeInterval=ncmE1BPVTimeInterval, ncmAutoRestore1=ncmAutoRestore1, ncmE1IntervalFECLine=ncmE1IntervalFECLine, ncmE1CurrentIndex=ncmE1CurrentIndex, ncmE1TotalESsLine=ncmE1TotalESsLine, ncmEnhanAlmCfgIndex=ncmEnhanAlmCfgIndex, ncmResetAlmThresholdCount=ncmResetAlmThresholdCount, ncmShelfInfoEntry=ncmShelfInfoEntry, ncmShelfNumber=ncmShelfNumber, ncmManufacturePartNumber=ncmManufacturePartNumber, ncmES24HRThresholdCount=ncmES24HRThresholdCount, ncmE1CurrentHDB3ORFEBEErrorCounts=ncmE1CurrentHDB3ORFEBEErrorCounts, ncmE1PortCRC4=ncmE1PortCRC4, ncmE1IntervalBBE=ncmE1IntervalBBE, ncmT1ThresholdBPVCount=ncmT1ThresholdBPVCount, ncmE1PortLatchedStatusTable=ncmE1PortLatchedStatusTable, ncmE1PrevTotalBBE=ncmE1PrevTotalBBE, ncmT1PortCGA=ncmT1PortCGA, ncmAdvancedT1ConfigTable=ncmAdvancedT1ConfigTable, ncmE1SESThreshold=ncmE1SESThreshold, ncmT1IntervalESsTypeA=ncmT1IntervalESsTypeA, ncmE1SnapShot=ncmE1SnapShot, ncmShelfCurrentSyncSourceSeg=ncmShelfCurrentSyncSourceSeg, ncmAlarmThresholdConfigIndex=ncmAlarmThresholdConfigIndex, ncmCardDate=ncmCardDate, ncmCardSourceTwoShelfNum=ncmCardSourceTwoShelfNum, ncmadvfdlLLBT1BOPMsg=ncmadvfdlLLBT1BOPMsg, ncmE1SnapShotNIDIndex=ncmE1SnapShotNIDIndex, ncmE1RestoreState=ncmE1RestoreState, ncmSESL24HRThreshold=ncmSESL24HRThreshold, ncmPrevAlarmMsgAlarmCode=ncmPrevAlarmMsgAlarmCode, ncmES24HRThreshold=ncmES24HRThreshold, ncmT1IntervalBESs=ncmT1IntervalBESs, ncmT1TotalLOFs=ncmT1TotalLOFs, ncmT1PrevTotalLOFs=ncmT1PrevTotalLOFs, ncmSourceSegOneShelfNum=ncmSourceSegOneShelfNum, ncmE1PrevTotalAISSs=ncmE1PrevTotalAISSs, ncmAlmCfgDomain=ncmAlmCfgDomain, ncmCircuitInfoDstPortSite=ncmCircuitInfoDstPortSite, ncmT1CurrentUASs=ncmT1CurrentUASs, ncmT1PortRAI=ncmT1PortRAI, ncmT1LatchedStatusTable=ncmT1LatchedStatusTable, ncmDataPortStatusNIDIndex=ncmDataPortStatusNIDIndex, ncmUASP24HRExceeded=ncmUASP24HRExceeded, ncmCVP24HRThreshold=ncmCVP24HRThreshold, ncmT1LatchedStatusBERExceeded=ncmT1LatchedStatusBERExceeded, ncmT1ThresholdCRCCount=ncmT1ThresholdCRCCount, ncmT1PortPLB=ncmT1PortPLB, ncmAdvancedT1NIDIndex=ncmAdvancedT1NIDIndex, ncmDataPortStatusServiceState=ncmDataPortStatusServiceState, ncmE1PortRepeaterLoopbackTimeoutEnable=ncmE1PortRepeaterLoopbackTimeoutEnable, ncmFirmwareRevision=ncmFirmwareRevision, ncmLOSTimeIntervals=ncmLOSTimeIntervals, ncmCimVendorCageCode=ncmCimVendorCageCode, ncmSrcTimeslotmap=ncmSrcTimeslotmap, ncmT1CurrentCSSs=ncmT1CurrentCSSs, ncmE1CurrentLOSSs=ncmE1CurrentLOSSs, ncmT1PrevTotalESsTypeA=ncmT1PrevTotalESsTypeA, ncmT1ThresholdUASExceeded=ncmT1ThresholdUASExceeded, ncmCirDstPortErrsetupMask=ncmCirDstPortErrsetupMask, ncmT1CurrentESsTypeA=ncmT1CurrentESsTypeA, ncmT1PrevTotalBESs=ncmT1PrevTotalBESs, ncmNumberofCards=ncmNumberofCards, ncmT1CurrentIndex=ncmT1CurrentIndex, ncmShelfHardware=ncmShelfHardware, ncmPrevAlarmMsgTimeStampSec=ncmPrevAlarmMsgTimeStampSec, ncmCircuitInfoSrcCardEquipID=ncmCircuitInfoSrcCardEquipID, ncmAlmCfgEnableCardAlmRpt=ncmAlmCfgEnableCardAlmRpt, ncmSourceOneShelfNum=ncmSourceOneShelfNum, ncmEnhanAlmCfgSESThreshold=ncmEnhanAlmCfgSESThreshold, ncmE1CurrentESs=ncmE1CurrentESs, ncmCVP24HRExceeded=ncmCVP24HRExceeded, ncmAISExceededE1=ncmAISExceededE1, ncmSESL24HRExceeded=ncmSESL24HRExceeded, ncmE1AlarmThresholdConfigTable=ncmE1AlarmThresholdConfigTable, ncmT1PortStatusEntry=ncmT1PortStatusEntry, ncmE1CurrentESsLine=ncmE1CurrentESsLine, ncmCircListccbEntry=ncmCircListccbEntry, ncmES15MINThreshold=ncmES15MINThreshold, ncmE1TotalLOSSs=ncmE1TotalLOSSs, ncmE1CurrentAISSs=ncmE1CurrentAISSs, ncmE1PortLatchedFramingSlip=ncmE1PortLatchedFramingSlip, ncmPrimaryCircName=ncmPrimaryCircName, ncmBPVThreshold=ncmBPVThreshold, ncmadvfdlMode=ncmadvfdlMode, ncmE1LOSTimeInterval=ncmE1LOSTimeInterval, ncmSourceSegAutoRestore1=ncmSourceSegAutoRestore1, ncmT1CurrentOOFs=ncmT1CurrentOOFs, ncmLOSTimeIntervalst=ncmLOSTimeIntervalst, ncmT1TotalNIDIndex=ncmT1TotalNIDIndex, ncmT1ThresholdStatusTable=ncmT1ThresholdStatusTable, ncmLOFThresholdCountst=ncmLOFThresholdCountst, ncmT1IntervalLOSs=ncmT1IntervalLOSs, ncmE1PrevTotalSEFSs=ncmE1PrevTotalSEFSs, ncmCardAutoRestore2=ncmCardAutoRestore2, ncmT1RepeaterLoopbackTimeout=ncmT1RepeaterLoopbackTimeout, ncmAutoRestore3=ncmAutoRestore3, ncmRAITimeIntervalst=ncmRAITimeIntervalst, ncmT1TotalEndType=ncmT1TotalEndType, ncmCardAutoRestore1=ncmCardAutoRestore1, ncmAlarmThresholdConfigTable=ncmAlarmThresholdConfigTable, ncmT1PrevTotalEndType=ncmT1PrevTotalEndType, ncmadvfdlIdlePattern=ncmadvfdlIdlePattern, ncmT1UserAlarmDeclareTime=ncmT1UserAlarmDeclareTime, ncmE1LOSThreshold=ncmE1LOSThreshold, ncmSourceSegThreeCardNum=ncmSourceSegThreeCardNum, ncmadvfdlMonitoringCsuType=ncmadvfdlMonitoringCsuType, ncmT1SnapShotNIDIndex=ncmT1SnapShotNIDIndex, ncmAISTimeInterval=ncmAISTimeInterval, ncmCVP15MINThresholdCount=ncmCVP15MINThresholdCount, ncmE1LOFTimeInterval=ncmE1LOFTimeInterval, ncmIDPromEntry=ncmIDPromEntry, ncmT1CurrentIntervalSec=ncmT1CurrentIntervalSec, ncmT1IntervalCSSs=ncmT1IntervalCSSs, ncmControllerEqID=ncmControllerEqID, ncmT1ConfigTable=ncmT1ConfigTable, ncmT1CurrentFrameErrCount=ncmT1CurrentFrameErrCount, ncmHardwareVersion=ncmHardwareVersion, ncmDataPortConfigIndex=ncmDataPortConfigIndex, ncmTstpattNIDIndex=ncmTstpattNIDIndex, ncmT1PerfCountNIDIndex=ncmT1PerfCountNIDIndex, ncmE1PrevTotalSESsLine=ncmE1PrevTotalSESsLine, ncmE1TotalASs=ncmE1TotalASs, ncmT1FDL=ncmT1FDL, ncmShelfSyncSourceEntry=ncmShelfSyncSourceEntry, ncmSES15MINExceeded=ncmSES15MINExceeded, ncmE1AISThreshold=ncmE1AISThreshold, ncmBPVTimeInterval=ncmBPVTimeInterval, ncmT1TimeStampMilliSec=ncmT1TimeStampMilliSec, ncmActiveNodeStatus=ncmActiveNodeStatus, ncmCardSourceThreeShelfNum=ncmCardSourceThreeShelfNum, ncmSESExceeded=ncmSESExceeded, ncmT1PerfCountCurFrameErrCnt=ncmT1PerfCountCurFrameErrCnt, ncmE1IntervalCVPath=ncmE1IntervalCVPath, ncmE1TotalEndType=ncmE1TotalEndType, ncmIDCimType=ncmIDCimType, ncmCVL15MINThreshold=ncmCVL15MINThreshold, ncmVendorCageCode=ncmVendorCageCode, ncmDate=ncmDate, ncmT1CurrentLOFC=ncmT1CurrentLOFC, ncmE1CurrentEndType=ncmE1CurrentEndType, ncmE1LOFThreshold=ncmE1LOFThreshold, ncmSESL15MINThreshold=ncmSESL15MINThreshold, ncmDataPortConfigServiceState=ncmDataPortConfigServiceState, ncmT1BERExceeded=ncmT1BERExceeded, ncmESL24HRThresholdCount=ncmESL24HRThresholdCount, ncmDataPortStatusMode=ncmDataPortStatusMode, ncmE1CurrentSESs=ncmE1CurrentSESs, ncmE1PortLOS=ncmE1PortLOS, ncmE1PortLLB=ncmE1PortLLB, ncmE1PortSendAIS=ncmE1PortSendAIS, ncmT1CurrentErrorFreeSec=ncmT1CurrentErrorFreeSec, ncmALARMConfigEntry=ncmALARMConfigEntry, ncmT1PerfCountCurESFErrEvt=ncmT1PerfCountCurESFErrEvt, ncmE1TotalFECLine=ncmE1TotalFECLine, ncmT1BlockErrorCounter=ncmT1BlockErrorCounter, ncmCVL24HRExceeded=ncmCVL24HRExceeded, ncmCardInfoEntry=ncmCardInfoEntry, ncmE1CurrentUASs=ncmE1CurrentUASs, ncmFirmwareVersion=ncmFirmwareVersion, ncmE1CurrentLOFSs=ncmE1CurrentLOFSs, ncmEnhanAlmCfgTODMinute=ncmEnhanAlmCfgTODMinute, ncmE1CurrentSESsLine=ncmE1CurrentSESsLine, ncmListMsgNumCardSite=ncmListMsgNumCardSite, ncmadvfdlPLBT1BOPMsg=ncmadvfdlPLBT1BOPMsg, ncmAISThresholdCount=ncmAISThresholdCount, ncmT1ThresholdBERCount=ncmT1ThresholdBERCount, ncmSES15MINThreshold=ncmSES15MINThreshold, ncmCVP24HRThresholdCount=ncmCVP24HRThresholdCount, ncmE1PrevTotalOOFSs=ncmE1PrevTotalOOFSs, ncmT1LineCoding=ncmT1LineCoding, ncmT1TotalIndex=ncmT1TotalIndex, ncmAlmCfgE1T1Port3EnableAlmRpt=ncmAlmCfgE1T1Port3EnableAlmRpt, ncmListccbCircName=ncmListccbCircName, ncmE1AlarmThresholdConfigEntry=ncmE1AlarmThresholdConfigEntry, ncmRAIThresholdCount=ncmRAIThresholdCount, ncmT1PrevTotalLOSs=ncmT1PrevTotalLOSs, ncmESL24HRThreshold=ncmESL24HRThreshold, ncmE1BERThreshold=ncmE1BERThreshold, ncmESL15MINThresholdCount=ncmESL15MINThresholdCount, ncmT1PerformanceCountersTable=ncmT1PerformanceCountersTable, ncmTestPatternTable=ncmTestPatternTable, ncmCardSourceThreeCardNum=ncmCardSourceThreeCardNum, ncmDialBkUpTimeout=ncmDialBkUpTimeout, ncmALARMConfigTable=ncmALARMConfigTable, ncmSESL24HRThresholdCount=ncmSESL24HRThresholdCount, ncmE1IntervalNumber=ncmE1IntervalNumber, ncmE1CurrentIntervalSec=ncmE1CurrentIntervalSec, ncmCardSerialNumber=ncmCardSerialNumber, ncmT1PortTestPattern=ncmT1PortTestPattern, ncmT1NumberOfValidIntervals=ncmT1NumberOfValidIntervals, ncmE1TotalLOFSs=ncmE1TotalLOFSs, ncmPrevAlarmMsgEntry=ncmPrevAlarmMsgEntry, ncmCurrAlarmMsgIndex=ncmCurrAlarmMsgIndex, ncmT1CRC6=ncmT1CRC6, ncmT1PrevTotalIndex=ncmT1PrevTotalIndex, ncmLOSExceededE1=ncmLOSExceededE1, ncmSourceSegOneClockRef=ncmSourceSegOneClockRef)
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMGENERIC-MIB", ncmE1SnapShotEndType=ncmE1SnapShotEndType, ncmDataPortConfigEntry=ncmDataPortConfigEntry, ncmCircuitInfoAssoCircName=ncmCircuitInfoAssoCircName, ncmSourceThreeClockRef=ncmSourceThreeClockRef, ncmE1PortStatusNIDIndex=ncmE1PortStatusNIDIndex, ncmAISThresholdCountst=ncmAISThresholdCountst, ncmE1PortStatusEntry=ncmE1PortStatusEntry, ncmClearCardInfo=ncmClearCardInfo, ncmT1IntervalESs=ncmT1IntervalESs, ncmNumofGetListMessage=ncmNumofGetListMessage, ncmPrevAlarmMsgNIDIndex=ncmPrevAlarmMsgNIDIndex, ncmE1CurrentTable=ncmE1CurrentTable, ncmE1PortLatchedStatusEntry=ncmE1PortLatchedStatusEntry, ncmCardNIDIndex=ncmCardNIDIndex, ncmT1ThresholdBERExceeded=ncmT1ThresholdBERExceeded, ncmRAIExceededE1=ncmRAIExceededE1, ncmRAIThreshold=ncmRAIThreshold, ncmES24HRThresholdCountst=ncmES24HRThresholdCountst, ncmCardSourceOneShelfNum=ncmCardSourceOneShelfNum, ncmAlmCfgE1T1Port4EnableAlmRpt=ncmAlmCfgE1T1Port4EnableAlmRpt, ncmTestPatternEntry=ncmTestPatternEntry, ncmESL24HRExceeded=ncmESL24HRExceeded, ncmCircuitInfoCircType=ncmCircuitInfoCircType, ncmSourceSegTwoClockRef=ncmSourceSegTwoClockRef, ncmClearCircuitGrpNIDIndex=ncmClearCircuitGrpNIDIndex, ncmE1TimeSlot=ncmE1TimeSlot, ncmE1UASThreshold=ncmE1UASThreshold, ncmCardAutoRestore3=ncmCardAutoRestore3, ncmT1TotalAISs=ncmT1TotalAISs, ncmSourceThreeCardNum=ncmSourceThreeCardNum, ncmT1PortSendAIS=ncmT1PortSendAIS, ncmE1AlarmThresholdStatusTable=ncmE1AlarmThresholdStatusTable, ncmCVL15MINExceeded=ncmCVL15MINExceeded, ncmListGetMsgNumTable=ncmListGetMsgNumTable, ncmE1PortTestPattern=ncmE1PortTestPattern, ncmSourceOneClockRef=ncmSourceOneClockRef, ncmE1IntervalOOFSs=ncmE1IntervalOOFSs, ncmT1Timestamp=ncmT1Timestamp, ncmLOFExceeded=ncmLOFExceeded, ncmE1ConfigNIDIndex=ncmE1ConfigNIDIndex, ncmE1TotalTable=ncmE1TotalTable, ncmTotalCircDatabase=ncmTotalCircDatabase, ncmAlmCfgE1T1Port1EnableAlmRpt=ncmAlmCfgE1T1Port1EnableAlmRpt, ncmSES24HRThreshold=ncmSES24HRThreshold, ncmT1ThresholdSecLineRestore=ncmT1ThresholdSecLineRestore, ncmEnhanAlmCfgUASThreshold=ncmEnhanAlmCfgUASThreshold, ncmClearCircuitAction=ncmClearCircuitAction, ncmCurrAlarmMsgNumber=ncmCurrAlarmMsgNumber, ncmT1CurrentSESs=ncmT1CurrentSESs, ncmT1PrevTotalErrorFreeSec=ncmT1PrevTotalErrorFreeSec, ncmT1PrevTotalLOFC=ncmT1PrevTotalLOFC, ncmRefBusSeg=ncmRefBusSeg, ncmPortTimeslotAllocNIDIndex=ncmPortTimeslotAllocNIDIndex, ncmSourceSegAutoRestore2=ncmSourceSegAutoRestore2, ncmCircuitInfoNIDIndex=ncmCircuitInfoNIDIndex, ncmT1CurrentESs=ncmT1CurrentESs, ncmSES24HRThresholdCount=ncmSES24HRThresholdCount, ncmT1IntervalSEFs=ncmT1IntervalSEFs, ncmCircuitInfoCircName=ncmCircuitInfoCircName, ncmListccbCircType=ncmListccbCircType, ncmE1IntervalIndex=ncmE1IntervalIndex, ncmE1PortStatusIndex=ncmE1PortStatusIndex, ncmT1PerfCountFrameMode=ncmT1PerfCountFrameMode, ncmClearCircuitCardEquipID=ncmClearCircuitCardEquipID, ncmAlmCfgE1T1Port2EnableAlmRpt=ncmAlmCfgE1T1Port2EnableAlmRpt, ncmListCardsInShelf=ncmListCardsInShelf, ncmShelfCurrentSyncSource=ncmShelfCurrentSyncSource, ncmCircuitInfoDstPortID=ncmCircuitInfoDstPortID, ncmDialBkUpInfoTable=ncmDialBkUpInfoTable, ncmT1PortStatusNIDIndex=ncmT1PortStatusNIDIndex, ncmT1DensityPattern=ncmT1DensityPattern, ncmE1CRCThreshold=ncmE1CRCThreshold, ncmCURRENTAlarmMsgEntry=ncmCURRENTAlarmMsgEntry, ncmE1BPVThresholdst=ncmE1BPVThresholdst, ncmDataPortLineStatusLLCJ=ncmDataPortLineStatusLLCJ, ncmTime=ncmTime, ncmT1EnableRepeaterLpbkTimeout=ncmT1EnableRepeaterLpbkTimeout, ncmCircuitInfoAction=ncmCircuitInfoAction, ncmCimRevision=ncmCimRevision, ncmCardType=ncmCardType, ncmE1TotalUASs=ncmE1TotalUASs, ncmT1PerfCountEndType=ncmT1PerfCountEndType, ncmEquipmentIDEntry=ncmEquipmentIDEntry, ncmCVP15MINThreshold=ncmCVP15MINThreshold, ncmE1CRCExceeded=ncmE1CRCExceeded, ncmE1BPVExceeded=ncmE1BPVExceeded, ncmT1ThresholdStatusNIDIndex=ncmT1ThresholdStatusNIDIndex, ncmE1PortBPVThresholdExceeded=ncmE1PortBPVThresholdExceeded, ncmEquipmentIDLineIndex=ncmEquipmentIDLineIndex, ncmT1SnapShotIndex=ncmT1SnapShotIndex, ncmE1SecInCurrInterval=ncmE1SecInCurrInterval, ncmT1CurrentTable=ncmT1CurrentTable, ncmDataPortLineStatusCDCC=ncmDataPortLineStatusCDCC, ncmE1PrevTotalSESs=ncmE1PrevTotalSESs, ncmE1PortCRC4Error=ncmE1PortCRC4Error, ncmT1PrevTotalAISs=ncmT1PrevTotalAISs, ncmShelfTypeSeg=ncmShelfTypeSeg, ncmCardSourceTwoCardNum=ncmCardSourceTwoCardNum, ncmE1TimeMilliSec=ncmE1TimeMilliSec, ncmT1TotalASs=ncmT1TotalASs, ncmSES15MINThresholdCount=ncmSES15MINThresholdCount, ncmT1PortAIS=ncmT1PortAIS, ncmT1CurrentNIDIndex=ncmT1CurrentNIDIndex, ncmCircListccbTable=ncmCircListccbTable, ncmListMsgNumPageNumber=ncmListMsgNumPageNumber, ncmE1AlarmThresholdStatusEntry=ncmE1AlarmThresholdStatusEntry, ncmE1SES24HRThreshold=ncmE1SES24HRThreshold, ncmSourceSegTwoCardNum=ncmSourceSegTwoCardNum, ncmE1AISTimeInterval=ncmE1AISTimeInterval, ncmE1PortSendRAI=ncmE1PortSendRAI, ncmT1CurrentLOSs=ncmT1CurrentLOSs, ncmT1IntervalErrFreeSec=ncmT1IntervalErrFreeSec, ncmT1TotalESs=ncmT1TotalESs, ncmT1ThresholdStatusEndType=ncmT1ThresholdStatusEndType, ncmSES24HRExceeded=ncmSES24HRExceeded, ncmSourceTwoClockRef=ncmSourceTwoClockRef, ncmE1ResetPerfReg=ncmE1ResetPerfReg, ncmE1IntervalSESs=ncmE1IntervalSESs, ncmDstPortIdentifier=ncmDstPortIdentifier, ncmE1TotalCVLine=ncmE1TotalCVLine, ncmEquipmentIDTable=ncmEquipmentIDTable, ncmAlarmConfigIndex=ncmAlarmConfigIndex, ncmE1CurrentFrameErrorCounts=ncmE1CurrentFrameErrorCounts, ncmDataPortStatusLineLLCJ=ncmDataPortStatusLineLLCJ, ncmE1PrevTotalASs=ncmE1PrevTotalASs, ncmE1PrevTotalEntry=ncmE1PrevTotalEntry, ncmLOFThresholdCount=ncmLOFThresholdCount, ncmDataPortConfigMode=ncmDataPortConfigMode, ncmSrcPortSite=ncmSrcPortSite, ncmT1PrevTotalSEFs=ncmT1PrevTotalSEFs, ncmCardSourceThreeClockRef=ncmCardSourceThreeClockRef, ncmE1PrevTotalCVPath=ncmE1PrevTotalCVPath, ncmDeleteCircuitStatus=ncmDeleteCircuitStatus, ncmE1PrevTotalCVLine=ncmE1PrevTotalCVLine, ncmEnhanAlmCfgLineRestoral=ncmEnhanAlmCfgLineRestoral, ncmT1PrevTotalTable=ncmT1PrevTotalTable, ncmClearCircuitGrpSite=ncmClearCircuitGrpSite, ncmBPVTimeIntervals=ncmBPVTimeIntervals, ncmT1TimeSlotSelect=ncmT1TimeSlotSelect, ncmE1BPVThreshold=ncmE1BPVThreshold, ncmE1PortCarrierFailureAlarmDeclareTime=ncmE1PortCarrierFailureAlarmDeclareTime, ncmCircuitInfoSrcPortID=ncmCircuitInfoSrcPortID, ncmAlmCfgDataPort1EnableAlmRpt=ncmAlmCfgDataPort1EnableAlmRpt, ncmDataPortLineStatusRLTM=ncmDataPortLineStatusRLTM, ncmAlmCfgCard=ncmAlmCfgCard, ncmLoopbackTable=ncmLoopbackTable, ncmCircuitInfoTable=ncmCircuitInfoTable, ncmNodeCurrEntry=ncmNodeCurrEntry, ncmE1CurrentBBE=ncmE1CurrentBBE, ncmPrevAlarmMsgTable=ncmPrevAlarmMsgTable, ncmDialBkUpSetupStatus=ncmDialBkUpSetupStatus, ncmE1PrevTotalFECLine=ncmE1PrevTotalFECLine, ncmT1PortLOS=ncmT1PortLOS, ncmESL15MINExceeded=ncmESL15MINExceeded, ncmE1PortLineIndex=ncmE1PortLineIndex, ncmE1PortInbandISDNEnableDisable=ncmE1PortInbandISDNEnableDisable, ncmT1PortLOC=ncmT1PortLOC, ncmE1TotalFECPath=ncmE1TotalFECPath, ncmE1SnapShotIndex=ncmE1SnapShotIndex, ncmT1PrevTotalNIDIndex=ncmT1PrevTotalNIDIndex, ncmE1CurrentFAE=ncmE1CurrentFAE, ncmLpbkLineIndex=ncmLpbkLineIndex, ncmE1NumberOfValidInterval=ncmE1NumberOfValidInterval, ncmE1TotalBBE=ncmE1TotalBBE, ncmT1ThresholdUASCount=ncmT1ThresholdUASCount, ncmE1BlockErrorCounter=ncmE1BlockErrorCounter, ncmRAITimeInterval=ncmRAITimeInterval, ncmEnhanAlmCfgEntry=ncmEnhanAlmCfgEntry, ncmE1PortCarrierFailureAlarm=ncmE1PortCarrierFailureAlarm, ncmAutoRestore2=ncmAutoRestore2, ncmE1PrevTotalIndex=ncmE1PrevTotalIndex, ncmT1TotalUASs=ncmT1TotalUASs, ncmE1UASExceeded=ncmE1UASExceeded, ncmCURRENTAlarmMsgTable=ncmCURRENTAlarmMsgTable, ncmE1PortLatchedStatusIndex=ncmE1PortLatchedStatusIndex, ncmAdvancedT1LineIndex=ncmAdvancedT1LineIndex, ncmT1LatchedStatusAIS=ncmT1LatchedStatusAIS, ncmCircuitInfoSrcTimeslotmap=ncmCircuitInfoSrcTimeslotmap, ncmE1CurrentFECLine=ncmE1CurrentFECLine, ncmE1PortLatchedLOS=ncmE1PortLatchedLOS, ncmT1TotalEntry=ncmT1TotalEntry, ncmT1CurrentAISs=ncmT1CurrentAISs, ncmDataPortConfigClkOpt=ncmDataPortConfigClkOpt, ncmE1TotalSESs=ncmE1TotalSESs, ncmSESL15MINThresholdCount=ncmSESL15MINThresholdCount, ncmCardSourceOneCardNum=ncmCardSourceOneCardNum, ncmEnhanAlmCfgTODHour=ncmEnhanAlmCfgTODHour, ncmLoopbackEntry=ncmLoopbackEntry, ncmT1ThresholdStatusIndex=ncmT1ThresholdStatusIndex, ncmT1LatchedStatusRAI=ncmT1LatchedStatusRAI, ncmE1CurrentNIDIndex=ncmE1CurrentNIDIndex, ncmT1TimeStampSec=ncmT1TimeStampSec, ncmEnhanAlmCfgTable=ncmEnhanAlmCfgTable, ncmDataPortConfigNIDIndex=ncmDataPortConfigNIDIndex, ncmNodeAddress=ncmNodeAddress, ncmCimType=ncmCimType, ncmE1CurrentCVLine=ncmE1CurrentCVLine, ncmPrevAlarmMsgObjType=ncmPrevAlarmMsgObjType, ncmES15MINExceeded=ncmES15MINExceeded, ncmE1CurrentOOFSs=ncmE1CurrentOOFSs, ncmE1PortFraming=ncmE1PortFraming, ncmT1TotalFrameErrCount=ncmT1TotalFrameErrCount, ncmT1TotalCSSs=ncmT1TotalCSSs, ncmCardIndex=ncmCardIndex, ncmE1PortLOFA=ncmE1PortLOFA, ncmNodeCurrTable=ncmNodeCurrTable, ncmE1PortBERThresholdExceeded=ncmE1PortBERThresholdExceeded, ncmT1IntervalSESs=ncmT1IntervalSESs, ncmListccbBackPlaneBusID=ncmListccbBackPlaneBusID, ncmT1ResetPerfReg=ncmT1ResetPerfReg, ncmNodeInfoEntry=ncmNodeInfoEntry, ncmE1IntervalESsLine=ncmE1IntervalESsLine, ncmRAITimeIntervals=ncmRAITimeIntervals, ncmAISThreshold=ncmAISThreshold, ncmE1TotalIndex=ncmE1TotalIndex, ncmE1PrevTotalLOSSs=ncmE1PrevTotalLOSSs, ncmE1TotalCVPath=ncmE1TotalCVPath, ncmBPVExceeded=ncmBPVExceeded, ncmT1CurrIntervalSec=ncmT1CurrIntervalSec, ncmBPVThresholdCount=ncmBPVThresholdCount, ncmShelfInfoTable=ncmShelfInfoTable, ncmSourceTwoShelfNum=ncmSourceTwoShelfNum, ncmT1Timestamp1=ncmT1Timestamp1, ncmE1TotalSEFSs=ncmE1TotalSEFSs, ncmCircuitInfoSrcPortSite=ncmCircuitInfoSrcPortSite, ncmAISExceeded=ncmAISExceeded, ncmCardSyncSourceTable=ncmCardSyncSourceTable, ncmEnhanAlmCfgBERThreshold=ncmEnhanAlmCfgBERThreshold, ncmTstpattTestPeriod=ncmTstpattTestPeriod, ncmT1SnapShotEndType=ncmT1SnapShotEndType, ncmSourceSegAutoRestore3=ncmSourceSegAutoRestore3, ncmE1IntervalASs=ncmE1IntervalASs, ncmE1ES15MINThreshold=ncmE1ES15MINThreshold, ncmSourceSegThreeClockRef=ncmSourceSegThreeClockRef, ncmUASP24HRThresholdCount=ncmUASP24HRThresholdCount, ncmCircuitInfoEntry=ncmCircuitInfoEntry, ncmCircuitInfoDstTimeslotmap=ncmCircuitInfoDstTimeslotmap, ncmT1PrevTotalDegradedMin=ncmT1PrevTotalDegradedMin, ncmCVL24HRThreshold=ncmCVL24HRThreshold, ncmE1TotalFAE=ncmE1TotalFAE, ncmT1PortSendRAI=ncmT1PortSendRAI, ncmE1AlarmThresholdConfigNIDIndex=ncmE1AlarmThresholdConfigNIDIndex, ncmCircuitInfoCircPriority=ncmCircuitInfoCircPriority, ncmE1AlarmThresholdConfigIndex=ncmE1AlarmThresholdConfigIndex, ncmE1AlarmThresholdStatusIndex=ncmE1AlarmThresholdStatusIndex, ncmT1LatchedStatusCRC6Error=ncmT1LatchedStatusCRC6Error, ncmT1TotalSESs=ncmT1TotalSESs, ncmT1IntervalSASs=ncmT1IntervalSASs, ncmT1ResetPerfCount=ncmT1ResetPerfCount, ncmE1PrevTotalESs=ncmE1PrevTotalESs, ncmShelfSyncSourceSegEntry=ncmShelfSyncSourceSegEntry, ncmSourceTwoCardNum=ncmSourceTwoCardNum, ncmE1ThresholdStatusNIDIndex=ncmE1ThresholdStatusNIDIndex, ncmLOSThresholdCountst=ncmLOSThresholdCountst)
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMGENERIC-MIB", ncmE1SESExceeded=ncmE1SESExceeded, ncmT1PortStatusIndex=ncmT1PortStatusIndex, ncmT1ThresholdRestoreState=ncmT1ThresholdRestoreState, ncmE1IntervalSESsLine=ncmE1IntervalSESsLine, ncmT1IntervalDegradMin=ncmT1IntervalDegradMin, ncmE1TimeStampSec=ncmE1TimeStampSec, ncmE1BERExceeded=ncmE1BERExceeded, ncmRemoteLB=ncmRemoteLB, ncmAlarmThresholdStatusIndex=ncmAlarmThresholdStatusIndex, ncmT1PrevTotalOOFs=ncmT1PrevTotalOOFs, ncmAISTimeIntervalst=ncmAISTimeIntervalst, ncmCirErrClearanceMask=ncmCirErrClearanceMask, ncmDstPortSite=ncmDstPortSite, ncmLOFTimeIntervalst=ncmLOFTimeIntervalst, ncmSrcPortIdentifier=ncmSrcPortIdentifier, ncmDataPortTstPatErrCount=ncmDataPortTstPatErrCount, ncmClearCircuitPortID=ncmClearCircuitPortID, ncmListccbNIDIndex=ncmListccbNIDIndex, ncmES15MINThresholdCount=ncmES15MINThresholdCount, ncmE1PortLatchedLOFA=ncmE1PortLatchedLOFA, ncmCVL15MINThresholdCount=ncmCVL15MINThresholdCount, ncmNumofCircListMessage=ncmNumofCircListMessage, ncmDstTimeslotmap=ncmDstTimeslotmap, ncmT1CurrentSASs=ncmT1CurrentSASs, ncmT1PrevTotalASs=ncmT1PrevTotalASs, ncmClearCircuitGrpTable=ncmClearCircuitGrpTable, ncmDialBkUpInfoEntry=ncmDialBkUpInfoEntry, ncmEnhanAlmCfgNIDIndex=ncmEnhanAlmCfgNIDIndex, ncmE1PrevTotalFAE=ncmE1PrevTotalFAE, ncmT1ThresholdSESCount=ncmT1ThresholdSESCount, ncmAISTimeIntervals=ncmAISTimeIntervals, ncmBPVThresholdCountst=ncmBPVThresholdCountst, ncmE1PortLatchedStatusNIDIndex=ncmE1PortLatchedStatusNIDIndex, ncmT1PortStatusTable=ncmT1PortStatusTable, ncmT1IntervalEntry=ncmT1IntervalEntry, ncmE1PortFaseAlarm=ncmE1PortFaseAlarm, ncmE1Timestamp1=ncmE1Timestamp1, ncmT1FramingType=ncmT1FramingType, ncmEnhanAlmCfgCRCThreshold=ncmEnhanAlmCfgCRCThreshold, ncmE1PrevTotalNIDIndex=ncmE1PrevTotalNIDIndex, ncmEquipmentType=ncmEquipmentType, ncmCardInfoTable=ncmCardInfoTable, ncmT1PortLOF=ncmT1PortLOF, ncmSourceOneCardNum=ncmSourceOneCardNum, ncmDialBkUpAction=ncmDialBkUpAction, ncmAlarmConfigNIDIndex=ncmAlarmConfigNIDIndex, ncmE1IntervalFECPath=ncmE1IntervalFECPath, ncmE1LineRestoreSec=ncmE1LineRestoreSec, ncmT1IntervalOOFs=ncmT1IntervalOOFs, ncmT1IntervalAISs=ncmT1IntervalAISs, ncmAdvancedT1ConfigEntry=ncmAdvancedT1ConfigEntry, ncmE1PortLatchedCRC4Error=ncmE1PortLatchedCRC4Error, ncmT1TimeSlot=ncmT1TimeSlot, ncmT1LatchedStatusLOS=ncmT1LatchedStatusLOS, ncmDataPortStatusCimType=ncmDataPortStatusCimType, ncmLOSThreshold=ncmLOSThreshold, ncmDataPortConfigTable=ncmDataPortConfigTable, ncmT1LineIndex=ncmT1LineIndex, ncmT1IntervalLOFC=ncmT1IntervalLOFC, ncmIDPromTable=ncmIDPromTable, ncmE1TotalEntry=ncmE1TotalEntry, ncmT1PrevTotalFrameErrCount=ncmT1PrevTotalFrameErrCount, ncmCVP15MINExceeded=ncmCVP15MINExceeded, ncmShelfSyncSourceSegIndex=ncmShelfSyncSourceSegIndex, ncmT1PreformanceSnapShotTable=ncmT1PreformanceSnapShotTable, ncmCardSyncNIDIndex=ncmCardSyncNIDIndex, ncmDataPortStatusLoopback=ncmDataPortStatusLoopback, ncmT1InbandISDNEnableDisable=ncmT1InbandISDNEnableDisable, ncmT1TotalDegradedMin=ncmT1TotalDegradedMin, ncmUASP15MINThreshold=ncmUASP15MINThreshold, ncmCardReceiveClockFromShelf=ncmCardReceiveClockFromShelf, ncmShelfSyncSourceTable=ncmShelfSyncSourceTable, ncmT1LatchedStatusNIDIndex=ncmT1LatchedStatusNIDIndex, ncmE1IntervalEndType=ncmE1IntervalEndType, ncmListccbCircPriority=ncmListccbCircPriority, ncmE1PortIdlePattern=ncmE1PortIdlePattern, ncmDataPortStatusEntry=ncmDataPortStatusEntry, ncmClearCircuitGrpEntry=ncmClearCircuitGrpEntry, ncmT1ThresholdSESExceeded=ncmT1ThresholdSESExceeded, ncmE1IntervalCVLine=ncmE1IntervalCVLine, ncmE1TotalAISSs=ncmE1TotalAISSs, ncmListGetMsgNumEntry=ncmListGetMsgNumEntry, ncmNodeCurrIndex=ncmNodeCurrIndex, ncmT1PrevTotalSESs=ncmT1PrevTotalSESs, ncmE1PortLOC=ncmE1PortLOC, ncmT1PrevTotalESs=ncmT1PrevTotalESs, ncmES24HRExceeded=ncmES24HRExceeded, ncmT1CurrentSEFs=ncmT1CurrentSEFs, ncmDialBkUpInfoNIDIndex=ncmDialBkUpInfoNIDIndex, ncmShelfSyncSourceIndex=ncmShelfSyncSourceIndex, ncmT1LatchedStatusBPVThreExcd=ncmT1LatchedStatusBPVThreExcd, ncmE1ThresholdStatusTable=ncmE1ThresholdStatusTable, ncmE1TotalESs=ncmE1TotalESs, ncmCircuitInfoDstCardEquipID=ncmCircuitInfoDstCardEquipID, ncmLOSExceeded=ncmLOSExceeded, ncmCimSerialNumber=ncmCimSerialNumber, ncmPortTimeslotPortID=ncmPortTimeslotPortID, ncmE1RAITimeInterval=ncmE1RAITimeInterval, ncmES15MINThresholdCountst=ncmES15MINThresholdCountst, ncmLOFExceededE1=ncmLOFExceededE1, ncmT1CurrentASs=ncmT1CurrentASs, ncmEnhanAlmCfgLinRestEvalPer=ncmEnhanAlmCfgLinRestEvalPer, ncmE1PortFramingSlip=ncmE1PortFramingSlip, ncmT1IntervalNIDIndex=ncmT1IntervalNIDIndex, ncmT1PortFramingSlip=ncmT1PortFramingSlip, ncmT1PrevTotalUASs=ncmT1PrevTotalUASs, ncmSES15MINThresholdCountst=ncmSES15MINThresholdCountst, ncmSourceSegOneCardNum=ncmSourceSegOneCardNum, ncmE1IntervalAISSs=ncmE1IntervalAISSs, ncmE1CurrentASs=ncmE1CurrentASs, ncmShelfSyncNIDIndex=ncmShelfSyncNIDIndex, ncmDataPortStatusLineRLTM=ncmDataPortStatusLineRLTM, ncmT1State=ncmT1State, ncmCimManufacturePartNumber=ncmCimManufacturePartNumber, ncmT1PrevTotalSASs=ncmT1PrevTotalSASs, ncmT1CurrentBESs=ncmT1CurrentBESs, ncmDataPortStatusLineIndicate=ncmDataPortStatusLineIndicate, ncmE1TotalSESsLine=ncmE1TotalSESsLine, ncmT1LatchedStatusLOF=ncmT1LatchedStatusLOF, ncmCardSourceOneClockRef=ncmCardSourceOneClockRef, ncmE1CodeViolationMode=ncmE1CodeViolationMode, ncmT1PerfCountCurBPVErrCnt=ncmT1PerfCountCurBPVErrCnt, ncmE1IntervalSEFSs=ncmE1IntervalSEFSs, ncmIDPromNIDIndex=ncmIDPromNIDIndex, ncmAlarmThresholdStatusTable=ncmAlarmThresholdStatusTable, ncmUASP15MINExceeded=ncmUASP15MINExceeded, ncmE1TotalNIDIndex=ncmE1TotalNIDIndex, ncmLOFTimeInterval=ncmLOFTimeInterval, ncmCardCurrentSyncSource=ncmCardCurrentSyncSource, ncmPrevAlarmMsgAlarmInstance=ncmPrevAlarmMsgAlarmInstance, ncmLOSThresholdCount=ncmLOSThresholdCount, ncmE1IntervalNIDIndex=ncmE1IntervalNIDIndex, ncmT1PerfCountCurCRC6Error=ncmT1PerfCountCurCRC6Error, ncmAlarmThresholdConfigEntry=ncmAlarmThresholdConfigEntry, ncmAlmCfgSrcAddr=ncmAlmCfgSrcAddr, ncmT1CurrentDegradedMin=ncmT1CurrentDegradedMin, ncmE1PortLatchedBPVThresholdExceeded=ncmE1PortLatchedBPVThresholdExceeded, ncmT1PerfCountIndex=ncmT1PerfCountIndex, ncmIDPromIndex=ncmIDPromIndex, ncmT1IntervalIndex=ncmT1IntervalIndex, ncmT1SnapShot=ncmT1SnapShot, ncmT1TotalSEFs=ncmT1TotalSEFs, ncmT1IntervalUASs=ncmT1IntervalUASs, ncmLocationID=ncmLocationID, ncmE1AlarmThresholdStatusNIDIndex=ncmE1AlarmThresholdStatusNIDIndex, ncmDataPortStatusLineCACB=ncmDataPortStatusLineCACB, ncmTstpattLineIndex=ncmTstpattLineIndex, ncmE1PortLatchedAIS=ncmE1PortLatchedAIS, ncmSetAllOnes=ncmSetAllOnes, ncmLOFTimeIntervals=ncmLOFTimeIntervals, ncmT1PreformanceSnapShotEntry=ncmT1PreformanceSnapShotEntry, ncmE1PrevTotalTable=ncmE1PrevTotalTable, ncmE1PortRAI=ncmE1PortRAI, ncmCurrAlarmMsgNIDIndex=ncmCurrAlarmMsgNIDIndex, ncmadvfdlLBEnable=ncmadvfdlLBEnable, ncmCardSourceTwoClockRef=ncmCardSourceTwoClockRef, ncmShelfSyncSegNIDIndex=ncmShelfSyncSegNIDIndex, ncmEquipmentIDNIDIndex=ncmEquipmentIDNIDIndex, ncmCardSyncSourceEntry=ncmCardSyncSourceEntry, ncmT1TotalTable=ncmT1TotalTable, ncmT1PrevTotalEntry=ncmT1PrevTotalEntry, ncmSourceThreeShelfNum=ncmSourceThreeShelfNum, ncmE1PortStatusTable=ncmE1PortStatusTable, ncmE1IntervalUASs=ncmE1IntervalUASs, ncmE1PortConfigEntry=ncmE1PortConfigEntry, ncmT1TotalESsTypeA=ncmT1TotalESsTypeA, ncmE1CRC4Status=ncmE1CRC4Status, ncmHardwareRevision=ncmHardwareRevision, ncmPortTimeslotAllocTable=ncmPortTimeslotAllocTable, ncmShelfIndex=ncmShelfIndex, ncmE1PortConfigTable=ncmE1PortConfigTable, ncmDataPortStatusLineLOS=ncmDataPortStatusLineLOS, ncmT1NetworkLBOEQLIZ=ncmT1NetworkLBOEQLIZ, ncmPortTimeslotCardEquipID=ncmPortTimeslotCardEquipID, ncmPrevAlarmMsgNumber=ncmPrevAlarmMsgNumber, ncmT1EnableNetOnesDensity=ncmT1EnableNetOnesDensity, ncmListccbCircMode=ncmListccbCircMode, ncmT1LatchedStatusEntry=ncmT1LatchedStatusEntry, ncmE1IntervalLOFSs=ncmE1IntervalLOFSs, ncmE1CurrentEntry=ncmE1CurrentEntry, ncmE1PortRepeaterLoopbackTimeout=ncmE1PortRepeaterLoopbackTimeout, ncmBackupCircName=ncmBackupCircName, ncmT1ThresholdCRCExceeded=ncmT1ThresholdCRCExceeded, ncmStartStopTestPattern=ncmStartStopTestPattern, ncmTimeoutLOCSec=ncmTimeoutLOCSec, ncmDstCardEquipID=ncmDstCardEquipID, ncmDataPortStatusTable=ncmDataPortStatusTable, ncmCardRevision=ncmCardRevision, ncmDataPortTestPattern=ncmDataPortTestPattern, ncmLpbkNIDIndex=ncmLpbkNIDIndex, ncmE1CurrentCRC4ErrorCounts=ncmE1CurrentCRC4ErrorCounts, ncmESL15MINThreshold=ncmESL15MINThreshold, ncmT1FramingFormat=ncmT1FramingFormat, ncmPrevAlarmMsgSeverity=ncmPrevAlarmMsgSeverity, ncmActivateDeactLBType=ncmActivateDeactLBType, ncmE1PerformanceSnapShotEntry=ncmE1PerformanceSnapShotEntry, ncmAlmCfgDeclareTime=ncmAlmCfgDeclareTime, ncmE1CurrentSEFSs=ncmE1CurrentSEFSs, ncmPrevAlarmMsgTimeStampms=ncmPrevAlarmMsgTimeStampms, ncmListccbCircStatus=ncmListccbCircStatus, ncmClearCircuitGrpName=ncmClearCircuitGrpName, ncmT1CurrentLOFs=ncmT1CurrentLOFs, ncmT1LatchedStatusIndex=ncmT1LatchedStatusIndex, ncmFirmwareType=ncmFirmwareType, ncmAlarmThresholdConfigNIDIndex=ncmAlarmThresholdConfigNIDIndex, ncmNodeShelf=ncmNodeShelf, ncmLOSTimeInterval=ncmLOSTimeInterval, ncmE1Timestamp=ncmE1Timestamp, ncmT1PortLLB=ncmT1PortLLB, ncmT1LatchedStatusEndType=ncmT1LatchedStatusEndType, ncmT1ThresholdStatusEntry=ncmT1ThresholdStatusEntry, ncmadvfdlStandard=ncmadvfdlStandard, ncmESExceeded=ncmESExceeded, ncmNodeID=ncmNodeID, ncmLOFThreshold=ncmLOFThreshold, ncmShelfSyncSourceSegNum=ncmShelfSyncSourceSegNum, ncmE1PerformanceSnapShotTable=ncmE1PerformanceSnapShotTable, ncmAlarmThresholdStatusNIDIndex=ncmAlarmThresholdStatusNIDIndex, ncmE1RAIThreshold=ncmE1RAIThreshold, ncmListMsgNumCardEquipID=ncmListMsgNumCardEquipID, ncmT1TotalLOSs=ncmT1TotalLOSs, ncmAlarmThresholdStatusEntry=ncmAlarmThresholdStatusEntry, ncmT1ThresholdBPVExceeded=ncmT1ThresholdBPVExceeded, ncmT1TotalOOFs=ncmT1TotalOOFs, ncmT1TotalSASs=ncmT1TotalSASs, ncmEnhanAlmCfgBPVThreshold=ncmEnhanAlmCfgBPVThreshold, ncmAlmCfgDataPort2EnableAlmRpt=ncmAlmCfgDataPort2EnableAlmRpt, ncmSourceSegTwoShelfNum=ncmSourceSegTwoShelfNum, ncmE1IntervalTable=ncmE1IntervalTable, ncmDataPortStatusLineCDCC=ncmDataPortStatusLineCDCC, ncmE1PortPLB=ncmE1PortPLB, ncmT1TotalErrorFreeSec=ncmT1TotalErrorFreeSec, ncmT1CurrentEntry=ncmT1CurrentEntry, ncmResetTestCounter=ncmResetTestCounter, ncmListMsgNumNIDIndex=ncmListMsgNumNIDIndex, ncmT1CurrentEndType=ncmT1CurrentEndType, ncmDataPortStatusIndex=ncmDataPortStatusIndex, ncmT1PerformanceCountersEntry=ncmT1PerformanceCountersEntry, ncmE1TimeSlotSelect=ncmE1TimeSlotSelect, ncmNodeInfoTable=ncmNodeInfoTable, ncmDialBkUpReqCircName=ncmDialBkUpReqCircName, ncmCirSrcPortErrsetupMask=ncmCirSrcPortErrsetupMask, ncmPortTimeslotAllocEntry=ncmPortTimeslotAllocEntry, ncmT1IntervalLOFs=ncmT1IntervalLOFs, ncmCVL24HRThresholdCount=ncmCVL24HRThresholdCount, ncmE1PortAIS=ncmE1PortAIS, ncmE1PortRFA=ncmE1PortRFA, ncmSourceSegThreeShelfNum=ncmSourceSegThreeShelfNum, ncmT1PrevTotalCSSs=ncmT1PrevTotalCSSs, ncmE1TotalOOFSs=ncmE1TotalOOFSs, ncmBPVExceededE1=ncmBPVExceededE1, ncmE1PrevTotalUASs=ncmE1PrevTotalUASs, ncmListMsgNumCircuitGroup=ncmListMsgNumCircuitGroup, ncmSES24HRThresholdCountst=ncmSES24HRThresholdCountst)
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMGENERIC-MIB", ncmE1PrevTotalFECPath=ncmE1PrevTotalFECPath, ncmT1IntervalFrameErr=ncmT1IntervalFrameErr)
