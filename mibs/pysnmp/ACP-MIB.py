#
# PySNMP MIB module ACP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 16:58:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
giproducts, = mibBuilder.importSymbols("BCS-IDENT-MIB", "giproducts")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, Counter32, Counter64, iso, Gauge32, IpAddress, NotificationType, ObjectIdentity, Unsigned32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "Counter64", "iso", "Gauge32", "IpAddress", "NotificationType", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
acpStatus = ModuleIdentity((1, 3, 6, 1, 4, 1, 1166, 1, 11))
acpStatus.setRevisions(('2003-06-10 00:00',))
if mibBuilder.loadTexts: acpStatus.setLastUpdated('200306100000Z')
if mibBuilder.loadTexts: acpStatus.setOrganization('Motorola')
acpNumberofEncryptTypes = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpNumberofEncryptTypes.setStatus('current')
acpNumberofDecryptTypes = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpNumberofDecryptTypes.setStatus('current')
acpStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3), )
if mibBuilder.loadTexts: acpStatusTable.setStatus('current')
acpStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1), ).setIndexNames((0, "ACP-MIB", "acpEncryptType"), (0, "ACP-MIB", "acpUnitIndex"), (0, "ACP-MIB", "acpServiceIndex"))
if mibBuilder.loadTexts: acpStatusEntry.setStatus('current')
acpEncryptType = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("encryptAcp", 1), ("decryptAcp", 2))))
if mibBuilder.loadTexts: acpEncryptType.setStatus('current')
acpUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: acpUnitIndex.setStatus('current')
acpServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: acpServiceIndex.setStatus('current')
acpScramblingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("des", 1), ("csa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpScramblingMode.setStatus('current')
acpUnitAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpUnitAddress.setStatus('current')
acpInputInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acpInterfaceSerial", 1), ("acpInterfaceParallel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpInputInterface.setStatus('current')
acpOutputInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acpInterfaceSerial", 1), ("acpInterfaceParallel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpOutputInterface.setStatus('current')
acpServNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpServNumber.setStatus('current')
acpServAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("unauthorized", 1), ("authorized", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpServAuthorization.setStatus('current')
acpServAuthReaCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpServAuthReaCode.setStatus('current')
acpServEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 255), ("fixedwk", 1), ("fixedpk", 2), ("unencrypted", 3), ("fullencryption", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpServEncryption.setStatus('current')
acpCatSeqNums = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpCatSeqNums.setStatus('current')
acpEmmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpEmmCount.setStatus('current')
acpProgramEpochNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpProgramEpochNumber.setStatus('current')
acpNextProgramEpochNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpNextProgramEpochNumber.setStatus('current')
acpNextServAuthorization = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("unauthorized", 1), ("authorized", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpNextServAuthorization.setStatus('current')
acpNextServAuthReasonCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpNextServAuthReasonCode.setStatus('current')
acpInputSourceIdA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpInputSourceIdA.setStatus('current')
acpInputSourceIdB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpInputSourceIdB.setStatus('current')
acpPidTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 1, 11, 4), )
if mibBuilder.loadTexts: acpPidTable.setStatus('current')
acpPidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 1, 11, 4, 1), ).setIndexNames((0, "ACP-MIB", "acpPidTblEncryptType"), (0, "ACP-MIB", "acpPidTblUnitIndex"), (0, "ACP-MIB", "acpPidTblServiceIndex"), (0, "ACP-MIB", "acpPidTblPidIndex"))
if mibBuilder.loadTexts: acpPidEntry.setStatus('current')
acpPidTblEncryptType = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("encryptAcp", 1), ("decryptAcp", 2))))
if mibBuilder.loadTexts: acpPidTblEncryptType.setStatus('current')
acpPidTblUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: acpPidTblUnitIndex.setStatus('current')
acpPidTblServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 4, 1, 3), Integer32())
if mibBuilder.loadTexts: acpPidTblServiceIndex.setStatus('current')
acpPidTblPidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 4, 1, 4), Integer32())
if mibBuilder.loadTexts: acpPidTblPidIndex.setStatus('current')
acpPidTblAssignedPid = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpPidTblAssignedPid.setStatus('current')
acpPidTblEcmPid = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpPidTblEcmPid.setStatus('current')
acpPidTblPidMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 1, 11, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpPidTblPidMask.setStatus('current')
acpMibRevision = MibScalar((1, 3, 6, 1, 4, 1, 1166, 1, 11, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acpMibRevision.setStatus('current')
mibBuilder.exportSymbols("ACP-MIB", acpNumberofDecryptTypes=acpNumberofDecryptTypes, acpUnitAddress=acpUnitAddress, acpProgramEpochNumber=acpProgramEpochNumber, acpServEncryption=acpServEncryption, acpMibRevision=acpMibRevision, acpInputInterface=acpInputInterface, acpServiceIndex=acpServiceIndex, acpServAuthorization=acpServAuthorization, acpNextProgramEpochNumber=acpNextProgramEpochNumber, acpNextServAuthorization=acpNextServAuthorization, acpStatus=acpStatus, acpPidTblPidIndex=acpPidTblPidIndex, PYSNMP_MODULE_ID=acpStatus, acpCatSeqNums=acpCatSeqNums, acpPidTable=acpPidTable, acpServAuthReaCode=acpServAuthReaCode, acpPidTblServiceIndex=acpPidTblServiceIndex, acpStatusTable=acpStatusTable, acpInputSourceIdA=acpInputSourceIdA, acpPidTblEncryptType=acpPidTblEncryptType, acpNumberofEncryptTypes=acpNumberofEncryptTypes, acpPidEntry=acpPidEntry, acpInputSourceIdB=acpInputSourceIdB, acpScramblingMode=acpScramblingMode, acpOutputInterface=acpOutputInterface, acpServNumber=acpServNumber, acpNextServAuthReasonCode=acpNextServAuthReasonCode, acpPidTblUnitIndex=acpPidTblUnitIndex, acpPidTblEcmPid=acpPidTblEcmPid, acpPidTblAssignedPid=acpPidTblAssignedPid, acpEncryptType=acpEncryptType, acpUnitIndex=acpUnitIndex, acpEmmCount=acpEmmCount, acpPidTblPidMask=acpPidTblPidMask, acpStatusEntry=acpStatusEntry)
