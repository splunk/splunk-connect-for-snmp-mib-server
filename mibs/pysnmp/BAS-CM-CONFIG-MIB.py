#
# PySNMP MIB module BAS-CM-CONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-CM-CONFIG-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
basCmConfig, = mibBuilder.importSymbols("BAS-MIB", "basCmConfig")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Gauge32, iso, TimeTicks, Counter32, MibIdentifier, NotificationType, Counter64, IpAddress, ModuleIdentity, ObjectIdentity, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "iso", "TimeTicks", "Counter32", "MibIdentifier", "NotificationType", "Counter64", "IpAddress", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
basCmConfigMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1))
if mibBuilder.loadTexts: basCmConfigMIB.setLastUpdated('9901200000Z')
if mibBuilder.loadTexts: basCmConfigMIB.setOrganization('Broadband Access Systems, Inc.')
basCmDsFreq = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmDsFreq.setStatus('current')
basCmUsChannelId = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmUsChannelId.setStatus('current')
basCmNetworkAccess = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmNetworkAccess.setStatus('current')
basCmCosTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 4), )
if mibBuilder.loadTexts: basCmCosTable.setStatus('current')
basCmCosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 4, 1), ).setIndexNames((0, "BAS-CM-CONFIG-MIB", "basCmCosClassId"))
if mibBuilder.loadTexts: basCmCosEntry.setStatus('current')
basCmCosClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmCosClassId.setStatus('current')
basCmCosMaxDsBps = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmCosMaxDsBps.setStatus('current')
basCmCosMaxUsBps = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmCosMaxUsBps.setStatus('current')
basCmCosUsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("zero", 0), ("one", 1), ("two", 2), ("three", 3), ("four", 4), ("five", 5), ("six", 6), ("seven", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmCosUsPriority.setStatus('current')
basCmCosGuaranteedUsBps = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmCosGuaranteedUsBps.setStatus('current')
basCmCosMaxUsBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmCosMaxUsBurst.setStatus('current')
basCmCosBp = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmCosBp.setStatus('current')
basCmCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 5))
basCmCapConcat = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmCapConcat.setStatus('current')
basSnmpMibObjectTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 11), )
if mibBuilder.loadTexts: basSnmpMibObjectTable.setStatus('current')
basSnmpMibObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 11, 1), ).setIndexNames((0, "BAS-CM-CONFIG-MIB", "basSnmpMibObjectIdx"))
if mibBuilder.loadTexts: basSnmpMibObjectEntry.setStatus('current')
basSnmpMibObjectIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 11, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSnmpMibObjectIdx.setStatus('current')
basSnmpMibObjectVarBind = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basSnmpMibObjectVarBind.setStatus('current')
basCpeAddressTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 14), )
if mibBuilder.loadTexts: basCpeAddressTable.setStatus('current')
basCpeAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 14, 1), ).setIndexNames((0, "BAS-CM-CONFIG-MIB", "basCpeAddressIdx"))
if mibBuilder.loadTexts: basCpeAddressEntry.setStatus('current')
basCpeAddressIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 14, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCpeAddressIdx.setStatus('current')
basCpeAddressMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCpeAddressMacAddr.setStatus('current')
basCmBpiSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 17))
basCmBpiAuthWaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 17, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmBpiAuthWaitTimeout.setStatus('current')
basCmBpiReAuthWaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmBpiReAuthWaitTimeout.setStatus('current')
basCmBpiAuthGraceTime = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmBpiAuthGraceTime.setStatus('current')
basCmBpiOperWaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 17, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmBpiOperWaitTimeout.setStatus('current')
basCmBpiRekeyWaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 17, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmBpiRekeyWaitTimeout.setStatus('current')
basCmBpiTEKGraceTime = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 17, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmBpiTEKGraceTime.setStatus('current')
basCmBpiAuthRejectWaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 17, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmBpiAuthRejectWaitTimeout.setStatus('current')
basCmBpiSAMapWaitTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 17, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmBpiSAMapWaitTimeout.setStatus('current')
basCmBpiMaxClockDrift = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 17, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmBpiMaxClockDrift.setStatus('current')
basCmBpiSAMapMaxRetries = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 17, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmBpiSAMapMaxRetries.setStatus('current')
basCmMaxNumCPEs = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmMaxNumCPEs.setStatus('current')
basCmMIC = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 256), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmMIC.setStatus('current')
basCmtsMIC = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 257), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basCmtsMIC.setStatus('current')
basCmEndOfMib = MibScalar((1, 3, 6, 1, 4, 1, 3493, 2, 12, 1, 258), Integer32())
if mibBuilder.loadTexts: basCmEndOfMib.setStatus('current')
mibBuilder.exportSymbols("BAS-CM-CONFIG-MIB", basCmCosUsPriority=basCmCosUsPriority, basCmCosMaxUsBurst=basCmCosMaxUsBurst, basCmCosEntry=basCmCosEntry, basCmCapConcat=basCmCapConcat, basCmtsMIC=basCmtsMIC, basCmBpiSAMapWaitTimeout=basCmBpiSAMapWaitTimeout, basCpeAddressEntry=basCpeAddressEntry, basCmBpiSAMapMaxRetries=basCmBpiSAMapMaxRetries, basSnmpMibObjectVarBind=basSnmpMibObjectVarBind, basSnmpMibObjectEntry=basSnmpMibObjectEntry, basCmBpiOperWaitTimeout=basCmBpiOperWaitTimeout, basCmCosMaxDsBps=basCmCosMaxDsBps, basCpeAddressMacAddr=basCpeAddressMacAddr, basCmEndOfMib=basCmEndOfMib, basCmDsFreq=basCmDsFreq, basCmBpiReAuthWaitTimeout=basCmBpiReAuthWaitTimeout, basCmNetworkAccess=basCmNetworkAccess, basCmUsChannelId=basCmUsChannelId, PYSNMP_MODULE_ID=basCmConfigMIB, basCmBpiAuthGraceTime=basCmBpiAuthGraceTime, basCmMIC=basCmMIC, basCmCosGuaranteedUsBps=basCmCosGuaranteedUsBps, basCmCapabilities=basCmCapabilities, basCmCosBp=basCmCosBp, basCmConfigMIB=basCmConfigMIB, basCpeAddressTable=basCpeAddressTable, basCpeAddressIdx=basCpeAddressIdx, basCmMaxNumCPEs=basCmMaxNumCPEs, basCmBpiAuthRejectWaitTimeout=basCmBpiAuthRejectWaitTimeout, basSnmpMibObjectTable=basSnmpMibObjectTable, basCmBpiSettings=basCmBpiSettings, basCmBpiMaxClockDrift=basCmBpiMaxClockDrift, basCmCosTable=basCmCosTable, basCmBpiTEKGraceTime=basCmBpiTEKGraceTime, basCmBpiAuthWaitTimeout=basCmBpiAuthWaitTimeout, basCmCosClassId=basCmCosClassId, basCmCosMaxUsBps=basCmCosMaxUsBps, basSnmpMibObjectIdx=basSnmpMibObjectIdx, basCmBpiRekeyWaitTimeout=basCmBpiRekeyWaitTimeout)
