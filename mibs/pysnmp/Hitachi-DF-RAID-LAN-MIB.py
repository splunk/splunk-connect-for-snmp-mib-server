#
# PySNMP MIB module Hitachi-DF-RAID-LAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Hitachi-DF-RAID-LAN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:38:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, Gauge32, IpAddress, iso, Unsigned32, NotificationType, TimeTicks, ModuleIdentity, Counter64, MibIdentifier, NotificationType, Bits, Counter32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "Gauge32", "IpAddress", "iso", "Unsigned32", "NotificationType", "TimeTicks", "ModuleIdentity", "Counter64", "MibIdentifier", "NotificationType", "Bits", "Counter32", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hitachi = MibIdentifier((1, 3, 6, 1, 4, 1, 116))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 3))
storage = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 3, 11))
dfraid = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 3, 11, 1))
dfraidLan = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2))
systemExMib = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5))
storageExMib = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11))
dfraidExMib = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 1))
dfraidLanExMib = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2))
dfSystemParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 1))
dfWarningCondition = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 2))
dfCommandExecutionCondition = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 3))
dfCacheLoadCondition = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 4))
dfLUNS = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5))
dfPort = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 6))
dfCommandExecutionInternalCondition = MibIdentifier((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 7))
dfSystemProductName = MibScalar((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfSystemProductName.setStatus('mandatory')
dfSystemMicroRevision = MibScalar((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfSystemMicroRevision.setStatus('mandatory')
dfSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfSystemSerialNumber.setStatus('mandatory')
dfRegressionStatus = MibScalar((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfRegressionStatus.setStatus('mandatory')
dfPreventiveMaintenanceInformation = MibScalar((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPreventiveMaintenanceInformation.setStatus('mandatory')
dfWarningReserve1 = MibScalar((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWarningReserve1.setStatus('mandatory')
dfWarningReserve2 = MibScalar((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWarningReserve2.setStatus('mandatory')
dfCommandTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 3, 1), )
if mibBuilder.loadTexts: dfCommandTable.setStatus('mandatory')
dfCommandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 3, 1, 1), ).setIndexNames((0, "Hitachi-DF-RAID-LAN-MIB", "dfLun"))
if mibBuilder.loadTexts: dfCommandEntry.setStatus('mandatory')
dfLun = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLun.setStatus('mandatory')
dfReadCommandNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfReadCommandNumber.setStatus('mandatory')
dfReadHitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfReadHitNumber.setStatus('mandatory')
dfReadHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfReadHitRate.setStatus('mandatory')
dfWriteCommandNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWriteCommandNumber.setStatus('mandatory')
dfWriteHitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWriteHitNumber.setStatus('mandatory')
dfWriteHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWriteHitRate.setStatus('mandatory')
dfWriteDataRate = MibScalar((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWriteDataRate.setStatus('mandatory')
dfLUNSSwitch = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 1), )
if mibBuilder.loadTexts: dfLUNSSwitch.setStatus('mandatory')
dfLUNSSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 1, 1), ).setIndexNames((0, "Hitachi-DF-RAID-LAN-MIB", "dfSwitchSerialNumber"), (0, "Hitachi-DF-RAID-LAN-MIB", "dfSwitchPortID"))
if mibBuilder.loadTexts: dfLUNSSwitchEntry.setStatus('mandatory')
dfSwitchSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfSwitchSerialNumber.setStatus('mandatory')
dfSwitchPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfSwitchPortID.setStatus('mandatory')
dfSwitchOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfSwitchOnOff.setStatus('mandatory')
dfSwitchControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfSwitchControlStatus.setStatus('mandatory')
dfLUNSWWN = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 2), )
if mibBuilder.loadTexts: dfLUNSWWN.setStatus('mandatory')
dfLUNSWWNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 2, 1), ).setIndexNames((0, "Hitachi-DF-RAID-LAN-MIB", "dfWWNSerialNumber"), (0, "Hitachi-DF-RAID-LAN-MIB", "dfWWNPortID"), (0, "Hitachi-DF-RAID-LAN-MIB", "dfWWNControlIndex"))
if mibBuilder.loadTexts: dfLUNSWWNEntry.setStatus('mandatory')
dfWWNSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWWNSerialNumber.setStatus('mandatory')
dfWWNPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWWNPortID.setStatus('mandatory')
dfWWNControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWWNControlIndex.setStatus('mandatory')
dfWWNWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWWNWWN.setStatus('mandatory')
dfWWNID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWWNID.setStatus('mandatory')
dfWWNNickname = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWWNNickname.setStatus('deprecated')
dfWWNUseNickname = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWWNUseNickname.setStatus('mandatory')
dfWWNControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfWWNControlStatus.setStatus('mandatory')
dfLUNSWWNGroup = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 3), )
if mibBuilder.loadTexts: dfLUNSWWNGroup.setStatus('mandatory')
dfLUNSWWNGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 3, 1), ).setIndexNames((0, "Hitachi-DF-RAID-LAN-MIB", "dfWWNGroupSerialNumber"), (0, "Hitachi-DF-RAID-LAN-MIB", "dfWWNGroupPortID"), (0, "Hitachi-DF-RAID-LAN-MIB", "dfWWNGroupControlIndex"))
if mibBuilder.loadTexts: dfLUNSWWNGroupEntry.setStatus('mandatory')
dfWWNGroupSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: dfWWNGroupSerialNumber.setStatus('mandatory')
dfWWNGroupPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: dfWWNGroupPortID.setStatus('mandatory')
dfWWNGroupControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: dfWWNGroupControlIndex.setStatus('mandatory')
dfWWNGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 3, 1, 4), Integer32())
if mibBuilder.loadTexts: dfWWNGroupID.setStatus('mandatory')
dfWWNGroupNickname = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: dfWWNGroupNickname.setStatus('mandatory')
dfWWNGroupedWWNs = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2)))
if mibBuilder.loadTexts: dfWWNGroupedWWNs.setStatus('mandatory')
dfWWNGroupControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 3, 1, 7), Integer32())
if mibBuilder.loadTexts: dfWWNGroupControlStatus.setStatus('mandatory')
dfLUNSLUN = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 4), )
if mibBuilder.loadTexts: dfLUNSLUN.setStatus('mandatory')
dfLUNSLUNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 4, 1), ).setIndexNames((0, "Hitachi-DF-RAID-LAN-MIB", "dfLUNSerialNumber"), (0, "Hitachi-DF-RAID-LAN-MIB", "dfLUNPortID"), (0, "Hitachi-DF-RAID-LAN-MIB", "dfLUNLUN"))
if mibBuilder.loadTexts: dfLUNSLUNEntry.setStatus('mandatory')
dfLUNSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLUNSerialNumber.setStatus('mandatory')
dfLUNPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLUNPortID.setStatus('mandatory')
dfLUNLUN = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLUNLUN.setStatus('mandatory')
dfLUNWWNSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLUNWWNSecurity.setStatus('mandatory')
dfLUNWWNGroupSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLUNWWNGroupSecurity.setStatus('mandatory')
dfLUNControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfLUNControlStatus.setStatus('mandatory')
dfLUNSLUNGroup = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 5), )
if mibBuilder.loadTexts: dfLUNSLUNGroup.setStatus('mandatory')
dfLUNSLUNGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 5, 1), ).setIndexNames((0, "Hitachi-DF-RAID-LAN-MIB", "dfLUNGroupSerialNumber"), (0, "Hitachi-DF-RAID-LAN-MIB", "dfLUNGroupPortID"), (0, "Hitachi-DF-RAID-LAN-MIB", "dfLUNGroupControlIndex"))
if mibBuilder.loadTexts: dfLUNSLUNGroupEntry.setStatus('mandatory')
dfLUNGroupSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: dfLUNGroupSerialNumber.setStatus('mandatory')
dfLUNGroupPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: dfLUNGroupPortID.setStatus('mandatory')
dfLUNGroupControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 5, 1, 3), Integer32())
if mibBuilder.loadTexts: dfLUNGroupControlIndex.setStatus('mandatory')
dfLUNGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 5, 1, 4), Integer32())
if mibBuilder.loadTexts: dfLUNGroupID.setStatus('mandatory')
dfLUNGroupNickname = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: dfLUNGroupNickname.setStatus('deprecated')
dfLUNGroupedLUNs = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)))
if mibBuilder.loadTexts: dfLUNGroupedLUNs.setStatus('mandatory')
dfLUNGroupWWNSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2)))
if mibBuilder.loadTexts: dfLUNGroupWWNSecurity.setStatus('mandatory')
dfLUNGroupWWNGroupSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1)))
if mibBuilder.loadTexts: dfLUNGroupWWNGroupSecurity.setStatus('mandatory')
dfLUNGroupControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 5, 5, 1, 9), Integer32())
if mibBuilder.loadTexts: dfLUNGroupControlStatus.setStatus('mandatory')
dfPortinf = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 6, 1), )
if mibBuilder.loadTexts: dfPortinf.setStatus('mandatory')
dfPortinfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 6, 1, 1), ).setIndexNames((0, "Hitachi-DF-RAID-LAN-MIB", "dfPortSerialNumber"), (0, "Hitachi-DF-RAID-LAN-MIB", "dfPortID"))
if mibBuilder.loadTexts: dfPortinfEntry.setStatus('mandatory')
dfPortSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPortSerialNumber.setStatus('mandatory')
dfPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPortID.setStatus('mandatory')
dfPortKind = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPortKind.setStatus('mandatory')
dfPortHostMode = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 6, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPortHostMode.setStatus('mandatory')
dfPortFibreAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPortFibreAddress.setStatus('mandatory')
dfPortFibreTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPortFibreTopology.setStatus('mandatory')
dfPortControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPortControlStatus.setStatus('mandatory')
dfPortDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 6, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPortDisplayName.setStatus('mandatory')
dfPortWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 6, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfPortWWN.setStatus('mandatory')
dfCommandInternalTable = MibTable((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 7, 1), )
if mibBuilder.loadTexts: dfCommandInternalTable.setStatus('mandatory')
dfCommandInternalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 7, 1, 1), ).setIndexNames((0, "Hitachi-DF-RAID-LAN-MIB", "dfInternalLun"))
if mibBuilder.loadTexts: dfCommandInternalEntry.setStatus('mandatory')
dfInternalLun = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInternalLun.setStatus('mandatory')
dfInternalReadCommandNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInternalReadCommandNumber.setStatus('mandatory')
dfInternalReadHitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInternalReadHitNumber.setStatus('mandatory')
dfInternalReadHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInternalReadHitRate.setStatus('mandatory')
dfInternalWriteCommandNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInternalWriteCommandNumber.setStatus('mandatory')
dfInternalWriteHitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInternalWriteHitNumber.setStatus('mandatory')
dfInternalWriteHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 116, 5, 11, 1, 2, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfInternalWriteHitRate.setStatus('mandatory')
systemDown = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,1))
driveFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,2))
fanFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,3))
powerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,4))
batteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,5))
cacheFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,6))
upsFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,7))
inboxFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,8))
backupCircuitFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,9))
otherControllerFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,10))
warning = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,11))
spareDriveFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,12))
microprogramReplacementExecuted = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,13))
encFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,14))
loopFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,15))
pathFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,16))
drivePreMainte = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,21))
nasServerFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,200))
nasPathFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,201))
nasUpsFailure = NotificationType((1, 3, 6, 1, 4, 1, 116, 3, 11, 1, 2) + (0,202))
mibBuilder.exportSymbols("Hitachi-DF-RAID-LAN-MIB", dfPortFibreTopology=dfPortFibreTopology, dfCommandInternalEntry=dfCommandInternalEntry, dfraid=dfraid, dfLUNGroupWWNSecurity=dfLUNGroupWWNSecurity, dfPortDisplayName=dfPortDisplayName, system=system, dfraidExMib=dfraidExMib, dfWWNUseNickname=dfWWNUseNickname, dfLUNGroupPortID=dfLUNGroupPortID, warning=warning, dfLUNControlStatus=dfLUNControlStatus, dfLUNSSwitchEntry=dfLUNSSwitchEntry, dfLUNGroupSerialNumber=dfLUNGroupSerialNumber, dfCacheLoadCondition=dfCacheLoadCondition, dfLUNGroupControlStatus=dfLUNGroupControlStatus, dfPortID=dfPortID, dfCommandEntry=dfCommandEntry, dfLUNGroupedLUNs=dfLUNGroupedLUNs, dfPortSerialNumber=dfPortSerialNumber, dfPortHostMode=dfPortHostMode, dfLUNSWWNEntry=dfLUNSWWNEntry, dfLUNGroupID=dfLUNGroupID, nasServerFailure=nasServerFailure, dfLUNSWWNGroup=dfLUNSWWNGroup, drivePreMainte=drivePreMainte, dfLUNLUN=dfLUNLUN, dfSystemProductName=dfSystemProductName, dfPort=dfPort, driveFailure=driveFailure, dfSystemSerialNumber=dfSystemSerialNumber, encFailure=encFailure, dfCommandExecutionCondition=dfCommandExecutionCondition, dfLUNPortID=dfLUNPortID, dfInternalReadHitNumber=dfInternalReadHitNumber, dfSwitchPortID=dfSwitchPortID, dfLUNGroupControlIndex=dfLUNGroupControlIndex, dfPortKind=dfPortKind, dfWWNGroupControlStatus=dfWWNGroupControlStatus, dfWriteHitNumber=dfWriteHitNumber, microprogramReplacementExecuted=microprogramReplacementExecuted, dfRegressionStatus=dfRegressionStatus, backupCircuitFailure=backupCircuitFailure, dfWWNGroupNickname=dfWWNGroupNickname, dfCommandInternalTable=dfCommandInternalTable, dfLUNWWNGroupSecurity=dfLUNWWNGroupSecurity, dfWWNControlStatus=dfWWNControlStatus, dfLUNSWWN=dfLUNSWWN, dfraidLan=dfraidLan, dfWWNID=dfWWNID, nasPathFailure=nasPathFailure, dfLUNS=dfLUNS, dfReadCommandNumber=dfReadCommandNumber, storageExMib=storageExMib, dfWarningReserve2=dfWarningReserve2, dfPortinf=dfPortinf, dfCommandExecutionInternalCondition=dfCommandExecutionInternalCondition, dfLUNGroupWWNGroupSecurity=dfLUNGroupWWNGroupSecurity, dfSwitchOnOff=dfSwitchOnOff, dfLUNSSwitch=dfLUNSSwitch, pathFailure=pathFailure, dfSwitchControlStatus=dfSwitchControlStatus, dfPreventiveMaintenanceInformation=dfPreventiveMaintenanceInformation, dfPortWWN=dfPortWWN, dfPortinfEntry=dfPortinfEntry, dfWWNGroupSerialNumber=dfWWNGroupSerialNumber, loopFailure=loopFailure, dfLun=dfLun, dfWWNWWN=dfWWNWWN, dfWWNGroupPortID=dfWWNGroupPortID, dfLUNWWNSecurity=dfLUNWWNSecurity, dfWarningReserve1=dfWarningReserve1, dfWWNPortID=dfWWNPortID, dfLUNSWWNGroupEntry=dfLUNSWWNGroupEntry, dfWriteHitRate=dfWriteHitRate, dfWWNGroupControlIndex=dfWWNGroupControlIndex, batteryFailure=batteryFailure, dfReadHitRate=dfReadHitRate, dfWarningCondition=dfWarningCondition, dfWriteDataRate=dfWriteDataRate, dfWWNControlIndex=dfWWNControlIndex, dfWriteCommandNumber=dfWriteCommandNumber, dfLUNSLUNGroupEntry=dfLUNSLUNGroupEntry, dfCommandTable=dfCommandTable, upsFailure=upsFailure, dfLUNSLUNEntry=dfLUNSLUNEntry, dfInternalLun=dfInternalLun, dfLUNSLUNGroup=dfLUNSLUNGroup, dfSystemMicroRevision=dfSystemMicroRevision, inboxFailure=inboxFailure, dfInternalWriteHitNumber=dfInternalWriteHitNumber, systemDown=systemDown, dfLUNSerialNumber=dfLUNSerialNumber, dfReadHitNumber=dfReadHitNumber, dfLUNSLUN=dfLUNSLUN, dfSystemParameter=dfSystemParameter, nasUpsFailure=nasUpsFailure, spareDriveFailure=spareDriveFailure, dfInternalReadHitRate=dfInternalReadHitRate, otherControllerFailure=otherControllerFailure, storage=storage, cacheFailure=cacheFailure, dfInternalWriteHitRate=dfInternalWriteHitRate, dfLUNGroupNickname=dfLUNGroupNickname, dfWWNGroupID=dfWWNGroupID, dfWWNGroupedWWNs=dfWWNGroupedWWNs, systemExMib=systemExMib, dfInternalReadCommandNumber=dfInternalReadCommandNumber, dfWWNSerialNumber=dfWWNSerialNumber, dfInternalWriteCommandNumber=dfInternalWriteCommandNumber, dfPortFibreAddress=dfPortFibreAddress, dfPortControlStatus=dfPortControlStatus, powerSupplyFailure=powerSupplyFailure, dfraidLanExMib=dfraidLanExMib, fanFailure=fanFailure, dfWWNNickname=dfWWNNickname, dfSwitchSerialNumber=dfSwitchSerialNumber, hitachi=hitachi)
