#
# PySNMP MIB module OMNI-gx2EA1000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2EA1000-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:23:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
gx2Ea1000, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Ea1000")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapPerceivedSeverity, trapNetworkElemSerialNum, trapIdentifier, trapText, trapNetworkElemModelNumber, trapNetworkElemAvailStatus, trapChangedObjectId, trapNETrapLastTrapTimeStamp, trapChangedValueDisplayString, trapChangedValueInteger, trapNetworkElemAdminState, trapNetworkElemAlarmStatus, trapNetworkElemOperState = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity", "trapNetworkElemSerialNum", "trapIdentifier", "trapText", "trapNetworkElemModelNumber", "trapNetworkElemAvailStatus", "trapChangedObjectId", "trapNETrapLastTrapTimeStamp", "trapChangedValueDisplayString", "trapChangedValueInteger", "trapNetworkElemAdminState", "trapNetworkElemAlarmStatus", "trapNetworkElemOperState")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, iso, Bits, Counter32, Integer32, Gauge32, NotificationType, Counter64, Unsigned32, IpAddress, NotificationType, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "iso", "Bits", "Counter32", "Integer32", "Gauge32", "NotificationType", "Counter64", "Unsigned32", "IpAddress", "NotificationType", "TimeTicks", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2ea1000Descriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 1))
gx2ea1000AnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2), )
if mibBuilder.loadTexts: gx2ea1000AnalogTable.setStatus('mandatory')
gx2ea1000AnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1), ).setIndexNames((0, "OMNI-gx2EA1000-MIB", "gx2ea1000AnalogTableIndex"))
if mibBuilder.loadTexts: gx2ea1000AnalogEntry.setStatus('mandatory')
gx2ea1000DigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3), )
if mibBuilder.loadTexts: gx2ea1000DigitalTable.setStatus('mandatory')
gx2ea1000DigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2), ).setIndexNames((0, "OMNI-gx2EA1000-MIB", "gx2ea1000DigitalTableIndex"))
if mibBuilder.loadTexts: gx2ea1000DigitalEntry.setStatus('mandatory')
gx2ea1000StatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4), )
if mibBuilder.loadTexts: gx2ea1000StatusTable.setStatus('mandatory')
gx2ea1000StatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3), ).setIndexNames((0, "OMNI-gx2EA1000-MIB", "gx2ea1000StatusTableIndex"))
if mibBuilder.loadTexts: gx2ea1000StatusEntry.setStatus('mandatory')
gx2ea1000FactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5), )
if mibBuilder.loadTexts: gx2ea1000FactoryTable.setStatus('mandatory')
gx2ea1000FactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4), ).setIndexNames((0, "OMNI-gx2EA1000-MIB", "gx2ea1000FactoryTableIndex"))
if mibBuilder.loadTexts: gx2ea1000FactoryEntry.setStatus('mandatory')
gx2ea1000AnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2ea1000AnalogTableIndex.setStatus('mandatory')
ea1000labelOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelOffsetNomMonitor.setStatus('optional')
ea1000uomOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomOffsetNomMonitor.setStatus('optional')
ea1000majorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighOffsetNomMonitor.setStatus('mandatory')
ea1000majorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowOffsetNomMonitor.setStatus('mandatory')
ea1000minorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighOffsetNomMonitor.setStatus('mandatory')
ea1000minorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowOffsetNomMonitor.setStatus('mandatory')
ea1000currentValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueOffsetNomMonitor.setStatus('mandatory')
ea1000stateFlagOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagOffsetNomMonitor.setStatus('mandatory')
ea1000minValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueOffsetNomMonitor.setStatus('mandatory')
ea1000maxValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueOffsetNomMonitor.setStatus('mandatory')
ea1000alarmStateOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateOffsetNomMonitor.setStatus('mandatory')
ea1000labelOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelOffsetNomCnt.setStatus('optional')
ea1000uomOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomOffsetNomCnt.setStatus('optional')
ea1000majorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighOffsetNomCnt.setStatus('optional')
ea1000majorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowOffsetNomCnt.setStatus('optional')
ea1000minorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighOffsetNomCnt.setStatus('optional')
ea1000minorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowOffsetNomCnt.setStatus('optional')
ea1000currentValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 19), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000currentValueOffsetNomCnt.setStatus('mandatory')
ea1000stateFlagOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagOffsetNomCnt.setStatus('mandatory')
ea1000minValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueOffsetNomCnt.setStatus('mandatory')
ea1000maxValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueOffsetNomCnt.setStatus('mandatory')
ea1000alarmStateOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateOffsetNomCnt.setStatus('mandatory')
ea1000labelOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelOptPower.setStatus('optional')
ea1000uomOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomOptPower.setStatus('optional')
ea1000majorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighOptPower.setStatus('mandatory')
ea1000majorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowOptPower.setStatus('mandatory')
ea1000minorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighOptPower.setStatus('optional')
ea1000minorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowOptPower.setStatus('optional')
ea1000currentValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueOptPower.setStatus('mandatory')
ea1000stateFlagOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagOptPower.setStatus('mandatory')
ea1000minValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueOptPower.setStatus('mandatory')
ea1000maxValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueOptPower.setStatus('mandatory')
ea1000alarmStateOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateOptPower.setStatus('mandatory')
ea1000labelLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelLaserTemp.setStatus('optional')
ea1000uomLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomLaserTemp.setStatus('optional')
ea1000majorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighLaserTemp.setStatus('mandatory')
ea1000majorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowLaserTemp.setStatus('mandatory')
ea1000minorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighLaserTemp.setStatus('mandatory')
ea1000minorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowLaserTemp.setStatus('mandatory')
ea1000currentValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueLaserTemp.setStatus('mandatory')
ea1000stateFlagLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagLaserTemp.setStatus('mandatory')
ea1000minValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueLaserTemp.setStatus('mandatory')
ea1000maxValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueLaserTemp.setStatus('mandatory')
ea1000alarmStateLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateLaserTemp.setStatus('mandatory')
ea1000labelLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelLaserBias.setStatus('optional')
ea1000uomLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomLaserBias.setStatus('optional')
ea1000majorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighLaserBias.setStatus('mandatory')
ea1000majorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowLaserBias.setStatus('mandatory')
ea1000minorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighLaserBias.setStatus('optional')
ea1000minorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowLaserBias.setStatus('optional')
ea1000currentValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueLaserBias.setStatus('mandatory')
ea1000stateFlagLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagLaserBias.setStatus('mandatory')
ea1000minValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueLaserBias.setStatus('mandatory')
ea1000maxValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueLaserBias.setStatus('mandatory')
ea1000alarmStateLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateLaserBias.setStatus('mandatory')
ea1000labelTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelTecCurrent.setStatus('optional')
ea1000uomTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomTecCurrent.setStatus('optional')
ea1000majorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighTecCurrent.setStatus('mandatory')
ea1000majorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowTecCurrent.setStatus('mandatory')
ea1000minorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighTecCurrent.setStatus('optional')
ea1000minorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowTecCurrent.setStatus('optional')
ea1000currentValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueTecCurrent.setStatus('mandatory')
ea1000stateFlagTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagTecCurrent.setStatus('mandatory')
ea1000minValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueTecCurrent.setStatus('mandatory')
ea1000maxValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueTecCurrent.setStatus('mandatory')
ea1000alarmStateTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateTecCurrent.setStatus('mandatory')
ea1000labelModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelModuleTemp.setStatus('optional')
ea1000uomModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomModuleTemp.setStatus('optional')
ea1000majorHighModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighModuleTemp.setStatus('mandatory')
ea1000majorLowModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowModuleTemp.setStatus('mandatory')
ea1000minorHighModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighModuleTemp.setStatus('mandatory')
ea1000minorLowModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowModuleTemp.setStatus('mandatory')
ea1000currentValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueModuleTemp.setStatus('mandatory')
ea1000stateFlagModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagModuleTemp.setStatus('mandatory')
ea1000minValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueModuleTemp.setStatus('mandatory')
ea1000maxValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueModuleTemp.setStatus('mandatory')
ea1000alarmStateModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateModuleTemp.setStatus('mandatory')
ea1000labelFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelFan1Speed.setStatus('optional')
ea1000uomFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomFan1Speed.setStatus('optional')
ea1000majorHighFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighFan1Speed.setStatus('optional')
ea1000majorLowFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowFan1Speed.setStatus('mandatory')
ea1000minorHighFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighFan1Speed.setStatus('optional')
ea1000minorLowFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowFan1Speed.setStatus('mandatory')
ea1000currentValueFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueFan1Speed.setStatus('mandatory')
ea1000stateFlagFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagFan1Speed.setStatus('mandatory')
ea1000minValueFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueFan1Speed.setStatus('mandatory')
ea1000maxValueFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueFan1Speed.setStatus('mandatory')
ea1000alarmStateFan1Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateFan1Speed.setStatus('mandatory')
ea1000labelFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelFan2Speed.setStatus('optional')
ea1000uomFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uomFan2Speed.setStatus('optional')
ea1000majorHighFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHighFan2Speed.setStatus('optional')
ea1000majorLowFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLowFan2Speed.setStatus('mandatory')
ea1000minorHighFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHighFan2Speed.setStatus('optional')
ea1000minorLowFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLowFan2Speed.setStatus('mandatory')
ea1000currentValueFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValueFan2Speed.setStatus('mandatory')
ea1000stateFlagFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlagFan2Speed.setStatus('mandatory')
ea1000minValueFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValueFan2Speed.setStatus('mandatory')
ea1000maxValueFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValueFan2Speed.setStatus('mandatory')
ea1000alarmStateFan2Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmStateFan2Speed.setStatus('mandatory')
ea1000label12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000label12Volt.setStatus('optional')
ea1000uom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000uom12Volt.setStatus('optional')
ea1000majorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 103), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorHigh12Volt.setStatus('mandatory')
ea1000majorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 104), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000majorLow12Volt.setStatus('mandatory')
ea1000minorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 105), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorHigh12Volt.setStatus('mandatory')
ea1000minorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 106), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minorLow12Volt.setStatus('mandatory')
ea1000currentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 107), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000currentValue12Volt.setStatus('mandatory')
ea1000stateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateFlag12Volt.setStatus('mandatory')
ea1000minValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 109), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000minValue12Volt.setStatus('mandatory')
ea1000maxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 110), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000maxValue12Volt.setStatus('mandatory')
ea1000alarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000alarmState12Volt.setStatus('mandatory')
gx2ea1000DigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2ea1000DigitalTableIndex.setStatus('mandatory')
ea1000labelRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelRfInput.setStatus('optional')
ea1000enumRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumRfInput.setStatus('optional')
ea1000valueRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueRfInput.setStatus('mandatory')
ea1000stateflagRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagRfInput.setStatus('mandatory')
ea1000labelOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelOptOutput.setStatus('optional')
ea1000enumOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumOptOutput.setStatus('optional')
ea1000valueOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueOptOutput.setStatus('mandatory')
ea1000stateflagOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagOptOutput.setStatus('mandatory')
ea1000labelLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelLaserMode.setStatus('optional')
ea1000enumLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumLaserMode.setStatus('optional')
ea1000valueLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preset", 1), ("set", 2), ("setEquate", 3), ("manual", 4), ("manualEquate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueLaserMode.setStatus('mandatory')
ea1000stateflagLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagLaserMode.setStatus('mandatory')
ea1000labelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelAttenSetting.setStatus('optional')
ea1000enumAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumAttenSetting.setStatus('optional')
ea1000valueAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("attn0pt0", 1), ("attn0pt5", 2), ("attn1pt0", 3), ("attn1pt5", 4), ("attn2pt0", 5), ("attn2pt5", 6), ("attn3pt0", 7), ("attn3pt5", 8), ("attn4pt0", 9), ("attn4pt5", 10), ("attn5pt0", 11), ("attn5pt5", 12), ("attn6pt0", 13), ("attn6pt5", 14), ("attn7pt0", 15), ("attn7pt5", 16), ("attn8pt0", 17), ("attn8pt5", 18), ("attn9pt0", 19), ("attn9pt5", 20), ("attn10pt0", 21), ("attn10pt5", 22), ("attn11pt0", 23), ("attn11pt5", 24), ("attn12pt0", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueAttenSetting.setStatus('mandatory')
ea1000stateflagAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagAttenSetting.setStatus('mandatory')
ea1000labelLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelLaserSecMode.setStatus('optional')
ea1000enumLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumLaserSecMode.setStatus('optional')
ea1000valueLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cw", 1), ("video", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueLaserSecMode.setStatus('mandatory')
ea1000stateflagLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagLaserSecMode.setStatus('mandatory')
ea1000labelVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelVideoOffset.setStatus('optional')
ea1000enumVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumVideoOffset.setStatus('optional')
ea1000valueVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("minus1dB", 1), ("minus2dB", 2), ("minus3dB", 3), ("minus4dB", 4), ("minus5dB", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueVideoOffset.setStatus('mandatory')
ea1000stateflagVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagVideoOffset.setStatus('mandatory')
ea1000labelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelFactoryDefault.setStatus('optional')
ea1000enumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000enumFactoryDefault.setStatus('optional')
ea1000valueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ea1000valueFactoryDefault.setStatus('mandatory')
ea1000stateflagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagFactoryDefault.setStatus('mandatory')
gx2ea1000StatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2ea1000StatusTableIndex.setStatus('mandatory')
ea1000labelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelBoot.setStatus('optional')
ea1000valueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000valueBoot.setStatus('mandatory')
ea1000stateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagBoot.setStatus('mandatory')
ea1000labelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelFlash.setStatus('optional')
ea1000valueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000valueFlash.setStatus('mandatory')
ea1000stateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagFlash.setStatus('mandatory')
ea1000labelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelFactoryDataCRC.setStatus('optional')
ea1000valueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000valueFactoryDataCRC.setStatus('mandatory')
ea1000stateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagFactoryDataCRC.setStatus('mandatory')
ea1000labelLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelLaserDataCRC.setStatus('optional')
ea1000valueLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000valueLaserDataCRC.setStatus('mandatory')
ea1000stateflagLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagLaserDataCRC.setStatus('mandatory')
ea1000labelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelAlarmDataCrc.setStatus('optional')
ea1000valueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000valueAlarmDataCrc.setStatus('mandatory')
ea1000stateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagAlarmDataCrc.setStatus('mandatory')
ea1000labelRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000labelRFInputStatus.setStatus('optional')
ea1000valueRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000valueRFInputStatus.setStatus('mandatory')
ea1000stateflagRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000stateflagRFInputStatus.setStatus('mandatory')
gx2ea1000FactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2ea1000FactoryTableIndex.setStatus('mandatory')
ea1000bootControlByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000bootControlByteValue.setStatus('mandatory')
ea1000bootStatusByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000bootStatusByteValue.setStatus('mandatory')
ea1000bank1CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000bank1CRCValue.setStatus('mandatory')
ea1000bank2CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000bank2CRCValue.setStatus('mandatory')
ea1000prgEEPROMByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000prgEEPROMByteValue.setStatus('mandatory')
ea1000factoryCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000factoryCRCValue.setStatus('mandatory')
ea1000calculateCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("laserData", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000calculateCRCValue.setStatus('mandatory')
ea1000hourMeterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000hourMeterValue.setStatus('mandatory')
ea1000flashPrgCntAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000flashPrgCntAValue.setStatus('mandatory')
ea1000flashPrgCntBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000flashPrgCntBValue.setStatus('mandatory')
ea1000flashBankARevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000flashBankARevValue.setStatus('mandatory')
ea1000flashBankBRevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ea1000flashBankBRevValue.setStatus('mandatory')
trapEA1000ConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000ConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000RFInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000RFOverloadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000RFOffsetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000OpticalPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000LaserBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000LaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000TECCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000Fan1SpeedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000Fan2SpeedAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA100012vAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000ModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000FlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000LaserBiasCntLoopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000BankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000LaserBiasCntLoopInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000RFParamInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000TECParamInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000AttnTableInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000PowerMeterTableInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000LaserDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000AlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000FactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000UserRFOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000UserOpticalOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapEA1000ResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 33) + (0,27)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2EA1000-MIB", trapEA1000TECParamInitAlarm=trapEA1000TECParamInitAlarm, ea1000currentValueLaserTemp=ea1000currentValueLaserTemp, trapEA1000LaserDataCRCAlarm=trapEA1000LaserDataCRCAlarm, ea1000stateFlagLaserBias=ea1000stateFlagLaserBias, ea1000stateflagFlash=ea1000stateflagFlash, ea1000stateFlagFan2Speed=ea1000stateFlagFan2Speed, ea1000labelFactoryDataCRC=ea1000labelFactoryDataCRC, ea1000minValueOffsetNomCnt=ea1000minValueOffsetNomCnt, ea1000majorHighTecCurrent=ea1000majorHighTecCurrent, ea1000valueLaserSecMode=ea1000valueLaserSecMode, ea1000factoryCRCValue=ea1000factoryCRCValue, ea1000minValueModuleTemp=ea1000minValueModuleTemp, ea1000currentValueFan1Speed=ea1000currentValueFan1Speed, ea1000labelOptOutput=ea1000labelOptOutput, ea1000minorLowTecCurrent=ea1000minorLowTecCurrent, ea1000maxValueFan2Speed=ea1000maxValueFan2Speed, ea1000majorLowModuleTemp=ea1000majorLowModuleTemp, ea1000minorHigh12Volt=ea1000minorHigh12Volt, ea1000minorHighOffsetNomMonitor=ea1000minorHighOffsetNomMonitor, ea1000flashPrgCntAValue=ea1000flashPrgCntAValue, ea1000minorLowOffsetNomMonitor=ea1000minorLowOffsetNomMonitor, ea1000majorLowTecCurrent=ea1000majorLowTecCurrent, gx2ea1000AnalogTable=gx2ea1000AnalogTable, ea1000calculateCRCValue=ea1000calculateCRCValue, trapEA1000LaserBiasAlarm=trapEA1000LaserBiasAlarm, ea1000majorHighOffsetNomMonitor=ea1000majorHighOffsetNomMonitor, ea1000valueFlash=ea1000valueFlash, ea1000valueFactoryDataCRC=ea1000valueFactoryDataCRC, ea1000minorHighModuleTemp=ea1000minorHighModuleTemp, ea1000minValueFan2Speed=ea1000minValueFan2Speed, trapEA1000RFOffsetAlarm=trapEA1000RFOffsetAlarm, gx2ea1000DigitalTable=gx2ea1000DigitalTable, ea1000enumVideoOffset=ea1000enumVideoOffset, ea1000enumLaserMode=ea1000enumLaserMode, ea1000labelRfInput=ea1000labelRfInput, ea1000bank2CRCValue=ea1000bank2CRCValue, ea1000alarmStateOptPower=ea1000alarmStateOptPower, ea1000stateflagVideoOffset=ea1000stateflagVideoOffset, ea1000valueBoot=ea1000valueBoot, ea1000maxValueLaserBias=ea1000maxValueLaserBias, ea1000valueLaserMode=ea1000valueLaserMode, ea1000minorHighTecCurrent=ea1000minorHighTecCurrent, trapEA1000RFOverloadAlarm=trapEA1000RFOverloadAlarm, ea1000majorHighOffsetNomCnt=ea1000majorHighOffsetNomCnt, ea1000minorLow12Volt=ea1000minorLow12Volt, trapEA1000TECCurrentAlarm=trapEA1000TECCurrentAlarm, ea1000stateflagFactoryDataCRC=ea1000stateflagFactoryDataCRC, ea1000uomLaserTemp=ea1000uomLaserTemp, ea1000bootControlByteValue=ea1000bootControlByteValue, ea1000uomFan1Speed=ea1000uomFan1Speed, trapEA1000ResetFactoryDefaultAlarm=trapEA1000ResetFactoryDefaultAlarm, ea1000flashBankBRevValue=ea1000flashBankBRevValue, ea1000valueAlarmDataCrc=ea1000valueAlarmDataCrc, ea1000uomOffsetNomCnt=ea1000uomOffsetNomCnt, gx2ea1000DigitalEntry=gx2ea1000DigitalEntry, ea1000stateFlagOptPower=ea1000stateFlagOptPower, ea1000stateflagAlarmDataCrc=ea1000stateflagAlarmDataCrc, ea1000labelModuleTemp=ea1000labelModuleTemp, ea1000alarmStateModuleTemp=ea1000alarmStateModuleTemp, ea1000valueVideoOffset=ea1000valueVideoOffset, ea1000majorLowLaserTemp=ea1000majorLowLaserTemp, trapEA1000Fan1SpeedAlarm=trapEA1000Fan1SpeedAlarm, trapEA1000ConfigChangeInteger=trapEA1000ConfigChangeInteger, ea1000currentValueOffsetNomCnt=ea1000currentValueOffsetNomCnt, ea1000labelOffsetNomMonitor=ea1000labelOffsetNomMonitor, ea1000uom12Volt=ea1000uom12Volt, ea1000enumRfInput=ea1000enumRfInput, trapEA1000UserRFOffAlarm=trapEA1000UserRFOffAlarm, trapEA1000LaserTempAlarm=trapEA1000LaserTempAlarm, ea1000alarmStateFan2Speed=ea1000alarmStateFan2Speed, trapEA1000LaserBiasCntLoopAlarm=trapEA1000LaserBiasCntLoopAlarm, ea1000uomOffsetNomMonitor=ea1000uomOffsetNomMonitor, ea1000valueLaserDataCRC=ea1000valueLaserDataCRC, ea1000stateFlagLaserTemp=ea1000stateFlagLaserTemp, ea1000label12Volt=ea1000label12Volt, ea1000majorHighFan1Speed=ea1000majorHighFan1Speed, ea1000labelFactoryDefault=ea1000labelFactoryDefault, ea1000alarmStateLaserTemp=ea1000alarmStateLaserTemp, Float=Float, gx2ea1000StatusTable=gx2ea1000StatusTable, ea1000maxValueModuleTemp=ea1000maxValueModuleTemp, ea1000currentValueOptPower=ea1000currentValueOptPower, ea1000valueFactoryDefault=ea1000valueFactoryDefault, trapEA1000AlarmDataCRCAlarm=trapEA1000AlarmDataCRCAlarm, trapEA1000ConfigChangeDisplayString=trapEA1000ConfigChangeDisplayString, ea1000currentValueLaserBias=ea1000currentValueLaserBias, ea1000minValueLaserBias=ea1000minValueLaserBias, gx2ea1000DigitalTableIndex=gx2ea1000DigitalTableIndex, ea1000labelBoot=ea1000labelBoot, ea1000minValueOptPower=ea1000minValueOptPower, ea1000labelFan1Speed=ea1000labelFan1Speed, ea1000labelFan2Speed=ea1000labelFan2Speed, ea1000majorLowFan2Speed=ea1000majorLowFan2Speed, ea1000stateflagAttenSetting=ea1000stateflagAttenSetting, trapEA1000BankBootAlarm=trapEA1000BankBootAlarm, ea1000minorLowLaserTemp=ea1000minorLowLaserTemp, ea1000minorHighOptPower=ea1000minorHighOptPower, ea1000majorLowOffsetNomCnt=ea1000majorLowOffsetNomCnt, ea1000enumAttenSetting=ea1000enumAttenSetting, ea1000valueOptOutput=ea1000valueOptOutput, gx2ea1000StatusTableIndex=gx2ea1000StatusTableIndex, ea1000valueRFInputStatus=ea1000valueRFInputStatus, ea1000labelLaserSecMode=ea1000labelLaserSecMode, ea1000minValueLaserTemp=ea1000minValueLaserTemp, ea1000stateFlagModuleTemp=ea1000stateFlagModuleTemp, ea1000labelLaserMode=ea1000labelLaserMode, ea1000labelFlash=ea1000labelFlash, ea1000stateflagRfInput=ea1000stateflagRfInput, ea1000labelOptPower=ea1000labelOptPower, ea1000valueAttenSetting=ea1000valueAttenSetting, ea1000labelLaserTemp=ea1000labelLaserTemp, ea1000stateFlagFan1Speed=ea1000stateFlagFan1Speed, ea1000minValueFan1Speed=ea1000minValueFan1Speed, ea1000uomFan2Speed=ea1000uomFan2Speed, ea1000enumFactoryDefault=ea1000enumFactoryDefault, ea1000stateflagLaserSecMode=ea1000stateflagLaserSecMode, trapEA1000AttnTableInitAlarm=trapEA1000AttnTableInitAlarm, ea1000majorHighLaserBias=ea1000majorHighLaserBias, ea1000majorHighFan2Speed=ea1000majorHighFan2Speed, ea1000maxValueOffsetNomCnt=ea1000maxValueOffsetNomCnt, ea1000stateFlagOffsetNomMonitor=ea1000stateFlagOffsetNomMonitor, trapEA1000ModuleTempAlarm=trapEA1000ModuleTempAlarm, ea1000maxValueTecCurrent=ea1000maxValueTecCurrent, gx2ea1000FactoryTable=gx2ea1000FactoryTable, gx2ea1000StatusEntry=gx2ea1000StatusEntry, gx2ea1000Descriptor=gx2ea1000Descriptor, ea1000majorLowOffsetNomMonitor=ea1000majorLowOffsetNomMonitor, ea1000maxValueLaserTemp=ea1000maxValueLaserTemp, ea1000minValueTecCurrent=ea1000minValueTecCurrent, ea1000minorLowFan2Speed=ea1000minorLowFan2Speed, ea1000labelVideoOffset=ea1000labelVideoOffset, ea1000alarmStateLaserBias=ea1000alarmStateLaserBias, ea1000stateflagBoot=ea1000stateflagBoot, ea1000minorHighLaserBias=ea1000minorHighLaserBias, ea1000flashPrgCntBValue=ea1000flashPrgCntBValue, ea1000valueRfInput=ea1000valueRfInput, trapEA1000FactoryDataCRCAlarm=trapEA1000FactoryDataCRCAlarm, trapEA100012vAlarm=trapEA100012vAlarm, ea1000stateFlagTecCurrent=ea1000stateFlagTecCurrent, ea1000alarmStateOffsetNomCnt=ea1000alarmStateOffsetNomCnt, gx2ea1000AnalogTableIndex=gx2ea1000AnalogTableIndex, ea1000majorLowFan1Speed=ea1000majorLowFan1Speed, ea1000currentValueModuleTemp=ea1000currentValueModuleTemp, ea1000bank1CRCValue=ea1000bank1CRCValue, ea1000stateFlag12Volt=ea1000stateFlag12Volt, gx2ea1000FactoryEntry=gx2ea1000FactoryEntry, ea1000minorHighLaserTemp=ea1000minorHighLaserTemp, ea1000labelAttenSetting=ea1000labelAttenSetting, ea1000minorLowLaserBias=ea1000minorLowLaserBias, ea1000minValueOffsetNomMonitor=ea1000minValueOffsetNomMonitor, ea1000minorLowModuleTemp=ea1000minorLowModuleTemp, ea1000maxValueFan1Speed=ea1000maxValueFan1Speed, ea1000minorHighOffsetNomCnt=ea1000minorHighOffsetNomCnt, ea1000minorHighFan2Speed=ea1000minorHighFan2Speed, ea1000flashBankARevValue=ea1000flashBankARevValue, trapEA1000RFInputAlarm=trapEA1000RFInputAlarm, trapEA1000RFParamInitAlarm=trapEA1000RFParamInitAlarm, trapEA1000OpticalPowerAlarm=trapEA1000OpticalPowerAlarm, ea1000stateflagFactoryDefault=ea1000stateflagFactoryDefault, ea1000majorLow12Volt=ea1000majorLow12Volt, ea1000prgEEPROMByteValue=ea1000prgEEPROMByteValue, ea1000currentValueFan2Speed=ea1000currentValueFan2Speed, ea1000minorLowOptPower=ea1000minorLowOptPower, ea1000bootStatusByteValue=ea1000bootStatusByteValue, ea1000majorLowOptPower=ea1000majorLowOptPower, ea1000minValue12Volt=ea1000minValue12Volt, gx2ea1000AnalogEntry=gx2ea1000AnalogEntry, ea1000maxValueOptPower=ea1000maxValueOptPower, ea1000majorHigh12Volt=ea1000majorHigh12Volt, ea1000majorHighOptPower=ea1000majorHighOptPower, ea1000minorLowOffsetNomCnt=ea1000minorLowOffsetNomCnt, ea1000stateflagRFInputStatus=ea1000stateflagRFInputStatus, ea1000stateflagOptOutput=ea1000stateflagOptOutput, trapEA1000UserOpticalOffAlarm=trapEA1000UserOpticalOffAlarm, ea1000alarmState12Volt=ea1000alarmState12Volt, ea1000hourMeterValue=ea1000hourMeterValue, ea1000labelTecCurrent=ea1000labelTecCurrent, ea1000stateflagLaserMode=ea1000stateflagLaserMode, ea1000labelRFInputStatus=ea1000labelRFInputStatus, ea1000majorLowLaserBias=ea1000majorLowLaserBias, ea1000maxValue12Volt=ea1000maxValue12Volt, ea1000maxValueOffsetNomMonitor=ea1000maxValueOffsetNomMonitor, ea1000labelLaserDataCRC=ea1000labelLaserDataCRC, ea1000labelAlarmDataCrc=ea1000labelAlarmDataCrc, trapEA1000Fan2SpeedAlarm=trapEA1000Fan2SpeedAlarm, ea1000currentValueOffsetNomMonitor=ea1000currentValueOffsetNomMonitor, trapEA1000PowerMeterTableInitAlarm=trapEA1000PowerMeterTableInitAlarm, ea1000labelLaserBias=ea1000labelLaserBias, ea1000uomOptPower=ea1000uomOptPower, ea1000majorHighModuleTemp=ea1000majorHighModuleTemp, ea1000minorLowFan1Speed=ea1000minorLowFan1Speed, ea1000labelOffsetNomCnt=ea1000labelOffsetNomCnt, ea1000uomLaserBias=ea1000uomLaserBias, ea1000minorHighFan1Speed=ea1000minorHighFan1Speed, ea1000currentValue12Volt=ea1000currentValue12Volt, ea1000stateflagLaserDataCRC=ea1000stateflagLaserDataCRC, gx2ea1000FactoryTableIndex=gx2ea1000FactoryTableIndex, ea1000uomModuleTemp=ea1000uomModuleTemp, ea1000enumLaserSecMode=ea1000enumLaserSecMode, ea1000stateFlagOffsetNomCnt=ea1000stateFlagOffsetNomCnt, ea1000majorHighLaserTemp=ea1000majorHighLaserTemp, ea1000currentValueTecCurrent=ea1000currentValueTecCurrent, trapEA1000LaserBiasCntLoopInitAlarm=trapEA1000LaserBiasCntLoopInitAlarm, ea1000alarmStateFan1Speed=ea1000alarmStateFan1Speed, ea1000uomTecCurrent=ea1000uomTecCurrent, trapEA1000FlashAlarm=trapEA1000FlashAlarm, ea1000enumOptOutput=ea1000enumOptOutput, ea1000alarmStateTecCurrent=ea1000alarmStateTecCurrent, ea1000alarmStateOffsetNomMonitor=ea1000alarmStateOffsetNomMonitor)
