#
# PySNMP MIB module LUXN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LUXN-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:58:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, NotificationType, Unsigned32, Counter32, NotificationType, MibIdentifier, Gauge32, enterprises, ModuleIdentity, IpAddress, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "NotificationType", "Unsigned32", "Counter32", "NotificationType", "MibIdentifier", "Gauge32", "enterprises", "ModuleIdentity", "IpAddress", "Integer32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
luxN = MibIdentifier((1, 3, 6, 1, 4, 1, 4253))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1))
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2))
faults = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 3))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 4))
accounting = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 5))
manufacturing = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 1))
cp = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 2))
cc = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 3))
mux = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 4))
ps = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 5))
download = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 6))
fadm = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 7))
oppm = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 8))
mcm = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 9))
fn = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 10))
csim = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 11))
rpsm = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 12))
rsdm = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 13))
rtdm = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 14))
osam = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 15))
rsm = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 16))
upsm = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 17))
mcmesc = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 18))
systemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 21))
topology = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 22))
routing = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 23))
ring = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 24))
tap = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 25))
voadm = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 26))
zmsConfigSync = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 27))
dmm = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 28))
ocm10gf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 29))
ocm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 30))
osc = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 31))
ocm4g = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 32))
oet = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 33))
uob = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 34))
fc8g = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 1, 35))
current1 = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1))
historical = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2))
specialConditions = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3))
systemPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 1))
downloadPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 2))
cpPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3))
ccPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4))
muxPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5))
psPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6))
fadmPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 7))
oppmPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8))
mcmPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9))
fnPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 10))
csimPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11))
rpsmPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12))
rsdmPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13))
rtdmPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 14))
osamPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15))
rsmPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16))
upsmPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17))
mcmescPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18))
routingPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 21))
tapPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22))
voadmPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23))
dmmPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24))
ocm10gfPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25))
ocm2Perf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26))
oscPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27))
ocm4gPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28))
oetPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29))
uobPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30))
fc8gPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 1, 31))
systemHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 1))
downloadHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 2))
cpHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3))
ccHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4))
muxHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5))
psHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 6))
fadmHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7))
oppmHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8))
mcmHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9))
fnHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 10))
csimHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11))
rpsmHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12))
rsdmHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13))
rtdmHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14))
osamHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15))
rsmHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16))
upsmHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17))
mcmescHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18))
tapHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19))
voadmHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20))
dmmHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21))
ocm10gfHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22))
ocm2Hist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23))
oscHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24))
ocm4gHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25))
oetHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 26))
uobHist = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27))
systemCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 1))
downloadCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 2))
cpCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3))
ccCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4))
muxCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5))
psCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 6))
fadmCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 7))
oppmCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 8))
mcmCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9))
fnCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 10))
rpsmCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 12))
rsdmCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 13))
rtdmCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 14))
osamCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 15))
rsmCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 16))
upsmCond = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 2, 3, 17))
eventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 3, 1))
userLog = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 3, 2))
diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 3, 3))
alarmLog = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 3, 4))
diagSelfTest = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5))
mcmescSelfTest = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1))
userSecMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 4, 1))
systemSecMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 4, 2))
netSecMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 4, 3))
radiusSecMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1))
sshSecMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 4, 3, 2))
cpAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 5, 1))
ccAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 5, 2))
mcmAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 5, 3))
mcmescAcct = MibIdentifier((1, 3, 6, 1, 4, 1, 4253, 5, 4))
class FlagType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("on", 1), ("off", 2))

class ResetType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("other", 1), ("reset", 2))

class RebootType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("other", 1), ("warmboot", 2))

class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class ChassisType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("wavstation1", 1), ("gm3234", 2), ("gm3217", 3), ("gm1602", 4), ("gm1608", 5), ("gmx128", 6))

class CardLocation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("local", 1), ("remote1", 2), ("remote2", 3))

class CardShelf(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2)

class CardSlot(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 17)

class ShelfInput(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2)

class SlotInput(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 17)

class CardName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 32)

class LinkName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 40)

class CardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56))
    namedValues = NamedValues(("empty", 0), ("mpm", 1), ("ocmu", 2), ("ocmi", 3), ("ofcm", 4), ("ofcd", 5), ("fadm", 6), ("oppm", 7), ("mcmt1", 8), ("oli", 9), ("w4cd", 10), ("w2cmd", 13), ("osam", 20), ("w4cm", 21), ("rsm", 22), ("upsm", 23), ("ocme", 24), ("oci", 25), ("oxc", 26), ("ocm10g", 27), ("osamlp", 29), ("osamhp", 30), ("mcmesc", 33), ("wfadm", 34), ("mcme1", 35), ("md100-1", 36), ("md100-40", 37), ("tap", 38), ("md100-5", 39), ("md100-10", 40), ("ocm10glr", 41), ("bd-4", 42), ("bp-10", 43), ("unknown", 44), ("dmm", 45), ("bp-5", 46), ("mpm2", 47), ("osc", 48), ("ocm2", 49), ("ocm10gf", 50), ("ocm2-4g", 51), ("oet", 52), ("uob", 53), ("fc8g", 54), ("md100p", 55), ("cwdm_bd4", 56))

class CardStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("normal", 4), ("acknowledged", 5))

class CardState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("empty", 1), ("online", 2), ("offline", 3), ("loopback", 4), ("diag", 5))

class RedundancyMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("standby", 2))

class NodeName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 32)

class PortIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 16)

class CardCycleMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("coldboot", 1), ("warmboot", 2), ("offline", 3), ("online", 4), ("loopback", 5), ("diag", 6))

class TrapStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("normal", 4), ("clear", 5))

class HistoryMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("daily", 1), ("longterm", 2))

class EventBuffer(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 1000)

class UserBuffer(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 100)

class LogonID(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 15)

class HashedPasswd(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 20)

class EncryptedCommunity(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 32)

class FileName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 32)

class EntityName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 15)

class DateAndTime(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 20)

class VersionString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 12)

class SerialString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 17)

class SfpSerialString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 24)

class ModelString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 10)

class ModelNum(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 15)

class FtpMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("passive", 2))

class DownloadType(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 32)

class DownloadLocation(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("local", 1), ("remote", 2), ("remote2", 3))

class DownloadShelf(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2)

class DownloadSlot(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 17)

class OSMode(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 10)

class ReleaseDate(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 10)

class OSState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("operating", 1), ("backup", 2))

class UpdateOSMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("toggle", 1), ("revert", 2))

class DownloadStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("idle", 1), ("ftp-inprogress", 2), ("mod-inprogress", 3))

class RingIdName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 16)

class PathIdName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 16)

class Timezone(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52))
    namedValues = NamedValues(("idlw", 1), ("nt", 2), ("ahst", 3), ("cat", 4), ("hst", 5), ("hdt", 6), ("yst", 7), ("ydt", 8), ("pst", 9), ("pdt", 10), ("mst", 11), ("mdt", 12), ("cst", 13), ("cdt", 14), ("est", 15), ("edt", 16), ("ast", 17), ("adt", 18), ("at", 19), ("wat", 20), ("gmt", 21), ("ut", 22), ("utc", 23), ("wet", 24), ("bst", 25), ("cet", 26), ("fwt", 27), ("met", 28), ("mewt", 29), ("swt", 30), ("mest", 31), ("mesz", 32), ("sst", 33), ("fst", 34), ("eet", 35), ("bt", 36), ("zp4", 37), ("zp5", 38), ("zp6", 39), ("zp7", 40), ("wast", 41), ("cct", 42), ("wadt", 43), ("jst", 44), ("act", 45), ("east", 46), ("gst", 47), ("eadt", 48), ("idle", 49), ("nzst", 50), ("nzt", 51), ("nzdt", 52))

class AlarmType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))
    namedValues = NamedValues(("aircompr", 1), ("aircond", 2), ("airdryr", 3), ("batdschrg", 4), ("battery", 5), ("power", 6), ("clfan", 7), ("engine", 8), ("engoprg", 9), ("explgs", 10), ("fire", 11), ("firdetr", 12), ("flood", 13), ("fuse", 14), ("gen", 15), ("hiair", 16), ("hihum", 17), ("hitemp", 18), ("hiwtr", 19), ("intruder", 20), ("lwhum", 21), ("lwbatvg", 22), ("lwpres", 23), ("lwfuel", 24), ("lwtemp", 25), ("lwwtr", 26), ("cpmajor", 27), ("cpminor", 28), ("opendr", 29), ("pump", 30), ("rect", 31), ("recthi", 32), ("rectlo", 33), ("smoke", 34), ("toxicgas", 35), ("ventn", 36), ("na", 37))

class ZmsAdminString(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 32)

class ZmsFileName(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 64)

mfgName = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfgName.setStatus('mandatory')
mfgDate = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfgDate.setStatus('mandatory')
mfgSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 1, 3), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfgSerialNum.setStatus('mandatory')
mfgModelType = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 1, 4), ModelString())
if mibBuilder.loadTexts: mfgModelType.setStatus('mandatory')
mfgDefaultID = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 1, 5), LogonID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfgDefaultID.setStatus('mandatory')
mfgDfltPasswd = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 1, 6), HashedPasswd()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfgDfltPasswd.setStatus('mandatory')
mfgNumShelves = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 1, 9), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfgNumShelves.setStatus('mandatory')
mfgShelfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 1, 10), )
if mibBuilder.loadTexts: mfgShelfTable.setStatus('mandatory')
mfgShelfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 1, 10, 1), ).setIndexNames((0, "LUXN-MIB", "mfgShelfID"))
if mibBuilder.loadTexts: mfgShelfEntry.setStatus('mandatory')
mfgShelfID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 1, 10, 1, 1), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfgShelfID.setStatus('mandatory')
mfgNumSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 1, 10, 1, 2), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfgNumSlots.setStatus('mandatory')
mfgCRCChecksum = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfgCRCChecksum.setStatus('mandatory')
mfgChassisType = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 1, 12), ChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfgChassisType.setStatus('mandatory')
mfgPsType = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dcOny", 1), ("acOnly", 2), ("mixedDcAc", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfgPsType.setStatus('mandatory')
mfgCleiNum = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mfgCleiNum.setStatus('mandatory')
cpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIpAddress.setStatus('mandatory')
cpNetMask = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpNetMask.setStatus('mandatory')
cpMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 3), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpMIBVersion.setStatus('mandatory')
cpBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 4), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpBootPromVer.setStatus('mandatory')
cpROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384)))
if mibBuilder.loadTexts: cpROMSize.setStatus('mandatory')
cpNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpNumSubDiv.setStatus('mandatory')
cpSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 2, 7), )
if mibBuilder.loadTexts: cpSubDivTable.setStatus('mandatory')
cpSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1), ).setIndexNames((0, "LUXN-MIB", "cpSubDivIndex"))
if mibBuilder.loadTexts: cpSubDivEntry.setStatus('mandatory')
cpSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSubDivIndex.setStatus('mandatory')
cpSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSubDivDescr.setStatus('mandatory')
cpSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3145728))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSubDivSize.setStatus('mandatory')
cpSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: cpSubDivOffset.setStatus('mandatory')
cpSubDivImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSubDivImgVersion.setStatus('mandatory')
cpSubDivImgDBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSubDivImgDBVersion.setStatus('mandatory')
cpTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8), )
if mibBuilder.loadTexts: cpTable.setStatus('mandatory')
cpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1), ).setIndexNames((0, "LUXN-MIB", "cpCardShelf"), (0, "LUXN-MIB", "cpCardSlot"))
if mibBuilder.loadTexts: cpEntry.setStatus('mandatory')
cpCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 1), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCardShelf.setStatus('mandatory')
cpCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 2), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCardSlot.setStatus('mandatory')
cpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 3), RedundancyMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpMode.setStatus('mandatory')
cpDsgntdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 4), RedundancyMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpDsgntdMode.setStatus('mandatory')
cpState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 5), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpState.setStatus('mandatory')
cpMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpMacAddr.setStatus('mandatory')
cpName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpName.setStatus('mandatory')
cpMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 8), DateAndTime())
if mibBuilder.loadTexts: cpMfgDate.setStatus('mandatory')
cpSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 9), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSerialNum.setStatus('mandatory')
cpModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 10), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpModelType.setStatus('mandatory')
cpFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 11), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpFWVersionID.setStatus('mandatory')
cpSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 12), RebootType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSetState.setStatus('mandatory')
cpHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHWName.setStatus('mandatory')
cpCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCleiNum.setStatus('mandatory')
cpModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 8, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpModelNum.setStatus('mandatory')
cpSetMode = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 9), RedundancyMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSetMode.setStatus('mandatory')
cpSNMPTrapHost1 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapHost1.setStatus('mandatory')
cpSNMPTrapHost2 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapHost2.setStatus('mandatory')
cpSNMPTrapHost3 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapHost3.setStatus('mandatory')
cpSNMPSendTrap = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 13), Boolean()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPSendTrap.setStatus('mandatory')
cpGateway = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpGateway.setStatus('mandatory')
cpMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpMaxSessions.setStatus('mandatory')
cpSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSessionTimeout.setStatus('mandatory')
cpDate = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 17), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpDate.setStatus('mandatory')
cpTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 18), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpTime.setStatus('mandatory')
cpGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 19), EncryptedCommunity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpGetCommunity.setStatus('mandatory')
cpSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 20), EncryptedCommunity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSetCommunity.setStatus('mandatory')
cpSystemName = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSystemName.setStatus('mandatory')
cpSNMPTrapCommunity1 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 22), EncryptedCommunity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapCommunity1.setStatus('mandatory')
cpSNMPTrapCommunity2 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 23), EncryptedCommunity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapCommunity2.setStatus('mandatory')
cpSNMPTrapCommunity3 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 24), EncryptedCommunity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapCommunity3.setStatus('mandatory')
cpHttp = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))))
if mibBuilder.loadTexts: cpHttp.setStatus('mandatory')
cpIMNIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpIMNIpAddress.setStatus('mandatory')
cpUpsrMode = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpUpsrMode.setStatus('mandatory')
cpAutoModuleUpdate = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpAutoModuleUpdate.setStatus('mandatory')
cpSNMPTrapHost4 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapHost4.setStatus('mandatory')
cpSNMPTrapHost5 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapHost5.setStatus('mandatory')
cpSNMPTrapCommunity4 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 31), EncryptedCommunity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapCommunity4.setStatus('mandatory')
cpSNMPTrapCommunity5 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 32), EncryptedCommunity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapCommunity5.setStatus('mandatory')
cpSNMPTrapHostPort1 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapHostPort1.setStatus('mandatory')
cpSNMPTrapHostPort2 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapHostPort2.setStatus('mandatory')
cpSNMPTrapHostPort3 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapHostPort3.setStatus('mandatory')
cpSNMPTrapHostPort4 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapHostPort4.setStatus('mandatory')
cpSNMPTrapHostPort5 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpSNMPTrapHostPort5.setStatus('mandatory')
cpRedunSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 2, 38), )
if mibBuilder.loadTexts: cpRedunSubDivTable.setStatus('mandatory')
cpRedunSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 2, 38, 1), ).setIndexNames((0, "LUXN-MIB", "cpRedunSubDivIndex"))
if mibBuilder.loadTexts: cpRedunSubDivEntry.setStatus('mandatory')
cpRedunSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpRedunSubDivIndex.setStatus('mandatory')
cpRedunSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 38, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpRedunSubDivDescr.setStatus('mandatory')
cpRedunSubDivImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 38, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpRedunSubDivImgVersion.setStatus('mandatory')
cpRedunSubDivImgDBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 2, 38, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpRedunSubDivImgDBVersion.setStatus('mandatory')
cpTimezone = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 39), Timezone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpTimezone.setStatus('mandatory')
cpNtpState = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpNtpState.setStatus('mandatory')
cpNtpTimeserver = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 41), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpNtpTimeserver.setStatus('mandatory')
cpNtpUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpNtpUpdateInterval.setStatus('mandatory')
cpTelnetClient = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpTelnetClient.setStatus('mandatory')
cpLogMask = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("emerg", 2), ("alert", 3), ("crit", 4), ("err", 5), ("warn", 6), ("notice", 7), ("info", 8), ("debug", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLogMask.setStatus('mandatory')
cpLogServer1 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 45), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLogServer1.setStatus('mandatory')
cpLogServer2 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 46), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLogServer2.setStatus('mandatory')
cpLogServer3 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 47), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLogServer3.setStatus('mandatory')
cpLogServer4 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 48), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLogServer4.setStatus('mandatory')
cpLogServer5 = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 2, 49), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLogServer5.setStatus('mandatory')
ccBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 3, 1), VersionString())
if mibBuilder.loadTexts: ccBootPromVer.setStatus('mandatory')
ccROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: ccROMSize.setStatus('mandatory')
ccNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: ccNumSubDiv.setStatus('mandatory')
ccSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 3, 4), )
if mibBuilder.loadTexts: ccSubDivTable.setStatus('mandatory')
ccSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 3, 4, 1), ).setIndexNames((0, "LUXN-MIB", "ccSubDivIndex"))
if mibBuilder.loadTexts: ccSubDivEntry.setStatus('mandatory')
ccSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: ccSubDivIndex.setStatus('mandatory')
ccSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: ccSubDivDescr.setStatus('mandatory')
ccSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: ccSubDivSize.setStatus('mandatory')
ccSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: ccSubDivOffset.setStatus('mandatory')
ccNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccNumber.setStatus('mandatory')
ccTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6), )
if mibBuilder.loadTexts: ccTable.setStatus('mandatory')
ccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1), ).setIndexNames((0, "LUXN-MIB", "ccCardLocation"), (0, "LUXN-MIB", "ccCardShelf"), (0, "LUXN-MIB", "ccCardSlot"))
if mibBuilder.loadTexts: ccEntry.setStatus('mandatory')
ccCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCardLocation.setStatus('mandatory')
ccCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCardShelf.setStatus('mandatory')
ccCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCardSlot.setStatus('mandatory')
ccMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMfgDate.setStatus('mandatory')
ccSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 5), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSerialNum.setStatus('mandatory')
ccModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 6), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccModelType.setStatus('mandatory')
ccName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 7), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccName.setStatus('mandatory')
ccFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 8), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccFWVersionID.setStatus('mandatory')
ccMfgBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMfgBiasCurrent.setStatus('mandatory')
ccMfgModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMfgModulation.setStatus('mandatory')
ccMfgApc = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMfgApc.setStatus('mandatory')
ccMfgIwmModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMfgIwmModulation.setStatus('mandatory')
ccMfgRefClock = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("en1660", 1), ("en1944", 2), ("en1953", 3))))
if mibBuilder.loadTexts: ccMfgRefClock.setStatus('mandatory')
ccMfgClockDiv = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dout-1250", 1), ("dout-622", 2), ("dout-155", 3))))
if mibBuilder.loadTexts: ccMfgClockDiv.setStatus('mandatory')
ccBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 9, 10))).clone(namedValues=NamedValues(("oc3", 1), ("oc12", 2), ("oc48", 3), ("gbEthernet", 4), ("fibreChannel", 5), ("oc192", 6), ("gbE10", 9), ("fibreChannelX2", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccBandwidth.setStatus('mandatory')
ccSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("warmboot", 2), ("enableLoopback", 3), ("disableLoopback", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSetState.setStatus('mandatory')
connMuxChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 17), Integer32())
if mibBuilder.loadTexts: connMuxChassis.setStatus('mandatory')
connMuxShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 18), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMuxShelf.setStatus('mandatory')
connMuxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 19), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMuxSlot.setStatus('mandatory')
connMuxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connMuxPort.setStatus('mandatory')
connDemuxChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 21), Integer32())
if mibBuilder.loadTexts: connDemuxChassis.setStatus('mandatory')
connDemuxShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 22), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connDemuxShelf.setStatus('mandatory')
connDemuxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 23), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connDemuxSlot.setStatus('mandatory')
connDemuxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connDemuxPort.setStatus('mandatory')
ccModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccModelNum.setStatus('mandatory')
ccLinkITUNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLinkITUNum.setStatus('mandatory')
ccLinkWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLinkWavelength.setStatus('mandatory')
ccLaserType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uncooled", 1), ("cooled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLaserType.setStatus('mandatory')
ccRecvDiode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("apd", 1), ("pin", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccRecvDiode.setStatus('mandatory')
ccLinkAutoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("enableCpeRxPassThru", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLinkAutoDisable.setStatus('mandatory')
ccLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 31), LinkName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccLinkName.setStatus('mandatory')
ccCsimModule = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("installed", 1), ("notinstalled", 2), ("preconfigured", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCsimModule.setStatus('mandatory')
ccHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 33), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHWName.setStatus('mandatory')
ccBackpackModule = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("notInstalled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBackpackModule.setStatus('mandatory')
ccBackpackRxITUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBackpackRxITUNumber.setStatus('mandatory')
ccBackpackTxITUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBackpackTxITUNumber.setStatus('mandatory')
ccBackpackRxInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBackpackRxInsertionLoss.setStatus('mandatory')
ccBackpackTxInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBackpackTxInsertionLoss.setStatus('mandatory')
ccBackpackRxExpressLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBackpackRxExpressLoss.setStatus('mandatory')
ccBackpackTxExpressLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBackpackTxExpressLoss.setStatus('mandatory')
ccSwitchByShelfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccSwitchByShelfSlot.setStatus('mandatory')
ccPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 42), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPathID.setStatus('mandatory')
ccCpeDisableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCpeDisableThreshold.setStatus('mandatory')
ccCpeReEnableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCpeReEnableThreshold.setStatus('mandatory')
connTxNonMuxDmuxCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 45), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connTxNonMuxDmuxCardType.setStatus('mandatory')
connTxNonMuxDmuxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connTxNonMuxDmuxPort.setStatus('mandatory')
connTxNonMuxDmuxShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 47), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connTxNonMuxDmuxShelf.setStatus('mandatory')
connTxNonMuxDmuxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 48), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connTxNonMuxDmuxSlot.setStatus('mandatory')
connRxNonMuxDmuxCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 49), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRxNonMuxDmuxCardType.setStatus('mandatory')
connRxNonMuxDmuxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRxNonMuxDmuxPort.setStatus('mandatory')
connRxNonMuxDmuxShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 51), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRxNonMuxDmuxShelf.setStatus('mandatory')
connRxNonMuxDmuxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 52), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connRxNonMuxDmuxSlot.setStatus('mandatory')
ccUpsrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("backup", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccUpsrMode.setStatus('mandatory')
ccPairShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 54), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPairShelf.setStatus('mandatory')
ccPairSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccPairSlot.setStatus('mandatory')
ccAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccAdminState.setStatus('mandatory')
ccRegenPairShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRegenPairShelf.setStatus('mandatory')
ccRegenPairSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccRegenPairSlot.setStatus('mandatory')
ccCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 59), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCleiNum.setStatus('mandatory')
connCpeTxMcmescShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 60), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCpeTxMcmescShelf.setStatus('mandatory')
connCpeTxMcmescSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 61), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCpeTxMcmescSlot.setStatus('mandatory')
connCpeTxMcmescPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linktx", 1), ("linkrx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCpeTxMcmescPort.setStatus('mandatory')
connCpeRxMcmescShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 63), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCpeRxMcmescShelf.setStatus('mandatory')
connCpeRxMcmescSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 64), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCpeRxMcmescSlot.setStatus('mandatory')
connCpeRxMcmescPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linktx", 1), ("linkrx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connCpeRxMcmescPort.setStatus('mandatory')
ccNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 3, 6, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccNumPorts.setStatus('mandatory')
muxBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 4, 1), VersionString())
if mibBuilder.loadTexts: muxBootPromVer.setStatus('mandatory')
muxROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: muxROMSize.setStatus('mandatory')
muxNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: muxNumSubDiv.setStatus('mandatory')
muxSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 4, 4), )
if mibBuilder.loadTexts: muxSubDivTable.setStatus('mandatory')
muxSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 4, 4, 1), ).setIndexNames((0, "LUXN-MIB", "muxSubDivIndex"))
if mibBuilder.loadTexts: muxSubDivEntry.setStatus('mandatory')
muxSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: muxSubDivIndex.setStatus('mandatory')
muxSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: muxSubDivDescr.setStatus('mandatory')
muxSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: muxSubDivSize.setStatus('mandatory')
muxSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: muxSubDivOffset.setStatus('mandatory')
muxNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxNumber.setStatus('mandatory')
muxTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6), )
if mibBuilder.loadTexts: muxTable.setStatus('mandatory')
muxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1), ).setIndexNames((0, "LUXN-MIB", "muxCardLocation"), (0, "LUXN-MIB", "muxCardShelf"), (0, "LUXN-MIB", "muxCardSlot"))
if mibBuilder.loadTexts: muxEntry.setStatus('mandatory')
muxCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxCardLocation.setStatus('mandatory')
muxCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxCardShelf.setStatus('mandatory')
muxCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxCardSlot.setStatus('mandatory')
muxModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxModelNum.setStatus('mandatory')
muxMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 5), DateAndTime())
if mibBuilder.loadTexts: muxMfgDate.setStatus('mandatory')
muxSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 6), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxSerialNum.setStatus('mandatory')
muxModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 7), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxModelType.setStatus('mandatory')
muxName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 8), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxName.setStatus('mandatory')
muxFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 9), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxFWVersionID.setStatus('mandatory')
muxSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 10), RebootType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxSetState.setStatus('mandatory')
muxNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxNumPorts.setStatus('mandatory')
muxUpgradeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upgradable", 1), ("notUpgradable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxUpgradeFlag.setStatus('mandatory')
muxHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 13), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxHWName.setStatus('mandatory')
muxPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 14), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxPathID.setStatus('mandatory')
muxAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxAdminState.setStatus('mandatory')
muxCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxCleiNum.setStatus('mandatory')
muxChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxChannelSpacing.setStatus('mandatory')
muxStartItu = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxStartItu.setStatus('mandatory')
muxEndItu = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxEndItu.setStatus('mandatory')
muxChannelsPerBand = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxChannelsPerBand.setStatus('mandatory')
muxBands = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxBands.setStatus('mandatory')
muxPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPortNumber.setStatus('mandatory')
muxPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8), )
if mibBuilder.loadTexts: muxPortTable.setStatus('mandatory')
muxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1), ).setIndexNames((0, "LUXN-MIB", "muxPortCardLocation"), (0, "LUXN-MIB", "muxPortCardShelf"), (0, "LUXN-MIB", "muxPortCardSlot"), (0, "LUXN-MIB", "muxPortIndex"))
if mibBuilder.loadTexts: muxPortEntry.setStatus('mandatory')
muxPortCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPortCardLocation.setStatus('mandatory')
muxPortCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPortCardShelf.setStatus('mandatory')
muxPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPortCardSlot.setStatus('mandatory')
muxPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPortIndex.setStatus('mandatory')
muxWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxWavelength.setStatus('mandatory')
muxInsertLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxInsertLoss.setStatus('mandatory')
muxConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 7), CardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxConnCardType.setStatus('mandatory')
muxConnLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 8), CardLocation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxConnLocation.setStatus('mandatory')
muxConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 9), ShelfInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxConnShelf.setStatus('mandatory')
muxConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 10), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxConnSlot.setStatus('mandatory')
muxConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxConnPort.setStatus('mandatory')
muxPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mux", 1), ("demux", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPortType.setStatus('mandatory')
muxConnChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxConnChassisID.setStatus('mandatory')
muxConnSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxConnSystemName.setStatus('mandatory')
muxConnIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: muxConnIpAddress.setStatus('mandatory')
muxPortAvgInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPortAvgInsertionLoss.setStatus('mandatory')
muxPortMaxInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPortMaxInsertionLoss.setStatus('mandatory')
muxPortTapRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 4, 8, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPortTapRatio.setStatus('mandatory')
psNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psNumber.setStatus('mandatory')
psTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 5, 2), )
if mibBuilder.loadTexts: psTable.setStatus('mandatory')
psEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 5, 2, 1), ).setIndexNames((0, "LUXN-MIB", "psID"))
if mibBuilder.loadTexts: psEntry.setStatus('mandatory')
psID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: psID.setStatus('mandatory')
psMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 5, 2, 1, 2), RedundancyMode())
if mibBuilder.loadTexts: psMode.setStatus('mandatory')
psMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 5, 2, 1, 3), DateAndTime())
if mibBuilder.loadTexts: psMfgDate.setStatus('mandatory')
psSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 5, 2, 1, 4), SerialString())
if mibBuilder.loadTexts: psSerialNum.setStatus('mandatory')
psModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 5, 2, 1, 5), ModelString())
if mibBuilder.loadTexts: psModelType.setStatus('mandatory')
dlFtpTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 6, 1), )
if mibBuilder.loadTexts: dlFtpTable.setStatus('mandatory')
dlFtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 6, 1, 1), ).setIndexNames((0, "LUXN-MIB", "dlFtpIp"))
if mibBuilder.loadTexts: dlFtpEntry.setStatus('mandatory')
dlFtpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlFtpIp.setStatus('mandatory')
dlFtpLogonID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 1, 1, 2), LogonID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlFtpLogonID.setStatus('mandatory')
dlFtpPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlFtpPasswd.setStatus('mandatory')
dlFtpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 1, 1, 4), FtpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlFtpMode.setStatus('mandatory')
dlFtpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlFtpPort.setStatus('mandatory')
dlPreQualTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 6, 2), )
if mibBuilder.loadTexts: dlPreQualTable.setStatus('mandatory')
dlPreQualEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 6, 2, 1), ).setIndexNames((0, "LUXN-MIB", "dlPreQualTypeVersion"))
if mibBuilder.loadTexts: dlPreQualEntry.setStatus('mandatory')
dlPreQualTypeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlPreQualTypeVersion.setStatus('mandatory')
dlPreQualResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("compatible", 1), ("incompatible", 2), ("unknown-version", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlPreQualResult.setStatus('mandatory')
dlDownloadTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 6, 3), )
if mibBuilder.loadTexts: dlDownloadTable.setStatus('mandatory')
dlDownloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1), ).setIndexNames((0, "LUXN-MIB", "dlType"), (0, "LUXN-MIB", "dlLocation"), (0, "LUXN-MIB", "dlShelf"), (0, "LUXN-MIB", "dlSlot"))
if mibBuilder.loadTexts: dlDownloadEntry.setStatus('mandatory')
dlType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 1), DownloadType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlType.setStatus('mandatory')
dlLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 2), DownloadLocation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlLocation.setStatus('mandatory')
dlShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 3), DownloadShelf()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlShelf.setStatus('mandatory')
dlSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 4), DownloadSlot()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlSlot.setStatus('mandatory')
dlFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlFilename.setStatus('mandatory')
dlActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("no", 1), ("activateBackupFirmware", 2), ("activateBackupFPGA", 3), ("activateBackupFirmwareAndFPGA", 4), ("activateForAllLineCards", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlActivate.setStatus('mandatory')
dlExportType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlExportType.setStatus('mandatory')
dlOSTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 6, 4), )
if mibBuilder.loadTexts: dlOSTable.setStatus('mandatory')
dlOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 6, 4, 1), ).setIndexNames((0, "LUXN-MIB", "dlOSIndex"))
if mibBuilder.loadTexts: dlOSEntry.setStatus('mandatory')
dlOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: dlOSIndex.setStatus('mandatory')
dlOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 4, 1, 2), VersionString())
if mibBuilder.loadTexts: dlOSVersion.setStatus('mandatory')
dlOSState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 4, 1, 3), OSState())
if mibBuilder.loadTexts: dlOSState.setStatus('mandatory')
dlOSRelDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 6, 4, 1, 4), ReleaseDate())
if mibBuilder.loadTexts: dlOSRelDate.setStatus('mandatory')
dlUpdateOS = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 6, 5), UpdateOSMode())
if mibBuilder.loadTexts: dlUpdateOS.setStatus('mandatory')
fadmBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 7, 1), VersionString())
if mibBuilder.loadTexts: fadmBootPromVer.setStatus('mandatory')
fadmROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: fadmROMSize.setStatus('mandatory')
fadmNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: fadmNumSubDiv.setStatus('mandatory')
fadmSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 7, 4), )
if mibBuilder.loadTexts: fadmSubDivTable.setStatus('mandatory')
fadmSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 7, 4, 1), ).setIndexNames((0, "LUXN-MIB", "fadmSubDivIndex"))
if mibBuilder.loadTexts: fadmSubDivEntry.setStatus('mandatory')
fadmSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: fadmSubDivIndex.setStatus('mandatory')
fadmSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: fadmSubDivDescr.setStatus('mandatory')
fadmSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: fadmSubDivSize.setStatus('mandatory')
fadmSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: fadmSubDivOffset.setStatus('mandatory')
fadmNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmNumber.setStatus('mandatory')
fadmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6), )
if mibBuilder.loadTexts: fadmTable.setStatus('mandatory')
fadmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1), ).setIndexNames((0, "LUXN-MIB", "fadmCardLocation"), (0, "LUXN-MIB", "fadmCardShelf"), (0, "LUXN-MIB", "fadmCardSlot"))
if mibBuilder.loadTexts: fadmEntry.setStatus('mandatory')
fadmCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmCardLocation.setStatus('mandatory')
fadmCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmCardShelf.setStatus('mandatory')
fadmCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmCardSlot.setStatus('mandatory')
fadmMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 4), DateAndTime())
if mibBuilder.loadTexts: fadmMfgDate.setStatus('mandatory')
fadmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 5), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmSerialNum.setStatus('mandatory')
fadmModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 6), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmModelType.setStatus('mandatory')
fadmName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 7), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmName.setStatus('mandatory')
fadmFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 8), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmFWVersionID.setStatus('mandatory')
fadmSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 9), RebootType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmSetState.setStatus('mandatory')
fadmNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmNumPorts.setStatus('mandatory')
fadmUpgradeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upgradeable", 1), ("notUpgradeable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmUpgradeFlag.setStatus('mandatory')
fadmModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmModelNum.setStatus('mandatory')
fadmITUNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmITUNumber1.setStatus('mandatory')
fadmITUNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmITUNumber2.setStatus('mandatory')
fadmInsertionLoss1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmInsertionLoss1.setStatus('mandatory')
fadmInsertionLoss2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 16), DisplayString())
if mibBuilder.loadTexts: fadmInsertionLoss2.setStatus('mandatory')
fadmExpressLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmExpressLoss.setStatus('mandatory')
fadmHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 18), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmHWName.setStatus('mandatory')
fadmPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 19), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmPathID.setStatus('mandatory')
fadmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmAdminState.setStatus('mandatory')
fadmCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmCleiNum.setStatus('mandatory')
fadmBand = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmBand.setStatus('mandatory')
fadmChannelsPerBand = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmChannelsPerBand.setStatus('mandatory')
fadmStartItu = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmStartItu.setStatus('mandatory')
fadmEndItu = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmEndItu.setStatus('mandatory')
fadmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7), )
if mibBuilder.loadTexts: fadmPortTable.setStatus('mandatory')
fadmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1), ).setIndexNames((0, "LUXN-MIB", "fadmPortCardShelf"), (0, "LUXN-MIB", "fadmPortCardSlot"), (0, "LUXN-MIB", "fadmPortType"))
if mibBuilder.loadTexts: fadmPortEntry.setStatus('mandatory')
fadmPortCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 1), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmPortCardShelf.setStatus('mandatory')
fadmPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 2), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmPortCardSlot.setStatus('mandatory')
fadmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("connATx-AToD", 1), ("connARx-EXP", 2), ("localTx-Local", 3), ("localRx-Rx", 4), ("connBTx", 5), ("connBRx", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmPortType.setStatus('mandatory')
fadmConnLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 4), CardLocation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmConnLocation.setStatus('mandatory')
fadmConnIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmConnIpAddress.setStatus('mandatory')
fadmConnChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmConnChassisID.setStatus('mandatory')
fadmConnSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmConnSystemName.setStatus('mandatory')
fadmConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 8), CardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmConnCardType.setStatus('mandatory')
fadmConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmConnPort.setStatus('mandatory')
fadmConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 10), ShelfInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmConnShelf.setStatus('mandatory')
fadmConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 7, 7, 1, 11), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadmConnSlot.setStatus('mandatory')
oppmBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 8, 1), VersionString())
if mibBuilder.loadTexts: oppmBootPromVer.setStatus('mandatory')
oppmROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: oppmROMSize.setStatus('mandatory')
oppmNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: oppmNumSubDiv.setStatus('mandatory')
oppmSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 8, 4), )
if mibBuilder.loadTexts: oppmSubDivTable.setStatus('mandatory')
oppmSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 8, 4, 1), ).setIndexNames((0, "LUXN-MIB", "oppmSubDivIndex"))
if mibBuilder.loadTexts: oppmSubDivEntry.setStatus('mandatory')
oppmSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: oppmSubDivIndex.setStatus('mandatory')
oppmSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: oppmSubDivDescr.setStatus('mandatory')
oppmSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: oppmSubDivSize.setStatus('mandatory')
oppmSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: oppmSubDivOffset.setStatus('mandatory')
oppmNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 8, 5), Integer32())
if mibBuilder.loadTexts: oppmNumber.setStatus('mandatory')
oppmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6), )
if mibBuilder.loadTexts: oppmTable.setStatus('mandatory')
oppmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1), ).setIndexNames((0, "LUXN-MIB", "oppmCardLocation"), (0, "LUXN-MIB", "oppmCardShelf"), (0, "LUXN-MIB", "oppmCardSlot"))
if mibBuilder.loadTexts: oppmEntry.setStatus('mandatory')
oppmCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 1), CardLocation())
if mibBuilder.loadTexts: oppmCardLocation.setStatus('mandatory')
oppmCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 2), CardShelf())
if mibBuilder.loadTexts: oppmCardShelf.setStatus('mandatory')
oppmCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 3), SlotInput())
if mibBuilder.loadTexts: oppmCardSlot.setStatus('mandatory')
oppmModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 4), DisplayString())
if mibBuilder.loadTexts: oppmModelNum.setStatus('mandatory')
oppmMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 5), DateAndTime())
if mibBuilder.loadTexts: oppmMfgDate.setStatus('mandatory')
oppmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 6), SerialString())
if mibBuilder.loadTexts: oppmSerialNum.setStatus('mandatory')
oppmModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 7), CardType())
if mibBuilder.loadTexts: oppmModelType.setStatus('mandatory')
oppmName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 8), CardName())
if mibBuilder.loadTexts: oppmName.setStatus('mandatory')
oppmFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 9), VersionString())
if mibBuilder.loadTexts: oppmFWVersionID.setStatus('mandatory')
oppmSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 10), RebootType())
if mibBuilder.loadTexts: oppmSetState.setStatus('mandatory')
oppmTxInsertLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 12), DisplayString())
if mibBuilder.loadTexts: oppmTxInsertLoss.setStatus('mandatory')
oppmRxInsertLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 13), DisplayString())
if mibBuilder.loadTexts: oppmRxInsertLoss.setStatus('mandatory')
oppmUpgradeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upgradable", 1), ("notUpgradable", 2))))
if mibBuilder.loadTexts: oppmUpgradeFlag.setStatus('mandatory')
oppmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("other", 1), ("switchToLinkA", 2), ("switchToLinkB", 3), ("toggle", 4), ("enableAutoSwitch", 6))))
if mibBuilder.loadTexts: oppmSwitch.setStatus('mandatory')
oppmMarginForSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 15)))
if mibBuilder.loadTexts: oppmMarginForSwitch.setStatus('mandatory')
oppmHighAlarmMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 17), Integer32())
if mibBuilder.loadTexts: oppmHighAlarmMargin.setStatus('mandatory')
oppmConfigCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("save", 2))))
if mibBuilder.loadTexts: oppmConfigCommit.setStatus('mandatory')
oppmHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 19), CardName())
if mibBuilder.loadTexts: oppmHWName.setStatus('mandatory')
oppmLinkAPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 20), PathIdName())
if mibBuilder.loadTexts: oppmLinkAPathID.setStatus('mandatory')
oppmLinkBPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 21), PathIdName())
if mibBuilder.loadTexts: oppmLinkBPathID.setStatus('mandatory')
oppmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3))))
if mibBuilder.loadTexts: oppmAdminState.setStatus('mandatory')
oppmCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 23), DisplayString())
if mibBuilder.loadTexts: oppmCleiNum.setStatus('mandatory')
oppmSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("forced", 2))))
if mibBuilder.loadTexts: oppmSwitchState.setStatus('mandatory')
oppmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7), )
if mibBuilder.loadTexts: oppmPortTable.setStatus('mandatory')
oppmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1), ).setIndexNames((0, "LUXN-MIB", "oppmPortCardShelf"), (0, "LUXN-MIB", "oppmPortCardSlot"), (0, "LUXN-MIB", "oppmPortType"))
if mibBuilder.loadTexts: oppmPortEntry.setStatus('mandatory')
oppmPortCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 1), CardShelf())
if mibBuilder.loadTexts: oppmPortCardShelf.setStatus('mandatory')
oppmPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 2), SlotInput())
if mibBuilder.loadTexts: oppmPortCardSlot.setStatus('mandatory')
oppmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("linkATx", 1), ("linkARx", 2), ("linkBTx", 3), ("linkBRx", 4), ("localTx", 5), ("localRx", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oppmPortType.setStatus('mandatory')
oppmConnLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 4), CardLocation())
if mibBuilder.loadTexts: oppmConnLocation.setStatus('mandatory')
oppmConnIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 5), IpAddress())
if mibBuilder.loadTexts: oppmConnIpAddress.setStatus('mandatory')
oppmConnChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)))
if mibBuilder.loadTexts: oppmConnChassisID.setStatus('mandatory')
oppmConnSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: oppmConnSystemName.setStatus('mandatory')
oppmConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 8), CardType())
if mibBuilder.loadTexts: oppmConnCardType.setStatus('mandatory')
oppmConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 9), Integer32())
if mibBuilder.loadTexts: oppmConnPort.setStatus('mandatory')
oppmConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 10), ShelfInput())
if mibBuilder.loadTexts: oppmConnShelf.setStatus('mandatory')
oppmConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 8, 7, 1, 11), SlotInput())
if mibBuilder.loadTexts: oppmConnSlot.setStatus('mandatory')
mcmBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 9, 1), VersionString())
if mibBuilder.loadTexts: mcmBootPromVer.setStatus('mandatory')
mcmROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: mcmROMSize.setStatus('mandatory')
mcmNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: mcmNumSubDiv.setStatus('mandatory')
mcmSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 9, 4), )
if mibBuilder.loadTexts: mcmSubDivTable.setStatus('mandatory')
mcmSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 9, 4, 1), ).setIndexNames((0, "LUXN-MIB", "mcmSubDivIndex"))
if mibBuilder.loadTexts: mcmSubDivEntry.setStatus('mandatory')
mcmSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: mcmSubDivIndex.setStatus('mandatory')
mcmSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: mcmSubDivDescr.setStatus('mandatory')
mcmSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: mcmSubDivSize.setStatus('mandatory')
mcmSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: mcmSubDivOffset.setStatus('mandatory')
mcmNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmNumber.setStatus('mandatory')
mcmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6), )
if mibBuilder.loadTexts: mcmTable.setStatus('mandatory')
mcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1), ).setIndexNames((0, "LUXN-MIB", "mcmCardLocation"), (0, "LUXN-MIB", "mcmCardShelf"), (0, "LUXN-MIB", "mcmCardSlot"))
if mibBuilder.loadTexts: mcmEntry.setStatus('mandatory')
mcmCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCardLocation.setStatus('mandatory')
mcmCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCardShelf.setStatus('mandatory')
mcmCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmCardSlot.setStatus('mandatory')
mcmMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMfgDate.setStatus('mandatory')
mcmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 5), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSerialNum.setStatus('mandatory')
mcmModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 6), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmModelType.setStatus('mandatory')
mcmName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 7), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmName.setStatus('mandatory')
mcmFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 8), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFWVersionID.setStatus('mandatory')
mcmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmAdminState.setStatus('mandatory')
mcmLaserTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 10), Integer32())
if mibBuilder.loadTexts: mcmLaserTemperature.setStatus('mandatory')
mcmBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("oc3", 2), ("oc12", 3), ("oc48", 4), ("gbEthernet", 5), ("fibreChannel", 6))))
if mibBuilder.loadTexts: mcmBandwidth.setStatus('mandatory')
mcmSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("resetWithCurrentConfiguration", 2), ("resetWithFactoryDefault", 3), ("nearEndCardLoopback", 4), ("networkCardLoopback", 5), ("nearEndPort1Loopback", 6), ("nearEndPort2Loopback", 7), ("nearEndPort3Loopback", 8), ("nearEndPort4Loopback", 9), ("networkPort1Loopback", 10), ("networkPort2Loopback", 11), ("networkPort3Loopback", 12), ("networkPort4Loopback", 13), ("disableLoopback", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmSetState.setStatus('mandatory')
mcmNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmNumPorts.setStatus('mandatory')
mcmUpgradeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upgradable", 1), ("notUpgradable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmUpgradeFlag.setStatus('mandatory')
mcmEthernetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmEthernetStatus.setStatus('mandatory')
mcmTimingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("internal", 1), ("link", 2), ("t1Port1", 3), ("t1Port2", 4), ("t1Port3", 5), ("t1Port4", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTimingPort.setStatus('mandatory')
mcmModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmModelNum.setStatus('mandatory')
mcmMfgBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMfgBiasCurrent.setStatus('mandatory')
mcmMfgModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMfgModulation.setStatus('mandatory')
mcmMfgApc = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMfgApc.setStatus('mandatory')
mcmMfgIwmModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMfgIwmModulation.setStatus('mandatory')
mcmconnMuxShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 22), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmconnMuxShelf.setStatus('mandatory')
mcmconnMuxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 23), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmconnMuxSlot.setStatus('mandatory')
mcmconnMuxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmconnMuxPort.setStatus('mandatory')
mcmconnDemuxShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 25), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmconnDemuxShelf.setStatus('mandatory')
mcmconnDemuxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 26), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmconnDemuxSlot.setStatus('mandatory')
mcmconnDemuxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmconnDemuxPort.setStatus('mandatory')
mcmTimingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmTimingPriority.setStatus('mandatory')
mcmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 29), LinkName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmLinkName.setStatus('mandatory')
mcmEthernetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("forced10M", 2), ("forced100M", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmEthernetMode.setStatus('mandatory')
mcmHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 31), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHWName.setStatus('mandatory')
mcmLinkWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmLinkWaveLength.setStatus('mandatory')
mcmFpgaVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 33), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmFpgaVersionID.setStatus('mandatory')
mcmPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 34), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmPathID.setStatus('mandatory')
mcmCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCleiNum.setStatus('mandatory')
mcmItuNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 6, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmItuNum.setStatus('mandatory')
mcmPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortNumber.setStatus('mandatory')
mcmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 9, 8), )
if mibBuilder.loadTexts: mcmPortTable.setStatus('mandatory')
mcmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1), ).setIndexNames((0, "LUXN-MIB", "mcmPortCardLocation"), (0, "LUXN-MIB", "mcmPortCardShelf"), (0, "LUXN-MIB", "mcmPortCardSlot"), (0, "LUXN-MIB", "mcmPortIndex"))
if mibBuilder.loadTexts: mcmPortEntry.setStatus('mandatory')
mcmPortCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCardLocation.setStatus('mandatory')
mcmPortCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCardShelf.setStatus('mandatory')
mcmPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCardSlot.setStatus('mandatory')
mcmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortIndex.setStatus('mandatory')
mcmPortConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmPortConnection.setStatus('mandatory')
mcmPortFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("esf", 1), ("d4", 2), ("crc4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmPortFraming.setStatus('mandatory')
mcmPortLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("b8zs", 1), ("ami", 2), ("hdb3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmPortLineCoding.setStatus('mandatory')
mcmPortLineEqualizer = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ft0to133", 1), ("ft133to266", 2), ("ft266to399", 3), ("ft399to533", 4), ("ft533to655", 5), ("minus43dB", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmPortLineEqualizer.setStatus('mandatory')
mcmPortImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 9, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ohms-100", 1), ("ohms-75", 2), ("ohms-120", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortImpedance.setStatus('mandatory')
fnNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 10, 1), Integer32())
if mibBuilder.loadTexts: fnNumber.setStatus('mandatory')
fnTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 10, 2), )
if mibBuilder.loadTexts: fnTable.setStatus('mandatory')
fnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 10, 2, 1), ).setIndexNames((0, "LUXN-MIB", "fnID"))
if mibBuilder.loadTexts: fnEntry.setStatus('mandatory')
fnID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: fnID.setStatus('mandatory')
fnMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 10, 2, 1, 2), DateAndTime())
if mibBuilder.loadTexts: fnMfgDate.setStatus('mandatory')
fnSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 10, 2, 1, 3), SerialString())
if mibBuilder.loadTexts: fnSerialNum.setStatus('mandatory')
fnModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 10, 2, 1, 4), ModelString())
if mibBuilder.loadTexts: fnModelType.setStatus('mandatory')
csimSysMode = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csimSysMode.setStatus('mandatory')
csimTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 11, 2), )
if mibBuilder.loadTexts: csimTable.setStatus('mandatory')
csimEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1), ).setIndexNames((0, "LUXN-MIB", "csimLocation"), (0, "LUXN-MIB", "csimShelf"), (0, "LUXN-MIB", "csimSlot"))
if mibBuilder.loadTexts: csimEntry.setStatus('mandatory')
csimLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimLocation.setStatus('mandatory')
csimShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimShelf.setStatus('mandatory')
csimSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimSlot.setStatus('mandatory')
csimMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csimMode.setStatus('mandatory')
csimDCMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("continuous", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csimDCMode.setStatus('mandatory')
csimGatingIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csimGatingIntvl.setStatus('mandatory')
csimUpdtIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csimUpdtIntvl.setStatus('mandatory')
csimSEIThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 11, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csimSEIThreshold.setStatus('mandatory')
rpsmBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 12, 1), VersionString())
if mibBuilder.loadTexts: rpsmBootPromVer.setStatus('mandatory')
rpsmROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: rpsmROMSize.setStatus('mandatory')
rpsmNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 12, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: rpsmNumSubDiv.setStatus('mandatory')
rpsmSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 12, 4), )
if mibBuilder.loadTexts: rpsmSubDivTable.setStatus('mandatory')
rpsmSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 12, 4, 1), ).setIndexNames((0, "LUXN-MIB", "rpsmSubDivIndex"))
if mibBuilder.loadTexts: rpsmSubDivEntry.setStatus('mandatory')
rpsmSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: rpsmSubDivIndex.setStatus('mandatory')
rpsmSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: rpsmSubDivDescr.setStatus('mandatory')
rpsmSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: rpsmSubDivSize.setStatus('mandatory')
rpsmSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: rpsmSubDivOffset.setStatus('mandatory')
rpsmNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 12, 5), Integer32())
if mibBuilder.loadTexts: rpsmNumber.setStatus('mandatory')
rpsmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6), )
if mibBuilder.loadTexts: rpsmTable.setStatus('mandatory')
rpsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1), ).setIndexNames((0, "LUXN-MIB", "rpsmCardLocation"), (0, "LUXN-MIB", "rpsmCardShelf"), (0, "LUXN-MIB", "rpsmCardSlot"))
if mibBuilder.loadTexts: rpsmEntry.setStatus('mandatory')
rpsmCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 1), CardLocation())
if mibBuilder.loadTexts: rpsmCardLocation.setStatus('mandatory')
rpsmCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 2), CardShelf())
if mibBuilder.loadTexts: rpsmCardShelf.setStatus('mandatory')
rpsmCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 3), SlotInput())
if mibBuilder.loadTexts: rpsmCardSlot.setStatus('mandatory')
rpsmModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 4), DisplayString())
if mibBuilder.loadTexts: rpsmModelNum.setStatus('mandatory')
rpsmOpticsMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 5), DateAndTime())
if mibBuilder.loadTexts: rpsmOpticsMfgDate.setStatus('mandatory')
rpsmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 6), SerialString())
if mibBuilder.loadTexts: rpsmSerialNum.setStatus('mandatory')
rpsmModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(17))).clone(namedValues=NamedValues(("rpsm", 17))))
if mibBuilder.loadTexts: rpsmModelType.setStatus('mandatory')
rpsmHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 8), CardName())
if mibBuilder.loadTexts: rpsmHWName.setStatus('mandatory')
rpsmFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 9), VersionString())
if mibBuilder.loadTexts: rpsmFWVersionID.setStatus('mandatory')
rpsmCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 10), CardName())
if mibBuilder.loadTexts: rpsmCardName.setStatus('mandatory')
rpsmFWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 11), DisplayString())
if mibBuilder.loadTexts: rpsmFWName.setStatus('mandatory')
rpsmFWDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 12), DateAndTime())
if mibBuilder.loadTexts: rpsmFWDate.setStatus('mandatory')
rpsmHWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 13), VersionString())
if mibBuilder.loadTexts: rpsmHWVersionID.setStatus('mandatory')
rpsmHWDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 14), DateAndTime())
if mibBuilder.loadTexts: rpsmHWDate.setStatus('mandatory')
rpsmSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 15), RebootType())
if mibBuilder.loadTexts: rpsmSetState.setStatus('mandatory')
rpsmExpressLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 16), DisplayString())
if mibBuilder.loadTexts: rpsmExpressLoss.setStatus('mandatory')
rpsmMarginForSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 0)))
if mibBuilder.loadTexts: rpsmMarginForSwitch.setStatus('mandatory')
rpsmMinProtPowerForSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 0)))
if mibBuilder.loadTexts: rpsmMinProtPowerForSwitch.setStatus('mandatory')
rpsmDeBounce = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 19), Integer32())
if mibBuilder.loadTexts: rpsmDeBounce.setStatus('mandatory')
rpsmBlackOutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 20), Integer32())
if mibBuilder.loadTexts: rpsmBlackOutTime.setStatus('mandatory')
rpsmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("other", 1), ("switchToLinkA", 2), ("switchToLinkB", 3), ("toggle", 4), ("enableAutoSwitch", 6))))
if mibBuilder.loadTexts: rpsmSwitch.setStatus('mandatory')
rpsmAddDropLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 22), DisplayString())
if mibBuilder.loadTexts: rpsmAddDropLoss.setStatus('mandatory')
rpsmPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 23), PathIdName())
if mibBuilder.loadTexts: rpsmPathID.setStatus('mandatory')
rpsmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3))))
if mibBuilder.loadTexts: rpsmAdminState.setStatus('mandatory')
rpsmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 12, 7), )
if mibBuilder.loadTexts: rpsmPortTable.setStatus('mandatory')
rpsmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1), ).setIndexNames((0, "LUXN-MIB", "rpsmPortCardShelf"), (0, "LUXN-MIB", "rpsmPortCardSlot"), (0, "LUXN-MIB", "rpsmPortType"))
if mibBuilder.loadTexts: rpsmPortEntry.setStatus('mandatory')
rpsmPortCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 1), CardShelf())
if mibBuilder.loadTexts: rpsmPortCardShelf.setStatus('mandatory')
rpsmPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 2), SlotInput())
if mibBuilder.loadTexts: rpsmPortCardSlot.setStatus('mandatory')
rpsmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("linkEast", 1), ("linkWest", 2), ("in", 3), ("out", 4), ("aTOd", 5), ("exp", 6))))
if mibBuilder.loadTexts: rpsmPortType.setStatus('mandatory')
rpsmConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)))
if mibBuilder.loadTexts: rpsmConnCardType.setStatus('mandatory')
rpsmConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 5), Integer32())
if mibBuilder.loadTexts: rpsmConnPort.setStatus('mandatory')
rpsmConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 6), ShelfInput())
if mibBuilder.loadTexts: rpsmConnShelf.setStatus('mandatory')
rpsmConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 12, 7, 1, 7), SlotInput())
if mibBuilder.loadTexts: rpsmConnSlot.setStatus('mandatory')
rsdmBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 13, 1), VersionString())
if mibBuilder.loadTexts: rsdmBootPromVer.setStatus('mandatory')
rsdmROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: rsdmROMSize.setStatus('mandatory')
rsdmNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: rsdmNumSubDiv.setStatus('mandatory')
rsdmSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 13, 4), )
if mibBuilder.loadTexts: rsdmSubDivTable.setStatus('mandatory')
rsdmSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 13, 4, 1), ).setIndexNames((0, "LUXN-MIB", "rsdmSubDivIndex"))
if mibBuilder.loadTexts: rsdmSubDivEntry.setStatus('mandatory')
rsdmSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: rsdmSubDivIndex.setStatus('mandatory')
rsdmSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: rsdmSubDivDescr.setStatus('mandatory')
rsdmSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: rsdmSubDivSize.setStatus('mandatory')
rsdmSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: rsdmSubDivOffset.setStatus('mandatory')
rsdmNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 13, 5), Integer32())
if mibBuilder.loadTexts: rsdmNumber.setStatus('mandatory')
rsdmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6), )
if mibBuilder.loadTexts: rsdmTable.setStatus('mandatory')
rsdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1), ).setIndexNames((0, "LUXN-MIB", "rsdmCardLocation"), (0, "LUXN-MIB", "rsdmCardShelf"), (0, "LUXN-MIB", "rsdmCardSlot"))
if mibBuilder.loadTexts: rsdmEntry.setStatus('mandatory')
rsdmCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 1), CardLocation())
if mibBuilder.loadTexts: rsdmCardLocation.setStatus('mandatory')
rsdmCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 2), CardShelf())
if mibBuilder.loadTexts: rsdmCardShelf.setStatus('mandatory')
rsdmCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 3), SlotInput())
if mibBuilder.loadTexts: rsdmCardSlot.setStatus('mandatory')
rsdmModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 4), DisplayString())
if mibBuilder.loadTexts: rsdmModelNum.setStatus('mandatory')
rsdmOpticsMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 5), DateAndTime())
if mibBuilder.loadTexts: rsdmOpticsMfgDate.setStatus('mandatory')
rsdmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 6), SerialString())
if mibBuilder.loadTexts: rsdmSerialNum.setStatus('mandatory')
rsdmModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16))).clone(namedValues=NamedValues(("rsdm", 16))))
if mibBuilder.loadTexts: rsdmModelType.setStatus('mandatory')
rsdmHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 8), CardName())
if mibBuilder.loadTexts: rsdmHWName.setStatus('mandatory')
rsdmCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 9), CardName())
if mibBuilder.loadTexts: rsdmCardName.setStatus('mandatory')
rsdmFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 10), VersionString())
if mibBuilder.loadTexts: rsdmFWVersionID.setStatus('mandatory')
rsdmFWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 11), DisplayString())
if mibBuilder.loadTexts: rsdmFWName.setStatus('mandatory')
rsdmFWDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 12), DateAndTime())
if mibBuilder.loadTexts: rsdmFWDate.setStatus('mandatory')
rsdmHWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 13), VersionString())
if mibBuilder.loadTexts: rsdmHWVersionID.setStatus('mandatory')
rsdmHWDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 14), DateAndTime())
if mibBuilder.loadTexts: rsdmHWDate.setStatus('mandatory')
rsdmSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 15), RebootType())
if mibBuilder.loadTexts: rsdmSetState.setStatus('mandatory')
rsdmRxITUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 16), Integer32())
if mibBuilder.loadTexts: rsdmRxITUNumber.setStatus('mandatory')
rsdmTxITUNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 17), Integer32())
if mibBuilder.loadTexts: rsdmTxITUNumber.setStatus('mandatory')
rsdmRxInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 18), DisplayString())
if mibBuilder.loadTexts: rsdmRxInsertionLoss.setStatus('mandatory')
rsdmTxInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 19), DisplayString())
if mibBuilder.loadTexts: rsdmTxInsertionLoss.setStatus('mandatory')
rsdmExpressLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 20), DisplayString())
if mibBuilder.loadTexts: rsdmExpressLoss.setStatus('mandatory')
rsdmMarginForSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 0)))
if mibBuilder.loadTexts: rsdmMarginForSwitch.setStatus('mandatory')
rsdmMinProtPowerForSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-40, 0)))
if mibBuilder.loadTexts: rsdmMinProtPowerForSwitch.setStatus('mandatory')
rsdmDeBounce = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 23), Integer32())
if mibBuilder.loadTexts: rsdmDeBounce.setStatus('mandatory')
rsdmBlackOutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 24), Integer32())
if mibBuilder.loadTexts: rsdmBlackOutTime.setStatus('mandatory')
rsdmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))).clone(namedValues=NamedValues(("other", 1), ("switchToLinkA", 2), ("switchToLinkB", 3), ("toggle", 4), ("enableAutoSwitch", 6))))
if mibBuilder.loadTexts: rsdmSwitch.setStatus('mandatory')
rsdmPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 26), PathIdName())
if mibBuilder.loadTexts: rsdmPathID.setStatus('mandatory')
rsdmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3))))
if mibBuilder.loadTexts: rsdmAdminState.setStatus('mandatory')
rsdmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 13, 7), )
if mibBuilder.loadTexts: rsdmPortTable.setStatus('mandatory')
rsdmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1), ).setIndexNames((0, "LUXN-MIB", "rsdmPortCardShelf"), (0, "LUXN-MIB", "rsdmPortCardSlot"), (0, "LUXN-MIB", "rsdmPortType"))
if mibBuilder.loadTexts: rsdmPortEntry.setStatus('mandatory')
rsdmPortCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 1), CardShelf())
if mibBuilder.loadTexts: rsdmPortCardShelf.setStatus('mandatory')
rsdmPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 2), SlotInput())
if mibBuilder.loadTexts: rsdmPortCardSlot.setStatus('mandatory')
rsdmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("linkEast", 1), ("linkWest", 2), ("linkRx", 3), ("linkTx", 4))))
if mibBuilder.loadTexts: rsdmPortType.setStatus('mandatory')
rsdmConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 4), CardType())
if mibBuilder.loadTexts: rsdmConnCardType.setStatus('mandatory')
rsdmConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 5), Integer32())
if mibBuilder.loadTexts: rsdmConnPort.setStatus('mandatory')
rsdmConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 6), ShelfInput())
if mibBuilder.loadTexts: rsdmConnShelf.setStatus('mandatory')
rsdmConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 13, 7, 1, 7), SlotInput())
if mibBuilder.loadTexts: rsdmConnSlot.setStatus('mandatory')
rtdmBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 14, 1), VersionString())
if mibBuilder.loadTexts: rtdmBootPromVer.setStatus('mandatory')
rtdmROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: rtdmROMSize.setStatus('mandatory')
rtdmNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 14, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: rtdmNumSubDiv.setStatus('mandatory')
rtdmSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 14, 4), )
if mibBuilder.loadTexts: rtdmSubDivTable.setStatus('mandatory')
rtdmSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 14, 4, 1), ).setIndexNames((0, "LUXN-MIB", "rtdmSubDivIndex"))
if mibBuilder.loadTexts: rtdmSubDivEntry.setStatus('mandatory')
rtdmSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: rtdmSubDivIndex.setStatus('mandatory')
rtdmSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: rtdmSubDivDescr.setStatus('mandatory')
rtdmSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: rtdmSubDivSize.setStatus('mandatory')
rtdmSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: rtdmSubDivOffset.setStatus('mandatory')
rtdmNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 14, 5), Integer32())
if mibBuilder.loadTexts: rtdmNumber.setStatus('mandatory')
rtdmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6), )
if mibBuilder.loadTexts: rtdmTable.setStatus('mandatory')
rtdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1), ).setIndexNames((0, "LUXN-MIB", "rtdmCardLocation"), (0, "LUXN-MIB", "rtdmCardShelf"), (0, "LUXN-MIB", "rtdmCardSlot"))
if mibBuilder.loadTexts: rtdmEntry.setStatus('mandatory')
rtdmCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 1), CardLocation())
if mibBuilder.loadTexts: rtdmCardLocation.setStatus('mandatory')
rtdmCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 2), CardShelf())
if mibBuilder.loadTexts: rtdmCardShelf.setStatus('mandatory')
rtdmCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 3), SlotInput())
if mibBuilder.loadTexts: rtdmCardSlot.setStatus('mandatory')
rtdmModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 4), DisplayString())
if mibBuilder.loadTexts: rtdmModelNum.setStatus('mandatory')
rtdmOpticsMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 5), DateAndTime())
if mibBuilder.loadTexts: rtdmOpticsMfgDate.setStatus('mandatory')
rtdmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 6), SerialString())
if mibBuilder.loadTexts: rtdmSerialNum.setStatus('mandatory')
rtdmModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(18))).clone(namedValues=NamedValues(("rtdm", 18))))
if mibBuilder.loadTexts: rtdmModelType.setStatus('mandatory')
rtdmHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 8), CardName())
if mibBuilder.loadTexts: rtdmHWName.setStatus('mandatory')
rtdmFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 9), VersionString())
if mibBuilder.loadTexts: rtdmFWVersionID.setStatus('mandatory')
rtdmCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 10), CardName())
if mibBuilder.loadTexts: rtdmCardName.setStatus('mandatory')
rtdmFWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 11), DisplayString())
if mibBuilder.loadTexts: rtdmFWName.setStatus('mandatory')
rtdmFWDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 12), DateAndTime())
if mibBuilder.loadTexts: rtdmFWDate.setStatus('mandatory')
rtdmHWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 13), VersionString())
if mibBuilder.loadTexts: rtdmHWVersionID.setStatus('mandatory')
rtdmHWDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 14), DateAndTime())
if mibBuilder.loadTexts: rtdmHWDate.setStatus('mandatory')
rtdmSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 15), RebootType())
if mibBuilder.loadTexts: rtdmSetState.setStatus('mandatory')
rtdmCommonEInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 16), DisplayString())
if mibBuilder.loadTexts: rtdmCommonEInsertionLoss.setStatus('mandatory')
rtdmCommonWInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 17), DisplayString())
if mibBuilder.loadTexts: rtdmCommonWInsertionLoss.setStatus('mandatory')
rtdmMonEastInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 18), DisplayString())
if mibBuilder.loadTexts: rtdmMonEastInsertionLoss.setStatus('mandatory')
rtdmMonWestInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 19), DisplayString())
if mibBuilder.loadTexts: rtdmMonWestInsertionLoss.setStatus('mandatory')
rtdmPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 20), PathIdName())
if mibBuilder.loadTexts: rtdmPathID.setStatus('mandatory')
rtdmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3))))
if mibBuilder.loadTexts: rtdmAdminState.setStatus('mandatory')
rtdmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 14, 7), )
if mibBuilder.loadTexts: rtdmPortTable.setStatus('mandatory')
rtdmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1), ).setIndexNames((0, "LUXN-MIB", "rtdmPortCardShelf"), (0, "LUXN-MIB", "rtdmPortCardSlot"), (0, "LUXN-MIB", "rtdmPortType"))
if mibBuilder.loadTexts: rtdmPortEntry.setStatus('mandatory')
rtdmPortCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 1), CardShelf())
if mibBuilder.loadTexts: rtdmPortCardShelf.setStatus('mandatory')
rtdmPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 2), SlotInput())
if mibBuilder.loadTexts: rtdmPortCardSlot.setStatus('mandatory')
rtdmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("localRx", 1))))
if mibBuilder.loadTexts: rtdmPortType.setStatus('mandatory')
rtdmConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)))
if mibBuilder.loadTexts: rtdmConnCardType.setStatus('mandatory')
rtdmConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 5), Integer32())
if mibBuilder.loadTexts: rtdmConnPort.setStatus('mandatory')
rtdmConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 6), ShelfInput())
if mibBuilder.loadTexts: rtdmConnShelf.setStatus('mandatory')
rtdmConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 14, 7, 1, 7), SlotInput())
if mibBuilder.loadTexts: rtdmConnSlot.setStatus('mandatory')
osamBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 15, 1), VersionString())
if mibBuilder.loadTexts: osamBootPromVer.setStatus('mandatory')
osamROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: osamROMSize.setStatus('mandatory')
osamNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: osamNumSubDiv.setStatus('mandatory')
osamSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 15, 4), )
if mibBuilder.loadTexts: osamSubDivTable.setStatus('mandatory')
osamSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 15, 4, 1), ).setIndexNames((0, "LUXN-MIB", "osamSubDivIndex"))
if mibBuilder.loadTexts: osamSubDivEntry.setStatus('mandatory')
osamSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: osamSubDivIndex.setStatus('mandatory')
osamSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: osamSubDivDescr.setStatus('mandatory')
osamSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: osamSubDivSize.setStatus('mandatory')
osamSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: osamSubDivOffset.setStatus('mandatory')
osamNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 15, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamNumber.setStatus('mandatory')
osamTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6), )
if mibBuilder.loadTexts: osamTable.setStatus('mandatory')
osamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1), ).setIndexNames((0, "LUXN-MIB", "osamCardLocation"), (0, "LUXN-MIB", "osamCardShelf"), (0, "LUXN-MIB", "osamCardSlot"))
if mibBuilder.loadTexts: osamEntry.setStatus('mandatory')
osamCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamCardLocation.setStatus('mandatory')
osamCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamCardShelf.setStatus('mandatory')
osamCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamCardSlot.setStatus('mandatory')
osamModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 4), ModelNum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamModelNum.setStatus('mandatory')
osamSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 5), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamSerialNum.setStatus('mandatory')
osamModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 6), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamModelType.setStatus('mandatory')
osamHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 7), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamHWName.setStatus('mandatory')
osamHWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 8), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamHWVersionID.setStatus('mandatory')
osamHWDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamHWDate.setStatus('mandatory')
osamFWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 10), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamFWName.setStatus('mandatory')
osamFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 11), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamFWVersionID.setStatus('mandatory')
osamFWDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamFWDate.setStatus('mandatory')
osamCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 13), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamCardName.setStatus('mandatory')
osamSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 14), RebootType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamSetState.setStatus('mandatory')
osamLaserState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 15), FlagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamLaserState.setStatus('mandatory')
osamOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("currentControlled", 1), ("gainControlled", 2), ("powerControlled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamOperationMode.setStatus('mandatory')
osamLaserBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamLaserBiasCurrent.setStatus('mandatory')
osamAmplifierGain = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamAmplifierGain.setStatus('mandatory')
osamConfigCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamConfigCommit.setStatus('mandatory')
osamNoiseFigure = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamNoiseFigure.setStatus('mandatory')
osamPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 21), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamPathID.setStatus('mandatory')
osamAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamAdminState.setStatus('mandatory')
osam2NoiseFigure = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osam2NoiseFigure.setStatus('mandatory')
osam2GainReq = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osam2GainReq.setStatus('mandatory')
osam2OpPowerReq = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osam2OpPowerReq.setStatus('mandatory')
osamCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamCleiNum.setStatus('mandatory')
osamNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamNumPorts.setStatus('mandatory')
osamPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7), )
if mibBuilder.loadTexts: osamPortTable.setStatus('mandatory')
osamPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1), ).setIndexNames((0, "LUXN-MIB", "osamPortCardShelf"), (0, "LUXN-MIB", "osamPortCardSlot"), (0, "LUXN-MIB", "osamPortType"))
if mibBuilder.loadTexts: osamPortEntry.setStatus('mandatory')
osamPortCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 1), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPortCardShelf.setStatus('mandatory')
osamPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 2), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPortCardSlot.setStatus('mandatory')
osamPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamPortType.setStatus('mandatory')
osamConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 4), CardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamConnCardType.setStatus('mandatory')
osamConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamConnPort.setStatus('mandatory')
osamConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 6), ShelfInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamConnShelf.setStatus('mandatory')
osamConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 7), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: osamConnSlot.setStatus('mandatory')
osamPortCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 8), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPortCardType.setStatus('mandatory')
osamConnLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 9), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamConnLocation.setStatus('mandatory')
osamConnChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamConnChassisID.setStatus('mandatory')
osamConnSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamConnSystemName.setStatus('mandatory')
osamConnIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 15, 7, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamConnIpAddress.setStatus('mandatory')
rsmBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 16, 1), VersionString())
if mibBuilder.loadTexts: rsmBootPromVer.setStatus('mandatory')
rsmROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 16, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: rsmROMSize.setStatus('mandatory')
rsmNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: rsmNumSubDiv.setStatus('mandatory')
rsmSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 16, 4), )
if mibBuilder.loadTexts: rsmSubDivTable.setStatus('mandatory')
rsmSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 16, 4, 1), ).setIndexNames((0, "LUXN-MIB", "rsmSubDivIndex"))
if mibBuilder.loadTexts: rsmSubDivEntry.setStatus('mandatory')
rsmSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: rsmSubDivIndex.setStatus('mandatory')
rsmSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: rsmSubDivDescr.setStatus('mandatory')
rsmSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: rsmSubDivSize.setStatus('mandatory')
rsmSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: rsmSubDivOffset.setStatus('mandatory')
rsmNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmNumber.setStatus('mandatory')
rsmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6), )
if mibBuilder.loadTexts: rsmTable.setStatus('mandatory')
rsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1), ).setIndexNames((0, "LUXN-MIB", "rsmCardLocation"), (0, "LUXN-MIB", "rsmCardShelf"), (0, "LUXN-MIB", "rsmCardSlot"))
if mibBuilder.loadTexts: rsmEntry.setStatus('mandatory')
rsmCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmCardLocation.setStatus('mandatory')
rsmCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmCardShelf.setStatus('mandatory')
rsmCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsmCardSlot.setStatus('mandatory')
rsmModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmModelNum.setStatus('mandatory')
rsmOpticsMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 5), DateAndTime())
if mibBuilder.loadTexts: rsmOpticsMfgDate.setStatus('mandatory')
rsmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 6), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmSerialNum.setStatus('mandatory')
rsmModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 7), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmModelType.setStatus('mandatory')
rsmHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 8), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmHWName.setStatus('mandatory')
rsmCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 9), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsmCardName.setStatus('mandatory')
rsmFWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmFWName.setStatus('mandatory')
rsmFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 11), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmFWVersionID.setStatus('mandatory')
rsmFWDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmFWDate.setStatus('mandatory')
rsmSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 13), RebootType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsmSetState.setStatus('mandatory')
rsmRxInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmRxInsertionLoss.setStatus('mandatory')
rsmRxComInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmRxComInsertionLoss.setStatus('mandatory')
rsmWorkingWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmWorkingWavelength.setStatus('mandatory')
rsmLinkAPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 17), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsmLinkAPathID.setStatus('mandatory')
rsmLinkBPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 18), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsmLinkBPathID.setStatus('mandatory')
rsmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsmAdminState.setStatus('mandatory')
rsmCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmCleiNum.setStatus('mandatory')
rsmNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmNumPorts.setStatus('mandatory')
rsmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 16, 7), )
if mibBuilder.loadTexts: rsmPortTable.setStatus('mandatory')
rsmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1), ).setIndexNames((0, "LUXN-MIB", "rsmPortCardShelf"), (0, "LUXN-MIB", "rsmPortCardSlot"), (0, "LUXN-MIB", "rsmPortType"))
if mibBuilder.loadTexts: rsmPortEntry.setStatus('mandatory')
rsmPortCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 1), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmPortCardShelf.setStatus('mandatory')
rsmPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 2), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmPortCardSlot.setStatus('mandatory')
rsmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("localARx", 1), ("localATx", 2), ("localBRx", 3), ("localBTx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmPortType.setStatus('mandatory')
rsmConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 4), CardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsmConnCardType.setStatus('mandatory')
rsmConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 5), ShelfInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsmConnShelf.setStatus('mandatory')
rsmConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 6), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsmConnSlot.setStatus('mandatory')
rsmConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 16, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsmConnPort.setStatus('mandatory')
upsmBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 17, 1), VersionString())
if mibBuilder.loadTexts: upsmBootPromVer.setStatus('mandatory')
upsmROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 17, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: upsmROMSize.setStatus('mandatory')
upsmNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 17, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: upsmNumSubDiv.setStatus('mandatory')
upsmSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 17, 4), )
if mibBuilder.loadTexts: upsmSubDivTable.setStatus('mandatory')
upsmSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 17, 4, 1), ).setIndexNames((0, "LUXN-MIB", "upsmSubDivIndex"))
if mibBuilder.loadTexts: upsmSubDivEntry.setStatus('mandatory')
upsmSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: upsmSubDivIndex.setStatus('mandatory')
upsmSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: upsmSubDivDescr.setStatus('mandatory')
upsmSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: upsmSubDivSize.setStatus('mandatory')
upsmSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: upsmSubDivOffset.setStatus('mandatory')
upsmNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 17, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmNumber.setStatus('mandatory')
upsmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6), )
if mibBuilder.loadTexts: upsmTable.setStatus('mandatory')
upsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1), ).setIndexNames((0, "LUXN-MIB", "upsmCardLocation"), (0, "LUXN-MIB", "upsmCardShelf"), (0, "LUXN-MIB", "upsmCardSlot"))
if mibBuilder.loadTexts: upsmEntry.setStatus('mandatory')
upsmCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmCardLocation.setStatus('mandatory')
upsmCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmCardShelf.setStatus('mandatory')
upsmCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmCardSlot.setStatus('mandatory')
upsmModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmModelNum.setStatus('mandatory')
upsmOpticsMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 5), DateAndTime())
if mibBuilder.loadTexts: upsmOpticsMfgDate.setStatus('mandatory')
upsmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 6), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmSerialNum.setStatus('mandatory')
upsmModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 7), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmModelType.setStatus('mandatory')
upsmHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 8), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmHWName.setStatus('mandatory')
upsmCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 9), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmCardName.setStatus('mandatory')
upsmFWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmFWName.setStatus('mandatory')
upsmFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 11), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmFWVersionID.setStatus('mandatory')
upsmFWDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmFWDate.setStatus('mandatory')
upsmSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 13), RebootType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmSetState.setStatus('mandatory')
upsmRxInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmRxInsertionLoss.setStatus('mandatory')
upsmTxInsertionLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmTxInsertionLoss.setStatus('mandatory')
upsmMarginForSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32, -6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmMarginForSwitch.setStatus('mandatory')
upsmMinProtPowerForSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, -5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmMinProtPowerForSwitch.setStatus('mandatory')
upsmDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmDebounce.setStatus('mandatory')
upsmBlackOutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmBlackOutTime.setStatus('mandatory')
upsmSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("switchToLinkA", 2), ("switchToLinkB", 3), ("toggle", 4), ("enableAutoSwitch", 6), ("enableSwitchtoLinkA", 7), ("enableSwitchtoLinkB", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmSwitch.setStatus('mandatory')
upsmLinkAPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 21), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmLinkAPathID.setStatus('mandatory')
upsmLinkBPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 22), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmLinkBPathID.setStatus('mandatory')
upsmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmAdminState.setStatus('mandatory')
upsmCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmCleiNum.setStatus('mandatory')
upsmSwitchState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("forced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmSwitchState.setStatus('mandatory')
upsmNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmNumPorts.setStatus('mandatory')
upsmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7), )
if mibBuilder.loadTexts: upsmPortTable.setStatus('mandatory')
upsmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1), ).setIndexNames((0, "LUXN-MIB", "upsmPortCardShelf"), (0, "LUXN-MIB", "upsmPortCardSlot"), (0, "LUXN-MIB", "upsmPortType"))
if mibBuilder.loadTexts: upsmPortEntry.setStatus('mandatory')
upsmPortCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 1), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmPortCardShelf.setStatus('mandatory')
upsmPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 2), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmPortCardSlot.setStatus('mandatory')
upsmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("linkATx", 1), ("linkARx", 2), ("linkBTx", 3), ("linkBRx", 4), ("localTx", 5), ("localRx", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmPortType.setStatus('mandatory')
upsmConnLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 4), CardLocation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmConnLocation.setStatus('mandatory')
upsmConnIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmConnIpAddress.setStatus('mandatory')
upsmConnChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmConnChassisID.setStatus('mandatory')
upsmConnSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmConnSystemName.setStatus('mandatory')
upsmConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 8), CardType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmConnCardType.setStatus('mandatory')
upsmConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmConnPort.setStatus('mandatory')
upsmConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 10), ShelfInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmConnShelf.setStatus('mandatory')
upsmConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 17, 7, 1, 11), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsmConnSlot.setStatus('mandatory')
mcmescBootPromVer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 18, 1), VersionString())
if mibBuilder.loadTexts: mcmescBootPromVer.setStatus('mandatory')
mcmescROMSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: mcmescROMSize.setStatus('mandatory')
mcmescNumSubDiv = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 18, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: mcmescNumSubDiv.setStatus('mandatory')
mcmescSubDivTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 18, 4), )
if mibBuilder.loadTexts: mcmescSubDivTable.setStatus('mandatory')
mcmescSubDivEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 18, 4, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescSubDivIndex"))
if mibBuilder.loadTexts: mcmescSubDivEntry.setStatus('mandatory')
mcmescSubDivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)))
if mibBuilder.loadTexts: mcmescSubDivIndex.setStatus('mandatory')
mcmescSubDivDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: mcmescSubDivDescr.setStatus('mandatory')
mcmescSubDivSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: mcmescSubDivSize.setStatus('mandatory')
mcmescSubDivOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: mcmescSubDivOffset.setStatus('mandatory')
mcmescNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescNumber.setStatus('mandatory')
mcmescTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6), )
if mibBuilder.loadTexts: mcmescTable.setStatus('mandatory')
mcmescEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescCardLocation"), (0, "LUXN-MIB", "mcmescCardShelf"), (0, "LUXN-MIB", "mcmescCardSlot"))
if mibBuilder.loadTexts: mcmescEntry.setStatus('mandatory')
mcmescCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescCardLocation.setStatus('mandatory')
mcmescCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescCardShelf.setStatus('mandatory')
mcmescCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescCardSlot.setStatus('mandatory')
mcmescMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescMfgDate.setStatus('mandatory')
mcmescSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 5), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescSerialNum.setStatus('mandatory')
mcmescModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 6), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescModelType.setStatus('mandatory')
mcmescModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescModelNum.setStatus('mandatory')
mcmescName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 8), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescName.setStatus('mandatory')
mcmescHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 9), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHWName.setStatus('mandatory')
mcmescNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescNumPorts.setStatus('mandatory')
mcmescFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 11), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescFWVersionID.setStatus('mandatory')
mcmesc2ndFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 12), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmesc2ndFWVersionID.setStatus('mandatory')
mcmescFPGAVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 13), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescFPGAVersionID.setStatus('mandatory')
mcmesc2ndFPGAVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 14), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmesc2ndFPGAVersionID.setStatus('mandatory')
mcmescBoardSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 15), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescBoardSerialNum.setStatus('mandatory')
mcmescBoardVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 16), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescBoardVersionID.setStatus('mandatory')
mcmescDaughterBoard1SerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 17), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescDaughterBoard1SerialNum.setStatus('mandatory')
mcmescDaughterBoard1VersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 18), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescDaughterBoard1VersionID.setStatus('mandatory')
mcmescDaughterBoard2SerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 19), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescDaughterBoard2SerialNum.setStatus('mandatory')
mcmescDaughterBoard2VersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 20), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescDaughterBoard2VersionID.setStatus('mandatory')
mcmescCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescCleiNum.setStatus('mandatory')
mcmescLinkWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkWavelength.setStatus('mandatory')
mcmescLinkSfpSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 23), SfpSerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkSfpSerialNum.setStatus('mandatory')
mcmescAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescAdminState.setStatus('mandatory')
mcmescLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 25), LinkName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescLinkName.setStatus('mandatory')
mcmescPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 26), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescPathID.setStatus('mandatory')
mcmescOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescOverride.setStatus('mandatory')
mcmescPerfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescPerfInterval.setStatus('mandatory')
mcmescCpeRxSigLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-29, -7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescCpeRxSigLowThreshold.setStatus('mandatory')
mcmescLinkRxSigLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-29, -7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescLinkRxSigLowThreshold.setStatus('mandatory')
mcmescCpeErrEventThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescCpeErrEventThreshold.setStatus('mandatory')
mcmescCpeErrAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescCpeErrAlarmThreshold.setStatus('mandatory')
mcmescLinkErrEventThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescLinkErrEventThreshold.setStatus('mandatory')
mcmescLinkErrAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescLinkErrAlarmThreshold.setStatus('mandatory')
mcmescTestSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 35), FlagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescTestSequence.setStatus('mandatory')
mcmescConnMuxShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 36), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescConnMuxShelf.setStatus('mandatory')
mcmescConnMuxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 37), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescConnMuxSlot.setStatus('mandatory')
mcmescConnMuxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescConnMuxPort.setStatus('mandatory')
mcmescConnDemuxShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 39), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescConnDemuxShelf.setStatus('mandatory')
mcmescConnDemuxSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 40), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescConnDemuxSlot.setStatus('mandatory')
mcmescConnDemuxPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescConnDemuxPort.setStatus('mandatory')
mcmescConnTxOcmShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 42), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescConnTxOcmShelf.setStatus('mandatory')
mcmescConnTxOcmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 43), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescConnTxOcmSlot.setStatus('mandatory')
mcmescConnTxOcmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("cpetx", 3), ("cperx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescConnTxOcmPort.setStatus('mandatory')
mcmescConnTxOcmShelfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescConnTxOcmShelfSlot.setStatus('mandatory')
mcmescConnTxOcmDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescConnTxOcmDelete.setStatus('mandatory')
mcmescConnRxOcmShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 47), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescConnRxOcmShelf.setStatus('mandatory')
mcmescConnRxOcmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 48), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescConnRxOcmSlot.setStatus('mandatory')
mcmescConnRxOcmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("cpetx", 3), ("cperx", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescConnRxOcmPort.setStatus('mandatory')
mcmescConnRxOcmShelfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescConnRxOcmShelfSlot.setStatus('mandatory')
mcmescConnRxOcmDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescConnRxOcmDelete.setStatus('mandatory')
mcmescSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("other", 1), ("resetWithCurrentConfiguration", 2), ("nearEndCardLoopback", 3), ("networkCardLoopback", 4), ("nearEndPort1Loopback", 5), ("nearEndPort2Loopback", 6), ("nearEndPort3Loopback", 7), ("nearEndPort4Loopback", 8), ("nearEndPort5Loopback", 9), ("nearEndPort6Loopback", 10), ("nearEndPort7Loopback", 11), ("nearEndPort8Loopback", 12), ("nearEndPort9Loopback", 13), ("nearEndPort10Loopback", 14), ("nearEndPort11Loopback", 15), ("nearEndPort12Loopback", 16), ("networkPort1Loopback", 17), ("networkPort2Loopback", 18), ("networkPort3Loopback", 19), ("networkPort4Loopback", 20), ("networkPort5Loopback", 21), ("networkPort6Loopback", 22), ("networkPort7Loopback", 23), ("networkPort8Loopback", 24), ("networkPort9Loopback", 25), ("networkPort10Loopback", 26), ("networkPort11Loopback", 27), ("networkPort12Loopback", 28), ("disableLoopback", 29)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescSetState.setStatus('mandatory')
mcmescLinkClrErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 6, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clearErrCount", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescLinkClrErrCount.setStatus('mandatory')
mcmescPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 18, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortNumber.setStatus('mandatory')
mcmescPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 18, 8), )
if mibBuilder.loadTexts: mcmescPortTable.setStatus('mandatory')
mcmescPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescPortCardLocation"), (0, "LUXN-MIB", "mcmescPortCardShelf"), (0, "LUXN-MIB", "mcmescPortCardSlot"), (0, "LUXN-MIB", "mcmescPortIndex"))
if mibBuilder.loadTexts: mcmescPortEntry.setStatus('mandatory')
mcmescPortCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCardLocation.setStatus('mandatory')
mcmescPortCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCardShelf.setStatus('mandatory')
mcmescPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCardSlot.setStatus('mandatory')
mcmescPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortIndex.setStatus('mandatory')
mcmescPortSfpSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 5), SfpSerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortSfpSerialNum.setStatus('mandatory')
mcmescPortConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescPortConnectionState.setStatus('mandatory')
mcmescPortClrErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 18, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clearErrCount", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescPortClrErrCount.setStatus('mandatory')
topologyTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1), )
if mibBuilder.loadTexts: topologyTable.setStatus('mandatory')
topologyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1), ).setIndexNames((0, "LUXN-MIB", "topologyNearEndCardShelf"), (0, "LUXN-MIB", "topologyNearEndCardSlot"), (0, "LUXN-MIB", "topologyNearEndCardPortIndex"), (0, "LUXN-MIB", "topologyFarEndNodeCardShelf"), (0, "LUXN-MIB", "topologyFarEndNodeCardSlot"), (0, "LUXN-MIB", "topologyFarEndNodeCardPortIndex"))
if mibBuilder.loadTexts: topologyEntry.setStatus('mandatory')
topologyNearEndCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 1), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyNearEndCardShelf.setStatus('mandatory')
topologyNearEndCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 2), CardSlot()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyNearEndCardSlot.setStatus('mandatory')
topologyNearEndCardPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 3), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyNearEndCardPortIndex.setStatus('mandatory')
topologyNearEndCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 4), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyNearEndCardType.setStatus('mandatory')
topologyFarEndChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 5), NodeName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyFarEndChassisID.setStatus('mandatory')
topologyFarEndSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 6), NodeName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyFarEndSystemName.setStatus('mandatory')
topologyFarEndNodeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyFarEndNodeIpAddress.setStatus('mandatory')
topologyFarEndNodeCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 8), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyFarEndNodeCardShelf.setStatus('mandatory')
topologyFarEndNodeCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 9), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyFarEndNodeCardSlot.setStatus('mandatory')
topologyFarEndNodeCardPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 10), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyFarEndNodeCardPortIndex.setStatus('mandatory')
topologyLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("active", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyLinkStatus.setStatus('mandatory')
topologyFarEndNodeCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 22, 1, 1, 12), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: topologyFarEndNodeCardType.setStatus('mandatory')
topologyDiscover = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("discoverTopology", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: topologyDiscover.setStatus('mandatory')
routingTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 23, 1), )
if mibBuilder.loadTexts: routingTable.setStatus('mandatory')
routingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 23, 1, 1), ).setIndexNames((0, "LUXN-MIB", "routeIpDestAddress"), (0, "LUXN-MIB", "routeLocalCCShelf"), (0, "LUXN-MIB", "routeLocalCCSlot"))
if mibBuilder.loadTexts: routingEntry.setStatus('mandatory')
routeLocalCCShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 1, 1, 1), CardShelf())
if mibBuilder.loadTexts: routeLocalCCShelf.setStatus('mandatory')
routeLocalCCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 1, 1, 2), CardSlot())
if mibBuilder.loadTexts: routeLocalCCSlot.setStatus('mandatory')
routeIpDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: routeIpDestAddress.setStatus('mandatory')
routeDestType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("externalRoute", 1), ("internalRoute", 2))))
if mibBuilder.loadTexts: routeDestType.setStatus('mandatory')
routeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2))))
if mibBuilder.loadTexts: routeMode.setStatus('mandatory')
imnDynamicRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 23, 2), )
if mibBuilder.loadTexts: imnDynamicRoutingTable.setStatus('mandatory')
imnDynamicRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 23, 2, 1), ).setIndexNames((0, "LUXN-MIB", "imnDynamicRouteIpDest"))
if mibBuilder.loadTexts: imnDynamicRoutingEntry.setStatus('mandatory')
imnDynamicRouteIpDest = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imnDynamicRouteIpDest.setStatus('mandatory')
imnDynamicRouteIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imnDynamicRouteIpMask.setStatus('mandatory')
imnDynamicRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imnDynamicRouteMetric.setStatus('mandatory')
imnDynamicRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imnDynamicRouteNextHop.setStatus('mandatory')
imnDynamicRouteSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imnDynamicRouteSysName.setStatus('mandatory')
imnRouteUpdateTimer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 23, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imnRouteUpdateTimer.setStatus('mandatory')
imnRouteKeepAliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 23, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imnRouteKeepAliveTimer.setStatus('mandatory')
imnRouteUnReachableTimer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 23, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imnRouteUnReachableTimer.setStatus('mandatory')
imnRouteMode = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 23, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imnRouteMode.setStatus('mandatory')
imnStaticRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 23, 7), )
if mibBuilder.loadTexts: imnStaticRoutingTable.setStatus('mandatory')
imnStaticRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 23, 7, 1), ).setIndexNames((0, "LUXN-MIB", "imnStaticRouteIpDest"))
if mibBuilder.loadTexts: imnStaticRoutingEntry.setStatus('mandatory')
imnStaticRouteIpDest = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imnStaticRouteIpDest.setStatus('mandatory')
imnStaticRouteIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imnStaticRouteIpMask.setStatus('mandatory')
imnStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 23, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imnStaticRouteMetric.setStatus('mandatory')
imnRouteMaxMetric = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 23, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: imnRouteMaxMetric.setStatus('mandatory')
ringNum = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringNum.setStatus('mandatory')
ringTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 24, 2), )
if mibBuilder.loadTexts: ringTable.setStatus('mandatory')
ringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ringIndex"))
if mibBuilder.loadTexts: ringEntry.setStatus('mandatory')
ringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: ringIndex.setStatus('mandatory')
ringID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 2), RingIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringID.setStatus('mandatory')
ringPathID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 3), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPathID1.setStatus('mandatory')
ringPathID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 4), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringPathID2.setStatus('mandatory')
ringPath1RemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringPath1RemoteIP.setStatus('mandatory')
ringPath1RemoteChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringPath1RemoteChassisId.setStatus('mandatory')
ringPath2RemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringPath2RemoteIP.setStatus('mandatory')
ringPath2RemoteChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 24, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringPath2RemoteChassisId.setStatus('mandatory')
tapNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 25, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapNumber.setStatus('mandatory')
tapTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2), )
if mibBuilder.loadTexts: tapTable.setStatus('mandatory')
tapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1), ).setIndexNames((0, "LUXN-MIB", "tapCardLocation"), (0, "LUXN-MIB", "tapCardShelf"), (0, "LUXN-MIB", "tapCardSlot"))
if mibBuilder.loadTexts: tapEntry.setStatus('mandatory')
tapCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapCardLocation.setStatus('mandatory')
tapCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapCardShelf.setStatus('mandatory')
tapCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tapCardSlot.setStatus('mandatory')
tapModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapModelNum.setStatus('mandatory')
tapMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 5), DateAndTime())
if mibBuilder.loadTexts: tapMfgDate.setStatus('mandatory')
tapSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 6), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapSerialNum.setStatus('mandatory')
tapModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 7), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapModelType.setStatus('mandatory')
tapName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 8), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tapName.setStatus('mandatory')
tapFWVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 9), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapFWVersionID.setStatus('mandatory')
tapHWName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 10), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapHWName.setStatus('mandatory')
tapPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 11), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tapPathID.setStatus('mandatory')
tapAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tapAdminState.setStatus('mandatory')
tapCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapCleiNum.setStatus('mandatory')
tapNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 25, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapNumPorts.setStatus('mandatory')
voadmNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 26, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmNumber.setStatus('mandatory')
voadmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2), )
if mibBuilder.loadTexts: voadmTable.setStatus('mandatory')
voadmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1), ).setIndexNames((0, "LUXN-MIB", "voadmCardLocation"), (0, "LUXN-MIB", "voadmCardShelf"), (0, "LUXN-MIB", "voadmCardSlot"))
if mibBuilder.loadTexts: voadmEntry.setStatus('mandatory')
voadmCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmCardLocation.setStatus('mandatory')
voadmCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmCardShelf.setStatus('mandatory')
voadmCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmCardSlot.setStatus('mandatory')
voadmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 4), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmSerialNum.setStatus('mandatory')
voadmModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmModelNum.setStatus('mandatory')
voadmHwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmHwName.setStatus('mandatory')
voadmHwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 7), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmHwVersionID.setStatus('mandatory')
voadmMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmMfgDate.setStatus('mandatory')
voadmFwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 9), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmFwName.setStatus('mandatory')
voadmFwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 10), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmFwVersionID.setStatus('mandatory')
voadmFwDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmFwDate.setStatus('mandatory')
voadmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmAdminState.setStatus('mandatory')
voadmModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 13), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmModelType.setStatus('mandatory')
voadmName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 14), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmName.setStatus('mandatory')
voadmSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 15), RebootType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmSetState.setStatus('mandatory')
voadmPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 16), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmPathID.setStatus('mandatory')
voadmCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmCleiNum.setStatus('mandatory')
voadmActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmActiveChannels.setStatus('mandatory')
voadmStartItu = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmStartItu.setStatus('mandatory')
voadmEndItu = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmEndItu.setStatus('mandatory')
voadmNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmNumPorts.setStatus('mandatory')
voadmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3), )
if mibBuilder.loadTexts: voadmPortTable.setStatus('mandatory')
voadmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1), ).setIndexNames((0, "LUXN-MIB", "voadmPortCardLocation"), (0, "LUXN-MIB", "voadmPortCardShelf"), (0, "LUXN-MIB", "voadmPortCardSlot"), (0, "LUXN-MIB", "voadmPortType"))
if mibBuilder.loadTexts: voadmPortEntry.setStatus('mandatory')
voadmPortCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPortCardLocation.setStatus('mandatory')
voadmPortCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPortCardShelf.setStatus('mandatory')
voadmPortCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPortCardSlot.setStatus('mandatory')
voadmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mux", 1), ("demux", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPortType.setStatus('mandatory')
voadmPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed-attentuation", 1), ("fixed-power", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmPortMode.setStatus('mandatory')
voadmPortSetPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmPortSetPoint.setStatus('mandatory')
voadmPortMinChanInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmPortMinChanInputPower.setStatus('mandatory')
voadmPortMinChanOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmPortMinChanOutputPower.setStatus('mandatory')
voadmPortMaxChanOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmPortMaxChanOutputPower.setStatus('mandatory')
voadmPortToleranceUpperBound = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmPortToleranceUpperBound.setStatus('mandatory')
voadmPortToleranceLowerBound = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voadmPortToleranceLowerBound.setStatus('mandatory')
voadmPortTotalInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPortTotalInputPower.setStatus('mandatory')
voadmPortPerChanInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPortPerChanInputPower.setStatus('mandatory')
voadmPortTotalOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPortTotalOutputPower.setStatus('mandatory')
voadmPortPerChanOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPortPerChanOutputPower.setStatus('mandatory')
voadmPortMeasuredAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPortMeasuredAtten.setStatus('mandatory')
voadmPortAvgInsertLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPortAvgInsertLoss.setStatus('mandatory')
voadmPortAvgExpressLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 26, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPortAvgExpressLoss.setStatus('mandatory')
zmsConfigSyncExists = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 27, 1), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zmsConfigSyncExists.setStatus('current')
zmsConfigSyncOverflow = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 27, 2), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zmsConfigSyncOverflow.setStatus('current')
zmsConfigSyncPriority = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 27, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("low", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zmsConfigSyncPriority.setStatus('current')
zmsConfigSyncAction = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 27, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noAction", 1), ("createList", 2), ("createFullList", 3), ("createFullListWithAlarms", 4), ("createAlarmsList", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zmsConfigSyncAction.setStatus('current')
zmsConfigSyncFileName = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 27, 5), ZmsFileName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zmsConfigSyncFileName.setStatus('current')
zmsConfigSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 27, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("syncComplete", 1), ("syncPending", 2), ("syncError", 3), ("syncInitializing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zmsConfigSyncStatus.setStatus('current')
zmsConfigSyncUserName = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 27, 7), ZmsAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zmsConfigSyncUserName.setStatus('current')
zmsConfigSyncUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 27, 8), ZmsAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zmsConfigSyncUserPassword.setStatus('current')
zmsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 27, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zmsIpAddress.setStatus('current')
dmmNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 28, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmNumber.setStatus('mandatory')
dmmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2), )
if mibBuilder.loadTexts: dmmTable.setStatus('mandatory')
dmmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1), ).setIndexNames((0, "LUXN-MIB", "dmmCardLocation"), (0, "LUXN-MIB", "dmmCardShelf"), (0, "LUXN-MIB", "dmmCardSlot"))
if mibBuilder.loadTexts: dmmEntry.setStatus('mandatory')
dmmCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmCardLocation.setStatus('mandatory')
dmmCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmCardShelf.setStatus('mandatory')
dmmCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmmCardSlot.setStatus('mandatory')
dmmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 4), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmSerialNum.setStatus('mandatory')
dmmModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmModelNum.setStatus('mandatory')
dmmHwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmHwName.setStatus('mandatory')
dmmHwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 7), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmHwVersionID.setStatus('mandatory')
dmmMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmMfgDate.setStatus('mandatory')
dmmFwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 9), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmFwName.setStatus('mandatory')
dmmFwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 10), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmFwVersionID.setStatus('mandatory')
dmmFwDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmFwDate.setStatus('mandatory')
dmmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmmAdminState.setStatus('mandatory')
dmmModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 13), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmModelType.setStatus('mandatory')
dmmName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 14), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmmName.setStatus('mandatory')
dmmSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("warmboot", 2), ("enableLinkLoopback", 3), ("enablePort1Loopback", 4), ("enablePort2Loopback", 5), ("disableloopback", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmmSetState.setStatus('mandatory')
dmmPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 16), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmmPathID.setStatus('mandatory')
dmmLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 17), LinkName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmmLinkName.setStatus('mandatory')
dmmCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmCleiNum.setStatus('mandatory')
dmmNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmNumPorts.setStatus('mandatory')
dmmFpgaRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmFpgaRev.setStatus('mandatory')
dmmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3), )
if mibBuilder.loadTexts: dmmPortTable.setStatus('mandatory')
dmmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1), ).setIndexNames((0, "LUXN-MIB", "dmmPortLocation"), (0, "LUXN-MIB", "dmmPortShelf"), (0, "LUXN-MIB", "dmmPortSlot"), (0, "LUXN-MIB", "dmmPortIndex"))
if mibBuilder.loadTexts: dmmPortEntry.setStatus('mandatory')
dmmPortLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPortLocation.setStatus('mandatory')
dmmPortShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPortShelf.setStatus('mandatory')
dmmPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPortSlot.setStatus('mandatory')
dmmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link", 1), ("port1", 2), ("port2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPortIndex.setStatus('mandatory')
dmmPortLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 255))).clone(namedValues=NamedValues(("notapplicable", 0), ("gbEthernet", 4), ("fibreChannel", 5), ("disabled", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmmPortLineRate.setStatus('mandatory')
dmmPortAutoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notapplicable", 0), ("enable", 1), ("disable", 2), ("farEndEnable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmmPortAutoDisable.setStatus('mandatory')
dmmPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPortMode.setStatus('mandatory')
dmmPortItu = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPortItu.setStatus('mandatory')
dmmPortWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPortWavelength.setStatus('mandatory')
dmmPortRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPortRxPower.setStatus('mandatory')
dmmPortTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPortTxState.setStatus('mandatory')
dmmPortTxReach = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPortTxReach.setStatus('mandatory')
dmmPortSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPortSfpSerialNumber.setStatus('mandatory')
dmmPortSfpConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 33, 34))).clone(namedValues=NamedValues(("na", 0), ("unknown", 1), ("sc", 2), ("fc_copper1", 3), ("fc_capper2", 4), ("bnc", 5), ("fc_coaxial", 6), ("fiberjack", 7), ("lc", 8), ("mtrj", 9), ("mu", 10), ("sg", 11), ("optpigtail", 12), ("hssdcii", 33), ("copper", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPortSfpConnectorType.setStatus('mandatory')
dmmConnTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 28, 4), )
if mibBuilder.loadTexts: dmmConnTable.setStatus('mandatory')
dmmConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1), ).setIndexNames((0, "LUXN-MIB", "dmmConnCardLocation"), (0, "LUXN-MIB", "dmmConnCardShelf"), (0, "LUXN-MIB", "dmmConnCardSlot"), (0, "LUXN-MIB", "dmmConnCardPortType"))
if mibBuilder.loadTexts: dmmConnEntry.setStatus('mandatory')
dmmConnCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmConnCardLocation.setStatus('mandatory')
dmmConnCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmConnCardShelf.setStatus('mandatory')
dmmConnCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmConnCardSlot.setStatus('mandatory')
dmmConnCardPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("port1tx", 1), ("port1rx", 2), ("port2tx", 3), ("port2rx", 4), ("linktx", 5), ("linkrx", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmConnCardPortType.setStatus('mandatory')
dmmConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 5), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmConnCardType.setStatus('mandatory')
dmmConnLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 6), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmConnLocation.setStatus('mandatory')
dmmConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 7), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmConnShelf.setStatus('mandatory')
dmmConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 8), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmConnSlot.setStatus('mandatory')
dmmConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 28, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmConnPort.setStatus('mandatory')
ocm10gfNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 29, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfNumber.setStatus('mandatory')
ocm10gfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2), )
if mibBuilder.loadTexts: ocm10gfTable.setStatus('mandatory')
ocm10gfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ocm10gfCardLocation"), (0, "LUXN-MIB", "ocm10gfCardShelf"), (0, "LUXN-MIB", "ocm10gfCardSlot"))
if mibBuilder.loadTexts: ocm10gfEntry.setStatus('mandatory')
ocm10gfCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfCardLocation.setStatus('mandatory')
ocm10gfCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfCardShelf.setStatus('mandatory')
ocm10gfCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm10gfCardSlot.setStatus('mandatory')
ocm10gfSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 4), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfSerialNum.setStatus('mandatory')
ocm10gfModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfModelNum.setStatus('mandatory')
ocm10gfHwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfHwName.setStatus('mandatory')
ocm10gfHwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 7), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfHwVersionID.setStatus('mandatory')
ocm10gfMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfMfgDate.setStatus('mandatory')
ocm10gfFwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 9), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfFwName.setStatus('mandatory')
ocm10gfFwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 10), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfFwVersionID.setStatus('mandatory')
ocm10gfFwDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfFwDate.setStatus('mandatory')
ocm10gfModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 12), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfModelType.setStatus('mandatory')
ocm10gfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 13), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm10gfName.setStatus('mandatory')
ocm10gfLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 11, 12, 13, 255))).clone(namedValues=NamedValues(("gbE10", 9), ("fc10", 11), ("oc192nt", 12), ("oc192tr", 13), ("disabled", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm10gfLineRate.setStatus('mandatory')
ocm10gfAutoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm10gfAutoDisable.setStatus('mandatory')
ocm10gfLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 16), LinkName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm10gfLinkName.setStatus('mandatory')
ocm10gfPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 17), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm10gfPathID.setStatus('mandatory')
ocm10gfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm10gfAdminState.setStatus('mandatory')
ocm10gfSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("warmboot", 2), ("enableLinkLoopback", 3), ("enableCpeLoopback", 4), ("disableloopback", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm10gfSetState.setStatus('mandatory')
ocm10gfCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfCleiNum.setStatus('mandatory')
ocm10gfNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfNumPorts.setStatus('mandatory')
ocm10gfFpgaRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfFpgaRev.setStatus('mandatory')
ocm10gfPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 29, 3), )
if mibBuilder.loadTexts: ocm10gfPortTable.setStatus('mandatory')
ocm10gfPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1), ).setIndexNames((0, "LUXN-MIB", "ocm10gfPortLocation"), (0, "LUXN-MIB", "ocm10gfPortShelf"), (0, "LUXN-MIB", "ocm10gfPortSlot"), (0, "LUXN-MIB", "ocm10gfPortIndex"))
if mibBuilder.loadTexts: ocm10gfPortEntry.setStatus('mandatory')
ocm10gfPortLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPortLocation.setStatus('mandatory')
ocm10gfPortShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPortShelf.setStatus('mandatory')
ocm10gfPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPortSlot.setStatus('mandatory')
ocm10gfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link", 1), ("cpe", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPortIndex.setStatus('mandatory')
ocm10gfPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPortMode.setStatus('mandatory')
ocm10gfPortWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPortWavelength.setStatus('mandatory')
ocm10gfPortRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPortRxPower.setStatus('mandatory')
ocm10gfPortTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPortTxState.setStatus('mandatory')
ocm10gfPortTxReach = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPortTxReach.setStatus('mandatory')
ocm10gfPortXfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPortXfpSerialNumber.setStatus('mandatory')
ocm10gfConnTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 29, 4), )
if mibBuilder.loadTexts: ocm10gfConnTable.setStatus('mandatory')
ocm10gfConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1), ).setIndexNames((0, "LUXN-MIB", "ocm10gfConnCardLocation"), (0, "LUXN-MIB", "ocm10gfConnCardShelf"), (0, "LUXN-MIB", "ocm10gfConnCardSlot"), (0, "LUXN-MIB", "ocm10gfConnCardPortType"))
if mibBuilder.loadTexts: ocm10gfConnEntry.setStatus('mandatory')
ocm10gfConnCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfConnCardLocation.setStatus('mandatory')
ocm10gfConnCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfConnCardShelf.setStatus('mandatory')
ocm10gfConnCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfConnCardSlot.setStatus('mandatory')
ocm10gfConnCardPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("linktx", 1), ("linkrx", 2), ("cpetx", 3), ("cperx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfConnCardPortType.setStatus('mandatory')
ocm10gfConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 5), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfConnCardType.setStatus('mandatory')
ocm10gfConnLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 6), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfConnLocation.setStatus('mandatory')
ocm10gfConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 7), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfConnShelf.setStatus('mandatory')
ocm10gfConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 8), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfConnSlot.setStatus('mandatory')
ocm10gfConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 29, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfConnPort.setStatus('mandatory')
fc8gNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 35, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gNumber.setStatus('mandatory')
fc8gTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2), )
if mibBuilder.loadTexts: fc8gTable.setStatus('mandatory')
fc8gEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1), ).setIndexNames((0, "LUXN-MIB", "fc8gCardLocation"), (0, "LUXN-MIB", "fc8gCardShelf"), (0, "LUXN-MIB", "fc8gCardSlot"))
if mibBuilder.loadTexts: fc8gEntry.setStatus('mandatory')
fc8gCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gCardLocation.setStatus('mandatory')
fc8gCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gCardShelf.setStatus('mandatory')
fc8gCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc8gCardSlot.setStatus('mandatory')
fc8gSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 4), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gSerialNum.setStatus('mandatory')
fc8gModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gModelNum.setStatus('mandatory')
fc8gHwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gHwName.setStatus('mandatory')
fc8gHwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 7), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gHwVersionID.setStatus('mandatory')
fc8gMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gMfgDate.setStatus('mandatory')
fc8gFwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 9), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gFwName.setStatus('mandatory')
fc8gFwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 10), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gFwVersionID.setStatus('mandatory')
fc8gFwDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gFwDate.setStatus('mandatory')
fc8gModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 12), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gModelType.setStatus('mandatory')
fc8gName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 13), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc8gName.setStatus('mandatory')
fc8gLink1DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dr8G", 1), ("dr4G", 2), ("dr2G", 3), ("dr1G", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc8gLink1DataRate.setStatus('mandatory')
fc8gCpe1AutoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc8gCpe1AutoDisable.setStatus('mandatory')
fc8gCpe1LaserEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc8gCpe1LaserEnabled.setStatus('mandatory')
fc8gLink1LaserEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc8gLink1LaserEnabled.setStatus('mandatory')
fc8gLink2DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dr8G", 1), ("dr4G", 2), ("dr2G", 3), ("dr1G", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc8gLink2DataRate.setStatus('mandatory')
fc8gCpe2AutoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc8gCpe2AutoDisable.setStatus('mandatory')
fc8gCpe2LaserEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc8gCpe2LaserEnabled.setStatus('mandatory')
fc8gLink2LaserEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc8gLink2LaserEnabled.setStatus('mandatory')
fc8gAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc8gAdminState.setStatus('mandatory')
fc8gSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("warmboot", 2), ("enableChannel1LinkLoopback", 3), ("enableChannel1CpeLoopback", 4), ("enableChannel2LinkLoopback", 5), ("enableChannel2CpeLoopback", 6), ("disableChannel1loopback", 7), ("disableChannel2loopback", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc8gSetState.setStatus('mandatory')
fc8gPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3), )
if mibBuilder.loadTexts: fc8gPortTable.setStatus('mandatory')
fc8gPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1), ).setIndexNames((0, "LUXN-MIB", "fc8gPortLocation"), (0, "LUXN-MIB", "fc8gPortShelf"), (0, "LUXN-MIB", "fc8gPortSlot"), (0, "LUXN-MIB", "fc8gPortIndex"))
if mibBuilder.loadTexts: fc8gPortEntry.setStatus('mandatory')
fc8gPortLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPortLocation.setStatus('mandatory')
fc8gPortShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPortShelf.setStatus('mandatory')
fc8gPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPortSlot.setStatus('mandatory')
fc8gPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("link1", 1), ("cpe1", 2), ("link2", 3), ("cpe2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPortIndex.setStatus('mandatory')
fc8gPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 5), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPortName.setStatus('mandatory')
fc8gPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("loopback", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPortMode.setStatus('mandatory')
fc8gPortWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPortWavelength.setStatus('mandatory')
fc8gPortRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPortRxPower.setStatus('mandatory')
fc8gPortTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPortTxState.setStatus('mandatory')
fc8gPortTxReach = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPortTxReach.setStatus('mandatory')
fc8gPortSfpXfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 35, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPortSfpXfpSerialNumber.setStatus('mandatory')
ocm2Number = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2Number.setStatus('mandatory')
ocm2Table = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2), )
if mibBuilder.loadTexts: ocm2Table.setStatus('mandatory')
ocm2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ocm2CardLocation"), (0, "LUXN-MIB", "ocm2CardShelf"), (0, "LUXN-MIB", "ocm2CardSlot"))
if mibBuilder.loadTexts: ocm2Entry.setStatus('mandatory')
ocm2CardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2CardLocation.setStatus('mandatory')
ocm2CardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2CardShelf.setStatus('mandatory')
ocm2CardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2CardSlot.setStatus('mandatory')
ocm2SerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 4), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2SerialNum.setStatus('mandatory')
ocm2ModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2ModelNum.setStatus('mandatory')
ocm2HwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2HwName.setStatus('mandatory')
ocm2HwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 7), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2HwVersionID.setStatus('mandatory')
ocm2MfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2MfgDate.setStatus('mandatory')
ocm2FwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 9), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2FwName.setStatus('mandatory')
ocm2FwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 10), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2FwVersionID.setStatus('mandatory')
ocm2FwDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2FwDate.setStatus('mandatory')
ocm2ModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 12), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2ModelType.setStatus('mandatory')
ocm2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 13), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2Name.setStatus('mandatory')
ocm2Link1LineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 8, 10, 14, 15, 255))).clone(namedValues=NamedValues(("na", 0), ("oc3", 1), ("oc12", 2), ("oc48", 3), ("gbe", 4), ("fc", 5), ("escon", 8), ("fc2", 10), ("hlf_fc", 14), ("infiniband", 15), ("disabled", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2Link1LineRate.setStatus('mandatory')
ocm2Link1AutoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2Link1AutoDisable.setStatus('mandatory')
ocm2Link1LinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 16), LinkName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2Link1LinkName.setStatus('mandatory')
ocm2Link1PathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 17), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2Link1PathID.setStatus('mandatory')
ocm2Link2LineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 8, 10, 14, 15, 255))).clone(namedValues=NamedValues(("na", 0), ("oc3", 1), ("oc12", 2), ("oc48", 3), ("gbe", 4), ("fc", 5), ("escon", 8), ("fc2", 10), ("hlf_fc", 14), ("infiniband", 15), ("disabled", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2Link2LineRate.setStatus('mandatory')
ocm2Link2AutoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2Link2AutoDisable.setStatus('mandatory')
ocm2Link2LinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 20), LinkName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2Link2LinkName.setStatus('mandatory')
ocm2Link2PathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 21), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2Link2PathID.setStatus('mandatory')
ocm2AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2AdminState.setStatus('mandatory')
ocm2SetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("warmboot", 2), ("enableLink1Loopback", 3), ("enableLink2Loopback", 4), ("disableLink1loopback", 5), ("disableLink2loopback", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2SetState.setStatus('mandatory')
ocm2CleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2CleiNum.setStatus('mandatory')
ocm2NumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2NumPorts.setStatus('mandatory')
ocm2RegenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2RegenMode.setStatus('mandatory')
ocm2FpgaRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2FpgaRev.setStatus('mandatory')
ocm2PortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3), )
if mibBuilder.loadTexts: ocm2PortTable.setStatus('mandatory')
ocm2PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1), ).setIndexNames((0, "LUXN-MIB", "ocm2PortLocation"), (0, "LUXN-MIB", "ocm2PortShelf"), (0, "LUXN-MIB", "ocm2PortSlot"), (0, "LUXN-MIB", "ocm2PortIndex"))
if mibBuilder.loadTexts: ocm2PortEntry.setStatus('mandatory')
ocm2PortLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PortLocation.setStatus('mandatory')
ocm2PortShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PortShelf.setStatus('mandatory')
ocm2PortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PortSlot.setStatus('mandatory')
ocm2PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("link1", 1), ("cpe1", 2), ("link2", 3), ("cpe2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PortIndex.setStatus('mandatory')
ocm2PortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("na", 0), ("disabled", 1), ("enabled", 2), ("loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PortMode.setStatus('mandatory')
ocm2PortItu = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PortItu.setStatus('mandatory')
ocm2PortWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PortWavelength.setStatus('mandatory')
ocm2PortRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PortRxPower.setStatus('mandatory')
ocm2PortTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PortTxState.setStatus('mandatory')
ocm2PortTxReach = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PortTxReach.setStatus('mandatory')
ocm2PortSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PortSfpSerialNumber.setStatus('mandatory')
ocm2ConnTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 30, 4), )
if mibBuilder.loadTexts: ocm2ConnTable.setStatus('mandatory')
ocm2ConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1), ).setIndexNames((0, "LUXN-MIB", "ocm2ConnCardLocation"), (0, "LUXN-MIB", "ocm2ConnCardShelf"), (0, "LUXN-MIB", "ocm2ConnCardSlot"), (0, "LUXN-MIB", "ocm2ConnCardPortType"))
if mibBuilder.loadTexts: ocm2ConnEntry.setStatus('mandatory')
ocm2ConnCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2ConnCardLocation.setStatus('mandatory')
ocm2ConnCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2ConnCardShelf.setStatus('mandatory')
ocm2ConnCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2ConnCardSlot.setStatus('mandatory')
ocm2ConnCardPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("link1tx", 1), ("link1rx", 2), ("link2tx", 3), ("link2rx", 4), ("cpe1tx", 5), ("cpe1rx", 6), ("cpe2tx", 7), ("cpe2rx", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2ConnCardPortType.setStatus('mandatory')
ocm2ConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 5), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2ConnCardType.setStatus('mandatory')
ocm2ConnLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 6), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2ConnLocation.setStatus('mandatory')
ocm2ConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 7), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2ConnShelf.setStatus('mandatory')
ocm2ConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 8), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2ConnSlot.setStatus('mandatory')
ocm2ConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 30, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2ConnPort.setStatus('mandatory')
oscNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscNumber.setStatus('mandatory')
oscTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2), )
if mibBuilder.loadTexts: oscTable.setStatus('mandatory')
oscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1), ).setIndexNames((0, "LUXN-MIB", "oscCardLocation"), (0, "LUXN-MIB", "oscCardShelf"), (0, "LUXN-MIB", "oscCardSlot"))
if mibBuilder.loadTexts: oscEntry.setStatus('mandatory')
oscCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscCardLocation.setStatus('mandatory')
oscCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscCardShelf.setStatus('mandatory')
oscCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oscCardSlot.setStatus('mandatory')
oscSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 4), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscSerialNum.setStatus('mandatory')
oscModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscModelNum.setStatus('mandatory')
oscHwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscHwName.setStatus('mandatory')
oscHwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 7), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscHwVersionID.setStatus('mandatory')
oscMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscMfgDate.setStatus('mandatory')
oscFwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 9), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscFwName.setStatus('mandatory')
oscFwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 10), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscFwVersionID.setStatus('mandatory')
oscFwDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscFwDate.setStatus('mandatory')
oscAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oscAdminState.setStatus('mandatory')
oscModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 13), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscModelType.setStatus('mandatory')
oscName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 14), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oscName.setStatus('mandatory')
oscPathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 15), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oscPathID.setStatus('mandatory')
oscSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("warmboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oscSetState.setStatus('mandatory')
oscCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscCleiNum.setStatus('mandatory')
oscNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscNumPorts.setStatus('mandatory')
oscFpgaRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscFpgaRev.setStatus('mandatory')
oscPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 31, 3), )
if mibBuilder.loadTexts: oscPortTable.setStatus('mandatory')
oscPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1), ).setIndexNames((0, "LUXN-MIB", "oscPortLocation"), (0, "LUXN-MIB", "oscPortShelf"), (0, "LUXN-MIB", "oscPortSlot"), (0, "LUXN-MIB", "oscPortIndex"))
if mibBuilder.loadTexts: oscPortEntry.setStatus('mandatory')
oscPortLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPortLocation.setStatus('mandatory')
oscPortShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPortShelf.setStatus('mandatory')
oscPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPortSlot.setStatus('mandatory')
oscPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("link", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPortIndex.setStatus('mandatory')
oscPortItu = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPortItu.setStatus('mandatory')
oscPortWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPortWavelength.setStatus('mandatory')
oscPortRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPortRxPower.setStatus('mandatory')
oscPortTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPortTxState.setStatus('mandatory')
oscPortTxReach = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPortTxReach.setStatus('mandatory')
oscPortSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 31, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPortSfpSerialNumber.setStatus('mandatory')
ocm4gNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gNumber.setStatus('mandatory')
ocm4gTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2), )
if mibBuilder.loadTexts: ocm4gTable.setStatus('mandatory')
ocm4gEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ocm4gCardLocation"), (0, "LUXN-MIB", "ocm4gCardShelf"), (0, "LUXN-MIB", "ocm4gCardSlot"))
if mibBuilder.loadTexts: ocm4gEntry.setStatus('mandatory')
ocm4gCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gCardLocation.setStatus('mandatory')
ocm4gCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gCardShelf.setStatus('mandatory')
ocm4gCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gCardSlot.setStatus('mandatory')
ocm4gSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 4), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gSerialNum.setStatus('mandatory')
ocm4gModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gModelNum.setStatus('mandatory')
ocm4gHwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gHwName.setStatus('mandatory')
ocm4gHwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 7), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gHwVersionID.setStatus('mandatory')
ocm4gMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gMfgDate.setStatus('mandatory')
ocm4gFwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 9), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gFwName.setStatus('mandatory')
ocm4gFwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 10), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gFwVersionID.setStatus('mandatory')
ocm4gFwDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gFwDate.setStatus('mandatory')
ocm4gModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 12), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gModelType.setStatus('mandatory')
ocm4gName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 13), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gName.setStatus('mandatory')
ocm4gLink1LineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 8, 10, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("na", 0), ("oc3", 1), ("oc12", 2), ("oc48", 3), ("gbe", 4), ("fc", 5), ("escon", 8), ("fc2", 10), ("hlf_fc", 14), ("infiniband", 15), ("fourG", 16), ("twoR", 17), ("disabled", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gLink1LineRate.setStatus('mandatory')
ocm4gLink1AutoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gLink1AutoDisable.setStatus('mandatory')
ocm4gLink1LinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 16), LinkName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gLink1LinkName.setStatus('mandatory')
ocm4gLink1PathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 17), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gLink1PathID.setStatus('mandatory')
ocm4gLink2LineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 8, 10, 14, 15, 16, 17, 255))).clone(namedValues=NamedValues(("na", 0), ("oc3", 1), ("oc12", 2), ("oc48", 3), ("gbe", 4), ("fc", 5), ("escon", 8), ("fc2", 10), ("hlf_fc", 14), ("infiniband", 15), ("fourG", 16), ("twoR", 17), ("disabled", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gLink2LineRate.setStatus('mandatory')
ocm4gLink2AutoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gLink2AutoDisable.setStatus('mandatory')
ocm4gLink2LinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 20), LinkName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gLink2LinkName.setStatus('mandatory')
ocm4gLink2PathID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 21), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gLink2PathID.setStatus('mandatory')
ocm4gAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gAdminState.setStatus('mandatory')
ocm4gSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("warmboot", 2), ("enableLink1Loopback", 3), ("enableLink2Loopback", 4), ("disableLink1loopback", 5), ("disableLink2loopback", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gSetState.setStatus('mandatory')
ocm4gCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gCleiNum.setStatus('mandatory')
ocm4gNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gNumPorts.setStatus('mandatory')
ocm4gFpgaRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gFpgaRev.setStatus('mandatory')
ocm4gPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3), )
if mibBuilder.loadTexts: ocm4gPortTable.setStatus('mandatory')
ocm4gPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1), ).setIndexNames((0, "LUXN-MIB", "ocm4gPortLocation"), (0, "LUXN-MIB", "ocm4gPortShelf"), (0, "LUXN-MIB", "ocm4gPortSlot"), (0, "LUXN-MIB", "ocm4gPortIndex"))
if mibBuilder.loadTexts: ocm4gPortEntry.setStatus('mandatory')
ocm4gPortLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPortLocation.setStatus('mandatory')
ocm4gPortShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPortShelf.setStatus('mandatory')
ocm4gPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPortSlot.setStatus('mandatory')
ocm4gPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("link1", 1), ("cpe1", 2), ("link2", 3), ("cpe2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPortIndex.setStatus('mandatory')
ocm4gPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("na", 0), ("disabled", 1), ("enabled", 2), ("loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPortMode.setStatus('mandatory')
ocm4gPortItu = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPortItu.setStatus('mandatory')
ocm4gPortWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPortWavelength.setStatus('mandatory')
ocm4gPortRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPortRxPower.setStatus('mandatory')
ocm4gPortTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPortTxState.setStatus('mandatory')
ocm4gPortTxReach = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPortTxReach.setStatus('mandatory')
ocm4gPortSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPortSfpSerialNumber.setStatus('mandatory')
ocm4gConnTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 32, 4), )
if mibBuilder.loadTexts: ocm4gConnTable.setStatus('mandatory')
ocm4gConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1), ).setIndexNames((0, "LUXN-MIB", "ocm4gConnCardLocation"), (0, "LUXN-MIB", "ocm4gConnCardShelf"), (0, "LUXN-MIB", "ocm4gConnCardSlot"), (0, "LUXN-MIB", "ocm4gConnCardPortType"))
if mibBuilder.loadTexts: ocm4gConnEntry.setStatus('mandatory')
ocm4gConnCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gConnCardLocation.setStatus('mandatory')
ocm4gConnCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gConnCardShelf.setStatus('mandatory')
ocm4gConnCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gConnCardSlot.setStatus('mandatory')
ocm4gConnCardPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("link1tx", 1), ("link1rx", 2), ("link2tx", 3), ("link2rx", 4), ("cpe1tx", 5), ("cpe1rx", 6), ("cpe2tx", 7), ("cpe2rx", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gConnCardPortType.setStatus('mandatory')
ocm4gConnCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 5), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gConnCardType.setStatus('mandatory')
ocm4gConnLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gConnLocation.setStatus('mandatory')
ocm4gConnShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 7), ShelfInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gConnShelf.setStatus('mandatory')
ocm4gConnSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 8), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gConnSlot.setStatus('mandatory')
ocm4gConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 32, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gConnPort.setStatus('mandatory')
oetNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 33, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetNumber.setStatus('mandatory')
oetTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2), )
if mibBuilder.loadTexts: oetTable.setStatus('mandatory')
oetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1), ).setIndexNames((0, "LUXN-MIB", "oetCardLocation"), (0, "LUXN-MIB", "oetCardShelf"), (0, "LUXN-MIB", "oetCardSlot"))
if mibBuilder.loadTexts: oetEntry.setStatus('mandatory')
oetCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetCardLocation.setStatus('mandatory')
oetCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetCardShelf.setStatus('mandatory')
oetCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetCardSlot.setStatus('mandatory')
oetSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 4), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetSerialNum.setStatus('mandatory')
oetModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetModelNum.setStatus('mandatory')
oetHwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetHwName.setStatus('mandatory')
oetHwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 7), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetHwVersionID.setStatus('mandatory')
oetMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetMfgDate.setStatus('mandatory')
oetFwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 9), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetFwName.setStatus('mandatory')
oetFwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 10), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetFwVersionID.setStatus('mandatory')
oetFwDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetFwDate.setStatus('mandatory')
oetModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 12), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetModelType.setStatus('mandatory')
oetName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 13), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetName.setStatus('mandatory')
oetCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetCleiNum.setStatus('mandatory')
oetFpgaRevMB = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetFpgaRevMB.setStatus('mandatory')
oetFpgaRevDB = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetFpgaRevDB.setStatus('mandatory')
oetCpldRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetCpldRev.setStatus('mandatory')
oetOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mux", 1), ("switch", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetOpMode.setStatus('mandatory')
oetProtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetProtMode.setStatus('mandatory')
oetEAPSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("linearEndpoint", 2), ("linearNode", 3), ("ringMaster", 4), ("ringNode", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetEAPSMode.setStatus('mandatory')
oetAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetAdminState.setStatus('mandatory')
oetSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("warmboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetSetState.setStatus('mandatory')
oetConfigInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetConfigInProgress.setStatus('mandatory')
oetApplyChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("apply", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetApplyChanges.setStatus('mandatory')
oetLinkTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3), )
if mibBuilder.loadTexts: oetLinkTable.setStatus('mandatory')
oetLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1), ).setIndexNames((0, "LUXN-MIB", "oetLinkLocation"), (0, "LUXN-MIB", "oetLinkShelf"), (0, "LUXN-MIB", "oetLinkSlot"), (0, "LUXN-MIB", "oetLinkIndex"))
if mibBuilder.loadTexts: oetLinkEntry.setStatus('mandatory')
oetLinkLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLinkLocation.setStatus('mandatory')
oetLinkShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLinkShelf.setStatus('mandatory')
oetLinkSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLinkSlot.setStatus('mandatory')
oetLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12))).clone(namedValues=NamedValues(("linkA", 11), ("linkB", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLinkIndex.setStatus('mandatory')
oetLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetLinkEnable.setStatus('mandatory')
oetLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("otu", 1), ("lan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetLinkProtocol.setStatus('mandatory')
oetLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 7), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetLinkName.setStatus('mandatory')
oetLinkVlanIds = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetLinkVlanIds.setStatus('mandatory')
oetLinkConfigInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLinkConfigInProgress.setStatus('mandatory')
oetLinkApplyChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("apply", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetLinkApplyChanges.setStatus('mandatory')
oetLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("na", 0), ("disabled", 1), ("enabled", 2), ("loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLinkMode.setStatus('mandatory')
oetLinkItu = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLinkItu.setStatus('mandatory')
oetLinkWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLinkWavelength.setStatus('mandatory')
oetLinkRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLinkRxPower.setStatus('mandatory')
oetLinkTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLinkTxState.setStatus('mandatory')
oetLinkTxReach = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLinkTxReach.setStatus('mandatory')
oetLinkXfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLinkXfpSerialNumber.setStatus('mandatory')
oetPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4), )
if mibBuilder.loadTexts: oetPortTable.setStatus('mandatory')
oetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1), ).setIndexNames((0, "LUXN-MIB", "oetPortLocation"), (0, "LUXN-MIB", "oetPortShelf"), (0, "LUXN-MIB", "oetPortSlot"), (0, "LUXN-MIB", "oetPortIndex"))
if mibBuilder.loadTexts: oetPortEntry.setStatus('mandatory')
oetPortLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPortLocation.setStatus('mandatory')
oetPortShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPortShelf.setStatus('mandatory')
oetPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 3), SlotInput()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPortSlot.setStatus('mandatory')
oetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("cpe", 1), ("cpe", 2), ("cpe", 3), ("cpe", 4), ("cpe", 5), ("cpe", 6), ("cpe", 7), ("cpe", 8), ("cpe", 9), ("cpe", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPortIndex.setStatus('mandatory')
oetPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetPortEnable.setStatus('mandatory')
oetPortALSD = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetPortALSD.setStatus('mandatory')
oetPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetPortFlowControl.setStatus('mandatory')
oetPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetPortVlanId.setStatus('mandatory')
oetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 9), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetPortName.setStatus('mandatory')
oetPortConfigInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPortConfigInProgress.setStatus('mandatory')
oetPortApplyChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("apply", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oetPortApplyChanges.setStatus('mandatory')
oetPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("na", 0), ("disabled", 1), ("enabled", 2), ("loopback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPortMode.setStatus('mandatory')
oetPortItu = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPortItu.setStatus('mandatory')
oetPortWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPortWavelength.setStatus('mandatory')
oetPortRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPortRxPower.setStatus('mandatory')
oetPortTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPortTxState.setStatus('mandatory')
oetPortTxReach = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPortTxReach.setStatus('mandatory')
oetPortSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 33, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPortSfpSerialNumber.setStatus('mandatory')
uobNumber = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 34, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobNumber.setStatus('mandatory')
uobTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2), )
if mibBuilder.loadTexts: uobTable.setStatus('mandatory')
uobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1), ).setIndexNames((0, "LUXN-MIB", "uobCardLocation"), (0, "LUXN-MIB", "uobCardShelf"), (0, "LUXN-MIB", "uobCardSlot"))
if mibBuilder.loadTexts: uobEntry.setStatus('mandatory')
uobCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobCardLocation.setStatus('mandatory')
uobCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobCardShelf.setStatus('mandatory')
uobCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 3), SlotInput()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uobCardSlot.setStatus('mandatory')
uobSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 4), SerialString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobSerialNum.setStatus('mandatory')
uobModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobModelNum.setStatus('mandatory')
uobHwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobHwName.setStatus('mandatory')
uobHwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 7), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobHwVersionID.setStatus('mandatory')
uobMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobMfgDate.setStatus('mandatory')
uobFwName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 9), CardName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobFwName.setStatus('mandatory')
uobFwVersionID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 10), VersionString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobFwVersionID.setStatus('mandatory')
uobFwDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobFwDate.setStatus('mandatory')
uobModelType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 12), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobModelType.setStatus('mandatory')
uobCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 13), CardName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uobCfgName.setStatus('mandatory')
uobModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobModuleName.setStatus('mandatory')
uobAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("na", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uobAdminState.setStatus('mandatory')
uobSetState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("warmboot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uobSetState.setStatus('mandatory')
uobCleiNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobCleiNum.setStatus('mandatory')
uobFpgaRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobFpgaRev.setStatus('mandatory')
uobOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("constainPower", 1), ("constantGain", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uobOperationMode.setStatus('mandatory')
uobOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uobOutPower.setStatus('mandatory')
uobGain = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uobGain.setStatus('mandatory')
uobGainTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uobGainTilt.setStatus('mandatory')
uobLosMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noEffect", 1), ("disabledInAll", 2), ("disabledInPower", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uobLosMode.setStatus('mandatory')
uobLosThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uobLosThreshold.setStatus('mandatory')
uobRflThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 34, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: uobRflThreshold.setStatus('mandatory')
uobNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobNumEvents.setStatus('mandatory')
uobPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2), )
if mibBuilder.loadTexts: uobPerfTable.setStatus('mandatory')
uobPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1), ).setIndexNames((0, "LUXN-MIB", "uobPerfLocation"), (0, "LUXN-MIB", "uobPerfShelf"), (0, "LUXN-MIB", "uobPerfSlot"))
if mibBuilder.loadTexts: uobPerfEntry.setStatus('mandatory')
uobPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPerfLocation.setStatus('mandatory')
uobPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPerfShelf.setStatus('mandatory')
uobPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPerfSlot.setStatus('mandatory')
uobPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPerfState.setStatus('mandatory')
uobPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPerfStatus.setStatus('mandatory')
uobLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobLastBootTime.setStatus('mandatory')
uobAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobAvailTime.setStatus('mandatory')
uobErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobErrFreeSecs.setStatus('mandatory')
uobPmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3), )
if mibBuilder.loadTexts: uobPmTable.setStatus('mandatory')
uobPmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1), ).setIndexNames((0, "LUXN-MIB", "uobPmLocation"), (0, "LUXN-MIB", "uobPmShelf"), (0, "LUXN-MIB", "uobPmSlot"))
if mibBuilder.loadTexts: uobPmEntry.setStatus('mandatory')
uobPmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPmLocation.setStatus('mandatory')
uobPmShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPmShelf.setStatus('mandatory')
uobPmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPmSlot.setStatus('mandatory')
uobPmSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPmSystemStatus.setStatus('mandatory')
uobPmPumpCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPmPumpCurrent.setStatus('mandatory')
uobPmPumpTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPmPumpTemp.setStatus('mandatory')
uobPmInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPmInputPower.setStatus('mandatory')
uobPmOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPmOutPower.setStatus('mandatory')
uobPmTotalGain = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPmTotalGain.setStatus('mandatory')
uobPmReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 30, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobPmReflection.setStatus('mandatory')
uobHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 1), )
if mibBuilder.loadTexts: uobHistTable.setStatus('mandatory')
uobHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 1, 1), ).setIndexNames((0, "LUXN-MIB", "uobHMode"))
if mibBuilder.loadTexts: uobHistEntry.setStatus('mandatory')
uobHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobHMode.setStatus('mandatory')
uobHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobHNumEvents.setStatus('mandatory')
uobHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2), )
if mibBuilder.loadTexts: uobHHistTable.setStatus('mandatory')
uobHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1), ).setIndexNames((0, "LUXN-MIB", "uobHHistMode"), (0, "LUXN-MIB", "uobHHistLocation"), (0, "LUXN-MIB", "uobHHistShelf"), (0, "LUXN-MIB", "uobHHistSlot"))
if mibBuilder.loadTexts: uobHHistEntry.setStatus('mandatory')
uobHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobHHistMode.setStatus('mandatory')
uobHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobHHistLocation.setStatus('mandatory')
uobHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobHHistShelf.setStatus('mandatory')
uobHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobHHistSlot.setStatus('mandatory')
uobHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobHLastBootTime.setStatus('mandatory')
uobHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobHAvailTime.setStatus('mandatory')
uobHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 27, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uobHErrFreeSecs.setStatus('mandatory')
fc8gNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gNumEvents.setStatus('mandatory')
fc8gPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2), )
if mibBuilder.loadTexts: fc8gPerfTable.setStatus('mandatory')
fc8gPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1), ).setIndexNames((0, "LUXN-MIB", "fc8gPerfLocation"), (0, "LUXN-MIB", "fc8gPerfShelf"), (0, "LUXN-MIB", "fc8gPerfSlot"))
if mibBuilder.loadTexts: fc8gPerfEntry.setStatus('mandatory')
fc8gPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPerfLocation.setStatus('mandatory')
fc8gPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPerfShelf.setStatus('mandatory')
fc8gPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPerfSlot.setStatus('mandatory')
fc8gPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPerfState.setStatus('mandatory')
fc8gPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gPerfStatus.setStatus('mandatory')
fc8gLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gLastBootTime.setStatus('mandatory')
fc8gAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gAvailTime.setStatus('mandatory')
fc8gErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 31, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc8gErrFreeSecs.setStatus('mandatory')
sysAddCard = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAddCard.setStatus('mandatory')
sysAlarmCtrl = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmCtrl.setStatus('mandatory')
sysAlarmCritical = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmCritical.setStatus('mandatory')
sysAlarmMajor = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmMajor.setStatus('mandatory')
sysAlarmSerial = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmSerial.setStatus('mandatory')
sysAlarmAutoCutoff = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmAutoCutoff.setStatus('mandatory')
sysAddRoute = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: sysAddRoute.setStatus('mandatory')
sysDeleteRoute = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)))
if mibBuilder.loadTexts: sysDeleteRoute.setStatus('mandatory')
sysSwitchByPathId = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 9), PathIdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchByPathId.setStatus('mandatory')
sysSwitchAll = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSwitchAll.setStatus('mandatory')
sysAlarmMinor = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmMinor.setStatus('mandatory')
sysDelCfgDb = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDelCfgDb.setStatus('mandatory')
sysImnAddRoute = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysImnAddRoute.setStatus('mandatory')
sysImnDeleteRoute = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysImnDeleteRoute.setStatus('mandatory')
sysExtAlarmInputTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 21, 17), )
if mibBuilder.loadTexts: sysExtAlarmInputTable.setStatus('mandatory')
sysExtAlarmInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 21, 17, 1), ).setIndexNames((0, "LUXN-MIB", "sysExtAlarmInputId"))
if mibBuilder.loadTexts: sysExtAlarmInputEntry.setStatus('mandatory')
sysExtAlarmInputId = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 21, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysExtAlarmInputId.setStatus('mandatory')
sysExtAlarmInput = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 21, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("minor", 2), ("major", 3), ("critical", 4), ("na", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysExtAlarmInput.setStatus('mandatory')
sysExtAlarmInputName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 21, 17, 1, 3), AlarmType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysExtAlarmInputName.setStatus('mandatory')
sysAudioAlarm = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("brief", 1), ("test", 2), ("continous", 3), ("off", 4), ("na", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAudioAlarm.setStatus('mandatory')
sysAudioAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("major", 1), ("critical", 2), ("minor", 3), ("na", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAudioAlarmSeverity.setStatus('mandatory')
sysRdbcopy = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("copydb", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRdbcopy.setStatus('mandatory')
sysRdbcopyStatus = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRdbcopyStatus.setStatus('mandatory')
sysSDMRequestsQueued = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSDMRequestsQueued.setStatus('mandatory')
sysModuleupdateJobsWaiting = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModuleupdateJobsWaiting.setStatus('mandatory')
sysModuleupdateJobsTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 1, 21, 24), )
if mibBuilder.loadTexts: sysModuleupdateJobsTable.setStatus('mandatory')
sysModuleupdateJobsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1), ).setIndexNames((0, "LUXN-MIB", "sysModupdShelf"), (0, "LUXN-MIB", "sysModupdSlot"), (0, "LUXN-MIB", "sysModupdLocation"), (0, "LUXN-MIB", "sysModupdRmtStation"))
if mibBuilder.loadTexts: sysModuleupdateJobsEntry.setStatus('mandatory')
sysModupdShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModupdShelf.setStatus('mandatory')
sysModupdSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModupdSlot.setStatus('mandatory')
sysModupdLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1, 3), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModupdLocation.setStatus('mandatory')
sysModupdRmtStation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModupdRmtStation.setStatus('mandatory')
sysModupdCardtype = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1, 5), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModupdCardtype.setStatus('mandatory')
sysModupdPercentDone = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 1, 21, 24, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysModupdPercentDone.setStatus('mandatory')
sysSNMPKeepaliveEnable = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNMPKeepaliveEnable.setStatus('mandatory')
sysSNMPKeepaliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 4253, 1, 21, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSNMPKeepaliveInterval.setStatus('mandatory')
sysStatus = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 1), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysStatus.setStatus('mandatory')
sysClearStatus = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 2), ResetType())
if mibBuilder.loadTexts: sysClearStatus.setStatus('mandatory')
sysClearCounters = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 3), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysClearCounters.setStatus('mandatory')
sysLastBootTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysLastBootTime.setStatus('mandatory')
sysAvailTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAvailTime.setStatus('mandatory')
sysErrFreeSecs = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysErrFreeSecs.setStatus('mandatory')
sysExhaustTemperature = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysExhaustTemperature.setStatus('mandatory')
dlStatus = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 2, 1), DownloadStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlStatus.setStatus('mandatory')
dlOkDownloads = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlOkDownloads.setStatus('mandatory')
dlBadDownloads = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlBadDownloads.setStatus('mandatory')
dlLongestTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlLongestTime.setStatus('mandatory')
dlLongestSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlLongestSize.setStatus('mandatory')
cpNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpNumEvents.setStatus('mandatory')
cpTrapsSent = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTrapsSent.setStatus('mandatory')
cpSNMPCmdsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpSNMPCmdsRcvd.setStatus('mandatory')
cpCounterFlag = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 4), FlagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCounterFlag.setStatus('mandatory')
cpCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5), )
if mibBuilder.loadTexts: cpCntrTable.setStatus('mandatory')
cpCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1), ).setIndexNames((0, "LUXN-MIB", "cpCntrShelf"), (0, "LUXN-MIB", "cpCntrSlot"), (0, "LUXN-MIB", "cpCntrType"))
if mibBuilder.loadTexts: cpCntrEntry.setStatus('mandatory')
cpCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 1), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCntrShelf.setStatus('mandatory')
cpCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 2), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCntrSlot.setStatus('mandatory')
cpCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("spi", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCntrType.setStatus('mandatory')
cpTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTotPktSent.setStatus('mandatory')
cpTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTotPktRcvd.setStatus('mandatory')
cpBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpBadPktRcvd.setStatus('mandatory')
cpTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpTotBadTrans.setStatus('mandatory')
cpBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpBytesSent.setStatus('mandatory')
cpBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpBytesRcvd.setStatus('mandatory')
cpMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpMsgsDlvrd.setStatus('mandatory')
cpBufAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpBufAllocFail.setStatus('mandatory')
cpEcbAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpEcbAllocFail.setStatus('mandatory')
cpClearCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 5, 1, 13), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpClearCntrs.setStatus('mandatory')
cpPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6), )
if mibBuilder.loadTexts: cpPerfTable.setStatus('mandatory')
cpPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1), ).setIndexNames((0, "LUXN-MIB", "cpPerfShelf"), (0, "LUXN-MIB", "cpPerfSlot"))
if mibBuilder.loadTexts: cpPerfEntry.setStatus('mandatory')
cpPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 1), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpPerfShelf.setStatus('mandatory')
cpPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 2), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpPerfSlot.setStatus('mandatory')
cpPerfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 3), RedundancyMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpPerfMode.setStatus('mandatory')
cpPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpPerfState.setStatus('mandatory')
cpPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpPerfStatus.setStatus('mandatory')
cpLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpLastBootTime.setStatus('mandatory')
cpAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpAvailTime.setStatus('mandatory')
cpErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpErrFreeSecs.setStatus('mandatory')
ccNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccNumEvents.setStatus('mandatory')
ccCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2), )
if mibBuilder.loadTexts: ccCntrTable.setStatus('mandatory')
ccCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ccCntrLocation"), (0, "LUXN-MIB", "ccCntrShelf"), (0, "LUXN-MIB", "ccCntrSlot"), (0, "LUXN-MIB", "ccCntrType"))
if mibBuilder.loadTexts: ccCntrEntry.setStatus('mandatory')
ccCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCntrLocation.setStatus('mandatory')
ccCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCntrShelf.setStatus('mandatory')
ccCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCntrSlot.setStatus('mandatory')
ccCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spi", 1), ("iwm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCntrType.setStatus('mandatory')
ccCounterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 5), FlagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccCounterFlag.setStatus('mandatory')
ccTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccTotPktSent.setStatus('mandatory')
ccTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccTotPktRcvd.setStatus('mandatory')
ccBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBadPktRcvd.setStatus('mandatory')
ccTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccTotBadTrans.setStatus('mandatory')
ccBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBytesSent.setStatus('mandatory')
ccBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBytesRcvd.setStatus('mandatory')
ccMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccMsgsDlvrd.setStatus('mandatory')
ccBufAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBufAllocFail.setStatus('mandatory')
ccEcbAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccEcbAllocFail.setStatus('mandatory')
ccClearCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 2, 1, 15), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccClearCntrs.setStatus('mandatory')
ccPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3), )
if mibBuilder.loadTexts: ccPerfTable.setStatus('mandatory')
ccPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1), ).setIndexNames((0, "LUXN-MIB", "ccPerfLocation"), (0, "LUXN-MIB", "ccPerfShelf"), (0, "LUXN-MIB", "ccPerfSlot"))
if mibBuilder.loadTexts: ccPerfEntry.setStatus('mandatory')
ccPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPerfLocation.setStatus('mandatory')
ccPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPerfShelf.setStatus('mandatory')
ccPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPerfSlot.setStatus('mandatory')
ccPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPerfState.setStatus('mandatory')
ccPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccPerfStatus.setStatus('mandatory')
ccLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLastBootTime.setStatus('mandatory')
ccAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccAvailTime.setStatus('mandatory')
ccErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccErrFreeSecs.setStatus('mandatory')
ccBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccBiasCurrent.setStatus('mandatory')
ccModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccModulation.setStatus('mandatory')
ccApc = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccApc.setStatus('mandatory')
ccIwmModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccIwmModulation.setStatus('mandatory')
ccLaserOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 13), FlagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLaserOnOff.setStatus('mandatory')
ccTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccTemperature.setStatus('mandatory')
ccIntensity = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccIntensity.setStatus('mandatory')
ccSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccSignalStrength.setStatus('mandatory')
ccLossOfLight = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 17), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLossOfLight.setStatus('mandatory')
ccSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 18), Boolean())
if mibBuilder.loadTexts: ccSignalDetect.setStatus('mandatory')
ccRefClock = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("en1660", 1), ("en1944", 2), ("en1953", 3))))
if mibBuilder.loadTexts: ccRefClock.setStatus('mandatory')
ccClockDiv = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dout-1250", 1), ("dout-622", 2), ("dout-155", 3))))
if mibBuilder.loadTexts: ccClockDiv.setStatus('mandatory')
ccLinkTxPwrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLinkTxPwrStatus.setStatus('mandatory')
ccLinkRxSigStrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLinkRxSigStrStatus.setStatus('mandatory')
ccCpeRxSigDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccCpeRxSigDetect.setStatus('mandatory')
ccLinkIWMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLinkIWMStatus.setStatus('mandatory')
ccLinkSummaryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fault", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLinkSummaryStatus.setStatus('mandatory')
ccProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("working", 1), ("protection", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccProtectionMode.setStatus('mandatory')
ccLinkRxSigStr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 4, 3, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccLinkRxSigStr.setStatus('mandatory')
muxNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxNumEvents.setStatus('mandatory')
muxPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2), )
if mibBuilder.loadTexts: muxPerfTable.setStatus('mandatory')
muxPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1), ).setIndexNames((0, "LUXN-MIB", "muxPerfLocation"), (0, "LUXN-MIB", "muxPerfShelf"), (0, "LUXN-MIB", "muxPerfSlot"))
if mibBuilder.loadTexts: muxPerfEntry.setStatus('mandatory')
muxPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPerfLocation.setStatus('mandatory')
muxPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPerfShelf.setStatus('mandatory')
muxPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPerfSlot.setStatus('mandatory')
muxType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 4), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxType.setStatus('mandatory')
muxPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 5), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPerfState.setStatus('mandatory')
muxPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 6), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxPerfStatus.setStatus('mandatory')
muxLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxLastBootTime.setStatus('mandatory')
muxAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxAvailTime.setStatus('mandatory')
muxErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxErrFreeSecs.setStatus('mandatory')
psNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psNumEvents.setStatus('mandatory')
psVoltageLevel3pt4Volt = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVoltageLevel3pt4Volt.setStatus('mandatory')
psVoltageLevel5pt1Volt = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVoltageLevel5pt1Volt.setStatus('mandatory')
psVoltageLevel12Volt = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVoltageLevel12Volt.setStatus('mandatory')
psPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 5), )
if mibBuilder.loadTexts: psPerfTable.setStatus('mandatory')
psPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 5, 1), ).setIndexNames((0, "LUXN-MIB", "psPerfID"))
if mibBuilder.loadTexts: psPerfEntry.setStatus('mandatory')
psPerfID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPerfID.setStatus('mandatory')
psPerfType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("psDC", 1), ("psAC", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPerfType.setStatus('mandatory')
psPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("psEmpty", 1), ("psOK", 2), ("psFailed", 3), ("psDegrade", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPerfState.setStatus('mandatory')
psPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 5, 1, 4), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPerfStatus.setStatus('mandatory')
psVoltageLevelFeedA = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVoltageLevelFeedA.setStatus('mandatory')
psVoltageLevelFeedB = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psVoltageLevelFeedB.setStatus('mandatory')
psBreakerConditionFeedA = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBreakerConditionFeedA.setStatus('mandatory')
psPerfStatusFeedA = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("feedOK", 1), ("feedFAILED", 2), ("feedUNKNOWN", 3), ("na", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPerfStatusFeedA.setStatus('mandatory')
psBreakerConditionFeedB = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psBreakerConditionFeedB.setStatus('mandatory')
psPerfStatusFeedB = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("feedOK", 1), ("feedFAILED", 2), ("feedUNKNOWN", 3), ("na", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPerfStatusFeedB.setStatus('mandatory')
fadmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmNumEvents.setStatus('mandatory')
fadmPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2), )
if mibBuilder.loadTexts: fadmPerfTable.setStatus('mandatory')
fadmPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1), ).setIndexNames((0, "LUXN-MIB", "fadmPerfLocation"), (0, "LUXN-MIB", "fadmPerfShelf"), (0, "LUXN-MIB", "fadmPerfSlot"))
if mibBuilder.loadTexts: fadmPerfEntry.setStatus('mandatory')
fadmPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmPerfLocation.setStatus('mandatory')
fadmPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmPerfShelf.setStatus('mandatory')
fadmPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmPerfSlot.setStatus('mandatory')
fadmPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmPerfState.setStatus('mandatory')
fadmPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmPerfStatus.setStatus('mandatory')
fadmLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmLastBootTime.setStatus('mandatory')
fadmAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmAvailTime.setStatus('mandatory')
fadmErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmErrFreeSecs.setStatus('mandatory')
oppmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 1), Counter32())
if mibBuilder.loadTexts: oppmNumEvents.setStatus('mandatory')
oppmPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2), )
if mibBuilder.loadTexts: oppmPerfTable.setStatus('mandatory')
oppmPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1), ).setIndexNames((0, "LUXN-MIB", "oppmPerfLocation"), (0, "LUXN-MIB", "oppmPerfShelf"), (0, "LUXN-MIB", "oppmPerfSlot"))
if mibBuilder.loadTexts: oppmPerfEntry.setStatus('mandatory')
oppmPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: oppmPerfLocation.setStatus('mandatory')
oppmPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: oppmPerfShelf.setStatus('mandatory')
oppmPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: oppmPerfSlot.setStatus('mandatory')
oppmPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 4), CardState())
if mibBuilder.loadTexts: oppmPerfState.setStatus('mandatory')
oppmPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 5), CardStatus())
if mibBuilder.loadTexts: oppmPerfStatus.setStatus('mandatory')
oppmLinkAState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2), ("unknown", 3))))
if mibBuilder.loadTexts: oppmLinkAState.setStatus('mandatory')
oppmLinkAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("hibernation", 3))))
if mibBuilder.loadTexts: oppmLinkAStatus.setStatus('mandatory')
oppmLinkBState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2), ("unknown", 3))))
if mibBuilder.loadTexts: oppmLinkBState.setStatus('mandatory')
oppmLinkBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("hibernation", 3))))
if mibBuilder.loadTexts: oppmLinkBStatus.setStatus('mandatory')
oppmLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 10), DateAndTime())
if mibBuilder.loadTexts: oppmLastBootTime.setStatus('mandatory')
oppmAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 11), Counter32())
if mibBuilder.loadTexts: oppmAvailTime.setStatus('mandatory')
oppmErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 12), Counter32())
if mibBuilder.loadTexts: oppmErrFreeSecs.setStatus('mandatory')
oppmWorkingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 13), Integer32())
if mibBuilder.loadTexts: oppmWorkingPower.setStatus('mandatory')
oppmProtectPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 8, 2, 1, 14), Integer32())
if mibBuilder.loadTexts: oppmProtectPower.setStatus('mandatory')
mcmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmNumEvents.setStatus('mandatory')
mcmCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2), )
if mibBuilder.loadTexts: mcmCntrTable.setStatus('mandatory')
mcmCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1), ).setIndexNames((0, "LUXN-MIB", "mcmCntrLocation"), (0, "LUXN-MIB", "mcmCntrShelf"), (0, "LUXN-MIB", "mcmCntrSlot"), (0, "LUXN-MIB", "mcmCntrType"))
if mibBuilder.loadTexts: mcmCntrEntry.setStatus('mandatory')
mcmCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCntrLocation.setStatus('mandatory')
mcmCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCntrShelf.setStatus('mandatory')
mcmCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCntrSlot.setStatus('mandatory')
mcmCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spi", 1), ("iwm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmCntrType.setStatus('mandatory')
mcmCounterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 5), FlagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmCounterFlag.setStatus('mandatory')
mcmTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTotPktSent.setStatus('mandatory')
mcmTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTotPktRcvd.setStatus('mandatory')
mcmBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBadPktRcvd.setStatus('mandatory')
mcmTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTotBadTrans.setStatus('mandatory')
mcmBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBytesSent.setStatus('mandatory')
mcmBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBytesRcvd.setStatus('mandatory')
mcmMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmMsgsDlvrd.setStatus('mandatory')
mcmBufAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBufAllocFail.setStatus('mandatory')
mcmEcbAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmEcbAllocFail.setStatus('mandatory')
mcmClearCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 2, 1, 15), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmClearCntrs.setStatus('mandatory')
mcmPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3), )
if mibBuilder.loadTexts: mcmPerfTable.setStatus('mandatory')
mcmPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1), ).setIndexNames((0, "LUXN-MIB", "mcmPerfLocation"), (0, "LUXN-MIB", "mcmPerfShelf"), (0, "LUXN-MIB", "mcmPerfSlot"))
if mibBuilder.loadTexts: mcmPerfEntry.setStatus('mandatory')
mcmPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPerfLocation.setStatus('mandatory')
mcmPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPerfShelf.setStatus('mandatory')
mcmPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPerfSlot.setStatus('mandatory')
mcmPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPerfState.setStatus('mandatory')
mcmPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPerfStatus.setStatus('mandatory')
mcmLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmLastBootTime.setStatus('mandatory')
mcmAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmAvailTime.setStatus('mandatory')
mcmErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmErrFreeSecs.setStatus('mandatory')
mcmBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmBiasCurrent.setStatus('mandatory')
mcmModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmModulation.setStatus('mandatory')
mcmApc = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmApc.setStatus('mandatory')
mcmIwmModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIwmModulation.setStatus('mandatory')
mcmLaserOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 13), FlagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmLaserOnOff.setStatus('mandatory')
mcmTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmTemperature.setStatus('mandatory')
mcmIntensity = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmIntensity.setStatus('mandatory')
mcmSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSignalStrength.setStatus('mandatory')
mcmLossOfLight = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 17), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmLossOfLight.setStatus('mandatory')
mcmSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 3, 1, 18), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmSignalDetect.setStatus('mandatory')
mcmPortCurrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4), )
if mibBuilder.loadTexts: mcmPortCurrTable.setStatus('mandatory')
mcmPortCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1), ).setIndexNames((0, "LUXN-MIB", "mcmPortCurrCardLocation"), (0, "LUXN-MIB", "mcmPortCurrCardShelf"), (0, "LUXN-MIB", "mcmPortCurrCardSlot"), (0, "LUXN-MIB", "mcmPortCurrIndex"))
if mibBuilder.loadTexts: mcmPortCurrEntry.setStatus('mandatory')
mcmPortCurrCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrCardLocation.setStatus('mandatory')
mcmPortCurrCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrCardShelf.setStatus('mandatory')
mcmPortCurrCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrCardSlot.setStatus('mandatory')
mcmPortCurrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrIndex.setStatus('mandatory')
mcmPortCurrASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrASs.setStatus('mandatory')
mcmPortCurrFrameASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 6), Counter32())
if mibBuilder.loadTexts: mcmPortCurrFrameASs.setStatus('mandatory')
mcmPortCurrFEs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrFEs.setStatus('mandatory')
mcmPortCurrCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrCRCErrs.setStatus('mandatory')
mcmPortCurrSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrSESs.setStatus('mandatory')
mcmPortCurrSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrSEFSs.setStatus('mandatory')
mcmPortCurrUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrUASs.setStatus('mandatory')
mcmPortCurrLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrLESs.setStatus('mandatory')
mcmPortCurrBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrBESs.setStatus('mandatory')
mcmPortCurrDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrDMs.setStatus('mandatory')
mcmPortCurrLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 9, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortCurrLCVs.setStatus('mandatory')
fnNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnNumEvents.setStatus('mandatory')
fnPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 10, 2), )
if mibBuilder.loadTexts: fnPerfTable.setStatus('mandatory')
fnPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 10, 2, 1), ).setIndexNames((0, "LUXN-MIB", "fnPerfID"))
if mibBuilder.loadTexts: fnPerfEntry.setStatus('mandatory')
fnPerfID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnPerfID.setStatus('mandatory')
fnPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fnEmpty", 1), ("fnOK", 2), ("fnFailed", 3), ("fnDegrade", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnPerfState.setStatus('mandatory')
fnPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 10, 2, 1, 3), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fnPerfStatus.setStatus('mandatory')
csimNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 1), Counter32())
if mibBuilder.loadTexts: csimNumEvents.setStatus('mandatory')
csimCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2), )
if mibBuilder.loadTexts: csimCurrentTable.setStatus('mandatory')
csimCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1), ).setIndexNames((0, "LUXN-MIB", "csimCurrentLocation"), (0, "LUXN-MIB", "csimCurrentShelf"), (0, "LUXN-MIB", "csimCurrentSlot"))
if mibBuilder.loadTexts: csimCurrentEntry.setStatus('mandatory')
csimCurrentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimCurrentLocation.setStatus('mandatory')
csimCurrentShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimCurrentShelf.setStatus('mandatory')
csimCurrentSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimCurrentSlot.setStatus('mandatory')
csimCurrentEFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimCurrentEFIs.setStatus('mandatory')
csimCurrentEIs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimCurrentEIs.setStatus('mandatory')
csimCurrentSEIs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimCurrentSEIs.setStatus('mandatory')
csimCurrentBERs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimCurrentBERs.setStatus('mandatory')
csimCurrentUAIs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimCurrentUAIs.setStatus('mandatory')
csimCurrentGIs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimCurrentGIs.setStatus('mandatory')
csimCurrentDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 11, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimCurrentDateTime.setStatus('mandatory')
rpsmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 1), Counter32())
if mibBuilder.loadTexts: rpsmNumEvents.setStatus('mandatory')
rpsmPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2), )
if mibBuilder.loadTexts: rpsmPerfTable.setStatus('mandatory')
rpsmPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1), ).setIndexNames((0, "LUXN-MIB", "rpsmPerfLocation"), (0, "LUXN-MIB", "rpsmPerfShelf"), (0, "LUXN-MIB", "rpsmPerfSlot"))
if mibBuilder.loadTexts: rpsmPerfEntry.setStatus('mandatory')
rpsmPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: rpsmPerfLocation.setStatus('mandatory')
rpsmPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: rpsmPerfShelf.setStatus('mandatory')
rpsmPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: rpsmPerfSlot.setStatus('mandatory')
rpsmPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 4), CardState())
if mibBuilder.loadTexts: rpsmPerfState.setStatus('mandatory')
rpsmPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 5), CardStatus())
if mibBuilder.loadTexts: rpsmPerfStatus.setStatus('mandatory')
rpsmLinkEastState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2), ("unknown", 3))))
if mibBuilder.loadTexts: rpsmLinkEastState.setStatus('mandatory')
rpsmLinkEastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("hibernation", 3))))
if mibBuilder.loadTexts: rpsmLinkEastStatus.setStatus('mandatory')
rpsmLinkWestState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2), ("unknown", 3))))
if mibBuilder.loadTexts: rpsmLinkWestState.setStatus('mandatory')
rpsmLinkWestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("hibernation", 3))))
if mibBuilder.loadTexts: rpsmLinkWestStatus.setStatus('mandatory')
rpsmLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 10), DateAndTime())
if mibBuilder.loadTexts: rpsmLastBootTime.setStatus('mandatory')
rpsmAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 11), Counter32())
if mibBuilder.loadTexts: rpsmAvailTime.setStatus('mandatory')
rpsmErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 12), Counter32())
if mibBuilder.loadTexts: rpsmErrFreeSecs.setStatus('mandatory')
rpsmWorkingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 13), Integer32())
if mibBuilder.loadTexts: rpsmWorkingPower.setStatus('mandatory')
rpsmProtectionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 12, 2, 1, 14), Integer32())
if mibBuilder.loadTexts: rpsmProtectionPower.setStatus('mandatory')
rsdmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 1), Counter32())
if mibBuilder.loadTexts: rsdmNumEvents.setStatus('mandatory')
rsdmPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2), )
if mibBuilder.loadTexts: rsdmPerfTable.setStatus('mandatory')
rsdmPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1), ).setIndexNames((0, "LUXN-MIB", "rsdmPerfLocation"), (0, "LUXN-MIB", "rsdmPerfShelf"), (0, "LUXN-MIB", "rsdmPerfSlot"))
if mibBuilder.loadTexts: rsdmPerfEntry.setStatus('mandatory')
rsdmPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: rsdmPerfLocation.setStatus('mandatory')
rsdmPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: rsdmPerfShelf.setStatus('mandatory')
rsdmPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: rsdmPerfSlot.setStatus('mandatory')
rsdmPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 4), CardState())
if mibBuilder.loadTexts: rsdmPerfState.setStatus('mandatory')
rsdmPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 5), CardStatus())
if mibBuilder.loadTexts: rsdmPerfStatus.setStatus('mandatory')
rsdmLinkEastState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2), ("unknown", 3))))
if mibBuilder.loadTexts: rsdmLinkEastState.setStatus('mandatory')
rsdmLinkEastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("hibernation", 3))))
if mibBuilder.loadTexts: rsdmLinkEastStatus.setStatus('mandatory')
rsdmLinkWestState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2), ("unknown", 3))))
if mibBuilder.loadTexts: rsdmLinkWestState.setStatus('mandatory')
rsdmLinkWestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("hibernation", 3))))
if mibBuilder.loadTexts: rsdmLinkWestStatus.setStatus('mandatory')
rsdmLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 10), DateAndTime())
if mibBuilder.loadTexts: rsdmLastBootTime.setStatus('mandatory')
rsdmAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 11), Counter32())
if mibBuilder.loadTexts: rsdmAvailTime.setStatus('mandatory')
rsdmErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 12), Counter32())
if mibBuilder.loadTexts: rsdmErrFreeSecs.setStatus('mandatory')
rsdmWorkingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 13), Integer32())
if mibBuilder.loadTexts: rsdmWorkingPower.setStatus('mandatory')
rsdmProtectionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 13, 2, 1, 14), Integer32())
if mibBuilder.loadTexts: rsdmProtectionPower.setStatus('mandatory')
rtdmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 1), Counter32())
if mibBuilder.loadTexts: rtdmNumEvents.setStatus('mandatory')
rtdmPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2), )
if mibBuilder.loadTexts: rtdmPerfTable.setStatus('mandatory')
rtdmPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1), ).setIndexNames((0, "LUXN-MIB", "rtdmPerfLocation"), (0, "LUXN-MIB", "rtdmPerfShelf"), (0, "LUXN-MIB", "rtdmPerfSlot"))
if mibBuilder.loadTexts: rtdmPerfEntry.setStatus('mandatory')
rtdmPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: rtdmPerfLocation.setStatus('mandatory')
rtdmPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: rtdmPerfShelf.setStatus('mandatory')
rtdmPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: rtdmPerfSlot.setStatus('mandatory')
rtdmPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 4), CardState())
if mibBuilder.loadTexts: rtdmPerfState.setStatus('mandatory')
rtdmPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 5), CardStatus())
if mibBuilder.loadTexts: rtdmPerfStatus.setStatus('mandatory')
rtdmLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 6), DateAndTime())
if mibBuilder.loadTexts: rtdmLastBootTime.setStatus('mandatory')
rtdmAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: rtdmAvailTime.setStatus('mandatory')
rtdmErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 14, 2, 1, 8), Counter32())
if mibBuilder.loadTexts: rtdmErrFreeSecs.setStatus('mandatory')
osamNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamNumEvents.setStatus('mandatory')
osamCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2), )
if mibBuilder.loadTexts: osamCntrTable.setStatus('mandatory')
osamCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1), ).setIndexNames((0, "LUXN-MIB", "osamCntrLocation"), (0, "LUXN-MIB", "osamCntrShelf"), (0, "LUXN-MIB", "osamCntrSlot"))
if mibBuilder.loadTexts: osamCntrEntry.setStatus('mandatory')
osamCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamCntrLocation.setStatus('mandatory')
osamCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamCntrShelf.setStatus('mandatory')
osamCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamCntrSlot.setStatus('mandatory')
osamCntrKeepAlivePktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamCntrKeepAlivePktSent.setStatus('mandatory')
osamCntrKeepAlivePktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamCntrKeepAlivePktRcvd.setStatus('mandatory')
osamCntrKeepAliveBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamCntrKeepAliveBadPktRcvd.setStatus('mandatory')
osamPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3), )
if mibBuilder.loadTexts: osamPerfTable.setStatus('mandatory')
osamPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1), ).setIndexNames((0, "LUXN-MIB", "osamPerfLocation"), (0, "LUXN-MIB", "osamPerfShelf"), (0, "LUXN-MIB", "osamPerfSlot"))
if mibBuilder.loadTexts: osamPerfEntry.setStatus('mandatory')
osamPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfLocation.setStatus('mandatory')
osamPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfShelf.setStatus('mandatory')
osamPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfSlot.setStatus('mandatory')
osamPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfState.setStatus('mandatory')
osamPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfStatus.setStatus('mandatory')
osamPerfLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfLastBootTime.setStatus('mandatory')
osamPerfAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfAvailTime.setStatus('mandatory')
osamPerfErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfErrFreeSecs.setStatus('mandatory')
osamPerfAprStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 9), FlagType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfAprStatus.setStatus('mandatory')
osamPerfInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfInputPower.setStatus('mandatory')
osamPerfBFDPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfBFDPower.setStatus('mandatory')
osamPerfOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfOutputPower.setStatus('mandatory')
osamPerfAPRDetector1Power = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfAPRDetector1Power.setStatus('mandatory')
osamPerfAPRDetector2Power = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfAPRDetector2Power.setStatus('mandatory')
osamPerfLaserTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfLaserTemperature.setStatus('mandatory')
osamPerfTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfTecCurrent.setStatus('mandatory')
osamPerfBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfBiasCurrent.setStatus('mandatory')
osamPerfAmplifierGain = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfAmplifierGain.setStatus('mandatory')
osamPerfPCBTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 75))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamPerfPCBTemperature.setStatus('mandatory')
osam2PerfPump1BFDPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osam2PerfPump1BFDPower.setStatus('mandatory')
osam2PerfPump2BFDPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osam2PerfPump2BFDPower.setStatus('mandatory')
osam2PerfPump1IBias = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osam2PerfPump1IBias.setStatus('mandatory')
osam2PerfPump2IBias = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osam2PerfPump2IBias.setStatus('mandatory')
osam2PerfPump1ITEC = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osam2PerfPump1ITEC.setStatus('mandatory')
osam2PerfPump2ITEC = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osam2PerfPump2ITEC.setStatus('mandatory')
osam2PerfPump1Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osam2PerfPump1Temp.setStatus('mandatory')
osam2PerfPump2Temp = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osam2PerfPump2Temp.setStatus('mandatory')
osam2PerfGBInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osam2PerfGBInputPower.setStatus('mandatory')
osam2PerfGBOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osam2PerfGBOutputPower.setStatus('mandatory')
osam2PerfAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 15, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osam2PerfAttenuation.setStatus('mandatory')
rsmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmNumEvents.setStatus('mandatory')
rsmPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2), )
if mibBuilder.loadTexts: rsmPerfTable.setStatus('mandatory')
rsmPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1), ).setIndexNames((0, "LUXN-MIB", "rsmPerfLocation"), (0, "LUXN-MIB", "rsmPerfShelf"), (0, "LUXN-MIB", "rsmPerfSlot"))
if mibBuilder.loadTexts: rsmPerfEntry.setStatus('mandatory')
rsmPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmPerfLocation.setStatus('mandatory')
rsmPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmPerfShelf.setStatus('mandatory')
rsmPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmPerfSlot.setStatus('mandatory')
rsmPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmPerfState.setStatus('mandatory')
rsmPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmPerfStatus.setStatus('mandatory')
rsmLinkAState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmLinkAState.setStatus('mandatory')
rsmLinkAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmLinkAStatus.setStatus('mandatory')
rsmLinkBState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmLinkBState.setStatus('mandatory')
rsmLinkBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("na", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmLinkBStatus.setStatus('mandatory')
rsmLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmLastBootTime.setStatus('mandatory')
rsmAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmAvailTime.setStatus('mandatory')
rsmErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmErrFreeSecs.setStatus('mandatory')
rsmWorkingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmWorkingPower.setStatus('mandatory')
rsmProtectionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 16, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmProtectionPower.setStatus('mandatory')
upsmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmNumEvents.setStatus('mandatory')
upsmPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2), )
if mibBuilder.loadTexts: upsmPerfTable.setStatus('mandatory')
upsmPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1), ).setIndexNames((0, "LUXN-MIB", "upsmPerfLocation"), (0, "LUXN-MIB", "upsmPerfShelf"), (0, "LUXN-MIB", "upsmPerfSlot"))
if mibBuilder.loadTexts: upsmPerfEntry.setStatus('mandatory')
upsmPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmPerfLocation.setStatus('mandatory')
upsmPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmPerfShelf.setStatus('mandatory')
upsmPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmPerfSlot.setStatus('mandatory')
upsmPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmPerfState.setStatus('mandatory')
upsmPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmPerfStatus.setStatus('mandatory')
upsmLinkAState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmLinkAState.setStatus('mandatory')
upsmLinkAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("hibernation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmLinkAStatus.setStatus('mandatory')
upsmLinkBState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linked", 1), ("notLinked", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmLinkBState.setStatus('mandatory')
upsmLinkBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("hibernation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmLinkBStatus.setStatus('mandatory')
upsmLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmLastBootTime.setStatus('mandatory')
upsmAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmAvailTime.setStatus('mandatory')
upsmErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmErrFreeSecs.setStatus('mandatory')
upsmWorkingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmWorkingPower.setStatus('mandatory')
upsmProtectionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 17, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmProtectionPower.setStatus('mandatory')
mcmescNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescNumEvents.setStatus('mandatory')
mcmescCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2), )
if mibBuilder.loadTexts: mcmescCntrTable.setStatus('mandatory')
mcmescCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescCntrLocation"), (0, "LUXN-MIB", "mcmescCntrShelf"), (0, "LUXN-MIB", "mcmescCntrSlot"), (0, "LUXN-MIB", "mcmescCntrType"))
if mibBuilder.loadTexts: mcmescCntrEntry.setStatus('mandatory')
mcmescCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescCntrLocation.setStatus('mandatory')
mcmescCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescCntrShelf.setStatus('mandatory')
mcmescCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescCntrSlot.setStatus('mandatory')
mcmescCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spi", 1), ("iwm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescCntrType.setStatus('mandatory')
mcmescCounterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 5), FlagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescCounterFlag.setStatus('mandatory')
mcmescTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescTotPktSent.setStatus('mandatory')
mcmescTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescTotPktRcvd.setStatus('mandatory')
mcmescBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescBadPktRcvd.setStatus('mandatory')
mcmescTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescTotBadTrans.setStatus('mandatory')
mcmescBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescBytesSent.setStatus('mandatory')
mcmescBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescBytesRcvd.setStatus('mandatory')
mcmescMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescMsgsDlvrd.setStatus('mandatory')
mcmescClearCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 2, 1, 13), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescClearCntrs.setStatus('mandatory')
mcmescPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3), )
if mibBuilder.loadTexts: mcmescPerfTable.setStatus('mandatory')
mcmescPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescPerfLocation"), (0, "LUXN-MIB", "mcmescPerfShelf"), (0, "LUXN-MIB", "mcmescPerfSlot"))
if mibBuilder.loadTexts: mcmescPerfEntry.setStatus('mandatory')
mcmescPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPerfLocation.setStatus('mandatory')
mcmescPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPerfShelf.setStatus('mandatory')
mcmescPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPerfSlot.setStatus('mandatory')
mcmescPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPerfState.setStatus('mandatory')
mcmescPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPerfStatus.setStatus('mandatory')
mcmescLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLastBootTime.setStatus('mandatory')
mcmescAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescAvailTime.setStatus('mandatory')
mcmescPortCurrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4), )
if mibBuilder.loadTexts: mcmescPortCurrTable.setStatus('mandatory')
mcmescPortCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescPortCurrCardLocation"), (0, "LUXN-MIB", "mcmescPortCurrCardShelf"), (0, "LUXN-MIB", "mcmescPortCurrCardSlot"), (0, "LUXN-MIB", "mcmescPortCurrPort"))
if mibBuilder.loadTexts: mcmescPortCurrEntry.setStatus('mandatory')
mcmescPortCurrCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCurrCardLocation.setStatus('mandatory')
mcmescPortCurrCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCurrCardShelf.setStatus('mandatory')
mcmescPortCurrCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCurrCardSlot.setStatus('mandatory')
mcmescPortCurrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCurrPort.setStatus('mandatory')
mcmescPortCurrRxSig = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCurrRxSig.setStatus('mandatory')
mcmescPortCurrDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCurrDuration.setStatus('mandatory')
mcmescPortCurrEns = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCurrEns.setStatus('mandatory')
mcmescPortCurrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCurrLoss.setStatus('mandatory')
mcmescPortCurrCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCurrCrcErr.setStatus('mandatory')
mcmescPortCurrOobErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCurrOobErr.setStatus('mandatory')
mcmescPortCurrRdpErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCurrRdpErr.setStatus('mandatory')
mcmescPortCurrBer = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortCurrBer.setStatus('mandatory')
mcmescLinkCurrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5), )
if mibBuilder.loadTexts: mcmescLinkCurrTable.setStatus('mandatory')
mcmescLinkCurrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescLinkCurrCardLocation"), (0, "LUXN-MIB", "mcmescLinkCurrCardShelf"), (0, "LUXN-MIB", "mcmescLinkCurrCardSlot"))
if mibBuilder.loadTexts: mcmescLinkCurrEntry.setStatus('mandatory')
mcmescLinkCurrCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkCurrCardLocation.setStatus('mandatory')
mcmescLinkCurrCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkCurrCardShelf.setStatus('mandatory')
mcmescLinkCurrCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkCurrCardSlot.setStatus('mandatory')
mcmescLinkCurrRxSig = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkCurrRxSig.setStatus('mandatory')
mcmescLinkCurrDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkCurrDuration.setStatus('mandatory')
mcmescLinkCurrTsos = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkCurrTsos.setStatus('mandatory')
mcmescLinkCurrLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkCurrLoss.setStatus('mandatory')
mcmescLinkCurrCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkCurrCrcErr.setStatus('mandatory')
mcmescLinkCurrOobErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkCurrOobErr.setStatus('mandatory')
mcmescLinkCurrRdpErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkCurrRdpErr.setStatus('mandatory')
mcmescLinkCurrBer = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 18, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkCurrBer.setStatus('mandatory')
imnRoutingPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 21, 1), )
if mibBuilder.loadTexts: imnRoutingPerfTable.setStatus('mandatory')
imnRoutingPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 21, 1, 1), ).setIndexNames((0, "LUXN-MIB", "imnRoutePerfIpDest"))
if mibBuilder.loadTexts: imnRoutingPerfEntry.setStatus('mandatory')
imnRoutePerfIpDest = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 21, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imnRoutePerfIpDest.setStatus('mandatory')
imnRoutePerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dead", 1), ("comatose", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imnRoutePerfStatus.setStatus('mandatory')
tapNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapNumEvents.setStatus('mandatory')
tapPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2), )
if mibBuilder.loadTexts: tapPerfTable.setStatus('mandatory')
tapPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1), ).setIndexNames((0, "LUXN-MIB", "tapPerfLocation"), (0, "LUXN-MIB", "tapPerfShelf"), (0, "LUXN-MIB", "tapPerfSlot"))
if mibBuilder.loadTexts: tapPerfEntry.setStatus('mandatory')
tapPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapPerfLocation.setStatus('mandatory')
tapPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapPerfShelf.setStatus('mandatory')
tapPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapPerfSlot.setStatus('mandatory')
tapType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 4), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapType.setStatus('mandatory')
tapPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 5), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapPerfState.setStatus('mandatory')
tapPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 6), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapPerfStatus.setStatus('mandatory')
tapLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapLastBootTime.setStatus('mandatory')
tapAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapAvailTime.setStatus('mandatory')
tapErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 22, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapErrFreeSecs.setStatus('mandatory')
voadmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmNumEvents.setStatus('mandatory')
voadmPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2), )
if mibBuilder.loadTexts: voadmPerfTable.setStatus('mandatory')
voadmPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1), ).setIndexNames((0, "LUXN-MIB", "voadmPerfLocation"), (0, "LUXN-MIB", "voadmPerfShelf"), (0, "LUXN-MIB", "voadmPerfSlot"))
if mibBuilder.loadTexts: voadmPerfEntry.setStatus('mandatory')
voadmPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPerfLocation.setStatus('mandatory')
voadmPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPerfShelf.setStatus('mandatory')
voadmPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPerfSlot.setStatus('mandatory')
voadmType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 4), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmType.setStatus('mandatory')
voadmPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 5), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPerfState.setStatus('mandatory')
voadmPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 6), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmPerfStatus.setStatus('mandatory')
voadmLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmLastBootTime.setStatus('mandatory')
voadmAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmAvailTime.setStatus('mandatory')
voadmErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 23, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmErrFreeSecs.setStatus('mandatory')
dmmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmNumEvents.setStatus('mandatory')
dmmPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2), )
if mibBuilder.loadTexts: dmmPerfTable.setStatus('mandatory')
dmmPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1), ).setIndexNames((0, "LUXN-MIB", "dmmPerfLocation"), (0, "LUXN-MIB", "dmmPerfShelf"), (0, "LUXN-MIB", "dmmPerfSlot"))
if mibBuilder.loadTexts: dmmPerfEntry.setStatus('mandatory')
dmmPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPerfLocation.setStatus('mandatory')
dmmPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPerfShelf.setStatus('mandatory')
dmmPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPerfSlot.setStatus('mandatory')
dmmPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPerfState.setStatus('mandatory')
dmmPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPerfStatus.setStatus('mandatory')
dmmLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmLastBootTime.setStatus('mandatory')
dmmAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmAvailTime.setStatus('mandatory')
dmmErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmErrFreeSecs.setStatus('mandatory')
dmmCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3), )
if mibBuilder.loadTexts: dmmCntrTable.setStatus('mandatory')
dmmCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1), ).setIndexNames((0, "LUXN-MIB", "dmmCntrLocation"), (0, "LUXN-MIB", "dmmCntrShelf"), (0, "LUXN-MIB", "dmmCntrSlot"), (0, "LUXN-MIB", "dmmCntrType"))
if mibBuilder.loadTexts: dmmCntrEntry.setStatus('mandatory')
dmmCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmCntrLocation.setStatus('mandatory')
dmmCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmCntrShelf.setStatus('mandatory')
dmmCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmCntrSlot.setStatus('mandatory')
dmmCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("spi", 1), ("ibm", 2), ("hdlc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmCntrType.setStatus('mandatory')
dmmTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmTotPktSent.setStatus('mandatory')
dmmTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmTotPktRcvd.setStatus('mandatory')
dmmTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmTotBadTrans.setStatus('mandatory')
dmmBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmBadPktRcvd.setStatus('mandatory')
dmmBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmBytesSent.setStatus('mandatory')
dmmBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmBytesRcvd.setStatus('mandatory')
dmmMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmMsgsDlvrd.setStatus('mandatory')
dmmClearCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 3, 1, 12), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmmClearCntrs.setStatus('mandatory')
dmmPmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4), )
if mibBuilder.loadTexts: dmmPmTable.setStatus('mandatory')
dmmPmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1), ).setIndexNames((0, "LUXN-MIB", "dmmPmLocation"), (0, "LUXN-MIB", "dmmPmShelf"), (0, "LUXN-MIB", "dmmPmSlot"), (0, "LUXN-MIB", "dmmPmType"))
if mibBuilder.loadTexts: dmmPmEntry.setStatus('mandatory')
dmmPmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPmLocation.setStatus('mandatory')
dmmPmShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPmShelf.setStatus('mandatory')
dmmPmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPmSlot.setStatus('mandatory')
dmmPmType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link", 1), ("port1", 2), ("port2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPmType.setStatus('mandatory')
dmmPmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPmErrors.setStatus('mandatory')
dmmPmErredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPmErredSecs.setStatus('mandatory')
dmmStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmStartTime.setStatus('mandatory')
dmmClearPmCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 8), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmmClearPmCntrs.setStatus('mandatory')
dmmPmRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPmRxPower.setStatus('mandatory')
dmmPmTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 24, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmPmTxPower.setStatus('mandatory')
ocm10gfNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfNumEvents.setStatus('mandatory')
ocm10gfPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2), )
if mibBuilder.loadTexts: ocm10gfPerfTable.setStatus('mandatory')
ocm10gfPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ocm10gfPerfLocation"), (0, "LUXN-MIB", "ocm10gfPerfShelf"), (0, "LUXN-MIB", "ocm10gfPerfSlot"))
if mibBuilder.loadTexts: ocm10gfPerfEntry.setStatus('mandatory')
ocm10gfPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPerfLocation.setStatus('mandatory')
ocm10gfPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPerfShelf.setStatus('mandatory')
ocm10gfPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPerfSlot.setStatus('mandatory')
ocm10gfPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPerfState.setStatus('mandatory')
ocm10gfPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPerfStatus.setStatus('mandatory')
ocm10gfLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfLastBootTime.setStatus('mandatory')
ocm10gfAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfAvailTime.setStatus('mandatory')
ocm10gfErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfErrFreeSecs.setStatus('mandatory')
ocm10gfCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3), )
if mibBuilder.loadTexts: ocm10gfCntrTable.setStatus('mandatory')
ocm10gfCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1), ).setIndexNames((0, "LUXN-MIB", "ocm10gfCntrLocation"), (0, "LUXN-MIB", "ocm10gfCntrShelf"), (0, "LUXN-MIB", "ocm10gfCntrSlot"), (0, "LUXN-MIB", "ocm10gfCntrType"))
if mibBuilder.loadTexts: ocm10gfCntrEntry.setStatus('mandatory')
ocm10gfCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfCntrLocation.setStatus('mandatory')
ocm10gfCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfCntrShelf.setStatus('mandatory')
ocm10gfCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfCntrSlot.setStatus('mandatory')
ocm10gfCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("spi", 1), ("ibm", 2), ("hdlc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfCntrType.setStatus('mandatory')
ocm10gfTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfTotPktSent.setStatus('mandatory')
ocm10gfTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfTotPktRcvd.setStatus('mandatory')
ocm10gfTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfTotBadTrans.setStatus('mandatory')
ocm10gfBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfBadPktRcvd.setStatus('mandatory')
ocm10gfBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfBytesSent.setStatus('mandatory')
ocm10gfBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfBytesRcvd.setStatus('mandatory')
ocm10gfMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfMsgsDlvrd.setStatus('mandatory')
ocm10gfClearCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 3, 1, 12), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm10gfClearCntrs.setStatus('mandatory')
ocm10gfPmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4), )
if mibBuilder.loadTexts: ocm10gfPmTable.setStatus('mandatory')
ocm10gfPmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1), ).setIndexNames((0, "LUXN-MIB", "ocm10gfPmLocation"), (0, "LUXN-MIB", "ocm10gfPmShelf"), (0, "LUXN-MIB", "ocm10gfPmSlot"))
if mibBuilder.loadTexts: ocm10gfPmEntry.setStatus('mandatory')
ocm10gfPmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmLocation.setStatus('mandatory')
ocm10gfPmShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmShelf.setStatus('mandatory')
ocm10gfPmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmSlot.setStatus('mandatory')
ocm10gfPmNumIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmNumIntervals.setStatus('mandatory')
ocm10gfPmLinkRxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmLinkRxPwr.setStatus('mandatory')
ocm10gfPmLinkTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmLinkTxPwr.setStatus('mandatory')
ocm10gfPmLinkFecErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmLinkFecErrors.setStatus('mandatory')
ocm10gfPmLinkUncorrectedFecErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmLinkUncorrectedFecErrs.setStatus('mandatory')
ocm10gfPmLinkCorrectedFecErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmLinkCorrectedFecErrs.setStatus('mandatory')
ocm10gfPmLinkCorrectedOnesErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmLinkCorrectedOnesErr.setStatus('mandatory')
ocm10gfPmLinkErredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmLinkErredSeconds.setStatus('mandatory')
ocm10gfPmCpeRxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmCpeRxPwr.setStatus('mandatory')
ocm10gfPmCpeTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmCpeTxPwr.setStatus('mandatory')
ocm10gfPmCpeSonetRxB2Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmCpeSonetRxB2Errs.setStatus('mandatory')
ocm10gfPmCpeSonetTxB2Errs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmCpeSonetTxB2Errs.setStatus('mandatory')
ocm10gfPmCpe10GbeRxTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmCpe10GbeRxTotalPkts.setStatus('mandatory')
ocm10gfPmCpe10GbeRxErredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmCpe10GbeRxErredPkts.setStatus('mandatory')
ocm10gfPmCpe10GbeTxTotalPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmCpe10GbeTxTotalPkts.setStatus('mandatory')
ocm10gfPmCpe10gbeTxErredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmCpe10gbeTxErredPkts.setStatus('mandatory')
ocm10gfPmCpeErredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfPmCpeErredSeconds.setStatus('mandatory')
ocm10gfClearPmCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 25, 4, 1, 21), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm10gfClearPmCntrs.setStatus('mandatory')
ocm2NumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2NumEvents.setStatus('mandatory')
ocm2PerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2), )
if mibBuilder.loadTexts: ocm2PerfTable.setStatus('mandatory')
ocm2PerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ocm2PerfLocation"), (0, "LUXN-MIB", "ocm2PerfShelf"), (0, "LUXN-MIB", "ocm2PerfSlot"))
if mibBuilder.loadTexts: ocm2PerfEntry.setStatus('mandatory')
ocm2PerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PerfLocation.setStatus('mandatory')
ocm2PerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PerfShelf.setStatus('mandatory')
ocm2PerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PerfSlot.setStatus('mandatory')
ocm2PerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PerfState.setStatus('mandatory')
ocm2PerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PerfStatus.setStatus('mandatory')
ocm2LastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2LastBootTime.setStatus('mandatory')
ocm2AvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2AvailTime.setStatus('mandatory')
ocm2ErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2ErrFreeSecs.setStatus('mandatory')
ocm2CntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3), )
if mibBuilder.loadTexts: ocm2CntrTable.setStatus('mandatory')
ocm2CntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1), ).setIndexNames((0, "LUXN-MIB", "ocm2CntrLocation"), (0, "LUXN-MIB", "ocm2CntrShelf"), (0, "LUXN-MIB", "ocm2CntrSlot"), (0, "LUXN-MIB", "ocm2CntrType"))
if mibBuilder.loadTexts: ocm2CntrEntry.setStatus('mandatory')
ocm2CntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2CntrLocation.setStatus('mandatory')
ocm2CntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2CntrShelf.setStatus('mandatory')
ocm2CntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2CntrSlot.setStatus('mandatory')
ocm2CntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("spi", 1), ("ibm1", 2), ("ibm2", 3), ("hdlc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2CntrType.setStatus('mandatory')
ocm2TotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2TotPktSent.setStatus('mandatory')
ocm2TotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2TotPktRcvd.setStatus('mandatory')
ocm2TotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2TotBadTrans.setStatus('mandatory')
ocm2BadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2BadPktRcvd.setStatus('mandatory')
ocm2BytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2BytesSent.setStatus('mandatory')
ocm2BytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2BytesRcvd.setStatus('mandatory')
ocm2MsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2MsgsDlvrd.setStatus('mandatory')
ocm2ClearCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 3, 1, 12), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2ClearCntrs.setStatus('mandatory')
ocm2PmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4), )
if mibBuilder.loadTexts: ocm2PmTable.setStatus('mandatory')
ocm2PmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1), ).setIndexNames((0, "LUXN-MIB", "ocm2PmLocation"), (0, "LUXN-MIB", "ocm2PmShelf"), (0, "LUXN-MIB", "ocm2PmSlot"), (0, "LUXN-MIB", "ocm2PmLink"))
if mibBuilder.loadTexts: ocm2PmEntry.setStatus('mandatory')
ocm2PmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmLocation.setStatus('mandatory')
ocm2PmShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmShelf.setStatus('mandatory')
ocm2PmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmSlot.setStatus('mandatory')
ocm2PmLink = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link1", 1), ("link2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmLink.setStatus('mandatory')
ocm2PmLinkRxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmLinkRxPwr.setStatus('mandatory')
ocm2PmLinkTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmLinkTxPwr.setStatus('mandatory')
ocm2PmCpeRxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmCpeRxPwr.setStatus('mandatory')
ocm2PmCpeTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmCpeTxPwr.setStatus('mandatory')
ocm2PmNumLinkRxIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmNumLinkRxIntervals.setStatus('mandatory')
ocm2PmLinkRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmLinkRxErrors.setStatus('mandatory')
ocm2PmLinkRxErredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmLinkRxErredSeconds.setStatus('mandatory')
ocm2PmNumCpeRxIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmNumCpeRxIntervals.setStatus('mandatory')
ocm2PmCpeRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmCpeRxErrors.setStatus('mandatory')
ocm2PmCpeRxErredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmCpeRxErredSeconds.setStatus('mandatory')
ocm2PmNumCpeTxIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmNumCpeTxIntervals.setStatus('mandatory')
ocm2PmCpeTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmCpeTxErrors.setStatus('mandatory')
ocm2PmCpeTxErredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2PmCpeTxErredSeconds.setStatus('mandatory')
ocm2ClearPmCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 26, 4, 1, 18), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm2ClearPmCntrs.setStatus('mandatory')
oscNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscNumEvents.setStatus('mandatory')
oscPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2), )
if mibBuilder.loadTexts: oscPerfTable.setStatus('mandatory')
oscPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1), ).setIndexNames((0, "LUXN-MIB", "oscPerfLocation"), (0, "LUXN-MIB", "oscPerfShelf"), (0, "LUXN-MIB", "oscPerfSlot"))
if mibBuilder.loadTexts: oscPerfEntry.setStatus('mandatory')
oscPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPerfLocation.setStatus('mandatory')
oscPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPerfShelf.setStatus('mandatory')
oscPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPerfSlot.setStatus('mandatory')
oscPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPerfState.setStatus('mandatory')
oscPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPerfStatus.setStatus('mandatory')
oscLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscLastBootTime.setStatus('mandatory')
oscAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscAvailTime.setStatus('mandatory')
oscErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscErrFreeSecs.setStatus('mandatory')
oscCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3), )
if mibBuilder.loadTexts: oscCntrTable.setStatus('mandatory')
oscCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1), ).setIndexNames((0, "LUXN-MIB", "oscCntrLocation"), (0, "LUXN-MIB", "oscCntrShelf"), (0, "LUXN-MIB", "oscCntrSlot"), (0, "LUXN-MIB", "oscCntrType"))
if mibBuilder.loadTexts: oscCntrEntry.setStatus('mandatory')
oscCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscCntrLocation.setStatus('mandatory')
oscCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscCntrShelf.setStatus('mandatory')
oscCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscCntrSlot.setStatus('mandatory')
oscCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("spi", 1), ("ibm", 2), ("hdlc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscCntrType.setStatus('mandatory')
oscTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscTotPktSent.setStatus('mandatory')
oscTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscTotPktRcvd.setStatus('mandatory')
oscTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscTotBadTrans.setStatus('mandatory')
oscBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscBadPktRcvd.setStatus('mandatory')
oscBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscBytesSent.setStatus('mandatory')
oscBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscBytesRcvd.setStatus('mandatory')
oscMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscMsgsDlvrd.setStatus('mandatory')
oscClearCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 3, 1, 12), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oscClearCntrs.setStatus('mandatory')
oscPmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4), )
if mibBuilder.loadTexts: oscPmTable.setStatus('mandatory')
oscPmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1), ).setIndexNames((0, "LUXN-MIB", "oscPmLocation"), (0, "LUXN-MIB", "oscPmShelf"), (0, "LUXN-MIB", "oscPmSlot"))
if mibBuilder.loadTexts: oscPmEntry.setStatus('mandatory')
oscPmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPmLocation.setStatus('mandatory')
oscPmShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPmShelf.setStatus('mandatory')
oscPmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPmSlot.setStatus('mandatory')
oscPmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPmErrors.setStatus('mandatory')
oscPmErredSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscPmErredSecs.setStatus('mandatory')
oscStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscStartTime.setStatus('mandatory')
oscClearPmCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 27, 4, 1, 7), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oscClearPmCntrs.setStatus('mandatory')
ocm4gNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gNumEvents.setStatus('mandatory')
ocm4gPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2), )
if mibBuilder.loadTexts: ocm4gPerfTable.setStatus('mandatory')
ocm4gPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ocm4gPerfLocation"), (0, "LUXN-MIB", "ocm4gPerfShelf"), (0, "LUXN-MIB", "ocm4gPerfSlot"))
if mibBuilder.loadTexts: ocm4gPerfEntry.setStatus('mandatory')
ocm4gPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPerfLocation.setStatus('mandatory')
ocm4gPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPerfShelf.setStatus('mandatory')
ocm4gPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPerfSlot.setStatus('mandatory')
ocm4gPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPerfState.setStatus('mandatory')
ocm4gPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPerfStatus.setStatus('mandatory')
ocm4gLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gLastBootTime.setStatus('mandatory')
ocm4gAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gAvailTime.setStatus('mandatory')
ocm4gErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gErrFreeSecs.setStatus('mandatory')
ocm4gCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3), )
if mibBuilder.loadTexts: ocm4gCntrTable.setStatus('mandatory')
ocm4gCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1), ).setIndexNames((0, "LUXN-MIB", "ocm4gCntrLocation"), (0, "LUXN-MIB", "ocm4gCntrShelf"), (0, "LUXN-MIB", "ocm4gCntrSlot"), (0, "LUXN-MIB", "ocm4gCntrType"))
if mibBuilder.loadTexts: ocm4gCntrEntry.setStatus('mandatory')
ocm4gCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gCntrLocation.setStatus('mandatory')
ocm4gCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gCntrShelf.setStatus('mandatory')
ocm4gCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gCntrSlot.setStatus('mandatory')
ocm4gCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("spi", 1), ("ibm1", 2), ("ibm2", 3), ("hdlc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gCntrType.setStatus('mandatory')
ocm4gTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gTotPktSent.setStatus('mandatory')
ocm4gTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gTotPktRcvd.setStatus('mandatory')
ocm4gTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gTotBadTrans.setStatus('mandatory')
ocm4gBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gBadPktRcvd.setStatus('mandatory')
ocm4gBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gBytesSent.setStatus('mandatory')
ocm4gBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gBytesRcvd.setStatus('mandatory')
ocm4gMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gMsgsDlvrd.setStatus('mandatory')
ocm4gClearCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 3, 1, 12), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gClearCntrs.setStatus('mandatory')
ocm4gPmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4), )
if mibBuilder.loadTexts: ocm4gPmTable.setStatus('mandatory')
ocm4gPmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1), ).setIndexNames((0, "LUXN-MIB", "ocm4gPmLocation"), (0, "LUXN-MIB", "ocm4gPmShelf"), (0, "LUXN-MIB", "ocm4gPmSlot"), (0, "LUXN-MIB", "ocm4gPmLink"))
if mibBuilder.loadTexts: ocm4gPmEntry.setStatus('mandatory')
ocm4gPmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmLocation.setStatus('mandatory')
ocm4gPmShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmShelf.setStatus('mandatory')
ocm4gPmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmSlot.setStatus('mandatory')
ocm4gPmLink = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("link1", 1), ("link2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmLink.setStatus('mandatory')
ocm4gPmLinkRxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmLinkRxPwr.setStatus('mandatory')
ocm4gPmLinkTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmLinkTxPwr.setStatus('mandatory')
ocm4gPmCpeRxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmCpeRxPwr.setStatus('mandatory')
ocm4gPmCpeTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmCpeTxPwr.setStatus('mandatory')
ocm4gPmNumLinkRxIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmNumLinkRxIntervals.setStatus('mandatory')
ocm4gPmLinkRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmLinkRxErrors.setStatus('mandatory')
ocm4gPmLinkRxErredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmLinkRxErredSeconds.setStatus('mandatory')
ocm4gPmNumCpeRxIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmNumCpeRxIntervals.setStatus('mandatory')
ocm4gPmCpeRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmCpeRxErrors.setStatus('mandatory')
ocm4gPmCpeRxErredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmCpeRxErredSeconds.setStatus('mandatory')
ocm4gPmNumCpeTxIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmNumCpeTxIntervals.setStatus('mandatory')
ocm4gPmCpeTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmCpeTxErrors.setStatus('mandatory')
ocm4gPmCpeTxErredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gPmCpeTxErredSeconds.setStatus('mandatory')
ocm4gClearPmCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 28, 4, 1, 18), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocm4gClearPmCntrs.setStatus('mandatory')
oetNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetNumEvents.setStatus('mandatory')
oetPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2), )
if mibBuilder.loadTexts: oetPerfTable.setStatus('mandatory')
oetPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1), ).setIndexNames((0, "LUXN-MIB", "oetPerfLocation"), (0, "LUXN-MIB", "oetPerfShelf"), (0, "LUXN-MIB", "oetPerfSlot"))
if mibBuilder.loadTexts: oetPerfEntry.setStatus('mandatory')
oetPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPerfLocation.setStatus('mandatory')
oetPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPerfShelf.setStatus('mandatory')
oetPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPerfSlot.setStatus('mandatory')
oetPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 4), CardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPerfState.setStatus('mandatory')
oetPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 5), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPerfStatus.setStatus('mandatory')
oetLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetLastBootTime.setStatus('mandatory')
oetAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetAvailTime.setStatus('mandatory')
oetErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetErrFreeSecs.setStatus('mandatory')
oetPmLinkTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3), )
if mibBuilder.loadTexts: oetPmLinkTable.setStatus('mandatory')
oetPmLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1), ).setIndexNames((0, "LUXN-MIB", "oetPmLinkLocation"), (0, "LUXN-MIB", "oetPmLinkShelf"), (0, "LUXN-MIB", "oetPmLinkSlot"), (0, "LUXN-MIB", "oetPmLink"))
if mibBuilder.loadTexts: oetPmLinkEntry.setStatus('mandatory')
oetPmLinkLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkLocation.setStatus('mandatory')
oetPmLinkShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkShelf.setStatus('mandatory')
oetPmLinkSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkSlot.setStatus('mandatory')
oetPmLink = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 12))).clone(namedValues=NamedValues(("linkA", 11), ("linkB", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLink.setStatus('mandatory')
oetPmLinkNumIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkNumIntervals.setStatus('mandatory')
oetPmLinkRxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkRxPwr.setStatus('mandatory')
oetPmLinkRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkRxBytes.setStatus('mandatory')
oetPmLinkRxFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkRxFcsErrs.setStatus('mandatory')
oetPmLinkTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkTxPwr.setStatus('mandatory')
oetPmLinkTxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkTxTemp.setStatus('mandatory')
oetPmLinkTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkTxBytes.setStatus('mandatory')
oetPmLinkFecTx = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkFecTx.setStatus('mandatory')
oetPmLinkFecCorrected1s = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkFecCorrected1s.setStatus('mandatory')
oetPmLinkFecCorrected0s = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkFecCorrected0s.setStatus('mandatory')
oetPmLinkFecCorrectedBit = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkFecCorrectedBit.setStatus('mandatory')
oetPmLinkFecCorrectedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkFecCorrectedByte.setStatus('mandatory')
oetPmLinkFecUncorrectedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkFecUncorrectedByte.setStatus('mandatory')
oetPmLinkFecBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmLinkFecBlock.setStatus('mandatory')
oetPmPortTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4), )
if mibBuilder.loadTexts: oetPmPortTable.setStatus('mandatory')
oetPmPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1), ).setIndexNames((0, "LUXN-MIB", "oetPmPortLocation"), (0, "LUXN-MIB", "oetPmPortShelf"), (0, "LUXN-MIB", "oetPmPortSlot"), (0, "LUXN-MIB", "oetPmPortIndex"))
if mibBuilder.loadTexts: oetPmPortEntry.setStatus('mandatory')
oetPmPortLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmPortLocation.setStatus('mandatory')
oetPmPortShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmPortShelf.setStatus('mandatory')
oetPmPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmPortSlot.setStatus('mandatory')
oetPmPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("cpe", 1), ("cpe", 2), ("cpe", 3), ("cpe", 4), ("cpe", 5), ("cpe", 6), ("cpe", 7), ("cpe", 8), ("cpe", 9), ("cpe", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmPortIndex.setStatus('mandatory')
oetPmPortNumIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmPortNumIntervals.setStatus('mandatory')
oetPmPortRxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmPortRxPwr.setStatus('mandatory')
oetPmPortRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmPortRxBytes.setStatus('mandatory')
oetPmPortRxFcsErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmPortRxFcsErrs.setStatus('mandatory')
oetPmPortTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmPortTxPwr.setStatus('mandatory')
oetPmPortTxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmPortTxTemp.setStatus('mandatory')
oetPmPortTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 1, 29, 4, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oetPmPortTxBytes.setStatus('mandatory')
sysHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 1, 1), )
if mibBuilder.loadTexts: sysHistTable.setStatus('mandatory')
sysHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 1, 1, 1), ).setIndexNames((0, "LUXN-MIB", "sysHMode"))
if mibBuilder.loadTexts: sysHistEntry.setStatus('mandatory')
sysHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 1, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHMode.setStatus('mandatory')
sysHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 1, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHLastBootTime.setStatus('mandatory')
sysHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHAvailTime.setStatus('mandatory')
sysHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysHErrFreeSecs.setStatus('mandatory')
dlHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1), )
if mibBuilder.loadTexts: dlHistTable.setStatus('mandatory')
dlHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1, 1), ).setIndexNames((0, "LUXN-MIB", "dlHMode"))
if mibBuilder.loadTexts: dlHistEntry.setStatus('mandatory')
dlHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlHMode.setStatus('mandatory')
dlHOkDownloads = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlHOkDownloads.setStatus('mandatory')
dlHBadDownloads = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlHBadDownloads.setStatus('mandatory')
dlHLongestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlHLongestTime.setStatus('mandatory')
dlHLongestSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlHLongestSize.setStatus('mandatory')
cpHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 1), )
if mibBuilder.loadTexts: cpHistTable.setStatus('mandatory')
cpHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 1, 1), ).setIndexNames((0, "LUXN-MIB", "cpHMode"))
if mibBuilder.loadTexts: cpHistEntry.setStatus('mandatory')
cpHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHMode.setStatus('mandatory')
cpHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHNumEvents.setStatus('mandatory')
cpHTrapsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHTrapsSent.setStatus('mandatory')
cpHSNMPCmdsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHSNMPCmdsRcvd.setStatus('mandatory')
cpHCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2), )
if mibBuilder.loadTexts: cpHCntrTable.setStatus('mandatory')
cpHCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1), ).setIndexNames((0, "LUXN-MIB", "cpHCntrMode"), (0, "LUXN-MIB", "cpCntrShelf"), (0, "LUXN-MIB", "cpCntrSlot"), (0, "LUXN-MIB", "cpCntrType"))
if mibBuilder.loadTexts: cpHCntrEntry.setStatus('mandatory')
cpHCntrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHCntrMode.setStatus('mandatory')
cpHCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHCntrShelf.setStatus('mandatory')
cpHCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHCntrSlot.setStatus('mandatory')
cpHCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("spi", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHCntrType.setStatus('mandatory')
cpHTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHTotPktSent.setStatus('mandatory')
cpHTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHTotPktRcvd.setStatus('mandatory')
cpHBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHBadPktRcvd.setStatus('mandatory')
cpHTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHTotBadTrans.setStatus('mandatory')
cpHBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHBytesSent.setStatus('mandatory')
cpHBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHBytesRcvd.setStatus('mandatory')
cpHMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHMsgsDlvrd.setStatus('mandatory')
cpHBufAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHBufAllocFail.setStatus('mandatory')
cpHEcbAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHEcbAllocFail.setStatus('mandatory')
cpHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3), )
if mibBuilder.loadTexts: cpHHistTable.setStatus('mandatory')
cpHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1), ).setIndexNames((0, "LUXN-MIB", "cpHHistMode"), (0, "LUXN-MIB", "cpHHistShelf"), (0, "LUXN-MIB", "cpHHistSlot"))
if mibBuilder.loadTexts: cpHHistEntry.setStatus('mandatory')
cpHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHHistMode.setStatus('mandatory')
cpHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHHistShelf.setStatus('mandatory')
cpHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHHistSlot.setStatus('mandatory')
cpHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHLastBootTime.setStatus('mandatory')
cpHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHAvailTime.setStatus('mandatory')
cpHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpHErrFreeSecs.setStatus('mandatory')
ccHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 1), )
if mibBuilder.loadTexts: ccHistTable.setStatus('mandatory')
ccHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 1, 1), ).setIndexNames((0, "LUXN-MIB", "ccHMode"))
if mibBuilder.loadTexts: ccHistEntry.setStatus('mandatory')
ccHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHMode.setStatus('mandatory')
ccHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHNumEvents.setStatus('mandatory')
ccHCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2), )
if mibBuilder.loadTexts: ccHCntrTable.setStatus('mandatory')
ccHCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ccHCntrMode"), (0, "LUXN-MIB", "ccHCntrLocation"), (0, "LUXN-MIB", "ccHCntrShelf"), (0, "LUXN-MIB", "ccHCntrSlot"), (0, "LUXN-MIB", "ccHCntrType"))
if mibBuilder.loadTexts: ccHCntrEntry.setStatus('mandatory')
ccHCntrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHCntrMode.setStatus('mandatory')
ccHCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHCntrLocation.setStatus('mandatory')
ccHCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHCntrShelf.setStatus('mandatory')
ccHCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHCntrSlot.setStatus('mandatory')
ccHCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spi", 1), ("iwm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHCntrType.setStatus('mandatory')
ccHTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHTotPktSent.setStatus('mandatory')
ccHTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHTotPktRcvd.setStatus('mandatory')
ccHBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHBadPktRcvd.setStatus('mandatory')
ccHTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHTotBadTrans.setStatus('mandatory')
ccHBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHBytesSent.setStatus('mandatory')
ccHBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHBytesRcvd.setStatus('mandatory')
ccHMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHMsgsDlvrd.setStatus('mandatory')
ccHBufAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHBufAllocFail.setStatus('mandatory')
ccHEcbAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHEcbAllocFail.setStatus('mandatory')
ccHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3), )
if mibBuilder.loadTexts: ccHHistTable.setStatus('mandatory')
ccHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1), ).setIndexNames((0, "LUXN-MIB", "ccHHistMode"), (0, "LUXN-MIB", "ccHHistLocation"), (0, "LUXN-MIB", "ccHHistShelf"), (0, "LUXN-MIB", "ccHHistSlot"))
if mibBuilder.loadTexts: ccHHistEntry.setStatus('mandatory')
ccHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHHistMode.setStatus('mandatory')
ccHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHHistLocation.setStatus('mandatory')
ccHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHHistShelf.setStatus('mandatory')
ccHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHHistSlot.setStatus('mandatory')
ccHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHLastBootTime.setStatus('mandatory')
ccHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHAvailTime.setStatus('mandatory')
ccHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccHErrFreeSecs.setStatus('mandatory')
muxHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 1), )
if mibBuilder.loadTexts: muxHistTable.setStatus('mandatory')
muxHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 1, 1), ).setIndexNames((0, "LUXN-MIB", "muxHMode"))
if mibBuilder.loadTexts: muxHistEntry.setStatus('mandatory')
muxHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxHMode.setStatus('mandatory')
muxHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxHNumEvents.setStatus('mandatory')
muxHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2), )
if mibBuilder.loadTexts: muxHHistTable.setStatus('mandatory')
muxHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1), ).setIndexNames((0, "LUXN-MIB", "muxHHistMode"), (0, "LUXN-MIB", "muxHHistLocation"), (0, "LUXN-MIB", "muxHHistShelf"), (0, "LUXN-MIB", "muxHHistSlot"))
if mibBuilder.loadTexts: muxHHistEntry.setStatus('mandatory')
muxHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxHHistMode.setStatus('mandatory')
muxHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxHHistLocation.setStatus('mandatory')
muxHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxHHistShelf.setStatus('mandatory')
muxHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxHHistSlot.setStatus('mandatory')
muxHHistType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 10, 13, 21))).clone(namedValues=NamedValues(("mux", 4), ("demux", 5), ("w4cd", 10), ("w2cmd", 13), ("w4cm", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxHHistType.setStatus('mandatory')
muxHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxHLastBootTime.setStatus('mandatory')
muxHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxHAvailTime.setStatus('mandatory')
muxHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muxHErrFreeSecs.setStatus('mandatory')
psHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 6, 1), )
if mibBuilder.loadTexts: psHistTable.setStatus('mandatory')
psHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 6, 1, 1), ).setIndexNames((0, "LUXN-MIB", "psHMode"))
if mibBuilder.loadTexts: psHistEntry.setStatus('mandatory')
psHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 6, 1, 1, 1), HistoryMode())
if mibBuilder.loadTexts: psHMode.setStatus('mandatory')
psHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 6, 1, 1, 2), Counter32())
if mibBuilder.loadTexts: psHNumEvents.setStatus('mandatory')
fadmHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 1), )
if mibBuilder.loadTexts: fadmHistTable.setStatus('mandatory')
fadmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 1, 1), ).setIndexNames((0, "LUXN-MIB", "fadmHMode"))
if mibBuilder.loadTexts: fadmHistEntry.setStatus('mandatory')
fadmHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmHMode.setStatus('mandatory')
fadmHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmHNumEvents.setStatus('mandatory')
fadmHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2), )
if mibBuilder.loadTexts: fadmHHistTable.setStatus('mandatory')
fadmHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1), ).setIndexNames((0, "LUXN-MIB", "fadmHHistMode"), (0, "LUXN-MIB", "fadmHHistLocation"), (0, "LUXN-MIB", "fadmHHistShelf"), (0, "LUXN-MIB", "fadmHHistSlot"))
if mibBuilder.loadTexts: fadmHHistEntry.setStatus('mandatory')
fadmHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmHHistMode.setStatus('mandatory')
fadmHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmHHistLocation.setStatus('mandatory')
fadmHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmHHistShelf.setStatus('mandatory')
fadmHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmHHistSlot.setStatus('mandatory')
fadmHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmHLastBootTime.setStatus('mandatory')
fadmHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmHAvailTime.setStatus('mandatory')
fadmHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 7, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fadmHErrFreeSecs.setStatus('mandatory')
oppmHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 1), )
if mibBuilder.loadTexts: oppmHistTable.setStatus('mandatory')
oppmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 1, 1), ).setIndexNames((0, "LUXN-MIB", "oppmHMode"))
if mibBuilder.loadTexts: oppmHistEntry.setStatus('mandatory')
oppmHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 1, 1, 1), HistoryMode())
if mibBuilder.loadTexts: oppmHMode.setStatus('mandatory')
oppmHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 1, 1, 2), Counter32())
if mibBuilder.loadTexts: oppmHNumEvents.setStatus('mandatory')
oppmHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2), )
if mibBuilder.loadTexts: oppmHHistTable.setStatus('mandatory')
oppmHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1), ).setIndexNames((0, "LUXN-MIB", "oppmHHistMode"), (0, "LUXN-MIB", "oppmHHistLocation"), (0, "LUXN-MIB", "oppmHHistShelf"), (0, "LUXN-MIB", "oppmHHistSlot"))
if mibBuilder.loadTexts: oppmHHistEntry.setStatus('mandatory')
oppmHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 1), HistoryMode())
if mibBuilder.loadTexts: oppmHHistMode.setStatus('mandatory')
oppmHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 2), CardLocation())
if mibBuilder.loadTexts: oppmHHistLocation.setStatus('mandatory')
oppmHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 3), CardShelf())
if mibBuilder.loadTexts: oppmHHistShelf.setStatus('mandatory')
oppmHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 4), CardSlot())
if mibBuilder.loadTexts: oppmHHistSlot.setStatus('mandatory')
oppmHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 6), DateAndTime())
if mibBuilder.loadTexts: oppmHLastBootTime.setStatus('mandatory')
oppmHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: oppmHAvailTime.setStatus('mandatory')
oppmHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 8, 2, 1, 8), Counter32())
if mibBuilder.loadTexts: oppmHErrFreeSecs.setStatus('mandatory')
mcmHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 1), )
if mibBuilder.loadTexts: mcmHistTable.setStatus('mandatory')
mcmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 1, 1), ).setIndexNames((0, "LUXN-MIB", "mcmHMode"))
if mibBuilder.loadTexts: mcmHistEntry.setStatus('mandatory')
mcmHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHMode.setStatus('mandatory')
mcmHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHNumEvents.setStatus('mandatory')
mcmHCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2), )
if mibBuilder.loadTexts: mcmHCntrTable.setStatus('mandatory')
mcmHCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1), ).setIndexNames((0, "LUXN-MIB", "mcmHCntrMode"), (0, "LUXN-MIB", "mcmHCntrLocation"), (0, "LUXN-MIB", "mcmHCntrShelf"), (0, "LUXN-MIB", "mcmHCntrSlot"), (0, "LUXN-MIB", "mcmHCntrType"))
if mibBuilder.loadTexts: mcmHCntrEntry.setStatus('mandatory')
mcmHCntrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHCntrMode.setStatus('mandatory')
mcmHCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHCntrLocation.setStatus('mandatory')
mcmHCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHCntrShelf.setStatus('mandatory')
mcmHCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHCntrSlot.setStatus('mandatory')
mcmHCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spi", 1), ("iwm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHCntrType.setStatus('mandatory')
mcmHTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHTotPktSent.setStatus('mandatory')
mcmHTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHTotPktRcvd.setStatus('mandatory')
mcmHBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHBadPktRcvd.setStatus('mandatory')
mcmHTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHTotBadTrans.setStatus('mandatory')
mcmHBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHBytesSent.setStatus('mandatory')
mcmHBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHBytesRcvd.setStatus('mandatory')
mcmHMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHMsgsDlvrd.setStatus('mandatory')
mcmHBufAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHBufAllocFail.setStatus('mandatory')
mcmHEcbAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmHEcbAllocFail.setStatus('mandatory')
mcmPortHIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3), )
if mibBuilder.loadTexts: mcmPortHIntervalTable.setStatus('mandatory')
mcmPortHIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1), ).setIndexNames((0, "LUXN-MIB", "mcmPortHIntervalLocation"), (0, "LUXN-MIB", "mcmPortHIntervalShelf"), (0, "LUXN-MIB", "mcmPortHIntervalSlot"), (0, "LUXN-MIB", "mcmPortHIntervalPort"), (0, "LUXN-MIB", "mcmPortHIntervalNumber"))
if mibBuilder.loadTexts: mcmPortHIntervalEntry.setStatus('mandatory')
mcmPortHIntervalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalLocation.setStatus('mandatory')
mcmPortHIntervalShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalShelf.setStatus('mandatory')
mcmPortHIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalSlot.setStatus('mandatory')
mcmPortHIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalPort.setStatus('mandatory')
mcmPortHIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalNumber.setStatus('mandatory')
mcmPortHIntervalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalASs.setStatus('mandatory')
mcmPortHIntervalFrameASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 7), Counter32())
if mibBuilder.loadTexts: mcmPortHIntervalFrameASs.setStatus('mandatory')
mcmPortHIntervalFEs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalFEs.setStatus('mandatory')
mcmPortHIntervalCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalCRCErrs.setStatus('mandatory')
mcmPortHIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalSESs.setStatus('mandatory')
mcmPortHIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalSEFSs.setStatus('mandatory')
mcmPortHIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalUASs.setStatus('mandatory')
mcmPortHIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalLESs.setStatus('mandatory')
mcmPortHIntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalBESs.setStatus('mandatory')
mcmPortHIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalDMs.setStatus('mandatory')
mcmPortHIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHIntervalLCVs.setStatus('mandatory')
mcmPortHTotalTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4), )
if mibBuilder.loadTexts: mcmPortHTotalTable.setStatus('mandatory')
mcmPortHTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1), ).setIndexNames((0, "LUXN-MIB", "mcmPortHTotalLocation"), (0, "LUXN-MIB", "mcmPortHTotalShelf"), (0, "LUXN-MIB", "mcmPortHTotalSlot"), (0, "LUXN-MIB", "mcmPortHTotalPort"))
if mibBuilder.loadTexts: mcmPortHTotalEntry.setStatus('mandatory')
mcmPortHTotalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalLocation.setStatus('mandatory')
mcmPortHTotalShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalShelf.setStatus('mandatory')
mcmPortHTotalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalSlot.setStatus('mandatory')
mcmPortHTotalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalPort.setStatus('mandatory')
mcmPortHTotalASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalASs.setStatus('mandatory')
mcmPortHTotalFrameASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 6), Counter32())
if mibBuilder.loadTexts: mcmPortHTotalFrameASs.setStatus('mandatory')
mcmPortHTotalFEs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalFEs.setStatus('mandatory')
mcmPortHTotalCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalCRCErrs.setStatus('mandatory')
mcmPortHTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalSESs.setStatus('mandatory')
mcmPortHTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalSEFSs.setStatus('mandatory')
mcmPortHTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalUASs.setStatus('mandatory')
mcmPortHTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalLESs.setStatus('mandatory')
mcmPortHTotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalBESs.setStatus('mandatory')
mcmPortHTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalDMs.setStatus('mandatory')
mcmPortHTotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 9, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmPortHTotalLCVs.setStatus('mandatory')
fnHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 10, 1), )
if mibBuilder.loadTexts: fnHistTable.setStatus('mandatory')
fnHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 10, 1, 1), ).setIndexNames((0, "LUXN-MIB", "fnHMode"))
if mibBuilder.loadTexts: fnHistEntry.setStatus('mandatory')
fnHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 10, 1, 1, 1), HistoryMode())
if mibBuilder.loadTexts: fnHMode.setStatus('mandatory')
fnHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 10, 1, 1, 2), Counter32())
if mibBuilder.loadTexts: fnHNumEvents.setStatus('mandatory')
csimHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 1), )
if mibBuilder.loadTexts: csimHistTable.setStatus('mandatory')
csimHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 1, 1), ).setIndexNames((0, "LUXN-MIB", "csimHMode"))
if mibBuilder.loadTexts: csimHistEntry.setStatus('mandatory')
csimHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 1, 1, 1), HistoryMode())
if mibBuilder.loadTexts: csimHMode.setStatus('mandatory')
csimHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 1, 1, 2), Counter32())
if mibBuilder.loadTexts: csimHNumEvents.setStatus('mandatory')
csimHistIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2), )
if mibBuilder.loadTexts: csimHistIntervalTable.setStatus('mandatory')
csimHistIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1), ).setIndexNames((0, "LUXN-MIB", "csimIntervalLocation"), (0, "LUXN-MIB", "csimIntervalShelf"), (0, "LUXN-MIB", "csimIntervalSlot"), (0, "LUXN-MIB", "csimIntervalNumber"))
if mibBuilder.loadTexts: csimHistIntervalEntry.setStatus('mandatory')
csimIntervalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimIntervalLocation.setStatus('mandatory')
csimIntervalShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimIntervalShelf.setStatus('mandatory')
csimIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimIntervalSlot.setStatus('mandatory')
csimIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimIntervalNumber.setStatus('mandatory')
csimIntervalEFIs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimIntervalEFIs.setStatus('mandatory')
csimIntervalEIs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimIntervalEIs.setStatus('mandatory')
csimIntervalSEIs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimIntervalSEIs.setStatus('mandatory')
csimIntervalBERs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimIntervalBERs.setStatus('mandatory')
csimIntervalUAIs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimIntervalUAIs.setStatus('mandatory')
csimIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 10), Boolean())
if mibBuilder.loadTexts: csimIntervalValidData.setStatus('mandatory')
csimIntervalDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 11, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csimIntervalDateTime.setStatus('mandatory')
rpsmHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 1), )
if mibBuilder.loadTexts: rpsmHistTable.setStatus('mandatory')
rpsmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 1, 1), ).setIndexNames((0, "LUXN-MIB", "oppmHMode"))
if mibBuilder.loadTexts: rpsmHistEntry.setStatus('mandatory')
rpsmHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 1, 1, 1), HistoryMode())
if mibBuilder.loadTexts: rpsmHMode.setStatus('mandatory')
rpsmHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 1, 1, 2), Counter32())
if mibBuilder.loadTexts: rpsmHNumEvents.setStatus('mandatory')
rpsmHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2), )
if mibBuilder.loadTexts: rpsmHHistTable.setStatus('mandatory')
rpsmHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1), ).setIndexNames((0, "LUXN-MIB", "rpsmHHistMode"), (0, "LUXN-MIB", "rpsmHHistLocation"), (0, "LUXN-MIB", "rpsmHHistShelf"), (0, "LUXN-MIB", "rpsmHHistSlot"))
if mibBuilder.loadTexts: rpsmHHistEntry.setStatus('mandatory')
rpsmHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 1), HistoryMode())
if mibBuilder.loadTexts: rpsmHHistMode.setStatus('mandatory')
rpsmHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 2), CardLocation())
if mibBuilder.loadTexts: rpsmHHistLocation.setStatus('mandatory')
rpsmHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 3), CardShelf())
if mibBuilder.loadTexts: rpsmHHistShelf.setStatus('mandatory')
rpsmHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 4), CardSlot())
if mibBuilder.loadTexts: rpsmHHistSlot.setStatus('mandatory')
rpsmHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 6), DateAndTime())
if mibBuilder.loadTexts: rpsmHLastBootTime.setStatus('mandatory')
rpsmHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: rpsmHAvailTime.setStatus('mandatory')
rpsmHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 12, 2, 1, 8), Counter32())
if mibBuilder.loadTexts: rpsmHErrFreeSecs.setStatus('mandatory')
rsdmHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 1), )
if mibBuilder.loadTexts: rsdmHistTable.setStatus('mandatory')
rsdmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 1, 1), ).setIndexNames((0, "LUXN-MIB", "rsdmHMode"))
if mibBuilder.loadTexts: rsdmHistEntry.setStatus('mandatory')
rsdmHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 1, 1, 1), HistoryMode())
if mibBuilder.loadTexts: rsdmHMode.setStatus('mandatory')
rsdmHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 1, 1, 2), Counter32())
if mibBuilder.loadTexts: rsdmHNumEvents.setStatus('mandatory')
rsdmHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2), )
if mibBuilder.loadTexts: rsdmHHistTable.setStatus('mandatory')
rsdmHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1), ).setIndexNames((0, "LUXN-MIB", "rsdmHHistMode"), (0, "LUXN-MIB", "rsdmHHistLocation"), (0, "LUXN-MIB", "rsdmHHistShelf"), (0, "LUXN-MIB", "rsdmHHistSlot"))
if mibBuilder.loadTexts: rsdmHHistEntry.setStatus('mandatory')
rsdmHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 1), HistoryMode())
if mibBuilder.loadTexts: rsdmHHistMode.setStatus('mandatory')
rsdmHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 2), CardLocation())
if mibBuilder.loadTexts: rsdmHHistLocation.setStatus('mandatory')
rsdmHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 3), CardShelf())
if mibBuilder.loadTexts: rsdmHHistShelf.setStatus('mandatory')
rsdmHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 4), CardSlot())
if mibBuilder.loadTexts: rsdmHHistSlot.setStatus('mandatory')
rsdmHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 6), DateAndTime())
if mibBuilder.loadTexts: rsdmHLastBootTime.setStatus('mandatory')
rsdmHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: rsdmHAvailTime.setStatus('mandatory')
rsdmHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 13, 2, 1, 8), Counter32())
if mibBuilder.loadTexts: rsdmHErrFreeSecs.setStatus('mandatory')
rtdmHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 1), )
if mibBuilder.loadTexts: rtdmHistTable.setStatus('mandatory')
rtdmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 1, 1), ).setIndexNames((0, "LUXN-MIB", "rtdmHMode"))
if mibBuilder.loadTexts: rtdmHistEntry.setStatus('mandatory')
rtdmHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 1, 1, 1), HistoryMode())
if mibBuilder.loadTexts: rtdmHMode.setStatus('mandatory')
rtdmHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 1, 1, 2), Counter32())
if mibBuilder.loadTexts: rtdmHNumEvents.setStatus('mandatory')
rtdmHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2), )
if mibBuilder.loadTexts: rtdmHHistTable.setStatus('mandatory')
rtdmHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1), ).setIndexNames((0, "LUXN-MIB", "rtdmHHistMode"), (0, "LUXN-MIB", "rtdmHHistLocation"), (0, "LUXN-MIB", "rtdmHHistShelf"), (0, "LUXN-MIB", "rtdmHHistSlot"))
if mibBuilder.loadTexts: rtdmHHistEntry.setStatus('mandatory')
rtdmHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 1), HistoryMode())
if mibBuilder.loadTexts: rtdmHHistMode.setStatus('mandatory')
rtdmHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 2), CardLocation())
if mibBuilder.loadTexts: rtdmHHistLocation.setStatus('mandatory')
rtdmHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 3), CardShelf())
if mibBuilder.loadTexts: rtdmHHistShelf.setStatus('mandatory')
rtdmHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 4), CardSlot())
if mibBuilder.loadTexts: rtdmHHistSlot.setStatus('mandatory')
rtdmHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 5), DateAndTime())
if mibBuilder.loadTexts: rtdmHLastBootTime.setStatus('mandatory')
rtdmHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 6), Counter32())
if mibBuilder.loadTexts: rtdmHAvailTime.setStatus('mandatory')
rtdmHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 14, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: rtdmHErrFreeSecs.setStatus('mandatory')
osamHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 1), )
if mibBuilder.loadTexts: osamHistTable.setStatus('mandatory')
osamHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 1, 1), ).setIndexNames((0, "LUXN-MIB", "osamHMode"))
if mibBuilder.loadTexts: osamHistEntry.setStatus('mandatory')
osamHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamHMode.setStatus('mandatory')
osamHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamHNumEvents.setStatus('mandatory')
osamHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2), )
if mibBuilder.loadTexts: osamHHistTable.setStatus('mandatory')
osamHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1), ).setIndexNames((0, "LUXN-MIB", "osamHHistMode"), (0, "LUXN-MIB", "osamHHistLocation"), (0, "LUXN-MIB", "osamHHistShelf"), (0, "LUXN-MIB", "osamHHistSlot"))
if mibBuilder.loadTexts: osamHHistEntry.setStatus('mandatory')
osamHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamHHistMode.setStatus('mandatory')
osamHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamHHistLocation.setStatus('mandatory')
osamHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamHHistShelf.setStatus('mandatory')
osamHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamHHistSlot.setStatus('mandatory')
osamHHistLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamHHistLastBootTime.setStatus('mandatory')
osamHHistAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamHHistAvailTime.setStatus('mandatory')
osamHHistErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 15, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: osamHHistErrFreeSecs.setStatus('mandatory')
rsmHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 1), )
if mibBuilder.loadTexts: rsmHistTable.setStatus('mandatory')
rsmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 1, 1), ).setIndexNames((0, "LUXN-MIB", "rsmHMode"))
if mibBuilder.loadTexts: rsmHistEntry.setStatus('mandatory')
rsmHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmHMode.setStatus('mandatory')
rsmHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmHNumEvents.setStatus('mandatory')
rsmHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2), )
if mibBuilder.loadTexts: rsmHHistTable.setStatus('mandatory')
rsmHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1), ).setIndexNames((0, "LUXN-MIB", "rsmHHistMode"), (0, "LUXN-MIB", "rsmHHistLocation"), (0, "LUXN-MIB", "rsmHHistShelf"), (0, "LUXN-MIB", "rsmHHistSlot"))
if mibBuilder.loadTexts: rsmHHistEntry.setStatus('mandatory')
rsmHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmHHistMode.setStatus('mandatory')
rsmHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmHHistLocation.setStatus('mandatory')
rsmHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmHHistShelf.setStatus('mandatory')
rsmHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmHHistSlot.setStatus('mandatory')
rsmHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmHLastBootTime.setStatus('mandatory')
rsmHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmHAvailTime.setStatus('mandatory')
rsmHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 16, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsmHErrFreeSecs.setStatus('mandatory')
upsmHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 1), )
if mibBuilder.loadTexts: upsmHistTable.setStatus('mandatory')
upsmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 1, 1), ).setIndexNames((0, "LUXN-MIB", "upsmHMode"))
if mibBuilder.loadTexts: upsmHistEntry.setStatus('mandatory')
upsmHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmHMode.setStatus('mandatory')
upsmHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmHNumEvents.setStatus('mandatory')
upsmHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2), )
if mibBuilder.loadTexts: upsmHHistTable.setStatus('mandatory')
upsmHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1), ).setIndexNames((0, "LUXN-MIB", "upsmHHistMode"), (0, "LUXN-MIB", "upsmHHistLocation"), (0, "LUXN-MIB", "upsmHHistShelf"), (0, "LUXN-MIB", "upsmHHistSlot"))
if mibBuilder.loadTexts: upsmHHistEntry.setStatus('mandatory')
upsmHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmHHistMode.setStatus('mandatory')
upsmHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmHHistLocation.setStatus('mandatory')
upsmHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmHHistShelf.setStatus('mandatory')
upsmHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmHHistSlot.setStatus('mandatory')
upsmHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmHLastBootTime.setStatus('mandatory')
upsmHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmHAvailTime.setStatus('mandatory')
upsmHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 17, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsmHErrFreeSecs.setStatus('mandatory')
mcmescHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 1), )
if mibBuilder.loadTexts: mcmescHistTable.setStatus('mandatory')
mcmescHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 1, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescHMode"))
if mibBuilder.loadTexts: mcmescHistEntry.setStatus('mandatory')
mcmescHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHMode.setStatus('mandatory')
mcmescHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHNumEvents.setStatus('mandatory')
mcmescHCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2), )
if mibBuilder.loadTexts: mcmescHCntrTable.setStatus('mandatory')
mcmescHCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescHCntrMode"), (0, "LUXN-MIB", "mcmescHCntrLocation"), (0, "LUXN-MIB", "mcmescHCntrShelf"), (0, "LUXN-MIB", "mcmescHCntrSlot"), (0, "LUXN-MIB", "mcmescHCntrType"))
if mibBuilder.loadTexts: mcmescHCntrEntry.setStatus('mandatory')
mcmescHCntrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHCntrMode.setStatus('mandatory')
mcmescHCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHCntrLocation.setStatus('mandatory')
mcmescHCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHCntrShelf.setStatus('mandatory')
mcmescHCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHCntrSlot.setStatus('mandatory')
mcmescHCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spi", 1), ("iwm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHCntrType.setStatus('mandatory')
mcmescHTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHTotPktSent.setStatus('mandatory')
mcmescHTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHTotPktRcvd.setStatus('mandatory')
mcmescHBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHBadPktRcvd.setStatus('mandatory')
mcmescHTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHTotBadTrans.setStatus('mandatory')
mcmescHBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHBytesSent.setStatus('mandatory')
mcmescHBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHBytesRcvd.setStatus('mandatory')
mcmescHMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescHMsgsDlvrd.setStatus('mandatory')
tapHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 1), )
if mibBuilder.loadTexts: tapHistTable.setStatus('mandatory')
tapHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 1, 1), ).setIndexNames((0, "LUXN-MIB", "tapHMode"))
if mibBuilder.loadTexts: tapHistEntry.setStatus('mandatory')
tapHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapHMode.setStatus('mandatory')
tapHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapHNumEvents.setStatus('mandatory')
tapHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2), )
if mibBuilder.loadTexts: tapHHistTable.setStatus('mandatory')
tapHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1), ).setIndexNames((0, "LUXN-MIB", "tapHHistMode"), (0, "LUXN-MIB", "tapHHistLocation"), (0, "LUXN-MIB", "tapHHistShelf"), (0, "LUXN-MIB", "tapHHistSlot"))
if mibBuilder.loadTexts: tapHHistEntry.setStatus('mandatory')
tapHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapHHistMode.setStatus('mandatory')
tapHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapHHistLocation.setStatus('mandatory')
tapHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapHHistShelf.setStatus('mandatory')
tapHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapHHistSlot.setStatus('mandatory')
tapHHistType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 5), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapHHistType.setStatus('mandatory')
tapHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapHLastBootTime.setStatus('mandatory')
tapHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapHAvailTime.setStatus('mandatory')
tapHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 19, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapHErrFreeSecs.setStatus('mandatory')
voadmHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 1), )
if mibBuilder.loadTexts: voadmHistTable.setStatus('mandatory')
voadmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 1, 1), ).setIndexNames((0, "LUXN-MIB", "voadmHMode"))
if mibBuilder.loadTexts: voadmHistEntry.setStatus('mandatory')
voadmHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmHMode.setStatus('mandatory')
voadmHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmHNumEvents.setStatus('mandatory')
voadmHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2), )
if mibBuilder.loadTexts: voadmHHistTable.setStatus('mandatory')
voadmHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1), ).setIndexNames((0, "LUXN-MIB", "voadmHHistMode"), (0, "LUXN-MIB", "voadmHHistLocation"), (0, "LUXN-MIB", "voadmHHistShelf"), (0, "LUXN-MIB", "voadmHHistSlot"))
if mibBuilder.loadTexts: voadmHHistEntry.setStatus('mandatory')
voadmHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmHHistMode.setStatus('mandatory')
voadmHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmHHistLocation.setStatus('mandatory')
voadmHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmHHistShelf.setStatus('mandatory')
voadmHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmHHistSlot.setStatus('mandatory')
voadmHHistType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 5), CardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmHHistType.setStatus('mandatory')
voadmHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmHLastBootTime.setStatus('mandatory')
voadmHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmHAvailTime.setStatus('mandatory')
voadmHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 20, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voadmHErrFreeSecs.setStatus('mandatory')
dmmHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 1), )
if mibBuilder.loadTexts: dmmHistTable.setStatus('mandatory')
dmmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 1, 1), ).setIndexNames((0, "LUXN-MIB", "dmmHMode"))
if mibBuilder.loadTexts: dmmHistEntry.setStatus('mandatory')
dmmHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmHMode.setStatus('mandatory')
dmmHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmHNumEvents.setStatus('mandatory')
dmmHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2), )
if mibBuilder.loadTexts: dmmHHistTable.setStatus('mandatory')
dmmHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1), ).setIndexNames((0, "LUXN-MIB", "dmmHHistMode"), (0, "LUXN-MIB", "dmmHHistLocation"), (0, "LUXN-MIB", "dmmHHistShelf"), (0, "LUXN-MIB", "dmmHHistSlot"))
if mibBuilder.loadTexts: dmmHHistEntry.setStatus('mandatory')
dmmHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmHHistMode.setStatus('mandatory')
dmmHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmHHistLocation.setStatus('mandatory')
dmmHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmHHistShelf.setStatus('mandatory')
dmmHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmHHistSlot.setStatus('mandatory')
dmmHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmHLastBootTime.setStatus('mandatory')
dmmHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmHAvailTime.setStatus('mandatory')
dmmHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 21, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dmmHErrFreeSecs.setStatus('mandatory')
ocm10gfHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 1), )
if mibBuilder.loadTexts: ocm10gfHistTable.setStatus('mandatory')
ocm10gfHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 1, 1), ).setIndexNames((0, "LUXN-MIB", "ocm10gfHMode"))
if mibBuilder.loadTexts: ocm10gfHistEntry.setStatus('mandatory')
ocm10gfHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfHMode.setStatus('mandatory')
ocm10gfHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfHNumEvents.setStatus('mandatory')
ocm10gfHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2), )
if mibBuilder.loadTexts: ocm10gfHHistTable.setStatus('mandatory')
ocm10gfHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ocm10gfHHistMode"), (0, "LUXN-MIB", "ocm10gfHHistLocation"), (0, "LUXN-MIB", "ocm10gfHHistShelf"), (0, "LUXN-MIB", "ocm10gfHHistSlot"))
if mibBuilder.loadTexts: ocm10gfHHistEntry.setStatus('mandatory')
ocm10gfHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfHHistMode.setStatus('mandatory')
ocm10gfHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfHHistLocation.setStatus('mandatory')
ocm10gfHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfHHistShelf.setStatus('mandatory')
ocm10gfHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfHHistSlot.setStatus('mandatory')
ocm10gfHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfHLastBootTime.setStatus('mandatory')
ocm10gfHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfHAvailTime.setStatus('mandatory')
ocm10gfHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 22, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm10gfHErrFreeSecs.setStatus('mandatory')
ocm2HistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 1), )
if mibBuilder.loadTexts: ocm2HistTable.setStatus('mandatory')
ocm2HistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 1, 1), ).setIndexNames((0, "LUXN-MIB", "ocm2HMode"))
if mibBuilder.loadTexts: ocm2HistEntry.setStatus('mandatory')
ocm2HMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2HMode.setStatus('mandatory')
ocm2HNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2HNumEvents.setStatus('mandatory')
ocm2HHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2), )
if mibBuilder.loadTexts: ocm2HHistTable.setStatus('mandatory')
ocm2HHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ocm2HHistMode"), (0, "LUXN-MIB", "ocm2HHistLocation"), (0, "LUXN-MIB", "ocm2HHistShelf"), (0, "LUXN-MIB", "ocm2HHistSlot"))
if mibBuilder.loadTexts: ocm2HHistEntry.setStatus('mandatory')
ocm2HHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2HHistMode.setStatus('mandatory')
ocm2HHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2HHistLocation.setStatus('mandatory')
ocm2HHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2HHistShelf.setStatus('mandatory')
ocm2HHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2HHistSlot.setStatus('mandatory')
ocm2HLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2HLastBootTime.setStatus('mandatory')
ocm2HAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2HAvailTime.setStatus('mandatory')
ocm2HErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 23, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm2HErrFreeSecs.setStatus('mandatory')
oscHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 1), )
if mibBuilder.loadTexts: oscHistTable.setStatus('mandatory')
oscHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 1, 1), ).setIndexNames((0, "LUXN-MIB", "oscHMode"))
if mibBuilder.loadTexts: oscHistEntry.setStatus('mandatory')
oscHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscHMode.setStatus('mandatory')
oscHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscHNumEvents.setStatus('mandatory')
oscHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2), )
if mibBuilder.loadTexts: oscHHistTable.setStatus('mandatory')
oscHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1), ).setIndexNames((0, "LUXN-MIB", "oscHHistMode"), (0, "LUXN-MIB", "oscHHistLocation"), (0, "LUXN-MIB", "oscHHistShelf"), (0, "LUXN-MIB", "oscHHistSlot"))
if mibBuilder.loadTexts: oscHHistEntry.setStatus('mandatory')
oscHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscHHistMode.setStatus('mandatory')
oscHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 2), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscHHistLocation.setStatus('mandatory')
oscHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscHHistShelf.setStatus('mandatory')
oscHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscHHistSlot.setStatus('mandatory')
oscHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscHLastBootTime.setStatus('mandatory')
oscHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscHAvailTime.setStatus('mandatory')
oscHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 24, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oscHErrFreeSecs.setStatus('mandatory')
ocm4gHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 1), )
if mibBuilder.loadTexts: ocm4gHistTable.setStatus('mandatory')
ocm4gHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 1, 1), ).setIndexNames((0, "LUXN-MIB", "ocm4gHMode"))
if mibBuilder.loadTexts: ocm4gHistEntry.setStatus('mandatory')
ocm4gHMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 1, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gHMode.setStatus('mandatory')
ocm4gHNumEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gHNumEvents.setStatus('mandatory')
ocm4gHHistTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2), )
if mibBuilder.loadTexts: ocm4gHHistTable.setStatus('mandatory')
ocm4gHHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ocm4gHHistMode"), (0, "LUXN-MIB", "ocm4gHHistLocation"), (0, "LUXN-MIB", "ocm4gHHistShelf"), (0, "LUXN-MIB", "ocm4gHHistSlot"))
if mibBuilder.loadTexts: ocm4gHHistEntry.setStatus('mandatory')
ocm4gHHistMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 1), HistoryMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gHHistMode.setStatus('mandatory')
ocm4gHHistLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("local", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gHHistLocation.setStatus('mandatory')
ocm4gHHistShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 3), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gHHistShelf.setStatus('mandatory')
ocm4gHHistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 4), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gHHistSlot.setStatus('mandatory')
ocm4gHLastBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gHLastBootTime.setStatus('mandatory')
ocm4gHAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gHAvailTime.setStatus('mandatory')
ocm4gHErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 25, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocm4gHErrFreeSecs.setStatus('mandatory')
mcmescPortHIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3), )
if mibBuilder.loadTexts: mcmescPortHIntervalTable.setStatus('mandatory')
mcmescPortHIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescPortHIntervalLocation"), (0, "LUXN-MIB", "mcmescPortHIntervalShelf"), (0, "LUXN-MIB", "mcmescPortHIntervalSlot"), (0, "LUXN-MIB", "mcmescPortHIntervalPort"), (0, "LUXN-MIB", "mcmescPortHIntervalNumber"))
if mibBuilder.loadTexts: mcmescPortHIntervalEntry.setStatus('mandatory')
mcmescPortHIntervalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHIntervalLocation.setStatus('mandatory')
mcmescPortHIntervalShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHIntervalShelf.setStatus('mandatory')
mcmescPortHIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHIntervalSlot.setStatus('mandatory')
mcmescPortHIntervalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHIntervalPort.setStatus('mandatory')
mcmescPortHIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHIntervalNumber.setStatus('mandatory')
mcmescPortHIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHIntervalDuration.setStatus('mandatory')
mcmescPortHIntervalEns = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHIntervalEns.setStatus('mandatory')
mcmescPortHIntervalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHIntervalLoss.setStatus('mandatory')
mcmescPortHIntervalCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHIntervalCrcErr.setStatus('mandatory')
mcmescPortHIntervalOobErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHIntervalOobErr.setStatus('mandatory')
mcmescPortHIntervalRdpErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHIntervalRdpErr.setStatus('mandatory')
mcmescLinkHIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4), )
if mibBuilder.loadTexts: mcmescLinkHIntervalTable.setStatus('mandatory')
mcmescLinkHIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescLinkHIntervalLocation"), (0, "LUXN-MIB", "mcmescLinkHIntervalShelf"), (0, "LUXN-MIB", "mcmescLinkHIntervalSlot"), (0, "LUXN-MIB", "mcmescLinkHIntervalNumber"))
if mibBuilder.loadTexts: mcmescLinkHIntervalEntry.setStatus('mandatory')
mcmescLinkHIntervalLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHIntervalLocation.setStatus('mandatory')
mcmescLinkHIntervalShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHIntervalShelf.setStatus('mandatory')
mcmescLinkHIntervalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHIntervalSlot.setStatus('mandatory')
mcmescLinkHIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHIntervalNumber.setStatus('mandatory')
mcmescLinkHIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHIntervalDuration.setStatus('mandatory')
mcmescLinkHIntervalTsos = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHIntervalTsos.setStatus('mandatory')
mcmescLinkHIntervalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHIntervalLoss.setStatus('mandatory')
mcmescLinkHIntervalCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHIntervalCrcErr.setStatus('mandatory')
mcmescLinkHIntervalOobErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHIntervalOobErr.setStatus('mandatory')
mcmescLinkHIntervalRdpErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHIntervalRdpErr.setStatus('mandatory')
mcmescPortHTotalTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5), )
if mibBuilder.loadTexts: mcmescPortHTotalTable.setStatus('mandatory')
mcmescPortHTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescPortHTotalCardLocation"), (0, "LUXN-MIB", "mcmescPortHTotalCardShelf"), (0, "LUXN-MIB", "mcmescPortHTotalCardSlot"), (0, "LUXN-MIB", "mcmescPortHTotalPort"))
if mibBuilder.loadTexts: mcmescPortHTotalEntry.setStatus('mandatory')
mcmescPortHTotalCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHTotalCardLocation.setStatus('mandatory')
mcmescPortHTotalCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHTotalCardShelf.setStatus('mandatory')
mcmescPortHTotalCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHTotalCardSlot.setStatus('mandatory')
mcmescPortHTotalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHTotalPort.setStatus('mandatory')
mcmescPortHTotalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHTotalDuration.setStatus('mandatory')
mcmescPortHTotalEns = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHTotalEns.setStatus('mandatory')
mcmescPortHTotalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHTotalLoss.setStatus('mandatory')
mcmescPortHTotalCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHTotalCrcErr.setStatus('mandatory')
mcmescPortHTotalOobErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHTotalOobErr.setStatus('mandatory')
mcmescPortHTotalRdpErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 5, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortHTotalRdpErr.setStatus('mandatory')
mcmescLinkHTotalTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6), )
if mibBuilder.loadTexts: mcmescLinkHTotalTable.setStatus('mandatory')
mcmescLinkHTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescLinkHTotalCardLocation"), (0, "LUXN-MIB", "mcmescLinkHTotalCardShelf"), (0, "LUXN-MIB", "mcmescLinkHTotalCardSlot"))
if mibBuilder.loadTexts: mcmescLinkHTotalEntry.setStatus('mandatory')
mcmescLinkHTotalCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHTotalCardLocation.setStatus('mandatory')
mcmescLinkHTotalCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHTotalCardShelf.setStatus('mandatory')
mcmescLinkHTotalCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHTotalCardSlot.setStatus('mandatory')
mcmescLinkHTotalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHTotalDuration.setStatus('mandatory')
mcmescLinkHTotalTsos = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHTotalTsos.setStatus('mandatory')
mcmescLinkHTotalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHTotalLoss.setStatus('mandatory')
mcmescLinkHTotalCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHTotalCrcErr.setStatus('mandatory')
mcmescLinkHTotalOobErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHTotalOobErr.setStatus('mandatory')
mcmescLinkHTotalRdpErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 2, 18, 6, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkHTotalRdpErr.setStatus('mandatory')
sysCStatus = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 1, 1), CardStatus())
if mibBuilder.loadTexts: sysCStatus.setStatus('mandatory')
sysCSetMode = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 1, 2), FlagType())
if mibBuilder.loadTexts: sysCSetMode.setStatus('mandatory')
sysCAvailTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 1, 3), Counter32())
if mibBuilder.loadTexts: sysCAvailTime.setStatus('mandatory')
sysCErrFreeSecs = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 1, 4), Counter32())
if mibBuilder.loadTexts: sysCErrFreeSecs.setStatus('mandatory')
dlCStatus = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 2, 1), DownloadStatus())
if mibBuilder.loadTexts: dlCStatus.setStatus('mandatory')
dlCOkDownloads = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 2, 2), Counter32())
if mibBuilder.loadTexts: dlCOkDownloads.setStatus('mandatory')
dlCBadDownloads = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 2, 3), Counter32())
if mibBuilder.loadTexts: dlCBadDownloads.setStatus('mandatory')
dlCLongestTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 2, 4), Gauge32())
if mibBuilder.loadTexts: dlCLongestTime.setStatus('mandatory')
dlCLongestSize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 2, 5), Gauge32())
if mibBuilder.loadTexts: dlCLongestSize.setStatus('mandatory')
dlCCounterFlag = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 2, 6), FlagType())
if mibBuilder.loadTexts: dlCCounterFlag.setStatus('mandatory')
cpCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 1), Counter32())
if mibBuilder.loadTexts: cpCNumEvents.setStatus('mandatory')
cpCTrapsSent = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 2), Counter32())
if mibBuilder.loadTexts: cpCTrapsSent.setStatus('mandatory')
cpCSNMPCmdsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 3), Counter32())
if mibBuilder.loadTexts: cpCSNMPCmdsRcvd.setStatus('mandatory')
cpCCounterFlag = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 4), FlagType())
if mibBuilder.loadTexts: cpCCounterFlag.setStatus('mandatory')
cpCCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5), )
if mibBuilder.loadTexts: cpCCntrTable.setStatus('mandatory')
cpCCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1), ).setIndexNames((0, "LUXN-MIB", "cpCCntrShelf"), (0, "LUXN-MIB", "cpCCntrSlot"), (0, "LUXN-MIB", "cpCCntrType"))
if mibBuilder.loadTexts: cpCCntrEntry.setStatus('mandatory')
cpCCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 1), CardShelf())
if mibBuilder.loadTexts: cpCCntrShelf.setStatus('mandatory')
cpCCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 2), CardSlot())
if mibBuilder.loadTexts: cpCCntrSlot.setStatus('mandatory')
cpCCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("spi", 1))))
if mibBuilder.loadTexts: cpCCntrType.setStatus('mandatory')
cpCTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 4), Counter32())
if mibBuilder.loadTexts: cpCTotPktSent.setStatus('mandatory')
cpCTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 5), Counter32())
if mibBuilder.loadTexts: cpCTotPktRcvd.setStatus('mandatory')
cpCBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 6), Counter32())
if mibBuilder.loadTexts: cpCBadPktRcvd.setStatus('mandatory')
cpCTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 7), Counter32())
if mibBuilder.loadTexts: cpCTotBadTrans.setStatus('mandatory')
cpCBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 8), Counter32())
if mibBuilder.loadTexts: cpCBytesSent.setStatus('mandatory')
cpCBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 9), Counter32())
if mibBuilder.loadTexts: cpCBytesRcvd.setStatus('mandatory')
cpCMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 10), Counter32())
if mibBuilder.loadTexts: cpCMsgsDlvrd.setStatus('mandatory')
cpCBufAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 11), Counter32())
if mibBuilder.loadTexts: cpCBufAllocFail.setStatus('mandatory')
cpCEcbAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 5, 1, 12), Counter32())
if mibBuilder.loadTexts: cpCEcbAllocFail.setStatus('mandatory')
cpCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6), )
if mibBuilder.loadTexts: cpCPerfTable.setStatus('mandatory')
cpCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1), ).setIndexNames((0, "LUXN-MIB", "cpCPerfShelf"), (0, "LUXN-MIB", "cpCPerfSlot"))
if mibBuilder.loadTexts: cpCPerfEntry.setStatus('mandatory')
cpCPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 1), CardShelf())
if mibBuilder.loadTexts: cpCPerfShelf.setStatus('mandatory')
cpCPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 2), CardSlot())
if mibBuilder.loadTexts: cpCPerfSlot.setStatus('mandatory')
cpCPerfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 3), RedundancyMode())
if mibBuilder.loadTexts: cpCPerfMode.setStatus('mandatory')
cpCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 4), CardState())
if mibBuilder.loadTexts: cpCPerfState.setStatus('mandatory')
cpCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 5), CardStatus())
if mibBuilder.loadTexts: cpCPerfStatus.setStatus('mandatory')
cpCAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 7), Counter32())
if mibBuilder.loadTexts: cpCAvailTime.setStatus('mandatory')
cpCErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 3, 6, 1, 8), Counter32())
if mibBuilder.loadTexts: cpCErrFreeSecs.setStatus('mandatory')
ccCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 1), Counter32())
if mibBuilder.loadTexts: ccCNumEvents.setStatus('mandatory')
ccCCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2), )
if mibBuilder.loadTexts: ccCCntrTable.setStatus('mandatory')
ccCCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1), ).setIndexNames((0, "LUXN-MIB", "ccCCntrLocation"), (0, "LUXN-MIB", "ccCCntrShelf"), (0, "LUXN-MIB", "ccCCntrSlot"), (0, "LUXN-MIB", "ccCCntrType"))
if mibBuilder.loadTexts: ccCCntrEntry.setStatus('mandatory')
ccCCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: ccCCntrLocation.setStatus('mandatory')
ccCCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: ccCCntrShelf.setStatus('mandatory')
ccCCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: ccCCntrSlot.setStatus('mandatory')
ccCCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spi", 1), ("iwm", 2))))
if mibBuilder.loadTexts: ccCCntrType.setStatus('mandatory')
ccCCounterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 5), FlagType())
if mibBuilder.loadTexts: ccCCounterFlag.setStatus('mandatory')
ccCTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 6), Counter32())
if mibBuilder.loadTexts: ccCTotPktSent.setStatus('mandatory')
ccCTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: ccCTotPktRcvd.setStatus('mandatory')
ccCBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 8), Counter32())
if mibBuilder.loadTexts: ccCBadPktRcvd.setStatus('mandatory')
ccCTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 9), Counter32())
if mibBuilder.loadTexts: ccCTotBadTrans.setStatus('mandatory')
ccCBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 10), Counter32())
if mibBuilder.loadTexts: ccCBytesSent.setStatus('mandatory')
ccCBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 11), Counter32())
if mibBuilder.loadTexts: ccCBytesRcvd.setStatus('mandatory')
ccCMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 12), Counter32())
if mibBuilder.loadTexts: ccCMsgsDlvrd.setStatus('mandatory')
ccCBufAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 13), Counter32())
if mibBuilder.loadTexts: ccCBufAllocFail.setStatus('mandatory')
ccCEcbAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 14), Counter32())
if mibBuilder.loadTexts: ccCEcbAllocFail.setStatus('mandatory')
ccCClearCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 2, 1, 15), ResetType())
if mibBuilder.loadTexts: ccCClearCntrs.setStatus('mandatory')
ccCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3), )
if mibBuilder.loadTexts: ccCPerfTable.setStatus('mandatory')
ccCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1), ).setIndexNames((0, "LUXN-MIB", "ccCPerfLocation"), (0, "LUXN-MIB", "ccCPerfShelf"), (0, "LUXN-MIB", "ccCPerfSlot"))
if mibBuilder.loadTexts: ccCPerfEntry.setStatus('mandatory')
ccCPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 1), CardLocation())
if mibBuilder.loadTexts: ccCPerfLocation.setStatus('mandatory')
ccCPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 2), CardShelf())
if mibBuilder.loadTexts: ccCPerfShelf.setStatus('mandatory')
ccCPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 3), CardSlot())
if mibBuilder.loadTexts: ccCPerfSlot.setStatus('mandatory')
ccCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 4), CardState())
if mibBuilder.loadTexts: ccCPerfState.setStatus('mandatory')
ccCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 5), CardStatus())
if mibBuilder.loadTexts: ccCPerfStatus.setStatus('mandatory')
ccCAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 6), Counter32())
if mibBuilder.loadTexts: ccCAvailTime.setStatus('mandatory')
ccCErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 7), Counter32())
if mibBuilder.loadTexts: ccCErrFreeSecs.setStatus('mandatory')
ccCBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 8), Integer32())
if mibBuilder.loadTexts: ccCBiasCurrent.setStatus('mandatory')
ccCModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 9), Integer32())
if mibBuilder.loadTexts: ccCModulation.setStatus('mandatory')
ccCApc = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 10), Integer32())
if mibBuilder.loadTexts: ccCApc.setStatus('mandatory')
ccCIwmModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 11), Integer32())
if mibBuilder.loadTexts: ccCIwmModulation.setStatus('mandatory')
ccCLaserOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 12), FlagType())
if mibBuilder.loadTexts: ccCLaserOnOff.setStatus('mandatory')
ccCTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 13), Gauge32())
if mibBuilder.loadTexts: ccCTemperature.setStatus('mandatory')
ccCIntensity = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 14), Gauge32())
if mibBuilder.loadTexts: ccCIntensity.setStatus('mandatory')
ccCSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 15), Gauge32())
if mibBuilder.loadTexts: ccCSignalStrength.setStatus('mandatory')
ccCLossOfLight = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 16), Boolean())
if mibBuilder.loadTexts: ccCLossOfLight.setStatus('mandatory')
ccCSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 17), Boolean())
if mibBuilder.loadTexts: ccCSignalDetect.setStatus('mandatory')
ccCRefClock = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("en1660", 1), ("en1944", 2), ("en1953", 3))))
if mibBuilder.loadTexts: ccCRefClock.setStatus('mandatory')
ccCClockDiv = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dout-1250", 1), ("dout-622", 2), ("dout-155", 3))))
if mibBuilder.loadTexts: ccCClockDiv.setStatus('mandatory')
ccCProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("na", 3))))
if mibBuilder.loadTexts: ccCProtectionMode.setStatus('mandatory')
muxCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 1), Counter32())
if mibBuilder.loadTexts: muxCNumEvents.setStatus('mandatory')
muxCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2), )
if mibBuilder.loadTexts: muxCPerfTable.setStatus('mandatory')
muxCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1), ).setIndexNames((0, "LUXN-MIB", "muxCPerfLocation"), (0, "LUXN-MIB", "muxCPerfShelf"), (0, "LUXN-MIB", "muxCPerfSlot"))
if mibBuilder.loadTexts: muxCPerfEntry.setStatus('mandatory')
muxCPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: muxCPerfLocation.setStatus('mandatory')
muxCPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: muxCPerfShelf.setStatus('mandatory')
muxCPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: muxCPerfSlot.setStatus('mandatory')
muxCType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 10, 13, 21))).clone(namedValues=NamedValues(("mux", 4), ("demux", 5), ("w4cd", 10), ("w2cmd", 13), ("w4cm", 21))))
if mibBuilder.loadTexts: muxCType.setStatus('mandatory')
muxCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 5), CardState())
if mibBuilder.loadTexts: muxCPerfState.setStatus('mandatory')
muxCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 6), CardStatus())
if mibBuilder.loadTexts: muxCPerfStatus.setStatus('mandatory')
muxCAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: muxCAvailTime.setStatus('mandatory')
muxCErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 2, 1, 8), Counter32())
if mibBuilder.loadTexts: muxCErrFreeSecs.setStatus('mandatory')
muxCCounterFlag = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 5, 3), FlagType())
if mibBuilder.loadTexts: muxCCounterFlag.setStatus('mandatory')
psCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 1), Counter32())
if mibBuilder.loadTexts: psCNumEvents.setStatus('mandatory')
psCVoltageLevel3pt3Volt = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 2), Integer32())
if mibBuilder.loadTexts: psCVoltageLevel3pt3Volt.setStatus('mandatory')
psCVoltageLevel5Volt = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 3), Integer32())
if mibBuilder.loadTexts: psCVoltageLevel5Volt.setStatus('mandatory')
psCVoltageLevel12Volt = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 4), Integer32())
if mibBuilder.loadTexts: psCVoltageLevel12Volt.setStatus('mandatory')
psCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 5), )
if mibBuilder.loadTexts: psCPerfTable.setStatus('mandatory')
psCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 5, 1), ).setIndexNames((0, "LUXN-MIB", "psCPerfID"))
if mibBuilder.loadTexts: psCPerfEntry.setStatus('mandatory')
psCPerfID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: psCPerfID.setStatus('mandatory')
psCPerfType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 5, 1, 2), RedundancyMode())
if mibBuilder.loadTexts: psCPerfType.setStatus('mandatory')
psCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 5, 1, 3), CardState())
if mibBuilder.loadTexts: psCPerfState.setStatus('mandatory')
psCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 6, 5, 1, 4), CardStatus())
if mibBuilder.loadTexts: psCPerfStatus.setStatus('mandatory')
fadmCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 1), Counter32())
if mibBuilder.loadTexts: fadmCNumEvents.setStatus('mandatory')
fadmCCounterFlag = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 2), FlagType())
if mibBuilder.loadTexts: fadmCCounterFlag.setStatus('mandatory')
fadmCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3), )
if mibBuilder.loadTexts: fadmCPerfTable.setStatus('mandatory')
fadmCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1), ).setIndexNames((0, "LUXN-MIB", "fadmCPerfLocation"), (0, "LUXN-MIB", "fadmCPerfShelf"), (0, "LUXN-MIB", "fadmCPerfSlot"))
if mibBuilder.loadTexts: fadmCPerfEntry.setStatus('mandatory')
fadmCPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 1), CardLocation())
if mibBuilder.loadTexts: fadmCPerfLocation.setStatus('mandatory')
fadmCPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 2), CardShelf())
if mibBuilder.loadTexts: fadmCPerfShelf.setStatus('mandatory')
fadmCPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 3), CardSlot())
if mibBuilder.loadTexts: fadmCPerfSlot.setStatus('mandatory')
fadmCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 5), CardState())
if mibBuilder.loadTexts: fadmCPerfState.setStatus('mandatory')
fadmCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 6), CardStatus())
if mibBuilder.loadTexts: fadmCPerfStatus.setStatus('mandatory')
fadmCAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 7), Counter32())
if mibBuilder.loadTexts: fadmCAvailTime.setStatus('mandatory')
fadmCErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 7, 3, 1, 8), Counter32())
if mibBuilder.loadTexts: fadmCErrFreeSecs.setStatus('mandatory')
oppmCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 1), Counter32())
if mibBuilder.loadTexts: oppmCNumEvents.setStatus('mandatory')
oppmCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2), )
if mibBuilder.loadTexts: oppmCPerfTable.setStatus('mandatory')
oppmCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1), ).setIndexNames((0, "LUXN-MIB", "oppmCPerfLocation"), (0, "LUXN-MIB", "oppmCPerfShelf"), (0, "LUXN-MIB", "oppmCPerfSlot"))
if mibBuilder.loadTexts: oppmCPerfEntry.setStatus('mandatory')
oppmCPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: oppmCPerfLocation.setStatus('mandatory')
oppmCPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: oppmCPerfShelf.setStatus('mandatory')
oppmCPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: oppmCPerfSlot.setStatus('mandatory')
oppmCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 4), CardState())
if mibBuilder.loadTexts: oppmCPerfState.setStatus('mandatory')
oppmCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 5), CardStatus())
if mibBuilder.loadTexts: oppmCPerfStatus.setStatus('mandatory')
oppmCAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 6), Counter32())
if mibBuilder.loadTexts: oppmCAvailTime.setStatus('mandatory')
oppmCErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: oppmCErrFreeSecs.setStatus('mandatory')
oppmCCounterFlag = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 8, 3), FlagType())
if mibBuilder.loadTexts: oppmCCounterFlag.setStatus('mandatory')
mcmCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 1), Counter32())
if mibBuilder.loadTexts: mcmCNumEvents.setStatus('mandatory')
mcmCCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2), )
if mibBuilder.loadTexts: mcmCCntrTable.setStatus('mandatory')
mcmCCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1), ).setIndexNames((0, "LUXN-MIB", "mcmCCntrLocation"), (0, "LUXN-MIB", "mcmCCntrShelf"), (0, "LUXN-MIB", "mcmCCntrSlot"), (0, "LUXN-MIB", "mcmCCntrType"))
if mibBuilder.loadTexts: mcmCCntrEntry.setStatus('mandatory')
mcmCCntrLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: mcmCCntrLocation.setStatus('mandatory')
mcmCCntrShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: mcmCCntrShelf.setStatus('mandatory')
mcmCCntrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: mcmCCntrSlot.setStatus('mandatory')
mcmCCntrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spi", 1), ("iwm", 2))))
if mibBuilder.loadTexts: mcmCCntrType.setStatus('mandatory')
mcmCCounterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 5), FlagType())
if mibBuilder.loadTexts: mcmCCounterFlag.setStatus('mandatory')
mcmCTotPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 6), Counter32())
if mibBuilder.loadTexts: mcmCTotPktSent.setStatus('mandatory')
mcmCTotPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: mcmCTotPktRcvd.setStatus('mandatory')
mcmCBadPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 8), Counter32())
if mibBuilder.loadTexts: mcmCBadPktRcvd.setStatus('mandatory')
mcmCTotBadTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 9), Counter32())
if mibBuilder.loadTexts: mcmCTotBadTrans.setStatus('mandatory')
mcmCBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 10), Counter32())
if mibBuilder.loadTexts: mcmCBytesSent.setStatus('mandatory')
mcmCBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 11), Counter32())
if mibBuilder.loadTexts: mcmCBytesRcvd.setStatus('mandatory')
mcmCMsgsDlvrd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 12), Counter32())
if mibBuilder.loadTexts: mcmCMsgsDlvrd.setStatus('mandatory')
mcmCBufAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 13), Counter32())
if mibBuilder.loadTexts: mcmCBufAllocFail.setStatus('mandatory')
mcmCEcbAllocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 14), Counter32())
if mibBuilder.loadTexts: mcmCEcbAllocFail.setStatus('mandatory')
mcmCClearCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 2, 1, 15), ResetType())
if mibBuilder.loadTexts: mcmCClearCntrs.setStatus('mandatory')
mcmCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3), )
if mibBuilder.loadTexts: mcmCPerfTable.setStatus('mandatory')
mcmCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1), ).setIndexNames((0, "LUXN-MIB", "mcmCPerfLocation"), (0, "LUXN-MIB", "mcmCPerfShelf"), (0, "LUXN-MIB", "mcmCPerfSlot"))
if mibBuilder.loadTexts: mcmCPerfEntry.setStatus('mandatory')
mcmCPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 1), CardLocation())
if mibBuilder.loadTexts: mcmCPerfLocation.setStatus('mandatory')
mcmCPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 2), CardShelf())
if mibBuilder.loadTexts: mcmCPerfShelf.setStatus('mandatory')
mcmCPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 3), CardSlot())
if mibBuilder.loadTexts: mcmCPerfSlot.setStatus('mandatory')
mcmCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 4), CardState())
if mibBuilder.loadTexts: mcmCPerfState.setStatus('mandatory')
mcmCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 5), CardStatus())
if mibBuilder.loadTexts: mcmCPerfStatus.setStatus('mandatory')
mcmCAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 6), Counter32())
if mibBuilder.loadTexts: mcmCAvailTime.setStatus('mandatory')
mcmCErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 7), Counter32())
if mibBuilder.loadTexts: mcmCErrFreeSecs.setStatus('mandatory')
mcmCBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 8), Integer32())
if mibBuilder.loadTexts: mcmCBiasCurrent.setStatus('mandatory')
mcmCModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 9), Integer32())
if mibBuilder.loadTexts: mcmCModulation.setStatus('mandatory')
mcmCApc = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 10), Integer32())
if mibBuilder.loadTexts: mcmCApc.setStatus('mandatory')
mcmCIwmModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 11), Integer32())
if mibBuilder.loadTexts: mcmCIwmModulation.setStatus('mandatory')
mcmCLaserOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 12), FlagType())
if mibBuilder.loadTexts: mcmCLaserOnOff.setStatus('mandatory')
mcmCTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 13), Gauge32())
if mibBuilder.loadTexts: mcmCTemperature.setStatus('mandatory')
mcmCIntensity = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 14), Gauge32())
if mibBuilder.loadTexts: mcmCIntensity.setStatus('mandatory')
mcmCSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 15), Gauge32())
if mibBuilder.loadTexts: mcmCSignalStrength.setStatus('mandatory')
mcmCLossOfLight = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 16), Boolean())
if mibBuilder.loadTexts: mcmCLossOfLight.setStatus('mandatory')
mcmCSignalDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 17), Boolean())
if mibBuilder.loadTexts: mcmCSignalDetect.setStatus('mandatory')
mcmCRefClock = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("en1660", 1), ("en1944", 2), ("en1953", 3))))
if mibBuilder.loadTexts: mcmCRefClock.setStatus('mandatory')
mcmCClockDiv = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dout-1250", 1), ("dout-622", 2), ("dout-155", 3))))
if mibBuilder.loadTexts: mcmCClockDiv.setStatus('mandatory')
mcmPortCCntrTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4), )
if mibBuilder.loadTexts: mcmPortCCntrTable.setStatus('mandatory')
mcmPortCCntrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1), ).setIndexNames((0, "LUXN-MIB", "mcmPortCCntrCardLocation"), (0, "LUXN-MIB", "mcmPortCCntrCardShelf"), (0, "LUXN-MIB", "mcmPortCCntrCardSlot"), (0, "LUXN-MIB", "mcmPortCCntrIndex"))
if mibBuilder.loadTexts: mcmPortCCntrEntry.setStatus('mandatory')
mcmPortCCntrCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 1), CardLocation())
if mibBuilder.loadTexts: mcmPortCCntrCardLocation.setStatus('mandatory')
mcmPortCCntrCardShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 2), CardShelf())
if mibBuilder.loadTexts: mcmPortCCntrCardShelf.setStatus('mandatory')
mcmPortCCntrCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 3), CardSlot())
if mibBuilder.loadTexts: mcmPortCCntrCardSlot.setStatus('mandatory')
mcmPortCCntrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 4), Integer32())
if mibBuilder.loadTexts: mcmPortCCntrIndex.setStatus('mandatory')
mcmPortCCntrASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 5), Counter32())
if mibBuilder.loadTexts: mcmPortCCntrASs.setStatus('mandatory')
mcmPortCCntrFEs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 7), Counter32())
if mibBuilder.loadTexts: mcmPortCCntrFEs.setStatus('mandatory')
mcmPortCCntrCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 8), Counter32())
if mibBuilder.loadTexts: mcmPortCCntrCRCErrs.setStatus('mandatory')
mcmPortCCntrSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 9), Counter32())
if mibBuilder.loadTexts: mcmPortCCntrSESs.setStatus('mandatory')
mcmPortCCntrSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 10), Counter32())
if mibBuilder.loadTexts: mcmPortCCntrSEFSs.setStatus('mandatory')
mcmPortCCntrUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 11), Counter32())
if mibBuilder.loadTexts: mcmPortCCntrUASs.setStatus('mandatory')
mcmPortCCntrLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 12), Counter32())
if mibBuilder.loadTexts: mcmPortCCntrLESs.setStatus('mandatory')
mcmPortCCntrBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 13), Counter32())
if mibBuilder.loadTexts: mcmPortCCntrBESs.setStatus('mandatory')
mcmPortCCntrDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 14), Counter32())
if mibBuilder.loadTexts: mcmPortCCntrDMs.setStatus('mandatory')
mcmPortCCntrLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 9, 4, 1, 15), Counter32())
if mibBuilder.loadTexts: mcmPortCCntrLCVs.setStatus('mandatory')
fnCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 10, 1), Counter32())
if mibBuilder.loadTexts: fnCNumEvents.setStatus('mandatory')
fnCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 10, 2), )
if mibBuilder.loadTexts: fnCPerfTable.setStatus('mandatory')
fnCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 10, 2, 1), ).setIndexNames((0, "LUXN-MIB", "fnCPerfID"))
if mibBuilder.loadTexts: fnCPerfEntry.setStatus('mandatory')
fnCPerfID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: fnCPerfID.setStatus('mandatory')
fnCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("fnOK", 1), ("fnDegrade", 2), ("fnFailed", 3), ("fnEmpty", 4))))
if mibBuilder.loadTexts: fnCPerfState.setStatus('mandatory')
fnCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 10, 2, 1, 3), CardStatus())
if mibBuilder.loadTexts: fnCPerfStatus.setStatus('mandatory')
rpsmCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 1), Counter32())
if mibBuilder.loadTexts: rpsmCNumEvents.setStatus('mandatory')
rpsmCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2), )
if mibBuilder.loadTexts: rpsmCPerfTable.setStatus('mandatory')
rpsmCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1), ).setIndexNames((0, "LUXN-MIB", "rpsmCPerfLocation"), (0, "LUXN-MIB", "rpsmCPerfShelf"), (0, "LUXN-MIB", "rpsmCPerfSlot"))
if mibBuilder.loadTexts: rpsmCPerfEntry.setStatus('mandatory')
rpsmCPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: rpsmCPerfLocation.setStatus('mandatory')
rpsmCPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: rpsmCPerfShelf.setStatus('mandatory')
rpsmCPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: rpsmCPerfSlot.setStatus('mandatory')
rpsmCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 4), CardState())
if mibBuilder.loadTexts: rpsmCPerfState.setStatus('mandatory')
rpsmCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 5), CardStatus())
if mibBuilder.loadTexts: rpsmCPerfStatus.setStatus('mandatory')
rpsmCAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 6), Counter32())
if mibBuilder.loadTexts: rpsmCAvailTime.setStatus('mandatory')
rpsmCErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: rpsmCErrFreeSecs.setStatus('mandatory')
rpsmCCounterFlag = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 12, 3), FlagType())
if mibBuilder.loadTexts: rpsmCCounterFlag.setStatus('mandatory')
rsdmCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 1), Counter32())
if mibBuilder.loadTexts: rsdmCNumEvents.setStatus('mandatory')
rsdmCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2), )
if mibBuilder.loadTexts: rsdmCPerfTable.setStatus('mandatory')
rsdmCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1), ).setIndexNames((0, "LUXN-MIB", "rsdmCPerfLocation"), (0, "LUXN-MIB", "rsdmCPerfShelf"), (0, "LUXN-MIB", "rsdmCPerfSlot"))
if mibBuilder.loadTexts: rsdmCPerfEntry.setStatus('mandatory')
rsdmCPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: rsdmCPerfLocation.setStatus('mandatory')
rsdmCPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: rsdmCPerfShelf.setStatus('mandatory')
rsdmCPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: rsdmCPerfSlot.setStatus('mandatory')
rsdmCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 4), CardState())
if mibBuilder.loadTexts: rsdmCPerfState.setStatus('mandatory')
rsdmCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 5), CardStatus())
if mibBuilder.loadTexts: rsdmCPerfStatus.setStatus('mandatory')
rsdmCAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 6), Counter32())
if mibBuilder.loadTexts: rsdmCAvailTime.setStatus('mandatory')
rsdmCErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: rsdmCErrFreeSecs.setStatus('mandatory')
rsdmCCounterFlag = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 13, 3), FlagType())
if mibBuilder.loadTexts: rsdmCCounterFlag.setStatus('mandatory')
rtdmCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 1), Counter32())
if mibBuilder.loadTexts: rtdmCNumEvents.setStatus('mandatory')
rtdmCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2), )
if mibBuilder.loadTexts: rtdmCPerfTable.setStatus('mandatory')
rtdmCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1), ).setIndexNames((0, "LUXN-MIB", "rtdmCPerfLocation"), (0, "LUXN-MIB", "rtdmCPerfShelf"), (0, "LUXN-MIB", "rtdmCPerfSlot"))
if mibBuilder.loadTexts: rtdmCPerfEntry.setStatus('mandatory')
rtdmCPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: rtdmCPerfLocation.setStatus('mandatory')
rtdmCPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: rtdmCPerfShelf.setStatus('mandatory')
rtdmCPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: rtdmCPerfSlot.setStatus('mandatory')
rtdmCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 4), CardState())
if mibBuilder.loadTexts: rtdmCPerfState.setStatus('mandatory')
rtdmCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 5), CardStatus())
if mibBuilder.loadTexts: rtdmCPerfStatus.setStatus('mandatory')
rtdmCAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 6), Counter32())
if mibBuilder.loadTexts: rtdmCAvailTime.setStatus('mandatory')
rtdmCErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: rtdmCErrFreeSecs.setStatus('mandatory')
rtdmCCounterFlag = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 14, 3), FlagType())
if mibBuilder.loadTexts: rtdmCCounterFlag.setStatus('mandatory')
osamCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 1), Counter32())
if mibBuilder.loadTexts: osamCNumEvents.setStatus('mandatory')
osamCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2), )
if mibBuilder.loadTexts: osamCPerfTable.setStatus('mandatory')
osamCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1), ).setIndexNames((0, "LUXN-MIB", "osamCPerfLocation"), (0, "LUXN-MIB", "osamCPerfShelf"), (0, "LUXN-MIB", "osamCPerfSlot"))
if mibBuilder.loadTexts: osamCPerfEntry.setStatus('mandatory')
osamCPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: osamCPerfLocation.setStatus('mandatory')
osamCPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: osamCPerfShelf.setStatus('mandatory')
osamCPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: osamCPerfSlot.setStatus('mandatory')
osamCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 4), CardState())
if mibBuilder.loadTexts: osamCPerfState.setStatus('mandatory')
osamCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 5), CardStatus())
if mibBuilder.loadTexts: osamCPerfStatus.setStatus('mandatory')
osamCPerfAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 6), Counter32())
if mibBuilder.loadTexts: osamCPerfAvailTime.setStatus('mandatory')
osamCPerfErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: osamCPerfErrFreeSecs.setStatus('mandatory')
osamCPerfCounterFlag = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 15, 3), FlagType())
if mibBuilder.loadTexts: osamCPerfCounterFlag.setStatus('mandatory')
rsmCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 1), Counter32())
if mibBuilder.loadTexts: rsmCNumEvents.setStatus('mandatory')
rsmCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2), )
if mibBuilder.loadTexts: rsmCPerfTable.setStatus('mandatory')
rsmCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1), ).setIndexNames((0, "LUXN-MIB", "rsmCPerfLocation"), (0, "LUXN-MIB", "rsmCPerfShelf"), (0, "LUXN-MIB", "rsmCPerfSlot"))
if mibBuilder.loadTexts: rsmCPerfEntry.setStatus('mandatory')
rsmCPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: rsmCPerfLocation.setStatus('mandatory')
rsmCPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: rsmCPerfShelf.setStatus('mandatory')
rsmCPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: rsmCPerfSlot.setStatus('mandatory')
rsmCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 4), CardState())
if mibBuilder.loadTexts: rsmCPerfState.setStatus('mandatory')
rsmCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 5), CardStatus())
if mibBuilder.loadTexts: rsmCPerfStatus.setStatus('mandatory')
rsmCAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 6), Counter32())
if mibBuilder.loadTexts: rsmCAvailTime.setStatus('mandatory')
rsmCErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: rsmCErrFreeSecs.setStatus('mandatory')
rsmCCounterFlag = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 16, 3), FlagType())
if mibBuilder.loadTexts: rsmCCounterFlag.setStatus('mandatory')
upsmCNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 1), Counter32())
if mibBuilder.loadTexts: upsmCNumEvents.setStatus('mandatory')
upsmCPerfTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2), )
if mibBuilder.loadTexts: upsmCPerfTable.setStatus('mandatory')
upsmCPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1), ).setIndexNames((0, "LUXN-MIB", "upsmCPerfLocation"), (0, "LUXN-MIB", "upsmCPerfShelf"), (0, "LUXN-MIB", "upsmCPerfSlot"))
if mibBuilder.loadTexts: upsmCPerfEntry.setStatus('mandatory')
upsmCPerfLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 1), CardLocation())
if mibBuilder.loadTexts: upsmCPerfLocation.setStatus('mandatory')
upsmCPerfShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 2), CardShelf())
if mibBuilder.loadTexts: upsmCPerfShelf.setStatus('mandatory')
upsmCPerfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 3), CardSlot())
if mibBuilder.loadTexts: upsmCPerfSlot.setStatus('mandatory')
upsmCPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 4), CardState())
if mibBuilder.loadTexts: upsmCPerfState.setStatus('mandatory')
upsmCPerfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 5), CardStatus())
if mibBuilder.loadTexts: upsmCPerfStatus.setStatus('mandatory')
upsmCAvailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 6), Counter32())
if mibBuilder.loadTexts: upsmCAvailTime.setStatus('mandatory')
upsmCErrFreeSecs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 2, 1, 7), Counter32())
if mibBuilder.loadTexts: upsmCErrFreeSecs.setStatus('mandatory')
upsmCCounterFlag = MibScalar((1, 3, 6, 1, 4, 1, 4253, 2, 3, 17, 3), FlagType())
if mibBuilder.loadTexts: upsmCCounterFlag.setStatus('mandatory')
eveTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: eveTrapThreshold.setStatus('mandatory')
eveNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 2), EventBuffer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveNumEvents.setStatus('mandatory')
eveLogTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 3, 1, 3), )
if mibBuilder.loadTexts: eveLogTable.setStatus('mandatory')
eveLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1), ).setIndexNames((0, "LUXN-MIB", "eveDateTime"), (0, "LUXN-MIB", "eveSeqNum"))
if mibBuilder.loadTexts: eveLogEntry.setStatus('mandatory')
eveDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveDateTime.setStatus('mandatory')
eveEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveEventId.setStatus('mandatory')
eveSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 3), TrapStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveSeverity.setStatus('mandatory')
eveSysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 4), CardStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveSysStatus.setStatus('mandatory')
eveSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 152))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveSource.setStatus('mandatory')
eveDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveDescr.setStatus('mandatory')
eveTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 7), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveTrap.setStatus('mandatory')
eveSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveSeqNum.setStatus('mandatory')
eveDeleteLog = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 4), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eveDeleteLog.setStatus('mandatory')
eveLastEntryDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveLastEntryDateTime.setStatus('mandatory')
eveHundredthEntryDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveHundredthEntryDateTime.setStatus('mandatory')
eveTwoHundredthEntryDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveTwoHundredthEntryDateTime.setStatus('mandatory')
eveThreeHundredthEntryDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveThreeHundredthEntryDateTime.setStatus('mandatory')
eveFourHundredthEntryDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveFourHundredthEntryDateTime.setStatus('mandatory')
eveFiveHundredthEntryDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveFiveHundredthEntryDateTime.setStatus('mandatory')
eveSixHundredthEntryDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveSixHundredthEntryDateTime.setStatus('mandatory')
eveSevenHundredthEntryDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eveSevenHundredthEntryDateTime.setStatus('mandatory')
eveEightHundredthEntryDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 13), DateAndTime())
if mibBuilder.loadTexts: eveEightHundredthEntryDateTime.setStatus('mandatory')
eveNineHundredthEntryDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 1, 14), DateAndTime())
if mibBuilder.loadTexts: eveNineHundredthEntryDateTime.setStatus('mandatory')
usrNumLogs = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 2, 1), UserBuffer())
if mibBuilder.loadTexts: usrNumLogs.setStatus('mandatory')
usrLogTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 3, 2, 2), )
if mibBuilder.loadTexts: usrLogTable.setStatus('mandatory')
usrLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 3, 2, 2, 1), ).setIndexNames((0, "LUXN-MIB", "usrDateTime"), (0, "LUXN-MIB", "usrLogonId"))
if mibBuilder.loadTexts: usrLogEntry.setStatus('mandatory')
usrDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 2, 2, 1, 1), DateAndTime())
if mibBuilder.loadTexts: usrDateTime.setStatus('mandatory')
usrLogonId = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 2, 2, 1, 2), LogonID())
if mibBuilder.loadTexts: usrLogonId.setStatus('mandatory')
usrTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30)))
if mibBuilder.loadTexts: usrTarget.setStatus('mandatory')
usrLogDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100)))
if mibBuilder.loadTexts: usrLogDescr.setStatus('mandatory')
usrTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 2, 2, 1, 5), Boolean())
if mibBuilder.loadTexts: usrTrap.setStatus('mandatory')
alarmNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmNumEvents.setStatus('mandatory')
alarmLogTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 3, 4, 2), )
if mibBuilder.loadTexts: alarmLogTable.setStatus('mandatory')
alarmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1), ).setIndexNames((0, "LUXN-MIB", "alarmFirstDateTime"), (0, "LUXN-MIB", "alarmTag"))
if mibBuilder.loadTexts: alarmLogEntry.setStatus('mandatory')
alarmFirstDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmFirstDateTime.setStatus('mandatory')
alarmTag = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTag.setStatus('mandatory')
alarmLastDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLastDateTime.setStatus('mandatory')
alarmEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEventId.setStatus('mandatory')
alarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSeverity.setStatus('mandatory')
alarmSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 152))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSource.setStatus('mandatory')
alarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmDescr.setStatus('mandatory')
alarmCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCnt.setStatus('mandatory')
alarmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acknowledged", 1), ("unacknowledged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmAck.setStatus('mandatory')
alarmClear = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmClear.setStatus('mandatory')
alarmLastChange = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmLastChange.setStatus('mandatory')
diagModeNum = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagModeNum.setStatus('mandatory')
diagModeTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 3, 3, 2), )
if mibBuilder.loadTexts: diagModeTable.setStatus('mandatory')
diagModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 3, 3, 2, 1), ).setIndexNames((0, "LUXN-MIB", "diagLocation"), (0, "LUXN-MIB", "diagShelf"), (0, "LUXN-MIB", "diagSlot"))
if mibBuilder.loadTexts: diagModeEntry.setStatus('mandatory')
diagLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagLocation.setStatus('mandatory')
diagShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagShelf.setStatus('mandatory')
diagSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagSlot.setStatus('mandatory')
diagSetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("warmboot", 2), ("loopbackDisabled", 3), ("loopbackEnabled", 4), ("selftest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagSetMode.setStatus('mandatory')
diagTestNum = MibScalar((1, 3, 6, 1, 4, 1, 4253, 3, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diagTestNum.setStatus('mandatory')
diagTestTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 3, 3, 4), )
if mibBuilder.loadTexts: diagTestTable.setStatus('mandatory')
diagTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1), ).setIndexNames((0, "LUXN-MIB", "diagTestId"), (0, "LUXN-MIB", "diagTLocation"), (0, "LUXN-MIB", "diagTShelf"), (0, "LUXN-MIB", "diagTSlot"))
if mibBuilder.loadTexts: diagTestEntry.setStatus('mandatory')
diagTestId = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lLoopBack", 1), ("rLoopBack", 2), ("lNormal", 3), ("rNormal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagTestId.setStatus('mandatory')
diagTLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 2), CardLocation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagTLocation.setStatus('mandatory')
diagTShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 3), CardShelf()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagTShelf.setStatus('mandatory')
diagTSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 4), CardSlot()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagTSlot.setStatus('mandatory')
diagParam1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagParam1.setStatus('mandatory')
diagParam2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagParam2.setStatus('mandatory')
diagParam3 = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagParam3.setStatus('mandatory')
diagTSetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 4, 1, 8), FlagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diagTSetMode.setStatus('mandatory')
mcmescSelfTestTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1), )
if mibBuilder.loadTexts: mcmescSelfTestTable.setStatus('mandatory')
mcmescSelfTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescSelfTestLocation"), (0, "LUXN-MIB", "mcmescSelfTestShelf"), (0, "LUXN-MIB", "mcmescSelfTestSlot"))
if mibBuilder.loadTexts: mcmescSelfTestEntry.setStatus('mandatory')
mcmescSelfTestLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescSelfTestLocation.setStatus('mandatory')
mcmescSelfTestShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescSelfTestShelf.setStatus('mandatory')
mcmescSelfTestSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescSelfTestSlot.setStatus('mandatory')
mcmescSelfTestStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcmescSelfTestStart.setStatus('mandatory')
mcmescSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notreported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescSelfTestResult.setStatus('mandatory')
mcmescSelfTestSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescSelfTestSeqNum.setStatus('mandatory')
mcmescSelfTestTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescSelfTestTimeStamp.setStatus('mandatory')
mcmescLinkSelfTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2), )
if mibBuilder.loadTexts: mcmescLinkSelfTestResultTable.setStatus('mandatory')
mcmescLinkSelfTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescLinkSelfTestLocation"), (0, "LUXN-MIB", "mcmescLinkSelfTestShelf"), (0, "LUXN-MIB", "mcmescLinkSelfTestSlot"))
if mibBuilder.loadTexts: mcmescLinkSelfTestResultEntry.setStatus('mandatory')
mcmescLinkSelfTestLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkSelfTestLocation.setStatus('mandatory')
mcmescLinkSelfTestShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkSelfTestShelf.setStatus('mandatory')
mcmescLinkSelfTestSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkSelfTestSlot.setStatus('mandatory')
mcmescLinkSelfTestTxI2c = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notreported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkSelfTestTxI2c.setStatus('mandatory')
mcmescLinkSelfTestCdrI2c = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notreported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkSelfTestCdrI2c.setStatus('mandatory')
mcmescLinkSelfTestDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notreported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescLinkSelfTestDataPath.setStatus('mandatory')
mcmescPortSelfTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3), )
if mibBuilder.loadTexts: mcmescPortSelfTestResultTable.setStatus('mandatory')
mcmescPortSelfTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1), ).setIndexNames((0, "LUXN-MIB", "mcmescPortSelfTestLocation"), (0, "LUXN-MIB", "mcmescPortSelfTestShelf"), (0, "LUXN-MIB", "mcmescPortSelfTestSlot"), (0, "LUXN-MIB", "mcmescPortSelfTestPort"))
if mibBuilder.loadTexts: mcmescPortSelfTestResultEntry.setStatus('mandatory')
mcmescPortSelfTestLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortSelfTestLocation.setStatus('mandatory')
mcmescPortSelfTestShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortSelfTestShelf.setStatus('mandatory')
mcmescPortSelfTestSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortSelfTestSlot.setStatus('mandatory')
mcmescPortSelfTestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortSelfTestPort.setStatus('mandatory')
mcmescPortSelfTestTxI2c = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notreported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortSelfTestTxI2c.setStatus('mandatory')
mcmescPortSelfTestCdrI2c = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notreported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortSelfTestCdrI2c.setStatus('mandatory')
mcmescPortSelfTestTxDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notreported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortSelfTestTxDataPath.setStatus('mandatory')
mcmescPortSelfTestRxDataPath = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 3, 3, 5, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("passed", 1), ("failed", 2), ("inprogress", 3), ("notreported", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcmescPortSelfTestRxDataPath.setStatus('mandatory')
usrNumUsers = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrNumUsers.setStatus('mandatory')
usrSecTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 4, 1, 2), )
if mibBuilder.loadTexts: usrSecTable.setStatus('mandatory')
usrSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1), ).setIndexNames((0, "LUXN-MIB", "usrSecLogonId"))
if mibBuilder.loadTexts: usrSecEntry.setStatus('mandatory')
usrSecLogonId = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 1), LogonID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrSecLogonId.setStatus('mandatory')
usrSecPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 2), HashedPasswd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrSecPasswd.setStatus('mandatory')
usrSecRole = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrSecRole.setStatus('mandatory')
usrSecFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 45))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrSecFullName.setStatus('mandatory')
usrSecActDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrSecActDateTime.setStatus('mandatory')
usrSecLastDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usrSecLastDateTime.setStatus('mandatory')
usrSecSetLastDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 1, 2, 1, 7), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usrSecSetLastDateTime.setStatus('mandatory')
secNumRoles = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)))
if mibBuilder.loadTexts: secNumRoles.setStatus('mandatory')
secRoleTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 4, 2, 2), )
if mibBuilder.loadTexts: secRoleTable.setStatus('mandatory')
secRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 4, 2, 2, 1), ).setIndexNames((0, "LUXN-MIB", "secRole"))
if mibBuilder.loadTexts: secRoleEntry.setStatus('mandatory')
secRole = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 2, 2, 1, 1), EntityName())
if mibBuilder.loadTexts: secRole.setStatus('mandatory')
secRoleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60)))
if mibBuilder.loadTexts: secRoleDescr.setStatus('mandatory')
secNumGroups = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)))
if mibBuilder.loadTexts: secNumGroups.setStatus('mandatory')
secGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 4, 2, 4), )
if mibBuilder.loadTexts: secGroupTable.setStatus('mandatory')
secGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 4, 2, 4, 1), ).setIndexNames((0, "LUXN-MIB", "secGroup"), (0, "LUXN-MIB", "secGroupRole"))
if mibBuilder.loadTexts: secGroupEntry.setStatus('mandatory')
secGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 2, 4, 1, 1), EntityName())
if mibBuilder.loadTexts: secGroup.setStatus('mandatory')
secGroupRole = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 2, 4, 1, 2), EntityName())
if mibBuilder.loadTexts: secGroupRole.setStatus('mandatory')
secNumElements = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)))
if mibBuilder.loadTexts: secNumElements.setStatus('mandatory')
secElementTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 4, 2, 6), )
if mibBuilder.loadTexts: secElementTable.setStatus('mandatory')
secElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 4, 2, 6, 1), ).setIndexNames((0, "LUXN-MIB", "secElement"))
if mibBuilder.loadTexts: secElementEntry.setStatus('mandatory')
secElement = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 2, 6, 1, 1), EntityName())
if mibBuilder.loadTexts: secElement.setStatus('mandatory')
secElementAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("readWrite", 3), ("none", 4))))
if mibBuilder.loadTexts: secElementAccess.setStatus('mandatory')
secElementOID = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30)))
if mibBuilder.loadTexts: secElementOID.setStatus('mandatory')
secElementType = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("element", 1), ("group", 2), ("table", 3))))
if mibBuilder.loadTexts: secElementType.setStatus('mandatory')
secElementParent = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 2, 6, 1, 5), EntityName())
if mibBuilder.loadTexts: secElementParent.setStatus('mandatory')
secNumElmntGrp = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999)))
if mibBuilder.loadTexts: secNumElmntGrp.setStatus('mandatory')
secElmntGrpTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 4, 2, 8), )
if mibBuilder.loadTexts: secElmntGrpTable.setStatus('mandatory')
secElmntGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 4, 2, 8, 1), ).setIndexNames((0, "LUXN-MIB", "elmntName"), (0, "LUXN-MIB", "grpName"))
if mibBuilder.loadTexts: secElmntGrpEntry.setStatus('mandatory')
elmntName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 2, 8, 1, 1), EntityName())
if mibBuilder.loadTexts: elmntName.setStatus('mandatory')
grpName = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 2, 8, 1, 2), EntityName())
if mibBuilder.loadTexts: grpName.setStatus('mandatory')
elmntGrpAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("readWrite", 3), ("none", 4))))
if mibBuilder.loadTexts: elmntGrpAccess.setStatus('mandatory')
radiusAuthOrder = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("localRadius", 3), ("radiusLocal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAuthOrder.setStatus('mandatory')
radiusNasIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasIdentifier.setStatus('mandatory')
radiusDefaultRealm = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusDefaultRealm.setStatus('mandatory')
radiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusTimeout.setStatus('mandatory')
radiusRetries = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusRetries.setStatus('mandatory')
radiusSecTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 6), )
if mibBuilder.loadTexts: radiusSecTable.setStatus('mandatory')
radiusSecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 6, 1), ).setIndexNames((0, "LUXN-MIB", "radiusServerIndex"))
if mibBuilder.loadTexts: radiusSecEntry.setStatus('mandatory')
radiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusServerIndex.setStatus('mandatory')
radiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('mandatory')
radiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerPort.setStatus('mandatory')
radiusServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerSecret.setStatus('mandatory')
radiusAddServer = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAddServer.setStatus('mandatory')
sshMode = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMode.setStatus('mandatory')
sshKeySize = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshKeySize.setStatus('mandatory')
sshMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshMaxSessions.setStatus('mandatory')
sshGenKey = MibScalar((1, 3, 6, 1, 4, 1, 4253, 4, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("genDssKey", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshGenKey.setStatus('mandatory')
acctCPTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 5, 1, 1), )
if mibBuilder.loadTexts: acctCPTable.setStatus('mandatory')
acctCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1), ).setIndexNames((0, "LUXN-MIB", "acctCPShelf"), (0, "LUXN-MIB", "acctCPSlot"))
if mibBuilder.loadTexts: acctCPEntry.setStatus('mandatory')
acctCPShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 1), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctCPShelf.setStatus('mandatory')
acctCPSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 2), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctCPSlot.setStatus('mandatory')
acctCPDsgnAct = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 3), Counter32())
if mibBuilder.loadTexts: acctCPDsgnAct.setStatus('mandatory')
acctCPDsgnStdby = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 4), Counter32())
if mibBuilder.loadTexts: acctCPDsgnStdby.setStatus('mandatory')
acctCPActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctCPActive.setStatus('mandatory')
acctCPStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctCPStandby.setStatus('mandatory')
acctCPUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctCPUpTime.setStatus('mandatory')
acctCPUnAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctCPUnAvail.setStatus('mandatory')
acctCPResetCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 1, 1, 1, 9), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acctCPResetCntrs.setStatus('mandatory')
acctCCTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 5, 2, 1), )
if mibBuilder.loadTexts: acctCCTable.setStatus('mandatory')
acctCCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1), ).setIndexNames((0, "LUXN-MIB", "acctCCLocation"), (0, "LUXN-MIB", "acctCCShelf"), (0, "LUXN-MIB", "acctCCSlot"))
if mibBuilder.loadTexts: acctCCEntry.setStatus('mandatory')
acctCCLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctCCLocation.setStatus('mandatory')
acctCCShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctCCShelf.setStatus('mandatory')
acctCCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctCCSlot.setStatus('mandatory')
acctCCUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctCCUpTime.setStatus('mandatory')
acctCCUnAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctCCUnAvail.setStatus('mandatory')
acctCCResetCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 2, 1, 1, 6), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acctCCResetCntrs.setStatus('mandatory')
acctmcmTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 5, 3, 1), )
if mibBuilder.loadTexts: acctmcmTable.setStatus('mandatory')
acctmcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1), ).setIndexNames((0, "LUXN-MIB", "acctmcmLocation"), (0, "LUXN-MIB", "acctmcmShelf"), (0, "LUXN-MIB", "acctmcmSlot"))
if mibBuilder.loadTexts: acctmcmEntry.setStatus('mandatory')
acctmcmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctmcmLocation.setStatus('mandatory')
acctmcmShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctmcmShelf.setStatus('mandatory')
acctmcmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctmcmSlot.setStatus('mandatory')
acctmcmUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctmcmUpTime.setStatus('mandatory')
acctmcmUnAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctmcmUnAvail.setStatus('mandatory')
acctmcmResetCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 3, 1, 1, 6), ResetType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acctmcmResetCntrs.setStatus('mandatory')
acctmcmescTable = MibTable((1, 3, 6, 1, 4, 1, 4253, 5, 4, 1), )
if mibBuilder.loadTexts: acctmcmescTable.setStatus('mandatory')
acctmcmescEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1), ).setIndexNames((0, "LUXN-MIB", "acctmcmescLocation"), (0, "LUXN-MIB", "acctmcmescShelf"), (0, "LUXN-MIB", "acctmcmescSlot"))
if mibBuilder.loadTexts: acctmcmescEntry.setStatus('mandatory')
acctmcmescLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1, 1), CardLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctmcmescLocation.setStatus('mandatory')
acctmcmescShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1, 2), CardShelf()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctmcmescShelf.setStatus('mandatory')
acctmcmescSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1, 3), CardSlot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctmcmescSlot.setStatus('mandatory')
acctmcmescUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctmcmescUpTime.setStatus('mandatory')
acctmcmescUnAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctmcmescUnAvail.setStatus('mandatory')
acctmcmescResetCntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 4253, 5, 4, 1, 1, 6), ResetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acctmcmescResetCntrs.setStatus('mandatory')
luxNGenericTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNVoadmDetectorFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1001)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNVoadmDetectorFailureResolvedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1002)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNVoadmOutofRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1003)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNVoadmOutofRangeResolvedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1004)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNsignalStrengthHighTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1005)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNsignalStrengthLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1006)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNsignalStrengthNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1007)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlaserPowerOutOfRangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1008)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlaserPowerNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1009)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNberHighThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1010)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNberHighThresholdExceededNormal = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1011)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNberModerateThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1012)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNberModerateThresholdExceededNormal = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,1013)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSNMPKeepalive = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2000)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSNMPKeepalivesEnabled = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2001)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSNMPKeepalivesDisabled = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2002)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSNMPKeepaliveIntervalChanged = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2003)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNTelnetClientEnabled = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2004)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNTelnetClientDisabled = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2005)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNsnmpAuthenticationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2017)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcoldStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2018)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNwarmStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2019)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlossOfLightResolvedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2021)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlossOfLightDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2022)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNntpEnableTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2023)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNntpDisableTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2024)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNntpTimeServerChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2025)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNntpUpdateIntervalChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2026)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNtimeZoneChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2027)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNspiConnectionUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2030)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcardLostTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2031)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2034)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNstatsPollFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2035)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCardFoundTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2040)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlocalLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2041)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNremoteLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2042)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlocalLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2043)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNremoteLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2044)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNftpSessionInitiatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2047)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNuserResetStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2050)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNprotectionSwitchTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2051)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNipAddressErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2052)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNipNetmaskErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2053)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNdefaultGatewayErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2054)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlossOfSignalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2055)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlossOfSignalNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2056)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlossOfFrameTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2057)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlossOfFrameNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2058)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNrecvAISTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2059)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNrecvAISNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2060)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNrecvYellowAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2061)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNrecvYellowAlarmNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2062)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlineCodeViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2063)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlineCodeViolationNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2064)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNframingAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2065)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNframingAlarmNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2066)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlossOfTimingTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2067)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlossOfTimingNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2068)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNselfTestFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2073)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNselfTestPassTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2074)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNIbmDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2075)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNIbmNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2076)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNnearendCardLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2077)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNnearendCardLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2078)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNnetworkPortLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2079)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNnetworkPortLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2080)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNnetworkCardLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2081)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNnetworkCardLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2082)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNnearendPortLoopbackEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2083)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNnearendPortLoopbackDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2084)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpowerSupplyNotPresentTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2085)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpowerSupplyOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2086)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpowerSupplyDegradedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2087)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpowerSupplyFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2088)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNfanOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2089)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNfanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2090)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcsimDataUnavailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2091)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcsimDataAvailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2092)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcsimModuleFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2093)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNethernetLossOfCarrierTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2094)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNethernetCarrierDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2095)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNtimingPriorityChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2096)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNopenFiberCPEAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2097)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNopenFiberCPEAlarmResolvedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2098)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNstandbyMPMDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2099)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNstandbyMPMLostTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2100)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNprotectionLinkFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2101)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNprotectionLinkFailureResolvedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2102)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNtopologyDatabaseChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2103)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNredundantDatabaseCopyComplete = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2104)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNredundantDatabaseCopyFailed = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2105)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNimageExportInProgressTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2106)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNimageExportSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2107)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNimageExportFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2108)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNunknownCardTypeDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2109)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamBiasCurrentOverLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2110)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamBiasCurrentNormal = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2111)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamTecCurrentOverLimit = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2112)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamTecCurrentNormal = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2113)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamLaserTemperatureDrift = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2114)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamLaserTemperatureStable = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2115)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamMaxInputPowerReached = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2116)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamInputPowerBackDownNormal = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2117)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamMaxOutputPowerReached = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2118)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamOutputPowerNormal = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2119)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamOpticalGainDeltaExceeded = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2120)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamOpticalGainDeltaNormal = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2121)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamMinInputPowerBelowLimit = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2122)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamInputPowerBackUpNormal = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2123)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamSingleAprSensorFailed = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2124)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamSingleAprSensorNormal = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2125)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamDualAprSensorFailed = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2126)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamDualAprSensorNormal = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2127)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamFiberDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2128)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamFiberConnected = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2129)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamControlChanged = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2130)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamLaserModuleOn = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2131)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNosamLaserModuleOff = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2132)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNipAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2133)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNftpCompletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2134)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNftpHostFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2135)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNimageUpdateInProgressTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2136)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNimageUpdateSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2137)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNimageUpdateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2138)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNmoduleUpdateInProgressTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2139)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNmoduleUpdateSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2140)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNmoduleUpdateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2141)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNethernetLinkFailure = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2142)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNethernetLinkFailureResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2143)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNfanNotPresentTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2144)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcardMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2145)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpwrFeedLowVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2146)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpwrFeedLowVoltageRecoveryTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2147)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpwrFeedOKTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2148)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpwrFeedFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2149)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpwrFeedBrkOpenTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2150)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNextCritAlmInpTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2151)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNextMajAlmInpTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2152)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNextMinorAlmInpTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2153)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNextClearAlmInpTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2154)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpwrFeedOverVoltageTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2155)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpwrFeedOverVoltageRecoveryTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2156)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNstandbySWMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2157)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNstandbyDBNotSupportedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2158)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNactiveStandbySWAlignedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2159)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNactiveStandbyDBAlignedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2160)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNmcmescTestSequenceOnTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2161)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNmcmescTestSequenceOffTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2162)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNselfTestStartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2163)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNselfTestEndedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2164)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNvoadmMuxSetPointOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2165)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNvoadmDemuxForceConfig = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2166)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSfpNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2167)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSfpPresent = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2168)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSfpFailure = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2169)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSfpFailureResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2170)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSfpNotAuthorized = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2171)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSfpAuthorized = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2172)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSfpRateMismatch = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2173)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSfpRateMismatchResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2174)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNLinkRxSignalDegraded = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2175)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNLinkRxSignalDegradedResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2176)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNLinkTxFault = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2177)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNLinkTxFaultResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2178)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNPortTxFault = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2179)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNPortTxFaultResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2180)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNXfpNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2181)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNXfpPresent = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2182)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNXfpFailure = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2183)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNXfpFailureResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2184)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNXfpNotAuthorized = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2185)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNXfpAuthorized = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2186)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNXfpRateMismatch = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2187)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNXfpRateMismatchResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2188)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCpeXfpNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2189)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCpeXfpPresent = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2190)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCpeXfpFailure = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2191)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCpeXfpFailureResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2192)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCpeXfpNotAuthorized = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2193)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCpeXfpAuthorized = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2194)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCpeXfpRateMismatch = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2195)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCpeXfpRateMismatchResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2196)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNOutOfFrame = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2197)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNOutOfFrameResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2198)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCpeLossOfFrame = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2199)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCpeLossOfFrameResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2200)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCpeOutOfFrame = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2201)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCpeOutOfFrameResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2202)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCdrFailure = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2203)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNCdrFailureResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2204)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNBitError10Em3 = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2205)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNBitError10Em3Resolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2206)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNBitError10Em4 = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2207)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNBitError10Em4Resolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2208)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNBitError10Em6 = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2209)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNBitError10Em6Resolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2210)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNBitError10Em7 = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2211)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNBitError10Em7Resolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2212)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNAisReceived = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2213)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNAisReceivedResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2214)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNAisTransmitted = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2215)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNAisTransmittedResolved = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2216)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcaseTemperatureHiTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2225)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcaseTemperatureNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2226)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcaseTemperatureLoTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2227)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcaseTemperatureLoNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2228)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpumpTemperatureHiTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2229)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNpumpTemperatureNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2230)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcoilTemperatureHiTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2231)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcoilTemperatureNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2232)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlossOutputPowerTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2233)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlossOutputPowerNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2234)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNreflectedOutputPowerHiTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2235)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNreflectedOutputPowerNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,2236)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlineRateNotSuppoted = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3001)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNmpmBootImageChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3002)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNdateTimeSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3003)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNuserAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3004)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNuserDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3005)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNuserPasswordChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3006)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNuserLevelModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3007)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNsystemNameChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3008)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcardAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3009)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcardDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3010)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNmpmRedundancySwitchOverTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3011)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNconnectionAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3012)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNconnectionDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3013)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNipAddressChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3014)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNipNetmaskChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3015)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNdefaultGatewayChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3016)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNGetCommunityChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3017)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSetCommunityChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3018)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNModuleResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3019)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNtopologyRediscoveredTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3020)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcolorsimEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3021)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcolorsimDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3022)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNautoCutoffEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3023)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNautoCutoffDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3024)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNextAlarmsEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3025)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNextAlarmsDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3026)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNdlModuleActivatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3027)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNhttpEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3032)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNhttpDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3033)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNstaticRouteAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3034)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNstaticRouteDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3035)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNupsrProtectionSwitchOverSrc = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3036)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNupsrProtectionSwitchOverDest = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3037)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNimnIpAddressChanged = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3038)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNupsrNormal = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3039)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNupsrDegraded = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3040)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNusrOneAlarmAction = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3041)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNusrAllAlarmAction = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3042)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNringConfigurationChanged = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3047)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNeventLogCleared = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3048)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNextAlarmInpTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3049)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNextAudioAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3050)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNTrapHostConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3051)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNTrapHostImnRouteEnabled = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3052)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNTrapHostImnRouteDisabled = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3053)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNTrapHostAutoUpdateEnabled = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3054)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNTrapHostAutoUpdateDisabled = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3055)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNTrapPathAdded = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3056)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNTrapPathDeleted = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3057)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNdlModuleActivateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3058)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNLogServerAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3059)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNLogServerDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3060)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNLogMaskChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3061)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNRadiusAuthChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3062)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNRadiusDefaultRealmChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3063)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNRadiusNasIdChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3064)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNRadiusRetriesChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3065)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNRadiusServerAddedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3066)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNRadiusServerDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3067)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNRadiusServerModifiedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3068)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNRadiusTimeoutChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3069)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSshEnabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3070)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSshDisabledTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3071)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSshKeySizeSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3072)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSshMaxSessionsSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3073)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNSshKeyGeneratedTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,3074)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlogonIntruderTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,4000)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlogonSessionStarted = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,4001)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNlogonSessionClosed = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,4002)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
luxNcpAuthenticationErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 4253) + (0,4003)).setObjects(("LUXN-MIB", "eveDateTime"), ("LUXN-MIB", "eveEventId"), ("LUXN-MIB", "eveDescr"), ("LUXN-MIB", "eveSeverity"), ("LUXN-MIB", "eveSysStatus"), ("LUXN-MIB", "eveSource"), ("LUXN-MIB", "cpIpAddress"), ("LUXN-MIB", "eveSeqNum"))
mibBuilder.exportSymbols("LUXN-MIB", mcmescLinkRxSigLowThreshold=mcmescLinkRxSigLowThreshold, connTxNonMuxDmuxSlot=connTxNonMuxDmuxSlot, luxNRadiusNasIdChangedTrap=luxNRadiusNasIdChangedTrap, mcmClearCntrs=mcmClearCntrs, rsdmPerfLocation=rsdmPerfLocation, cpHHistSlot=cpHHistSlot, ocm10gfTable=ocm10gfTable, oppmCPerfShelf=oppmCPerfShelf, muxMfgDate=muxMfgDate, luxNpwrFeedLowVoltageRecoveryTrap=luxNpwrFeedLowVoltageRecoveryTrap, dmmTable=dmmTable, uobNumber=uobNumber, ringID=ringID, cpCPerfShelf=cpCPerfShelf, luxNimageUpdateSuccessTrap=luxNimageUpdateSuccessTrap, diagParam3=diagParam3, dmmMfgDate=dmmMfgDate, rsmPortType=rsmPortType, luxNremoteLoopbackDisabledTrap=luxNremoteLoopbackDisabledTrap, fc8gModelNum=fc8gModelNum, secElementType=secElementType, rpsmModelType=rpsmModelType, rtdmCPerfTable=rtdmCPerfTable, mcm=mcm, cpSNMPTrapCommunity5=cpSNMPTrapCommunity5, ocm4gLink1LinkName=ocm4gLink1LinkName, fadmHNumEvents=fadmHNumEvents, ocm2ConnPort=ocm2ConnPort, ccCBadPktRcvd=ccCBadPktRcvd, osamHistTable=osamHistTable, CardName=CardName, psVoltageLevelFeedB=psVoltageLevelFeedB, oppmSubDivDescr=oppmSubDivDescr, fadmConnCardType=fadmConnCardType, upsmLinkAPathID=upsmLinkAPathID, fc8gNumEvents=fc8gNumEvents, fc8gPerfTable=fc8gPerfTable, ocm10gfCntrEntry=ocm10gfCntrEntry, mcmPortHTotalSESs=mcmPortHTotalSESs, ccErrFreeSecs=ccErrFreeSecs, fadmCPerfShelf=fadmCPerfShelf, dmmHErrFreeSecs=dmmHErrFreeSecs, diagModeNum=diagModeNum, PortIndex=PortIndex, cpHErrFreeSecs=cpHErrFreeSecs, routeMode=routeMode, DownloadShelf=DownloadShelf, ocm10gfFwDate=ocm10gfFwDate, osamPerfState=osamPerfState, ocm4gCardShelf=ocm4gCardShelf, ocm4gClearPmCntrs=ocm4gClearPmCntrs, cpCCounterFlag=cpCCounterFlag, ocm4gHAvailTime=ocm4gHAvailTime, oppmCPerfEntry=oppmCPerfEntry, cpHCntrMode=cpHCntrMode, mcmPortHTotalCRCErrs=mcmPortHTotalCRCErrs, mcmescModelType=mcmescModelType, oetPortEnable=oetPortEnable, osamHHistErrFreeSecs=osamHHistErrFreeSecs, rsdmHWName=rsdmHWName, dlSlot=dlSlot, mcmescPerfState=mcmescPerfState, oscHHistSlot=oscHHistSlot, current1=current1, fadmHistEntry=fadmHistEntry, fnID=fnID, acctmcmescUpTime=acctmcmescUpTime, oscEntry=oscEntry, oetName=oetName, luxNOutOfFrameResolved=luxNOutOfFrameResolved, rpsmPathID=rpsmPathID, luxNipAddressChangedTrap=luxNipAddressChangedTrap, rsdmHHistSlot=rsdmHHistSlot, csimTable=csimTable, ocm2PortMode=ocm2PortMode, cpSetCommunity=cpSetCommunity, dlLongestTime=dlLongestTime, mcmCPerfSlot=mcmCPerfSlot, osamPerfInputPower=osamPerfInputPower, oscPortSlot=oscPortSlot, ocm4gName=ocm4gName, ccNumber=ccNumber, voadmNumEvents=voadmNumEvents, luxNBitError10Em4Resolved=luxNBitError10Em4Resolved, cpHTotPktSent=cpHTotPktSent, CardShelf=CardShelf, mcmHNumEvents=mcmHNumEvents, dlHLongestSize=dlHLongestSize, osamSerialNum=osamSerialNum, mcmBufAllocFail=mcmBufAllocFail, dmmCntrSlot=dmmCntrSlot, ocm2PmLinkRxErrors=ocm2PmLinkRxErrors, mcmesc2ndFPGAVersionID=mcmesc2ndFPGAVersionID, csimNumEvents=csimNumEvents, luxNnetworkPortLoopbackEnabledTrap=luxNnetworkPortLoopbackEnabledTrap, rsmHist=rsmHist, imnDynamicRouteNextHop=imnDynamicRouteNextHop, ocm2ModelNum=ocm2ModelNum, oppmHMode=oppmHMode, oppmHHistShelf=oppmHHistShelf, luxNCpeLossOfFrameResolved=luxNCpeLossOfFrameResolved, cpHBytesSent=cpHBytesSent, csim=csim, fc8gLastBootTime=fc8gLastBootTime, ocm4gPmLocation=ocm4gPmLocation, mcmescConnDemuxShelf=mcmescConnDemuxShelf, tapPerfLocation=tapPerfLocation, oppmHHistSlot=oppmHHistSlot, mcmModulation=mcmModulation, fadmPathID=fadmPathID, luxNTelnetClientDisabled=luxNTelnetClientDisabled, ocm10gfNumPorts=ocm10gfNumPorts, rpsmPerfLocation=rpsmPerfLocation, osam2PerfPump1ITEC=osam2PerfPump1ITEC, oscHistTable=oscHistTable, uobPerfStatus=uobPerfStatus, luxNactiveStandbySWAlignedTrap=luxNactiveStandbySWAlignedTrap, oetHwVersionID=oetHwVersionID, rsmWorkingPower=rsmWorkingPower, osamPortType=osamPortType, rpsmHWVersionID=rpsmHWVersionID, rsmFWDate=rsmFWDate, mcmescNumber=mcmescNumber, dmmPortTable=dmmPortTable, mcmescLinkSelfTestCdrI2c=mcmescLinkSelfTestCdrI2c, connMuxSlot=connMuxSlot, csimCurrentSlot=csimCurrentSlot, mcmCPerfShelf=mcmCPerfShelf, rtdmCond=rtdmCond, mcmPortHTotalFEs=mcmPortHTotalFEs, eveDescr=eveDescr, luxNmcmescTestSequenceOnTrap=luxNmcmescTestSequenceOnTrap, fadmConnIpAddress=fadmConnIpAddress, luxNuserResetStatusTrap=luxNuserResetStatusTrap, rsmHistEntry=rsmHistEntry, mcmPortHTotalLESs=mcmPortHTotalLESs, upsmConnPort=upsmConnPort, fc8gFwName=fc8gFwName, luxNosamTecCurrentNormal=luxNosamTecCurrentNormal, oscPortTxState=oscPortTxState, usrSecActDateTime=usrSecActDateTime, oppmTxInsertLoss=oppmTxInsertLoss, oetFwDate=oetFwDate, voadmHHistType=voadmHHistType, upsmHHistSlot=upsmHHistSlot, osamFWName=osamFWName, rsmLastBootTime=rsmLastBootTime, connMuxPort=connMuxPort, mcmBiasCurrent=mcmBiasCurrent, muxCPerfShelf=muxCPerfShelf, mcmPerfSlot=mcmPerfSlot, rsdmNumber=rsdmNumber, sysExhaustTemperature=sysExhaustTemperature, mfgShelfID=mfgShelfID, oppmSwitchState=oppmSwitchState, muxHistEntry=muxHistEntry, luxNactiveStandbyDBAlignedTrap=luxNactiveStandbyDBAlignedTrap, upsmHMode=upsmHMode, rsmNumSubDiv=rsmNumSubDiv, oppmModelNum=oppmModelNum, mcmescLinkSelfTestTxI2c=mcmescLinkSelfTestTxI2c, oppmWorkingPower=oppmWorkingPower, dlCStatus=dlCStatus, mcmCBufAllocFail=mcmCBufAllocFail, muxUpgradeFlag=muxUpgradeFlag, sysClearCounters=sysClearCounters, csimIntervalSlot=csimIntervalSlot, cpSystemName=cpSystemName, fc8gPortWavelength=fc8gPortWavelength, ocm4gPmCpeRxPwr=ocm4gPmCpeRxPwr, mcmCntrEntry=mcmCntrEntry, osamROMSize=osamROMSize, mcmPortHTotalPort=mcmPortHTotalPort, diagTLocation=diagTLocation, mcmescNumEvents=mcmescNumEvents, mfgPsType=mfgPsType, sysSNMPKeepaliveInterval=sysSNMPKeepaliveInterval, ocm4gHNumEvents=ocm4gHNumEvents, rtdmHLastBootTime=rtdmHLastBootTime, rsdmConnSlot=rsdmConnSlot, cpHistTable=cpHistTable, mcmHWName=mcmHWName, fadmConnChassisID=fadmConnChassisID, upsmPerfTable=upsmPerfTable, fnMfgDate=fnMfgDate, ccCBufAllocFail=ccCBufAllocFail, rsdmWorkingPower=rsdmWorkingPower, muxPerfSlot=muxPerfSlot, tapHNumEvents=tapHNumEvents, oetPortItu=oetPortItu, upsmPortEntry=upsmPortEntry, rpsmMinProtPowerForSwitch=rpsmMinProtPowerForSwitch, mcmPortHTotalEntry=mcmPortHTotalEntry, luxNmoduleUpdateInProgressTrap=luxNmoduleUpdateInProgressTrap, mcmTotPktRcvd=mcmTotPktRcvd, luxNspiConnectionUpTrap=luxNspiConnectionUpTrap, dlOSVersion=dlOSVersion, mcmescBadPktRcvd=mcmescBadPktRcvd, oppmCPerfState=oppmCPerfState, mcmescPortCurrCrcErr=mcmescPortCurrCrcErr, luxNlineCodeViolationNormalTrap=luxNlineCodeViolationNormalTrap, rsmLinkBPathID=rsmLinkBPathID, mcmPathID=mcmPathID, cpCounterFlag=cpCounterFlag, mcmCCounterFlag=mcmCCounterFlag, rtdmModelNum=rtdmModelNum, configuration=configuration, upsmAdminState=upsmAdminState, rsm=rsm, upsmMarginForSwitch=upsmMarginForSwitch, diagTestId=diagTestId, ccClockDiv=ccClockDiv, luxNupsrNormal=luxNupsrNormal, ocm2Name=ocm2Name, acctmcmescResetCntrs=acctmcmescResetCntrs, eveSeverity=eveSeverity, voadmHHistSlot=voadmHHistSlot, mcmPortHTotalDMs=mcmPortHTotalDMs, csimShelf=csimShelf, mcmPortCCntrCardLocation=mcmPortCCntrCardLocation, mcmPortCurrCardLocation=mcmPortCurrCardLocation, ccHCntrShelf=ccHCntrShelf, mcmescCntrShelf=mcmescCntrShelf, rtdmCPerfSlot=rtdmCPerfSlot, luxNTrapPathAdded=luxNTrapPathAdded, diagShelf=diagShelf, csimEntry=csimEntry, csimIntervalNumber=csimIntervalNumber, oscPortLocation=oscPortLocation, DownloadType=DownloadType, imnStaticRoutingTable=imnStaticRoutingTable, uobPmEntry=uobPmEntry, mcmescTotPktSent=mcmescTotPktSent, ocm4gConnTable=ocm4gConnTable, fc8gLink2DataRate=fc8gLink2DataRate, rpsmTable=rpsmTable, ccMfgApc=ccMfgApc, rpsmHHistShelf=rpsmHHistShelf, upsmPerfStatus=upsmPerfStatus, muxTable=muxTable, cpNtpState=cpNtpState, fadmHWName=fadmHWName, dmmConnCardLocation=dmmConnCardLocation, osamModelType=osamModelType, oscCardLocation=oscCardLocation, topologyFarEndSystemName=topologyFarEndSystemName, faults=faults, mcmescPortTable=mcmescPortTable, mcmCounterFlag=mcmCounterFlag, oetPmLinkFecCorrectedBit=oetPmLinkFecCorrectedBit, oscPerfShelf=oscPerfShelf, mcmescNumSubDiv=mcmescNumSubDiv, ocm2RegenMode=ocm2RegenMode, accounting=accounting)
mibBuilder.exportSymbols("LUXN-MIB", dmmConnEntry=dmmConnEntry, rsmNumEvents=rsmNumEvents, ccCModulation=ccCModulation, luxNosamFiberDisconnected=luxNosamFiberDisconnected, oscName=oscName, rpsmEntry=rpsmEntry, ocm2Link2LineRate=ocm2Link2LineRate, rsmCPerfShelf=rsmCPerfShelf, EventBuffer=EventBuffer, oppmName=oppmName, oetPortEntry=oetPortEntry, upsmDebounce=upsmDebounce, mcmescLinkSelfTestResultTable=mcmescLinkSelfTestResultTable, mcmescHist=mcmescHist, mcmCleiNum=mcmCleiNum, mcmCBadPktRcvd=mcmCBadPktRcvd, osamPerfOutputPower=osamPerfOutputPower, oetPortMode=oetPortMode, mcmCntrShelf=mcmCntrShelf, dmmConnTable=dmmConnTable, uobCleiNum=uobCleiNum, ocm4gPortShelf=ocm4gPortShelf, ccSubDivTable=ccSubDivTable, ccSetState=ccSetState, rpsmNumSubDiv=rpsmNumSubDiv, rtdmCAvailTime=rtdmCAvailTime, ocm10gfBytesRcvd=ocm10gfBytesRcvd, mcmescLinkHTotalLoss=mcmescLinkHTotalLoss, cpEcbAllocFail=cpEcbAllocFail, muxCond=muxCond, muxEntry=muxEntry, osamCardLocation=osamCardLocation, mcmescLinkCurrBer=mcmescLinkCurrBer, fadmModelNum=fadmModelNum, fadmHHistEntry=fadmHHistEntry, tapAvailTime=tapAvailTime, ocm2PmShelf=ocm2PmShelf, cpHNumEvents=cpHNumEvents, rtdmHMode=rtdmHMode, dmmConnCardSlot=dmmConnCardSlot, fc8gEntry=fc8gEntry, oppmHErrFreeSecs=oppmHErrFreeSecs, voadmModelType=voadmModelType, oppmConnIpAddress=oppmConnIpAddress, ccNumSubDiv=ccNumSubDiv, cpHLastBootTime=cpHLastBootTime, fadmFWVersionID=fadmFWVersionID, oppmHHistLocation=oppmHHistLocation, fc8gPerf=fc8gPerf, mcmescLinkCurrDuration=mcmescLinkCurrDuration, csimCurrentBERs=csimCurrentBERs, cpTrapsSent=cpTrapsSent, uob=uob, osamPerfPCBTemperature=osamPerfPCBTemperature, luxNimageUpdateInProgressTrap=luxNimageUpdateInProgressTrap, csimCurrentEntry=csimCurrentEntry, rsmHMode=rsmHMode, rtdmCCounterFlag=rtdmCCounterFlag, rsmPortCardSlot=rsmPortCardSlot, oscPmErredSecs=oscPmErredSecs, routeLocalCCShelf=routeLocalCCShelf, mcmescLinkHTotalTable=mcmescLinkHTotalTable, ZmsFileName=ZmsFileName, systemSecMgmt=systemSecMgmt, upsmLinkBPathID=upsmLinkBPathID, ocm2PerfSlot=ocm2PerfSlot, cpCntrShelf=cpCntrShelf, oetLinkEnable=oetLinkEnable, cpSNMPTrapCommunity4=cpSNMPTrapCommunity4, dlLocation=dlLocation, ocm4gHistTable=ocm4gHistTable, psCPerfState=psCPerfState, cpNumEvents=cpNumEvents, luxNXfpNotPresent=luxNXfpNotPresent, fn=fn, oetEAPSMode=oetEAPSMode, cpLogServer4=cpLogServer4, upsmHWName=upsmHWName, topologyFarEndNodeCardType=topologyFarEndNodeCardType, luxNcsimDataUnavailableTrap=luxNcsimDataUnavailableTrap, mcmescConnMuxSlot=mcmescConnMuxSlot, acctCPDsgnStdby=acctCPDsgnStdby, muxConnSlot=muxConnSlot, mcmPortHIntervalSESs=mcmPortHIntervalSESs, connDemuxSlot=connDemuxSlot, ccAvailTime=ccAvailTime, cpCleiNum=cpCleiNum, mcmPortCardShelf=mcmPortCardShelf, fadmSubDivDescr=fadmSubDivDescr, voadmPerfState=voadmPerfState, luxNlossOfFrameNormalTrap=luxNlossOfFrameNormalTrap, luxNRadiusServerDeletedTrap=luxNRadiusServerDeletedTrap, ccLinkRxSigStrStatus=ccLinkRxSigStrStatus, routeLocalCCSlot=routeLocalCCSlot, mcmescBoardVersionID=mcmescBoardVersionID, mcmconnDemuxSlot=mcmconnDemuxSlot, ocm2PmSlot=ocm2PmSlot, zmsConfigSyncFileName=zmsConfigSyncFileName, usrLogEntry=usrLogEntry, usrSecFullName=usrSecFullName, mcmescPortCurrCardShelf=mcmescPortCurrCardShelf, luxNpumpTemperatureHiTrap=luxNpumpTemperatureHiTrap, tapModelType=tapModelType, rpsmConnPort=rpsmConnPort, rsmSubDivOffset=rsmSubDivOffset, ccLossOfLight=ccLossOfLight, ccLaserOnOff=ccLaserOnOff, psBreakerConditionFeedB=psBreakerConditionFeedB, ocm2PmLink=ocm2PmLink, fadmAvailTime=fadmAvailTime, voadmEntry=voadmEntry, luxNCardFoundTrap=luxNCardFoundTrap, dlHistTable=dlHistTable, rsdmPathID=rsdmPathID, oetLinkIndex=oetLinkIndex, mcmSetState=mcmSetState, dmmLastBootTime=dmmLastBootTime, ccCPerfState=ccCPerfState, ocm4gHHistTable=ocm4gHHistTable, muxPortNumber=muxPortNumber, TrapStatus=TrapStatus, tapNumEvents=tapNumEvents, ocm4gPortTable=ocm4gPortTable, DownloadSlot=DownloadSlot, rsdmBlackOutTime=rsdmBlackOutTime, luxNfanOKTrap=luxNfanOKTrap, oppmTable=oppmTable, tapHHistTable=tapHHistTable, ccLinkAutoDisable=ccLinkAutoDisable, mcmLinkName=mcmLinkName, secRoleTable=secRoleTable, luxNCpeXfpFailureResolved=luxNCpeXfpFailureResolved, ocm10gfMfgDate=ocm10gfMfgDate, cpHCntrTable=cpHCntrTable, luxNnetworkPortLoopbackDisabledTrap=luxNnetworkPortLoopbackDisabledTrap, ocm10gfHwName=ocm10gfHwName, ccCpeRxSigDetect=ccCpeRxSigDetect, mcmescTotPktRcvd=mcmescTotPktRcvd, mcmescHCntrMode=mcmescHCntrMode, uobModelType=uobModelType, rpsmProtectionPower=rpsmProtectionPower, ocm4gPerfStatus=ocm4gPerfStatus, rtdmCommonWInsertionLoss=rtdmCommonWInsertionLoss, ocm2CntrSlot=ocm2CntrSlot, mfgChassisType=mfgChassisType, acctCPEntry=acctCPEntry, ocm4gPerfShelf=ocm4gPerfShelf, osamHist=osamHist, ocm10gfConnLocation=ocm10gfConnLocation, dlHistEntry=dlHistEntry, oetPmLinkTxPwr=oetPmLinkTxPwr, mcmescPortCurrPort=mcmescPortCurrPort, ccHLastBootTime=ccHLastBootTime, fadmPerfEntry=fadmPerfEntry, rsdmHLastBootTime=rsdmHLastBootTime, mcmescConnRxOcmDelete=mcmescConnRxOcmDelete, rtdmPortEntry=rtdmPortEntry, ccPerfEntry=ccPerfEntry, ocm10gfEntry=ocm10gfEntry, acctCPTable=acctCPTable, upsmOpticsMfgDate=upsmOpticsMfgDate, luxNosamSingleAprSensorNormal=luxNosamSingleAprSensorNormal, upsmCCounterFlag=upsmCCounterFlag, ocm2PmNumCpeRxIntervals=ocm2PmNumCpeRxIntervals, oetLinkApplyChanges=oetLinkApplyChanges, ccHBytesSent=ccHBytesSent, mcmTable=mcmTable, ocm10gfPmCpe10GbeRxErredPkts=ocm10gfPmCpe10GbeRxErredPkts, ccPerfStatus=ccPerfStatus, rpsmHistTable=rpsmHistTable, sysStatus=sysStatus, diagParam2=diagParam2, luxNreflectedOutputPowerHiTrap=luxNreflectedOutputPowerHiTrap, rpsmCNumEvents=rpsmCNumEvents, sysCErrFreeSecs=sysCErrFreeSecs, dmmAdminState=dmmAdminState, fc8gPortMode=fc8gPortMode, ccLaserType=ccLaserType, mcmescConnDemuxSlot=mcmescConnDemuxSlot, mcmescLastBootTime=mcmescLastBootTime, cpBadPktRcvd=cpBadPktRcvd, ocm4gPerfTable=ocm4gPerfTable, mcmescPerfInterval=mcmescPerfInterval, rsdmCCounterFlag=rsdmCCounterFlag, csimCurrentUAIs=csimCurrentUAIs, dlExportType=dlExportType, oetAdminState=oetAdminState, cpCNumEvents=cpCNumEvents, fnHNumEvents=fnHNumEvents, ccCCntrShelf=ccCCntrShelf, acctCCEntry=acctCCEntry, luxNTrapPathDeleted=luxNTrapPathDeleted, routeIpDestAddress=routeIpDestAddress, luxNXfpRateMismatchResolved=luxNXfpRateMismatchResolved, oppmHistTable=oppmHistTable, luxNLogServerAddedTrap=luxNLogServerAddedTrap, ccMfgClockDiv=ccMfgClockDiv, mcmPortCurrCardShelf=mcmPortCurrCardShelf, rpsmConnShelf=rpsmConnShelf, uobPmSystemStatus=uobPmSystemStatus, ccCIwmModulation=ccCIwmModulation, ccCCntrLocation=ccCCntrLocation, rsdmPerfEntry=rsdmPerfEntry, rtdmCPerfShelf=rtdmCPerfShelf, mcmescPortSelfTestPort=mcmescPortSelfTestPort, oscErrFreeSecs=oscErrFreeSecs, luxNosamLaserTemperatureDrift=luxNosamLaserTemperatureDrift, cpPerfMode=cpPerfMode, dlPreQualTable=dlPreQualTable, luxNmpmBootImageChangedTrap=luxNmpmBootImageChangedTrap, cpUpsrMode=cpUpsrMode, ccCTemperature=ccCTemperature, muxLastBootTime=muxLastBootTime, oetPmLinkFecCorrected0s=oetPmLinkFecCorrected0s, RingIdName=RingIdName, systemPerf=systemPerf, ocm4gCardSlot=ocm4gCardSlot, ocm4gPortMode=ocm4gPortMode, mcmescPortCardLocation=mcmescPortCardLocation, tapCleiNum=tapCleiNum, luxNlogonSessionStarted=luxNlogonSessionStarted, mcmescPortHTotalDuration=mcmescPortHTotalDuration, rpsmBlackOutTime=rpsmBlackOutTime, ocm2CardSlot=ocm2CardSlot, oetAvailTime=oetAvailTime, fadmHistTable=fadmHistTable, alarmSeverity=alarmSeverity, cpMIBVersion=cpMIBVersion, luxNreflectedOutputPowerNormalTrap=luxNreflectedOutputPowerNormalTrap, muxSubDivOffset=muxSubDivOffset, upsmCleiNum=upsmCleiNum, imnDynamicRouteIpDest=imnDynamicRouteIpDest, luxNdlModuleActivatedTrap=luxNdlModuleActivatedTrap, psTable=psTable, uobPmTotalGain=uobPmTotalGain, cpCErrFreeSecs=cpCErrFreeSecs, acctmcmescUnAvail=acctmcmescUnAvail, rsmPerfLocation=rsmPerfLocation, ccAdminState=ccAdminState, luxNVoadmOutofRangeTrap=luxNVoadmOutofRangeTrap, ccPairShelf=ccPairShelf, mcmescEntry=mcmescEntry, upsmPerfState=upsmPerfState, upsmLinkAState=upsmLinkAState, voadmHistTable=voadmHistTable, rtdmConnSlot=rtdmConnSlot, fnTable=fnTable, ccHBadPktRcvd=ccHBadPktRcvd, zmsIpAddress=zmsIpAddress, mcmesc=mcmesc, rpsmMarginForSwitch=rpsmMarginForSwitch, oscCntrEntry=oscCntrEntry, muxCPerfEntry=muxCPerfEntry, ocm2PerfStatus=ocm2PerfStatus)
mibBuilder.exportSymbols("LUXN-MIB", diagModeEntry=diagModeEntry, muxCCounterFlag=muxCCounterFlag, rtdmFWDate=rtdmFWDate, oppmSerialNum=oppmSerialNum, dmmBytesRcvd=dmmBytesRcvd, voadmCardLocation=voadmCardLocation, tapHHistShelf=tapHHistShelf, tapEntry=tapEntry, oscCntrLocation=oscCntrLocation, grpName=grpName, rsdmSubDivEntry=rsdmSubDivEntry, secElementOID=secElementOID, cpPerf=cpPerf, luxNCdrFailure=luxNCdrFailure, fnHist=fnHist, dmmPortSfpConnectorType=dmmPortSfpConnectorType, imnRouteKeepAliveTimer=imnRouteKeepAliveTimer, ccCntrType=ccCntrType, fadmPortType=fadmPortType, mcmMfgApc=mcmMfgApc, rtdmPortCardSlot=rtdmPortCardSlot, fadmCond=fadmCond, mcmCIwmModulation=mcmCIwmModulation, rsmFWName=rsmFWName, mcmPortHIntervalCRCErrs=mcmPortHIntervalCRCErrs, luxNSNMPKeepalive=luxNSNMPKeepalive, acctCCUnAvail=acctCCUnAvail, voadmType=voadmType, luxNSfpAuthorized=luxNSfpAuthorized, luxNXfpAuthorized=luxNXfpAuthorized, luxNimnIpAddressChanged=luxNimnIpAddressChanged, fadmCAvailTime=fadmCAvailTime, ocm10gfPmCpeTxPwr=ocm10gfPmCpeTxPwr, cpAutoModuleUpdate=cpAutoModuleUpdate, luxNCpeXfpNotPresent=luxNCpeXfpNotPresent, luxNethernetLinkFailureResolved=luxNethernetLinkFailureResolved, diagParam1=diagParam1, tapPerfTable=tapPerfTable, uobOutPower=uobOutPower, osamFWVersionID=osamFWVersionID, acctCPActive=acctCPActive, luxNXfpFailure=luxNXfpFailure, oscBadPktRcvd=oscBadPktRcvd, mcmSubDivIndex=mcmSubDivIndex, mcmescDaughterBoard1VersionID=mcmescDaughterBoard1VersionID, rpsmConnCardType=rpsmConnCardType, mcmescSubDivTable=mcmescSubDivTable, rtdmHHistEntry=rtdmHHistEntry, sysAudioAlarm=sysAudioAlarm, dmmTotPktSent=dmmTotPktSent, imnRoutePerfIpDest=imnRoutePerfIpDest, muxCardSlot=muxCardSlot, oscBytesRcvd=oscBytesRcvd, ccLastBootTime=ccLastBootTime, muxHHistType=muxHHistType, luxNautoCutoffDisabledTrap=luxNautoCutoffDisabledTrap, dmmHistTable=dmmHistTable, osamModelNum=osamModelNum, luxNopenFiberCPEAlarmResolvedTrap=luxNopenFiberCPEAlarmResolvedTrap, voadmActiveChannels=voadmActiveChannels, PathIdName=PathIdName, ocm2ConnCardShelf=ocm2ConnCardShelf, mcmPortCurrLESs=mcmPortCurrLESs, muxPerfTable=muxPerfTable, ocm4gConnPort=ocm4gConnPort, mcmescHCntrTable=mcmescHCntrTable, systemCond=systemCond, HistoryMode=HistoryMode, sysModuleupdateJobsWaiting=sysModuleupdateJobsWaiting, dmmPortLocation=dmmPortLocation, cpCntrTable=cpCntrTable, imnStaticRoutingEntry=imnStaticRoutingEntry, radiusServerSecret=radiusServerSecret, rsmModelType=rsmModelType, luxNlineRateNotSuppoted=luxNlineRateNotSuppoted, luxNRadiusRetriesChangedTrap=luxNRadiusRetriesChangedTrap, dlOSTable=dlOSTable, ocm2HMode=ocm2HMode, luxNRadiusTimeoutChangedTrap=luxNRadiusTimeoutChangedTrap, cpRedunSubDivImgDBVersion=cpRedunSubDivImgDBVersion, secNumRoles=secNumRoles, osam=osam, rtdmSubDivIndex=rtdmSubDivIndex, rsmPerfTable=rsmPerfTable, rtdmPerfSlot=rtdmPerfSlot, zmsConfigSyncExists=zmsConfigSyncExists, muxCErrFreeSecs=muxCErrFreeSecs, rsmCPerfEntry=rsmCPerfEntry, muxCardShelf=muxCardShelf, ccCLaserOnOff=ccCLaserOnOff, ocm10gfPortSlot=ocm10gfPortSlot, rpsmOpticsMfgDate=rpsmOpticsMfgDate, mcmNumPorts=mcmNumPorts, fc8gMfgDate=fc8gMfgDate, rpsmPortTable=rpsmPortTable, oetFpgaRevDB=oetFpgaRevDB, rsdmLinkEastStatus=rsdmLinkEastStatus, ocm10gfPmCpe10GbeRxTotalPkts=ocm10gfPmCpe10GbeRxTotalPkts, mcmescLinkHIntervalOobErr=mcmescLinkHIntervalOobErr, luxNSfpRateMismatch=luxNSfpRateMismatch, luxNnetworkCardLoopbackDisabledTrap=luxNnetworkCardLoopbackDisabledTrap, muxWavelength=muxWavelength, osamCPerfEntry=osamCPerfEntry, luxNSfpFailureResolved=luxNSfpFailureResolved, mcmescPortCurrBer=mcmescPortCurrBer, upsmCardShelf=upsmCardShelf, mfgCleiNum=mfgCleiNum, upsmHHistShelf=upsmHHistShelf, ocm4gAdminState=ocm4gAdminState, ocm10gf=ocm10gf, sysModupdLocation=sysModupdLocation, fnEntry=fnEntry, fc8gCpe2AutoDisable=fc8gCpe2AutoDisable, oetPortShelf=oetPortShelf, ocm4gSerialNum=ocm4gSerialNum, ocm2ClearPmCntrs=ocm2ClearPmCntrs, CardCycleMode=CardCycleMode, luxNuserPasswordChangeTrap=luxNuserPasswordChangeTrap, usrSecEntry=usrSecEntry, ocm4gHistEntry=ocm4gHistEntry, connRxNonMuxDmuxShelf=connRxNonMuxDmuxShelf, mcmescPortCurrRxSig=mcmescPortCurrRxSig, downloadHist=downloadHist, rsdmRxITUNumber=rsdmRxITUNumber, upsmPerfSlot=upsmPerfSlot, cpCSNMPCmdsRcvd=cpCSNMPCmdsRcvd, dlBadDownloads=dlBadDownloads, ccPerfSlot=ccPerfSlot, fc8gPortEntry=fc8gPortEntry, luxNpowerSupplyDegradedTrap=luxNpowerSupplyDegradedTrap, ocm10gfLastBootTime=ocm10gfLastBootTime, rsdmSubDivSize=rsdmSubDivSize, ocm10gfPerfShelf=ocm10gfPerfShelf, oetHwName=oetHwName, dmmHist=dmmHist, oscNumber=oscNumber, eveEightHundredthEntryDateTime=eveEightHundredthEntryDateTime, upsmSetState=upsmSetState, cpFWVersionID=cpFWVersionID, uobFwDate=uobFwDate, connRxNonMuxDmuxPort=connRxNonMuxDmuxPort, luxNprotectionSwitchTrap=luxNprotectionSwitchTrap, ocm4gFwName=ocm4gFwName, mcmSubDivOffset=mcmSubDivOffset, rtdmHHistSlot=rtdmHHistSlot, oppmCErrFreeSecs=oppmCErrFreeSecs, mcmCPerfStatus=mcmCPerfStatus, luxNextAudioAlarmTrap=luxNextAudioAlarmTrap, psPerfStatusFeedB=psPerfStatusFeedB, mcmLossOfLight=mcmLossOfLight, connTxNonMuxDmuxShelf=connTxNonMuxDmuxShelf, voadmPortMeasuredAtten=voadmPortMeasuredAtten, oppmHHistEntry=oppmHHistEntry, luxNntpTimeServerChangedTrap=luxNntpTimeServerChangedTrap, luxNCpeOutOfFrame=luxNCpeOutOfFrame, mcmescBytesSent=mcmescBytesSent, mcmSubDivTable=mcmSubDivTable, mcmItuNum=mcmItuNum, luxNlaserPowerNormalTrap=luxNlaserPowerNormalTrap, dlPreQualTypeVersion=dlPreQualTypeVersion, luxNosamTecCurrentOverLimit=luxNosamTecCurrentOverLimit, luxNupsrProtectionSwitchOverSrc=luxNupsrProtectionSwitchOverSrc, mcmPortHIntervalASs=mcmPortHIntervalASs, mcmescPortHIntervalDuration=mcmescPortHIntervalDuration, ocm4gFwVersionID=ocm4gFwVersionID, mcmescCardLocation=mcmescCardLocation, oetPmPortTxBytes=oetPmPortTxBytes, ccLinkSummaryStatus=ccLinkSummaryStatus, csimIntervalEFIs=csimIntervalEFIs, osamPortCardType=osamPortCardType, fadmConnPort=fadmConnPort, psCPerfEntry=psCPerfEntry, rpsmHNumEvents=rpsmHNumEvents, mcmescLinkHTotalCardSlot=mcmescLinkHTotalCardSlot, LogonID=LogonID, ocm2CntrLocation=ocm2CntrLocation, rsmHHistSlot=rsmHHistSlot, voadmTable=voadmTable, ccHBufAllocFail=ccHBufAllocFail, tapNumPorts=tapNumPorts, osamEntry=osamEntry, rsmSerialNum=rsmSerialNum, luxNGetCommunityChangeTrap=luxNGetCommunityChangeTrap, oetPmLinkFecCorrected1s=oetPmLinkFecCorrected1s, rtdmHWDate=rtdmHWDate, ocm4gConnCardType=ocm4gConnCardType, voadmFwVersionID=voadmFwVersionID, rsmROMSize=rsmROMSize, rsmCardName=rsmCardName, rsmHHistShelf=rsmHHistShelf, rpsmFWVersionID=rpsmFWVersionID, osamTable=osamTable, rsdm=rsdm, fc8g=fc8g, alarmLogEntry=alarmLogEntry, DownloadLocation=DownloadLocation, fadmName=fadmName, dmmPortIndex=dmmPortIndex, psPerf=psPerf, dmmPortTxReach=dmmPortTxReach, oetPerfShelf=oetPerfShelf, muxPortAvgInsertionLoss=muxPortAvgInsertionLoss, fc8gName=fc8gName, acctCPDsgnAct=acctCPDsgnAct, csimCurrentSEIs=csimCurrentSEIs, ocm2=ocm2, rpsmSubDivOffset=rpsmSubDivOffset, voadmHMode=voadmHMode, osamNumSubDiv=osamNumSubDiv, upsm=upsm, upsmSubDivEntry=upsmSubDivEntry, tapHHistEntry=tapHHistEntry, mcmCCntrTable=mcmCCntrTable, osam2PerfPump2ITEC=osam2PerfPump2ITEC, osamNoiseFigure=osamNoiseFigure, fadmSubDivIndex=fadmSubDivIndex, ocm10gfConnEntry=ocm10gfConnEntry, sysCStatus=sysCStatus, luxNautoCutoffEnabledTrap=luxNautoCutoffEnabledTrap, uobCardLocation=uobCardLocation, mcmescHCntrSlot=mcmescHCntrSlot, fadm=fadm, rpsmPortCardSlot=rpsmPortCardSlot, oppmRxInsertLoss=oppmRxInsertLoss, oppmCleiNum=oppmCleiNum, ocm10gfHErrFreeSecs=ocm10gfHErrFreeSecs, topologyFarEndNodeCardShelf=topologyFarEndNodeCardShelf, psMode=psMode, ocm2PmTable=ocm2PmTable, ocm2PmCpeRxErrors=ocm2PmCpeRxErrors, radiusRetries=radiusRetries, secElement=secElement, osamCNumEvents=osamCNumEvents, eveSysStatus=eveSysStatus, oscSerialNum=oscSerialNum, oetPerfLocation=oetPerfLocation, ccBackpackRxExpressLoss=ccBackpackRxExpressLoss, muxChannelsPerBand=muxChannelsPerBand, ocm10gfPmLinkFecErrors=ocm10gfPmLinkFecErrors, rtdmAdminState=rtdmAdminState, eveHundredthEntryDateTime=eveHundredthEntryDateTime, mcmescCleiNum=mcmescCleiNum, ringPath2RemoteChassisId=ringPath2RemoteChassisId, psPerfType=psPerfType, ccModelType=ccModelType, fadmPerfSlot=fadmPerfSlot, mcmescConnTxOcmDelete=mcmescConnTxOcmDelete, rsdmCAvailTime=rsdmCAvailTime, oppm=oppm, muxBootPromVer=muxBootPromVer, voadmNumber=voadmNumber, mcmescHTotBadTrans=mcmescHTotBadTrans, oppmSubDivEntry=oppmSubDivEntry, ccPerf=ccPerf)
mibBuilder.exportSymbols("LUXN-MIB", fadmPerfStatus=fadmPerfStatus, oppmPortCardSlot=oppmPortCardSlot, cpPerfState=cpPerfState, osamNumPorts=osamNumPorts, dlFtpPort=dlFtpPort, csimHistTable=csimHistTable, mcmescPortHTotalCrcErr=mcmescPortHTotalCrcErr, ccCTotBadTrans=ccCTotBadTrans, rsdmSubDivDescr=rsdmSubDivDescr, oppmHHistTable=oppmHHistTable, psVoltageLevel12Volt=psVoltageLevel12Volt, cpHMsgsDlvrd=cpHMsgsDlvrd, dmmPerf=dmmPerf, cpName=cpName, dmmPathID=dmmPathID, uobModuleName=uobModuleName, rtdmSubDivSize=rtdmSubDivSize, upsmSubDivIndex=upsmSubDivIndex, mcmHMsgsDlvrd=mcmHMsgsDlvrd, radiusSecEntry=radiusSecEntry, ocm4gPortSlot=ocm4gPortSlot, rsmCCounterFlag=rsmCCounterFlag, luxNnetworkCardLoopbackEnabledTrap=luxNnetworkCardLoopbackEnabledTrap, tapPathID=tapPathID, ocm4gPmCpeTxErrors=ocm4gPmCpeTxErrors, dlHBadDownloads=dlHBadDownloads, acctmcmShelf=acctmcmShelf, ocm4gCntrType=ocm4gCntrType, oetProtMode=oetProtMode, oppmPortType=oppmPortType, mcmEthernetStatus=mcmEthernetStatus, mcmescCardShelf=mcmescCardShelf, CardLocation=CardLocation, rtdmROMSize=rtdmROMSize, oscAdminState=oscAdminState, rpsmPortEntry=rpsmPortEntry, oetPortConfigInProgress=oetPortConfigInProgress, sysSDMRequestsQueued=sysSDMRequestsQueued, cpHCntrSlot=cpHCntrSlot, ccHNumEvents=ccHNumEvents, rtdmNumber=rtdmNumber, mcmescCpeErrAlarmThreshold=mcmescCpeErrAlarmThreshold, connCpeRxMcmescPort=connCpeRxMcmescPort, oscNumEvents=oscNumEvents, ocm4gPmCpeRxErrors=ocm4gPmCpeRxErrors, mcmHCntrShelf=mcmHCntrShelf, mcmBootPromVer=mcmBootPromVer, ocm2HwName=ocm2HwName, mcmescPortConnectionState=mcmescPortConnectionState, ccTotPktSent=ccTotPktSent, oppmPerfTable=oppmPerfTable, oppmCNumEvents=oppmCNumEvents, fadmExpressLoss=fadmExpressLoss, oppmNumEvents=oppmNumEvents, ccHHistTable=ccHHistTable, rpsmModelNum=rpsmModelNum, fadmInsertionLoss2=fadmInsertionLoss2, rsdmCPerfLocation=rsdmCPerfLocation, upsmAvailTime=upsmAvailTime, rsdmCardShelf=rsdmCardShelf, Boolean=Boolean, imnDynamicRouteIpMask=imnDynamicRouteIpMask, rsmTable=rsmTable, voadmPortCardShelf=voadmPortCardShelf, uobPmShelf=uobPmShelf, dmmHHistEntry=dmmHHistEntry, mcmCCntrEntry=mcmCCntrEntry, acctCPStandby=acctCPStandby, mcmescLinkWavelength=mcmescLinkWavelength, rsdmTxInsertionLoss=rsdmTxInsertionLoss, luxNextMinorAlmInpTrap=luxNextMinorAlmInpTrap, csimSysMode=csimSysMode, alarmLastChange=alarmLastChange, historical=historical, ocm4gCntrEntry=ocm4gCntrEntry, fadmSetState=fadmSetState, osamPerfAmplifierGain=osamPerfAmplifierGain, rtdmHist=rtdmHist, oetPortWavelength=oetPortWavelength, mcmCCntrShelf=mcmCCntrShelf, dmmPortLineRate=dmmPortLineRate, dmmFpgaRev=dmmFpgaRev, cpMode=cpMode, oscPmErrors=oscPmErrors, mcmescLinkCurrTable=mcmescLinkCurrTable, luxNosamDualAprSensorNormal=luxNosamDualAprSensorNormal, muxPortTable=muxPortTable, mcmescHTotPktSent=mcmescHTotPktSent, mcmName=mcmName, CardState=CardState, oetCleiNum=oetCleiNum, luxNipAuthenticationFailure=luxNipAuthenticationFailure, ccPerfLocation=ccPerfLocation, oscPortRxPower=oscPortRxPower, rpsmCPerfShelf=rpsmCPerfShelf, luxNosamOpticalGainDeltaNormal=luxNosamOpticalGainDeltaNormal, ocm10gfAvailTime=ocm10gfAvailTime, dlFtpMode=dlFtpMode, fc8gFwDate=fc8gFwDate, ocm4gLastBootTime=ocm4gLastBootTime, ocm4gBytesRcvd=ocm4gBytesRcvd, rsmPerfStatus=rsmPerfStatus, rtdmCPerfStatus=rtdmCPerfStatus, luxNframingAlarmTrap=luxNframingAlarmTrap, cpSNMPTrapHost3=cpSNMPTrapHost3, cpCntrType=cpCntrType, rsmRxComInsertionLoss=rsmRxComInsertionLoss, dmmClearCntrs=dmmClearCntrs, oppmLinkBStatus=oppmLinkBStatus, psEntry=psEntry, ocm10gfCardSlot=ocm10gfCardSlot, oscPortIndex=oscPortIndex, tapHHistMode=tapHHistMode, luxNXfpFailureResolved=luxNXfpFailureResolved, upsmPerfEntry=upsmPerfEntry, cpSessionTimeout=cpSessionTimeout, muxNumber=muxNumber, uobGainTilt=uobGainTilt, oscPortTable=oscPortTable, mcmescHistEntry=mcmescHistEntry, luxNconnectionDeletedTrap=luxNconnectionDeletedTrap, dmmStartTime=dmmStartTime, luxNSfpFailure=luxNSfpFailure, mcmescHCntrType=mcmescHCntrType, mcmescLinkHIntervalTable=mcmescLinkHIntervalTable, upsmFWVersionID=upsmFWVersionID, fnNumber=fnNumber, secRoleDescr=secRoleDescr, luxNpwrFeedBrkOpenTrap=luxNpwrFeedBrkOpenTrap, osamHNumEvents=osamHNumEvents, voadmPortEntry=voadmPortEntry, mcmescPortCardSlot=mcmescPortCardSlot, acctmcmUpTime=acctmcmUpTime, cpCPerfSlot=cpCPerfSlot, uobFwName=uobFwName, muxModelType=muxModelType, rpsmCardName=rpsmCardName, mcmCSignalDetect=mcmCSignalDetect, mcmPortCCntrIndex=mcmPortCCntrIndex, upsmCPerfState=upsmCPerfState, luxNSNMPKeepalivesDisabled=luxNSNMPKeepalivesDisabled, ocm10gfPmSlot=ocm10gfPmSlot, ccSubDivSize=ccSubDivSize, ccCounterFlag=ccCounterFlag, luxNosamLaserModuleOff=luxNosamLaserModuleOff, muxHHistSlot=muxHHistSlot, luxNnearendCardLoopbackDisabledTrap=luxNnearendCardLoopbackDisabledTrap, ModelNum=ModelNum, imnRoutingPerfEntry=imnRoutingPerfEntry, luxNsignalStrengthNormalTrap=luxNsignalStrengthNormalTrap, osamPerfAvailTime=osamPerfAvailTime, rpsm=rpsm, luxNuserAddedTrap=luxNuserAddedTrap, fnCPerfTable=fnCPerfTable, topologyFarEndNodeCardSlot=topologyFarEndNodeCardSlot, ccCCntrEntry=ccCCntrEntry, luxNstandbySWMismatchTrap=luxNstandbySWMismatchTrap, mcmHBadPktRcvd=mcmHBadPktRcvd, ocm10gfPmLinkUncorrectedFecErrs=ocm10gfPmLinkUncorrectedFecErrs, secElementEntry=secElementEntry, rpsmHHistLocation=rpsmHHistLocation, rpsmCPerfTable=rpsmCPerfTable, oscStartTime=oscStartTime, luxNextAlarmInpTrap=luxNextAlarmInpTrap, rtdmPortType=rtdmPortType, connRxNonMuxDmuxCardType=connRxNonMuxDmuxCardType, ringPath1RemoteChassisId=ringPath1RemoteChassisId, luxNfanFailureTrap=luxNfanFailureTrap, mcmescPortHTotalCardSlot=mcmescPortHTotalCardSlot, rpsmPerfStatus=rpsmPerfStatus, ocm2PmCpeTxErredSeconds=ocm2PmCpeTxErredSeconds, osamPerfBFDPower=osamPerfBFDPower, mcmPortCCntrBESs=mcmPortCCntrBESs, csimIntervalSEIs=csimIntervalSEIs, voadmFwName=voadmFwName, oppmPerf=oppmPerf, luxNberHighThresholdExceededNormal=luxNberHighThresholdExceededNormal, ocm4gNumber=ocm4gNumber, luxNtopologyRediscoveredTrap=luxNtopologyRediscoveredTrap, dmmFwVersionID=dmmFwVersionID, rsdmHAvailTime=rsdmHAvailTime, usrLogTable=usrLogTable, mcmCntrType=mcmCntrType, ccSubDivIndex=ccSubDivIndex, muxConnChassisID=muxConnChassisID, upsmSubDivSize=upsmSubDivSize, luxNethernetLinkFailure=luxNethernetLinkFailure, osamPerfSlot=osamPerfSlot, mcmPortHTotalASs=mcmPortHTotalASs, secNumElements=secNumElements, oetPortLocation=oetPortLocation, mcmHTotBadTrans=mcmHTotBadTrans, fnSerialNum=fnSerialNum, psHNumEvents=psHNumEvents, oetPerfStatus=oetPerfStatus, CardSlot=CardSlot, oppmHAvailTime=oppmHAvailTime, rsmCErrFreeSecs=rsmCErrFreeSecs, eveLogEntry=eveLogEntry, download=download, tapHAvailTime=tapHAvailTime, ocm10gfPmLinkRxPwr=ocm10gfPmLinkRxPwr, mcmescPortHIntervalShelf=mcmescPortHIntervalShelf, cpCCntrShelf=cpCCntrShelf, osamCardShelf=osamCardShelf, ccCRefClock=ccCRefClock, acctCPSlot=acctCPSlot, fc8gPerfSlot=fc8gPerfSlot, uobErrFreeSecs=uobErrFreeSecs, luxNBitError10Em6=luxNBitError10Em6, osamHHistSlot=osamHHistSlot, rsmCPerfSlot=rsmCPerfSlot, ocm2BytesSent=ocm2BytesSent, diagTestEntry=diagTestEntry, oscHHistEntry=oscHHistEntry, radiusDefaultRealm=radiusDefaultRealm, mfgDefaultID=mfgDefaultID, muxSubDivTable=muxSubDivTable, oscFwName=oscFwName, rsmLinkAPathID=rsmLinkAPathID, cpRedunSubDivTable=cpRedunSubDivTable, mcmCAvailTime=mcmCAvailTime, muxPortCardLocation=muxPortCardLocation, luxNosamMinInputPowerBelowLimit=luxNosamMinInputPowerBelowLimit, ocm4gHwName=ocm4gHwName, luxN=luxN, voadmCardSlot=voadmCardSlot, voadmPathID=voadmPathID, ocm2Entry=ocm2Entry, cpIMNIpAddress=cpIMNIpAddress, sysClearStatus=sysClearStatus, rsmFWVersionID=rsmFWVersionID, ocm10gfPortShelf=ocm10gfPortShelf, ccCpeDisableThreshold=ccCpeDisableThreshold, tapPerfState=tapPerfState, mcmPortHIntervalLocation=mcmPortHIntervalLocation, ocm2PortIndex=ocm2PortIndex, mcmLinkWaveLength=mcmLinkWaveLength, dmmConnCardType=dmmConnCardType, mcmescModelNum=mcmescModelNum, rtdmLastBootTime=rtdmLastBootTime, rsmEntry=rsmEntry, eveNineHundredthEntryDateTime=eveNineHundredthEntryDateTime, alarmCnt=alarmCnt, mcmPortHTotalSEFSs=mcmPortHTotalSEFSs, mcmPortHTotalLCVs=mcmPortHTotalLCVs, osamPerfLocation=osamPerfLocation, muxSubDivSize=muxSubDivSize, routingPerf=routingPerf, ocm4gPortItu=ocm4gPortItu, specialConditions=specialConditions, fnCPerfStatus=fnCPerfStatus, ocm2SerialNum=ocm2SerialNum, ocm2HHistEntry=ocm2HHistEntry)
mibBuilder.exportSymbols("LUXN-MIB", imnRoutingPerfTable=imnRoutingPerfTable, rpsmSubDivTable=rpsmSubDivTable, osamPortCardShelf=osamPortCardShelf, oscPortWavelength=oscPortWavelength, upsmRxInsertionLoss=upsmRxInsertionLoss, oscBytesSent=oscBytesSent, cpSNMPTrapCommunity2=cpSNMPTrapCommunity2, oetSerialNum=oetSerialNum, fadmCPerfTable=fadmCPerfTable, ocm2PmLinkRxPwr=ocm2PmLinkRxPwr, acctCPUpTime=acctCPUpTime, voadmPerfShelf=voadmPerfShelf, cpCBytesSent=cpCBytesSent, ocm4gErrFreeSecs=ocm4gErrFreeSecs, sshGenKey=sshGenKey, fadmITUNumber1=fadmITUNumber1, ocm2MfgDate=ocm2MfgDate, uobAdminState=uobAdminState, muxFWVersionID=muxFWVersionID, dmmAvailTime=dmmAvailTime, oppmLinkAState=oppmLinkAState, luxNRadiusAuthChangedTrap=luxNRadiusAuthChangedTrap, luxNcsimDataAvailableTrap=luxNcsimDataAvailableTrap, muxCPerfStatus=muxCPerfStatus, fadmEndItu=fadmEndItu, rsdmAvailTime=rsdmAvailTime, mcmescBoardSerialNum=mcmescBoardSerialNum, rsmPortEntry=rsmPortEntry, luxNstaticRouteDeletedTrap=luxNstaticRouteDeletedTrap, mcmFWVersionID=mcmFWVersionID, muxCleiNum=muxCleiNum, ccHEcbAllocFail=ccHEcbAllocFail, voadmMfgDate=voadmMfgDate, rsdmConnPort=rsdmConnPort, fadmNumber=fadmNumber, osamAdminState=osamAdminState, ocm4gLink2AutoDisable=ocm4gLink2AutoDisable, ocm2HAvailTime=ocm2HAvailTime, oscHist=oscHist, fadmHist=fadmHist, fadmTable=fadmTable, dlDownloadEntry=dlDownloadEntry, muxStartItu=muxStartItu, muxSubDivDescr=muxSubDivDescr, fadmSubDivEntry=fadmSubDivEntry, oscHAvailTime=oscHAvailTime, ccMfgRefClock=ccMfgRefClock, rtdmConnShelf=rtdmConnShelf, acctCCSlot=acctCCSlot, voadmPerfEntry=voadmPerfEntry, luxNrecvYellowAlarmNormalTrap=luxNrecvYellowAlarmNormalTrap, mcmescCntrType=mcmescCntrType, muxPortMaxInsertionLoss=muxPortMaxInsertionLoss, imnStaticRouteIpDest=imnStaticRouteIpDest, oscPerfState=oscPerfState, luxNLinkTxFaultResolved=luxNLinkTxFaultResolved, ccCClearCntrs=ccCClearCntrs, ocm10gfPmCpeSonetTxB2Errs=ocm10gfPmCpeSonetTxB2Errs, upsmEntry=upsmEntry, voadmPerfTable=voadmPerfTable, sysModupdPercentDone=sysModupdPercentDone, luxNframingAlarmNormalTrap=luxNframingAlarmNormalTrap, oppmPerfState=oppmPerfState, cpSNMPTrapCommunity3=cpSNMPTrapCommunity3, upsmBlackOutTime=upsmBlackOutTime, ocm4gFwDate=ocm4gFwDate, oetPortName=oetPortName, rsdmMinProtPowerForSwitch=rsdmMinProtPowerForSwitch, ocm4gConnShelf=ocm4gConnShelf, mcmescPortCurrEns=mcmescPortCurrEns, ocm10gfPortIndex=ocm10gfPortIndex, oppmLinkBPathID=oppmLinkBPathID, psNumEvents=psNumEvents, oetFwName=oetFwName, fc8gPerfStatus=fc8gPerfStatus, rsdmSubDivIndex=rsdmSubDivIndex, fadmConnSlot=fadmConnSlot, uobFwVersionID=uobFwVersionID, tapModelNum=tapModelNum, mcmescLinkHTotalCardShelf=mcmescLinkHTotalCardShelf, osamPerfBiasCurrent=osamPerfBiasCurrent, ccHBytesRcvd=ccHBytesRcvd, luxNextCritAlmInpTrap=luxNextCritAlmInpTrap, fc8gLink2LaserEnabled=fc8gLink2LaserEnabled, csimIntervalBERs=csimIntervalBERs, mcmescSelfTestTable=mcmescSelfTestTable, sysExtAlarmInputId=sysExtAlarmInputId, dmmHHistTable=dmmHHistTable, ocm4gPmCpeTxPwr=ocm4gPmCpeTxPwr, rpsmCPerfStatus=rpsmCPerfStatus, dmmClearPmCntrs=dmmClearPmCntrs, mcmescPortSelfTestLocation=mcmescPortSelfTestLocation, eveThreeHundredthEntryDateTime=eveThreeHundredthEntryDateTime, muxHHistEntry=muxHHistEntry, fadmPortCardShelf=fadmPortCardShelf, dmmConnLocation=dmmConnLocation, oscTotBadTrans=oscTotBadTrans, csimIntervalDateTime=csimIntervalDateTime, rtdmHHistShelf=rtdmHHistShelf, oppmPortTable=oppmPortTable, rsmPerfSlot=rsmPerfSlot, radiusServerPort=radiusServerPort, oppmPortEntry=oppmPortEntry, luxNTelnetClientEnabled=luxNTelnetClientEnabled, fc8gPerfLocation=fc8gPerfLocation, ocm10gfAdminState=ocm10gfAdminState, cpLogServer5=cpLogServer5, rtdmOpticsMfgDate=rtdmOpticsMfgDate, tapType=tapType, rpsmHist=rpsmHist, luxNrecvAISTrap=luxNrecvAISTrap, fc8gPortSlot=fc8gPortSlot, dlCLongestSize=dlCLongestSize, mcmescPortSelfTestCdrI2c=mcmescPortSelfTestCdrI2c, luxNntpDisableTrap=luxNntpDisableTrap, rsdmBootPromVer=rsdmBootPromVer, ccProtectionMode=ccProtectionMode, luxNLogMaskChangedTrap=luxNLogMaskChangedTrap, rsdmHHistMode=rsdmHHistMode, acctmcmescEntry=acctmcmescEntry, mcmescPortHIntervalOobErr=mcmescPortHIntervalOobErr, routingEntry=routingEntry, uobPmReflection=uobPmReflection, ocm4gPmCpeRxErredSeconds=ocm4gPmCpeRxErredSeconds, luxNlossOfLightDetectedTrap=luxNlossOfLightDetectedTrap, cpSNMPSendTrap=cpSNMPSendTrap, mcmPortHTotalTable=mcmPortHTotalTable, rtdmCPerfLocation=rtdmCPerfLocation, ocm10gfPortTxReach=ocm10gfPortTxReach, CardStatus=CardStatus, mcmescSelfTestSeqNum=mcmescSelfTestSeqNum, ccCleiNum=ccCleiNum, mcmescNumPorts=mcmescNumPorts, ocm4gHErrFreeSecs=ocm4gHErrFreeSecs, acctmcmSlot=acctmcmSlot, oscPortEntry=oscPortEntry, psVoltageLevelFeedA=psVoltageLevelFeedA, luxNextAlarmsDisabledTrap=luxNextAlarmsDisabledTrap, sysAlarmMajor=sysAlarmMajor, oppmConfigCommit=oppmConfigCommit, oetCardSlot=oetCardSlot, ocm2PmNumLinkRxIntervals=ocm2PmNumLinkRxIntervals, ccCCntrTable=ccCCntrTable, uobLastBootTime=uobLastBootTime, acctmcmResetCntrs=acctmcmResetCntrs, fc8gPerfShelf=fc8gPerfShelf, mcmCntrTable=mcmCntrTable, ocm10gfHNumEvents=ocm10gfHNumEvents, connRxNonMuxDmuxSlot=connRxNonMuxDmuxSlot, ccPerfState=ccPerfState, ocm4gPmTable=ocm4gPmTable, acctCCShelf=acctCCShelf, ring=ring, cpDsgntdMode=cpDsgntdMode, osamCardName=osamCardName, muxPortType=muxPortType, csimIntervalEIs=csimIntervalEIs, upsmCPerfShelf=upsmCPerfShelf, luxNosamMaxOutputPowerReached=luxNosamMaxOutputPowerReached, voadmPerfLocation=voadmPerfLocation, ocm2PmNumCpeTxIntervals=ocm2PmNumCpeTxIntervals, cpTimezone=cpTimezone, ocm4gPmLinkRxErredSeconds=ocm4gPmLinkRxErredSeconds, ocm2CntrShelf=ocm2CntrShelf, rpsmNumber=rpsmNumber, connMuxChassis=connMuxChassis, rsdmPerfState=rsdmPerfState, mcmescFPGAVersionID=mcmescFPGAVersionID, oetPortFlowControl=oetPortFlowControl, acctCCLocation=acctCCLocation, osamHMode=osamHMode, dmmModelNum=dmmModelNum, ocm4gPortTxState=ocm4gPortTxState, rtdmEntry=rtdmEntry, osamConnChassisID=osamConnChassisID, topology=topology, luxNstatsPollFailedTrap=luxNstatsPollFailedTrap, osc=osc, mcmMfgBiasCurrent=mcmMfgBiasCurrent, luxNXfpNotAuthorized=luxNXfpNotAuthorized, sysAlarmCritical=sysAlarmCritical, usrSecSetLastDateTime=usrSecSetLastDateTime, csimGatingIntvl=csimGatingIntvl, mfgShelfEntry=mfgShelfEntry, oetPmPortIndex=oetPmPortIndex, fadmCardLocation=fadmCardLocation, ccCntrTable=ccCntrTable, oetPortTable=oetPortTable, cpNtpTimeserver=cpNtpTimeserver, ccMfgModulation=ccMfgModulation, upsmErrFreeSecs=upsmErrFreeSecs, oscMsgsDlvrd=oscMsgsDlvrd, mcmescHWName=mcmescHWName, uobHMode=uobHMode, ocm10gfErrFreeSecs=ocm10gfErrFreeSecs, ocm4gModelNum=ocm4gModelNum, acctCCResetCntrs=acctCCResetCntrs, uobPerfLocation=uobPerfLocation, ccTotPktRcvd=ccTotPktRcvd, luxNcaseTemperatureLoNormalTrap=luxNcaseTemperatureLoNormalTrap, rtdmPathID=rtdmPathID, csimHMode=csimHMode, rsmLinkAState=rsmLinkAState, rtdmModelType=rtdmModelType, cpBytesSent=cpBytesSent, mcmCMsgsDlvrd=mcmCMsgsDlvrd, oppmCardLocation=oppmCardLocation, oscCardSlot=oscCardSlot, tapHErrFreeSecs=tapHErrFreeSecs, ccAcct=ccAcct, rpsmHHistEntry=rpsmHHistEntry, mcmescCounterFlag=mcmescCounterFlag, ocm10gfFwVersionID=ocm10gfFwVersionID, mcmPortCurrEntry=mcmPortCurrEntry, ocm4g=ocm4g, cc=cc, csimCurrentTable=csimCurrentTable, voadmAvailTime=voadmAvailTime, fnPerf=fnPerf, dmmTotBadTrans=dmmTotBadTrans, downloadPerf=downloadPerf, cpHCntrType=cpHCntrType, dlCCounterFlag=dlCCounterFlag, secElementAccess=secElementAccess, oppmBootPromVer=oppmBootPromVer, muxModelNum=muxModelNum, mcmescLinkCurrCardLocation=mcmescLinkCurrCardLocation, ocm2HHistShelf=ocm2HHistShelf, mcmescPortSelfTestRxDataPath=mcmescPortSelfTestRxDataPath, rpsmSwitch=rpsmSwitch, oetLinkTxReach=oetLinkTxReach, ocm4gBytesSent=ocm4gBytesSent, osam2OpPowerReq=osam2OpPowerReq, mcmPortHIntervalShelf=mcmPortHIntervalShelf, dmmHLastBootTime=dmmHLastBootTime, ccSignalStrength=ccSignalStrength, mcmescBytesRcvd=mcmescBytesRcvd, rpsmHLastBootTime=rpsmHLastBootTime, fadmCPerfEntry=fadmCPerfEntry, cpSNMPTrapHostPort2=cpSNMPTrapHostPort2, voadmPortToleranceLowerBound=voadmPortToleranceLowerBound, osamLaserBiasCurrent=osamLaserBiasCurrent, ccHistEntry=ccHistEntry, rtdmConnCardType=rtdmConnCardType, ocm10gfPortRxPower=ocm10gfPortRxPower, rpsmCPerfEntry=rpsmCPerfEntry, rsmCPerfState=rsmCPerfState, mcmescOverride=mcmescOverride, cpSNMPTrapHost2=cpSNMPTrapHost2, oppmNumSubDiv=oppmNumSubDiv, dmmEntry=dmmEntry, mcmescPortCurrCardLocation=mcmescPortCurrCardLocation, rtdmHHistTable=rtdmHHistTable, uobCfgName=uobCfgName)
mibBuilder.exportSymbols("LUXN-MIB", rsmErrFreeSecs=rsmErrFreeSecs, mcmCCntrSlot=mcmCCntrSlot, ringPathID2=ringPathID2, ocm10gfHwVersionID=ocm10gfHwVersionID, osamPerf=osamPerf, rsdmProtectionPower=rsdmProtectionPower, oetPmPortSlot=oetPmPortSlot, oscPortShelf=oscPortShelf, ccBackpackRxInsertionLoss=ccBackpackRxInsertionLoss, dmmPerfSlot=dmmPerfSlot, rsmConnShelf=rsmConnShelf, voadmErrFreeSecs=voadmErrFreeSecs, osamCPerfErrFreeSecs=osamCPerfErrFreeSecs, mcmCPerfState=mcmCPerfState, luxNosamOutputPowerNormal=luxNosamOutputPowerNormal, luxNethernetLossOfCarrierTrap=luxNethernetLossOfCarrierTrap, sysModuleupdateJobsTable=sysModuleupdateJobsTable, upsmTable=upsmTable, upsmCNumEvents=upsmCNumEvents, rsdmExpressLoss=rsdmExpressLoss, ocm2TotPktSent=ocm2TotPktSent, mcmNumber=mcmNumber, cpSubDivOffset=cpSubDivOffset, muxAdminState=muxAdminState, mcmPerfShelf=mcmPerfShelf, zmsConfigSyncPriority=zmsConfigSyncPriority, rpsmFWDate=rpsmFWDate, radiusServerAddress=radiusServerAddress, ocm10gfPerf=ocm10gfPerf, oet=oet, rtdmPerfTable=rtdmPerfTable, rsmPortCardShelf=rsmPortCardShelf, oetPortRxPower=oetPortRxPower, luxNlossOfLightResolvedTrap=luxNlossOfLightResolvedTrap, fadmLastBootTime=fadmLastBootTime, cpRedunSubDivEntry=cpRedunSubDivEntry, osamHHistShelf=osamHHistShelf, mcmHCntrMode=mcmHCntrMode, upsmHHistTable=upsmHHistTable, voadmPortSetPoint=voadmPortSetPoint, ccPathID=ccPathID, ccSubDivEntry=ccSubDivEntry, rsmCardSlot=rsmCardSlot, ocm2BytesRcvd=ocm2BytesRcvd, mcmescPortHIntervalTable=mcmescPortHIntervalTable, ccHErrFreeSecs=ccHErrFreeSecs, tapHLastBootTime=tapHLastBootTime, fadmBootPromVer=fadmBootPromVer, dmmPmErredSecs=dmmPmErredSecs, rsdmCNumEvents=rsdmCNumEvents, sysModuleupdateJobsEntry=sysModuleupdateJobsEntry, upsmROMSize=upsmROMSize, fc8gCpe1AutoDisable=fc8gCpe1AutoDisable, ocm10gfHHistShelf=ocm10gfHHistShelf, mcmescAvailTime=mcmescAvailTime, oetPmLinkNumIntervals=oetPmLinkNumIntervals, mcmLaserOnOff=mcmLaserOnOff, oscHHistShelf=oscHHistShelf, oscFwVersionID=oscFwVersionID, osamSubDivIndex=osamSubDivIndex, luxNcoilTemperatureHiTrap=luxNcoilTemperatureHiTrap, oetLinkName=oetLinkName, voadmPortTable=voadmPortTable, ocm4gTotBadTrans=ocm4gTotBadTrans, rsmLinkBState=rsmLinkBState, muxCNumEvents=muxCNumEvents, cpCBytesRcvd=cpCBytesRcvd, mcmescPortHIntervalLocation=mcmescPortHIntervalLocation, eveLogTable=eveLogTable, rsdmConnShelf=rsdmConnShelf, zmsConfigSyncStatus=zmsConfigSyncStatus, ocm10gfPortMode=ocm10gfPortMode, ocm2FwName=ocm2FwName, ocm10gfPmCpe10gbeTxErredPkts=ocm10gfPmCpe10gbeTxErredPkts, ocm2CntrEntry=ocm2CntrEntry, ccHHistSlot=ccHHistSlot, rsmHistTable=rsmHistTable, luxNlossOfSignalTrap=luxNlossOfSignalTrap, secGroupTable=secGroupTable, ccCpeReEnableThreshold=ccCpeReEnableThreshold, muxSerialNum=muxSerialNum, muxHHistMode=muxHHistMode, upsmLastBootTime=upsmLastBootTime, oetPmPortTxTemp=oetPmPortTxTemp, ccSubDivDescr=ccSubDivDescr, upsmHLastBootTime=upsmHLastBootTime, upsmNumber=upsmNumber, muxPortCardSlot=muxPortCardSlot, cpSNMPTrapHost1=cpSNMPTrapHost1, psPerfTable=psPerfTable, mcmPortFraming=mcmPortFraming, rsmConnPort=rsmConnPort, fadmSubDivSize=fadmSubDivSize, rsdmCardName=rsdmCardName, rsdmPerfTable=rsdmPerfTable, rsdmLinkEastState=rsdmLinkEastState, cpPerfTable=cpPerfTable, oppmSubDivSize=oppmSubDivSize, upsmCPerfLocation=upsmCPerfLocation, oppmModelType=oppmModelType, zmsConfigSyncOverflow=zmsConfigSyncOverflow, ocm2ConnEntry=ocm2ConnEntry, sysAlarmMinor=sysAlarmMinor, ocm2TotBadTrans=ocm2TotBadTrans, oetLastBootTime=oetLastBootTime, upsmCPerfStatus=upsmCPerfStatus, ccCBiasCurrent=ccCBiasCurrent, ccRecvDiode=ccRecvDiode, luxNLinkRxSignalDegradedResolved=luxNLinkRxSignalDegradedResolved, rsmCond=rsmCond, fc8gLink1LaserEnabled=fc8gLink1LaserEnabled, rpsmLinkWestState=rpsmLinkWestState, ocm2PortTxReach=ocm2PortTxReach, ocm10gfConnTable=ocm10gfConnTable, ocm2Link2LinkName=ocm2Link2LinkName, oscAvailTime=oscAvailTime, ocm10gfMsgsDlvrd=ocm10gfMsgsDlvrd, ocm10gfHHistMode=ocm10gfHHistMode, mcmAcct=mcmAcct, oscFpgaRev=oscFpgaRev, rsmSubDivIndex=rsmSubDivIndex, alarmClear=alarmClear, upsmHistEntry=upsmHistEntry, muxConnIpAddress=muxConnIpAddress, sysExtAlarmInputName=sysExtAlarmInputName, ocm4gModelType=ocm4gModelType, cpSubDivImgVersion=cpSubDivImgVersion, dmmPortSlot=dmmPortSlot, ccHHistEntry=ccHHistEntry, ocm4gCntrShelf=ocm4gCntrShelf, muxHist=muxHist, ccCLossOfLight=ccCLossOfLight, luxNSshDisabledTrap=luxNSshDisabledTrap, rpsmSubDivEntry=rpsmSubDivEntry, ocm2LastBootTime=ocm2LastBootTime, usrNumUsers=usrNumUsers, oetLinkMode=oetLinkMode, ccCPerfStatus=ccCPerfStatus, oscCardShelf=oscCardShelf, osamAmplifierGain=osamAmplifierGain, oppmPerfEntry=oppmPerfEntry, voadmHwName=voadmHwName, ccCTotPktRcvd=ccCTotPktRcvd, luxNCpeXfpAuthorized=luxNCpeXfpAuthorized, osamHWVersionID=osamHWVersionID, mcmSubDivSize=mcmSubDivSize, muxConnPort=muxConnPort, ocm10gfBytesSent=ocm10gfBytesSent, ocm4gMfgDate=ocm4gMfgDate, acctmcmUnAvail=acctmcmUnAvail, ocm4gEntry=ocm4gEntry, imnRouteMode=imnRouteMode, csimIntervalShelf=csimIntervalShelf, fadmNumSubDiv=fadmNumSubDiv, rsdmROMSize=rsdmROMSize, dmmPortItu=dmmPortItu, fc8gPortTable=fc8gPortTable, luxNBitError10Em7Resolved=luxNBitError10Em7Resolved, mcmHistEntry=mcmHistEntry, fadmConnShelf=fadmConnShelf, muxAvailTime=muxAvailTime, muxHHistTable=muxHHistTable, oetPmPortLocation=oetPmPortLocation, luxNredundantDatabaseCopyComplete=luxNredundantDatabaseCopyComplete, uobEntry=uobEntry, mcmPerfEntry=mcmPerfEntry, fadmConnLocation=fadmConnLocation, cpDate=cpDate, rtdmCardLocation=rtdmCardLocation, luxNlogonSessionClosed=luxNlogonSessionClosed, mcmescLinkHIntervalLocation=mcmescLinkHIntervalLocation, cpLastBootTime=cpLastBootTime, luxNvoadmMuxSetPointOutOfRange=luxNvoadmMuxSetPointOutOfRange, luxNSfpNotPresent=luxNSfpNotPresent, ccRegenPairShelf=ccRegenPairShelf, rsmSubDivDescr=rsmSubDivDescr, ocm10gfPortTxState=ocm10gfPortTxState, luxNAisTransmittedResolved=luxNAisTransmittedResolved, rtdmPortTable=rtdmPortTable, ocm10gfPortWavelength=ocm10gfPortWavelength, rtdmPerfState=rtdmPerfState, mcmescAdminState=mcmescAdminState, ocm4gTotPktRcvd=ocm4gTotPktRcvd, upsmLinkAStatus=upsmLinkAStatus, mcmescSetState=mcmescSetState, cpNetMask=cpNetMask, ocm4gLink2PathID=ocm4gLink2PathID, routeDestType=routeDestType, rsdmConnCardType=rsdmConnCardType, ccModulation=ccModulation, uobSetState=uobSetState, mcmescCntrLocation=mcmescCntrLocation, luxNsignalStrengthLowTrap=luxNsignalStrengthLowTrap, luxNcaseTemperatureHiTrap=luxNcaseTemperatureHiTrap, mcmescLinkErrAlarmThreshold=mcmescLinkErrAlarmThreshold, ocm4gConnCardLocation=ocm4gConnCardLocation, ocm2HHistTable=ocm2HHistTable, mcmescLinkSfpSerialNum=mcmescLinkSfpSerialNum, ocm2CntrTable=ocm2CntrTable, csimHNumEvents=csimHNumEvents, upsmConnSystemName=upsmConnSystemName, radiusNasIdentifier=radiusNasIdentifier, osamPerfTecCurrent=osamPerfTecCurrent, luxNselfTestFailTrap=luxNselfTestFailTrap, fc8gAdminState=fc8gAdminState, rsmPortTable=rsmPortTable, voadmHwVersionID=voadmHwVersionID, mcmCBytesSent=mcmCBytesSent, psNumber=psNumber, muxHAvailTime=muxHAvailTime, rsdmCPerfShelf=rsdmCPerfShelf, oscCntrType=oscCntrType, voadmEndItu=voadmEndItu, dmmPmLocation=dmmPmLocation, luxNCdrFailureResolved=luxNCdrFailureResolved, sysSNMPKeepaliveEnable=sysSNMPKeepaliveEnable, fadmCardShelf=fadmCardShelf, diagSetMode=diagSetMode, oetLinkVlanIds=oetLinkVlanIds, rpsmCPerfLocation=rpsmCPerfLocation, osamCond=osamCond, connCpeTxMcmescSlot=connCpeTxMcmescSlot, dlHMode=dlHMode, mcmCApc=mcmCApc, mcmPortCCntrSESs=mcmPortCCntrSESs, ccCNumEvents=ccCNumEvents, OSMode=OSMode, connCpeRxMcmescSlot=connCpeRxMcmescSlot, oetModelType=oetModelType, fc8gPerfEntry=fc8gPerfEntry, muxPerfShelf=muxPerfShelf, muxSubDivIndex=muxSubDivIndex, mcmescPortNumber=mcmescPortNumber, fc8gCpe2LaserEnabled=fc8gCpe2LaserEnabled, imnRouteMaxMetric=imnRouteMaxMetric, upsmConnIpAddress=upsmConnIpAddress, ocm2NumEvents=ocm2NumEvents, luxNTrapHostImnRouteEnabled=luxNTrapHostImnRouteEnabled, muxCardLocation=muxCardLocation, oppmUpgradeFlag=oppmUpgradeFlag, mcmescSubDivIndex=mcmescSubDivIndex, acctmcmescShelf=acctmcmescShelf, oetPmPortEntry=oetPmPortEntry, ccPairSlot=ccPairSlot, cpCTotBadTrans=cpCTotBadTrans, osamSubDivSize=osamSubDivSize, ccBiasCurrent=ccBiasCurrent, psPerfStatus=psPerfStatus, sysExtAlarmInput=sysExtAlarmInput, osam2PerfPump1Temp=osam2PerfPump1Temp, rpsmPortCardShelf=rpsmPortCardShelf, mcmescLinkHTotalOobErr=mcmescLinkHTotalOobErr, rtdmBootPromVer=rtdmBootPromVer, fadmCPerfSlot=fadmCPerfSlot)
mibBuilder.exportSymbols("LUXN-MIB", mcmHCntrEntry=mcmHCntrEntry, tapPerfShelf=tapPerfShelf, rtdmHWVersionID=rtdmHWVersionID, osamSubDivOffset=osamSubDivOffset, luxNntpUpdateIntervalChangedTrap=luxNntpUpdateIntervalChangedTrap, systemHist=systemHist, luxNupsrDegraded=luxNupsrDegraded, muxCPerfTable=muxCPerfTable, rtdmCNumEvents=rtdmCNumEvents, ccCProtectionMode=ccCProtectionMode, dmmPmTxPower=dmmPmTxPower, cpRedunSubDivImgVersion=cpRedunSubDivImgVersion, cpHistEntry=cpHistEntry, mcmPortHTotalSlot=mcmPortHTotalSlot, ccRegenPairSlot=ccRegenPairSlot, rpsmDeBounce=rpsmDeBounce, oscClearPmCntrs=oscClearPmCntrs, osamNumber=osamNumber, mcmescPortCurrDuration=mcmescPortCurrDuration, dlShelf=dlShelf, eventLog=eventLog, uobMfgDate=uobMfgDate, tapHistTable=tapHistTable, cpBufAllocFail=cpBufAllocFail, mux=mux, ccSubDivOffset=ccSubDivOffset, rtdmPerfEntry=rtdmPerfEntry, ocm10gfFwName=ocm10gfFwName, ocm10gfConnCardPortType=ocm10gfConnCardPortType, ccCBytesRcvd=ccCBytesRcvd, oppmSwitch=oppmSwitch, topologyTable=topologyTable, oetPortTxReach=oetPortTxReach, alarmSource=alarmSource, osamCntrKeepAliveBadPktRcvd=osamCntrKeepAliveBadPktRcvd, oscHistEntry=oscHistEntry, psID=psID, acctCCTable=acctCCTable, mcmconnDemuxPort=mcmconnDemuxPort, psPerfID=psPerfID, voadmPortMaxChanOutputPower=voadmPortMaxChanOutputPower, dlType=dlType, ocm10gfTotBadTrans=ocm10gfTotBadTrans, mcmescConnTxOcmShelfSlot=mcmescConnTxOcmShelfSlot, ccHHistLocation=ccHHistLocation, usrSecLastDateTime=usrSecLastDateTime, luxNextAlarmsEnabledTrap=luxNextAlarmsEnabledTrap, dmmHHistSlot=dmmHHistSlot, cpMaxSessions=cpMaxSessions, voadmAdminState=voadmAdminState, voadmPortMode=voadmPortMode, cpSNMPTrapHostPort5=cpSNMPTrapHostPort5, rpsmExpressLoss=rpsmExpressLoss, mcmCardLocation=mcmCardLocation, fc8gFwVersionID=fc8gFwVersionID, rpsmHHistMode=rpsmHHistMode, luxNCpeXfpFailure=luxNCpeXfpFailure, oetPmLinkFecTx=oetPmLinkFecTx, rpsmHHistTable=rpsmHHistTable, mcmPortCurrFEs=mcmPortCurrFEs, mcmesc2ndFWVersionID=mcmesc2ndFWVersionID, mcmCond=mcmCond, mcmescConnRxOcmPort=mcmescConnRxOcmPort, mcmescHCntrLocation=mcmescHCntrLocation, luxNlossOutputPowerTrap=luxNlossOutputPowerTrap, osamConfigCommit=osamConfigCommit, osamCPerfTable=osamCPerfTable, SlotInput=SlotInput, tapAdminState=tapAdminState, rpsmCardShelf=rpsmCardShelf, usrSecLogonId=usrSecLogonId, luxNSshKeyGeneratedTrap=luxNSshKeyGeneratedTrap, mcmescConnTxOcmSlot=mcmescConnTxOcmSlot, mcmescLinkSelfTestLocation=mcmescLinkSelfTestLocation, cp=cp, osamCntrKeepAlivePktSent=osamCntrKeepAlivePktSent, CardType=CardType, muxHLastBootTime=muxHLastBootTime, rsdmPerfStatus=rsdmPerfStatus, muxConnCardType=muxConnCardType, cpGetCommunity=cpGetCommunity, mcmescLinkCurrCardShelf=mcmescLinkCurrCardShelf, uobNumEvents=uobNumEvents, ocm10gfCntrSlot=ocm10gfCntrSlot, upsmHErrFreeSecs=upsmHErrFreeSecs, csimDCMode=csimDCMode, mcmCCntrLocation=mcmCCntrLocation, oppmConnSystemName=oppmConnSystemName, cpPerfSlot=cpPerfSlot, voadmPortPerChanOutputPower=voadmPortPerChanOutputPower, fnHistTable=fnHistTable, eveSixHundredthEntryDateTime=eveSixHundredthEntryDateTime, ocm2PortSlot=ocm2PortSlot, dlStatus=dlStatus, csimUpdtIntvl=csimUpdtIntvl, osamHHistAvailTime=osamHHistAvailTime, rsdmHist=rsdmHist, dmmCntrEntry=dmmCntrEntry, rsdmPortCardSlot=rsdmPortCardSlot, luxNdateTimeSetTrap=luxNdateTimeSetTrap, ocm4gNumPorts=ocm4gNumPorts, ocm4gPortLocation=ocm4gPortLocation, luxNvoadmDemuxForceConfig=luxNvoadmDemuxForceConfig, mcmPortCardSlot=mcmPortCardSlot, ccLinkWavelength=ccLinkWavelength, luxNlossOfFrameTrap=luxNlossOfFrameTrap, cpNtpUpdateInterval=cpNtpUpdateInterval, luxNselfTestStartedTrap=luxNselfTestStartedTrap, luxNdefaultGatewayChangedTrap=luxNdefaultGatewayChangedTrap, ocm2Hist=ocm2Hist, muxCPerfState=muxCPerfState, rsdmHMode=rsdmHMode, fadmCPerfState=fadmCPerfState, mcmPerfState=mcmPerfState, oetPmLinkSlot=oetPmLinkSlot, oetHist=oetHist, mcmescSelfTestResult=mcmescSelfTestResult, ocm2CardShelf=ocm2CardShelf, uobHHistMode=uobHHistMode, oppmPerfStatus=oppmPerfStatus, osamHHistLocation=osamHHistLocation, muxNumEvents=muxNumEvents, mfgSerialNum=mfgSerialNum, rtdmSubDivTable=rtdmSubDivTable, fadmPerfShelf=fadmPerfShelf, fc8gModelType=fc8gModelType, ccNumEvents=ccNumEvents, osamConnPort=osamConnPort, upsmPortType=upsmPortType, csimSlot=csimSlot, ShelfInput=ShelfInput, oscHNumEvents=oscHNumEvents, cpHBytesRcvd=cpHBytesRcvd, cpCardShelf=cpCardShelf, cpHist=cpHist, luxNSshMaxSessionsSetTrap=luxNSshMaxSessionsSetTrap, luxNcardLostTrap=luxNcardLostTrap, cpSNMPTrapCommunity1=cpSNMPTrapCommunity1, mcmPortCurrUASs=mcmPortCurrUASs, sysHMode=sysHMode, oetNumber=oetNumber, voadmHHistLocation=voadmHHistLocation, oetConfigInProgress=oetConfigInProgress, mcmCPerfLocation=mcmCPerfLocation, oetPerfState=oetPerfState, luxNosamInputPowerBackUpNormal=luxNosamInputPowerBackUpNormal, mcmescSubDivDescr=mcmescSubDivDescr, mcmPortCurrCRCErrs=mcmPortCurrCRCErrs, oetPerfSlot=oetPerfSlot, muxChannelSpacing=muxChannelSpacing, mcmEcbAllocFail=mcmEcbAllocFail, ocm10gfName=ocm10gfName, voadmHistEntry=voadmHistEntry, luxNosamOpticalGainDeltaExceeded=luxNosamOpticalGainDeltaExceeded, ocm10gfModelNum=ocm10gfModelNum, cpMsgsDlvrd=cpMsgsDlvrd, luxNTrapHostImnRouteDisabled=luxNTrapHostImnRouteDisabled, voadmPerf=voadmPerf, voadmHist=voadmHist, mcmescPerfEntry=mcmescPerfEntry, psCVoltageLevel5Volt=psCVoltageLevel5Volt, ocm4gClearCntrs=ocm4gClearCntrs, cpCntrSlot=cpCntrSlot, uobPmPumpCurrent=uobPmPumpCurrent, mcmPortHIntervalSlot=mcmPortHIntervalSlot, cpErrFreeSecs=cpErrFreeSecs, ocm2PerfEntry=ocm2PerfEntry, oetMfgDate=oetMfgDate, rtdmCErrFreeSecs=rtdmCErrFreeSecs, luxNdefaultGatewayErrorTrap=luxNdefaultGatewayErrorTrap, mcmescHCntrShelf=mcmescHCntrShelf, ocm10gfPerfTable=ocm10gfPerfTable, cpHTotBadTrans=cpHTotBadTrans, ccHMode=ccHMode, ccBufAllocFail=ccBufAllocFail, fadmConnSystemName=fadmConnSystemName, rsdmHWDate=rsdmHWDate, voadmPerfSlot=voadmPerfSlot, ocm2ConnTable=ocm2ConnTable, cpSNMPTrapHostPort3=cpSNMPTrapHostPort3, ringPathID1=ringPathID1, mcmescLinkCurrCardSlot=mcmescLinkCurrCardSlot, luxNAisReceived=luxNAisReceived, luxNAisReceivedResolved=luxNAisReceivedResolved, rpsmPerfState=rpsmPerfState, luxNConfigChangeTrap=luxNConfigChangeTrap, luxNlocalLoopbackDisabledTrap=luxNlocalLoopbackDisabledTrap, fadmHHistShelf=fadmHHistShelf, diagSelfTest=diagSelfTest, uobHHistLocation=uobHHistLocation, rpsmHWDate=rpsmHWDate, mcmescLinkHIntervalCrcErr=mcmescLinkHIntervalCrcErr, dmmPortWavelength=dmmPortWavelength, luxNntpEnableTrap=luxNntpEnableTrap, FlagType=FlagType, ccBackpackTxExpressLoss=ccBackpackTxExpressLoss, uobHNumEvents=uobHNumEvents, mcmPerfTable=mcmPerfTable, mcmconnMuxSlot=mcmconnMuxSlot, luxNimageExportSuccessTrap=luxNimageExportSuccessTrap, fc8gErrFreeSecs=fc8gErrFreeSecs, luxNosamInputPowerBackDownNormal=luxNosamInputPowerBackDownNormal, luxNipAddressErrorTrap=luxNipAddressErrorTrap, ringIndex=ringIndex, alarmDescr=alarmDescr, cpCntrEntry=cpCntrEntry, oppmLastBootTime=oppmLastBootTime, sysModupdShelf=sysModupdShelf, fnHistEntry=fnHistEntry, mcmescLinkCurrRxSig=mcmescLinkCurrRxSig, luxNSfpNotAuthorized=luxNSfpNotAuthorized, rpsmROMSize=rpsmROMSize, rsdmCardLocation=rsdmCardLocation, rsdmFWName=rsdmFWName, ccCntrEntry=ccCntrEntry, upsmHNumEvents=upsmHNumEvents, dmmModelType=dmmModelType, luxNosamControlChanged=luxNosamControlChanged, psSerialNum=psSerialNum, dmm=dmm, ocm4gFpgaRev=ocm4gFpgaRev, oetPmLink=oetPmLink, ocm10gfAutoDisable=ocm10gfAutoDisable, voadmHAvailTime=voadmHAvailTime, imnRouteUpdateTimer=imnRouteUpdateTimer, upsmNumEvents=upsmNumEvents, dlFtpTable=dlFtpTable, oetPmPortRxBytes=oetPmPortRxBytes, muxCPerfLocation=muxCPerfLocation, mcmescLinkHIntervalShelf=mcmescLinkHIntervalShelf, ocm4gPmLink=ocm4gPmLink, sysImnAddRoute=sysImnAddRoute, ccCsimModule=ccCsimModule, mcmescLinkHTotalTsos=mcmescLinkHTotalTsos, diagLocation=diagLocation, radiusSecMgmt=radiusSecMgmt, cpTime=cpTime, LinkName=LinkName, rsmHWName=rsmHWName, dmmSetState=dmmSetState, luxNnearendCardLoopbackEnabledTrap=luxNnearendCardLoopbackEnabledTrap, ccHistTable=ccHistTable, mcmescHMsgsDlvrd=mcmescHMsgsDlvrd, ocm10gfHLastBootTime=ocm10gfHLastBootTime, DateAndTime=DateAndTime, luxNosamBiasCurrentOverLimitTrap=luxNosamBiasCurrentOverLimitTrap, ccUpsrMode=ccUpsrMode, oppmProtectPower=oppmProtectPower, luxNBitError10Em3Resolved=luxNBitError10Em3Resolved, ocm10gfTotPktRcvd=ocm10gfTotPktRcvd, ocm10gfPmCpeSonetRxB2Errs=ocm10gfPmCpeSonetRxB2Errs, mcmNumSubDiv=mcmNumSubDiv, fc8gPortLocation=fc8gPortLocation, secGroup=secGroup)
mibBuilder.exportSymbols("LUXN-MIB", mcmPortCCntrCRCErrs=mcmPortCCntrCRCErrs, uobHwVersionID=uobHwVersionID, rsdmDeBounce=rsdmDeBounce, uobPerfShelf=uobPerfShelf, mcmAdminState=mcmAdminState, cpBootPromVer=cpBootPromVer, dmmPerfState=dmmPerfState, mcmSubDivDescr=mcmSubDivDescr, mcmCntrSlot=mcmCntrSlot, oetPmLinkRxPwr=oetPmLinkRxPwr, fnPerfTable=fnPerfTable, mcmescPortCurrCardSlot=mcmescPortCurrCardSlot, uobCardSlot=uobCardSlot, psVoltageLevel3pt4Volt=psVoltageLevel3pt4Volt, cpSubDivSize=cpSubDivSize, mcmUpgradeFlag=mcmUpgradeFlag, muxCPerfSlot=muxCPerfSlot, secGroupRole=secGroupRole, ocm4gPerf=ocm4gPerf, cpCTrapsSent=cpCTrapsSent, ResetType=ResetType, ocm10gfNumber=ocm10gfNumber, sysModupdSlot=sysModupdSlot, topologyFarEndChassisID=topologyFarEndChassisID, rpsmSubDivSize=rpsmSubDivSize, oppmHNumEvents=oppmHNumEvents, oetPortALSD=oetPortALSD, rsdmCPerfTable=rsdmCPerfTable, cpRedunSubDivDescr=cpRedunSubDivDescr, EncryptedCommunity=EncryptedCommunity, psModelType=psModelType, cpLogServer1=cpLogServer1, mcmescPerf=mcmescPerf, oscSetState=oscSetState, imnRoutePerfStatus=imnRoutePerfStatus, ocm10gfCntrShelf=ocm10gfCntrShelf, mcmescLinkHTotalRdpErr=mcmescLinkHTotalRdpErr, UpdateOSMode=UpdateOSMode, luxNlossOutputPowerNormalTrap=luxNlossOutputPowerNormalTrap, ocm10gfConnCardSlot=ocm10gfConnCardSlot, topologyFarEndNodeIpAddress=topologyFarEndNodeIpAddress, uobPerfState=uobPerfState, elmntGrpAccess=elmntGrpAccess, voadmFwDate=voadmFwDate, ccBytesRcvd=ccBytesRcvd, luxNpwrFeedLowVoltageTrap=luxNpwrFeedLowVoltageTrap, osamPerfAPRDetector1Power=osamPerfAPRDetector1Power, tapName=tapName, fnHMode=fnHMode, upsmConnChassisID=upsmConnChassisID, oetLinkItu=oetLinkItu, oetFpgaRevMB=oetFpgaRevMB, luxNhttpEnabledTrap=luxNhttpEnabledTrap, sysHistTable=sysHistTable, cpHWName=cpHWName, mcmAvailTime=mcmAvailTime, rsdmHHistLocation=rsdmHHistLocation, fnNumEvents=fnNumEvents, mcmescSelfTestTimeStamp=mcmescSelfTestTimeStamp, rtdmCommonEInsertionLoss=rtdmCommonEInsertionLoss, luxNosamLaserModuleOn=luxNosamLaserModuleOn, mcmPortCCntrFEs=mcmPortCCntrFEs, oppmFWVersionID=oppmFWVersionID, ocm4gPortRxPower=ocm4gPortRxPower, fadmPerf=fadmPerf, mcmCPerfTable=mcmCPerfTable, sysHLastBootTime=sysHLastBootTime, oppmCPerfTable=oppmCPerfTable, luxNftpSessionInitiatedTrap=luxNftpSessionInitiatedTrap, ocm4gCntrTable=ocm4gCntrTable, osamHWDate=osamHWDate, fc8gCardLocation=fc8gCardLocation, mcmescPortCurrTable=mcmescPortCurrTable, mcmCTotPktSent=mcmCTotPktSent, rsdmCardSlot=rsdmCardSlot, psMfgDate=psMfgDate, ocm2ConnCardLocation=ocm2ConnCardLocation, oetEntry=oetEntry, osamLaserState=osamLaserState, ocm2CntrType=ocm2CntrType, sysHistEntry=sysHistEntry, ccCntrShelf=ccCntrShelf, ccCardSlot=ccCardSlot, mcmROMSize=mcmROMSize, cpLogMask=cpLogMask, sysHAvailTime=sysHAvailTime, rtdmHistEntry=rtdmHistEntry, luxNstaticRouteAddedTrap=luxNstaticRouteAddedTrap, oppmHWName=oppmHWName, cpState=cpState, cpSNMPTrapHost4=cpSNMPTrapHost4, ocm10gfHistEntry=ocm10gfHistEntry, rsmNumber=rsmNumber, mcmescCntrSlot=mcmescCntrSlot, mfgModelType=mfgModelType, mcmescPortHIntervalEns=mcmescPortHIntervalEns, mcmconnMuxShelf=mcmconnMuxShelf, mcmescPortSelfTestResultEntry=mcmescPortSelfTestResultEntry, voadmStartItu=voadmStartItu, mcmescSubDivEntry=mcmescSubDivEntry, ccCardLocation=ccCardLocation, oscHHistLocation=oscHHistLocation, csimIntervalUAIs=csimIntervalUAIs, oppmPerfShelf=oppmPerfShelf, mcmescLinkHIntervalTsos=mcmescLinkHIntervalTsos, cpLogServer2=cpLogServer2, mcmCBytesRcvd=mcmCBytesRcvd, mcmEntry=mcmEntry, muxPathID=muxPathID, mcmSubDivEntry=mcmSubDivEntry, rsmSubDivTable=rsmSubDivTable, mcmTimingPort=mcmTimingPort, voadmHHistEntry=voadmHHistEntry, luxNredundantDatabaseCopyFailed=luxNredundantDatabaseCopyFailed, cpCPerfStatus=cpCPerfStatus, oppmErrFreeSecs=oppmErrFreeSecs, mcmescPortSelfTestShelf=mcmescPortSelfTestShelf, tap=tap, ringNum=ringNum, ocm2ConnCardSlot=ocm2ConnCardSlot, rsdmHHistShelf=rsdmHHistShelf, ocm4gPmSlot=ocm4gPmSlot, sshMode=sshMode, cpSNMPTrapHostPort1=cpSNMPTrapHostPort1, ocm10gfModelType=ocm10gfModelType, mcmPortCurrDMs=mcmPortCurrDMs, mcmescPortCurrOobErr=mcmescPortCurrOobErr, ccLinkName=ccLinkName, rsmWorkingWavelength=rsmWorkingWavelength, dmmLinkName=dmmLinkName, mcmescPortHTotalCardLocation=mcmescPortHTotalCardLocation, rsmCPerfStatus=rsmCPerfStatus, voadmPortType=voadmPortType, ocm10gfPmNumIntervals=ocm10gfPmNumIntervals, cpTable=cpTable, mcmescPortSelfTestTxI2c=mcmescPortSelfTestTxI2c, voadmPortTotalOutputPower=voadmPortTotalOutputPower, cpCCntrEntry=cpCCntrEntry, uobLosMode=uobLosMode, osamPerfAPRDetector2Power=osamPerfAPRDetector2Power, SfpSerialString=SfpSerialString, rtdmMonWestInsertionLoss=rtdmMonWestInsertionLoss, upsmNumSubDiv=upsmNumSubDiv, mcmescPathID=mcmescPathID, oppmCPerfLocation=oppmCPerfLocation, routingTable=routingTable, ocm10gfPmLinkCorrectedOnesErr=ocm10gfPmLinkCorrectedOnesErr, luxNtopologyDatabaseChangedTrap=luxNtopologyDatabaseChangedTrap, rtdmCPerfState=rtdmCPerfState, upsmSwitch=upsmSwitch, mcmescName=mcmescName, rsdmNumEvents=rsdmNumEvents, oetPmPortTable=oetPmPortTable, rtdmPerfLocation=rtdmPerfLocation, ocm10gfHistTable=ocm10gfHistTable, mcmescPortSelfTestResultTable=mcmescPortSelfTestResultTable, oetPortIndex=oetPortIndex, luxNipNetmaskChangedTrap=luxNipNetmaskChangedTrap, mcmMsgsDlvrd=mcmMsgsDlvrd, cpSNMPTrapHost5=cpSNMPTrapHost5, osamCPerfSlot=osamCPerfSlot, zmsConfigSyncUserName=zmsConfigSyncUserName, ccSignalDetect=ccSignalDetect, mcmescLinkCurrTsos=mcmescLinkCurrTsos, cpGateway=cpGateway, osamConnShelf=osamConnShelf, luxNsnmpAuthenticationFailureTrap=luxNsnmpAuthenticationFailureTrap, dlDownloadTable=dlDownloadTable, rtdmHNumEvents=rtdmHNumEvents, fadmPerfTable=fadmPerfTable, ocm2PmCpeTxErrors=ocm2PmCpeTxErrors, mcmHCntrLocation=mcmHCntrLocation, oscPathID=oscPathID, acctCPShelf=acctCPShelf, rpsmPerfTable=rpsmPerfTable, ccLinkRxSigStr=ccLinkRxSigStr, fadmUpgradeFlag=fadmUpgradeFlag, osamHHistLastBootTime=osamHHistLastBootTime, ocm2PortItu=ocm2PortItu, fadmStartItu=fadmStartItu, ocm2BadPktRcvd=ocm2BadPktRcvd, muxBands=muxBands, mcmModelType=mcmModelType, luxNethernetCarrierDetectedTrap=luxNethernetCarrierDetectedTrap, luxNlossOfSignalNormalTrap=luxNlossOfSignalNormalTrap, sshSecMgmt=sshSecMgmt, uobTable=uobTable, voadmLastBootTime=voadmLastBootTime, osamCntrShelf=osamCntrShelf, muxPerfStatus=muxPerfStatus, luxNcaseTemperatureNormalTrap=luxNcaseTemperatureNormalTrap, muxHHistShelf=muxHHistShelf, cpHHistShelf=cpHHistShelf, dmmNumPorts=dmmNumPorts, ocm2PerfLocation=ocm2PerfLocation, mcmescLinkCurrCrcErr=mcmescLinkCurrCrcErr, ocm2PmEntry=ocm2PmEntry, oscLastBootTime=oscLastBootTime, fadmPortCardSlot=fadmPortCardSlot, oscTotPktRcvd=oscTotPktRcvd, mcmPortIndex=mcmPortIndex, osamCntrSlot=osamCntrSlot, ocm10gfFpgaRev=ocm10gfFpgaRev, rpsmLastBootTime=rpsmLastBootTime, ocm10gfCntrTable=ocm10gfCntrTable, fadmCPerfLocation=fadmCPerfLocation, mcmescPortHTotalOobErr=mcmescPortHTotalOobErr, muxInsertLoss=muxInsertLoss, upsmConnSlot=upsmConnSlot, mcmescPortEntry=mcmescPortEntry, mcmescPerfLocation=mcmescPerfLocation, ocm4gBadPktRcvd=ocm4gBadPktRcvd, luxNimageUpdateFailedTrap=luxNimageUpdateFailedTrap, upsmBootPromVer=upsmBootPromVer, mcmescPortSelfTestSlot=mcmescPortSelfTestSlot, osamCntrLocation=osamCntrLocation, mcmescLinkHTotalEntry=mcmescLinkHTotalEntry, oscPmTable=oscPmTable, luxNXfpRateMismatch=luxNXfpRateMismatch, luxNringConfigurationChanged=luxNringConfigurationChanged, ocm10gfPerfState=ocm10gfPerfState, rsdmHistEntry=rsdmHistEntry, secRoleEntry=secRoleEntry, rsmHAvailTime=rsmHAvailTime, ZmsAdminString=ZmsAdminString, rsdmLinkWestState=rsdmLinkWestState, uobModelNum=uobModelNum, rsdmPortEntry=rsdmPortEntry, ocm4gPmLinkRxPwr=ocm4gPmLinkRxPwr, fadmCErrFreeSecs=fadmCErrFreeSecs, mcmPortCCntrUASs=mcmPortCCntrUASs, mcmescCntrEntry=mcmescCntrEntry, upsmHHistMode=upsmHHistMode, luxNrecvAISNormalTrap=luxNrecvAISNormalTrap, fadmHLastBootTime=fadmHLastBootTime, topologyEntry=topologyEntry, DownloadStatus=DownloadStatus, cpPerfShelf=cpPerfShelf, mfgShelfTable=mfgShelfTable, ocm10gfPerfSlot=ocm10gfPerfSlot, mcmescConnTxOcmPort=mcmescConnTxOcmPort, uobPmSlot=uobPmSlot, ccHTotBadTrans=ccHTotBadTrans, mcmescDaughterBoard2SerialNum=mcmescDaughterBoard2SerialNum, usrSecTable=usrSecTable, upsmCardSlot=upsmCardSlot, ocm4gLink1PathID=ocm4gLink1PathID, rsdmHNumEvents=rsdmHNumEvents, rsmPerfShelf=rsmPerfShelf, voadmHHistMode=voadmHHistMode, luxNCpeLossOfFrame=luxNCpeLossOfFrame, mcmCNumEvents=mcmCNumEvents, ccCPerfShelf=ccCPerfShelf, mcmescPortHTotalRdpErr=mcmescPortHTotalRdpErr)
mibBuilder.exportSymbols("LUXN-MIB", ocm4gConnEntry=ocm4gConnEntry, rsmHHistLocation=rsmHHistLocation, luxNSfpPresent=luxNSfpPresent, ocm4gPortTxReach=ocm4gPortTxReach, oetPortSlot=oetPortSlot, tapHistEntry=tapHistEntry, ocm2Perf=ocm2Perf, osamCPerfStatus=osamCPerfStatus, luxNpumpTemperatureNormalTrap=luxNpumpTemperatureNormalTrap, ocm2MsgsDlvrd=ocm2MsgsDlvrd, osam2PerfGBOutputPower=osam2PerfGBOutputPower, oetPerfTable=oetPerfTable, mcmescPortClrErrCount=mcmescPortClrErrCount, csimCurrentLocation=csimCurrentLocation, usrSecRole=usrSecRole, acctmcmescSlot=acctmcmescSlot, mcmescTotBadTrans=mcmescTotBadTrans, osamPerfEntry=osamPerfEntry, osam2PerfPump2Temp=osam2PerfPump2Temp, dlCOkDownloads=dlCOkDownloads, ccHCntrSlot=ccHCntrSlot, upsmSubDivTable=upsmSubDivTable, UserBuffer=UserBuffer, osamPortTable=osamPortTable, tapTable=tapTable, osamCPerfShelf=osamCPerfShelf, ocm10gfPmLocation=ocm10gfPmLocation, ocm10gfLineRate=ocm10gfLineRate, ocm4gHwVersionID=ocm4gHwVersionID, luxNcardDeletedTrap=luxNcardDeletedTrap, mcmescLinkHIntervalEntry=mcmescLinkHIntervalEntry, fadmHMode=fadmHMode, eveTrap=eveTrap, radiusServerIndex=radiusServerIndex, mcmIwmModulation=mcmIwmModulation, dmmErrFreeSecs=dmmErrFreeSecs, luxNpwrFeedFailureTrap=luxNpwrFeedFailureTrap, rtdmHWName=rtdmHWName, upsmTxInsertionLoss=upsmTxInsertionLoss, rpsmErrFreeSecs=rpsmErrFreeSecs, imnStaticRouteMetric=imnStaticRouteMetric, ocm10gfCntrType=ocm10gfCntrType, fadmCardSlot=fadmCardSlot, ocm10gfHAvailTime=ocm10gfHAvailTime, ocm10gfConnShelf=ocm10gfConnShelf, ccBandwidth=ccBandwidth, acctCPUnAvail=acctCPUnAvail, cpSerialNum=cpSerialNum, ccCCounterFlag=ccCCounterFlag, dmmFwName=dmmFwName, mcmPortCCntrLCVs=mcmPortCCntrLCVs, psCNumEvents=psCNumEvents, ocm10gfSerialNum=ocm10gfSerialNum, usrSecPasswd=usrSecPasswd, secGroupEntry=secGroupEntry, ocm10gfConnCardShelf=ocm10gfConnCardShelf, cpCAvailTime=cpCAvailTime, mcmCIntensity=mcmCIntensity, psCVoltageLevel12Volt=psCVoltageLevel12Volt, cpSNMPCmdsRcvd=cpSNMPCmdsRcvd, upsmSwitchState=upsmSwitchState, oppmHHistMode=oppmHHistMode, fadmSerialNum=fadmSerialNum, topologyNearEndCardShelf=topologyNearEndCardShelf, ocm10gfHHistLocation=ocm10gfHHistLocation, ReleaseDate=ReleaseDate, rtdmAvailTime=rtdmAvailTime, uobSerialNum=uobSerialNum, ocm4gPerfState=ocm4gPerfState, ccBackpackModule=ccBackpackModule, fnCNumEvents=fnCNumEvents, performance=performance, mcmescPerfStatus=mcmescPerfStatus, oetPmPortRxFcsErrs=oetPmPortRxFcsErrs, fc8gCardSlot=fc8gCardSlot, muxSubDivEntry=muxSubDivEntry, mcmescMsgsDlvrd=mcmescMsgsDlvrd, rsmHErrFreeSecs=rsmHErrFreeSecs, tapCardLocation=tapCardLocation, ccLinkTxPwrStatus=ccLinkTxPwrStatus, fadmCCounterFlag=fadmCCounterFlag, acctmcmEntry=acctmcmEntry, luxNBitError10Em6Resolved=luxNBitError10Em6Resolved, osamPerfShelf=osamPerfShelf, sysErrFreeSecs=sysErrFreeSecs, dmmCardSlot=dmmCardSlot, SerialString=SerialString, diagnostics=diagnostics, ocm4gPmEntry=ocm4gPmEntry, mcmescPortCurrRdpErr=mcmescPortCurrRdpErr, acctmcmescLocation=acctmcmescLocation, diagTestNum=diagTestNum, upsmCPerfTable=upsmCPerfTable, mcmPerfLocation=mcmPerfLocation, osamPathID=osamPathID, rsmNumPorts=rsmNumPorts, cpSubDivImgDBVersion=cpSubDivImgDBVersion, rsmSubDivSize=rsmSubDivSize, luxNftpHostFailedTrap=luxNftpHostFailedTrap, mcmescPortHIntervalPort=mcmescPortHIntervalPort, mcmescFWVersionID=mcmescFWVersionID, luxNCpeXfpPresent=luxNCpeXfpPresent, uobHistTable=uobHistTable, ocm10gfPerfEntry=ocm10gfPerfEntry, osamPerfLaserTemperature=osamPerfLaserTemperature, luxNBitError10Em7=luxNBitError10Em7, cpROMSize=cpROMSize, mcmPortLineEqualizer=mcmPortLineEqualizer, ocm2PmLinkRxErredSeconds=ocm2PmLinkRxErredSeconds, luxNCpeXfpRateMismatchResolved=luxNCpeXfpRateMismatchResolved, dlOSState=dlOSState, oscCntrSlot=oscCntrSlot, muxHistTable=muxHistTable, ocm2FwDate=ocm2FwDate, mcmescSelfTestEntry=mcmescSelfTestEntry, mcmescAcct=mcmescAcct, mcmTemperature=mcmTemperature, oetLinkEntry=oetLinkEntry, osamPortEntry=osamPortEntry, oppmCPerfSlot=oppmCPerfSlot, ocm10gfPmCpeErredSeconds=ocm10gfPmCpeErredSeconds, secElmntGrpEntry=secElmntGrpEntry, ocm10gfConnPort=ocm10gfConnPort, luxNselfTestEndedTrap=luxNselfTestEndedTrap, luxNopenFiberCPEAlarmTrap=luxNopenFiberCPEAlarmTrap, rsdmCPerfState=rsdmCPerfState, oscHHistMode=oscHHistMode, ccPerfShelf=ccPerfShelf, fc8gPortShelf=fc8gPortShelf, dlHOkDownloads=dlHOkDownloads, mcmescPortHTotalEns=mcmescPortHTotalEns, mcmPortCurrIndex=mcmPortCurrIndex, rsmPerfState=rsmPerfState, dmmHistEntry=dmmHistEntry, ccCPerfTable=ccCPerfTable, cpTotPktSent=cpTotPktSent, AlarmType=AlarmType, ccSwitchByShelfSlot=ccSwitchByShelfSlot, ocm2ConnCardType=ocm2ConnCardType, ocm4gHLastBootTime=ocm4gHLastBootTime, mcmPortLineCoding=mcmPortLineCoding, ocm2PortTable=ocm2PortTable, voadmCleiNum=voadmCleiNum, connMuxShelf=connMuxShelf, dlUpdateOS=dlUpdateOS, cpSubDivEntry=cpSubDivEntry, uobAvailTime=uobAvailTime, dmmPortMode=dmmPortMode, upsmPerfLocation=upsmPerfLocation, oppmCPerfStatus=oppmCPerfStatus, mfgName=mfgName, voadmHErrFreeSecs=voadmHErrFreeSecs, ccHCntrEntry=ccHCntrEntry, luxNstandbyMPMLostTrap=luxNstandbyMPMLostTrap, ocm2Link1LinkName=ocm2Link1LinkName, luxNstandbyMPMDetectedTrap=luxNstandbyMPMDetectedTrap, fc8gHwVersionID=fc8gHwVersionID, dmmPmErrors=dmmPmErrors, oscClearCntrs=oscClearCntrs, ocm4gAvailTime=ocm4gAvailTime, upsmModelNum=upsmModelNum, ccCPerfEntry=ccCPerfEntry, imnRouteUnReachableTimer=imnRouteUnReachableTimer, psCVoltageLevel3pt3Volt=psCVoltageLevel3pt3Volt, oetOpMode=oetOpMode, rsdmMarginForSwitch=rsdmMarginForSwitch, ocm2ConnLocation=ocm2ConnLocation, ccEcbAllocFail=ccEcbAllocFail, luxNextClearAlmInpTrap=luxNextClearAlmInpTrap, cpCPerfState=cpCPerfState, rtdm=rtdm, osamConnIpAddress=osamConnIpAddress, dmmPortShelf=dmmPortShelf, mcmPortHIntervalBESs=mcmPortHIntervalBESs, rsdmFWDate=rsdmFWDate, sysAudioAlarmSeverity=sysAudioAlarmSeverity, psCPerfID=psCPerfID, mcmescPortCurrLoss=mcmescPortCurrLoss, dmmPerfLocation=dmmPerfLocation, luxNVoadmDetectorFailureTrap=luxNVoadmDetectorFailureTrap, voadmPortMinChanOutputPower=voadmPortMinChanOutputPower, rsdmEntry=rsdmEntry, fc8gPortIndex=fc8gPortIndex, mcmPortHIntervalTable=mcmPortHIntervalTable, cpHBufAllocFail=cpHBufAllocFail, osamSetState=osamSetState, mcmEthernetMode=mcmEthernetMode, ocm2HLastBootTime=ocm2HLastBootTime, cpSetMode=cpSetMode, cpCPerfMode=cpCPerfMode, cpCCntrType=cpCCntrType, mcmHBytesSent=mcmHBytesSent, zmsConfigSyncUserPassword=zmsConfigSyncUserPassword, luxNSNMPKeepalivesEnabled=luxNSNMPKeepalivesEnabled, cpCCntrSlot=cpCCntrSlot, ocm4gTotPktSent=ocm4gTotPktSent, mcmCErrFreeSecs=mcmCErrFreeSecs, mcmescConnDemuxPort=mcmescConnDemuxPort, rtdmHHistMode=rtdmHHistMode, ocm2ConnSlot=ocm2ConnSlot, mcmNumEvents=mcmNumEvents, mcmescLinkCurrRdpErr=mcmescLinkCurrRdpErr, mcmPortHIntervalLCVs=mcmPortHIntervalLCVs, dlOSIndex=dlOSIndex, rsmConnCardType=rsmConnCardType, oscPortTxReach=oscPortTxReach, rsmHHistTable=rsmHHistTable, osamBootPromVer=osamBootPromVer, mcmPortEntry=mcmPortEntry, uobHistEntry=uobHistEntry, osamCPerfLocation=osamCPerfLocation, rsdmTxITUNumber=rsdmTxITUNumber, dmmPmSlot=dmmPmSlot, rpsmLinkEastState=rpsmLinkEastState, oscHMode=oscHMode, sysRdbcopy=sysRdbcopy, luxNprotectionLinkFailureTrap=luxNprotectionLinkFailureTrap, muxConnLocation=muxConnLocation, mcmescLinkCurrLoss=mcmescLinkCurrLoss, muxCAvailTime=muxCAvailTime, VersionString=VersionString, mcmescBootPromVer=mcmescBootPromVer, upsmPortTable=upsmPortTable, osamCntrTable=osamCntrTable, ocm4gLink1LineRate=ocm4gLink1LineRate, fadmErrFreeSecs=fadmErrFreeSecs, fadmCNumEvents=fadmCNumEvents, diagTestTable=diagTestTable, luxNIbmNormalTrap=luxNIbmNormalTrap, ocm2PortSfpSerialNumber=ocm2PortSfpSerialNumber, cpCPerfTable=cpCPerfTable, cpHTotPktRcvd=cpHTotPktRcvd, ccCond=ccCond, eveEventId=eveEventId, sysImnDeleteRoute=sysImnDeleteRoute, oscPmEntry=oscPmEntry, fadmHHistLocation=fadmHHistLocation, ocm10gfNumEvents=ocm10gfNumEvents, rpsmHWName=rpsmHWName, luxNcoilTemperatureNormalTrap=luxNcoilTemperatureNormalTrap, oscModelNum=oscModelNum, oscCntrShelf=oscCntrShelf, manufacturing=manufacturing, mcmescLinkHTotalCrcErr=mcmescLinkHTotalCrcErr, ccCntrLocation=ccCntrLocation, mcmPortCurrTable=mcmPortCurrTable, sshKeySize=sshKeySize, fnPerfID=fnPerfID, cpPerfEntry=cpPerfEntry, luxNCpeXfpRateMismatch=luxNCpeXfpRateMismatch, ocm2Link1LineRate=ocm2Link1LineRate, cpPerfStatus=cpPerfStatus, rsdmHErrFreeSecs=rsdmHErrFreeSecs, mcmPortConnection=mcmPortConnection)
mibBuilder.exportSymbols("LUXN-MIB", luxNlocalLoopbackEnabledTrap=luxNlocalLoopbackEnabledTrap, dmmPortTxState=dmmPortTxState, fadmHHistSlot=fadmHHistSlot, ocm2HHistMode=ocm2HHistMode, mfgNumSlots=mfgNumSlots, voadmName=voadmName, ccHCntrType=ccHCntrType, oscPortSfpSerialNumber=oscPortSfpSerialNumber, ocm4gHHistSlot=ocm4gHHistSlot, ccCErrFreeSecs=ccCErrFreeSecs, rsmCardLocation=rsmCardLocation, oscCleiNum=oscCleiNum, mcmPortCCntrCardSlot=mcmPortCCntrCardSlot, ringTable=ringTable, oscHLastBootTime=oscHLastBootTime, voadmSerialNum=voadmSerialNum, ocm2HistTable=ocm2HistTable, rsmSubDivEntry=rsmSubDivEntry, ocm2ClearCntrs=ocm2ClearCntrs, mcmPortTable=mcmPortTable, muxConnShelf=muxConnShelf, oscPortItu=oscPortItu, cpTelnetClient=cpTelnetClient, oetLinkShelf=oetLinkShelf, luxNosamSingleAprSensorFailed=luxNosamSingleAprSensorFailed, oscPmShelf=oscPmShelf, luxNmoduleUpdateFailedTrap=luxNmoduleUpdateFailedTrap, tapPerfSlot=tapPerfSlot, rsdmCPerfStatus=rsdmCPerfStatus, upsmFWName=upsmFWName, ocm4gPortEntry=ocm4gPortEntry, alarmEventId=alarmEventId, ocm2Link1PathID=ocm2Link1PathID, tapHHistSlot=tapHHistSlot, luxNpwrFeedOverVoltageTrap=luxNpwrFeedOverVoltageTrap, cpCardSlot=cpCardSlot, osamFWDate=osamFWDate, uobHAvailTime=uobHAvailTime, oppmLinkAStatus=oppmLinkAStatus, rsmRxInsertionLoss=rsmRxInsertionLoss, dmmConnPort=dmmConnPort, tapSerialNum=tapSerialNum, dlCBadDownloads=dlCBadDownloads, fc8gPortName=fc8gPortName, alarmLastDateTime=alarmLastDateTime, tapMfgDate=tapMfgDate, oscHwName=oscHwName, luxNsignalStrengthHighTrap=luxNsignalStrengthHighTrap, rtdmHistTable=rtdmHistTable, ocm4gNumEvents=ocm4gNumEvents, mcmPortHTotalBESs=mcmPortHTotalBESs, osam2PerfGBInputPower=osam2PerfGBInputPower, rpsmPerfEntry=rpsmPerfEntry, downloadCond=downloadCond, ocm2PmCpeRxPwr=ocm2PmCpeRxPwr, mcmescPortHIntervalEntry=mcmescPortHIntervalEntry, mcmescConnRxOcmShelf=mcmescConnRxOcmShelf, dmmHwName=dmmHwName, mcmPortHTotalUASs=mcmPortHTotalUASs, fc8gCpe1LaserEnabled=fc8gCpe1LaserEnabled, ocm10gfPmCpe10GbeTxTotalPkts=ocm10gfPmCpe10GbeTxTotalPkts, voadmPortPerChanInputPower=voadmPortPerChanInputPower, oppmConnChassisID=oppmConnChassisID, luxNcaseTemperatureLoTrap=luxNcaseTemperatureLoTrap, luxNconnectionAddedTrap=luxNconnectionAddedTrap, ocm4gPmNumLinkRxIntervals=ocm4gPmNumLinkRxIntervals, osamCntrKeepAlivePktRcvd=osamCntrKeepAlivePktRcvd, ocm2CleiNum=ocm2CleiNum, eveSource=eveSource, rtdmCardSlot=rtdmCardSlot, rtdmHAvailTime=rtdmHAvailTime, voadmHHistShelf=voadmHHistShelf, tapPerfStatus=tapPerfStatus, muxHHistLocation=muxHHistLocation, upsmMinProtPowerForSwitch=upsmMinProtPowerForSwitch, fadmMfgDate=fadmMfgDate, oscTotPktSent=oscTotPktSent, secElementParent=secElementParent, imnDynamicRouteMetric=imnDynamicRouteMetric, rpsmHHistSlot=rpsmHHistSlot, mcmCClearCntrs=mcmCClearCntrs, rsdmPortType=rsdmPortType, cpCMsgsDlvrd=cpCMsgsDlvrd, uobPmTable=uobPmTable, uobHErrFreeSecs=uobHErrFreeSecs, dmmConnCardPortType=dmmConnCardPortType, eveTwoHundredthEntryDateTime=eveTwoHundredthEntryDateTime, uobHwName=uobHwName, muxPerfState=muxPerfState, psPerfStatusFeedA=psPerfStatusFeedA, cpHCntrEntry=cpHCntrEntry, fadmPortEntry=fadmPortEntry, mcmescHBytesRcvd=mcmescHBytesRcvd, mcmescTable=mcmescTable, ocm4gPmLinkTxPwr=ocm4gPmLinkTxPwr, psCPerfType=psCPerfType, mcmescConnMuxPort=mcmescConnMuxPort, dmmHNumEvents=dmmHNumEvents, mcmCLaserOnOff=mcmCLaserOnOff, oppmCCounterFlag=oppmCCounterFlag, rtdmHErrFreeSecs=rtdmHErrFreeSecs, oetLinkRxPower=oetLinkRxPower, oscCntrTable=oscCntrTable, ccClearCntrs=ccClearCntrs, fadmHHistTable=fadmHHistTable, NodeName=NodeName, usrTrap=usrTrap, rsdmFWVersionID=rsdmFWVersionID, luxNusrAllAlarmAction=luxNusrAllAlarmAction, luxNdlModuleActivateFailedTrap=luxNdlModuleActivateFailedTrap, luxNIbmDownTrap=luxNIbmDownTrap, cpSubDivTable=cpSubDivTable, mcmescPerfTable=mcmescPerfTable, upsmModelType=upsmModelType, dmmCleiNum=dmmCleiNum, mcmescLinkSelfTestSlot=mcmescLinkSelfTestSlot, rsmLinkBStatus=rsmLinkBStatus, mfgDate=mfgDate, cpHMode=cpHMode, dmmName=dmmName, rpsmHMode=rpsmHMode, osamHHistMode=osamHHistMode, rsdmHistTable=rsdmHistTable, alarmAck=alarmAck, dlFtpLogonID=dlFtpLogonID, netSecMgmt=netSecMgmt, ocm4gConnCardPortType=ocm4gConnCardPortType, luxNsystemNameChangeTrap=luxNsystemNameChangeTrap, acctmcmTable=acctmcmTable, eveFiveHundredthEntryDateTime=eveFiveHundredthEntryDateTime, rpsmPerfShelf=rpsmPerfShelf, ocm2PortWavelength=ocm2PortWavelength, cpMacAddr=cpMacAddr, luxNlineCodeViolationTrap=luxNlineCodeViolationTrap, voadmPortTotalInputPower=voadmPortTotalInputPower, ccName=ccName, oetModelNum=oetModelNum, dmmCntrType=dmmCntrType, uobPmInputPower=uobPmInputPower, mcmescLinkHTotalDuration=mcmescLinkHTotalDuration, fnModelType=fnModelType, rtdmHHistLocation=rtdmHHistLocation, fc8gCardShelf=fc8gCardShelf, osam2PerfPump1IBias=osam2PerfPump1IBias, fc8gPortSfpXfpSerialNumber=fc8gPortSfpXfpSerialNumber, voadmPortCardSlot=voadmPortCardSlot, rpsmCAvailTime=rpsmCAvailTime, psBreakerConditionFeedA=psBreakerConditionFeedA, cpRedunSubDivIndex=cpRedunSubDivIndex, mcmBadPktRcvd=mcmBadPktRcvd, oetPmLinkRxBytes=oetPmLinkRxBytes, mcmescHTotPktRcvd=mcmescHTotPktRcvd, cpHAvailTime=cpHAvailTime, ccCCntrSlot=ccCCntrSlot, ocm10gfHist=ocm10gfHist, security=security, ccBadPktRcvd=ccBadPktRcvd, luxNnearendPortLoopbackEnabledTrap=luxNnearendPortLoopbackEnabledTrap, mcmescLinkSelfTestDataPath=mcmescLinkSelfTestDataPath, mcmconnDemuxShelf=mcmconnDemuxShelf, mcmescPerfShelf=mcmescPerfShelf, ocm10gfTotPktSent=ocm10gfTotPktSent, ocm4gHHistMode=ocm4gHHistMode, mcmCBiasCurrent=mcmCBiasCurrent, luxNeventLogCleared=luxNeventLogCleared, topologyLinkStatus=topologyLinkStatus, mcmPortCardLocation=mcmPortCardLocation, oscPerfStatus=oscPerfStatus, cpHHistTable=cpHHistTable, csimPerf=csimPerf, ocm2Link2PathID=ocm2Link2PathID, mcmHist=mcmHist, mcmescSubDivSize=mcmescSubDivSize, ocm10gfCardShelf=ocm10gfCardShelf, ringEntry=ringEntry, connCpeTxMcmescPort=connCpeTxMcmescPort, mcmPortHTotalFrameASs=mcmPortHTotalFrameASs, luxNGenericTrap=luxNGenericTrap, muxType=muxType, luxNLinkTxFault=luxNLinkTxFault, oppmLinkBState=oppmLinkBState, mcmCntrLocation=mcmCntrLocation, mcmescLinkHIntervalLoss=mcmescLinkHIntervalLoss, mcmCLossOfLight=mcmCLossOfLight, cpCEcbAllocFail=cpCEcbAllocFail, rpsmCardLocation=rpsmCardLocation, ocm4gLink2LineRate=ocm4gLink2LineRate, fadmSubDivOffset=fadmSubDivOffset, oscNumPorts=oscNumPorts, luxNRadiusDefaultRealmChangedTrap=luxNRadiusDefaultRealmChangedTrap, rsmBootPromVer=rsmBootPromVer, upsmConnShelf=upsmConnShelf, dmmPmShelf=dmmPmShelf, oetCardLocation=oetCardLocation, tapErrFreeSecs=tapErrFreeSecs, mcmPortCurrFrameASs=mcmPortCurrFrameASs, rsdmLinkWestStatus=rsdmLinkWestStatus, FileName=FileName, ocm10gfPmShelf=ocm10gfPmShelf, sysAddCard=sysAddCard, rtdmPerfStatus=rtdmPerfStatus, rsdmCPerfSlot=rsdmCPerfSlot, rpsmPerfSlot=rpsmPerfSlot, usrDateTime=usrDateTime, luxNcardMismatchTrap=luxNcardMismatchTrap, tapHMode=tapHMode, ocm2FpgaRev=ocm2FpgaRev, luxNVoadmOutofRangeResolvedTrap=luxNVoadmOutofRangeResolvedTrap, luxNrecvYellowAlarmTrap=luxNrecvYellowAlarmTrap, luxNSshEnabledTrap=luxNSshEnabledTrap, luxNberHighThresholdExceeded=luxNberHighThresholdExceeded, oppmPerfSlot=oppmPerfSlot, ocm4gHHistEntry=ocm4gHHistEntry, ccModelNum=ccModelNum, oetLinkTxState=oetLinkTxState, mcmTotBadTrans=mcmTotBadTrans, oetPmPortShelf=oetPmPortShelf, userSecMgmt=userSecMgmt, mcmescMfgDate=mcmescMfgDate, ocm2Number=ocm2Number, ocm2ModelType=ocm2ModelType, luxNosamMaxInputPowerReached=luxNosamMaxInputPowerReached, mcmescPortSelfTestTxDataPath=mcmescPortSelfTestTxDataPath, uobPerfTable=uobPerfTable, tapCardSlot=tapCardSlot, rsdmHHistTable=rsdmHHistTable, luxNPortTxFaultResolved=luxNPortTxFaultResolved, ocm10gfSetState=ocm10gfSetState, mcmPortHIntervalUASs=mcmPortHIntervalUASs, rpsmSubDivDescr=rpsmSubDivDescr, mcmescConnRxOcmSlot=mcmescConnRxOcmSlot, rsdmOpticsMfgDate=rsdmOpticsMfgDate, ccHTotPktRcvd=ccHTotPktRcvd, csimMode=csimMode, luxNcardAddedTrap=luxNcardAddedTrap, dmmHMode=dmmHMode, rsdmCErrFreeSecs=rsdmCErrFreeSecs, cpHTrapsSent=cpHTrapsSent, mcmPortCCntrEntry=mcmPortCCntrEntry, rsdmCPerfEntry=rsdmCPerfEntry, ocm2Table=ocm2Table, luxNmcmescTestSequenceOffTrap=luxNmcmescTestSequenceOffTrap, mcmTotPktSent=mcmTotPktSent, rtdmSubDivEntry=rtdmSubDivEntry, mcmescLinkHTotalCardLocation=mcmescLinkHTotalCardLocation, oscPerfTable=oscPerfTable, dmmPortSfpSerialNumber=dmmPortSfpSerialNumber, psCPerfTable=psCPerfTable, fadmModelType=fadmModelType, mcmHCntrType=mcmHCntrType, osamCPerfAvailTime=osamCPerfAvailTime, luxNTrapHostAutoUpdateEnabled=luxNTrapHostAutoUpdateEnabled, connTxNonMuxDmuxPort=connTxNonMuxDmuxPort, ocm2ConnShelf=ocm2ConnShelf)
mibBuilder.exportSymbols("LUXN-MIB", ccROMSize=ccROMSize, oetPmLinkTable=oetPmLinkTable, muxNumSubDiv=muxNumSubDiv, ccHMsgsDlvrd=ccHMsgsDlvrd, oppmLinkAPathID=oppmLinkAPathID, oetTable=oetTable, ccHCntrTable=ccHCntrTable, uobHHistTable=uobHHistTable, osamHHistTable=osamHHistTable, csimCurrentEIs=csimCurrentEIs, osamCPerfState=osamCPerfState, oppmConnPort=oppmConnPort, RebootType=RebootType, ccEntry=ccEntry, osam2PerfPump2IBias=osam2PerfPump2IBias, mcmescLinkCurrOobErr=mcmescLinkCurrOobErr, fadmBand=fadmBand, ocm4gHHistShelf=ocm4gHHistShelf, ccBackpackTxInsertionLoss=ccBackpackTxInsertionLoss, luxNSetCommunityChangeTrap=luxNSetCommunityChangeTrap, upsmHist=upsmHist, fadmAdminState=fadmAdminState, cpCTotPktSent=cpCTotPktSent, rpsmAdminState=rpsmAdminState, ocm2HNumEvents=ocm2HNumEvents, ocm4gConnLocation=ocm4gConnLocation, psHistEntry=psHistEntry, luxNOutOfFrame=luxNOutOfFrame, uobPerfEntry=uobPerfEntry, rsdmAdminState=rsdmAdminState, rsdmSubDivOffset=rsdmSubDivOffset, mcmescHBytesSent=mcmescHBytesSent, ocm4gHHistLocation=ocm4gHHistLocation, cpCBufAllocFail=cpCBufAllocFail, mcmCPerfEntry=mcmCPerfEntry, fc8gPerfState=fc8gPerfState, luxNcolorsimDisabledTrap=luxNcolorsimDisabledTrap, upsmHistTable=upsmHistTable, ocm2PerfState=ocm2PerfState, cpTotPktRcvd=cpTotPktRcvd, rsmLinkAStatus=rsmLinkAStatus, mcmCRefClock=mcmCRefClock, mcmescLinkCurrEntry=mcmescLinkCurrEntry, ccHCntrLocation=ccHCntrLocation, oppmEntry=oppmEntry, dlActivate=dlActivate, ocm10gfPerfStatus=ocm10gfPerfStatus, ocm2PmLocation=ocm2PmLocation, ccHWName=ccHWName, cpHBadPktRcvd=cpHBadPktRcvd, secNumElmntGrp=secNumElmntGrp, oppmCAvailTime=oppmCAvailTime, fnPerfState=fnPerfState, eveNumEvents=eveNumEvents, oppmCardSlot=oppmCardSlot, ocm4gCardLocation=ocm4gCardLocation, cpNumSubDiv=cpNumSubDiv, upsmCardName=upsmCardName, cpSubDivDescr=cpSubDivDescr, mcmescPortCardShelf=mcmescPortCardShelf, rtdmFWVersionID=rtdmFWVersionID, cpHCntrShelf=cpHCntrShelf, muxSetState=muxSetState, ocm10gfHHistSlot=ocm10gfHHistSlot, ccMfgDate=ccMfgDate, mcmHBufAllocFail=mcmHBufAllocFail, rtdmPerf=rtdmPerf, luxNSfpRateMismatchResolved=luxNSfpRateMismatchResolved, muxPerf=muxPerf, oppmSubDivOffset=oppmSubDivOffset, oppmHighAlarmMargin=oppmHighAlarmMargin, oppmSetState=oppmSetState, mcmPortCurrCardSlot=mcmPortCurrCardSlot, ocm10gfConnSlot=ocm10gfConnSlot, mcmescCardSlot=mcmescCardSlot, mcmPortHIntervalFrameASs=mcmPortHIntervalFrameASs, ccCClockDiv=ccCClockDiv, mcmescCpeRxSigLowThreshold=mcmescCpeRxSigLowThreshold, oetCardShelf=oetCardShelf, rpsmLinkWestStatus=rpsmLinkWestStatus, mcmLaserTemperature=mcmLaserTemperature, rsdmHHistEntry=rsdmHHistEntry, ocm4gCntrLocation=ocm4gCntrLocation, dmmMsgsDlvrd=dmmMsgsDlvrd, fnCond=fnCond, rsdmSwitch=rsdmSwitch, upsmHAvailTime=upsmHAvailTime, fadmHErrFreeSecs=fadmHErrFreeSecs, mcmErrFreeSecs=mcmErrFreeSecs, mcmCTemperature=mcmCTemperature, dmmPmType=dmmPmType, rpsmNumEvents=rpsmNumEvents, oscPerfEntry=oscPerfEntry, ccCCntrType=ccCCntrType, rsdmNumSubDiv=rsdmNumSubDiv, mcmPortNumber=mcmPortNumber, sysRdbcopyStatus=sysRdbcopyStatus, osamPerfStatus=osamPerfStatus, ocm10gfClearPmCntrs=ocm10gfClearPmCntrs, uobGain=uobGain, ocm2HHistSlot=ocm2HHistSlot, radiusSecTable=radiusSecTable, rtdmSubDivDescr=rtdmSubDivDescr, luxNcsimModuleFailureTrap=luxNcsimModuleFailureTrap, luxNtimingPriorityChangedTrap=luxNtimingPriorityChangedTrap, mcmIntensity=mcmIntensity, luxNLogServerDeletedTrap=luxNLogServerDeletedTrap, ocm10gfPathID=ocm10gfPathID, rsdmPortTable=rsdmPortTable, ocm4gCleiNum=ocm4gCleiNum, acctCPResetCntrs=acctCPResetCntrs, mcmPortCurrASs=mcmPortCurrASs, ocm4gPmShelf=ocm4gPmShelf, rsmModelNum=rsmModelNum, rsmHLastBootTime=rsmHLastBootTime, luxNpowerSupplyOKTrap=luxNpowerSupplyOKTrap, dmmCardShelf=dmmCardShelf, mcmescHCntrEntry=mcmescHCntrEntry, osamSubDivDescr=osamSubDivDescr, rpsmBootPromVer=rpsmBootPromVer, mcmescLinkHIntervalSlot=mcmescLinkHIntervalSlot, ocm2PerfTable=ocm2PerfTable, mcmescPortHTotalEntry=mcmescPortHTotalEntry, fc8gPortRxPower=fc8gPortRxPower, luxNlossOfTimingNormalTrap=luxNlossOfTimingNormalTrap, rsdmPerfShelf=rsdmPerfShelf, ocm4gPerfSlot=ocm4gPerfSlot, luxNimageExportFailedTrap=luxNimageExportFailedTrap, eveSevenHundredthEntryDateTime=eveSevenHundredthEntryDateTime, rsmSetState=rsmSetState, ringPath2RemoteIP=ringPath2RemoteIP, luxNVoadmDetectorFailureResolvedTrap=luxNVoadmDetectorFailureResolvedTrap, upsmFWDate=upsmFWDate, oetLinkWavelength=oetLinkWavelength, ccHHistShelf=ccHHistShelf, luxNBitError10Em3=luxNBitError10Em3, rsmHNumEvents=rsmHNumEvents, usrTarget=usrTarget, luxNfanNotPresentTrap=luxNfanNotPresentTrap, ccCIntensity=ccCIntensity, luxNselfTestPassTrap=luxNselfTestPassTrap, voadmPortCardLocation=voadmPortCardLocation, mcmHistTable=mcmHistTable, ccCEcbAllocFail=ccCEcbAllocFail, fc8gAvailTime=fc8gAvailTime, upsmCPerfEntry=upsmCPerfEntry, ocm2Link2AutoDisable=ocm2Link2AutoDisable, osamPerfAprStatus=osamPerfAprStatus, muxErrFreeSecs=muxErrFreeSecs, eveFourHundredthEntryDateTime=eveFourHundredthEntryDateTime, luxNwarmStartTrap=luxNwarmStartTrap, rpsmAddDropLoss=rpsmAddDropLoss, imnDynamicRouteSysName=imnDynamicRouteSysName, ps=ps, uobPerfSlot=uobPerfSlot, ocm10gfBadPktRcvd=ocm10gfBadPktRcvd, luxNimageExportInProgressTrap=luxNimageExportInProgressTrap, usrLogonId=usrLogonId, voadmSetState=voadmSetState, dmmTotPktRcvd=dmmTotPktRcvd, dmmPerfEntry=dmmPerfEntry, ocm10gfPortTable=ocm10gfPortTable, luxNLinkRxSignalDegraded=luxNLinkRxSignalDegraded, cpModelType=cpModelType, rsmCleiNum=rsmCleiNum, luxNextMajAlmInpTrap=luxNextMajAlmInpTrap, ocm4gLink1AutoDisable=ocm4gLink1AutoDisable, ocm10gfPmCpeRxPwr=ocm10gfPmCpeRxPwr, ccCMsgsDlvrd=ccCMsgsDlvrd, fadmInsertionLoss1=fadmInsertionLoss1, csimSEIThreshold=csimSEIThreshold, fc8gSerialNum=fc8gSerialNum, uobOperationMode=uobOperationMode, ocm10gfCntrLocation=ocm10gfCntrLocation, ccPerfTable=ccPerfTable, csimCurrentGIs=csimCurrentGIs, mcmescSubDivOffset=mcmescSubDivOffset, mcmPortCCntrSEFSs=mcmPortCCntrSEFSs, rtdmFWName=rtdmFWName, oetSetState=oetSetState, tapFWVersionID=tapFWVersionID, oetCpldRev=oetCpldRev, uobPmOutPower=uobPmOutPower, mfgCRCChecksum=mfgCRCChecksum, upsmWorkingPower=upsmWorkingPower, fadmNumPorts=fadmNumPorts, voadmModelNum=voadmModelNum, ocm2NumPorts=ocm2NumPorts, rsmHHistEntry=rsmHHistEntry, osamCPerfCounterFlag=osamCPerfCounterFlag, oscModelType=oscModelType, ccLinkITUNum=ccLinkITUNum, osamHWName=osamHWName, mcmPortImpedance=mcmPortImpedance, mcmescHMode=mcmescHMode, cpCBadPktRcvd=cpCBadPktRcvd, luxNstandbyDBNotSupportedTrap=luxNstandbyDBNotSupportedTrap, mcmPortCCntrASs=mcmPortCCntrASs, mcmescROMSize=mcmescROMSize, ocm10gfHMode=ocm10gfHMode, ocm10gfPmLinkCorrectedFecErrs=ocm10gfPmLinkCorrectedFecErrs, rsmHHistMode=rsmHHistMode, eveSeqNum=eveSeqNum, rsdmSetState=rsdmSetState, rtdmConnPort=rtdmConnPort, fadmNumEvents=fadmNumEvents, luxNusrOneAlarmAction=luxNusrOneAlarmAction, ocm2PortLocation=ocm2PortLocation, mcmModelNum=mcmModelNum, OSState=OSState, psHistTable=psHistTable, ccRefClock=ccRefClock, ocm10gfClearCntrs=ocm10gfClearCntrs, dmmFwDate=dmmFwDate, rsmAdminState=rsmAdminState, rpsmHistEntry=rpsmHistEntry, psHist=psHist, mcmBytesSent=mcmBytesSent, ccIwmModulation=ccIwmModulation, mcmPerf=mcmPerf, mcmCCntrType=mcmCCntrType, FtpMode=FtpMode, rsdmPerf=rsdmPerf, mcmCModulation=mcmCModulation, oscPmSlot=oscPmSlot, diagSlot=diagSlot, luxNSshKeySizeSetTrap=luxNSshKeySizeSetTrap, mcmescLinkSelfTestShelf=mcmescLinkSelfTestShelf, ccCTotPktSent=ccCTotPktSent, osamHHistEntry=osamHHistEntry, ccMfgIwmModulation=ccMfgIwmModulation, connCpeRxMcmescShelf=connCpeRxMcmescShelf, alarmLog=alarmLog, mcmescPortHIntervalSlot=mcmescPortHIntervalSlot, radiusAuthOrder=radiusAuthOrder, cpCTotPktRcvd=cpCTotPktRcvd, oppmHistEntry=oppmHistEntry, cpIpAddress=cpIpAddress, rpsmWorkingPower=rpsmWorkingPower, rtdmTable=rtdmTable, ocm2PortRxPower=ocm2PortRxPower, sysAlarmSerial=sysAlarmSerial, fc8gHwName=fc8gHwName, dlCLongestTime=dlCLongestTime, ocm4gConnCardSlot=ocm4gConnCardSlot, muxHNumEvents=muxHNumEvents, oppmAdminState=oppmAdminState, osam2GainReq=osam2GainReq, rpsmCErrFreeSecs=rpsmCErrFreeSecs, dmmPortEntry=dmmPortEntry, cpTotBadTrans=cpTotBadTrans, upsmHHistLocation=upsmHHistLocation, muxPortCardShelf=muxPortCardShelf, acctmcmLocation=acctmcmLocation)
mibBuilder.exportSymbols("LUXN-MIB", ocm10gfCleiNum=ocm10gfCleiNum, ccHCntrMode=ccHCntrMode, ccIntensity=ccIntensity, ModelString=ModelString, csimCurrentEFIs=csimCurrentEFIs, osamPerfErrFreeSecs=osamPerfErrFreeSecs, osamHistEntry=osamHistEntry, luxNipNetmaskErrorTrap=luxNipNetmaskErrorTrap, upsmPerf=upsmPerf, fc8gSetState=fc8gSetState, oetLinkXfpSerialNumber=oetLinkXfpSerialNumber, ocm4gCntrSlot=ocm4gCntrSlot, rpsmCond=rpsmCond, mcmHTotPktSent=mcmHTotPktSent, mcmMfgDate=mcmMfgDate, ocm2PmCpeTxPwr=ocm2PmCpeTxPwr, mcmHCntrTable=mcmHCntrTable, dmmPortRxPower=dmmPortRxPower, sysCSetMode=sysCSetMode, fnPerfStatus=fnPerfStatus, mcmescDaughterBoard2VersionID=mcmescDaughterBoard2VersionID, oetErrFreeSecs=oetErrFreeSecs, cpAcct=cpAcct, ccMfgBiasCurrent=ccMfgBiasCurrent, sysHErrFreeSecs=sysHErrFreeSecs, cpCCntrTable=cpCCntrTable, ocm4gLink2LinkName=ocm4gLink2LinkName, rpsmFWName=rpsmFWName, ocm2PortEntry=ocm2PortEntry, oscTable=oscTable, ocm4gConnSlot=ocm4gConnSlot, oetPmLinkEntry=oetPmLinkEntry, fc8gNumber=fc8gNumber, ccBackpackTxITUNumber=ccBackpackTxITUNumber, elmntName=elmntName, mcmPortCCntrLESs=mcmPortCCntrLESs, topologyDiscover=topologyDiscover, RedundancyMode=RedundancyMode, uobRflThreshold=uobRflThreshold, csimIntervalLocation=csimIntervalLocation, mcmPortCurrSESs=mcmPortCurrSESs, dmmPmEntry=dmmPmEntry, mcmescLinkHIntervalNumber=mcmescLinkHIntervalNumber, ccHHistMode=ccHHistMode, ocm10gfPerfLocation=ocm10gfPerfLocation, dmmPerfShelf=dmmPerfShelf, muxEndItu=muxEndItu, ocm10gfPmLinkTxPwr=ocm10gfPmLinkTxPwr, oetPmPortRxPwr=oetPmPortRxPwr, fnCPerfEntry=fnCPerfEntry, connDemuxPort=connDemuxPort, mcmSignalDetect=mcmSignalDetect, luxNPortTxFault=luxNPortTxFault, ocm2Link1AutoDisable=ocm2Link1AutoDisable, dlFtpEntry=dlFtpEntry, muxHMode=muxHMode, luxNlogonIntruderTrap=luxNlogonIntruderTrap, osamPerfTable=osamPerfTable, fadmHHistMode=fadmHHistMode, luxNSNMPKeepaliveIntervalChanged=luxNSNMPKeepaliveIntervalChanged, cpHHistEntry=cpHHistEntry, oppmAvailTime=oppmAvailTime, rpsmCPerfSlot=rpsmCPerfSlot, mfgNumShelves=mfgNumShelves, mcmPortCurrBESs=mcmPortCurrBESs, oppmCond=oppmCond, osamConnLocation=osamConnLocation, luxNpowerSupplyFailureTrap=luxNpowerSupplyFailureTrap, luxNosamLaserTemperatureStable=luxNosamLaserTemperatureStable, mcmPortCCntrCardShelf=mcmPortCCntrCardShelf, upsmPortCardSlot=upsmPortCardSlot, ocm10gfLinkName=ocm10gfLinkName, dmmPmRxPower=dmmPmRxPower, psPerfEntry=psPerfEntry, ocm4gPmNumCpeRxIntervals=ocm4gPmNumCpeRxIntervals, luxNRadiusServerModifiedTrap=luxNRadiusServerModifiedTrap, muxConnSystemName=muxConnSystemName, dmmConnSlot=dmmConnSlot, fadmPortTable=fadmPortTable, mcmLastBootTime=mcmLastBootTime, rsmProtectionPower=rsmProtectionPower, psHMode=psHMode, muxPerfLocation=muxPerfLocation, voadmPortToleranceUpperBound=voadmPortToleranceUpperBound, mcmescLinkHIntervalRdpErr=mcmescLinkHIntervalRdpErr, mcmescSelfTestShelf=mcmescSelfTestShelf, rpsmPortType=rpsmPortType, oppmCardShelf=oppmCardShelf, luxNRadiusServerAddedTrap=luxNRadiusServerAddedTrap, psCond=psCond, dmmCntrLocation=dmmCntrLocation, tapLastBootTime=tapLastBootTime, mcmPortHIntervalPort=mcmPortHIntervalPort, luxNremoteLoopbackEnabledTrap=luxNremoteLoopbackEnabledTrap, ccSerialNum=ccSerialNum, osam2PerfPump1BFDPower=osam2PerfPump1BFDPower, csimCurrentShelf=csimCurrentShelf, mcmescPortHIntervalCrcErr=mcmescPortHIntervalCrcErr, osamConnCardType=osamConnCardType, oetPortApplyChanges=oetPortApplyChanges, mcmCTotBadTrans=mcmCTotBadTrans, luxNuserLevelModifiedTrap=luxNuserLevelModifiedTrap, dmmBadPktRcvd=dmmBadPktRcvd, oetPortSfpSerialNumber=oetPortSfpSerialNumber, oppmMfgDate=oppmMfgDate, luxNcpAuthenticationErrorTrap=luxNcpAuthenticationErrorTrap, voadmNumPorts=voadmNumPorts, osamPerfLastBootTime=osamPerfLastBootTime, ccCardShelf=ccCardShelf, mcmescHistTable=mcmescHistTable, tapCardShelf=tapCardShelf, osam2PerfAttenuation=osam2PerfAttenuation, cpAvailTime=cpAvailTime, cpSNMPTrapHostPort4=cpSNMPTrapHostPort4, oetNumEvents=oetNumEvents, dlOSRelDate=dlOSRelDate, oppmConnSlot=oppmConnSlot, oppmConnCardType=oppmConnCardType, fadmEntry=fadmEntry, ocm2PortTxState=ocm2PortTxState, imnDynamicRoutingTable=imnDynamicRoutingTable, dmmCntrTable=dmmCntrTable, rpsmAvailTime=rpsmAvailTime, mcmHTotPktRcvd=mcmHTotPktRcvd, rsmCPerfTable=rsmCPerfTable, mcmescDaughterBoard1SerialNum=mcmescDaughterBoard1SerialNum, sysExtAlarmInputEntry=sysExtAlarmInputEntry, alarmTag=alarmTag, ccCAvailTime=ccCAvailTime, dmmBytesSent=dmmBytesSent, dlHLongestTime=dlHLongestTime, connCpeTxMcmescShelf=connCpeTxMcmescShelf, mcmconnMuxPort=mcmconnMuxPort, fadmHAvailTime=fadmHAvailTime, oetLinkProtocol=oetLinkProtocol, ocm10gfConnCardType=ocm10gfConnCardType, luxNModuleResetTrap=luxNModuleResetTrap, upsmCAvailTime=upsmCAvailTime, upsmNumPorts=upsmNumPorts, luxNhttpDisabledTrap=luxNhttpDisabledTrap, voadmPortMinChanInputPower=voadmPortMinChanInputPower, cpHttp=cpHttp, rpsmPerf=rpsmPerf, ringPath1RemoteIP=ringPath1RemoteIP, uobPmPumpTemp=uobPmPumpTemp, ccLinkIWMStatus=ccLinkIWMStatus, rpsmConnSlot=rpsmConnSlot, ocm10gfPmLinkErredSeconds=ocm10gfPmLinkErredSeconds, topologyNearEndCardPortIndex=topologyNearEndCardPortIndex, ccMsgsDlvrd=ccMsgsDlvrd, oppmSubDivTable=oppmSubDivTable, rtdmPerfShelf=rtdmPerfShelf, mcmescSelfTestLocation=mcmescSelfTestLocation, upsmSubDivDescr=upsmSubDivDescr, psCPerfStatus=psCPerfStatus, luxNunknownCardTypeDetectedTrap=luxNunknownCardTypeDetectedTrap, dlPreQualResult=dlPreQualResult, muxNumPorts=muxNumPorts, fadmROMSize=fadmROMSize, cpCPerfEntry=cpCPerfEntry, muxPortIndex=muxPortIndex, luxNosamFiberConnected=luxNosamFiberConnected, mcmescConnRxOcmShelfSlot=mcmescConnRxOcmShelfSlot, rpsmHErrFreeSecs=rpsmHErrFreeSecs, ocm10gfConnCardLocation=ocm10gfConnCardLocation, ocm2SetState=ocm2SetState, oetPmLinkFecBlock=oetPmLinkFecBlock, oetPmPortTxPwr=oetPmPortTxPwr, mcmPortHIntervalNumber=mcmPortHIntervalNumber, dmmConnShelf=dmmConnShelf, sysAlarmAutoCutoff=sysAlarmAutoCutoff, mcmPortCCntrTable=mcmPortCCntrTable, tapPerf=tapPerf, cpMfgDate=cpMfgDate, diagTSlot=diagTSlot, luxNpwrFeedOverVoltageRecoveryTrap=luxNpwrFeedOverVoltageRecoveryTrap, rpsmSetState=rpsmSetState, luxNcolorsimEnabledTrap=luxNcolorsimEnabledTrap, ccApc=ccApc, oetLinkTable=oetLinkTable, luxNpowerSupplyNotPresentTrap=luxNpowerSupplyNotPresentTrap, voadmPerfStatus=voadmPerfStatus, luxNAisTransmitted=luxNAisTransmitted, mcmSerialNum=mcmSerialNum, secElementTable=secElementTable, upsmHHistEntry=upsmHHistEntry, ocm2PerfShelf=ocm2PerfShelf, oetLinkLocation=oetLinkLocation, ocm4gHist=ocm4gHist, rsmPerfEntry=rsmPerfEntry, mcmHEcbAllocFail=mcmHEcbAllocFail, cpHSNMPCmdsRcvd=cpHSNMPCmdsRcvd, osamCleiNum=osamCleiNum, cpEntry=cpEntry, mcmFpgaVersionID=mcmFpgaVersionID, luxNlaserPowerOutOfRangeTrap=luxNlaserPowerOutOfRangeTrap, ccTable=ccTable, mcmescLinkErrEventThreshold=mcmescLinkErrEventThreshold, zmsConfigSync=zmsConfigSync, oscMfgDate=oscMfgDate, acctCCUpTime=acctCCUpTime, dmmNumber=dmmNumber, secElmntGrpTable=secElmntGrpTable, routing=routing, voadmPortAvgInsertLoss=voadmPortAvgInsertLoss, muxPerfEntry=muxPerfEntry, psVoltageLevel5pt1Volt=psVoltageLevel5pt1Volt, mcmCClockDiv=mcmCClockDiv, mcmescLinkSelfTestResultEntry=mcmescLinkSelfTestResultEntry, osamSubDivEntry=osamSubDivEntry, mcmMfgModulation=mcmMfgModulation, rsmCPerfLocation=rsmCPerfLocation, uobHHistEntry=uobHHistEntry, mcmescCntrTable=mcmescCntrTable, dmmCardLocation=dmmCardLocation, ocm10gfPmEntry=ocm10gfPmEntry, mcmCSignalStrength=mcmCSignalStrength, luxNCpeOutOfFrameResolved=luxNCpeOutOfFrameResolved, HashedPasswd=HashedPasswd, sysDelCfgDb=sysDelCfgDb, rsdmTable=rsdmTable, mcmescSelfTest=mcmescSelfTest, voadm=voadm, rsmAvailTime=rsmAvailTime, osamCardSlot=osamCardSlot, voadmPortAvgExpressLoss=voadmPortAvgExpressLoss, secNumGroups=secNumGroups, oppmConnLocation=oppmConnLocation, oetPmLinkShelf=oetPmLinkShelf, luxNcoldStartTrap=luxNcoldStartTrap, tapHHistLocation=tapHHistLocation, ccBytesSent=ccBytesSent, dmmPerfStatus=dmmPerfStatus, mcmCTotPktRcvd=mcmCTotPktRcvd, rpsmLinkEastStatus=rpsmLinkEastStatus, sysAvailTime=sysAvailTime, muxPortTapRatio=muxPortTapRatio, usrLogDescr=usrLogDescr, mcmCardSlot=mcmCardSlot, mcmBandwidth=mcmBandwidth, osam2NoiseFigure=osam2NoiseFigure, ocm4gPerfEntry=ocm4gPerfEntry, rpsmCPerfState=rpsmCPerfState, dmmConnCardShelf=dmmConnCardShelf, cpBytesRcvd=cpBytesRcvd, sysAlarmCtrl=sysAlarmCtrl, imnDynamicRoutingEntry=imnDynamicRoutingEntry, mcmescLinkHIntervalDuration=mcmescLinkHIntervalDuration, fnPerfEntry=fnPerfEntry, ocm4gPortWavelength=ocm4gPortWavelength, dmmPmTable=dmmPmTable, ocm10gfPmTable=ocm10gfPmTable, ocm2CardLocation=ocm2CardLocation, mcmCEcbAllocFail=mcmCEcbAllocFail)
mibBuilder.exportSymbols("LUXN-MIB", eveDateTime=eveDateTime, mcmTimingPriority=mcmTimingPriority, luxNberModerateThresholdExceededNormal=luxNberModerateThresholdExceededNormal, oetPortVlanId=oetPortVlanId, mcmBytesRcvd=mcmBytesRcvd, csimCurrentDateTime=csimCurrentDateTime, upsmPerfShelf=upsmPerfShelf, mcmPortHTotalLocation=mcmPortHTotalLocation, luxNTrapHostAutoUpdateDisabled=luxNTrapHostAutoUpdateDisabled, rsdmRxInsertionLoss=rsdmRxInsertionLoss, dmmHAvailTime=dmmHAvailTime, mcmescLinkClrErrCount=mcmescLinkClrErrCount, tapHWName=tapHWName, mcmApc=mcmApc, uobLosThreshold=uobLosThreshold, sysModupdRmtStation=sysModupdRmtStation, sysAddRoute=sysAddRoute, cpHHistMode=cpHHistMode, cpSetState=cpSetState, ocm4gPmCpeTxErredSeconds=ocm4gPmCpeTxErredSeconds, fc8gTable=fc8gTable, connDemuxChassis=connDemuxChassis, mcmPortCCntrDMs=mcmPortCCntrDMs, rsdmModelNum=rsdmModelNum, oetPmLinkFecCorrectedByte=oetPmLinkFecCorrectedByte, oetPmPortNumIntervals=oetPmPortNumIntervals, uobHLastBootTime=uobHLastBootTime, oppmHLastBootTime=oppmHLastBootTime, ocm4gHMode=ocm4gHMode, oetPerf=oetPerf, rtdmNumEvents=rtdmNumEvents, eveDeleteLog=eveDeleteLog, mcmescPortHIntervalNumber=mcmescPortHIntervalNumber, csimHistIntervalEntry=csimHistIntervalEntry, dmmNumEvents=dmmNumEvents, oppmNumber=oppmNumber, voadmCardShelf=voadmCardShelf, ocm10gfHHistEntry=ocm10gfHHistEntry, ccCApc=ccCApc, luxNprotectionLinkFailureResolvedTrap=luxNprotectionLinkFailureResolvedTrap, voadmHLastBootTime=voadmHLastBootTime, ccHAvailTime=ccHAvailTime, alarmLogTable=alarmLogTable, luxNosamDualAprSensorFailed=luxNosamDualAprSensorFailed, mcmPerfStatus=mcmPerfStatus, ccCSignalStrength=ccCSignalStrength, fadmSubDivTable=fadmSubDivTable, ccHTotPktSent=ccHTotPktSent, oppmConnShelf=oppmConnShelf, ocm2HwVersionID=ocm2HwVersionID, usrNumLogs=usrNumLogs, dmmHHistLocation=dmmHHistLocation, csimHist=csimHist, oscHwVersionID=oscHwVersionID, mcmescHNumEvents=mcmescHNumEvents, ChassisType=ChassisType, cpClearCntrs=cpClearCntrs, rsmPerf=rsmPerf, oetPmLinkTxTemp=oetPmLinkTxTemp, upsmConnCardType=upsmConnCardType, dmmPerfTable=dmmPerfTable, tapNumber=tapNumber, eveLastEntryDateTime=eveLastEntryDateTime, tapHist=tapHist, zmsConfigSyncAction=zmsConfigSyncAction, mcmHBytesRcvd=mcmHBytesRcvd, sysCAvailTime=sysCAvailTime, oppmROMSize=oppmROMSize, rsdmPortCardShelf=rsdmPortCardShelf, ocm2AdminState=ocm2AdminState, dmmHwVersionID=dmmHwVersionID, upsmProtectionPower=upsmProtectionPower, mcmescHBadPktRcvd=mcmescHBadPktRcvd, mcmescPortHTotalPort=mcmescPortHTotalPort, rsdmCond=rsdmCond, ocm2TotPktRcvd=ocm2TotPktRcvd, mcmPortCurrSEFSs=mcmPortCurrSEFSs, rsdmHWVersionID=rsdmHWVersionID, ocm10gfPortEntry=ocm10gfPortEntry, fc8gLink1DataRate=fc8gLink1DataRate, muxCType=muxCType, upsmCPerfSlot=upsmCPerfSlot, dmmCntrShelf=dmmCntrShelf, ocm2ConnCardPortType=ocm2ConnCardPortType, rtdmSubDivOffset=rtdmSubDivOffset, rsmCardShelf=rsmCardShelf, mcmSignalStrength=mcmSignalStrength, rpsmSubDivIndex=rpsmSubDivIndex, mcmescPortHTotalLoss=mcmescPortHTotalLoss, ocm2HErrFreeSecs=ocm2HErrFreeSecs, luxNuserDeletedTrap=luxNuserDeletedTrap, alarmNumEvents=alarmNumEvents, luxNnearendPortLoopbackDisabledTrap=luxNnearendPortLoopbackDisabledTrap, luxNmoduleUpdateSuccessTrap=luxNmoduleUpdateSuccessTrap, mcmescPortHIntervalLoss=mcmescPortHIntervalLoss, topologyNearEndCardType=topologyNearEndCardType, upsmSubDivOffset=upsmSubDivOffset, oetPmLinkFecUncorrectedByte=oetPmLinkFecUncorrectedByte, osamConnSystemName=osamConnSystemName, fadmITUNumber2=fadmITUNumber2, dlLongestSize=dlLongestSize, oetPmLinkLocation=oetPmLinkLocation, alarmFirstDateTime=alarmFirstDateTime, cpSubDivIndex=cpSubDivIndex, oscHErrFreeSecs=oscHErrFreeSecs, oetApplyChanges=oetApplyChanges, rsmCAvailTime=rsmCAvailTime, rtdmSetState=rtdmSetState, osamConnSlot=osamConnSlot, dlOkDownloads=dlOkDownloads, muxHErrFreeSecs=muxHErrFreeSecs, mcmescTestSequence=mcmescTestSequence, EntityName=EntityName, ocm4gMsgsDlvrd=ocm4gMsgsDlvrd, connDemuxShelf=connDemuxShelf, upsmLinkBStatus=upsmLinkBStatus, mcmescConnTxOcmShelf=mcmescConnTxOcmShelf, oppmHist=oppmHist, mcmPortHTotalShelf=mcmPortHTotalShelf, osamCntrEntry=osamCntrEntry, osamOperationMode=osamOperationMode, uobPerf=uobPerf, dlFtpIp=dlFtpIp, oetLinkConfigInProgress=oetLinkConfigInProgress, mcmPortCurrLCVs=mcmPortCurrLCVs, muxPortEntry=muxPortEntry, mcmPortHIntervalFEs=mcmPortHIntervalFEs, oetFwVersionID=oetFwVersionID, oscPmLocation=oscPmLocation, radiusTimeout=radiusTimeout, fadmChannelsPerBand=fadmChannelsPerBand, oscPerf=oscPerf, dlFilename=dlFilename, mcmescPortIndex=mcmescPortIndex, mcmescPortSfpSerialNum=mcmescPortSfpSerialNum, ocm4gPortIndex=ocm4gPortIndex, ccCSignalDetect=ccCSignalDetect, rsmCNumEvents=rsmCNumEvents, mcmPortHIntervalDMs=mcmPortHIntervalDMs, upsmSerialNum=upsmSerialNum, rsdmPerfSlot=rsdmPerfSlot, ocm2HHistLocation=ocm2HHistLocation, ocm2PortShelf=ocm2PortShelf, ccCPerfSlot=ccCPerfSlot, topologyFarEndNodeCardPortIndex=topologyFarEndNodeCardPortIndex, oppmSubDivIndex=oppmSubDivIndex, sysModupdCardtype=sysModupdCardtype, ocm4gPmNumCpeTxIntervals=ocm4gPmNumCpeTxIntervals, ccBackpackRxITUNumber=ccBackpackRxITUNumber, rsdmSerialNum=rsdmSerialNum, rtdmSerialNum=rtdmSerialNum, rsdmLastBootTime=rsdmLastBootTime, sshMaxSessions=sshMaxSessions, dmmHHistMode=dmmHHistMode, luxNBitError10Em4=luxNBitError10Em4, ccCPerfLocation=ccCPerfLocation, fc8gPortTxReach=fc8gPortTxReach, ocm4gTable=ocm4gTable, luxNftpCompletedTrap=luxNftpCompletedTrap, uobCardShelf=uobCardShelf, ocm2PmLinkTxPwr=ocm2PmLinkTxPwr, mcmescSelfTestStart=mcmescSelfTestStart, tapHHistType=tapHHistType, eveTrapThreshold=eveTrapThreshold, mcmPortHIntervalLESs=mcmPortHIntervalLESs, mcmCardShelf=mcmCardShelf, mcmescConnMuxShelf=mcmescConnMuxShelf, osamPortCardSlot=osamPortCardSlot, radiusAddServer=radiusAddServer, rsdmErrFreeSecs=rsdmErrFreeSecs, luxNlossOfTimingTrap=luxNlossOfTimingTrap, topologyNearEndCardSlot=topologyNearEndCardSlot, rsmConnSlot=rsmConnSlot, uobFpgaRev=uobFpgaRev, rsdmModelType=rsdmModelType, acctmcmescTable=acctmcmescTable, luxNtimeZoneChangedTrap=luxNtimeZoneChangedTrap, luxNberModerateThresholdExceeded=luxNberModerateThresholdExceeded, mcmescSerialNum=mcmescSerialNum, sysSwitchAll=sysSwitchAll, oscPerfSlot=oscPerfSlot, cpCond=cpCond, rtdmNumSubDiv=rtdmNumSubDiv, rtdmCardShelf=rtdmCardShelf, ocm10gfHHistTable=ocm10gfHHistTable, mcmescPortCurrEntry=mcmescPortCurrEntry, ocm4gSetState=ocm4gSetState, dlFtpPasswd=dlFtpPasswd, oetPmLinkTxBytes=oetPmLinkTxBytes, userLog=userLog, fnCPerfState=fnCPerfState, rtdmCPerfEntry=rtdmCPerfEntry, ocm10gfPortLocation=ocm10gfPortLocation, voadmHHistTable=voadmHHistTable, luxNosamBiasCurrentNormal=luxNosamBiasCurrentNormal, luxNCpeXfpNotAuthorized=luxNCpeXfpNotAuthorized, ocm4gPmLinkRxErrors=ocm4gPmLinkRxErrors, luxNTrapHostConfigChangeTrap=luxNTrapHostConfigChangeTrap, ccBootPromVer=ccBootPromVer, diagTSetMode=diagTSetMode, mcmHMode=mcmHMode, rsdmSubDivTable=rsdmSubDivTable, ccCntrSlot=ccCntrSlot, tapPerfEntry=tapPerfEntry, muxROMSize=muxROMSize, oetPmLinkRxFcsErrs=oetPmLinkRxFcsErrs, upsmCardLocation=upsmCardLocation, oetPortTxState=oetPortTxState, upsmCErrFreeSecs=upsmCErrFreeSecs, cpModelNum=cpModelNum, luxNpwrFeedOKTrap=luxNpwrFeedOKTrap, upsmLinkBState=upsmLinkBState, dmmHHistShelf=dmmHHistShelf, mcmescPortHTotalTable=mcmescPortHTotalTable, uobHist=uobHist, ccCBytesSent=ccCBytesSent, rsmOpticsMfgDate=rsmOpticsMfgDate, ocm10gfPortXfpSerialNumber=ocm10gfPortXfpSerialNumber, mcmescPerfSlot=mcmescPerfSlot, rtdmErrFreeSecs=rtdmErrFreeSecs, oppmPortCardShelf=oppmPortCardShelf, uobHHistShelf=uobHHistShelf, ccTotBadTrans=ccTotBadTrans, upsmCond=upsmCond, csimIntervalValidData=csimIntervalValidData, fadmPerfLocation=fadmPerfLocation, fnCPerfID=fnCPerfID, ocm2FwVersionID=ocm2FwVersionID, ocm2PmCpeRxErredSeconds=ocm2PmCpeRxErredSeconds, mcmescLinkName=mcmescLinkName, rpsmHAvailTime=rpsmHAvailTime, luxNXfpPresent=luxNXfpPresent, muxHWName=muxHWName, psPerfState=psPerfState, mcmMfgIwmModulation=mcmMfgIwmModulation, csimHistEntry=csimHistEntry, Timezone=Timezone, fadmPerfState=fadmPerfState, ocm4gConnCardShelf=ocm4gConnCardShelf, fadmCPerfStatus=fadmCPerfStatus, dlOSEntry=dlOSEntry, csimLocation=csimLocation, mcmHCntrSlot=mcmHCntrSlot, dmmPortAutoDisable=dmmPortAutoDisable, ccHist=ccHist, sysDeleteRoute=sysDeleteRoute, rpsmSerialNum=rpsmSerialNum, mcmescPortHIntervalRdpErr=mcmescPortHIntervalRdpErr, oppmPerfLocation=oppmPerfLocation, secRole=secRole, oscPerfLocation=oscPerfLocation, ocm2HistEntry=ocm2HistEntry, dlPreQualEntry=dlPreQualEntry, sysExtAlarmInputTable=sysExtAlarmInputTable)
mibBuilder.exportSymbols("LUXN-MIB", oetPerfEntry=oetPerfEntry, rpsmCCounterFlag=rpsmCCounterFlag, systemConfig=systemConfig, ocm4gPerfLocation=ocm4gPerfLocation, dmmSerialNum=dmmSerialNum, luxNmpmRedundancySwitchOverTrap=luxNmpmRedundancySwitchOverTrap, rtdmCardName=rtdmCardName, mcmescPortHTotalCardShelf=mcmescPortHTotalCardShelf, rtdmPortCardShelf=rtdmPortCardShelf, sysLastBootTime=sysLastBootTime, ocm2ErrFreeSecs=ocm2ErrFreeSecs, diagTShelf=diagTShelf, oppmMarginForSwitch=oppmMarginForSwitch, fadmCleiNum=fadmCleiNum, cpHEcbAllocFail=cpHEcbAllocFail, connTxNonMuxDmuxCardType=connTxNonMuxDmuxCardType, uobPmLocation=uobPmLocation, mcmPortHIntervalEntry=mcmPortHIntervalEntry, osamSubDivTable=osamSubDivTable, oscHHistTable=oscHHistTable, rtdmMonEastInsertionLoss=rtdmMonEastInsertionLoss, luxNupsrProtectionSwitchOverDest=luxNupsrProtectionSwitchOverDest, osam2PerfPump2BFDPower=osam2PerfPump2BFDPower, mcmPortHIntervalSEFSs=mcmPortHIntervalSEFSs, csimHistIntervalTable=csimHistIntervalTable, ocm10gfCardLocation=ocm10gfCardLocation, mcmescSelfTestSlot=mcmescSelfTestSlot, upsmPortCardShelf=upsmPortCardShelf, sysSwitchByPathId=sysSwitchByPathId, osamNumEvents=osamNumEvents, ocm2AvailTime=ocm2AvailTime, ccNumPorts=ccNumPorts, ccTemperature=ccTemperature, oetLinkSlot=oetLinkSlot, voadmHNumEvents=voadmHNumEvents, mfgDfltPasswd=mfgDfltPasswd, muxName=muxName, ccFWVersionID=ccFWVersionID, fc8gPortTxState=fc8gPortTxState, uobHHistSlot=uobHHistSlot, mcmescCpeErrEventThreshold=mcmescCpeErrEventThreshold, ocm4gPortSfpSerialNumber=ocm4gPortSfpSerialNumber, rpsmCardSlot=rpsmCardSlot, cpLogServer3=cpLogServer3, diagModeTable=diagModeTable, oscFwDate=oscFwDate, imnStaticRouteIpMask=imnStaticRouteIpMask, mcmescClearCntrs=mcmescClearCntrs, upsmConnLocation=upsmConnLocation)
