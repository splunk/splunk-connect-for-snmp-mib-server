#
# PySNMP MIB module HP-UNIX (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-UNIX
# Produced by pysmi-0.3.4 at Mon Apr 29 19:24:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, Bits, Unsigned32, enterprises, NotificationType, IpAddress, iso, ModuleIdentity, Gauge32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "Bits", "Unsigned32", "enterprises", "NotificationType", "IpAddress", "iso", "ModuleIdentity", "Gauge32", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3))
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 4))
icmp = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 7))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 13))
openView = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 17))
general = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 1))
hpux = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 2))
hpsun = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 10))
sparc = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 10, 1))
computerSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1))
fileSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2))
processes = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4))
cluster = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 5))
ieee8023Mac = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 4, 1))
trap = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 13, 1))
snmpdConf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 13, 2))
authfail = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 13, 4))
openViewTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 17, 2))
hp386 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 8))
hp9000s300 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 2, 2))
hp9000s800 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 2, 3))
hp9000s700 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 2, 5))
hpOpenView = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 17, 1))
sun4 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 10, 1, 1))
sun5 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 10, 1, 2))
computerSystemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemUpTime.setStatus('mandatory')
computerSystemUsers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemUsers.setStatus('mandatory')
computerSystemAvgJobs1 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemAvgJobs1.setStatus('mandatory')
computerSystemAvgJobs5 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemAvgJobs5.setStatus('mandatory')
computerSystemAvgJobs15 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemAvgJobs15.setStatus('mandatory')
computerSystemMaxProc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemMaxProc.setStatus('mandatory')
computerSystemFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemFreeMemory.setStatus('mandatory')
computerSystemPhysMemory = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemPhysMemory.setStatus('mandatory')
computerSystemMaxUserMem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemMaxUserMem.setStatus('mandatory')
computerSystemSwapConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemSwapConfig.setStatus('mandatory')
computerSystemEnabledSwap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemEnabledSwap.setStatus('mandatory')
computerSystemFreeSwap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemFreeSwap.setStatus('mandatory')
computerSystemUserCPU = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemUserCPU.setStatus('mandatory')
computerSystemSysCPU = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemSysCPU.setStatus('mandatory')
computerSystemIdleCPU = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemIdleCPU.setStatus('mandatory')
computerSystemNiceCPU = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: computerSystemNiceCPU.setStatus('mandatory')
fileSystemMounted = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemMounted.setStatus('mandatory')
fileSystemTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 2), )
if mibBuilder.loadTexts: fileSystemTable.setStatus('mandatory')
fileSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 2, 1), ).setIndexNames((0, "HP-UNIX", "fileSystemID1"), (0, "HP-UNIX", "fileSystemID2"))
if mibBuilder.loadTexts: fileSystemEntry.setStatus('mandatory')
fileSystemID1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemID1.setStatus('mandatory')
fileSystemID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemID2.setStatus('mandatory')
fileSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemName.setStatus('mandatory')
fileSystemBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemBlock.setStatus('mandatory')
fileSystemBfree = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemBfree.setStatus('mandatory')
fileSystemBavail = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemBavail.setStatus('mandatory')
fileSystemBsize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemBsize.setStatus('mandatory')
fileSystemFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemFiles.setStatus('mandatory')
fileSystemFfree = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemFfree.setStatus('mandatory')
fileSystemDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSystemDir.setStatus('mandatory')
processNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processNum.setStatus('mandatory')
processTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2), )
if mibBuilder.loadTexts: processTable.setStatus('mandatory')
processEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1), ).setIndexNames((0, "HP-UNIX", "processPID"))
if mibBuilder.loadTexts: processEntry.setStatus('mandatory')
processPID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPID.setStatus('mandatory')
processIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processIdx.setStatus('mandatory')
processUID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processUID.setStatus('mandatory')
processPPID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPPID.setStatus('mandatory')
processDsize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processDsize.setStatus('mandatory')
processTsize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processTsize.setStatus('mandatory')
processSsize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processSsize.setStatus('mandatory')
processNice = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processNice.setStatus('mandatory')
processMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processMajor.setStatus('mandatory')
processMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processMinor.setStatus('mandatory')
processPgrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPgrp.setStatus('mandatory')
processPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPrio.setStatus('mandatory')
processAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processAddr.setStatus('mandatory')
processCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processCPU.setStatus('mandatory')
processUtime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processUtime.setStatus('mandatory')
processStime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processStime.setStatus('mandatory')
processStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 17), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processStart.setStatus('mandatory')
processFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("incore", 1), ("sys", 2), ("locked", 4), ("trace", 8), ("trace2", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processFlags.setStatus('mandatory')
processStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sleep", 1), ("run", 2), ("stop", 3), ("zombie", 4), ("other", 5), ("idle", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: processStatus.setStatus('mandatory')
processWchan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processWchan.setStatus('mandatory')
processProcNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processProcNum.setStatus('mandatory')
processCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processCmd.setStatus('mandatory')
processTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processTime.setStatus('mandatory')
processCPUticks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processCPUticks.setStatus('mandatory')
processCPUticksTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processCPUticksTotal.setStatus('mandatory')
processFss = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processFss.setStatus('mandatory')
processPctCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processPctCPU.setStatus('mandatory')
processRssize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processRssize.setStatus('mandatory')
processSUID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processSUID.setStatus('mandatory')
processUname = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processUname.setStatus('mandatory')
processTTY = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 4, 2, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processTTY.setStatus('mandatory')
ieee8023MacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1), )
if mibBuilder.loadTexts: ieee8023MacTable.setStatus('mandatory')
ieee8023MacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1), ).setIndexNames((0, "HP-UNIX", "ieee8023MacIndex"))
if mibBuilder.loadTexts: ieee8023MacEntry.setStatus('mandatory')
ieee8023MacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacIndex.setStatus('mandatory')
ieee8023MacTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacTransmitted.setStatus('mandatory')
ieee8023MacNotTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacNotTransmitted.setStatus('mandatory')
ieee8023MacDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacDeferred.setStatus('mandatory')
ieee8023MacCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacCollisions.setStatus('mandatory')
ieee8023MacSingleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacSingleCollisions.setStatus('mandatory')
ieee8023MacMultipleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacMultipleCollisions.setStatus('mandatory')
ieee8023MacExcessCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacExcessCollisions.setStatus('mandatory')
ieee8023MacLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacLateCollisions.setStatus('mandatory')
ieee8023MacCarrierLostErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacCarrierLostErrors.setStatus('mandatory')
ieee8023MacNoHeartBeatErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacNoHeartBeatErrors.setStatus('mandatory')
ieee8023MacFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacFramesReceived.setStatus('mandatory')
ieee8023MacUndeliverableFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacUndeliverableFramesReceived.setStatus('mandatory')
ieee8023MacCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacCRCErrors.setStatus('mandatory')
ieee8023MacAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacAlignmentErrors.setStatus('mandatory')
ieee8023MacResourceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacResourceErrors.setStatus('mandatory')
ieee8023MacControlFieldErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacControlFieldErrors.setStatus('mandatory')
ieee8023MacUnknownProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacUnknownProtocolErrors.setStatus('mandatory')
ieee8023MacMulticastsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 4, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8023MacMulticastsAccepted.setStatus('mandatory')
icmpEchoReq = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpEchoReq.setStatus('mandatory')
icmpEchoReqTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 7, 2), )
if mibBuilder.loadTexts: icmpEchoReqTable.setStatus('mandatory')
icmpEchoReqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 7, 2, 1), ).setIndexNames((0, "HP-UNIX", "icmpEchoReqPktSize"), (0, "HP-UNIX", "icmpEchoReqTimeOut"), (0, "HP-UNIX", "icmpEchoReqHost"))
if mibBuilder.loadTexts: icmpEchoReqEntry.setStatus('mandatory')
icmpEchoReqTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpEchoReqTime.setStatus('mandatory')
icmpEchoReqPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 7, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: icmpEchoReqPktSize.setStatus('mandatory')
icmpEchoReqTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 7, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: icmpEchoReqTimeOut.setStatus('mandatory')
icmpEchoReqHost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 7, 2, 1, 4), IpAddress())
if mibBuilder.loadTexts: icmpEchoReqHost.setStatus('mandatory')
trapDestinationNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 13, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDestinationNum.setStatus('mandatory')
trapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 13, 1, 2), )
if mibBuilder.loadTexts: trapDestinationTable.setStatus('mandatory')
trapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 13, 1, 2, 1), ).setIndexNames((0, "HP-UNIX", "trapDestination"))
if mibBuilder.loadTexts: trapDestinationEntry.setStatus('mandatory')
trapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 13, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestination.setStatus('mandatory')
snmpdConfRespond = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 13, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdConfRespond.setStatus('mandatory')
snmpdReConfigure = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 13, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdReConfigure.setStatus('mandatory')
snmpdFlag = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 13, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("removetrap", 1), ("netwareproxy", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpdFlag.setStatus('mandatory')
snmpdLogMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 13, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdLogMask.setStatus('mandatory')
snmpdVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 13, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpdVersion.setStatus('mandatory')
snmpdStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 13, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpdStatus.setStatus('mandatory')
snmpdSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 13, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpdSize.setStatus('mandatory')
snmpdWhatString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 13, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpdWhatString.setStatus('mandatory')
isClustered = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standalone", 1), ("rootserver", 2), ("cnode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: isClustered.setStatus('mandatory')
clusterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 5, 2), )
if mibBuilder.loadTexts: clusterTable.setStatus('mandatory')
clusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 5, 2, 1), ).setIndexNames((0, "HP-UNIX", "clusterID"))
if mibBuilder.loadTexts: clusterEntry.setStatus('mandatory')
clusterID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterID.setStatus('mandatory')
clusterMachineID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 5, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMachineID.setStatus('mandatory')
clusterType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterType.setStatus('mandatory')
clusterCnodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCnodeName.setStatus('mandatory')
clusterSwapServingCnode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterSwapServingCnode.setStatus('mandatory')
clusterKcsp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterKcsp.setStatus('mandatory')
clusterCnodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 5, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCnodeAddress.setStatus('mandatory')
clusterCnodeID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCnodeID.setStatus('mandatory')
authFailTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 13, 4, 1), )
if mibBuilder.loadTexts: authFailTable.setStatus('mandatory')
authFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 13, 4, 1, 1), ).setIndexNames((0, "HP-UNIX", "authIpAddress"))
if mibBuilder.loadTexts: authFailEntry.setStatus('mandatory')
authIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 13, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authIpAddress.setStatus('mandatory')
authTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 13, 4, 1, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authTime.setStatus('mandatory')
authCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 13, 4, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authCommunityName.setStatus('mandatory')
openViewSourceId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 17, 2, 1), Integer32())
if mibBuilder.loadTexts: openViewSourceId.setStatus('mandatory')
openViewSourceName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 17, 2, 2), OctetString())
if mibBuilder.loadTexts: openViewSourceName.setStatus('mandatory')
openViewObjectId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 17, 2, 3), OctetString())
if mibBuilder.loadTexts: openViewObjectId.setStatus('mandatory')
openViewData = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 17, 2, 4), OctetString())
if mibBuilder.loadTexts: openViewData.setStatus('mandatory')
openViewSeverity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 17, 2, 5), OctetString())
if mibBuilder.loadTexts: openViewSeverity.setStatus('mandatory')
openViewCategory = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 17, 2, 6), OctetString())
if mibBuilder.loadTexts: openViewCategory.setStatus('mandatory')
openViewFilter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 17, 2, 7), OctetString())
if mibBuilder.loadTexts: openViewFilter.setStatus('mandatory')
openViewEntity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 17, 2, 8), OctetString())
if mibBuilder.loadTexts: openViewEntity.setStatus('mandatory')
openViewAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 17, 2, 9), OctetString())
if mibBuilder.loadTexts: openViewAddress.setStatus('mandatory')
openViewPid = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 17, 2, 10), OctetString())
if mibBuilder.loadTexts: openViewPid.setStatus('mandatory')
mibBuilder.exportSymbols("HP-UNIX", fileSystemFfree=fileSystemFfree, fileSystemBlock=fileSystemBlock, processPctCPU=processPctCPU, openViewSeverity=openViewSeverity, ieee8023MacTransmitted=ieee8023MacTransmitted, sparc=sparc, computerSystemSysCPU=computerSystemSysCPU, fileSystemID1=fileSystemID1, processTime=processTime, trapDestination=trapDestination, processEntry=processEntry, clusterTable=clusterTable, computerSystem=computerSystem, hpOpenView=hpOpenView, processPgrp=processPgrp, clusterCnodeName=clusterCnodeName, ieee8023MacIndex=ieee8023MacIndex, processProcNum=processProcNum, processCmd=processCmd, clusterKcsp=clusterKcsp, processes=processes, openViewCategory=openViewCategory, trapDestinationTable=trapDestinationTable, computerSystemAvgJobs15=computerSystemAvgJobs15, ieee8023MacTable=ieee8023MacTable, icmpEchoReqTimeOut=icmpEchoReqTimeOut, isClustered=isClustered, processUID=processUID, hp9000s700=hp9000s700, processStime=processStime, openViewSourceId=openViewSourceId, openViewData=openViewData, openViewEntity=openViewEntity, ieee8023MacNotTransmitted=ieee8023MacNotTransmitted, computerSystemIdleCPU=computerSystemIdleCPU, processSsize=processSsize, processIdx=processIdx, snmpdWhatString=snmpdWhatString, processTable=processTable, snmpdSize=snmpdSize, trapDestinationEntry=trapDestinationEntry, ieee8023MacMulticastsAccepted=ieee8023MacMulticastsAccepted, openViewAddress=openViewAddress, fileSystemBsize=fileSystemBsize, processCPUticksTotal=processCPUticksTotal, fileSystemTable=fileSystemTable, icmpEchoReqPktSize=icmpEchoReqPktSize, cluster=cluster, clusterType=clusterType, computerSystemMaxProc=computerSystemMaxProc, ieee8023MacCRCErrors=ieee8023MacCRCErrors, fileSystemMounted=fileSystemMounted, fileSystemFiles=fileSystemFiles, processAddr=processAddr, ieee8023MacSingleCollisions=ieee8023MacSingleCollisions, processPID=processPID, hp9000s800=hp9000s800, general=general, computerSystemUpTime=computerSystemUpTime, openViewFilter=openViewFilter, ieee8023MacFramesReceived=ieee8023MacFramesReceived, ieee8023Mac=ieee8023Mac, sun5=sun5, ieee8023MacDeferred=ieee8023MacDeferred, authIpAddress=authIpAddress, openView=openView, computerSystemAvgJobs1=computerSystemAvgJobs1, icmpEchoReqHost=icmpEchoReqHost, snmpdConf=snmpdConf, processTsize=processTsize, processFss=processFss, computerSystemAvgJobs5=computerSystemAvgJobs5, hp=hp, sun4=sun4, computerSystemMaxUserMem=computerSystemMaxUserMem, processPPID=processPPID, ieee8023MacResourceErrors=ieee8023MacResourceErrors, fileSystemBavail=fileSystemBavail, icmpEchoReqTable=icmpEchoReqTable, icmp=icmp, computerSystemFreeSwap=computerSystemFreeSwap, processWchan=processWchan, snmpdConfRespond=snmpdConfRespond, processNum=processNum, ieee8023MacLateCollisions=ieee8023MacLateCollisions, icmpEchoReqEntry=icmpEchoReqEntry, ieee8023MacCollisions=ieee8023MacCollisions, openViewPid=openViewPid, processStatus=processStatus, snmpdLogMask=snmpdLogMask, fileSystem=fileSystem, fileSystemName=fileSystemName, fileSystemBfree=fileSystemBfree, snmp=snmp, processRssize=processRssize, fileSystemID2=fileSystemID2, ieee8023MacMultipleCollisions=ieee8023MacMultipleCollisions, icmpEchoReq=icmpEchoReq, computerSystemUsers=computerSystemUsers, processMajor=processMajor, icmpEchoReqTime=icmpEchoReqTime, clusterEntry=clusterEntry, fileSystemDir=fileSystemDir, processCPU=processCPU, authCommunityName=authCommunityName, processUname=processUname, processPrio=processPrio, processMinor=processMinor, computerSystemUserCPU=computerSystemUserCPU, processNice=processNice, clusterCnodeID=clusterCnodeID, hp386=hp386, processSUID=processSUID, ieee8023MacExcessCollisions=ieee8023MacExcessCollisions, ieee8023MacNoHeartBeatErrors=ieee8023MacNoHeartBeatErrors, authFailTable=authFailTable, fileSystemEntry=fileSystemEntry, computerSystemPhysMemory=computerSystemPhysMemory, openViewSourceName=openViewSourceName, processUtime=processUtime, computerSystemSwapConfig=computerSystemSwapConfig, interface=interface, snmpdReConfigure=snmpdReConfigure, ieee8023MacUndeliverableFramesReceived=ieee8023MacUndeliverableFramesReceived, snmpdVersion=snmpdVersion, ieee8023MacCarrierLostErrors=ieee8023MacCarrierLostErrors, snmpdFlag=snmpdFlag, nm=nm, trap=trap, processTTY=processTTY, processCPUticks=processCPUticks, ieee8023MacAlignmentErrors=ieee8023MacAlignmentErrors, snmpdStatus=snmpdStatus, computerSystemEnabledSwap=computerSystemEnabledSwap, clusterID=clusterID, clusterCnodeAddress=clusterCnodeAddress, ieee8023MacEntry=ieee8023MacEntry, clusterSwapServingCnode=clusterSwapServingCnode, computerSystemNiceCPU=computerSystemNiceCPU, trapDestinationNum=trapDestinationNum, authfail=authfail, processDsize=processDsize, authFailEntry=authFailEntry, ieee8023MacControlFieldErrors=ieee8023MacControlFieldErrors, processStart=processStart, hp9000s300=hp9000s300, system=system, openViewTrapVars=openViewTrapVars, computerSystemFreeMemory=computerSystemFreeMemory, authTime=authTime, hpux=hpux, processFlags=processFlags, openViewObjectId=openViewObjectId, hpsun=hpsun, clusterMachineID=clusterMachineID, ieee8023MacUnknownProtocolErrors=ieee8023MacUnknownProtocolErrors)
