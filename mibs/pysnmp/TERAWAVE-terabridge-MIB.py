#
# PySNMP MIB module TERAWAVE-terabridge-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-terabridge-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter64, Counter32, Bits, TimeTicks, NotificationType, ModuleIdentity, Unsigned32, MibIdentifier, IpAddress, Gauge32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "Counter32", "Bits", "TimeTicks", "NotificationType", "ModuleIdentity", "Unsigned32", "MibIdentifier", "IpAddress", "Gauge32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
tera1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 3))
teraDot1dStpTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 1), )
if mibBuilder.loadTexts: teraDot1dStpTable.setStatus('mandatory')
teraDot1dStpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "teraStpId"))
if mibBuilder.loadTexts: teraDot1dStpTableEntry.setStatus('mandatory')
teraStpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraStpId.setStatus('mandatory')
teraDot1dStpProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("decLb100", 2), ("ieee8021d", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dStpProtocolSpecification.setStatus('mandatory')
teraDot1dStpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dStpPriority.setStatus('mandatory')
teraDot1dStpTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dStpTimeSinceTopologyChange.setStatus('mandatory')
teraDot1dStpTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dStpTopChanges.setStatus('mandatory')
teraDot1dStpDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dStpDesignatedRoot.setStatus('mandatory')
teraDot1dStpRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dStpRootCost.setStatus('mandatory')
teraDot1dStpRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dStpRootPort.setStatus('mandatory')
teraDot1dStpMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dStpMaxAge.setStatus('mandatory')
teraDot1dStpHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dStpHelloTime.setStatus('mandatory')
teraDot1dStpHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dStpHoldTime.setStatus('mandatory')
teraDot1dStpForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dStpForwardDelay.setStatus('mandatory')
teraDot1dStpBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 13), TimeTicks().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dStpBridgeMaxAge.setStatus('mandatory')
teraDot1dStpBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 14), TimeTicks().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dStpBridgeHelloTime.setStatus('mandatory')
teraDot1dStpBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 15), TimeTicks().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dStpBridgeForwardDelay.setStatus('mandatory')
teraDot1dStpBridgeGroupList = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 16), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dStpBridgeGroupList.setStatus('mandatory')
teraDot1dStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("delete", 2), ("unknown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dStpState.setStatus('mandatory')
teraBridgePVCPortTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 3), )
if mibBuilder.loadTexts: teraBridgePVCPortTable.setStatus('mandatory')
teraBridgePVCPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 3, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: teraBridgePVCPortTableEntry.setStatus('mandatory')
teraBridgeEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("raw", 1), ("llcBrNoFCS", 2), ("vcMuxBrNoFCS", 3), ("other", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraBridgeEncapsulation.setStatus('mandatory')
teraBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraBridgePriority.setStatus('mandatory')
teraPVCPortLocalHostFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraPVCPortLocalHostFilter.setStatus('mandatory')
teraPVCPortTrunkFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sendOnlyUntagged", 1), ("sendOnlyVlanTagged", 2), ("sendAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraPVCPortTrunkFrameType.setStatus('mandatory')
teraPVCPortTrunkTagSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraPVCPortTrunkTagSwap.setStatus('mandatory')
teraDot1dTpPortTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 4), )
if mibBuilder.loadTexts: teraDot1dTpPortTable.setStatus('mandatory')
teraDot1dTpPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 4, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "teraDot1dTpPort"))
if mibBuilder.loadTexts: teraDot1dTpPortTableEntry.setStatus('mandatory')
teraDot1dTpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dTpPort.setStatus('mandatory')
teraDot1dFFType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("static", 1), ("combined", 2), ("dynamic", 3), ("vlanTag", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dFFType.setStatus('mandatory')
teraDot1dLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("terminal", 1), ("facility", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dLoopback.setStatus('mandatory')
teraDot1dTpUseDefaultFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dTpUseDefaultFwd.setStatus('mandatory')
teraDot1dTpDefaultFwdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 89))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dTpDefaultFwdPort.setStatus('mandatory')
teraDot1dStaticTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 5), )
if mibBuilder.loadTexts: teraDot1dStaticTable.setStatus('mandatory')
teraDot1dStaticTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 5, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "teraDot1dStaticReceivePort"), (0, "TERAWAVE-terabridge-MIB", "teraDot1dStaticAddress"))
if mibBuilder.loadTexts: teraDot1dStaticTableEntry.setStatus('mandatory')
teraDot1dStaticReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dStaticReceivePort.setStatus('mandatory')
teraDot1dStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dStaticAddress.setStatus('mandatory')
teraDot1dStaticAllowedToGoTo = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 5, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dStaticAllowedToGoTo.setStatus('mandatory')
teraDot1dStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allowed", 1), ("disallowed", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dStaticStatus.setStatus('mandatory')
teraDot1dBasePortTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 6), )
if mibBuilder.loadTexts: teraDot1dBasePortTable.setStatus('mandatory')
teraDot1dBasePortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 6, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "teraDot1dBaseInternalVPI"), (0, "TERAWAVE-terabridge-MIB", "teraDot1dBaseInternalVCI"), (0, "TERAWAVE-terabridge-MIB", "teraDot1dBaseParentPortIfIndex"))
if mibBuilder.loadTexts: teraDot1dBasePortTableEntry.setStatus('mandatory')
teraDot1dBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dBasePort.setStatus('mandatory')
teraDot1dBaseParentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dBaseParentPortIfIndex.setStatus('mandatory')
teraDot1dBaseInternalVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dBaseInternalVPI.setStatus('mandatory')
teraDot1dBaseInternalVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dBaseInternalVCI.setStatus('mandatory')
teraDot1dBaseParentVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dBaseParentVPI.setStatus('mandatory')
teraDot1dBaseParentVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dBaseParentVCI.setStatus('mandatory')
teraVlanPortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 7), )
if mibBuilder.loadTexts: teraVlanPortGroupTable.setStatus('mandatory')
teraVlanPortGroupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 7, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: teraVlanPortGroupTableEntry.setStatus('mandatory')
dot1qVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanIndex.setStatus('mandatory')
teraVlanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 7, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraVlanPorts.setStatus('mandatory')
teraVlanPortGroupTableAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraVlanPortGroupTableAction.setStatus('mandatory')
teraDot1qVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 8), )
if mibBuilder.loadTexts: teraDot1qVlanPortTable.setStatus('mandatory')
teraDot1qVlanPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 8, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "teraDot1qVlanPort"))
if mibBuilder.loadTexts: teraDot1qVlanPortTableEntry.setStatus('mandatory')
teraDot1qVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 81))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1qVlanPort.setStatus('mandatory')
teraDot1qVlanPortIngressFrameTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("admitAll", 1), ("admitOnlyVlanTagged", 2), ("admitOnlyUntagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1qVlanPortIngressFrameTypes.setStatus('mandatory')
teraDot1qVlanPortIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1qVlanPortIngressFiltering.setStatus('mandatory')
teraDot1qVlanPortEgressFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sendOnlyUntagged", 1), ("sendOnlyVlanTagged", 2), ("sendAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1qVlanPortEgressFrameType.setStatus('mandatory')
teraDot1qVlanPortEgressTagSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1qVlanPortEgressTagSwap.setStatus('mandatory')
teraDot1qVlanPortDisUntaggedBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1qVlanPortDisUntaggedBcast.setStatus('mandatory')
teraDot1dTp = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 9), )
if mibBuilder.loadTexts: teraDot1dTp.setStatus('mandatory')
teraDot1dTpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 9, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "teraDot1dTpSlot"), (0, "TERAWAVE-terabridge-MIB", "teraDot1dTpProcessor"))
if mibBuilder.loadTexts: teraDot1dTpEntry.setStatus('mandatory')
teraDot1dTpSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dTpSlot.setStatus('mandatory')
teraDot1dTpProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dTpProcessor.setStatus('mandatory')
teraDot1dTpLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dTpLearnedEntryDiscards.setStatus('mandatory')
teraDot1dTpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dTpAgingTime.setStatus('mandatory')
teraDot1qFdbTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 10), )
if mibBuilder.loadTexts: teraDot1qFdbTable.setStatus('mandatory')
teraDot1qFdbTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 10, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "teraDot1dTpSlot"), (0, "TERAWAVE-terabridge-MIB", "teraDot1dTpProcessor"), (0, "TERAWAVE-terabridge-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: teraDot1qFdbTableEntry.setStatus('mandatory')
teraDot1qFdbDynamicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1qFdbDynamicCount.setStatus('mandatory')
teraDot1qTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 11), )
if mibBuilder.loadTexts: teraDot1qTpFdbTable.setStatus('mandatory')
teraDot1qTpFdbTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 11, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "teraDot1dTpSlot"), (0, "TERAWAVE-terabridge-MIB", "teraDot1dTpProcessor"), (0, "TERAWAVE-terabridge-MIB", "dot1qFdbId"), (0, "TERAWAVE-terabridge-MIB", "teraDot1qTpFdbAddress"))
if mibBuilder.loadTexts: teraDot1qTpFdbTableEntry.setStatus('mandatory')
teraDot1qTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 11, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1qTpFdbAddress.setStatus('mandatory')
teraDot1qTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1qTpFdbPort.setStatus('mandatory')
teraDot1qTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1qTpFdbStatus.setStatus('mandatory')
teraDot1dPvcStatTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 12), )
if mibBuilder.loadTexts: teraDot1dPvcStatTable.setStatus('mandatory')
teraDot1dPvcStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "teraDot1dTpPort"))
if mibBuilder.loadTexts: teraDot1dPvcStatTableEntry.setStatus('mandatory')
teraDot1dPvcStatTxPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dPvcStatTxPktCount.setStatus('mandatory')
teraDot1dPvcStatTxOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dPvcStatTxOverrun.setStatus('mandatory')
teraDot1dPvcStatTxUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dPvcStatTxUnderrun.setStatus('mandatory')
teraDot1dPvcStatRxPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dPvcStatRxPktCount.setStatus('mandatory')
teraDot1dPvcStatRxOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dPvcStatRxOverrun.setStatus('mandatory')
teraDot1dPvcStatRxUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dPvcStatRxUnderrun.setStatus('mandatory')
teraDot1dPvcStatRxCrcError = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dPvcStatRxCrcError.setStatus('mandatory')
teraDot1dPvcStatRxLengthError = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dPvcStatRxLengthError.setStatus('mandatory')
teraDot1dPvcStatRxAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dPvcStatRxAbort.setStatus('mandatory')
teraDot1dPvcStatRxSlip = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dPvcStatRxSlip.setStatus('mandatory')
teraDot1dPvcStatRxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraDot1dPvcStatRxNoBuffer.setStatus('mandatory')
teraDot1dPvcStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 12, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraDot1dPvcStatState.setStatus('mandatory')
teraBridgeConnIdTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 13), )
if mibBuilder.loadTexts: teraBridgeConnIdTable.setStatus('mandatory')
teraBridgeConnIdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 13, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "teraPvcLogPortId"))
if mibBuilder.loadTexts: teraBridgeConnIdTableEntry.setStatus('mandatory')
teraPvcLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraPvcLogPortId.setStatus('mandatory')
teraConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 13, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraConnId.setStatus('mandatory')
teraVlanStatTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 14), )
if mibBuilder.loadTexts: teraVlanStatTable.setStatus('mandatory')
teraVlanStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "dot1dBasePort"), (0, "TERAWAVE-terabridge-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: teraVlanStatTableEntry.setStatus('mandatory')
teraVlanStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraVlanStatState.setStatus('mandatory')
teraVlanStatRxMcastSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxMcastSrcAddr.setStatus('mandatory')
teraVlanStatRxInvalidVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxInvalidVlanId.setStatus('mandatory')
teraVlanStatRxMacAddrNotInStaticTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxMacAddrNotInStaticTbl.setStatus('mandatory')
teraVlanStatRxMacAddrInStaticTbl = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxMacAddrInStaticTbl.setStatus('mandatory')
teraVlanStatRxInvalidOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxInvalidOutPort.setStatus('mandatory')
teraVlanStatRxInvalidInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxInvalidInPort.setStatus('mandatory')
teraVlanStatRxDestMacAddrDisallowed = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxDestMacAddrDisallowed.setStatus('mandatory')
teraVlanStatRxPortBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxPortBlocked.setStatus('mandatory')
teraVlanStatRxDiscardTaggedFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxDiscardTaggedFrame.setStatus('mandatory')
teraVlanStatRxDiscardUntaggedFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxDiscardUntaggedFrame.setStatus('mandatory')
teraVlanStatRxDiscardBcastBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxDiscardBcastBlocked.setStatus('mandatory')
teraVlanStatRxDiscardLocalDest = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxDiscardLocalDest.setStatus('mandatory')
teraVlanStatRxFFTypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxFFTypeMismatch.setStatus('mandatory')
teraVlanStatRxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxNoBuffer.setStatus('mandatory')
teraVlanStatRxTxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxTxFail.setStatus('mandatory')
teraVlanStatRxInvalidEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 14, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraVlanStatRxInvalidEncap.setStatus('mandatory')
teraEtherStatTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 15), )
if mibBuilder.loadTexts: teraEtherStatTable.setStatus('mandatory')
teraEtherStatTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "etherStatsIndex"))
if mibBuilder.loadTexts: teraEtherStatTableEntry.setStatus('mandatory')
teraEtherStatRxTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxTotalFrames.setStatus('mandatory')
teraEtherStatRxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxGoodFrames.setStatus('mandatory')
teraEtherStatRxForwardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxForwardFrames.setStatus('mandatory')
teraEtherStatRxForwardOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxForwardOctets.setStatus('mandatory')
teraEtherStatRxPause = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxPause.setStatus('mandatory')
teraEtherStatRxTotalDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxTotalDiscard.setStatus('mandatory')
teraEtherStatRxNoBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxNoBuffer.setStatus('mandatory')
teraEtherStatRxTotalBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxTotalBadFrames.setStatus('mandatory')
teraEtherStatRxBadFrameLenViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxBadFrameLenViolation.setStatus('mandatory')
teraEtherStatRxBadFrameNotAlign = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxBadFrameNotAlign.setStatus('mandatory')
teraEtherStatRxBadFrameTooShort = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxBadFrameTooShort.setStatus('mandatory')
teraEtherStatRxBadFrameCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxBadFrameCRC.setStatus('mandatory')
teraEtherStatRxBadFrameOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxBadFrameOverrun.setStatus('mandatory')
teraEtherStatRxBadFrameCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatRxBadFrameCollision.setStatus('mandatory')
teraEtherStatTxTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxTotalFrames.setStatus('mandatory')
teraEtherStatTxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxGoodFrames.setStatus('mandatory')
teraEtherStatTxFramesSentOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxFramesSentOut.setStatus('mandatory')
teraEtherStatTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxOctets.setStatus('mandatory')
teraEtherStatTxPause = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxPause.setStatus('mandatory')
teraEtherStatTxQueueOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxQueueOverflow.setStatus('mandatory')
teraEtherStatTxTotalBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxTotalBadFrames.setStatus('mandatory')
teraEtherStatTxBadFrameCarrierLost = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxBadFrameCarrierLost.setStatus('mandatory')
teraEtherStatTxBadFrameUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxBadFrameUnderrun.setStatus('mandatory')
teraEtherStatTxBadFrameRexmitLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxBadFrameRexmitLimit.setStatus('mandatory')
teraEtherStatTxBadFrameLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxBadFrameLateCollision.setStatus('mandatory')
teraEtherStatTxBadFrameTxErr = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxBadFrameTxErr.setStatus('mandatory')
teraEtherStatTxBadFrameReset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxBadFrameReset1.setStatus('mandatory')
teraEtherStatTxBadFrameReset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxBadFrameReset2.setStatus('mandatory')
teraEtherStatTxBadFramePortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraEtherStatTxBadFramePortDisable.setStatus('mandatory')
teraEtherStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 15, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraEtherStatState.setStatus('mandatory')
teraLanPolicingTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 16), )
if mibBuilder.loadTexts: teraLanPolicingTable.setStatus('mandatory')
teraLanPolicingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 16, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "etherStatsIndex"))
if mibBuilder.loadTexts: teraLanPolicingTableEntry.setStatus('mandatory')
teraLanIngPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLanIngPolicing.setStatus('mandatory')
teraLanIngPolicingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 16, 1, 2), Counter32().subtype(subtypeSpec=ValueRangeConstraint(200, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLanIngPolicingInterval.setStatus('mandatory')
teraLanIngPolicingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 16, 1, 3), Counter32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLanIngPolicingRate.setStatus('mandatory')
teraLanIngPolicingMaxAccr = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 16, 1, 4), Counter32().subtype(subtypeSpec=ValueRangeConstraint(200, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLanIngPolicingMaxAccr.setStatus('mandatory')
teraLanEgrShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLanEgrShaping.setStatus('mandatory')
teraLanEgrShapingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 16, 1, 6), Counter32().subtype(subtypeSpec=ValueRangeConstraint(200, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLanEgrShapingInterval.setStatus('mandatory')
teraLanEgrShapingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 16, 1, 7), Counter32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLanEgrShapingRate.setStatus('mandatory')
teraLanUsageHistoryControlTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 17), )
if mibBuilder.loadTexts: teraLanUsageHistoryControlTable.setStatus('mandatory')
teraLanUsageHistoryControlTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 17, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: teraLanUsageHistoryControlTableEntry.setStatus('mandatory')
teraLanUsageHistoryControlBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLanUsageHistoryControlBucketsRequested.setStatus('mandatory')
teraLanUsageHistoryControlBucketsGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLanUsageHistoryControlBucketsGranted.setStatus('mandatory')
teraLanUsageHistoryControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLanUsageHistoryControlInterval.setStatus('mandatory')
teraLanUsageHistoryControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLanUsageHistoryControlStatus.setStatus('mandatory')
teraLanUsageTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 18), )
if mibBuilder.loadTexts: teraLanUsageTable.setStatus('mandatory')
teraLanUsageTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 18, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: teraLanUsageTableEntry.setStatus('mandatory')
teraLanUsageIngRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 18, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLanUsageIngRcvBytes.setStatus('mandatory')
teraLanUsageIngPolicingDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLanUsageIngPolicingDropBytes.setStatus('mandatory')
teraLanUsageEgrRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLanUsageEgrRcvBytes.setStatus('mandatory')
teraLanUsageEgrSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLanUsageEgrSentBytes.setStatus('mandatory')
teraLanUsageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 18, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLanUsageStatus.setStatus('mandatory')
teraLanUsageHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 19), )
if mibBuilder.loadTexts: teraLanUsageHistoryTable.setStatus('mandatory')
teraLanUsageHistoryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 19, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "dot1dBasePort"), (0, "TERAWAVE-terabridge-MIB", "teraLanUsageHistorySampleIndex"))
if mibBuilder.loadTexts: teraLanUsageHistoryTableEntry.setStatus('mandatory')
teraLanUsageHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLanUsageHistorySampleIndex.setStatus('mandatory')
teraLanUsageHistoryIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLanUsageHistoryIntervalStart.setStatus('mandatory')
teraLanUsageHistoryIngRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLanUsageHistoryIngRcvBytes.setStatus('mandatory')
teraLanUsageHistoryIngPolicingDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLanUsageHistoryIngPolicingDropBytes.setStatus('mandatory')
teraLanUsageHistoryEgrRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLanUsageHistoryEgrRcvBytes.setStatus('mandatory')
teraLanUsageHistoryEgrSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraLanUsageHistoryEgrSentBytes.setStatus('mandatory')
teraLanCardModeTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 3, 20), )
if mibBuilder.loadTexts: teraLanCardModeTable.setStatus('mandatory')
teraLanCardModeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 3, 20, 1), ).setIndexNames((0, "TERAWAVE-terabridge-MIB", "teraDot1dTpSlot"))
if mibBuilder.loadTexts: teraLanCardModeTableEntry.setStatus('mandatory')
teraLanCardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 3, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-2", 1), ("port-4", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraLanCardMode.setStatus('mandatory')
mibBuilder.exportSymbols("TERAWAVE-terabridge-MIB", teraLanUsageHistoryIngRcvBytes=teraLanUsageHistoryIngRcvBytes, teraLanUsageHistoryControlStatus=teraLanUsageHistoryControlStatus, teraEtherStatRxBadFrameCRC=teraEtherStatRxBadFrameCRC, teraDot1dStpBridgeMaxAge=teraDot1dStpBridgeMaxAge, teraDot1dTpUseDefaultFwd=teraDot1dTpUseDefaultFwd, teraDot1dStpHoldTime=teraDot1dStpHoldTime, teraDot1dBaseInternalVCI=teraDot1dBaseInternalVCI, teraDot1dBasePortTable=teraDot1dBasePortTable, teraEtherStatRxTotalDiscard=teraEtherStatRxTotalDiscard, teraEtherStatRxForwardOctets=teraEtherStatRxForwardOctets, teraLanCardMode=teraLanCardMode, teraEtherStatRxBadFrameNotAlign=teraEtherStatRxBadFrameNotAlign, teraDot1dStpMaxAge=teraDot1dStpMaxAge, teraVlanStatRxDiscardTaggedFrame=teraVlanStatRxDiscardTaggedFrame, teraDot1dBaseParentVCI=teraDot1dBaseParentVCI, teraLanUsageHistoryControlTableEntry=teraLanUsageHistoryControlTableEntry, teraVlanStatRxPortBlocked=teraVlanStatRxPortBlocked, teraBridgeConnIdTable=teraBridgeConnIdTable, teraEtherStatTxBadFrameCarrierLost=teraEtherStatTxBadFrameCarrierLost, teraLanUsageHistoryControlTable=teraLanUsageHistoryControlTable, teraLanUsageHistoryControlBucketsGranted=teraLanUsageHistoryControlBucketsGranted, teraEtherStatRxBadFrameCollision=teraEtherStatRxBadFrameCollision, teraVlanStatRxMcastSrcAddr=teraVlanStatRxMcastSrcAddr, teraEtherStatTxPause=teraEtherStatTxPause, teraDot1dStaticAddress=teraDot1dStaticAddress, teraLanUsageHistoryEgrRcvBytes=teraLanUsageHistoryEgrRcvBytes, teraDot1dPvcStatRxSlip=teraDot1dPvcStatRxSlip, teraDot1qFdbDynamicCount=teraDot1qFdbDynamicCount, teraDot1dStaticStatus=teraDot1dStaticStatus, teraEtherStatTxBadFrameTxErr=teraEtherStatTxBadFrameTxErr, teraPVCPortTrunkFrameType=teraPVCPortTrunkFrameType, teraEtherStatRxForwardFrames=teraEtherStatRxForwardFrames, teraLanUsageIngRcvBytes=teraLanUsageIngRcvBytes, teraDot1dPvcStatRxCrcError=teraDot1dPvcStatRxCrcError, teraVlanStatRxDiscardUntaggedFrame=teraVlanStatRxDiscardUntaggedFrame, teraEtherStatTxBadFrameRexmitLimit=teraEtherStatTxBadFrameRexmitLimit, teraPvcLogPortId=teraPvcLogPortId, teraBridgePVCPortTable=teraBridgePVCPortTable, teraVlanStatRxDiscardBcastBlocked=teraVlanStatRxDiscardBcastBlocked, teraBridgePriority=teraBridgePriority, teraEtherStatTxBadFrameReset2=teraEtherStatTxBadFrameReset2, teraDot1dLoopback=teraDot1dLoopback, teraDot1dStpTableEntry=teraDot1dStpTableEntry, teraDot1dPvcStatTableEntry=teraDot1dPvcStatTableEntry, teraDot1dStaticTable=teraDot1dStaticTable, teraLanUsageHistoryEgrSentBytes=teraLanUsageHistoryEgrSentBytes, teraDot1qTpFdbAddress=teraDot1qTpFdbAddress, teraEtherStatRxTotalBadFrames=teraEtherStatRxTotalBadFrames, teraDot1dBaseInternalVPI=teraDot1dBaseInternalVPI, teraEtherStatTxBadFrameReset1=teraEtherStatTxBadFrameReset1, dot1qVlanIndex=dot1qVlanIndex, teraVlanStatRxInvalidOutPort=teraVlanStatRxInvalidOutPort, teraBridgePVCPortTableEntry=teraBridgePVCPortTableEntry, teraDot1dFFType=teraDot1dFFType, teraDot1dStpState=teraDot1dStpState, teraDot1qFdbTableEntry=teraDot1qFdbTableEntry, teraVlanStatRxFFTypeMismatch=teraVlanStatRxFFTypeMismatch, teraDot1dTpDefaultFwdPort=teraDot1dTpDefaultFwdPort, teraEtherStatRxNoBuffer=teraEtherStatRxNoBuffer, teraEtherStatState=teraEtherStatState, teraDot1dBasePortTableEntry=teraDot1dBasePortTableEntry, teraEtherStatRxBadFrameOverrun=teraEtherStatRxBadFrameOverrun, teraLanUsageHistoryControlInterval=teraLanUsageHistoryControlInterval, teraDot1dTpSlot=teraDot1dTpSlot, teraDot1qFdbTable=teraDot1qFdbTable, teraDot1dStpTopChanges=teraDot1dStpTopChanges, teraDot1dPvcStatRxLengthError=teraDot1dPvcStatRxLengthError, teraPVCPortTrunkTagSwap=teraPVCPortTrunkTagSwap, teraDot1qVlanPort=teraDot1qVlanPort, teraDot1dPvcStatTxPktCount=teraDot1dPvcStatTxPktCount, teraVlanStatRxNoBuffer=teraVlanStatRxNoBuffer, teraLanUsageTable=teraLanUsageTable, teraDot1dStpBridgeHelloTime=teraDot1dStpBridgeHelloTime, teraDot1dStpForwardDelay=teraDot1dStpForwardDelay, teraEtherStatTxBadFrameUnderrun=teraEtherStatTxBadFrameUnderrun, teraDot1dStpPriority=teraDot1dStpPriority, teraLanUsageHistoryIngPolicingDropBytes=teraLanUsageHistoryIngPolicingDropBytes, teraDot1qVlanPortEgressTagSwap=teraDot1qVlanPortEgressTagSwap, teraBridgeEncapsulation=teraBridgeEncapsulation, teraDot1dTpPortTable=teraDot1dTpPortTable, teraLanEgrShapingRate=teraLanEgrShapingRate, teraDot1qVlanPortEgressFrameType=teraDot1qVlanPortEgressFrameType, teraStpId=teraStpId, teraDot1dPvcStatRxNoBuffer=teraDot1dPvcStatRxNoBuffer, teraDot1qTpFdbTable=teraDot1qTpFdbTable, teraLanUsageHistorySampleIndex=teraLanUsageHistorySampleIndex, teraDot1dTpPort=teraDot1dTpPort, teraEtherStatTxTotalFrames=teraEtherStatTxTotalFrames, teraLanPolicingTable=teraLanPolicingTable, teraEtherStatTxOctets=teraEtherStatTxOctets, teraLanEgrShapingInterval=teraLanEgrShapingInterval, teraLanUsageEgrRcvBytes=teraLanUsageEgrRcvBytes, teraEtherStatTxFramesSentOut=teraEtherStatTxFramesSentOut, teraVlanStatRxDestMacAddrDisallowed=teraVlanStatRxDestMacAddrDisallowed, teraDot1dStpRootPort=teraDot1dStpRootPort, teraLanCardModeTable=teraLanCardModeTable, teraDot1dStaticAllowedToGoTo=teraDot1dStaticAllowedToGoTo, teraEtherStatRxPause=teraEtherStatRxPause, teraDot1qVlanPortIngressFrameTypes=teraDot1qVlanPortIngressFrameTypes, terawave=terawave, teraVlanPorts=teraVlanPorts, teraLanUsageIngPolicingDropBytes=teraLanUsageIngPolicingDropBytes, teraDot1dPvcStatTxOverrun=teraDot1dPvcStatTxOverrun, teraDot1dPvcStatRxOverrun=teraDot1dPvcStatRxOverrun, teraDot1dPvcStatState=teraDot1dPvcStatState, teraDot1dStpTable=teraDot1dStpTable, teraDot1dBasePort=teraDot1dBasePort, teraDot1dPvcStatRxAbort=teraDot1dPvcStatRxAbort, teraDot1dBaseParentPortIfIndex=teraDot1dBaseParentPortIfIndex, teraLanIngPolicingRate=teraLanIngPolicingRate, teraDot1dTpProcessor=teraDot1dTpProcessor, teraDot1qVlanPortIngressFiltering=teraDot1qVlanPortIngressFiltering, teraEtherStatTxBadFramePortDisable=teraEtherStatTxBadFramePortDisable, teraEtherStatRxBadFrameLenViolation=teraEtherStatRxBadFrameLenViolation, teraDot1dStpBridgeForwardDelay=teraDot1dStpBridgeForwardDelay, teraDot1dStpBridgeGroupList=teraDot1dStpBridgeGroupList, teraLanUsageStatus=teraLanUsageStatus, teraConnId=teraConnId, teraEtherStatRxTotalFrames=teraEtherStatRxTotalFrames, teraDot1qTpFdbPort=teraDot1qTpFdbPort, teraLanUsageHistoryIntervalStart=teraLanUsageHistoryIntervalStart, teraVlanStatRxInvalidEncap=teraVlanStatRxInvalidEncap, teraEtherStatTableEntry=teraEtherStatTableEntry, teraEtherStatRxGoodFrames=teraEtherStatRxGoodFrames, teraDot1dStpProtocolSpecification=teraDot1dStpProtocolSpecification, teraVlanPortGroupTable=teraVlanPortGroupTable, teraVlanStatRxInvalidInPort=teraVlanStatRxInvalidInPort, teraLanUsageHistoryTable=teraLanUsageHistoryTable, teraDot1qVlanPortTableEntry=teraDot1qVlanPortTableEntry, teraDot1dTpAgingTime=teraDot1dTpAgingTime, teraVlanPortGroupTableAction=teraVlanPortGroupTableAction, teraDot1dPvcStatTxUnderrun=teraDot1dPvcStatTxUnderrun, teraDot1dPvcStatRxPktCount=teraDot1dPvcStatRxPktCount, teraLanEgrShaping=teraLanEgrShaping, teraDot1dStpDesignatedRoot=teraDot1dStpDesignatedRoot, teraVlanStatRxInvalidVlanId=teraVlanStatRxInvalidVlanId, teraDot1dStaticReceivePort=teraDot1dStaticReceivePort, teraLanUsageHistoryTableEntry=teraLanUsageHistoryTableEntry, teraVlanStatRxTxFail=teraVlanStatRxTxFail, teraVlanStatRxMacAddrNotInStaticTbl=teraVlanStatRxMacAddrNotInStaticTbl, teraDot1dStpRootCost=teraDot1dStpRootCost, teraBridgeConnIdTableEntry=teraBridgeConnIdTableEntry, teraLanIngPolicing=teraLanIngPolicing, teraLanCardModeTableEntry=teraLanCardModeTableEntry, teraDot1dTpLearnedEntryDiscards=teraDot1dTpLearnedEntryDiscards, teraVlanStatRxMacAddrInStaticTbl=teraVlanStatRxMacAddrInStaticTbl, teraDot1dPvcStatRxUnderrun=teraDot1dPvcStatRxUnderrun, teraDot1dStaticTableEntry=teraDot1dStaticTableEntry, teraDot1qTpFdbTableEntry=teraDot1qTpFdbTableEntry, teraDot1dBaseParentVPI=teraDot1dBaseParentVPI, teraDot1qVlanPortTable=teraDot1qVlanPortTable, teraLanIngPolicingMaxAccr=teraLanIngPolicingMaxAccr, teraLanUsageEgrSentBytes=teraLanUsageEgrSentBytes, teraDot1dTp=teraDot1dTp, teraVlanStatTable=teraVlanStatTable, teraDot1qTpFdbStatus=teraDot1qTpFdbStatus, teraDot1dPvcStatTable=teraDot1dPvcStatTable, teraPVCPortLocalHostFilter=teraPVCPortLocalHostFilter, teraDot1dStpTimeSinceTopologyChange=teraDot1dStpTimeSinceTopologyChange, teraEtherStatTable=teraEtherStatTable, teraEtherStatRxBadFrameTooShort=teraEtherStatRxBadFrameTooShort, teraVlanStatTableEntry=teraVlanStatTableEntry, teraDot1dTpEntry=teraDot1dTpEntry, teraLanUsageTableEntry=teraLanUsageTableEntry, teraLanPolicingTableEntry=teraLanPolicingTableEntry, teraVlanPortGroupTableEntry=teraVlanPortGroupTableEntry, tera1dBridge=tera1dBridge, teraEtherStatTxGoodFrames=teraEtherStatTxGoodFrames, teraEtherStatTxTotalBadFrames=teraEtherStatTxTotalBadFrames, teraVlanStatState=teraVlanStatState, teraEtherStatTxBadFrameLateCollision=teraEtherStatTxBadFrameLateCollision, teraDot1qVlanPortDisUntaggedBcast=teraDot1qVlanPortDisUntaggedBcast, teraEtherStatTxQueueOverflow=teraEtherStatTxQueueOverflow, teraLanIngPolicingInterval=teraLanIngPolicingInterval, teraDot1dStpHelloTime=teraDot1dStpHelloTime, teraVlanStatRxDiscardLocalDest=teraVlanStatRxDiscardLocalDest, teraDot1dTpPortTableEntry=teraDot1dTpPortTableEntry, teraLanUsageHistoryControlBucketsRequested=teraLanUsageHistoryControlBucketsRequested)
