#
# PySNMP MIB module ADTRAN-AOS-QOS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ADTRAN-AOS-QOS
# Produced by pysmi-0.3.4 at Mon Apr 29 16:58:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
adGenAOSConformance, adGenAOSRouter = mibBuilder.importSymbols("ADTRAN-AOS", "adGenAOSConformance", "adGenAOSRouter")
adIdentity, = mibBuilder.importSymbols("ADTRAN-MIB", "adIdentity")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, Gauge32, Integer32, Unsigned32, ModuleIdentity, ObjectIdentity, Counter64, IpAddress, Bits, NotificationType, MibIdentifier, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "Integer32", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Counter64", "IpAddress", "Bits", "NotificationType", "MibIdentifier", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
adGenAOSQoSMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 664, 6, 10000, 53, 2, 1))
adGenAOSQoSMib.setRevisions(('2011-06-17 00:00', '2011-05-17 00:00', '2010-05-19 00:00', '2009-03-04 00:00', '2008-09-16 00:00', '2008-08-20 00:00', '2008-07-11 00:00', '2008-06-25 00:00', '2008-06-06 00:00', '2008-06-04 00:00', '2008-04-17 00:00',))
if mibBuilder.loadTexts: adGenAOSQoSMib.setLastUpdated('200806250000Z')
if mibBuilder.loadTexts: adGenAOSQoSMib.setOrganization('ADTRAN, Inc.')
adGenAOSQos = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1))
class Unsigned64(TextualConvention, Counter64):
    status = 'current'

adGenAOSQoSMapSetTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 1), )
if mibBuilder.loadTexts: adGenAOSQoSMapSetTable.setStatus('current')
adGenAOSQoSMapSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 1, 1), ).setIndexNames((0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapSetId"))
if mibBuilder.loadTexts: adGenAOSQoSMapSetEntry.setStatus('current')
adGenAOSQoSMapSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapSetId.setStatus('current')
adGenAOSQoSMapSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapSetName.setStatus('current')
adGenAOSQoSMapIsChild = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapIsChild.setStatus('current')
adGenAOSQoSMapEntriesTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2), )
if mibBuilder.loadTexts: adGenAOSQoSMapEntriesTable.setStatus('current')
adGenAOSQoSMapEntriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1), ).setIndexNames((0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapSetId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSMapEntriesEntry.setStatus('current')
adGenAOSQoSMapEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapEntryId.setStatus('current')
adGenAOSQoSMapSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapSeqNum.setStatus('current')
adGenAOSQoSMapEntrySetName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapEntrySetName.setStatus('current')
adGenAOSQoSMapChildSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapChildSetName.setStatus('current')
adGenAOSQoSMapQueuingActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("priority", 2), ("classBased", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapQueuingActionType.setStatus('current')
adGenAOSQoSMapQueuingBWType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("absolute", 2), ("percent", 3), ("percentRemaining", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapQueuingBWType.setStatus('current')
adGenAOSQoSMapQueuingBWValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapQueuingBWValue.setStatus('current')
adGenAOSQoSMapQueuingBurstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapQueuingBurstValue.setStatus('current')
adGenAOSQoSMapMatchAll = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapMatchAll.setStatus('current')
adGenAOSQoSMapDscpMarkState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapDscpMarkState.setStatus('current')
adGenAOSQoSMapDscpMarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapDscpMarkValue.setStatus('current')
adGenAOSQoSMapDscpMarkString = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapDscpMarkString.setStatus('current')
adGenAOSQoSMapPrecedenceMarkState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapPrecedenceMarkState.setStatus('current')
adGenAOSQoSMapPrecedenceMarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapPrecedenceMarkValue.setStatus('current')
adGenAOSQoSMapCosMarkState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapCosMarkState.setStatus('current')
adGenAOSQoSMapCosMarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapCosMarkValue.setStatus('current')
adGenAOSQoSMapShapeState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShapeState.setStatus('current')
adGenAOSQoSMapShapeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShapeValue.setStatus('current')
adGenAOSQoSMapShapeBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShapeBurst.setStatus('current')
adGenAOSQoSMapShapeEthOverhead = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShapeEthOverhead.setStatus('current')
adGenAOSQoSMapClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSQoSMapClearCounters.setStatus('current')
adGenAOSQoSMapPriorityStrictRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapPriorityStrictRateLimiting.setStatus('current')
adGenAOSQoSInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3), )
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTable.setStatus('current')
adGenAOSQoSInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adGenAOSQoSInterfaceEntry.setStatus('current')
adGenAOSQoSInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceName.setStatus('current')
adGenAOSQoSInterfaceOutboundMapSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceOutboundMapSetName.setStatus('current')
adGenAOSQoSInterfaceInboundMapSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceInboundMapSetName.setStatus('current')
adGenAOSQoSInterfaceMapState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceMapState.setStatus('current')
adGenAOSQoSInterfaceTXQType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("fifo", 1), ("fifoAged", 2), ("weightedFair", 3), ("roundRobin", 4), ("priority", 5), ("none", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQType.setStatus('current')
adGenAOSQoSInterfaceTXQSubqPktLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQSubqPktLimit.setStatus('current')
adGenAOSQoSInterfaceTXQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQSize.setStatus('current')
adGenAOSQoSInterfaceTXQPktHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQPktHighWater.setStatus('current')
adGenAOSQoSInterfaceTXQMaxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQMaxTotal.setStatus('current')
adGenAOSQoSInterfaceTXQDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQDrops.setStatus('current')
adGenAOSQoSInterfaceTXQHdlcRingLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQHdlcRingLimit.setStatus('current')
adGenAOSQoSInterfaceTXQAvailableBW = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQAvailableBW.setStatus('current')
adGenAOSQoSInterfaceTXQConvActive = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQConvActive.setStatus('current')
adGenAOSQoSInterfaceTXQConvMaxActive = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQConvMaxActive.setStatus('current')
adGenAOSQoSInterfaceTXQConvMaxTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTXQConvMaxTotal.setStatus('current')
adGenAOSQoSInterfaceTrafficShapingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTrafficShapingRate.setStatus('current')
adGenAOSQoSInterfaceTrafficShapingBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceTrafficShapingBurst.setStatus('current')
adGenAOSQoSInterfaceShaperValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperValue.setStatus('current')
adGenAOSQoSInterfaceShaperCurrentBudgetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperCurrentBudgetSize.setStatus('current')
adGenAOSQoSInterfaceShaperMaxBudgetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperMaxBudgetSize.setStatus('current')
adGenAOSQoSInterfaceShaperBytesPerTick = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperBytesPerTick.setStatus('current')
adGenAOSQoSInterfaceShaperTickRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperTickRate.setStatus('current')
adGenAOSQoSInterfaceShaperQPktDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperQPktDepth.setStatus('current')
adGenAOSQoSInterfaceShaperQPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperQPktDrops.setStatus('current')
adGenAOSQoSInterfaceShaperQPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperQPktSent.setStatus('current')
adGenAOSQoSInterfaceShaperQPktDelayed = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 3, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSInterfaceShaperQPktDelayed.setStatus('current')
adGenAOSQoSClassConvHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4), )
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryTable.setStatus('current')
adGenAOSQoSClassConvHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapParentEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryEntry.setStatus('current')
adGenAOSQoSMapParentEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapParentEntryId.setStatus('current')
adGenAOSQoSClassConvSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvSetId.setStatus('current')
adGenAOSQoSHistoryClassConvId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSHistoryClassConvId.setStatus('current')
adGenAOSQoSClassConvHistoryMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryMatches.setStatus('current')
adGenAOSQoSClassConvHistoryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryDiscards.setStatus('current')
adGenAOSQoSClassConvHistoryMatchesBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryMatchesBytes.setStatus('current')
adGenAOSQoSClassConvHistoryDiscardsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryDiscardsBytes.setStatus('current')
adGenAOSQoSClassConvHistoryDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryDepth.setStatus('current')
adGenAOSQoSClassConvHistoryHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryHighWater.setStatus('current')
adGenAOSQoSClassConvHistoryByteMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryByteMatchRate.setStatus('current')
adGenAOSQoSClassConvHistoryByteDiscardRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryByteDiscardRate.setStatus('current')
adGenAOSQoSClassConvHistoryBitMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 12), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryBitMatchRate.setStatus('current')
adGenAOSQoSClassConvHistoryBitDiscardRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 4, 1, 13), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassConvHistoryBitDiscardRate.setStatus('current')
adGenAOSQoSConversationTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5), )
if mibBuilder.loadTexts: adGenAOSQoSConversationTable.setStatus('current')
adGenAOSQoSConversationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSConvId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapConvParentEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSConversationEntry.setStatus('current')
adGenAOSQoSConvId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvId.setStatus('current')
adGenAOSQoSMapConvParentEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapConvParentEntryId.setStatus('current')
adGenAOSQoSConvMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvMatches.setStatus('current')
adGenAOSQoSConvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvDiscards.setStatus('current')
adGenAOSQoSConvMatchesBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvMatchesBytes.setStatus('current')
adGenAOSQoSConvDiscardsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvDiscardsBytes.setStatus('current')
adGenAOSQoSConvDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvDepth.setStatus('current')
adGenAOSQoSConvHighWater = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvHighWater.setStatus('current')
adGenAOSQoSConvWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvWeight.setStatus('current')
adGenAOSQoSConvPktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvPktLen.setStatus('current')
adGenAOSQoSConvProttype = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unset", 1), ("ip", 2), ("bridging", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvProttype.setStatus('current')
adGenAOSQoSConvSubQType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bestEffort", 1), ("classBased", 2), ("unclassified", 3), ("priorityUser", 4), ("prioritySystem", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvSubQType.setStatus('current')
adGenAOSQoSConvPktHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 5, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSConvPktHeader.setStatus('current')
adGenAOSQoSPriorityRateLimiterTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6), )
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterTable.setStatus('current')
adGenAOSQoSPriorityRateLimiterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterParentEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterEntry.setStatus('current')
adGenAOSQoSPriorityRateLimiterParentEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterParentEntryId.setStatus('current')
adGenAOSQoSPriorityRateLimiterSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterSetId.setStatus('current')
adGenAOSQoSPriorityRateLimiterCurrBudget = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterCurrBudget.setStatus('current')
adGenAOSQoSPriorityRateLimiterMaxBudget = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterMaxBudget.setStatus('current')
adGenAOSQoSPriorityRateLimiterUpdateTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterUpdateTimestamp.setStatus('current')
adGenAOSQoSPriorityRateLimiterBudgetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterBudgetRate.setStatus('current')
adGenAOSQoSPriorityRateLimiterMaxFillTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterMaxFillTime.setStatus('current')
adGenAOSQoSPriorityRateLimiterMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterMatches.setStatus('current')
adGenAOSQoSPriorityRateLimiterDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterDrops.setStatus('current')
adGenAOSQoSPriorityRateLimiterMatchesBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterMatchesBytes.setStatus('current')
adGenAOSQoSPriorityRateLimiterDropsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterDropsBytes.setStatus('current')
adGenAOSQoSPriorityRateLimiterClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterClearCounters.setStatus('current')
adGenAOSQoSPriorityRateLimiterByteMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterByteMatchRate.setStatus('current')
adGenAOSQoSPriorityRateLimiterByteDiscardRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterByteDiscardRate.setStatus('current')
adGenAOSQoSPriorityRateLimiterBitMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 15), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterBitMatchRate.setStatus('current')
adGenAOSQoSPriorityRateLimiterBitDiscardRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 6, 1, 16), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSPriorityRateLimiterBitDiscardRate.setStatus('current')
adGenAOSQoSMapClassifierStatsTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7), )
if mibBuilder.loadTexts: adGenAOSQoSMapClassifierStatsTable.setStatus('current')
adGenAOSQoSMapClassifierStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapClassifierParentEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSMapClassifierStatsEntry.setStatus('current')
adGenAOSQoSMapClassifierParentEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapClassifierParentEntryId.setStatus('current')
adGenAOSQoSClassifierMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierMatches.setStatus('current')
adGenAOSQoSClassifierDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierDrops.setStatus('current')
adGenAOSQoSClassifierMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierMatchBytes.setStatus('current')
adGenAOSQoSClassifierDropBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierDropBytes.setStatus('current')
adGenAOSQoSClassifierPktMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierPktMatchRate.setStatus('current')
adGenAOSQoSClassifierPktDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierPktDropRate.setStatus('current')
adGenAOSQoSClassifierByteMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierByteMatchRate.setStatus('current')
adGenAOSQoSClassifierByteDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierByteDropRate.setStatus('current')
adGenAOSQoSClassifierBitMatchRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 10), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierBitMatchRate.setStatus('current')
adGenAOSQoSClassifierBitDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 7, 1, 11), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSClassifierBitDropRate.setStatus('current')
adGenAOSQoSMapMatchTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8), )
if mibBuilder.loadTexts: adGenAOSQoSMapMatchTable.setStatus('current')
adGenAOSQoSMapMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1), ).setIndexNames((0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapSetId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapMatchEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSMapMatchEntry.setStatus('current')
adGenAOSQoSMapMatchEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapMatchEntryId.setStatus('current')
adGenAOSQoSMapMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 1), ("acl", 2), ("ipRTP", 3), ("protocol", 4), ("dscp", 5), ("precedence", 6), ("vlan", 7), ("frameRelayDLCI", 8), ("any", 10), ("dscpIpv4", 11), ("dscpIpv6", 12), ("precedenceIpv4", 13), ("precedenceIpv6", 14), ("aclIpv6", 15), ("ipRTPIpv6", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapMatchType.setStatus('current')
adGenAOSQoSMapMatchACL = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapMatchACL.setStatus('current')
adGenAOSQoSMapRTPMatchStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapRTPMatchStartPort.setStatus('current')
adGenAOSQoSMapRTPMatchEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapRTPMatchEndPort.setStatus('current')
adGenAOSQoSMapRTPMatchPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("all", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapRTPMatchPorts.setStatus('current')
adGenAOSQoSMapDscpMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapDscpMatchValue.setStatus('current')
adGenAOSQoSMapPrecedenceMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapPrecedenceMatchValue.setStatus('current')
adGenAOSQoSMapProtocolMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("bridged", 2), ("netBEIU", 3), ("protocolIpv4", 4), ("protocolIpv6", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapProtocolMatchType.setStatus('current')
adGenAOSQoSMapVlanMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapVlanMatchValue.setStatus('current')
adGenAOSQoSMapFrDlciMatchValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapFrDlciMatchValue.setStatus('current')
adGenAOSQoSMapShaperTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9), )
if mibBuilder.loadTexts: adGenAOSQoSMapShaperTable.setStatus('current')
adGenAOSQoSMapShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"))
if mibBuilder.loadTexts: adGenAOSQoSMapShaperEntry.setStatus('current')
adGenAOSQoSMapShaperShapeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperShapeValue.setStatus('current')
adGenAOSQoSMapShaperCurrentBudgetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperCurrentBudgetSize.setStatus('current')
adGenAOSQoSMapShaperMaxBudgetSize = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperMaxBudgetSize.setStatus('current')
adGenAOSQoSMapShaperBytesPerTick = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperBytesPerTick.setStatus('current')
adGenAOSQoSMapShaperTickRate = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperTickRate.setStatus('current')
adGenAOSQoSMapShaperQueuePktDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperQueuePktDepth.setStatus('current')
adGenAOSQoSMapShaperQueuePktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperQueuePktDrops.setStatus('current')
adGenAOSQoSMapShaperQueuePktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperQueuePktsSent.setStatus('current')
adGenAOSQoSMapShaperQueuePktsDelayed = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 1, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSQoSMapShaperQueuePktsDelayed.setStatus('current')
adGenAOSQoSConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8))
adGenAOSQoSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1))
adGenAOSQoSCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 2))
adGenAOSQoSFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 2, 1)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConversationGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapMatchGroup"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSFullCompliance = adGenAOSQoSFullCompliance.setStatus('current')
adGenAOSQoSMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 1)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapSetId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapSetName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapIsChild"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSMapGroup = adGenAOSQoSMapGroup.setStatus('current')
adGenAOSQoSMapEntryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 2)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapEntryId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapSeqNum"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapEntrySetName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapChildSetName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapQueuingActionType"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapQueuingBWType"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapQueuingBWValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapQueuingBurstValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapMatchAll"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapDscpMarkState"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapDscpMarkValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapDscpMarkString"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapPrecedenceMarkState"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapPrecedenceMarkValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapCosMarkState"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapCosMarkValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShapeState"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShapeValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShapeBurst"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShapeEthOverhead"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapClearCounters"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapPriorityStrictRateLimiting"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSMapEntryGroup = adGenAOSQoSMapEntryGroup.setStatus('current')
adGenAOSQoSInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 3)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceOutboundMapSetName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceInboundMapSetName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceMapState"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQType"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQSubqPktLimit"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQSize"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQPktHighWater"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQMaxTotal"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQDrops"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQHdlcRingLimit"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQAvailableBW"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQConvActive"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQConvMaxActive"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTXQConvMaxTotal"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTrafficShapingRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceTrafficShapingBurst"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperCurrentBudgetSize"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperMaxBudgetSize"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperBytesPerTick"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperTickRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperQPktDepth"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperQPktDrops"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperQPktSent"), ("ADTRAN-AOS-QOS", "adGenAOSQoSInterfaceShaperQPktDelayed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSInterfaceGroup = adGenAOSQoSInterfaceGroup.setStatus('current')
adGenAOSQoSClassConvHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 4)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapParentEntryId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvSetId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSHistoryClassConvId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryMatches"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryDiscards"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryMatchesBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryDiscardsBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryDepth"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryHighWater"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryByteMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryByteDiscardRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryBitMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassConvHistoryBitDiscardRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSClassConvHistoryGroup = adGenAOSQoSClassConvHistoryGroup.setStatus('current')
adGenAOSQoSConversationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 5)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSConvId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapConvParentEntryId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvMatches"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvDiscards"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvMatchesBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvDiscardsBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvDepth"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvHighWater"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvWeight"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvPktLen"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvProttype"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvSubQType"), ("ADTRAN-AOS-QOS", "adGenAOSQoSConvPktHeader"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSConversationGroup = adGenAOSQoSConversationGroup.setStatus('current')
adGenAOSQoSPriorityRateLimiterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 6)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterParentEntryId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterSetId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterCurrBudget"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterMaxBudget"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterUpdateTimestamp"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterBudgetRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterMaxFillTime"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterMatches"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterDrops"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterMatchesBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterDropsBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterClearCounters"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterByteMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterByteDiscardRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterBitMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSPriorityRateLimiterBitDiscardRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSPriorityRateLimiterGroup = adGenAOSQoSPriorityRateLimiterGroup.setStatus('current')
adGenAOSQoSClassifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 7)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapClassifierParentEntryId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierMatches"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierDrops"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierMatchBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierDropBytes"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierPktMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierPktDropRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierByteMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierByteDropRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierBitMatchRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSClassifierBitDropRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSClassifierGroup = adGenAOSQoSClassifierGroup.setStatus('current')
adGenAOSQoSMapMatchGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 8)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapSetId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapSetName"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapMatchEntryId"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapMatchType"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapMatchACL"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapRTPMatchStartPort"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapRTPMatchEndPort"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapRTPMatchPorts"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapDscpMatchValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapPrecedenceMatchValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapProtocolMatchType"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapVlanMatchValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapFrDlciMatchValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSMapMatchGroup = adGenAOSQoSMapMatchGroup.setStatus('current')
adGenAOSQoSMapShaperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 8, 1, 9)).setObjects(("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperShapeValue"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperCurrentBudgetSize"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperMaxBudgetSize"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperBytesPerTick"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperTickRate"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperQueuePktDepth"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperQueuePktDrops"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperQueuePktsSent"), ("ADTRAN-AOS-QOS", "adGenAOSQoSMapShaperQueuePktsDelayed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSQoSMapShaperGroup = adGenAOSQoSMapShaperGroup.setStatus('current')
mibBuilder.exportSymbols("ADTRAN-AOS-QOS", adGenAOSQoSPriorityRateLimiterCurrBudget=adGenAOSQoSPriorityRateLimiterCurrBudget, adGenAOSQoSPriorityRateLimiterMaxFillTime=adGenAOSQoSPriorityRateLimiterMaxFillTime, adGenAOSQoSMapShapeState=adGenAOSQoSMapShapeState, adGenAOSQoSClassConvHistoryMatches=adGenAOSQoSClassConvHistoryMatches, adGenAOSQoSMib=adGenAOSQoSMib, adGenAOSQoSClassifierMatchBytes=adGenAOSQoSClassifierMatchBytes, adGenAOSQoSMapIsChild=adGenAOSQoSMapIsChild, adGenAOSQoSInterfaceTrafficShapingRate=adGenAOSQoSInterfaceTrafficShapingRate, adGenAOSQoSClassifierMatches=adGenAOSQoSClassifierMatches, adGenAOSQoSInterfaceShaperTickRate=adGenAOSQoSInterfaceShaperTickRate, adGenAOSQoSMapQueuingActionType=adGenAOSQoSMapQueuingActionType, adGenAOSQoSMapShaperTable=adGenAOSQoSMapShaperTable, adGenAOSQoSMapShaperCurrentBudgetSize=adGenAOSQoSMapShaperCurrentBudgetSize, adGenAOSQoSMapShapeBurst=adGenAOSQoSMapShapeBurst, adGenAOSQoSPriorityRateLimiterUpdateTimestamp=adGenAOSQoSPriorityRateLimiterUpdateTimestamp, adGenAOSQoSPriorityRateLimiterByteMatchRate=adGenAOSQoSPriorityRateLimiterByteMatchRate, adGenAOSQoSClassifierBitMatchRate=adGenAOSQoSClassifierBitMatchRate, adGenAOSQoSConversationGroup=adGenAOSQoSConversationGroup, adGenAOSQoSClassConvHistoryDiscardsBytes=adGenAOSQoSClassConvHistoryDiscardsBytes, adGenAOSQoSMapPrecedenceMatchValue=adGenAOSQoSMapPrecedenceMatchValue, adGenAOSQoSInterfaceTXQPktHighWater=adGenAOSQoSInterfaceTXQPktHighWater, adGenAOSQoSInterfaceTXQConvMaxActive=adGenAOSQoSInterfaceTXQConvMaxActive, adGenAOSQoSConvPktHeader=adGenAOSQoSConvPktHeader, adGenAOSQoSConvProttype=adGenAOSQoSConvProttype, adGenAOSQoSMapEntriesEntry=adGenAOSQoSMapEntriesEntry, adGenAOSQoSMapCosMarkValue=adGenAOSQoSMapCosMarkValue, adGenAOSQoSConversationEntry=adGenAOSQoSConversationEntry, adGenAOSQoSConvPktLen=adGenAOSQoSConvPktLen, adGenAOSQoSMapGroup=adGenAOSQoSMapGroup, adGenAOSQoSPriorityRateLimiterBitMatchRate=adGenAOSQoSPriorityRateLimiterBitMatchRate, adGenAOSQoSClassifierPktDropRate=adGenAOSQoSClassifierPktDropRate, adGenAOSQoSMapSeqNum=adGenAOSQoSMapSeqNum, adGenAOSQoSConvDepth=adGenAOSQoSConvDepth, adGenAOSQoSClassifierByteDropRate=adGenAOSQoSClassifierByteDropRate, adGenAOSQoSMapShaperMaxBudgetSize=adGenAOSQoSMapShaperMaxBudgetSize, adGenAOSQoSInterfaceTXQMaxTotal=adGenAOSQoSInterfaceTXQMaxTotal, adGenAOSQoSInterfaceTXQSize=adGenAOSQoSInterfaceTXQSize, adGenAOSQoSHistoryClassConvId=adGenAOSQoSHistoryClassConvId, adGenAOSQoSMapClassifierStatsTable=adGenAOSQoSMapClassifierStatsTable, adGenAOSQoSPriorityRateLimiterTable=adGenAOSQoSPriorityRateLimiterTable, adGenAOSQoSMapDscpMarkValue=adGenAOSQoSMapDscpMarkValue, adGenAOSQoSMapDscpMarkState=adGenAOSQoSMapDscpMarkState, Unsigned64=Unsigned64, adGenAOSQoSMapShapeValue=adGenAOSQoSMapShapeValue, adGenAOSQoSFullCompliance=adGenAOSQoSFullCompliance, adGenAOSQoSInterfaceTXQAvailableBW=adGenAOSQoSInterfaceTXQAvailableBW, adGenAOSQoSMapRTPMatchStartPort=adGenAOSQoSMapRTPMatchStartPort, adGenAOSQoSClassifierDrops=adGenAOSQoSClassifierDrops, adGenAOSQoSPriorityRateLimiterMatchesBytes=adGenAOSQoSPriorityRateLimiterMatchesBytes, adGenAOSQoSMapVlanMatchValue=adGenAOSQoSMapVlanMatchValue, adGenAOSQoSMapShaperShapeValue=adGenAOSQoSMapShaperShapeValue, adGenAOSQoSMapQueuingBWValue=adGenAOSQoSMapQueuingBWValue, adGenAOSQoSMapMatchAll=adGenAOSQoSMapMatchAll, adGenAOSQoSMapMatchTable=adGenAOSQoSMapMatchTable, adGenAOSQoSMapShaperEntry=adGenAOSQoSMapShaperEntry, adGenAOSQoSMapClearCounters=adGenAOSQoSMapClearCounters, adGenAOSQoSClassConvHistoryTable=adGenAOSQoSClassConvHistoryTable, adGenAOSQoSMapEntriesTable=adGenAOSQoSMapEntriesTable, adGenAOSQoSMapChildSetName=adGenAOSQoSMapChildSetName, adGenAOSQoSClassConvHistoryByteDiscardRate=adGenAOSQoSClassConvHistoryByteDiscardRate, adGenAOSQoSInterfaceName=adGenAOSQoSInterfaceName, adGenAOSQoSPriorityRateLimiterDrops=adGenAOSQoSPriorityRateLimiterDrops, adGenAOSQoSMapQueuingBurstValue=adGenAOSQoSMapQueuingBurstValue, adGenAOSQoSClassConvHistoryBitDiscardRate=adGenAOSQoSClassConvHistoryBitDiscardRate, adGenAOSQoSMapShaperTickRate=adGenAOSQoSMapShaperTickRate, adGenAOSQoSMapSetId=adGenAOSQoSMapSetId, adGenAOSQoSConversationTable=adGenAOSQoSConversationTable, adGenAOSQoSInterfaceEntry=adGenAOSQoSInterfaceEntry, adGenAOSQoSConvMatchesBytes=adGenAOSQoSConvMatchesBytes, adGenAOSQoSPriorityRateLimiterEntry=adGenAOSQoSPriorityRateLimiterEntry, adGenAOSQoSMapPriorityStrictRateLimiting=adGenAOSQoSMapPriorityStrictRateLimiting, adGenAOSQoSConvId=adGenAOSQoSConvId, adGenAOSQoSPriorityRateLimiterMatches=adGenAOSQoSPriorityRateLimiterMatches, adGenAOSQoSMapRTPMatchPorts=adGenAOSQoSMapRTPMatchPorts, adGenAOSQoSMapSetTable=adGenAOSQoSMapSetTable, adGenAOSQoSMapMatchType=adGenAOSQoSMapMatchType, PYSNMP_MODULE_ID=adGenAOSQoSMib, adGenAOSQoSInterfaceTXQConvActive=adGenAOSQoSInterfaceTXQConvActive, adGenAOSQoSMapEntryGroup=adGenAOSQoSMapEntryGroup, adGenAOSQoSMapConvParentEntryId=adGenAOSQoSMapConvParentEntryId, adGenAOSQoSMapMatchEntry=adGenAOSQoSMapMatchEntry, adGenAOSQoSClassConvHistoryBitMatchRate=adGenAOSQoSClassConvHistoryBitMatchRate, adGenAOSQoSMapMatchACL=adGenAOSQoSMapMatchACL, adGenAOSQoSClassConvHistoryHighWater=adGenAOSQoSClassConvHistoryHighWater, adGenAOSQoSInterfaceShaperQPktDelayed=adGenAOSQoSInterfaceShaperQPktDelayed, adGenAOSQoSInterfaceShaperMaxBudgetSize=adGenAOSQoSInterfaceShaperMaxBudgetSize, adGenAOSQoSMapPrecedenceMarkValue=adGenAOSQoSMapPrecedenceMarkValue, adGenAOSQoSMapQueuingBWType=adGenAOSQoSMapQueuingBWType, adGenAOSQoSClassifierPktMatchRate=adGenAOSQoSClassifierPktMatchRate, adGenAOSQoSPriorityRateLimiterParentEntryId=adGenAOSQoSPriorityRateLimiterParentEntryId, adGenAOSQoSClassConvSetId=adGenAOSQoSClassConvSetId, adGenAOSQoSConvMatches=adGenAOSQoSConvMatches, adGenAOSQoSInterfaceGroup=adGenAOSQoSInterfaceGroup, adGenAOSQoSMapShaperBytesPerTick=adGenAOSQoSMapShaperBytesPerTick, adGenAOSQoSInterfaceTrafficShapingBurst=adGenAOSQoSInterfaceTrafficShapingBurst, adGenAOSQoSClassConvHistoryMatchesBytes=adGenAOSQoSClassConvHistoryMatchesBytes, adGenAOSQoSConvDiscards=adGenAOSQoSConvDiscards, adGenAOSQoSPriorityRateLimiterDropsBytes=adGenAOSQoSPriorityRateLimiterDropsBytes, adGenAOSQoSCompliances=adGenAOSQoSCompliances, adGenAOSQoSClassifierDropBytes=adGenAOSQoSClassifierDropBytes, adGenAOSQoSMapShapeEthOverhead=adGenAOSQoSMapShapeEthOverhead, adGenAOSQoSClassConvHistoryGroup=adGenAOSQoSClassConvHistoryGroup, adGenAOSQoSClassConvHistoryDiscards=adGenAOSQoSClassConvHistoryDiscards, adGenAOSQoSMapPrecedenceMarkState=adGenAOSQoSMapPrecedenceMarkState, adGenAOSQoSInterfaceOutboundMapSetName=adGenAOSQoSInterfaceOutboundMapSetName, adGenAOSQoSClassifierBitDropRate=adGenAOSQoSClassifierBitDropRate, adGenAOSQoSMapShaperQueuePktDepth=adGenAOSQoSMapShaperQueuePktDepth, adGenAOSQoSClassConvHistoryByteMatchRate=adGenAOSQoSClassConvHistoryByteMatchRate, adGenAOSQoSMapShaperGroup=adGenAOSQoSMapShaperGroup, adGenAOSQoSInterfaceTXQDrops=adGenAOSQoSInterfaceTXQDrops, adGenAOSQoSInterfaceTXQType=adGenAOSQoSInterfaceTXQType, adGenAOSQoSInterfaceShaperBytesPerTick=adGenAOSQoSInterfaceShaperBytesPerTick, adGenAOSQoSInterfaceMapState=adGenAOSQoSInterfaceMapState, adGenAOSQoSPriorityRateLimiterMaxBudget=adGenAOSQoSPriorityRateLimiterMaxBudget, adGenAOSQoSGroup=adGenAOSQoSGroup, adGenAOSQoSPriorityRateLimiterBitDiscardRate=adGenAOSQoSPriorityRateLimiterBitDiscardRate, adGenAOSQoSMapDscpMarkString=adGenAOSQoSMapDscpMarkString, adGenAOSQoSMapCosMarkState=adGenAOSQoSMapCosMarkState, adGenAOSQoSConvSubQType=adGenAOSQoSConvSubQType, adGenAOSQoSConformance=adGenAOSQoSConformance, adGenAOSQoSMapSetName=adGenAOSQoSMapSetName, adGenAOSQoSInterfaceInboundMapSetName=adGenAOSQoSInterfaceInboundMapSetName, adGenAOSQoSPriorityRateLimiterBudgetRate=adGenAOSQoSPriorityRateLimiterBudgetRate, adGenAOSQos=adGenAOSQos, adGenAOSQoSMapMatchEntryId=adGenAOSQoSMapMatchEntryId, adGenAOSQoSMapDscpMatchValue=adGenAOSQoSMapDscpMatchValue, adGenAOSQoSMapProtocolMatchType=adGenAOSQoSMapProtocolMatchType, adGenAOSQoSMapEntryId=adGenAOSQoSMapEntryId, adGenAOSQoSClassConvHistoryEntry=adGenAOSQoSClassConvHistoryEntry, adGenAOSQoSMapEntrySetName=adGenAOSQoSMapEntrySetName, adGenAOSQoSMapShaperQueuePktsSent=adGenAOSQoSMapShaperQueuePktsSent, adGenAOSQoSInterfaceShaperQPktDrops=adGenAOSQoSInterfaceShaperQPktDrops, adGenAOSQoSClassifierGroup=adGenAOSQoSClassifierGroup, adGenAOSQoSInterfaceTXQConvMaxTotal=adGenAOSQoSInterfaceTXQConvMaxTotal, adGenAOSQoSInterfaceShaperValue=adGenAOSQoSInterfaceShaperValue, adGenAOSQoSConvDiscardsBytes=adGenAOSQoSConvDiscardsBytes, adGenAOSQoSConvHighWater=adGenAOSQoSConvHighWater, adGenAOSQoSInterfaceShaperQPktDepth=adGenAOSQoSInterfaceShaperQPktDepth, adGenAOSQoSMapMatchGroup=adGenAOSQoSMapMatchGroup, adGenAOSQoSPriorityRateLimiterGroup=adGenAOSQoSPriorityRateLimiterGroup, adGenAOSQoSMapSetEntry=adGenAOSQoSMapSetEntry, adGenAOSQoSMapRTPMatchEndPort=adGenAOSQoSMapRTPMatchEndPort, adGenAOSQoSMapFrDlciMatchValue=adGenAOSQoSMapFrDlciMatchValue, adGenAOSQoSMapClassifierParentEntryId=adGenAOSQoSMapClassifierParentEntryId, adGenAOSQoSMapShaperQueuePktsDelayed=adGenAOSQoSMapShaperQueuePktsDelayed, adGenAOSQoSPriorityRateLimiterSetId=adGenAOSQoSPriorityRateLimiterSetId, adGenAOSQoSMapClassifierStatsEntry=adGenAOSQoSMapClassifierStatsEntry, adGenAOSQoSConvWeight=adGenAOSQoSConvWeight, adGenAOSQoSInterfaceShaperCurrentBudgetSize=adGenAOSQoSInterfaceShaperCurrentBudgetSize, adGenAOSQoSMapShaperQueuePktDrops=adGenAOSQoSMapShaperQueuePktDrops, adGenAOSQoSInterfaceTable=adGenAOSQoSInterfaceTable, adGenAOSQoSInterfaceTXQSubqPktLimit=adGenAOSQoSInterfaceTXQSubqPktLimit, adGenAOSQoSInterfaceTXQHdlcRingLimit=adGenAOSQoSInterfaceTXQHdlcRingLimit, adGenAOSQoSMapParentEntryId=adGenAOSQoSMapParentEntryId, adGenAOSQoSClassConvHistoryDepth=adGenAOSQoSClassConvHistoryDepth, adGenAOSQoSPriorityRateLimiterByteDiscardRate=adGenAOSQoSPriorityRateLimiterByteDiscardRate, adGenAOSQoSPriorityRateLimiterClearCounters=adGenAOSQoSPriorityRateLimiterClearCounters, adGenAOSQoSClassifierByteMatchRate=adGenAOSQoSClassifierByteMatchRate, adGenAOSQoSInterfaceShaperQPktSent=adGenAOSQoSInterfaceShaperQPktSent)
