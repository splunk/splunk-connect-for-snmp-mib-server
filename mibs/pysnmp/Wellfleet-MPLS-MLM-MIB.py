#
# PySNMP MIB module Wellfleet-MPLS-MLM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-MPLS-MLM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:34:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, Integer32, TimeTicks, ObjectIdentity, NotificationType, Counter32, Gauge32, Bits, IpAddress, Unsigned32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "Integer32", "TimeTicks", "ObjectIdentity", "NotificationType", "Counter32", "Gauge32", "Bits", "IpAddress", "Unsigned32", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfMplsAtmGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfMplsAtmGroup")
wfMplsAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1))
wfMplsAtmIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 1), )
if mibBuilder.loadTexts: wfMplsAtmIfConfTable.setStatus('mandatory')
wfMplsAtmIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 1, 1), ).setIndexNames((0, "Wellfleet-MPLS-MLM-MIB", "wfMplsAtmIfConfLineNumber"))
if mibBuilder.loadTexts: wfMplsAtmIfConfEntry.setStatus('mandatory')
wfMplsAtmIfCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmIfCreate.setStatus('mandatory')
wfMplsAtmIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmIfAdminStatus.setStatus('mandatory')
wfMplsAtmIfConfLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmIfConfLineNumber.setStatus('mandatory')
wfMplsAtmIfDebugLogMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 128, 255))).clone(namedValues=NamedValues(("none", 1), ("fsm", 16), ("other", 128), ("all", 255))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmIfDebugLogMask.setStatus('mandatory')
wfMplsAtmIfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 2), )
if mibBuilder.loadTexts: wfMplsAtmIfStatusTable.setStatus('mandatory')
wfMplsAtmIfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 2, 1), ).setIndexNames((0, "Wellfleet-MPLS-MLM-MIB", "wfMplsAtmIfStatusLineNumber"))
if mibBuilder.loadTexts: wfMplsAtmIfStatusEntry.setStatus('mandatory')
wfMplsAtmIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("init", 2), ("up", 3), ("cleanup", 4), ("notpresent", 5))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmIfOperStatus.setStatus('mandatory')
wfMplsAtmIfStatusLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmIfStatusLineNumber.setStatus('mandatory')
wfMplsAtmIfCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmIfCircuit.setStatus('mandatory')
wfMplsAtmIfTotalSess = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmIfTotalSess.setStatus('mandatory')
wfMplsAtmIfTotalVcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmIfTotalVcs.setStatus('mandatory')
wfMplsAtmIfAllocVcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmIfAllocVcs.setStatus('mandatory')
wfMplsAtmSessConfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3), )
if mibBuilder.loadTexts: wfMplsAtmSessConfTable.setStatus('mandatory')
wfMplsAtmSessConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1), ).setIndexNames((0, "Wellfleet-MPLS-MLM-MIB", "wfMplsAtmSessConfLineNumber"), (0, "Wellfleet-MPLS-MLM-MIB", "wfMplsAtmSessConfIndex"))
if mibBuilder.loadTexts: wfMplsAtmSessConfEntry.setStatus('mandatory')
wfMplsAtmSessDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDelete.setStatus('mandatory')
wfMplsAtmSessAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessAdminStatus.setStatus('mandatory')
wfMplsAtmSessConfLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessConfLineNumber.setStatus('mandatory')
wfMplsAtmSessConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessConfIndex.setStatus('mandatory')
wfMplsAtmSessConfDefVclVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessConfDefVclVpi.setStatus('mandatory')
wfMplsAtmSessConfDefVclVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessConfDefVclVci.setStatus('mandatory')
wfMplsAtmSessConfVcRangeVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessConfVcRangeVpi.setStatus('mandatory')
wfMplsAtmSessConfVcRangeMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessConfVcRangeMinVci.setStatus('mandatory')
wfMplsAtmSessConfVcRangeMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535)).clone(65535)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessConfVcRangeMaxVci.setStatus('mandatory')
wfMplsAtmSessDefVclXmtPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclXmtPeakCellRate.setStatus('mandatory')
wfMplsAtmSessDefVclXmtSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclXmtSustainableCellRate.setStatus('mandatory')
wfMplsAtmSessDefVclXmtBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40))).clone(namedValues=NamedValues(("default", 40))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclXmtBurstSize.setStatus('mandatory')
wfMplsAtmSessDefVclXmtQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4))).clone('class3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclXmtQosClass.setStatus('mandatory')
wfMplsAtmSessDefVclRcvPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclRcvPeakCellRate.setStatus('mandatory')
wfMplsAtmSessDefVclRcvSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclRcvSustainableCellRate.setStatus('mandatory')
wfMplsAtmSessDefVclRcvBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40))).clone(namedValues=NamedValues(("default", 40))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclRcvBurstSize.setStatus('mandatory')
wfMplsAtmSessDefVclRcvQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4))).clone('class3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclRcvQosClass.setStatus('mandatory')
wfMplsAtmSessDefVclAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("type1", 1), ("type34", 2), ("type5", 3), ("other", 4), ("unknown", 5))).clone('type5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclAalType.setStatus('mandatory')
wfMplsAtmSessDefVclAalCpcsTransmitSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4608)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclAalCpcsTransmitSduSize.setStatus('mandatory')
wfMplsAtmSessDefVclAalCpcsReceiveSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4608)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclAalCpcsReceiveSduSize.setStatus('mandatory')
wfMplsAtmSessDefVclAalEncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("llcencaps", 2), ("null", 3), ("other", 4))).clone('llcencaps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclAalEncapsType.setStatus('mandatory')
wfMplsAtmSessDefVclCongestionIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclCongestionIndication.setStatus('mandatory')
wfMplsAtmSessDefVclCellLossPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclCellLossPriority.setStatus('mandatory')
wfMplsAtmSessDefVclXmtTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclXmtTagging.setStatus('mandatory')
wfMplsAtmSessDefVclRcvTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMplsAtmSessDefVclRcvTagging.setStatus('mandatory')
wfMplsAtmSessStatusTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4), )
if mibBuilder.loadTexts: wfMplsAtmSessStatusTable.setStatus('mandatory')
wfMplsAtmSessStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4, 1), ).setIndexNames((0, "Wellfleet-MPLS-MLM-MIB", "wfMplsAtmSessStatusLineNumber"), (0, "Wellfleet-MPLS-MLM-MIB", "wfMplsAtmSessStatusIndex"))
if mibBuilder.loadTexts: wfMplsAtmSessStatusEntry.setStatus('mandatory')
wfMplsAtmSessOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("init", 2), ("up", 3), ("cleanup", 4), ("notpresent", 5))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessOperStatus.setStatus('mandatory')
wfMplsAtmSessStatusLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessStatusLineNumber.setStatus('mandatory')
wfMplsAtmSessStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessStatusIndex.setStatus('mandatory')
wfMplsAtmSessActualVcRangeVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessActualVcRangeVpi.setStatus('mandatory')
wfMplsAtmSessActualVcRangeMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessActualVcRangeMinVci.setStatus('mandatory')
wfMplsAtmSessActualVcRangeMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessActualVcRangeMaxVci.setStatus('mandatory')
wfMplsAtmSessNegotiatedVcRangeVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessNegotiatedVcRangeVpi.setStatus('mandatory')
wfMplsAtmSessNegotiatedVcRangeMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessNegotiatedVcRangeMinVci.setStatus('mandatory')
wfMplsAtmSessNegotiatedVcRangeMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessNegotiatedVcRangeMaxVci.setStatus('mandatory')
wfMplsAtmSessInboundInuseVcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessInboundInuseVcs.setStatus('mandatory')
wfMplsAtmSessOutboundInuseVcs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmSessOutboundInuseVcs.setStatus('mandatory')
wfMplsAtmVclTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5), )
if mibBuilder.loadTexts: wfMplsAtmVclTable.setStatus('mandatory')
wfMplsAtmVclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1), ).setIndexNames((0, "Wellfleet-MPLS-MLM-MIB", "wfMplsAtmVclLineNumber"), (0, "Wellfleet-MPLS-MLM-MIB", "wfMplsAtmVclVpi"), (0, "Wellfleet-MPLS-MLM-MIB", "wfMplsAtmVclVci"))
if mibBuilder.loadTexts: wfMplsAtmVclEntry.setStatus('mandatory')
wfMplsAtmVclLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclLineNumber.setStatus('mandatory')
wfMplsAtmVclVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclVpi.setStatus('mandatory')
wfMplsAtmVclVci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclVci.setStatus('mandatory')
wfMplsAtmVclLdpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclLdpIndex.setStatus('mandatory')
wfMplsAtmVclDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2), ("duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclDirection.setStatus('mandatory')
wfMplsAtmVclState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("down", 1), ("init", 2), ("up", 3), ("cleanup", 4), ("notpresent", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclState.setStatus('mandatory')
wfMplsAtmVclType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("lsp", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclType.setStatus('mandatory')
wfMplsAtmVclLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclLastChange.setStatus('mandatory')
wfMplsAtmVclXmtPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4716))).clone(namedValues=NamedValues(("default", 4716)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclXmtPeakCellRate.setStatus('mandatory')
wfMplsAtmVclXmtSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4716))).clone(namedValues=NamedValues(("default", 4716)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclXmtSustainableCellRate.setStatus('mandatory')
wfMplsAtmVclXmtBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40))).clone(namedValues=NamedValues(("default", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclXmtBurstSize.setStatus('mandatory')
wfMplsAtmVclXmtQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclXmtQosClass.setStatus('mandatory')
wfMplsAtmVclRcvPeakCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4716))).clone(namedValues=NamedValues(("default", 4716)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclRcvPeakCellRate.setStatus('mandatory')
wfMplsAtmVclRcvSustainableCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4716))).clone(namedValues=NamedValues(("default", 4716)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclRcvSustainableCellRate.setStatus('mandatory')
wfMplsAtmVclRcvBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40))).clone(namedValues=NamedValues(("default", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclRcvBurstSize.setStatus('mandatory')
wfMplsAtmVclRcvQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclRcvQosClass.setStatus('mandatory')
wfMplsAtmVclAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("type1", 1), ("type34", 2), ("type5", 3), ("other", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclAalType.setStatus('mandatory')
wfMplsAtmVclAalCpcsTransmitSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclAalCpcsTransmitSduSize.setStatus('mandatory')
wfMplsAtmVclAalCpcsReceiveSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclAalCpcsReceiveSduSize.setStatus('mandatory')
wfMplsAtmVclAalEncapsType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("llcencaps", 2), ("null", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclAalEncapsType.setStatus('mandatory')
wfMplsAtmVclCongestionIndication = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclCongestionIndication.setStatus('mandatory')
wfMplsAtmVclCellLossPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclCellLossPriority.setStatus('mandatory')
wfMplsAtmVclXmtTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclXmtTagging.setStatus('mandatory')
wfMplsAtmVclRcvTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 16, 1, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfMplsAtmVclRcvTagging.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-MPLS-MLM-MIB", wfMplsAtmSessConfVcRangeMaxVci=wfMplsAtmSessConfVcRangeMaxVci, wfMplsAtmVclLineNumber=wfMplsAtmVclLineNumber, wfMplsAtmIfConfLineNumber=wfMplsAtmIfConfLineNumber, wfMplsAtmVclAalType=wfMplsAtmVclAalType, wfMplsAtmSessAdminStatus=wfMplsAtmSessAdminStatus, wfMplsAtmVclXmtTagging=wfMplsAtmVclXmtTagging, wfMplsAtmVclState=wfMplsAtmVclState, wfMplsAtmVclRcvBurstSize=wfMplsAtmVclRcvBurstSize, wfMplsAtmVclVci=wfMplsAtmVclVci, wfMplsAtmVclLdpIndex=wfMplsAtmVclLdpIndex, wfMplsAtmSessStatusLineNumber=wfMplsAtmSessStatusLineNumber, wfMplsAtmSessNegotiatedVcRangeMaxVci=wfMplsAtmSessNegotiatedVcRangeMaxVci, wfMplsAtmVclAalCpcsReceiveSduSize=wfMplsAtmVclAalCpcsReceiveSduSize, wfMplsAtmIfTotalSess=wfMplsAtmIfTotalSess, wfMplsAtmVclRcvPeakCellRate=wfMplsAtmVclRcvPeakCellRate, wfMplsAtmIfAdminStatus=wfMplsAtmIfAdminStatus, wfMplsAtmSessDefVclRcvTagging=wfMplsAtmSessDefVclRcvTagging, wfMplsAtmSessDefVclAalCpcsReceiveSduSize=wfMplsAtmSessDefVclAalCpcsReceiveSduSize, wfMplsAtmSessInboundInuseVcs=wfMplsAtmSessInboundInuseVcs, wfMplsAtmSessDefVclXmtQosClass=wfMplsAtmSessDefVclXmtQosClass, wfMplsAtmIfDebugLogMask=wfMplsAtmIfDebugLogMask, wfMplsAtmIfStatusTable=wfMplsAtmIfStatusTable, wfMplsAtmSessOutboundInuseVcs=wfMplsAtmSessOutboundInuseVcs, wfMplsAtmVclType=wfMplsAtmVclType, wfMplsAtmSessNegotiatedVcRangeVpi=wfMplsAtmSessNegotiatedVcRangeVpi, wfMplsAtmVclLastChange=wfMplsAtmVclLastChange, wfMplsAtmSessDelete=wfMplsAtmSessDelete, wfMplsAtmSessStatusEntry=wfMplsAtmSessStatusEntry, wfMplsAtmSessDefVclAalCpcsTransmitSduSize=wfMplsAtmSessDefVclAalCpcsTransmitSduSize, wfMplsAtmIfAllocVcs=wfMplsAtmIfAllocVcs, wfMplsAtmVclEntry=wfMplsAtmVclEntry, wfMplsAtmSessConfEntry=wfMplsAtmSessConfEntry, wfMplsAtmIfCreate=wfMplsAtmIfCreate, wfMplsAtmIfConfTable=wfMplsAtmIfConfTable, wfMplsAtmSessDefVclCellLossPriority=wfMplsAtmSessDefVclCellLossPriority, wfMplsAtmSessConfIndex=wfMplsAtmSessConfIndex, wfMplsAtmVclAalCpcsTransmitSduSize=wfMplsAtmVclAalCpcsTransmitSduSize, wfMplsAtmSessNegotiatedVcRangeMinVci=wfMplsAtmSessNegotiatedVcRangeMinVci, wfMplsAtmSessDefVclXmtPeakCellRate=wfMplsAtmSessDefVclXmtPeakCellRate, wfMplsAtmIfStatusLineNumber=wfMplsAtmIfStatusLineNumber, wfMplsAtmIfOperStatus=wfMplsAtmIfOperStatus, wfMplsAtmSessDefVclCongestionIndication=wfMplsAtmSessDefVclCongestionIndication, wfMplsAtmVclDirection=wfMplsAtmVclDirection, wfMplsAtmSessStatusTable=wfMplsAtmSessStatusTable, wfMplsAtmSessDefVclAalEncapsType=wfMplsAtmSessDefVclAalEncapsType, wfMplsAtmSessDefVclXmtSustainableCellRate=wfMplsAtmSessDefVclXmtSustainableCellRate, wfMplsAtmVclXmtSustainableCellRate=wfMplsAtmVclXmtSustainableCellRate, wfMplsAtmSessOperStatus=wfMplsAtmSessOperStatus, wfMplsAtmVclVpi=wfMplsAtmVclVpi, wfMplsAtmSessConfLineNumber=wfMplsAtmSessConfLineNumber, wfMplsAtmSessConfVcRangeVpi=wfMplsAtmSessConfVcRangeVpi, wfMplsAtmSessConfDefVclVpi=wfMplsAtmSessConfDefVclVpi, wfMplsAtmIfConfEntry=wfMplsAtmIfConfEntry, wfMplsAtmVclRcvTagging=wfMplsAtmVclRcvTagging, wfMplsAtmIfStatusEntry=wfMplsAtmIfStatusEntry, wfMplsAtmVclXmtQosClass=wfMplsAtmVclXmtQosClass, wfMplsAtmVclTable=wfMplsAtmVclTable, wfMplsAtmSessConfVcRangeMinVci=wfMplsAtmSessConfVcRangeMinVci, wfMplsAtmSessDefVclRcvSustainableCellRate=wfMplsAtmSessDefVclRcvSustainableCellRate, wfMplsAtmSessDefVclRcvBurstSize=wfMplsAtmSessDefVclRcvBurstSize, wfMplsAtmVclRcvSustainableCellRate=wfMplsAtmVclRcvSustainableCellRate, wfMplsAtmVclRcvQosClass=wfMplsAtmVclRcvQosClass, wfMplsAtmVclCongestionIndication=wfMplsAtmVclCongestionIndication, wfMplsAtmSessDefVclRcvPeakCellRate=wfMplsAtmSessDefVclRcvPeakCellRate, wfMplsAtmSessConfDefVclVci=wfMplsAtmSessConfDefVclVci, wfMplsAtmSessConfTable=wfMplsAtmSessConfTable, wfMplsAtm=wfMplsAtm, wfMplsAtmSessDefVclXmtBurstSize=wfMplsAtmSessDefVclXmtBurstSize, wfMplsAtmVclCellLossPriority=wfMplsAtmVclCellLossPriority, wfMplsAtmIfCircuit=wfMplsAtmIfCircuit, wfMplsAtmVclAalEncapsType=wfMplsAtmVclAalEncapsType, wfMplsAtmVclXmtBurstSize=wfMplsAtmVclXmtBurstSize, wfMplsAtmSessActualVcRangeVpi=wfMplsAtmSessActualVcRangeVpi, wfMplsAtmSessDefVclAalType=wfMplsAtmSessDefVclAalType, wfMplsAtmSessActualVcRangeMaxVci=wfMplsAtmSessActualVcRangeMaxVci, wfMplsAtmIfTotalVcs=wfMplsAtmIfTotalVcs, wfMplsAtmSessStatusIndex=wfMplsAtmSessStatusIndex, wfMplsAtmSessActualVcRangeMinVci=wfMplsAtmSessActualVcRangeMinVci, wfMplsAtmVclXmtPeakCellRate=wfMplsAtmVclXmtPeakCellRate, wfMplsAtmSessDefVclXmtTagging=wfMplsAtmSessDefVclXmtTagging, wfMplsAtmSessDefVclRcvQosClass=wfMplsAtmSessDefVclRcvQosClass)
