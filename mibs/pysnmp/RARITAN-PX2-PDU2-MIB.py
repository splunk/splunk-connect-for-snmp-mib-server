#
# PySNMP MIB module RARITAN-PX2-PDU2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RARITAN-PX2-PDU2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:43:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
sysLocation, sysName, sysContact = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysName", "sysContact")
MibIdentifier, ModuleIdentity, Unsigned32, Counter32, IpAddress, Integer32, iso, Counter64, Gauge32, ObjectIdentity, enterprises, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Counter32", "IpAddress", "Integer32", "iso", "Counter64", "Gauge32", "ObjectIdentity", "enterprises", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType")
DisplayString, TextualConvention, MacAddress, RowPointer, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "RowPointer", "TruthValue")
raritan = ModuleIdentity((1, 3, 6, 1, 4, 1, 13742))
raritan.setRevisions(('2016-12-02 00:00', '2016-02-16 00:00', '2016-02-09 00:00', '2015-10-26 00:00', '2015-09-30 00:00', '2015-02-18 00:00', '2014-06-04 00:00', '2014-01-09 00:00', '2014-01-07 00:00', '2013-11-21 00:00', '2013-09-18 00:00', '2013-08-01 00:00', '2013-07-10 00:00', '2013-07-02 00:00', '2013-05-21 00:00', '2013-04-26 00:00', '2013-03-27 00:00', '2013-03-25 10:00', '2013-03-25 00:00', '2013-03-18 00:00', '2013-02-25 00:00', '2013-02-04 00:00', '2013-01-24 00:00', '2012-11-20 00:00', '2012-11-15 00:00', '2012-10-05 00:00', '2012-10-04 00:00', '2012-09-28 00:00', '2012-09-21 00:00', '2012-09-20 00:00', '2012-09-17 00:00', '2012-09-04 00:00', '2012-06-22 00:00', '2012-06-18 00:00', '2012-06-06 00:00', '2012-05-25 00:00', '2012-05-15 00:00', '2012-03-26 00:00', '2011-12-13 00:00', '2011-11-29 00:00', '2011-10-25 00:00', '2011-06-16 00:00', '2011-03-22 00:00', '2011-02-21 00:00', '2011-02-14 00:00', '2011-02-08 00:00', '2011-02-03 00:00', '2011-01-31 00:00', '2010-12-15 00:00', '2010-12-13 11:31', '2010-12-13 00:00', '2010-12-07 00:00', '2010-10-07 00:00', '2010-10-04 00:00', '2010-09-01 00:00', '2010-08-05 00:00', '2010-07-23 00:00', '2010-07-22 00:00', '2010-07-21 00:00', '2010-07-14 00:00', '2010-07-06 00:00', '2010-07-01 00:00', '2010-06-30 00:00', '2010-06-21 00:00', '2010-06-03 00:00', '2010-05-27 00:00', '2010-05-24 00:00', '2010-04-19 00:00', '2010-04-15 00:00', '2010-04-08 00:00', '2010-03-29 00:00', '2010-03-25 00:00', '2010-03-16 00:00', '2010-03-01 00:00', '2010-01-29 00:00',))
if mibBuilder.loadTexts: raritan.setLastUpdated('201612020000Z')
if mibBuilder.loadTexts: raritan.setOrganization('Raritan')
pdu2 = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 0))
trapInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0))
board = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 1))
environmental = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 2))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3))
control = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4))
measurements = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5))
log = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6))
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9))
reliability = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10))
unit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2))
inlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3))
overCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4))
outlets = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5))
externalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6))
serverReachability = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7))
wires = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8))
transferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9))
powerMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10))
circuit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11))
outletControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1))
externalSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 2))
transferSwitchControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3))
actuatorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4))
rcmControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5))
inletSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6))
outletSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7))
unitSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8))
circuitSensorControl = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 4, 9))
measurementsUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1))
measurementsInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2))
measurementsOverCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3))
measurementsOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4))
measurementsExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5))
measurementsWire = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6))
measurementsTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7))
measurementsCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8))
logUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1))
logInlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2))
logOverCurrentProtector = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3))
logOutlet = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4))
logExternalSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5))
logWire = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6))
logTransferSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7))
logCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8))
reliabilityData = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1))
reliabilityErrorLog = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1))
groups = MibIdentifier((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2))
complianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1, 2)).setObjects(("RARITAN-PX2-PDU2-MIB", "configGroup"), ("RARITAN-PX2-PDU2-MIB", "logGroup"), ("RARITAN-PX2-PDU2-MIB", "measurementsGroup"), ("RARITAN-PX2-PDU2-MIB", "controlGroup"), ("RARITAN-PX2-PDU2-MIB", "trapInformationGroup"), ("RARITAN-PX2-PDU2-MIB", "trapsGroup"), ("RARITAN-PX2-PDU2-MIB", "reliabilityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev2 = complianceRev2.setStatus('current')
complianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 13742, 6, 9, 1, 1)).setObjects(("RARITAN-PX2-PDU2-MIB", "ipAddressGroup"), ("RARITAN-PX2-PDU2-MIB", "oldConfigGroup"), ("RARITAN-PX2-PDU2-MIB", "oldLogGroup"), ("RARITAN-PX2-PDU2-MIB", "oldMeasurementsGroup"), ("RARITAN-PX2-PDU2-MIB", "oldTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    complianceRev1 = complianceRev1.setStatus('deprecated')
configGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 1))
for _configGroup_obj in [[("RARITAN-PX2-PDU2-MIB", "pduCount"), ("RARITAN-PX2-PDU2-MIB", "pduManufacturer"), ("RARITAN-PX2-PDU2-MIB", "pduModel"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"), ("RARITAN-PX2-PDU2-MIB", "pduRatedVoltage"), ("RARITAN-PX2-PDU2-MIB", "pduRatedCurrent"), ("RARITAN-PX2-PDU2-MIB", "pduRatedFrequency"), ("RARITAN-PX2-PDU2-MIB", "pduRatedVA"), ("RARITAN-PX2-PDU2-MIB", "pduImage"), ("RARITAN-PX2-PDU2-MIB", "inletCount"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchCount"), ("RARITAN-PX2-PDU2-MIB", "productType"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorCount"), ("RARITAN-PX2-PDU2-MIB", "outletCount"), ("RARITAN-PX2-PDU2-MIB", "inletControllerCount"), ("RARITAN-PX2-PDU2-MIB", "outletControllerCount"), ("RARITAN-PX2-PDU2-MIB", "meteringControllerCount"), ("RARITAN-PX2-PDU2-MIB", "externalSensorCount"), ("RARITAN-PX2-PDU2-MIB", "circuitCount"), ("RARITAN-PX2-PDU2-MIB", "utcOffset"), ("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "boardVersion"), ("RARITAN-PX2-PDU2-MIB", "boardFirmwareVersion"), ("RARITAN-PX2-PDU2-MIB", "boardFirmwareTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "unitSensorLogAvailable"), ("RARITAN-PX2-PDU2-MIB", "unitSensorUnits"), ("RARITAN-PX2-PDU2-MIB", "unitSensorDecimalDigits"), ("RARITAN-PX2-PDU2-MIB", "unitSensorResolution"), ("RARITAN-PX2-PDU2-MIB", "unitSensorMaximum"), ("RARITAN-PX2-PDU2-MIB", "unitSensorMinimum"), ("RARITAN-PX2-PDU2-MIB", "unitSensorHysteresis"), ("RARITAN-PX2-PDU2-MIB", "unitSensorStateChangeDelay"), ("RARITAN-PX2-PDU2-MIB", "unitSensorLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "unitSensorLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "unitSensorUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "unitSensorUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "unitSensorEnabledThresholds"), ("RARITAN-PX2-PDU2-MIB", "unitSensorSignedMaximum"), ("RARITAN-PX2-PDU2-MIB", "unitSensorSignedMinimum"), ("RARITAN-PX2-PDU2-MIB", "unitSensorSignedLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "unitSensorSignedLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "unitSensorSignedUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "unitSensorSignedUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletLabel"), ("RARITAN-PX2-PDU2-MIB", "inletName"), ("RARITAN-PX2-PDU2-MIB", "inletPlug"), ("RARITAN-PX2-PDU2-MIB", "inletPoleCount"), ("RARITAN-PX2-PDU2-MIB", "inletRatedVoltage"), ("RARITAN-PX2-PDU2-MIB", "inletRatedCurrent"), ("RARITAN-PX2-PDU2-MIB", "inletDeviceCapabilities"), ("RARITAN-PX2-PDU2-MIB", "inletPoleCapabilities"), ("RARITAN-PX2-PDU2-MIB", "inletPlugDescriptor"), ("RARITAN-PX2-PDU2-MIB", "inletEnableState"), ("RARITAN-PX2-PDU2-MIB", "inletPoleLine"), ("RARITAN-PX2-PDU2-MIB", "inletPoleNode"), ("RARITAN-PX2-PDU2-MIB", "inletSensorLogAvailable"), ("RARITAN-PX2-PDU2-MIB", "inletSensorUnits"), ("RARITAN-PX2-PDU2-MIB", "inletSensorDecimalDigits"), ("RARITAN-PX2-PDU2-MIB", "inletSensorResolution"), ("RARITAN-PX2-PDU2-MIB", "inletSensorMaximum"), ("RARITAN-PX2-PDU2-MIB", "inletSensorMinimum"), ("RARITAN-PX2-PDU2-MIB", "inletSensorHysteresis"), ("RARITAN-PX2-PDU2-MIB", "inletSensorStateChangeDelay"), ("RARITAN-PX2-PDU2-MIB", "inletSensorLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletSensorLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletSensorUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletSensorUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletSensorEnabledThresholds"), ("RARITAN-PX2-PDU2-MIB", "inletSensorSignedMaximum"), ("RARITAN-PX2-PDU2-MIB", "inletSensorSignedMinimum"), ("RARITAN-PX2-PDU2-MIB", "inletSensorSignedLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletSensorSignedLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletSensorSignedUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletSensorSignedUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorLogAvailable"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorUnits"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorDecimalDigits"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorResolution"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorMaximum"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorMinimum"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorHysteresis"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorStateChangeDelay"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorEnabledThresholds"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorSignedMaximum"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorSignedMinimum"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorSignedLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorSignedLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorSignedUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorSignedUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "inletRCMResidualOperatingCurrent"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorLabel"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorName"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorType"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorRatedCurrent"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorCapabilities"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorPoleCount"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorPoleLine"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorPoleInNode"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorPoleOutNode"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorLogAvailable"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorUnits"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorDecimalDigits"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorResolution"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorMaximum"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorMinimum"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorHysteresis"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorStateChangeDelay"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorEnabledThresholds"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorSignedMaximum"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorSignedMinimum"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorSignedLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorSignedLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorSignedUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorSignedUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorPowerSource"), ("RARITAN-PX2-PDU2-MIB", "outletLabel"), ("RARITAN-PX2-PDU2-MIB", "outletName"), ("RARITAN-PX2-PDU2-MIB", "outletReceptacle"), ("RARITAN-PX2-PDU2-MIB", "outletPoleCount"), ("RARITAN-PX2-PDU2-MIB", "outletRatedVoltage"), ("RARITAN-PX2-PDU2-MIB", "outletRatedCurrent"), ("RARITAN-PX2-PDU2-MIB", "outletRatedVA"), ("RARITAN-PX2-PDU2-MIB", "outletDeviceCapabilities"), ("RARITAN-PX2-PDU2-MIB", "outletPoleCapabilities"), ("RARITAN-PX2-PDU2-MIB", "outletPowerCyclingPowerOffPeriod"), ("RARITAN-PX2-PDU2-MIB", "outletStateOnStartup"), ("RARITAN-PX2-PDU2-MIB", "outletUseGlobalPowerCyclingPowerOffPeriod"), ("RARITAN-PX2-PDU2-MIB", "outletSwitchable"), ("RARITAN-PX2-PDU2-MIB", "outletReceptacleDescriptor"), ("RARITAN-PX2-PDU2-MIB", "outletNonCritical"), ("RARITAN-PX2-PDU2-MIB", "outletSequenceDelay"), ("RARITAN-PX2-PDU2-MIB", "outletPoleLine"), ("RARITAN-PX2-PDU2-MIB", "outletPoleNode"), ("RARITAN-PX2-PDU2-MIB", "outletSensorLogAvailable"), ("RARITAN-PX2-PDU2-MIB", "outletSensorUnits"), ("RARITAN-PX2-PDU2-MIB", "outletSensorDecimalDigits"), ("RARITAN-PX2-PDU2-MIB", "outletSensorResolution"), ("RARITAN-PX2-PDU2-MIB", "outletSensorMaximum"), ("RARITAN-PX2-PDU2-MIB", "outletSensorMinimum"), ("RARITAN-PX2-PDU2-MIB", "outletSensorHysteresis"), ("RARITAN-PX2-PDU2-MIB", "outletSensorStateChangeDelay"), ("RARITAN-PX2-PDU2-MIB", "outletSensorLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletSensorLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletSensorUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletSensorUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletSensorEnabledThresholds"), ("RARITAN-PX2-PDU2-MIB", "outletSensorSignedMaximum"), ("RARITAN-PX2-PDU2-MIB", "outletSensorSignedMinimum"), ("RARITAN-PX2-PDU2-MIB", "outletSensorSignedLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletSensorSignedLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletSensorSignedUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletSensorSignedUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorLogAvailable"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorUnits"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorDecimalDigits"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorResolution"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorMaximum"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorMinimum"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorHysteresis"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorStateChangeDelay"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorEnabledThresholds"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorSignedMaximum"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorSignedMinimum"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorSignedLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorSignedLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorSignedUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorSignedUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "outletPowerSource"), ("RARITAN-PX2-PDU2-MIB", "externalSensorType"), ("RARITAN-PX2-PDU2-MIB", "externalSensorSerialNumber"), ("RARITAN-PX2-PDU2-MIB", "externalSensorName"), ("RARITAN-PX2-PDU2-MIB", "externalSensorDescription"), ("RARITAN-PX2-PDU2-MIB", "externalSensorXCoordinate"), ("RARITAN-PX2-PDU2-MIB", "externalSensorYCoordinate"), ("RARITAN-PX2-PDU2-MIB", "externalSensorZCoordinate"), ("RARITAN-PX2-PDU2-MIB", "externalSensorChannelNumber"), ("RARITAN-PX2-PDU2-MIB", "externalOnOffSensorSubtype"), ("RARITAN-PX2-PDU2-MIB", "externalSensorLogAvailable"), ("RARITAN-PX2-PDU2-MIB", "externalSensorUnits"), ("RARITAN-PX2-PDU2-MIB", "externalSensorDecimalDigits"), ("RARITAN-PX2-PDU2-MIB", "externalSensorResolution"), ("RARITAN-PX2-PDU2-MIB", "externalSensorMaximum"), ("RARITAN-PX2-PDU2-MIB", "externalSensorMinimum"), ("RARITAN-PX2-PDU2-MIB", "externalSensorHysteresis"), ("RARITAN-PX2-PDU2-MIB", "externalSensorStateChangeDelay"), ("RARITAN-PX2-PDU2-MIB", "externalSensorLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "externalSensorLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "externalSensorUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "externalSensorUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "externalSensorEnabledThresholds"), ("RARITAN-PX2-PDU2-MIB", "externalSensorsZCoordinateUnits"), ("RARITAN-PX2-PDU2-MIB", "externalSensorIsActuator"), ("RARITAN-PX2-PDU2-MIB", "externalSensorPosition"), ("RARITAN-PX2-PDU2-MIB", "externalSensorUseDefaultThresholds"), ("RARITAN-PX2-PDU2-MIB", "externalSensorTypeDefaultHysteresis"), ("RARITAN-PX2-PDU2-MIB", "externalSensorTypeDefaultStateChangeDelay"), ("RARITAN-PX2-PDU2-MIB", "externalSensorTypeDefaultLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "externalSensorTypeDefaultLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "externalSensorTypeDefaultUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "externalSensorTypeDefaultUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "externalSensorTypeDefaultEnabledThresholds"), ("RARITAN-PX2-PDU2-MIB", "measurementPeriod"), ("RARITAN-PX2-PDU2-MIB", "measurementsPerLogEntry"), ("RARITAN-PX2-PDU2-MIB", "logSize"), ("RARITAN-PX2-PDU2-MIB", "unitDeviceCapabilities"), ("RARITAN-PX2-PDU2-MIB", "globalOutletPowerCyclingPowerOffPeriod"), ("RARITAN-PX2-PDU2-MIB", "globalOutletStateOnStartup"), ("RARITAN-PX2-PDU2-MIB", "relayBehaviorOnPowerLoss"), ("RARITAN-PX2-PDU2-MIB", "pduPowerCyclingPowerOffPeriod"), ("RARITAN-PX2-PDU2-MIB", "pduDaisychainMemberType"), ("RARITAN-PX2-PDU2-MIB", "managedExternalSensorCount"), ("RARITAN-PX2-PDU2-MIB", "outletPowerupSequence"), ("RARITAN-PX2-PDU2-MIB", "loadShedding"), ("RARITAN-PX2-PDU2-MIB", "serverCount"), ("RARITAN-PX2-PDU2-MIB", "serverIPAddress"), ("RARITAN-PX2-PDU2-MIB", "serverPingEnabled"), ("RARITAN-PX2-PDU2-MIB", "inrushGuardDelay"), ("RARITAN-PX2-PDU2-MIB", "cascadedDeviceConnected"), ("RARITAN-PX2-PDU2-MIB", "synchronizeWithNTPServer"), ("RARITAN-PX2-PDU2-MIB", "firstNTPServerAddressType"), ("RARITAN-PX2-PDU2-MIB", "firstNTPServerAddress"), ("RARITAN-PX2-PDU2-MIB", "secondNTPServerAddressType"), ("RARITAN-PX2-PDU2-MIB", "secondNTPServerAddress"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchLabel"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchName"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchPreferredInlet"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchPoleCount"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchAutoReTransferEnabled"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchAutoReTransferWaitTime"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchAutoReTransferRequiresPhaseSync"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchFrontPanelManualTransferButtonEnabled"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchCapabilities"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchPoleLine"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchPoleIn1Node"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchPoleIn2Node"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchPoleOutNode"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorLogAvailable"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorUnits"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorDecimalDigits"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorResolution"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorMaximum"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorMinimum"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorHysteresis")], [("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorStateChangeDelay"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorEnabledThresholds"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorSignedMaximum"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorSignedMinimum"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorSignedLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorSignedLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorSignedUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorSignedUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchPowerSource1"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchPowerSource2"), ("RARITAN-PX2-PDU2-MIB", "peripheralDevicePackageSerialNumber"), ("RARITAN-PX2-PDU2-MIB", "peripheralDevicePackageModel"), ("RARITAN-PX2-PDU2-MIB", "peripheralDevicePackageFirmwareVersion"), ("RARITAN-PX2-PDU2-MIB", "peripheralDevicePackageMinFirmwareVersion"), ("RARITAN-PX2-PDU2-MIB", "peripheralDevicePackageFirmwareTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "peripheralDevicePackagePosition"), ("RARITAN-PX2-PDU2-MIB", "peripheralDevicePackageState"), ("RARITAN-PX2-PDU2-MIB", "deviceCascadeType"), ("RARITAN-PX2-PDU2-MIB", "deviceCascadePosition"), ("RARITAN-PX2-PDU2-MIB", "peripheralDevicesAutoManagement"), ("RARITAN-PX2-PDU2-MIB", "externalSensorAlarmedToNormalDelay"), ("RARITAN-PX2-PDU2-MIB", "frontPanelOutletSwitching"), ("RARITAN-PX2-PDU2-MIB", "frontPanelRCMSelfTest"), ("RARITAN-PX2-PDU2-MIB", "frontPanelActuatorControl"), ("RARITAN-PX2-PDU2-MIB", "powerMeterPanelPositions"), ("RARITAN-PX2-PDU2-MIB", "powerMeterPanelLayout"), ("RARITAN-PX2-PDU2-MIB", "powerMeterPanelNumbering"), ("RARITAN-PX2-PDU2-MIB", "powerMeterPhaseCTRating"), ("RARITAN-PX2-PDU2-MIB", "powerMeterNeutralCTRating"), ("RARITAN-PX2-PDU2-MIB", "powerMeterEarthCTRating"), ("RARITAN-PX2-PDU2-MIB", "powerMeterBranchCount"), ("RARITAN-PX2-PDU2-MIB", "powerMeterType"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleCount"), ("RARITAN-PX2-PDU2-MIB", "circuitName"), ("RARITAN-PX2-PDU2-MIB", "circuitType"), ("RARITAN-PX2-PDU2-MIB", "circuitRatedCurrent"), ("RARITAN-PX2-PDU2-MIB", "circuitCTRating"), ("RARITAN-PX2-PDU2-MIB", "circuitCapabilities"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleCapabilities"), ("RARITAN-PX2-PDU2-MIB", "circuitPowerSource"), ("RARITAN-PX2-PDU2-MIB", "circuitPolePanelPosition"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleCTNumber"), ("RARITAN-PX2-PDU2-MIB", "circuitPolePhase"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorLogAvailable"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorUnits"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorDecimalDigits"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorResolution"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorMaximum"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorMinimum"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorHysteresis"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorStateChangeDelay"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorEnabledThresholds"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorSignedMaximum"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorSignedMinimum"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorSignedLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorSignedLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorSignedUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorSignedUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorLogAvailable"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorUnits"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorDecimalDigits"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorResolution"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorMaximum"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorMinimum"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorHysteresis"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorStateChangeDelay"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorEnabledThresholds"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorSignedMaximum"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorSignedMinimum"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorSignedLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorSignedLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorSignedUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorSignedUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "activeDNSServerAddressType"), ("RARITAN-PX2-PDU2-MIB", "activeDNSServerAddress"), ("RARITAN-PX2-PDU2-MIB", "activeDNSServerCount"), ("RARITAN-PX2-PDU2-MIB", "activeNTPServerAddressType"), ("RARITAN-PX2-PDU2-MIB", "activeNTPServerAddress"), ("RARITAN-PX2-PDU2-MIB", "activeNTPServerCount")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        configGroup = configGroup.setObjects(*_configGroup_obj)
    else:
        configGroup = configGroup.setObjects(*_configGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    configGroup = configGroup.setStatus('current')
ipAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 12)).setObjects(("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "netmask"), ("RARITAN-PX2-PDU2-MIB", "gateway"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetNetmask"), ("RARITAN-PX2-PDU2-MIB", "pxInetGateway"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipAddressGroup = ipAddressGroup.setStatus('deprecated')
obsoleteObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 20)).setObjects(("RARITAN-PX2-PDU2-MIB", "useDHCPProvidedNTPServer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    obsoleteObjectsGroup = obsoleteObjectsGroup.setStatus('obsolete')
oldConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 13)).setObjects(("RARITAN-PX2-PDU2-MIB", "outletSequencingDelay"), ("RARITAN-PX2-PDU2-MIB", "unitSensorAccuracy"), ("RARITAN-PX2-PDU2-MIB", "unitSensorTolerance"), ("RARITAN-PX2-PDU2-MIB", "inletSensorAccuracy"), ("RARITAN-PX2-PDU2-MIB", "inletSensorTolerance"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorAccuracy"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorTolerance"), ("RARITAN-PX2-PDU2-MIB", "outletSensorAccuracy"), ("RARITAN-PX2-PDU2-MIB", "outletSensorTolerance"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorAccuracy"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorTolerance"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorAccuracy"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorTolerance"), ("RARITAN-PX2-PDU2-MIB", "externalSensorAccuracy"), ("RARITAN-PX2-PDU2-MIB", "externalSensorTolerance"), ("RARITAN-PX2-PDU2-MIB", "wireSensorAccuracy"), ("RARITAN-PX2-PDU2-MIB", "wireSensorTolerance"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorAccuracy"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorTolerance"), ("RARITAN-PX2-PDU2-MIB", "wireCount"), ("RARITAN-PX2-PDU2-MIB", "wireLabel"), ("RARITAN-PX2-PDU2-MIB", "wireCapabilities"), ("RARITAN-PX2-PDU2-MIB", "wireSensorLogAvailable"), ("RARITAN-PX2-PDU2-MIB", "wireSensorUnits"), ("RARITAN-PX2-PDU2-MIB", "wireSensorDecimalDigits"), ("RARITAN-PX2-PDU2-MIB", "wireSensorResolution"), ("RARITAN-PX2-PDU2-MIB", "wireSensorMaximum"), ("RARITAN-PX2-PDU2-MIB", "wireSensorMinimum"), ("RARITAN-PX2-PDU2-MIB", "wireSensorHysteresis"), ("RARITAN-PX2-PDU2-MIB", "wireSensorStateChangeDelay"), ("RARITAN-PX2-PDU2-MIB", "wireSensorLowerCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "wireSensorLowerWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "wireSensorUpperCriticalThreshold"), ("RARITAN-PX2-PDU2-MIB", "wireSensorUpperWarningThreshold"), ("RARITAN-PX2-PDU2-MIB", "wireSensorEnabledThresholds"), ("RARITAN-PX2-PDU2-MIB", "wirePowerSource"), ("RARITAN-PX2-PDU2-MIB", "inletRatedFrequency"), ("RARITAN-PX2-PDU2-MIB", "inletRatedVA"), ("RARITAN-PX2-PDU2-MIB", "pxMACAddress"), ("RARITAN-PX2-PDU2-MIB", "networkInterfaceType"), ("RARITAN-PX2-PDU2-MIB", "activeDNSServerAddressSource"), ("RARITAN-PX2-PDU2-MIB", "activeNTPServerAddressSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldConfigGroup = oldConfigGroup.setStatus('deprecated')
logGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 2)).setObjects(("RARITAN-PX2-PDU2-MIB", "dataLogging"), ("RARITAN-PX2-PDU2-MIB", "oldestLogID"), ("RARITAN-PX2-PDU2-MIB", "newestLogID"), ("RARITAN-PX2-PDU2-MIB", "logTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "dataLoggingEnableForAllSensors"), ("RARITAN-PX2-PDU2-MIB", "logUnitSensorDataAvailable"), ("RARITAN-PX2-PDU2-MIB", "logUnitSensorState"), ("RARITAN-PX2-PDU2-MIB", "logUnitSensorAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logUnitSensorMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logUnitSensorMinValue"), ("RARITAN-PX2-PDU2-MIB", "logUnitSensorSignedAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logUnitSensorSignedMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logUnitSensorSignedMinValue"), ("RARITAN-PX2-PDU2-MIB", "logInletSensorDataAvailable"), ("RARITAN-PX2-PDU2-MIB", "logInletSensorState"), ("RARITAN-PX2-PDU2-MIB", "logInletSensorAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logInletSensorMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logInletSensorMinValue"), ("RARITAN-PX2-PDU2-MIB", "logInletSensorSignedAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logInletSensorSignedMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logInletSensorSignedMinValue"), ("RARITAN-PX2-PDU2-MIB", "logInletPoleSensorDataAvailable"), ("RARITAN-PX2-PDU2-MIB", "logInletPoleSensorState"), ("RARITAN-PX2-PDU2-MIB", "logInletPoleSensorAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logInletPoleSensorMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logInletPoleSensorMinValue"), ("RARITAN-PX2-PDU2-MIB", "logInletPoleSensorSignedAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logInletPoleSensorSignedMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logInletPoleSensorSignedMinValue"), ("RARITAN-PX2-PDU2-MIB", "logOutletSensorDataAvailable"), ("RARITAN-PX2-PDU2-MIB", "logOutletSensorState"), ("RARITAN-PX2-PDU2-MIB", "logOutletSensorAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logOutletSensorMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logOutletSensorMinValue"), ("RARITAN-PX2-PDU2-MIB", "logOutletSensorSignedAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logOutletSensorSignedMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logOutletSensorSignedMinValue"), ("RARITAN-PX2-PDU2-MIB", "logOutletPoleSensorDataAvailable"), ("RARITAN-PX2-PDU2-MIB", "logOutletPoleSensorState"), ("RARITAN-PX2-PDU2-MIB", "logOutletPoleSensorAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logOutletPoleSensorMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logOutletPoleSensorMinValue"), ("RARITAN-PX2-PDU2-MIB", "logOutletPoleSensorSignedAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logOutletPoleSensorSignedMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logOutletPoleSensorSignedMinValue"), ("RARITAN-PX2-PDU2-MIB", "logOverCurrentProtectorSensorDataAvailable"), ("RARITAN-PX2-PDU2-MIB", "logOverCurrentProtectorSensorState"), ("RARITAN-PX2-PDU2-MIB", "logOverCurrentProtectorSensorAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logOverCurrentProtectorSensorMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logOverCurrentProtectorSensorMinValue"), ("RARITAN-PX2-PDU2-MIB", "logOverCurrentProtectorSensorSignedAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logOverCurrentProtectorSensorSignedMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logOverCurrentProtectorSensorSignedMinValue"), ("RARITAN-PX2-PDU2-MIB", "logExternalSensorDataAvailable"), ("RARITAN-PX2-PDU2-MIB", "logExternalSensorState"), ("RARITAN-PX2-PDU2-MIB", "logExternalSensorAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logExternalSensorMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logExternalSensorMinValue"), ("RARITAN-PX2-PDU2-MIB", "logTransferSwitchSensorDataAvailable"), ("RARITAN-PX2-PDU2-MIB", "logTransferSwitchSensorState"), ("RARITAN-PX2-PDU2-MIB", "logTransferSwitchSensorAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logTransferSwitchSensorMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logTransferSwitchSensorMinValue"), ("RARITAN-PX2-PDU2-MIB", "logTransferSwitchSensorSignedAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logTransferSwitchSensorSignedMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logTransferSwitchSensorSignedMinValue"), ("RARITAN-PX2-PDU2-MIB", "logCircuitSensorDataAvailable"), ("RARITAN-PX2-PDU2-MIB", "logCircuitSensorState"), ("RARITAN-PX2-PDU2-MIB", "logCircuitSensorAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logCircuitSensorMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logCircuitSensorMinValue"), ("RARITAN-PX2-PDU2-MIB", "logCircuitSensorSignedAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logCircuitSensorSignedMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logCircuitSensorSignedMinValue"), ("RARITAN-PX2-PDU2-MIB", "logCircuitPoleSensorDataAvailable"), ("RARITAN-PX2-PDU2-MIB", "logCircuitPoleSensorState"), ("RARITAN-PX2-PDU2-MIB", "logCircuitPoleSensorAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logCircuitPoleSensorMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logCircuitPoleSensorMinValue"), ("RARITAN-PX2-PDU2-MIB", "logCircuitPoleSensorSignedAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logCircuitPoleSensorSignedMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logCircuitPoleSensorSignedMinValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    logGroup = logGroup.setStatus('current')
oldLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 14)).setObjects(("RARITAN-PX2-PDU2-MIB", "logWireSensorDataAvailable"), ("RARITAN-PX2-PDU2-MIB", "logWireSensorState"), ("RARITAN-PX2-PDU2-MIB", "logWireSensorAvgValue"), ("RARITAN-PX2-PDU2-MIB", "logWireSensorMaxValue"), ("RARITAN-PX2-PDU2-MIB", "logWireSensorMinValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldLogGroup = oldLogGroup.setStatus('deprecated')
measurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 3)).setObjects(("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorIsAvailable"), ("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletSensorIsAvailable"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletPoleSensorIsAvailable"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletPoleSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletPoleSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletPoleSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletPoleSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletSensorIsAvailable"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletPoleSensorIsAvailable"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletPoleSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletPoleSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletPoleSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletPoleSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsOverCurrentProtectorSensorIsAvailable"), ("RARITAN-PX2-PDU2-MIB", "measurementsOverCurrentProtectorSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsOverCurrentProtectorSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsOverCurrentProtectorSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsOverCurrentProtectorSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsExternalSensorIsAvailable"), ("RARITAN-PX2-PDU2-MIB", "measurementsExternalSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsExternalSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsExternalSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsTransferSwitchSensorIsAvailable"), ("RARITAN-PX2-PDU2-MIB", "measurementsTransferSwitchSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsTransferSwitchSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsTransferSwitchSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsTransferSwitchSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitSensorIsAvailable"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitPoleSensorIsAvailable"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitPoleSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitPoleSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitPoleSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitPoleSensorSignedValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    measurementsGroup = measurementsGroup.setStatus('current')
oldMeasurementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 15)).setObjects(("RARITAN-PX2-PDU2-MIB", "measurementsWireSensorIsAvailable"), ("RARITAN-PX2-PDU2-MIB", "measurementsWireSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsWireSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsWireSensorTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldMeasurementsGroup = oldMeasurementsGroup.setStatus('deprecated')
controlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 4)).setObjects(("RARITAN-PX2-PDU2-MIB", "switchingOperation"), ("RARITAN-PX2-PDU2-MIB", "outletSwitchingState"), ("RARITAN-PX2-PDU2-MIB", "outletSwitchingTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchActiveInlet"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchTransferToInlet"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchAlarmOverride"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchLastTransferReason"), ("RARITAN-PX2-PDU2-MIB", "actuatorState"), ("RARITAN-PX2-PDU2-MIB", "rcmState"), ("RARITAN-PX2-PDU2-MIB", "inletSensorResetValue"), ("RARITAN-PX2-PDU2-MIB", "outletSensorResetValue"), ("RARITAN-PX2-PDU2-MIB", "unitSensorResetValue"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorResetValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    controlGroup = controlGroup.setStatus('current')
trapInformationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 5)).setObjects(("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "targetUser"), ("RARITAN-PX2-PDU2-MIB", "imageVersion"), ("RARITAN-PX2-PDU2-MIB", "roleName"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "inletPoleNumber"), ("RARITAN-PX2-PDU2-MIB", "outletPoleNumber"), ("RARITAN-PX2-PDU2-MIB", "externalSensorNumber"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "smtpMessageRecipients"), ("RARITAN-PX2-PDU2-MIB", "smtpServer"), ("RARITAN-PX2-PDU2-MIB", "errorDescription"), ("RARITAN-PX2-PDU2-MIB", "deviceChangedParameter"), ("RARITAN-PX2-PDU2-MIB", "changedParameterNewValue"), ("RARITAN-PX2-PDU2-MIB", "lhxSupportEnabled"), ("RARITAN-PX2-PDU2-MIB", "webcamModel"), ("RARITAN-PX2-PDU2-MIB", "webcamConnectionPort"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "peripheralDeviceRomcode"), ("RARITAN-PX2-PDU2-MIB", "peripheralDeviceFirmwareUpdateState"), ("RARITAN-PX2-PDU2-MIB", "circuitNumber"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleNumber"), ("RARITAN-PX2-PDU2-MIB", "phoneNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapInformationGroup = trapInformationGroup.setStatus('current')
trapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 9)).setObjects(("RARITAN-PX2-PDU2-MIB", "systemStarted"), ("RARITAN-PX2-PDU2-MIB", "systemReset"), ("RARITAN-PX2-PDU2-MIB", "userLogin"), ("RARITAN-PX2-PDU2-MIB", "userLogout"), ("RARITAN-PX2-PDU2-MIB", "userAuthenticationFailure"), ("RARITAN-PX2-PDU2-MIB", "userSessionTimeout"), ("RARITAN-PX2-PDU2-MIB", "userAdded"), ("RARITAN-PX2-PDU2-MIB", "userModified"), ("RARITAN-PX2-PDU2-MIB", "userDeleted"), ("RARITAN-PX2-PDU2-MIB", "roleAdded"), ("RARITAN-PX2-PDU2-MIB", "roleModified"), ("RARITAN-PX2-PDU2-MIB", "roleDeleted"), ("RARITAN-PX2-PDU2-MIB", "deviceUpdateStarted"), ("RARITAN-PX2-PDU2-MIB", "deviceUpdateCompleted"), ("RARITAN-PX2-PDU2-MIB", "userBlocked"), ("RARITAN-PX2-PDU2-MIB", "powerControl"), ("RARITAN-PX2-PDU2-MIB", "userPasswordChanged"), ("RARITAN-PX2-PDU2-MIB", "passwordSettingsChanged"), ("RARITAN-PX2-PDU2-MIB", "firmwareValidationFailed"), ("RARITAN-PX2-PDU2-MIB", "logFileCleared"), ("RARITAN-PX2-PDU2-MIB", "bulkConfigurationSaved"), ("RARITAN-PX2-PDU2-MIB", "bulkConfigurationCopied"), ("RARITAN-PX2-PDU2-MIB", "inletSensorStateChange"), ("RARITAN-PX2-PDU2-MIB", "inletPoleSensorStateChange"), ("RARITAN-PX2-PDU2-MIB", "outletSensorStateChange"), ("RARITAN-PX2-PDU2-MIB", "outletPoleSensorStateChange"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorSensorStateChange"), ("RARITAN-PX2-PDU2-MIB", "externalSensorStateChange"), ("RARITAN-PX2-PDU2-MIB", "smtpMessageTransmissionFailure"), ("RARITAN-PX2-PDU2-MIB", "ldapError"), ("RARITAN-PX2-PDU2-MIB", "deviceUpdateFailed"), ("RARITAN-PX2-PDU2-MIB", "loadSheddingModeEntered"), ("RARITAN-PX2-PDU2-MIB", "loadSheddingModeExited"), ("RARITAN-PX2-PDU2-MIB", "pingServerEnabled"), ("RARITAN-PX2-PDU2-MIB", "pingServerDisabled"), ("RARITAN-PX2-PDU2-MIB", "serverNotReachable"), ("RARITAN-PX2-PDU2-MIB", "serverReachable"), ("RARITAN-PX2-PDU2-MIB", "rfCodeTagConnected"), ("RARITAN-PX2-PDU2-MIB", "rfCodeTagDisconnected"), ("RARITAN-PX2-PDU2-MIB", "deviceIdentificationChanged"), ("RARITAN-PX2-PDU2-MIB", "usbSlaveConnected"), ("RARITAN-PX2-PDU2-MIB", "usbSlaveDisconnected"), ("RARITAN-PX2-PDU2-MIB", "lhxSupportChanged"), ("RARITAN-PX2-PDU2-MIB", "userAcceptedRestrictedServiceAgreement"), ("RARITAN-PX2-PDU2-MIB", "userDeclinedRestrictedServiceAgreement"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchSensorStateChange"), ("RARITAN-PX2-PDU2-MIB", "deviceSettingsSaved"), ("RARITAN-PX2-PDU2-MIB", "deviceSettingsRestored"), ("RARITAN-PX2-PDU2-MIB", "webcamInserted"), ("RARITAN-PX2-PDU2-MIB", "webcamRemoved"), ("RARITAN-PX2-PDU2-MIB", "inletEnabled"), ("RARITAN-PX2-PDU2-MIB", "inletDisabled"), ("RARITAN-PX2-PDU2-MIB", "serverConnectivityUnrecoverable"), ("RARITAN-PX2-PDU2-MIB", "radiusError"), ("RARITAN-PX2-PDU2-MIB", "serverReachabilityError"), ("RARITAN-PX2-PDU2-MIB", "inletSensorReset"), ("RARITAN-PX2-PDU2-MIB", "outletSensorReset"), ("RARITAN-PX2-PDU2-MIB", "unitSensorReset"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorReset"), ("RARITAN-PX2-PDU2-MIB", "unknownPeripheralDeviceAttached"), ("RARITAN-PX2-PDU2-MIB", "peripheralDeviceFirmwareUpdate"), ("RARITAN-PX2-PDU2-MIB", "unitSensorStateChange"), ("RARITAN-PX2-PDU2-MIB", "circuitSensorStateChange"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleSensorStateChange"), ("RARITAN-PX2-PDU2-MIB", "circuitAdded"), ("RARITAN-PX2-PDU2-MIB", "circuitDeleted"), ("RARITAN-PX2-PDU2-MIB", "circuitModified"), ("RARITAN-PX2-PDU2-MIB", "powerMeterAdded"), ("RARITAN-PX2-PDU2-MIB", "powerMeterDeleted"), ("RARITAN-PX2-PDU2-MIB", "powerMeterModified"), ("RARITAN-PX2-PDU2-MIB", "smsMessageTransmissionFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapsGroup = trapsGroup.setStatus('current')
oldTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 16)).setObjects(("RARITAN-PX2-PDU2-MIB", "wireSensorStateChange"), ("RARITAN-PX2-PDU2-MIB", "pduSensorStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    oldTrapsGroup = oldTrapsGroup.setStatus('deprecated')
reliabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 13742, 6, 9, 2, 10)).setObjects(("RARITAN-PX2-PDU2-MIB", "reliabilityId"), ("RARITAN-PX2-PDU2-MIB", "reliabilityDataValue"), ("RARITAN-PX2-PDU2-MIB", "reliabilityDataMaxPossible"), ("RARITAN-PX2-PDU2-MIB", "reliabilityDataWorstValue"), ("RARITAN-PX2-PDU2-MIB", "reliabilityDataThreshold"), ("RARITAN-PX2-PDU2-MIB", "reliabilityDataRawUpperBytes"), ("RARITAN-PX2-PDU2-MIB", "reliabilityDataRawLowerBytes"), ("RARITAN-PX2-PDU2-MIB", "reliabilityDataFlags"), ("RARITAN-PX2-PDU2-MIB", "reliabilityErrorLogId"), ("RARITAN-PX2-PDU2-MIB", "reliabilityErrorLogValue"), ("RARITAN-PX2-PDU2-MIB", "reliabilityErrorLogThreshold"), ("RARITAN-PX2-PDU2-MIB", "reliabilityErrorLogRawUpperBytes"), ("RARITAN-PX2-PDU2-MIB", "reliabilityErrorLogRawLowerBytes"), ("RARITAN-PX2-PDU2-MIB", "reliabilityErrorLogPOH"), ("RARITAN-PX2-PDU2-MIB", "reliabilityErrorLogTime"), ("RARITAN-PX2-PDU2-MIB", "reliabilityDataTableSequenceNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    reliabilityGroup = reliabilityGroup.setStatus('current')
class SensorTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))
    namedValues = NamedValues(("rmsCurrent", 1), ("peakCurrent", 2), ("unbalancedCurrent", 3), ("rmsVoltage", 4), ("activePower", 5), ("apparentPower", 6), ("powerFactor", 7), ("activeEnergy", 8), ("apparentEnergy", 9), ("temperature", 10), ("humidity", 11), ("airFlow", 12), ("airPressure", 13), ("onOff", 14), ("trip", 15), ("vibration", 16), ("waterDetection", 17), ("smokeDetection", 18), ("binary", 19), ("contact", 20), ("fanSpeed", 21), ("surgeProtectorStatus", 22), ("frequency", 23), ("phaseAngle", 24), ("rmsVoltageLN", 25), ("residualCurrent", 26), ("rcmState", 27), ("absoluteHumidity", 28), ("reactivePower", 29), ("other", 30), ("none", 31), ("powerQuality", 32), ("overloadStatus", 33), ("overheatStatus", 34), ("displacementPowerFactor", 35), ("fanStatus", 37), ("inletPhaseSyncAngle", 38), ("inletPhaseSync", 39), ("operatingState", 40), ("activeInlet", 41), ("illuminance", 42), ("doorContact", 43), ("tamperDetection", 44), ("motionDetection", 45), ("i1smpsStatus", 46), ("i2smpsStatus", 47), ("switchStatus", 48))

class SensorStateEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
    namedValues = NamedValues(("unavailable", -1), ("open", 0), ("closed", 1), ("belowLowerCritical", 2), ("belowLowerWarning", 3), ("normal", 4), ("aboveUpperWarning", 5), ("aboveUpperCritical", 6), ("on", 7), ("off", 8), ("detected", 9), ("notDetected", 10), ("alarmed", 11), ("ok", 12), ("fail", 14), ("yes", 15), ("no", 16), ("standby", 17), ("one", 18), ("two", 19), ("inSync", 20), ("outOfSync", 21), ("i1OpenFault", 22), ("i1ShortFault", 23), ("i2OpenFault", 24), ("i2ShortFault", 25), ("fault", 26), ("warning", 27), ("critical", 28), ("selfTest", 29), ("nonRedundant", 30))

class PlugTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49))
    namedValues = NamedValues(("plugOTHER", -1), ("plugNONE", 0), ("plug56P320", 1), ("plug56P520", 2), ("plug56P532", 3), ("plugCS8365C", 4), ("plugIEC320C14", 5), ("plugIEC320C20", 6), ("plugIEC603093WIRE250V16A", 7), ("plugIEC603093WIRE250V20A", 8), ("plugIEC603093WIRE250V30A", 9), ("plugIEC603093WIRE250V32A", 10), ("plugIEC603093WIRE250V60A", 11), ("plugIEC603093WIRE250V63A", 12), ("plugIEC603093WIRE250V100A", 13), ("plugIEC603093WIRE250V125A", 14), ("plugIEC603094WIRE250V20A", 15), ("plugIEC603094WIRE250V30A", 16), ("plugIEC603094WIRE250V60A", 17), ("plugIEC603094WIRE250V100A", 18), ("plugIEC603095WIRE208V20A", 23), ("plugIEC603095WIRE208V30A", 24), ("plugIEC603095WIRE208V60A", 25), ("plugIEC603095WIRE208V100A", 26), ("plugIEC603095WIRE415V16A", 27), ("plugIEC603095WIRE415V32A", 28), ("plugIEC603095WIRE415V63A", 29), ("plugIEC603095WIRE415V125A", 30), ("plugIEC603095WIRE480V20A", 31), ("plugIEC603095WIRE480V30A", 32), ("plugIEC603095WIRE480V60A", 33), ("plugIEC603095WIRE480V100A", 34), ("plugNEMA515P", 35), ("plugNEMAL515P", 36), ("plugNEMA520P", 37), ("plugNEMAL520P", 38), ("plugNEMAL530P", 39), ("plugNEMAL615P", 40), ("plugNEMAL620P", 41), ("plugNEMAL630P", 42), ("plugNEMAL1520P", 43), ("plugNEMAL1530P", 44), ("plugNEMAL2120P", 45), ("plugNEMAL2130P", 46), ("plugNEMAL2230P", 47), ("plug56P320F", 48), ("plug56PA320", 49))

class ReceptacleTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48))
    namedValues = NamedValues(("receptacleOTHER", -1), ("receptacleNONE", 0), ("receptacleBS1363", 1), ("receptacle56P532", 3), ("receptacleCS8364C", 4), ("receptacleIEC320C13", 5), ("receptacleIEC320C19", 6), ("receptacleIEC603093WIRE250V16A", 7), ("receptacleIEC603093WIRE250V20A", 8), ("receptacleIEC603093WIRE250V30A", 9), ("receptacleIEC603093WIRE250V32A", 10), ("receptacleIEC603093WIRE250V60A", 11), ("receptacleIEC603093WIRE250V63A", 12), ("receptacleIEC603093WIRE250V100A", 13), ("receptacleIEC603093WIRE250V125A", 14), ("receptacleIEC603094WIRE250V20A", 15), ("receptacleIEC603094WIRE250V30A", 16), ("receptacleIEC603094WIRE250V60A", 17), ("receptacleIEC603094WIRE250V100A", 18), ("receptacleIEC603095WIRE208V20A", 23), ("receptacleIEC603095WIRE208V30A", 24), ("receptacleIEC603095WIRE208V60A", 25), ("receptacleIEC603095WIRE208V100A", 26), ("receptacleIEC603095WIRE415V16A", 27), ("receptacleIEC603095WIRE415V32A", 28), ("receptacleIEC603095WIRE415V63A", 29), ("receptacleIEC603095WIRE415V125A", 30), ("receptacleIEC603095WIRE480V20A", 31), ("receptacleIEC603095WIRE480V30A", 32), ("receptacleIEC603095WIRE480V60A", 33), ("receptacleIEC603095WIRE480V100A", 34), ("receptacleNEMA515R", 35), ("receptacleNEMAL515R", 36), ("receptacleNEMA520R", 37), ("receptacleNEMAL520R", 38), ("receptacleNEMAL530R", 39), ("receptacleNEMAL615R", 40), ("receptacleNEMAL620R", 41), ("receptacleNEMAL630R", 42), ("receptacleNEMAL1520R", 43), ("receptacleNEMAL1530R", 44), ("receptacleNEMAL2120RP", 45), ("receptacleNEMAL2130R", 46), ("receptacleSCHUKOTYPEE", 47), ("receptacleSCHUKOTYPEF", 48))

class OverCurrentProtectorTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ocpBREAKER1POLE", 1), ("ocpBREAKER2POLE", 2), ("ocpBREAKER3POLE", 3), ("ocpFUSE", 4), ("ocpFUSEPAIR", 5), ("ocpRCBO2POLE", 6), ("ocpRCBO3POLE", 7), ("ocpRCBO4POLE", 8))

class BoardTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("mainController", 1), ("inletController", 2), ("outletController", 3), ("meteringController", 4))

class OutletSwitchingOperationsEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("on", 1), ("cycle", 2))

class SensorUnitsEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("none", -1), ("other", 0), ("volt", 1), ("amp", 2), ("watt", 3), ("voltamp", 4), ("wattHour", 5), ("voltampHour", 6), ("degreeC", 7), ("hertz", 8), ("percent", 9), ("meterpersec", 10), ("pascal", 11), ("psi", 12), ("g", 13), ("degreeF", 14), ("feet", 15), ("inches", 16), ("cm", 17), ("meters", 18), ("rpm", 19), ("degrees", 20), ("lux", 21), ("grampercubicmeter", 22), ("var", 23))

class DaisychainMemberTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("standalone", 0), ("master", 1), ("slave", 2))

class URL(TextualConvention, OctetString):
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class GlobalOutletStateOnStartupEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("off", 0), ("on", 1), ("lastKnownState", 2))

class OutletStateOnStartupEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("off", 0), ("on", 1), ("lastKnownState", 2), ("globalOutletStateOnStartup", 3))

class ExternalSensorsZCoordinateUnitsEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("rackUnits", 0), ("text", 1))

class HundredthsOfAPercentage(TextualConvention, Unsigned32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 10000)

class DeviceIdentificationParameterEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("pduName", 0), ("sysContact", 1), ("sysName", 2), ("sysLocation", 3))

class TransferSwitchTransferReasonEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("unknown", 0), ("startup", 1), ("manualTransfer", 2), ("automaticReTransfer", 3), ("powerFailure", 4), ("powerQuality", 5), ("overloadAlarm", 6), ("overheatAlarm", 7), ("internalFailure", 8))

class ProductTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("rackPdu", 0), ("bcm", 1), ("transferSwitch", 2), ("powerMeter", 3))

class RelayPowerLossBehaviorEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("nonLatching", 0), ("latching", 1))

class DeviceCascadeTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("bridging", 0), ("portForwarding", 1), ("none", 2))

class PeripheralDeviceFirmwareUpdateStateEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("started", 1), ("successful", 2), ("failed", 3))

class PanelLayoutEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("invalid", -1), ("oneColumn", 1), ("twoColumns", 2))

class PanelNumberingEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("invalid", -1), ("oddEven", 1), ("sequential", 2))

class CircuitTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("onePhaseLL", 1), ("onePhaseLN", 2), ("onePhaseLLN", 3), ("threePhase", 4))

class PhaseEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("phaseA", 1), ("phaseB", 2), ("phaseC", 3), ("neutral", 4), ("earth", 5))

class LineEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("lineL1", 1), ("lineL2", 2), ("lineL3", 3), ("lineNeutral", 4))

class PowerMeterTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("singlePhase", 1), ("splitPhase", 2), ("threePhase", 3))

class NetworkInterfaceTypeEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("wired", 0), ("wireless", 1))

class AddressSourceEnumeration(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("static", 1), ("dhcp", 2), ("dhcpv6", 3))

pduCount = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCount.setStatus('current')
nameplateTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1), )
if mibBuilder.loadTexts: nameplateTable.setStatus('current')
nameplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: nameplateEntry.setStatus('current')
pduId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)))
if mibBuilder.loadTexts: pduId.setStatus('current')
pduManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduManufacturer.setStatus('current')
pduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduModel.setStatus('current')
pduSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduSerialNumber.setStatus('current')
pduRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedVoltage.setStatus('current')
pduRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedCurrent.setStatus('current')
pduRatedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedFrequency.setStatus('current')
pduRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduRatedVA.setStatus('current')
pduImage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 1, 1, 9), URL()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduImage.setStatus('current')
unitConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2), )
if mibBuilder.loadTexts: unitConfigurationTable.setStatus('current')
unitConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: unitConfigurationEntry.setStatus('current')
inletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletCount.setStatus('current')
overCurrentProtectorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorCount.setStatus('current')
outletCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCount.setStatus('current')
inletControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletControllerCount.setStatus('current')
outletControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletControllerCount.setStatus('current')
externalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorCount.setStatus('current')
pxIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxIPAddress.setStatus('deprecated')
netmask = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setStatus('deprecated')
gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway.setStatus('deprecated')
pxMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxMACAddress.setStatus('deprecated')
utcOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: utcOffset.setStatus('current')
pduName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduName.setStatus('current')
networkInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 14), NetworkInterfaceTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkInterfaceType.setStatus('deprecated')
externalSensorsZCoordinateUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 34), ExternalSensorsZCoordinateUnitsEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorsZCoordinateUnits.setStatus('current')
unitDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 35), Bits().clone(namedValues=NamedValues(("i1smpsStatus", 45), ("i2smpsStatus", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitDeviceCapabilities.setStatus('current')
outletSequencingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 36), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSequencingDelay.setStatus('deprecated')
globalOutletPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalOutletPowerCyclingPowerOffPeriod.setStatus('current')
globalOutletStateOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 38), GlobalOutletStateOnStartupEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalOutletStateOnStartup.setStatus('current')
outletPowerupSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPowerupSequence.setStatus('current')
pduPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduPowerCyclingPowerOffPeriod.setStatus('current')
pduDaisychainMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 41), DaisychainMemberTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduDaisychainMemberType.setStatus('current')
managedExternalSensorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedExternalSensorCount.setStatus('current')
pxInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 50), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetAddressType.setStatus('deprecated')
pxInetIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 51), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetIPAddress.setStatus('deprecated')
pxInetNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 52), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetNetmask.setStatus('deprecated')
pxInetGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 53), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pxInetGateway.setStatus('deprecated')
loadShedding = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadShedding.setStatus('current')
serverCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverCount.setStatus('current')
inrushGuardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inrushGuardDelay.setStatus('current')
cascadedDeviceConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 58), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cascadedDeviceConnected.setStatus('current')
synchronizeWithNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: synchronizeWithNTPServer.setStatus('current')
useDHCPProvidedNTPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: useDHCPProvidedNTPServer.setStatus('obsolete')
firstNTPServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 61), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstNTPServerAddressType.setStatus('current')
firstNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 62), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: firstNTPServerAddress.setStatus('current')
secondNTPServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 63), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondNTPServerAddressType.setStatus('current')
secondNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 64), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secondNTPServerAddress.setStatus('current')
wireCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireCount.setStatus('deprecated')
transferSwitchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchCount.setStatus('current')
productType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 67), ProductTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productType.setStatus('current')
meteringControllerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: meteringControllerCount.setStatus('current')
relayBehaviorOnPowerLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 69), RelayPowerLossBehaviorEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: relayBehaviorOnPowerLoss.setStatus('current')
deviceCascadeType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 70), DeviceCascadeTypeEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceCascadeType.setStatus('current')
deviceCascadePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCascadePosition.setStatus('current')
peripheralDevicesAutoManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 72), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: peripheralDevicesAutoManagement.setStatus('current')
frontPanelOutletSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 73), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontPanelOutletSwitching.setStatus('current')
frontPanelRCMSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontPanelRCMSelfTest.setStatus('current')
frontPanelActuatorControl = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 75), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frontPanelActuatorControl.setStatus('current')
circuitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitCount.setStatus('current')
activeDNSServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeDNSServerCount.setStatus('current')
activeNTPServerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 2, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeNTPServerCount.setStatus('current')
activeDNSServerTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6), )
if mibBuilder.loadTexts: activeDNSServerTable.setStatus('current')
activeDNSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "activeDNSServerIndex"))
if mibBuilder.loadTexts: activeDNSServerEntry.setStatus('current')
activeDNSServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: activeDNSServerIndex.setStatus('current')
activeDNSServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeDNSServerAddressType.setStatus('current')
activeDNSServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeDNSServerAddress.setStatus('current')
activeDNSServerAddressSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 6, 1, 5), AddressSourceEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeDNSServerAddressSource.setStatus('deprecated')
activeNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 7), )
if mibBuilder.loadTexts: activeNTPServerTable.setStatus('current')
activeNTPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 7, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "activeNTPServerIndex"))
if mibBuilder.loadTexts: activeNTPServerEntry.setStatus('current')
activeNTPServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: activeNTPServerIndex.setStatus('current')
activeNTPServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 7, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeNTPServerAddressType.setStatus('current')
activeNTPServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 7, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeNTPServerAddress.setStatus('current')
activeNTPServerAddressSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 7, 1, 5), AddressSourceEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeNTPServerAddressSource.setStatus('deprecated')
controllerConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3), )
if mibBuilder.loadTexts: controllerConfigurationTable.setStatus('current')
controllerConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "boardType"), (0, "RARITAN-PX2-PDU2-MIB", "boardIndex"))
if mibBuilder.loadTexts: controllerConfigurationEntry.setStatus('current')
boardType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 1), BoardTypeEnumeration())
if mibBuilder.loadTexts: boardType.setStatus('current')
boardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: boardIndex.setStatus('current')
boardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardVersion.setStatus('current')
boardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFirmwareVersion.setStatus('current')
boardFirmwareTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: boardFirmwareTimeStamp.setStatus('current')
logConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4), )
if mibBuilder.loadTexts: logConfigurationTable.setStatus('current')
logConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: logConfigurationEntry.setStatus('current')
dataLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLogging.setStatus('current')
measurementPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementPeriod.setStatus('current')
measurementsPerLogEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: measurementsPerLogEntry.setStatus('current')
logSize = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logSize.setStatus('current')
dataLoggingEnableForAllSensors = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataLoggingEnableForAllSensors.setStatus('current')
trapInformationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1), )
if mibBuilder.loadTexts: trapInformationTable.setStatus('current')
trapInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: trapInformationEntry.setStatus('current')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
targetUser = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: targetUser.setStatus('current')
imageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageVersion.setStatus('current')
roleName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: roleName.setStatus('current')
smtpMessageRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpMessageRecipients.setStatus('current')
smtpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpServer.setStatus('current')
oldSensorState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 2), SensorStateEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: oldSensorState.setStatus('current')
pduNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pduNumber.setStatus('current')
inletPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inletPoleNumber.setStatus('current')
outletPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: outletPoleNumber.setStatus('current')
externalSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: externalSensorNumber.setStatus('current')
typeOfSensor = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 10), SensorTypeEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: typeOfSensor.setStatus('current')
errorDescription = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: errorDescription.setStatus('current')
deviceChangedParameter = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 12), DeviceIdentificationParameterEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deviceChangedParameter.setStatus('current')
changedParameterNewValue = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: changedParameterNewValue.setStatus('current')
lhxSupportEnabled = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 14), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: lhxSupportEnabled.setStatus('current')
webcamModel = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: webcamModel.setStatus('current')
webcamConnectionPort = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: webcamConnectionPort.setStatus('current')
agentInetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 18), InetPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: agentInetPortNumber.setStatus('current')
peripheralDeviceRomcode = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: peripheralDeviceRomcode.setStatus('current')
peripheralDeviceFirmwareUpdateState = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 20), PeripheralDeviceFirmwareUpdateStateEnumeration()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdateState.setStatus('current')
circuitNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 33000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: circuitNumber.setStatus('current')
circuitPoleNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: circuitPoleNumber.setStatus('current')
phoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 0, 0, 23), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: phoneNumber.setStatus('current')
unitSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5), )
if mibBuilder.loadTexts: unitSensorConfigurationTable.setStatus('current')
unitSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: unitSensorConfigurationEntry.setStatus('current')
sensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 1), SensorTypeEnumeration())
if mibBuilder.loadTexts: sensorType.setStatus('current')
unitSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorLogAvailable.setStatus('current')
unitSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorUnits.setStatus('current')
unitSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorDecimalDigits.setStatus('current')
unitSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorAccuracy.setStatus('deprecated')
unitSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorResolution.setStatus('current')
unitSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorTolerance.setStatus('deprecated')
unitSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorMaximum.setStatus('current')
unitSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorMinimum.setStatus('current')
unitSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorHysteresis.setStatus('current')
unitSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorStateChangeDelay.setStatus('current')
unitSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorLowerCriticalThreshold.setStatus('current')
unitSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorLowerWarningThreshold.setStatus('current')
unitSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorUpperCriticalThreshold.setStatus('current')
unitSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorUpperWarningThreshold.setStatus('current')
unitSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorEnabledThresholds.setStatus('current')
unitSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorSignedMaximum.setStatus('current')
unitSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unitSensorSignedMinimum.setStatus('current')
unitSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedLowerCriticalThreshold.setStatus('current')
unitSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedLowerWarningThreshold.setStatus('current')
unitSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedUpperCriticalThreshold.setStatus('current')
unitSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 2, 5, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorSignedUpperWarningThreshold.setStatus('current')
inletConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3), )
if mibBuilder.loadTexts: inletConfigurationTable.setStatus('current')
inletConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "inletId"))
if mibBuilder.loadTexts: inletConfigurationEntry.setStatus('current')
inletId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: inletId.setStatus('current')
inletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletLabel.setStatus('current')
inletName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletName.setStatus('current')
inletPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 4), PlugTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPlug.setStatus('current')
inletPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleCount.setStatus('current')
inletRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedVoltage.setStatus('current')
inletRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedCurrent.setStatus('current')
inletRatedFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedFrequency.setStatus('deprecated')
inletRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletRatedVA.setStatus('deprecated')
inletDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 10), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("surgeProtectorStatus", 21), ("frequency", 22), ("phaseAngle", 23), ("residualCurrent", 25), ("rcmState", 26), ("reactivePower", 28), ("powerQuality", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletDeviceCapabilities.setStatus('current')
inletPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 11), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("phaseAngle", 23), ("rmsVoltageLN", 24), ("reactivePower", 28), ("displacementPowerFactor", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleCapabilities.setStatus('current')
inletPlugDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPlugDescriptor.setStatus('current')
inletEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletEnableState.setStatus('current')
inletRCMResidualOperatingCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 3, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletRCMResidualOperatingCurrent.setStatus('current')
inletPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 5), )
if mibBuilder.loadTexts: inletPoleConfigurationTable.setStatus('current')
inletPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 5, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "inletId"), (0, "RARITAN-PX2-PDU2-MIB", "inletPoleIndex"))
if mibBuilder.loadTexts: inletPoleConfigurationEntry.setStatus('current')
inletPoleLine = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 5, 1, 1), LineEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleLine.setStatus('current')
inletPoleNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleNode.setStatus('current')
inletSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4), )
if mibBuilder.loadTexts: inletSensorConfigurationTable.setStatus('current')
inletSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "inletId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletSensorConfigurationEntry.setStatus('current')
inletSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorLogAvailable.setStatus('current')
inletSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorUnits.setStatus('current')
inletSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorDecimalDigits.setStatus('current')
inletSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorAccuracy.setStatus('deprecated')
inletSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorResolution.setStatus('current')
inletSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorTolerance.setStatus('deprecated')
inletSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorMaximum.setStatus('current')
inletSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorMinimum.setStatus('current')
inletSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorHysteresis.setStatus('current')
inletSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorStateChangeDelay.setStatus('current')
inletSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorLowerCriticalThreshold.setStatus('current')
inletSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorLowerWarningThreshold.setStatus('current')
inletSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorUpperCriticalThreshold.setStatus('current')
inletSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorUpperWarningThreshold.setStatus('current')
inletSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorEnabledThresholds.setStatus('current')
inletSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorSignedMaximum.setStatus('current')
inletSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletSensorSignedMinimum.setStatus('current')
inletSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedLowerCriticalThreshold.setStatus('current')
inletSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedLowerWarningThreshold.setStatus('current')
inletSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedUpperCriticalThreshold.setStatus('current')
inletSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorSignedUpperWarningThreshold.setStatus('current')
inletPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6), )
if mibBuilder.loadTexts: inletPoleSensorConfigurationTable.setStatus('current')
inletPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "inletId"), (0, "RARITAN-PX2-PDU2-MIB", "inletPoleIndex"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletPoleSensorConfigurationEntry.setStatus('current')
inletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: inletPoleIndex.setStatus('current')
inletPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorLogAvailable.setStatus('current')
inletPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorUnits.setStatus('current')
inletPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorDecimalDigits.setStatus('current')
inletPoleSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorAccuracy.setStatus('deprecated')
inletPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorResolution.setStatus('current')
inletPoleSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorTolerance.setStatus('deprecated')
inletPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorMaximum.setStatus('current')
inletPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorMinimum.setStatus('current')
inletPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorHysteresis.setStatus('current')
inletPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorStateChangeDelay.setStatus('current')
inletPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorLowerCriticalThreshold.setStatus('current')
inletPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorLowerWarningThreshold.setStatus('current')
inletPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorUpperCriticalThreshold.setStatus('current')
inletPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorUpperWarningThreshold.setStatus('current')
inletPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorEnabledThresholds.setStatus('current')
inletPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorSignedMaximum.setStatus('current')
inletPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inletPoleSensorSignedMinimum.setStatus('current')
inletPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedLowerCriticalThreshold.setStatus('current')
inletPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedLowerWarningThreshold.setStatus('current')
inletPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedUpperCriticalThreshold.setStatus('current')
inletPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 3, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletPoleSensorSignedUpperWarningThreshold.setStatus('current')
overCurrentProtectorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3), )
if mibBuilder.loadTexts: overCurrentProtectorConfigurationTable.setStatus('current')
overCurrentProtectorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "overCurrentProtectorIndex"))
if mibBuilder.loadTexts: overCurrentProtectorConfigurationEntry.setStatus('current')
overCurrentProtectorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: overCurrentProtectorIndex.setStatus('current')
overCurrentProtectorLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorLabel.setStatus('current')
overCurrentProtectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorName.setStatus('current')
overCurrentProtectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 4), OverCurrentProtectorTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorType.setStatus('current')
overCurrentProtectorRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorRatedCurrent.setStatus('current')
overCurrentProtectorPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPoleCount.setStatus('current')
overCurrentProtectorCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 9), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("trip", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorCapabilities.setStatus('current')
overCurrentProtectorPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 3, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPowerSource.setStatus('current')
overCurrentProtectorPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5), )
if mibBuilder.loadTexts: overCurrentProtectorPoleConfigurationTable.setStatus('current')
overCurrentProtectorPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "overCurrentProtectorIndex"), (0, "RARITAN-PX2-PDU2-MIB", "overCurrentProtectorPoleIndex"))
if mibBuilder.loadTexts: overCurrentProtectorPoleConfigurationEntry.setStatus('current')
overCurrentProtectorPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: overCurrentProtectorPoleIndex.setStatus('current')
overCurrentProtectorPoleLine = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1, 2), LineEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPoleLine.setStatus('current')
overCurrentProtectorPoleInNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPoleInNode.setStatus('current')
overCurrentProtectorPoleOutNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorPoleOutNode.setStatus('current')
overCurrentProtectorSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4), )
if mibBuilder.loadTexts: overCurrentProtectorSensorConfigurationTable.setStatus('current')
overCurrentProtectorSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "overCurrentProtectorIndex"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: overCurrentProtectorSensorConfigurationEntry.setStatus('current')
overCurrentProtectorSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorLogAvailable.setStatus('current')
overCurrentProtectorSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorUnits.setStatus('current')
overCurrentProtectorSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorDecimalDigits.setStatus('current')
overCurrentProtectorSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorAccuracy.setStatus('deprecated')
overCurrentProtectorSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorResolution.setStatus('current')
overCurrentProtectorSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorTolerance.setStatus('deprecated')
overCurrentProtectorSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorMaximum.setStatus('current')
overCurrentProtectorSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorMinimum.setStatus('current')
overCurrentProtectorSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorHysteresis.setStatus('current')
overCurrentProtectorSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorStateChangeDelay.setStatus('current')
overCurrentProtectorSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorLowerCriticalThreshold.setStatus('current')
overCurrentProtectorSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorLowerWarningThreshold.setStatus('current')
overCurrentProtectorSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorUpperCriticalThreshold.setStatus('current')
overCurrentProtectorSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorUpperWarningThreshold.setStatus('current')
overCurrentProtectorSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorEnabledThresholds.setStatus('current')
overCurrentProtectorSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedMaximum.setStatus('current')
overCurrentProtectorSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedMinimum.setStatus('current')
overCurrentProtectorSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedLowerCriticalThreshold.setStatus('current')
overCurrentProtectorSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedLowerWarningThreshold.setStatus('current')
overCurrentProtectorSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedUpperCriticalThreshold.setStatus('current')
overCurrentProtectorSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 4, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: overCurrentProtectorSensorSignedUpperWarningThreshold.setStatus('current')
outletConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3), )
if mibBuilder.loadTexts: outletConfigurationTable.setStatus('current')
outletConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "outletId"))
if mibBuilder.loadTexts: outletConfigurationEntry.setStatus('current')
outletId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: outletId.setStatus('current')
outletLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletLabel.setStatus('current')
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletName.setStatus('current')
outletReceptacle = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 4), ReceptacleTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletReceptacle.setStatus('current')
outletPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleCount.setStatus('current')
outletRatedVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletRatedVoltage.setStatus('current')
outletRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletRatedCurrent.setStatus('current')
outletRatedVA = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletRatedVA.setStatus('current')
outletDeviceCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 10), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("onOff", 13), ("frequency", 22), ("phaseAngle", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletDeviceCapabilities.setStatus('current')
outletPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 11), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("rmsVoltageLN", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleCapabilities.setStatus('current')
outletPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPowerCyclingPowerOffPeriod.setStatus('current')
outletStateOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 13), OutletStateOnStartupEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletStateOnStartup.setStatus('current')
outletUseGlobalPowerCyclingPowerOffPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletUseGlobalPowerCyclingPowerOffPeriod.setStatus('current')
outletSwitchable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchable.setStatus('current')
outletReceptacleDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletReceptacleDescriptor.setStatus('current')
outletNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletNonCritical.setStatus('current')
outletSequenceDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSequenceDelay.setStatus('current')
outletPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 3, 1, 33), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPowerSource.setStatus('current')
outletPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 5), )
if mibBuilder.loadTexts: outletPoleConfigurationTable.setStatus('current')
outletPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 5, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "outletId"), (0, "RARITAN-PX2-PDU2-MIB", "outletPoleIndex"))
if mibBuilder.loadTexts: outletPoleConfigurationEntry.setStatus('current')
outletPoleLine = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 5, 1, 1), LineEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleLine.setStatus('current')
outletPoleNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleNode.setStatus('current')
outletSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4), )
if mibBuilder.loadTexts: outletSensorConfigurationTable.setStatus('current')
outletSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "outletId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletSensorConfigurationEntry.setStatus('current')
outletSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorLogAvailable.setStatus('current')
outletSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorUnits.setStatus('current')
outletSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorDecimalDigits.setStatus('current')
outletSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorAccuracy.setStatus('deprecated')
outletSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorResolution.setStatus('current')
outletSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorTolerance.setStatus('deprecated')
outletSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorMaximum.setStatus('current')
outletSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorMinimum.setStatus('current')
outletSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorHysteresis.setStatus('current')
outletSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorStateChangeDelay.setStatus('current')
outletSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorLowerCriticalThreshold.setStatus('current')
outletSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorLowerWarningThreshold.setStatus('current')
outletSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorUpperCriticalThreshold.setStatus('current')
outletSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorUpperWarningThreshold.setStatus('current')
outletSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorEnabledThresholds.setStatus('current')
outletSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorSignedMaximum.setStatus('current')
outletSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSensorSignedMinimum.setStatus('current')
outletSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedLowerCriticalThreshold.setStatus('current')
outletSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedLowerWarningThreshold.setStatus('current')
outletSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedUpperCriticalThreshold.setStatus('current')
outletSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorSignedUpperWarningThreshold.setStatus('current')
outletPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6), )
if mibBuilder.loadTexts: outletPoleSensorConfigurationTable.setStatus('current')
outletPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "outletId"), (0, "RARITAN-PX2-PDU2-MIB", "outletPoleIndex"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletPoleSensorConfigurationEntry.setStatus('current')
outletPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: outletPoleIndex.setStatus('current')
outletPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorLogAvailable.setStatus('current')
outletPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorUnits.setStatus('current')
outletPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorDecimalDigits.setStatus('current')
outletPoleSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorAccuracy.setStatus('deprecated')
outletPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorResolution.setStatus('current')
outletPoleSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorTolerance.setStatus('deprecated')
outletPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorMaximum.setStatus('current')
outletPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorMinimum.setStatus('current')
outletPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorHysteresis.setStatus('current')
outletPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorStateChangeDelay.setStatus('current')
outletPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorLowerCriticalThreshold.setStatus('current')
outletPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorLowerWarningThreshold.setStatus('current')
outletPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorUpperCriticalThreshold.setStatus('current')
outletPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorUpperWarningThreshold.setStatus('current')
outletPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorEnabledThresholds.setStatus('current')
outletPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorSignedMaximum.setStatus('current')
outletPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletPoleSensorSignedMinimum.setStatus('current')
outletPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedLowerCriticalThreshold.setStatus('current')
outletPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedLowerWarningThreshold.setStatus('current')
outletPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedUpperCriticalThreshold.setStatus('current')
outletPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 5, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletPoleSensorSignedUpperWarningThreshold.setStatus('current')
externalSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3), )
if mibBuilder.loadTexts: externalSensorConfigurationTable.setStatus('current')
externalSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorConfigurationEntry.setStatus('current')
sensorID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: sensorID.setStatus('current')
externalSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 2), SensorTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorType.setStatus('current')
externalSensorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorSerialNumber.setStatus('current')
externalSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorName.setStatus('current')
externalSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorDescription.setStatus('current')
externalSensorXCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorXCoordinate.setStatus('current')
externalSensorYCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorYCoordinate.setStatus('current')
externalSensorZCoordinate = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorZCoordinate.setStatus('current')
externalSensorChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorChannelNumber.setStatus('current')
externalOnOffSensorSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 10), SensorTypeEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalOnOffSensorSubtype.setStatus('current')
externalSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLogAvailable.setStatus('current')
externalSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 16), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorUnits.setStatus('current')
externalSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorDecimalDigits.setStatus('current')
externalSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 18), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorAccuracy.setStatus('deprecated')
externalSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorResolution.setStatus('current')
externalSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorTolerance.setStatus('deprecated')
externalSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorMaximum.setStatus('current')
externalSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorMinimum.setStatus('current')
externalSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorHysteresis.setStatus('current')
externalSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorStateChangeDelay.setStatus('current')
externalSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerCriticalThreshold.setStatus('current')
externalSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorLowerWarningThreshold.setStatus('current')
externalSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperCriticalThreshold.setStatus('current')
externalSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUpperWarningThreshold.setStatus('current')
externalSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 35), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorEnabledThresholds.setStatus('current')
externalSensorIsActuator = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorIsActuator.setStatus('current')
externalSensorPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalSensorPosition.setStatus('current')
externalSensorUseDefaultThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorUseDefaultThresholds.setStatus('current')
externalSensorAlarmedToNormalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 3, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorAlarmedToNormalDelay.setStatus('current')
externalSensorTypeDefaultThresholdsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4), )
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsTable.setStatus('current')
externalSensorTypeDefaultThresholdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: externalSensorTypeDefaultThresholdsEntry.setStatus('current')
externalSensorTypeDefaultHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultHysteresis.setStatus('current')
externalSensorTypeDefaultStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultStateChangeDelay.setStatus('current')
externalSensorTypeDefaultLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerCriticalThreshold.setStatus('current')
externalSensorTypeDefaultLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultLowerWarningThreshold.setStatus('current')
externalSensorTypeDefaultUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperCriticalThreshold.setStatus('current')
externalSensorTypeDefaultUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultUpperWarningThreshold.setStatus('current')
externalSensorTypeDefaultEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 4, 1, 9), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: externalSensorTypeDefaultEnabledThresholds.setStatus('current')
serverReachabilityTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3), )
if mibBuilder.loadTexts: serverReachabilityTable.setStatus('current')
serverReachabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "serverID"))
if mibBuilder.loadTexts: serverReachabilityEntry.setStatus('current')
serverID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: serverID.setStatus('current')
serverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverIPAddress.setStatus('current')
serverPingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 7, 3, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverPingEnabled.setStatus('current')
wireConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3), )
if mibBuilder.loadTexts: wireConfigurationTable.setStatus('deprecated')
wireConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "wireId"))
if mibBuilder.loadTexts: wireConfigurationEntry.setStatus('deprecated')
wireId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: wireId.setStatus('deprecated')
wireLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireLabel.setStatus('deprecated')
wireCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 3), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireCapabilities.setStatus('deprecated')
wirePowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 3, 1, 4), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirePowerSource.setStatus('deprecated')
wireSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4), )
if mibBuilder.loadTexts: wireSensorConfigurationTable.setStatus('deprecated')
wireSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "wireId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: wireSensorConfigurationEntry.setStatus('deprecated')
wireSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorLogAvailable.setStatus('deprecated')
wireSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorUnits.setStatus('deprecated')
wireSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorDecimalDigits.setStatus('deprecated')
wireSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorAccuracy.setStatus('deprecated')
wireSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorResolution.setStatus('deprecated')
wireSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorTolerance.setStatus('deprecated')
wireSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorMaximum.setStatus('deprecated')
wireSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wireSensorMinimum.setStatus('deprecated')
wireSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorHysteresis.setStatus('deprecated')
wireSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorStateChangeDelay.setStatus('deprecated')
wireSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorLowerCriticalThreshold.setStatus('deprecated')
wireSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorLowerWarningThreshold.setStatus('deprecated')
wireSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorUpperCriticalThreshold.setStatus('deprecated')
wireSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorUpperWarningThreshold.setStatus('deprecated')
wireSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 8, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wireSensorEnabledThresholds.setStatus('deprecated')
transferSwitchConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3), )
if mibBuilder.loadTexts: transferSwitchConfigurationTable.setStatus('current')
transferSwitchConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "transferSwitchId"))
if mibBuilder.loadTexts: transferSwitchConfigurationEntry.setStatus('current')
transferSwitchId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: transferSwitchId.setStatus('current')
transferSwitchLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchLabel.setStatus('current')
transferSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchName.setStatus('current')
transferSwitchPreferredInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPreferredInlet.setStatus('current')
transferSwitchPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleCount.setStatus('current')
transferSwitchAutoReTransferEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAutoReTransferEnabled.setStatus('current')
transferSwitchAutoReTransferWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAutoReTransferWaitTime.setStatus('current')
transferSwitchAutoReTransferRequiresPhaseSync = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAutoReTransferRequiresPhaseSync.setStatus('current')
transferSwitchFrontPanelManualTransferButtonEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchFrontPanelManualTransferButtonEnabled.setStatus('current')
transferSwitchCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 24), Bits().clone(namedValues=NamedValues(("overloadStatus", 32), ("inletPhaseSyncAngle", 37), ("inletPhaseSync", 38), ("operatingState", 39), ("activeInlet", 40), ("switchStatus", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchCapabilities.setStatus('current')
transferSwitchPowerSource1 = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 31), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPowerSource1.setStatus('current')
transferSwitchPowerSource2 = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 3, 1, 32), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPowerSource2.setStatus('current')
transferSwitchPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5), )
if mibBuilder.loadTexts: transferSwitchPoleConfigurationTable.setStatus('current')
transferSwitchPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "transferSwitchId"), (0, "RARITAN-PX2-PDU2-MIB", "transferSwitchPoleIndex"))
if mibBuilder.loadTexts: transferSwitchPoleConfigurationEntry.setStatus('current')
transferSwitchPoleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: transferSwitchPoleIndex.setStatus('current')
transferSwitchPoleLine = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 2), LineEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleLine.setStatus('current')
transferSwitchPoleIn1Node = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleIn1Node.setStatus('current')
transferSwitchPoleIn2Node = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleIn2Node.setStatus('current')
transferSwitchPoleOutNode = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchPoleOutNode.setStatus('current')
transferSwitchSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4), )
if mibBuilder.loadTexts: transferSwitchSensorConfigurationTable.setStatus('current')
transferSwitchSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "transferSwitchId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: transferSwitchSensorConfigurationEntry.setStatus('current')
transferSwitchSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorLogAvailable.setStatus('current')
transferSwitchSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorUnits.setStatus('current')
transferSwitchSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorDecimalDigits.setStatus('current')
transferSwitchSensorAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 8), HundredthsOfAPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorAccuracy.setStatus('deprecated')
transferSwitchSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorResolution.setStatus('current')
transferSwitchSensorTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorTolerance.setStatus('deprecated')
transferSwitchSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorMaximum.setStatus('current')
transferSwitchSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorMinimum.setStatus('current')
transferSwitchSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorHysteresis.setStatus('current')
transferSwitchSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorStateChangeDelay.setStatus('current')
transferSwitchSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorLowerCriticalThreshold.setStatus('current')
transferSwitchSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorLowerWarningThreshold.setStatus('current')
transferSwitchSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorUpperCriticalThreshold.setStatus('current')
transferSwitchSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorUpperWarningThreshold.setStatus('current')
transferSwitchSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorEnabledThresholds.setStatus('current')
transferSwitchSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorSignedMaximum.setStatus('current')
transferSwitchSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchSensorSignedMinimum.setStatus('current')
transferSwitchSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedLowerCriticalThreshold.setStatus('current')
transferSwitchSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedLowerWarningThreshold.setStatus('current')
transferSwitchSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedUpperCriticalThreshold.setStatus('current')
transferSwitchSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 9, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchSensorSignedUpperWarningThreshold.setStatus('current')
powerMeterConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2), )
if mibBuilder.loadTexts: powerMeterConfigurationTable.setStatus('current')
powerMeterConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: powerMeterConfigurationEntry.setStatus('current')
powerMeterPhaseCTRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMeterPhaseCTRating.setStatus('current')
powerMeterNeutralCTRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMeterNeutralCTRating.setStatus('current')
powerMeterEarthCTRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerMeterEarthCTRating.setStatus('current')
powerMeterBranchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterBranchCount.setStatus('current')
powerMeterPanelPositions = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterPanelPositions.setStatus('current')
powerMeterPanelLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 7), PanelLayoutEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterPanelLayout.setStatus('current')
powerMeterPanelNumbering = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 8), PanelNumberingEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterPanelNumbering.setStatus('current')
powerMeterType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 10, 2, 1, 9), PowerMeterTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMeterType.setStatus('current')
circuitConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2), )
if mibBuilder.loadTexts: circuitConfigurationTable.setStatus('current')
circuitConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitId"))
if mibBuilder.loadTexts: circuitConfigurationEntry.setStatus('current')
circuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: circuitId.setStatus('current')
circuitPoleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleCount.setStatus('current')
circuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitName.setStatus('current')
circuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 4), CircuitTypeEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitType.setStatus('current')
circuitRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitRatedCurrent.setStatus('current')
circuitCTRating = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitCTRating.setStatus('current')
circuitCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 7), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("unbalancedCurrent", 2), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("surgeProtectorStatus", 21), ("frequency", 22), ("phaseAngle", 23), ("residualCurrent", 25), ("rcmState", 26), ("reactivePower", 28), ("powerQuality", 31), ("displacementPowerFactor", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitCapabilities.setStatus('current')
circuitPoleCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 8), Bits().clone(namedValues=NamedValues(("rmsCurrent", 0), ("peakCurrent", 1), ("rmsVoltage", 3), ("activePower", 4), ("apparentPower", 5), ("powerFactor", 6), ("activeEnergy", 7), ("apparentEnergy", 8), ("phaseAngle", 23), ("rmsVoltageLN", 24), ("reactivePower", 28), ("displacementPowerFactor", 34)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleCapabilities.setStatus('current')
circuitPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 2, 1, 9), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPowerSource.setStatus('current')
circuitPoleConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3), )
if mibBuilder.loadTexts: circuitPoleConfigurationTable.setStatus('current')
circuitPoleConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitPoleId"))
if mibBuilder.loadTexts: circuitPoleConfigurationEntry.setStatus('current')
circuitPoleId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: circuitPoleId.setStatus('current')
circuitPolePanelPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPolePanelPosition.setStatus('current')
circuitPoleCTNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleCTNumber.setStatus('current')
circuitPolePhase = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 3, 1, 4), PhaseEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPolePhase.setStatus('current')
circuitSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4), )
if mibBuilder.loadTexts: circuitSensorConfigurationTable.setStatus('current')
circuitSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitSensorConfigurationEntry.setStatus('current')
circuitSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorLogAvailable.setStatus('current')
circuitSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorUnits.setStatus('current')
circuitSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorDecimalDigits.setStatus('current')
circuitSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorResolution.setStatus('current')
circuitSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorMaximum.setStatus('current')
circuitSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorMinimum.setStatus('current')
circuitSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorHysteresis.setStatus('current')
circuitSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorStateChangeDelay.setStatus('current')
circuitSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorLowerCriticalThreshold.setStatus('current')
circuitSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorLowerWarningThreshold.setStatus('current')
circuitSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorUpperCriticalThreshold.setStatus('current')
circuitSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorUpperWarningThreshold.setStatus('current')
circuitSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorEnabledThresholds.setStatus('current')
circuitSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorSignedMaximum.setStatus('current')
circuitSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitSensorSignedMinimum.setStatus('current')
circuitSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorSignedLowerCriticalThreshold.setStatus('current')
circuitSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorSignedLowerWarningThreshold.setStatus('current')
circuitSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorSignedUpperCriticalThreshold.setStatus('current')
circuitSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 4, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorSignedUpperWarningThreshold.setStatus('current')
circuitPoleSensorConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6), )
if mibBuilder.loadTexts: circuitPoleSensorConfigurationTable.setStatus('current')
circuitPoleSensorConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitPoleId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitPoleSensorConfigurationEntry.setStatus('current')
circuitPoleSensorLogAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorLogAvailable.setStatus('current')
circuitPoleSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 6), SensorUnitsEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorUnits.setStatus('current')
circuitPoleSensorDecimalDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorDecimalDigits.setStatus('current')
circuitPoleSensorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorResolution.setStatus('current')
circuitPoleSensorMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorMaximum.setStatus('current')
circuitPoleSensorMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorMinimum.setStatus('current')
circuitPoleSensorHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorHysteresis.setStatus('current')
circuitPoleSensorStateChangeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorStateChangeDelay.setStatus('current')
circuitPoleSensorLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorLowerCriticalThreshold.setStatus('current')
circuitPoleSensorLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorLowerWarningThreshold.setStatus('current')
circuitPoleSensorUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorUpperCriticalThreshold.setStatus('current')
circuitPoleSensorUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorUpperWarningThreshold.setStatus('current')
circuitPoleSensorEnabledThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 25), Bits().clone(namedValues=NamedValues(("lowerCritical", 0), ("lowerWarning", 1), ("upperWarning", 2), ("upperCritical", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorEnabledThresholds.setStatus('current')
circuitPoleSensorSignedMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorSignedMaximum.setStatus('current')
circuitPoleSensorSignedMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: circuitPoleSensorSignedMinimum.setStatus('current')
circuitPoleSensorSignedLowerCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorSignedLowerCriticalThreshold.setStatus('current')
circuitPoleSensorSignedLowerWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorSignedLowerWarningThreshold.setStatus('current')
circuitPoleSensorSignedUpperCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorSignedUpperCriticalThreshold.setStatus('current')
circuitPoleSensorSignedUpperWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 11, 6, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitPoleSensorSignedUpperWarningThreshold.setStatus('current')
peripheralDevicePackageTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5), )
if mibBuilder.loadTexts: peripheralDevicePackageTable.setStatus('current')
peripheralDevicePackageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "peripheralDevicePackageId"))
if mibBuilder.loadTexts: peripheralDevicePackageEntry.setStatus('current')
peripheralDevicePackageId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: peripheralDevicePackageId.setStatus('current')
peripheralDevicePackageSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageSerialNumber.setStatus('current')
peripheralDevicePackageModel = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageModel.setStatus('current')
peripheralDevicePackageFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareVersion.setStatus('current')
peripheralDevicePackageMinFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageMinFirmwareVersion.setStatus('current')
peripheralDevicePackageFirmwareTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageFirmwareTimeStamp.setStatus('current')
peripheralDevicePackagePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackagePosition.setStatus('current')
peripheralDevicePackageState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 3, 6, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peripheralDevicePackageState.setStatus('current')
logIndexTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1), )
if mibBuilder.loadTexts: logIndexTable.setStatus('current')
logIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"))
if mibBuilder.loadTexts: logIndexEntry.setStatus('current')
oldestLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oldestLogID.setStatus('current')
newestLogID = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: newestLogID.setStatus('current')
logTimeStampTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2), )
if mibBuilder.loadTexts: logTimeStampTable.setStatus('current')
logTimeStampEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: logTimeStampEntry.setStatus('current')
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: logIndex.setStatus('current')
logTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTimeStamp.setStatus('current')
unitSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3), )
if mibBuilder.loadTexts: unitSensorLogTable.setStatus('current')
unitSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"), (0, "RARITAN-PX2-PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: unitSensorLogEntry.setStatus('current')
logUnitSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorDataAvailable.setStatus('current')
logUnitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorState.setStatus('current')
logUnitSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorAvgValue.setStatus('current')
logUnitSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorMaxValue.setStatus('current')
logUnitSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorMinValue.setStatus('current')
logUnitSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorSignedAvgValue.setStatus('current')
logUnitSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorSignedMaxValue.setStatus('current')
logUnitSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUnitSensorSignedMinValue.setStatus('current')
inletSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3), )
if mibBuilder.loadTexts: inletSensorLogTable.setStatus('current')
inletSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "inletId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"), (0, "RARITAN-PX2-PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: inletSensorLogEntry.setStatus('current')
logInletSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorDataAvailable.setStatus('current')
logInletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorState.setStatus('current')
logInletSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorAvgValue.setStatus('current')
logInletSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorMaxValue.setStatus('current')
logInletSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorMinValue.setStatus('current')
logInletSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorSignedAvgValue.setStatus('current')
logInletSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorSignedMaxValue.setStatus('current')
logInletSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletSensorSignedMinValue.setStatus('current')
inletPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4), )
if mibBuilder.loadTexts: inletPoleSensorLogTable.setStatus('current')
inletPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "inletId"), (0, "RARITAN-PX2-PDU2-MIB", "inletPoleIndex"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"), (0, "RARITAN-PX2-PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: inletPoleSensorLogEntry.setStatus('current')
logInletPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorDataAvailable.setStatus('current')
logInletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorState.setStatus('current')
logInletPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorAvgValue.setStatus('current')
logInletPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorMaxValue.setStatus('current')
logInletPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorMinValue.setStatus('current')
logInletPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorSignedAvgValue.setStatus('current')
logInletPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorSignedMaxValue.setStatus('current')
logInletPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logInletPoleSensorSignedMinValue.setStatus('current')
outletSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3), )
if mibBuilder.loadTexts: outletSensorLogTable.setStatus('current')
outletSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "outletId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"), (0, "RARITAN-PX2-PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: outletSensorLogEntry.setStatus('current')
logOutletSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorDataAvailable.setStatus('current')
logOutletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorState.setStatus('current')
logOutletSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorAvgValue.setStatus('current')
logOutletSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorMaxValue.setStatus('current')
logOutletSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorMinValue.setStatus('current')
logOutletSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorSignedAvgValue.setStatus('current')
logOutletSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorSignedMaxValue.setStatus('current')
logOutletSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletSensorSignedMinValue.setStatus('current')
outletPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4), )
if mibBuilder.loadTexts: outletPoleSensorLogTable.setStatus('current')
outletPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "outletId"), (0, "RARITAN-PX2-PDU2-MIB", "outletPoleIndex"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"), (0, "RARITAN-PX2-PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: outletPoleSensorLogEntry.setStatus('current')
logOutletPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorDataAvailable.setStatus('current')
logOutletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorState.setStatus('current')
logOutletPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorAvgValue.setStatus('current')
logOutletPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorMaxValue.setStatus('current')
logOutletPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorMinValue.setStatus('current')
logOutletPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorSignedAvgValue.setStatus('current')
logOutletPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorSignedMaxValue.setStatus('current')
logOutletPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 4, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOutletPoleSensorSignedMinValue.setStatus('current')
overCurrentProtectorSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3), )
if mibBuilder.loadTexts: overCurrentProtectorSensorLogTable.setStatus('current')
overCurrentProtectorSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "overCurrentProtectorIndex"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"), (0, "RARITAN-PX2-PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: overCurrentProtectorSensorLogEntry.setStatus('current')
logOverCurrentProtectorSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorDataAvailable.setStatus('current')
logOverCurrentProtectorSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorState.setStatus('current')
logOverCurrentProtectorSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorAvgValue.setStatus('current')
logOverCurrentProtectorSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorMaxValue.setStatus('current')
logOverCurrentProtectorSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorMinValue.setStatus('current')
logOverCurrentProtectorSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedAvgValue.setStatus('current')
logOverCurrentProtectorSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedMaxValue.setStatus('current')
logOverCurrentProtectorSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logOverCurrentProtectorSensorSignedMinValue.setStatus('current')
externalSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3), )
if mibBuilder.loadTexts: externalSensorLogTable.setStatus('current')
externalSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorID"), (0, "RARITAN-PX2-PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: externalSensorLogEntry.setStatus('current')
logExternalSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorDataAvailable.setStatus('current')
logExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorState.setStatus('current')
logExternalSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorAvgValue.setStatus('current')
logExternalSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorMaxValue.setStatus('current')
logExternalSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logExternalSensorMinValue.setStatus('current')
wireSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3), )
if mibBuilder.loadTexts: wireSensorLogTable.setStatus('deprecated')
wireSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "wireId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"), (0, "RARITAN-PX2-PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: wireSensorLogEntry.setStatus('deprecated')
logWireSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorDataAvailable.setStatus('deprecated')
logWireSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorState.setStatus('deprecated')
logWireSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorAvgValue.setStatus('deprecated')
logWireSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorMaxValue.setStatus('deprecated')
logWireSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 6, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logWireSensorMinValue.setStatus('deprecated')
transferSwitchSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3), )
if mibBuilder.loadTexts: transferSwitchSensorLogTable.setStatus('current')
transferSwitchSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "transferSwitchId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"), (0, "RARITAN-PX2-PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: transferSwitchSensorLogEntry.setStatus('current')
logTransferSwitchSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorDataAvailable.setStatus('current')
logTransferSwitchSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorState.setStatus('current')
logTransferSwitchSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorAvgValue.setStatus('current')
logTransferSwitchSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorMaxValue.setStatus('current')
logTransferSwitchSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorMinValue.setStatus('current')
logTransferSwitchSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorSignedAvgValue.setStatus('current')
logTransferSwitchSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorSignedMaxValue.setStatus('current')
logTransferSwitchSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 7, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logTransferSwitchSensorSignedMinValue.setStatus('current')
circuitSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3), )
if mibBuilder.loadTexts: circuitSensorLogTable.setStatus('current')
circuitSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"), (0, "RARITAN-PX2-PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: circuitSensorLogEntry.setStatus('current')
logCircuitSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorDataAvailable.setStatus('current')
logCircuitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorState.setStatus('current')
logCircuitSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorAvgValue.setStatus('current')
logCircuitSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorMaxValue.setStatus('current')
logCircuitSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorMinValue.setStatus('current')
logCircuitSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorSignedAvgValue.setStatus('current')
logCircuitSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorSignedMaxValue.setStatus('current')
logCircuitSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitSensorSignedMinValue.setStatus('current')
circuitPoleSensorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5), )
if mibBuilder.loadTexts: circuitPoleSensorLogTable.setStatus('current')
circuitPoleSensorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitPoleId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"), (0, "RARITAN-PX2-PDU2-MIB", "logIndex"))
if mibBuilder.loadTexts: circuitPoleSensorLogEntry.setStatus('current')
logCircuitPoleSensorDataAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorDataAvailable.setStatus('current')
logCircuitPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorState.setStatus('current')
logCircuitPoleSensorAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorAvgValue.setStatus('current')
logCircuitPoleSensorMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorMaxValue.setStatus('current')
logCircuitPoleSensorMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorMinValue.setStatus('current')
logCircuitPoleSensorSignedAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorSignedAvgValue.setStatus('current')
logCircuitPoleSensorSignedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorSignedMaxValue.setStatus('current')
logCircuitPoleSensorSignedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 6, 8, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logCircuitPoleSensorSignedMinValue.setStatus('current')
unitSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3), )
if mibBuilder.loadTexts: unitSensorMeasurementsTable.setStatus('current')
unitSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: unitSensorMeasurementsEntry.setStatus('current')
measurementsUnitSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorIsAvailable.setStatus('current')
measurementsUnitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorState.setStatus('current')
measurementsUnitSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorValue.setStatus('current')
measurementsUnitSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorTimeStamp.setStatus('current')
measurementsUnitSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsUnitSensorSignedValue.setStatus('current')
inletSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3), )
if mibBuilder.loadTexts: inletSensorMeasurementsTable.setStatus('current')
inletSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "inletId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletSensorMeasurementsEntry.setStatus('current')
measurementsInletSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorIsAvailable.setStatus('current')
measurementsInletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorState.setStatus('current')
measurementsInletSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorValue.setStatus('current')
measurementsInletSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorTimeStamp.setStatus('current')
measurementsInletSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletSensorSignedValue.setStatus('current')
inletPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4), )
if mibBuilder.loadTexts: inletPoleSensorMeasurementsTable.setStatus('current')
inletPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "inletId"), (0, "RARITAN-PX2-PDU2-MIB", "inletPoleIndex"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletPoleSensorMeasurementsEntry.setStatus('current')
measurementsInletPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorIsAvailable.setStatus('current')
measurementsInletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorState.setStatus('current')
measurementsInletPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorValue.setStatus('current')
measurementsInletPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorTimeStamp.setStatus('current')
measurementsInletPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsInletPoleSensorSignedValue.setStatus('current')
outletSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3), )
if mibBuilder.loadTexts: outletSensorMeasurementsTable.setStatus('current')
outletSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "outletId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletSensorMeasurementsEntry.setStatus('current')
measurementsOutletSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorIsAvailable.setStatus('current')
measurementsOutletSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorState.setStatus('current')
measurementsOutletSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorValue.setStatus('current')
measurementsOutletSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorTimeStamp.setStatus('current')
measurementsOutletSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletSensorSignedValue.setStatus('current')
outletPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4), )
if mibBuilder.loadTexts: outletPoleSensorMeasurementsTable.setStatus('current')
outletPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "outletId"), (0, "RARITAN-PX2-PDU2-MIB", "outletPoleIndex"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletPoleSensorMeasurementsEntry.setStatus('current')
measurementsOutletPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorIsAvailable.setStatus('current')
measurementsOutletPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorState.setStatus('current')
measurementsOutletPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorValue.setStatus('current')
measurementsOutletPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorTimeStamp.setStatus('current')
measurementsOutletPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOutletPoleSensorSignedValue.setStatus('current')
overCurrentProtectorSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3), )
if mibBuilder.loadTexts: overCurrentProtectorSensorMeasurementsTable.setStatus('current')
overCurrentProtectorSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "overCurrentProtectorIndex"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: overCurrentProtectorSensorMeasurementsEntry.setStatus('current')
measurementsOverCurrentProtectorSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorIsAvailable.setStatus('current')
measurementsOverCurrentProtectorSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorState.setStatus('current')
measurementsOverCurrentProtectorSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorValue.setStatus('current')
measurementsOverCurrentProtectorSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorTimeStamp.setStatus('current')
measurementsOverCurrentProtectorSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsOverCurrentProtectorSensorSignedValue.setStatus('current')
externalSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3), )
if mibBuilder.loadTexts: externalSensorMeasurementsTable.setStatus('current')
externalSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorID"))
if mibBuilder.loadTexts: externalSensorMeasurementsEntry.setStatus('current')
measurementsExternalSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorIsAvailable.setStatus('current')
measurementsExternalSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorState.setStatus('current')
measurementsExternalSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorValue.setStatus('current')
measurementsExternalSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 5, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsExternalSensorTimeStamp.setStatus('current')
wireSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3), )
if mibBuilder.loadTexts: wireSensorMeasurementsTable.setStatus('deprecated')
wireSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "wireId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: wireSensorMeasurementsEntry.setStatus('deprecated')
measurementsWireSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorIsAvailable.setStatus('deprecated')
measurementsWireSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorState.setStatus('deprecated')
measurementsWireSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorValue.setStatus('deprecated')
measurementsWireSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 6, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsWireSensorTimeStamp.setStatus('deprecated')
transferSwitchSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3), )
if mibBuilder.loadTexts: transferSwitchSensorMeasurementsTable.setStatus('current')
transferSwitchSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "transferSwitchId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: transferSwitchSensorMeasurementsEntry.setStatus('current')
measurementsTransferSwitchSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorIsAvailable.setStatus('current')
measurementsTransferSwitchSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorState.setStatus('current')
measurementsTransferSwitchSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorValue.setStatus('current')
measurementsTransferSwitchSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorTimeStamp.setStatus('current')
measurementsTransferSwitchSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsTransferSwitchSensorSignedValue.setStatus('current')
circuitSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3), )
if mibBuilder.loadTexts: circuitSensorMeasurementsTable.setStatus('current')
circuitSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitSensorMeasurementsEntry.setStatus('current')
measurementsCircuitSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorIsAvailable.setStatus('current')
measurementsCircuitSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorState.setStatus('current')
measurementsCircuitSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorValue.setStatus('current')
measurementsCircuitSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorTimeStamp.setStatus('current')
measurementsCircuitSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitSensorSignedValue.setStatus('current')
circuitPoleSensorMeasurementsTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4), )
if mibBuilder.loadTexts: circuitPoleSensorMeasurementsTable.setStatus('current')
circuitPoleSensorMeasurementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitPoleId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitPoleSensorMeasurementsEntry.setStatus('current')
measurementsCircuitPoleSensorIsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorIsAvailable.setStatus('current')
measurementsCircuitPoleSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorState.setStatus('current')
measurementsCircuitPoleSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorValue.setStatus('current')
measurementsCircuitPoleSensorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorTimeStamp.setStatus('current')
measurementsCircuitPoleSensorSignedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 5, 8, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: measurementsCircuitPoleSensorSignedValue.setStatus('current')
outletSwitchControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2), )
if mibBuilder.loadTexts: outletSwitchControlTable.setStatus('current')
outletSwitchControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "outletId"))
if mibBuilder.loadTexts: outletSwitchControlEntry.setStatus('current')
switchingOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 2), OutletSwitchingOperationsEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchingOperation.setStatus('current')
outletSwitchingState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 3), SensorStateEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchingState.setStatus('current')
outletSwitchingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSwitchingTimeStamp.setStatus('current')
transferSwitchControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1), )
if mibBuilder.loadTexts: transferSwitchControlTable.setStatus('current')
transferSwitchControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "transferSwitchId"))
if mibBuilder.loadTexts: transferSwitchControlEntry.setStatus('current')
transferSwitchActiveInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchActiveInlet.setStatus('current')
transferSwitchTransferToInlet = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchTransferToInlet.setStatus('current')
transferSwitchAlarmOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transferSwitchAlarmOverride.setStatus('current')
transferSwitchLastTransferReason = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 3, 1, 1, 4), TransferSwitchTransferReasonEnumeration()).setMaxAccess("readonly")
if mibBuilder.loadTexts: transferSwitchLastTransferReason.setStatus('current')
actuatorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2), )
if mibBuilder.loadTexts: actuatorControlTable.setStatus('current')
actuatorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorID"))
if mibBuilder.loadTexts: actuatorControlEntry.setStatus('current')
actuatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 4, 2, 1, 2), SensorStateEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actuatorState.setStatus('current')
rcmSelfTestTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2), )
if mibBuilder.loadTexts: rcmSelfTestTable.setStatus('current')
rcmSelfTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "inletId"))
if mibBuilder.loadTexts: rcmSelfTestEntry.setStatus('current')
rcmState = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 5, 2, 1, 2), SensorStateEnumeration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcmState.setStatus('current')
inletSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1), )
if mibBuilder.loadTexts: inletSensorControlTable.setStatus('current')
inletSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "inletId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: inletSensorControlEntry.setStatus('current')
inletSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 6, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inletSensorResetValue.setStatus('current')
outletSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1), )
if mibBuilder.loadTexts: outletSensorControlTable.setStatus('current')
outletSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "outletId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: outletSensorControlEntry.setStatus('current')
outletSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outletSensorResetValue.setStatus('current')
unitSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1), )
if mibBuilder.loadTexts: unitSensorControlTable.setStatus('current')
unitSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: unitSensorControlEntry.setStatus('current')
unitSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 8, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitSensorResetValue.setStatus('current')
circuitSensorControlTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 4, 9, 1), )
if mibBuilder.loadTexts: circuitSensorControlTable.setStatus('current')
circuitSensorControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 4, 9, 1, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "pduId"), (0, "RARITAN-PX2-PDU2-MIB", "circuitId"), (0, "RARITAN-PX2-PDU2-MIB", "sensorType"))
if mibBuilder.loadTexts: circuitSensorControlEntry.setStatus('current')
circuitSensorResetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 4, 9, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: circuitSensorResetValue.setStatus('current')
reliabilityDataTableSequenceNumber = MibScalar((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataTableSequenceNumber.setStatus('current')
reliabilityDataTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2), )
if mibBuilder.loadTexts: reliabilityDataTable.setStatus('current')
reliabilityDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "reliabilityIndex"))
if mibBuilder.loadTexts: reliabilityDataEntry.setStatus('current')
reliabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: reliabilityIndex.setStatus('current')
reliabilityId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityId.setStatus('current')
reliabilityDataValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataValue.setStatus('current')
reliabilityDataMaxPossible = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataMaxPossible.setStatus('current')
reliabilityDataWorstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataWorstValue.setStatus('current')
reliabilityDataThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataThreshold.setStatus('current')
reliabilityDataRawUpperBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataRawUpperBytes.setStatus('current')
reliabilityDataRawLowerBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataRawLowerBytes.setStatus('current')
reliabilityDataFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 1, 2, 1, 9), Bits().clone(namedValues=NamedValues(("invalidFlag", 0), ("oldValue", 1), ("criticalEntry", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityDataFlags.setStatus('current')
reliabilityErrorLogTable = MibTable((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2), )
if mibBuilder.loadTexts: reliabilityErrorLogTable.setStatus('current')
reliabilityErrorLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1), ).setIndexNames((0, "RARITAN-PX2-PDU2-MIB", "reliabilityErrorLogIndex"))
if mibBuilder.loadTexts: reliabilityErrorLogEntry.setStatus('current')
reliabilityErrorLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: reliabilityErrorLogIndex.setStatus('current')
reliabilityErrorLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogId.setStatus('current')
reliabilityErrorLogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogValue.setStatus('current')
reliabilityErrorLogThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogThreshold.setStatus('current')
reliabilityErrorLogRawUpperBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogRawUpperBytes.setStatus('current')
reliabilityErrorLogRawLowerBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogRawLowerBytes.setStatus('current')
reliabilityErrorLogPOH = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogPOH.setStatus('current')
reliabilityErrorLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13742, 6, 10, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reliabilityErrorLogTime.setStatus('current')
systemStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 1)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: systemStarted.setStatus('current')
systemReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 2)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: systemReset.setStatus('current')
userLogin = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 3)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userLogin.setStatus('current')
userLogout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 4)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userLogout.setStatus('current')
userAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 5)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userAuthenticationFailure.setStatus('current')
userSessionTimeout = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 8)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userSessionTimeout.setStatus('current')
userAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 11)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "targetUser"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userAdded.setStatus('current')
userModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 12)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "targetUser"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userModified.setStatus('current')
userDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 13)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "targetUser"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userDeleted.setStatus('current')
roleAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 14)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "roleName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: roleAdded.setStatus('current')
roleModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 15)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "roleName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: roleModified.setStatus('current')
roleDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 16)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "roleName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: roleDeleted.setStatus('current')
deviceUpdateStarted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 20)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: deviceUpdateStarted.setStatus('current')
deviceUpdateCompleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 21)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: deviceUpdateCompleted.setStatus('current')
userBlocked = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 22)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userBlocked.setStatus('current')
powerControl = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 23)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "outletLabel"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletSensorState"), ("RARITAN-PX2-PDU2-MIB", "switchingOperation"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: powerControl.setStatus('current')
userPasswordChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 24)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "targetUser"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userPasswordChanged.setStatus('current')
passwordSettingsChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 28)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: passwordSettingsChanged.setStatus('current')
firmwareValidationFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 38)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: firmwareValidationFailed.setStatus('current')
logFileCleared = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 41)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: logFileCleared.setStatus('current')
bulkConfigurationSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 53)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: bulkConfigurationSaved.setStatus('current')
bulkConfigurationCopied = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 54)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: bulkConfigurationCopied.setStatus('current')
pduSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 60)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: pduSensorStateChange.setStatus('deprecated')
inletSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 61)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "inletLabel"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: inletSensorStateChange.setStatus('current')
inletPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 62)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "inletLabel"), ("RARITAN-PX2-PDU2-MIB", "inletPoleNumber"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletPoleSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletPoleSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletPoleSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsInletPoleSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: inletPoleSensorStateChange.setStatus('current')
outletSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 63)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "outletLabel"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: outletSensorStateChange.setStatus('current')
outletPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 64)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "outletLabel"), ("RARITAN-PX2-PDU2-MIB", "outletPoleNumber"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletPoleSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletPoleSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletPoleSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsOutletPoleSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: outletPoleSensorStateChange.setStatus('current')
overCurrentProtectorSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 65)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "overCurrentProtectorLabel"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "measurementsOverCurrentProtectorSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsOverCurrentProtectorSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsOverCurrentProtectorSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsOverCurrentProtectorSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: overCurrentProtectorSensorStateChange.setStatus('current')
externalSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 66)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "externalSensorNumber"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "measurementsExternalSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsExternalSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsExternalSensorState"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("RARITAN-PX2-PDU2-MIB", "externalSensorSerialNumber"), ("RARITAN-PX2-PDU2-MIB", "externalOnOffSensorSubtype"), ("RARITAN-PX2-PDU2-MIB", "externalSensorChannelNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: externalSensorStateChange.setStatus('current')
smtpMessageTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 67)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "smtpMessageRecipients"), ("RARITAN-PX2-PDU2-MIB", "smtpServer"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: smtpMessageTransmissionFailure.setStatus('current')
ldapError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 68)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: ldapError.setStatus('current')
deviceUpdateFailed = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 70)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "imageVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: deviceUpdateFailed.setStatus('current')
loadSheddingModeEntered = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 71)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: loadSheddingModeEntered.setStatus('current')
loadSheddingModeExited = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 72)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: loadSheddingModeExited.setStatus('current')
pingServerEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 73)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: pingServerEnabled.setStatus('current')
pingServerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 74)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: pingServerDisabled.setStatus('current')
serverNotReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 75)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: serverNotReachable.setStatus('current')
serverReachable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 76)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: serverReachable.setStatus('current')
rfCodeTagConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 77)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: rfCodeTagConnected.setStatus('current')
rfCodeTagDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 78)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: rfCodeTagDisconnected.setStatus('current')
deviceIdentificationChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 79)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "deviceChangedParameter"), ("RARITAN-PX2-PDU2-MIB", "changedParameterNewValue"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: deviceIdentificationChanged.setStatus('current')
usbSlaveConnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 80)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: usbSlaveConnected.setStatus('current')
usbSlaveDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 81)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: usbSlaveDisconnected.setStatus('current')
lhxSupportChanged = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 82)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "lhxSupportEnabled"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: lhxSupportChanged.setStatus('current')
userAcceptedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 83)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userAcceptedRestrictedServiceAgreement.setStatus('current')
userDeclinedRestrictedServiceAgreement = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 84)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: userDeclinedRestrictedServiceAgreement.setStatus('current')
wireSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 85)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "wireLabel"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "measurementsWireSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsWireSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsWireSensorState"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: wireSensorStateChange.setStatus('deprecated')
transferSwitchSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 86)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchLabel"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "measurementsTransferSwitchSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsTransferSwitchSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsTransferSwitchSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsTransferSwitchSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "transferSwitchLastTransferReason"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: transferSwitchSensorStateChange.setStatus('current')
deviceSettingsSaved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 88)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: deviceSettingsSaved.setStatus('current')
deviceSettingsRestored = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 89)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxIPAddress"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: deviceSettingsRestored.setStatus('current')
webcamInserted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 90)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "webcamModel"), ("RARITAN-PX2-PDU2-MIB", "webcamConnectionPort"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: webcamInserted.setStatus('current')
webcamRemoved = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 91)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "webcamModel"), ("RARITAN-PX2-PDU2-MIB", "webcamConnectionPort"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: webcamRemoved.setStatus('current')
inletEnabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 92)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "inletLabel"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: inletEnabled.setStatus('current')
inletDisabled = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 93)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "inletLabel"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: inletDisabled.setStatus('current')
serverConnectivityUnrecoverable = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 94)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "serverIPAddress"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: serverConnectivityUnrecoverable.setStatus('current')
radiusError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 95)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: radiusError.setStatus('current')
serverReachabilityError = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 96)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "serverIPAddress"), ("RARITAN-PX2-PDU2-MIB", "errorDescription"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: serverReachabilityError.setStatus('current')
inletSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 97)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "inletLabel"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: inletSensorReset.setStatus('current')
outletSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 98)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "outletLabel"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: outletSensorReset.setStatus('current')
unknownPeripheralDeviceAttached = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 99)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "peripheralDeviceRomcode"), ("RARITAN-PX2-PDU2-MIB", "peripheralDevicePackagePosition"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: unknownPeripheralDeviceAttached.setStatus('current')
peripheralDeviceFirmwareUpdate = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 100)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "peripheralDevicePackageSerialNumber"), ("RARITAN-PX2-PDU2-MIB", "peripheralDeviceFirmwareUpdateState"), ("RARITAN-PX2-PDU2-MIB", "peripheralDevicePackageFirmwareVersion"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: peripheralDeviceFirmwareUpdate.setStatus('current')
unitSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 101)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: unitSensorReset.setStatus('current')
unitSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 102)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsUnitSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: unitSensorStateChange.setStatus('current')
circuitSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 103)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "circuitNumber"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: circuitSensorStateChange.setStatus('current')
circuitPoleSensorStateChange = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 104)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "circuitNumber"), ("RARITAN-PX2-PDU2-MIB", "circuitPoleNumber"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitPoleSensorTimeStamp"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitPoleSensorValue"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitPoleSensorState"), ("RARITAN-PX2-PDU2-MIB", "measurementsCircuitPoleSensorSignedValue"), ("RARITAN-PX2-PDU2-MIB", "oldSensorState"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: circuitPoleSensorStateChange.setStatus('current')
circuitAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 105)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "circuitNumber"), ("RARITAN-PX2-PDU2-MIB", "circuitName"), ("RARITAN-PX2-PDU2-MIB", "circuitType"), ("RARITAN-PX2-PDU2-MIB", "circuitRatedCurrent"), ("RARITAN-PX2-PDU2-MIB", "circuitCTRating"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: circuitAdded.setStatus('current')
circuitDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 106)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "circuitNumber"), ("RARITAN-PX2-PDU2-MIB", "circuitName"), ("RARITAN-PX2-PDU2-MIB", "circuitType"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: circuitDeleted.setStatus('current')
circuitModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 107)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "circuitNumber"), ("RARITAN-PX2-PDU2-MIB", "circuitName"), ("RARITAN-PX2-PDU2-MIB", "circuitType"), ("RARITAN-PX2-PDU2-MIB", "circuitRatedCurrent"), ("RARITAN-PX2-PDU2-MIB", "circuitCTRating"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: circuitModified.setStatus('current')
circuitSensorReset = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 108)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "circuitNumber"), ("RARITAN-PX2-PDU2-MIB", "typeOfSensor"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: circuitSensorReset.setStatus('current')
powerMeterAdded = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 109)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "powerMeterPhaseCTRating"), ("RARITAN-PX2-PDU2-MIB", "powerMeterNeutralCTRating"), ("RARITAN-PX2-PDU2-MIB", "powerMeterEarthCTRating"), ("RARITAN-PX2-PDU2-MIB", "powerMeterPanelPositions"), ("RARITAN-PX2-PDU2-MIB", "powerMeterPanelLayout"), ("RARITAN-PX2-PDU2-MIB", "powerMeterPanelNumbering"), ("RARITAN-PX2-PDU2-MIB", "powerMeterType"), ("RARITAN-PX2-PDU2-MIB", "inletRatedCurrent"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: powerMeterAdded.setStatus('current')
powerMeterDeleted = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 110)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "powerMeterType"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: powerMeterDeleted.setStatus('current')
powerMeterModified = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 111)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pduNumber"), ("RARITAN-PX2-PDU2-MIB", "userName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "powerMeterPhaseCTRating"), ("RARITAN-PX2-PDU2-MIB", "powerMeterNeutralCTRating"), ("RARITAN-PX2-PDU2-MIB", "powerMeterEarthCTRating"), ("RARITAN-PX2-PDU2-MIB", "powerMeterType"), ("RARITAN-PX2-PDU2-MIB", "inletRatedCurrent"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: powerMeterModified.setStatus('current')
smsMessageTransmissionFailure = NotificationType((1, 3, 6, 1, 4, 1, 13742, 6, 0, 112)).setObjects(("RARITAN-PX2-PDU2-MIB", "pduName"), ("RARITAN-PX2-PDU2-MIB", "pxInetAddressType"), ("RARITAN-PX2-PDU2-MIB", "pxInetIPAddress"), ("RARITAN-PX2-PDU2-MIB", "agentInetPortNumber"), ("RARITAN-PX2-PDU2-MIB", "phoneNumber"), ("SNMPv2-MIB", "sysContact"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("RARITAN-PX2-PDU2-MIB", "pduSerialNumber"))
if mibBuilder.loadTexts: smsMessageTransmissionFailure.setStatus('current')
mibBuilder.exportSymbols("RARITAN-PX2-PDU2-MIB", serverReachabilityTable=serverReachabilityTable, circuitPowerSource=circuitPowerSource, transferSwitchSensorHysteresis=transferSwitchSensorHysteresis, inletSensorMinimum=inletSensorMinimum, logUnitSensorAvgValue=logUnitSensorAvgValue, logInletPoleSensorMaxValue=logInletPoleSensorMaxValue, ProductTypeEnumeration=ProductTypeEnumeration, outletPoleSensorLogEntry=outletPoleSensorLogEntry, actuatorControlTable=actuatorControlTable, inletPoleCount=inletPoleCount, inletLabel=inletLabel, inletSensorMeasurementsTable=inletSensorMeasurementsTable, overCurrentProtectorSensorStateChange=overCurrentProtectorSensorStateChange, activeDNSServerAddressType=activeDNSServerAddressType, overCurrentProtectorSensorEnabledThresholds=overCurrentProtectorSensorEnabledThresholds, outletRatedCurrent=outletRatedCurrent, overCurrentProtectorSensorUpperWarningThreshold=overCurrentProtectorSensorUpperWarningThreshold, reliability=reliability, outletSwitchControlEntry=outletSwitchControlEntry, unitSensorSignedMinimum=unitSensorSignedMinimum, complianceRev2=complianceRev2, inletSensorUpperCriticalThreshold=inletSensorUpperCriticalThreshold, reliabilityErrorLog=reliabilityErrorLog, pduName=pduName, inletPoleSensorDecimalDigits=inletPoleSensorDecimalDigits, externalSensorPosition=externalSensorPosition, webcamRemoved=webcamRemoved, circuitPoleSensorSignedUpperWarningThreshold=circuitPoleSensorSignedUpperWarningThreshold, powerMeterConfigurationEntry=powerMeterConfigurationEntry, nameplateTable=nameplateTable, unitSensorLowerWarningThreshold=unitSensorLowerWarningThreshold, logInletSensorMaxValue=logInletSensorMaxValue, circuitSensorMeasurementsTable=circuitSensorMeasurementsTable, compliances=compliances, unitSensorConfigurationEntry=unitSensorConfigurationEntry, wireSensorMeasurementsEntry=wireSensorMeasurementsEntry, SensorTypeEnumeration=SensorTypeEnumeration, userName=userName, outletPoleSensorTolerance=outletPoleSensorTolerance, measurementsOverCurrentProtectorSensorState=measurementsOverCurrentProtectorSensorState, measurementsExternalSensor=measurementsExternalSensor, roleName=roleName, inletSensorSignedLowerWarningThreshold=inletSensorSignedLowerWarningThreshold, logIndex=logIndex, transferSwitchSensorUnits=transferSwitchSensorUnits, pduRatedCurrent=pduRatedCurrent, inletSensorSignedUpperCriticalThreshold=inletSensorSignedUpperCriticalThreshold, unitSensorMeasurementsTable=unitSensorMeasurementsTable, reliabilityErrorLogIndex=reliabilityErrorLogIndex, outletPowerCyclingPowerOffPeriod=outletPowerCyclingPowerOffPeriod, inletSensorMeasurementsEntry=inletSensorMeasurementsEntry, outletPoleIndex=outletPoleIndex, systemReset=systemReset, pingServerDisabled=pingServerDisabled, measurementsInletSensorSignedValue=measurementsInletSensorSignedValue, trapInformationEntry=trapInformationEntry, outletSensorControlTable=outletSensorControlTable, outletSensorStateChange=outletSensorStateChange, logTransferSwitchSensorDataAvailable=logTransferSwitchSensorDataAvailable, unitConfigurationTable=unitConfigurationTable, outletPoleSensorSignedMaximum=outletPoleSensorSignedMaximum, outletSensorAccuracy=outletSensorAccuracy, transferSwitchControl=transferSwitchControl, inletSensorConfigurationTable=inletSensorConfigurationTable, peripheralDevicePackageFirmwareVersion=peripheralDevicePackageFirmwareVersion, unitSensorEnabledThresholds=unitSensorEnabledThresholds, outletSensorUpperWarningThreshold=outletSensorUpperWarningThreshold, activeDNSServerTable=activeDNSServerTable, unitSensorMaximum=unitSensorMaximum, logIndexTable=logIndexTable, inletControllerCount=inletControllerCount, measurementsUnitSensorSignedValue=measurementsUnitSensorSignedValue, phoneNumber=phoneNumber, inletPoleSensorLogAvailable=inletPoleSensorLogAvailable, overCurrentProtectorPowerSource=overCurrentProtectorPowerSource, pxInetAddressType=pxInetAddressType, measurementsTransferSwitchSensorTimeStamp=measurementsTransferSwitchSensorTimeStamp, typeOfSensor=typeOfSensor, reliabilityDataRawUpperBytes=reliabilityDataRawUpperBytes, outletPoleSensorSignedUpperWarningThreshold=outletPoleSensorSignedUpperWarningThreshold, outletControllerCount=outletControllerCount, unitSensorResetValue=unitSensorResetValue, logExternalSensor=logExternalSensor, outletSensorUnits=outletSensorUnits, wireConfigurationTable=wireConfigurationTable, externalSensorYCoordinate=externalSensorYCoordinate, inletSensorResolution=inletSensorResolution, externalSensorMinimum=externalSensorMinimum, transferSwitchSensorUpperCriticalThreshold=transferSwitchSensorUpperCriticalThreshold, overCurrentProtectorSensorSignedMaximum=overCurrentProtectorSensorSignedMaximum, inletSensorStateChange=inletSensorStateChange, transferSwitchSensorEnabledThresholds=transferSwitchSensorEnabledThresholds, measurementsOutletPoleSensorSignedValue=measurementsOutletPoleSensorSignedValue, conformance=conformance, outletPoleSensorMeasurementsEntry=outletPoleSensorMeasurementsEntry, overCurrentProtectorSensorSignedLowerWarningThreshold=overCurrentProtectorSensorSignedLowerWarningThreshold, measurementsCircuit=measurementsCircuit, circuitPoleSensorLogTable=circuitPoleSensorLogTable, logOverCurrentProtector=logOverCurrentProtector, inletPoleNode=inletPoleNode, circuitSensorLogAvailable=circuitSensorLogAvailable, measurementsWireSensorTimeStamp=measurementsWireSensorTimeStamp, circuitSensorStateChange=circuitSensorStateChange, smsMessageTransmissionFailure=smsMessageTransmissionFailure, BoardTypeEnumeration=BoardTypeEnumeration, outletSensorSignedUpperWarningThreshold=outletSensorSignedUpperWarningThreshold, externalSensorStateChange=externalSensorStateChange, wireSensorResolution=wireSensorResolution, wireSensorAccuracy=wireSensorAccuracy, measurementsOutletSensorTimeStamp=measurementsOutletSensorTimeStamp, outletPoleSensorUpperWarningThreshold=outletPoleSensorUpperWarningThreshold, logCircuitSensorSignedMaxValue=logCircuitSensorSignedMaxValue, logCircuitSensorDataAvailable=logCircuitSensorDataAvailable, reliabilityData=reliabilityData, rcmState=rcmState, bulkConfigurationCopied=bulkConfigurationCopied, circuitPoleSensorSignedUpperCriticalThreshold=circuitPoleSensorSignedUpperCriticalThreshold, unitSensorHysteresis=unitSensorHysteresis, overCurrentProtectorSensorMinimum=overCurrentProtectorSensorMinimum, measurementsInletPoleSensorState=measurementsInletPoleSensorState, environmental=environmental, globalOutletStateOnStartup=globalOutletStateOnStartup, inletSensorLogEntry=inletSensorLogEntry, measurementsOutletSensorSignedValue=measurementsOutletSensorSignedValue, circuitSensorMinimum=circuitSensorMinimum, activeDNSServerEntry=activeDNSServerEntry, overCurrentProtectorSensorMeasurementsEntry=overCurrentProtectorSensorMeasurementsEntry, pingServerEnabled=pingServerEnabled, circuitSensorDecimalDigits=circuitSensorDecimalDigits, externalSensorTypeDefaultLowerWarningThreshold=externalSensorTypeDefaultLowerWarningThreshold, serverID=serverID, inletPoleSensorConfigurationTable=inletPoleSensorConfigurationTable, logOutletPoleSensorSignedMaxValue=logOutletPoleSensorSignedMaxValue, raritan=raritan, measurementsExternalSensorState=measurementsExternalSensorState, pduCount=pduCount, outletSensorStateChangeDelay=outletSensorStateChangeDelay, peripheralDevicePackageMinFirmwareVersion=peripheralDevicePackageMinFirmwareVersion, userAdded=userAdded, transferSwitchPoleConfigurationTable=transferSwitchPoleConfigurationTable, transferSwitchPoleConfigurationEntry=transferSwitchPoleConfigurationEntry, overCurrentProtectorSensorConfigurationEntry=overCurrentProtectorSensorConfigurationEntry, outletSensorConfigurationTable=outletSensorConfigurationTable, wireConfigurationEntry=wireConfigurationEntry, wireSensorStateChange=wireSensorStateChange, measurementsUnitSensorTimeStamp=measurementsUnitSensorTimeStamp, logTransferSwitchSensorAvgValue=logTransferSwitchSensorAvgValue, outletSensorLogTable=outletSensorLogTable, measurementsInletPoleSensorTimeStamp=measurementsInletPoleSensorTimeStamp, transferSwitchPoleIn2Node=transferSwitchPoleIn2Node, reliabilityDataWorstValue=reliabilityDataWorstValue, wireSensorConfigurationTable=wireSensorConfigurationTable, externalSensorZCoordinate=externalSensorZCoordinate, outletCount=outletCount, transferSwitchSensorLogEntry=transferSwitchSensorLogEntry, logCircuitPoleSensorMaxValue=logCircuitPoleSensorMaxValue, changedParameterNewValue=changedParameterNewValue, transferSwitchSensorTolerance=transferSwitchSensorTolerance, logWire=logWire, transferSwitchPoleOutNode=transferSwitchPoleOutNode, overCurrentProtectorSensorSignedMinimum=overCurrentProtectorSensorSignedMinimum, externalSensorUpperWarningThreshold=externalSensorUpperWarningThreshold, measurementsWireSensorValue=measurementsWireSensorValue, logCircuit=logCircuit, inletConfigurationTable=inletConfigurationTable, boardFirmwareTimeStamp=boardFirmwareTimeStamp, outletSensorLowerCriticalThreshold=outletSensorLowerCriticalThreshold, overCurrentProtectorSensorResolution=overCurrentProtectorSensorResolution, controllerConfigurationEntry=controllerConfigurationEntry, sensorType=sensorType, ExternalSensorsZCoordinateUnitsEnumeration=ExternalSensorsZCoordinateUnitsEnumeration, circuitPoleConfigurationEntry=circuitPoleConfigurationEntry, SensorStateEnumeration=SensorStateEnumeration, GlobalOutletStateOnStartupEnumeration=GlobalOutletStateOnStartupEnumeration, unitSensorAccuracy=unitSensorAccuracy, TransferSwitchTransferReasonEnumeration=TransferSwitchTransferReasonEnumeration, measurementsGroup=measurementsGroup, circuitPoleSensorUnits=circuitPoleSensorUnits, inletPoleConfigurationEntry=inletPoleConfigurationEntry, externalSensorTypeDefaultThresholdsEntry=externalSensorTypeDefaultThresholdsEntry, outletPoleSensorMaximum=outletPoleSensorMaximum, wireSensorStateChangeDelay=wireSensorStateChangeDelay, unitSensorControl=unitSensorControl, circuitId=circuitId, logTransferSwitch=logTransferSwitch, imageVersion=imageVersion, circuitPoleSensorMaximum=circuitPoleSensorMaximum, unitSensorControlTable=unitSensorControlTable, outletName=outletName, logInletPoleSensorSignedMinValue=logInletPoleSensorSignedMinValue, logInlet=logInlet, inletSensorMaximum=inletSensorMaximum, outletRatedVoltage=outletRatedVoltage, externalSensorLogAvailable=externalSensorLogAvailable, externalSensorChannelNumber=externalSensorChannelNumber, circuitPoleCount=circuitPoleCount, inletId=inletId, outletPoleSensorSignedUpperCriticalThreshold=outletPoleSensorSignedUpperCriticalThreshold, transferSwitchSensorMinimum=transferSwitchSensorMinimum, inletSensorControlTable=inletSensorControlTable, circuitSensorUnits=circuitSensorUnits, PanelNumberingEnumeration=PanelNumberingEnumeration, board=board, reliabilityDataMaxPossible=reliabilityDataMaxPossible, outletPoleSensorStateChange=outletPoleSensorStateChange, overCurrentProtectorPoleInNode=overCurrentProtectorPoleInNode, externalSensorUnits=externalSensorUnits, wireSensorUpperCriticalThreshold=wireSensorUpperCriticalThreshold, overCurrentProtectorSensorLowerWarningThreshold=overCurrentProtectorSensorLowerWarningThreshold, pduDaisychainMemberType=pduDaisychainMemberType, externalOnOffSensorSubtype=externalOnOffSensorSubtype, measurementsUnitSensorValue=measurementsUnitSensorValue, powerMeter=powerMeter, switchingOperation=switchingOperation, outletSwitchingState=outletSwitchingState, DaisychainMemberTypeEnumeration=DaisychainMemberTypeEnumeration, externalSensorAccuracy=externalSensorAccuracy, outletSequenceDelay=outletSequenceDelay, outletNonCritical=outletNonCritical, outletPoleConfigurationEntry=outletPoleConfigurationEntry, overCurrentProtectorSensorLowerCriticalThreshold=overCurrentProtectorSensorLowerCriticalThreshold, logTransferSwitchSensorState=logTransferSwitchSensorState, measurementsOutletPoleSensorIsAvailable=measurementsOutletPoleSensorIsAvailable, roleModified=roleModified, inletPoleSensorResolution=inletPoleSensorResolution, serverPingEnabled=serverPingEnabled, reliabilityId=reliabilityId, measurementsInletSensorIsAvailable=measurementsInletSensorIsAvailable, logInletSensorMinValue=logInletSensorMinValue, measurementPeriod=measurementPeriod, outletLabel=outletLabel, usbSlaveDisconnected=usbSlaveDisconnected, inletRatedVoltage=inletRatedVoltage, transferSwitchAutoReTransferWaitTime=transferSwitchAutoReTransferWaitTime, peripheralDevicePackageId=peripheralDevicePackageId, logExternalSensorAvgValue=logExternalSensorAvgValue, unitDeviceCapabilities=unitDeviceCapabilities, outletRatedVA=outletRatedVA, inletEnabled=inletEnabled, overCurrentProtectorSensorLogEntry=overCurrentProtectorSensorLogEntry, trapsGroup=trapsGroup, wireSensorHysteresis=wireSensorHysteresis, URL=URL, inletSensorTolerance=inletSensorTolerance, serverCount=serverCount, inlets=inlets, peripheralDevicePackagePosition=peripheralDevicePackagePosition, outletSensorLogEntry=outletSensorLogEntry, logWireSensorAvgValue=logWireSensorAvgValue, measurementsUnitSensorState=measurementsUnitSensorState, logCircuitPoleSensorState=logCircuitPoleSensorState, logUnitSensorSignedMaxValue=logUnitSensorSignedMaxValue, measurementsUnit=measurementsUnit, activeNTPServerTable=activeNTPServerTable)
mibBuilder.exportSymbols("RARITAN-PX2-PDU2-MIB", externalSensorTypeDefaultHysteresis=externalSensorTypeDefaultHysteresis, loadSheddingModeEntered=loadSheddingModeEntered, logTimeStampTable=logTimeStampTable, circuitSensorControl=circuitSensorControl, inletSensorAccuracy=inletSensorAccuracy, inletPoleSensorStateChange=inletPoleSensorStateChange, outletUseGlobalPowerCyclingPowerOffPeriod=outletUseGlobalPowerCyclingPowerOffPeriod, wireSensorUnits=wireSensorUnits, logInletPoleSensorSignedAvgValue=logInletPoleSensorSignedAvgValue, overCurrentProtectorPoleOutNode=overCurrentProtectorPoleOutNode, circuitPoleConfigurationTable=circuitPoleConfigurationTable, unitSensorMeasurementsEntry=unitSensorMeasurementsEntry, externalSensorMeasurementsEntry=externalSensorMeasurementsEntry, deviceCascadePosition=deviceCascadePosition, outletSensorResolution=outletSensorResolution, inletName=inletName, transferSwitchConfigurationEntry=transferSwitchConfigurationEntry, pduSensorStateChange=pduSensorStateChange, serverReachable=serverReachable, transferSwitchCount=transferSwitchCount, reliabilityDataThreshold=reliabilityDataThreshold, obsoleteObjectsGroup=obsoleteObjectsGroup, logExternalSensorMinValue=logExternalSensorMinValue, logCircuitPoleSensorSignedAvgValue=logCircuitPoleSensorSignedAvgValue, productType=productType, logExternalSensorMaxValue=logExternalSensorMaxValue, logCircuitPoleSensorMinValue=logCircuitPoleSensorMinValue, measurementsOutletPoleSensorState=measurementsOutletPoleSensorState, inletSensorReset=inletSensorReset, powerMeterPanelPositions=powerMeterPanelPositions, circuitModified=circuitModified, deviceSettingsSaved=deviceSettingsSaved, externalSensorTypeDefaultUpperWarningThreshold=externalSensorTypeDefaultUpperWarningThreshold, outletPowerSource=outletPowerSource, serverReachability=serverReachability, CircuitTypeEnumeration=CircuitTypeEnumeration, externalSensorTolerance=externalSensorTolerance, oldMeasurementsGroup=oldMeasurementsGroup, externalSensorAlarmedToNormalDelay=externalSensorAlarmedToNormalDelay, circuitPoleSensorLowerCriticalThreshold=circuitPoleSensorLowerCriticalThreshold, oldConfigGroup=oldConfigGroup, targetUser=targetUser, passwordSettingsChanged=passwordSettingsChanged, circuitConfigurationTable=circuitConfigurationTable, logInletSensorSignedAvgValue=logInletSensorSignedAvgValue, logUnitSensorState=logUnitSensorState, outletSensorLogAvailable=outletSensorLogAvailable, peripheralDevicePackageModel=peripheralDevicePackageModel, actuatorState=actuatorState, agentInetPortNumber=agentInetPortNumber, externalSensorType=externalSensorType, nameplateEntry=nameplateEntry, circuitDeleted=circuitDeleted, firstNTPServerAddressType=firstNTPServerAddressType, externalSensorTypeDefaultUpperCriticalThreshold=externalSensorTypeDefaultUpperCriticalThreshold, powerMeterEarthCTRating=powerMeterEarthCTRating, HundredthsOfAPercentage=HundredthsOfAPercentage, measurementsInletSensorValue=measurementsInletSensorValue, externalSensorCount=externalSensorCount, measurementsOverCurrentProtectorSensorIsAvailable=measurementsOverCurrentProtectorSensorIsAvailable, rfCodeTagConnected=rfCodeTagConnected, unitSensorLogAvailable=unitSensorLogAvailable, externalSensorConfigurationTable=externalSensorConfigurationTable, unitSensorStateChangeDelay=unitSensorStateChangeDelay, logUnitSensorMaxValue=logUnitSensorMaxValue, NetworkInterfaceTypeEnumeration=NetworkInterfaceTypeEnumeration, webcamConnectionPort=webcamConnectionPort, inletRatedFrequency=inletRatedFrequency, inletSensorDecimalDigits=inletSensorDecimalDigits, outletSwitchable=outletSwitchable, measurementsWireSensorIsAvailable=measurementsWireSensorIsAvailable, outletSensorLowerWarningThreshold=outletSensorLowerWarningThreshold, logOverCurrentProtectorSensorSignedAvgValue=logOverCurrentProtectorSensorSignedAvgValue, unitSensorTolerance=unitSensorTolerance, overCurrentProtectorIndex=overCurrentProtectorIndex, oldestLogID=oldestLogID, inletConfigurationEntry=inletConfigurationEntry, outletSensorSignedMaximum=outletSensorSignedMaximum, logConfigurationEntry=logConfigurationEntry, externalSensorDecimalDigits=externalSensorDecimalDigits, deviceUpdateCompleted=deviceUpdateCompleted, inletSensorSignedMaximum=inletSensorSignedMaximum, inletSensorStateChangeDelay=inletSensorStateChangeDelay, inletPoleSensorLowerWarningThreshold=inletPoleSensorLowerWarningThreshold, unitSensorConfigurationTable=unitSensorConfigurationTable, transferSwitchSensorMeasurementsEntry=transferSwitchSensorMeasurementsEntry, frontPanelActuatorControl=frontPanelActuatorControl, logCircuitSensorMaxValue=logCircuitSensorMaxValue, overCurrentProtectorPoleConfigurationEntry=overCurrentProtectorPoleConfigurationEntry, rfCodeTagDisconnected=rfCodeTagDisconnected, externalSensorIsActuator=externalSensorIsActuator, overCurrentProtectorConfigurationEntry=overCurrentProtectorConfigurationEntry, ldapError=ldapError, logOutletPoleSensorSignedAvgValue=logOutletPoleSensorSignedAvgValue, transferSwitchSensorMeasurementsTable=transferSwitchSensorMeasurementsTable, logTimeStampEntry=logTimeStampEntry, logOverCurrentProtectorSensorState=logOverCurrentProtectorSensorState, loadShedding=loadShedding, outletPoleSensorHysteresis=outletPoleSensorHysteresis, logCircuitSensorSignedMinValue=logCircuitSensorSignedMinValue, wires=wires, rcmControl=rcmControl, externalSensorLowerCriticalThreshold=externalSensorLowerCriticalThreshold, inletPlugDescriptor=inletPlugDescriptor, wirePowerSource=wirePowerSource, pxIPAddress=pxIPAddress, inletPoleSensorUpperWarningThreshold=inletPoleSensorUpperWarningThreshold, activeNTPServerIndex=activeNTPServerIndex, managedExternalSensorCount=managedExternalSensorCount, inletPoleSensorUpperCriticalThreshold=inletPoleSensorUpperCriticalThreshold, webcamInserted=webcamInserted, pduId=pduId, measurementsOutletSensorValue=measurementsOutletSensorValue, transferSwitchSensorUpperWarningThreshold=transferSwitchSensorUpperWarningThreshold, measurementsWireSensorState=measurementsWireSensorState, transferSwitchAlarmOverride=transferSwitchAlarmOverride, inletSensorSignedLowerCriticalThreshold=inletSensorSignedLowerCriticalThreshold, measurementsOutletPoleSensorTimeStamp=measurementsOutletPoleSensorTimeStamp, externalSensorName=externalSensorName, outletPoleSensorLogAvailable=outletPoleSensorLogAvailable, measurementsTransferSwitchSensorState=measurementsTransferSwitchSensorState, circuitPoleSensorStateChange=circuitPoleSensorStateChange, measurementsCircuitSensorTimeStamp=measurementsCircuitSensorTimeStamp, pduNumber=pduNumber, newestLogID=newestLogID, outletPoleNumber=outletPoleNumber, usbSlaveConnected=usbSlaveConnected, PhaseEnumeration=PhaseEnumeration, outletSensorConfigurationEntry=outletSensorConfigurationEntry, outletSwitchingTimeStamp=outletSwitchingTimeStamp, unitSensorDecimalDigits=unitSensorDecimalDigits, outletPoleSensorMinimum=outletPoleSensorMinimum, outletConfigurationTable=outletConfigurationTable, logOutletPoleSensorSignedMinValue=logOutletPoleSensorSignedMinValue, pduSerialNumber=pduSerialNumber, logWireSensorMinValue=logWireSensorMinValue, logCircuitSensorSignedAvgValue=logCircuitSensorSignedAvgValue, circuitPoleSensorMeasurementsEntry=circuitPoleSensorMeasurementsEntry, measurementsExternalSensorValue=measurementsExternalSensorValue, outletPoleSensorLogTable=outletPoleSensorLogTable, wireSensorMeasurementsTable=wireSensorMeasurementsTable, inletRatedVA=inletRatedVA, measurementsTransferSwitch=measurementsTransferSwitch, activeNTPServerAddress=activeNTPServerAddress, secondNTPServerAddress=secondNTPServerAddress, powerMeterDeleted=powerMeterDeleted, userDeleted=userDeleted, externalSensorMeasurementsTable=externalSensorMeasurementsTable, circuitPoleSensorSignedLowerCriticalThreshold=circuitPoleSensorSignedLowerCriticalThreshold, transferSwitchPoleLine=transferSwitchPoleLine, rcmSelfTestTable=rcmSelfTestTable, inletPoleSensorUnits=inletPoleSensorUnits, circuitCapabilities=circuitCapabilities, circuitPoleSensorSignedLowerWarningThreshold=circuitPoleSensorSignedLowerWarningThreshold, unitSensorLogEntry=unitSensorLogEntry, controlGroup=controlGroup, outletSensorSignedLowerCriticalThreshold=outletSensorSignedLowerCriticalThreshold, utcOffset=utcOffset, inletSensorControl=inletSensorControl, logCircuitSensorState=logCircuitSensorState, externalSensorDescription=externalSensorDescription, transferSwitchSensorSignedLowerCriticalThreshold=transferSwitchSensorSignedLowerCriticalThreshold, transferSwitchSensorConfigurationEntry=transferSwitchSensorConfigurationEntry, PlugTypeEnumeration=PlugTypeEnumeration, outletSensorHysteresis=outletSensorHysteresis, measurementsOverCurrentProtectorSensorTimeStamp=measurementsOverCurrentProtectorSensorTimeStamp, pxInetNetmask=pxInetNetmask, outletSensorDecimalDigits=outletSensorDecimalDigits, circuitSensorConfigurationEntry=circuitSensorConfigurationEntry, transferSwitchSensorConfigurationTable=transferSwitchSensorConfigurationTable, logInletSensorDataAvailable=logInletSensorDataAvailable, circuitSensorLogTable=circuitSensorLogTable, unitSensorLogTable=unitSensorLogTable, userLogout=userLogout, overCurrentProtectorType=overCurrentProtectorType, measurementsOutletSensorIsAvailable=measurementsOutletSensorIsAvailable, logOverCurrentProtectorSensorSignedMinValue=logOverCurrentProtectorSensorSignedMinValue, inletPoleConfigurationTable=inletPoleConfigurationTable, measurementsCircuitPoleSensorValue=measurementsCircuitPoleSensorValue, wireSensorUpperWarningThreshold=wireSensorUpperWarningThreshold, radiusError=radiusError, transferSwitchPoleCount=transferSwitchPoleCount, inletPoleSensorMaximum=inletPoleSensorMaximum, inletPoleSensorSignedMaximum=inletPoleSensorSignedMaximum, smtpMessageTransmissionFailure=smtpMessageTransmissionFailure, externalSensorResolution=externalSensorResolution, logInletSensorAvgValue=logInletSensorAvgValue, circuitSensorResetValue=circuitSensorResetValue, loadSheddingModeExited=loadSheddingModeExited, logTransferSwitchSensorSignedMaxValue=logTransferSwitchSensorSignedMaxValue, activeDNSServerAddressSource=activeDNSServerAddressSource, logFileCleared=logFileCleared, measurementsOutlet=measurementsOutlet, inletPoleSensorTolerance=inletPoleSensorTolerance, outletSensorMeasurementsTable=outletSensorMeasurementsTable, outletSensorMeasurementsEntry=outletSensorMeasurementsEntry, circuitNumber=circuitNumber, logCircuitPoleSensorDataAvailable=logCircuitPoleSensorDataAvailable, inletPoleSensorLowerCriticalThreshold=inletPoleSensorLowerCriticalThreshold, transferSwitchLastTransferReason=transferSwitchLastTransferReason, activeDNSServerAddress=activeDNSServerAddress, transferSwitchCapabilities=transferSwitchCapabilities, peripheralDevicePackageSerialNumber=peripheralDevicePackageSerialNumber, logOutletSensorSignedAvgValue=logOutletSensorSignedAvgValue, inletPoleSensorSignedUpperCriticalThreshold=inletPoleSensorSignedUpperCriticalThreshold, measurementsInletPoleSensorIsAvailable=measurementsInletPoleSensorIsAvailable, roleDeleted=roleDeleted, wireCapabilities=wireCapabilities, circuitSensorLowerCriticalThreshold=circuitSensorLowerCriticalThreshold, transferSwitchSensorMaximum=transferSwitchSensorMaximum, logInletSensorSignedMaxValue=logInletSensorSignedMaxValue, logCircuitPoleSensorAvgValue=logCircuitPoleSensorAvgValue, activeNTPServerEntry=activeNTPServerEntry, outletPoleSensorUnits=outletPoleSensorUnits, powerMeterConfigurationTable=powerMeterConfigurationTable, reliabilityIndex=reliabilityIndex, overCurrentProtectorName=overCurrentProtectorName, outletSensorControlEntry=outletSensorControlEntry, userAuthenticationFailure=userAuthenticationFailure, bulkConfigurationSaved=bulkConfigurationSaved, reliabilityErrorLogPOH=reliabilityErrorLogPOH, boardFirmwareVersion=boardFirmwareVersion, outletSensorTolerance=outletSensorTolerance, inletPoleIndex=inletPoleIndex, unitSensorUpperWarningThreshold=unitSensorUpperWarningThreshold, powerMeterType=powerMeterType, circuitPoleSensorHysteresis=circuitPoleSensorHysteresis, measurementsCircuitSensorState=measurementsCircuitSensorState, transferSwitchSensorDecimalDigits=transferSwitchSensorDecimalDigits, reliabilityDataValue=reliabilityDataValue, overCurrentProtectorPoleIndex=overCurrentProtectorPoleIndex, logWireSensorMaxValue=logWireSensorMaxValue, inletPoleSensorLogEntry=inletPoleSensorLogEntry, outletPoleSensorLowerCriticalThreshold=outletPoleSensorLowerCriticalThreshold, systemStarted=systemStarted, logTransferSwitchSensorSignedMinValue=logTransferSwitchSensorSignedMinValue, pduRatedVA=pduRatedVA, unitSensorSignedUpperWarningThreshold=unitSensorSignedUpperWarningThreshold, transferSwitchPowerSource2=transferSwitchPowerSource2, overCurrentProtectorSensorUpperCriticalThreshold=overCurrentProtectorSensorUpperCriticalThreshold, circuitPoleSensorSignedMaximum=circuitPoleSensorSignedMaximum, AddressSourceEnumeration=AddressSourceEnumeration, circuitPoleSensorSignedMinimum=circuitPoleSensorSignedMinimum, overCurrentProtectorSensorStateChangeDelay=overCurrentProtectorSensorStateChangeDelay, transferSwitchControlTable=transferSwitchControlTable, wireLabel=wireLabel, externalSensorUseDefaultThresholds=externalSensorUseDefaultThresholds, control=control, inletSensorUnits=inletSensorUnits, ReceptacleTypeEnumeration=ReceptacleTypeEnumeration, activeDNSServerCount=activeDNSServerCount, wireSensorEnabledThresholds=wireSensorEnabledThresholds, logUnitSensorSignedAvgValue=logUnitSensorSignedAvgValue, netmask=netmask)
mibBuilder.exportSymbols("RARITAN-PX2-PDU2-MIB", cascadedDeviceConnected=cascadedDeviceConnected, circuitPolePanelPosition=circuitPolePanelPosition, trapInformationGroup=trapInformationGroup, pduRatedVoltage=pduRatedVoltage, pduRatedFrequency=pduRatedFrequency, gateway=gateway, logInletPoleSensorMinValue=logInletPoleSensorMinValue, inletRCMResidualOperatingCurrent=inletRCMResidualOperatingCurrent, wireSensorMinimum=wireSensorMinimum, circuitSensorMaximum=circuitSensorMaximum, oldSensorState=oldSensorState, measurementsInletPoleSensorValue=measurementsInletPoleSensorValue, inletPoleSensorSignedMinimum=inletPoleSensorSignedMinimum, unknownPeripheralDeviceAttached=unknownPeripheralDeviceAttached, wireSensorLogAvailable=wireSensorLogAvailable, traps=traps, networkInterfaceType=networkInterfaceType, transferSwitchSensorSignedMaximum=transferSwitchSensorSignedMaximum, serverReachabilityEntry=serverReachabilityEntry, outletPoleSensorConfigurationTable=outletPoleSensorConfigurationTable, measurementsExternalSensorIsAvailable=measurementsExternalSensorIsAvailable, globalOutletPowerCyclingPowerOffPeriod=globalOutletPowerCyclingPowerOffPeriod, outletDeviceCapabilities=outletDeviceCapabilities, externalSensors=externalSensors, circuitSensorLowerWarningThreshold=circuitSensorLowerWarningThreshold, reliabilityDataEntry=reliabilityDataEntry, logOutletSensorMaxValue=logOutletSensorMaxValue, transferSwitchControlEntry=transferSwitchControlEntry, pduManufacturer=pduManufacturer, transferSwitchLabel=transferSwitchLabel, serverConnectivityUnrecoverable=serverConnectivityUnrecoverable, logOutletSensorMinValue=logOutletSensorMinValue, transferSwitchTransferToInlet=transferSwitchTransferToInlet, overCurrentProtectorCapabilities=overCurrentProtectorCapabilities, circuitPoleCTNumber=circuitPoleCTNumber, outletPoleCount=outletPoleCount, overCurrentProtectorSensorMeasurementsTable=overCurrentProtectorSensorMeasurementsTable, circuitCount=circuitCount, inletSensorEnabledThresholds=inletSensorEnabledThresholds, measurementsOutletSensorState=measurementsOutletSensorState, activeNTPServerCount=activeNTPServerCount, powerMeterAdded=powerMeterAdded, outletStateOnStartup=outletStateOnStartup, outletPoleSensorDecimalDigits=outletPoleSensorDecimalDigits, inletSensorResetValue=inletSensorResetValue, externalSensorNumber=externalSensorNumber, overCurrentProtectorLabel=overCurrentProtectorLabel, transferSwitchPreferredInlet=transferSwitchPreferredInlet, reliabilityErrorLogId=reliabilityErrorLogId, circuitName=circuitName, circuitSensorControlEntry=circuitSensorControlEntry, logOutletSensorAvgValue=logOutletSensorAvgValue, circuitSensorSignedMinimum=circuitSensorSignedMinimum, wireSensorLowerWarningThreshold=wireSensorLowerWarningThreshold, circuitSensorEnabledThresholds=circuitSensorEnabledThresholds, measurementsTransferSwitchSensorIsAvailable=measurementsTransferSwitchSensorIsAvailable, measurementsCircuitSensorValue=measurementsCircuitSensorValue, transferSwitchPowerSource1=transferSwitchPowerSource1, unit=unit, deviceCascadeType=deviceCascadeType, inletDeviceCapabilities=inletDeviceCapabilities, externalSensorSerialNumber=externalSensorSerialNumber, wireSensorMaximum=wireSensorMaximum, logOutletSensorSignedMinValue=logOutletSensorSignedMinValue, configGroup=configGroup, logOverCurrentProtectorSensorSignedMaxValue=logOverCurrentProtectorSensorSignedMaxValue, serverNotReachable=serverNotReachable, overCurrentProtectorPoleConfigurationTable=overCurrentProtectorPoleConfigurationTable, pxInetIPAddress=pxInetIPAddress, peripheralDeviceFirmwareUpdateState=peripheralDeviceFirmwareUpdateState, logCircuitSensorMinValue=logCircuitSensorMinValue, outletPoleSensorSignedLowerWarningThreshold=outletPoleSensorSignedLowerWarningThreshold, powerMeterPanelLayout=powerMeterPanelLayout, transferSwitchSensorStateChangeDelay=transferSwitchSensorStateChangeDelay, logInletPoleSensorAvgValue=logInletPoleSensorAvgValue, groups=groups, PYSNMP_MODULE_ID=raritan, inletPoleLine=inletPoleLine, LineEnumeration=LineEnumeration, peripheralDeviceRomcode=peripheralDeviceRomcode, circuitPoleSensorLowerWarningThreshold=circuitPoleSensorLowerWarningThreshold, unitSensorResolution=unitSensorResolution, unitSensorSignedMaximum=unitSensorSignedMaximum, webcamModel=webcamModel, logOverCurrentProtectorSensorAvgValue=logOverCurrentProtectorSensorAvgValue, logInletPoleSensorDataAvailable=logInletPoleSensorDataAvailable, measurementsOverCurrentProtector=measurementsOverCurrentProtector, overCurrentProtectorSensorAccuracy=overCurrentProtectorSensorAccuracy, overCurrentProtectorPoleCount=overCurrentProtectorPoleCount, circuitSensorUpperWarningThreshold=circuitSensorUpperWarningThreshold, logUnitSensorMinValue=logUnitSensorMinValue, logUnitSensorSignedMinValue=logUnitSensorSignedMinValue, circuitSensorMeasurementsEntry=circuitSensorMeasurementsEntry, userBlocked=userBlocked, outletPoleSensorAccuracy=outletPoleSensorAccuracy, log=log, pxMACAddress=pxMACAddress, wireSensorTolerance=wireSensorTolerance, logOutletPoleSensorDataAvailable=logOutletPoleSensorDataAvailable, inletPoleSensorConfigurationEntry=inletPoleSensorConfigurationEntry, PanelLayoutEnumeration=PanelLayoutEnumeration, circuitSensorReset=circuitSensorReset, actuatorControlEntry=actuatorControlEntry, inletPoleCapabilities=inletPoleCapabilities, outletPoleSensorResolution=outletPoleSensorResolution, DeviceCascadeTypeEnumeration=DeviceCascadeTypeEnumeration, externalSensorControl=externalSensorControl, activeNTPServerAddressSource=activeNTPServerAddressSource, DeviceIdentificationParameterEnumeration=DeviceIdentificationParameterEnumeration, logConfigurationTable=logConfigurationTable, externalSensorTypeDefaultLowerCriticalThreshold=externalSensorTypeDefaultLowerCriticalThreshold, circuitPoleSensorLogAvailable=circuitPoleSensorLogAvailable, deviceChangedParameter=deviceChangedParameter, logTransferSwitchSensorSignedAvgValue=logTransferSwitchSensorSignedAvgValue, logOutletSensorDataAvailable=logOutletSensorDataAvailable, transferSwitchActiveInlet=transferSwitchActiveInlet, circuitPoleSensorResolution=circuitPoleSensorResolution, transferSwitchPoleIn1Node=transferSwitchPoleIn1Node, inletSensorSignedMinimum=inletSensorSignedMinimum, roleAdded=roleAdded, deviceUpdateStarted=deviceUpdateStarted, inletPlug=inletPlug, circuitSensorStateChangeDelay=circuitSensorStateChangeDelay, measurements=measurements, trapInformationTable=trapInformationTable, externalSensorTypeDefaultThresholdsTable=externalSensorTypeDefaultThresholdsTable, logOutletSensorSignedMaxValue=logOutletSensorSignedMaxValue, logTransferSwitchSensorMaxValue=logTransferSwitchSensorMaxValue, reliabilityErrorLogTable=reliabilityErrorLogTable, SensorUnitsEnumeration=SensorUnitsEnumeration, serverReachabilityError=serverReachabilityError, externalSensorXCoordinate=externalSensorXCoordinate, overCurrentProtectorSensorLogAvailable=overCurrentProtectorSensorLogAvailable, unitSensorControlEntry=unitSensorControlEntry, outletControl=outletControl, errorDescription=errorDescription, outletPoleSensorSignedLowerCriticalThreshold=outletPoleSensorSignedLowerCriticalThreshold, powerMeterNeutralCTRating=powerMeterNeutralCTRating, powerMeterModified=powerMeterModified, measurementsTransferSwitchSensorValue=measurementsTransferSwitchSensorValue, outletId=outletId, transferSwitch=transferSwitch, inletPoleSensorAccuracy=inletPoleSensorAccuracy, outletPowerupSequence=outletPowerupSequence, inletPoleSensorSignedLowerCriticalThreshold=inletPoleSensorSignedLowerCriticalThreshold, activeDNSServerIndex=activeDNSServerIndex, unitSensorMinimum=unitSensorMinimum, wireCount=wireCount, wireSensorLowerCriticalThreshold=wireSensorLowerCriticalThreshold, logIndexEntry=logIndexEntry, outletPoleSensorLowerWarningThreshold=outletPoleSensorLowerWarningThreshold, logExternalSensorState=logExternalSensorState, reliabilityGroup=reliabilityGroup, logInletSensorState=logInletSensorState, measurementsCircuitPoleSensorState=measurementsCircuitPoleSensorState, outletSensorResetValue=outletSensorResetValue, transferSwitchAutoReTransferRequiresPhaseSync=transferSwitchAutoReTransferRequiresPhaseSync, circuitSensorHysteresis=circuitSensorHysteresis, reliabilityDataTable=reliabilityDataTable, circuitSensorResolution=circuitSensorResolution, measurementsInletSensorTimeStamp=measurementsInletSensorTimeStamp, outletPoleSensorUpperCriticalThreshold=outletPoleSensorUpperCriticalThreshold, circuitPoleSensorEnabledThresholds=circuitPoleSensorEnabledThresholds, wireSensorLogTable=wireSensorLogTable, circuitSensorSignedLowerCriticalThreshold=circuitSensorSignedLowerCriticalThreshold, circuitType=circuitType, logTimeStamp=logTimeStamp, oldLogGroup=oldLogGroup, inletDisabled=inletDisabled, peripheralDevicePackageEntry=peripheralDevicePackageEntry, inletRatedCurrent=inletRatedCurrent, outletSensorUpperCriticalThreshold=outletSensorUpperCriticalThreshold, circuitSensorSignedLowerWarningThreshold=circuitSensorSignedLowerWarningThreshold, userPasswordChanged=userPasswordChanged, circuit=circuit, transferSwitchFrontPanelManualTransferButtonEnabled=transferSwitchFrontPanelManualTransferButtonEnabled, outlets=outlets, externalSensorLowerWarningThreshold=externalSensorLowerWarningThreshold, peripheralDevicePackageTable=peripheralDevicePackageTable, overCurrentProtector=overCurrentProtector, firstNTPServerAddress=firstNTPServerAddress, userAcceptedRestrictedServiceAgreement=userAcceptedRestrictedServiceAgreement, logOutlet=logOutlet, outletSwitchControlTable=outletSwitchControlTable, externalSensorTypeDefaultEnabledThresholds=externalSensorTypeDefaultEnabledThresholds, peripheralDevicePackageFirmwareTimeStamp=peripheralDevicePackageFirmwareTimeStamp, circuitSensorLogEntry=circuitSensorLogEntry, logInletSensorSignedMinValue=logInletSensorSignedMinValue, outletSensorSignedUpperCriticalThreshold=outletSensorSignedUpperCriticalThreshold, outletConfigurationEntry=outletConfigurationEntry, userSessionTimeout=userSessionTimeout, measurementsOverCurrentProtectorSensorSignedValue=measurementsOverCurrentProtectorSensorSignedValue, reliabilityDataTableSequenceNumber=reliabilityDataTableSequenceNumber, inletSensorSignedUpperWarningThreshold=inletSensorSignedUpperWarningThreshold, measurementsInletPoleSensorSignedValue=measurementsInletPoleSensorSignedValue, wireSensorLogEntry=wireSensorLogEntry, transferSwitchConfigurationTable=transferSwitchConfigurationTable, inletPoleNumber=inletPoleNumber, measurementsCircuitPoleSensorSignedValue=measurementsCircuitPoleSensorSignedValue, overCurrentProtectorConfigurationTable=overCurrentProtectorConfigurationTable, outletPoleSensorEnabledThresholds=outletPoleSensorEnabledThresholds, OutletSwitchingOperationsEnumeration=OutletSwitchingOperationsEnumeration, synchronizeWithNTPServer=synchronizeWithNTPServer, inletSensorLogAvailable=inletSensorLogAvailable, circuitPoleSensorUpperCriticalThreshold=circuitPoleSensorUpperCriticalThreshold, outletReceptacleDescriptor=outletReceptacleDescriptor, activeNTPServerAddressType=activeNTPServerAddressType, PowerMeterTypeEnumeration=PowerMeterTypeEnumeration, circuitPoleNumber=circuitPoleNumber, circuitPoleSensorConfigurationEntry=circuitPoleSensorConfigurationEntry, overCurrentProtectorSensorTolerance=overCurrentProtectorSensorTolerance, wireSensorConfigurationEntry=wireSensorConfigurationEntry, inletPoleSensorLogTable=inletPoleSensorLogTable, transferSwitchSensorAccuracy=transferSwitchSensorAccuracy, circuitPoleSensorMinimum=circuitPoleSensorMinimum, peripheralDevicesAutoManagement=peripheralDevicesAutoManagement, measurementsCircuitSensorSignedValue=measurementsCircuitSensorSignedValue, frontPanelRCMSelfTest=frontPanelRCMSelfTest, outletSensorEnabledThresholds=outletSensorEnabledThresholds, externalSensorUpperCriticalThreshold=externalSensorUpperCriticalThreshold, measurementsExternalSensorTimeStamp=measurementsExternalSensorTimeStamp, logUnit=logUnit, measurementsCircuitSensorIsAvailable=measurementsCircuitSensorIsAvailable, OverCurrentProtectorTypeEnumeration=OverCurrentProtectorTypeEnumeration, pduPowerCyclingPowerOffPeriod=pduPowerCyclingPowerOffPeriod, inletSensorUpperWarningThreshold=inletSensorUpperWarningThreshold, boardIndex=boardIndex, circuitAdded=circuitAdded, outletReceptacle=outletReceptacle, reliabilityErrorLogRawLowerBytes=reliabilityErrorLogRawLowerBytes, RelayPowerLossBehaviorEnumeration=RelayPowerLossBehaviorEnumeration, overCurrentProtectorSensorDecimalDigits=overCurrentProtectorSensorDecimalDigits, logInletPoleSensorState=logInletPoleSensorState, circuitSensorControlTable=circuitSensorControlTable, unitSensorUpperCriticalThreshold=unitSensorUpperCriticalThreshold, overCurrentProtectorSensorSignedUpperCriticalThreshold=overCurrentProtectorSensorSignedUpperCriticalThreshold, unitSensorSignedLowerWarningThreshold=unitSensorSignedLowerWarningThreshold, pduModel=pduModel, transferSwitchSensorStateChange=transferSwitchSensorStateChange, powerMeterPhaseCTRating=powerMeterPhaseCTRating, transferSwitchPoleIndex=transferSwitchPoleIndex, lhxSupportChanged=lhxSupportChanged, inletPoleSensorMinimum=inletPoleSensorMinimum, PeripheralDeviceFirmwareUpdateStateEnumeration=PeripheralDeviceFirmwareUpdateStateEnumeration, reliabilityErrorLogEntry=reliabilityErrorLogEntry, inletEnableState=inletEnableState, inletSensorControlEntry=inletSensorControlEntry, smtpServer=smtpServer, circuitPoleSensorMeasurementsTable=circuitPoleSensorMeasurementsTable, userDeclinedRestrictedServiceAgreement=userDeclinedRestrictedServiceAgreement, transferSwitchName=transferSwitchName, outletSensorControl=outletSensorControl, reliabilityErrorLogThreshold=reliabilityErrorLogThreshold, inletCount=inletCount)
mibBuilder.exportSymbols("RARITAN-PX2-PDU2-MIB", outletPoleSensorConfigurationEntry=outletPoleSensorConfigurationEntry, controllerConfigurationTable=controllerConfigurationTable, frontPanelOutletSwitching=frontPanelOutletSwitching, inrushGuardDelay=inrushGuardDelay, reliabilityDataFlags=reliabilityDataFlags, measurementsPerLogEntry=measurementsPerLogEntry, outletPoleSensorMeasurementsTable=outletPoleSensorMeasurementsTable, overCurrentProtectorSensorMaximum=overCurrentProtectorSensorMaximum, outletPoleSensorStateChangeDelay=outletPoleSensorStateChangeDelay, circuitSensorUpperCriticalThreshold=circuitSensorUpperCriticalThreshold, unitSensorReset=unitSensorReset, pxInetGateway=pxInetGateway, logOverCurrentProtectorSensorMinValue=logOverCurrentProtectorSensorMinValue, externalSensorTypeDefaultStateChangeDelay=externalSensorTypeDefaultStateChangeDelay, inletPoleSensorMeasurementsEntry=inletPoleSensorMeasurementsEntry, externalSensorsZCoordinateUnits=externalSensorsZCoordinateUnits, secondNTPServerAddressType=secondNTPServerAddressType, OutletStateOnStartupEnumeration=OutletStateOnStartupEnumeration, externalSensorStateChangeDelay=externalSensorStateChangeDelay, transferSwitchSensorLowerCriticalThreshold=transferSwitchSensorLowerCriticalThreshold, firmwareValidationFailed=firmwareValidationFailed, meteringControllerCount=meteringControllerCount, smtpMessageRecipients=smtpMessageRecipients, circuitSensorSignedUpperWarningThreshold=circuitSensorSignedUpperWarningThreshold, wireId=wireId, unitSensorUnits=unitSensorUnits, outletPoleConfigurationTable=outletPoleConfigurationTable, oldTrapsGroup=oldTrapsGroup, unitConfigurationEntry=unitConfigurationEntry, outletSequencingDelay=outletSequencingDelay, circuitPoleCapabilities=circuitPoleCapabilities, circuitPoleSensorLogEntry=circuitPoleSensorLogEntry, measurementsUnitSensorIsAvailable=measurementsUnitSensorIsAvailable, reliabilityErrorLogTime=reliabilityErrorLogTime, logWireSensorState=logWireSensorState, measurementsTransferSwitchSensorSignedValue=measurementsTransferSwitchSensorSignedValue, logOutletPoleSensorAvgValue=logOutletPoleSensorAvgValue, measurementsCircuitPoleSensorIsAvailable=measurementsCircuitPoleSensorIsAvailable, peripheralDeviceFirmwareUpdate=peripheralDeviceFirmwareUpdate, transferSwitchSensorLogAvailable=transferSwitchSensorLogAvailable, reliabilityDataRawLowerBytes=reliabilityDataRawLowerBytes, reliabilityErrorLogRawUpperBytes=reliabilityErrorLogRawUpperBytes, circuitConfigurationEntry=circuitConfigurationEntry, circuitPoleSensorDecimalDigits=circuitPoleSensorDecimalDigits, transferSwitchId=transferSwitchId, logTransferSwitchSensorMinValue=logTransferSwitchSensorMinValue, userModified=userModified, circuitPolePhase=circuitPolePhase, userLogin=userLogin, measurementsWire=measurementsWire, boardType=boardType, inletPoleSensorSignedUpperWarningThreshold=inletPoleSensorSignedUpperWarningThreshold, transferSwitchSensorSignedMinimum=transferSwitchSensorSignedMinimum, outletSensorSignedMinimum=outletSensorSignedMinimum, unitSensorSignedLowerCriticalThreshold=unitSensorSignedLowerCriticalThreshold, deviceUpdateFailed=deviceUpdateFailed, logOverCurrentProtectorSensorDataAvailable=logOverCurrentProtectorSensorDataAvailable, externalSensorEnabledThresholds=externalSensorEnabledThresholds, logCircuitSensorAvgValue=logCircuitSensorAvgValue, outletPoleCapabilities=outletPoleCapabilities, wireSensorDecimalDigits=wireSensorDecimalDigits, logCircuitPoleSensorSignedMinValue=logCircuitPoleSensorSignedMinValue, useDHCPProvidedNTPServer=useDHCPProvidedNTPServer, serverIPAddress=serverIPAddress, logCircuitPoleSensorSignedMaxValue=logCircuitPoleSensorSignedMaxValue, deviceIdentificationChanged=deviceIdentificationChanged, outletSensorMinimum=outletSensorMinimum, circuitPoleSensorConfigurationTable=circuitPoleSensorConfigurationTable, measurementsInletSensorState=measurementsInletSensorState, inletPoleSensorHysteresis=inletPoleSensorHysteresis, actuatorControl=actuatorControl, overCurrentProtectorSensorConfigurationTable=overCurrentProtectorSensorConfigurationTable, overCurrentProtectorSensorSignedLowerCriticalThreshold=overCurrentProtectorSensorSignedLowerCriticalThreshold, rcmSelfTestEntry=rcmSelfTestEntry, logInletPoleSensorSignedMaxValue=logInletPoleSensorSignedMaxValue, unitSensorSignedUpperCriticalThreshold=unitSensorSignedUpperCriticalThreshold, circuitSensorSignedMaximum=circuitSensorSignedMaximum, measurementsOverCurrentProtectorSensorValue=measurementsOverCurrentProtectorSensorValue, circuitRatedCurrent=circuitRatedCurrent, measurementsInlet=measurementsInlet, dataLogging=dataLogging, trapInformation=trapInformation, overCurrentProtectorCount=overCurrentProtectorCount, externalSensorMaximum=externalSensorMaximum, logWireSensorDataAvailable=logWireSensorDataAvailable, transferSwitchAutoReTransferEnabled=transferSwitchAutoReTransferEnabled, complianceRev1=complianceRev1, inletPoleSensorSignedLowerWarningThreshold=inletPoleSensorSignedLowerWarningThreshold, inletSensorLowerCriticalThreshold=inletSensorLowerCriticalThreshold, pduImage=pduImage, configuration=configuration, overCurrentProtectorSensorUnits=overCurrentProtectorSensorUnits, inletSensorLogTable=inletSensorLogTable, outletSensorReset=outletSensorReset, circuitPoleSensorUpperWarningThreshold=circuitPoleSensorUpperWarningThreshold, externalSensorLogEntry=externalSensorLogEntry, powerMeterBranchCount=powerMeterBranchCount, externalSensorHysteresis=externalSensorHysteresis, externalSensorLogTable=externalSensorLogTable, measurementsOutletPoleSensorValue=measurementsOutletPoleSensorValue, unitSensorLowerCriticalThreshold=unitSensorLowerCriticalThreshold, relayBehaviorOnPowerLoss=relayBehaviorOnPowerLoss, sensorID=sensorID, overCurrentProtectorSensorHysteresis=overCurrentProtectorSensorHysteresis, logSize=logSize, overCurrentProtectorSensorSignedUpperWarningThreshold=overCurrentProtectorSensorSignedUpperWarningThreshold, circuitPoleId=circuitPoleId, circuitSensorSignedUpperCriticalThreshold=circuitSensorSignedUpperCriticalThreshold, inletPoleSensorMeasurementsTable=inletPoleSensorMeasurementsTable, inletSensorLowerWarningThreshold=inletSensorLowerWarningThreshold, outletPoleLine=outletPoleLine, outletSensorSignedLowerWarningThreshold=outletSensorSignedLowerWarningThreshold, measurementsCircuitPoleSensorTimeStamp=measurementsCircuitPoleSensorTimeStamp, transferSwitchSensorSignedUpperWarningThreshold=transferSwitchSensorSignedUpperWarningThreshold, inletSensorConfigurationEntry=inletSensorConfigurationEntry, transferSwitchSensorResolution=transferSwitchSensorResolution, reliabilityErrorLogValue=reliabilityErrorLogValue, overCurrentProtectorPoleLine=overCurrentProtectorPoleLine, powerControl=powerControl, transferSwitchSensorSignedUpperCriticalThreshold=transferSwitchSensorSignedUpperCriticalThreshold, inletSensorHysteresis=inletSensorHysteresis, logOverCurrentProtectorSensorMaxValue=logOverCurrentProtectorSensorMaxValue, logOutletSensorState=logOutletSensorState, lhxSupportEnabled=lhxSupportEnabled, circuitCTRating=circuitCTRating, boardVersion=boardVersion, overCurrentProtectorSensorLogTable=overCurrentProtectorSensorLogTable, logOutletPoleSensorMaxValue=logOutletPoleSensorMaxValue, ipAddressGroup=ipAddressGroup, circuitPoleSensorStateChangeDelay=circuitPoleSensorStateChangeDelay, logExternalSensorDataAvailable=logExternalSensorDataAvailable, outletPoleNode=outletPoleNode, externalSensorConfigurationEntry=externalSensorConfigurationEntry, overCurrentProtectorRatedCurrent=overCurrentProtectorRatedCurrent, transferSwitchSensorLogTable=transferSwitchSensorLogTable, deviceSettingsRestored=deviceSettingsRestored, transferSwitchSensorSignedLowerWarningThreshold=transferSwitchSensorSignedLowerWarningThreshold, logOutletPoleSensorMinValue=logOutletPoleSensorMinValue, circuitSensorConfigurationTable=circuitSensorConfigurationTable, outletPoleSensorSignedMinimum=outletPoleSensorSignedMinimum, peripheralDevicePackageState=peripheralDevicePackageState, dataLoggingEnableForAllSensors=dataLoggingEnableForAllSensors, logGroup=logGroup, logOutletPoleSensorState=logOutletPoleSensorState, logUnitSensorDataAvailable=logUnitSensorDataAvailable, outletSensorMaximum=outletSensorMaximum, unitSensorStateChange=unitSensorStateChange, inletPoleSensorStateChangeDelay=inletPoleSensorStateChangeDelay, transferSwitchSensorLowerWarningThreshold=transferSwitchSensorLowerWarningThreshold, powerMeterPanelNumbering=powerMeterPanelNumbering, inletPoleSensorEnabledThresholds=inletPoleSensorEnabledThresholds, pdu2=pdu2)
