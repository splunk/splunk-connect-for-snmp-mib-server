#
# PySNMP MIB module ES-MODULE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ES-MODULE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Bits, Unsigned32, TimeTicks, Integer32, iso, ObjectIdentity, MibIdentifier, ModuleIdentity, Counter32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Bits", "Unsigned32", "TimeTicks", "Integer32", "iso", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "Counter32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
grandjunction = MibIdentifier((1, 3, 6, 1, 4, 1, 437))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1))
fastLink = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1))
seriesG2xx = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2))
esModuleBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1))
esModuleSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2))
esModuleBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 1))
esModuleCapacity = MibScalar((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleCapacity.setStatus('mandatory')
esModuleInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2))
esModuleTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1), )
if mibBuilder.loadTexts: esModuleTable.setStatus('mandatory')
esModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "esModuleIndex"))
if mibBuilder.loadTexts: esModuleEntry.setStatus('mandatory')
esModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleIndex.setStatus('mandatory')
esModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("enabled", 1), ("disabled-mgmt", 2), ("suspended-linkbeat", 3), ("suspended-jabber", 4), ("suspended-violation", 5), ("disabled-violation", 7), ("suspended-not-present", 9), ("suspended-not-recognized", 10), ("reset", 11), ("suspended-ringdown", 12), ("suspended-stp", 13), ("disabled-self-test", 14), ("enabled-degraded", 15), ("suspended-atm-lane-down", 16), ("suspended-no-vlan", 17), ("disabled-no-vlan", 18), ("suspended-atm-network-down", 19), ("suspended-disl", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleStatus.setStatus('mandatory')
esModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esModuleAdminStatus.setStatus('mandatory')
esModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleDescr.setStatus('mandatory')
esModuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleID.setStatus('mandatory')
esModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleVersion.setStatus('mandatory')
esModuleObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleObjectID.setStatus('mandatory')
esModulePortCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortCapacity.setStatus('mandatory')
esModuleReset = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esModuleReset.setStatus('mandatory')
esModuleLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleLastStatusChange.setStatus('mandatory')
esModuleCollisionPeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleCollisionPeriods.setStatus('mandatory')
esModuleLinkDisplayMap = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleLinkDisplayMap.setStatus('mandatory')
esModuleDisabledDisplayMap = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleDisabledDisplayMap.setStatus('mandatory')
esModuleBroadcastStormBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notBlocked", 1), ("blocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleBroadcastStormBlocked.setStatus('mandatory')
esModuleFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleFirmwareVersion.setStatus('mandatory')
esModuleBOOTCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleBOOTCodeVersion.setStatus('mandatory')
esModuleFlashStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleFlashStatus.setStatus('mandatory')
esModuleResetToFactoryDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esModuleResetToFactoryDefaults.setStatus('mandatory')
esModuleSwPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleSwPortIndex.setStatus('mandatory')
esModulePortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3))
esModulePortTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: esModulePortTable.setStatus('mandatory')
esModulePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "esModuleSlotIndex"), (0, "ES-MODULE-MIB", "esModulePortIndex"))
if mibBuilder.loadTexts: esModulePortEntry.setStatus('mandatory')
esModuleSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModuleSlotIndex.setStatus('mandatory')
esModulePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortIndex.setStatus('mandatory')
esModulePortDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esModulePortDescr.setStatus('mandatory')
esModulePortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: esModulePortAdminStatus.setStatus('mandatory')
esModulePortAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notAutoPartitioned", 1), ("autoPartitioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortAutoPartitionState.setStatus('mandatory')
esModulePortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("suspended-not-present", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortOperStatus.setStatus('mandatory')
esModulePortLinkbeatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkbeat", 1), ("noLinkbeat", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortLinkbeatStatus.setStatus('mandatory')
esModulePortConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("rj45", 2), ("bnc", 3), ("aui", 4), ("fiber-sc", 5), ("fiber-st", 6), ("empty", 7), ("fddi-mic", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortConnectorType.setStatus('mandatory')
esModulePortReceivePeriods = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: esModulePortReceivePeriods.setStatus('mandatory')
fmFDDIBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1))
fmFDDICfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1))
fmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: fmCfgTable.setStatus('mandatory')
fmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "fmCfgIndex"))
if mibBuilder.loadTexts: fmCfgEntry.setStatus('mandatory')
fmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgIndex.setStatus('mandatory')
fmCfgFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgFirmwareVersion.setStatus('mandatory')
fmCfgBOOTCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgBOOTCodeVersion.setStatus('mandatory')
fmCfgPOSTResult = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("noFailure", 1), ("prom", 2), ("cpu", 3), ("flash", 4), ("dram", 5), ("arbiter", 6), ("shared-ram", 7), ("ethernet", 8), ("fddi-mac", 9), ("fddi-phy-a", 10), ("fddi-phy-b", 11), ("packet-ram", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgPOSTResult.setStatus('mandatory')
fmCfgPOSTTest = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("noFailure", 1), ("invalid-marker", 2), ("checksum", 3), ("ram-quick-scan", 4), ("ram-byte-test", 5), ("checkerboard", 6), ("arbiter-id", 7), ("read-only-register", 8), ("read-write-register", 9), ("ethernet-interrupt", 10), ("loopback", 11), ("invalid-version", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgPOSTTest.setStatus('mandatory')
fmCfgPOSTLoopbackResult = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noFailure", 1), ("cannot-transmit", 2), ("receive-timeout", 3), ("data-mismatch", 4), ("length-mismatch", 5), ("receiver-error", 6), ("buffer-error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgPOSTLoopbackResult.setStatus('mandatory')
fmCfgFlashStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmCfgFlashStatus.setStatus('mandatory')
fmCfgResetToFactoryDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmCfgResetToFactoryDefaults.setStatus('mandatory')
fmCfgResetModule = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noReset", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmCfgResetModule.setStatus('mandatory')
fmCfgNovellFDDISNAPTranslation = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("automatic", 1), ("ethernet-8023", 2), ("ethernet-SNAP", 3), ("ethernet-II", 4), ("drop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmCfgNovellFDDISNAPTranslation.setStatus('mandatory')
fmCfgUnmatchedSNAPDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("all", 1), ("ethernet-8023", 2), ("ethernet-SNAP", 3), ("ethernet-II", 4), ("drop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmCfgUnmatchedSNAPDestination.setStatus('mandatory')
fmCfgAuthorizationChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmCfgAuthorizationChecking.setStatus('mandatory')
fmCfgAuthorizationString = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmCfgAuthorizationString.setStatus('mandatory')
fmFDDIXlateToEthInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2))
fmXlateToEthTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: fmXlateToEthTable.setStatus('mandatory')
fmXlateToEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "fmXlateToEthIndex"))
if mibBuilder.loadTexts: fmXlateToEthEntry.setStatus('mandatory')
fmXlateToEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthIndex.setStatus('mandatory')
fmXlateToEthNovellSnapToRaw8023Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthNovellSnapToRaw8023Frames.setStatus('mandatory')
fmXlateToEthNovellSnapToEthIIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthNovellSnapToEthIIFrames.setStatus('mandatory')
fmXlateToEthNovellSnapToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthNovellSnapToSnapFrames.setStatus('mandatory')
fmXlateToEthAppleTalkSnapToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthAppleTalkSnapToSnapFrames.setStatus('mandatory')
fmXlateToEthIpSnapForFragmentationFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthIpSnapForFragmentationFrames.setStatus('mandatory')
fmXlateToEthIpSnapFragmentedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthIpSnapFragmentedFrames.setStatus('mandatory')
fmXlateToEthBridgeTunnelToEthIIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthBridgeTunnelToEthIIFrames.setStatus('mandatory')
fmXlateToEthOtherSnapToEthIIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthOtherSnapToEthIIFrames.setStatus('mandatory')
fmXlateToEthOtherSnapToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEthOtherSnapToSnapFrames.setStatus('mandatory')
fmXlateToEth8022To8022Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToEth8022To8022Frames.setStatus('mandatory')
fmFDDIXlateToFDDIInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3))
fmXlateToFDDITable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: fmXlateToFDDITable.setStatus('mandatory')
fmXlateToFDDIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "fmXlateToFDDIIndex"))
if mibBuilder.loadTexts: fmXlateToFDDIEntry.setStatus('mandatory')
fmXlateToFDDIIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDIIndex.setStatus('mandatory')
fmXlateToFDDINovellRaw8023ToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDINovellRaw8023ToSnapFrames.setStatus('mandatory')
fmXlateToFDDINovellEthIIToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDINovellEthIIToSnapFrames.setStatus('mandatory')
fmXlateToFDDINovellSnapToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDINovellSnapToSnapFrames.setStatus('mandatory')
fmXlateToFDDIEthIIToBridgeTunnelFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDIEthIIToBridgeTunnelFrames.setStatus('mandatory')
fmXlateToFDDIEthIIToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDIEthIIToSnapFrames.setStatus('mandatory')
fmXlateToFDDIOtherSnapToSnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDIOtherSnapToSnapFrames.setStatus('mandatory')
fmXlateToFDDI8022To8022Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmXlateToFDDI8022To8022Frames.setStatus('mandatory')
fmFDDIFilterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4))
fmFilterTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: fmFilterTable.setStatus('mandatory')
fmFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "fmFilterIndex"))
if mibBuilder.loadTexts: fmFilterEntry.setStatus('mandatory')
fmFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterIndex.setStatus('mandatory')
fmFilterFcsInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterFcsInvalidFrames.setStatus('mandatory')
fmFilterDataLengthFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterDataLengthFrames.setStatus('mandatory')
fmFilterErrorIndFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterErrorIndFrames.setStatus('mandatory')
fmFilterFddiFifoOverrunFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterFddiFifoOverrunFrames.setStatus('mandatory')
fmFilterFddiInternalErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterFddiInternalErrorFrames.setStatus('mandatory')
fmFilterNoBufferSpaceFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterNoBufferSpaceFrames.setStatus('mandatory')
fmFilterNoEndDelimitFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterNoEndDelimitFrames.setStatus('mandatory')
fmFilterNoLlcHeaderFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterNoLlcHeaderFrames.setStatus('mandatory')
fmFilterSourceRouteFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterSourceRouteFrames.setStatus('mandatory')
fmFilterNoSnapHeaderFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterNoSnapHeaderFrames.setStatus('mandatory')
fmFilterTooLargeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterTooLargeFrames.setStatus('mandatory')
fmFilterNovellSnapFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterNovellSnapFilteredFrames.setStatus('mandatory')
fmFilterCantFragmentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterCantFragmentFrames.setStatus('mandatory')
fmFilterBadIpHeaderFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterBadIpHeaderFrames.setStatus('mandatory')
fmFilterRingDownDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterRingDownDiscards.setStatus('mandatory')
fmFilterNovellOtherFilteredFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 1, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmFilterNovellOtherFilteredFrames.setStatus('mandatory')
fmAtmBasic = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2))
fmAtmCfgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1))
fmAtmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1), )
if mibBuilder.loadTexts: fmAtmCfgTable.setStatus('mandatory')
fmAtmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "fmAtmCfgIndex"))
if mibBuilder.loadTexts: fmAtmCfgEntry.setStatus('mandatory')
fmAtmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmCfgIndex.setStatus('mandatory')
fmAtmCfgPOSTResult = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("no-failure", 3), ("fpga", 4), ("shared-memory", 5), ("host-interface", 6), ("ethernet-controller", 7), ("sar-controller", 8), ("sar-memory", 9), ("framer", 10), ("traffic-co-processor", 11), ("traffic-co-processor-memory", 12), ("flash", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmCfgPOSTResult.setStatus('mandatory')
fmAtmCfgPOSTTest = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("no-failure", 3), ("refresh", 4), ("quick-scan-word", 5), ("quick-scan-byte", 6), ("byte-pattern", 7), ("checkerboard", 8), ("no-response", 9), ("data-mismatch", 10), ("interrupt", 11), ("control-memory", 12), ("checksum", 13), ("read-only-configuration-register", 14), ("read-write-configuration-register", 15), ("read-only-register", 16), ("read-write-register", 17), ("local-loopback", 18), ("host-loopback", 19), ("module-to-host-interrupt", 20), ("host-to-module-interrupt", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmCfgPOSTTest.setStatus('mandatory')
fmAtmCfgPOSTLoopbackResult = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("no-failure", 3), ("cannot-transmit", 4), ("receive-timeout", 5), ("data-mismatch", 6), ("length-mismatch", 7), ("receiver-error", 8), ("buffer-error", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmCfgPOSTLoopbackResult.setStatus('mandatory')
fmAtmCfgFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sts-3c", 1), ("stm-1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmCfgFramingMode.setStatus('mandatory')
fmAtmStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2))
fmAtmRxStatTable = MibTable((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: fmAtmRxStatTable.setStatus('mandatory')
fmAtmRxStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "ES-MODULE-MIB", "fmAtmRxStatIndex"))
if mibBuilder.loadTexts: fmAtmRxStatEntry.setStatus('mandatory')
fmAtmRxStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxStatIndex.setStatus('mandatory')
fmAtmRxControlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxControlFrames.setStatus('mandatory')
fmAtmRxLocalLecFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxLocalLecFrames.setStatus('mandatory')
fmAtmRxNoBufferDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxNoBufferDiscards.setStatus('mandatory')
fmAtmRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxCRCErrors.setStatus('mandatory')
fmAtmRxFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxFrameTooLongs.setStatus('mandatory')
fmAtmRxOtherDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxOtherDiscards.setStatus('mandatory')
fmAtmRxHecCellErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 437, 1, 1, 2, 2, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmAtmRxHecCellErrors.setStatus('mandatory')
mibBuilder.exportSymbols("ES-MODULE-MIB", fmFilterNoSnapHeaderFrames=fmFilterNoSnapHeaderFrames, esModuleDescr=esModuleDescr, fmAtmCfgPOSTLoopbackResult=fmAtmCfgPOSTLoopbackResult, esModulePortLinkbeatStatus=esModulePortLinkbeatStatus, esModuleDisabledDisplayMap=esModuleDisabledDisplayMap, fmCfgUnmatchedSNAPDestination=fmCfgUnmatchedSNAPDestination, fmAtmCfgPOSTTest=fmAtmCfgPOSTTest, esModuleTable=esModuleTable, fmAtmBasic=fmAtmBasic, esModuleCollisionPeriods=esModuleCollisionPeriods, esModulePortOperStatus=esModulePortOperStatus, fmCfgPOSTResult=fmCfgPOSTResult, fmXlateToEthOtherSnapToSnapFrames=fmXlateToEthOtherSnapToSnapFrames, fmFilterErrorIndFrames=fmFilterErrorIndFrames, seriesG2xx=seriesG2xx, fmXlateToEthIpSnapFragmentedFrames=fmXlateToEthIpSnapFragmentedFrames, fmXlateToEthNovellSnapToRaw8023Frames=fmXlateToEthNovellSnapToRaw8023Frames, fmAtmRxStatEntry=fmAtmRxStatEntry, esModuleBasicInfo=esModuleBasicInfo, esModulePortReceivePeriods=esModulePortReceivePeriods, fmFilterNoEndDelimitFrames=fmFilterNoEndDelimitFrames, fmFDDIFilterInfo=fmFDDIFilterInfo, grandjunction=grandjunction, fmXlateToFDDI8022To8022Frames=fmXlateToFDDI8022To8022Frames, esModuleStatus=esModuleStatus, esModuleSpecific=esModuleSpecific, fmFilterNovellSnapFilteredFrames=fmFilterNovellSnapFilteredFrames, esModuleSlotIndex=esModuleSlotIndex, fmAtmRxControlFrames=fmAtmRxControlFrames, esModulePortAutoPartitionState=esModulePortAutoPartitionState, esModuleObjectID=esModuleObjectID, fmFDDICfgInfo=fmFDDICfgInfo, products=products, esModuleBroadcastStormBlocked=esModuleBroadcastStormBlocked, fmAtmRxHecCellErrors=fmAtmRxHecCellErrors, fmXlateToEthNovellSnapToSnapFrames=fmXlateToEthNovellSnapToSnapFrames, esModulePortInfo=esModulePortInfo, esModuleLinkDisplayMap=esModuleLinkDisplayMap, fmAtmCfgIndex=fmAtmCfgIndex, fmFilterFddiInternalErrorFrames=fmFilterFddiInternalErrorFrames, fmXlateToEthNovellSnapToEthIIFrames=fmXlateToEthNovellSnapToEthIIFrames, fmCfgTable=fmCfgTable, fastLink=fastLink, fmXlateToEth8022To8022Frames=fmXlateToEth8022To8022Frames, fmFilterEntry=fmFilterEntry, fmXlateToEthOtherSnapToEthIIFrames=fmXlateToEthOtherSnapToEthIIFrames, fmFilterTooLargeFrames=fmFilterTooLargeFrames, esModuleSwPortIndex=esModuleSwPortIndex, fmXlateToFDDIOtherSnapToSnapFrames=fmXlateToFDDIOtherSnapToSnapFrames, esModuleLastStatusChange=esModuleLastStatusChange, esModulePortDescr=esModulePortDescr, fmCfgIndex=fmCfgIndex, fmAtmRxCRCErrors=fmAtmRxCRCErrors, fmXlateToEthIpSnapForFragmentationFrames=fmXlateToEthIpSnapForFragmentationFrames, esModuleFirmwareVersion=esModuleFirmwareVersion, fmFilterNovellOtherFilteredFrames=fmFilterNovellOtherFilteredFrames, fmXlateToFDDIEthIIToSnapFrames=fmXlateToFDDIEthIIToSnapFrames, esModulePortIndex=esModulePortIndex, esModuleAdminStatus=esModuleAdminStatus, esModuleEntry=esModuleEntry, fmCfgNovellFDDISNAPTranslation=fmCfgNovellFDDISNAPTranslation, esModulePortEntry=esModulePortEntry, fmCfgFirmwareVersion=fmCfgFirmwareVersion, fmFilterFddiFifoOverrunFrames=fmFilterFddiFifoOverrunFrames, fmXlateToFDDITable=fmXlateToFDDITable, fmCfgAuthorizationString=fmCfgAuthorizationString, fmAtmCfgEntry=fmAtmCfgEntry, fmXlateToEthBridgeTunnelToEthIIFrames=fmXlateToEthBridgeTunnelToEthIIFrames, esModuleIndex=esModuleIndex, fmXlateToEthIndex=fmXlateToEthIndex, fmXlateToFDDIIndex=fmXlateToFDDIIndex, fmAtmCfgPOSTResult=fmAtmCfgPOSTResult, esModulePortAdminStatus=esModulePortAdminStatus, fmFilterCantFragmentFrames=fmFilterCantFragmentFrames, fmCfgBOOTCodeVersion=fmCfgBOOTCodeVersion, esModuleInfo=esModuleInfo, fmAtmRxLocalLecFrames=fmAtmRxLocalLecFrames, fmXlateToFDDINovellRaw8023ToSnapFrames=fmXlateToFDDINovellRaw8023ToSnapFrames, fmCfgPOSTLoopbackResult=fmCfgPOSTLoopbackResult, fmXlateToFDDIEntry=fmXlateToFDDIEntry, esModuleCapacity=esModuleCapacity, fmXlateToEthTable=fmXlateToEthTable, fmFDDIBasic=fmFDDIBasic, fmCfgEntry=fmCfgEntry, fmFDDIXlateToEthInfo=fmFDDIXlateToEthInfo, fmFilterRingDownDiscards=fmFilterRingDownDiscards, fmXlateToFDDINovellSnapToSnapFrames=fmXlateToFDDINovellSnapToSnapFrames, fmAtmCfgFramingMode=fmAtmCfgFramingMode, fmAtmRxFrameTooLongs=fmAtmRxFrameTooLongs, fmFilterDataLengthFrames=fmFilterDataLengthFrames, fmAtmCfgTable=fmAtmCfgTable, fmAtmStatsInfo=fmAtmStatsInfo, fmFilterSourceRouteFrames=fmFilterSourceRouteFrames, esModulePortConnectorType=esModulePortConnectorType, fmXlateToEthEntry=fmXlateToEthEntry, fmFilterBadIpHeaderFrames=fmFilterBadIpHeaderFrames, fmCfgResetToFactoryDefaults=fmCfgResetToFactoryDefaults, fmXlateToFDDINovellEthIIToSnapFrames=fmXlateToFDDINovellEthIIToSnapFrames, fmFilterIndex=fmFilterIndex, esModulePortTable=esModulePortTable, esModuleBOOTCodeVersion=esModuleBOOTCodeVersion, esModuleResetToFactoryDefaults=esModuleResetToFactoryDefaults, fmCfgResetModule=fmCfgResetModule, fmCfgFlashStatus=fmCfgFlashStatus, fmFilterTable=fmFilterTable, fmCfgPOSTTest=fmCfgPOSTTest, esModuleID=esModuleID, fmAtmCfgInfo=fmAtmCfgInfo, fmFilterNoBufferSpaceFrames=fmFilterNoBufferSpaceFrames, fmAtmRxOtherDiscards=fmAtmRxOtherDiscards, fmFilterFcsInvalidFrames=fmFilterFcsInvalidFrames, fmAtmRxNoBufferDiscards=fmAtmRxNoBufferDiscards, fmFDDIXlateToFDDIInfo=fmFDDIXlateToFDDIInfo, fmAtmRxStatTable=fmAtmRxStatTable, esModuleFlashStatus=esModuleFlashStatus, esModuleBasic=esModuleBasic, fmCfgAuthorizationChecking=fmCfgAuthorizationChecking, esModuleReset=esModuleReset, esModuleVersion=esModuleVersion, fmXlateToEthAppleTalkSnapToSnapFrames=fmXlateToEthAppleTalkSnapToSnapFrames, esModulePortCapacity=esModulePortCapacity, fmAtmRxStatIndex=fmAtmRxStatIndex, fmFilterNoLlcHeaderFrames=fmFilterNoLlcHeaderFrames, fmXlateToFDDIEthIIToBridgeTunnelFrames=fmXlateToFDDIEthIIToBridgeTunnelFrames)
