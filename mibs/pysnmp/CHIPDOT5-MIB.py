#
# PySNMP MIB module CHIPDOT5-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CHIPDOT5-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:31:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
DisplayString, = mibBuilder.importSymbols("RFC1155-SMI", "DisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Unsigned32, MibIdentifier, Counter64, ObjectIdentity, NotificationType, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, IpAddress, Counter32, Integer32, enterprises, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "MibIdentifier", "Counter64", "ObjectIdentity", "NotificationType", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "IpAddress", "Counter32", "Integer32", "enterprises", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

chipcom = MibIdentifier((1, 3, 6, 1, 4, 1, 49))
chipmib02 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2))
chipGen = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 1))
chipEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 2))
chipProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3))
chipExperiment = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4))
chipTTY = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 5))
chipTFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 6))
chipDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 7))
online = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1))
oebm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 2))
midnight = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 3))
workGroupHub = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4))
emm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 5))
chipBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 6))
trmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 7))
fmm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 8))
focus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 9))
oeim = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 10))
chipExpTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1))
dot1dBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 14))
dot5 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1))
olAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 1))
olConc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 2))
olEnv = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 3))
olModules = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4))
olNets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5))
olGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 6))
olAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7))
olSpecMods = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4))
ol50nnMCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 3))
ol51nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 4))
ol51nnMFIB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 5))
ol51nnMUTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 6))
ol51nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 7))
ol51nnMBNC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 8))
ol51nnBEE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 9))
ol51nnRES = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 10))
ol51nnREE = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 11))
ol51nnMAUIF = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 12))
ol51nnMAUIM = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 13))
ol5208MTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 14))
ol51nnMFP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 15))
ol51nnMFBP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 16))
ol51nnMTPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 17))
ol51nnMTPPL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 18))
ol52nnMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 19))
ol52nnMFR = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 20))
ol51nnMTS = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 21))
ol51nnMFL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 22))
ol50nnMRCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 23))
ol51nnMFB = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 24))
ol53nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 25))
ol53nnMFBMIC = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 26))
ol53nnMFIBST = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 27))
ol53nnMSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 28))
ol51nnMTPCL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 29))
ol52nnBTT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 30))
ol51nnIx = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 31))
ol52nnMMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 32))
ol50nnMHCTL = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 4, 4, 33))
olNet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 1))
olEnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 2))
olTRnet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 3))
olFDDInet = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 5, 4))
hubSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 1))
hardwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 2))
softwareGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 3))
hubGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 4))
boardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 5))
portGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 6))
alarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 4, 7))
olThresh = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1))
olThreshControl = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 3, 1, 7, 1, 1))
dot5Table = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1), )
if mibBuilder.loadTexts: dot5Table.setStatus('mandatory')
dot5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1), ).setIndexNames((0, "CHIPDOT5-MIB", "dot5IfIndex"))
if mibBuilder.loadTexts: dot5Entry.setStatus('mandatory')
dot5IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5IfIndex.setStatus('mandatory')
dot5Commands = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-op", 1), ("open", 2), ("reset", 3), ("close", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5Commands.setStatus('mandatory')
dot5RingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5RingStatus.setStatus('mandatory')
dot5RingState = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("opened", 1), ("closed", 2), ("opening", 3), ("closing", 4), ("openFailure", 5), ("ringFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5RingState.setStatus('mandatory')
dot5RingOpenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("noOpen", 1), ("badParam", 2), ("lobeFailed", 3), ("signalLoss", 4), ("insertionTimeout", 5), ("ringFailed", 6), ("beaconing", 7), ("duplicateMAC", 8), ("requestFailed", 9), ("removeReceived", 10), ("open", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5RingOpenStatus.setStatus('mandatory')
dot5RingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("oneMegabit", 2), ("fourMegabit", 3), ("sixteenMegabit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5RingSpeed.setStatus('mandatory')
dot5UpStream = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5UpStream.setStatus('mandatory')
dot5ActMonParticipate = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5ActMonParticipate.setStatus('mandatory')
dot5Functional = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 1, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot5Functional.setStatus('mandatory')
dot5StatsTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2), )
if mibBuilder.loadTexts: dot5StatsTable.setStatus('mandatory')
dot5StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1), ).setIndexNames((0, "CHIPDOT5-MIB", "dot5StatsIfIndex"))
if mibBuilder.loadTexts: dot5StatsEntry.setStatus('mandatory')
dot5StatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsIfIndex.setStatus('mandatory')
dot5StatsLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsLineErrors.setStatus('mandatory')
dot5StatsBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsBurstErrors.setStatus('mandatory')
dot5StatsACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsACErrors.setStatus('mandatory')
dot5StatsAbortTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsAbortTransErrors.setStatus('mandatory')
dot5StatsInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsInternalErrors.setStatus('mandatory')
dot5StatsLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsLostFrameErrors.setStatus('mandatory')
dot5StatsReceiveCongestions = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsReceiveCongestions.setStatus('mandatory')
dot5StatsFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsFrameCopiedErrors.setStatus('mandatory')
dot5StatsTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsTokenErrors.setStatus('mandatory')
dot5StatsSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsSoftErrors.setStatus('mandatory')
dot5StatsHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsHardErrors.setStatus('mandatory')
dot5StatsSignalLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsSignalLoss.setStatus('mandatory')
dot5StatsTransmitBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsTransmitBeacons.setStatus('mandatory')
dot5StatsRecoverys = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsRecoverys.setStatus('mandatory')
dot5StatsLobeWires = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsLobeWires.setStatus('mandatory')
dot5StatsRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsRemoves.setStatus('mandatory')
dot5StatsSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsSingles.setStatus('mandatory')
dot5StatsFreqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5StatsFreqErrors.setStatus('optional')
dot5TimerTable = MibTable((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5), )
if mibBuilder.loadTexts: dot5TimerTable.setStatus('mandatory')
dot5TimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1), ).setIndexNames((0, "CHIPDOT5-MIB", "dot5TimerIfIndex"))
if mibBuilder.loadTexts: dot5TimerEntry.setStatus('mandatory')
dot5TimerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerIfIndex.setStatus('mandatory')
dot5TimerReturnRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerReturnRepeat.setStatus('mandatory')
dot5TimerHolding = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerHolding.setStatus('mandatory')
dot5TimerQueuePDU = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerQueuePDU.setStatus('mandatory')
dot5TimerValidTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerValidTransmit.setStatus('mandatory')
dot5TimerNoToken = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerNoToken.setStatus('mandatory')
dot5TimerActiveMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerActiveMon.setStatus('mandatory')
dot5TimerStandbyMon = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerStandbyMon.setStatus('mandatory')
dot5TimerErrorReport = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerErrorReport.setStatus('mandatory')
dot5TimerBeaconTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerBeaconTransmit.setStatus('mandatory')
dot5TimerBeaconReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot5TimerBeaconReceive.setStatus('mandatory')
dot5Tests = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 3))
testInsertFunc = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 3, 1))
dot5ChipSets = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 4))
chipSetIBM16 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 4, 1))
chipSetTItms380 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 4, 2))
chipSetTItms380c16 = MibIdentifier((1, 3, 6, 1, 4, 1, 49, 2, 4, 1, 1, 4, 3))
mibBuilder.exportSymbols("CHIPDOT5-MIB", olSpecMods=olSpecMods, dot5TimerEntry=dot5TimerEntry, chipEcho=chipEcho, dot5StatsIfIndex=dot5StatsIfIndex, chipSetTItms380c16=chipSetTItms380c16, olGroups=olGroups, dot5TimerValidTransmit=dot5TimerValidTransmit, hubGroup=hubGroup, dot5TimerActiveMon=dot5TimerActiveMon, dot5StatsTokenErrors=dot5StatsTokenErrors, dot5StatsSoftErrors=dot5StatsSoftErrors, testInsertFunc=testInsertFunc, ol51nnMFP=ol51nnMFP, softwareGroup=softwareGroup, dot5Entry=dot5Entry, dot5StatsLobeWires=dot5StatsLobeWires, olAlarm=olAlarm, dot5StatsRemoves=dot5StatsRemoves, dot5RingStatus=dot5RingStatus, dot5RingSpeed=dot5RingSpeed, ol53nnMFIBST=ol53nnMFIBST, dot5StatsFreqErrors=dot5StatsFreqErrors, chipBridge=chipBridge, ol51nnRES=ol51nnRES, ol51nnMTPCL=ol51nnMTPCL, boardGroup=boardGroup, dot5StatsTransmitBeacons=dot5StatsTransmitBeacons, ol51nnMFIB=ol51nnMFIB, dot5StatsTable=dot5StatsTable, olEnet=olEnet, ol50nnMRCTL=ol50nnMRCTL, chipSetIBM16=chipSetIBM16, ol53nnMSTP=ol53nnMSTP, dot5StatsReceiveCongestions=dot5StatsReceiveCongestions, ol51nnMTP=ol51nnMTP, ol51nnMMGT=ol51nnMMGT, workGroupHub=workGroupHub, chipmib02=chipmib02, olFDDInet=olFDDInet, olAgents=olAgents, ol52nnMFR=ol52nnMFR, hardwareGroup=hardwareGroup, chipExpTokenRing=chipExpTokenRing, ol52nnMMGT=ol52nnMMGT, dot5TimerBeaconReceive=dot5TimerBeaconReceive, ol53nnMMGT=ol53nnMMGT, dot5TimerStandbyMon=dot5TimerStandbyMon, ol53nnMFBMIC=ol53nnMFBMIC, dot5StatsLineErrors=dot5StatsLineErrors, ol51nnMTPPL=ol51nnMTPPL, chipExperiment=chipExperiment, ol51nnMAUIM=ol51nnMAUIM, online=online, dot5StatsAbortTransErrors=dot5StatsAbortTransErrors, dot5TimerErrorReport=dot5TimerErrorReport, dot5ActMonParticipate=dot5ActMonParticipate, dot5IfIndex=dot5IfIndex, ol51nnMFB=ol51nnMFB, dot5StatsSingles=dot5StatsSingles, chipGen=chipGen, dot5StatsEntry=dot5StatsEntry, dot5StatsInternalErrors=dot5StatsInternalErrors, dot5ChipSets=dot5ChipSets, dot5StatsACErrors=dot5StatsACErrors, olEnv=olEnv, ol51nnMTS=ol51nnMTS, dot5Tests=dot5Tests, dot5TimerReturnRepeat=dot5TimerReturnRepeat, ol51nnMAUIF=ol51nnMAUIF, dot5StatsLostFrameErrors=dot5StatsLostFrameErrors, ol51nnIx=ol51nnIx, alarmGroup=alarmGroup, fmm=fmm, focus1=focus1, dot5StatsSignalLoss=dot5StatsSignalLoss, olModules=olModules, olNets=olNets, oeim=oeim, dot5StatsBurstErrors=dot5StatsBurstErrors, dot5TimerIfIndex=dot5TimerIfIndex, trmm=trmm, chipcom=chipcom, dot5StatsRecoverys=dot5StatsRecoverys, chipTFTP=chipTFTP, portGroup=portGroup, ol51nnMFL=ol51nnMFL, dot5StatsHardErrors=dot5StatsHardErrors, olConc=olConc, olTRnet=olTRnet, dot5TimerNoToken=dot5TimerNoToken, dot5TimerBeaconTransmit=dot5TimerBeaconTransmit, ol50nnMHCTL=ol50nnMHCTL, dot5Table=dot5Table, dot5RingOpenStatus=dot5RingOpenStatus, ol50nnMCTL=ol50nnMCTL, ol52nnMTP=ol52nnMTP, ol51nnREE=ol51nnREE, chipProducts=chipProducts, ol51nnMTPL=ol51nnMTPL, ol51nnMBNC=ol51nnMBNC, dot5StatsFrameCopiedErrors=dot5StatsFrameCopiedErrors, ol5208MTP=ol5208MTP, ol51nnMFBP=ol51nnMFBP, midnight=midnight, ol51nnMUTP=ol51nnMUTP, MacAddress=MacAddress, dot1dBridge=dot1dBridge, ol51nnBEE=ol51nnBEE, dot5TimerHolding=dot5TimerHolding, chipTTY=chipTTY, dot5TimerTable=dot5TimerTable, dot5UpStream=dot5UpStream, ol52nnBTT=ol52nnBTT, hubSysGroup=hubSysGroup, dot5RingState=dot5RingState, olThreshControl=olThreshControl, dot5Functional=dot5Functional, olThresh=olThresh, dot5=dot5, olNet=olNet, dot5TimerQueuePDU=dot5TimerQueuePDU, oebm=oebm, dot5Commands=dot5Commands, chipSetTItms380=chipSetTItms380, chipDownload=chipDownload, emm=emm)
