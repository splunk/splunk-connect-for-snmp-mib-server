#
# PySNMP MIB module Fore-DSX3-Ext-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-DSX3-Ext-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:03:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
dsx3LineIndex, = mibBuilder.importSymbols("DS3-MIB", "dsx3LineIndex")
asx, = mibBuilder.importSymbols("Fore-Common-MIB", "asx")
trapLogIndex, = mibBuilder.importSymbols("Fore-TrapLog-MIB", "trapLogIndex")
ifName, = mibBuilder.importSymbols("IF-MIB", "ifName")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, NotificationType, Unsigned32, ObjectIdentity, IpAddress, iso, Gauge32, ModuleIdentity, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "NotificationType", "Unsigned32", "ObjectIdentity", "IpAddress", "iso", "Gauge32", "ModuleIdentity", "MibIdentifier", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
foreDsx3Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15))
if mibBuilder.loadTexts: foreDsx3Mib.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: foreDsx3Mib.setOrganization('FORE')
foreDsx3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1), )
if mibBuilder.loadTexts: foreDsx3ConfigTable.setStatus('current')
foreDsx3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1, 1), ).setIndexNames((0, "DS3-MIB", "dsx3LineIndex"))
if mibBuilder.loadTexts: foreDsx3ConfigEntry.setStatus('current')
foreDsx3ConfigReceiveCode = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ds3ReceiveNoCode", 1), ("ds3ReceiveLineCode", 2), ("ds3ReceivePayloadCode", 3), ("ds3ReceiveResetCode", 4), ("ds3ReceiveDS1LoopCode", 5), ("ds3ReceiveTestPattern", 6))).clone('ds3ReceiveNoCode')).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3ConfigReceiveCode.setStatus('current')
foreDsx3ConfigLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3LineLt225", 1), ("ds3LineGt225", 2))).clone('ds3LineGt225')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreDsx3ConfigLineLength.setStatus('current')
foreDsx3ConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1, 1, 3), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3ConfigStatus.setStatus('current')
foreDsx3LineTypeFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e3G751", 1), ("e3G832", 2))).clone('e3G832')).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3LineTypeFraming.setStatus('current')
foreDsx3PbitPerrThrSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1, 1, 5), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreDsx3PbitPerrThrSeconds.setStatus('current')
foreDsx3PbitPerrThrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreDsx3PbitPerrThrErrors.setStatus('current')
foreDsx3PbitPerrFailEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreDsx3PbitPerrFailEnable.setStatus('current')
foreDsx3SignalDegradeBer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreDsx3SignalDegradeBer.setStatus('current')
foreDsx3SignalFailBer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreDsx3SignalFailBer.setStatus('current')
foreDsx3BerErrorModel = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("errorModelNone", 0), ("errorModelRandom", 1), ("errorModelBurst", 2))).clone('errorModelRandom')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: foreDsx3BerErrorModel.setStatus('current')
foreDsx3BerState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("berStateOk", 0), ("berStateSigDegrade", 1), ("berStateSigFail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3BerState.setStatus('current')
foreDsx3TotalTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2), )
if mibBuilder.loadTexts: foreDsx3TotalTable.setStatus('current')
foreDsx3TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2, 1), ).setIndexNames((0, "DS3-MIB", "dsx3LineIndex"))
if mibBuilder.loadTexts: foreDsx3TotalEntry.setStatus('current')
foreDsx3TotalFramingLOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3TotalFramingLOSs.setStatus('current')
foreDsx3TotalFramingLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3TotalFramingLCVs.setStatus('current')
foreDsx3TotalFramingSumLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3TotalFramingSumLCVs.setStatus('current')
foreDsx3TotalFramingFERRs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3TotalFramingFERRs.setStatus('current')
foreDsx3TotalFramingOOFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3TotalFramingOOFs.setStatus('current')
foreDsx3TotalFramingFERFs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3TotalFramingFERFs.setStatus('current')
foreDsx3TotalFramingAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3TotalFramingAISs.setStatus('current')
foreDsx3TotalFramingPbitPERRs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3TotalFramingPbitPERRs.setStatus('current')
foreDsx3TotalFramingCbitPERRs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3TotalFramingCbitPERRs.setStatus('current')
foreDsx3TotalFramingFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3TotalFramingFEBEs.setStatus('current')
foreDsx3TotalFramingIDLEs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: foreDsx3TotalFramingIDLEs.setStatus('current')
foreDsx3LOFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 1)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3LOFDetected.setStatus('current')
foreDsx3LOFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 2)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3LOFCleared.setStatus('current')
foreDsx3AISDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 3)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3AISDetected.setStatus('current')
foreDsx3AISCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 4)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3AISCleared.setStatus('current')
foreDsx3FERFDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 5)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3FERFDetected.setStatus('current')
foreDsx3FERFCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 6)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3FERFCleared.setStatus('current')
foreDsx3LOSDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 7)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3LOSDetected.setStatus('current')
foreDsx3LOSCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 8)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3LOSCleared.setStatus('current')
foreDsx3IdleDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 9)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3IdleDetected.setStatus('current')
foreDsx3IdleCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 10)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3IdleCleared.setStatus('current')
foreDsx3TrailChangeDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 11)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3TrailChangeDetected.setStatus('current')
foreDsx3PbitPerrDetected = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 12)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3PbitPerrDetected.setStatus('current')
foreDsx3PbitPerrCleared = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 15, 0, 13)).setObjects(("DS3-MIB", "dsx3LineIndex"), ("IF-MIB", "ifName"), ("Fore-TrapLog-MIB", "trapLogIndex"))
if mibBuilder.loadTexts: foreDsx3PbitPerrCleared.setStatus('current')
mibBuilder.exportSymbols("Fore-DSX3-Ext-MIB", foreDsx3TotalFramingSumLCVs=foreDsx3TotalFramingSumLCVs, foreDsx3TotalEntry=foreDsx3TotalEntry, foreDsx3TotalFramingFERFs=foreDsx3TotalFramingFERFs, foreDsx3ConfigReceiveCode=foreDsx3ConfigReceiveCode, foreDsx3LOFDetected=foreDsx3LOFDetected, foreDsx3AISCleared=foreDsx3AISCleared, foreDsx3AISDetected=foreDsx3AISDetected, foreDsx3LOSDetected=foreDsx3LOSDetected, foreDsx3Mib=foreDsx3Mib, foreDsx3TotalFramingAISs=foreDsx3TotalFramingAISs, foreDsx3TotalFramingCbitPERRs=foreDsx3TotalFramingCbitPERRs, foreDsx3ConfigStatus=foreDsx3ConfigStatus, foreDsx3TotalFramingFERRs=foreDsx3TotalFramingFERRs, foreDsx3PbitPerrCleared=foreDsx3PbitPerrCleared, foreDsx3PbitPerrDetected=foreDsx3PbitPerrDetected, foreDsx3TotalFramingOOFs=foreDsx3TotalFramingOOFs, foreDsx3SignalFailBer=foreDsx3SignalFailBer, foreDsx3TotalFramingLCVs=foreDsx3TotalFramingLCVs, foreDsx3LOFCleared=foreDsx3LOFCleared, foreDsx3PbitPerrThrErrors=foreDsx3PbitPerrThrErrors, foreDsx3FERFDetected=foreDsx3FERFDetected, foreDsx3ConfigLineLength=foreDsx3ConfigLineLength, foreDsx3TrailChangeDetected=foreDsx3TrailChangeDetected, foreDsx3ConfigEntry=foreDsx3ConfigEntry, foreDsx3LineTypeFraming=foreDsx3LineTypeFraming, foreDsx3PbitPerrFailEnable=foreDsx3PbitPerrFailEnable, PYSNMP_MODULE_ID=foreDsx3Mib, foreDsx3PbitPerrThrSeconds=foreDsx3PbitPerrThrSeconds, foreDsx3FERFCleared=foreDsx3FERFCleared, foreDsx3BerState=foreDsx3BerState, foreDsx3TotalFramingIDLEs=foreDsx3TotalFramingIDLEs, foreDsx3TotalFramingFEBEs=foreDsx3TotalFramingFEBEs, foreDsx3TotalFramingPbitPERRs=foreDsx3TotalFramingPbitPERRs, foreDsx3IdleDetected=foreDsx3IdleDetected, foreDsx3TotalFramingLOSs=foreDsx3TotalFramingLOSs, foreDsx3BerErrorModel=foreDsx3BerErrorModel, foreDsx3LOSCleared=foreDsx3LOSCleared, foreDsx3ConfigTable=foreDsx3ConfigTable, foreDsx3SignalDegradeBer=foreDsx3SignalDegradeBer, foreDsx3TotalTable=foreDsx3TotalTable, foreDsx3IdleCleared=foreDsx3IdleCleared)
