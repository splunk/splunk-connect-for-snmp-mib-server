#
# PySNMP MIB module PLEXCOM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PLEXCOM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:32:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter32, IpAddress, iso, Bits, ObjectIdentity, TimeTicks, Integer32, MibIdentifier, enterprises, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "IpAddress", "iso", "Bits", "ObjectIdentity", "TimeTicks", "Integer32", "MibIdentifier", "enterprises", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
plexcom = MibIdentifier((1, 3, 6, 1, 4, 1, 465))
plxNode = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1))
plxAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1))
plxStBridgeagent = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 1))
plxStBridgesnmpd = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 1, 1))
plxPlexcomHub8091 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 1, 1, 4))
plxPlexcomHub8039 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 1, 1, 5))
plxPlexcomHub8029 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 1, 1, 6))
plxPlexcomHub8093 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 1, 1, 7))
plxRepeaterAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 2))
plxPlexcom8025 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 2, 1))
plxPlexcom8025SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 2, 1, 1))
plxPlexcom8025SXT = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 2, 1, 2))
plxPlexcomH8025SXT = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 2, 1, 3))
plxPlexcomH8025SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 2, 1, 4))
plxPlexcomS8025SXT = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 2, 1, 5))
plxPlexcomS8025SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 2, 1, 6))
plxPlexcomPlexSTACK = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 2, 2))
plxPlexcom4000i = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 2, 2, 1))
plxPlexcom4000iR = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 2, 2, 2))
plxSwitchAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 3))
plxPlexcom5108 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 1, 3, 1))
plxModule = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2))
plxModuleUnknown = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 1))
plxModule8010 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 2))
plxModule8011 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 3))
plxModule8023A = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 4))
plxModule8024A = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 5))
plxModule8024T = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 6))
plxModule8026A = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 7))
plxModule8026T = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 8))
plxModule8029M = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 9))
plxModule8091M = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 10))
plxModule8023 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 11))
plxModule8031 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 13))
plxModule8031A = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 14))
plxModule8033 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 15))
plxModule8034 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 16))
plxModule8033A = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 17))
plxModule8024FO = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 24))
plxModule8039M = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 32))
plxModule8039S = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 33))
plxModule8026FO = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 34))
plxModule8408 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 35))
plxModule8400FO = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 36))
plxModule8032_R = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 43)).setLabel("plxModule8032-R")
plxModule8032_1P = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 45)).setLabel("plxModule8032-1P")
plxModule8032_2P = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 47)).setLabel("plxModule8032-2P")
plxModule8032_4P = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 51)).setLabel("plxModule8032-4P")
plxModule8032_6P = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 55)).setLabel("plxModule8032-6P")
plxModule2008SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 56))
plxModule8035 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 58))
plxModule8035STP = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 59))
plxModule8036 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 60))
plxModule8023SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 70))
plxModule8012SX_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 71)).setLabel("plxModule8012SX-1")
plxModule8012SX_6 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 72)).setLabel("plxModule8012SX-6")
plxModule8024SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 73))
plxModule8027SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 74))
plxModule8091SXM = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 75))
plxModule8029SX_3M = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 76)).setLabel("plxModule8029SX-3M")
plxModule8029SX_3S = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 77)).setLabel("plxModule8029SX-3S")
plxModule8025SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 78))
plxModule8025SXT = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 79))
plxModuleH8025SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 81))
plxModuleS8025SXT = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 82))
plxModuleS8025SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 83))
plxModule8408FO = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 84))
plxModule8012SX_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 85)).setLabel("plxModule8012SX-2")
plxModule8012SX_4 = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 86)).setLabel("plxModule8012SX-4")
plxModule8026SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 88))
plxModule8035SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 89))
plxModuleP8035SX = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 90))
plxModule8093SXM = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 91))
plxModule8093SXS = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 92))
plxModule8039SXM = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 93))
plxModule8039SXS = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 1, 2, 94))
plxFilterTable = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 2))
plxFtConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 2, 1))
plxFtMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 465, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxFtMaxAge.setStatus('mandatory')
plxFtMaxRemove = MibScalar((1, 3, 6, 1, 4, 1, 465, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxFtMaxRemove.setStatus('mandatory')
plxFtMaxFilter = MibScalar((1, 3, 6, 1, 4, 1, 465, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxFtMaxFilter.setStatus('mandatory')
plxFtAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 465, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxFtAgeTime.setStatus('mandatory')
plxFtMaxPerm = MibScalar((1, 3, 6, 1, 4, 1, 465, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxFtMaxPerm.setStatus('mandatory')
plxFtForwMBcast = MibScalar((1, 3, 6, 1, 4, 1, 465, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noForward", 0), ("forward", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxFtForwMBcast.setStatus('mandatory')
plxFtSecureMode = MibScalar((1, 3, 6, 1, 4, 1, 465, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("secure", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxFtSecureMode.setStatus('mandatory')
plxFtEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 2, 2))
plxFtAge = MibScalar((1, 3, 6, 1, 4, 1, 465, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxFtAge.setStatus('mandatory')
plxFtDisp = MibScalar((1, 3, 6, 1, 4, 1, 465, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 16, 32, 5, 9, 17, 33, 67, 35, 83))).clone(namedValues=NamedValues(("dynamforw1", 4), ("dynamforw2", 8), ("dynamflood", 16), ("dynamdiscard", 32), ("statforw1", 5), ("statforw2", 9), ("statflood", 17), ("statdiscard", 33), ("syssendup", 67), ("sysdiscard", 35), ("sysflood", 83)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxFtDisp.setStatus('mandatory')
plxInterfaceErrors = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 3))
plxIfeInBusErr = MibScalar((1, 3, 6, 1, 4, 1, 465, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIfeInBusErr.setStatus('mandatory')
plxIfeInShortPkt = MibScalar((1, 3, 6, 1, 4, 1, 465, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIfeInShortPkt.setStatus('mandatory')
plxIfeInAlgError = MibScalar((1, 3, 6, 1, 4, 1, 465, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIfeInAlgError.setStatus('mandatory')
plxIfeInBadSize = MibScalar((1, 3, 6, 1, 4, 1, 465, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIfeInBadSize.setStatus('mandatory')
plxIfeInOverflow = MibScalar((1, 3, 6, 1, 4, 1, 465, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIfeInOverflow.setStatus('mandatory')
plxIfeInCRCErr = MibScalar((1, 3, 6, 1, 4, 1, 465, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIfeInCRCErr.setStatus('mandatory')
plxIfeOutCol16 = MibScalar((1, 3, 6, 1, 4, 1, 465, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIfeOutCol16.setStatus('mandatory')
plxIfeOutCol = MibScalar((1, 3, 6, 1, 4, 1, 465, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIfeOutCol.setStatus('mandatory')
plxIfeOutShortPkt = MibScalar((1, 3, 6, 1, 4, 1, 465, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIfeOutShortPkt.setStatus('mandatory')
plxIfeOutUnderflow = MibScalar((1, 3, 6, 1, 4, 1, 465, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIfeOutUnderflow.setStatus('mandatory')
plxIfeOutBusErr = MibScalar((1, 3, 6, 1, 4, 1, 465, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIfeOutBusErr.setStatus('mandatory')
plxForwardCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 4))
plxFcInOctets = MibScalar((1, 3, 6, 1, 4, 1, 465, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxFcInOctets.setStatus('mandatory')
plxFcInPkts = MibScalar((1, 3, 6, 1, 4, 1, 465, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxFcInPkts.setStatus('mandatory')
plxFcInNUcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 465, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxFcInNUcastPkts.setStatus('mandatory')
plxFcForwOctets = MibScalar((1, 3, 6, 1, 4, 1, 465, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxFcForwOctets.setStatus('mandatory')
plxFcForwPkts = MibScalar((1, 3, 6, 1, 4, 1, 465, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxFcForwPkts.setStatus('mandatory')
plxFcFiltOctets = MibScalar((1, 3, 6, 1, 4, 1, 465, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxFcFiltOctets.setStatus('mandatory')
plxFcFiltPkts = MibScalar((1, 3, 6, 1, 4, 1, 465, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxFcFiltPkts.setStatus('mandatory')
plxSystemCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 5))
plxSysMemFree = MibScalar((1, 3, 6, 1, 4, 1, 465, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxSysMemFree.setStatus('mandatory')
plxSysMemAllocFail = MibScalar((1, 3, 6, 1, 4, 1, 465, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxSysMemAllocFail.setStatus('mandatory')
plxSysMemTotAllocFail = MibScalar((1, 3, 6, 1, 4, 1, 465, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxSysMemTotAllocFail.setStatus('mandatory')
plxSysMemFreeFail = MibScalar((1, 3, 6, 1, 4, 1, 465, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxSysMemFreeFail.setStatus('mandatory')
plxSysMemAllocTooBig = MibScalar((1, 3, 6, 1, 4, 1, 465, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxSysMemAllocTooBig.setStatus('mandatory')
plxSysTimeToReset = MibScalar((1, 3, 6, 1, 4, 1, 465, 5, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxSysTimeToReset.setStatus('mandatory')
plxSysPanicMesg = MibScalar((1, 3, 6, 1, 4, 1, 465, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxSysPanicMesg.setStatus('mandatory')
plxSysResetCount = MibScalar((1, 3, 6, 1, 4, 1, 465, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxSysResetCount.setStatus('mandatory')
plxSysSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 465, 5, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxSysSoftwareVersion.setStatus('mandatory')
plxSpanningTree = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 6))
plxStBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 6, 1))
plxStBrName = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxStBrName.setStatus('mandatory')
plxStBrIdent = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxStBrIdent.setStatus('mandatory')
plxStBrMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxStBrMaxAge.setStatus('mandatory')
plxStBrHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxStBrHelloTime.setStatus('mandatory')
plxStBrForwDelay = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxStBrForwDelay.setStatus('mandatory')
plxStBrIsRoot = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notroot", 0), ("isroot", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStBrIsRoot.setStatus('mandatory')
plxStBrIsDesig = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notdesig", 0), ("isdesig", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStBrIsDesig.setStatus('mandatory')
plxStBrSpanAddr = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStBrSpanAddr.setStatus('mandatory')
plxStBrPriority = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxStBrPriority.setStatus('mandatory')
plxStBrSTPDisabled = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxStBrSTPDisabled.setStatus('mandatory')
plxStRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 6, 2))
plxStRtIdent = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 2, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStRtIdent.setStatus('mandatory')
plxStRtCost = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStRtCost.setStatus('mandatory')
plxStRtPort = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rootPort1", 1), ("rootPort2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStRtPort.setStatus('mandatory')
plxStRtMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStRtMaxAge.setStatus('mandatory')
plxStRtHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStRtHelloTime.setStatus('mandatory')
plxStRtForwDelay = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStRtForwDelay.setStatus('mandatory')
plxStPort = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 6, 3))
plxStPrtState = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 8))).clone(namedValues=NamedValues(("disabled", 0), ("blocking", 1), ("listening", 2), ("learning", 4), ("forwarding", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxStPrtState.setStatus('mandatory')
plxStPrtCost = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStPrtCost.setStatus('mandatory')
plxStPrtIsDesig = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notdesig", 0), ("isdesig", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStPrtIsDesig.setStatus('mandatory')
plxStPrtIsRoot = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notroot", 0), ("isroot", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStPrtIsRoot.setStatus('mandatory')
plxStPrtDesigRoot = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStPrtDesigRoot.setStatus('mandatory')
plxStPrtDesigCost = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStPrtDesigCost.setStatus('mandatory')
plxStPrtDesigBridge = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 3, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStPrtDesigBridge.setStatus('mandatory')
plxStPrtDesigPort = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStPrtDesigPort.setStatus('mandatory')
plxStPrtPriority = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStPrtPriority.setStatus('mandatory')
plxSpanTreeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 6, 4))
plxStsTopoChanges = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStsTopoChanges.setStatus('mandatory')
plxStsConfigTimeout = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStsConfigTimeout.setStatus('mandatory')
plxStsPortDisable = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStsPortDisable.setStatus('mandatory')
plxStsPortEnable = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStsPortEnable.setStatus('mandatory')
plxStsInBadLen = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStsInBadLen.setStatus('mandatory')
plxStsInUnknown = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStsInUnknown.setStatus('mandatory')
plxStsIn8021Man = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStsIn8021Man.setStatus('mandatory')
plxStsInConfig = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStsInConfig.setStatus('mandatory')
plxStsInTopoChg = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStsInTopoChg.setStatus('mandatory')
plxStsOutConfig = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStsOutConfig.setStatus('mandatory')
plxStsOutTopoChg = MibScalar((1, 3, 6, 1, 4, 1, 465, 6, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxStsOutTopoChg.setStatus('mandatory')
plxFilterRange = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 7))
plxFrNumRange = MibScalar((1, 3, 6, 1, 4, 1, 465, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxFrNumRange.setStatus('mandatory')
plxFrEntry = MibScalar((1, 3, 6, 1, 4, 1, 465, 7, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxFrEntry.setStatus('mandatory')
plxPlexcomProp = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 9))
plxPlexAsync = MibScalar((1, 3, 6, 1, 4, 1, 465, 9, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxPlexAsync.setStatus('mandatory')
plxPlexStat = MibScalar((1, 3, 6, 1, 4, 1, 465, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxPlexStat.setStatus('mandatory')
plxPlexBkBits = MibScalar((1, 3, 6, 1, 4, 1, 465, 9, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxPlexBkBits.setStatus('mandatory')
plxPlexBkDef = MibScalar((1, 3, 6, 1, 4, 1, 465, 9, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxPlexBkDef.setStatus('mandatory')
plxHub = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 10))
plxHmBasicHubTable = MibTable((1, 3, 6, 1, 4, 1, 465, 10, 1), )
if mibBuilder.loadTexts: plxHmBasicHubTable.setStatus('mandatory')
plxHmBasicHubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 465, 10, 1, 1), ).setIndexNames((0, "PLEXCOM-MIB", "plxHubBasicID"))
if mibBuilder.loadTexts: plxHmBasicHubEntry.setStatus('mandatory')
plxHubBasicID = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxHubBasicID.setStatus('mandatory')
plxHubGroupCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxHubGroupCapacity.setStatus('mandatory')
plxHubGroupMap = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxHubGroupMap.setStatus('mandatory')
plxHubGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxHubGroupCount.setStatus('mandatory')
plxHmBasicGroupTable = MibTable((1, 3, 6, 1, 4, 1, 465, 10, 2), )
if mibBuilder.loadTexts: plxHmBasicGroupTable.setStatus('mandatory')
plxHmBasicGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 465, 10, 2, 1), ).setIndexNames((0, "PLEXCOM-MIB", "plxGroupBasicID"))
if mibBuilder.loadTexts: plxHmBasicGroupEntry.setStatus('mandatory')
plxGroupHubBasicID = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxGroupHubBasicID.setStatus('mandatory')
plxGroupBasicID = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("slot1", 1), ("slot2", 2), ("slot3", 3), ("slot4", 4), ("slot5", 5), ("slot6", 6), ("slot7", 7), ("slot8", 8), ("slot9", 9), ("slot10", 10), ("slot11", 11), ("slot12", 12), ("slot13", 13), ("slot14", 14), ("slot15", 15), ("slot16", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxGroupBasicID.setStatus('mandatory')
plxGroupNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxGroupNumberOfPorts.setStatus('mandatory')
plxGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 24, 32, 33, 34, 35, 36, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 1000, 1001, 1010, 1011, 1012, 1020, 1021, 1022, 1030, 1031, 1032, 1110, 1111, 1112, 1120, 1121, 1122, 1130, 1131, 1132))).clone(namedValues=NamedValues(("removed", 0), ("unknown", 1), ("m8010", 2), ("m8011", 3), ("m8023A", 4), ("m8024A", 5), ("m8024T", 6), ("m8026A", 7), ("m8026T", 8), ("m8029M", 9), ("m8091M", 10), ("m8023", 11), ("m8031", 13), ("m8031A", 14), ("m8033", 15), ("m8034", 16), ("m8033A", 17), ("m8024FO", 24), ("m8039M", 32), ("m8039S", 33), ("m8026FO", 34), ("m8408", 35), ("m8400FO", 36), ("m8032-R", 43), ("m8032-1P", 44), ("m8032-1PR", 45), ("m8032-2P", 46), ("m8032-2PR", 47), ("m8032-3P", 48), ("m8032-3PR", 49), ("m8032-4P", 50), ("m8032-4PR", 51), ("m8032-5P", 52), ("m8032-5PR", 53), ("m8032-6P", 54), ("m8032-6PR", 55), ("m2008SX", 56), ("m8035", 58), ("m8035STP", 59), ("m8036", 60), ("m8023SX", 70), ("m8012SX-1", 71), ("m8012SX-6", 72), ("m8024SX", 73), ("m8027SX", 74), ("m8091SXM", 75), ("m8029SX-3M", 76), ("m8029SX-3S", 77), ("m8025SX", 78), ("m8025SXT", 79), ("mH8025SX", 81), ("mS8025SXT", 82), ("mS8025SX", 83), ("m8408FO", 84), ("m8012SX-2", 85), ("m8012SX-4", 86), ("m8012SX-12", 87), ("m8026SX", 88), ("m8035SX", 89), ("mP8035SX", 90), ("m8093SXM", 91), ("m8093SXS", 92), ("m8039SXM", 93), ("m8039SXS", 94), ("m4000i", 1000), ("m4000iR", 1001), ("m4012", 1010), ("m4012i", 1011), ("m4012iR", 1012), ("m4024", 1020), ("m4024i", 1021), ("m4024iR", 1022), ("m4036", 1030), ("m4036i", 1031), ("m4036iR", 1032), ("m4112", 1110), ("m4112i", 1111), ("m4112iR", 1112), ("m4124", 1120), ("m4124i", 1121), ("m4124iR", 1122), ("m4136", 1130), ("m4136i", 1131), ("m4136iR", 1132)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxGroupType.setStatus('mandatory')
plxGroupAutoPartState = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxGroupAutoPartState.setStatus('mandatory')
plxGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 2, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxGroupAdminState.setStatus('mandatory')
plxGroupCascadeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxGroupCascadeConfig.setStatus('mandatory')
plxGroupCascadeNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxGroupCascadeNetwork.setStatus('mandatory')
plxGroupLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxGroupLinkState.setStatus('mandatory')
plxGroupLinkPartTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 2, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxGroupLinkPartTrapEnable.setStatus('mandatory')
plxGroupNetworkSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxGroupNetworkSegment.setStatus('mandatory')
plxGroupChassisNo = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxGroupChassisNo.setStatus('mandatory')
plxHmBasicPortTable = MibTable((1, 3, 6, 1, 4, 1, 465, 10, 3), )
if mibBuilder.loadTexts: plxHmBasicPortTable.setStatus('mandatory')
plxHmBasicPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 465, 10, 3, 1), ).setIndexNames((0, "PLEXCOM-MIB", "plxPortGroupBasicID"), (0, "PLEXCOM-MIB", "plxPortBasicID"))
if mibBuilder.loadTexts: plxHmBasicPortEntry.setStatus('mandatory')
plxPortHubBasicID = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxPortHubBasicID.setStatus('mandatory')
plxPortGroupBasicID = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("slot1", 1), ("slot2", 2), ("slot3", 3), ("slot4", 4), ("slot5", 5), ("slot6", 6), ("slot7", 7), ("slot8", 8), ("slot9", 9), ("slot10", 10), ("slot11", 11), ("slot12", 12), ("slot13", 13), ("slot14", 14), ("slot15", 15), ("slot16", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxPortGroupBasicID.setStatus('mandatory')
plxPortBasicID = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38))).clone(namedValues=NamedValues(("port1", 1), ("port2", 2), ("port3", 3), ("port4", 4), ("port5", 5), ("port6", 6), ("port7", 7), ("port8", 8), ("port9", 9), ("port10", 10), ("port11", 11), ("port12", 12), ("port13", 13), ("port14", 14), ("port15", 15), ("port16", 16), ("port17", 17), ("port18", 18), ("port19", 19), ("port20", 20), ("port21", 21), ("port22", 22), ("port23", 23), ("port24", 24), ("port25", 25), ("port26", 26), ("port27", 27), ("port28", 28), ("port29", 29), ("port30", 30), ("port31", 31), ("port32", 32), ("port33", 33), ("port34", 34), ("port35", 35), ("port36", 36), ("port37", 37), ("port38", 38)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxPortBasicID.setStatus('mandatory')
plxPortMauType = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("unknown", 1), ("ieeeAui", 2), ("ieeeThin", 3), ("ieee10baseT", 4), ("ieee10base2", 5), ("foirl", 6), ("telco50", 7), ("tokenringutp", 10), ("tokenringstp", 11), ("tokenringcoax", 12), ("tokenringfiber", 13), ("tokenringtelco50", 14), ("internalNet", 15), ("serial", 16), ("as400utp", 17), ("as400fiber", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxPortMauType.setStatus('mandatory')
plxPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxPortAdminState.setStatus('mandatory')
plxPortAutoPartState = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("notPart", 2), ("part", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxPortAutoPartState.setStatus('mandatory')
plxPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxPortLinkState.setStatus('mandatory')
plxSystemAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 11))
plxSysAdmCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 465, 11, 1), )
if mibBuilder.loadTexts: plxSysAdmCommunityTable.setStatus('mandatory')
plxSysAdmCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 465, 11, 1, 1), ).setIndexNames((0, "PLEXCOM-MIB", "plxCommunityIndex"))
if mibBuilder.loadTexts: plxSysAdmCommunityEntry.setStatus('mandatory')
plxCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxCommunityIndex.setStatus('mandatory')
plxCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxCommunityName.setStatus('mandatory')
plxCommunityAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2), ("superUser", 3), ("invalid", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxCommunityAccess.setStatus('mandatory')
plxSysAdmDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 11, 2))
plxDownloadFileName = MibScalar((1, 3, 6, 1, 4, 1, 465, 11, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxDownloadFileName.setStatus('mandatory')
plxDownloadServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 465, 11, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxDownloadServerAddress.setStatus('mandatory')
plxDownloadAction = MibScalar((1, 3, 6, 1, 4, 1, 465, 11, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDownload", 1), ("download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxDownloadAction.setStatus('mandatory')
plxDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 465, 11, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 14))).clone(namedValues=NamedValues(("downloadSuccess", 1), ("downloadNotOccurred", 2), ("badFlash", 3), ("badServerAddress", 4), ("badFile", 5), ("tftpUndefined", 6), ("tftpFileNotFound", 7), ("tftpAccessViolation", 8), ("tftpIllegalOperation", 10), ("tftpUnknownTransferID", 11), ("downloadInProgress", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxDownloadStatus.setStatus('mandatory')
plxSysAdmTrapTable = MibTable((1, 3, 6, 1, 4, 1, 465, 11, 3), )
if mibBuilder.loadTexts: plxSysAdmTrapTable.setStatus('mandatory')
plxSysAdmTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 465, 11, 3, 1), ).setIndexNames((0, "PLEXCOM-MIB", "plxTrapIndex"))
if mibBuilder.loadTexts: plxSysAdmTrapEntry.setStatus('mandatory')
plxTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxTrapIndex.setStatus('mandatory')
plxTrapStandardEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxTrapStandardEnable.setStatus('mandatory')
plxTrapPlexcomEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxTrapPlexcomEnable.setStatus('mandatory')
plxTrapRepeaterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxTrapRepeaterEnable.setStatus('mandatory')
plxTrapNovellEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxTrapNovellEnable.setStatus('mandatory')
plxSysAdmMibControl = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 11, 4))
plxMcZeroStatCounters = MibScalar((1, 3, 6, 1, 4, 1, 465, 11, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noZero", 1), ("zeroCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxMcZeroStatCounters.setStatus('mandatory')
plxMcNetworkSelectRptrMib = MibScalar((1, 3, 6, 1, 4, 1, 465, 11, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxMcNetworkSelectRptrMib.setStatus('mandatory')
plxMcNetworkSelectRmonMib = MibScalar((1, 3, 6, 1, 4, 1, 465, 11, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxMcNetworkSelectRmonMib.setStatus('mandatory')
plxSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 465, 12))
plxIntruderControlGroupTable = MibTable((1, 3, 6, 1, 4, 1, 465, 12, 1), )
if mibBuilder.loadTexts: plxIntruderControlGroupTable.setStatus('mandatory')
plxIntruderControlGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 465, 12, 1, 1), ).setIndexNames((0, "PLEXCOM-MIB", "plxIcGroupGroupIndex"))
if mibBuilder.loadTexts: plxIntruderControlGroupEntry.setStatus('mandatory')
plxIcGroupGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIcGroupGroupIndex.setStatus('mandatory')
plxIcGroupAuthorizationType = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9))).clone(namedValues=NamedValues(("noUser", 1), ("singleUser", 2), ("multiValue", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxIcGroupAuthorizationType.setStatus('mandatory')
plxIcGroupAlarmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 9))).clone(namedValues=NamedValues(("none", 1), ("trapOnly", 2), ("disableOnly", 3), ("trapAndDisable", 4), ("multiValue", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxIcGroupAlarmAction.setStatus('mandatory')
plxIcGroupAuthorizedAddressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9))).clone(namedValues=NamedValues(("autoLearn", 1), ("useAuthorized", 2), ("multiValue", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxIcGroupAuthorizedAddressMode.setStatus('mandatory')
plxIcGroupDetectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("triggered", 3), ("multiValue", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxIcGroupDetectionStatus.setStatus('mandatory')
plxIntruderControlTable = MibTable((1, 3, 6, 1, 4, 1, 465, 12, 2), )
if mibBuilder.loadTexts: plxIntruderControlTable.setStatus('mandatory')
plxIntruderControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 465, 12, 2, 1), ).setIndexNames((0, "PLEXCOM-MIB", "plxIcGroupIndex"), (0, "PLEXCOM-MIB", "plxIcPortIndex"))
if mibBuilder.loadTexts: plxIntruderControlEntry.setStatus('mandatory')
plxIcGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIcGroupIndex.setStatus('mandatory')
plxIcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIcPortIndex.setStatus('mandatory')
plxIcAuthorizationType = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noUser", 1), ("singleUser", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxIcAuthorizationType.setStatus('mandatory')
plxIcAlarmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("trapOnly", 2), ("disableOnly", 3), ("trapAndDisable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxIcAlarmAction.setStatus('mandatory')
plxIcAuthorizedAddressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoLearn", 1), ("useAuthorized", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxIcAuthorizedAddressMode.setStatus('mandatory')
plxIcAuthorizedSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxIcAuthorizedSourceAddress.setStatus('mandatory')
plxIcCurrentSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: plxIcCurrentSourceAddress.setStatus('mandatory')
plxIcDetectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 465, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("triggered", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plxIcDetectionStatus.setStatus('mandatory')
plxPanicMesgTrap = NotificationType((1, 3, 6, 1, 4, 1, 465) + (0,4)).setObjects(("PLEXCOM-MIB", "plxSysPanicMesg"))
plxGenericHubTrap = NotificationType((1, 3, 6, 1, 4, 1, 465) + (0,5)).setObjects(("PLEXCOM-MIB", "plxPortLinkState"), ("PLEXCOM-MIB", "plxPortAutoPartState"), ("PLEXCOM-MIB", "plxGroupType"))
plxSecurityViolationTrap = NotificationType((1, 3, 6, 1, 4, 1, 465) + (0,6)).setObjects(("PLEXCOM-MIB", "plxIcCurrentSourceAddress"))
mibBuilder.exportSymbols("PLEXCOM-MIB", plxStBrMaxAge=plxStBrMaxAge, plxHmBasicGroupEntry=plxHmBasicGroupEntry, plxPlexcomS8025SXT=plxPlexcomS8025SXT, plxSpanTreeStats=plxSpanTreeStats, plexcom=plexcom, plxPortMauType=plxPortMauType, plxGenericHubTrap=plxGenericHubTrap, plxModule8039M=plxModule8039M, plxIcGroupAuthorizationType=plxIcGroupAuthorizationType, plxModule8024FO=plxModule8024FO, plxFrEntry=plxFrEntry, plxPanicMesgTrap=plxPanicMesgTrap, plxModule8035SX=plxModule8035SX, plxPlexcomPlexSTACK=plxPlexcomPlexSTACK, plxGroupCascadeConfig=plxGroupCascadeConfig, plxStsInConfig=plxStsInConfig, plxStPrtDesigPort=plxStPrtDesigPort, plxStBridge=plxStBridge, plxStPrtCost=plxStPrtCost, plxModule8036=plxModule8036, plxGroupNumberOfPorts=plxGroupNumberOfPorts, plxGroupCascadeNetwork=plxGroupCascadeNetwork, plxModule8039SXM=plxModule8039SXM, plxModule8024A=plxModule8024A, plxPlexcomHub8039=plxPlexcomHub8039, plxModule8035STP=plxModule8035STP, plxIcAuthorizationType=plxIcAuthorizationType, plxPlexcomProp=plxPlexcomProp, plxGroupType=plxGroupType, plxForwardCounters=plxForwardCounters, plxIfeInBusErr=plxIfeInBusErr, plxDownloadFileName=plxDownloadFileName, plxSysMemFreeFail=plxSysMemFreeFail, plxIntruderControlGroupEntry=plxIntruderControlGroupEntry, plxHub=plxHub, plxGroupNetworkSegment=plxGroupNetworkSegment, plxModuleS8025SX=plxModuleS8025SX, plxPlexcomHub8091=plxPlexcomHub8091, plxFtMaxFilter=plxFtMaxFilter, plxStBrSpanAddr=plxStBrSpanAddr, plxGroupLinkPartTrapEnable=plxGroupLinkPartTrapEnable, plxStsTopoChanges=plxStsTopoChanges, plxIcAuthorizedSourceAddress=plxIcAuthorizedSourceAddress, plxPortLinkState=plxPortLinkState, plxModule8029SX_3M=plxModule8029SX_3M, plxStRtMaxAge=plxStRtMaxAge, plxStsIn8021Man=plxStsIn8021Man, plxPlexcom4000iR=plxPlexcom4000iR, plxTrapPlexcomEnable=plxTrapPlexcomEnable, plxFcFiltPkts=plxFcFiltPkts, plxSysAdmCommunityEntry=plxSysAdmCommunityEntry, plxFilterRange=plxFilterRange, plxStBridgeagent=plxStBridgeagent, plxIfeInAlgError=plxIfeInAlgError, plxModule8032_1P=plxModule8032_1P, plxPlexcom8025=plxPlexcom8025, plxTrapNovellEnable=plxTrapNovellEnable, plxModule8023SX=plxModule8023SX, plxPlexcomHub8029=plxPlexcomHub8029, plxCommunityAccess=plxCommunityAccess, plxStBridgesnmpd=plxStBridgesnmpd, plxModule8023A=plxModule8023A, plxStBrName=plxStBrName, plxModule8012SX_1=plxModule8012SX_1, plxSysAdmTrapTable=plxSysAdmTrapTable, plxPlexcomH8025SX=plxPlexcomH8025SX, plxMcNetworkSelectRmonMib=plxMcNetworkSelectRmonMib, plxIfeInCRCErr=plxIfeInCRCErr, plxModuleUnknown=plxModuleUnknown, plxSwitchAgent=plxSwitchAgent, plxStBrSTPDisabled=plxStBrSTPDisabled, plxSysMemAllocTooBig=plxSysMemAllocTooBig, plxModule8029M=plxModule8029M, plxIfeOutUnderflow=plxIfeOutUnderflow, plxStPrtState=plxStPrtState, plxStBrIdent=plxStBrIdent, plxAgent=plxAgent, plxFcFiltOctets=plxFcFiltOctets, plxModule8039S=plxModule8039S, plxTrapStandardEnable=plxTrapStandardEnable, plxHmBasicGroupTable=plxHmBasicGroupTable, plxFcForwOctets=plxFcForwOctets, plxGroupChassisNo=plxGroupChassisNo, plxModule8091M=plxModule8091M, plxModule8024SX=plxModule8024SX, plxStRoot=plxStRoot, plxFtConfig=plxFtConfig, plxStRtForwDelay=plxStRtForwDelay, plxMcNetworkSelectRptrMib=plxMcNetworkSelectRptrMib, plxHubGroupCapacity=plxHubGroupCapacity, plxPlexBkDef=plxPlexBkDef, plxHubGroupMap=plxHubGroupMap, plxModule8026A=plxModule8026A, plxSysAdmDownload=plxSysAdmDownload, plxHubBasicID=plxHubBasicID, plxFcInPkts=plxFcInPkts, plxHmBasicHubEntry=plxHmBasicHubEntry, plxPlexcomH8025SXT=plxPlexcomH8025SXT, plxPortBasicID=plxPortBasicID, plxIcAlarmAction=plxIcAlarmAction, plxModule8093SXS=plxModule8093SXS, plxStsInUnknown=plxStsInUnknown, plxPlexcomHub8093=plxPlexcomHub8093, plxStsConfigTimeout=plxStsConfigTimeout, plxStsPortDisable=plxStsPortDisable, plxFtMaxAge=plxFtMaxAge, plxModule8033A=plxModule8033A, plxSysMemTotAllocFail=plxSysMemTotAllocFail, plxStsInBadLen=plxStsInBadLen, plxModule8025SXT=plxModule8025SXT, plxPlexcom4000i=plxPlexcom4000i, plxIfeOutCol16=plxIfeOutCol16, plxGroupBasicID=plxGroupBasicID, plxStPrtDesigRoot=plxStPrtDesigRoot, plxModule8012SX_4=plxModule8012SX_4, plxHmBasicPortTable=plxHmBasicPortTable, plxNode=plxNode, plxPlexcom8025SX=plxPlexcom8025SX, plxModule8032_R=plxModule8032_R, plxFtSecureMode=plxFtSecureMode, plxFrNumRange=plxFrNumRange, plxDownloadAction=plxDownloadAction, plxIcGroupIndex=plxIcGroupIndex, plxSysMemFree=plxSysMemFree, plxModuleP8035SX=plxModuleP8035SX, plxIcGroupAlarmAction=plxIcGroupAlarmAction, plxModule8012SX_2=plxModule8012SX_2, plxModule8408=plxModule8408, plxSecurity=plxSecurity, plxIcGroupAuthorizedAddressMode=plxIcGroupAuthorizedAddressMode, plxModule8034=plxModule8034, plxCommunityIndex=plxCommunityIndex, plxModule8400FO=plxModule8400FO, plxSystemAdmin=plxSystemAdmin, plxPortAdminState=plxPortAdminState, plxModule8408FO=plxModule8408FO, plxIcDetectionStatus=plxIcDetectionStatus, plxModule8031A=plxModule8031A, plxFtForwMBcast=plxFtForwMBcast, plxModule8026SX=plxModule8026SX, plxModule8012SX_6=plxModule8012SX_6, plxIcCurrentSourceAddress=plxIcCurrentSourceAddress, plxModule8029SX_3S=plxModule8029SX_3S, plxModule8026FO=plxModule8026FO, plxFtAge=plxFtAge, plxModule8011=plxModule8011, plxStsOutConfig=plxStsOutConfig, plxPortAutoPartState=plxPortAutoPartState, plxModule8023=plxModule8023, plxSysTimeToReset=plxSysTimeToReset, plxHmBasicPortEntry=plxHmBasicPortEntry, plxModule2008SX=plxModule2008SX, plxSysMemAllocFail=plxSysMemAllocFail, plxSpanningTree=plxSpanningTree, plxFcInOctets=plxFcInOctets, plxSysAdmMibControl=plxSysAdmMibControl, plxInterfaceErrors=plxInterfaceErrors, plxIfeInShortPkt=plxIfeInShortPkt, plxPlexBkBits=plxPlexBkBits, plxSysAdmTrapEntry=plxSysAdmTrapEntry, plxModule8025SX=plxModule8025SX, plxStBrIsRoot=plxStBrIsRoot, plxGroupAdminState=plxGroupAdminState, plxStsOutTopoChg=plxStsOutTopoChg, plxDownloadServerAddress=plxDownloadServerAddress, plxSecurityViolationTrap=plxSecurityViolationTrap, plxIfeOutShortPkt=plxIfeOutShortPkt, plxSysAdmCommunityTable=plxSysAdmCommunityTable, plxStRtHelloTime=plxStRtHelloTime, plxPlexAsync=plxPlexAsync, plxStPort=plxStPort, plxModule8032_4P=plxModule8032_4P, plxStBrHelloTime=plxStBrHelloTime, plxIcPortIndex=plxIcPortIndex, plxIfeInOverflow=plxIfeInOverflow, plxPortGroupBasicID=plxPortGroupBasicID, plxDownloadStatus=plxDownloadStatus, plxStBrPriority=plxStBrPriority, plxStPrtIsDesig=plxStPrtIsDesig, plxStsInTopoChg=plxStsInTopoChg, plxSysPanicMesg=plxSysPanicMesg, plxStRtIdent=plxStRtIdent, plxTrapRepeaterEnable=plxTrapRepeaterEnable, plxPlexcom5108=plxPlexcom5108, plxIntruderControlEntry=plxIntruderControlEntry, plxStPrtDesigCost=plxStPrtDesigCost, plxModule8024T=plxModule8024T, plxHubGroupCount=plxHubGroupCount, plxIcGroupGroupIndex=plxIcGroupGroupIndex, plxModule8091SXM=plxModule8091SXM, plxStRtPort=plxStRtPort, plxModuleH8025SX=plxModuleH8025SX, plxModule8027SX=plxModule8027SX, plxFcForwPkts=plxFcForwPkts, plxSysResetCount=plxSysResetCount, plxCommunityName=plxCommunityName, plxPlexcom8025SXT=plxPlexcom8025SXT, plxRepeaterAgent=plxRepeaterAgent, plxIcAuthorizedAddressMode=plxIcAuthorizedAddressMode, plxModule8093SXM=plxModule8093SXM, plxPlexcomS8025SX=plxPlexcomS8025SX, plxModule8032_2P=plxModule8032_2P, plxModuleS8025SXT=plxModuleS8025SXT, plxGroupHubBasicID=plxGroupHubBasicID, plxStBrForwDelay=plxStBrForwDelay, plxStBrIsDesig=plxStBrIsDesig, plxIfeOutBusErr=plxIfeOutBusErr, plxIfeInBadSize=plxIfeInBadSize, plxStRtCost=plxStRtCost, plxPlexStat=plxPlexStat, plxModule8035=plxModule8035, plxGroupLinkState=plxGroupLinkState, plxModule8032_6P=plxModule8032_6P, plxMcZeroStatCounters=plxMcZeroStatCounters, plxFtEntry=plxFtEntry, plxFtAgeTime=plxFtAgeTime, plxIntruderControlGroupTable=plxIntruderControlGroupTable, plxStsPortEnable=plxStsPortEnable, plxIcGroupDetectionStatus=plxIcGroupDetectionStatus, plxStPrtDesigBridge=plxStPrtDesigBridge, plxFtMaxPerm=plxFtMaxPerm, plxTrapIndex=plxTrapIndex, plxPortHubBasicID=plxPortHubBasicID, plxModule8031=plxModule8031, plxHmBasicHubTable=plxHmBasicHubTable, plxSystemCounters=plxSystemCounters, plxIfeOutCol=plxIfeOutCol, plxModule8010=plxModule8010, plxModule8026T=plxModule8026T, plxFtMaxRemove=plxFtMaxRemove, plxStPrtIsRoot=plxStPrtIsRoot, plxStPrtPriority=plxStPrtPriority, plxFtDisp=plxFtDisp, plxFilterTable=plxFilterTable, plxIntruderControlTable=plxIntruderControlTable, plxModule8033=plxModule8033, plxFcInNUcastPkts=plxFcInNUcastPkts, plxGroupAutoPartState=plxGroupAutoPartState, plxModule=plxModule, plxSysSoftwareVersion=plxSysSoftwareVersion, plxModule8039SXS=plxModule8039SXS)
