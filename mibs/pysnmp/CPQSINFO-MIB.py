#
# PySNMP MIB module CPQSINFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQSINFO-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Counter64, Unsigned32, iso, NotificationType, Bits, ObjectIdentity, MibIdentifier, Integer32, IpAddress, ModuleIdentity, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Counter64", "Unsigned32", "iso", "NotificationType", "Bits", "ObjectIdentity", "MibIdentifier", "Integer32", "IpAddress", "ModuleIdentity", "Counter32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2))
cpqSiMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 1))
cpqSiComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2))
cpqSiInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 1))
cpqSiAsset = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 2))
cpqSiSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 3))
cpqSiSystemBoard = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 4))
cpqSiBoardRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 5))
cpqSiRackServer = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 6))
cpqSiVideo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 7))
cpqSiMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 8))
cpqSiHotPlugSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 9))
cpqSiSystemBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 10))
cpqSiDockingStation = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 11))
cpqSiFru = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 12))
cpqSiRackEnclosure = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 13))
cpqSiServerBlade = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 14))
cpqSiRack = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 15))
cpqSiMP = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 16))
cpqSiOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4))
cpqSiMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMibRevMajor.setStatus('mandatory')
cpqSiMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMibRevMinor.setStatus('mandatory')
cpqSiMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMibCondition.setStatus('mandatory')
cpqSiOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiOsCommonPollFreq.setStatus('mandatory')
cpqSiOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2), )
if mibBuilder.loadTexts: cpqSiOsCommonModuleTable.setStatus('deprecated')
cpqSiOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiOsCommonModuleIndex"))
if mibBuilder.loadTexts: cpqSiOsCommonModuleEntry.setStatus('deprecated')
cpqSiOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiOsCommonModuleIndex.setStatus('deprecated')
cpqSiOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiOsCommonModuleName.setStatus('deprecated')
cpqSiOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiOsCommonModuleVersion.setStatus('deprecated')
cpqSiOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiOsCommonModuleDate.setStatus('deprecated')
cpqSiOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiOsCommonModulePurpose.setStatus('deprecated')
cpqSiSysSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysSerialNum.setStatus('mandatory')
cpqSiFormFactor = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("portable", 2), ("laptop", 3), ("desktop", 4), ("tower", 5), ("mini-tower", 6), ("rack-mount", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiFormFactor.setStatus('mandatory')
cpqSiAssetTag = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiAssetTag.setStatus('mandatory')
cpqSiOwnershipTag = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiOwnershipTag.setStatus('mandatory')
cpqSiSysServiceNum = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysServiceNum.setStatus('mandatory')
cpqSiSysProductId = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysProductId.setStatus('mandatory')
cpqSiAssetTagMaxLength = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiAssetTagMaxLength.setStatus('optional')
cpqSiVirtualSystemTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 8), )
if mibBuilder.loadTexts: cpqSiVirtualSystemTable.setStatus('optional')
cpqSiVirtualSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 8, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiVirtualSystemIndex"))
if mibBuilder.loadTexts: cpqSiVirtualSystemEntry.setStatus('optional')
cpqSiVirtualSystemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVirtualSystemIndex.setStatus('optional')
cpqSiVirtualSystemSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVirtualSystemSerialNumber.setStatus('optional')
cpqSiVirtualSystemUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 2, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVirtualSystemUUID.setStatus('optional')
cpqSiPowerOnPassword = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPowerOnPassword.setStatus('mandatory')
cpqSiNetServerMode = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiNetServerMode.setStatus('mandatory')
cpqSiQuickLockPassword = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiQuickLockPassword.setStatus('mandatory')
cpqSiQuickBlank = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiQuickBlank.setStatus('mandatory')
cpqSiDisketteBootControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiDisketteBootControl.setStatus('mandatory')
cpqSiSerialPortAControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSerialPortAControl.setStatus('mandatory')
cpqSiSerialPortBControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSerialPortBControl.setStatus('mandatory')
cpqSiParallelPortControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiParallelPortControl.setStatus('mandatory')
cpqSiFloppyDiskControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFloppyDiskControl.setStatus('mandatory')
cpqSiFixedDiskControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFixedDiskControl.setStatus('mandatory')
cpqSiHoodRemovedTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHoodRemovedTime.setStatus('mandatory')
cpqSiHoodSensorConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("notifyUser", 3), ("adminPasswordProtected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHoodSensorConfiguration.setStatus('mandatory')
cpqSiSmartCoverLockStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("unlocked", 2), ("locked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSmartCoverLockStatus.setStatus('mandatory')
cpqSiUSBPortControl = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("legacydisabled", 4), ("externalportdisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiUSBPortControl.setStatus('mandatory')
cpqSiProductId = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiProductId.setStatus('mandatory')
cpqSiProductName = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiProductName.setStatus('mandatory')
cpqSiAuxiliaryInput = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiAuxiliaryInput.setStatus('mandatory')
cpqSiMemModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5), )
if mibBuilder.loadTexts: cpqSiMemModuleTable.setStatus('mandatory')
cpqSiMemModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiMemBoardIndex"), (0, "CPQSINFO-MIB", "cpqSiMemModuleIndex"))
if mibBuilder.loadTexts: cpqSiMemModuleEntry.setStatus('mandatory')
cpqSiMemBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemBoardIndex.setStatus('mandatory')
cpqSiMemModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleIndex.setStatus('mandatory')
cpqSiMemModuleSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleSize.setStatus('mandatory')
cpqSiMemModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("board", 2), ("cpqSingleWidthModule", 3), ("cpqDoubleWidthModule", 4), ("simm", 5), ("pcmcia", 6), ("compaq-specific", 7), ("dimm", 8), ("smallOutlineDimm", 9), ("rimm", 10), ("srimm", 11), ("fb-dimm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleType.setStatus('mandatory')
cpqSiMemModuleSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleSpeed.setStatus('deprecated')
cpqSiMemModuleTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("fastPageMode", 2), ("edoPageMode", 3), ("burstEdoPageMode", 4), ("synchronous", 5), ("rdram", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleTechnology.setStatus('mandatory')
cpqSiMemModuleManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleManufacturer.setStatus('mandatory')
cpqSiMemModulePartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModulePartNo.setStatus('mandatory')
cpqSiMemModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleDate.setStatus('mandatory')
cpqSiMemModuleSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiMemModuleSerialNo.setStatus('mandatory')
cpqSiMemModuleECCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("degradedModuleIndexUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleECCStatus.setStatus('mandatory')
cpqSiMemModuleHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleHwLocation.setStatus('optional')
cpqSiMemModuleFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleFrequency.setStatus('mandatory')
cpqSiMemModuleCellTablePtr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleCellTablePtr.setStatus('optional')
cpqSiMemModuleCellStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("deconfigured", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleCellStatus.setStatus('optional')
cpqSiMemModulePartNoMfgr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModulePartNoMfgr.setStatus('optional')
cpqSiMemModuleSerialNoMfgr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 5, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemModuleSerialNoMfgr.setStatus('optional')
cpqSiSystemId = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSystemId.setStatus('mandatory')
cpqSiSystemCpuId = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSystemCpuId.setStatus('mandatory')
cpqSiFlashRomSupport = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFlashRomSupport.setStatus('mandatory')
cpqSiQuickTestRomDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiQuickTestRomDate.setStatus('mandatory')
cpqSiReboot = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 2693, 8115, 9037))).clone(namedValues=NamedValues(("notAvailable", 1), ("available", 2), ("defaultOnlyAvailable", 3), ("rebootToCpqUtils", 2693), ("rebootToDefault", 8115), ("autoShutdown", 9037)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiReboot.setStatus('deprecated')
cpqSiProcMicroPatchTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 11), )
if mibBuilder.loadTexts: cpqSiProcMicroPatchTable.setStatus('mandatory')
cpqSiProcMicroPatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 11, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiProcMicroPatchIndex"))
if mibBuilder.loadTexts: cpqSiProcMicroPatchEntry.setStatus('mandatory')
cpqSiProcMicroPatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiProcMicroPatchIndex.setStatus('mandatory')
cpqSiProcMicroPatchId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiProcMicroPatchId.setStatus('mandatory')
cpqSiProcMicroPatchDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 11, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiProcMicroPatchDate.setStatus('mandatory')
cpqSiProcMicroPatchFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiProcMicroPatchFamily.setStatus('mandatory')
cpqSiPowerMgmtStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPowerMgmtStatus.setStatus('mandatory')
cpqSiRebootFlags = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiRebootFlags.setStatus('mandatory')
cpqSiMemErrorIndex = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemErrorIndex.setStatus('mandatory')
cpqSiMemECCCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemECCCondition.setStatus('mandatory')
cpqSiMemConfigChangeData = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMemConfigChangeData.setStatus('mandatory')
cpqSiServerSystemId = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiServerSystemId.setStatus('mandatory')
cpqSiPowerScheme = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unsupported", 1), ("other", 2), ("power-saver", 3), ("balanced", 4), ("high-performance", 5), ("user-defined", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPowerScheme.setStatus('optional')
cpqSiPowerSchemeName = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPowerSchemeName.setStatus('optional')
cpqSiCurrentPerformanceStatePointer = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiCurrentPerformanceStatePointer.setStatus('optional')
cpqSiMinPerformanceState = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMinPerformanceState.setStatus('optional')
cpqSiMaxPerformanceState = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMaxPerformanceState.setStatus('optional')
cpqSiPerfStateTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 23), )
if mibBuilder.loadTexts: cpqSiPerfStateTable.setStatus('optional')
cpqSiPerfStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 23, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiPerfStateIndex"))
if mibBuilder.loadTexts: cpqSiPerfStateEntry.setStatus('optional')
cpqSiPerfStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPerfStateIndex.setStatus('optional')
cpqSiPerfState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPerfState.setStatus('optional')
cpqSiPerfStateCpuFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPerfStateCpuFrequency.setStatus('optional')
cpqSiPerfStateCpuPower = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 23, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPerfStateCpuPower.setStatus('optional')
cpqSiTPMmodule = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 4, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("absent", 2), ("presentEnabled", 3), ("presentDisabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiTPMmodule.setStatus('optional')
cpqSiCurRevDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiCurRevDate.setStatus('mandatory')
cpqSiPrevRevDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiPrevRevDate.setStatus('mandatory')
cpqSiBoardRevTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3), )
if mibBuilder.loadTexts: cpqSiBoardRevTable.setStatus('mandatory')
cpqSiBoardRevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiBoardRevSlotIndex"), (0, "CPQSINFO-MIB", "cpqSiBoardRevIndex"))
if mibBuilder.loadTexts: cpqSiBoardRevEntry.setStatus('mandatory')
cpqSiBoardRevSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiBoardRevSlotIndex.setStatus('mandatory')
cpqSiBoardRevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiBoardRevIndex.setStatus('mandatory')
cpqSiBoardRevId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiBoardRevId.setStatus('mandatory')
cpqSiBoardRevCur = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiBoardRevCur.setStatus('mandatory')
cpqSiBoardRevPrev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiBoardRevPrev.setStatus('mandatory')
cpqSiBoardRevHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiBoardRevHwLocation.setStatus('optional')
cpqSiFirmwareRevTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4), )
if mibBuilder.loadTexts: cpqSiFirmwareRevTable.setStatus('mandatory')
cpqSiFirmwareRevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiFirmwareRevIndex"))
if mibBuilder.loadTexts: cpqSiFirmwareRevEntry.setStatus('mandatory')
cpqSiFirmwareRevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareRevIndex.setStatus('mandatory')
cpqSiFirmwareRevDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareRevDesc.setStatus('mandatory')
cpqSiFirmwareRevString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareRevString.setStatus('mandatory')
cpqSiFirmwareRevCellTablePtr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareRevCellTablePtr.setStatus('deprecated')
cpqSiFirmwareLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareLocation.setStatus('optional')
cpqSiFirmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareStatus.setStatus('optional')
cpqSiFirmwareCfgTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 5), )
if mibBuilder.loadTexts: cpqSiFirmwareCfgTable.setStatus('mandatory')
cpqSiFirmwareCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 5, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiFirmwareCfgName"))
if mibBuilder.loadTexts: cpqSiFirmwareCfgEntry.setStatus('mandatory')
cpqSiFirmwareCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareCfgName.setStatus('mandatory')
cpqSiFirmwareCfgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 5, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFirmwareCfgValue.setStatus('mandatory')
cpqSiRackServerShutdownRole = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("master", 2), ("slave", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiRackServerShutdownRole.setStatus('mandatory')
cpqSiRackServerMasterName = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiRackServerMasterName.setStatus('mandatory')
cpqSiVideoEdidRaw = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoEdidRaw.setStatus('deprecated')
cpqSiVideoDesc = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoDesc.setStatus('deprecated')
cpqSiVideoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoSerialNumber.setStatus('deprecated')
cpqSiVideoManufactureDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoManufactureDate.setStatus('deprecated')
cpqSiVideoHeight = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoHeight.setStatus('deprecated')
cpqSiVideoWidth = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoWidth.setStatus('deprecated')
cpqSiVideoMaxHorPixel = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoMaxHorPixel.setStatus('deprecated')
cpqSiVideoMaxVertPixel = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoMaxVertPixel.setStatus('deprecated')
cpqSiVideoMaxRefreshRate = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 7, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiVideoMaxRefreshRate.setStatus('deprecated')
cpqSiMonitorOverallCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorOverallCondition.setStatus('mandatory')
cpqSiMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2), )
if mibBuilder.loadTexts: cpqSiMonitorTable.setStatus('mandatory')
cpqSiMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiMonitorIndex"))
if mibBuilder.loadTexts: cpqSiMonitorEntry.setStatus('mandatory')
cpqSiMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorIndex.setStatus('mandatory')
cpqSiMonitorEdidRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorEdidRaw.setStatus('mandatory')
cpqSiMonitorDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorDesc.setStatus('mandatory')
cpqSiMonitorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorSerialNumber.setStatus('mandatory')
cpqSiMonitorManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorManufactureDate.setStatus('mandatory')
cpqSiMonitorHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorHeight.setStatus('mandatory')
cpqSiMonitorWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorWidth.setStatus('mandatory')
cpqSiMonitorMaxHorPixel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorMaxHorPixel.setStatus('mandatory')
cpqSiMonitorMaxVertPixel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorMaxVertPixel.setStatus('mandatory')
cpqSiMonitorMaxRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorMaxRefreshRate.setStatus('mandatory')
cpqSiMonitorManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorManufacturer.setStatus('mandatory')
cpqSiMonitorThermalCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorThermalCondition.setStatus('mandatory')
cpqSiMonitorOperationalCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorOperationalCondition.setStatus('mandatory')
cpqSiMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("thermalDegraded", 4), ("operationalFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMonitorStatus.setStatus('mandatory')
cpqSiHotPlugSlotSupported = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("supported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotSupported.setStatus('mandatory')
cpqSiHotPlugSlotCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotCondition.setStatus('mandatory')
cpqSiHotPlugSlotChangeCount = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotChangeCount.setStatus('mandatory')
cpqSiHotPlugSlotTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4), )
if mibBuilder.loadTexts: cpqSiHotPlugSlotTable.setStatus('mandatory')
cpqSiHotPlugSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiHotPlugSlotChassis"), (0, "CPQSINFO-MIB", "cpqSiHotPlugSlotIndex"))
if mibBuilder.loadTexts: cpqSiHotPlugSlotEntry.setStatus('mandatory')
cpqSiHotPlugSlotChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotChassis.setStatus('mandatory')
cpqSiHotPlugSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotIndex.setStatus('mandatory')
cpqSiHotPlugSlotBoardPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("present", 2), ("absent", 3), ("presentButSuspended", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotBoardPresent.setStatus('mandatory')
cpqSiHotPlugSlotPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("powerOn", 2), ("powerOff", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotPowerState.setStatus('mandatory')
cpqSiHotPlugSlotBoardCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotBoardCondition.setStatus('mandatory')
cpqSiHotPlugSlotErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noError", 1), ("generalError", 2), ("wrongRevision", 3), ("wrongBoard", 4), ("cannotConfig", 5), ("powerFault", 6), ("unexpectedPowerLoss", 7), ("wrongSpeed", 8), ("functionalFailure", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotErrorStatus.setStatus('mandatory')
cpqSiHotPlugSlotHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 9, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiHotPlugSlotHwLocation.setStatus('optional')
cpqSiSystemBatteryOverallCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSystemBatteryOverallCondition.setStatus('mandatory')
cpqSiSysBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2), )
if mibBuilder.loadTexts: cpqSiSysBatteryTable.setStatus('mandatory')
cpqSiSysBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiSysBatteryIndex"))
if mibBuilder.loadTexts: cpqSiSysBatteryEntry.setStatus('mandatory')
cpqSiSysBatteryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryIndex.setStatus('mandatory')
cpqSiSysBatteryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryModel.setStatus('mandatory')
cpqSiSysBatterySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatterySerialNum.setStatus('mandatory')
cpqSiSysBatteryAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryAssetTag.setStatus('mandatory')
cpqSiSysBatteryManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryManufacturer.setStatus('mandatory')
cpqSiSysBatteryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryDate.setStatus('mandatory')
cpqSiSysBatterySmartVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatterySmartVersion.setStatus('mandatory')
cpqSiSysBatteryCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryCondition.setStatus('mandatory')
cpqSiSysBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("capacityDegraded", 3), ("chargeFault", 4), ("batteryFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryStatus.setStatus('mandatory')
cpqSiSysBatteryChemistry = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("lead-Acid", 3), ("nickel-Cadmium", 4), ("nickel-Metal-Hydride", 5), ("lithium-Ion", 6), ("zinc-Air", 7), ("lithium-Polymer", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryChemistry.setStatus('mandatory')
cpqSiSysBatteryRemainingCap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryRemainingCap.setStatus('mandatory')
cpqSiSysBatteryFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryFirmwareRevision.setStatus('mandatory')
cpqSiSysBatteryHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryHardwareRevision.setStatus('mandatory')
cpqSiSysBatteryFullCap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryFullCap.setStatus('mandatory')
cpqSiSysBatteryDesignCap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryDesignCap.setStatus('mandatory')
cpqSiSysBatteryHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 10, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiSysBatteryHwLocation.setStatus('optional')
cpqSiDockingStationStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSupported", 1), ("docked", 2), ("undocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiDockingStationStatus.setStatus('mandatory')
cpqSiDockingStationSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiDockingStationSerialNum.setStatus('mandatory')
cpqSiDockingStationModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 11, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiDockingStationModel.setStatus('mandatory')
cpqSiDockingStationAssetTag = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 11, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiDockingStationAssetTag.setStatus('mandatory')
cpqSiFruTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1), )
if mibBuilder.loadTexts: cpqSiFruTable.setStatus('mandatory')
cpqSiFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiFruIndex"))
if mibBuilder.loadTexts: cpqSiFruEntry.setStatus('mandatory')
cpqSiFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruIndex.setStatus('mandatory')
cpqSiFruType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("motherBoard", 3), ("processor", 4), ("memoryCard", 5), ("memoryModule", 6), ("peripheralDevice", 7), ("systemBusBridge", 8), ("powerSupply", 9), ("chassis", 10), ("fan", 11), ("ioCard", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruType.setStatus('mandatory')
cpqSiFruDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiFruDescr.setStatus('mandatory')
cpqSiFruVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruVendor.setStatus('mandatory')
cpqSiFruPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruPartNumber.setStatus('mandatory')
cpqSiFruRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruRevision.setStatus('mandatory')
cpqSiFruFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruFirmwareRevision.setStatus('mandatory')
cpqSiFruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruSerialNumber.setStatus('mandatory')
cpqSiFruAssetNo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqSiFruAssetNo.setStatus('mandatory')
cpqSiFruClass = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("currentBoardInSlot", 3), ("priorBoardInSlot", 4), ("parentBoard", 5), ("priorParentBoard", 6), ("priorParentSystem", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruClass.setStatus('mandatory')
cpqSiFruSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruSlotNumber.setStatus('mandatory')
cpqSiFruSubAssemblyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruSubAssemblyNumber.setStatus('mandatory')
cpqSiFruAssemblyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruAssemblyNumber.setStatus('mandatory')
cpqSiFruChassisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruChassisNumber.setStatus('mandatory')
cpqSiFruPositionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruPositionNumber.setStatus('mandatory')
cpqSiFruCabinetIDNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruCabinetIDNumber.setStatus('mandatory')
cpqSiFruSiteLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruSiteLocation.setStatus('mandatory')
cpqSiFruDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruDiagStatus.setStatus('mandatory')
cpqSiFruExtendedDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruExtendedDiagStatus.setStatus('mandatory')
cpqSiFruCellTablePtr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruCellTablePtr.setStatus('optional')
cpqSiFruIOCTablePtr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruIOCTablePtr.setStatus('optional')
cpqSiFruFileId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruFileId.setStatus('optional')
cpqSiFruScanRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 12, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiFruScanRev.setStatus('optional')
cpqSiRackEnclosureMgrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1), )
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrTable.setStatus('mandatory')
cpqSiRackEnclosureMgrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1), ).setIndexNames((0, "CPQSINFO-MIB", "cpqSiRackEnclosureMgrIndex"))
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrEntry.setStatus('mandatory')
cpqSiRackEnclosureMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrIndex.setStatus('mandatory')
cpqSiRackEnclosureMgrType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("noEnclosureManagement", 2), ("enclosureManagement", 3), ("onboardAdminManagement", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrType.setStatus('mandatory')
cpqSiRackEnclosureMgrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrIpAddr.setStatus('mandatory')
cpqSiRackEnclosureMgrWebLink = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrWebLink.setStatus('mandatory')
cpqSiRackEnclosureMgrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrCondition.setStatus('mandatory')
cpqSiRackEnclosureMgrSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrSerialNumber.setStatus('mandatory')
cpqSiRackEnclosureMgrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrModel.setStatus('optional')
cpqSiRackEnclosureMgrName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrName.setStatus('optional')
cpqSiRackEnclosureMgrFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrFwRev.setStatus('optional')
cpqSiRackEnclosureMgrProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrProductID.setStatus('optional')
cpqSiRackEnclosureMgrUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 2, 2, 13, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackEnclosureMgrUUID.setStatus('optional')
cpqSiServerBladeEnclosureBayNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiServerBladeEnclosureBayNumber.setStatus('optional')
cpqSiServerBladeHeight = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("halfHeightBlade", 2), ("fullHeightBlade", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiServerBladeHeight.setStatus('optional')
cpqSiServerBladeWidth = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("singleWide", 2), ("doubleWide", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiServerBladeWidth.setStatus('optional')
cpqSiRackName = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 15, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackName.setStatus('optional')
cpqSiRackUUID = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 15, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiRackUUID.setStatus('optional')
cpqSiMPHostName = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 16, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMPHostName.setStatus('optional')
cpqSiMPHealthStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 2, 2, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqSiMPHealthStatus.setStatus('optional')
cpqSiHoodRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2001)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"))
cpqSiMonitorConditionOK = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2002)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiMonitorIndex"))
cpqSiMonitorConditionDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2003)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiMonitorIndex"))
cpqSiMonitorConditionFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2004)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiMonitorIndex"))
cpqSiCorrMemErrStatusDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2005)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiMemErrorIndex"))
cpqSiCorrMemErrStatusOk = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2006)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiMemErrorIndex"))
cpqSiMemConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2007)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiMemConfigChangeData"))
cpqSiHotPlugSlotBoardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2008)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotChassis"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotIndex"))
cpqSiHotPlugSlotBoardInserted = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2009)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotChassis"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotIndex"))
cpqSiHotPlugSlotPowerUpFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2010)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotChassis"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotIndex"), ("CPQSINFO-MIB", "cpqSiHotPlugSlotErrorStatus"))
cpqSiSysBatteryFailure = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2011)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiSysBatteryIndex"), ("CPQSINFO-MIB", "cpqSiSysBatterySerialNum"))
cpqSiSysBatteryChargingDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2012)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiSysBatteryIndex"), ("CPQSINFO-MIB", "cpqSiSysBatterySerialNum"))
cpqSiSysBatteryCalibrationError = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,2013)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQHOST-MIB", "cpqHoTrapFlags"), ("CPQSINFO-MIB", "cpqSiSysBatteryIndex"), ("CPQSINFO-MIB", "cpqSiSysBatterySerialNum"))
mibBuilder.exportSymbols("CPQSINFO-MIB", cpqSiDockingStationStatus=cpqSiDockingStationStatus, cpqSiFruPartNumber=cpqSiFruPartNumber, cpqSiMemModuleManufacturer=cpqSiMemModuleManufacturer, cpqSiHotPlugSlotEntry=cpqSiHotPlugSlotEntry, cpqSiMonitorConditionOK=cpqSiMonitorConditionOK, cpqSiVideoMaxVertPixel=cpqSiVideoMaxVertPixel, cpqSiAuxiliaryInput=cpqSiAuxiliaryInput, cpqSiMonitorDesc=cpqSiMonitorDesc, cpqSiSystemId=cpqSiSystemId, cpqSiFormFactor=cpqSiFormFactor, cpqSiFruIOCTablePtr=cpqSiFruIOCTablePtr, cpqSiRackEnclosureMgrSerialNumber=cpqSiRackEnclosureMgrSerialNumber, cpqSiSysProductId=cpqSiSysProductId, cpqSiPerfState=cpqSiPerfState, cpqSiSysBatteryHardwareRevision=cpqSiSysBatteryHardwareRevision, cpqSiMemModuleSerialNoMfgr=cpqSiMemModuleSerialNoMfgr, cpqSiServerSystemId=cpqSiServerSystemId, cpqSiPerfStateCpuFrequency=cpqSiPerfStateCpuFrequency, cpqSiBoardRevIndex=cpqSiBoardRevIndex, cpqSiVideoDesc=cpqSiVideoDesc, cpqSiSysBatteryRemainingCap=cpqSiSysBatteryRemainingCap, cpqSiOsCommonModuleDate=cpqSiOsCommonModuleDate, cpqSiPowerSchemeName=cpqSiPowerSchemeName, cpqSiHotPlugSlotSupported=cpqSiHotPlugSlotSupported, cpqSiSysBatteryCalibrationError=cpqSiSysBatteryCalibrationError, cpqSiQuickBlank=cpqSiQuickBlank, cpqSiRackName=cpqSiRackName, cpqSiFirmwareStatus=cpqSiFirmwareStatus, cpqSiPrevRevDate=cpqSiPrevRevDate, cpqSiSysBatterySerialNum=cpqSiSysBatterySerialNum, cpqSiRackUUID=cpqSiRackUUID, cpqSiRackEnclosureMgrType=cpqSiRackEnclosureMgrType, cpqSiOsCommonModuleEntry=cpqSiOsCommonModuleEntry, cpqSiMemModuleSize=cpqSiMemModuleSize, cpqSiSystemBatteryOverallCondition=cpqSiSystemBatteryOverallCondition, cpqSiParallelPortControl=cpqSiParallelPortControl, cpqSiMPHostName=cpqSiMPHostName, cpqSiFlashRomSupport=cpqSiFlashRomSupport, cpqSiMonitorManufacturer=cpqSiMonitorManufacturer, cpqSiMonitorStatus=cpqSiMonitorStatus, cpqSiOsCommonModulePurpose=cpqSiOsCommonModulePurpose, cpqSiFruVendor=cpqSiFruVendor, cpqSiRackServerShutdownRole=cpqSiRackServerShutdownRole, cpqSiMemBoardIndex=cpqSiMemBoardIndex, cpqSiSysBatteryChargingDegraded=cpqSiSysBatteryChargingDegraded, cpqSiComponent=cpqSiComponent, cpqSiFloppyDiskControl=cpqSiFloppyDiskControl, cpqSiMibCondition=cpqSiMibCondition, cpqSiRack=cpqSiRack, cpqSiBoardRevPrev=cpqSiBoardRevPrev, cpqSiSysBatteryAssetTag=cpqSiSysBatteryAssetTag, cpqSiPerfStateCpuPower=cpqSiPerfStateCpuPower, cpqSiMemModuleECCStatus=cpqSiMemModuleECCStatus, cpqSiHoodRemoved=cpqSiHoodRemoved, cpqSiBoardRevEntry=cpqSiBoardRevEntry, cpqSiHotPlugSlotChangeCount=cpqSiHotPlugSlotChangeCount, cpqSiHotPlugSlotErrorStatus=cpqSiHotPlugSlotErrorStatus, cpqSiFirmwareRevTable=cpqSiFirmwareRevTable, cpqSiInterface=cpqSiInterface, cpqSiAssetTag=cpqSiAssetTag, cpqSiSecurity=cpqSiSecurity, cpqSiQuickLockPassword=cpqSiQuickLockPassword, cpqSiSerialPortAControl=cpqSiSerialPortAControl, cpqSiProductName=cpqSiProductName, cpqSiFirmwareCfgEntry=cpqSiFirmwareCfgEntry, cpqSiFruAssetNo=cpqSiFruAssetNo, cpqSiSysServiceNum=cpqSiSysServiceNum, cpqSiMonitorIndex=cpqSiMonitorIndex, cpqSiMemModulePartNoMfgr=cpqSiMemModulePartNoMfgr, cpqSiSmartCoverLockStatus=cpqSiSmartCoverLockStatus, cpqSiRackEnclosureMgrIpAddr=cpqSiRackEnclosureMgrIpAddr, cpqSiMemModuleSerialNo=cpqSiMemModuleSerialNo, cpqSiRackEnclosureMgrProductID=cpqSiRackEnclosureMgrProductID, cpqSiHotPlugSlotBoardCondition=cpqSiHotPlugSlotBoardCondition, cpqSiMonitorMaxHorPixel=cpqSiMonitorMaxHorPixel, cpqSiSysBatteryDesignCap=cpqSiSysBatteryDesignCap, cpqSiHotPlugSlotBoardInserted=cpqSiHotPlugSlotBoardInserted, cpqSiDisketteBootControl=cpqSiDisketteBootControl, cpqSiRackEnclosureMgrTable=cpqSiRackEnclosureMgrTable, cpqSiRackServer=cpqSiRackServer, cpqSiVideo=cpqSiVideo, cpqSiSysBatteryEntry=cpqSiSysBatteryEntry, cpqSiRackEnclosureMgrName=cpqSiRackEnclosureMgrName, cpqSiProductId=cpqSiProductId, cpqSiSystemBoard=cpqSiSystemBoard, cpqSiMemModuleType=cpqSiMemModuleType, cpqSiHotPlugSlotCondition=cpqSiHotPlugSlotCondition, cpqSiHotPlugSlotPowerState=cpqSiHotPlugSlotPowerState, cpqSiSysBatteryChemistry=cpqSiSysBatteryChemistry, cpqSiFirmwareRevString=cpqSiFirmwareRevString, cpqSiHotPlugSlotBoardRemoved=cpqSiHotPlugSlotBoardRemoved, cpqSiMemModuleCellTablePtr=cpqSiMemModuleCellTablePtr, cpqSiBoardRevCur=cpqSiBoardRevCur, cpqSiBoardRevHwLocation=cpqSiBoardRevHwLocation, cpqSiFruSlotNumber=cpqSiFruSlotNumber, cpqSiSysBatteryFailure=cpqSiSysBatteryFailure, cpqSiPerfStateEntry=cpqSiPerfStateEntry, cpqSiRackEnclosureMgrFwRev=cpqSiRackEnclosureMgrFwRev, cpqSiSysBatteryFullCap=cpqSiSysBatteryFullCap, cpqSiMemModuleEntry=cpqSiMemModuleEntry, cpqSiVideoHeight=cpqSiVideoHeight, cpqSiMPHealthStatus=cpqSiMPHealthStatus, cpqSiRackEnclosureMgrUUID=cpqSiRackEnclosureMgrUUID, cpqSiFruCabinetIDNumber=cpqSiFruCabinetIDNumber, cpqSiFirmwareRevEntry=cpqSiFirmwareRevEntry, cpqSiRackEnclosureMgrWebLink=cpqSiRackEnclosureMgrWebLink, cpqSiVideoSerialNumber=cpqSiVideoSerialNumber, cpqSiFruSiteLocation=cpqSiFruSiteLocation, cpqSiFruRevision=cpqSiFruRevision, cpqSiBoardRevId=cpqSiBoardRevId, cpqSiFirmwareRevCellTablePtr=cpqSiFirmwareRevCellTablePtr, cpqSiServerBladeWidth=cpqSiServerBladeWidth, cpqSiCorrMemErrStatusDegraded=cpqSiCorrMemErrStatusDegraded, cpqSiVideoEdidRaw=cpqSiVideoEdidRaw, cpqSiFixedDiskControl=cpqSiFixedDiskControl, cpqSiVirtualSystemTable=cpqSiVirtualSystemTable, cpqSiDockingStation=cpqSiDockingStation, cpqSiBoardRevTable=cpqSiBoardRevTable, cpqSiFirmwareRevIndex=cpqSiFirmwareRevIndex, cpqSiVideoManufactureDate=cpqSiVideoManufactureDate, cpqSiMibRev=cpqSiMibRev, cpqSiOsCommonModuleIndex=cpqSiOsCommonModuleIndex, cpqSiHotPlugSlot=cpqSiHotPlugSlot, cpqSiMemModuleHwLocation=cpqSiMemModuleHwLocation, cpqSiNetServerMode=cpqSiNetServerMode, cpqSiPowerOnPassword=cpqSiPowerOnPassword, cpqSiMemModuleSpeed=cpqSiMemModuleSpeed, cpqSiMemModuleIndex=cpqSiMemModuleIndex, cpqSiHoodSensorConfiguration=cpqSiHoodSensorConfiguration, cpqSiHotPlugSlotTable=cpqSiHotPlugSlotTable, cpqSiDockingStationSerialNum=cpqSiDockingStationSerialNum, cpqSiMaxPerformanceState=cpqSiMaxPerformanceState, cpqSiFruExtendedDiagStatus=cpqSiFruExtendedDiagStatus, cpqSiMemModuleFrequency=cpqSiMemModuleFrequency, cpqSiMonitorOverallCondition=cpqSiMonitorOverallCondition, cpqSiFruEntry=cpqSiFruEntry, cpqSiFruSerialNumber=cpqSiFruSerialNumber, cpqSiFruChassisNumber=cpqSiFruChassisNumber, cpqSiRackEnclosureMgrEntry=cpqSiRackEnclosureMgrEntry, cpqSiRackEnclosureMgrIndex=cpqSiRackEnclosureMgrIndex, cpqSiRackEnclosureMgrCondition=cpqSiRackEnclosureMgrCondition, cpqSiCurrentPerformanceStatePointer=cpqSiCurrentPerformanceStatePointer, cpqSiOwnershipTag=cpqSiOwnershipTag, cpqSiAsset=cpqSiAsset, cpqSiBoardRev=cpqSiBoardRev, cpqSiMonitorConditionFailed=cpqSiMonitorConditionFailed, cpqSiOsCommon=cpqSiOsCommon, cpqSiMinPerformanceState=cpqSiMinPerformanceState, cpqSiRackEnclosureMgrModel=cpqSiRackEnclosureMgrModel, cpqSiFruType=cpqSiFruType, cpqSiMonitorManufactureDate=cpqSiMonitorManufactureDate, cpqSiFruFirmwareRevision=cpqSiFruFirmwareRevision, cpqSiCurRevDate=cpqSiCurRevDate, cpqSiMonitorEdidRaw=cpqSiMonitorEdidRaw, cpqSiDockingStationAssetTag=cpqSiDockingStationAssetTag, cpqSiFruIndex=cpqSiFruIndex, cpqSiSysBatterySmartVersion=cpqSiSysBatterySmartVersion, cpqSiFruTable=cpqSiFruTable, cpqSiMemConfigChange=cpqSiMemConfigChange, cpqSiMP=cpqSiMP, cpqSiProcMicroPatchTable=cpqSiProcMicroPatchTable, cpqSiHotPlugSlotIndex=cpqSiHotPlugSlotIndex, cpqSiSysBatteryModel=cpqSiSysBatteryModel, cpqSiMonitorMaxRefreshRate=cpqSiMonitorMaxRefreshRate, cpqSiFruDescr=cpqSiFruDescr, cpqSiFruFileId=cpqSiFruFileId, cpqSiMonitor=cpqSiMonitor, cpqSiOsCommonPollFreq=cpqSiOsCommonPollFreq, cpqSiOsCommonModuleName=cpqSiOsCommonModuleName, cpqSiVirtualSystemEntry=cpqSiVirtualSystemEntry, cpqSiSysBatteryTable=cpqSiSysBatteryTable, cpqSiVideoMaxHorPixel=cpqSiVideoMaxHorPixel, cpqSiProcMicroPatchDate=cpqSiProcMicroPatchDate, cpqSiPerfStateTable=cpqSiPerfStateTable, cpqSiProcMicroPatchIndex=cpqSiProcMicroPatchIndex, cpqSiVideoWidth=cpqSiVideoWidth, cpqSiMonitorEntry=cpqSiMonitorEntry, cpqSiFruAssemblyNumber=cpqSiFruAssemblyNumber, cpqSiCorrMemErrStatusOk=cpqSiCorrMemErrStatusOk, cpqSiMemModuleCellStatus=cpqSiMemModuleCellStatus, cpqSiMonitorConditionDegraded=cpqSiMonitorConditionDegraded, cpqSiVideoMaxRefreshRate=cpqSiVideoMaxRefreshRate, cpqSiFirmwareCfgTable=cpqSiFirmwareCfgTable, cpqSiSysBatteryCondition=cpqSiSysBatteryCondition, cpqSiHotPlugSlotHwLocation=cpqSiHotPlugSlotHwLocation, cpqSiPowerMgmtStatus=cpqSiPowerMgmtStatus, cpqSiMonitorOperationalCondition=cpqSiMonitorOperationalCondition, cpqSiSysBatteryFirmwareRevision=cpqSiSysBatteryFirmwareRevision, cpqSiServerBladeHeight=cpqSiServerBladeHeight, cpqSiHoodRemovedTime=cpqSiHoodRemovedTime, cpqSiFruSubAssemblyNumber=cpqSiFruSubAssemblyNumber, cpqSiFirmwareLocation=cpqSiFirmwareLocation, cpqSiFruScanRev=cpqSiFruScanRev, cpqSiVirtualSystemSerialNumber=cpqSiVirtualSystemSerialNumber, cpqSiFirmwareRevDesc=cpqSiFirmwareRevDesc, cpqSiSysBatteryHwLocation=cpqSiSysBatteryHwLocation, cpqSiFru=cpqSiFru, cpqSiMibRevMinor=cpqSiMibRevMinor, cpqSiSerialPortBControl=cpqSiSerialPortBControl, cpqSiMemConfigChangeData=cpqSiMemConfigChangeData, cpqSiSystemCpuId=cpqSiSystemCpuId, cpqSiOsCommonModuleTable=cpqSiOsCommonModuleTable, cpqSiFruDiagStatus=cpqSiFruDiagStatus, cpqSiProcMicroPatchId=cpqSiProcMicroPatchId, cpqSiMemModulePartNo=cpqSiMemModulePartNo, cpqSiSysSerialNum=cpqSiSysSerialNum, cpqSiMemErrorIndex=cpqSiMemErrorIndex, cpqSiSysBatteryIndex=cpqSiSysBatteryIndex, cpqSiVirtualSystemIndex=cpqSiVirtualSystemIndex, cpqSiProcMicroPatchEntry=cpqSiProcMicroPatchEntry, cpqSiHotPlugSlotBoardPresent=cpqSiHotPlugSlotBoardPresent, cpqSiMibRevMajor=cpqSiMibRevMajor, cpqSiSysBatteryStatus=cpqSiSysBatteryStatus, cpqSiReboot=cpqSiReboot, cpqSiSysBatteryManufacturer=cpqSiSysBatteryManufacturer, cpqSiDockingStationModel=cpqSiDockingStationModel, cpqSiServerBladeEnclosureBayNumber=cpqSiServerBladeEnclosureBayNumber, cpqSiHotPlugSlotChassis=cpqSiHotPlugSlotChassis, cpqSiQuickTestRomDate=cpqSiQuickTestRomDate, cpqSiFirmwareCfgName=cpqSiFirmwareCfgName, cpqSiMemModuleTable=cpqSiMemModuleTable, cpqSiRackEnclosure=cpqSiRackEnclosure, cpqSiPowerScheme=cpqSiPowerScheme, cpqSiBoardRevSlotIndex=cpqSiBoardRevSlotIndex, cpqSystemInfo=cpqSystemInfo, cpqSiOsCommonModuleVersion=cpqSiOsCommonModuleVersion, cpqSiMonitorSerialNumber=cpqSiMonitorSerialNumber, cpqSiPerfStateIndex=cpqSiPerfStateIndex, cpqSiTPMmodule=cpqSiTPMmodule, cpqSiMonitorHeight=cpqSiMonitorHeight, cpqSiServerBlade=cpqSiServerBlade, cpqSiMonitorThermalCondition=cpqSiMonitorThermalCondition, cpqSiSysBatteryDate=cpqSiSysBatteryDate, cpqSiVirtualSystemUUID=cpqSiVirtualSystemUUID, cpqSiFruClass=cpqSiFruClass, cpqSiAssetTagMaxLength=cpqSiAssetTagMaxLength, cpqSiFruCellTablePtr=cpqSiFruCellTablePtr, cpqSiHotPlugSlotPowerUpFailed=cpqSiHotPlugSlotPowerUpFailed, cpqSiProcMicroPatchFamily=cpqSiProcMicroPatchFamily, cpqSiMemECCCondition=cpqSiMemECCCondition, cpqSiMonitorMaxVertPixel=cpqSiMonitorMaxVertPixel, cpqSiSystemBattery=cpqSiSystemBattery, cpqSiMemModuleDate=cpqSiMemModuleDate, cpqSiFirmwareCfgValue=cpqSiFirmwareCfgValue, cpqSiMonitorTable=cpqSiMonitorTable, cpqSiRebootFlags=cpqSiRebootFlags, cpqSiUSBPortControl=cpqSiUSBPortControl, cpqSiFruPositionNumber=cpqSiFruPositionNumber, cpqSiMonitorWidth=cpqSiMonitorWidth, cpqSiRackServerMasterName=cpqSiRackServerMasterName, cpqSiMemModuleTechnology=cpqSiMemModuleTechnology)
