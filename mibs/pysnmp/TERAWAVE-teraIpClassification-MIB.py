#
# PySNMP MIB module TERAWAVE-teraIpClassification-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-teraIpClassification-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:08:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Unsigned32, ObjectIdentity, IpAddress, NotificationType, enterprises, Bits, Counter64, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, iso, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "ObjectIdentity", "IpAddress", "NotificationType", "enterprises", "Bits", "Counter64", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "iso", "ModuleIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
teraIpClassificationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 23))
teraIpClassTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 23, 1), )
if mibBuilder.loadTexts: teraIpClassTable.setStatus('mandatory')
teraIpClassTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1), ).setIndexNames((0, "TERAWAVE-teraIpClassification-MIB", "teraIpClassField"))
if mibBuilder.loadTexts: teraIpClassTableEntry.setStatus('mandatory')
teraIpClassField = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraIpClassField.setStatus('mandatory')
teraIpClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassType.setStatus('mandatory')
teraIpClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassValue.setStatus('mandatory')
teraIpClassMinRange = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassMinRange.setStatus('mandatory')
teraIpClassMaxRange = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassMaxRange.setStatus('mandatory')
teraIpClassIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassIpAddr.setStatus('mandatory')
teraIpClassMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassMask.setStatus('mandatory')
teraIpClassificationTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 23, 2), )
if mibBuilder.loadTexts: teraIpClassificationTable.setStatus('mandatory')
teraIpClassificationTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 23, 2, 1), ).setIndexNames((0, "TERAWAVE-teraIpClassification-MIB", "teraClassificationRule"), (0, "TERAWAVE-teraIpClassification-MIB", "teraIpClassField"))
if mibBuilder.loadTexts: teraIpClassificationTableEntry.setStatus('mandatory')
teraClassificationRule = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraClassificationRule.setStatus('mandatory')
teraIpClassificationField = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 23, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraIpClassificationField.setStatus('mandatory')
mibBuilder.exportSymbols("TERAWAVE-teraIpClassification-MIB", teraIpClassMaxRange=teraIpClassMaxRange, teraIpClassIpAddr=teraIpClassIpAddr, teraIpClassMask=teraIpClassMask, teraIpClassTable=teraIpClassTable, teraIpClassificationTableEntry=teraIpClassificationTableEntry, teraIpClassType=teraIpClassType, teraIpClassificationField=teraIpClassificationField, teraIpClassTableEntry=teraIpClassTableEntry, teraIpClassField=teraIpClassField, teraIpClassificationGroup=teraIpClassificationGroup, teraClassificationRule=teraClassificationRule, terawave=terawave, teraIpClassValue=teraIpClassValue, teraIpClassificationTable=teraIpClassificationTable, teraIpClassMinRange=teraIpClassMinRange)
