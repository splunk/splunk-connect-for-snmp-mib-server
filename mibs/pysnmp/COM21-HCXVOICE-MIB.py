#
# PySNMP MIB module COM21-HCXVOICE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-HCXVOICE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:10:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
com21, com21Hcx = mibBuilder.importSymbols("COM21-HCX-MIB", "com21", "com21Hcx")
hcxAlmSeverity, hcxEventLogTime = mibBuilder.importSymbols("COM21-HCXALM-MIB", "hcxAlmSeverity", "hcxEventLogTime")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, IpAddress, Counter64, MibIdentifier, Gauge32, NotificationType, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, TimeTicks, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Counter64", "MibIdentifier", "Gauge32", "NotificationType", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "TimeTicks", "iso", "Counter32")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
com21HcxVoice = ModuleIdentity((1, 3, 6, 1, 4, 1, 1141, 2, 100))
if mibBuilder.loadTexts: com21HcxVoice.setLastUpdated('9701080000Z')
if mibBuilder.loadTexts: com21HcxVoice.setOrganization('Com21, Inc.')
com21HcxVoiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 101))
com21HcxVpnRxGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 102))
com21HcxVpnRxStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 103))
com21HcxStuVoiceChannelGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 104))
com21HcxStuVoiceCallStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 105))
class PrimServiceState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("is", 1), ("oos", 2))

class Com21RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("active", 1), ("create", 2), ("destroy", 3), ("deactive", 4))

hcxConfiguredVoiceChannels = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 101, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxConfiguredVoiceChannels.setStatus('current')
hcxActiveVoiceChannels = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 101, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxActiveVoiceChannels.setStatus('current')
hcxVoiceChannelMode = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 101, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aLaw", 1), ("muLaw", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVoiceChannelMode.setStatus('current')
hcxVoiceOAMEnable = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 101, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVoiceOAMEnable.setStatus('current')
hcxVoiceFEndEchoCancEnable = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 101, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVoiceFEndEchoCancEnable.setStatus('current')
hcxVoiceRTTDelay = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 101, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVoiceRTTDelay.setStatus('current')
com21HcxVpnRxTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 102, 1), )
if mibBuilder.loadTexts: com21HcxVpnRxTable.setStatus('current')
com21HcxVpnRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 102, 1, 1), ).setIndexNames((0, "COM21-HCXVOICE-MIB", "hcxVpnRxNum"), (0, "COM21-HCXVOICE-MIB", "hcxVpnRxEntryId"))
if mibBuilder.loadTexts: com21HcxVpnRxEntry.setStatus('current')
hcxVpnRxNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 102, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxNum.setStatus('current')
hcxVpnRxEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 102, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxEntryId.setStatus('current')
hcxVpnRxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 102, 1, 1, 3), Com21RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcxVpnRxRowStatus.setStatus('current')
hcxVpnRxMaxActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 102, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVpnRxMaxActiveCalls.setStatus('current')
com21HcxVpnRxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1), )
if mibBuilder.loadTexts: com21HcxVpnRxStatsTable.setStatus('current')
com21HcxVpnRxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1), ).setIndexNames((0, "COM21-HCXVOICE-MIB", "hcxVpnRxStatsNum"), (0, "COM21-HCXVOICE-MIB", "hcxVpnRxStatsEntryId"))
if mibBuilder.loadTexts: com21HcxVpnRxStatsEntry.setStatus('current')
hcxVpnRxStatsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxStatsNum.setStatus('current')
hcxVpnRxStatsEntryId = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxStatsEntryId.setStatus('current')
hcxVpnRxStatsCurrCallsAllwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxStatsCurrCallsAllwd.setStatus('current')
hcxVpnRxStatsCurrCallsBlkd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxStatsCurrCallsBlkd.setStatus('current')
hcxVpnRxStatsPrevCallsAllwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxStatsPrevCallsAllwd.setStatus('current')
hcxVpnRxStatsPrevCallsBlkd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxVpnRxStatsPrevCallsBlkd.setStatus('current')
hcxVpnRxStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 103, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxVpnRxStatsClear.setStatus('current')
com21HcxStuVoiceChannelTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1), )
if mibBuilder.loadTexts: com21HcxStuVoiceChannelTable.setStatus('current')
com21HcxStuVoiceChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1), ).setIndexNames((0, "COM21-HCXVOICE-MIB", "hcxStuVoiceChannelMacAddr"), (0, "COM21-HCXVOICE-MIB", "hcxStuVoiceChannelNum"))
if mibBuilder.loadTexts: com21HcxStuVoiceChannelEntry.setStatus('current')
hcxStuVoiceChannelMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceChannelMacAddr.setStatus('current')
hcxStuVoiceChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceChannelNum.setStatus('current')
hcxStuVoiceChannelVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuVoiceChannelVpi.setStatus('current')
hcxStuVoiceChannelVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuVoiceChannelVci.setStatus('current')
hcxStuVoiceChannelPriStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 5), Com21RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcxStuVoiceChannelPriStatus.setStatus('current')
hcxStuVoiceChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voiceChanIdle", 1), ("voiceChanActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceChannelState.setStatus('current')
hcxStuVoiceChannelExtLpBk = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 104, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuVoiceChannelExtLpBk.setStatus('current')
com21HcxStuVoiceCallStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1), )
if mibBuilder.loadTexts: com21HcxStuVoiceCallStatsTable.setStatus('current')
com21HcxStuVoiceCallStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1), ).setIndexNames((0, "COM21-HCXVOICE-MIB", "hcxStuVoiceCallStatsMacAddr"), (0, "COM21-HCXVOICE-MIB", "hcxStuVoiceCallStatsNum"))
if mibBuilder.loadTexts: com21HcxStuVoiceCallStatsEntry.setStatus('current')
hcxStuVoiceCallStatsMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallStatsMacAddr.setStatus('current')
hcxStuVoiceCallStatsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallStatsNum.setStatus('current')
hcxStuVoiceCallCurrInCallsAllwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallCurrInCallsAllwd.setStatus('current')
hcxStuVoiceCallCurrOutCallsAllwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallCurrOutCallsAllwd.setStatus('current')
hcxStuVoiceCallCurrInCallsBlkd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallCurrInCallsBlkd.setStatus('current')
hcxStuVoiceCallCurrOutCallsBlkd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallCurrOutCallsBlkd.setStatus('current')
hcxStuVoiceCallPrevInCallsAllwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallPrevInCallsAllwd.setStatus('current')
hcxStuVoiceCallPrevOutCallsAllwd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallPrevOutCallsAllwd.setStatus('current')
hcxStuVoiceCallPrevInCallsBlkd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallPrevInCallsBlkd.setStatus('current')
hcxStuVoiceCallPrevOutCallsBlkd = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxStuVoiceCallPrevOutCallsBlkd.setStatus('current')
hcxStuVoiceCallStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 105, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxStuVoiceCallStatsClear.setStatus('current')
mibBuilder.exportSymbols("COM21-HCXVOICE-MIB", hcxVpnRxStatsPrevCallsAllwd=hcxVpnRxStatsPrevCallsAllwd, com21HcxStuVoiceCallStatsEntry=com21HcxStuVoiceCallStatsEntry, hcxStuVoiceCallPrevInCallsBlkd=hcxStuVoiceCallPrevInCallsBlkd, PrimServiceState=PrimServiceState, com21HcxStuVoiceChannelTable=com21HcxStuVoiceChannelTable, hcxStuVoiceChannelState=hcxStuVoiceChannelState, com21HcxVpnRxGroup=com21HcxVpnRxGroup, com21HcxVpnRxEntry=com21HcxVpnRxEntry, com21HcxVpnRxStatsTable=com21HcxVpnRxStatsTable, com21HcxVpnRxTable=com21HcxVpnRxTable, hcxStuVoiceChannelNum=hcxStuVoiceChannelNum, hcxStuVoiceCallCurrOutCallsAllwd=hcxStuVoiceCallCurrOutCallsAllwd, hcxStuVoiceCallPrevInCallsAllwd=hcxStuVoiceCallPrevInCallsAllwd, hcxVoiceOAMEnable=hcxVoiceOAMEnable, com21HcxVoiceGroup=com21HcxVoiceGroup, hcxConfiguredVoiceChannels=hcxConfiguredVoiceChannels, com21HcxStuVoiceChannelEntry=com21HcxStuVoiceChannelEntry, com21HcxStuVoiceChannelGroup=com21HcxStuVoiceChannelGroup, com21HcxStuVoiceCallStatsTable=com21HcxStuVoiceCallStatsTable, hcxVpnRxNum=hcxVpnRxNum, hcxVpnRxStatsClear=hcxVpnRxStatsClear, hcxStuVoiceChannelPriStatus=hcxStuVoiceChannelPriStatus, hcxStuVoiceCallCurrOutCallsBlkd=hcxStuVoiceCallCurrOutCallsBlkd, com21HcxVpnRxStatsEntry=com21HcxVpnRxStatsEntry, hcxStuVoiceCallCurrInCallsAllwd=hcxStuVoiceCallCurrInCallsAllwd, hcxVpnRxStatsNum=hcxVpnRxStatsNum, hcxVpnRxEntryId=hcxVpnRxEntryId, hcxStuVoiceChannelVpi=hcxStuVoiceChannelVpi, hcxVpnRxStatsPrevCallsBlkd=hcxVpnRxStatsPrevCallsBlkd, com21HcxVpnRxStatsGroup=com21HcxVpnRxStatsGroup, hcxVpnRxRowStatus=hcxVpnRxRowStatus, hcxVpnRxStatsEntryId=hcxVpnRxStatsEntryId, hcxStuVoiceCallStatsMacAddr=hcxStuVoiceCallStatsMacAddr, hcxStuVoiceCallStatsClear=hcxStuVoiceCallStatsClear, hcxStuVoiceCallPrevOutCallsBlkd=hcxStuVoiceCallPrevOutCallsBlkd, hcxStuVoiceChannelVci=hcxStuVoiceChannelVci, hcxStuVoiceChannelMacAddr=hcxStuVoiceChannelMacAddr, Com21RowStatus=Com21RowStatus, hcxVpnRxStatsCurrCallsBlkd=hcxVpnRxStatsCurrCallsBlkd, com21HcxVoice=com21HcxVoice, com21HcxStuVoiceCallStatsGroup=com21HcxStuVoiceCallStatsGroup, hcxVpnRxMaxActiveCalls=hcxVpnRxMaxActiveCalls, hcxVpnRxStatsCurrCallsAllwd=hcxVpnRxStatsCurrCallsAllwd, hcxStuVoiceCallStatsNum=hcxStuVoiceCallStatsNum, hcxActiveVoiceChannels=hcxActiveVoiceChannels, hcxVoiceFEndEchoCancEnable=hcxVoiceFEndEchoCancEnable, hcxVoiceRTTDelay=hcxVoiceRTTDelay, PYSNMP_MODULE_ID=com21HcxVoice, hcxVoiceChannelMode=hcxVoiceChannelMode, hcxStuVoiceCallPrevOutCallsAllwd=hcxStuVoiceCallPrevOutCallsAllwd, hcxStuVoiceCallCurrInCallsBlkd=hcxStuVoiceCallCurrInCallsBlkd, hcxStuVoiceChannelExtLpBk=hcxStuVoiceChannelExtLpBk)
