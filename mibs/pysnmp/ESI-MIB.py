#
# PySNMP MIB module ESI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ESI-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:52:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, NotificationType, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Counter32, ObjectIdentity, Unsigned32, MibIdentifier, enterprises, Bits, Gauge32, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Counter32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "enterprises", "Bits", "Gauge32", "TimeTicks", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
esi = MibIdentifier((1, 3, 6, 1, 4, 1, 683))
general = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 1))
commands = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 2))
esiSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 3))
esiSNMPCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 3, 2))
driver = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 4))
tokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 5))
printServers = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6))
psGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 1))
psOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 2))
psProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3))
genProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 1, 15))
outputCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 2, 2))
outputConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 2, 3))
outputJobLog = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 2, 6))
trCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 5, 2))
trConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 5, 3))
tcpip = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 1))
netware = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 2))
vines = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 3))
lanManager = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 4))
eTalk = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 5))
tcpipCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 3))
tcpipConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4))
tcpipStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 5))
nwCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 3))
nwConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4))
nwStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 5))
bvCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 3))
bvConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 4))
bvStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5))
eTalkCommands = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 3))
eTalkConfigure = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4))
eTalkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 5))
genGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genGroupVersion.setStatus('mandatory')
genMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genMIBVersion.setStatus('mandatory')
genProductName = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProductName.setStatus('mandatory')
genProductNumber = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProductNumber.setStatus('mandatory')
genSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genSerialNumber.setStatus('mandatory')
genHWAddress = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: genHWAddress.setStatus('mandatory')
genCableType = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tenbase2", 1), ("tenbaseT", 2), ("aui", 3), ("utp", 4), ("stp", 5), ("fiber100fx", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCableType.setStatus('mandatory')
genDateCode = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genDateCode.setStatus('mandatory')
genVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genVersion.setStatus('mandatory')
genConfigurationDirty = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genConfigurationDirty.setStatus('mandatory')
genCompanyName = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCompanyName.setStatus('mandatory')
genCompanyLoc = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCompanyLoc.setStatus('mandatory')
genCompanyPhone = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCompanyPhone.setStatus('mandatory')
genCompanyTechSupport = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genCompanyTechSupport.setStatus('mandatory')
genNumProtocols = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genNumProtocols.setStatus('mandatory')
genProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 683, 1, 15, 2), )
if mibBuilder.loadTexts: genProtocolTable.setStatus('mandatory')
genProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 1, 15, 2, 1), ).setIndexNames((0, "ESI-MIB", "genProtocolIndex"))
if mibBuilder.loadTexts: genProtocolEntry.setStatus('mandatory')
genProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 1, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProtocolIndex.setStatus('mandatory')
genProtocolDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 1, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProtocolDescr.setStatus('mandatory')
genProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 1, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tcp-ip", 1), ("netware", 2), ("vines", 3), ("lanmanger", 4), ("ethertalk", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genProtocolID.setStatus('mandatory')
genSysUpTimeString = MibScalar((1, 3, 6, 1, 4, 1, 683, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: genSysUpTimeString.setStatus('mandatory')
cmdGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdGroupVersion.setStatus('mandatory')
cmdReset = MibScalar((1, 3, 6, 1, 4, 1, 683, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdReset.setStatus('optional')
cmdPrintConfig = MibScalar((1, 3, 6, 1, 4, 1, 683, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdPrintConfig.setStatus('optional')
cmdRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 683, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdRestoreDefaults.setStatus('optional')
snmpGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpGroupVersion.setStatus('mandatory')
snmpRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 683, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpRestoreDefaults.setStatus('optional')
snmpGetCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 683, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpGetCommunityName.setStatus('optional')
snmpSetCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 683, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSetCommunityName.setStatus('optional')
snmpTrapCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 683, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunityName.setStatus('optional')
driverGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverGroupVersion.setStatus('mandatory')
driverRXPackets = MibScalar((1, 3, 6, 1, 4, 1, 683, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverRXPackets.setStatus('mandatory')
driverTXPackets = MibScalar((1, 3, 6, 1, 4, 1, 683, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverTXPackets.setStatus('mandatory')
driverRXPacketsUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 683, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverRXPacketsUnavailable.setStatus('mandatory')
driverRXPacketErrors = MibScalar((1, 3, 6, 1, 4, 1, 683, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverRXPacketErrors.setStatus('mandatory')
driverTXPacketErrors = MibScalar((1, 3, 6, 1, 4, 1, 683, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverTXPacketErrors.setStatus('mandatory')
driverTXPacketRetries = MibScalar((1, 3, 6, 1, 4, 1, 683, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverTXPacketRetries.setStatus('mandatory')
driverChecksumErrors = MibScalar((1, 3, 6, 1, 4, 1, 683, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverChecksumErrors.setStatus('mandatory')
trGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trGroupVersion.setStatus('mandatory')
trRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 683, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trRestoreDefaults.setStatus('optional')
trPriority = MibScalar((1, 3, 6, 1, 4, 1, 683, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trPriority.setStatus('optional')
trEarlyTokenRelease = MibScalar((1, 3, 6, 1, 4, 1, 683, 5, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trEarlyTokenRelease.setStatus('optional')
trPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 683, 5, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one-k", 1), ("two-k", 2), ("four-k", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trPacketSize.setStatus('optional')
trRouting = MibScalar((1, 3, 6, 1, 4, 1, 683, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("all-None", 2), ("single-All", 3), ("single-None", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trRouting.setStatus('optional')
trLocallyAdminAddr = MibScalar((1, 3, 6, 1, 4, 1, 683, 5, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trLocallyAdminAddr.setStatus('optional')
psGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psGroupVersion.setStatus('mandatory')
psJetAdminEnabled = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psJetAdminEnabled.setStatus('mandatory')
psVerifyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("getvalue", 0), ("serial-configuration", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psVerifyConfiguration.setStatus('optional')
outputGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputGroupVersion.setStatus('mandatory')
outputRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputRestoreDefaults.setStatus('mandatory')
outputCommandsTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 2, 2, 2), )
if mibBuilder.loadTexts: outputCommandsTable.setStatus('mandatory')
outputCommandsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 2, 2, 2, 1), ).setIndexNames((0, "ESI-MIB", "outputIndex"))
if mibBuilder.loadTexts: outputCommandsEntry.setStatus('mandatory')
outputCancelCurrentJob = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputCancelCurrentJob.setStatus('optional')
outputNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputNumPorts.setStatus('mandatory')
outputTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2), )
if mibBuilder.loadTexts: outputTable.setStatus('mandatory')
outputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1), ).setIndexNames((0, "ESI-MIB", "outputIndex"))
if mibBuilder.loadTexts: outputEntry.setStatus('mandatory')
outputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputIndex.setStatus('mandatory')
outputName = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputName.setStatus('mandatory')
outputStatusString = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputStatusString.setStatus('mandatory')
outputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on-Line", 1), ("off-Line", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputStatus.setStatus('mandatory')
outputExtendedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 15))).clone(namedValues=NamedValues(("none", 1), ("no-Printer-Attached", 2), ("toner-Low", 3), ("paper-Out", 4), ("paper-Jam", 5), ("door-Open", 6), ("printer-Error", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputExtendedStatus.setStatus('mandatory')
outputPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hp-III", 1), ("hp-IIISi", 2), ("ibm", 3), ("no-Specific-Printer", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputPrinter.setStatus('optional')
outputLanguageSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("pcl", 2), ("postScript", 3), ("als", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputLanguageSwitching.setStatus('optional')
outputConfigLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("text", 1), ("pcl", 2), ("postScript", 3), ("off", 4), ("epl-zpl", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputConfigLanguage.setStatus('mandatory')
outputPCLString = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputPCLString.setStatus('optional')
outputPSString = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputPSString.setStatus('optional')
outputCascaded = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputCascaded.setStatus('optional')
outputSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32758, 32759, 32760, 32761, 32762, 32763, 32764, 32765, 32766, 32767))).clone(namedValues=NamedValues(("serial-infrared", 32758), ("serial-bidirectional", 32759), ("serial-unidirectional", 32760), ("serial-input", 32761), ("parallel-compatibility-no-bidi", 32762), ("ieee-1284-std-nibble-mode", 32763), ("z-Link", 32764), ("internal", 32765), ("ieee-1284-ecp-or-fast-nibble-mode", 32766), ("extendedLink", 32767)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputSetting.setStatus('mandatory')
outputOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("no-Owner", 1), ("tcpip", 2), ("netware", 3), ("vines", 4), ("lanManager", 5), ("etherTalk", 6), ("config-Page", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputOwner.setStatus('mandatory')
outputBIDIStatusEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputBIDIStatusEnabled.setStatus('optional')
outputPrinterModel = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputPrinterModel.setStatus('optional')
outputPrinterDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputPrinterDisplay.setStatus('optional')
outputCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824))).clone(namedValues=NamedValues(("serial-Uni-Baud-9600", 1), ("serial-Uni-Baud-19200", 2), ("serial-Uni-Baud-38400", 4), ("serial-Uni-Baud-57600", 8), ("serial-Uni-Baud-115200", 16), ("serial-bidi-Baud-9600", 32), ("serial-bidi-Baud-19200", 64), ("serial-bidi-Baud-38400", 128), ("serial-bidi-Baud-57600", 256), ("zpl-epl-capable", 262144), ("serial-irin", 524288), ("serial-in", 1048576), ("serial-config-settings", 2097152), ("parallel-compatibility-no-bidi", 4194304), ("ieee-1284-std-nibble-mode", 8388608), ("z-link", 16777216), ("bidirectional", 33554432), ("serial-Software-Handshake", 67108864), ("serial-Output", 134217728), ("extendedLink", 268435456), ("internal", 536870912), ("ieee-1284-ecp-or-fast-nibble-mode", 1073741824)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputCapabilities.setStatus('mandatory')
outputHandshake = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-Supported", 1), ("hardware-Software", 2), ("hardware", 3), ("software", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputHandshake.setStatus('optional')
outputDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 255))).clone(namedValues=NamedValues(("seven-bits", 7), ("eight-bits", 8), ("not-Supported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputDataBits.setStatus('optional')
outputStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("one-bit", 1), ("two-bits", 2), ("not-Supported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputStopBits.setStatus('optional')
outputParity = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("not-Supported", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputParity.setStatus('optional')
outputBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("unidirectional-9600", 1), ("unidirectional-19200", 2), ("unidirectional-38400", 3), ("unidirectional-57600", 4), ("unidirectional-115200", 5), ("bidirectional-9600", 6), ("bidirectional-19200", 7), ("bidirectional-38400", 8), ("bidirectional-57600", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputBaudRate.setStatus('optional')
outputProtocolManager = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("protocol-none", 0), ("protocol-compatibility", 1), ("protocol-1284-4", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputProtocolManager.setStatus('optional')
outputDisplayMask = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputDisplayMask.setStatus('mandatory')
outputAvailableTrapsMask = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputAvailableTrapsMask.setStatus('mandatory')
outputNumLogEntries = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputNumLogEntries.setStatus('mandatory')
outputJobLogTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 2, 6, 2), )
if mibBuilder.loadTexts: outputJobLogTable.setStatus('mandatory')
outputJobLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 2, 6, 2, 1), ).setIndexNames((0, "ESI-MIB", "outputIndex"))
if mibBuilder.loadTexts: outputJobLogEntry.setStatus('mandatory')
outputJobLogInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 6, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputJobLogInformation.setStatus('mandatory')
outputJobLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputJobLogTime.setStatus('mandatory')
outputTotalJobTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 2, 6, 3), )
if mibBuilder.loadTexts: outputTotalJobTable.setStatus('mandatory')
outputTotalJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 2, 6, 3, 1), ).setIndexNames((0, "ESI-MIB", "outputTotalJobIndex"))
if mibBuilder.loadTexts: outputTotalJobEntry.setStatus('mandatory')
outputTotalJobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTotalJobIndex.setStatus('mandatory')
outputTotalJobsLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 2, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTotalJobsLogged.setStatus('mandatory')
tcpipGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipGroupVersion.setStatus('mandatory')
tcpipEnabled = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipEnabled.setStatus('optional')
tcpipRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipRestoreDefaults.setStatus('optional')
tcpipFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipFirmwareUpgrade.setStatus('optional')
tcpipIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipIPAddress.setStatus('optional')
tcpipDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipDefaultGateway.setStatus('optional')
tcpipSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSubnetMask.setStatus('optional')
tcpipUsingNetProtocols = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipUsingNetProtocols.setStatus('optional')
tcpipBootProtocolsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipBootProtocolsEnabled.setStatus('optional')
tcpipIPAddressSource = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("permanent", 1), ("default", 2), ("rarp", 3), ("bootp", 4), ("dhcp", 5), ("glean", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipIPAddressSource.setStatus('optional')
tcpipIPAddressServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipIPAddressServerAddress.setStatus('optional')
tcpipTimeoutChecking = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipTimeoutChecking.setStatus('optional')
tcpipNumTraps = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipNumTraps.setStatus('mandatory')
tcpipTrapTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 10), )
if mibBuilder.loadTexts: tcpipTrapTable.setStatus('mandatory')
tcpipTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 10, 1), ).setIndexNames((0, "ESI-MIB", "tcpipTrapIndex"))
if mibBuilder.loadTexts: tcpipTrapEntry.setStatus('mandatory')
tcpipTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipTrapIndex.setStatus('mandatory')
tcpipTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipTrapDestination.setStatus('optional')
tcpipProtocolTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipProtocolTrapMask.setStatus('optional')
tcpipPrinterTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPrinterTrapMask.setStatus('optional')
tcpipOutputTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipOutputTrapMask.setStatus('optional')
tcpipBanners = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipBanners.setStatus('optional')
tcpipWinsAddress = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWinsAddress.setStatus('optional')
tcpipWinsAddressSource = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcp", 1), ("permanent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWinsAddressSource.setStatus('optional')
tcpipConfigPassword = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipConfigPassword.setStatus('optional')
tcpipTimeoutCheckingValue = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipTimeoutCheckingValue.setStatus('optional')
tcpipArpInterval = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipArpInterval.setStatus('optional')
tcpipRawPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipRawPortNumber.setStatus('optional')
tcpipNumSecurity = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipNumSecurity.setStatus('mandatory')
tcpipSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 19), )
if mibBuilder.loadTexts: tcpipSecurityTable.setStatus('mandatory')
tcpipSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 19, 1), ).setIndexNames((0, "ESI-MIB", "tcpipSecurityIndex"))
if mibBuilder.loadTexts: tcpipSecurityEntry.setStatus('mandatory')
tcpipSecurityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipSecurityIndex.setStatus('mandatory')
tcpipSecureStartIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 19, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSecureStartIPAddress.setStatus('optional')
tcpipSecureEndIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 19, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSecureEndIPAddress.setStatus('optional')
tcpipSecurePrinterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 19, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSecurePrinterMask.setStatus('optional')
tcpipSecureAdminEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSecureAdminEnabled.setStatus('optional')
tcpipLowBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipLowBandwidth.setStatus('optional')
tcpipNumLogicalPrinters = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipNumLogicalPrinters.setStatus('mandatory')
tcpipMLPTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 22), )
if mibBuilder.loadTexts: tcpipMLPTable.setStatus('mandatory')
tcpipMLPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 22, 1), ).setIndexNames((0, "ESI-MIB", "tcpipMLPIndex"))
if mibBuilder.loadTexts: tcpipMLPEntry.setStatus('mandatory')
tcpipMLPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipMLPIndex.setStatus('optional')
tcpipMLPName = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 22, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPName.setStatus('optional')
tcpipMLPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 22, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPPort.setStatus('optional')
tcpipMLPTCPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 22, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPTCPPort.setStatus('optional')
tcpipMLPPreString = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 22, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPPreString.setStatus('optional')
tcpipMLPPostString = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 22, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPPostString.setStatus('optional')
tcpipMLPDeleteBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 22, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipMLPDeleteBytes.setStatus('optional')
tcpipSmtpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpServerAddr.setStatus('optional')
tcpipNumSmtpDestinations = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipNumSmtpDestinations.setStatus('mandatory')
tcpipSmtpTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 25), )
if mibBuilder.loadTexts: tcpipSmtpTable.setStatus('mandatory')
tcpipSmtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 25, 1), ).setIndexNames((0, "ESI-MIB", "tcpipSmtpIndex"))
if mibBuilder.loadTexts: tcpipSmtpEntry.setStatus('mandatory')
tcpipSmtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipSmtpIndex.setStatus('mandatory')
tcpipSmtpEmailAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 25, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpEmailAddr.setStatus('optional')
tcpipSmtpProtocolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 25, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpProtocolMask.setStatus('optional')
tcpipSmtpPrinterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 25, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpPrinterMask.setStatus('optional')
tcpipSmtpOutputMask = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 25, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipSmtpOutputMask.setStatus('optional')
tcpipWebAdminName = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebAdminName.setStatus('optional')
tcpipWebAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebAdminPassword.setStatus('optional')
tcpipWebUserName = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebUserName.setStatus('optional')
tcpipWebUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebUserPassword.setStatus('optional')
tcpipWebHtttpPort = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebHtttpPort.setStatus('optional')
tcpipWebFaqURL = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebFaqURL.setStatus('optional')
tcpipWebUpdateURL = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebUpdateURL.setStatus('optional')
tcpipWebCustomLinkName = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebCustomLinkName.setStatus('optional')
tcpipWebCustomLinkURL = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipWebCustomLinkURL.setStatus('optional')
tcpipPOP3ServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 35), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPOP3ServerAddress.setStatus('optional')
tcpipPOP3PollInterval = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPOP3PollInterval.setStatus('mandatory')
tcpipPOP3UserName = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPOP3UserName.setStatus('optional')
tcpipPOP3Password = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipPOP3Password.setStatus('optional')
tcpipDomainName = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 4, 39), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpipDomainName.setStatus('optional')
tcpipError = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipError.setStatus('optional')
tcpipDisplayMask = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpipDisplayMask.setStatus('mandatory')
nwGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwGroupVersion.setStatus('mandatory')
nwEnabled = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwEnabled.setStatus('optional')
nwRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwRestoreDefaults.setStatus('optional')
nwFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwFirmwareUpgrade.setStatus('optional')
nwFrameFormat = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("ethernet-II", 2), ("ethernet-802-3", 3), ("ethernet-802-2", 4), ("ethernet-Snap", 5), ("token-Ring", 6), ("token-Ring-Snap", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFrameFormat.setStatus('optional')
nwSetFrameFormat = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("auto-Sense", 1), ("forced-Ethernet-II", 2), ("forced-Ethernet-802-3", 3), ("forced-Ethernet-802-2", 4), ("forced-Ethernet-Snap", 5), ("forced-Token-Ring", 6), ("forced-Token-Ring-Snap", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwSetFrameFormat.setStatus('optional')
nwMode = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("pserver", 2), ("rprinter", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwMode.setStatus('optional')
nwPrintServerName = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPrintServerName.setStatus('optional')
nwPrintServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPrintServerPassword.setStatus('optional')
nwQueueScanTime = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwQueueScanTime.setStatus('optional')
nwNetworkNumber = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNetworkNumber.setStatus('optional')
nwMaxFileServers = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwMaxFileServers.setStatus('optional')
nwFileServerTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 9), )
if mibBuilder.loadTexts: nwFileServerTable.setStatus('optional')
nwFileServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 9, 1), ).setIndexNames((0, "ESI-MIB", "nwFileServerIndex"))
if mibBuilder.loadTexts: nwFileServerEntry.setStatus('optional')
nwFileServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFileServerIndex.setStatus('optional')
nwFileServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwFileServerName.setStatus('optional')
nwFileServerConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 258, 261, 276, 512, 515, 768, 769, 32767))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("startupInProgress", 3), ("serverReattaching", 4), ("serverNeverAttached", 5), ("pse-UNKNOWN-FILE-SERVER", 258), ("pse-NO-RESPONSE", 261), ("pse-CANT-LOGIN", 276), ("pse-NO-SUCH-QUEUE", 512), ("pse-UNABLE-TO-ATTACH-TO-QUEUE", 515), ("bad-CONNECTION", 768), ("bad-SERVICE-CONNECTION", 769), ("other", 32767)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwFileServerConnectionStatus.setStatus('optional')
nwPortTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 10), )
if mibBuilder.loadTexts: nwPortTable.setStatus('optional')
nwPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 10, 1), ).setIndexNames((0, "ESI-MIB", "nwPortIndex"))
if mibBuilder.loadTexts: nwPortEntry.setStatus('optional')
nwPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPortIndex.setStatus('optional')
nwPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwPortStatus.setStatus('optional')
nwPortPrinterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortPrinterNumber.setStatus('optional')
nwPortFontDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled-No-Power-Sense", 2), ("enabled-Power-Sense", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortFontDownload.setStatus('optional')
nwPortPCLQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortPCLQueue.setStatus('optional')
nwPortPSQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortPSQueue.setStatus('optional')
nwPortFormsOn = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortFormsOn.setStatus('optional')
nwPortFormNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortFormNumber.setStatus('optional')
nwPortNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPortNotification.setStatus('optional')
nwNumTraps = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwNumTraps.setStatus('mandatory')
nwTrapTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 12), )
if mibBuilder.loadTexts: nwTrapTable.setStatus('mandatory')
nwTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 12, 1), ).setIndexNames((0, "ESI-MIB", "nwTrapIndex"))
if mibBuilder.loadTexts: nwTrapEntry.setStatus('mandatory')
nwTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwTrapIndex.setStatus('mandatory')
nwTrapDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwTrapDestination.setStatus('optional')
nwTrapDestinationNet = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwTrapDestinationNet.setStatus('mandatory')
nwProtocolTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwProtocolTrapMask.setStatus('optional')
nwPrinterTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwPrinterTrapMask.setStatus('optional')
nwOutputTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwOutputTrapMask.setStatus('optional')
nwNDSPrintServerName = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPrintServerName.setStatus('optional')
nwNDSPreferredDSTree = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPreferredDSTree.setStatus('optional')
nwNDSPreferredDSFileServer = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPreferredDSFileServer.setStatus('optional')
nwNDSPacketCheckSumEnabled = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPacketCheckSumEnabled.setStatus('optional')
nwNDSPacketSignatureLevel = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwNDSPacketSignatureLevel.setStatus('optional')
nwAvailablePrintModes = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwAvailablePrintModes.setStatus('optional')
nwDirectPrintEnabled = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDirectPrintEnabled.setStatus('optional')
nwJAConfig = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwJAConfig.setStatus('optional')
nwDisableSAP = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwDisableSAP.setStatus('optional')
nwError = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwError.setStatus('optional')
nwDisplayMask = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwDisplayMask.setStatus('mandatory')
bvGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvGroupVersion.setStatus('mandatory')
bvEnabled = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvEnabled.setStatus('optional')
bvRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvRestoreDefaults.setStatus('optional')
bvFirmwareUpgrade = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvFirmwareUpgrade.setStatus('optional')
bvSetSequenceRouting = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automatic-Routing", 1), ("force-Sequenced-Routing", 2), ("force-Non-Sequenced-Routing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvSetSequenceRouting.setStatus('optional')
bvDisableVPMan = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvDisableVPMan.setStatus('optional')
bvLoginName = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvLoginName.setStatus('optional')
bvLoginPassword = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvLoginPassword.setStatus('optional')
bvNumberPrintServices = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvNumberPrintServices.setStatus('optional')
bvPrintServiceTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 4, 4), )
if mibBuilder.loadTexts: bvPrintServiceTable.setStatus('optional')
bvPrintServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 4, 4, 1), ).setIndexNames((0, "ESI-MIB", "bvPrintServiceIndex"))
if mibBuilder.loadTexts: bvPrintServiceEntry.setStatus('optional')
bvPrintServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPrintServiceIndex.setStatus('optional')
bvPrintServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvPrintServiceName.setStatus('optional')
bvPrintServiceRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 4, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvPrintServiceRouting.setStatus('optional')
bvPnicDescription = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bvPnicDescription.setStatus('optional')
bvError = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvError.setStatus('optional')
bvRouting = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 32766, 32767))).clone(namedValues=NamedValues(("sequenced-Routing", 1), ("non-Sequenced-Routing", 2), ("unknown-Routing", 32766), ("protocol-Disabled", 32767)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvRouting.setStatus('optional')
bvNumPrintServices = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvNumPrintServices.setStatus('optional')
bvPrintServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 4), )
if mibBuilder.loadTexts: bvPrintServiceStatusTable.setStatus('optional')
bvPrintServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 4, 1), ).setIndexNames((0, "ESI-MIB", "bvPSStatusIndex"))
if mibBuilder.loadTexts: bvPrintServiceStatusEntry.setStatus('optional')
bvPSStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPSStatusIndex.setStatus('optional')
bvPSName = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPSName.setStatus('optional')
bvPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPSStatus.setStatus('optional')
bvPSDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPSDestination.setStatus('optional')
bvPrinterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvPrinterStatus.setStatus('optional')
bvJobActive = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobActive.setStatus('optional')
bvJobSource = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobSource.setStatus('optional')
bvJobTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobTitle.setStatus('optional')
bvJobSize = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobSize.setStatus('optional')
bvJobNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 3, 5, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bvJobNumber.setStatus('optional')
lmGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmGroupVersion.setStatus('mandatory')
lmEnabled = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmEnabled.setStatus('optional')
eTalkGroupVersion = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkGroupVersion.setStatus('mandatory')
eTalkEnabled = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkEnabled.setStatus('optional')
eTalkRestoreDefaults = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkRestoreDefaults.setStatus('optional')
eTalkNetwork = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkNetwork.setStatus('optional')
eTalkNode = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkNode.setStatus('optional')
eTalkNumPorts = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkNumPorts.setStatus('optional')
eTalkPortTable = MibTable((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 4), )
if mibBuilder.loadTexts: eTalkPortTable.setStatus('optional')
eTalkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 4, 1), ).setIndexNames((0, "ESI-MIB", "eTalkPortIndex"))
if mibBuilder.loadTexts: eTalkPortEntry.setStatus('optional')
eTalkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkPortIndex.setStatus('optional')
eTalkPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkPortEnable.setStatus('optional')
eTalkName = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkName.setStatus('optional')
eTalkActiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkActiveName.setStatus('optional')
eTalkType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkType1.setStatus('optional')
eTalkType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkType2.setStatus('optional')
eTalkZone = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eTalkZone.setStatus('optional')
eTalkActiveZone = MibTableColumn((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 4, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkActiveZone.setStatus('optional')
eTalkError = MibScalar((1, 3, 6, 1, 4, 1, 683, 6, 3, 5, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTalkError.setStatus('optional')
trapPrinterOnline = NotificationType((1, 3, 6, 1, 4, 1, 683, 6) + (0,1)).setObjects(("ESI-MIB", "outputIndex"))
trapPrinterOffline = NotificationType((1, 3, 6, 1, 4, 1, 683, 6) + (0,2)).setObjects(("ESI-MIB", "outputIndex"))
trapNoPrinterAttached = NotificationType((1, 3, 6, 1, 4, 1, 683, 6) + (0,3)).setObjects(("ESI-MIB", "outputIndex"))
trapPrinterTonerLow = NotificationType((1, 3, 6, 1, 4, 1, 683, 6) + (0,4)).setObjects(("ESI-MIB", "outputIndex"))
trapPrinterPaperOut = NotificationType((1, 3, 6, 1, 4, 1, 683, 6) + (0,5)).setObjects(("ESI-MIB", "outputIndex"))
trapPrinterPaperJam = NotificationType((1, 3, 6, 1, 4, 1, 683, 6) + (0,6)).setObjects(("ESI-MIB", "outputIndex"))
trapPrinterDoorOpen = NotificationType((1, 3, 6, 1, 4, 1, 683, 6) + (0,7)).setObjects(("ESI-MIB", "outputIndex"))
trapPrinterError = NotificationType((1, 3, 6, 1, 4, 1, 683, 6) + (0,16)).setObjects(("ESI-MIB", "outputIndex"))
mibBuilder.exportSymbols("ESI-MIB", genNumProtocols=genNumProtocols, tcpipSmtpServerAddr=tcpipSmtpServerAddr, outputStopBits=outputStopBits, genSerialNumber=genSerialNumber, tcpipWebUserName=tcpipWebUserName, nwGroupVersion=nwGroupVersion, outputPrinterDisplay=outputPrinterDisplay, cmdRestoreDefaults=cmdRestoreDefaults, tcpipArpInterval=tcpipArpInterval, genSysUpTimeString=genSysUpTimeString, tcpipSecureStartIPAddress=tcpipSecureStartIPAddress, tokenRing=tokenRing, outputConfigure=outputConfigure, outputJobLogInformation=outputJobLogInformation, tcpipConfigPassword=tcpipConfigPassword, tcpipMLPTable=tcpipMLPTable, tcpipSmtpOutputMask=tcpipSmtpOutputMask, driverGroupVersion=driverGroupVersion, tcpipSmtpPrinterMask=tcpipSmtpPrinterMask, trapPrinterTonerLow=trapPrinterTonerLow, lmGroupVersion=lmGroupVersion, tcpipNumSecurity=tcpipNumSecurity, outputTotalJobEntry=outputTotalJobEntry, commands=commands, tcpipSmtpTable=tcpipSmtpTable, snmpGroupVersion=snmpGroupVersion, psOutput=psOutput, tcpipSecureEndIPAddress=tcpipSecureEndIPAddress, tcpipPOP3UserName=tcpipPOP3UserName, genProtocolEntry=genProtocolEntry, tcpipPrinterTrapMask=tcpipPrinterTrapMask, tcpipPOP3Password=tcpipPOP3Password, cmdReset=cmdReset, cmdPrintConfig=cmdPrintConfig, outputPrinter=outputPrinter, trEarlyTokenRelease=trEarlyTokenRelease, nwCommands=nwCommands, tcpipDomainName=tcpipDomainName, nwFirmwareUpgrade=nwFirmwareUpgrade, bvPrintServiceName=bvPrintServiceName, driverTXPacketErrors=driverTXPacketErrors, outputPrinterModel=outputPrinterModel, nwFileServerConnectionStatus=nwFileServerConnectionStatus, nwFileServerIndex=nwFileServerIndex, eTalkPortIndex=eTalkPortIndex, tcpipTrapDestination=tcpipTrapDestination, outputCommandsTable=outputCommandsTable, nwNumTraps=nwNumTraps, genProtocolIndex=genProtocolIndex, nwEnabled=nwEnabled, eTalk=eTalk, nwFileServerTable=nwFileServerTable, bvPrintServiceEntry=bvPrintServiceEntry, nwNDSPacketSignatureLevel=nwNDSPacketSignatureLevel, nwNDSPacketCheckSumEnabled=nwNDSPacketCheckSumEnabled, eTalkEnabled=eTalkEnabled, outputCommands=outputCommands, nwDirectPrintEnabled=nwDirectPrintEnabled, psGroupVersion=psGroupVersion, bvPrintServiceRouting=bvPrintServiceRouting, eTalkActiveName=eTalkActiveName, outputCommandsEntry=outputCommandsEntry, nwTrapEntry=nwTrapEntry, nwNDSPreferredDSFileServer=nwNDSPreferredDSFileServer, tcpipGroupVersion=tcpipGroupVersion, tcpipSecurePrinterMask=tcpipSecurePrinterMask, bvPSName=bvPSName, tcpipWinsAddress=tcpipWinsAddress, eTalkName=eTalkName, tcpipIPAddress=tcpipIPAddress, genCableType=genCableType, nwTrapTable=nwTrapTable, trapPrinterPaperOut=trapPrinterPaperOut, trRestoreDefaults=trRestoreDefaults, tcpipTimeoutCheckingValue=tcpipTimeoutCheckingValue, bvLoginName=bvLoginName, outputGroupVersion=outputGroupVersion, trPriority=trPriority, tcpipMLPName=tcpipMLPName, outputJobLogTable=outputJobLogTable, genCompanyTechSupport=genCompanyTechSupport, tcpipWebHtttpPort=tcpipWebHtttpPort, printServers=printServers, outputDataBits=outputDataBits, nwPrinterTrapMask=nwPrinterTrapMask, genCompanyLoc=genCompanyLoc, eTalkCommands=eTalkCommands, nwAvailablePrintModes=nwAvailablePrintModes, bvFirmwareUpgrade=bvFirmwareUpgrade, bvPrinterStatus=bvPrinterStatus, trapPrinterPaperJam=trapPrinterPaperJam, nwPortPSQueue=nwPortPSQueue, nwNetworkNumber=nwNetworkNumber, nwPortPrinterNumber=nwPortPrinterNumber, outputNumPorts=outputNumPorts, bvPSStatus=bvPSStatus, genCompanyName=genCompanyName, tcpipBanners=tcpipBanners, tcpipSecurityEntry=tcpipSecurityEntry, tcpipMLPTCPPort=tcpipMLPTCPPort, nwProtocolTrapMask=nwProtocolTrapMask, outputTable=outputTable, nwMaxFileServers=nwMaxFileServers, bvPrintServiceIndex=bvPrintServiceIndex, tcpipNumSmtpDestinations=tcpipNumSmtpDestinations, bvJobSource=bvJobSource, tcpip=tcpip, tcpipMLPPreString=tcpipMLPPreString, bvPrintServiceStatusTable=bvPrintServiceStatusTable, eTalkGroupVersion=eTalkGroupVersion, genProductNumber=genProductNumber, outputConfigLanguage=outputConfigLanguage, tcpipWebUpdateURL=tcpipWebUpdateURL, tcpipTrapTable=tcpipTrapTable, driverChecksumErrors=driverChecksumErrors, outputCancelCurrentJob=outputCancelCurrentJob, tcpipSubnetMask=tcpipSubnetMask, outputBIDIStatusEnabled=outputBIDIStatusEnabled, tcpipSmtpProtocolMask=tcpipSmtpProtocolMask, snmpSetCommunityName=snmpSetCommunityName, nwPortFormsOn=nwPortFormsOn, outputTotalJobsLogged=outputTotalJobsLogged, eTalkNumPorts=eTalkNumPorts, nwQueueScanTime=nwQueueScanTime, nwPortFormNumber=nwPortFormNumber, genProductName=genProductName, psJetAdminEnabled=psJetAdminEnabled, tcpipSecureAdminEnabled=tcpipSecureAdminEnabled, nwTrapDestinationNet=nwTrapDestinationNet, tcpipMLPIndex=tcpipMLPIndex, tcpipMLPDeleteBytes=tcpipMLPDeleteBytes, esiSNMPCommands=esiSNMPCommands, driver=driver, bvJobTitle=bvJobTitle, bvSetSequenceRouting=bvSetSequenceRouting, bvStatus=bvStatus, outputDisplayMask=outputDisplayMask, tcpipPOP3PollInterval=tcpipPOP3PollInterval, vines=vines, genGroupVersion=genGroupVersion, outputOwner=outputOwner, nwFileServerName=nwFileServerName, tcpipWinsAddressSource=tcpipWinsAddressSource, bvRestoreDefaults=bvRestoreDefaults, nwPortTable=nwPortTable, trapPrinterOnline=trapPrinterOnline, trGroupVersion=trGroupVersion, tcpipNumLogicalPrinters=tcpipNumLogicalPrinters, tcpipBootProtocolsEnabled=tcpipBootProtocolsEnabled, nwFileServerEntry=nwFileServerEntry, outputAvailableTrapsMask=outputAvailableTrapsMask, trapPrinterDoorOpen=trapPrinterDoorOpen, nwTrapDestination=nwTrapDestination, eTalkError=eTalkError, tcpipSmtpEmailAddr=tcpipSmtpEmailAddr, outputEntry=outputEntry, nwPortStatus=nwPortStatus, outputPSString=outputPSString, snmpRestoreDefaults=snmpRestoreDefaults, outputParity=outputParity, tcpipConfigure=tcpipConfigure, tcpipEnabled=tcpipEnabled, tcpipNumTraps=tcpipNumTraps, outputIndex=outputIndex, nwTrapIndex=nwTrapIndex, bvLoginPassword=bvLoginPassword, eTalkRestoreDefaults=eTalkRestoreDefaults, tcpipTrapIndex=tcpipTrapIndex, nwPortEntry=nwPortEntry, tcpipSmtpIndex=tcpipSmtpIndex, snmpGetCommunityName=snmpGetCommunityName, bvNumPrintServices=bvNumPrintServices, general=general, eTalkType1=eTalkType1, bvPrintServiceStatusEntry=bvPrintServiceStatusEntry, esiSNMP=esiSNMP, tcpipTrapEntry=tcpipTrapEntry, nwPortIndex=nwPortIndex, nwPortNotification=nwPortNotification, genConfigurationDirty=genConfigurationDirty, eTalkPortEnable=eTalkPortEnable, tcpipDefaultGateway=tcpipDefaultGateway, tcpipDisplayMask=tcpipDisplayMask, outputRestoreDefaults=outputRestoreDefaults, bvJobNumber=bvJobNumber, tcpipUsingNetProtocols=tcpipUsingNetProtocols, nwMode=nwMode, bvDisableVPMan=bvDisableVPMan, nwPortFontDownload=nwPortFontDownload, driverTXPackets=driverTXPackets, tcpipMLPEntry=tcpipMLPEntry, tcpipWebFaqURL=tcpipWebFaqURL, tcpipWebAdminPassword=tcpipWebAdminPassword, tcpipSecurityTable=tcpipSecurityTable, eTalkZone=eTalkZone, trLocallyAdminAddr=trLocallyAdminAddr, tcpipCommands=tcpipCommands, tcpipIPAddressSource=tcpipIPAddressSource, nwError=nwError, lmEnabled=lmEnabled, genProtocolTable=genProtocolTable, outputJobLogTime=outputJobLogTime, nwPortPCLQueue=nwPortPCLQueue, outputJobLogEntry=outputJobLogEntry, tcpipTimeoutChecking=tcpipTimeoutChecking, eTalkActiveZone=eTalkActiveZone, eTalkNode=eTalkNode, tcpipSecurityIndex=tcpipSecurityIndex, outputProtocolManager=outputProtocolManager, tcpipProtocolTrapMask=tcpipProtocolTrapMask, tcpipSmtpEntry=tcpipSmtpEntry, outputStatus=outputStatus, driverRXPacketErrors=driverRXPacketErrors, trRouting=trRouting, tcpipStatus=tcpipStatus, cmdGroupVersion=cmdGroupVersion, nwConfigure=nwConfigure, trPacketSize=trPacketSize, tcpipRestoreDefaults=tcpipRestoreDefaults, nwJAConfig=nwJAConfig, eTalkPortTable=eTalkPortTable, nwFrameFormat=nwFrameFormat, psVerifyConfiguration=psVerifyConfiguration, tcpipWebUserPassword=tcpipWebUserPassword, netware=netware, driverTXPacketRetries=driverTXPacketRetries, outputSetting=outputSetting, bvJobActive=bvJobActive, tcpipWebCustomLinkName=tcpipWebCustomLinkName, tcpipMLPPostString=tcpipMLPPostString, lanManager=lanManager, esi=esi, trapPrinterError=trapPrinterError, outputExtendedStatus=outputExtendedStatus, outputBaudRate=outputBaudRate, genCompanyPhone=genCompanyPhone, psGeneral=psGeneral, outputName=outputName, tcpipOutputTrapMask=tcpipOutputTrapMask, trConfigure=trConfigure, bvGroupVersion=bvGroupVersion, tcpipWebAdminName=tcpipWebAdminName, psProtocols=psProtocols, eTalkStatus=eTalkStatus, nwDisplayMask=nwDisplayMask, outputLanguageSwitching=outputLanguageSwitching, nwPrintServerPassword=nwPrintServerPassword, bvEnabled=bvEnabled, bvPSDestination=bvPSDestination, bvError=bvError, eTalkPortEntry=eTalkPortEntry, driverRXPackets=driverRXPackets, trapPrinterOffline=trapPrinterOffline, tcpipIPAddressServerAddress=tcpipIPAddressServerAddress)
mibBuilder.exportSymbols("ESI-MIB", nwRestoreDefaults=nwRestoreDefaults, genProtocolID=genProtocolID, outputPCLString=outputPCLString, eTalkType2=eTalkType2, trCommands=trCommands, tcpipError=tcpipError, outputHandshake=outputHandshake, tcpipPOP3ServerAddress=tcpipPOP3ServerAddress, nwSetFrameFormat=nwSetFrameFormat, outputTotalJobIndex=outputTotalJobIndex, bvRouting=bvRouting, genHWAddress=genHWAddress, outputJobLog=outputJobLog, outputStatusString=outputStatusString, outputTotalJobTable=outputTotalJobTable, trapNoPrinterAttached=trapNoPrinterAttached, outputCascaded=outputCascaded, tcpipMLPPort=tcpipMLPPort, bvConfigure=bvConfigure, bvPSStatusIndex=bvPSStatusIndex, tcpipFirmwareUpgrade=tcpipFirmwareUpgrade, nwNDSPrintServerName=nwNDSPrintServerName, tcpipLowBandwidth=tcpipLowBandwidth, bvJobSize=bvJobSize, nwPrintServerName=nwPrintServerName, driverRXPacketsUnavailable=driverRXPacketsUnavailable, nwNDSPreferredDSTree=nwNDSPreferredDSTree, genMIBVersion=genMIBVersion, genProtocols=genProtocols, genDateCode=genDateCode, snmpTrapCommunityName=snmpTrapCommunityName, outputNumLogEntries=outputNumLogEntries, bvPrintServiceTable=bvPrintServiceTable, genProtocolDescr=genProtocolDescr, bvNumberPrintServices=bvNumberPrintServices, nwDisableSAP=nwDisableSAP, tcpipWebCustomLinkURL=tcpipWebCustomLinkURL, eTalkNetwork=eTalkNetwork, genVersion=genVersion, eTalkConfigure=eTalkConfigure, outputCapabilities=outputCapabilities, bvPnicDescription=bvPnicDescription, tcpipRawPortNumber=tcpipRawPortNumber, nwOutputTrapMask=nwOutputTrapMask, nwStatus=nwStatus, bvCommands=bvCommands)
