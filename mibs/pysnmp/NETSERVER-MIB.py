#
# PySNMP MIB module NETSERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSERVER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:11:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, ModuleIdentity, ObjectIdentity, Counter64, IpAddress, iso, Counter32, Integer32, mib_2, NotificationType, Unsigned32, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "ModuleIdentity", "ObjectIdentity", "Counter64", "IpAddress", "iso", "Counter32", "Integer32", "mib-2", "NotificationType", "Unsigned32", "MibIdentifier", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
auspex = MibIdentifier((1, 3, 6, 1, 4, 1, 80))
netServer = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3))
axProductInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 1))
axNP = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 2))
axFSP = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 3))
axTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 4))
axFP = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 3, 2))
fpHTFS = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3))
axSP = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 3, 3))
spRaid = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 3, 3, 2))
npProtocols = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 2, 3))
axFab = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 3, 4))
fabRaid = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 5))
axProductName = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axProductName.setStatus('mandatory')
axSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSWVersion.setStatus('mandatory')
axNumNPFSP = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNumNPFSP.setStatus('mandatory')
npTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 2, 1), )
if mibBuilder.loadTexts: npTable.setStatus('mandatory')
npEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 2, 1, 1), ).setIndexNames((0, "NETSERVER-MIB", "npIndex"))
if mibBuilder.loadTexts: npEntry.setStatus('mandatory')
npIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIndex.setStatus('mandatory')
npBusyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npBusyCount.setStatus('mandatory')
npIdleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIdleCount.setStatus('mandatory')
npIfTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 2, 2), )
if mibBuilder.loadTexts: npIfTable.setStatus('mandatory')
npIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1), ).setIndexNames((0, "NETSERVER-MIB", "npIndex"), (0, "NETSERVER-MIB", "npIfIndex"))
if mibBuilder.loadTexts: npIfEntry.setStatus('mandatory')
npIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfIndex.setStatus('mandatory')
npIfifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfifIndex.setStatus('mandatory')
npIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfType.setStatus('mandatory')
npIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfSpeed.setStatus('mandatory')
npIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfInOctets.setStatus('mandatory')
npIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfInUcastPkts.setStatus('mandatory')
npIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfInNUcastPkts.setStatus('mandatory')
npIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfInDiscards.setStatus('mandatory')
npIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfInErrors.setStatus('mandatory')
npIfInUnknownProto = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfInUnknownProto.setStatus('mandatory')
npIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfOutOctets.setStatus('mandatory')
npIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfOutUcastPkts.setStatus('mandatory')
npIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfOutNUcastPkts.setStatus('mandatory')
npIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfOutDiscards.setStatus('mandatory')
npIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfOutErrors.setStatus('mandatory')
npIfOutCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfOutCollisions.setStatus('mandatory')
npIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfOutQLen.setStatus('mandatory')
npIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npIfAdminStatus.setStatus('mandatory')
npIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIfOperStatus.setStatus('mandatory')
npIPTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1), )
if mibBuilder.loadTexts: npIPTable.setStatus('mandatory')
npIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1), ).setIndexNames((0, "NETSERVER-MIB", "npIndex"))
if mibBuilder.loadTexts: npIPEntry.setStatus('mandatory')
npIPForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("not-forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPForwarding.setStatus('mandatory')
npIPDefaultTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPDefaultTTL.setStatus('mandatory')
npIPInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPInReceives.setStatus('mandatory')
npIPInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPInHdrErrors.setStatus('mandatory')
npIPInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPInAddrErrors.setStatus('mandatory')
npIPForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPForwDatagrams.setStatus('mandatory')
npIPInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPInUnknownProtos.setStatus('mandatory')
npIPInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPInDiscards.setStatus('mandatory')
npIPInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPInDelivers.setStatus('mandatory')
npIPOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPOutRequests.setStatus('mandatory')
npIPOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPOutDiscards.setStatus('mandatory')
npIPOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPOutNoRoutes.setStatus('mandatory')
npIPReasmTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPReasmTimeout.setStatus('mandatory')
npIPReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPReasmReqds.setStatus('mandatory')
npIPReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPReasmOKs.setStatus('mandatory')
npIPReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPReasmFails.setStatus('mandatory')
npIPFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPFragOKs.setStatus('mandatory')
npIPFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPFragFails.setStatus('mandatory')
npIPFragCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPFragCreates.setStatus('mandatory')
npIPRoutingDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npIPRoutingDiscards.setStatus('mandatory')
npICMPTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2), )
if mibBuilder.loadTexts: npICMPTable.setStatus('mandatory')
npICMPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1), ).setIndexNames((0, "NETSERVER-MIB", "npIndex"))
if mibBuilder.loadTexts: npICMPEntry.setStatus('mandatory')
npICMPInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInMsgs.setStatus('mandatory')
npICMPInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInErrors.setStatus('mandatory')
npICMPInDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInDestUnreachs.setStatus('mandatory')
npICMPInTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInTimeExcds.setStatus('mandatory')
npICMPInParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInParmProbs.setStatus('mandatory')
npICMPInSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInSrcQuenchs.setStatus('mandatory')
npICMPInRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInRedirects.setStatus('mandatory')
npICMPInEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInEchos.setStatus('mandatory')
npICMPInEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInEchoReps.setStatus('mandatory')
npICMPInTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInTimestamps.setStatus('mandatory')
npICMPInTimestampReps = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInTimestampReps.setStatus('mandatory')
npICMPInAddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInAddrMasks.setStatus('mandatory')
npICMPInAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPInAddrMaskReps.setStatus('mandatory')
npICMPOutMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutMsgs.setStatus('mandatory')
npICMPOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutErrors.setStatus('mandatory')
npICMPOutDestUnreachs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutDestUnreachs.setStatus('mandatory')
npICMPOutTimeExcds = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutTimeExcds.setStatus('mandatory')
npICMPOutParmProbs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutParmProbs.setStatus('mandatory')
npICMPOutSrcQuenchs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutSrcQuenchs.setStatus('mandatory')
npICMPOutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutRedirects.setStatus('mandatory')
npICMPOutEchos = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutEchos.setStatus('mandatory')
npICMPOutEchoReps = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutEchoReps.setStatus('mandatory')
npICMPOutTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutTimestamps.setStatus('mandatory')
npICMPOutTimestampReps = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutTimestampReps.setStatus('mandatory')
npICMPOutAddrMasks = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutAddrMasks.setStatus('mandatory')
npICMPOutAddrMaskReps = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npICMPOutAddrMaskReps.setStatus('mandatory')
npTCPTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3), )
if mibBuilder.loadTexts: npTCPTable.setStatus('mandatory')
npTCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1), ).setIndexNames((0, "NETSERVER-MIB", "npIndex"))
if mibBuilder.loadTexts: npTCPEntry.setStatus('mandatory')
npTCPRtoAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("constant", 2), ("rsre", 3), ("vanj", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPRtoAlgorithm.setStatus('mandatory')
npTCPRtoMin = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPRtoMin.setStatus('mandatory')
npTCPRtoMax = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPRtoMax.setStatus('mandatory')
npTCPMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPMaxConn.setStatus('mandatory')
npTCPActiveOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPActiveOpens.setStatus('mandatory')
npTCPPassiveOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPPassiveOpens.setStatus('mandatory')
npTCPAttemptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPAttemptFails.setStatus('mandatory')
npTCPEstabResets = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPEstabResets.setStatus('mandatory')
npTCPCurrEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPCurrEstab.setStatus('mandatory')
npTCPInSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPInSegs.setStatus('mandatory')
npTCPOutSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPOutSegs.setStatus('mandatory')
npTCPRetransSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPRetransSegs.setStatus('mandatory')
npTCPInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPInErrs.setStatus('mandatory')
npTCPOutRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npTCPOutRsts.setStatus('mandatory')
npUDPTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 4), )
if mibBuilder.loadTexts: npUDPTable.setStatus('mandatory')
npUDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 4, 1), ).setIndexNames((0, "NETSERVER-MIB", "npIndex"))
if mibBuilder.loadTexts: npUDPEntry.setStatus('mandatory')
npUDPInDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npUDPInDatagrams.setStatus('mandatory')
npUDPNoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npUDPNoPorts.setStatus('mandatory')
npUDPInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npUDPInErrors.setStatus('mandatory')
npUDPOutDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npUDPOutDatagrams.setStatus('mandatory')
npNFSTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 5), )
if mibBuilder.loadTexts: npNFSTable.setStatus('mandatory')
npNFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 5, 1), ).setIndexNames((0, "NETSERVER-MIB", "npIndex"))
if mibBuilder.loadTexts: npNFSEntry.setStatus('mandatory')
npNFSDCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npNFSDCounts.setStatus('mandatory')
npNFSDNJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npNFSDNJobs.setStatus('mandatory')
npNFSDBusyCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npNFSDBusyCounts.setStatus('mandatory')
npSMBTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 6), )
if mibBuilder.loadTexts: npSMBTable.setStatus('mandatory')
npSMBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 6, 1), ).setIndexNames((0, "NETSERVER-MIB", "npIndex"))
if mibBuilder.loadTexts: npSMBEntry.setStatus('mandatory')
npSMBRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSMBRcvd.setStatus('mandatory')
npSMBBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSMBBytesRcvd.setStatus('mandatory')
npSMBBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSMBBytesSent.setStatus('mandatory')
npSMBReads = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSMBReads.setStatus('mandatory')
npSMBWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSMBWrites.setStatus('mandatory')
npSMBOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSMBOpens.setStatus('mandatory')
npSMBCloses = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSMBCloses.setStatus('mandatory')
npSMBErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSMBErrors.setStatus('mandatory')
npSMBLocksHeld = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 2, 3, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npSMBLocksHeld.setStatus('mandatory')
fspTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 3, 1), )
if mibBuilder.loadTexts: fspTable.setStatus('mandatory')
fspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 3, 1, 1), ).setIndexNames((0, "NETSERVER-MIB", "fspIndex"))
if mibBuilder.loadTexts: fspEntry.setStatus('mandatory')
fspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspIndex.setStatus('mandatory')
fspBusyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspBusyCount.setStatus('mandatory')
fspIdleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspIdleCount.setStatus('mandatory')
fpLFSTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1), )
if mibBuilder.loadTexts: fpLFSTable.setStatus('mandatory')
fpLFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1), ).setIndexNames((0, "NETSERVER-MIB", "fspIndex"))
if mibBuilder.loadTexts: fpLFSEntry.setStatus('mandatory')
fpLFSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSVersion.setStatus('mandatory')
fpLFSMounts = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSMounts.setStatus('mandatory')
fpLFSUMounts = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSUMounts.setStatus('mandatory')
fpLFSReads = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSReads.setStatus('mandatory')
fpLFSWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSWrites.setStatus('mandatory')
fpLFSReaddirs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSReaddirs.setStatus('mandatory')
fpLFSReadlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSReadlinks.setStatus('mandatory')
fpLFSMkdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSMkdirs.setStatus('mandatory')
fpLFSMknods = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSMknods.setStatus('mandatory')
fpLFSReaddirPluses = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSReaddirPluses.setStatus('mandatory')
fpLFSFsstats = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSFsstats.setStatus('mandatory')
fpLFSNull = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSNull.setStatus('mandatory')
fpLFSFsinfo = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSFsinfo.setStatus('mandatory')
fpLFSGetattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSGetattrs.setStatus('mandatory')
fpLFSSetattrs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSSetattrs.setStatus('mandatory')
fpLFSLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSLookups.setStatus('mandatory')
fpLFSCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSCreates.setStatus('mandatory')
fpLFSRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSRemoves.setStatus('mandatory')
fpLFSRenames = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSRenames.setStatus('mandatory')
fpLFSLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSLinks.setStatus('mandatory')
fpLFSSymlinks = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSSymlinks.setStatus('mandatory')
fpLFSRmdirs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSRmdirs.setStatus('mandatory')
fpLFSCkpntons = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSCkpntons.setStatus('mandatory')
fpLFSCkpntoffs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSCkpntoffs.setStatus('mandatory')
fpLFSClears = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSClears.setStatus('mandatory')
fpLFSIsolateFs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSIsolateFs.setStatus('mandatory')
fpLFSReleaseFs = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSReleaseFs.setStatus('mandatory')
fpLFSIsolationStates = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSIsolationStates.setStatus('mandatory')
fpLFSDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSDiagnostics.setStatus('mandatory')
fpLFSPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpLFSPurges.setStatus('mandatory')
fpFileSystemTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 2), )
if mibBuilder.loadTexts: fpFileSystemTable.setStatus('mandatory')
fpFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 2, 1), ).setIndexNames((0, "NETSERVER-MIB", "fspIndex"), (0, "NETSERVER-MIB", "fpFSIndex"))
if mibBuilder.loadTexts: fpFSEntry.setStatus('mandatory')
fpFSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpFSIndex.setStatus('mandatory')
fpHrFSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpHrFSIndex.setStatus('mandatory')
fpDNLCTStatTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 1), )
if mibBuilder.loadTexts: fpDNLCTStatTable.setStatus('mandatory')
fpDNLCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 1, 1), ).setIndexNames((0, "NETSERVER-MIB", "fspIndex"))
if mibBuilder.loadTexts: fpDNLCSEntry.setStatus('mandatory')
fpDNLCHit = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDNLCHit.setStatus('mandatory')
fpDNLCMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDNLCMiss.setStatus('mandatory')
fpDNLCEnter = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDNLCEnter.setStatus('mandatory')
fpDNLCConflict = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDNLCConflict.setStatus('mandatory')
fpDNLCPurgevfsp = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDNLCPurgevfsp.setStatus('mandatory')
fpDNLCPurgevp = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDNLCPurgevp.setStatus('mandatory')
fpDNLCHashsz = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpDNLCHashsz.setStatus('mandatory')
fpPageStatTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2), )
if mibBuilder.loadTexts: fpPageStatTable.setStatus('mandatory')
fpPageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1), ).setIndexNames((0, "NETSERVER-MIB", "fspIndex"))
if mibBuilder.loadTexts: fpPageEntry.setStatus('mandatory')
fpPAGETotalmem = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGETotalmem.setStatus('mandatory')
fpPAGEFreelistcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGEFreelistcnt.setStatus('mandatory')
fpPAGECachelistcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGECachelistcnt.setStatus('mandatory')
fpPAGEDirtyflistcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGEDirtyflistcnt.setStatus('mandatory')
fpPAGEDirtydlistcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGEDirtydlistcnt.setStatus('mandatory')
fpPAGECachehit = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGECachehit.setStatus('mandatory')
fpPAGECachemiss = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGECachemiss.setStatus('mandatory')
fpPAGEWritehit = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGEWritehit.setStatus('mandatory')
fpPAGEWritemiss = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGEWritemiss.setStatus('mandatory')
fpPAGEZcref = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGEZcref.setStatus('mandatory')
fpPAGEZcbreak = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGEZcbreak.setStatus('mandatory')
fpPAGEOutscan = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGEOutscan.setStatus('mandatory')
fpPAGEOutputpage = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGEOutputpage.setStatus('mandatory')
fpPAGEFsflushscan = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGEFsflushscan.setStatus('mandatory')
fpPAGEFsflushputpage = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGEFsflushputpage.setStatus('mandatory')
fpPAGEOutcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpPAGEOutcnt.setStatus('mandatory')
fpBufferStatTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 3), )
if mibBuilder.loadTexts: fpBufferStatTable.setStatus('mandatory')
fpBufferEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 3, 1), ).setIndexNames((0, "NETSERVER-MIB", "fspIndex"))
if mibBuilder.loadTexts: fpBufferEntry.setStatus('mandatory')
fpBUFLreads = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpBUFLreads.setStatus('mandatory')
fpBUFBreads = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpBUFBreads.setStatus('mandatory')
fpBUFLwrites = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpBUFLwrites.setStatus('mandatory')
fpBUFBwrites = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpBUFBwrites.setStatus('mandatory')
fpBUFIOwaits = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpBUFIOwaits.setStatus('mandatory')
fpBUFResid = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpBUFResid.setStatus('mandatory')
fpBUFBufsize = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpBUFBufsize.setStatus('mandatory')
fpBUFBcount = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpBUFBcount.setStatus('mandatory')
fpInodeTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 4), )
if mibBuilder.loadTexts: fpInodeTable.setStatus('mandatory')
fpInodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 4, 1), ).setIndexNames((0, "NETSERVER-MIB", "fspIndex"))
if mibBuilder.loadTexts: fpInodeEntry.setStatus('mandatory')
fpINODEIgetcalls = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpINODEIgetcalls.setStatus('mandatory')
fpFoundinodes = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpFoundinodes.setStatus('mandatory')
fpTotalinodes = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpTotalinodes.setStatus('mandatory')
fpGoneinodes = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpGoneinodes.setStatus('mandatory')
fpFreeinodes = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpFreeinodes.setStatus('mandatory')
fpCacheinodes = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpCacheinodes.setStatus('mandatory')
fpSyncinodes = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 2, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpSyncinodes.setStatus('mandatory')
class RaidLevel(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 3, 5, 6, 7))
    namedValues = NamedValues(("raid0", 0), ("raid1", 1), ("raid3", 3), ("raid5", 5), ("raid6", 6), ("raid7", 7))

class RebuildFlag(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 240, 241, 242, 243, 244, 255))
    namedValues = NamedValues(("none", 0), ("autorebuild", 1), ("manualrebuild", 2), ("check", 3), ("expandcapacity", 4), ("phydevfailed", 240), ("logdevfailed", 241), ("justfailed", 242), ("canceled", 243), ("expandcapacityfailed", 244), ("autorebuildfailed", 255))

class BusType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("eisa", 1), ("mca", 2), ("pci", 3), ("vesa", 4), ("isa", 5), ("scsi", 6))

class ControllerType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 8, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 80, 96, 97, 98, 99, 100, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195))
    namedValues = NamedValues(("dac960E", 1), ("dac960M", 8), ("dac960PD", 16), ("dac960PL", 17), ("dac960PDU", 18), ("dac960PE", 19), ("dac960PG", 20), ("dac960PJ", 21), ("dac960PTL", 22), ("dac960PR", 23), ("dac960PRL", 24), ("dac960PT", 25), ("dac1164P", 26), ("dacI20", 80), ("dac960S", 96), ("dac960SU", 97), ("dac960SX", 98), ("dac960SF", 99), ("dac960FL", 100), ("hba440", 129), ("hba440C", 130), ("hba445", 131), ("hba445C", 132), ("hba440xC", 133), ("hba445S", 134), ("hba640", 136), ("hba640A", 137), ("hba446", 138), ("hba446D", 139), ("hba446S", 140), ("hba742", 144), ("hba742A", 145), ("hba747", 146), ("hba747D", 147), ("hba747S", 148), ("hba74xC", 149), ("hba757", 150), ("hba757D", 151), ("hba757S", 152), ("hba757CD", 153), ("hba75xC", 154), ("hba747C", 155), ("hba757C", 156), ("hba540", 160), ("hba540C", 161), ("hba542", 162), ("hba542B", 163), ("hba542C", 164), ("hba542D", 165), ("hba545", 166), ("hba545C", 167), ("hba545S", 168), ("hba54xC", 169), ("hba946", 176), ("hba946C", 177), ("hba948", 178), ("hba948C", 179), ("hba956", 180), ("hba956C", 181), ("hba958", 182), ("hba958C", 183), ("hba958D", 184), ("hba956CD", 185), ("hba958CD", 186), ("hba930", 192), ("hba932", 193), ("hba950", 194), ("hba952", 195))

class VendorName(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("mylex", 0), ("ibm", 1), ("hp", 2), ("dec", 3), ("att", 4), ("dell", 5), ("nec", 6), ("sni", 7), ("ncr", 8))

class U08Bits(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class U16Bits(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

fabLogDevTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 5, 1), )
if mibBuilder.loadTexts: fabLogDevTable.setStatus('mandatory')
fabLogDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 5, 1, 1), ).setIndexNames((0, "NETSERVER-MIB", "fspIndex"), (0, "NETSERVER-MIB", "ldIndex"))
if mibBuilder.loadTexts: fabLogDevEntry.setStatus('mandatory')
ldIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldIndex.setStatus('mandatory')
ldSectorReads = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldSectorReads.setStatus('mandatory')
ldWBufReads = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldWBufReads.setStatus('mandatory')
ldSectorWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldSectorWrites.setStatus('mandatory')
ldReadIO = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldReadIO.setStatus('mandatory')
ldWriteIO = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldWriteIO.setStatus('mandatory')
ldMediaErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldMediaErrors.setStatus('mandatory')
ldDriveErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldDriveErrors.setStatus('mandatory')
ldTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ldTotalTime.setStatus('mandatory')
fabAdptTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1), )
if mibBuilder.loadTexts: fabAdptTable.setStatus('mandatory')
fabAdptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1), ).setIndexNames((0, "NETSERVER-MIB", "fspIndex"), (0, "NETSERVER-MIB", "fabIndex"))
if mibBuilder.loadTexts: fabAdptEntry.setStatus('mandatory')
fabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabIndex.setStatus('mandatory')
fabPCIBusNum = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1, 2), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabPCIBusNum.setStatus('mandatory')
fabSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1, 3), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabSlotNum.setStatus('mandatory')
fabIntLine = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1, 4), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabIntLine.setStatus('mandatory')
fabIntPin = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1, 5), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabIntPin.setStatus('mandatory')
fabType = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1, 6), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabType.setStatus('mandatory')
fabVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1, 7), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabVendorId.setStatus('mandatory')
fabDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1, 8), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabDeviceId.setStatus('mandatory')
fabRevisionId = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1, 9), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabRevisionId.setStatus('mandatory')
fabWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabWWN.setStatus('mandatory')
fabNumOfTargets = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1, 11), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabNumOfTargets.setStatus('mandatory')
fabAdptNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 1, 1, 12), U08Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabAdptNumber.setStatus('mandatory')
fabTargetTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 2), )
if mibBuilder.loadTexts: fabTargetTable.setStatus('mandatory')
fabTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 2, 1), ).setIndexNames((0, "NETSERVER-MIB", "fspIndex"), (0, "NETSERVER-MIB", "fabTargetIndex"))
if mibBuilder.loadTexts: fabTargetEntry.setStatus('mandatory')
fabTargetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabTargetIndex.setStatus('mandatory')
fabTargetAdapterNum = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 2, 1, 2), U08Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabTargetAdapterNum.setStatus('mandatory')
fabTargetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 2, 1, 3), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabTargetNumber.setStatus('mandatory')
fabTargetWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabTargetWWN.setStatus('mandatory')
fabTargetPortWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabTargetPortWWN.setStatus('mandatory')
fabTargetAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabTargetAliasName.setStatus('mandatory')
fabTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disk", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabTargetType.setStatus('mandatory')
fabTargetNumOfLuns = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 2, 1, 8), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabTargetNumOfLuns.setStatus('mandatory')
fabLunTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 3), )
if mibBuilder.loadTexts: fabLunTable.setStatus('mandatory')
fabLunEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 3, 1), ).setIndexNames((0, "NETSERVER-MIB", "fspIndex"), (0, "NETSERVER-MIB", "fabLunIndex"))
if mibBuilder.loadTexts: fabLunEntry.setStatus('mandatory')
fabLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunIndex.setStatus('mandatory')
fabLunNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 3, 1, 2), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunNumber.setStatus('mandatory')
fabLunAdptNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 3, 1, 3), U08Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunAdptNumber.setStatus('mandatory')
fabLunTarNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 3, 1, 4), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunTarNumber.setStatus('mandatory')
fabLunWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunWWN.setStatus('mandatory')
fabLunType = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 3, 1, 6), U08Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunType.setStatus('mandatory')
fabLunSize = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunSize.setStatus('mandatory')
fabLunMap = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unmapped", 0), ("mapped", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunMap.setStatus('mandatory')
fabLunMapTable = MibTable((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 4), )
if mibBuilder.loadTexts: fabLunMapTable.setStatus('mandatory')
fabLunMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 4, 1), ).setIndexNames((0, "NETSERVER-MIB", "fspIndex"), (0, "NETSERVER-MIB", "fabLunMapIndex"))
if mibBuilder.loadTexts: fabLunMapEntry.setStatus('mandatory')
fabLunMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunMapIndex.setStatus('mandatory')
fabLunMNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 4, 1, 2), U16Bits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunMNumber.setStatus('mandatory')
fabLunAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunAlias.setStatus('mandatory')
fabLunMapWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunMapWWN.setStatus('mandatory')
fabLunLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 80, 3, 3, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unlabelled", 0), ("labelled", 1), ("labelledactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fabLunLabel.setStatus('mandatory')
trapFSFull = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 4, 1))
trapFSDegradation = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 4, 2))
trapDiskUpdation = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 4, 3))
trapFCAdptLinkFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 4, 4))
trapFCAdptLinkUp = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 4, 5))
trapFCLossOfLinkFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 4, 6))
trapLunDisappear = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 4, 7))
trapLunSizeChange = MibIdentifier((1, 3, 6, 1, 4, 1, 80, 3, 4, 8))
trapFSFullMsg = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFSFullMsg.setStatus('mandatory')
trapFSFullTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFSFullTimeStamp.setStatus('mandatory')
trapFSDegradationMsg = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFSDegradationMsg.setStatus('mandatory')
trapFSDegradationTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 2, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFSDegradationTimeStamp.setStatus('mandatory')
trapDiskMsg = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDiskMsg.setStatus('mandatory')
trapDiskTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDiskTimeStamp.setStatus('mandatory')
trapFCAdptLinkFailureMsg = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFCAdptLinkFailureMsg.setStatus('mandatory')
trapFCAdptLinkFailureTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 4, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFCAdptLinkFailureTimeStamp.setStatus('mandatory')
trapFCAdptLinkUpMsg = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFCAdptLinkUpMsg.setStatus('mandatory')
trapFCAdptLinkUpTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 5, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFCAdptLinkUpTimeStamp.setStatus('mandatory')
trapFCLossOfLinkFailureMsg = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFCLossOfLinkFailureMsg.setStatus('mandatory')
trapFCLossOfLinkFailureTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 6, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFCLossOfLinkFailureTimeStamp.setStatus('mandatory')
trapLunDisappearMsg = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLunDisappearMsg.setStatus('mandatory')
trapLunDisappearTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 7, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLunDisappearTimeStamp.setStatus('mandatory')
trapLunSizeChangeMsg = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLunSizeChangeMsg.setStatus('mandatory')
trapLunSizeChangeTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 80, 3, 4, 8, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapLunSizeChangeTimeStamp.setStatus('mandatory')
fileSystemFullTrap = NotificationType((1, 3, 6, 1, 4, 1, 80) + (0,1)).setObjects(("NETSERVER-MIB", "trapFSFullMsg"), ("NETSERVER-MIB", "trapFSFullTimeStamp"))
fileSystemDegradationTrap = NotificationType((1, 3, 6, 1, 4, 1, 80) + (0,2)).setObjects(("NETSERVER-MIB", "trapFSDegradationMsg"), ("NETSERVER-MIB", "trapFSDegradationTimeStamp"))
diskStackUpdationTrap = NotificationType((1, 3, 6, 1, 4, 1, 80) + (0,3)).setObjects(("NETSERVER-MIB", "trapDiskMsg"), ("NETSERVER-MIB", "trapDiskTimeStamp"))
fcLinkFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 80) + (0,4)).setObjects(("NETSERVER-MIB", "trapFCAdptLinkFailureMsg"), ("NETSERVER-MIB", "trapFCAdptLinkFailureTimeStamp"))
fcLinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 80) + (0,5)).setObjects(("NETSERVER-MIB", "trapFCAdptLinkUpMsg"), ("NETSERVER-MIB", "trapFCAdptLinkUpTimeStamp"))
fcCompleteLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 80) + (0,6)).setObjects(("NETSERVER-MIB", "trapFCLossOfLinkFailureMsg"), ("NETSERVER-MIB", "trapFCLossOfLinkFailureTimeStamp"))
lunDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 80) + (0,7)).setObjects(("NETSERVER-MIB", "trapLunDisappearMsg"), ("NETSERVER-MIB", "trapLunDisappearTimeStamp"))
lunSizeChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 80) + (0,8)).setObjects(("NETSERVER-MIB", "trapLunSizeChangeMsg"), ("NETSERVER-MIB", "trapLunSizeChangeTimeStamp"))
host = MibIdentifier((1, 3, 6, 1, 2, 1, 25))
hrSystem = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 1))
hrStorage = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 2))
hrDevice = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3))
class Boolean(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class KBytes(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class ProductID(ObjectIdentifier):
    pass

class DateAndTime(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(8, 8), ValueSizeConstraint(11, 11), )
class InternationalDisplayString(OctetString):
    pass

hrSystemUptime = MibScalar((1, 3, 6, 1, 2, 1, 25, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrSystemUptime.setStatus('mandatory')
hrSystemDate = MibScalar((1, 3, 6, 1, 2, 1, 25, 1, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hrSystemDate.setStatus('mandatory')
hrSystemInitialLoadDevice = MibScalar((1, 3, 6, 1, 2, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hrSystemInitialLoadDevice.setStatus('mandatory')
hrSystemInitialLoadParameters = MibScalar((1, 3, 6, 1, 2, 1, 25, 1, 4), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hrSystemInitialLoadParameters.setStatus('mandatory')
hrSystemNumUsers = MibScalar((1, 3, 6, 1, 2, 1, 25, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrSystemNumUsers.setStatus('mandatory')
hrSystemProcesses = MibScalar((1, 3, 6, 1, 2, 1, 25, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrSystemProcesses.setStatus('mandatory')
hrSystemMaxProcesses = MibScalar((1, 3, 6, 1, 2, 1, 25, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrSystemMaxProcesses.setStatus('mandatory')
hrStorageTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 2, 1))
hrStorageOther = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 2, 1, 1))
hrStorageRam = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 2, 1, 2))
hrStorageVirtualMemory = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 2, 1, 3))
hrStorageFixedDisk = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 2, 1, 4))
hrStorageRemovableDisk = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 2, 1, 5))
hrStorageFloppyDisk = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 2, 1, 6))
hrStorageCompactDisc = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 2, 1, 7))
hrStorageRamDisk = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 2, 1, 8))
hrMemorySize = MibScalar((1, 3, 6, 1, 2, 1, 25, 2, 2), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrMemorySize.setStatus('mandatory')
hrStorageTable = MibTable((1, 3, 6, 1, 2, 1, 25, 2, 3), )
if mibBuilder.loadTexts: hrStorageTable.setStatus('mandatory')
hrStorageEntry = MibTableRow((1, 3, 6, 1, 2, 1, 25, 2, 3, 1), ).setIndexNames((0, "NETSERVER-MIB", "hrStorageIndex"))
if mibBuilder.loadTexts: hrStorageEntry.setStatus('mandatory')
hrStorageIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrStorageIndex.setStatus('mandatory')
hrStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 2, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrStorageType.setStatus('mandatory')
hrStorageDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrStorageDescr.setStatus('mandatory')
hrStorageAllocationUnits = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrStorageAllocationUnits.setStatus('mandatory')
hrStorageSize = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hrStorageSize.setStatus('mandatory')
hrStorageUsed = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrStorageUsed.setStatus('mandatory')
hrStorageAllocationFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrStorageAllocationFailures.setStatus('mandatory')
hrDeviceTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1))
hrDeviceOther = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 1))
hrDeviceUnknown = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 2))
hrDeviceProcessor = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 3))
hrDeviceNetwork = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 4))
hrDevicePrinter = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 5))
hrDeviceDiskStorage = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 6))
hrDeviceVideo = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 10))
hrDeviceAudio = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 11))
hrDeviceCoprocessor = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 12))
hrDeviceKeyboard = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 13))
hrDeviceModem = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 14))
hrDeviceParallelPort = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 15))
hrDevicePointing = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 16))
hrDeviceSerialPort = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 17))
hrDeviceTape = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 18))
hrDeviceClock = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 19))
hrDeviceVolatileMemory = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 20))
hrDeviceNonVolatileMemory = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 1, 21))
hrDeviceTable = MibTable((1, 3, 6, 1, 2, 1, 25, 3, 2), )
if mibBuilder.loadTexts: hrDeviceTable.setStatus('mandatory')
hrDeviceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 25, 3, 2, 1), ).setIndexNames((0, "NETSERVER-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: hrDeviceEntry.setStatus('mandatory')
hrDeviceIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrDeviceIndex.setStatus('mandatory')
hrDeviceType = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrDeviceType.setStatus('mandatory')
hrDeviceDescr = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrDeviceDescr.setStatus('mandatory')
hrDeviceID = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 2, 1, 4), ProductID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrDeviceID.setStatus('mandatory')
hrDeviceStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("running", 2), ("warning", 3), ("testing", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrDeviceStatus.setStatus('mandatory')
hrDeviceErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrDeviceErrors.setStatus('mandatory')
hrProcessorTable = MibTable((1, 3, 6, 1, 2, 1, 25, 3, 3), )
if mibBuilder.loadTexts: hrProcessorTable.setStatus('mandatory')
hrProcessorEntry = MibTableRow((1, 3, 6, 1, 2, 1, 25, 3, 3, 1), ).setIndexNames((0, "NETSERVER-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: hrProcessorEntry.setStatus('mandatory')
hrProcessorFrwID = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 3, 1, 1), ProductID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrProcessorFrwID.setStatus('mandatory')
hrProcessorLoad = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrProcessorLoad.setStatus('mandatory')
hrNetworkTable = MibTable((1, 3, 6, 1, 2, 1, 25, 3, 4), )
if mibBuilder.loadTexts: hrNetworkTable.setStatus('mandatory')
hrNetworkEntry = MibTableRow((1, 3, 6, 1, 2, 1, 25, 3, 4, 1), ).setIndexNames((0, "NETSERVER-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: hrNetworkEntry.setStatus('mandatory')
hrNetworkIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrNetworkIfIndex.setStatus('mandatory')
hrPrinterTable = MibTable((1, 3, 6, 1, 2, 1, 25, 3, 5), )
if mibBuilder.loadTexts: hrPrinterTable.setStatus('mandatory')
hrPrinterEntry = MibTableRow((1, 3, 6, 1, 2, 1, 25, 3, 5, 1), ).setIndexNames((0, "NETSERVER-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: hrPrinterEntry.setStatus('mandatory')
hrPrinterStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("idle", 3), ("printing", 4), ("warmup", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrPrinterStatus.setStatus('mandatory')
hrPrinterDetectedErrorState = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrPrinterDetectedErrorState.setStatus('mandatory')
hrDiskStorageTable = MibTable((1, 3, 6, 1, 2, 1, 25, 3, 6), )
if mibBuilder.loadTexts: hrDiskStorageTable.setStatus('mandatory')
hrDiskStorageEntry = MibTableRow((1, 3, 6, 1, 2, 1, 25, 3, 6, 1), ).setIndexNames((0, "NETSERVER-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: hrDiskStorageEntry.setStatus('mandatory')
hrDiskStorageAccess = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readWrite", 1), ("readOnly", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrDiskStorageAccess.setStatus('mandatory')
hrDiskStorageMedia = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("hardDisk", 3), ("floppyDisk", 4), ("opticalDiskROM", 5), ("opticalDiskWORM", 6), ("opticalDiskRW", 7), ("ramDisk", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrDiskStorageMedia.setStatus('mandatory')
hrDiskStorageRemoveble = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 6, 1, 3), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrDiskStorageRemoveble.setStatus('mandatory')
hrDiskStorageCapacity = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 6, 1, 4), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrDiskStorageCapacity.setStatus('mandatory')
hrPartitionTable = MibTable((1, 3, 6, 1, 2, 1, 25, 3, 7), )
if mibBuilder.loadTexts: hrPartitionTable.setStatus('mandatory')
hrPartitionEntry = MibTableRow((1, 3, 6, 1, 2, 1, 25, 3, 7, 1), ).setIndexNames((0, "NETSERVER-MIB", "hrDeviceIndex"), (0, "NETSERVER-MIB", "hrPartitionIndex"))
if mibBuilder.loadTexts: hrPartitionEntry.setStatus('mandatory')
hrPartitionIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrPartitionIndex.setStatus('mandatory')
hrPartitionLabel = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 7, 1, 2), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrPartitionLabel.setStatus('mandatory')
hrPartitionID = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrPartitionID.setStatus('mandatory')
hrPartitionSize = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 7, 1, 4), KBytes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrPartitionSize.setStatus('mandatory')
hrPartitionFSIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrPartitionFSIndex.setStatus('mandatory')
hrFSTable = MibTable((1, 3, 6, 1, 2, 1, 25, 3, 8), )
if mibBuilder.loadTexts: hrFSTable.setStatus('mandatory')
hrFSEntry = MibTableRow((1, 3, 6, 1, 2, 1, 25, 3, 8, 1), ).setIndexNames((0, "NETSERVER-MIB", "hrFSIndex"))
if mibBuilder.loadTexts: hrFSEntry.setStatus('mandatory')
hrFSTypes = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9))
hrFSOther = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 1))
hrFSUnknown = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 2))
hrFSBerkeleyFFS = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 3))
hrFSSys5FS = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 4))
hrFSFat = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 5))
hrFSHPFS = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 6))
hrFSHFS = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 7))
hrFSMFS = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 8))
hrFSNTFS = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 9))
hrFSVNode = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 10))
hrFSJournaled = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 11))
hrFSiso9660 = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 12))
hrFSRockRidge = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 13))
hrFSNFS = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 14))
hrFSNetware = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 15))
hrFSAFS = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 16))
hrFSDFS = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 17))
hrFSAppleshare = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 18))
hrFSRFS = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 19))
hrFSDGCFS = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 20))
hrFSBFS = MibIdentifier((1, 3, 6, 1, 2, 1, 25, 3, 9, 21))
hrFSIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrFSIndex.setStatus('mandatory')
hrFSMountPoint = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 8, 1, 2), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrFSMountPoint.setStatus('mandatory')
hrFSRemoteMountPoint = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 8, 1, 3), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrFSRemoteMountPoint.setStatus('mandatory')
hrFSType = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 8, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrFSType.setStatus('mandatory')
hrFSAccess = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readWrite", 1), ("readOnly", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrFSAccess.setStatus('mandatory')
hrFSBootable = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 8, 1, 6), Boolean()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrFSBootable.setStatus('mandatory')
hrFSStorageIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hrFSStorageIndex.setStatus('mandatory')
hrFSLastFullBackupDate = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 8, 1, 8), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hrFSLastFullBackupDate.setStatus('mandatory')
hrFSLastPartialBackupDate = MibTableColumn((1, 3, 6, 1, 2, 1, 25, 3, 8, 1, 9), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hrFSLastPartialBackupDate.setStatus('mandatory')
mibBuilder.exportSymbols("NETSERVER-MIB", npSMBTable=npSMBTable, fcCompleteLossTrap=fcCompleteLossTrap, fpGoneinodes=fpGoneinodes, npICMPInSrcQuenchs=npICMPInSrcQuenchs, hrDeviceUnknown=hrDeviceUnknown, npNFSTable=npNFSTable, trapFCAdptLinkFailure=trapFCAdptLinkFailure, DateAndTime=DateAndTime, hrStorageRamDisk=hrStorageRamDisk, fpDNLCEnter=fpDNLCEnter, hrDeviceID=hrDeviceID, hrFSDFS=hrFSDFS, axNumNPFSP=axNumNPFSP, lunSizeChangeTrap=lunSizeChangeTrap, trapFCLossOfLinkFailureMsg=trapFCLossOfLinkFailureMsg, U08Bits=U08Bits, axSWVersion=axSWVersion, hrDeviceErrors=hrDeviceErrors, hrFSTable=hrFSTable, hrDeviceTypes=hrDeviceTypes, hrDiskStorageAccess=hrDiskStorageAccess, npSMBRcvd=npSMBRcvd, fpLFSReleaseFs=fpLFSReleaseFs, hrStorageAllocationFailures=hrStorageAllocationFailures, Boolean=Boolean, fabLunMap=fabLunMap, npIPOutNoRoutes=npIPOutNoRoutes, npIfifIndex=npIfifIndex, hrDeviceDescr=hrDeviceDescr, fabDeviceId=fabDeviceId, npIPFragFails=npIPFragFails, ldIndex=ldIndex, hrFSTypes=hrFSTypes, npSMBEntry=npSMBEntry, npIPForwDatagrams=npIPForwDatagrams, hrDeviceKeyboard=hrDeviceKeyboard, npTCPInErrs=npTCPInErrs, fpPAGETotalmem=fpPAGETotalmem, axFSP=axFSP, hrFSDGCFS=hrFSDGCFS, axFab=axFab, hrFSBerkeleyFFS=hrFSBerkeleyFFS, fpPAGEFreelistcnt=fpPAGEFreelistcnt, fpFreeinodes=fpFreeinodes, fpDNLCHashsz=fpDNLCHashsz, npICMPInTimestampReps=npICMPInTimestampReps, fpBUFBwrites=fpBUFBwrites, fabIntLine=fabIntLine, hrFSRemoteMountPoint=hrFSRemoteMountPoint, fpLFSMounts=fpLFSMounts, hrDeviceClock=hrDeviceClock, trapFCAdptLinkFailureTimeStamp=trapFCAdptLinkFailureTimeStamp, fpFSIndex=fpFSIndex, npProtocols=npProtocols, hrDeviceTable=hrDeviceTable, hrFSFat=hrFSFat, fabLunNumber=fabLunNumber, fabTargetPortWWN=fabTargetPortWWN, fpLFSSymlinks=fpLFSSymlinks, npICMPOutTimestampReps=npICMPOutTimestampReps, hrFSLastPartialBackupDate=hrFSLastPartialBackupDate, hrProcessorTable=hrProcessorTable, npIPReasmFails=npIPReasmFails, npIPReasmReqds=npIPReasmReqds, hrDeviceParallelPort=hrDeviceParallelPort, hrStorageSize=hrStorageSize, npIdleCount=npIdleCount, fpPAGEDirtyflistcnt=fpPAGEDirtyflistcnt, fpPAGEDirtydlistcnt=fpPAGEDirtydlistcnt, hrFSMFS=hrFSMFS, fabTargetType=fabTargetType, npIPInAddrErrors=npIPInAddrErrors, npIPTable=npIPTable, hrNetworkEntry=hrNetworkEntry, hrDeviceSerialPort=hrDeviceSerialPort, hrFSLastFullBackupDate=hrFSLastFullBackupDate, npICMPOutAddrMaskReps=npICMPOutAddrMaskReps, hrPartitionIndex=hrPartitionIndex, fabLunLabel=fabLunLabel, npNFSDBusyCounts=npNFSDBusyCounts, fpLFSCkpntoffs=fpLFSCkpntoffs, npTCPCurrEstab=npTCPCurrEstab, fabLunTable=fabLunTable, hrDeviceNonVolatileMemory=hrDeviceNonVolatileMemory, npIfType=npIfType, fpLFSGetattrs=fpLFSGetattrs, hrPrinterDetectedErrorState=hrPrinterDetectedErrorState, hrPartitionLabel=hrPartitionLabel, fabTargetEntry=fabTargetEntry, hrStorageFixedDisk=hrStorageFixedDisk, trapFSDegradationMsg=trapFSDegradationMsg, fpLFSSetattrs=fpLFSSetattrs, hrStorageAllocationUnits=hrStorageAllocationUnits, fpLFSDiagnostics=fpLFSDiagnostics, fpDNLCTStatTable=fpDNLCTStatTable, fpPageStatTable=fpPageStatTable, fpPAGECachehit=fpPAGECachehit, npIPInDelivers=npIPInDelivers, npTCPTable=npTCPTable, fpBUFResid=fpBUFResid, npIfOutDiscards=npIfOutDiscards, fpInodeTable=fpInodeTable, fileSystemDegradationTrap=fileSystemDegradationTrap, npICMPOutDestUnreachs=npICMPOutDestUnreachs, npIfInUnknownProto=npIfInUnknownProto, fpLFSEntry=fpLFSEntry, hrStorageVirtualMemory=hrStorageVirtualMemory, KBytes=KBytes, hrDeviceEntry=hrDeviceEntry, fpLFSWrites=fpLFSWrites, npTCPActiveOpens=npTCPActiveOpens, axFP=axFP, fabSlotNum=fabSlotNum, axProductInfo=axProductInfo, hrFSUnknown=hrFSUnknown, npIPFragCreates=npIPFragCreates, fpLFSFsstats=fpLFSFsstats, npSMBBytesSent=npSMBBytesSent, npTable=npTable, hrDeviceProcessor=hrDeviceProcessor, hrStorage=hrStorage, npICMPOutMsgs=npICMPOutMsgs, npUDPTable=npUDPTable, hrProcessorLoad=hrProcessorLoad, hrSystemDate=hrSystemDate, axNP=axNP, npIfInErrors=npIfInErrors, npTCPOutRsts=npTCPOutRsts, npICMPOutTimestamps=npICMPOutTimestamps, fpDNLCPurgevp=fpDNLCPurgevp, ldReadIO=ldReadIO, npICMPOutEchos=npICMPOutEchos, npUDPInDatagrams=npUDPInDatagrams, trapFCLossOfLinkFailure=trapFCLossOfLinkFailure, fpBUFLwrites=fpBUFLwrites, npIPReasmOKs=npIPReasmOKs, fpLFSReadlinks=fpLFSReadlinks, hrStorageType=hrStorageType, npICMPOutParmProbs=npICMPOutParmProbs, npIfOutErrors=npIfOutErrors, hrDeviceStatus=hrDeviceStatus, fpLFSCreates=fpLFSCreates, trapLunDisappearTimeStamp=trapLunDisappearTimeStamp, hrDeviceModem=hrDeviceModem, fabAdptTable=fabAdptTable, hrPartitionSize=hrPartitionSize, hrDiskStorageRemoveble=hrDiskStorageRemoveble, hrFSAppleshare=hrFSAppleshare, hrStorageDescr=hrStorageDescr, fabTargetAliasName=fabTargetAliasName, npTCPEstabResets=npTCPEstabResets, fabTargetAdapterNum=fabTargetAdapterNum, hrPrinterTable=hrPrinterTable, npICMPInRedirects=npICMPInRedirects, fpBufferStatTable=fpBufferStatTable, npSMBBytesRcvd=npSMBBytesRcvd, trapFSFullTimeStamp=trapFSFullTimeStamp, hrStorageFloppyDisk=hrStorageFloppyDisk, npIfOutOctets=npIfOutOctets, hrDiskStorageTable=hrDiskStorageTable, VendorName=VendorName, axTrapData=axTrapData, fpLFSMkdirs=fpLFSMkdirs, hrFSType=hrFSType, npIfOutUcastPkts=npIfOutUcastPkts, npTCPAttemptFails=npTCPAttemptFails, fpBUFLreads=fpBUFLreads, trapFCLossOfLinkFailureTimeStamp=trapFCLossOfLinkFailureTimeStamp, fpLFSMknods=fpLFSMknods, fpDNLCConflict=fpDNLCConflict, npICMPInMsgs=npICMPInMsgs, npICMPInErrors=npICMPInErrors, npIfInUcastPkts=npIfInUcastPkts, hrFSNTFS=hrFSNTFS, npIPInReceives=npIPInReceives, fabLunEntry=fabLunEntry, fpLFSClears=fpLFSClears, ldSectorReads=ldSectorReads, npEntry=npEntry, npICMPInAddrMaskReps=npICMPInAddrMaskReps, fpLFSIsolateFs=fpLFSIsolateFs, ldDriveErrors=ldDriveErrors, trapFCAdptLinkFailureMsg=trapFCAdptLinkFailureMsg, fabIndex=fabIndex, hrDeviceVolatileMemory=hrDeviceVolatileMemory, hrStorageRam=hrStorageRam, fabNumOfTargets=fabNumOfTargets, hrSystemUptime=hrSystemUptime, hrPrinterEntry=hrPrinterEntry, npIndex=npIndex, fabTargetIndex=fabTargetIndex, npIfInOctets=npIfInOctets, fabLunTarNumber=fabLunTarNumber, npTCPRetransSegs=npTCPRetransSegs, hrFSAFS=hrFSAFS, npIPInHdrErrors=npIPInHdrErrors, fabRevisionId=fabRevisionId, fpBUFBufsize=fpBUFBufsize, hrSystemMaxProcesses=hrSystemMaxProcesses, fpLFSRemoves=fpLFSRemoves, fcLinkFailureTrap=fcLinkFailureTrap, fpFSEntry=fpFSEntry, fpLFSRenames=fpLFSRenames, hrFSHFS=hrFSHFS, hrFSRockRidge=hrFSRockRidge, npSMBErrors=npSMBErrors, hrDeviceIndex=hrDeviceIndex, fabAdptNumber=fabAdptNumber, hrStorageRemovableDisk=hrStorageRemovableDisk, hrFSSys5FS=hrFSSys5FS, fpDNLCPurgevfsp=fpDNLCPurgevfsp, npIPEntry=npIPEntry, npICMPInAddrMasks=npICMPInAddrMasks, trapDiskTimeStamp=trapDiskTimeStamp, npICMPInEchos=npICMPInEchos, hrPartitionEntry=hrPartitionEntry, fabLunType=fabLunType, hrFSStorageIndex=hrFSStorageIndex, hrStorageTypes=hrStorageTypes, fspIndex=fspIndex, npTCPEntry=npTCPEntry, fabLunAlias=fabLunAlias, fpSyncinodes=fpSyncinodes, trapFSFullMsg=trapFSFullMsg, hrStorageTable=hrStorageTable, hrDeviceNetwork=hrDeviceNetwork, npICMPOutTimeExcds=npICMPOutTimeExcds, fabTargetNumOfLuns=fabTargetNumOfLuns, npIfOperStatus=npIfOperStatus, hrFSNFS=hrFSNFS, hrDevicePrinter=hrDevicePrinter, hrDeviceCoprocessor=hrDeviceCoprocessor, hrFSJournaled=hrFSJournaled, fabLunMapEntry=fabLunMapEntry, npIPReasmTimeout=npIPReasmTimeout, hrMemorySize=hrMemorySize, trapLunSizeChangeMsg=trapLunSizeChangeMsg, npICMPOutEchoReps=npICMPOutEchoReps, axSP=axSP, RaidLevel=RaidLevel, ldMediaErrors=ldMediaErrors, npIPInDiscards=npIPInDiscards, fspIdleCount=fspIdleCount, fpLFSCkpntons=fpLFSCkpntons, npTCPMaxConn=npTCPMaxConn, fabLunAdptNumber=fabLunAdptNumber, netServer=netServer, npSMBLocksHeld=npSMBLocksHeld, RebuildFlag=RebuildFlag, axProductName=axProductName, trapFCAdptLinkUpMsg=trapFCAdptLinkUpMsg, hrStorageEntry=hrStorageEntry, fabLogDevEntry=fabLogDevEntry, hrSystem=hrSystem)
mibBuilder.exportSymbols("NETSERVER-MIB", trapLunSizeChange=trapLunSizeChange, npTCPInSegs=npTCPInSegs, fpDNLCSEntry=fpDNLCSEntry, diskStackUpdationTrap=diskStackUpdationTrap, npIPFragOKs=npIPFragOKs, trapFSDegradationTimeStamp=trapFSDegradationTimeStamp, fpPAGEWritehit=fpPAGEWritehit, npUDPNoPorts=npUDPNoPorts, fpPAGEOutputpage=fpPAGEOutputpage, npBusyCount=npBusyCount, hrFSiso9660=hrFSiso9660, InternationalDisplayString=InternationalDisplayString, npIfSpeed=npIfSpeed, hrPartitionTable=hrPartitionTable, fpBUFBreads=fpBUFBreads, ldWriteIO=ldWriteIO, hrFSMountPoint=hrFSMountPoint, fpLFSIsolationStates=fpLFSIsolationStates, fpCacheinodes=fpCacheinodes, trapLunSizeChangeTimeStamp=trapLunSizeChangeTimeStamp, trapDiskMsg=trapDiskMsg, hrStorageUsed=hrStorageUsed, npTCPPassiveOpens=npTCPPassiveOpens, auspex=auspex, fpBufferEntry=fpBufferEntry, npIPOutRequests=npIPOutRequests, lunDisappearTrap=lunDisappearTrap, npICMPInDestUnreachs=npICMPInDestUnreachs, npIPRoutingDiscards=npIPRoutingDiscards, fpLFSUMounts=fpLFSUMounts, fspTable=fspTable, fabAdptEntry=fabAdptEntry, fabWWN=fabWWN, fpHrFSIndex=fpHrFSIndex, hrFSRFS=hrFSRFS, BusType=BusType, fpDNLCHit=fpDNLCHit, fpPAGECachemiss=fpPAGECachemiss, hrFSIndex=hrFSIndex, npICMPOutAddrMasks=npICMPOutAddrMasks, npIfOutNUcastPkts=npIfOutNUcastPkts, npIfInDiscards=npIfInDiscards, fpTotalinodes=fpTotalinodes, npICMPInParmProbs=npICMPInParmProbs, fpINODEIgetcalls=fpINODEIgetcalls, fpPAGEOutcnt=fpPAGEOutcnt, trapFSFull=trapFSFull, npTCPRtoMin=npTCPRtoMin, hrDiskStorageMedia=hrDiskStorageMedia, fabVendorId=fabVendorId, fspEntry=fspEntry, ldTotalTime=ldTotalTime, fpFileSystemTable=fpFileSystemTable, fabIntPin=fabIntPin, fabLunMapWWN=fabLunMapWWN, fpLFSReaddirs=fpLFSReaddirs, fpLFSVersion=fpLFSVersion, npICMPTable=npICMPTable, fpLFSReaddirPluses=fpLFSReaddirPluses, fpPageEntry=fpPageEntry, hrSystemInitialLoadDevice=hrSystemInitialLoadDevice, fpPAGEOutscan=fpPAGEOutscan, fpPAGEFsflushscan=fpPAGEFsflushscan, npIPInUnknownProtos=npIPInUnknownProtos, fpHTFS=fpHTFS, fcLinkUpTrap=fcLinkUpTrap, npIfAdminStatus=npIfAdminStatus, npIPOutDiscards=npIPOutDiscards, fabRaid=fabRaid, hrPartitionFSIndex=hrPartitionFSIndex, npICMPOutErrors=npICMPOutErrors, trapFSDegradation=trapFSDegradation, npIfEntry=npIfEntry, trapFCAdptLinkUpTimeStamp=trapFCAdptLinkUpTimeStamp, npNFSEntry=npNFSEntry, npSMBReads=npSMBReads, fpPAGEZcref=fpPAGEZcref, fpLFSReads=fpLFSReads, npTCPOutSegs=npTCPOutSegs, fabLunWWN=fabLunWWN, npNFSDCounts=npNFSDCounts, fabLunMNumber=fabLunMNumber, hrDeviceVideo=hrDeviceVideo, fabLunMapTable=fabLunMapTable, hrDevice=hrDevice, fpFoundinodes=fpFoundinodes, fabTargetTable=fabTargetTable, hrDeviceType=hrDeviceType, npIfOutCollisions=npIfOutCollisions, fpLFSLookups=fpLFSLookups, trapFCAdptLinkUp=trapFCAdptLinkUp, hrPrinterStatus=hrPrinterStatus, hrFSOther=hrFSOther, host=host, fpDNLCMiss=fpDNLCMiss, npSMBOpens=npSMBOpens, hrDevicePointing=hrDevicePointing, fpPAGEZcbreak=fpPAGEZcbreak, npTCPRtoMax=npTCPRtoMax, hrDeviceTape=hrDeviceTape, hrFSAccess=hrFSAccess, hrProcessorFrwID=hrProcessorFrwID, hrSystemNumUsers=hrSystemNumUsers, fpPAGEFsflushputpage=fpPAGEFsflushputpage, fspBusyCount=fspBusyCount, fabPCIBusNum=fabPCIBusNum, hrNetworkIfIndex=hrNetworkIfIndex, hrNetworkTable=hrNetworkTable, fpLFSNull=fpLFSNull, fpLFSFsinfo=fpLFSFsinfo, hrPartitionID=hrPartitionID, npICMPInTimeExcds=npICMPInTimeExcds, trapLunDisappearMsg=trapLunDisappearMsg, npIfInNUcastPkts=npIfInNUcastPkts, npSMBWrites=npSMBWrites, npIfOutQLen=npIfOutQLen, trapLunDisappear=trapLunDisappear, ControllerType=ControllerType, hrDiskStorageEntry=hrDiskStorageEntry, npICMPOutSrcQuenchs=npICMPOutSrcQuenchs, hrDeviceAudio=hrDeviceAudio, npICMPInTimestamps=npICMPInTimestamps, npUDPEntry=npUDPEntry, hrStorageIndex=hrStorageIndex, npNFSDNJobs=npNFSDNJobs, fpInodeEntry=fpInodeEntry, fabTargetWWN=fabTargetWWN, fabLunSize=fabLunSize, fpLFSPurges=fpLFSPurges, fpLFSRmdirs=fpLFSRmdirs, fpPAGECachelistcnt=fpPAGECachelistcnt, npIPDefaultTTL=npIPDefaultTTL, npICMPOutRedirects=npICMPOutRedirects, npIfIndex=npIfIndex, hrFSHPFS=hrFSHPFS, npUDPOutDatagrams=npUDPOutDatagrams, U16Bits=U16Bits, spRaid=spRaid, fpBUFIOwaits=fpBUFIOwaits, hrSystemInitialLoadParameters=hrSystemInitialLoadParameters, hrProcessorEntry=hrProcessorEntry, fpLFSLinks=fpLFSLinks, hrFSNetware=hrFSNetware, fabLunMapIndex=fabLunMapIndex, hrFSBootable=hrFSBootable, hrDiskStorageCapacity=hrDiskStorageCapacity, hrFSEntry=hrFSEntry, trapDiskUpdation=trapDiskUpdation, hrFSVNode=hrFSVNode, npICMPInEchoReps=npICMPInEchoReps, fabType=fabType, npSMBCloses=npSMBCloses, ProductID=ProductID, npICMPEntry=npICMPEntry, npUDPInErrors=npUDPInErrors, fpBUFBcount=fpBUFBcount, hrSystemProcesses=hrSystemProcesses, npTCPRtoAlgorithm=npTCPRtoAlgorithm, fabTargetNumber=fabTargetNumber, fabLunIndex=fabLunIndex, hrFSBFS=hrFSBFS, hrStorageOther=hrStorageOther, hrDeviceDiskStorage=hrDeviceDiskStorage, fpLFSTable=fpLFSTable, fabLogDevTable=fabLogDevTable, fpPAGEWritemiss=fpPAGEWritemiss, ldWBufReads=ldWBufReads, ldSectorWrites=ldSectorWrites, hrDeviceOther=hrDeviceOther, npIfTable=npIfTable, fileSystemFullTrap=fileSystemFullTrap, hrStorageCompactDisc=hrStorageCompactDisc, npIPForwarding=npIPForwarding)
