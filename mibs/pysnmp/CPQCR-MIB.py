#
# PySNMP MIB module CPQCR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQCR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:11:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
compaq, cpqHoTrapFlags = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, TimeTicks, Integer32, iso, Bits, ModuleIdentity, NotificationType, ObjectIdentity, IpAddress, NotificationType, Counter64, Gauge32, enterprises, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "TimeTicks", "Integer32", "iso", "Bits", "ModuleIdentity", "NotificationType", "ObjectIdentity", "IpAddress", "NotificationType", "Counter64", "Gauge32", "enterprises", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqClusteredRAID = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141))
cpqCrMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 1))
cpqCrComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 2))
cpqCrTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 3))
cpqCrInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 2, 1))
cpqCrCntlr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 2, 2))
cpqCrLogDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 2, 3))
cpqCrSpareDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 2, 4))
cpqCrPhyDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 2, 5))
cpqCrEMU = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 2, 7))
cpqCrExpCab = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 2, 8))
cpqCrPartition = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 2, 9))
cpqCrOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 2, 1, 4))
cpqCrInterfaceTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 3, 1))
cpqCrCntlrTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 3, 2))
cpqCrLogDrvTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 3, 3))
cpqCrSpareDrvTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 3, 4))
cpqCrPhyDrvTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 3, 5))
cpqCrEMUTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 3, 7))
cpqCrExpCabTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 141, 3, 8))
cpqCrMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrMibRevMajor.setStatus('mandatory')
cpqCrMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrMibRevMinor.setStatus('mandatory')
cpqCrMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrMibCondition.setStatus('mandatory')
cpqCrOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpqCrOsCommonPollFreq.setStatus('mandatory')
cpqCrCntlrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1), )
if mibBuilder.loadTexts: cpqCrCntlrTable.setStatus('mandatory')
cpqCrCntlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1, 1), ).setIndexNames((0, "CPQCR-MIB", "cpqCrCntlrIndex"))
if mibBuilder.loadTexts: cpqCrCntlrEntry.setStatus('mandatory')
cpqCrCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrCntlrIndex.setStatus('mandatory')
cpqCrCntlrSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrCntlrSerialNumber.setStatus('mandatory')
cpqCrCntlrFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrCntlrFWRev.setStatus('mandatory')
cpqCrCntlrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrCntlrCondition.setStatus('mandatory')
cpqCrCntlrCurrentRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notDuplexed", 2), ("active", 3), ("backup", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrCntlrCurrentRole.setStatus('mandatory')
cpqCrCntlrDriveOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("owner", 2), ("notOwner", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrCntlrDriveOwnership.setStatus('mandatory')
cpqCrCntlrRebuildRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrCntlrRebuildRate.setStatus('mandatory')
cpqCrCntlrCreateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrCntlrCreateRate.setStatus('mandatory')
cpqCrCntlrCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrCntlrCacheSize.setStatus('mandatory')
cpqCrCntlrSimmSizeA = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrCntlrSimmSizeA.setStatus('mandatory')
cpqCrCntlrSimmSizeB = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrCntlrSimmSizeB.setStatus('mandatory')
cpqCrLogDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 141, 2, 3, 1), )
if mibBuilder.loadTexts: cpqCrLogDrvTable.setStatus('mandatory')
cpqCrLogDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 141, 2, 3, 1, 1), ).setIndexNames((0, "CPQCR-MIB", "cpqCrLogDrvCntlrIndex"), (0, "CPQCR-MIB", "cpqCrLogDrvIndex"))
if mibBuilder.loadTexts: cpqCrLogDrvEntry.setStatus('mandatory')
cpqCrLogDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrLogDrvCntlrIndex.setStatus('mandatory')
cpqCrLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrLogDrvIndex.setStatus('mandatory')
cpqCrLogDrvRAIDLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("jbod", 2), ("raid0", 3), ("raid1", 4), ("raid0plus1", 5), ("raid4", 6), ("raid5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrLogDrvRAIDLevel.setStatus('mandatory')
cpqCrLogDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("good", 2), ("reduced", 3), ("failed", 4), ("reconstructing", 5), ("initializing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrLogDrvStatus.setStatus('mandatory')
cpqCrLogDrvRebuildPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrLogDrvRebuildPercentage.setStatus('mandatory')
cpqCrLogDrvAvailSpares = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrLogDrvAvailSpares.setStatus('mandatory')
cpqCrLogDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrLogDrvSize.setStatus('mandatory')
cpqCrLogDrvPhyDrvIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrLogDrvPhyDrvIDs.setStatus('mandatory')
cpqCrLogDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrLogDrvCondition.setStatus('mandatory')
cpqCrLogDrvPartitionIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrLogDrvPartitionIDs.setStatus('mandatory')
cpqCrSpareTable = MibTable((1, 3, 6, 1, 4, 1, 232, 141, 2, 4, 1), )
if mibBuilder.loadTexts: cpqCrSpareTable.setStatus('mandatory')
cpqCrSpareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 141, 2, 4, 1, 1), ).setIndexNames((0, "CPQCR-MIB", "cpqCrSpareCntlrIndex"), (0, "CPQCR-MIB", "cpqCrSparePhyDrvIndex"))
if mibBuilder.loadTexts: cpqCrSpareEntry.setStatus('mandatory')
cpqCrSpareCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrSpareCntlrIndex.setStatus('mandatory')
cpqCrSparePhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrSparePhyDrvIndex.setStatus('mandatory')
cpqCrSpareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("empty", 2), ("offline", 3), ("online", 4), ("hotSpare", 5), ("warmSpare", 6), ("creating", 7), ("rebuilding", 8), ("addingSpare", 9), ("formatting", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrSpareStatus.setStatus('mandatory')
cpqCrSpareCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrSpareCondition.setStatus('mandatory')
cpqCrSpareScsiID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrSpareScsiID.setStatus('mandatory')
cpqCrPhyDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 141, 2, 5, 1), )
if mibBuilder.loadTexts: cpqCrPhyDrvTable.setStatus('mandatory')
cpqCrPhyDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 141, 2, 5, 1, 1), ).setIndexNames((0, "CPQCR-MIB", "cpqCrPhyDrvCntlrIndex"), (0, "CPQCR-MIB", "cpqCrPhyDrvIndex"))
if mibBuilder.loadTexts: cpqCrPhyDrvEntry.setStatus('mandatory')
cpqCrPhyDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPhyDrvCntlrIndex.setStatus('mandatory')
cpqCrPhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPhyDrvIndex.setStatus('mandatory')
cpqCrPhyDrvVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPhyDrvVendor.setStatus('mandatory')
cpqCrPhyDrvModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPhyDrvModel.setStatus('mandatory')
cpqCrPhyDrvRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPhyDrvRevision.setStatus('mandatory')
cpqCrPhyDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("empty", 2), ("offline", 3), ("online", 4), ("hotSpare", 5), ("warmSpare", 6), ("creating", 7), ("rebuilding", 8), ("addingSpare", 9), ("formatting", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPhyDrvStatus.setStatus('mandatory')
cpqCrPhyDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPhyDrvSize.setStatus('mandatory')
cpqCrPhyDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPhyDrvCondition.setStatus('mandatory')
cpqCrPhyDrvScsiID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPhyDrvScsiID.setStatus('mandatory')
cpqCrEMUBoardTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("emuBoardTempNotInstalled", 2), ("emuBoardTempNormal", 3), ("emuBoardTempBelowNormal", 4), ("emuBoardTempAboveNormal", 5), ("emuBoardTempFarBelowNormal", 6), ("emuBoardTempFarAboveNormal", 7), ("emuBoardTempBackToNormal", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrEMUBoardTemperatureStatus.setStatus('deprecated')
cpqCrEMUEnclosureTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("emuEnclosureTempNotInstalled", 2), ("emuEnclosureTempNormal", 3), ("emuEnclosureTempBelowNormal", 4), ("emuEnclosureTempAboveNormal", 5), ("emuEnclosureTempFarBelowNormal", 6), ("emuEnclosureTempFarAboveNormal", 7), ("emuEnclosureTempBackToNormal", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrEMUEnclosureTemperatureStatus.setStatus('deprecated')
cpqCrEMUBoardTemperatureLevel = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrEMUBoardTemperatureLevel.setStatus('deprecated')
cpqCrEMUEnclosureTemperatureLevel = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrEMUEnclosureTemperatureLevel.setStatus('deprecated')
cpqCrEMUCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrEMUCondition.setStatus('mandatory')
cpqCrEMUFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("emuFanOK", 2), ("emuFanCritical", 3), ("emuFanUnknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrEMUFanStatus.setStatus('mandatory')
cpqCrEMUFanCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrEMUFanCondition.setStatus('mandatory')
cpqCrEMUPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("emuPwrSupplyOK", 2), ("emuPwrSupplyCritical", 3), ("emuPwrSupplyNotInstalled", 4), ("emuPwrSupplyUnknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrEMUPowerSupplyStatus.setStatus('mandatory')
cpqCrEMUPowerSupplyCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrEMUPowerSupplyCondition.setStatus('mandatory')
cpqCrEMUTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("emuTempOK", 2), ("emuTempCritical", 3), ("emuTempNonCritical", 4), ("emuTempUnknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrEMUTemperatureStatus.setStatus('mandatory')
cpqCrEMUTemperatureLevel = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 7, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrEMUTemperatureLevel.setStatus('mandatory')
cpqCrEMUTemperatureCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 7, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrEMUTemperatureCondition.setStatus('mandatory')
cpqCrExpCabPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("other", 1), ("expCabPwrSupplyOK", 2), ("expCabPwrSupplyNonCritical", 3), ("expCabPwrSupplyUnknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrExpCabPowerSupplyStatus.setStatus('mandatory')
cpqCrExpCabFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("expCabFanOK", 2), ("expCabFanNonCritical", 4), ("expCabFanNotInstalled", 5), ("expCabFanUnknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrExpCabFanStatus.setStatus('mandatory')
cpqCrExpCabTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("expCabTempOK", 2), ("expCabTempCritical", 3), ("expCabTempNonCritical", 4), ("expCabTempNotInstalled", 5), ("expCabTempUnknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrExpCabTemperatureStatus.setStatus('mandatory')
cpqCrExpCabCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrExpCabCondition.setStatus('mandatory')
cpqCrExpCabPowerSupplyCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrExpCabPowerSupplyCondition.setStatus('mandatory')
cpqCrExpCabFanCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrExpCabFanCondition.setStatus('mandatory')
cpqCrExpCabTemperatureCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 141, 2, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrExpCabTemperatureCondition.setStatus('mandatory')
cpqCrPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 232, 141, 2, 9, 1), )
if mibBuilder.loadTexts: cpqCrPartitionTable.setStatus('mandatory')
cpqCrPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 141, 2, 9, 1, 1), ).setIndexNames((0, "CPQCR-MIB", "cpqCrPartitionLogDrvIndex"), (0, "CPQCR-MIB", "cpqCrPartitionIndex"))
if mibBuilder.loadTexts: cpqCrPartitionEntry.setStatus('mandatory')
cpqCrPartitionLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPartitionLogDrvIndex.setStatus('mandatory')
cpqCrPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPartitionIndex.setStatus('mandatory')
cpqCrPartitionRAIDLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("jbod", 2), ("raid0", 3), ("raid1", 4), ("raid0plus1", 5), ("raid4", 6), ("raid5", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPartitionRAIDLevel.setStatus('mandatory')
cpqCrPartitionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("good", 2), ("reduced", 3), ("failed", 4), ("reconstructing", 5), ("initializing", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPartitionStatus.setStatus('mandatory')
cpqCrPartitionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPartitionSize.setStatus('mandatory')
cpqCrPartitionCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 141, 2, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpqCrPartitionCondition.setStatus('mandatory')
cpqCrController1FailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 2) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrController1InformationTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 2) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrController2FailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 2) + (0,3)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrController2InformationTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 2) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrLogDriveInformationTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 3) + (0,5)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrLogDrvIndex"))
cpqCrLogDriveFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 3) + (0,6)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrLogDrvIndex"))
cpqCrLogDriveReconstructTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 3) + (0,7)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrLogDrvIndex"))
cpqCrLogDriveReducedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 3) + (0,8)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrLogDrvIndex"))
cpqCrLogDriveInitializingTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 3) + (0,9)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrLogDrvIndex"))
cpqCrDiskInformationTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 5) + (0,10)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrPhyDrvCntlrIndex"), ("CPQCR-MIB", "cpqCrPhyDrvIndex"))
cpqCrDiskFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 5) + (0,11)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrPhyDrvCntlrIndex"), ("CPQCR-MIB", "cpqCrPhyDrvIndex"))
cpqCrDiskReconstructTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 5) + (0,12)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrPhyDrvIndex"))
cpqCrDiskAvailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 5) + (0,13)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrPhyDrvIndex"))
cpqCrDiskSpareTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 5) + (0,14)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrPhyDrvIndex"))
cpqCrPhyDiskInformationTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 5) + (0,30)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrPhyDrvScsiID"))
cpqCrPhyDiskFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 5) + (0,31)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrPhyDrvScsiID"))
cpqCrPhyDiskReconstructTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 5) + (0,32)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrPhyDrvScsiID"))
cpqCrPhyDiskAvailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 5) + (0,33)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrPhyDrvScsiID"))
cpqCrPhyDiskSpareTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 5) + (0,34)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQCR-MIB", "cpqCrSpareScsiID"))
cpqCrEMUNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 7) + (0,15)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrEMUFanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 7) + (0,16)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrEMUFanInformationTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 7) + (0,17)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrEMUPowerSupplyFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 7) + (0,18)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrEMUPowerSupplyInformationTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 7) + (0,19)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrEMUTemperatureWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 7) + (0,23)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrEMUTemperatureCriticalTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 7) + (0,24)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrEMUTemperatureInformationTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 7) + (0,25)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrExpCabFanFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 8) + (0,20)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrExpCabFanInformationTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 8) + (0,21)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrExpCabPowerSupplyFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 8) + (0,22)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrExpCabPowerSupplyInformationTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 8) + (0,29)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrExpCabTemperatureWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 8) + (0,26)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrExpCabTemperatureCriticalTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 8) + (0,27)).setObjects(("SNMPv2-MIB", "sysName"))
cpqCrExpCabTemperatureInformationTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 141, 3, 8) + (0,28)).setObjects(("SNMPv2-MIB", "sysName"))
mibBuilder.exportSymbols("CPQCR-MIB", cpqCrPhyDrvScsiID=cpqCrPhyDrvScsiID, cpqCrEMUEnclosureTemperatureStatus=cpqCrEMUEnclosureTemperatureStatus, cpqCrPhyDrvEntry=cpqCrPhyDrvEntry, cpqCrPhyDrv=cpqCrPhyDrv, cpqCrCntlrCurrentRole=cpqCrCntlrCurrentRole, cpqCrPhyDrvTrap=cpqCrPhyDrvTrap, cpqCrCntlrEntry=cpqCrCntlrEntry, cpqCrPartitionTable=cpqCrPartitionTable, cpqCrEMUTrap=cpqCrEMUTrap, cpqCrExpCabTemperatureCriticalTrap=cpqCrExpCabTemperatureCriticalTrap, cpqCrPhyDrvIndex=cpqCrPhyDrvIndex, cpqCrCntlr=cpqCrCntlr, cpqClusteredRAID=cpqClusteredRAID, cpqCrLogDrvPhyDrvIDs=cpqCrLogDrvPhyDrvIDs, cpqCrExpCabPowerSupplyInformationTrap=cpqCrExpCabPowerSupplyInformationTrap, cpqCrController1InformationTrap=cpqCrController1InformationTrap, cpqCrPhyDrvStatus=cpqCrPhyDrvStatus, cpqCrCntlrRebuildRate=cpqCrCntlrRebuildRate, cpqCrPhyDiskAvailableTrap=cpqCrPhyDiskAvailableTrap, cpqCrEMUTemperatureLevel=cpqCrEMUTemperatureLevel, cpqCrEMUBoardTemperatureLevel=cpqCrEMUBoardTemperatureLevel, cpqCrPhyDrvVendor=cpqCrPhyDrvVendor, cpqCrLogDrvIndex=cpqCrLogDrvIndex, cpqCrSpareDrv=cpqCrSpareDrv, cpqCrMibRev=cpqCrMibRev, cpqCrExpCabTemperatureWarningTrap=cpqCrExpCabTemperatureWarningTrap, cpqCrEMUTemperatureCriticalTrap=cpqCrEMUTemperatureCriticalTrap, cpqCrCntlrIndex=cpqCrCntlrIndex, cpqCrLogDrvEntry=cpqCrLogDrvEntry, cpqCrPartitionRAIDLevel=cpqCrPartitionRAIDLevel, cpqCrDiskSpareTrap=cpqCrDiskSpareTrap, cpqCrEMUEnclosureTemperatureLevel=cpqCrEMUEnclosureTemperatureLevel, cpqCrExpCabTrap=cpqCrExpCabTrap, cpqCrSparePhyDrvIndex=cpqCrSparePhyDrvIndex, cpqCrEMUPowerSupplyStatus=cpqCrEMUPowerSupplyStatus, cpqCrLogDrvAvailSpares=cpqCrLogDrvAvailSpares, cpqCrPartition=cpqCrPartition, cpqCrDiskInformationTrap=cpqCrDiskInformationTrap, cpqCrInterfaceTrap=cpqCrInterfaceTrap, cpqCrLogDrvCondition=cpqCrLogDrvCondition, cpqCrSpareScsiID=cpqCrSpareScsiID, cpqCrEMUFanCondition=cpqCrEMUFanCondition, cpqCrDiskAvailableTrap=cpqCrDiskAvailableTrap, cpqCrLogDrvCntlrIndex=cpqCrLogDrvCntlrIndex, cpqCrSpareCntlrIndex=cpqCrSpareCntlrIndex, cpqCrEMUNormalTrap=cpqCrEMUNormalTrap, cpqCrExpCabPowerSupplyStatus=cpqCrExpCabPowerSupplyStatus, cpqCrCntlrFWRev=cpqCrCntlrFWRev, cpqCrPhyDiskSpareTrap=cpqCrPhyDiskSpareTrap, cpqCrCntlrSimmSizeB=cpqCrCntlrSimmSizeB, cpqCrPhyDrvCntlrIndex=cpqCrPhyDrvCntlrIndex, cpqCrExpCabPowerSupplyCondition=cpqCrExpCabPowerSupplyCondition, cpqCrPartitionEntry=cpqCrPartitionEntry, cpqCrPhyDiskFailureTrap=cpqCrPhyDiskFailureTrap, cpqCrPhyDrvModel=cpqCrPhyDrvModel, cpqCrEMU=cpqCrEMU, cpqCrExpCabTemperatureCondition=cpqCrExpCabTemperatureCondition, cpqCrLogDriveReducedTrap=cpqCrLogDriveReducedTrap, cpqCrCntlrSimmSizeA=cpqCrCntlrSimmSizeA, cpqCrCntlrCacheSize=cpqCrCntlrCacheSize, cpqCrCntlrDriveOwnership=cpqCrCntlrDriveOwnership, cpqCrExpCab=cpqCrExpCab, cpqCrEMUTemperatureWarningTrap=cpqCrEMUTemperatureWarningTrap, cpqCrInterface=cpqCrInterface, cpqCrController2FailureTrap=cpqCrController2FailureTrap, cpqCrLogDriveReconstructTrap=cpqCrLogDriveReconstructTrap, cpqCrPartitionStatus=cpqCrPartitionStatus, cpqCrEMUTemperatureInformationTrap=cpqCrEMUTemperatureInformationTrap, cpqCrMibRevMajor=cpqCrMibRevMajor, cpqCrLogDrvSize=cpqCrLogDrvSize, cpqCrEMUFanFailureTrap=cpqCrEMUFanFailureTrap, cpqCrLogDriveInformationTrap=cpqCrLogDriveInformationTrap, cpqCrSpareEntry=cpqCrSpareEntry, cpqCrCntlrCondition=cpqCrCntlrCondition, cpqCrExpCabTemperatureStatus=cpqCrExpCabTemperatureStatus, cpqCrDiskFailureTrap=cpqCrDiskFailureTrap, cpqCrPartitionLogDrvIndex=cpqCrPartitionLogDrvIndex, cpqCrLogDriveInitializingTrap=cpqCrLogDriveInitializingTrap, cpqCrExpCabCondition=cpqCrExpCabCondition, cpqCrPartitionCondition=cpqCrPartitionCondition, cpqCrMibRevMinor=cpqCrMibRevMinor, cpqCrController1FailureTrap=cpqCrController1FailureTrap, cpqCrEMUTemperatureCondition=cpqCrEMUTemperatureCondition, cpqCrComponent=cpqCrComponent, cpqCrEMUFanStatus=cpqCrEMUFanStatus, cpqCrLogDrvRAIDLevel=cpqCrLogDrvRAIDLevel, cpqCrPhyDiskReconstructTrap=cpqCrPhyDiskReconstructTrap, cpqCrEMUPowerSupplyInformationTrap=cpqCrEMUPowerSupplyInformationTrap, cpqCrSpareCondition=cpqCrSpareCondition, cpqCrExpCabTemperatureInformationTrap=cpqCrExpCabTemperatureInformationTrap, cpqCrOsCommonPollFreq=cpqCrOsCommonPollFreq, cpqCrLogDrvRebuildPercentage=cpqCrLogDrvRebuildPercentage, cpqCrLogDrvStatus=cpqCrLogDrvStatus, cpqCrExpCabFanInformationTrap=cpqCrExpCabFanInformationTrap, cpqCrEMUFanInformationTrap=cpqCrEMUFanInformationTrap, cpqCrExpCabFanStatus=cpqCrExpCabFanStatus, cpqCrController2InformationTrap=cpqCrController2InformationTrap, cpqCrEMUPowerSupplyCondition=cpqCrEMUPowerSupplyCondition, cpqCrTrap=cpqCrTrap, cpqCrCntlrTable=cpqCrCntlrTable, cpqCrPhyDiskInformationTrap=cpqCrPhyDiskInformationTrap, cpqCrSpareTable=cpqCrSpareTable, cpqCrDiskReconstructTrap=cpqCrDiskReconstructTrap, cpqCrExpCabFanFailureTrap=cpqCrExpCabFanFailureTrap, cpqCrPartitionIndex=cpqCrPartitionIndex, cpqCrEMUBoardTemperatureStatus=cpqCrEMUBoardTemperatureStatus, cpqCrOsCommon=cpqCrOsCommon, cpqCrLogDriveFailureTrap=cpqCrLogDriveFailureTrap, cpqCrLogDrvPartitionIDs=cpqCrLogDrvPartitionIDs, cpqCrPhyDrvCondition=cpqCrPhyDrvCondition, cpqCrExpCabFanCondition=cpqCrExpCabFanCondition, cpqCrCntlrTrap=cpqCrCntlrTrap, cpqCrMibCondition=cpqCrMibCondition, cpqCrPartitionSize=cpqCrPartitionSize, cpqCrPhyDrvTable=cpqCrPhyDrvTable, cpqCrSpareStatus=cpqCrSpareStatus, cpqCrSpareDrvTrap=cpqCrSpareDrvTrap, cpqCrLogDrv=cpqCrLogDrv, cpqCrCntlrCreateRate=cpqCrCntlrCreateRate, cpqCrLogDrvTrap=cpqCrLogDrvTrap, cpqCrPhyDrvRevision=cpqCrPhyDrvRevision, cpqCrPhyDrvSize=cpqCrPhyDrvSize, cpqCrLogDrvTable=cpqCrLogDrvTable, cpqCrEMUTemperatureStatus=cpqCrEMUTemperatureStatus, cpqCrCntlrSerialNumber=cpqCrCntlrSerialNumber, cpqCrEMUCondition=cpqCrEMUCondition, cpqCrEMUPowerSupplyFailureTrap=cpqCrEMUPowerSupplyFailureTrap, cpqCrExpCabPowerSupplyFailureTrap=cpqCrExpCabPowerSupplyFailureTrap)
