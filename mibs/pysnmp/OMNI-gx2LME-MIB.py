#
# PySNMP MIB module OMNI-gx2LME-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2LME-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:24:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
gx2LmE, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2LmE")
gi, motproxies = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "gi", "motproxies")
trapNetworkElemAdminState, trapChangedObjectId, trapPerceivedSeverity, trapNETrapLastTrapTimeStamp, trapNetworkElemAvailStatus, trapText, trapChangedValueInteger, trapChangedValueDisplayString, trapNetworkElemModelNumber, trapNetworkElemAlarmStatus, trapNetworkElemSerialNum, trapIdentifier, trapNetworkElemOperState = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState", "trapChangedObjectId", "trapPerceivedSeverity", "trapNETrapLastTrapTimeStamp", "trapNetworkElemAvailStatus", "trapText", "trapChangedValueInteger", "trapChangedValueDisplayString", "trapNetworkElemModelNumber", "trapNetworkElemAlarmStatus", "trapNetworkElemSerialNum", "trapIdentifier", "trapNetworkElemOperState")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, MibIdentifier, ModuleIdentity, Integer32, NotificationType, Gauge32, Counter32, TimeTicks, IpAddress, Bits, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Integer32", "NotificationType", "Gauge32", "Counter32", "TimeTicks", "IpAddress", "Bits", "ObjectIdentity", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2lmeDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 1))
gx2lmeAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2), )
if mibBuilder.loadTexts: gx2lmeAnalogTable.setStatus('mandatory')
gx2lmeAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1), ).setIndexNames((0, "OMNI-gx2LME-MIB", "gx2lmeAnalogTableIndex"))
if mibBuilder.loadTexts: gx2lmeAnalogEntry.setStatus('mandatory')
gx2lmeDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3), )
if mibBuilder.loadTexts: gx2lmeDigitalTable.setStatus('mandatory')
gx2lmeDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2), ).setIndexNames((0, "OMNI-gx2LME-MIB", "gx2lmeDigitalTableIndex"))
if mibBuilder.loadTexts: gx2lmeDigitalEntry.setStatus('mandatory')
gx2lmeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4), )
if mibBuilder.loadTexts: gx2lmeStatusTable.setStatus('mandatory')
gx2lmeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3), ).setIndexNames((0, "OMNI-gx2LME-MIB", "gx2lmeStatusTableIndex"))
if mibBuilder.loadTexts: gx2lmeStatusEntry.setStatus('mandatory')
gx2lmeFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5), )
if mibBuilder.loadTexts: gx2lmeFactoryTable.setStatus('mandatory')
gx2lmeFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4), ).setIndexNames((0, "OMNI-gx2LME-MIB", "gx2lmeFactoryTableIndex"))
if mibBuilder.loadTexts: gx2lmeFactoryEntry.setStatus('mandatory')
gx2Lm1000EHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 6), )
if mibBuilder.loadTexts: gx2Lm1000EHoldTimeTable.setStatus('mandatory')
gx2Lm1000EHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 6, 5), ).setIndexNames((0, "OMNI-gx2LME-MIB", "gx2Lm1000EHoldTimeTableIndex"), (0, "OMNI-gx2LME-MIB", "gx2Lm1000EHoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2Lm1000EHoldTimeEntry.setStatus('mandatory')
gx2lmeAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2lmeAnalogTableIndex.setStatus('mandatory')
lmelabelOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelOffsetNomMonitor.setStatus('optional')
lmeuomOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeuomOffsetNomMonitor.setStatus('optional')
lmemajorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorHighOffsetNomMonitor.setStatus('mandatory')
lmemajorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorLowOffsetNomMonitor.setStatus('mandatory')
lmeminorHighOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorHighOffsetNomMonitor.setStatus('mandatory')
lmeminorLowOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorLowOffsetNomMonitor.setStatus('mandatory')
lmecurrentValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmecurrentValueOffsetNomMonitor.setStatus('mandatory')
lmestateFlagOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateFlagOffsetNomMonitor.setStatus('mandatory')
lmeminValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminValueOffsetNomMonitor.setStatus('mandatory')
lmemaxValueOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemaxValueOffsetNomMonitor.setStatus('mandatory')
lmealarmStateOffsetNomMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmealarmStateOffsetNomMonitor.setStatus('mandatory')
lmelabelOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelOffsetNomCnt.setStatus('optional')
lmeuomOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeuomOffsetNomCnt.setStatus('optional')
lmemajorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorHighOffsetNomCnt.setStatus('mandatory')
lmemajorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorLowOffsetNomCnt.setStatus('mandatory')
lmeminorHighOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorHighOffsetNomCnt.setStatus('mandatory')
lmeminorLowOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorLowOffsetNomCnt.setStatus('mandatory')
lmecurrentValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 19), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmecurrentValueOffsetNomCnt.setStatus('mandatory')
lmestateFlagOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateFlagOffsetNomCnt.setStatus('mandatory')
lmeminValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminValueOffsetNomCnt.setStatus('mandatory')
lmemaxValueOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemaxValueOffsetNomCnt.setStatus('mandatory')
lmealarmStateOffsetNomCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmealarmStateOffsetNomCnt.setStatus('mandatory')
lmelabelRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelRelAttenSetting.setStatus('optional')
lmeuomRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeuomRelAttenSetting.setStatus('optional')
lmemajorHighRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorHighRelAttenSetting.setStatus('mandatory')
lmemajorLowRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorLowRelAttenSetting.setStatus('mandatory')
lmeminorHighRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorHighRelAttenSetting.setStatus('mandatory')
lmeminorLowRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorLowRelAttenSetting.setStatus('mandatory')
lmecurrentValueRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 30), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmecurrentValueRelAttenSetting.setStatus('mandatory')
lmestateFlagRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateFlagRelAttenSetting.setStatus('mandatory')
lmeminValueRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminValueRelAttenSetting.setStatus('mandatory')
lmemaxValueRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemaxValueRelAttenSetting.setStatus('mandatory')
lmealarmStateRelAttenSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmealarmStateRelAttenSetting.setStatus('mandatory')
lmelabelOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelOptPower.setStatus('optional')
lmeuomOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeuomOptPower.setStatus('optional')
lmemajorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorHighOptPower.setStatus('mandatory')
lmemajorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorLowOptPower.setStatus('mandatory')
lmeminorHighOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorHighOptPower.setStatus('mandatory')
lmeminorLowOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorLowOptPower.setStatus('mandatory')
lmecurrentValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmecurrentValueOptPower.setStatus('mandatory')
lmestateFlagOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateFlagOptPower.setStatus('mandatory')
lmeminValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminValueOptPower.setStatus('mandatory')
lmemaxValueOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemaxValueOptPower.setStatus('mandatory')
lmealarmStateOptPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmealarmStateOptPower.setStatus('mandatory')
lmelabelLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelLaserBias.setStatus('optional')
lmeuomLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeuomLaserBias.setStatus('optional')
lmemajorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorHighLaserBias.setStatus('mandatory')
lmemajorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorLowLaserBias.setStatus('mandatory')
lmeminorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorHighLaserBias.setStatus('mandatory')
lmeminorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorLowLaserBias.setStatus('mandatory')
lmecurrentValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmecurrentValueLaserBias.setStatus('mandatory')
lmestateFlagLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateFlagLaserBias.setStatus('mandatory')
lmeminValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminValueLaserBias.setStatus('mandatory')
lmemaxValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemaxValueLaserBias.setStatus('mandatory')
lmealarmStateLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmealarmStateLaserBias.setStatus('mandatory')
lmelabelTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelTecCurrent.setStatus('optional')
lmeuomTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeuomTecCurrent.setStatus('optional')
lmemajorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorHighTecCurrent.setStatus('mandatory')
lmemajorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorLowTecCurrent.setStatus('mandatory')
lmeminorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorHighTecCurrent.setStatus('mandatory')
lmeminorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorLowTecCurrent.setStatus('mandatory')
lmecurrentValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmecurrentValueTecCurrent.setStatus('mandatory')
lmestateFlagTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateFlagTecCurrent.setStatus('mandatory')
lmeminValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminValueTecCurrent.setStatus('mandatory')
lmemaxValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemaxValueTecCurrent.setStatus('mandatory')
lmealarmStateTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmealarmStateTecCurrent.setStatus('mandatory')
lmelabelLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelLaserTemp.setStatus('optional')
lmeuomLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeuomLaserTemp.setStatus('optional')
lmemajorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorHighLaserTemp.setStatus('mandatory')
lmemajorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorLowLaserTemp.setStatus('mandatory')
lmeminorHighLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorHighLaserTemp.setStatus('mandatory')
lmeminorLowLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorLowLaserTemp.setStatus('mandatory')
lmecurrentValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmecurrentValueLaserTemp.setStatus('mandatory')
lmestateFlagLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateFlagLaserTemp.setStatus('mandatory')
lmeminValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminValueLaserTemp.setStatus('mandatory')
lmemaxValueLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemaxValueLaserTemp.setStatus('mandatory')
lmealarmStateLaserTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmealarmStateLaserTemp.setStatus('mandatory')
lmelabelModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelModuleTemp.setStatus('optional')
lmeuomModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeuomModuleTemp.setStatus('optional')
lmemajorHighModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorHighModuleTemp.setStatus('mandatory')
lmemajorLowModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorLowModuleTemp.setStatus('mandatory')
lmeminorHighModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorHighModuleTemp.setStatus('mandatory')
lmeminorLowModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorLowModuleTemp.setStatus('mandatory')
lmecurrentValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmecurrentValueModuleTemp.setStatus('mandatory')
lmestateFlagModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateFlagModuleTemp.setStatus('mandatory')
lmeminValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminValueModuleTemp.setStatus('mandatory')
lmemaxValueModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemaxValueModuleTemp.setStatus('mandatory')
lmealarmStateModuleTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmealarmStateModuleTemp.setStatus('mandatory')
lmelabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelFanCurrent.setStatus('optional')
lmeuomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeuomFanCurrent.setStatus('optional')
lmemajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorHighFanCurrent.setStatus('mandatory')
lmemajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorLowFanCurrent.setStatus('mandatory')
lmeminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorHighFanCurrent.setStatus('mandatory')
lmeminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorLowFanCurrent.setStatus('mandatory')
lmecurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 96), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmecurrentValueFanCurrent.setStatus('mandatory')
lmestateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateFlagFanCurrent.setStatus('mandatory')
lmeminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminValueFanCurrent.setStatus('mandatory')
lmemaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemaxValueFanCurrent.setStatus('mandatory')
lmealarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmealarmStateFanCurrent.setStatus('mandatory')
lmelabel12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabel12Volt.setStatus('optional')
lmeuom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeuom12Volt.setStatus('optional')
lmemajorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 103), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorHigh12Volt.setStatus('mandatory')
lmemajorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 104), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemajorLow12Volt.setStatus('mandatory')
lmeminorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 105), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorHigh12Volt.setStatus('mandatory')
lmeminorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 106), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminorLow12Volt.setStatus('mandatory')
lmecurrentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 107), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmecurrentValue12Volt.setStatus('mandatory')
lmestateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateFlag12Volt.setStatus('mandatory')
lmeminValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 109), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeminValue12Volt.setStatus('mandatory')
lmemaxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 110), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmemaxValue12Volt.setStatus('mandatory')
lmealarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmealarmState12Volt.setStatus('mandatory')
gx2lmeDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2lmeDigitalTableIndex.setStatus('mandatory')
lmelabelRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelRfInput.setStatus('optional')
lmeenumRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeenumRfInput.setStatus('optional')
lmevalueRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmevalueRfInput.setStatus('mandatory')
lmestateflagRfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagRfInput.setStatus('mandatory')
lmelabelOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelOptOutput.setStatus('optional')
lmeenumOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeenumOptOutput.setStatus('optional')
lmevalueOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmevalueOptOutput.setStatus('mandatory')
lmestateflagOptOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagOptOutput.setStatus('mandatory')
lmelabelLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelLaserMode.setStatus('optional')
lmeenumLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeenumLaserMode.setStatus('optional')
lmevalueLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preset", 1), ("set", 2), ("setEquate", 3), ("manual", 4), ("manualEquate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmevalueLaserMode.setStatus('mandatory')
lmestateflagLaserMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagLaserMode.setStatus('mandatory')
lmelabelLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelLaserSecMode.setStatus('optional')
lmeenumLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeenumLaserSecMode.setStatus('optional')
lmevalueLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cw", 1), ("video", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmevalueLaserSecMode.setStatus('mandatory')
lmestateflagLaserSecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagLaserSecMode.setStatus('mandatory')
lmelabelVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelVideoOffset.setStatus('optional')
lmeenumVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeenumVideoOffset.setStatus('optional')
lmevalueVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("minus2dB", 1), ("minus3dB", 2), ("minus4dB", 3), ("minus5dB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmevalueVideoOffset.setStatus('mandatory')
lmestateflagVideoOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagVideoOffset.setStatus('mandatory')
lmelabelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelFactoryDefault.setStatus('optional')
lmeenumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeenumFactoryDefault.setStatus('optional')
lmevalueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmevalueFactoryDefault.setStatus('mandatory')
lmestateflagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagFactoryDefault.setStatus('mandatory')
lmelabelFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelFiberLength.setStatus('optional')
lmeenumFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeenumFiberLength.setStatus('optional')
lmevalueFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("fl6km", 1), ("fl7km", 2), ("fl8km", 3), ("fl9km", 4), ("fl10km", 5), ("fl11km", 6), ("fl12km", 7), ("fl13km", 8), ("fl14km", 9), ("fl15km", 10), ("fl16km", 11), ("fl17km", 12), ("fl18km", 13), ("fl19km", 14), ("fl20km", 15), ("fl21km", 16), ("fl22km", 17), ("fl23km", 18), ("fl24km", 19), ("fl25km", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmevalueFiberLength.setStatus('mandatory')
lmestateflagFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagFiberLength.setStatus('mandatory')
lmelabelConditioningUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelConditioningUnit.setStatus('optional')
lmeenumConditioningUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeenumConditioningUnit.setStatus('optional')
lmevalueConditioningUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lmevalueConditioningUnit.setStatus('mandatory')
lmestateflagConditioningUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 3, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagConditioningUnit.setStatus('mandatory')
gx2lmeStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2lmeStatusTableIndex.setStatus('mandatory')
lmelabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelBoot.setStatus('optional')
lmevalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmevalueBoot.setStatus('mandatory')
lmestateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagBoot.setStatus('mandatory')
lmelabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelFlash.setStatus('optional')
lmevalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmevalueFlash.setStatus('mandatory')
lmestateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagFlash.setStatus('mandatory')
lmelabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelFactoryDataCRC.setStatus('optional')
lmevalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmevalueFactoryDataCRC.setStatus('mandatory')
lmestateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagFactoryDataCRC.setStatus('mandatory')
lmelabelLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelLaserDataCRC.setStatus('optional')
lmevalueLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmevalueLaserDataCRC.setStatus('mandatory')
lmestateflagLaserDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagLaserDataCRC.setStatus('mandatory')
lmelabelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelAlarmDataCrc.setStatus('optional')
lmevalueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmevalueAlarmDataCrc.setStatus('mandatory')
lmestateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagAlarmDataCrc.setStatus('mandatory')
lmelabelHWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelHWStatus.setStatus('optional')
lmevalueHWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmevalueHWStatus.setStatus('mandatory')
lmestateflagHWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagHWStatus.setStatus('mandatory')
lmelabelRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmelabelRFInputStatus.setStatus('optional')
lmevalueRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmevalueRFInputStatus.setStatus('mandatory')
lmestateflagRFInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmestateflagRFInputStatus.setStatus('mandatory')
gx2lmeFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2lmeFactoryTableIndex.setStatus('mandatory')
lmebootControlByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmebootControlByteValue.setStatus('mandatory')
lmebootStatusByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmebootStatusByteValue.setStatus('mandatory')
lmebank1CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmebank1CRCValue.setStatus('mandatory')
lmebank2CRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmebank2CRCValue.setStatus('mandatory')
lmeprgEEPROMByteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeprgEEPROMByteValue.setStatus('mandatory')
lmefactoryCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmefactoryCRCValue.setStatus('mandatory')
lmecalculateCRCValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("laserData", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmecalculateCRCValue.setStatus('mandatory')
lmehourMeterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmehourMeterValue.setStatus('mandatory')
lmeflashPrgCntAValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeflashPrgCntAValue.setStatus('mandatory')
lmeflashPrgCntBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeflashPrgCntBValue.setStatus('mandatory')
lmeflashBankARevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeflashBankARevValue.setStatus('mandatory')
lmeflashBankBRevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmeflashBankBRevValue.setStatus('mandatory')
gx2Lm1000EHoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Lm1000EHoldTimeTableIndex.setStatus('mandatory')
gx2Lm1000EHoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Lm1000EHoldTimeSpecIndex.setStatus('mandatory')
gx2Lm1000EHoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gx2Lm1000EHoldTimeData.setStatus('mandatory')
trapLMEConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMERFInputAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMERFOverloadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMERFOffsetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEOpticalPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMELaserBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMELaserTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMETECCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEFanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLME12vAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMELaserBiasCntLoopAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEBankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMELaserBiasCntLoopInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMERFParamInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMETECParamInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEAttnTableInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEPowerMeterTableInitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMELaserDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEUserRFOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEUserOpticalOffAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
trapLMEResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 27) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
mibBuilder.exportSymbols("OMNI-gx2LME-MIB", gx2lmeAnalogTable=gx2lmeAnalogTable, lmelabelRelAttenSetting=lmelabelRelAttenSetting, trapLMERFOffsetAlarm=trapLMERFOffsetAlarm, trapLMEAttnTableInitAlarm=trapLMEAttnTableInitAlarm, lmelabelFactoryDefault=lmelabelFactoryDefault, lmemajorHighLaserBias=lmemajorHighLaserBias, lmelabelLaserBias=lmelabelLaserBias, lmemaxValueLaserTemp=lmemaxValueLaserTemp, lmestateFlagModuleTemp=lmestateFlagModuleTemp, lmeflashBankARevValue=lmeflashBankARevValue, lmemaxValue12Volt=lmemaxValue12Volt, trapLMEConfigChangeInteger=trapLMEConfigChangeInteger, lmemajorLow12Volt=lmemajorLow12Volt, trapLMERFParamInitAlarm=trapLMERFParamInitAlarm, lmemaxValueRelAttenSetting=lmemaxValueRelAttenSetting, trapLMEPowerMeterTableInitAlarm=trapLMEPowerMeterTableInitAlarm, lmemajorLowOptPower=lmemajorLowOptPower, lmevalueRFInputStatus=lmevalueRFInputStatus, lmefactoryCRCValue=lmefactoryCRCValue, lmeenumLaserMode=lmeenumLaserMode, lmeminValueModuleTemp=lmeminValueModuleTemp, lmeminorHighLaserTemp=lmeminorHighLaserTemp, lmemajorLowTecCurrent=lmemajorLowTecCurrent, trapLMEFanCurrentAlarm=trapLMEFanCurrentAlarm, lmevalueFiberLength=lmevalueFiberLength, lmemajorHighTecCurrent=lmemajorHighTecCurrent, lmeenumVideoOffset=lmeenumVideoOffset, lmevalueAlarmDataCrc=lmevalueAlarmDataCrc, lmeminorLowOffsetNomCnt=lmeminorLowOffsetNomCnt, lmelabelRfInput=lmelabelRfInput, lmestateflagHWStatus=lmestateflagHWStatus, lmeminorLow12Volt=lmeminorLow12Volt, lmestateFlag12Volt=lmestateFlag12Volt, gx2Lm1000EHoldTimeEntry=gx2Lm1000EHoldTimeEntry, trapLMELaserDataCRCAlarm=trapLMELaserDataCRCAlarm, trapLMEUserOpticalOffAlarm=trapLMEUserOpticalOffAlarm, lmeminorHighOptPower=lmeminorHighOptPower, lmemaxValueOffsetNomCnt=lmemaxValueOffsetNomCnt, lmealarmStateTecCurrent=lmealarmStateTecCurrent, gx2lmeDigitalTableIndex=gx2lmeDigitalTableIndex, lmestateflagRfInput=lmestateflagRfInput, lmestateflagAlarmDataCrc=lmestateflagAlarmDataCrc, lmevalueHWStatus=lmevalueHWStatus, lmeuomLaserBias=lmeuomLaserBias, lmestateflagLaserMode=lmestateflagLaserMode, lmevalueVideoOffset=lmevalueVideoOffset, lmecurrentValueOffsetNomMonitor=lmecurrentValueOffsetNomMonitor, lmestateflagFactoryDefault=lmestateflagFactoryDefault, lmelabel12Volt=lmelabel12Volt, trapLMELaserBiasCntLoopInitAlarm=trapLMELaserBiasCntLoopInitAlarm, lmestateFlagFanCurrent=lmestateFlagFanCurrent, lmeuom12Volt=lmeuom12Volt, trapLMEConfigChangeDisplayString=trapLMEConfigChangeDisplayString, lmealarmStateLaserBias=lmealarmStateLaserBias, lmelabelHWStatus=lmelabelHWStatus, lmelabelModuleTemp=lmelabelModuleTemp, trapLMEAlarmDataCRCAlarm=trapLMEAlarmDataCRCAlarm, gx2lmeFactoryTable=gx2lmeFactoryTable, lmeflashPrgCntAValue=lmeflashPrgCntAValue, lmeuomOffsetNomCnt=lmeuomOffsetNomCnt, trapLMEModuleTempAlarm=trapLMEModuleTempAlarm, lmestateflagFiberLength=lmestateflagFiberLength, lmelabelLaserMode=lmelabelLaserMode, lmeminorHighTecCurrent=lmeminorHighTecCurrent, lmecurrentValueRelAttenSetting=lmecurrentValueRelAttenSetting, lmelabelOptPower=lmelabelOptPower, lmeminValueRelAttenSetting=lmeminValueRelAttenSetting, lmealarmStateOptPower=lmealarmStateOptPower, lmemajorHighRelAttenSetting=lmemajorHighRelAttenSetting, lmemajorLowRelAttenSetting=lmemajorLowRelAttenSetting, trapLMELaserTempAlarm=trapLMELaserTempAlarm, lmevalueBoot=lmevalueBoot, lmeminValue12Volt=lmeminValue12Volt, lmestateflagVideoOffset=lmestateflagVideoOffset, gx2lmeDigitalEntry=gx2lmeDigitalEntry, lmelabelVideoOffset=lmelabelVideoOffset, lmeminorHighRelAttenSetting=lmeminorHighRelAttenSetting, lmealarmStateModuleTemp=lmealarmStateModuleTemp, lmemajorHighFanCurrent=lmemajorHighFanCurrent, lmelabelFactoryDataCRC=lmelabelFactoryDataCRC, lmemajorLowOffsetNomCnt=lmemajorLowOffsetNomCnt, lmeminorLowLaserBias=lmeminorLowLaserBias, lmeminorHighModuleTemp=lmeminorHighModuleTemp, lmeenumRfInput=lmeenumRfInput, gx2lmeFactoryTableIndex=gx2lmeFactoryTableIndex, lmelabelOptOutput=lmelabelOptOutput, lmestateflagFlash=lmestateflagFlash, gx2lmeDescriptor=gx2lmeDescriptor, lmevalueOptOutput=lmevalueOptOutput, lmeenumLaserSecMode=lmeenumLaserSecMode, gx2lmeDigitalTable=gx2lmeDigitalTable, lmelabelLaserTemp=lmelabelLaserTemp, lmestateFlagTecCurrent=lmestateFlagTecCurrent, lmevalueFactoryDataCRC=lmevalueFactoryDataCRC, lmevalueLaserSecMode=lmevalueLaserSecMode, lmeuomModuleTemp=lmeuomModuleTemp, lmemajorHighOffsetNomCnt=lmemajorHighOffsetNomCnt, lmecurrentValue12Volt=lmecurrentValue12Volt, trapLMEBankBootAlarm=trapLMEBankBootAlarm, lmealarmStateFanCurrent=lmealarmStateFanCurrent, lmehourMeterValue=lmehourMeterValue, lmecurrentValueOffsetNomCnt=lmecurrentValueOffsetNomCnt, lmealarmStateRelAttenSetting=lmealarmStateRelAttenSetting, trapLMELaserBiasAlarm=trapLMELaserBiasAlarm, lmemaxValueLaserBias=lmemaxValueLaserBias, lmestateflagConditioningUnit=lmestateflagConditioningUnit, lmealarmStateOffsetNomCnt=lmealarmStateOffsetNomCnt, lmeminorLowModuleTemp=lmeminorLowModuleTemp, trapLME12vAlarm=trapLME12vAlarm, trapLMETECParamInitAlarm=trapLMETECParamInitAlarm, lmelabelFanCurrent=lmelabelFanCurrent, lmeprgEEPROMByteValue=lmeprgEEPROMByteValue, trapLMERFOverloadAlarm=trapLMERFOverloadAlarm, lmecurrentValueLaserTemp=lmecurrentValueLaserTemp, lmeminValueOffsetNomCnt=lmeminValueOffsetNomCnt, lmeuomFanCurrent=lmeuomFanCurrent, gx2lmeStatusTable=gx2lmeStatusTable, lmeuomOptPower=lmeuomOptPower, trapLMERFInputAlarm=trapLMERFInputAlarm, lmeminValueLaserBias=lmeminValueLaserBias, lmecurrentValueTecCurrent=lmecurrentValueTecCurrent, lmemaxValueModuleTemp=lmemaxValueModuleTemp, lmelabelLaserDataCRC=lmelabelLaserDataCRC, lmevalueLaserDataCRC=lmevalueLaserDataCRC, lmelabelLaserSecMode=lmelabelLaserSecMode, lmestateFlagOptPower=lmestateFlagOptPower, lmeminorHighOffsetNomMonitor=lmeminorHighOffsetNomMonitor, lmeminorHighLaserBias=lmeminorHighLaserBias, lmeminValueFanCurrent=lmeminValueFanCurrent, lmestateflagLaserDataCRC=lmestateflagLaserDataCRC, lmealarmStateOffsetNomMonitor=lmealarmStateOffsetNomMonitor, lmestateflagFactoryDataCRC=lmestateflagFactoryDataCRC, lmemajorLowLaserTemp=lmemajorLowLaserTemp, lmeminorLowTecCurrent=lmeminorLowTecCurrent, lmelabelFiberLength=lmelabelFiberLength, lmelabelOffsetNomMonitor=lmelabelOffsetNomMonitor, Float=Float, lmeuomLaserTemp=lmeuomLaserTemp, lmestateFlagLaserBias=lmestateFlagLaserBias, lmelabelRFInputStatus=lmelabelRFInputStatus, lmestateFlagLaserTemp=lmestateFlagLaserTemp, lmealarmStateLaserTemp=lmealarmStateLaserTemp, lmelabelFlash=lmelabelFlash, lmeuomOffsetNomMonitor=lmeuomOffsetNomMonitor, lmemajorHigh12Volt=lmemajorHigh12Volt, lmeminValueOptPower=lmeminValueOptPower, lmealarmState12Volt=lmealarmState12Volt, lmemajorLowOffsetNomMonitor=lmemajorLowOffsetNomMonitor, lmemaxValueFanCurrent=lmemaxValueFanCurrent, lmeflashPrgCntBValue=lmeflashPrgCntBValue, gx2lmeAnalogTableIndex=gx2lmeAnalogTableIndex, lmestateflagLaserSecMode=lmestateflagLaserSecMode, lmevalueFlash=lmevalueFlash, lmeminorHigh12Volt=lmeminorHigh12Volt, gx2lmeStatusEntry=gx2lmeStatusEntry, trapLMEFlashAlarm=trapLMEFlashAlarm, lmecurrentValueFanCurrent=lmecurrentValueFanCurrent, lmeflashBankBRevValue=lmeflashBankBRevValue, gx2lmeAnalogEntry=gx2lmeAnalogEntry, lmeminorHighFanCurrent=lmeminorHighFanCurrent, lmemajorHighLaserTemp=lmemajorHighLaserTemp, lmemaxValueTecCurrent=lmemaxValueTecCurrent, lmeminValueLaserTemp=lmeminValueLaserTemp, trapLMELaserBiasCntLoopAlarm=trapLMELaserBiasCntLoopAlarm, lmeminorHighOffsetNomCnt=lmeminorHighOffsetNomCnt, lmecurrentValueOptPower=lmecurrentValueOptPower, lmeminValueTecCurrent=lmeminValueTecCurrent, lmelabelAlarmDataCrc=lmelabelAlarmDataCrc, lmebank2CRCValue=lmebank2CRCValue, trapLMEFactoryDataCRCAlarm=trapLMEFactoryDataCRCAlarm, gx2lmeFactoryEntry=gx2lmeFactoryEntry, trapLMEOpticalPowerAlarm=trapLMEOpticalPowerAlarm, lmeminorLowLaserTemp=lmeminorLowLaserTemp, gx2lmeStatusTableIndex=gx2lmeStatusTableIndex, lmebootControlByteValue=lmebootControlByteValue, trapLMETECCurrentAlarm=trapLMETECCurrentAlarm, lmemajorLowFanCurrent=lmemajorLowFanCurrent, lmelabelBoot=lmelabelBoot, lmeminorLowRelAttenSetting=lmeminorLowRelAttenSetting, lmecalculateCRCValue=lmecalculateCRCValue, trapLMEResetFactoryDefaultAlarm=trapLMEResetFactoryDefaultAlarm, lmeminValueOffsetNomMonitor=lmeminValueOffsetNomMonitor, lmeminorLowOptPower=lmeminorLowOptPower, lmebank1CRCValue=lmebank1CRCValue, lmeminorLowOffsetNomMonitor=lmeminorLowOffsetNomMonitor, lmemajorHighModuleTemp=lmemajorHighModuleTemp, lmemajorLowLaserBias=lmemajorLowLaserBias, lmestateFlagRelAttenSetting=lmestateFlagRelAttenSetting, lmecurrentValueLaserBias=lmecurrentValueLaserBias, gx2Lm1000EHoldTimeSpecIndex=gx2Lm1000EHoldTimeSpecIndex, lmevalueConditioningUnit=lmevalueConditioningUnit, lmebootStatusByteValue=lmebootStatusByteValue, lmeuomTecCurrent=lmeuomTecCurrent, lmemaxValueOffsetNomMonitor=lmemaxValueOffsetNomMonitor, lmelabelTecCurrent=lmelabelTecCurrent, lmevalueLaserMode=lmevalueLaserMode, lmestateFlagOffsetNomCnt=lmestateFlagOffsetNomCnt, lmestateflagOptOutput=lmestateflagOptOutput, lmeenumFiberLength=lmeenumFiberLength, lmeenumFactoryDefault=lmeenumFactoryDefault, lmemaxValueOptPower=lmemaxValueOptPower, gx2Lm1000EHoldTimeTable=gx2Lm1000EHoldTimeTable, lmeenumConditioningUnit=lmeenumConditioningUnit, gx2Lm1000EHoldTimeData=gx2Lm1000EHoldTimeData, lmeuomRelAttenSetting=lmeuomRelAttenSetting, lmestateFlagOffsetNomMonitor=lmestateFlagOffsetNomMonitor, lmevalueRfInput=lmevalueRfInput, lmestateflagRFInputStatus=lmestateflagRFInputStatus, trapLMEUserRFOffAlarm=trapLMEUserRFOffAlarm, lmemajorHighOffsetNomMonitor=lmemajorHighOffsetNomMonitor, lmemajorLowModuleTemp=lmemajorLowModuleTemp, lmeminorLowFanCurrent=lmeminorLowFanCurrent, lmelabelOffsetNomCnt=lmelabelOffsetNomCnt, lmevalueFactoryDefault=lmevalueFactoryDefault, lmelabelConditioningUnit=lmelabelConditioningUnit, lmestateflagBoot=lmestateflagBoot, lmeenumOptOutput=lmeenumOptOutput, lmemajorHighOptPower=lmemajorHighOptPower, lmecurrentValueModuleTemp=lmecurrentValueModuleTemp, gx2Lm1000EHoldTimeTableIndex=gx2Lm1000EHoldTimeTableIndex)
