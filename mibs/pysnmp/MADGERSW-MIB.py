#
# PySNMP MIB module MADGERSW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MADGERSW-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:59:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, NotificationType, enterprises, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, Unsigned32, ModuleIdentity, Integer32, TimeTicks, MibIdentifier, IpAddress, iso, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "enterprises", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "Unsigned32", "ModuleIdentity", "Integer32", "TimeTicks", "MibIdentifier", "IpAddress", "iso", "ObjectIdentity", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

class INTEGER48(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class NSAP(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(20, 20)
    fixedLength = 20

class TRNMacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class ETHMacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class RingswitchRowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

madge = MibIdentifier((1, 3, 6, 1, 4, 1, 494))
ringswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4))
ringswitchBase = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 1))
ringswitchPort = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 2))
ringswitchFwd = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 3))
ringswitchLCD = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 4))
ringswitchLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 5))
ringswitchVirt = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 6))
ringswitchSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 7))
ringswitchGenPort = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 8))
ringswitchTR = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 9))
ringswitchFDDI = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 10))
ringswitchATM = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 11))
ringswitchPSU = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 12))
ringswitchFan = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 13))
ringswitchTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 14))
ringswitchFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 15))
ringswitchTLS = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 16))
ringswitchEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 21))
ringswitchBasePSFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchBasePSFanSpeed.setStatus('mandatory')
ringswitchBaseExtFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchBaseExtFanSpeed.setStatus('mandatory')
ringswitchBaseRipSapSuppression = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchBaseRipSapSuppression.setStatus('mandatory')
ringswitchBaseAREConversion = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enable-first", 1), ("enable-all", 2), ("enable-bcast-first", 3), ("enable-bcast-all", 4), ("disable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchBaseAREConversion.setStatus('mandatory')
ringswitchBaseStpMode = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ibm-sr", 1), ("ieee8021d", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchBaseStpMode.setStatus('mandatory')
ringswitchBaseRMONState = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchBaseRMONState.setStatus('mandatory')
ringswitchBaseBackPlaneType = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("original", 1), ("dual-psu", 2), ("express", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchBaseBackPlaneType.setStatus('mandatory')
ringswitchBaseRMONMirrorPort = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchBaseRMONMirrorPort.setStatus('mandatory')
ringswitchBaseTotalResetCounters = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchBaseTotalResetCounters.setStatus('mandatory')
ringswitchBaseDownloadMode = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchBaseDownloadMode.setStatus('mandatory')
ringswitchPortTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 2, 1), )
if mibBuilder.loadTexts: ringswitchPortTable.setStatus('mandatory')
ringswitchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchPortNum"))
if mibBuilder.loadTexts: ringswitchPortEntry.setStatus('mandatory')
ringswitchPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortNum.setStatus('mandatory')
ringswitchPortRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("single", 2), ("beaconing", 3), ("normal-fdx", 4), ("dtr-wait", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortRingStatus.setStatus('mandatory')
ringswitchPortAdapterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("opening", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortAdapterStatus.setStatus('mandatory')
ringswitchPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tr-copper", 1), ("tr-fiber", 2), ("fddi-fiber", 3), ("absent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortMediaType.setStatus('mandatory')
ringswitchPortIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("node", 1), ("concentrator", 2), ("node-fdx", 3), ("conc-fdx", 4), ("node-classic", 5), ("conc-classic", 6), ("node-cau-rio", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchPortIfMode.setStatus('mandatory')
ringswitchPortRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("four", 1), ("sixteen", 2), ("hundred", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchPortRingSpeed.setStatus('mandatory')
ringswitchPortTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("running", 2), ("failed", 3), ("ok", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortTestState.setStatus('mandatory')
ringswitchPortTestError = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-error", 1), ("same-ring", 2), ("duplicate-ring", 3), ("fail-nb", 4), ("bad-rnum", 5), ("fail-b", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortTestError.setStatus('mandatory')
ringswitchPortTestPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-running", 1), ("same-ring", 2), ("routed", 3), ("broadcast", 4), ("success", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortTestPhase.setStatus('mandatory')
ringswitchPortSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortSummary.setStatus('mandatory')
ringswitchPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 11), TRNMacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortAddress.setStatus('mandatory')
ringswitchPortLAA = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 12), TRNMacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchPortLAA.setStatus('mandatory')
ringswitchPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("anything", 1), ("workstations", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchPortStationType.setStatus('mandatory')
ringswitchPortRPSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchPortRPSEnable.setStatus('mandatory')
ringswitchPortCutThruEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchPortCutThruEnable.setStatus('mandatory')
ringswitchPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 16), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortInOctets.setStatus('mandatory')
ringswitchPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 17), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortOutOctets.setStatus('mandatory')
ringswitchPortSpecInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 18), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortSpecInFrames.setStatus('mandatory')
ringswitchPortSpecOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 19), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortSpecOutFrames.setStatus('mandatory')
ringswitchPortApeInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 20), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortApeInFrames.setStatus('mandatory')
ringswitchPortApeOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 21), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortApeOutFrames.setStatus('mandatory')
ringswitchPortSteInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 22), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortSteInFrames.setStatus('mandatory')
ringswitchPortSteOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 23), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortSteOutFrames.setStatus('mandatory')
ringswitchPortResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchPortResetCounters.setStatus('mandatory')
ringswitchPortFixupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("fddi-all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchPortFixupMode.setStatus('mandatory')
ringswitchPortForwardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sr-only", 1), ("tb-only", 2), ("sr-tb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchPortForwardMode.setStatus('mandatory')
ringswitchPortRMONCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("economy", 2), ("standard", 3), ("snooping", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortRMONCapabilities.setStatus('mandatory')
ringswitchPortRMONMode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("economy", 2), ("standard", 3), ("snooping", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchPortRMONMode.setStatus('mandatory')
ringswitchPortRMONSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 29), TRNMacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchPortRMONSnoop.setStatus('mandatory')
ringswitchPortTransparentInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 30), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortTransparentInFrames.setStatus('mandatory')
ringswitchPortTransparentOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 31), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortTransparentOutFrames.setStatus('mandatory')
ringswitchPortTransparentDiscFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 32), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortTransparentDiscFrames.setStatus('mandatory')
ringswitchPortLEDs = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 2, 1, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPortLEDs.setStatus('mandatory')
ringswitchFwdAdminState = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sr-only", 1), ("disable", 2), ("tb-only", 3), ("srt", 4), ("srt-plus", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFwdAdminState.setStatus('mandatory')
ringswitchFwdOperState = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sr-only", 1), ("inactive", 2), ("tb-only", 3), ("srt", 4), ("srt-plus", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdOperState.setStatus('mandatory')
ringswitchFwdPortTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 3, 3), )
if mibBuilder.loadTexts: ringswitchFwdPortTable.setStatus('mandatory')
ringswitchFwdPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchFwdPort"))
if mibBuilder.loadTexts: ringswitchFwdPortEntry.setStatus('mandatory')
ringswitchFwdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPort.setStatus('mandatory')
ringswitchFwdPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sr-only", 1), ("tb-only", 2), ("sr-tb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFwdPortMode.setStatus('mandatory')
ringswitchFwdPortStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("anything", 1), ("workstations", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFwdPortStationType.setStatus('mandatory')
ringswitchFwdPortCutThruEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFwdPortCutThruEnable.setStatus('mandatory')
ringswitchFwdPortSpecInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 5), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortSpecInFrames.setStatus('mandatory')
ringswitchFwdPortSpecOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 6), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortSpecOutFrames.setStatus('mandatory')
ringswitchFwdPortApeInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 7), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortApeInFrames.setStatus('mandatory')
ringswitchFwdPortApeOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 8), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortApeOutFrames.setStatus('mandatory')
ringswitchFwdPortSteInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 9), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortSteInFrames.setStatus('mandatory')
ringswitchFwdPortSteOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 10), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortSteOutFrames.setStatus('mandatory')
ringswitchFwdPortTransparentInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 11), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTransparentInFrames.setStatus('mandatory')
ringswitchFwdPortTransparentOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 12), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTransparentOutFrames.setStatus('mandatory')
ringswitchFwdPortTransparentDiscFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 13), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTransparentDiscFrames.setStatus('mandatory')
ringswitchFwdPortTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("running", 2), ("failed", 3), ("ok", 4), ("unknown", 5), ("ok-use-spt", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTestState.setStatus('mandatory')
ringswitchFwdPortTestError = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-error", 1), ("same-ring", 2), ("duplicate-ring", 3), ("fail-nb", 4), ("bad-rnum", 5), ("fail-b", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTestError.setStatus('mandatory')
ringswitchFwdPortTestPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-running", 1), ("same-ring", 2), ("routed", 3), ("broadcast", 4), ("success", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTestPhase.setStatus('mandatory')
ringswitchFwdPortTbForce = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFwdPortTbForce.setStatus('mandatory')
ringswitchFwdPortStpMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFwdPortStpMaster.setStatus('mandatory')
ringswitchFwdPortTbState = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTbState.setStatus('mandatory')
ringswitchFwdPortSteState = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortSteState.setStatus('mandatory')
ringswitchFwdPortTbUnicastInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 21), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTbUnicastInFrames.setStatus('mandatory')
ringswitchFwdPortTbUnicastOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 22), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTbUnicastOutFrames.setStatus('mandatory')
ringswitchFwdPortTbBroadcastInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 23), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTbBroadcastInFrames.setStatus('mandatory')
ringswitchFwdPortTbBroadcastOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 24), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTbBroadcastOutFrames.setStatus('mandatory')
ringswitchFwdPortTbMulticastInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 25), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTbMulticastInFrames.setStatus('mandatory')
ringswitchFwdPortTbMulticastOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 26), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTbMulticastOutFrames.setStatus('mandatory')
ringswitchFwdPortTbMiscInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 27), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTbMiscInFrames.setStatus('mandatory')
ringswitchFwdPortTbMiscOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 28), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortTbMiscOutFrames.setStatus('mandatory')
ringswitchFwdPortMatrixSrSpecFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortMatrixSrSpecFrames.setStatus('mandatory')
ringswitchFwdPortMatrixTbUniFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdPortMatrixTbUniFrames.setStatus('mandatory')
ringswitchFwdPortEthernetSRBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFwdPortEthernetSRBlk.setStatus('mandatory')
ringswitchFwdPortAutoPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFwdPortAutoPathCost.setStatus('mandatory')
ringswitchFwdPortBroadcastReflect = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 3, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFwdPortBroadcastReflect.setStatus('mandatory')
ringswitchFwdTotalRxFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 4), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalRxFrames.setStatus('mandatory')
ringswitchFwdTotalTxFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 5), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalTxFrames.setStatus('mandatory')
ringswitchFwdBridgeNum = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdBridgeNum.setStatus('mandatory')
ringswitchFwdTbForced = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTbForced.setStatus('mandatory')
ringswitchFwdStpMasters = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdStpMasters.setStatus('mandatory')
ringswitchFwdGlobalHopLimit = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdGlobalHopLimit.setStatus('mandatory')
ringswitchFwdTotalBadFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 10), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalBadFrames.setStatus('mandatory')
ringswitchFwdTotalSpecInFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 11), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalSpecInFrames.setStatus('mandatory')
ringswitchFwdTotalSpecOutFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 12), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalSpecOutFrames.setStatus('mandatory')
ringswitchFwdTotalApeInFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 13), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalApeInFrames.setStatus('mandatory')
ringswitchFwdTotalApeOutFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 14), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalApeOutFrames.setStatus('mandatory')
ringswitchFwdTotalSteInFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 15), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalSteInFrames.setStatus('mandatory')
ringswitchFwdTotalSteOutFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 16), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalSteOutFrames.setStatus('mandatory')
ringswitchFwdTotalTransparentInFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 17), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalTransparentInFrames.setStatus('mandatory')
ringswitchFwdTotalTransparentOutFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 18), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalTransparentOutFrames.setStatus('mandatory')
ringswitchFwdTotalTpUnicastInFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 19), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalTpUnicastInFrames.setStatus('mandatory')
ringswitchFwdTotalTpUnicastOutFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 20), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalTpUnicastOutFrames.setStatus('mandatory')
ringswitchFwdTotalTpBroadcastInFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 21), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalTpBroadcastInFrames.setStatus('mandatory')
ringswitchFwdTotalTpBroadcastOutFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 22), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalTpBroadcastOutFrames.setStatus('mandatory')
ringswitchFwdTotalTpMulticastInFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 23), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalTpMulticastInFrames.setStatus('mandatory')
ringswitchFwdTotalTpMulticastOutFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 24), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalTpMulticastOutFrames.setStatus('mandatory')
ringswitchFwdTotalTpMiscInFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 25), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalTpMiscInFrames.setStatus('mandatory')
ringswitchFwdTotalTpMiscOutFrames = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 26), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFwdTotalTpMiscOutFrames.setStatus('mandatory')
ringswitchFwdMaxFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use18K-frames", 1), ("use4500-frames", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFwdMaxFrameSize.setStatus('mandatory')
class LCDText(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(50, 50)
    fixedLength = 50

ringswitchLCDTotalDisplays = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchLCDTotalDisplays.setStatus('mandatory')
ringswitchLCDCurrentDisplay = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchLCDCurrentDisplay.setStatus('mandatory')
ringswitchLCDCurrentMsgText = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 4, 3), LCDText()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchLCDCurrentMsgText.setStatus('mandatory')
ringswitchLCDTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 4, 4), )
if mibBuilder.loadTexts: ringswitchLCDTable.setStatus('mandatory')
ringswitchLCDTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 4, 4, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchLCDNum"))
if mibBuilder.loadTexts: ringswitchLCDTableEntry.setStatus('mandatory')
ringswitchLCDNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchLCDNum.setStatus('mandatory')
ringswitchLCDMsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 4, 4, 1, 2), LCDText()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchLCDMsgText.setStatus('mandatory')
ringswitchLCDUp = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchLCDUp.setStatus('mandatory')
ringswitchLCDDown = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchLCDDown.setStatus('mandatory')
ringswitchLANTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 5, 1), )
if mibBuilder.loadTexts: ringswitchLANTable.setStatus('mandatory')
ringswitchLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 5, 1, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchLANIndex"))
if mibBuilder.loadTexts: ringswitchLANEntry.setStatus('mandatory')
ringswitchLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchLANIndex.setStatus('mandatory')
ringswitchLANName = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchLANName.setStatus('mandatory')
ringswitchLANPermeable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("impermeable", 1), ("permeable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchLANPermeable.setStatus('mandatory')
ringswitchLANStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchLANStatus.setStatus('mandatory')
ringswitchLANRingTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 5, 2), )
if mibBuilder.loadTexts: ringswitchLANRingTable.setStatus('mandatory')
ringswitchLANRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 5, 2, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchLANRingGroup"), (0, "MADGERSW-MIB", "ringswitchLANRingIndex"))
if mibBuilder.loadTexts: ringswitchLANRingEntry.setStatus('mandatory')
ringswitchLANRingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchLANRingGroup.setStatus('mandatory')
ringswitchLANRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchLANRingIndex.setStatus('mandatory')
ringswitchLANRingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 5, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchLANRingNum.setStatus('mandatory')
ringswitchLANRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchLANRingStatus.setStatus('mandatory')
ringswitchVirtTB = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 6, 1))
ringswitchVirtTBTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 6, 1, 1), )
if mibBuilder.loadTexts: ringswitchVirtTBTable.setStatus('mandatory')
ringswitchVirtTBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 6, 1, 1, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchVirtTBIndex"))
if mibBuilder.loadTexts: ringswitchVirtTBEntry.setStatus('mandatory')
ringswitchVirtTBIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchVirtTBIndex.setStatus('mandatory')
ringswitchVirtTBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 6, 1, 1, 1, 2), RingswitchRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchVirtTBStatus.setStatus('mandatory')
ringswitchVirtTBName = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 6, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchVirtTBName.setStatus('mandatory')
ringswitchVirtTBType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("port-only", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchVirtTBType.setStatus('mandatory')
ringswitchVirtTBNumArray = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 6, 1, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchVirtTBNumArray.setStatus('mandatory')
ringswitchVirtTBNumSize = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 6, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchVirtTBNumSize.setStatus('mandatory')
ringswitchSlotNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotNumSlots.setStatus('mandatory')
ringswitchSlotTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 7, 2), )
if mibBuilder.loadTexts: ringswitchSlotTable.setStatus('mandatory')
ringswitchSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchSlotIndex"))
if mibBuilder.loadTexts: ringswitchSlotEntry.setStatus('mandatory')
ringswitchSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotIndex.setStatus('mandatory')
ringswitchSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("full-support", 2), ("no-port-open", 3), ("no-port-fwd", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotStatus.setStatus('mandatory')
ringswitchSlotBasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotBasePort.setStatus('mandatory')
ringswitchSlotCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("tr-copper-4", 1), ("tr-fiber-4", 2), ("fddi-fiber", 3), ("absent", 4), ("unknown", 5), ("tr-copper-8", 6), ("atm-fiber", 7), ("tr-fiber-8", 8), ("group-switch", 9), ("tr-copper-al-4", 10), ("tr-copper-hstr-2", 11), ("tr-copper-hstr-4", 12), ("tr-fiber-hstr-2", 13), ("tr-fiber-hstr-4", 14), ("three-layer-switch", 15), ("tr-copper-hstr-8", 16), ("tr-fiber-hstr-8", 17), ("ethernet", 18), ("gigabit-ethernet", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotCardType.setStatus('mandatory')
ringswitchSlotCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotCardId.setStatus('mandatory')
ringswitchSlotCardRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotCardRevision.setStatus('mandatory')
ringswitchSlotCardDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotCardDescription.setStatus('mandatory')
ringswitchSlotCardNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotCardNumPorts.setStatus('mandatory')
ringswitchSlotCardLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("token-ring", 2), ("fddi", 3), ("atm", 4), ("tls", 5), ("ethernet", 6), ("gigabit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotCardLAN.setStatus('mandatory')
ringswitchSlotCardLEDs = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotCardLEDs.setStatus('mandatory')
ringswitchSlotIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotIfAdminStatus.setStatus('mandatory')
ringswitchSlotAdapterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotAdapterStatus.setStatus('mandatory')
ringswitchSlotTestError = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotTestError.setStatus('mandatory')
ringswitchSlotPortHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotPortHealth.setStatus('mandatory')
ringswitchSlotLastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("atm-if-down", 1), ("atm-porta-down", 2), ("atm-portb-down", 3), ("fddi-if-down", 4), ("fddi-porta-iso", 5), ("fddi-portb-iso", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotLastStatus.setStatus('mandatory')
ringswitchSlotPortCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotPortCreated.setStatus('mandatory')
ringswitchSlotHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("degraded", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotHealth.setStatus('mandatory')
ringswitchSlotVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 7, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchSlotVersion.setStatus('mandatory')
ringswitchGenPortTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 8, 1), )
if mibBuilder.loadTexts: ringswitchGenPortTable.setStatus('mandatory')
ringswitchGenPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchGenPortNum"))
if mibBuilder.loadTexts: ringswitchGenPortEntry.setStatus('mandatory')
ringswitchGenPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchGenPortNum.setStatus('mandatory')
ringswitchGenPortAdapterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("opening", 3), ("ready", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchGenPortAdapterStatus.setStatus('mandatory')
ringswitchGenPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 3), TRNMacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchGenPortAddress.setStatus('mandatory')
ringswitchGenPortLAA = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 4), TRNMacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchGenPortLAA.setStatus('mandatory')
ringswitchGenPortInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 5), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchGenPortInOctets.setStatus('mandatory')
ringswitchGenPortOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 6), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchGenPortOutOctets.setStatus('mandatory')
ringswitchGenPortResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchGenPortResetCounters.setStatus('mandatory')
ringswitchGenPortRMONCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("economy", 2), ("standard", 3), ("snooping", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchGenPortRMONCapabilities.setStatus('mandatory')
ringswitchGenPortRMONMode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("economy", 2), ("standard", 3), ("snooping", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchGenPortRMONMode.setStatus('mandatory')
ringswitchGenPortRMONSnoop = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 10), TRNMacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchGenPortRMONSnoop.setStatus('mandatory')
ringswitchGenPortIPXNet = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchGenPortIPXNet.setStatus('mandatory')
ringswitchGenPortLastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fddi-remove", 1), ("fddi-twisted", 2), ("fddi-bypass", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchGenPortLastStatus.setStatus('mandatory')
ringswitchGenPortCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchGenPortCreate.setStatus('mandatory')
ringswitchGenPortHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("degraded", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchGenPortHealth.setStatus('mandatory')
ringswitchTRIfTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 9, 1), )
if mibBuilder.loadTexts: ringswitchTRIfTable.setStatus('mandatory')
ringswitchTRIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTRIfIndex"))
if mibBuilder.loadTexts: ringswitchTRIfEntry.setStatus('mandatory')
ringswitchTRIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTRIfIndex.setStatus('mandatory')
ringswitchTRIfRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("four", 1), ("sixteen", 2), ("hundred", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRIfRingSpeed.setStatus('mandatory')
ringswitchTRIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("node", 1), ("concentrator", 2), ("node-fdx", 3), ("conc-fdx", 4), ("node-classic", 5), ("conc-classic", 6), ("node-cau-rio", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRIfMode.setStatus('mandatory')
ringswitchTRIfRPSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRIfRPSEnable.setStatus('mandatory')
ringswitchTRIfRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("single", 2), ("beaconing", 3), ("normal-fdx", 4), ("dtr-wait", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTRIfRingStatus.setStatus('mandatory')
ringswitchTRIfSoftErrTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRIfSoftErrTimer.setStatus('mandatory')
ringswitchTRIfFrameStatusControl = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRIfFrameStatusControl.setStatus('mandatory')
ringswitchTRIfTokenPriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRIfTokenPriorityControl.setStatus('mandatory')
ringswitchTRIfFastFailoverEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRIfFastFailoverEnable.setStatus('mandatory')
ringswitchTRIfFastFailoverStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("opening", 3), ("ready", 4), ("open-fail", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTRIfFastFailoverStandbyStatus.setStatus('mandatory')
ringswitchTRIfFastFailoverPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("left", 1), ("right", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRIfFastFailoverPrimaryPort.setStatus('mandatory')
ringswitchTRIfFastFailoverTrapInfoReason = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary-open-fail", 1), ("standby-open-fail", 2), ("links-swapped", 3))))
if mibBuilder.loadTexts: ringswitchTRIfFastFailoverTrapInfoReason.setStatus('mandatory')
ringswitchTRGrpSwtchTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 9, 2), )
if mibBuilder.loadTexts: ringswitchTRGrpSwtchTable.setStatus('mandatory')
ringswitchTRGrpSwtchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 9, 2, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTRGrpSwtchIfIndex"))
if mibBuilder.loadTexts: ringswitchTRGrpSwtchEntry.setStatus('mandatory')
ringswitchTRGrpSwtchIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchIfIndex.setStatus('mandatory')
ringswitchTRGrpSwtchRemoveThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchRemoveThreshold.setStatus('mandatory')
ringswitchTRGrpSwtchRingPollAction = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchRingPollAction.setStatus('mandatory')
ringswitchTRGrpSwtchBeaconThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchBeaconThreshold.setStatus('mandatory')
ringswitchTRGrpSwtchBeaconAction = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchBeaconAction.setStatus('mandatory')
ringswitchTRGrpSwtchPurgeThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchPurgeThreshold.setStatus('mandatory')
ringswitchTRGrpSwtchPurgeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchPurgeAction.setStatus('mandatory')
ringswitchTRGrpSwtchIsoErrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchIsoErrThreshold.setStatus('mandatory')
ringswitchTRGrpSwtchIsoErrAction = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("inform", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchIsoErrAction.setStatus('mandatory')
ringswitchTRGrpSwtchRingPollThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchRingPollThreshold.setStatus('mandatory')
ringswitchTRGrpSwtchPortTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 9, 3), )
if mibBuilder.loadTexts: ringswitchTRGrpSwtchPortTable.setStatus('mandatory')
ringswitchTRGrpSwtchPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 9, 3, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTRGrpSwtchPortIfIndex"), (0, "MADGERSW-MIB", "ringswitchTRGrpSwtchPortIndex"))
if mibBuilder.loadTexts: ringswitchTRGrpSwtchPortEntry.setStatus('mandatory')
ringswitchTRGrpSwtchPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchPortIfIndex.setStatus('mandatory')
ringswitchTRGrpSwtchPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchPortIndex.setStatus('mandatory')
ringswitchTRGrpSwtchPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 3, 1, 3), TRNMacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchPortAddress.setStatus('mandatory')
ringswitchTRGrpSwtchTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 494, 4, 9, 4))
ringswitchTRGrpSwtchTrapInfoReason = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 9, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reason-unknown", 1), ("ring-poll-failure", 2), ("beaconing", 3), ("ring-purges", 4), ("isolating-errors", 5), ("removal-exceeded", 6), ("beaconing-fault", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchTrapInfoReason.setStatus('mandatory')
ringswitchTRGrpSwtchSlotTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 9, 5), )
if mibBuilder.loadTexts: ringswitchTRGrpSwtchSlotTable.setStatus('mandatory')
ringswitchTRGrpSwtchSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 9, 5, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTRGrpSwtchSlotIndex"))
if mibBuilder.loadTexts: ringswitchTRGrpSwtchSlotEntry.setStatus('mandatory')
ringswitchTRGrpSwtchSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchSlotIndex.setStatus('mandatory')
ringswitchTRGrpSwtchSlotAdminStatii = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchSlotAdminStatii.setStatus('mandatory')
ringswitchTRGrpSwtchSlotAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchSlotAutoPartitions.setStatus('mandatory')
ringswitchTRGrpSwtchSlotOperStatii = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 9, 5, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTRGrpSwtchSlotOperStatii.setStatus('mandatory')
ringswitchFDDICardTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 10, 1), )
if mibBuilder.loadTexts: ringswitchFDDICardTable.setStatus('mandatory')
ringswitchFDDICardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 10, 1, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchFDDICardNum"))
if mibBuilder.loadTexts: ringswitchFDDICardEntry.setStatus('mandatory')
ringswitchFDDICardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFDDICardNum.setStatus('mandatory')
ringswitchFDDICardSMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFDDICardSMTIndex.setStatus('mandatory')
ringswitchFDDICardFixupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("fddi-all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFDDICardFixupMode.setStatus('mandatory')
ringswitchFDDICardVRStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFDDICardVRStatus.setStatus('mandatory')
ringswitchFDDICardVRRingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 10, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFDDICardVRRingNum.setStatus('mandatory')
ringswitchFDDICardVRBridgeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 10, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFDDICardVRBridgeNum.setStatus('mandatory')
ringswitchFDDICardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFDDICardStatus.setStatus('mandatory')
ringswitchATMCardTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 11, 1), )
if mibBuilder.loadTexts: ringswitchATMCardTable.setStatus('mandatory')
ringswitchATMCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchATMCardNum"))
if mibBuilder.loadTexts: ringswitchATMCardEntry.setStatus('mandatory')
ringswitchATMCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardNum.setStatus('mandatory')
ringswitchATMCardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMCardAdminStatus.setStatus('mandatory')
ringswitchATMCardRemoteUNIVer = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("uni-30", 2), ("uni-31", 3), ("uni-40", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardRemoteUNIVer.setStatus('mandatory')
ringswitchATMCardLECSAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 4), NSAP()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMCardLECSAddress.setStatus('mandatory')
ringswitchATMCardLECSIlmi = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMCardLECSIlmi.setStatus('mandatory')
ringswitchATMCardLECSWka = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMCardLECSWka.setStatus('mandatory')
ringswitchATMCardLECSPvc = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMCardLECSPvc.setStatus('mandatory')
ringswitchATMCardActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-a", 1), ("port-b", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardActivePort.setStatus('mandatory')
ringswitchATMCardILMIStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardILMIStatus.setStatus('mandatory')
ringswitchATMCardSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardSignalStatus.setStatus('mandatory')
ringswitchATMCardHardWiredESI = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 11), ETHMacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardHardWiredESI.setStatus('mandatory')
ringswitchATMCardLocalESI = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 12), ETHMacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMCardLocalESI.setStatus('mandatory')
ringswitchATMCardPortB = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMCardPortB.setStatus('mandatory')
ringswitchATMCardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sonet", 1), ("sdh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMCardMode.setStatus('mandatory')
ringswitchATMCardSONETIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardSONETIfIndex.setStatus('mandatory')
ringswitchATMCardATMIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardATMIfIndex.setStatus('mandatory')
ringswitchATMCardAAL5IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardAAL5IfIndex.setStatus('mandatory')
ringswitchATMCardRowStatuses = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardRowStatuses.setStatus('mandatory')
ringswitchATMCardMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multi-mode-fiber", 1), ("single-mode-fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardMediaType.setStatus('mandatory')
ringswitchATMCardConfigUNIVer = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("autoConfig", 1), ("uni-30", 2), ("uni-31", 3), ("uni-40", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMCardConfigUNIVer.setStatus('mandatory')
ringswitchATMCardActualUNIVer = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("uni-30", 2), ("uni-31", 3), ("uni-40", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardActualUNIVer.setStatus('mandatory')
ringswitchATMCardEthLecSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMCardEthLecSupport.setStatus('mandatory')
ringswitchATMPortTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 11, 2), )
if mibBuilder.loadTexts: ringswitchATMPortTable.setStatus('mandatory')
ringswitchATMPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchATMPortNum"))
if mibBuilder.loadTexts: ringswitchATMPortEntry.setStatus('mandatory')
ringswitchATMPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMPortNum.setStatus('mandatory')
ringswitchATMPortFailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("success", 1), ("sig-ilmi-fail", 2), ("lecs-not-found", 3), ("config-failed", 4), ("les-connect-fail", 5), ("join-failed", 6), ("bus-not-found", 7), ("bus-connect-fail", 8), ("bus-didnt-connect", 9), ("duplicate-elan", 10), ("les-vc-dropped", 11), ("bus-vc-dropped", 12), ("rejoin-wrong-elan", 13), ("insufficient-memory", 14), ("already-open", 15), ("invalid-port", 16), ("unknown", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMPortFailReason.setStatus('mandatory')
ringswitchATMPortFailSecondary = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 1), ("timeout", 2), ("undefined-error", 3), ("version-not-supported", 4), ("invalid-request-params", 5), ("dup-lan-destination", 6), ("dup-atm-address", 7), ("insuff-resources", 8), ("access-denied", 9), ("invalid-requester-id", 10), ("invalid-lan-destination", 11), ("invalid-atm-address", 12), ("no-configuration", 13), ("le-configure-error", 14), ("insuff-information", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMPortFailSecondary.setStatus('mandatory')
ringswitchATMPortRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMPortRxDiscards.setStatus('mandatory')
ringswitchATMPortTxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMPortTxDiscards.setStatus('mandatory')
ringswitchATMPortTxQuotaDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMPortTxQuotaDiscards.setStatus('mandatory')
ringswitchATMPortTxBUSBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMPortTxBUSBroadcasts.setStatus('mandatory')
ringswitchATMPortTxBUSUnknowns = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMPortTxBUSUnknowns.setStatus('mandatory')
ringswitchATMPortRxBUSFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchATMPortRxBUSFiltered.setStatus('mandatory')
ringswitchATMPortIPXTypeETH = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("ieee8022", 2), ("snap", 3), ("ieee8023", 4), ("dix", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMPortIPXTypeETH.setStatus('mandatory')
ringswitchATMPortIPXTypeTRN = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("ieee8022", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMPortIPXTypeTRN.setStatus('mandatory')
ringswitchATMPortIPXEvenize = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMPortIPXEvenize.setStatus('mandatory')
ringswitchATMPortIPXBufLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMPortIPXBufLimit.setStatus('mandatory')
ringswitchATMPortIPXEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMPortIPXEnable.setStatus('mandatory')
ringswitchATMPortIPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMPortIPEnable.setStatus('mandatory')
ringswitchATMPortIPMulticastType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 11, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("functional", 2), ("group", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchATMPortIPMulticastType.setStatus('mandatory')
ringswitchTLSCardTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 16, 1), )
if mibBuilder.loadTexts: ringswitchTLSCardTable.setStatus('mandatory')
ringswitchTLSCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTLSCardNum"))
if mibBuilder.loadTexts: ringswitchTLSCardEntry.setStatus('mandatory')
ringswitchTLSCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSCardNum.setStatus('mandatory')
ringswitchTLSCardRowStatuses = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSCardRowStatuses.setStatus('mandatory')
ringswitchTLSCardRIPTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSCardRIPTTL.setStatus('mandatory')
ringswitchTLSCardRIPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSCardRIPInterval.setStatus('mandatory')
ringswitchTLSCardRIPAging = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSCardRIPAging.setStatus('mandatory')
ringswitchTLSCardDefRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSCardDefRoute.setStatus('mandatory')
ringswitchTLSCardDefRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSCardDefRouteMetric.setStatus('mandatory')
ringswitchTLSCardRIPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSCardRIPFlags.setStatus('mandatory')
ringswitchTLSCardOSPFRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSCardOSPFRouterId.setStatus('mandatory')
ringswitchTLSCardOSPFFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSCardOSPFFlags.setStatus('mandatory')
ringswitchTLSCardStatsCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSCardStatsCpuUsage.setStatus('mandatory')
ringswitchTLSCardStatsFreeMem = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSCardStatsFreeMem.setStatus('mandatory')
ringswitchTLSCardStatsFramesFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSCardStatsFramesFwd.setStatus('mandatory')
ringswitchTLSCardStatsMaxCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSCardStatsMaxCpuUsage.setStatus('mandatory')
ringswitchTLSCardStatsMinFreeMem = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSCardStatsMinFreeMem.setStatus('mandatory')
ringswitchTLSCardStatsMaxFramesFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSCardStatsMaxFramesFwd.setStatus('mandatory')
ringswitchTLSCardStatsResetState = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSCardStatsResetState.setStatus('mandatory')
ringswitchTLSCardARPFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSCardARPFlush.setStatus('mandatory')
ringswitchTLSCardBootPRASecondsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSCardBootPRASecondsThreshold.setStatus('mandatory')
ringswitchTLSCardBootPRAHopsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSCardBootPRAHopsThreshold.setStatus('mandatory')
ringswitchTLSPortTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 16, 2), )
if mibBuilder.loadTexts: ringswitchTLSPortTable.setStatus('mandatory')
ringswitchTLSPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTLSPortNum"))
if mibBuilder.loadTexts: ringswitchTLSPortEntry.setStatus('mandatory')
ringswitchTLSPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSPortNum.setStatus('mandatory')
ringswitchTLSPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortName.setStatus('mandatory')
ringswitchTLSPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 18432))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortMTU.setStatus('mandatory')
ringswitchTLSPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortEnable.setStatus('mandatory')
ringswitchTLSPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortIpAddress.setStatus('mandatory')
ringswitchTLSPortIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortIpSubnetMask.setStatus('mandatory')
ringswitchTLSPortRIPRxType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("rip1OrRip2", 3), ("doNotReceive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortRIPRxType.setStatus('mandatory')
ringswitchTLSPortRIPTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doNotSend", 1), ("ripVersion1", 2), ("rip1Compatible", 3), ("ripVersion2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortRIPTxType.setStatus('mandatory')
ringswitchTLSPortRIPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortRIPFlags.setStatus('mandatory')
ringswitchTLSPortIfArray = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortIfArray.setStatus('mandatory')
ringswitchTLSPortRIP2AuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simplePassword", 2), ("md5", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortRIP2AuthType.setStatus('mandatory')
ringswitchTLSPortRIP2AuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortRIP2AuthKey.setStatus('mandatory')
ringswitchTLSPortOSPFEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortOSPFEnable.setStatus('mandatory')
ringswitchTLSPortOSPFAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortOSPFAreaId.setStatus('mandatory')
ringswitchTLSPortLegFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortLegFlags.setStatus('mandatory')
ringswitchTLSPortOSPFAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simplePassword", 2), ("md5", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortOSPFAuthType.setStatus('mandatory')
ringswitchTLSPortOSPFAuthMD5KeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortOSPFAuthMD5KeyId.setStatus('mandatory')
ringswitchTLSPortOSPFAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortOSPFAuthKey.setStatus('mandatory')
ringswitchTLSPortOSPFCost = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortOSPFCost.setStatus('mandatory')
ringswitchTLSPortOSPFPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortOSPFPriority.setStatus('mandatory')
ringswitchTLSPortOSPFHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortOSPFHelloInterval.setStatus('mandatory')
ringswitchTLSPortOSPFDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortOSPFDeadInterval.setStatus('mandatory')
ringswitchTLSPortBootPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("relay-agent-enable", 1), ("relay-agent-disable", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSPortBootPFlags.setStatus('mandatory')
ringswitchTLSStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 16, 3), )
if mibBuilder.loadTexts: ringswitchTLSStaticRouteTable.setStatus('mandatory')
ringswitchTLSStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 16, 3, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTLSStaticRouteCardNum"), (0, "MADGERSW-MIB", "ringswitchTLSStaticRouteIpAddress"))
if mibBuilder.loadTexts: ringswitchTLSStaticRouteEntry.setStatus('mandatory')
ringswitchTLSStaticRouteCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSStaticRouteCardNum.setStatus('mandatory')
ringswitchTLSStaticRouteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSStaticRouteIpAddress.setStatus('mandatory')
ringswitchTLSStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSStaticRouteMask.setStatus('mandatory')
ringswitchTLSStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSStaticRouteGateway.setStatus('mandatory')
ringswitchTLSStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSStaticRouteMetric.setStatus('mandatory')
ringswitchTLSRIPNeighbourTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 16, 4), )
if mibBuilder.loadTexts: ringswitchTLSRIPNeighbourTable.setStatus('mandatory')
ringswitchTLSRIPNeighbourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 16, 4, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTLSRIPNeighbourCardNum"), (0, "MADGERSW-MIB", "ringswitchTLSRIPNeighbourIpAddress"))
if mibBuilder.loadTexts: ringswitchTLSRIPNeighbourEntry.setStatus('mandatory')
ringswitchTLSRIPNeighbourCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSRIPNeighbourCardNum.setStatus('mandatory')
ringswitchTLSRIPNeighbourIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSRIPNeighbourIpAddress.setStatus('mandatory')
ringswitchTLSRIPNeighbourEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSRIPNeighbourEnable.setStatus('mandatory')
ringswitchTLSRIPAdvertTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 16, 5), )
if mibBuilder.loadTexts: ringswitchTLSRIPAdvertTable.setStatus('mandatory')
ringswitchTLSRIPAdvertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 16, 5, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTLSRIPAdvertPortNum"), (0, "MADGERSW-MIB", "ringswitchTLSRIPAdvertIpAddress"))
if mibBuilder.loadTexts: ringswitchTLSRIPAdvertEntry.setStatus('mandatory')
ringswitchTLSRIPAdvertPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSRIPAdvertPortNum.setStatus('mandatory')
ringswitchTLSRIPAdvertIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSRIPAdvertIpAddress.setStatus('mandatory')
ringswitchTLSRIPAdvertEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSRIPAdvertEnable.setStatus('mandatory')
ringswitchTLSRIPRejectTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 16, 6), )
if mibBuilder.loadTexts: ringswitchTLSRIPRejectTable.setStatus('mandatory')
ringswitchTLSRIPRejectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 16, 6, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTLSRIPRejectPortNum"), (0, "MADGERSW-MIB", "ringswitchTLSRIPRejectIpAddress"))
if mibBuilder.loadTexts: ringswitchTLSRIPRejectEntry.setStatus('mandatory')
ringswitchTLSRIPRejectPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSRIPRejectPortNum.setStatus('mandatory')
ringswitchTLSRIPRejectIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSRIPRejectIpAddress.setStatus('mandatory')
ringswitchTLSRIPRejectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSRIPRejectEnable.setStatus('mandatory')
ringswitchTLSOSPFAreaTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 16, 7), )
if mibBuilder.loadTexts: ringswitchTLSOSPFAreaTable.setStatus('mandatory')
ringswitchTLSOSPFAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 16, 7, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTLSOSPFAreaId"))
if mibBuilder.loadTexts: ringswitchTLSOSPFAreaEntry.setStatus('mandatory')
ringswitchTLSOSPFAreaCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSOSPFAreaCardNum.setStatus('mandatory')
ringswitchTLSOSPFAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSOSPFAreaId.setStatus('mandatory')
ringswitchTLSOSPFAreaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSOSPFAreaAddress.setStatus('mandatory')
ringswitchTLSOSPFAreaAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 7, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSOSPFAreaAddressMask.setStatus('mandatory')
ringswitchTLSOSPFAreaFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSOSPFAreaFlags.setStatus('mandatory')
ringswitchTLSBootPRAServerTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 16, 8), )
if mibBuilder.loadTexts: ringswitchTLSBootPRAServerTable.setStatus('mandatory')
ringswitchTLSBootPRAServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 16, 8, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTLSBootPRAServerCardNum"), (0, "MADGERSW-MIB", "ringswitchTLSBootPRAServerIpAddress"))
if mibBuilder.loadTexts: ringswitchTLSBootPRAServerEntry.setStatus('mandatory')
ringswitchTLSBootPRAServerCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSBootPRAServerCardNum.setStatus('mandatory')
ringswitchTLSBootPRAServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSBootPRAServerIpAddress.setStatus('mandatory')
ringswitchTLSBootPRAServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSBootPRAServerName.setStatus('mandatory')
ringswitchTLSBootPRAServerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSBootPRAServerEnable.setStatus('mandatory')
ringswitchTLSVRRPVRTRTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 16, 9), )
if mibBuilder.loadTexts: ringswitchTLSVRRPVRTRTable.setStatus('mandatory')
ringswitchTLSVRRPVRTREntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 16, 9, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchTLSVRRPVRTRPortNum"), (0, "MADGERSW-MIB", "ringswitchTLSVRRPVRTRIpAddress"))
if mibBuilder.loadTexts: ringswitchTLSVRRPVRTREntry.setStatus('mandatory')
ringswitchTLSVRRPVRTRPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSVRRPVRTRPortNum.setStatus('mandatory')
ringswitchTLSVRRPVRTRIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchTLSVRRPVRTRIpAddress.setStatus('mandatory')
ringswitchTLSVRRPVRTRVRID = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSVRRPVRTRVRID.setStatus('mandatory')
ringswitchTLSVRRPVRTRMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 9, 1, 4), TRNMacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSVRRPVRTRMacAddress.setStatus('mandatory')
ringswitchTLSVRRPVRTREnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSVRRPVRTREnable.setStatus('mandatory')
ringswitchTLSVRRPVRTRAdvertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSVRRPVRTRAdvertInterval.setStatus('mandatory')
ringswitchTLSVRRPVRTRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSVRRPVRTRPriority.setStatus('mandatory')
ringswitchTLSVRRPVRTRAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSVRRPVRTRAuthType.setStatus('mandatory')
ringswitchTLSVRRPVRTRAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 9, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSVRRPVRTRAuthKey.setStatus('mandatory')
ringswitchTLSVRRPVRTRAdvertDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 16, 9, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchTLSVRRPVRTRAdvertDeadInterval.setStatus('mandatory')
ringswitchEthernetIfTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 21, 1), )
if mibBuilder.loadTexts: ringswitchEthernetIfTable.setStatus('mandatory')
ringswitchEthernetIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchEthernetIfIndex"))
if mibBuilder.loadTexts: ringswitchEthernetIfEntry.setStatus('mandatory')
ringswitchEthernetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetIfIndex.setStatus('mandatory')
ringswitchEthernetIfIPXEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("ieee8022", 2), ("snap", 3), ("ieee8023", 4), ("dix", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfIPXEthType.setStatus('mandatory')
ringswitchEthernetIfOperIPXEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ieee8022", 2), ("snap", 3), ("ieee8023", 4), ("dix", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetIfOperIPXEthType.setStatus('mandatory')
ringswitchEthernetIfIPXTRType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("ieee8022", 2), ("snap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfIPXTRType.setStatus('mandatory')
ringswitchEthernetIfOperIPXTRType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("ieee8022", 2), ("snap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetIfOperIPXTRType.setStatus('mandatory')
ringswitchEthernetIfIPXEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfIPXEnable.setStatus('mandatory')
ringswitchEthernetIfIPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfIPEnable.setStatus('mandatory')
ringswitchEthernetIfAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("speed10Mbps", 2), ("speed100Mbps", 3), ("speed1000Mbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfAdminSpeed.setStatus('mandatory')
ringswitchEthernetIfOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("ten", 2), ("hundred", 3), ("thousand", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetIfOperSpeed.setStatus('mandatory')
ringswitchEthernetIfAdminDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("half", 2), ("full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfAdminDuplexMode.setStatus('mandatory')
ringswitchEthernetIfOperDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("half-duplex", 2), ("full-duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetIfOperDuplexMode.setStatus('mandatory')
ringswitchEthernetIfIPMulticastType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("functional", 2), ("group", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfIPMulticastType.setStatus('mandatory')
ringswitchEthernetIfCacheClear = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ringswitchEthernetIfCacheClear.setStatus('mandatory')
ringswitchEthernetIfSPTEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfSPTEncaps.setStatus('mandatory')
ringswitchEthernetIfPriorityTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfPriorityTagging.setStatus('mandatory')
ringswitchEthernetIfPriorityTaggingVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfPriorityTaggingVLANId.setStatus('mandatory')
ringswitchEthernetIfAdminIPXNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfAdminIPXNetwork.setStatus('mandatory')
ringswitchEthernetIfOperIPXNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetIfOperIPXNetwork.setStatus('mandatory')
ringswitchEthernetIfSTPBlockingTrapInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocked", 1), ("unblocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetIfSTPBlockingTrapInfo.setStatus('mandatory')
ringswitchEthernetIfAdminFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-applicable", 1), ("no-pause", 2), ("tx-pause", 3), ("rx-pause", 4), ("tx-rx-pause", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfAdminFlowCtrl.setStatus('mandatory')
ringswitchEthernetIfOperFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("no-pause", 2), ("tx-pause", 3), ("rx-pause", 4), ("tx-rx-pause", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetIfOperFlowCtrl.setStatus('mandatory')
ringswitchEthernetIfAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("not-applicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfAutoNegotiate.setStatus('mandatory')
ringswitchEthernetIfMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("copper", 1), ("fibre-sx", 2), ("fibre-lx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetIfMediaType.setStatus('mandatory')
ringswitchEthernetIfAdminMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfAdminMaxFrameSize.setStatus('mandatory')
ringswitchEthernetIfOperMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetIfOperMaxFrameSize.setStatus('mandatory')
ringswitchEthernetXBDupAddrTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 21, 2), )
if mibBuilder.loadTexts: ringswitchEthernetXBDupAddrTable.setStatus('mandatory')
ringswitchEthernetXBDupAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 21, 2, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchEthernetXBDupAddrIfIndex"), (0, "MADGERSW-MIB", "ringswitchEthernetXBDupAddrIndex"))
if mibBuilder.loadTexts: ringswitchEthernetXBDupAddrEntry.setStatus('mandatory')
ringswitchEthernetXBDupAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBDupAddrIfIndex.setStatus('mandatory')
ringswitchEthernetXBDupAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBDupAddrIndex.setStatus('mandatory')
ringswitchEthernetXBDupAddrMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 2, 1, 3), TRNMacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchEthernetXBDupAddrMacAddress.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 21, 3), )
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsTable.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchEthernetXBToTRNStatsIfIndex"))
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsEntry.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsIfIndex.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscSptEncapsBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 2), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscSptEncapsBlock.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 3), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscFilter.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 4), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscBPDU.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscBPDUEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 5), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscBPDUEncaps.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscTag8021qCfi = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 6), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscTag8021qCfi.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscTag8021qVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 7), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscTag8021qVlan.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscBadRif = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 8), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscBadRif.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 9), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscHopLimit.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscDuplicateRin = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 10), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscDuplicateRin.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscIPDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 11), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscIPDisabled.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscARPDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 12), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscARPDisabled.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscNCPCache = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 13), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscNCPCache.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscIPXDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 14), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscIPXDisabled.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscIPXTypeSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 15), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscIPXTypeSnap.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscIPXType8022 = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 16), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscIPXType8022.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscIPXType8023 = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 17), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscIPXType8023.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsDiscIPXTypeDix = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 18), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsDiscIPXTypeDix.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsNoFakeBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 19), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsNoFakeBuffer.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsCacheFull = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 20), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsCacheFull.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsFwdIPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 21), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsFwdIPFrames.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsFwdIPMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 22), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsFwdIPMulticast.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsFwdARPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 23), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsFwdARPFrames.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsFwdIPXFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 24), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsFwdIPXFrames.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsFwdAARPPh1Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 25), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsFwdAARPPh1Frames.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsFwdAARPPh2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 26), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsFwdAARPPh2Frames.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsFwdOtherEthFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 27), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsFwdOtherEthFrames.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsFwdZeroOUIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 28), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsFwdZeroOUIFrames.setStatus('deprecated')
ringswitchEthernetXBToTRNStatsFwdOtherDLCFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 29), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsFwdOtherDLCFrames.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsFwdBPDUEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 30), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsFwdBPDUEncaps.setStatus('mandatory')
ringswitchEthernetXBToTRNStatsFwdBPDUDecaps = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 3, 1, 31), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBToTRNStatsFwdBPDUDecaps.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 21, 4), )
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsTable.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchEthernetXBFromTRNStatsIfIndex"))
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsEntry.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsIfIndex.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscTooBig = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 2), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscTooBig.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscSptEncapsBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 3), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscSptEncapsBlock.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 4), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscFilter.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscBPDU = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 5), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscBPDU.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscBPDUEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 6), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscBPDUEncaps.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscTag8021qCfi = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 7), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscTag8021qCfi.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscTag8021qVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 8), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscTag8021qVlan.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscBadRIF = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 9), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscBadRIF.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscZeroRingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 10), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscZeroRingNum.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscNonTermRIF = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 11), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscNonTermRIF.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscIPDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 12), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscIPDisabled.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscARPDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 13), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscARPDisabled.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscIPCantFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 14), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscIPCantFrag.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscNCPCache = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 15), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscNCPCache.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscIPXDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 16), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscIPXDisabled.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscIPXTypeSnap = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 17), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscIPXTypeSnap.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsDiscIPXType8022 = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 18), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsDiscIPXType8022.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsCacheFull = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 19), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsCacheFull.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsRIFCacheFull = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 20), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsRIFCacheFull.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsFwdIPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 21), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsFwdIPFrames.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsFwdIPFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 22), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsFwdIPFragmented.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsFwdIPMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 23), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsFwdIPMulticast.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsFwdARPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 24), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsFwdARPFrames.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsFwdIPXFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 25), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsFwdIPXFrames.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsFwdAARPPh1Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 26), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsFwdAARPPh1Frames.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsFwdAARPPh2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 27), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsFwdAARPPh2Frames.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsFwdTunnel8021hFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 28), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsFwdTunnel8021hFrames.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsFwdZeroOUISnapFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 29), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsFwdZeroOUISnapFrames.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsFwdOtherDLCFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 30), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsFwdOtherDLCFrames.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsFwdBPDUDecaps = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 31), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsFwdBPDUDecaps.setStatus('mandatory')
ringswitchEthernetXBFromTRNStatsFwdBPDUEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 4, 1, 32), INTEGER48()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetXBFromTRNStatsFwdBPDUEncaps.setStatus('mandatory')
ringswitchEthernetExtPhysStatsTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 21, 5), )
if mibBuilder.loadTexts: ringswitchEthernetExtPhysStatsTable.setStatus('mandatory')
ringswitchEthernetExtPhysStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 21, 5, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchEthernetExtPhysStatsIfIndex"))
if mibBuilder.loadTexts: ringswitchEthernetExtPhysStatsEntry.setStatus('mandatory')
ringswitchEthernetExtPhysStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetExtPhysStatsIfIndex.setStatus('mandatory')
ringswitchEthernetExtPhysStatsRxDataErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetExtPhysStatsRxDataErrors.setStatus('mandatory')
ringswitchEthernetExtPhysStatsRxSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetExtPhysStatsRxSequenceErrors.setStatus('mandatory')
ringswitchEthernetExtPhysStatsRxCarrierExtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetExtPhysStatsRxCarrierExtErrors.setStatus('mandatory')
ringswitchEthernetExtPhysStatsXonRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetExtPhysStatsXonRxFrames.setStatus('mandatory')
ringswitchEthernetExtPhysStatsXonTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetExtPhysStatsXonTxFrames.setStatus('mandatory')
ringswitchEthernetExtPhysStatsXoffRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetExtPhysStatsXoffRxFrames.setStatus('mandatory')
ringswitchEthernetExtPhysStatsXoffTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 21, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchEthernetExtPhysStatsXoffTxFrames.setStatus('mandatory')
ringswitchPSUNumUnits = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPSUNumUnits.setStatus('mandatory')
ringswitchPSUTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 12, 2), )
if mibBuilder.loadTexts: ringswitchPSUTable.setStatus('mandatory')
ringswitchPSUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 12, 2, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchPSUIndex"))
if mibBuilder.loadTexts: ringswitchPSUEntry.setStatus('mandatory')
ringswitchPSUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPSUIndex.setStatus('mandatory')
ringswitchPSUDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 12, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPSUDescription.setStatus('mandatory')
ringswitchPSUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unit-absent", 1), ("unit-broken", 2), ("unit-normal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchPSUStatus.setStatus('mandatory')
ringswitchFanNumUnits = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFanNumUnits.setStatus('mandatory')
ringswitchFanTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 13, 2), )
if mibBuilder.loadTexts: ringswitchFanTable.setStatus('mandatory')
ringswitchFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 13, 2, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchFanIndex"))
if mibBuilder.loadTexts: ringswitchFanEntry.setStatus('mandatory')
ringswitchFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFanIndex.setStatus('mandatory')
ringswitchFanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 13, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFanDescription.setStatus('mandatory')
ringswitchFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFanSpeed.setStatus('mandatory')
ringswitchRouteDescrSegmentID = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: ringswitchRouteDescrSegmentID.setStatus('mandatory')
ringswitchRouteDescrBridgeNumber = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: ringswitchRouteDescrBridgeNumber.setStatus('mandatory')
ringswitchVersionMismatch = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 14, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("boot-eprom-and-boot-flash", 1))))
if mibBuilder.loadTexts: ringswitchVersionMismatch.setStatus('mandatory')
ringswitchDownloadFailed = MibScalar((1, 3, 6, 1, 4, 1, 494, 4, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("microcode", 1), ("boot-code", 2), ("fddi-code", 3), ("atm-code", 4))))
if mibBuilder.loadTexts: ringswitchDownloadFailed.setStatus('mandatory')
ringswitchFilterTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 15, 1), )
if mibBuilder.loadTexts: ringswitchFilterTable.setStatus('mandatory')
ringswitchFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 15, 1, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchFilterIndex"))
if mibBuilder.loadTexts: ringswitchFilterEntry.setStatus('mandatory')
ringswitchFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFilterIndex.setStatus('mandatory')
ringswitchFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 15, 1, 1, 2), RingswitchRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFilterStatus.setStatus('mandatory')
ringswitchFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 15, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFilterName.setStatus('mandatory')
ringswitchFilterData = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 15, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFilterData.setStatus('mandatory')
ringswitchFilterExceptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("exception", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFilterExceptionType.setStatus('mandatory')
ringswitchFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("match-all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFilterType.setStatus('mandatory')
ringswitchFilterForwardType = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sr-only", 1), ("tb-only", 2), ("sr-tb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFilterForwardType.setStatus('mandatory')
ringswitchFilterMatrixTable = MibTable((1, 3, 6, 1, 4, 1, 494, 4, 15, 2), )
if mibBuilder.loadTexts: ringswitchFilterMatrixTable.setStatus('mandatory')
ringswitchFilterMatrixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 494, 4, 15, 2, 1), ).setIndexNames((0, "MADGERSW-MIB", "ringswitchFilterMatrixIndex"), (0, "MADGERSW-MIB", "ringswitchFilterMatrixRowIndex"))
if mibBuilder.loadTexts: ringswitchFilterMatrixEntry.setStatus('mandatory')
ringswitchFilterMatrixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFilterMatrixIndex.setStatus('mandatory')
ringswitchFilterMatrixRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 15, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ringswitchFilterMatrixRowIndex.setStatus('mandatory')
ringswitchFilterMatrixData = MibTableColumn((1, 3, 6, 1, 4, 1, 494, 4, 15, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ringswitchFilterMatrixData.setStatus('mandatory')
fanPSSpeedFailed = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,1)).setObjects(("MADGERSW-MIB", "ringswitchBasePSFanSpeed"))
fanExtSpeedFailed = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,2)).setObjects(("MADGERSW-MIB", "ringswitchBaseExtFanSpeed"))
portFailed = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,3)).setObjects(("MADGERSW-MIB", "ringswitchPortAdapterStatus"))
brTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,4)).setObjects(("MADGERSW-MIB", "ringswitchPortTestError"))
elanRingnumFailed = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,5)).setObjects(("MADGERSW-MIB", "ringswitchGenPortNum"))
routeDescriptorFailed = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,6)).setObjects(("MADGERSW-MIB", "ringswitchGenPortNum"), ("MADGERSW-MIB", "ringswitchRouteDescrSegmentID"), ("MADGERSW-MIB", "ringswitchRouteDescrBridgeNumber"))
fanSpeedFailed = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,7)).setObjects(("MADGERSW-MIB", "ringswitchFanSpeed"))
psuFailed = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,8)).setObjects(("MADGERSW-MIB", "ringswitchPSUStatus"))
versionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,9)).setObjects(("MADGERSW-MIB", "ringswitchVersionMismatch"))
genPortStatus = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,10)).setObjects(("MADGERSW-MIB", "ringswitchGenPortLastStatus"))
slotStatus = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,11)).setObjects(("MADGERSW-MIB", "ringswitchSlotLastStatus"))
oneNodePerPortViolation = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,12)).setObjects(("MADGERSW-MIB", "ringswitchTRGrpSwtchIfIndex"))
grpSwitchPortDisabled = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,13)).setObjects(("MADGERSW-MIB", "ringswitchTRGrpSwtchIfIndex"), ("MADGERSW-MIB", "ringswitchTRGrpSwtchPortIndex"), ("MADGERSW-MIB", "ringswitchTRGrpSwtchTrapInfoReason"))
grpSwitchPortKilled = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,14)).setObjects(("MADGERSW-MIB", "ringswitchTRGrpSwtchIfIndex"), ("MADGERSW-MIB", "ringswitchTRGrpSwtchPortIndex"), ("MADGERSW-MIB", "ringswitchTRGrpSwtchTrapInfoReason"))
downloadFailed = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,15)).setObjects(("MADGERSW-MIB", "ringswitchDownloadFailed"))
grpSwitchPortFaultDetected = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,16)).setObjects(("MADGERSW-MIB", "ringswitchTRGrpSwtchIfIndex"), ("MADGERSW-MIB", "ringswitchTRGrpSwtchPortIndex"), ("MADGERSW-MIB", "ringswitchTRGrpSwtchTrapInfoReason"))
fastFailoverWarning = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,17)).setObjects(("MADGERSW-MIB", "ringswitchTRIfFastFailoverPrimaryPort"), ("MADGERSW-MIB", "ringswitchTRIfFastFailoverTrapInfoReason"))
ethernetSTPBlockingTrap = NotificationType((1, 3, 6, 1, 4, 1, 494, 4) + (0,18)).setObjects(("MADGERSW-MIB", "ringswitchEthernetIfIndex"), ("MADGERSW-MIB", "ringswitchEthernetIfSTPBlockingTrapInfo"))
mibBuilder.exportSymbols("MADGERSW-MIB", ringswitchEthernetXBToTRNStatsFwdOtherEthFrames=ringswitchEthernetXBToTRNStatsFwdOtherEthFrames, ringswitchVersionMismatch=ringswitchVersionMismatch, ringswitchFilterEntry=ringswitchFilterEntry, ringswitchEthernetIfMediaType=ringswitchEthernetIfMediaType, ringswitchEthernetIfSPTEncaps=ringswitchEthernetIfSPTEncaps, ringswitchFwdPortSteState=ringswitchFwdPortSteState, ringswitchFwdStpMasters=ringswitchFwdStpMasters, ringswitchFanIndex=ringswitchFanIndex, ringswitchTLSCardEntry=ringswitchTLSCardEntry, ringswitchEthernetXBToTRNStatsNoFakeBuffer=ringswitchEthernetXBToTRNStatsNoFakeBuffer, ringswitchTRIfEntry=ringswitchTRIfEntry, ringswitchEthernetIfOperDuplexMode=ringswitchEthernetIfOperDuplexMode, ringswitchTRGrpSwtchRemoveThreshold=ringswitchTRGrpSwtchRemoveThreshold, ringswitchATMPortTxDiscards=ringswitchATMPortTxDiscards, ringswitchTLSPortIfArray=ringswitchTLSPortIfArray, ringswitchTLSRIPNeighbourIpAddress=ringswitchTLSRIPNeighbourIpAddress, ringswitchLAN=ringswitchLAN, ringswitchFilterType=ringswitchFilterType, ringswitchEthernetIfIPXTRType=ringswitchEthernetIfIPXTRType, ringswitchPSUNumUnits=ringswitchPSUNumUnits, ringswitchGenPortResetCounters=ringswitchGenPortResetCounters, ringswitchTRGrpSwtchSlotTable=ringswitchTRGrpSwtchSlotTable, ringswitchVirtTBNumSize=ringswitchVirtTBNumSize, ringswitchSlotCardId=ringswitchSlotCardId, ringswitchTLSVRRPVRTRVRID=ringswitchTLSVRRPVRTRVRID, ringswitchEthernetXBFromTRNStatsFwdTunnel8021hFrames=ringswitchEthernetXBFromTRNStatsFwdTunnel8021hFrames, ringswitchTLSOSPFAreaAddress=ringswitchTLSOSPFAreaAddress, ringswitchTLSRIPRejectEnable=ringswitchTLSRIPRejectEnable, ringswitchTRGrpSwtchTrapInfoReason=ringswitchTRGrpSwtchTrapInfoReason, ringswitchSlotBasePort=ringswitchSlotBasePort, ringswitchLANRingTable=ringswitchLANRingTable, ringswitchTLSRIPRejectIpAddress=ringswitchTLSRIPRejectIpAddress, ringswitchPortIfMode=ringswitchPortIfMode, ringswitchLANEntry=ringswitchLANEntry, ringswitchTLSStaticRouteMetric=ringswitchTLSStaticRouteMetric, ringswitchFwdPortTbMulticastInFrames=ringswitchFwdPortTbMulticastInFrames, ringswitchEthernetExtPhysStatsRxDataErrors=ringswitchEthernetExtPhysStatsRxDataErrors, ringswitchFwdTotalSteInFrames=ringswitchFwdTotalSteInFrames, ringswitchEthernetIfAdminDuplexMode=ringswitchEthernetIfAdminDuplexMode, ringswitchEthernetIfIPMulticastType=ringswitchEthernetIfIPMulticastType, ringswitchTLS=ringswitchTLS, ringswitchPortRingSpeed=ringswitchPortRingSpeed, ringswitchEthernetXBFromTRNStatsDiscBPDU=ringswitchEthernetXBFromTRNStatsDiscBPDU, ringswitchGenPort=ringswitchGenPort, ringswitchATMCardAAL5IfIndex=ringswitchATMCardAAL5IfIndex, fastFailoverWarning=fastFailoverWarning, ringswitchPortLAA=ringswitchPortLAA, ringswitchTRIfSoftErrTimer=ringswitchTRIfSoftErrTimer, ringswitchTLSPortOSPFPriority=ringswitchTLSPortOSPFPriority, ringswitchATMPortRxBUSFiltered=ringswitchATMPortRxBUSFiltered, ringswitchFwdTotalSpecOutFrames=ringswitchFwdTotalSpecOutFrames, ringswitchATMPortTxQuotaDiscards=ringswitchATMPortTxQuotaDiscards, ringswitchATMCardSONETIfIndex=ringswitchATMCardSONETIfIndex, ringswitchEthernetXBToTRNStatsFwdIPFrames=ringswitchEthernetXBToTRNStatsFwdIPFrames, ringswitchPortRMONSnoop=ringswitchPortRMONSnoop, ringswitchFwdMaxFrameSize=ringswitchFwdMaxFrameSize, ringswitchFDDICardVRStatus=ringswitchFDDICardVRStatus, ringswitchTRGrpSwtchPortEntry=ringswitchTRGrpSwtchPortEntry, ringswitchEthernetExtPhysStatsXonRxFrames=ringswitchEthernetExtPhysStatsXonRxFrames, ringswitchSlot=ringswitchSlot, ringswitchSlotTestError=ringswitchSlotTestError, ringswitchTLSVRRPVRTRMacAddress=ringswitchTLSVRRPVRTRMacAddress, ringswitchEthernetXBToTRNStatsFwdARPFrames=ringswitchEthernetXBToTRNStatsFwdARPFrames, ringswitchPortTable=ringswitchPortTable, ringswitchATMCardAdminStatus=ringswitchATMCardAdminStatus, ringswitchFwdGlobalHopLimit=ringswitchFwdGlobalHopLimit, RingswitchRowStatus=RingswitchRowStatus, ringswitchPortTransparentOutFrames=ringswitchPortTransparentOutFrames, ringswitchATMPortNum=ringswitchATMPortNum, ringswitchPortOutOctets=ringswitchPortOutOctets, ringswitchFwdPortTbMulticastOutFrames=ringswitchFwdPortTbMulticastOutFrames, ringswitchLANRingEntry=ringswitchLANRingEntry, ringswitchPortSpecInFrames=ringswitchPortSpecInFrames, ringswitchPortTransparentInFrames=ringswitchPortTransparentInFrames, ringswitchATMPortIPXEnable=ringswitchATMPortIPXEnable, ringswitchTLSCardRIPTTL=ringswitchTLSCardRIPTTL, ringswitchTLSPortOSPFDeadInterval=ringswitchTLSPortOSPFDeadInterval, ringswitchATMPortFailReason=ringswitchATMPortFailReason, ringswitchFwdPortTbForce=ringswitchFwdPortTbForce, ringswitchEthernetXBToTRNStatsDiscSptEncapsBlock=ringswitchEthernetXBToTRNStatsDiscSptEncapsBlock, ringswitchFilterIndex=ringswitchFilterIndex, ringswitchLANRingIndex=ringswitchLANRingIndex, ringswitchTLSOSPFAreaTable=ringswitchTLSOSPFAreaTable, ringswitchFwdPortCutThruEnable=ringswitchFwdPortCutThruEnable, ringswitchFwdTotalTransparentInFrames=ringswitchFwdTotalTransparentInFrames, ringswitchEthernetXBFromTRNStatsFwdIPFrames=ringswitchEthernetXBFromTRNStatsFwdIPFrames, ringswitchEthernetXBToTRNStatsEntry=ringswitchEthernetXBToTRNStatsEntry, ringswitchEthernetXBFromTRNStatsFwdIPXFrames=ringswitchEthernetXBFromTRNStatsFwdIPXFrames, ringswitchEthernetXBToTRNStatsTable=ringswitchEthernetXBToTRNStatsTable, ringswitchPortLEDs=ringswitchPortLEDs, ringswitchLANIndex=ringswitchLANIndex, ringswitchTLSPortOSPFHelloInterval=ringswitchTLSPortOSPFHelloInterval, ringswitchTLSCardOSPFRouterId=ringswitchTLSCardOSPFRouterId, ringswitchATMCardNum=ringswitchATMCardNum, ringswitchTLSPortOSPFAreaId=ringswitchTLSPortOSPFAreaId, ringswitchFilterTable=ringswitchFilterTable, ringswitchFDDICardFixupMode=ringswitchFDDICardFixupMode, ringswitchATMPortIPMulticastType=ringswitchATMPortIPMulticastType, ringswitchEthernetXBToTRNStatsFwdAARPPh1Frames=ringswitchEthernetXBToTRNStatsFwdAARPPh1Frames, ringswitchPortAddress=ringswitchPortAddress, ringswitchPortSpecOutFrames=ringswitchPortSpecOutFrames, ringswitchTLSCardBootPRASecondsThreshold=ringswitchTLSCardBootPRASecondsThreshold, ringswitchTRGrpSwtchRingPollThreshold=ringswitchTRGrpSwtchRingPollThreshold, ringswitchTLSPortOSPFAuthMD5KeyId=ringswitchTLSPortOSPFAuthMD5KeyId, ringswitchSlotCardRevision=ringswitchSlotCardRevision, ringswitchVirtTBStatus=ringswitchVirtTBStatus, ringswitchFDDICardEntry=ringswitchFDDICardEntry, ringswitchTRIfFastFailoverTrapInfoReason=ringswitchTRIfFastFailoverTrapInfoReason, ringswitchEthernetXBFromTRNStatsDiscARPDisabled=ringswitchEthernetXBFromTRNStatsDiscARPDisabled, ringswitchTLSRIPRejectTable=ringswitchTLSRIPRejectTable, ringswitchTLSCardDefRouteMetric=ringswitchTLSCardDefRouteMetric, ringswitchGenPortLAA=ringswitchGenPortLAA, oneNodePerPortViolation=oneNodePerPortViolation, ringswitchATMCardLECSWka=ringswitchATMCardLECSWka, ringswitchATMCardLECSIlmi=ringswitchATMCardLECSIlmi, ringswitchPort=ringswitchPort, ringswitchTLSRIPRejectPortNum=ringswitchTLSRIPRejectPortNum, ringswitchEthernetXBFromTRNStatsIfIndex=ringswitchEthernetXBFromTRNStatsIfIndex, ringswitchFwdPortTbState=ringswitchFwdPortTbState, ringswitchFanDescription=ringswitchFanDescription, ringswitchLCDUp=ringswitchLCDUp, ringswitchSlotCardType=ringswitchSlotCardType, ringswitchTLSVRRPVRTRPriority=ringswitchTLSVRRPVRTRPriority, ringswitchTRGrpSwtchEntry=ringswitchTRGrpSwtchEntry, ringswitchEthernetIfAdminFlowCtrl=ringswitchEthernetIfAdminFlowCtrl, ringswitchFwdPortTable=ringswitchFwdPortTable, ringswitchFDDICardNum=ringswitchFDDICardNum, ringswitchPSUTable=ringswitchPSUTable, ringswitchEthernetXBToTRNStatsDiscIPXDisabled=ringswitchEthernetXBToTRNStatsDiscIPXDisabled, ringswitchPortRingStatus=ringswitchPortRingStatus, ringswitchFan=ringswitchFan, ringswitchEthernetXBToTRNStatsIfIndex=ringswitchEthernetXBToTRNStatsIfIndex, ringswitchFwdTotalTransparentOutFrames=ringswitchFwdTotalTransparentOutFrames, ringswitchBaseDownloadMode=ringswitchBaseDownloadMode, ringswitchTRGrpSwtchTable=ringswitchTRGrpSwtchTable, ringswitchFwdTbForced=ringswitchFwdTbForced, ringswitchTRGrpSwtchPortIndex=ringswitchTRGrpSwtchPortIndex, ringswitchTLSBootPRAServerName=ringswitchTLSBootPRAServerName, ringswitchLCDMsgText=ringswitchLCDMsgText, ringswitchEthernetIfIPXEthType=ringswitchEthernetIfIPXEthType, ringswitchFwdPortEntry=ringswitchFwdPortEntry, ringswitchEthernetXBToTRNStatsDiscTag8021qCfi=ringswitchEthernetXBToTRNStatsDiscTag8021qCfi, ringswitchEthernetXBFromTRNStatsDiscNCPCache=ringswitchEthernetXBFromTRNStatsDiscNCPCache, ringswitchLANRingNum=ringswitchLANRingNum, ringswitchPortTransparentDiscFrames=ringswitchPortTransparentDiscFrames, LCDText=LCDText, ringswitchTRGrpSwtchSlotAdminStatii=ringswitchTRGrpSwtchSlotAdminStatii, ringswitchFwdPortTbBroadcastInFrames=ringswitchFwdPortTbBroadcastInFrames, ringswitchEthernetXBToTRNStatsFwdZeroOUIFrames=ringswitchEthernetXBToTRNStatsFwdZeroOUIFrames, ringswitchATMPortIPXTypeETH=ringswitchATMPortIPXTypeETH, ringswitchTRGrpSwtchBeaconAction=ringswitchTRGrpSwtchBeaconAction, ringswitchBase=ringswitchBase, ringswitchTRGrpSwtchPortTable=ringswitchTRGrpSwtchPortTable, ringswitchPortRMONCapabilities=ringswitchPortRMONCapabilities, ringswitchTLSCardDefRoute=ringswitchTLSCardDefRoute, ringswitchGenPortRMONCapabilities=ringswitchGenPortRMONCapabilities, ringswitchTRIfTable=ringswitchTRIfTable, ringswitchTLSStaticRouteIpAddress=ringswitchTLSStaticRouteIpAddress, ringswitchTLSVRRPVRTRTable=ringswitchTLSVRRPVRTRTable, ringswitch=ringswitch, ringswitchEthernetXBFromTRNStatsDiscTag8021qCfi=ringswitchEthernetXBFromTRNStatsDiscTag8021qCfi, ringswitchFwdTotalTpUnicastOutFrames=ringswitchFwdTotalTpUnicastOutFrames, ringswitchFwdPortAutoPathCost=ringswitchFwdPortAutoPathCost, ringswitchEthernetXBToTRNStatsDiscBPDU=ringswitchEthernetXBToTRNStatsDiscBPDU, ringswitchTLSRIPAdvertEnable=ringswitchTLSRIPAdvertEnable, ringswitchFwdTotalTpMiscInFrames=ringswitchFwdTotalTpMiscInFrames, ringswitchEthernetXBToTRNStatsFwdBPDUDecaps=ringswitchEthernetXBToTRNStatsFwdBPDUDecaps, ringswitchEthernetXBFromTRNStatsDiscSptEncapsBlock=ringswitchEthernetXBFromTRNStatsDiscSptEncapsBlock, ringswitchATMCardLocalESI=ringswitchATMCardLocalESI, ringswitchEthernetXBToTRNStatsDiscIPXType8022=ringswitchEthernetXBToTRNStatsDiscIPXType8022, ringswitchVirtTBType=ringswitchVirtTBType, ringswitchEthernetXBToTRNStatsDiscIPDisabled=ringswitchEthernetXBToTRNStatsDiscIPDisabled, ringswitchEthernetExtPhysStatsXonTxFrames=ringswitchEthernetExtPhysStatsXonTxFrames, ringswitchLCDTable=ringswitchLCDTable, ringswitchTLSPortMTU=ringswitchTLSPortMTU, ringswitchTLSBootPRAServerTable=ringswitchTLSBootPRAServerTable, ringswitchVirt=ringswitchVirt, ringswitchTLSCardStatsCpuUsage=ringswitchTLSCardStatsCpuUsage, ringswitchATMCardEntry=ringswitchATMCardEntry, ringswitchPSUDescription=ringswitchPSUDescription, ringswitchTLSVRRPVRTREnable=ringswitchTLSVRRPVRTREnable, ringswitchTLSVRRPVRTRAdvertInterval=ringswitchTLSVRRPVRTRAdvertInterval, ringswitchFanNumUnits=ringswitchFanNumUnits, ringswitchSlotStatus=ringswitchSlotStatus, ringswitchTLSVRRPVRTRPortNum=ringswitchTLSVRRPVRTRPortNum, ringswitchSlotTable=ringswitchSlotTable, ringswitchTRIfRPSEnable=ringswitchTRIfRPSEnable, ringswitchTRGrpSwtchPurgeAction=ringswitchTRGrpSwtchPurgeAction, ringswitchTLSCardStatsResetState=ringswitchTLSCardStatsResetState, ringswitchEthernetXBDupAddrMacAddress=ringswitchEthernetXBDupAddrMacAddress, ringswitchEthernetExtPhysStatsRxCarrierExtErrors=ringswitchEthernetExtPhysStatsRxCarrierExtErrors, ringswitchEthernetIfAdminSpeed=ringswitchEthernetIfAdminSpeed, ringswitchATMCardMediaType=ringswitchATMCardMediaType, ringswitchFanTable=ringswitchFanTable, ringswitchVirtTBNumArray=ringswitchVirtTBNumArray, ringswitchPSUStatus=ringswitchPSUStatus, ringswitchPortTestState=ringswitchPortTestState, ringswitchFwdPortTbMiscOutFrames=ringswitchFwdPortTbMiscOutFrames, TRNMacAddress=TRNMacAddress, ringswitchEthernetXBFromTRNStatsDiscTooBig=ringswitchEthernetXBFromTRNStatsDiscTooBig, ringswitchSlotCardNumPorts=ringswitchSlotCardNumPorts, slotStatus=slotStatus, ringswitchATMCardILMIStatus=ringswitchATMCardILMIStatus, ringswitchGenPortIPXNet=ringswitchGenPortIPXNet, ringswitchFwdTotalTpMulticastInFrames=ringswitchFwdTotalTpMulticastInFrames, ringswitchGenPortRMONMode=ringswitchGenPortRMONMode, ringswitchTRGrpSwtchSlotEntry=ringswitchTRGrpSwtchSlotEntry, ringswitchFilterMatrixIndex=ringswitchFilterMatrixIndex, ringswitchBaseRipSapSuppression=ringswitchBaseRipSapSuppression, ringswitchTRIfMode=ringswitchTRIfMode, ringswitchTLSVRRPVRTREntry=ringswitchTLSVRRPVRTREntry, ringswitchFDDI=ringswitchFDDI, ringswitchTLSRIPRejectEntry=ringswitchTLSRIPRejectEntry, ringswitchGenPortNum=ringswitchGenPortNum, ringswitchEthernetExtPhysStatsXoffRxFrames=ringswitchEthernetExtPhysStatsXoffRxFrames, ringswitchSlotCardLAN=ringswitchSlotCardLAN, ringswitchATMCardHardWiredESI=ringswitchATMCardHardWiredESI, ringswitchFwdPortMatrixSrSpecFrames=ringswitchFwdPortMatrixSrSpecFrames, ringswitchLCDTotalDisplays=ringswitchLCDTotalDisplays, ringswitchTLSPortOSPFEnable=ringswitchTLSPortOSPFEnable, ringswitchEthernetIfOperIPXNetwork=ringswitchEthernetIfOperIPXNetwork, ringswitchEthernetIfAdminMaxFrameSize=ringswitchEthernetIfAdminMaxFrameSize, ringswitchEthernetXBFromTRNStatsFwdIPFragmented=ringswitchEthernetXBFromTRNStatsFwdIPFragmented, ringswitchBaseBackPlaneType=ringswitchBaseBackPlaneType, ringswitchEthernetIfAutoNegotiate=ringswitchEthernetIfAutoNegotiate, ringswitchTLSCardStatsMaxFramesFwd=ringswitchTLSCardStatsMaxFramesFwd, ringswitchFilterMatrixRowIndex=ringswitchFilterMatrixRowIndex, ringswitchEthernetIfOperMaxFrameSize=ringswitchEthernetIfOperMaxFrameSize, ringswitchTR=ringswitchTR, portFailed=portFailed, ringswitchPSU=ringswitchPSU, ringswitchFilterName=ringswitchFilterName, ringswitchEthernetXBDupAddrTable=ringswitchEthernetXBDupAddrTable, ringswitchATMPortTxBUSUnknowns=ringswitchATMPortTxBUSUnknowns, ringswitchEthernetExtPhysStatsRxSequenceErrors=ringswitchEthernetExtPhysStatsRxSequenceErrors, grpSwitchPortFaultDetected=grpSwitchPortFaultDetected, ringswitchEthernetXBDupAddrEntry=ringswitchEthernetXBDupAddrEntry, ringswitchVirtTB=ringswitchVirtTB, ringswitchFDDICardTable=ringswitchFDDICardTable, ringswitchTLSCardStatsFreeMem=ringswitchTLSCardStatsFreeMem, ringswitchFilterMatrixData=ringswitchFilterMatrixData, ringswitchEthernetIfEntry=ringswitchEthernetIfEntry, ringswitchATMPortTxBUSBroadcasts=ringswitchATMPortTxBUSBroadcasts, ringswitchTRIfFastFailoverStandbyStatus=ringswitchTRIfFastFailoverStandbyStatus, ringswitchEthernetXBDupAddrIfIndex=ringswitchEthernetXBDupAddrIfIndex, ringswitchEthernetXBToTRNStatsDiscDuplicateRin=ringswitchEthernetXBToTRNStatsDiscDuplicateRin, ringswitchEthernetXBFromTRNStatsDiscIPCantFrag=ringswitchEthernetXBFromTRNStatsDiscIPCantFrag, ringswitchPortSteOutFrames=ringswitchPortSteOutFrames, ringswitchFwdTotalApeInFrames=ringswitchFwdTotalApeInFrames, ringswitchEthernetXBFromTRNStatsTable=ringswitchEthernetXBFromTRNStatsTable, ringswitchEthernetIfOperSpeed=ringswitchEthernetIfOperSpeed, ringswitchTLSOSPFAreaAddressMask=ringswitchTLSOSPFAreaAddressMask, ringswitchLANPermeable=ringswitchLANPermeable, ringswitchATMCardLECSPvc=ringswitchATMCardLECSPvc)
mibBuilder.exportSymbols("MADGERSW-MIB", ringswitchEthernetIfOperFlowCtrl=ringswitchEthernetIfOperFlowCtrl, ringswitchEthernetXBFromTRNStatsFwdZeroOUISnapFrames=ringswitchEthernetXBFromTRNStatsFwdZeroOUISnapFrames, ringswitchDownloadFailed=ringswitchDownloadFailed, ringswitchTRGrpSwtchBeaconThreshold=ringswitchTRGrpSwtchBeaconThreshold, ringswitchEthernetExtPhysStatsEntry=ringswitchEthernetExtPhysStatsEntry, ringswitchATMCardSignalStatus=ringswitchATMCardSignalStatus, ringswitchFDDICardSMTIndex=ringswitchFDDICardSMTIndex, ringswitchEthernetIfTable=ringswitchEthernetIfTable, ringswitchFwdTotalTpMulticastOutFrames=ringswitchFwdTotalTpMulticastOutFrames, ringswitchLCDCurrentMsgText=ringswitchLCDCurrentMsgText, ringswitchTRGrpSwtchIfIndex=ringswitchTRGrpSwtchIfIndex, ringswitchEthernetXBToTRNStatsDiscIPXTypeSnap=ringswitchEthernetXBToTRNStatsDiscIPXTypeSnap, ringswitchEthernetIfIPEnable=ringswitchEthernetIfIPEnable, ringswitchTRGrpSwtchIsoErrAction=ringswitchTRGrpSwtchIsoErrAction, ringswitchEthernetXBFromTRNStatsFwdIPMulticast=ringswitchEthernetXBFromTRNStatsFwdIPMulticast, ringswitchTLSStaticRouteMask=ringswitchTLSStaticRouteMask, ringswitchFwdPortApeInFrames=ringswitchFwdPortApeInFrames, ringswitchTRIfFastFailoverPrimaryPort=ringswitchTRIfFastFailoverPrimaryPort, ringswitchEthernetIfOperIPXEthType=ringswitchEthernetIfOperIPXEthType, ringswitchATMPortFailSecondary=ringswitchATMPortFailSecondary, ringswitchEthernetXBFromTRNStatsDiscIPDisabled=ringswitchEthernetXBFromTRNStatsDiscIPDisabled, ringswitchATMPortIPXBufLimit=ringswitchATMPortIPXBufLimit, ringswitchEthernetXBFromTRNStatsFwdOtherDLCFrames=ringswitchEthernetXBFromTRNStatsFwdOtherDLCFrames, ETHMacAddress=ETHMacAddress, ringswitchFwdTotalApeOutFrames=ringswitchFwdTotalApeOutFrames, ringswitchFilterForwardType=ringswitchFilterForwardType, ringswitchRouteDescrBridgeNumber=ringswitchRouteDescrBridgeNumber, ringswitchFwdTotalTpBroadcastOutFrames=ringswitchFwdTotalTpBroadcastOutFrames, ringswitchEthernetIfOperIPXTRType=ringswitchEthernetIfOperIPXTRType, ringswitchTLSPortLegFlags=ringswitchTLSPortLegFlags, ringswitchFwdPortApeOutFrames=ringswitchFwdPortApeOutFrames, ringswitchLCD=ringswitchLCD, ringswitchTRGrpSwtchRingPollAction=ringswitchTRGrpSwtchRingPollAction, ringswitchEthernetExtPhysStatsIfIndex=ringswitchEthernetExtPhysStatsIfIndex, ringswitchFwdPort=ringswitchFwdPort, ringswitchTLSRIPNeighbourTable=ringswitchTLSRIPNeighbourTable, ringswitchATMCardPortB=ringswitchATMCardPortB, ringswitchTLSOSPFAreaCardNum=ringswitchTLSOSPFAreaCardNum, ringswitchFwdPortTbUnicastInFrames=ringswitchFwdPortTbUnicastInFrames, ringswitchFwdPortStpMaster=ringswitchFwdPortStpMaster, ringswitchTRIfRingSpeed=ringswitchTRIfRingSpeed, ringswitchFilterMatrixEntry=ringswitchFilterMatrixEntry, ringswitchPSUEntry=ringswitchPSUEntry, ringswitchTLSPortRIP2AuthKey=ringswitchTLSPortRIP2AuthKey, ringswitchEthernetXBToTRNStatsDiscNCPCache=ringswitchEthernetXBToTRNStatsDiscNCPCache, ringswitchTRGrpSwtchSlotIndex=ringswitchTRGrpSwtchSlotIndex, ringswitchTLSStaticRouteGateway=ringswitchTLSStaticRouteGateway, ringswitchATMCardATMIfIndex=ringswitchATMCardATMIfIndex, ringswitchFilterMatrixTable=ringswitchFilterMatrixTable, ringswitchPortSteInFrames=ringswitchPortSteInFrames, ringswitchTLSStaticRouteCardNum=ringswitchTLSStaticRouteCardNum, ringswitchTLSBootPRAServerEnable=ringswitchTLSBootPRAServerEnable, downloadFailed=downloadFailed, ringswitchTLSPortEnable=ringswitchTLSPortEnable, ringswitchTLSVRRPVRTRIpAddress=ringswitchTLSVRRPVRTRIpAddress, ringswitchBaseStpMode=ringswitchBaseStpMode, ringswitchEthernetIfCacheClear=ringswitchEthernetIfCacheClear, ringswitchFwd=ringswitchFwd, brTestFailed=brTestFailed, ringswitchTLSCardRIPAging=ringswitchTLSCardRIPAging, ringswitchFwdAdminState=ringswitchFwdAdminState, ringswitchVirtTBName=ringswitchVirtTBName, ringswitchTLSCardBootPRAHopsThreshold=ringswitchTLSCardBootPRAHopsThreshold, ringswitchATMCardLECSAddress=ringswitchATMCardLECSAddress, ringswitchEthernetXBFromTRNStatsFwdBPDUEncaps=ringswitchEthernetXBFromTRNStatsFwdBPDUEncaps, ringswitchEthernetXBFromTRNStatsDiscIPXTypeSnap=ringswitchEthernetXBFromTRNStatsDiscIPXTypeSnap, ringswitchEthernetXBFromTRNStatsFwdBPDUDecaps=ringswitchEthernetXBFromTRNStatsFwdBPDUDecaps, ringswitchTrap=ringswitchTrap, ringswitchTLSPortOSPFAuthKey=ringswitchTLSPortOSPFAuthKey, ringswitchGenPortOutOctets=ringswitchGenPortOutOctets, ringswitchFwdPortSpecInFrames=ringswitchFwdPortSpecInFrames, ringswitchEthernetXBToTRNStatsDiscBPDUEncaps=ringswitchEthernetXBToTRNStatsDiscBPDUEncaps, ringswitchVirtTBEntry=ringswitchVirtTBEntry, ringswitchTRGrpSwtchSlotOperStatii=ringswitchTRGrpSwtchSlotOperStatii, ringswitchEthernetXBFromTRNStatsCacheFull=ringswitchEthernetXBFromTRNStatsCacheFull, ringswitchFwdPortTestState=ringswitchFwdPortTestState, psuFailed=psuFailed, ringswitchTLSPortBootPFlags=ringswitchTLSPortBootPFlags, ringswitchSlotVersion=ringswitchSlotVersion, ringswitchEthernetXBFromTRNStatsRIFCacheFull=ringswitchEthernetXBFromTRNStatsRIFCacheFull, ringswitchPortFixupMode=ringswitchPortFixupMode, ringswitchPortApeInFrames=ringswitchPortApeInFrames, ringswitchTLSPortName=ringswitchTLSPortName, ringswitchPortRMONMode=ringswitchPortRMONMode, ringswitchSlotIfAdminStatus=ringswitchSlotIfAdminStatus, ringswitchTLSPortRIPTxType=ringswitchTLSPortRIPTxType, fanPSSpeedFailed=fanPSSpeedFailed, ringswitchTRGrpSwtchTrapInfo=ringswitchTRGrpSwtchTrapInfo, ringswitchTLSCardStatsMinFreeMem=ringswitchTLSCardStatsMinFreeMem, ringswitchFwdTotalRxFrames=ringswitchFwdTotalRxFrames, ringswitchEthernetXBToTRNStatsDiscTag8021qVlan=ringswitchEthernetXBToTRNStatsDiscTag8021qVlan, ringswitchLCDCurrentDisplay=ringswitchLCDCurrentDisplay, ringswitchTLSCardStatsFramesFwd=ringswitchTLSCardStatsFramesFwd, ringswitchBaseRMONMirrorPort=ringswitchBaseRMONMirrorPort, ringswitchTLSPortRIP2AuthType=ringswitchTLSPortRIP2AuthType, ethernetSTPBlockingTrap=ethernetSTPBlockingTrap, ringswitchEthernetIfPriorityTaggingVLANId=ringswitchEthernetIfPriorityTaggingVLANId, ringswitchTLSCardNum=ringswitchTLSCardNum, ringswitchBasePSFanSpeed=ringswitchBasePSFanSpeed, ringswitchPortTestPhase=ringswitchPortTestPhase, ringswitchVirtTBTable=ringswitchVirtTBTable, ringswitchFwdPortTbUnicastOutFrames=ringswitchFwdPortTbUnicastOutFrames, ringswitchBaseExtFanSpeed=ringswitchBaseExtFanSpeed, ringswitchTLSOSPFAreaFlags=ringswitchTLSOSPFAreaFlags, ringswitchFwdPortMode=ringswitchFwdPortMode, INTEGER48=INTEGER48, ringswitchFwdPortStationType=ringswitchFwdPortStationType, ringswitchTRIfRingStatus=ringswitchTRIfRingStatus, ringswitchTLSBootPRAServerCardNum=ringswitchTLSBootPRAServerCardNum, ringswitchFwdPortSteOutFrames=ringswitchFwdPortSteOutFrames, genPortStatus=genPortStatus, ringswitchSlotAdapterStatus=ringswitchSlotAdapterStatus, ringswitchFwdOperState=ringswitchFwdOperState, ringswitchEthernetXBToTRNStatsFwdIPXFrames=ringswitchEthernetXBToTRNStatsFwdIPXFrames, ringswitchFwdPortTransparentDiscFrames=ringswitchFwdPortTransparentDiscFrames, ringswitchGenPortAdapterStatus=ringswitchGenPortAdapterStatus, ringswitchGenPortAddress=ringswitchGenPortAddress, ringswitchTLSVRRPVRTRAdvertDeadInterval=ringswitchTLSVRRPVRTRAdvertDeadInterval, NSAP=NSAP, ringswitchLANRingStatus=ringswitchLANRingStatus, ringswitchEthernetXBFromTRNStatsDiscBPDUEncaps=ringswitchEthernetXBFromTRNStatsDiscBPDUEncaps, ringswitchPortEntry=ringswitchPortEntry, ringswitchEthernetIfSTPBlockingTrapInfo=ringswitchEthernetIfSTPBlockingTrapInfo, ringswitchTLSRIPAdvertPortNum=ringswitchTLSRIPAdvertPortNum, ringswitchEthernetXBFromTRNStatsDiscBadRIF=ringswitchEthernetXBFromTRNStatsDiscBadRIF, ringswitchFDDICardStatus=ringswitchFDDICardStatus, ringswitchTRGrpSwtchIsoErrThreshold=ringswitchTRGrpSwtchIsoErrThreshold, ringswitchSlotPortHealth=ringswitchSlotPortHealth, ringswitchFanEntry=ringswitchFanEntry, ringswitchEthernetIfIPXEnable=ringswitchEthernetIfIPXEnable, ringswitchSlotEntry=ringswitchSlotEntry, ringswitchFwdPortEthernetSRBlk=ringswitchFwdPortEthernetSRBlk, ringswitchTLSOSPFAreaId=ringswitchTLSOSPFAreaId, madge=madge, ringswitchFwdPortTbMiscInFrames=ringswitchFwdPortTbMiscInFrames, ringswitchTLSCardARPFlush=ringswitchTLSCardARPFlush, ringswitchPortAdapterStatus=ringswitchPortAdapterStatus, ringswitchTLSCardRIPInterval=ringswitchTLSCardRIPInterval, ringswitchTLSPortOSPFAuthType=ringswitchTLSPortOSPFAuthType, ringswitchTLSCardOSPFFlags=ringswitchTLSCardOSPFFlags, ringswitchTLSCardRowStatuses=ringswitchTLSCardRowStatuses, ringswitchGenPortLastStatus=ringswitchGenPortLastStatus, ringswitchGenPortHealth=ringswitchGenPortHealth, ringswitchEthernetXBFromTRNStatsDiscIPXDisabled=ringswitchEthernetXBFromTRNStatsDiscIPXDisabled, ringswitchPortNum=ringswitchPortNum, ringswitchEthernetXBFromTRNStatsFwdAARPPh1Frames=ringswitchEthernetXBFromTRNStatsFwdAARPPh1Frames, ringswitchEthernetXBToTRNStatsCacheFull=ringswitchEthernetXBToTRNStatsCacheFull, ringswitchPortCutThruEnable=ringswitchPortCutThruEnable, ringswitchTRIfTokenPriorityControl=ringswitchTRIfTokenPriorityControl, ringswitchBaseRMONState=ringswitchBaseRMONState, ringswitchEthernetXBFromTRNStatsEntry=ringswitchEthernetXBFromTRNStatsEntry, ringswitchPortStationType=ringswitchPortStationType, ringswitchATMCardMode=ringswitchATMCardMode, ringswitchEthernetXBFromTRNStatsDiscTag8021qVlan=ringswitchEthernetXBFromTRNStatsDiscTag8021qVlan, ringswitchTLSStaticRouteEntry=ringswitchTLSStaticRouteEntry, ringswitchSlotCardLEDs=ringswitchSlotCardLEDs, ringswitchGenPortCreate=ringswitchGenPortCreate, ringswitchTLSOSPFAreaEntry=ringswitchTLSOSPFAreaEntry, ringswitchATM=ringswitchATM, ringswitchFwdTotalTpMiscOutFrames=ringswitchFwdTotalTpMiscOutFrames, ringswitchFilterStatus=ringswitchFilterStatus, ringswitchTRGrpSwtchPortIfIndex=ringswitchTRGrpSwtchPortIfIndex, ringswitchEthernetIfAdminIPXNetwork=ringswitchEthernetIfAdminIPXNetwork, ringswitchEthernetIfIndex=ringswitchEthernetIfIndex, routeDescriptorFailed=routeDescriptorFailed, ringswitchFwdTotalSteOutFrames=ringswitchFwdTotalSteOutFrames, ringswitchFwdTotalSpecInFrames=ringswitchFwdTotalSpecInFrames, ringswitchSlotNumSlots=ringswitchSlotNumSlots, ringswitchATMCardActivePort=ringswitchATMCardActivePort, ringswitchEthernetXBToTRNStatsDiscIPXTypeDix=ringswitchEthernetXBToTRNStatsDiscIPXTypeDix, ringswitchEthernetXBFromTRNStatsFwdAARPPh2Frames=ringswitchEthernetXBFromTRNStatsFwdAARPPh2Frames, ringswitchPortSummary=ringswitchPortSummary, ringswitchFilter=ringswitchFilter, ringswitchTLSVRRPVRTRAuthKey=ringswitchTLSVRRPVRTRAuthKey, ringswitchPortRPSEnable=ringswitchPortRPSEnable, ringswitchLANName=ringswitchLANName, ringswitchEthernet=ringswitchEthernet, ringswitchEthernetXBToTRNStatsDiscBadRif=ringswitchEthernetXBToTRNStatsDiscBadRif, ringswitchTRIfFrameStatusControl=ringswitchTRIfFrameStatusControl, ringswitchFilterData=ringswitchFilterData, ringswitchATMPortIPEnable=ringswitchATMPortIPEnable, ringswitchLANStatus=ringswitchLANStatus, ringswitchATMCardRowStatuses=ringswitchATMCardRowStatuses, fanSpeedFailed=fanSpeedFailed, ringswitchFwdPortSteInFrames=ringswitchFwdPortSteInFrames, ringswitchTRIfFastFailoverEnable=ringswitchTRIfFastFailoverEnable, ringswitchATMCardActualUNIVer=ringswitchATMCardActualUNIVer, ringswitchTLSVRRPVRTRAuthType=ringswitchTLSVRRPVRTRAuthType, ringswitchFwdBridgeNum=ringswitchFwdBridgeNum, ringswitchEthernetXBToTRNStatsDiscARPDisabled=ringswitchEthernetXBToTRNStatsDiscARPDisabled, ringswitchEthernetIfPriorityTagging=ringswitchEthernetIfPriorityTagging, ringswitchTLSPortNum=ringswitchTLSPortNum, ringswitchEthernetXBToTRNStatsDiscIPXType8023=ringswitchEthernetXBToTRNStatsDiscIPXType8023, ringswitchTLSStaticRouteTable=ringswitchTLSStaticRouteTable, ringswitchFwdTotalTpBroadcastInFrames=ringswitchFwdTotalTpBroadcastInFrames, ringswitchEthernetXBToTRNStatsDiscFilter=ringswitchEthernetXBToTRNStatsDiscFilter, ringswitchGenPortTable=ringswitchGenPortTable, ringswitchEthernetXBToTRNStatsFwdAARPPh2Frames=ringswitchEthernetXBToTRNStatsFwdAARPPh2Frames, ringswitchLANTable=ringswitchLANTable, ringswitchPortInOctets=ringswitchPortInOctets, ringswitchTLSBootPRAServerEntry=ringswitchTLSBootPRAServerEntry, ringswitchSlotHealth=ringswitchSlotHealth, ringswitchTRGrpSwtchSlotAutoPartitions=ringswitchTRGrpSwtchSlotAutoPartitions, ringswitchSlotIndex=ringswitchSlotIndex, ringswitchEthernetXBFromTRNStatsDiscFilter=ringswitchEthernetXBFromTRNStatsDiscFilter, ringswitchTLSPortIpSubnetMask=ringswitchTLSPortIpSubnetMask, ringswitchEthernetXBDupAddrIndex=ringswitchEthernetXBDupAddrIndex, ringswitchFanSpeed=ringswitchFanSpeed, ringswitchPortTestError=ringswitchPortTestError, ringswitchFwdPortBroadcastReflect=ringswitchFwdPortBroadcastReflect, ringswitchFwdPortMatrixTbUniFrames=ringswitchFwdPortMatrixTbUniFrames, DisplayString=DisplayString, ringswitchEthernetExtPhysStatsTable=ringswitchEthernetExtPhysStatsTable, ringswitchFwdTotalTpUnicastInFrames=ringswitchFwdTotalTpUnicastInFrames, ringswitchFwdTotalBadFrames=ringswitchFwdTotalBadFrames, fanExtSpeedFailed=fanExtSpeedFailed, ringswitchTLSPortIpAddress=ringswitchTLSPortIpAddress, ringswitchGenPortEntry=ringswitchGenPortEntry, ringswitchFwdPortTestError=ringswitchFwdPortTestError, ringswitchLCDDown=ringswitchLCDDown, ringswitchTRIfIndex=ringswitchTRIfIndex, ringswitchFwdPortTbBroadcastOutFrames=ringswitchFwdPortTbBroadcastOutFrames, ringswitchSlotPortCreated=ringswitchSlotPortCreated, ringswitchTLSPortRIPRxType=ringswitchTLSPortRIPRxType, ringswitchTLSPortRIPFlags=ringswitchTLSPortRIPFlags, ringswitchTLSCardTable=ringswitchTLSCardTable, ringswitchEthernetXBToTRNStatsDiscHopLimit=ringswitchEthernetXBToTRNStatsDiscHopLimit, ringswitchGenPortRMONSnoop=ringswitchGenPortRMONSnoop, ringswitchATMPortEntry=ringswitchATMPortEntry, elanRingnumFailed=elanRingnumFailed, ringswitchFwdTotalTxFrames=ringswitchFwdTotalTxFrames, ringswitchEthernetXBToTRNStatsFwdIPMulticast=ringswitchEthernetXBToTRNStatsFwdIPMulticast, ringswitchBaseTotalResetCounters=ringswitchBaseTotalResetCounters, ringswitchLCDNum=ringswitchLCDNum, ringswitchFwdPortTestPhase=ringswitchFwdPortTestPhase, ringswitchEthernetXBToTRNStatsFwdBPDUEncaps=ringswitchEthernetXBToTRNStatsFwdBPDUEncaps, ringswitchLANRingGroup=ringswitchLANRingGroup, ringswitchEthernetXBFromTRNStatsFwdARPFrames=ringswitchEthernetXBFromTRNStatsFwdARPFrames, ringswitchATMPortTable=ringswitchATMPortTable, grpSwitchPortDisabled=grpSwitchPortDisabled, ringswitchTLSPortTable=ringswitchTLSPortTable, ringswitchBaseAREConversion=ringswitchBaseAREConversion, ringswitchATMPortIPXEvenize=ringswitchATMPortIPXEvenize, ringswitchTLSCardRIPFlags=ringswitchTLSCardRIPFlags, ringswitchSlotLastStatus=ringswitchSlotLastStatus, ringswitchEthernetXBToTRNStatsFwdOtherDLCFrames=ringswitchEthernetXBToTRNStatsFwdOtherDLCFrames, ringswitchPortResetCounters=ringswitchPortResetCounters, ringswitchTLSRIPNeighbourCardNum=ringswitchTLSRIPNeighbourCardNum, ringswitchTLSRIPNeighbourEnable=ringswitchTLSRIPNeighbourEnable, ringswitchEthernetXBFromTRNStatsDiscNonTermRIF=ringswitchEthernetXBFromTRNStatsDiscNonTermRIF, ringswitchGenPortInOctets=ringswitchGenPortInOctets, ringswitchTLSRIPNeighbourEntry=ringswitchTLSRIPNeighbourEntry, ringswitchFwdPortSpecOutFrames=ringswitchFwdPortSpecOutFrames, ringswitchEthernetExtPhysStatsXoffTxFrames=ringswitchEthernetExtPhysStatsXoffTxFrames)
mibBuilder.exportSymbols("MADGERSW-MIB", ringswitchFwdPortTransparentOutFrames=ringswitchFwdPortTransparentOutFrames, ringswitchFDDICardVRBridgeNum=ringswitchFDDICardVRBridgeNum, ringswitchTLSBootPRAServerIpAddress=ringswitchTLSBootPRAServerIpAddress, ringswitchSlotCardDescription=ringswitchSlotCardDescription, ringswitchEthernetXBFromTRNStatsDiscIPXType8022=ringswitchEthernetXBFromTRNStatsDiscIPXType8022, ringswitchTLSPortEntry=ringswitchTLSPortEntry, ringswitchATMPortIPXTypeTRN=ringswitchATMPortIPXTypeTRN, ringswitchPSUIndex=ringswitchPSUIndex, ringswitchVirtTBIndex=ringswitchVirtTBIndex, versionMismatch=versionMismatch, grpSwitchPortKilled=grpSwitchPortKilled, ringswitchATMCardEthLecSupport=ringswitchATMCardEthLecSupport, ringswitchPortApeOutFrames=ringswitchPortApeOutFrames, ringswitchTLSCardStatsMaxCpuUsage=ringswitchTLSCardStatsMaxCpuUsage, ringswitchATMCardTable=ringswitchATMCardTable, ringswitchLCDTableEntry=ringswitchLCDTableEntry, ringswitchATMCardConfigUNIVer=ringswitchATMCardConfigUNIVer, ringswitchFilterExceptionType=ringswitchFilterExceptionType, ringswitchTLSRIPAdvertIpAddress=ringswitchTLSRIPAdvertIpAddress, ringswitchTLSPortOSPFCost=ringswitchTLSPortOSPFCost, ringswitchFDDICardVRRingNum=ringswitchFDDICardVRRingNum, ringswitchRouteDescrSegmentID=ringswitchRouteDescrSegmentID, ringswitchFwdPortTransparentInFrames=ringswitchFwdPortTransparentInFrames, ringswitchPortMediaType=ringswitchPortMediaType, ringswitchPortForwardMode=ringswitchPortForwardMode, ringswitchATMPortRxDiscards=ringswitchATMPortRxDiscards, ringswitchATMCardRemoteUNIVer=ringswitchATMCardRemoteUNIVer, ringswitchTRGrpSwtchPurgeThreshold=ringswitchTRGrpSwtchPurgeThreshold, ringswitchTLSRIPAdvertTable=ringswitchTLSRIPAdvertTable, ringswitchTLSRIPAdvertEntry=ringswitchTLSRIPAdvertEntry, ringswitchTRGrpSwtchPortAddress=ringswitchTRGrpSwtchPortAddress, ringswitchEthernetXBFromTRNStatsDiscZeroRingNum=ringswitchEthernetXBFromTRNStatsDiscZeroRingNum)
