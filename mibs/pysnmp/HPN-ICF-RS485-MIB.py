#
# PySNMP MIB module HPN-ICF-RS485-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-RS485-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:29:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, TimeTicks, NotificationType, Integer32, IpAddress, Bits, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, iso, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "NotificationType", "Integer32", "IpAddress", "Bits", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "iso", "Counter32", "MibIdentifier")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hpnicfRS485 = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109))
if mibBuilder.loadTexts: hpnicfRS485.setLastUpdated('200910210000Z')
if mibBuilder.loadTexts: hpnicfRS485.setOrganization('')
hpnicfRS485Properties = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1))
hpnicfRS485PropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1), )
if mibBuilder.loadTexts: hpnicfRS485PropertiesTable.setStatus('current')
hpnicfRS485PropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpnicfRS485PropertiesEntry.setStatus('current')
hpnicfRS485RawSessionNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRS485RawSessionNextIndex.setStatus('current')
hpnicfRS485BaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("bautRate300", 1), ("bautRate600", 2), ("bautRate1200", 3), ("bautRate2400", 4), ("bautRate4800", 5), ("bautRate9600", 6), ("bautRate19200", 7), ("bautRate38400", 8), ("bautRate57600", 9), ("bautRate115200", 10))).clone('bautRate9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRS485BaudRate.setStatus('current')
hpnicfRS485DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("five", 1), ("six", 2), ("seven", 3), ("eight", 4))).clone('eight')).setUnits('bit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRS485DataBits.setStatus('current')
hpnicfRS485Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("mark", 4), ("space", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRS485Parity.setStatus('current')
hpnicfRS485StopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("oneAndHalf", 3))).clone('one')).setUnits('bit').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRS485StopBits.setStatus('current')
hpnicfRS485FlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("hardware", 2), ("xonOrxoff", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRS485FlowControl.setStatus('current')
hpnicfRS485TXCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRS485TXCharacters.setStatus('current')
hpnicfRS485RXCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRS485RXCharacters.setStatus('current')
hpnicfRS485TXErrCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRS485TXErrCharacters.setStatus('current')
hpnicfRS485RXErrCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRS485RXErrCharacters.setStatus('current')
hpnicfRS485ResetCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("counting", 1), ("clear", 2))).clone('counting')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRS485ResetCharacters.setStatus('current')
hpnicfRS485RawSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2))
hpnicfRS485RawSessionSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 1))
hpnicfRS485RawSessionMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRS485RawSessionMaxNum.setStatus('current')
hpnicfRS485RawSessionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 2), )
if mibBuilder.loadTexts: hpnicfRS485RawSessionTable.setStatus('current')
hpnicfRS485RawSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-RS485-MIB", "hpnicfRS485SessionIndex"))
if mibBuilder.loadTexts: hpnicfRS485RawSessionEntry.setStatus('current')
hpnicfRS485SessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hpnicfRS485SessionIndex.setStatus('current')
hpnicfRS485SessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("udp", 1), ("tcpClient", 2), ("tcpServer", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRS485SessionType.setStatus('current')
hpnicfRS485SessionAddType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 2, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfRS485SessionAddType.setStatus('current')
hpnicfRS485SessionRemoteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRS485SessionRemoteIP.setStatus('current')
hpnicfRS485SessionRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRS485SessionRemotePort.setStatus('current')
hpnicfRS485SessionLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1024, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRS485SessionLocalPort.setStatus('current')
hpnicfRS485SessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfRS485SessionStatus.setStatus('current')
hpnicfRS485RawSessionErrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 3), )
if mibBuilder.loadTexts: hpnicfRS485RawSessionErrInfoTable.setStatus('current')
hpnicfRS485RawSessionErrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-RS485-MIB", "hpnicfRS485SessionIndex"))
if mibBuilder.loadTexts: hpnicfRS485RawSessionErrInfoEntry.setStatus('current')
hpnicfRS485RawSessionErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 109, 2, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfRS485RawSessionErrInfo.setStatus('current')
mibBuilder.exportSymbols("HPN-ICF-RS485-MIB", hpnicfRS485RawSessionSummary=hpnicfRS485RawSessionSummary, hpnicfRS485StopBits=hpnicfRS485StopBits, hpnicfRS485RawSessionEntry=hpnicfRS485RawSessionEntry, hpnicfRS485RawSessionErrInfoTable=hpnicfRS485RawSessionErrInfoTable, hpnicfRS485RawSessions=hpnicfRS485RawSessions, hpnicfRS485=hpnicfRS485, PYSNMP_MODULE_ID=hpnicfRS485, hpnicfRS485SessionRemotePort=hpnicfRS485SessionRemotePort, hpnicfRS485ResetCharacters=hpnicfRS485ResetCharacters, hpnicfRS485SessionLocalPort=hpnicfRS485SessionLocalPort, hpnicfRS485RXErrCharacters=hpnicfRS485RXErrCharacters, hpnicfRS485RawSessionTable=hpnicfRS485RawSessionTable, hpnicfRS485RXCharacters=hpnicfRS485RXCharacters, hpnicfRS485SessionStatus=hpnicfRS485SessionStatus, hpnicfRS485TXErrCharacters=hpnicfRS485TXErrCharacters, hpnicfRS485PropertiesTable=hpnicfRS485PropertiesTable, hpnicfRS485PropertiesEntry=hpnicfRS485PropertiesEntry, hpnicfRS485RawSessionErrInfo=hpnicfRS485RawSessionErrInfo, hpnicfRS485Parity=hpnicfRS485Parity, hpnicfRS485TXCharacters=hpnicfRS485TXCharacters, hpnicfRS485RawSessionNextIndex=hpnicfRS485RawSessionNextIndex, hpnicfRS485RawSessionMaxNum=hpnicfRS485RawSessionMaxNum, hpnicfRS485Properties=hpnicfRS485Properties, hpnicfRS485SessionRemoteIP=hpnicfRS485SessionRemoteIP, hpnicfRS485SessionType=hpnicfRS485SessionType, hpnicfRS485SessionAddType=hpnicfRS485SessionAddType, hpnicfRS485BaudRate=hpnicfRS485BaudRate, hpnicfRS485DataBits=hpnicfRS485DataBits, hpnicfRS485FlowControl=hpnicfRS485FlowControl, hpnicfRS485RawSessionErrInfoEntry=hpnicfRS485RawSessionErrInfoEntry, hpnicfRS485SessionIndex=hpnicfRS485SessionIndex)
