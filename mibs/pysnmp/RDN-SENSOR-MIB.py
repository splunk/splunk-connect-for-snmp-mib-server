#
# PySNMP MIB module RDN-SENSOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RDN-SENSOR-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:46:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
riverdelta, = mibBuilder.importSymbols("RDN-MIB", "riverdelta")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, TimeTicks, NotificationType, Unsigned32, MibIdentifier, ModuleIdentity, iso, ObjectIdentity, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "TimeTicks", "NotificationType", "Unsigned32", "MibIdentifier", "ModuleIdentity", "iso", "ObjectIdentity", "Counter64", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rdnSensor = ModuleIdentity((1, 3, 6, 1, 4, 1, 4981, 5))
rdnSensor.setRevisions(('2008-08-08 00:00', '2003-11-05 00:00', '2003-04-29 00:00', '2001-08-07 00:00',))
if mibBuilder.loadTexts: rdnSensor.setLastUpdated('200808080000Z')
if mibBuilder.loadTexts: rdnSensor.setOrganization('Motorola')
rdnSensorTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 5, 1), )
if mibBuilder.loadTexts: rdnSensorTable.setStatus('current')
rdnSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1), ).setIndexNames((0, "RDN-SENSOR-MIB", "rdnSensorIndex"))
if mibBuilder.loadTexts: rdnSensorEntry.setStatus('current')
rdnSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSensorIndex.setStatus('current')
rdnSensorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSensorDescr.setStatus('current')
rdnSensorObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSensorObjectID.setStatus('current')
rdnSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSensorValue.setStatus('current')
rdnSensorThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnSensorThresholdHigh.setStatus('current')
rdnSensorThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnSensorThresholdLow.setStatus('current')
rdnSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("belowMin", 3), ("aboveMax", 4), ("defective", 5), ("notPresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSensorStatus.setStatus('current')
rdnSensorNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnSensorNotificationEnable.setStatus('current')
rdnSensorNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 5, 2))
rdnSensorNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 5, 2, 0))
rdnSensorThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 4981, 5, 2, 0, 1)).setObjects(("RDN-SENSOR-MIB", "rdnSensorIndex"), ("RDN-SENSOR-MIB", "rdnSensorDescr"), ("RDN-SENSOR-MIB", "rdnSensorObjectID"), ("RDN-SENSOR-MIB", "rdnSensorValue"), ("RDN-SENSOR-MIB", "rdnSensorThresholdHigh"), ("RDN-SENSOR-MIB", "rdnSensorThresholdLow"), ("RDN-SENSOR-MIB", "rdnSensorStatus"))
if mibBuilder.loadTexts: rdnSensorThresholdExceeded.setStatus('current')
mibBuilder.exportSymbols("RDN-SENSOR-MIB", rdnSensor=rdnSensor, rdnSensorThresholdExceeded=rdnSensorThresholdExceeded, rdnSensorIndex=rdnSensorIndex, rdnSensorTable=rdnSensorTable, rdnSensorDescr=rdnSensorDescr, rdnSensorThresholdHigh=rdnSensorThresholdHigh, rdnSensorNotificationsPrefix=rdnSensorNotificationsPrefix, rdnSensorStatus=rdnSensorStatus, rdnSensorNotifications=rdnSensorNotifications, rdnSensorEntry=rdnSensorEntry, rdnSensorValue=rdnSensorValue, rdnSensorObjectID=rdnSensorObjectID, PYSNMP_MODULE_ID=rdnSensor, rdnSensorNotificationEnable=rdnSensorNotificationEnable, rdnSensorThresholdLow=rdnSensorThresholdLow)
