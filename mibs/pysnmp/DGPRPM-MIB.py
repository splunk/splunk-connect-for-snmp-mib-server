#
# PySNMP MIB module DGPRPM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGPRPM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:27:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, enterprises, Integer32, Counter32, ModuleIdentity, ObjectIdentity, IpAddress, TimeTicks, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "enterprises", "Integer32", "Counter32", "ModuleIdentity", "ObjectIdentity", "IpAddress", "TimeTicks", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
dgp = MibIdentifier((1, 3, 6, 1, 4, 1, 17420))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1))
rpm = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3))
cps = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4))
protocol = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ups01", 0), ("ups02", 1), ("rpm", 2), ("cps", 3), ("ats", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocol.setStatus('mandatory')
rpmNumber = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmNumber.setStatus('mandatory')
rpmTable = MibTable((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2), )
if mibBuilder.loadTexts: rpmTable.setStatus('mandatory')
accessTable = MibTable((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999, 1, 1), )
if mibBuilder.loadTexts: accessTable.setStatus('mandatory')
rpmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1), ).setIndexNames((0, "DGPRPM-MIB", "rpmID"))
if mibBuilder.loadTexts: rpmEntry.setStatus('mandatory')
rpmID = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmID.setStatus('mandatory')
rpmOutletNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmOutletNumber.setStatus('mandatory')
rpmOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmOutletState.setStatus('mandatory')
rpmControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmControlType.setStatus('mandatory')
rpmInternetLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmInternetLocal.setStatus('mandatory')
rpmName = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmName.setStatus('mandatory')
rpmOutletA = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletA.setStatus('mandatory')
rpmOutletB = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletB.setStatus('mandatory')
rpmOutletC = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletC.setStatus('mandatory')
rpmOutletD = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletD.setStatus('mandatory')
rpmOutletE = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletE.setStatus('mandatory')
rpmOutletF = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletF.setStatus('mandatory')
rpmOutletG = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletG.setStatus('mandatory')
rpmOutletH = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletH.setStatus('mandatory')
rpmDelayA = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayA.setStatus('mandatory')
rpmDelayB = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayB.setStatus('mandatory')
rpmDelayC = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayC.setStatus('mandatory')
rpmDelayD = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayD.setStatus('mandatory')
rpmDelayE = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayE.setStatus('mandatory')
rpmDelayF = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayF.setStatus('mandatory')
rpmDelayG = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayG.setStatus('mandatory')
rpmDelayH = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDelayH.setStatus('mandatory')
rpmResumeDelayA = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayA.setStatus('mandatory')
rpmResumeDelayB = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayB.setStatus('mandatory')
rpmResumeDelayC = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayC.setStatus('mandatory')
rpmResumeDelayD = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayD.setStatus('mandatory')
rpmResumeDelayE = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayE.setStatus('mandatory')
rpmResumeDelayF = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayF.setStatus('mandatory')
rpmResumeDelayG = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayG.setStatus('mandatory')
rpmResumeDelayH = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 2, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmResumeDelayH.setStatus('mandatory')
ats = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1, 5))
accessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999, 1, 1, 1), ).setIndexNames((0, "DGPRPM-MIB", "accessNo"))
if mibBuilder.loadTexts: accessEntry.setStatus('mandatory')
rpmSetEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 3))
rpmSetID = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmSetID.setStatus('mandatory')
rpmOnNumber = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("outletA", 1), ("outletB", 2), ("outletC", 3), ("outletD", 4), ("outletE", 5), ("outletF", 6), ("outletG", 7), ("outletH", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOnNumber.setStatus('mandatory')
rpmOffNumber = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("outletA", 1), ("outletB", 2), ("outletC", 3), ("outletD", 4), ("outletE", 5), ("outletF", 6), ("outletG", 7), ("outletH", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOffNumber.setStatus('mandatory')
rpmAllOnOff = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmAllOnOff.setStatus('mandatory')
rpmScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4), )
if mibBuilder.loadTexts: rpmScheduleTable.setStatus('mandatory')
rpmScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1), ).setIndexNames((0, "DGPRPM-MIB", "rpmScheduleIndex"))
if mibBuilder.loadTexts: rpmScheduleEntry.setStatus('mandatory')
rpmScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rpmScheduleIndex.setStatus('mandatory')
rpmScheduleID = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmScheduleID.setStatus('mandatory')
rpmOutlet = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("outletA", 1), ("outletB", 2), ("outletC", 3), ("outletD", 4), ("outletE", 5), ("outletF", 6), ("outletG", 7), ("outletH", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutlet.setStatus('mandatory')
rpmOutletAction = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmOutletAction.setStatus('mandatory')
rpmPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("once", 1), ("everySunday", 2), ("everyMonday", 3), ("everyTuesday", 4), ("everyWednesday", 5), ("everyThursday", 6), ("everyFriday", 7), ("everySaturday", 8), ("everyDay", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmPeriod.setStatus('mandatory')
rpmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmDate.setStatus('mandatory')
rpmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmTime.setStatus('mandatory')
rpmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("accept", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rpmStatus.setStatus('mandatory')
cpsNumber = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsNumber.setStatus('mandatory')
cpsTable = MibTable((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 2), )
if mibBuilder.loadTexts: cpsTable.setStatus('mandatory')
cpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 2, 1), ).setIndexNames((0, "DGPRPM-MIB", "cpsID"))
if mibBuilder.loadTexts: cpsEntry.setStatus('mandatory')
cpsID = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsID.setStatus('mandatory')
cpsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsValue.setStatus('mandatory')
cpsThreshold1 = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alarm", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsThreshold1.setStatus('mandatory')
cpsThreshold2 = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alarm", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsThreshold2.setStatus('mandatory')
cpsSetTable = MibTable((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 3), )
if mibBuilder.loadTexts: cpsSetTable.setStatus('mandatory')
cpsSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 3, 1), ).setIndexNames((0, "DGPRPM-MIB", "cpsIDIndex"))
if mibBuilder.loadTexts: cpsSetEntry.setStatus('mandatory')
cpsIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsIDIndex.setStatus('mandatory')
cpsSetThreshold1 = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSetThreshold1.setStatus('mandatory')
cpsSetThreshold2 = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsSetThreshold2.setStatus('mandatory')
atsIdentification = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsIdentification.setStatus('mandatory')
atsInputPowerSourceA = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsInputPowerSourceA.setStatus('mandatory')
atsInputPowerSourceB = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsInputPowerSourceB.setStatus('mandatory')
atsAutomaticTransferSwitch = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("transfer", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atsAutomaticTransferSwitch.setStatus('mandatory')
atsStatus = MibScalar((1, 3, 6, 1, 4, 1, 17420, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("a", 1), ("b", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atsStatus.setStatus('mandatory')
mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999, 1))
accessNo = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessNo.setStatus('mandatory')
community = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: community.setStatus('mandatory')
permission = MibTableColumn((1, 3, 6, 1, 4, 1, 17420, 1, 1, 999, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAccess", 0), ("read", 1), ("readWrite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: permission.setStatus('mandatory')
rpmOutletOn = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,100))
rpmOutletOff = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,101))
rpmOutletReboot = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,102))
rpmOutletfault = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,103))
rpmCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,104))
cpsOutOfThreshold1 = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,105))
cpsOutOfThreshold2 = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,106))
cpsCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 17420) + (0,107))
mibBuilder.exportSymbols("DGPRPM-MIB", rpmResumeDelayD=rpmResumeDelayD, rpmOutletState=rpmOutletState, rpmOnNumber=rpmOnNumber, rpmDelayG=rpmDelayG, rpmOutletReboot=rpmOutletReboot, accessTable=accessTable, rpmDelayE=rpmDelayE, rpmScheduleEntry=rpmScheduleEntry, rpmResumeDelayF=rpmResumeDelayF, rpmOutletA=rpmOutletA, rpmOutletF=rpmOutletF, atsStatus=atsStatus, cpsSetThreshold1=cpsSetThreshold1, rpmName=rpmName, rpmID=rpmID, rpmStatus=rpmStatus, rpmCommunicationLost=rpmCommunicationLost, cpsThreshold2=cpsThreshold2, rpmAllOnOff=rpmAllOnOff, rpmOutlet=rpmOutlet, rpm=rpm, rpmResumeDelayB=rpmResumeDelayB, rpmScheduleTable=rpmScheduleTable, rpmDate=rpmDate, rpmSetID=rpmSetID, hardware=hardware, rpmPeriod=rpmPeriod, rpmOutletOn=rpmOutletOn, rpmOutletfault=rpmOutletfault, cpsID=cpsID, atsAutomaticTransferSwitch=atsAutomaticTransferSwitch, cpsIDIndex=cpsIDIndex, rpmOutletD=rpmOutletD, rpmResumeDelayH=rpmResumeDelayH, cpsSetEntry=cpsSetEntry, rpmOffNumber=rpmOffNumber, permission=permission, rpmOutletNumber=rpmOutletNumber, rpmDelayB=rpmDelayB, protocol=protocol, rpmResumeDelayC=rpmResumeDelayC, atsInputPowerSourceB=atsInputPowerSourceB, rpmInternetLocal=rpmInternetLocal, rpmOutletB=rpmOutletB, accessEntry=accessEntry, snmp=snmp, cps=cps, rpmDelayF=rpmDelayF, rpmResumeDelayA=rpmResumeDelayA, rpmEntry=rpmEntry, rpmResumeDelayE=rpmResumeDelayE, rpmOutletE=rpmOutletE, rpmTable=rpmTable, ats=ats, cpsCommunicationLost=cpsCommunicationLost, rpmResumeDelayG=rpmResumeDelayG, atsIdentification=atsIdentification, accessNo=accessNo, rpmOutletG=rpmOutletG, cpsNumber=cpsNumber, cpsEntry=cpsEntry, rpmOutletH=rpmOutletH, cpsOutOfThreshold2=cpsOutOfThreshold2, dgp=dgp, cpsTable=cpsTable, rpmDelayA=rpmDelayA, cpsSetThreshold2=cpsSetThreshold2, rpmScheduleID=rpmScheduleID, products=products, mgmt=mgmt, cpsSetTable=cpsSetTable, cpsThreshold1=cpsThreshold1, cpsValue=cpsValue, rpmTime=rpmTime, atsInputPowerSourceA=atsInputPowerSourceA, rpmOutletAction=rpmOutletAction, rpmOutletC=rpmOutletC, rpmSetEntry=rpmSetEntry, rpmControlType=rpmControlType, rpmOutletOff=rpmOutletOff, rpmNumber=rpmNumber, rpmDelayH=rpmDelayH, cpsOutOfThreshold1=cpsOutOfThreshold1, rpmDelayC=rpmDelayC, community=community, rpmScheduleIndex=rpmScheduleIndex, rpmDelayD=rpmDelayD)
