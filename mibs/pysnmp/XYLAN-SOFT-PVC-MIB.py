#
# PySNMP MIB module XYLAN-SOFT-PVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-SOFT-PVC-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:38:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, Counter32, NotificationType, Unsigned32, Bits, Integer32, Gauge32, iso, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "Counter32", "NotificationType", "Unsigned32", "Bits", "Integer32", "Gauge32", "iso", "IpAddress", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanCsmArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanCsmArch")
AtmxTrafficDescrParamIndex, = mibBuilder.importSymbols("XYLAN-CSM-MIB", "AtmxTrafficDescrParamIndex")
atmxSoftPvcMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2))
atmxSoftPvcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1))
atmxSoftPvcMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 2))
class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class AtmxSoftPvcBbcIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2048)

atmxSoftPvcBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 1))
atmxSoftPvcCallFailuresTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxSoftPvcCallFailuresTrapEnable.setStatus('mandatory')
atmxSoftPvcCallFailures = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSoftPvcCallFailures.setStatus('mandatory')
atmxSoftPvcCurrentlyFailingSoftPVccs = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSoftPvcCurrentlyFailingSoftPVccs.setStatus('mandatory')
atmxSoftPvcCurrentlyFailingSoftPVpcs = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxSoftPvcCurrentlyFailingSoftPVpcs.setStatus('mandatory')
atmxSoftPvcNotificationInterval = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 1, 5), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxSoftPvcNotificationInterval.setStatus('mandatory')
atmxCurrentlyFailingSoftPVccTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 2), )
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVccTable.setStatus('mandatory')
atmxCurrentlyFailingSoftPVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 2, 1), ).setIndexNames((0, "XYLAN-SOFT-PVC-MIB", "atmxCurrentlyFailingSoftPVccSlotIndex"), (0, "XYLAN-SOFT-PVC-MIB", "atmxCurrentlyFailingSoftPVccPortIndex"), (0, "XYLAN-SOFT-PVC-MIB", "atmxCurrentlyFailingSoftPVccVpi"), (0, "XYLAN-SOFT-PVC-MIB", "atmxCurrentlyFailingSoftPVccVci"), (0, "XYLAN-SOFT-PVC-MIB", "atmxCurrentlyFailingSoftPVccLeafReference"))
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVccEntry.setStatus('mandatory')
atmxCurrentlyFailingSoftPVccSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVccSlotIndex.setStatus('mandatory')
atmxCurrentlyFailingSoftPVccPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVccPortIndex.setStatus('mandatory')
atmxCurrentlyFailingSoftPVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVccVpi.setStatus('mandatory')
atmxCurrentlyFailingSoftPVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 2, 1, 4), Integer32())
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVccVci.setStatus('mandatory')
atmxCurrentlyFailingSoftPVccLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 2, 1, 5), Integer32())
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVccLeafReference.setStatus('mandatory')
atmxCurrentlyFailingSoftPVccTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVccTimeStamp.setStatus('mandatory')
atmxCurrentlyFailingSoftPVpcTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 3), )
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVpcTable.setStatus('mandatory')
atmxCurrentlyFailingSoftPVpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 3, 1), ).setIndexNames((0, "XYLAN-SOFT-PVC-MIB", "atmxCurrentlyFailingSoftPVpcSlotIndex"), (0, "XYLAN-SOFT-PVC-MIB", "atmxCurrentlyFailingSoftPVpcPortIndex"), (0, "XYLAN-SOFT-PVC-MIB", "atmxCurrentlyFailingSoftPVpcVpi"), (0, "XYLAN-SOFT-PVC-MIB", "atmxCurrentlyFailingSoftPVpcLeafReference"))
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVpcEntry.setStatus('mandatory')
atmxCurrentlyFailingSoftPVpcSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVpcSlotIndex.setStatus('mandatory')
atmxCurrentlyFailingSoftPVpcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVpcPortIndex.setStatus('mandatory')
atmxCurrentlyFailingSoftPVpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVpcVpi.setStatus('mandatory')
atmxCurrentlyFailingSoftPVpcLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 3, 1, 4), Integer32())
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVpcLeafReference.setStatus('mandatory')
atmxCurrentlyFailingSoftPVpcTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCurrentlyFailingSoftPVpcTimeStamp.setStatus('mandatory')
xylnatmSoftPVpcTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4), )
if mibBuilder.loadTexts: xylnatmSoftPVpcTable.setStatus('mandatory')
xylnatmSoftPVpcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1), ).setIndexNames((0, "XYLAN-SOFT-PVC-MIB", "xylnatmSoftPVpcSlotIndex"), (0, "XYLAN-SOFT-PVC-MIB", "xylnatmSoftPVpcPortIndex"), (0, "XYLAN-SOFT-PVC-MIB", "xylnatmSoftPVpcVpi"), (0, "XYLAN-SOFT-PVC-MIB", "xylnatmSoftPVpcLeafReference"))
if mibBuilder.loadTexts: xylnatmSoftPVpcEntry.setStatus('mandatory')
xylnatmSoftPVpcSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcSlotIndex.setStatus('mandatory')
xylnatmSoftPVpcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcPortIndex.setStatus('mandatory')
xylnatmSoftPVpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcVpi.setStatus('mandatory')
xylnatmSoftPVpcLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcLeafReference.setStatus('mandatory')
xylnatmSoftPVpcTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVpcTargetAddress.setStatus('mandatory')
xylnatmSoftPVpcTargetSelectType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("required", 1), ("any", 2))).clone('required')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVpcTargetSelectType.setStatus('mandatory')
xylnatmSoftPVpcTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVpcTargetVpi.setStatus('mandatory')
xylnatmSoftPVpcLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcLastReleaseCause.setStatus('mandatory')
xylnatmSoftPVpcLastReleaseDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcLastReleaseDiagnostic.setStatus('mandatory')
xylnatmSoftPVpcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("establishmentInProgress", 2), ("connected", 3), ("retriesExhausted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcOperStatus.setStatus('mandatory')
xylnatmSoftPVpcRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVpcRestart.setStatus('mandatory')
xylnatmSoftPVpcRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVpcRetryInterval.setStatus('mandatory')
xylnatmSoftPVpcRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcRetryTimer.setStatus('mandatory')
xylnatmSoftPVpcRetryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVpcRetryThreshold.setStatus('mandatory')
xylnatmSoftPVpcRetryFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcRetryFailures.setStatus('mandatory')
xylnatmSoftPVpcRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVpcRetryLimit.setStatus('mandatory')
xylnatmSoftPVpcLowTDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 17), AtmxTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVpcLowTDIndex.setStatus('mandatory')
xylnatmSoftPVpcHighTDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 18), AtmxTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVpcHighTDIndex.setStatus('mandatory')
xylnatmSoftPVpcLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcLastChange.setStatus('mandatory')
xylnatmSoftPVpcOutSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcOutSlot.setStatus('mandatory')
xylnatmSoftPVpcOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcOutPort.setStatus('mandatory')
xylnatmSoftPVpcOutVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcOutVpi.setStatus('mandatory')
xylnatmSoftPVpcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVpcAdminStatus.setStatus('mandatory')
xylnatmSoftPVpcCrossConnectIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVpcCrossConnectIdentifier.setStatus('mandatory')
xylnatmSoftPVpcBbcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVpcBbcIndex.setStatus('mandatory')
xylnatmSoftPVpcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("create", 1), ("modify", 2), ("delete", 3), ("active", 4), ("unknown", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVpcRowStatus.setStatus('mandatory')
xylnatmSoftPVccTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5), )
if mibBuilder.loadTexts: xylnatmSoftPVccTable.setStatus('mandatory')
xylnatmSoftPVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1), ).setIndexNames((0, "XYLAN-SOFT-PVC-MIB", "xylnatmSoftPVccSlotIndex"), (0, "XYLAN-SOFT-PVC-MIB", "xylnatmSoftPVccPortIndex"), (0, "XYLAN-SOFT-PVC-MIB", "xylnatmSoftPVccVpi"), (0, "XYLAN-SOFT-PVC-MIB", "xylnatmSoftPVccVci"), (0, "XYLAN-SOFT-PVC-MIB", "xylnatmSoftPVccLeafReference"))
if mibBuilder.loadTexts: xylnatmSoftPVccEntry.setStatus('mandatory')
xylnatmSoftPVccSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccSlotIndex.setStatus('mandatory')
xylnatmSoftPVccPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccPortIndex.setStatus('mandatory')
xylnatmSoftPVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccVpi.setStatus('mandatory')
xylnatmSoftPVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccVci.setStatus('mandatory')
xylnatmSoftPVccLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccLeafReference.setStatus('mandatory')
xylnatmSoftPVccTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccTargetAddress.setStatus('mandatory')
xylnatmSoftPVccTargetSelectType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("required", 1), ("any", 2))).clone('required')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccTargetSelectType.setStatus('mandatory')
xylnatmSoftPVccTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccTargetVpi.setStatus('mandatory')
xylnatmSoftPVccTargetVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccTargetVci.setStatus('mandatory')
xylnatmSoftPVccLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccLastReleaseCause.setStatus('mandatory')
xylnatmSoftPVccLastReleaseDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccLastReleaseDiagnostic.setStatus('mandatory')
xylnatmSoftPVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("establishmentInProgress", 2), ("connected", 3), ("retriesExhausted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccOperStatus.setStatus('mandatory')
xylnatmSoftPVccRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccRestart.setStatus('mandatory')
xylnatmSoftPVccRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 14), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccRetryInterval.setStatus('mandatory')
xylnatmSoftPVccRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccRetryTimer.setStatus('mandatory')
xylnatmSoftPVccRetryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 16), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccRetryThreshold.setStatus('mandatory')
xylnatmSoftPVccRetryFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccRetryFailures.setStatus('mandatory')
xylnatmSoftPVccRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccRetryLimit.setStatus('mandatory')
xylnatmSoftPVccLowTDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 19), AtmxTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccLowTDIndex.setStatus('mandatory')
xylnatmSoftPVccHighTDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 20), AtmxTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccHighTDIndex.setStatus('mandatory')
xylnatmSoftPVccLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccLastChange.setStatus('mandatory')
xylnatmSoftPVccOutSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccOutSlot.setStatus('mandatory')
xylnatmSoftPVccOutPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccOutPort.setStatus('mandatory')
xylnatmSoftPVccOutVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccOutVpi.setStatus('mandatory')
xylnatmSoftPVccOutVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccOutVci.setStatus('mandatory')
xylnatmSoftPVccAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccAdminStatus.setStatus('mandatory')
xylnatmSoftPVccCrossConnectIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylnatmSoftPVccCrossConnectIdentifier.setStatus('mandatory')
xylnatmSoftPVccBbcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccBbcIndex.setStatus('mandatory')
xylnatmSoftPVccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("create", 1), ("modify", 2), ("delete", 3), ("active", 4), ("unknown", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylnatmSoftPVccRowStatus.setStatus('mandatory')
atmxSoftPvcBbcTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 6), )
if mibBuilder.loadTexts: atmxSoftPvcBbcTable.setStatus('mandatory')
atmxSoftPvcBbcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 6, 1), ).setIndexNames((0, "XYLAN-SOFT-PVC-MIB", "atmxSoftPvcBbcIndex"))
if mibBuilder.loadTexts: atmxSoftPvcBbcEntry.setStatus('mandatory')
atmxSoftPvcBbcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 6, 1, 1), AtmxSoftPvcBbcIndex())
if mibBuilder.loadTexts: atmxSoftPvcBbcIndex.setStatus('mandatory')
atmxSoftPvcBbcClass = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bcobA", 1), ("bcobC", 2), ("bcobX", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxSoftPvcBbcClass.setStatus('mandatory')
atmxSoftPvcBbcTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noIndication", 1), ("constantBitRate", 2), ("variableBitRate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxSoftPvcBbcTrafficType.setStatus('mandatory')
atmxSoftPvcBbcTimingRequirements = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noIndication", 1), ("endToEndTimingRequired", 2), ("endToEndTimingNotRequired", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxSoftPvcBbcTimingRequirements.setStatus('mandatory')
atmxSoftPvcBbcSusceptibilityToClipping = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("susceptibleToClipping", 1), ("notSusceptibleToClipping", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxSoftPvcBbcSusceptibilityToClipping.setStatus('mandatory')
atmxSoftPvcBbcUserPlaneConnectionConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("point-to-point", 1), ("point-to-multipoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxSoftPvcBbcUserPlaneConnectionConfig.setStatus('mandatory')
atmxSoftPvcBbcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("create", 1), ("modify", 2), ("delete", 3), ("active", 4), ("unknown", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxSoftPvcBbcRowStatus.setStatus('mandatory')
atmxSoftPvcTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 2, 1))
atmxSoftPvcTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 2, 1, 1))
atmxSoftPvcCallFailuresTrap = NotificationType((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 2, 1, 1) + (0,1)).setObjects(("XYLAN-SOFT-PVC-MIB", "atmxSoftPvcCallFailures"), ("XYLAN-SOFT-PVC-MIB", "atmxSoftPvcCurrentlyFailingSoftPVccs"), ("XYLAN-SOFT-PVC-MIB", "atmxSoftPvcCurrentlyFailingSoftPVpcs"))
atmxSoftPvcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 3))
atmxSoftPvcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 3, 1))
atmxSoftPvcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 3, 2))
atmxSoftPvcMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 3, 1, 1))
atmxSoftPvcBaseMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 3, 2, 1))
atmxSoftPvcVccMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 3, 2, 2))
atmxSoftPvcVpcMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 3, 2, 3))
atmxSoftPvcAddressMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 3, 2, 4))
atmxCurrentlyFailingSoftPVccMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 3, 2, 5))
atmxCurrentlyFailingSoftPVpcMIBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 9, 2, 3, 2, 6))
mibBuilder.exportSymbols("XYLAN-SOFT-PVC-MIB", atmxSoftPvcNotificationInterval=atmxSoftPvcNotificationInterval, atmxCurrentlyFailingSoftPVccVpi=atmxCurrentlyFailingSoftPVccVpi, xylnatmSoftPVpcLeafReference=xylnatmSoftPVpcLeafReference, xylnatmSoftPVpcLastReleaseCause=xylnatmSoftPVpcLastReleaseCause, xylnatmSoftPVpcHighTDIndex=xylnatmSoftPVpcHighTDIndex, atmxSoftPvcCallFailuresTrapEnable=atmxSoftPvcCallFailuresTrapEnable, atmxSoftPvcAddressMIBGroup=atmxSoftPvcAddressMIBGroup, xylnatmSoftPVccTargetVci=xylnatmSoftPVccTargetVci, atmxCurrentlyFailingSoftPVccMIBGroup=atmxCurrentlyFailingSoftPVccMIBGroup, atmxCurrentlyFailingSoftPVpcEntry=atmxCurrentlyFailingSoftPVpcEntry, xylnatmSoftPVpcTargetVpi=xylnatmSoftPVpcTargetVpi, xylnatmSoftPVccRestart=xylnatmSoftPVccRestart, atmxSoftPvcVpcMIBGroup=atmxSoftPvcVpcMIBGroup, atmxSoftPvcBbcSusceptibilityToClipping=atmxSoftPvcBbcSusceptibilityToClipping, atmxSoftPvcCallFailures=atmxSoftPvcCallFailures, atmxSoftPvcMIBConformance=atmxSoftPvcMIBConformance, atmxCurrentlyFailingSoftPVccLeafReference=atmxCurrentlyFailingSoftPVccLeafReference, atmxSoftPvcBbcEntry=atmxSoftPvcBbcEntry, xylnatmSoftPVpcRetryTimer=xylnatmSoftPVpcRetryTimer, xylnatmSoftPVpcRestart=xylnatmSoftPVpcRestart, atmxCurrentlyFailingSoftPVccSlotIndex=atmxCurrentlyFailingSoftPVccSlotIndex, xylnatmSoftPVccVci=xylnatmSoftPVccVci, atmxSoftPvcTrapsPrefix=atmxSoftPvcTrapsPrefix, xylnatmSoftPVccPortIndex=xylnatmSoftPVccPortIndex, xylnatmSoftPVccCrossConnectIdentifier=xylnatmSoftPVccCrossConnectIdentifier, atmxSoftPvcBbcTimingRequirements=atmxSoftPvcBbcTimingRequirements, xylnatmSoftPVpcTargetSelectType=xylnatmSoftPVpcTargetSelectType, atmxSoftPvcMIBGroups=atmxSoftPvcMIBGroups, AtmxSoftPvcBbcIndex=AtmxSoftPvcBbcIndex, xylnatmSoftPVccRetryLimit=xylnatmSoftPVccRetryLimit, xylnatmSoftPVpcRetryFailures=xylnatmSoftPVpcRetryFailures, xylnatmSoftPVccOutVci=xylnatmSoftPVccOutVci, atmxSoftPvcBbcRowStatus=atmxSoftPvcBbcRowStatus, xylnatmSoftPVccAdminStatus=xylnatmSoftPVccAdminStatus, xylnatmSoftPVccLowTDIndex=xylnatmSoftPVccLowTDIndex, atmxSoftPvcMIBCompliances=atmxSoftPvcMIBCompliances, xylnatmSoftPVpcRetryLimit=xylnatmSoftPVpcRetryLimit, atmxSoftPvcBbcIndex=atmxSoftPvcBbcIndex, atmxCurrentlyFailingSoftPVccEntry=atmxCurrentlyFailingSoftPVccEntry, atmxSoftPvcBbcClass=atmxSoftPvcBbcClass, xylnatmSoftPVccRetryInterval=xylnatmSoftPVccRetryInterval, xylnatmSoftPVccLeafReference=xylnatmSoftPVccLeafReference, xylnatmSoftPVpcRetryThreshold=xylnatmSoftPVpcRetryThreshold, xylnatmSoftPVpcOperStatus=xylnatmSoftPVpcOperStatus, atmxSoftPvcBbcUserPlaneConnectionConfig=atmxSoftPvcBbcUserPlaneConnectionConfig, xylnatmSoftPVccTargetVpi=xylnatmSoftPVccTargetVpi, atmxCurrentlyFailingSoftPVpcLeafReference=atmxCurrentlyFailingSoftPVpcLeafReference, atmxCurrentlyFailingSoftPVccTable=atmxCurrentlyFailingSoftPVccTable, atmxSoftPvcTraps=atmxSoftPvcTraps, xylnatmSoftPVpcLastChange=xylnatmSoftPVpcLastChange, xylnatmSoftPVccOutSlot=xylnatmSoftPVccOutSlot, xylnatmSoftPVccRetryTimer=xylnatmSoftPVccRetryTimer, atmxCurrentlyFailingSoftPVpcSlotIndex=atmxCurrentlyFailingSoftPVpcSlotIndex, xylnatmSoftPVccBbcIndex=xylnatmSoftPVccBbcIndex, xylnatmSoftPVpcAdminStatus=xylnatmSoftPVpcAdminStatus, xylnatmSoftPVpcEntry=xylnatmSoftPVpcEntry, xylnatmSoftPVccRetryThreshold=xylnatmSoftPVccRetryThreshold, xylnatmSoftPVccLastReleaseCause=xylnatmSoftPVccLastReleaseCause, xylnatmSoftPVpcCrossConnectIdentifier=xylnatmSoftPVpcCrossConnectIdentifier, atmxSoftPvcMIBObjects=atmxSoftPvcMIBObjects, xylnatmSoftPVpcSlotIndex=xylnatmSoftPVpcSlotIndex, TruthValue=TruthValue, xylnatmSoftPVpcOutVpi=xylnatmSoftPVpcOutVpi, xylnatmSoftPVccHighTDIndex=xylnatmSoftPVccHighTDIndex, xylnatmSoftPVpcTargetAddress=xylnatmSoftPVpcTargetAddress, atmxCurrentlyFailingSoftPVpcMIBGroup=atmxCurrentlyFailingSoftPVpcMIBGroup, atmxSoftPvcCurrentlyFailingSoftPVpcs=atmxSoftPvcCurrentlyFailingSoftPVpcs, xylnatmSoftPVccOperStatus=xylnatmSoftPVccOperStatus, atmxSoftPvcCallFailuresTrap=atmxSoftPvcCallFailuresTrap, atmxSoftPvcMIB=atmxSoftPvcMIB, atmxSoftPvcBaseGroup=atmxSoftPvcBaseGroup, xylnatmSoftPVpcTable=xylnatmSoftPVpcTable, atmxSoftPvcMIBTraps=atmxSoftPvcMIBTraps, xylnatmSoftPVccTargetAddress=xylnatmSoftPVccTargetAddress, atmxCurrentlyFailingSoftPVccVci=atmxCurrentlyFailingSoftPVccVci, atmxCurrentlyFailingSoftPVpcPortIndex=atmxCurrentlyFailingSoftPVpcPortIndex, xylnatmSoftPVpcLastReleaseDiagnostic=xylnatmSoftPVpcLastReleaseDiagnostic, xylnatmSoftPVpcPortIndex=xylnatmSoftPVpcPortIndex, xylnatmSoftPVccOutVpi=xylnatmSoftPVccOutVpi, atmxSoftPvcVccMIBGroup=atmxSoftPvcVccMIBGroup, xylnatmSoftPVccLastChange=xylnatmSoftPVccLastChange, atmxCurrentlyFailingSoftPVpcVpi=atmxCurrentlyFailingSoftPVpcVpi, xylnatmSoftPVccRetryFailures=xylnatmSoftPVccRetryFailures, xylnatmSoftPVpcRowStatus=xylnatmSoftPVpcRowStatus, atmxCurrentlyFailingSoftPVccTimeStamp=atmxCurrentlyFailingSoftPVccTimeStamp, xylnatmSoftPVccTargetSelectType=xylnatmSoftPVccTargetSelectType, xylnatmSoftPVccEntry=xylnatmSoftPVccEntry, xylnatmSoftPVccLastReleaseDiagnostic=xylnatmSoftPVccLastReleaseDiagnostic, atmxCurrentlyFailingSoftPVpcTimeStamp=atmxCurrentlyFailingSoftPVpcTimeStamp, xylnatmSoftPVpcOutSlot=xylnatmSoftPVpcOutSlot, atmxSoftPvcCurrentlyFailingSoftPVccs=atmxSoftPvcCurrentlyFailingSoftPVccs, xylnatmSoftPVccTable=xylnatmSoftPVccTable, xylnatmSoftPVccRowStatus=xylnatmSoftPVccRowStatus, atmxCurrentlyFailingSoftPVpcTable=atmxCurrentlyFailingSoftPVpcTable, atmxSoftPvcBaseMIBGroup=atmxSoftPvcBaseMIBGroup, xylnatmSoftPVpcRetryInterval=xylnatmSoftPVpcRetryInterval, xylnatmSoftPVccVpi=xylnatmSoftPVccVpi, atmxSoftPvcBbcTrafficType=atmxSoftPvcBbcTrafficType, xylnatmSoftPVccSlotIndex=xylnatmSoftPVccSlotIndex, xylnatmSoftPVpcLowTDIndex=xylnatmSoftPVpcLowTDIndex, xylnatmSoftPVpcOutPort=xylnatmSoftPVpcOutPort, xylnatmSoftPVpcVpi=xylnatmSoftPVpcVpi, xylnatmSoftPVccOutPort=xylnatmSoftPVccOutPort, atmxSoftPvcBbcTable=atmxSoftPvcBbcTable, atmxSoftPvcMIBCompliance=atmxSoftPvcMIBCompliance, xylnatmSoftPVpcBbcIndex=xylnatmSoftPVpcBbcIndex, atmxCurrentlyFailingSoftPVccPortIndex=atmxCurrentlyFailingSoftPVccPortIndex)
