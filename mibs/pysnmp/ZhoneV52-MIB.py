#
# PySNMP MIB module ZhoneV52-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZhoneV52-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:46:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
PerfCurrentCount, = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, ObjectIdentity, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Gauge32, iso, Bits, Integer32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Gauge32", "iso", "Bits", "Integer32", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
zhoneVoice, = mibBuilder.importSymbols("Zhone", "zhoneVoice")
ZhoneRowStatus, ZhoneShelfValue, ZhoneSlotValueOrZero, ZhoneAdminString, ZhoneShelfValueOrZero, ZhoneSlotValue = mibBuilder.importSymbols("Zhone-TC", "ZhoneRowStatus", "ZhoneShelfValue", "ZhoneSlotValueOrZero", "ZhoneAdminString", "ZhoneShelfValueOrZero", "ZhoneSlotValue")
zhoneV52 = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2))
zhoneV52.setRevisions(('2008-02-05 01:38', '2003-12-09 16:36', '2003-01-31 14:09', '2002-09-10 15:15', '2002-04-05 09:30', '2001-12-13 14:30', '2001-10-24 17:00', '2001-09-04 14:30', '2001-08-01 11:15', '2001-07-23 15:50', '2001-03-09 14:30', '2001-01-17 13:17', '2001-01-09 11:12', '2000-12-19 14:33', '2000-11-22 13:22', '2000-10-04 10:53', '2000-08-23 10:58',))
if mibBuilder.loadTexts: zhoneV52.setLastUpdated('200312091636Z')
if mibBuilder.loadTexts: zhoneV52.setOrganization('Zhone Technologies, Inc.')
v52InterfaceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1), )
if mibBuilder.loadTexts: v52InterfaceGroupTable.setStatus('current')
v52InterfaceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1), ).setIndexNames((0, "ZhoneV52-MIB", "v52IgNameId"))
if mibBuilder.loadTexts: v52InterfaceGroupEntry.setStatus('current')
v52IgNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 1), ZhoneAdminString())
if mibBuilder.loadTexts: v52IgNameId.setStatus('current')
v52IgShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 2), ZhoneShelfValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgShelf.setStatus('current')
v52IgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 3), ZhoneSlotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgSlot.setStatus('current')
v52IgPeerShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 4), ZhoneShelfValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgPeerShelf.setStatus('current')
v52IgPeerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 5), ZhoneSlotValueOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgPeerSlot.setStatus('current')
v52IgPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noStandbyConfigured", 1), ("configuredAndAvailable", 2), ("configuredAndUnavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgPeerStatus.setStatus('current')
v52IgLocalInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgLocalInterfaceId.setStatus('current')
v52IgRemoteInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgRemoteInterfaceId.setStatus('current')
v52IgLocalProvVariant = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgLocalProvVariant.setStatus('current')
v52IgRemoteProvVariant = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgRemoteProvVariant.setStatus('current')
v52IgProvVariantRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noRequest", 1), ("verifyWithLe", 2), ("requestFromLe", 3), ("switchLeToLocal", 4))).clone('noRequest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgProvVariantRequest.setStatus('current')
v52IgProvVariantRequestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("verifyWithLeSucceeded", 1), ("verifyWithLeFailed", 2), ("requestFromLeSucceeded", 3), ("requestFromLeFailed", 4), ("switchToLocalSucceeded", 5), ("switchToLocalFailed", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgProvVariantRequestStatus.setStatus('current')
v52IgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2), ("deferredOutOfService", 3), ("restart", 4))).clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgAdminStatus.setStatus('current')
v52IgOperationalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("operable", 1), ("inoperable", 2), ("standby", 3), ("degradedService", 4), ("inoperableIsInProgress", 5), ("inoperableOosInProgress", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgOperationalStatus.setStatus('current')
v52IgOperStatusCause = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("localDisable", 2), ("remoteOutOfService", 3), ("protocolFailure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgOperStatusCause.setStatus('current')
v52IgMaxConfiguredCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 16), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(30, 480))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgMaxConfiguredCalls.setStatus('current')
v52IgCurrActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 17), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 480))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgCurrActiveCalls.setStatus('current')
v52IgPstnLayer3StartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgPstnLayer3StartAddress.setStatus('current')
v52IgIsdnEnvFuncStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8175))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgIsdnEnvFuncStartAddress.setStatus('current')
v52IgStatsTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgStatsTimeElapsed.setStatus('current')
v52IgStatsValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgStatsValidIntervals.setStatus('current')
v52IgStatsInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgStatsInvalidIntervals.setStatus('current')
v52IgPortAlignmentRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noRequest", 1), ("blockAll", 2), ("blockIsdn", 3), ("blockPstn", 4), ("unblockAll", 5), ("unblockIsdn", 6), ("unblockPstn", 7))).clone('noRequest')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgPortAlignmentRequest.setStatus('current')
v52IgPortAlignmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("blockAllSucceeded", 1), ("blockAllFailed", 2), ("blockIsdnSucceded", 3), ("blockIsdnFailed", 4), ("blockPstnSucceded", 5), ("blockPstnFailed", 6), ("unblockAllSucceeded", 7), ("unblockAllFailed", 8), ("unblockIsdnSucceeded", 9), ("unblockIsdnFailed", 10), ("unblockPstnSucceeded", 11), ("unblockPstnFailed", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IgPortAlignmentStatus.setStatus('current')
v52IgNationalPstnRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("etsi", 1), ("germany", 2), ("uk", 3), ("italy", 4), ("finland", 5), ("austria", 6), ("belgium", 7), ("china", 8), ("france", 9), ("hong-kong", 10), ("japan", 11), ("korea", 12), ("netherlands", 13), ("new-zealand", 14), ("singapore", 15), ("spain", 16), ("sweden", 17), ("switzerland", 18), ("mexico", 19), ("argentina", 20), ("peru", 21), ("puerto-rico", 22), ("brazil", 23), ("malaysia", 24), ("taiwan", 25), ("united-arab-emirates", 26), ("ireland", 27), ("australia", 28), ("estonia", 29), ("south-africa", 30), ("saudi-arabia", 31))).clone('etsi')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgNationalPstnRegion.setStatus('current')
v52IgSwitchVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("lucent", 2), ("nortel", 3), ("alcatel", 4), ("ericsson", 5), ("nokia", 6), ("siemens", 7), ("samsung", 8))).clone('ericsson')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgSwitchVendor.setStatus('current')
v52IgProtocolSpecification = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("edition1", 1), ("edition2", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgProtocolSpecification.setStatus('current')
v52IgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 1, 1, 28), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgRowStatus.setStatus('current')
v52InterfaceGroupLapvTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 2), )
if mibBuilder.loadTexts: v52InterfaceGroupLapvTable.setStatus('current')
v52InterfaceGroupLapvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 2, 1), )
v52InterfaceGroupEntry.registerAugmentions(("ZhoneV52-MIB", "v52InterfaceGroupLapvEntry"))
v52InterfaceGroupLapvEntry.setIndexNames(*v52InterfaceGroupEntry.getIndexNames())
if mibBuilder.loadTexts: v52InterfaceGroupLapvEntry.setStatus('current')
v52IgLapvMaxOutstandingFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7)).clone(7)).setUnits('frames').setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgLapvMaxOutstandingFrames.setStatus('current')
v52IgLapvN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgLapvN200.setStatus('current')
v52IgLapvN201 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 260)).clone(260)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgLapvN201.setStatus('current')
v52IgLapvT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(100, 100), ValueRangeConstraint(150, 150), ValueRangeConstraint(200, 200), ValueRangeConstraint(250, 250), ValueRangeConstraint(300, 300), ValueRangeConstraint(350, 350), ValueRangeConstraint(400, 400), ValueRangeConstraint(450, 450), ValueRangeConstraint(500, 500), ValueRangeConstraint(550, 550), ValueRangeConstraint(600, 600), ValueRangeConstraint(650, 650), ValueRangeConstraint(700, 700), ValueRangeConstraint(750, 750), ValueRangeConstraint(800, 800), ValueRangeConstraint(850, 850), ValueRangeConstraint(900, 900), ValueRangeConstraint(950, 950), ValueRangeConstraint(1000, 1000), )).clone(1000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgLapvT200.setStatus('current')
v52IgLapvT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(20, 20), ValueRangeConstraint(30, 30), ValueRangeConstraint(40, 40), ValueRangeConstraint(50, 50), ValueRangeConstraint(60, 60), ValueRangeConstraint(70, 70), ValueRangeConstraint(80, 80), ValueRangeConstraint(90, 90), ValueRangeConstraint(100, 100), ValueRangeConstraint(110, 110), ValueRangeConstraint(120, 120), ValueRangeConstraint(130, 130), ValueRangeConstraint(140, 140), ValueRangeConstraint(150, 150), ValueRangeConstraint(160, 160), ValueRangeConstraint(170, 170), ValueRangeConstraint(180, 180), ValueRangeConstraint(190, 190), ValueRangeConstraint(200, 200), ValueRangeConstraint(210, 210), ValueRangeConstraint(220, 220), ValueRangeConstraint(230, 230), ValueRangeConstraint(240, 240), ValueRangeConstraint(250, 250), ValueRangeConstraint(260, 260), ValueRangeConstraint(270, 270), ValueRangeConstraint(280, 280), ValueRangeConstraint(290, 290), ValueRangeConstraint(300, 300), )).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgLapvT203.setStatus('current')
v52LinkTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 3), )
if mibBuilder.loadTexts: v52LinkTable.setStatus('current')
v52LinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 3, 1), ).setIndexNames((0, "ZhoneV52-MIB", "v52IgNameId"), (0, "ZhoneV52-MIB", "v52LinkDsnLgId"), (0, "ZhoneV52-MIB", "v52LinkDs1ChannelNumber"))
if mibBuilder.loadTexts: v52LinkEntry.setStatus('current')
v52LinkDsnLgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: v52LinkDsnLgId.setStatus('current')
v52LinkDs1ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28)))
if mibBuilder.loadTexts: v52LinkDs1ChannelNumber.setStatus('current')
v52LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52LinkId.setStatus('current')
v52LinkCheckId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activated", 1), ("notActivated", 2))).clone('notActivated')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52LinkCheckId.setStatus('current')
v52LinkCheckIdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("succeeded", 1), ("failed", 2), ("rejected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52LinkCheckIdStatus.setStatus('current')
v52LinkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2))).clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52LinkAdminStatus.setStatus('obsolete')
v52LinkBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("deferredBlocked", 1), ("nonDeferredBlocked", 2), ("forceBlocked", 3), ("unblocked", 4))).clone('unblocked')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52LinkBlock.setStatus('current')
v52LinkBlockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unblocked", 1), ("local", 2), ("remote", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52LinkBlockStatus.setStatus('current')
v52LinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 3, 1, 9), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52LinkRowStatus.setStatus('current')
v52CChannelTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 4), )
if mibBuilder.loadTexts: v52CChannelTable.setStatus('current')
v52CChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 4, 1), ).setIndexNames((0, "ZhoneV52-MIB", "v52IgNameId"), (0, "ZhoneV52-MIB", "v52LinkDsnLgId"), (0, "ZhoneV52-MIB", "v52LinkDs1ChannelNumber"), (0, "ZhoneV52-MIB", "v52CChannelTimeSlotIndex"))
if mibBuilder.loadTexts: v52CChannelEntry.setStatus('current')
v52CChannelTimeSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(15, 15), ValueRangeConstraint(16, 16), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: v52CChannelTimeSlotIndex.setStatus('current')
v52CChannelLogicalChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52CChannelLogicalChannelId.setStatus('current')
v52CChannelProtGp = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("group1", 2), ("oneToOneGroup2", 3), ("mToNGroup2", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52CChannelProtGp.setStatus('current')
v52CChannelRole = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("switchToStandby", 3))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52CChannelRole.setStatus('current')
v52CChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52CChannelStatus.setStatus('current')
v52CChannelCurrentLogicalChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52CChannelCurrentLogicalChannelId.setStatus('current')
v52CChannelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 4, 1, 7), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52CChannelRowStatus.setStatus('current')
v52CChannelStatusCause = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("switchOverRejected", 2), ("switchOverError", 3), ("switchOverResetSequenceNumberError", 4), ("switchOverAborted", 5), ("switchOverRejectedProvisioningError", 6), ("switchOverResetSequence", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52CChannelStatusCause.setStatus('current')
v52CPathTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 5), )
if mibBuilder.loadTexts: v52CPathTable.setStatus('current')
v52CPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 5, 1), ).setIndexNames((0, "ZhoneV52-MIB", "v52IgNameId"), (0, "ZhoneV52-MIB", "v52CPathId"))
if mibBuilder.loadTexts: v52CPathEntry.setStatus('current')
v52CPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)))
if mibBuilder.loadTexts: v52CPathId.setStatus('current')
v52CPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("pstn", 2), ("ctrl", 3), ("bcc", 4), ("lctl", 5), ("isdnDs", 6), ("isdnF", 7), ("isdnP", 8))).clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52CPathType.setStatus('current')
v52CPathLogicalChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52CPathLogicalChannelId.setStatus('current')
v52CPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 5, 1, 4), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52CPathRowStatus.setStatus('current')
v52CPathOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52CPathOperStatus.setStatus('current')
v52CPathOperStatusCause = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establishConfirmationReceived", 1), ("establishIndicationReceived", 2), ("releaseIndicationReceived", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52CPathOperStatusCause.setStatus('current')
v52UserPortTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6), )
if mibBuilder.loadTexts: v52UserPortTable.setStatus('current')
v52UserPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6, 1), ).setIndexNames((0, "ZhoneV52-MIB", "v52IgNameId"), (0, "ZhoneV52-MIB", "v52UserPortAddress"), (0, "ZhoneV52-MIB", "v52UserPortType"))
if mibBuilder.loadTexts: v52UserPortEntry.setStatus('current')
v52UserPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)))
if mibBuilder.loadTexts: v52UserPortAddress.setStatus('current')
v52UserPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("pstn", 2), ("isdnBa", 3), ("isdnPra", 4))))
if mibBuilder.loadTexts: v52UserPortType.setStatus('current')
v52UserPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2))).clone('outOfService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52UserPortAdminStatus.setStatus('current')
v52UserPortBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("blocked", 1), ("shuttingDown", 2), ("unblocked", 3), ("blockedNotSuitableForGroupUnblocking", 4))).clone('blocked')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52UserPortBlock.setStatus('current')
v52UserPortBlockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unblocked", 1), ("localBlocked", 2), ("remoteBlocked", 3), ("bothBlocked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52UserPortBlockStatus.setStatus('current')
v52UserPortRegOrLeaseUser = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("regular", 1), ("permanentLease", 2), ("semiPermanentLease", 3))).clone('regular')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52UserPortRegOrLeaseUser.setStatus('current')
v52UserPortIsdnDsCPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52UserPortIsdnDsCPathId.setStatus('current')
v52UserPortIsdnPCPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52UserPortIsdnPCPathId.setStatus('current')
v52UserPortIsdnFCPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52UserPortIsdnFCPathId.setStatus('current')
v52UserPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6, 1, 10), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52UserPortRowStatus.setStatus('current')
v52UserPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inService", 1), ("manualOos", 2), ("oos", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52UserPortOperStatus.setStatus('current')
v52StatsCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 7), )
if mibBuilder.loadTexts: v52StatsCurrentTable.setStatus('current')
v52StatsCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 7, 1), )
v52InterfaceGroupEntry.registerAugmentions(("ZhoneV52-MIB", "v52StatsCurrentEntry"))
v52StatsCurrentEntry.setIndexNames(*v52InterfaceGroupEntry.getIndexNames())
if mibBuilder.loadTexts: v52StatsCurrentEntry.setStatus('current')
v52IfCurrentPstnOutboundCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 7, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfCurrentPstnOutboundCalls.setStatus('current')
v52IfCurrentPstnInboundCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 7, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfCurrentPstnInboundCalls.setStatus('current')
v52IfCurrentCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 7, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfCurrentCallsBlocked.setStatus('current')
v52IfCurrentV52ProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 7, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfCurrentV52ProtocolErrors.setStatus('current')
v52IfCurrentLapdSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 7, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfCurrentLapdSent.setStatus('current')
v52IfCurrentLapdRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 7, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfCurrentLapdRcvd.setStatus('current')
v52IfCurrentLapdRcvdErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 7, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfCurrentLapdRcvdErrs.setStatus('current')
v52IfCurrentIsdnCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 7, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfCurrentIsdnCalls.setStatus('current')
v52StatsIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 8), )
if mibBuilder.loadTexts: v52StatsIntervalTable.setStatus('current')
v52StatsIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 8, 1), ).setIndexNames((0, "ZhoneV52-MIB", "v52IgNameId"), (0, "ZhoneV52-MIB", "v52IfIntervalNumber"))
if mibBuilder.loadTexts: v52StatsIntervalEntry.setStatus('current')
v52IfIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: v52IfIntervalNumber.setStatus('current')
v52IfIntervalPstnOutboundCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 8, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfIntervalPstnOutboundCalls.setStatus('current')
v52IfIntervalPstnInboundCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 8, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfIntervalPstnInboundCalls.setStatus('current')
v52IfIntervalCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 8, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfIntervalCallsBlocked.setStatus('current')
v52IfIntervalV52ProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 8, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfIntervalV52ProtocolErrors.setStatus('current')
v52IfIntervalLapdSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 8, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfIntervalLapdSent.setStatus('current')
v52IfIntervalLapdRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 8, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfIntervalLapdRcvd.setStatus('current')
v52IfIntervalLapdRcvdErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 8, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfIntervalLapdRcvdErrs.setStatus('current')
v52IfIntervalIsdnCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 8, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfIntervalIsdnCalls.setStatus('current')
v52StatsTotalTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 9), )
if mibBuilder.loadTexts: v52StatsTotalTable.setStatus('current')
v52StatsTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 9, 1), )
v52InterfaceGroupEntry.registerAugmentions(("ZhoneV52-MIB", "v52StatsTotalEntry"))
v52StatsTotalEntry.setIndexNames(*v52InterfaceGroupEntry.getIndexNames())
if mibBuilder.loadTexts: v52StatsTotalEntry.setStatus('current')
v52IfTotalPstnOutboundCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 9, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfTotalPstnOutboundCalls.setStatus('current')
v52IfTotalPstnInboundCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 9, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfTotalPstnInboundCalls.setStatus('current')
v52IfTotalCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 9, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfTotalCallsBlocked.setStatus('current')
v52IfTotalV52ProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 9, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfTotalV52ProtocolErrors.setStatus('current')
v52ifTotalLapdSent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 9, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52ifTotalLapdSent.setStatus('current')
v52IfTotalLapdRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 9, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfTotalLapdRcvd.setStatus('current')
v52IfTotalLapdRcvdErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 9, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfTotalLapdRcvdErrs.setStatus('current')
v52IfTotalIsdnCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 9, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52IfTotalIsdnCalls.setStatus('current')
v52Traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 10))
if mibBuilder.loadTexts: v52Traps.setStatus('current')
v52TrapsPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 10, 0))
if mibBuilder.loadTexts: v52TrapsPrefix.setStatus('current')
v52IgProvVariantRequestNotification = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 10, 0, 1)).setObjects(("ZhoneV52-MIB", "v52IgLocalInterfaceId"), ("ZhoneV52-MIB", "v52IgRemoteInterfaceId"), ("ZhoneV52-MIB", "v52IgLocalProvVariant"), ("ZhoneV52-MIB", "v52IgRemoteProvVariant"), ("ZhoneV52-MIB", "v52IgProvVariantRequest"), ("ZhoneV52-MIB", "v52IgProvVariantRequestStatus"))
if mibBuilder.loadTexts: v52IgProvVariantRequestNotification.setStatus('current')
v52IgPortAlignmentNotification = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 10, 0, 2)).setObjects(("ZhoneV52-MIB", "v52IgPortAlignmentRequest"), ("ZhoneV52-MIB", "v52IgPortAlignmentStatus"))
if mibBuilder.loadTexts: v52IgPortAlignmentNotification.setStatus('current')
v52LinkCheckIdNotification = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 10, 0, 3)).setObjects(("ZhoneV52-MIB", "v52LinkCheckId"), ("ZhoneV52-MIB", "v52LinkCheckIdStatus"))
if mibBuilder.loadTexts: v52LinkCheckIdNotification.setStatus('current')
v52LinkBlockNotification = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 10, 0, 4)).setObjects(("ZhoneV52-MIB", "v52LinkBlock"), ("ZhoneV52-MIB", "v52LinkBlockStatus"))
if mibBuilder.loadTexts: v52LinkBlockNotification.setStatus('current')
v52IgOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 10, 0, 5)).setObjects(("ZhoneV52-MIB", "v52IgAdminStatus"), ("ZhoneV52-MIB", "v52IgOperationalStatus"), ("ZhoneV52-MIB", "v52IgOperStatusCause"))
if mibBuilder.loadTexts: v52IgOperStatusChange.setStatus('current')
v52CChannelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 10, 0, 6)).setObjects(("ZhoneV52-MIB", "v52CChannelRole"), ("ZhoneV52-MIB", "v52CChannelStatus"), ("ZhoneV52-MIB", "v52CChannelStatusCause"))
if mibBuilder.loadTexts: v52CChannelStatusChange.setStatus('current')
v52CPathOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 10, 0, 7)).setObjects(("ZhoneV52-MIB", "v52CPathOperStatus"), ("ZhoneV52-MIB", "v52CPathOperStatusCause"))
if mibBuilder.loadTexts: v52CPathOperStatusChange.setStatus('current')
v52ProtectionCPathOperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 10, 0, 8)).setObjects(("ZhoneV52-MIB", "v52ProtectionCPathOperStatus"), ("ZhoneV52-MIB", "v52ProtectionCPathOperStatusCause"))
if mibBuilder.loadTexts: v52ProtectionCPathOperStatusChange.setStatus('current')
v52IgExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 11), )
if mibBuilder.loadTexts: v52IgExtensionTable.setStatus('current')
v52IgExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 11, 1), )
v52InterfaceGroupEntry.registerAugmentions(("ZhoneV52-MIB", "v52IgExtensionEntry"))
v52IgExtensionEntry.setIndexNames(*v52InterfaceGroupEntry.getIndexNames())
if mibBuilder.loadTexts: v52IgExtensionEntry.setStatus('current')
v52IgStartupCheckLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 11, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgStartupCheckLinkId.setStatus('current')
v52IgStartupUnblockUserPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 11, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgStartupUnblockUserPorts.setStatus('current')
v52IgLinkOutOfServiceTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000)).clone(2500)).setUnits('milliseconds.').setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgLinkOutOfServiceTimer.setStatus('current')
v52IgLinkInServiceTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 10000)).clone(200)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: v52IgLinkInServiceTimer.setStatus('current')
v52ProtectionCPathTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 12), )
if mibBuilder.loadTexts: v52ProtectionCPathTable.setStatus('current')
v52ProtectionCPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 12, 1), ).setIndexNames((0, "ZhoneV52-MIB", "v52IgNameId"), (0, "ZhoneV52-MIB", "v52ProtectionCPathId"))
if mibBuilder.loadTexts: v52ProtectionCPathEntry.setStatus('current')
v52ProtectionCPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: v52ProtectionCPathId.setStatus('current')
v52ProtectionCPathOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52ProtectionCPathOperStatus.setStatus('current')
v52ProtectionCPathOperStatusCause = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 3, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("establishConfirmationReceived", 1), ("establishIndicationReceived", 2), ("releaseIndicationReceived", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: v52ProtectionCPathOperStatusCause.setStatus('current')
mibBuilder.exportSymbols("ZhoneV52-MIB", v52ifTotalLapdSent=v52ifTotalLapdSent, v52IfCurrentIsdnCalls=v52IfCurrentIsdnCalls, v52ProtectionCPathEntry=v52ProtectionCPathEntry, v52IfCurrentLapdSent=v52IfCurrentLapdSent, v52IfIntervalLapdRcvdErrs=v52IfIntervalLapdRcvdErrs, v52UserPortBlock=v52UserPortBlock, v52StatsTotalTable=v52StatsTotalTable, v52CChannelTimeSlotIndex=v52CChannelTimeSlotIndex, v52IgPortAlignmentStatus=v52IgPortAlignmentStatus, v52IfCurrentPstnOutboundCalls=v52IfCurrentPstnOutboundCalls, v52IgStartupUnblockUserPorts=v52IgStartupUnblockUserPorts, v52IfCurrentLapdRcvd=v52IfCurrentLapdRcvd, v52IgStartupCheckLinkId=v52IgStartupCheckLinkId, v52InterfaceGroupTable=v52InterfaceGroupTable, v52IfCurrentCallsBlocked=v52IfCurrentCallsBlocked, v52LinkDs1ChannelNumber=v52LinkDs1ChannelNumber, v52CPathType=v52CPathType, v52IgPeerSlot=v52IgPeerSlot, v52UserPortAddress=v52UserPortAddress, v52IfIntervalLapdSent=v52IfIntervalLapdSent, v52LinkBlockNotification=v52LinkBlockNotification, v52IfTotalCallsBlocked=v52IfTotalCallsBlocked, v52UserPortIsdnPCPathId=v52UserPortIsdnPCPathId, v52ProtectionCPathOperStatus=v52ProtectionCPathOperStatus, v52CPathTable=v52CPathTable, v52IgLapvMaxOutstandingFrames=v52IgLapvMaxOutstandingFrames, v52UserPortRegOrLeaseUser=v52UserPortRegOrLeaseUser, v52IfCurrentV52ProtocolErrors=v52IfCurrentV52ProtocolErrors, v52IgLinkInServiceTimer=v52IgLinkInServiceTimer, v52IgProtocolSpecification=v52IgProtocolSpecification, PYSNMP_MODULE_ID=zhoneV52, v52IgOperationalStatus=v52IgOperationalStatus, v52IgLocalProvVariant=v52IgLocalProvVariant, v52UserPortType=v52UserPortType, v52IgPeerShelf=v52IgPeerShelf, v52IgProvVariantRequestStatus=v52IgProvVariantRequestStatus, v52CPathLogicalChannelId=v52CPathLogicalChannelId, v52LinkTable=v52LinkTable, v52CPathId=v52CPathId, v52UserPortOperStatus=v52UserPortOperStatus, v52IfCurrentLapdRcvdErrs=v52IfCurrentLapdRcvdErrs, zhoneV52=zhoneV52, v52StatsIntervalTable=v52StatsIntervalTable, v52CPathOperStatus=v52CPathOperStatus, v52StatsCurrentEntry=v52StatsCurrentEntry, v52IgPortAlignmentRequest=v52IgPortAlignmentRequest, v52IgNationalPstnRegion=v52IgNationalPstnRegion, v52IgPortAlignmentNotification=v52IgPortAlignmentNotification, v52UserPortBlockStatus=v52UserPortBlockStatus, v52CChannelEntry=v52CChannelEntry, v52IgAdminStatus=v52IgAdminStatus, v52InterfaceGroupLapvEntry=v52InterfaceGroupLapvEntry, v52CChannelStatus=v52CChannelStatus, v52IfCurrentPstnInboundCalls=v52IfCurrentPstnInboundCalls, v52IgLinkOutOfServiceTimer=v52IgLinkOutOfServiceTimer, v52IgLapvN201=v52IgLapvN201, v52IfIntervalIsdnCalls=v52IfIntervalIsdnCalls, v52IgLapvT200=v52IgLapvT200, v52StatsCurrentTable=v52StatsCurrentTable, v52UserPortAdminStatus=v52UserPortAdminStatus, v52ProtectionCPathTable=v52ProtectionCPathTable, v52IgNameId=v52IgNameId, v52CChannelRole=v52CChannelRole, v52ProtectionCPathOperStatusChange=v52ProtectionCPathOperStatusChange, v52IgExtensionTable=v52IgExtensionTable, v52IfIntervalPstnInboundCalls=v52IfIntervalPstnInboundCalls, v52IfIntervalLapdRcvd=v52IfIntervalLapdRcvd, v52CPathOperStatusChange=v52CPathOperStatusChange, v52IgRemoteInterfaceId=v52IgRemoteInterfaceId, v52IfTotalLapdRcvd=v52IfTotalLapdRcvd, v52IfTotalV52ProtocolErrors=v52IfTotalV52ProtocolErrors, v52IgStatsValidIntervals=v52IgStatsValidIntervals, v52CChannelStatusChange=v52CChannelStatusChange, v52UserPortTable=v52UserPortTable, v52ProtectionCPathId=v52ProtectionCPathId, v52CChannelProtGp=v52CChannelProtGp, v52IgLocalInterfaceId=v52IgLocalInterfaceId, v52IgRemoteProvVariant=v52IgRemoteProvVariant, v52IgProvVariantRequestNotification=v52IgProvVariantRequestNotification, v52LinkDsnLgId=v52LinkDsnLgId, v52LinkBlock=v52LinkBlock, v52UserPortEntry=v52UserPortEntry, v52IfTotalLapdRcvdErrs=v52IfTotalLapdRcvdErrs, v52IfIntervalNumber=v52IfIntervalNumber, v52IgMaxConfiguredCalls=v52IgMaxConfiguredCalls, v52CChannelRowStatus=v52CChannelRowStatus, v52LinkBlockStatus=v52LinkBlockStatus, v52StatsIntervalEntry=v52StatsIntervalEntry, v52CPathRowStatus=v52CPathRowStatus, v52CPathEntry=v52CPathEntry, v52IgOperStatusCause=v52IgOperStatusCause, v52LinkEntry=v52LinkEntry, v52LinkRowStatus=v52LinkRowStatus, v52TrapsPrefix=v52TrapsPrefix, v52ProtectionCPathOperStatusCause=v52ProtectionCPathOperStatusCause, v52IgPeerStatus=v52IgPeerStatus, v52IgSlot=v52IgSlot, v52CChannelLogicalChannelId=v52CChannelLogicalChannelId, v52IgSwitchVendor=v52IgSwitchVendor, v52UserPortIsdnDsCPathId=v52UserPortIsdnDsCPathId, v52IgPstnLayer3StartAddress=v52IgPstnLayer3StartAddress, v52StatsTotalEntry=v52StatsTotalEntry, v52CChannelTable=v52CChannelTable, v52LinkAdminStatus=v52LinkAdminStatus, v52IfIntervalCallsBlocked=v52IfIntervalCallsBlocked, v52UserPortIsdnFCPathId=v52UserPortIsdnFCPathId, v52CChannelCurrentLogicalChannelId=v52CChannelCurrentLogicalChannelId, v52CChannelStatusCause=v52CChannelStatusCause, v52IgOperStatusChange=v52IgOperStatusChange, v52IfIntervalPstnOutboundCalls=v52IfIntervalPstnOutboundCalls, v52IgShelf=v52IgShelf, v52LinkCheckId=v52LinkCheckId, v52IgRowStatus=v52IgRowStatus, v52IgStatsInvalidIntervals=v52IgStatsInvalidIntervals, v52IgLapvN200=v52IgLapvN200, v52IfTotalPstnOutboundCalls=v52IfTotalPstnOutboundCalls, v52IgExtensionEntry=v52IgExtensionEntry, v52LinkCheckIdStatus=v52LinkCheckIdStatus, v52InterfaceGroupEntry=v52InterfaceGroupEntry, v52IfTotalIsdnCalls=v52IfTotalIsdnCalls, v52Traps=v52Traps, v52LinkCheckIdNotification=v52LinkCheckIdNotification, v52CPathOperStatusCause=v52CPathOperStatusCause, v52LinkId=v52LinkId, v52IgIsdnEnvFuncStartAddress=v52IgIsdnEnvFuncStartAddress, v52InterfaceGroupLapvTable=v52InterfaceGroupLapvTable, v52IgCurrActiveCalls=v52IgCurrActiveCalls, v52UserPortRowStatus=v52UserPortRowStatus, v52IfIntervalV52ProtocolErrors=v52IfIntervalV52ProtocolErrors, v52IgProvVariantRequest=v52IgProvVariantRequest, v52IgStatsTimeElapsed=v52IgStatsTimeElapsed, v52IfTotalPstnInboundCalls=v52IfTotalPstnInboundCalls, v52IgLapvT203=v52IgLapvT203)
