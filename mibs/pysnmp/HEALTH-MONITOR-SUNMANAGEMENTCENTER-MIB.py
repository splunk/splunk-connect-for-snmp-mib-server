#
# PySNMP MIB module HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:12:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, enterprises, NotificationType, Counter32, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, Integer32, Gauge32, Bits, IpAddress, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "enterprises", "NotificationType", "Counter32", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "Integer32", "Gauge32", "Bits", "IpAddress", "ObjectIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
healthMonitor = ModuleIdentity((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11))
healthMonitor.setRevisions(('1999-07-20 15:05', '1900-09-18 14:35',))
if mibBuilder.loadTexts: healthMonitor.setLastUpdated('0009181435Z')
if mibBuilder.loadTexts: healthMonitor.setOrganization('Sun Microsystems Inc.')
sun = MibIdentifier((1, 3, 6, 1, 4, 1, 42))
prod = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2))
sunsymon = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2))
modules = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2))
hmSwap = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 1))
hmKernelcontention = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 2))
hmNFS = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 3))
hmCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 4))
hmDiskGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 5)).setObjects(("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmDiskName"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmDiskAliasName"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmAvgWaitTransactions"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmDiskBusyPcnt"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmAvgDiskSvcTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hmDiskGroup = hmDiskGroup.setStatus('current')
hmRAM = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 6))
hmKMEM = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 7))
hmDNLC = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 8))
hmSwapSpaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 1, 1)).setObjects(("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmAvailableSwapSpace"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmReservedSwapSpace"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmAllocatedSwapSpace"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmUsedSwapSpace"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hmSwapSpaceGroup = hmSwapSpaceGroup.setStatus('current')
hmAvailableSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 1, 1, 1), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAvailableSwapSpace.setStatus('current')
hmReservedSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 1, 1, 2), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmReservedSwapSpace.setStatus('current')
hmAllocatedSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 1, 1, 3), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAllocatedSwapSpace.setStatus('current')
hmUsedSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 1, 1, 4), Integer32()).setUnits('kB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmUsedSwapSpace.setStatus('current')
hmMutexGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 2, 1)).setObjects(("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmSpinsOnMutexes"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotNumOfCPUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hmMutexGroup = hmMutexGroup.setStatus('current')
hmSpinsOnMutexes = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmSpinsOnMutexes.setStatus('current')
hmTotNumOfCPUs = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotNumOfCPUs.setStatus('current')
hmNFSClientRPCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 3, 1)).setObjects(("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotRPCCalls"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotBadRPCCalls"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotRPCRetransmissions"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotBadRPCReplies"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotRPCCallsTimedOut"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotNumOfAuthRefresh"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotFailedCallsBV"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTimers"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotMemAllocFails"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotSendFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hmNFSClientRPCGroup = hmNFSClientRPCGroup.setStatus('current')
hmTotRPCCalls = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotRPCCalls.setStatus('current')
hmTotBadRPCCalls = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotBadRPCCalls.setStatus('current')
hmTotRPCRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotRPCRetransmissions.setStatus('current')
hmTotBadRPCReplies = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotBadRPCReplies.setStatus('current')
hmTotRPCCallsTimedOut = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotRPCCallsTimedOut.setStatus('current')
hmTotNumOfAuthRefresh = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotNumOfAuthRefresh.setStatus('current')
hmTotFailedCallsBV = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotFailedCallsBV.setStatus('current')
hmTimers = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTimers.setStatus('current')
hmTotMemAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotMemAllocFails.setStatus('current')
hmTotSendFails = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotSendFails.setStatus('current')
hmCPUProcInStatesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 4, 1)).setObjects(("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotProcInRunQueue"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotProcBlocked"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmTotProcReadyInSwap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hmCPUProcInStatesGroup = hmCPUProcInStatesGroup.setStatus('current')
hmTotProcInRunQueue = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotProcInRunQueue.setStatus('current')
hmTotProcBlocked = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotProcBlocked.setStatus('current')
hmTotProcReadyInSwap = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmTotProcReadyInSwap.setStatus('current')
hmDiskTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 5, 1), )
if mibBuilder.loadTexts: hmDiskTable.setStatus('current')
hmDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 5, 1, 1), ).setIndexNames((0, "HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmDiskName"))
if mibBuilder.loadTexts: hmDiskEntry.setStatus('current')
hmDiskName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDiskName.setStatus('current')
hmDiskAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDiskAliasName.setStatus('current')
hmAvgWaitTransactions = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAvgWaitTransactions.setStatus('current')
hmDiskBusyPcnt = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 5, 1, 1, 4), DisplayString()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDiskBusyPcnt.setStatus('current')
hmAvgDiskSvcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 5, 1, 1, 5), DisplayString()).setUnits('msec').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmAvgDiskSvcTime.setStatus('current')
hmRamMemoryPagingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 6, 1)).setObjects(("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmHandspread"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmPageScanRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hmRamMemoryPagingGroup = hmRamMemoryPagingGroup.setStatus('current')
hmHandspread = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 6, 1, 1), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmHandspread.setStatus('current')
hmPageScanRate = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPageScanRate.setStatus('current')
hmKmemStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 7, 1)).setObjects(("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmKmemErrors"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmKmemFreeMem"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hmKmemStatisticsGroup = hmKmemStatisticsGroup.setStatus('current')
hmKmemErrors = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmKmemErrors.setStatus('current')
hmKmemFreeMem = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 7, 1, 2), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hmKmemFreeMem.setStatus('current')
hmDNLCStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 8, 1)).setObjects(("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmDNLCHits"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmDNLCMisses"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmDNLCHitRate"), ("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", "hmDNLCRefRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hmDNLCStatGroup = hmDNLCStatGroup.setStatus('current')
hmDNLCHits = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDNLCHits.setStatus('current')
hmDNLCMisses = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDNLCMisses.setStatus('current')
hmDNLCHitRate = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDNLCHitRate.setStatus('current')
hmDNLCRefRate = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 11, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmDNLCRefRate.setStatus('current')
mibBuilder.exportSymbols("HEALTH-MONITOR-SUNMANAGEMENTCENTER-MIB", agent=agent, hmSwap=hmSwap, hmDiskTable=hmDiskTable, hmKernelcontention=hmKernelcontention, hmHandspread=hmHandspread, hmAvgWaitTransactions=hmAvgWaitTransactions, hmUsedSwapSpace=hmUsedSwapSpace, hmDNLCRefRate=hmDNLCRefRate, hmTotMemAllocFails=hmTotMemAllocFails, PYSNMP_MODULE_ID=healthMonitor, hmTotProcInRunQueue=hmTotProcInRunQueue, hmTotProcReadyInSwap=hmTotProcReadyInSwap, hmTotNumOfAuthRefresh=hmTotNumOfAuthRefresh, hmAllocatedSwapSpace=hmAllocatedSwapSpace, hmKmemStatisticsGroup=hmKmemStatisticsGroup, hmAvailableSwapSpace=hmAvailableSwapSpace, prod=prod, hmTotBadRPCReplies=hmTotBadRPCReplies, hmSpinsOnMutexes=hmSpinsOnMutexes, sunsymon=sunsymon, hmDiskEntry=hmDiskEntry, hmDNLCHitRate=hmDNLCHitRate, hmTotSendFails=hmTotSendFails, hmAvgDiskSvcTime=hmAvgDiskSvcTime, hmRAM=hmRAM, hmTotFailedCallsBV=hmTotFailedCallsBV, hmTimers=hmTimers, hmTotRPCRetransmissions=hmTotRPCRetransmissions, hmPageScanRate=hmPageScanRate, hmRamMemoryPagingGroup=hmRamMemoryPagingGroup, hmDiskName=hmDiskName, hmNFSClientRPCGroup=hmNFSClientRPCGroup, hmDNLC=hmDNLC, hmDiskBusyPcnt=hmDiskBusyPcnt, hmSwapSpaceGroup=hmSwapSpaceGroup, hmTotNumOfCPUs=hmTotNumOfCPUs, hmReservedSwapSpace=hmReservedSwapSpace, modules=modules, hmTotRPCCalls=hmTotRPCCalls, hmNFS=hmNFS, hmDiskGroup=hmDiskGroup, hmTotBadRPCCalls=hmTotBadRPCCalls, hmTotRPCCallsTimedOut=hmTotRPCCallsTimedOut, hmCPUProcInStatesGroup=hmCPUProcInStatesGroup, hmDNLCStatGroup=hmDNLCStatGroup, hmKmemFreeMem=hmKmemFreeMem, hmDiskAliasName=hmDiskAliasName, hmMutexGroup=hmMutexGroup, hmDNLCHits=hmDNLCHits, hmDNLCMisses=hmDNLCMisses, hmKmemErrors=hmKmemErrors, healthMonitor=healthMonitor, sun=sun, hmKMEM=hmKMEM, hmCPU=hmCPU, hmTotProcBlocked=hmTotProcBlocked)
