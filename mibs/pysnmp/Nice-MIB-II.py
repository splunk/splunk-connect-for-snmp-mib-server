#
# PySNMP MIB module Nice-MIB-II (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nice-MIB-II
# Produced by pysmi-0.3.4 at Mon Apr 29 20:16:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, enterprises, Counter32, ObjectIdentity, iso, ModuleIdentity, Unsigned32, IpAddress, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, Counter64, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "enterprises", "Counter32", "ObjectIdentity", "iso", "ModuleIdentity", "Unsigned32", "IpAddress", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "Counter64", "Integer32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class HostLocalTime(TextualConvention, OctetString):
    status = 'current'
    displayHint = 'YYMMDDHHMMSS'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(12, 12)
    fixedLength = 12

class YesNo(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("no", 0), ("yes", 1))

class SeverityType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noError", 1), ("warning", 2), ("error", 3), ("criticalError", 4))

class ClsErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("callServerIsDown", 1), ("rcmIsDown", 2), ("schedulerServerIsDown", 3), ("dBServerIsDown", 4), ("dispatchIsDown", 5), ("callServerLinkIsDown", 6), ("recordingOnDemandIsNotEnabled", 7), ("schedulerServerIsNotInitializedProperly", 8), ("failureConnectionToDB", 9), ("dBServerIsNotInitializedProperly", 10), ("dBSpaceIsFull", 11), ("communicationProblemWithLogger", 12), ("problematicClockDifferencesWithLogger", 13), ("noAvailableResources", 14), ("loggerIsNotInitializedProperly", 15), ("rcmIsNotInitializedProperly", 16), ("problemWithNPLUS1Loggers", 17), ("callServerTableIsFull", 18), ("allCLSModulesInitFailed", 19), ("clsModuleRestartFailed", 20), ("osDiskFailure", 21))

class RecordedMediaType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("voice", 1), ("screen", 2), ("voiceAndScreen", 3))

class LoggerInitializationStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("rcmInternalComponentsError", 1), ("noLoggerWasFound", 2), ("noConnectionToSwitch", 3), ("channelWasNotInitialized", 4))

class OsDiskFailureType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("faileDisk", 1), ("fixStarted", 2), ("shutdownDirty", 3), ("missingDisk", 4), ("unknownFailure", 5))

class ClsTableType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("dbRecordsTable", 1), ("callsTable", 2), ("loginTable", 3))

class ApplicationErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("hostIsDown", 1), ("applicationServerIsDown", 2), ("sysAdminHostConnectionIsDown", 3), ("dataBaseConnectionIsDown", 4), ("userAdminHostConnectionIsDown", 5), ("storageCenterHostConnectionIsDown", 6), ("playbackServerHostConnectionIsDown", 7), ("queryExecuterHostConnectionIsDown", 8), ("loggerWasNotAttachedToACLS", 9), ("clsConnectionIsDown", 10), ("loggerConnectionIsDown", 11), ("scConnectionIsDown", 12), ("ctiDbConnectionIsDown", 13), ("caDbConnectionIsDown", 14), ("nifDBConnectionIsDown", 15), ("interactionDBConnectionIsDown", 16), ("ruleEngineEventProviderFailed", 17), ("ruleEngineEventProviderIdle", 18), ("ruleEngineRuleGeneratorFailed", 19), ("ruleEngineRuleGeneratorIdle", 20), ("ruleEngineActionExecuterFailed", 21), ("ruleEngineActionExecuterIdle", 22), ("ruleEngineConfigurationError", 23))

class DriverErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("driverIsUp", 1), ("driverIsDown", 2), ("configurationFileIsMissing", 3))

class CTIEventsDBServerErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ctiDBServerIsNotInitializedProperly", 1), ("ctiDBSpaceIsFull", 2), ("ctiDBLogSpaceIsFull", 3), ("ctiFailureConnectionToCTIDB", 4), ("ctiMissingLookUpTable", 5), ("ctiFailureInsertCTIEvent", 6), ("ctiInvalidMessageReceived", 7), ("ctiRetentionFailure", 8))

class LoggingInstanceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("general", 0), ("audioManagerModule", 1), ("dataBaseModule", 2), ("diskModule", 3), ("channelsModule", 4), ("autoDeletionModule", 5), ("hardwareDriverModule", 6), ("voipDriverModule", 7), ("dliDriverModule", 8), ("nPlus1Module", 9), ("dongleModule", 10), ("checkSumModule", 11))

class LoggingErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("communicationFailure", 1), ("loggerQueryFailure", 2), ("initializationFailure", 3), ("diskProblem", 4), ("nplus1RobMalfunction", 5), ("nplus1RobPowerFailure", 6), ("lowFreeDiskSpace", 7), ("noFreeDiskSpace", 8), ("lowKeptDiskSpace", 9), ("noKeptDiskSpace", 10), ("dongleProblem", 11), ("invalidChecksum", 12), ("lineErrorOnChannels", 13), ("someChannelsNotRecording", 14), ("lowStatisticsAlarmOnChannels", 15), ("highStatisticslarmOnChannels", 16))

class CaptureInstanceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("adifBoard", 0), ("adif3Board", 1), ("apaBoard", 2), ("isdnBoard", 3), ("etaiBoard", 4), ("etai2Board", 5), ("ntcmBoard", 6), ("tdaBoard", 7), ("natiBoard", 8), ("nati2Board", 9), ("isacBoard", 10), ("isac2Board", 11), ("dliBoard", 12), ("lafBoard", 13), ("udaBoard", 14), ("lmopBoard", 15), ("aliBoard", 16), ("ali4Board", 17), ("btai2Board", 18))

class CaptureErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("dspProblemInRecordingBoard", 1), ("dspProblemInAlgorithmsBoard", 2), ("dspProblemInInterfaceBoard", 3), ("dspProblemInPlaybackBoard", 4), ("internalProblemInRecordingBoard", 5), ("internalProblemInAlgorithmsBoard", 6), ("internalProblemInInterfaceBoard", 7), ("internalProblemInPlaybackBoard", 8), ("lineProblemInRecordingBoard", 9), ("lineProblemInAlgorithmsBoard", 10), ("lineProblemInInterfaceBoard", 11), ("lineProblemInPlaybackBoard", 12))

class BackupErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("mediaError", 1), ("deviceError", 2), ("retrievalError", 3), ("communicationError", 4), ("hardDiskError", 5), ("recoveryFailed", 6), ("archivingSuspended", 7))

class BackupInstanceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 49, 50, 51, 52, 53, 54, 55))
    namedValues = NamedValues(("hpDatDDS2Device", 0), ("hpDatDDS3Device", 1), ("hpDatDDS3AutoLoaderDevice", 2), ("sonyDatDDS2Device", 3), ("sonyDatDDS3Device", 4), ("sonyMo1Device", 5), ("sonyAit1Device", 6), ("hpMo1Device", 7), ("sonyMo2Device", 8), ("hpDatDDS2AutoLoaderDevice", 9), ("sonyDatDDS3AutoLoaderDevice", 10), ("sonyait1autoloaderDevice", 11), ("srvsonyDatDDS2sdt7000Device", 12), ("hpDDS4Device", 13), ("seaGateDatDDS4Device", 49), ("sonyDatDDS4Device", 50), ("sonyAit2Device", 51), ("matsushitaDVDRam1Device", 52), ("hitachiDVDRam1Device", 53), ("hitachiDVDRam2Device", 54), ("matsushitaDVDRam2Device", 55))

class BackupErrorBSRVErrorCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1310732, -983028, -1441780, -1048563, -3735539, 720909, 14, 15, -2424816, -1507312, -458735, -655343, -720879, -786415, -1114095, -1638383, -2818031, -65518, -131054, -196590, -262126, -327662, -393198, -524270, -851950, -917486, -1179630, 1835026, -1572846, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))
    namedValues = NamedValues(("bsrv-ErrCode-DeviceOk", 0), ("bsrv-ErrCode-NoFreeTokens", 1), ("bsrv-ErrCode-DiskIsFull", 2), ("bsrv-ErrCode-WrongFileSize", 3), ("bsrv-ErrCode-CannotAppendToMedia", 4), ("bsrv-ErrCode-MediaHasNotYetExpired", 5), ("bsrv-ErrCode-DeviceHasTimedOut", 6), ("bsrv-ErrCode-MediaHasBadHeader", 7), ("bsrv-ErrCode-TapeHasNoData", 8), ("bsrv-ErrCode-WrongLoggerId", 9), ("bsrv-ErrCode-RecoveryFailed", 10), ("bsrv-ErrCode-DeviceNotConnected", 11), ("bsrv-ErrCode-MediaWasManualyEjected-NoMagazine", 1310732), ("bsrv-ErrCode-MediaWasManualyEjected-NotReady", -983028), ("bsrv-ErrCode-MediaWasManualyEjected-TargetAbort", -1441780), ("bsrv-ErrCode-MediumError-Medium", -1048563), ("bsrv-ErrCode-MediumError-CRCError", -3735539), ("bsrv-ErrCode-MediumError-ReadFromPbuFailed", 720909), ("bsrv-ErrCode-MediaIsWriteProtected", 14), ("bsrv-ErrCode-MediaIsBlank", 15), ("bsrv-ErrCode-EndOfMediumWasReached-PBUEOMEarlyWarn", -2424816), ("bsrv-ErrCode-EndOfMediumWasReached-PBUVolOverflow", -1507312), ("bsrv-ErrCode-GeneralHardwareError-NoAdapter", -458735), ("bsrv-ErrCode-GeneralHardwareError-DataOverrun", -655343), ("bsrv-ErrCode-GeneralHardwareError-BusFree", -720879), ("bsrv-ErrCode-GeneralHardwareError-BusFail", -786415), ("bsrv-ErrCode-GeneralHardwareError-Hardware", -1114095), ("bsrv-ErrCode-GeneralHardwareError-PBUIOErr", -1638383), ("bsrv-ErrCode-GeneralHardwareError-PBUHostBusReset", -2818031), ("bsrv-ErrCode-InternalError-NoAspi", -65518), ("bsrv-ErrCode-InternalError-Busy", -131054), ("bsrv-ErrCode-InternalError-AspiErr", -196590), ("bsrv-ErrCode-InternalError-NoMem", -262126), ("bsrv-ErrCode-InternalError-NoDevice", -327662), ("bsrv-ErrCode-InternalError-AspiInval", -393198), ("bsrv-ErrCode-InternalError-Abort", -524270), ("bsrv-ErrCode-InternalError-TargetBusy", -851950), ("bsrv-ErrCode-InternalError-Reservation", -917486), ("bsrv-ErrCode-InternalError-IllegalReq", -1179630), ("bsrv-ErrCode-InternalError-InternalError", 1835026), ("bsrv-ErrCode-InternalError-Miscompare", -1572846), ("bsrv-ErrCode-NoInitHeader", 19), ("bsrv-ErrCode-BadMediaType", 20), ("bsrv-ErrCode-DiskFailure", 21), ("bsrv-ErrCode-BadCassette", 22), ("bsrv-ErrCode-CleaningCartridge", 23), ("bsrv-ErrCode-DeviceCleaningRequired", 24), ("bsrv-ErrCode-OldVersionCassette", 25), ("bsrv-ErrCode-AccessDeniedToMedia", 26), ("bsrv-ErrCode-AutoloaderHardware", 27), ("bsrv-ErrCode-CommToRemoteTapeErr", 28), ("bsrv-ErrCode-LoadCountExceeded", 29), ("bsrv-ErrCode-CannotEjectMedia", 30), ("bsrv-ErrCode-TablesSizeMismatch", 31), ("bsrv-ErrCode-FatNotSupported", 32), ("bsrv-ErrCode-DeviceStillWorking", 33), ("bsrv-ErrCode-NewMediaWasDetected", 34))

class BackupConfig(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 100, 101, 102, 110, 111, 112, 120, 121, 122, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("bsrv-conf-null", -1), ("bsrv-conf-not-used", 0), ("bsrv-conf-autoarch-pool-continousmode", 100), ("bsrv-conf-autoarch-pool-periodicbackupmode", 101), ("bsrv-conf-autoarch-pool-periodicejectmode", 102), ("bsrv-conf-autoarch-mirroring-continousmode", 110), ("bsrv-conf-autoarch-mirroring-periodicbackupmode", 111), ("bsrv-conf-autoarch-mirroring-periodicejectmode", 112), ("bsrv-conf-autoarch-channalization-continousmode", 120), ("bsrv-conf-autoarch-channalization-periodicbackupmode", 121), ("bsrv-conf-autoarch-channalizationperiodicejectmode", 122), ("bsrv-conf-manual-archiving", 2), ("bsrv-conf-retrieval", 3), ("bsrv-conf-init", 4), ("bsrv-conf-erase", 5), ("bsrv-conf-retrieve-while-archiving", 6))

class BackupDeviceState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 25, 26))
    namedValues = NamedValues(("deviceEmpty", 1), ("deviceLoadingForWrite", 2), ("deviceReadyForWrite", 3), ("deviceArchiving", 4), ("deviceFull", 5), ("deviceError", 6), ("deviceLoadingForReading", 7), ("deviceReadyForReading", 8), ("deviceRetrieving", 9), ("deviceClosing", 10), ("deviceRecovering", 11), ("deviceMirroringSuspended", 12), ("deviceCleaning", 13), ("deviceMagazineIsExhausted", 14), ("deviceErasing", 15), ("deviceVerifyingMagazine", 16), ("deviceConnectingToRTS", 19), ("deviceWaitingForBSRVRestart", 20), ("deviceConnectionToRTSFailed", 21), ("occupiedRemoteDevice", 22), ("cannotAppendOldMedia", 25), ("deviceWaitingForUserEject", 26))

class LineErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("fer", 1), ("mlos", 2), ("pra", 3), ("flos", 4), ("ais", 5), ("nos", 6), ("los", 7), ("ubal", 8), ("lsig", 9), ("mfas", 10), ("ito", 11), ("swf", 12), ("rai", 13), ("voipErr", 14))

class BoardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, -1, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("hc-adif3-board", 0), ("hc-etai2-board", 1), ("hc-isac2-board", 2), ("hc-btai2-board", 3), ("hc-nati2-board", 4), ("hc-ali4-board", 5), ("board-type-none", -1), ("board-type-adif", 6), ("board-type-etai", 7), ("board-type-dli", 8), ("board-type-ali", 9), ("board-type-isdn", 10), ("board-type-ntcm", 11), ("board-type-isac", 12), ("board-type-nati", 13), ("board-type-external", 14))

class RdTaskType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(8, 9))
    namedValues = NamedValues(("totalCompare", 8), ("sampleCompare", 9))

class TaskState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notActive", 0), ("active", 1), ("endingDueTime", 2), ("stuck", 3))

class RdErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("exceptionWhileProcessing", 0), ("failedToInitializeApplication", 1), ("keepAliveHearbeatFailure", 2), ("connectionToCLSLost", 3), ("connectionToLoggerLost", 4), ("clsAddressingGeneralError", 5))

class RdConnStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("connectionNotActive", 0), ("connectionIsActive", 1), ("connectionLost", 2))

nice = MibIdentifier((1, 3, 6, 1, 4, 1, 3167))
niceMib_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1)).setLabel("niceMib-2")
storageCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 6))
trapsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 1))
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 1), SeverityType())
if mibBuilder.loadTexts: trapSeverity.setStatus('mandatory')
trapLoggerId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 2), DisplayString())
if mibBuilder.loadTexts: trapLoggerId.setStatus('mandatory')
trapRecordedMedia = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 3), RecordedMediaType())
if mibBuilder.loadTexts: trapRecordedMedia.setStatus('mandatory')
trapLoggerInitialization = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 4), LoggerInitializationStatus())
if mibBuilder.loadTexts: trapLoggerInitialization.setStatus('mandatory')
trapDBErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 5), Integer32())
if mibBuilder.loadTexts: trapDBErrorCode.setStatus('mandatory')
trapOsDiskFailure = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 6), OsDiskFailureType())
if mibBuilder.loadTexts: trapOsDiskFailure.setStatus('mandatory')
trapClsTableType = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 7), ClsTableType())
if mibBuilder.loadTexts: trapClsTableType.setStatus('mandatory')
trapDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 8), Integer32())
if mibBuilder.loadTexts: trapDiskUsage.setStatus('mandatory')
trapLoggerInitializationStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 9), LoggerInitializationStatus())
if mibBuilder.loadTexts: trapLoggerInitializationStatus.setStatus('mandatory')
trapHostTime = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 10), HostLocalTime())
if mibBuilder.loadTexts: trapHostTime.setStatus('mandatory')
trapCLSId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 11), DisplayString())
if mibBuilder.loadTexts: trapCLSId.setStatus('mandatory')
trapSCId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 12), DisplayString())
if mibBuilder.loadTexts: trapSCId.setStatus('mandatory')
trapDBId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 13), DisplayString())
if mibBuilder.loadTexts: trapDBId.setStatus('mandatory')
trapFileName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 14), DisplayString())
if mibBuilder.loadTexts: trapFileName.setStatus('mandatory')
trapDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 15), DisplayString())
if mibBuilder.loadTexts: trapDeviceId.setStatus('mandatory')
trapRegistryKey = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 16), DisplayString())
if mibBuilder.loadTexts: trapRegistryKey.setStatus('mandatory')
trapVLModuleName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 17), DisplayString())
if mibBuilder.loadTexts: trapVLModuleName.setStatus('mandatory')
trapVLModuleStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 18), SeverityType())
if mibBuilder.loadTexts: trapVLModuleStatus.setStatus('mandatory')
trapDiskDrive = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 19), DisplayString())
if mibBuilder.loadTexts: trapDiskDrive.setStatus('mandatory')
trapLoggerIdInChain = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 20), Integer32())
if mibBuilder.loadTexts: trapLoggerIdInChain.setStatus('mandatory')
trapFreeSpacePercentage = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 21), Integer32())
if mibBuilder.loadTexts: trapFreeSpacePercentage.setStatus('mandatory')
trapKeptSpacePercentage = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 22), Integer32())
if mibBuilder.loadTexts: trapKeptSpacePercentage.setStatus('mandatory')
trapChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 23), Integer32())
if mibBuilder.loadTexts: trapChannelNumber.setStatus('mandatory')
trapBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 24), Integer32())
if mibBuilder.loadTexts: trapBoardNumber.setStatus('mandatory')
trapDspNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 25), Integer32())
if mibBuilder.loadTexts: trapDspNumber.setStatus('mandatory')
trapLineNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 26), Integer32())
if mibBuilder.loadTexts: trapLineNumber.setStatus('mandatory')
trapLineProblem = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 27), DisplayString())
if mibBuilder.loadTexts: trapLineProblem.setStatus('mandatory')
trapDataLineNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 28), Integer32())
if mibBuilder.loadTexts: trapDataLineNumber.setStatus('mandatory')
trapDaughterBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 29), Integer32())
if mibBuilder.loadTexts: trapDaughterBoardNumber.setStatus('mandatory')
trapSQLTableName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 30), DisplayString())
if mibBuilder.loadTexts: trapSQLTableName.setStatus('mandatory')
trapEventProviderId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 31), Integer32())
if mibBuilder.loadTexts: trapEventProviderId.setStatus('mandatory')
trapRuleGeneratorId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 32), Integer32())
if mibBuilder.loadTexts: trapRuleGeneratorId.setStatus('mandatory')
trapActionExecuterId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 33), Integer32())
if mibBuilder.loadTexts: trapActionExecuterId.setStatus('mandatory')
trapLineErrorType = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 34), LineErrorType())
if mibBuilder.loadTexts: trapLineErrorType.setStatus('mandatory')
trapRecordingChannel = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 35), Integer32())
if mibBuilder.loadTexts: trapRecordingChannel.setStatus('mandatory')
trapRecordingStartTime = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 36), HostLocalTime())
if mibBuilder.loadTexts: trapRecordingStartTime.setStatus('mandatory')
trapRecordingStopTime = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 37), HostLocalTime())
if mibBuilder.loadTexts: trapRecordingStopTime.setStatus('mandatory')
trapNumOfChannels = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 38), Integer32())
if mibBuilder.loadTexts: trapNumOfChannels.setStatus('mandatory')
trapBoardOrLogicalTrunk = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 39), Integer32())
if mibBuilder.loadTexts: trapBoardOrLogicalTrunk.setStatus('mandatory')
trapChannelOrTimeslot = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 40), Integer32())
if mibBuilder.loadTexts: trapChannelOrTimeslot.setStatus('mandatory')
trapMateLogicalTrunk = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 41), Integer32())
if mibBuilder.loadTexts: trapMateLogicalTrunk.setStatus('mandatory')
trapMateTimeslot = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 42), Integer32())
if mibBuilder.loadTexts: trapMateTimeslot.setStatus('mandatory')
trapBoardType = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 43), BoardType())
if mibBuilder.loadTexts: trapBoardType.setStatus('mandatory')
trapLogicalStreamNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 44), Integer32())
if mibBuilder.loadTexts: trapLogicalStreamNumber.setStatus('mandatory')
trapBackupConfig = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 45), BackupConfig())
if mibBuilder.loadTexts: trapBackupConfig.setStatus('mandatory')
trapBackupDeviceState = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 46), BackupDeviceState())
if mibBuilder.loadTexts: trapBackupDeviceState.setStatus('mandatory')
cls = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2))
clsRcm = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1))
rcmName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcmName.setStatus('mandatory')
rcmStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcmStatus.setStatus('mandatory')
rcmPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 3), )
if mibBuilder.loadTexts: rcmPendingErrorsTable.setStatus('mandatory')
rcmPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "rcmErrorIndex"))
if mibBuilder.loadTexts: rcmPendingErrorsEntry.setStatus('mandatory')
rcmErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 3, 1, 1), ClsErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcmErrorType.setStatus('mandatory')
rcmErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcmErrorReflectedStatus.setStatus('mandatory')
rcmErrorLoggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcmErrorLoggerId.setStatus('optional')
rcmErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcmErrorIndex.setStatus('mandatory')
clsCallServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2))
callServerName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callServerName.setStatus('mandatory')
callServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callServerStatus.setStatus('mandatory')
callServerPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 3), )
if mibBuilder.loadTexts: callServerPendingErrorsTable.setStatus('mandatory')
callServerPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "callServerErrorIndex"))
if mibBuilder.loadTexts: callServerPendingErrorsEntry.setStatus('mandatory')
callServerErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 3, 1, 1), ClsErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callServerErrorType.setStatus('mandatory')
callServerErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callServerErrorReflectedStatus.setStatus('mandatory')
callServerErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callServerErrorIndex.setStatus('mandatory')
clsSchedulerServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3))
schedulerServerName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerServerName.setStatus('mandatory')
schedulerServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerServerStatus.setStatus('mandatory')
schedulerServerPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 3), )
if mibBuilder.loadTexts: schedulerServerPendingErrorsTable.setStatus('mandatory')
schedulerServerPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "schedulerServerErrorIndex"))
if mibBuilder.loadTexts: schedulerServerPendingErrorsEntry.setStatus('mandatory')
schedulerServerErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 3, 1, 1), ClsErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerServerErrorType.setStatus('mandatory')
schedulerServerErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerServerErrorReflectedStatus.setStatus('mandatory')
schedulerServerErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerServerErrorIndex.setStatus('mandatory')
clsDbServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4))
dbServerName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbServerName.setStatus('mandatory')
dbServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbServerStatus.setStatus('mandatory')
dbServerPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 3), )
if mibBuilder.loadTexts: dbServerPendingErrorsTable.setStatus('mandatory')
dbServerPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "dbServerErrorIndex"))
if mibBuilder.loadTexts: dbServerPendingErrorsEntry.setStatus('mandatory')
dbServerErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 3, 1, 1), ClsErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbServerErrorType.setStatus('mandatory')
dbServerErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbServerErrorReflectedStatus.setStatus('mandatory')
dbServerDBErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbServerDBErrorCode.setStatus('optional')
dbServerErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbServerErrorIndex.setStatus('mandatory')
clsDispatcher = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5))
clsDispatcherName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsDispatcherName.setStatus('mandatory')
clsDispatcherStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsDispatcherStatus.setStatus('mandatory')
clsDispatcherPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 3), )
if mibBuilder.loadTexts: clsDispatcherPendingErrorsTable.setStatus('mandatory')
clsDispatcherPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "clsDispatcherErrorIndex"))
if mibBuilder.loadTexts: clsDispatcherPendingErrorsEntry.setStatus('mandatory')
clsDispatcherErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 3, 1, 1), ClsErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsDispatcherErrorType.setStatus('mandatory')
clsDispatcherErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsDispatcherErrorReflectedStatus.setStatus('mandatory')
clsDispatcherErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsDispatcherErrorIndex.setStatus('mandatory')
clsAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2, 6))
clsAgentIsRepeatingTraps = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 6, 1), YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsAgentIsRepeatingTraps.setStatus('mandatory')
clsAgentTrapsRepeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsAgentTrapsRepeatInterval.setStatus('mandatory')
clsAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsAgentVersion.setStatus('mandatory')
clsRcmIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1001)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
clsRcmIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
clsCallServerIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2) + (0,1003)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "callServerName"), ("Nice-MIB-II", "callServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsCallServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2) + (0,1004)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "callServerName"), ("Nice-MIB-II", "callServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsSchedulerServerIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3) + (0,1005)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "schedulerServerName"), ("Nice-MIB-II", "schedulerServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsSchedulerServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3) + (0,1006)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "schedulerServerName"), ("Nice-MIB-II", "schedulerServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsDBServerIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1007)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsDBServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1008)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsDispatchIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1009)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
clsDispatchIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1010)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
clsCallServerLinkIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2) + (0,1011)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "callServerName"), ("Nice-MIB-II", "callServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsCallServerLinkIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2) + (0,1012)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "callServerName"), ("Nice-MIB-II", "callServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsRecordingOnDemandIsNotEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3) + (0,1013)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "schedulerServerName"), ("Nice-MIB-II", "schedulerServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsRecordingOnDemandIsEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3) + (0,1014)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "schedulerServerName"), ("Nice-MIB-II", "schedulerServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsSchedulerServerIsNotInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3) + (0,1015)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "schedulerServerName"), ("Nice-MIB-II", "schedulerServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsSchedulerServerIsInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3) + (0,1016)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "schedulerServerName"), ("Nice-MIB-II", "schedulerServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsFailureConnectionToDB = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1017)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
clsConnectionToDBIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1018)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsDBServerIsNotInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1019)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsDBServerIsInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1020)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsDBSpaceIsFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1021)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
clsDBSpaceIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1022)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsRecordIsNotInsertedToDBTheRecordIsLost = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1023)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
clsRecordIsInsertedToDB = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1024)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
clsCommunicationProblemWithLogger = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1025)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerId"))
clsCommunicationToLoggerIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1026)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
clsProblematicClockDifferencesWithLogger = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1027)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerId"))
clsNoClockDifferencesWithLogger = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1028)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
clsNoAvailableResources = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1029)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRecordedMedia"))
clsResourcesAreAvailable = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1030)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
clsLoggerIsNotInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1031)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerInitializationStatus"))
clsLoggerIsInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1032)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
clsRCMIsNotInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1033)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
clsRCMIsInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1034)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
clsProblemWithNPLUS1Loggers = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1035)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerId"))
clsNPLUS1LoggersAreOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1036)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
clsCallServerTableIsFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2) + (0,1037)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "callServerName"), ("Nice-MIB-II", "callServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapClsTableType"))
clsCallServerTableIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2) + (0,1038)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "callServerName"), ("Nice-MIB-II", "callServerStatus"), ("Nice-MIB-II", "trapHostTime"))
clsALLCLSModulesInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1039)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
clsALLCLSModulesInitOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1040)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
clsCLSModuleRestartFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1041)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
clsCLSModuleRestartOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1042)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
clsOSDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1043)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapOsDiskFailure"))
clsOSDiskOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1044)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
applicationsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 5))
applicationsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1), )
if mibBuilder.loadTexts: applicationsTable.setStatus('mandatory')
applicationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1, 1), ).setIndexNames((0, "Nice-MIB-II", "applicationsTableIndex"))
if mibBuilder.loadTexts: applicationsEntry.setStatus('mandatory')
applicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationName.setStatus('mandatory')
applicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationStatus.setStatus('mandatory')
applicationsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationsTableIndex.setStatus('mandatory')
applicationsPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 5, 2), )
if mibBuilder.loadTexts: applicationsPendingErrorsTable.setStatus('mandatory')
applicationsPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 5, 2, 1), ).setIndexNames((0, "Nice-MIB-II", "applicationsErrorsTableApplicationIndex"), (0, "Nice-MIB-II", "applicationsErrorsTableErrorIndex"))
if mibBuilder.loadTexts: applicationsPendingErrorsEntry.setStatus('mandatory')
applicationErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 2, 1, 1), ApplicationErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationErrorType.setStatus('mandatory')
applicationErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 2, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationErrorReflectedStatus.setStatus('mandatory')
applicationsErrorsTableApplicationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationsErrorsTableApplicationIndex.setStatus('mandatory')
applicationsErrorsTableErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationsErrorsTableErrorIndex.setStatus('mandatory')
applicationsNumberLoggedInUsers = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationsNumberLoggedInUsers.setStatus('mandatory')
applicationsSnmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 5, 4))
applicationsAgentIsRepeatingTraps = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 5, 4, 1), YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applicationsAgentIsRepeatingTraps.setStatus('mandatory')
applicationsAgentTrapsRepeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 5, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applicationsAgentTrapsRepeatInterval.setStatus('mandatory')
applicationsAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 5, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationsAgentVersion.setStatus('mandatory')
ctiEventsDbServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 8))
ctiDBServerName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerName.setStatus('mandatory')
ctiDBServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 8, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerStatus.setStatus('mandatory')
ctiDBServerPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 8, 3), )
if mibBuilder.loadTexts: ctiDBServerPendingErrorsTable.setStatus('mandatory')
ctiDBServerPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 8, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "ctiDBServerErrorIndex"))
if mibBuilder.loadTexts: ctiDBServerPendingErrorsEntry.setStatus('mandatory')
ctiDBServerErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 8, 3, 1, 1), CTIEventsDBServerErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerErrorType.setStatus('mandatory')
ctiDBServerErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 8, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerErrorReflectedStatus.setStatus('mandatory')
ctiDBServerDBErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerDBErrorCode.setStatus('optional')
ctiDBServerErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerErrorIndex.setStatus('mandatory')
ctiDBServerSnmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 8, 4))
ctiDBServerAgentIsRepeatingTraps = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 8, 4, 1), YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctiDBServerAgentIsRepeatingTraps.setStatus('mandatory')
ctiDBServerAgentTrapsRepeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 8, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctiDBServerAgentTrapsRepeatInterval.setStatus('mandatory')
ctiDBServerAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 8, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerAgentVersion.setStatus('mandatory')
appsServerIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5001)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
appsServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
appsSystemAdminHostConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5003)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
appsSystemAdminHostConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5004)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
appsAdminDataBaseConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5005)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
appsAdminDataBaseConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5006)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
appsLoggerIsNotAttachToACLS = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5007)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerId"))
appsCLSConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5008)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapCLSId"))
appsCLSConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5009)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapCLSId"))
appsLoggerConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5010)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerId"))
appsLoggerConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5011)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerId"))
appsSCConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5012)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapSCId"))
appsSCConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5013)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapSCId"))
appsCTIDBConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5014)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
appsCTIDBConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5015)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
appsCADBConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5016)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
appsCADBConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5017)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
appsNIFDBConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5018)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
appsNIFDBConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5019)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
appsInteractionDBConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5020)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
appsInteractionDBConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5021)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
appsUserAdminHostConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5022)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
appsUserAdminHostConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5023)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
appsRuleEngineEventProviderFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5024)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapEventProviderId"))
appsRuleEngineEventProviderSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5025)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapEventProviderId"))
appsRuleEngineEventProviderIdle = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5026)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapEventProviderId"))
appsRuleEngineEventProviderActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5027)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapEventProviderId"))
appsRuleEngineRuleGeneratorFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5028)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRuleGeneratorId"))
appsRuleEngineRuleGeneratorSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5029)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRuleGeneratorId"))
appsRuleEngineRuleGeneratorIdle = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5030)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRuleGeneratorId"))
appsRuleEngineRuleGeneratorActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5031)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRuleGeneratorId"))
appsRuleEngineActionExecuterFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5032)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapActionExecuterId"))
appsRuleEngineActionExecuterSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5033)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapActionExecuterId"))
appsRuleEngineActionExecuterIdle = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5034)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapActionExecuterId"))
appsRuleEngineActionExecuterActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5035)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapActionExecuterId"))
appsRuleMngrDataBaseConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5036)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
appsRuleMngrDataBaseConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5037)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
drivers = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 4))
driversTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1), )
if mibBuilder.loadTexts: driversTable.setStatus('mandatory')
driversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1), ).setIndexNames((0, "Nice-MIB-II", "driverId"))
if mibBuilder.loadTexts: driversEntry.setStatus('mandatory')
driverName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverName.setStatus('mandatory')
driverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverStatus.setStatus('mandatory')
driverId = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverId.setStatus('mandatory')
driverNumberOfDevicesMonitored = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverNumberOfDevicesMonitored.setStatus('mandatory')
driverNumberOfSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverNumberOfSegments.setStatus('mandatory')
driverNumberOfCompound = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverNumberOfCompound.setStatus('mandatory')
driverModulesTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2), )
if mibBuilder.loadTexts: driverModulesTable.setStatus('mandatory')
driverModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2, 1), ).setIndexNames((0, "Nice-MIB-II", "driverIdInModulesTable"), (0, "Nice-MIB-II", "driverModuleId"))
if mibBuilder.loadTexts: driverModulesEntry.setStatus('mandatory')
driverModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverModuleName.setStatus('mandatory')
driverModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverModuleStatus.setStatus('mandatory')
driverIdInModulesTable = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverIdInModulesTable.setStatus('mandatory')
driverModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverModuleId.setStatus('mandatory')
driversPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 4, 3), )
if mibBuilder.loadTexts: driversPendingErrorsTable.setStatus('mandatory')
driversPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 4, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "driverIdInDriversErrors"), (0, "Nice-MIB-II", "driverErrorIndex"))
if mibBuilder.loadTexts: driversPendingErrorsEntry.setStatus('mandatory')
driverErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 3, 1, 1), DriverErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverErrorType.setStatus('mandatory')
driverErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverErrorReflectedStatus.setStatus('mandatory')
driverIdInDriversErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverIdInDriversErrors.setStatus('mandatory')
driverErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverErrorIndex.setStatus('mandatory')
driversModulePendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4), )
if mibBuilder.loadTexts: driversModulePendingErrorsTable.setStatus('mandatory')
driversModulePendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4, 1), ).setIndexNames((0, "Nice-MIB-II", "driverIdInDriversErrors"), (0, "Nice-MIB-II", "driverErrorIndex"))
if mibBuilder.loadTexts: driversModulePendingErrorsEntry.setStatus('mandatory')
driverModuleErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4, 1, 1), DriverErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverModuleErrorType.setStatus('mandatory')
driverModuleErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverModuleErrorReflectedStatus.setStatus('mandatory')
driverIdInDriverModulesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverIdInDriverModulesErrors.setStatus('mandatory')
moduleIdInModulesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIdInModulesErrors.setStatus('mandatory')
driverModuleErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverModuleErrorIndex.setStatus('mandatory')
driversSnmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 4, 5))
driversAgentIsRepeatingTraps = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 4, 5, 1), YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: driversAgentIsRepeatingTraps.setStatus('mandatory')
driversAgentTrapsRepeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 4, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: driversAgentTrapsRepeatInterval.setStatus('mandatory')
driversAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 4, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driversAgentVersion.setStatus('mandatory')
driverIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4) + (0,4001)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverName"), ("Nice-MIB-II", "driverStatus"), ("Nice-MIB-II", "trapHostTime"))
driverIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1) + (0,4002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverName"), ("Nice-MIB-II", "driverStatus"), ("Nice-MIB-II", "trapHostTime"))
driverConfigurationFileIsMissing = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1) + (0,4003)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverName"), ("Nice-MIB-II", "driverStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapFileName"))
driverSignificantConfigurationFileDataIsMissing = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1) + (0,4004)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverName"), ("Nice-MIB-II", "driverStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapFileName"))
driverConfigurationFileDataIsMissing = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1) + (0,4005)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverName"), ("Nice-MIB-II", "driverStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapFileName"))
driverConnectionToCapiIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4006)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
driverConnectionToCapiIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4007)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
driverConnectionToSwitchIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4008)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
driverConnectionToSwitchIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4009)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
driverInternalEngineError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4010)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
driverInternalEngineOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4011)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
driverCapiError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4012)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
driverCapiOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4013)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
driverCTIEngineError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4014)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
driverCTIEngineWarning = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4015)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
driverCTIEngineOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4016)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
driverMonitorEnd = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4017)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDeviceId"))
driverRegistryError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4) + (0,4018)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRegistryKey"))
driverRegistryWarning = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4) + (0,4019)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRegistryKey"))
logger = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3))
multiMediaLogger = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1))
mmlName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlName.setStatus('mandatory')
mmlStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlStatus.setStatus('mandatory')
mmlStorageSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3))
mmlStorageSystemName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlStorageSystemName.setStatus('mandatory')
mmlStorageSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlStorageSystemStatus.setStatus('mandatory')
mmlStorageSystemDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlStorageSystemDiskUsage.setStatus('mandatory')
mmlDataSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4))
mmlDataSystemName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlDataSystemName.setStatus('mandatory')
mmlDataSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlDataSystemStatus.setStatus('mandatory')
mmlAutoDeletion = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5))
mmlAutoDeletionName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlAutoDeletionName.setStatus('mandatory')
mmlAutoDeletionStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlAutoDeletionStatus.setStatus('mandatory')
mmlAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 6))
mmlAgentIsRepeatingTraps = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 6, 1), YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmlAgentIsRepeatingTraps.setStatus('mandatory')
mmlAgentTrapsRepeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmlAgentTrapsRepeatInterval.setStatus('mandatory')
mmlAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlAgentVersion.setStatus('mandatory')
mmlSnmpAgentConnectedToLogger = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3001)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlConnectionToLoggerNotEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlInvalidConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3100)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlPersistentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3101)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlAbnormalPlaybackTermination = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3102)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlAbnormalRecordTermination = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3103)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlUnableToReplyDueToConnectionLoss = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3104)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlFailToInitializeStorageDevice = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3105)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlFailToInitializeDataSystem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3106)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlFailToInitializeMemoryManager = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3107)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlUnexpectedDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3108)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlConnectionCanNotBeEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3109)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlAllConnectionResourcesInUse = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3110)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlConnectionTimeoutExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3111)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlMemoryManagerOverflow = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3112)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlAllocationFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3113)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlResourceAllocationFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3114)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlOutputChannelAllocationFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3115)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlInputChannelAllocationFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3116)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlResourceAccessFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3117)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlLoggerIsShuttingDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3118)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlLoggerIsReady = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3119)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlStorageSystemInvalidConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3200)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlStorageSystemPersistentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3201)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlConsistentDiskWriteFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3202)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlConsistentDiskReadFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3203)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlDiskUsage = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3204)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDiskUsage"))
mmlDiskIsFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3205)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlDiskIOFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3206)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlDataSystemInvalidConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4) + (0,3300)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlDataSystemName"), ("Nice-MIB-II", "mmlDataSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlDataSystemPersistentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4) + (0,3301)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlDataSystemName"), ("Nice-MIB-II", "mmlDataSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlDataBaseConsistencyMismatch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4) + (0,3302)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlDataSystemName"), ("Nice-MIB-II", "mmlDataSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlCriticalDataSystemError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4) + (0,3303)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlDataSystemName"), ("Nice-MIB-II", "mmlDataSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlTableAccessFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4) + (0,3304)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlDataSystemName"), ("Nice-MIB-II", "mmlDataSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlAutoDeletionInvalidConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5) + (0,3400)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlAutoDeletionName"), ("Nice-MIB-II", "mmlAutoDeletionStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlAutoDeletionPersistentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5) + (0,3401)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlAutoDeletionName"), ("Nice-MIB-II", "mmlAutoDeletionStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlStartingAutoDeletionJob = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5) + (0,3402)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlAutoDeletionName"), ("Nice-MIB-II", "mmlAutoDeletionStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlFinishedNormal = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5) + (0,3403)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlAutoDeletionName"), ("Nice-MIB-II", "mmlAutoDeletionStatus"), ("Nice-MIB-II", "trapHostTime"))
mmlDeletionCapacityNotReached = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5) + (0,3404)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlAutoDeletionName"), ("Nice-MIB-II", "mmlAutoDeletionStatus"), ("Nice-MIB-II", "trapHostTime"))
voiceLogger = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2))
voiceLoggerName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceLoggerName.setStatus('mandatory')
voiceLoggerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceLoggerStatus.setStatus('mandatory')
voiceLoggerLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3))
loggingName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingName.setStatus('mandatory')
loggingStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingStatus.setStatus('mandatory')
loggingInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3), )
if mibBuilder.loadTexts: loggingInstanceTable.setStatus('mandatory')
loggingInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "loggingInstanceIndex"))
if mibBuilder.loadTexts: loggingInstanceEntry.setStatus('mandatory')
loggingInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingInstanceName.setStatus('mandatory')
loggingInstanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingInstanceStatus.setStatus('mandatory')
loggingInstanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3, 1, 3), LoggingInstanceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingInstanceType.setStatus('mandatory')
loggingInstanceNumberInType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingInstanceNumberInType.setStatus('mandatory')
loggingInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingInstanceIndex.setStatus('mandatory')
loggingPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4), )
if mibBuilder.loadTexts: loggingPendingErrorsTable.setStatus('mandatory')
loggingPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4, 1), ).setIndexNames((0, "Nice-MIB-II", "loggingErrorInstanceIndex"), (0, "Nice-MIB-II", "loggingErrorIndex"))
if mibBuilder.loadTexts: loggingPendingErrorsEntry.setStatus('mandatory')
loggingErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4, 1, 1), LoggingErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingErrorType.setStatus('mandatory')
loggingErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingErrorReflectedStatus.setStatus('mandatory')
loggingErrorInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingErrorInstanceIndex.setStatus('mandatory')
loggingErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingErrorIndex.setStatus('mandatory')
loggingErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingErrorCode.setStatus('mandatory')
voiceLoggerCapture = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4))
captureName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureName.setStatus('mandatory')
captureStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureStatus.setStatus('mandatory')
captureInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3), )
if mibBuilder.loadTexts: captureInstanceTable.setStatus('mandatory')
captureInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "captureInstanceIndex"))
if mibBuilder.loadTexts: captureInstanceEntry.setStatus('mandatory')
captureInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureInstanceName.setStatus('mandatory')
captureInstanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureInstanceStatus.setStatus('mandatory')
captureInstanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3, 1, 3), CaptureInstanceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureInstanceType.setStatus('mandatory')
captureInstanceNumberInType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureInstanceNumberInType.setStatus('mandatory')
captureInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureInstanceIndex.setStatus('mandatory')
capturePendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4), )
if mibBuilder.loadTexts: capturePendingErrorsTable.setStatus('mandatory')
capturePendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4, 1), ).setIndexNames((0, "Nice-MIB-II", "captureErrorInstanceIndex"), (0, "Nice-MIB-II", "captureErrorIndex"))
if mibBuilder.loadTexts: capturePendingErrorsEntry.setStatus('mandatory')
captureErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4, 1, 1), CaptureErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureErrorType.setStatus('mandatory')
captureErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureErrorReflectedStatus.setStatus('mandatory')
captureErrorInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureErrorInstanceIndex.setStatus('mandatory')
captureErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureErrorIndex.setStatus('mandatory')
captureErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureErrorCode.setStatus('mandatory')
voiceLoggerBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5))
backupName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupName.setStatus('mandatory')
backupStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupStatus.setStatus('mandatory')
backupInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3), )
if mibBuilder.loadTexts: backupInstanceTable.setStatus('mandatory')
backupInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "backupInstanceNumber"))
if mibBuilder.loadTexts: backupInstanceEntry.setStatus('mandatory')
backupInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupInstanceName.setStatus('mandatory')
backupInstanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupInstanceStatus.setStatus('mandatory')
backupInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupInstanceNumber.setStatus('mandatory')
backupInstanceRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupInstanceRemoteNumber.setStatus('mandatory')
backupInstanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3, 1, 5), BackupInstanceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupInstanceType.setStatus('mandatory')
backupPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4), )
if mibBuilder.loadTexts: backupPendingErrorsTable.setStatus('mandatory')
backupPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4, 1), ).setIndexNames((0, "Nice-MIB-II", "backupErrorInstanceIndex"), (0, "Nice-MIB-II", "backupErrorIndex"))
if mibBuilder.loadTexts: backupPendingErrorsEntry.setStatus('mandatory')
backupErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4, 1, 1), BackupErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupErrorType.setStatus('mandatory')
backupErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupErrorReflectedStatus.setStatus('mandatory')
backupErrorBSRVErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4, 1, 3), BackupErrorBSRVErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupErrorBSRVErrorCode.setStatus('mandatory')
backupErrorInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupErrorInstanceIndex.setStatus('mandatory')
backupErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupErrorIndex.setStatus('mandatory')
voiceLoggerSnmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 6))
voiceLoggerAgentIsRepeatingTraps = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 6, 1), YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceLoggerAgentIsRepeatingTraps.setStatus('mandatory')
voiceLoggerTrapsRepeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceLoggerTrapsRepeatInterval.setStatus('mandatory')
voiceLoggerAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceLoggerAgentVersion.setStatus('mandatory')
vlLoggerNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2) + (0,6002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlApiQueryError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2) + (0,6003)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDbmConsistencyFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6100)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDbmInitPartitionFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6101)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlKernerHWDriverInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6102)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlVoipDriverInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6103)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDliDriverInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6104)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlAumGeneralInitFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6105)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDiskOpenPartitionFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6106)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDiskDrive"))
vlDiskDriveProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6107)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlNPlus1ManualSwitch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6108)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlNPlus1SpareIsBackingUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6109)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerIdInChain"))
vlNPlus1ROBMalfunction = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6110)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlNPlus1ROBPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6111)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlNPlus1SpareNeedLongUpdate = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6112)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlAutoDeleteUnder3PercSpace = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6113)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapFreeSpacePercentage"))
vlAutoDeleteNofreeSpace = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6114)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapFreeSpacePercentage"))
vlAutoDeleteLowKeptSpace = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6115)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapKeptSpacePercentage"))
vlAutoDeleteNoKeptSpace = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6116)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDongleNotInitialized = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6117)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDongleAlreadyInitialized = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6118)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDongleDeviceNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6119)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDongleInitFailed_function = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6120)).setLabel("vlDongleInitFailed-function").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDongleConnectFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6121)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDongleInitFailed_network = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6122)).setLabel("vlDongleInitFailed-network").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDongleNoDevice = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6123)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDongleInitFailed_parameter = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6124)).setLabel("vlDongleInitFailed-parameter").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDongleInitFailed_HLApi = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6125)).setLabel("vlDongleInitFailed-HLApi").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDongleInitFailed_memory = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6126)).setLabel("vlDongleInitFailed-memory").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDongleInitFailed_HLVDD = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6127)).setLabel("vlDongleInitFailed-HLVDD").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlCheckSumInvalid = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6128)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlChannelsLineError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6129)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapChannelNumber"), ("Nice-MIB-II", "trapLineErrorType"), ("Nice-MIB-II", "trapBoardType"), ("Nice-MIB-II", "trapBoardOrLogicalTrunk"), ("Nice-MIB-II", "trapChannelOrTimeslot"), ("Nice-MIB-II", "trapMateLogicalTrunk"), ("Nice-MIB-II", "trapMateTimeslot"))
vlChannelsSomeNotRecording = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6130)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapNumOfChannels"))
vlChannelsLowStatAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6131)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapNumOfChannels"))
vlChannelsHighStatAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6132)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapNumOfChannels"))
vlAdifDspIllegalCommand = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6300)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifDspNoSynch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6301)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifDspSSIRXError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6302)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifDspCodecError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6303)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifDspIllegalParameter = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6304)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifDspMPMLQError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6305)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifDspStackOverflow = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6306)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifDspIllegalInstruction = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6307)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifNoInterrupts = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6308)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifInternalBoardError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6309)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifNoSignal = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6310)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifAlarmIndicationSignal = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6311)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifLossOfSynch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6312)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifRemoteAlarmIndication = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6313)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdifFramingError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6314)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlApaInternalSelfTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6315)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlApaCommBoardDspError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6316)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlApaIOError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6317)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlApaDspFirmwareLoadFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6318)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
vlApaDspRuntimeError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6319)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
vlIsdnDspCommFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6320)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
vlIsdnIniterror = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6321)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsdnBSError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6322)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsdnLogicConnectError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6323)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsdnBoardSelfTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6324)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsdnLineError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6325)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlEtaiInitBoardFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6326)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlEtaiLineError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6327)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapLineNumber"), ("Nice-MIB-II", "trapLineProblem"))
vlEtaiMatrixSwitchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6328)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlEtaiDspError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6329)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlNtcmLoopError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6330)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlNtcmInitError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6331)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlNtcmMatrixSwitchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6332)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlTdaMatrizSwitchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6333)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlTdaDspError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6334)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlTdaGeneralError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6335)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlNatiChannelError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6336)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlNatiInitBoardError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6337)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlNatiMatrixSwitchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6338)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlNatiDspA3mError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6339)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsacSelectedClockError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6340)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsacRightClockError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6341)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsacLeftClockError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6342)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsacRightFameSynchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6343)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsacLeftFrameSynchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6344)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsacBoardError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6345)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsacTestToneError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6346)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDataLineNumber"))
vlIsacCriticalSystemError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6347)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
vlDliBoardCommError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6348)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlDliChannelError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6349)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlLafDspCommError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6350)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlLafFirmwareLoadError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6351)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlLafinitFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6352)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlLafConfigError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6353)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlLafInvalidTime = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6354)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlLafLostSynch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6355)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlLafPowerProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6356)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlLafMirrorFault = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6357)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdif3InitFailed_Dsp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6358)).setLabel("vlAdif3InitFailed-Dsp").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
vlAdif3InitFailed_timing = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6359)).setLabel("vlAdif3InitFailed-timing").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdif3InitFailed_ADPCM = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6360)).setLabel("vlAdif3InitFailed-ADPCM").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdif3InitFailed_HW = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6361)).setLabel("vlAdif3InitFailed-HW").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAdif3ExternalClockSynchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6362)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlUdaInitFailed_Dsp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6363)).setLabel("vlUdaInitFailed-Dsp").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"), ("Nice-MIB-II", "trapDaughterBoardNumber"))
vlUdaMatrixInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6364)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlUdaInitBoardFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6365)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlEtai2InitFailed_Dsp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6366)).setLabel("vlEtai2InitFailed-Dsp").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
vlEtai2MatrixInitError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6367)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlEtai2InitBoardFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6368)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlEtai2LineProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6369)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapLineNumber"), ("Nice-MIB-II", "trapLineErrorType"), ("Nice-MIB-II", "trapLogicalStreamNumber"))
vlBtai2InitFailed_Dsp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6370)).setLabel("vlBtai2InitFailed-Dsp").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
vlBtai2MatrixInitError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6371)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlBtai2InitBoardFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6372)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlBtai2FpgaError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6373)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlBtai2LineError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6374)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapLineNumber"), ("Nice-MIB-II", "trapLineErrorType"), ("Nice-MIB-II", "trapLogicalStreamNumber"))
vlIsac2RightClockError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6375)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsac2LeftClockError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6376)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsac2RightFrameSynchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6377)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsac2LeftFrameSynchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6378)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsac2BoardProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6379)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlIsac2TestToneProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6380)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDataLineNumber"))
vlIsac2SystemCriticalError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6381)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlLmopRedunPowerProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6382)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlLmopRedunDiskMirrorProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6383)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlLmopGeneralHWProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6384)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlNati2A3mDspInitProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6385)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
vlNati2McvpDspProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6386)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlNati2MatrixInitProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6387)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlNati2InitBoardProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6388)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlNati2FpgaProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6389)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlNati2LineProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6390)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapLineNumber"), ("Nice-MIB-II", "trapLineErrorType"), ("Nice-MIB-II", "trapLogicalStreamNumber"))
vlAli4DspInitProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6391)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAli4MatrixInitProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6392)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAli4CpldProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6393)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAli4InitBoardProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6394)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlAli4LineProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6395)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapLineNumber"), ("Nice-MIB-II", "trapLineErrorType"), ("Nice-MIB-II", "trapLogicalStreamNumber"))
vlAli4ExtSqlshDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6396)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
vlBsvrNoMediaRetrieval = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6700)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
vlBsvrNoMediaManualArchive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6701)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
vlBsvrAutoArchiveSuspend = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6702)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
vlBsvrRetrievalFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6703)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"))
vlBsvrOverwMediaFailedrite = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6704)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"))
vlDeviceNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6705)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"), ("Nice-MIB-II", "trapBackupConfig"), ("Nice-MIB-II", "trapBackupDeviceState"))
vlBsvrNoMediaRecognized = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6706)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"), ("Nice-MIB-II", "trapBackupConfig"))
vlBsvrMediaError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6707)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"), ("Nice-MIB-II", "trapBackupConfig"), ("Nice-MIB-II", "trapBackupDeviceState"))
vlBsvrMediaWriteProtected = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6708)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
vlBsvrCannotAppend = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6709)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"))
vlBsvrNoMediaDataFound = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6710)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
vlBsvrDeviceOperationFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6711)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"), ("Nice-MIB-II", "trapBackupConfig"), ("Nice-MIB-II", "trapBackupDeviceState"))
vlBsvrRecoveryFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6712)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
vlBsvrArchivingFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6713)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"))
vlBsvrOverwriteUsageExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6714)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
vlBsvrMediaAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6715)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"))
vlBsvrDeviceShouldBeCleaned = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6716)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"), ("Nice-MIB-II", "trapBackupDeviceState"))
vlBsvrConnectRTSFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6717)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"), ("Nice-MIB-II", "trapBackupDeviceState"))
vlBsvrAppendFailed_version = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6718)).setLabel("vlBsvrAppendFailed-version").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
vlBsvrAutoArchiveSuspended_Retrieval = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6719)).setLabel("vlBsvrAutoArchiveSuspended-Retrieval").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"))
vlBsvrAutoArchiveSuspended_Manual = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6720)).setLabel("vlBsvrAutoArchiveSuspended-Manual").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"))
vlBsvrAutoArchiveSuspended_Erase = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6721)).setLabel("vlBsvrAutoArchiveSuspended-Erase").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"))
vlBsrvDvdArchiveCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6722)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
vlBsrvBackupServerError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6723)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"), ("Nice-MIB-II", "trapBackupDeviceState"))
dbCallsBackupFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7001)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbCallsBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7002)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbAdminBackupFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7003)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbAdminBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7004)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbAuditBackupFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7005)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbAuditBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7006)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbReindexJobFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7007)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbReindexJobFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7008)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbAuditAutoDeletionFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7009)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbAuditAutoDeletionFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7010)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbCallsDbSpaceIsLow = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7011)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbCallsDbFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7012)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbAuditDbSpaceIsLow = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7013)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbAuditDbFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7014)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbAdminDbSpaceIsLow = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7015)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbAdminDbFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7016)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbInserterMissingCalls = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7017)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbReplicationFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7018)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbRuleBackupFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7019)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbRuleBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7020)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbMsdbBackupFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7021)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbMsdbBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7022)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbMasterBackupFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7023)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbMasterBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7024)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbRuleDBFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7025)).setObjects(("Nice-MIB-II", "trapSeverity"))
dbRuleDBSpaceIsLow = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7026)).setObjects(("Nice-MIB-II", "trapSeverity"))
ctiDBServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8001)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
ctiDBServerIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
ctiDBServerIsNotInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8003)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
ctiDBServerIsInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8004)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
ctiDBSpaceIsFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8005)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
ctiDBSpaceIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8006)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
ctiDBLogSpaceIsFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8007)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
ctiDBLogSpaceIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8008)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
ctiConnectionToDBIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8009)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
ctiFailedConnectToDB = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8010)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
ctiMissingLookUpTable = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8011)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapSQLTableName"))
ctiFailedToInsertCTIEvent = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8012)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
ctiDBRetentionFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8013)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
ctiInvalidMessageReceived = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8014)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
systemTools = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 7))
recordingsDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1))
rdName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdName.setStatus('mandatory')
rdStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdStatus.setStatus('mandatory')
rdVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdVersion.setStatus('mandatory')
rdServerName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdServerName.setStatus('mandatory')
rdServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdServerAddress.setStatus('mandatory')
rdCLSConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 6), )
if mibBuilder.loadTexts: rdCLSConnectionTable.setStatus('mandatory')
rdCLSConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 6, 1), ).setIndexNames((0, "Nice-MIB-II", "rdCLSConnectionTableIndex"))
if mibBuilder.loadTexts: rdCLSConnectionEntry.setStatus('mandatory')
rdCLSID = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSID.setStatus('mandatory')
rdCLSIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSIpAddress.setStatus('mandatory')
rdCLSConnectionTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSConnectionTableIndex.setStatus('mandatory')
rdLoggerConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 7), )
if mibBuilder.loadTexts: rdLoggerConnectionTable.setStatus('mandatory')
rdLoggerConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 7, 1), ).setIndexNames((0, "Nice-MIB-II", "rdLoggerConnectionTableIndex"))
if mibBuilder.loadTexts: rdLoggerConnectionEntry.setStatus('mandatory')
rdLoggerID = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerID.setStatus('mandatory')
rdLoggerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerIpAddress.setStatus('mandatory')
rdLoggerSpareloggerID = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerSpareloggerID.setStatus('mandatory')
rdLoggerConnectionTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerConnectionTableIndex.setStatus('mandatory')
rdTasksTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8), )
if mibBuilder.loadTexts: rdTasksTable.setStatus('mandatory')
rdTasksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1), ).setIndexNames((0, "Nice-MIB-II", "rdTasksTableIndex"))
if mibBuilder.loadTexts: rdTasksEntry.setStatus('mandatory')
rdTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 1), RdTaskType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskType.setStatus('mandatory')
rdTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskName.setStatus('mandatory')
rdTaskDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskDescription.setStatus('mandatory')
rdTaskCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 4), HostLocalTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskCreationTime.setStatus('mandatory')
rdTaskStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 5), HostLocalTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskStartTime.setStatus('mandatory')
rdTaskQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskQuery.setStatus('mandatory')
rdTaskExecElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskExecElements.setStatus('mandatory')
rdTaskExecFailElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskExecFailElements.setStatus('mandatory')
rdTaskCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 9), TaskState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskCurrentState.setStatus('mandatory')
rdTaskLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskLastError.setStatus('mandatory')
rdTasksTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTasksTableIndex.setStatus('mandatory')
rdCLSPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9), )
if mibBuilder.loadTexts: rdCLSPendingErrorsTable.setStatus('mandatory')
rdCLSPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9, 1), ).setIndexNames((0, "Nice-MIB-II", "rdCLSPendingErrorsTableIndex"))
if mibBuilder.loadTexts: rdCLSPendingErrorsEntry.setStatus('mandatory')
rdCLSErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9, 1, 1), RdErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSErrorType.setStatus('mandatory')
rdCLSErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSErrorReflectedStatus.setStatus('mandatory')
rdCLSExtendedErrorinformation = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSExtendedErrorinformation.setStatus('mandatory')
rdCLSErrorCLSTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSErrorCLSTableIndex.setStatus('mandatory')
rdCLSPendingErrorsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSPendingErrorsTableIndex.setStatus('mandatory')
rdLoggerPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10), )
if mibBuilder.loadTexts: rdLoggerPendingErrorsTable.setStatus('mandatory')
rdLoggerPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10, 1), ).setIndexNames((0, "Nice-MIB-II", "rdLoggerPendingErrorsTableIndex"))
if mibBuilder.loadTexts: rdLoggerPendingErrorsEntry.setStatus('mandatory')
rdLoggerErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10, 1, 1), RdErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerErrorType.setStatus('mandatory')
rdLoggerErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerErrorReflectedStatus.setStatus('mandatory')
rdLoggerExtendedErrorinformation = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerExtendedErrorinformation.setStatus('mandatory')
rdLoggerErrorLoggerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerErrorLoggerTableIndex.setStatus('mandatory')
rdLoggerPendingErrorsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerPendingErrorsTableIndex.setStatus('mandatory')
rdExceptionWhileProcessing = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8000)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"))
rdApplicationFailedToInitialize = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8001)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"))
rdApplicationStartUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"))
rdKeepAliveHeartBeatFail = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8003)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"))
rdConnectionToCLSIsActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8004)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdCLSID"), ("Nice-MIB-II", "rdCLSIpAddress"))
rdConnectionToCLSIsNotActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8005)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdCLSID"), ("Nice-MIB-II", "rdCLSIpAddress"))
rdConnectionToCLSLost = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8006)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdCLSID"), ("Nice-MIB-II", "rdCLSIpAddress"))
rdConnectionToLoggerIsActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8007)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdLoggerID"), ("Nice-MIB-II", "rdLoggerIpAddress"))
rdConnectionToLoggerIsNotActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8008)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdLoggerID"), ("Nice-MIB-II", "rdLoggerIpAddress"))
rdConnectionToLoggerLost = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8009)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdLoggerID"), ("Nice-MIB-II", "rdLoggerIpAddress"))
rdTaskStarted = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8010)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdTaskName"), ("Nice-MIB-II", "rdTaskType"))
rdTaskCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8011)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdTaskName"), ("Nice-MIB-II", "rdTaskType"), ("Nice-MIB-II", "rdTaskCurrentState"), ("Nice-MIB-II", "rdTaskExecElements"), ("Nice-MIB-II", "rdTaskExecFailElements"), ("Nice-MIB-II", "rdTaskLastError"))
rdMatchingSessionFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8012)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdTaskName"), ("Nice-MIB-II", "trapCLSId"), ("Nice-MIB-II", "trapLoggerId"), ("Nice-MIB-II", "trapRecordingChannel"), ("Nice-MIB-II", "trapRecordingStartTime"), ("Nice-MIB-II", "trapRecordingStopTime"))
rdMatchingPerdiodFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8013)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdTaskName"), ("Nice-MIB-II", "trapCLSId"), ("Nice-MIB-II", "trapLoggerId"), ("Nice-MIB-II", "trapRecordingChannel"), ("Nice-MIB-II", "trapRecordingStartTime"), ("Nice-MIB-II", "trapRecordingStopTime"))
rdCLSGeneralError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8014)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdCLSID"), ("Nice-MIB-II", "rdCLSIpAddress"))
databaseUtilities = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2))
mibBuilder.exportSymbols("Nice-MIB-II", vlNPlus1ROBMalfunction=vlNPlus1ROBMalfunction, vlNatiChannelError=vlNatiChannelError, clsDispatcherPendingErrorsTable=clsDispatcherPendingErrorsTable, voiceLoggerName=voiceLoggerName, mmlConsistentDiskWriteFailure=mmlConsistentDiskWriteFailure, vlDongleDeviceNotSupported=vlDongleDeviceNotSupported, vlUdaMatrixInitFailed=vlUdaMatrixInitFailed, vlDongleInitFailed_network=vlDongleInitFailed_network, vlIsac2RightClockError=vlIsac2RightClockError, clsDispatcherErrorType=clsDispatcherErrorType, BackupConfig=BackupConfig, vlAli4CpldProblem=vlAli4CpldProblem, backupInstanceName=backupInstanceName, vlApaDspFirmwareLoadFailed=vlApaDspFirmwareLoadFailed, vlEtai2InitBoardFailed=vlEtai2InitBoardFailed, clsSchedulerServer=clsSchedulerServer, backupPendingErrorsEntry=backupPendingErrorsEntry, rdTaskCurrentState=rdTaskCurrentState, vlAdif3InitFailed_HW=vlAdif3InitFailed_HW, mmlDataBaseConsistencyMismatch=mmlDataBaseConsistencyMismatch, vlNPlus1ROBPowerFailure=vlNPlus1ROBPowerFailure, clsDBServerIsDown=clsDBServerIsDown, vlAdif3InitFailed_Dsp=vlAdif3InitFailed_Dsp, voiceLoggerBackup=voiceLoggerBackup, rdTaskType=rdTaskType, rdMatchingSessionFailed=rdMatchingSessionFailed, vlAdifDspCodecError=vlAdifDspCodecError, vlNatiInitBoardError=vlNatiInitBoardError, trapDiskDrive=trapDiskDrive, callServerPendingErrorsEntry=callServerPendingErrorsEntry, driverIsDown=driverIsDown, appsRuleEngineRuleGeneratorIdle=appsRuleEngineRuleGeneratorIdle, clsCallServerTableIsFull=clsCallServerTableIsFull, applicationsTableIndex=applicationsTableIndex, clsFailureConnectionToDB=clsFailureConnectionToDB, vlDeviceNotResponding=vlDeviceNotResponding, driverIdInDriverModulesErrors=driverIdInDriverModulesErrors, appsAdminDataBaseConnectionIsDown=appsAdminDataBaseConnectionIsDown, vlBsvrOverwriteUsageExceeded=vlBsvrOverwriteUsageExceeded, BackupInstanceType=BackupInstanceType, dbRuleBackupFailed=dbRuleBackupFailed, driversTable=driversTable, dbAuditDbSpaceIsLow=dbAuditDbSpaceIsLow, vlAutoDeleteNoKeptSpace=vlAutoDeleteNoKeptSpace, vlEtaiMatrixSwitchError=vlEtaiMatrixSwitchError, trapLoggerIdInChain=trapLoggerIdInChain, trapEventProviderId=trapEventProviderId, driversPendingErrorsEntry=driversPendingErrorsEntry, mmlLoggerIsShuttingDown=mmlLoggerIsShuttingDown, loggingErrorInstanceIndex=loggingErrorInstanceIndex, ctiDBServerIsInitializedProperly=ctiDBServerIsInitializedProperly, vlBsvrAutoArchiveSuspended_Erase=vlBsvrAutoArchiveSuspended_Erase, vlIsac2TestToneProblem=vlIsac2TestToneProblem, driverModulesEntry=driverModulesEntry, vlIsdnLogicConnectError=vlIsdnLogicConnectError, clsRecordingOnDemandIsNotEnabled=clsRecordingOnDemandIsNotEnabled, appsCLSConnectionIsUp=appsCLSConnectionIsUp, appsCLSConnectionIsDown=appsCLSConnectionIsDown, vlAdifAlarmIndicationSignal=vlAdifAlarmIndicationSignal, rcmErrorIndex=rcmErrorIndex, applicationsAgentTrapsRepeatInterval=applicationsAgentTrapsRepeatInterval, mmlAbnormalRecordTermination=mmlAbnormalRecordTermination, mmlLoggerIsReady=mmlLoggerIsReady, mmlDataSystemPersistentMismatch=mmlDataSystemPersistentMismatch, backupInstanceStatus=backupInstanceStatus, ctiDBServerAgentIsRepeatingTraps=ctiDBServerAgentIsRepeatingTraps, trapActionExecuterId=trapActionExecuterId, clsRecordIsNotInsertedToDBTheRecordIsLost=clsRecordIsNotInsertedToDBTheRecordIsLost, driverConnectionToSwitchIsDown=driverConnectionToSwitchIsDown, backupErrorType=backupErrorType, appsRuleEngineActionExecuterActive=appsRuleEngineActionExecuterActive, OsDiskFailureType=OsDiskFailureType, vlAdifDspMPMLQError=vlAdifDspMPMLQError, trapBoardType=trapBoardType, vlAdifInternalBoardError=vlAdifInternalBoardError, mmlResourceAllocationFailure=mmlResourceAllocationFailure, trapDspNumber=trapDspNumber, mmlSnmpAgentConnectedToLogger=mmlSnmpAgentConnectedToLogger, vlIsdnDspCommFailed=vlIsdnDspCommFailed, vlAdifDspIllegalInstruction=vlAdifDspIllegalInstruction, clsDispatchIsUp=clsDispatchIsUp, voiceLoggerCapture=voiceLoggerCapture, rdStatus=rdStatus, vlIsacRightClockError=vlIsacRightClockError, BackupErrorBSRVErrorCode=BackupErrorBSRVErrorCode, trapLoggerId=trapLoggerId, mmlFailToInitializeMemoryManager=mmlFailToInitializeMemoryManager, trapCLSId=trapCLSId, ctiDBServerPendingErrorsEntry=ctiDBServerPendingErrorsEntry, vlKernerHWDriverInitFailed=vlKernerHWDriverInitFailed, clsSchedulerServerIsInitializedProperly=clsSchedulerServerIsInitializedProperly, vlApaCommBoardDspError=vlApaCommBoardDspError, vlNtcmLoopError=vlNtcmLoopError, dbCallsBackupFinished=dbCallsBackupFinished, vlDongleInitFailed_memory=vlDongleInitFailed_memory, rdLoggerConnectionEntry=rdLoggerConnectionEntry, dbAuditDbFull=dbAuditDbFull, callServerErrorIndex=callServerErrorIndex, appsRuleEngineRuleGeneratorFailed=appsRuleEngineRuleGeneratorFailed, ctiFailedToInsertCTIEvent=ctiFailedToInsertCTIEvent, vlDongleNotInitialized=vlDongleNotInitialized, vlAli4MatrixInitProblem=vlAli4MatrixInitProblem, CaptureInstanceType=CaptureInstanceType, dbServerName=dbServerName, vlLoggerNotResponding=vlLoggerNotResponding, rdConnectionToLoggerLost=rdConnectionToLoggerLost, rdLoggerErrorType=rdLoggerErrorType, clsRcmIsDown=clsRcmIsDown, vlTdaMatrizSwitchError=vlTdaMatrizSwitchError, voiceLoggerSnmpAgentConfig=voiceLoggerSnmpAgentConfig, driverNumberOfSegments=driverNumberOfSegments, TaskState=TaskState, ClsErrorType=ClsErrorType, appsUserAdminHostConnectionIsDown=appsUserAdminHostConnectionIsDown, RdErrorType=RdErrorType, trapNumOfChannels=trapNumOfChannels, dbAdminDbSpaceIsLow=dbAdminDbSpaceIsLow, systemTools=systemTools, appsRuleEngineEventProviderFailed=appsRuleEngineEventProviderFailed, vlCheckSumInvalid=vlCheckSumInvalid, driverErrorType=driverErrorType, driverModuleErrorReflectedStatus=driverModuleErrorReflectedStatus, vlBsvrDeviceShouldBeCleaned=vlBsvrDeviceShouldBeCleaned, vlBsvrRetrievalFailed=vlBsvrRetrievalFailed, mmlMemoryManagerOverflow=mmlMemoryManagerOverflow, vlNati2InitBoardProblem=vlNati2InitBoardProblem, vlEtai2InitFailed_Dsp=vlEtai2InitFailed_Dsp, dbMsdbBackupFinished=dbMsdbBackupFinished, backupName=backupName, appsSCConnectionIsDown=appsSCConnectionIsDown, vlApaDspRuntimeError=vlApaDspRuntimeError, driverConnectionToCapiIsDown=driverConnectionToCapiIsDown, ctiDBLogSpaceIsOK=ctiDBLogSpaceIsOK, dbCallsDbFull=dbCallsDbFull, rdTaskExecFailElements=rdTaskExecFailElements, captureErrorType=captureErrorType, trapSeverity=trapSeverity, vlBsvrDeviceOperationFailed=vlBsvrDeviceOperationFailed, rdTaskName=rdTaskName, appsCTIDBConnectionIsUp=appsCTIDBConnectionIsUp, ctiDBServerAgentTrapsRepeatInterval=ctiDBServerAgentTrapsRepeatInterval, driverConfigurationFileDataIsMissing=driverConfigurationFileDataIsMissing, driverStatus=driverStatus, storageCenter=storageCenter, backupErrorInstanceIndex=backupErrorInstanceIndex, trapMateTimeslot=trapMateTimeslot, trapBackupConfig=trapBackupConfig, dbAdminBackupFinished=dbAdminBackupFinished, databaseUtilities=databaseUtilities, vlDongleAlreadyInitialized=vlDongleAlreadyInitialized, vlAdifNoSignal=vlAdifNoSignal, CaptureErrorType=CaptureErrorType, BackupErrorType=BackupErrorType, trapFileName=trapFileName, capturePendingErrorsEntry=capturePendingErrorsEntry, vlNPlus1SpareIsBackingUp=vlNPlus1SpareIsBackingUp, loggingInstanceTable=loggingInstanceTable, rdCLSConnectionEntry=rdCLSConnectionEntry, vlAli4ExtSqlshDisconnected=vlAli4ExtSqlshDisconnected, RecordedMediaType=RecordedMediaType, trapLineProblem=trapLineProblem, mmlAllConnectionResourcesInUse=mmlAllConnectionResourcesInUse, mmlFailToInitializeStorageDevice=mmlFailToInitializeStorageDevice, clsProblematicClockDifferencesWithLogger=clsProblematicClockDifferencesWithLogger, mmlStorageSystemName=mmlStorageSystemName, mmlTableAccessFailure=mmlTableAccessFailure, clsCLSModuleRestartOK=clsCLSModuleRestartOK, driversModulePendingErrorsTable=driversModulePendingErrorsTable, LoggerInitializationStatus=LoggerInitializationStatus, driversPendingErrorsTable=driversPendingErrorsTable, vlIsacCriticalSystemError=vlIsacCriticalSystemError, captureErrorInstanceIndex=captureErrorInstanceIndex, captureInstanceEntry=captureInstanceEntry, driverConfigurationFileIsMissing=driverConfigurationFileIsMissing, mmlDataSystemInvalidConfiguration=mmlDataSystemInvalidConfiguration, vlDliDriverInitFailed=vlDliDriverInitFailed, ctiDBServerIsUp=ctiDBServerIsUp, mmlStorageSystemInvalidConfiguration=mmlStorageSystemInvalidConfiguration, mmlConnectionCanNotBeEstablished=mmlConnectionCanNotBeEstablished, vlEtaiDspError=vlEtaiDspError, vlBsvrRecoveryFailed=vlBsvrRecoveryFailed, clsNoClockDifferencesWithLogger=clsNoClockDifferencesWithLogger, trapVLModuleStatus=trapVLModuleStatus, rdApplicationStartUp=rdApplicationStartUp, driverName=driverName, ctiMissingLookUpTable=ctiMissingLookUpTable, trapDiskUsage=trapDiskUsage, callServerErrorType=callServerErrorType, vlAdifDspIllegalCommand=vlAdifDspIllegalCommand, vlAdifNoInterrupts=vlAdifNoInterrupts, mmlFailToInitializeDataSystem=mmlFailToInitializeDataSystem, dbServerPendingErrorsTable=dbServerPendingErrorsTable, driverNumberOfDevicesMonitored=driverNumberOfDevicesMonitored, ApplicationErrorType=ApplicationErrorType, vlAdifDspNoSynch=vlAdifDspNoSynch, appsInteractionDBConnectionIsDown=appsInteractionDBConnectionIsDown, trapBackupDeviceState=trapBackupDeviceState, vlBsvrAutoArchiveSuspended_Retrieval=vlBsvrAutoArchiveSuspended_Retrieval, vlBsvrNoMediaRecognized=vlBsvrNoMediaRecognized, clsNPLUS1LoggersAreOK=clsNPLUS1LoggersAreOK, applicationsEntry=applicationsEntry, vlNati2McvpDspProblem=vlNati2McvpDspProblem, clsConnectionToDBIsOK=clsConnectionToDBIsOK, ctiDBServerDBErrorCode=ctiDBServerDBErrorCode, backupInstanceType=backupInstanceType, ctiDBServerIsDown=ctiDBServerIsDown, clsSchedulerServerIsNotInitializedProperly=clsSchedulerServerIsNotInitializedProperly, voiceLoggerAgentVersion=voiceLoggerAgentVersion, rdExceptionWhileProcessing=rdExceptionWhileProcessing, driverCapiOK=driverCapiOK, rdTasksTable=rdTasksTable, appsSCConnectionIsUp=appsSCConnectionIsUp, RdTaskType=RdTaskType, vlBtai2MatrixInitError=vlBtai2MatrixInitError, rdLoggerConnectionTableIndex=rdLoggerConnectionTableIndex, rdConnectionToCLSIsActive=rdConnectionToCLSIsActive, BoardType=BoardType, schedulerServerErrorIndex=schedulerServerErrorIndex, rdMatchingPerdiodFailed=rdMatchingPerdiodFailed, vlIsdnIniterror=vlIsdnIniterror, clsDispatcherName=clsDispatcherName, multiMediaLogger=multiMediaLogger, clsDispatchIsDown=clsDispatchIsDown, callServerPendingErrorsTable=callServerPendingErrorsTable, rdTaskCreationTime=rdTaskCreationTime, driversModulePendingErrorsEntry=driversModulePendingErrorsEntry, vlAutoDeleteNofreeSpace=vlAutoDeleteNofreeSpace, vlLafConfigError=vlLafConfigError, trapLoggerInitializationStatus=trapLoggerInitializationStatus, appsRuleEngineRuleGeneratorSucceeded=appsRuleEngineRuleGeneratorSucceeded, vlAdifLossOfSynch=vlAdifLossOfSynch, ctiDBServerErrorType=ctiDBServerErrorType, appsServerIsUp=appsServerIsUp, mmlConnectionToLoggerNotEstablished=mmlConnectionToLoggerNotEstablished, clsALLCLSModulesInitFailed=clsALLCLSModulesInitFailed, trapSCId=trapSCId, trapsInfo=trapsInfo, mmlAutoDeletion=mmlAutoDeletion, vlDongleNoDevice=vlDongleNoDevice, trapDaughterBoardNumber=trapDaughterBoardNumber, driverCapiError=driverCapiError, ctiDBServerAgentVersion=ctiDBServerAgentVersion, driversSnmpAgentConfig=driversSnmpAgentConfig, ctiDBServerName=ctiDBServerName, vlIsacTestToneError=vlIsacTestToneError, schedulerServerName=schedulerServerName, clsAgentVersion=clsAgentVersion, vlTdaDspError=vlTdaDspError, mmlStorageSystemDiskUsage=mmlStorageSystemDiskUsage, driverModuleId=driverModuleId, vlBtai2FpgaError=vlBtai2FpgaError, vlLafPowerProblem=vlLafPowerProblem, vlBsvrAutoArchiveSuspend=vlBsvrAutoArchiveSuspend, DriverErrorType=DriverErrorType)
mibBuilder.exportSymbols("Nice-MIB-II", trapLineErrorType=trapLineErrorType, clsAgentConfig=clsAgentConfig, vlNati2LineProblem=vlNati2LineProblem, vlAli4InitBoardProblem=vlAli4InitBoardProblem, vlBsvrArchivingFailed=vlBsvrArchivingFailed, rdCLSID=rdCLSID, vlLafInvalidTime=vlLafInvalidTime, trapMateLogicalTrunk=trapMateLogicalTrunk, captureStatus=captureStatus, loggingInstanceEntry=loggingInstanceEntry, clsDBServerIsInitializedProperly=clsDBServerIsInitializedProperly, trapVLModuleName=trapVLModuleName, rdVersion=rdVersion, applicationsAgentVersion=applicationsAgentVersion, applicationsPendingErrorsTable=applicationsPendingErrorsTable, vlAutoDeleteUnder3PercSpace=vlAutoDeleteUnder3PercSpace, vlIsac2BoardProblem=vlIsac2BoardProblem, trapLogicalStreamNumber=trapLogicalStreamNumber, appsLoggerConnectionIsUp=appsLoggerConnectionIsUp, vlDbmInitPartitionFailed=vlDbmInitPartitionFailed, clsDBSpaceIsFull=clsDBSpaceIsFull, appsCADBConnectionIsUp=appsCADBConnectionIsUp, vlAdifRemoteAlarmIndication=vlAdifRemoteAlarmIndication, ctiDBServerStatus=ctiDBServerStatus, appsLoggerConnectionIsDown=appsLoggerConnectionIsDown, voiceLoggerAgentIsRepeatingTraps=voiceLoggerAgentIsRepeatingTraps, vlBsvrOverwMediaFailedrite=vlBsvrOverwMediaFailedrite, mmlAbnormalPlaybackTermination=mmlAbnormalPlaybackTermination, clsCLSModuleRestartFailed=clsCLSModuleRestartFailed, mmlStorageSystem=mmlStorageSystem, vlIsac2LeftClockError=vlIsac2LeftClockError, vlApaIOError=vlApaIOError, dbServerPendingErrorsEntry=dbServerPendingErrorsEntry, captureInstanceType=captureInstanceType, vlChannelsHighStatAlarm=vlChannelsHighStatAlarm, mmlInvalidConfiguration=mmlInvalidConfiguration, rdLoggerIpAddress=rdLoggerIpAddress, trapRegistryKey=trapRegistryKey, applicationErrorType=applicationErrorType, ctiDBRetentionFailure=ctiDBRetentionFailure, LoggingErrorType=LoggingErrorType, mmlDataSystemStatus=mmlDataSystemStatus, rdLoggerID=rdLoggerID, trapBoardOrLogicalTrunk=trapBoardOrLogicalTrunk, captureName=captureName, captureInstanceName=captureInstanceName, vlChannelsSomeNotRecording=vlChannelsSomeNotRecording, vlIsdnBoardSelfTestFailed=vlIsdnBoardSelfTestFailed, appsRuleEngineActionExecuterSucceeded=appsRuleEngineActionExecuterSucceeded, vlVoipDriverInitFailed=vlVoipDriverInitFailed, loggingErrorReflectedStatus=loggingErrorReflectedStatus, driverModuleErrorType=driverModuleErrorType, loggingErrorIndex=loggingErrorIndex, mmlDeletionCapacityNotReached=mmlDeletionCapacityNotReached, vlIsacRightFameSynchError=vlIsacRightFameSynchError, dbReindexJobFailed=dbReindexJobFailed, driverRegistryError=driverRegistryError, loggingInstanceIndex=loggingInstanceIndex, driverRegistryWarning=driverRegistryWarning, trapSQLTableName=trapSQLTableName, mmlAutoDeletionPersistentMismatch=mmlAutoDeletionPersistentMismatch, mmlStartingAutoDeletionJob=mmlStartingAutoDeletionJob, dbCallsBackupFailed=dbCallsBackupFailed, trapLineNumber=trapLineNumber, vlNPlus1ManualSwitch=vlNPlus1ManualSwitch, vlDongleInitFailed_function=vlDongleInitFailed_function, rdLoggerPendingErrorsTable=rdLoggerPendingErrorsTable, schedulerServerErrorType=schedulerServerErrorType, rcmPendingErrorsTable=rcmPendingErrorsTable, applicationsAgentIsRepeatingTraps=applicationsAgentIsRepeatingTraps, appsNIFDBConnectionIsUp=appsNIFDBConnectionIsUp, vlEtaiLineError=vlEtaiLineError, voiceLoggerStatus=voiceLoggerStatus, clsOSDiskOK=clsOSDiskOK, ctiDBServerErrorReflectedStatus=ctiDBServerErrorReflectedStatus, vlDliBoardCommError=vlDliBoardCommError, vlNtcmInitError=vlNtcmInitError, clsCallServer=clsCallServer, loggingInstanceStatus=loggingInstanceStatus, mmlAutoDeletionInvalidConfiguration=mmlAutoDeletionInvalidConfiguration, rcmStatus=rcmStatus, driverCTIEngineWarning=driverCTIEngineWarning, applicationsServer=applicationsServer, dbServerErrorIndex=dbServerErrorIndex, vlTdaGeneralError=vlTdaGeneralError, vlBsvrConnectRTSFailed=vlBsvrConnectRTSFailed, clsDispatcherStatus=clsDispatcherStatus, rdLoggerSpareloggerID=rdLoggerSpareloggerID, appsRuleMngrDataBaseConnectionIsUp=appsRuleMngrDataBaseConnectionIsUp, trapLoggerInitialization=trapLoggerInitialization, appsRuleEngineRuleGeneratorActive=appsRuleEngineRuleGeneratorActive, mmlDiskUsage=mmlDiskUsage, appsSystemAdminHostConnectionIsDown=appsSystemAdminHostConnectionIsDown, mmlCriticalDataSystemError=mmlCriticalDataSystemError, vlNtcmMatrixSwitchError=vlNtcmMatrixSwitchError, ctiDBSpaceIsFull=ctiDBSpaceIsFull, rdLoggerPendingErrorsEntry=rdLoggerPendingErrorsEntry, trapHostTime=trapHostTime, appsRuleEngineActionExecuterFailed=appsRuleEngineActionExecuterFailed, vlAutoDeleteLowKeptSpace=vlAutoDeleteLowKeptSpace, callServerErrorReflectedStatus=callServerErrorReflectedStatus, backupErrorIndex=backupErrorIndex, appsServerIsDown=appsServerIsDown, appsNIFDBConnectionIsDown=appsNIFDBConnectionIsDown, vlBtai2InitFailed_Dsp=vlBtai2InitFailed_Dsp, dbAdminBackupFailed=dbAdminBackupFailed, clsDBServerIsUp=clsDBServerIsUp, dbRuleDBFull=dbRuleDBFull, trapRecordingChannel=trapRecordingChannel, vlAdifFramingError=vlAdifFramingError, rdTasksEntry=rdTasksEntry, clsResourcesAreAvailable=clsResourcesAreAvailable, drivers=drivers, voiceLoggerTrapsRepeatInterval=voiceLoggerTrapsRepeatInterval, rcmPendingErrorsEntry=rcmPendingErrorsEntry, backupStatus=backupStatus, vlAdifDspIllegalParameter=vlAdifDspIllegalParameter, rdCLSConnectionTableIndex=rdCLSConnectionTableIndex, captureErrorCode=captureErrorCode, rdLoggerConnectionTable=rdLoggerConnectionTable, trapRecordingStartTime=trapRecordingStartTime, mmlDataSystem=mmlDataSystem, vlAdifDspSSIRXError=vlAdifDspSSIRXError, callServerStatus=callServerStatus, mmlDiskIOFailure=mmlDiskIOFailure, driverErrorReflectedStatus=driverErrorReflectedStatus, clsDispatcherPendingErrorsEntry=clsDispatcherPendingErrorsEntry, applicationsPendingErrorsEntry=applicationsPendingErrorsEntry, trapRecordingStopTime=trapRecordingStopTime, driverMonitorEnd=driverMonitorEnd, driverModuleErrorIndex=driverModuleErrorIndex, vlLmopRedunPowerProblem=vlLmopRedunPowerProblem, mmlName=mmlName, schedulerServerPendingErrorsEntry=schedulerServerPendingErrorsEntry, ctiEventsDbServer=ctiEventsDbServer, vlIsacBoardError=vlIsacBoardError, dbServerDBErrorCode=dbServerDBErrorCode, captureInstanceStatus=captureInstanceStatus, vlLafinitFailed=vlLafinitFailed, trapBoardNumber=trapBoardNumber, vlNatiDspA3mError=vlNatiDspA3mError, loggingErrorCode=loggingErrorCode, captureErrorReflectedStatus=captureErrorReflectedStatus, LineErrorType=LineErrorType, dbMsdbBackupFailed=dbMsdbBackupFailed, mmlAgentIsRepeatingTraps=mmlAgentIsRepeatingTraps, rcmErrorReflectedStatus=rcmErrorReflectedStatus, vlLmopRedunDiskMirrorProblem=vlLmopRedunDiskMirrorProblem, clsDispatcherErrorReflectedStatus=clsDispatcherErrorReflectedStatus, loggingInstanceType=loggingInstanceType, rdLoggerPendingErrorsTableIndex=rdLoggerPendingErrorsTableIndex, trapDBErrorCode=trapDBErrorCode, vlAdifDspStackOverflow=vlAdifDspStackOverflow, vlAli4DspInitProblem=vlAli4DspInitProblem, dbServerStatus=dbServerStatus, captureInstanceTable=captureInstanceTable, vlUdaInitBoardFailed=vlUdaInitBoardFailed, driverSignificantConfigurationFileDataIsMissing=driverSignificantConfigurationFileDataIsMissing, driverModuleStatus=driverModuleStatus, clsAgentTrapsRepeatInterval=clsAgentTrapsRepeatInterval, driverCTIEngineOK=driverCTIEngineOK, vlChannelsLowStatAlarm=vlChannelsLowStatAlarm, vlLafMirrorFault=vlLafMirrorFault, vlBsvrMediaAccessDenied=vlBsvrMediaAccessDenied, dbInserterMissingCalls=dbInserterMissingCalls, rdTaskQuery=rdTaskQuery, vlNPlus1SpareNeedLongUpdate=vlNPlus1SpareNeedLongUpdate, rdCLSExtendedErrorinformation=rdCLSExtendedErrorinformation, nice=nice, vlBsrvDvdArchiveCompleted=vlBsrvDvdArchiveCompleted, applicationsNumberLoggedInUsers=applicationsNumberLoggedInUsers, driverModulesTable=driverModulesTable, rdConnectionToLoggerIsNotActive=rdConnectionToLoggerIsNotActive, driverErrorIndex=driverErrorIndex, loggingPendingErrorsEntry=loggingPendingErrorsEntry, vlIsacSelectedClockError=vlIsacSelectedClockError, rdKeepAliveHeartBeatFail=rdKeepAliveHeartBeatFail, vlAdif3ExternalClockSynchError=vlAdif3ExternalClockSynchError, clsCommunicationProblemWithLogger=clsCommunicationProblemWithLogger, trapChannelOrTimeslot=trapChannelOrTimeslot, driverInternalEngineError=driverInternalEngineError, vlBsvrNoMediaDataFound=vlBsvrNoMediaDataFound, driverNumberOfCompound=driverNumberOfCompound, dbRuleBackupFinished=dbRuleBackupFinished, YesNo=YesNo, dbAuditBackupFinished=dbAuditBackupFinished, driversAgentIsRepeatingTraps=driversAgentIsRepeatingTraps, driverIsUp=driverIsUp, voiceLogger=voiceLogger, trapChannelNumber=trapChannelNumber, vlDbmConsistencyFailed=vlDbmConsistencyFailed, ctiDBLogSpaceIsFull=ctiDBLogSpaceIsFull, vlEtai2MatrixInitError=vlEtai2MatrixInitError, driverIdInDriversErrors=driverIdInDriversErrors, ctiDBSpaceIsOK=ctiDBSpaceIsOK, SeverityType=SeverityType, schedulerServerStatus=schedulerServerStatus, rdTaskDescription=rdTaskDescription, vlBsvrAppendFailed_version=vlBsvrAppendFailed_version, driverCTIEngineError=driverCTIEngineError, rcmErrorLoggerId=rcmErrorLoggerId, clsDBSpaceIsOK=clsDBSpaceIsOK, driverModuleName=driverModuleName, rdCLSIpAddress=rdCLSIpAddress, applicationsSnmpAgentConfig=applicationsSnmpAgentConfig, trapDeviceId=trapDeviceId, applicationErrorReflectedStatus=applicationErrorReflectedStatus, rdCLSPendingErrorsEntry=rdCLSPendingErrorsEntry, ctiDBServerPendingErrorsTable=ctiDBServerPendingErrorsTable, vlBsvrNoMediaRetrieval=vlBsvrNoMediaRetrieval, BackupDeviceState=BackupDeviceState, vlBsvrMediaError=vlBsvrMediaError, vlBsvrCannotAppend=vlBsvrCannotAppend, dbMasterBackupFailed=dbMasterBackupFailed, mmlAgentTrapsRepeatInterval=mmlAgentTrapsRepeatInterval, ctiDBServerSnmpAgentConfig=ctiDBServerSnmpAgentConfig, logger=logger, clsCallServerIsUp=clsCallServerIsUp, mmlConsistentDiskReadFailure=mmlConsistentDiskReadFailure, vlNatiMatrixSwitchError=vlNatiMatrixSwitchError, ctiDBServerErrorIndex=ctiDBServerErrorIndex, dbAuditAutoDeletionFailed=dbAuditAutoDeletionFailed, rdCLSPendingErrorsTable=rdCLSPendingErrorsTable, rdTaskStarted=rdTaskStarted, mmlStorageSystemStatus=mmlStorageSystemStatus, vlAli4LineProblem=vlAli4LineProblem, rdLoggerErrorLoggerTableIndex=rdLoggerErrorLoggerTableIndex, ctiConnectionToDBIsOK=ctiConnectionToDBIsOK, driversAgentVersion=driversAgentVersion, mmlConnectionTimeoutExceeded=mmlConnectionTimeoutExceeded, captureInstanceNumberInType=captureInstanceNumberInType, vlDongleInitFailed_HLVDD=vlDongleInitFailed_HLVDD, captureInstanceIndex=captureInstanceIndex, appsUserAdminHostConnectionIsUp=appsUserAdminHostConnectionIsUp, mmlStorageSystemPersistentMismatch=mmlStorageSystemPersistentMismatch, vlDongleConnectFailed=vlDongleConnectFailed, vlNati2MatrixInitProblem=vlNati2MatrixInitProblem, applicationsTable=applicationsTable, rdTaskStartTime=rdTaskStartTime, dbMasterBackupFinished=dbMasterBackupFinished, clsLoggerIsNotInitializedProperly=clsLoggerIsNotInitializedProperly, clsRecordingOnDemandIsEnabled=clsRecordingOnDemandIsEnabled, clsALLCLSModulesInitOK=clsALLCLSModulesInitOK, vlIsac2SystemCriticalError=vlIsac2SystemCriticalError, rdTaskExecElements=rdTaskExecElements, backupErrorReflectedStatus=backupErrorReflectedStatus, clsCallServerTableIsOK=clsCallServerTableIsOK, appsRuleMngrDataBaseConnectionIsDown=appsRuleMngrDataBaseConnectionIsDown, vlEtai2LineProblem=vlEtai2LineProblem, vlBsvrMediaWriteProtected=vlBsvrMediaWriteProtected, dbAdminDbFull=dbAdminDbFull, driverInternalEngineOK=driverInternalEngineOK, vlBsvrNoMediaManualArchive=vlBsvrNoMediaManualArchive, ctiDBServerIsNotInitializedProperly=ctiDBServerIsNotInitializedProperly)
mibBuilder.exportSymbols("Nice-MIB-II", vlAdif3InitFailed_timing=vlAdif3InitFailed_timing, rdCLSConnectionTable=rdCLSConnectionTable, clsProblemWithNPLUS1Loggers=clsProblemWithNPLUS1Loggers, clsDbServer=clsDbServer, rdConnectionToCLSLost=rdConnectionToCLSLost, vlLafFirmwareLoadError=vlLafFirmwareLoadError, rdCLSErrorReflectedStatus=rdCLSErrorReflectedStatus, clsCommunicationToLoggerIsOK=clsCommunicationToLoggerIsOK, rdCLSErrorCLSTableIndex=rdCLSErrorCLSTableIndex, clsRcmIsUp=clsRcmIsUp, trapDBId=trapDBId, rdServerAddress=rdServerAddress, clsSchedulerServerIsDown=clsSchedulerServerIsDown, loggingStatus=loggingStatus, ctiInvalidMessageReceived=ctiInvalidMessageReceived, vlIsacLeftFrameSynchError=vlIsacLeftFrameSynchError, clsCallServerIsDown=clsCallServerIsDown, driversEntry=driversEntry, callServerName=callServerName, backupInstanceTable=backupInstanceTable, schedulerServerPendingErrorsTable=schedulerServerPendingErrorsTable, mmlOutputChannelAllocationFailure=mmlOutputChannelAllocationFailure, vlUdaInitFailed_Dsp=vlUdaInitFailed_Dsp, niceMib_2=niceMib_2, loggingName=loggingName, clsOSDiskFailure=clsOSDiskFailure, mmlStatus=mmlStatus, clsLoggerIsInitializedProperly=clsLoggerIsInitializedProperly, vlIsac2RightFrameSynchError=vlIsac2RightFrameSynchError, dbReindexJobFinished=dbReindexJobFinished, mmlUnexpectedDisconnect=mmlUnexpectedDisconnect, vlEtaiInitBoardFailed=vlEtaiInitBoardFailed, trapRecordedMedia=trapRecordedMedia, vlChannelsLineError=vlChannelsLineError, dbAuditAutoDeletionFinished=dbAuditAutoDeletionFinished, rdConnectionToCLSIsNotActive=rdConnectionToCLSIsNotActive, rdCLSGeneralError=rdCLSGeneralError, trapFreeSpacePercentage=trapFreeSpacePercentage, dbServerErrorType=dbServerErrorType, backupErrorBSRVErrorCode=backupErrorBSRVErrorCode, clsDispatcher=clsDispatcher, LoggingInstanceType=LoggingInstanceType, driverConnectionToSwitchIsUp=driverConnectionToSwitchIsUp, mmlAllocationFailure=mmlAllocationFailure, vlLafLostSynch=vlLafLostSynch, applicationsErrorsTableApplicationIndex=applicationsErrorsTableApplicationIndex, backupPendingErrorsTable=backupPendingErrorsTable, applicationName=applicationName, dbAuditBackupFailed=dbAuditBackupFailed, CTIEventsDBServerErrorType=CTIEventsDBServerErrorType, mmlFinishedNormal=mmlFinishedNormal, HostLocalTime=HostLocalTime, rcmName=rcmName, dbServerErrorReflectedStatus=dbServerErrorReflectedStatus, loggingErrorType=loggingErrorType, schedulerServerErrorReflectedStatus=schedulerServerErrorReflectedStatus, vlBtai2LineError=vlBtai2LineError, vlIsdnBSError=vlIsdnBSError, vlDliChannelError=vlDliChannelError, captureErrorIndex=captureErrorIndex, clsDBServerIsNotInitializedProperly=clsDBServerIsNotInitializedProperly, vlDongleInitFailed_parameter=vlDongleInitFailed_parameter, mmlAgentConfig=mmlAgentConfig, appsCTIDBConnectionIsDown=appsCTIDBConnectionIsDown, trapClsTableType=trapClsTableType, vlIsacLeftClockError=vlIsacLeftClockError, appsInteractionDBConnectionIsUp=appsInteractionDBConnectionIsUp, loggingPendingErrorsTable=loggingPendingErrorsTable, clsDispatcherErrorIndex=clsDispatcherErrorIndex, appsAdminDataBaseConnectionIsUp=appsAdminDataBaseConnectionIsUp, driverIdInModulesTable=driverIdInModulesTable, ClsTableType=ClsTableType, vlApiQueryError=vlApiQueryError, rdServerName=rdServerName, rdCLSPendingErrorsTableIndex=rdCLSPendingErrorsTableIndex, rdConnectionToLoggerIsActive=rdConnectionToLoggerIsActive, rdName=rdName, driverId=driverId, rdCLSErrorType=rdCLSErrorType, backupInstanceEntry=backupInstanceEntry, vlIsac2LeftFrameSynchError=vlIsac2LeftFrameSynchError, vlBsrvBackupServerError=vlBsrvBackupServerError, clsNoAvailableResources=clsNoAvailableResources, mmlInputChannelAllocationFailure=mmlInputChannelAllocationFailure, vlLafDspCommError=vlLafDspCommError, clsRecordIsInsertedToDB=clsRecordIsInsertedToDB, mmlAgentVersion=mmlAgentVersion, clsAgentIsRepeatingTraps=clsAgentIsRepeatingTraps, mmlDiskIsFull=mmlDiskIsFull, clsRCMIsInitializedProperly=clsRCMIsInitializedProperly, vlDongleInitFailed_HLApi=vlDongleInitFailed_HLApi, trapKeptSpacePercentage=trapKeptSpacePercentage, appsRuleEngineEventProviderSucceeded=appsRuleEngineEventProviderSucceeded, rdTaskLastError=rdTaskLastError, RdConnStatus=RdConnStatus, vlBsvrAutoArchiveSuspended_Manual=vlBsvrAutoArchiveSuspended_Manual, appsRuleEngineEventProviderActive=appsRuleEngineEventProviderActive, mmlDataSystemName=mmlDataSystemName, appsRuleEngineEventProviderIdle=appsRuleEngineEventProviderIdle, rdApplicationFailedToInitialize=rdApplicationFailedToInitialize, driverConnectionToCapiIsUp=driverConnectionToCapiIsUp, capturePendingErrorsTable=capturePendingErrorsTable, mmlAutoDeletionStatus=mmlAutoDeletionStatus, appsRuleEngineActionExecuterIdle=appsRuleEngineActionExecuterIdle, clsCallServerLinkIsDown=clsCallServerLinkIsDown, mmlResourceAccessFailure=mmlResourceAccessFailure, vlBtai2InitBoardFailed=vlBtai2InitBoardFailed, rcmErrorType=rcmErrorType, vlDiskDriveProblem=vlDiskDriveProblem, rdLoggerExtendedErrorinformation=rdLoggerExtendedErrorinformation, dbCallsDbSpaceIsLow=dbCallsDbSpaceIsLow, appsSystemAdminHostConnectionIsUp=appsSystemAdminHostConnectionIsUp, mmlPersistentMismatch=mmlPersistentMismatch, mmlUnableToReplyDueToConnectionLoss=mmlUnableToReplyDueToConnectionLoss, rdTasksTableIndex=rdTasksTableIndex, vlNati2A3mDspInitProblem=vlNati2A3mDspInitProblem, rdTaskCompleted=rdTaskCompleted, clsRcm=clsRcm, applicationsErrorsTableErrorIndex=applicationsErrorsTableErrorIndex, moduleIdInModulesErrors=moduleIdInModulesErrors, backupInstanceNumber=backupInstanceNumber, vlAumGeneralInitFailure=vlAumGeneralInitFailure, trapRuleGeneratorId=trapRuleGeneratorId, dbRuleDBSpaceIsLow=dbRuleDBSpaceIsLow, appsLoggerIsNotAttachToACLS=appsLoggerIsNotAttachToACLS, driversAgentTrapsRepeatInterval=driversAgentTrapsRepeatInterval, clsRCMIsNotInitializedProperly=clsRCMIsNotInitializedProperly, mmlAutoDeletionName=mmlAutoDeletionName, loggingInstanceName=loggingInstanceName, recordingsDiagnostic=recordingsDiagnostic, vlApaInternalSelfTestFailed=vlApaInternalSelfTestFailed, clsSchedulerServerIsUp=clsSchedulerServerIsUp, clsCallServerLinkIsUp=clsCallServerLinkIsUp, vlIsdnLineError=vlIsdnLineError, vlAdif3InitFailed_ADPCM=vlAdif3InitFailed_ADPCM, ctiFailedConnectToDB=ctiFailedConnectToDB, dbReplicationFailed=dbReplicationFailed, rdLoggerErrorReflectedStatus=rdLoggerErrorReflectedStatus, loggingInstanceNumberInType=loggingInstanceNumberInType, applicationStatus=applicationStatus, voiceLoggerLogging=voiceLoggerLogging, appsCADBConnectionIsDown=appsCADBConnectionIsDown, trapDataLineNumber=trapDataLineNumber, vlNati2FpgaProblem=vlNati2FpgaProblem, vlDiskOpenPartitionFailed=vlDiskOpenPartitionFailed, cls=cls, vlLmopGeneralHWProblem=vlLmopGeneralHWProblem, backupInstanceRemoteNumber=backupInstanceRemoteNumber, trapOsDiskFailure=trapOsDiskFailure)
