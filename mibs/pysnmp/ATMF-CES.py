#
# PySNMP MIB module ATMF-CES (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ATMF-CES
# Produced by pysmi-0.3.4 at Mon Apr 29 17:15:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, Bits, iso, Integer32, TimeTicks, Counter64, ModuleIdentity, MibIdentifier, IpAddress, NotificationType, ObjectIdentity, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "iso", "Integer32", "TimeTicks", "Counter64", "ModuleIdentity", "MibIdentifier", "IpAddress", "NotificationType", "ObjectIdentity", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
atmfCES = ModuleIdentity((1, 3, 6, 1, 4, 1, 353, 5, 2, 2))
atmfCES.setRevisions(('1995-02-03 00:00',))
if mibBuilder.loadTexts: atmfCES.setLastUpdated('9611050000Z')
if mibBuilder.loadTexts: atmfCES.setOrganization('ATM Forum Circuit Emulation Working Group')
atmForum = MibIdentifier((1, 3, 6, 1, 4, 1, 353))
atmForumNetworkManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5))
atmfCESmib = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 2))
class VpiInteger(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4095)

class VciInteger(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class CESConnectionPort(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class AtmAddr(TextualConvention, OctetString):
    status = 'current'
    displayHint = '1x'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(20, 20), )
atmfCESObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1))
atmfCESConfTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1), )
if mibBuilder.loadTexts: atmfCESConfTable.setStatus('current')
atmfCESConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1), ).setIndexNames((0, "ATMF-CES", "atmfCESCbrIndex"))
if mibBuilder.loadTexts: atmfCESConfEntry.setStatus('current')
atmfCESCbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: atmfCESCbrIndex.setStatus('current')
atmfCESAtmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 2), CESConnectionPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESAtmIndex.setStatus('current')
atmfCESAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 3), VpiInteger()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESAtmVpi.setStatus('current')
atmfCESAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 4), VciInteger()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESAtmVci.setStatus('current')
atmfCESCbrService = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unstructured", 1), ("structured", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESCbrService.setStatus('current')
atmfCESCbrClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("synchronous", 1), ("srts", 2), ("adaptive", 3))).clone('synchronous')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESCbrClockMode.setStatus('current')
atmfCESCas = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("basic", 1), ("e1Cas", 2), ("ds1SfCas", 3), ("ds1EsfCas", 4), ("j2Cas", 5))).clone('basic')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESCas.setStatus('current')
atmfCESPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESPartialFill.setStatus('current')
atmfCESBufMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(128)).setUnits('10 usec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESBufMaxSize.setStatus('current')
atmfCESCdvRxT = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setUnits('10 usec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESCdvRxT.setStatus('current')
atmfCESCellLossIntegrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 65535)).clone(2500)).setUnits('msec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESCellLossIntegrationPeriod.setStatus('current')
atmfCESConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("pvc", 2), ("activeSvc", 3), ("passiveSvc", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESConnType.setStatus('current')
atmfCESLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 13), AtmAddr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESLocalAddr.setStatus('current')
atmfCESAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESAdminStatus.setStatus('current')
atmfCESOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESOperStatus.setStatus('current')
atmfCESConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 1, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: atmfCESConfRowStatus.setStatus('current')
atmfCESMappingTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 2), )
if mibBuilder.loadTexts: atmfCESMappingTable.setStatus('current')
atmfCESMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 2, 1), ).setIndexNames((0, "ATMF-CES", "atmfCESAtmIndex"), (0, "ATMF-CES", "atmfCESAtmVpi"), (0, "ATMF-CES", "atmfCESAtmVci"))
if mibBuilder.loadTexts: atmfCESMappingEntry.setStatus('current')
atmfCESMappingCbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESMappingCbrIndex.setStatus('current')
atmfCESStatsTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3), )
if mibBuilder.loadTexts: atmfCESStatsTable.setStatus('current')
atmfCESStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1), )
atmfCESConfEntry.registerAugmentions(("ATMF-CES", "atmfCESStatsEntry"))
atmfCESStatsEntry.setIndexNames(*atmfCESConfEntry.getIndexNames())
if mibBuilder.loadTexts: atmfCESStatsEntry.setStatus('current')
atmfCESReassCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESReassCells.setStatus('current')
atmfCESHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESHdrErrors.setStatus('current')
atmfCESPointerReframes = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESPointerReframes.setStatus('current')
atmfCESPointerParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESPointerParityErrors.setStatus('current')
atmfCESAal1SeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESAal1SeqErrors.setStatus('current')
atmfCESLostCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESLostCells.setStatus('current')
atmfCESMisinsertedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESMisinsertedCells.setStatus('current')
atmfCESBufUnderflows = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESBufUnderflows.setStatus('current')
atmfCESBufOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESBufOverflows.setStatus('current')
atmfCESCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoss", 1), ("loss", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESCellLossStatus.setStatus('current')
atmfCESActiveSvcTable = MibTable((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4), )
if mibBuilder.loadTexts: atmfCESActiveSvcTable.setStatus('current')
atmfCESActiveSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1), ).setIndexNames((0, "ATMF-CES", "atmfCESCbrIndex"))
if mibBuilder.loadTexts: atmfCESActiveSvcEntry.setStatus('current')
atmfCESRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 1), AtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESRemoteAddr.setStatus('current')
atmfCESFirstRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESFirstRetryInterval.setStatus('current')
atmfCESRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESRetryTimer.setStatus('current')
atmfCESRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESRetryLimit.setStatus('current')
atmfCESRetryFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESRetryFailures.setStatus('current')
atmfCESActiveSvcRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmfCESActiveSvcRestart.setStatus('current')
atmfCESActiveSvcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("establishmentInProgress", 2), ("connected", 3), ("retriesExhausted", 4), ("noAddressSupplied", 5), ("lowerLayerDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESActiveSvcOperStatus.setStatus('current')
atmfCESLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESLastReleaseCause.setStatus('current')
atmfCESLastReleaseDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 1, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmfCESLastReleaseDiagnostics.setStatus('current')
atmfCESConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2))
atmfCESGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 1))
atmfCESCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 2))
atmfCESCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 2, 1)).setObjects(("ATMF-CES", "atmfCESBasicConfigGroup"), ("ATMF-CES", "atmfCESBasicStatsGroup"), ("ATMF-CES", "atmfCESStructConfigGroup"), ("ATMF-CES", "atmfCESStructStatsGroup"), ("ATMF-CES", "atmfCESSvcConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfCESCompliance = atmfCESCompliance.setStatus('current')
atmfCESBasicConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 1, 1)).setObjects(("ATMF-CES", "atmfCESAtmIndex"), ("ATMF-CES", "atmfCESAtmVpi"), ("ATMF-CES", "atmfCESAtmVci"), ("ATMF-CES", "atmfCESCbrService"), ("ATMF-CES", "atmfCESCbrClockMode"), ("ATMF-CES", "atmfCESBufMaxSize"), ("ATMF-CES", "atmfCESCdvRxT"), ("ATMF-CES", "atmfCESCellLossIntegrationPeriod"), ("ATMF-CES", "atmfCESConnType"), ("ATMF-CES", "atmfCESConfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfCESBasicConfigGroup = atmfCESBasicConfigGroup.setStatus('current')
atmfCESOptionalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 1, 2)).setObjects(("ATMF-CES", "atmfCESAdminStatus"), ("ATMF-CES", "atmfCESOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfCESOptionalConfigGroup = atmfCESOptionalConfigGroup.setStatus('current')
atmfCESBasicStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 1, 3)).setObjects(("ATMF-CES", "atmfCESReassCells"), ("ATMF-CES", "atmfCESHdrErrors"), ("ATMF-CES", "atmfCESBufUnderflows"), ("ATMF-CES", "atmfCESBufOverflows"), ("ATMF-CES", "atmfCESCellLossStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfCESBasicStatsGroup = atmfCESBasicStatsGroup.setStatus('current')
atmfCESOptionalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 1, 4)).setObjects(("ATMF-CES", "atmfCESAal1SeqErrors"), ("ATMF-CES", "atmfCESLostCells"), ("ATMF-CES", "atmfCESMisinsertedCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfCESOptionalStatsGroup = atmfCESOptionalStatsGroup.setStatus('current')
atmfCESStructConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 1, 5)).setObjects(("ATMF-CES", "atmfCESCas"), ("ATMF-CES", "atmfCESPartialFill"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfCESStructConfigGroup = atmfCESStructConfigGroup.setStatus('current')
atmfCESStructStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 1, 6)).setObjects(("ATMF-CES", "atmfCESPointerReframes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfCESStructStatsGroup = atmfCESStructStatsGroup.setStatus('current')
atmfCESOptionalStructStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 1, 7)).setObjects(("ATMF-CES", "atmfCESPointerParityErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfCESOptionalStructStatsGroup = atmfCESOptionalStructStatsGroup.setStatus('current')
atmfCESMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 1, 8)).setObjects(("ATMF-CES", "atmfCESMappingCbrIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfCESMappingGroup = atmfCESMappingGroup.setStatus('current')
atmfCESSvcConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 1, 9)).setObjects(("ATMF-CES", "atmfCESLocalAddr"), ("ATMF-CES", "atmfCESRemoteAddr"), ("ATMF-CES", "atmfCESFirstRetryInterval"), ("ATMF-CES", "atmfCESRetryTimer"), ("ATMF-CES", "atmfCESRetryFailures"), ("ATMF-CES", "atmfCESActiveSvcRestart"), ("ATMF-CES", "atmfCESActiveSvcOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfCESSvcConfigGroup = atmfCESSvcConfigGroup.setStatus('current')
atmfCESOptionalSvcConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 353, 5, 2, 2, 2, 1, 10)).setObjects(("ATMF-CES", "atmfCESRetryLimit"), ("ATMF-CES", "atmfCESLastReleaseCause"), ("ATMF-CES", "atmfCESLastReleaseDiagnostics"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    atmfCESOptionalSvcConfigGroup = atmfCESOptionalSvcConfigGroup.setStatus('current')
mibBuilder.exportSymbols("ATMF-CES", atmfCESOptionalConfigGroup=atmfCESOptionalConfigGroup, atmfCESObjects=atmfCESObjects, atmfCESBufOverflows=atmfCESBufOverflows, atmfCES=atmfCES, PYSNMP_MODULE_ID=atmfCES, atmfCESAtmVci=atmfCESAtmVci, atmfCESCas=atmfCESCas, atmfCESAal1SeqErrors=atmfCESAal1SeqErrors, atmfCESPointerParityErrors=atmfCESPointerParityErrors, atmfCESStatsTable=atmfCESStatsTable, atmForum=atmForum, atmfCESBasicConfigGroup=atmfCESBasicConfigGroup, atmfCESGroups=atmfCESGroups, atmfCESCbrIndex=atmfCESCbrIndex, atmfCESStatsEntry=atmfCESStatsEntry, atmfCESLastReleaseDiagnostics=atmfCESLastReleaseDiagnostics, atmfCESActiveSvcOperStatus=atmfCESActiveSvcOperStatus, atmfCESOptionalStructStatsGroup=atmfCESOptionalStructStatsGroup, atmfCESRetryLimit=atmfCESRetryLimit, atmfCESBufMaxSize=atmfCESBufMaxSize, atmfCESConnType=atmfCESConnType, atmfCESOperStatus=atmfCESOperStatus, atmfCESFirstRetryInterval=atmfCESFirstRetryInterval, atmfCESHdrErrors=atmfCESHdrErrors, VciInteger=VciInteger, atmForumNetworkManagement=atmForumNetworkManagement, atmfCESLocalAddr=atmfCESLocalAddr, atmfCESRemoteAddr=atmfCESRemoteAddr, atmfCESCbrService=atmfCESCbrService, atmfCESMappingEntry=atmfCESMappingEntry, atmfCESConformance=atmfCESConformance, atmfCESOptionalSvcConfigGroup=atmfCESOptionalSvcConfigGroup, atmfCESAtmVpi=atmfCESAtmVpi, atmfCESCdvRxT=atmfCESCdvRxT, atmfCESPartialFill=atmfCESPartialFill, VpiInteger=VpiInteger, atmfCESReassCells=atmfCESReassCells, atmfCESRetryFailures=atmfCESRetryFailures, atmfCESCompliances=atmfCESCompliances, atmfCESCellLossStatus=atmfCESCellLossStatus, atmfCESMappingGroup=atmfCESMappingGroup, atmfCESActiveSvcEntry=atmfCESActiveSvcEntry, atmfCESAdminStatus=atmfCESAdminStatus, atmfCESConfTable=atmfCESConfTable, atmfCESConfEntry=atmfCESConfEntry, atmfCESSvcConfigGroup=atmfCESSvcConfigGroup, atmfCESMappingTable=atmfCESMappingTable, atmfCESActiveSvcTable=atmfCESActiveSvcTable, atmfCESRetryTimer=atmfCESRetryTimer, AtmAddr=AtmAddr, atmfCESLastReleaseCause=atmfCESLastReleaseCause, atmfCESStructStatsGroup=atmfCESStructStatsGroup, atmfCESActiveSvcRestart=atmfCESActiveSvcRestart, atmfCESOptionalStatsGroup=atmfCESOptionalStatsGroup, atmfCESBasicStatsGroup=atmfCESBasicStatsGroup, atmfCESCompliance=atmfCESCompliance, atmfCESAtmIndex=atmfCESAtmIndex, atmfCESMappingCbrIndex=atmfCESMappingCbrIndex, atmfCESCbrClockMode=atmfCESCbrClockMode, atmfCESConfRowStatus=atmfCESConfRowStatus, atmfCESMisinsertedCells=atmfCESMisinsertedCells, atmfCESBufUnderflows=atmfCESBufUnderflows, atmfCESLostCells=atmfCESLostCells, atmfCESmib=atmfCESmib, atmfCESCellLossIntegrationPeriod=atmfCESCellLossIntegrationPeriod, CESConnectionPort=CESConnectionPort, atmfCESStructConfigGroup=atmfCESStructConfigGroup, atmfCESPointerReframes=atmfCESPointerReframes)
