#
# PySNMP MIB module SH-ATT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SH-ATT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:53:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, TimeTicks, Counter32, NotificationType, Gauge32, iso, ObjectIdentity, Counter64, Bits, Integer32, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "TimeTicks", "Counter32", "NotificationType", "Gauge32", "iso", "ObjectIdentity", "Counter64", "Bits", "Integer32", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
att_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 74)).setLabel("att-2")
att_products = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 1)).setLabel("att-products")
att_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2)).setLabel("att-mgmt")
att_hubmgtProd = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 1, 1)).setLabel("att-hubmgtProd")
att_hubmgt = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 1)).setLabel("att-hubmgt")
sh1BasicCtrlCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 1, 1))
sh1SelfTestCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 1, 2))
sh1PerfMonCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 1, 3))
sh1DownloadCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 1, 4))
sh1AddrTrackCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 1, 5))
sh1EnhancedCtrlCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 1, 6))
sh1SecurityCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 74, 2, 1, 7))
sh1BasicCtrlHubID = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1BasicCtrlHubID.setStatus('mandatory')
sh1BasicCtrlHubGroupCapacity = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1BasicCtrlHubGroupCapacity.setStatus('mandatory')
sh1BasicCtrlGroupMap = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1BasicCtrlGroupMap.setStatus('mandatory')
sh1BasicCtrlGroupID = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1BasicCtrlGroupID.setStatus('mandatory')
sh1BasicCtrlNumberOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1BasicCtrlNumberOfPorts.setStatus('mandatory')
sh1BasicCtrlPortTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 1, 1, 6), )
if mibBuilder.loadTexts: sh1BasicCtrlPortTable.setStatus('mandatory')
sh1BasicCtrlPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 1, 1, 6, 1), ).setIndexNames((0, "SH-ATT-MIB", "sh1BasicCtrlPortID"))
if mibBuilder.loadTexts: sh1BasicCtrlPortEntry.setStatus('mandatory')
sh1BasicCtrlPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1BasicCtrlPortID.setStatus('mandatory')
sh1BasicCtrlPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("repeater", 2), ("tenBASE-FAsync", 3), ("tenBASE-FSynch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1BasicCtrlPortType.setStatus('mandatory')
sh1BasicCtrlPortCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1BasicCtrlPortCtrl.setStatus('mandatory')
sh1BasicCtrlAutoPartitionState = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("notAutoPartitioned", 2), ("autoPartitioned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1BasicCtrlAutoPartitionState.setStatus('mandatory')
sh1SelfTestHubResetTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1SelfTestHubResetTimeStamp.setStatus('mandatory')
sh1SelfTestResetHubSystem = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sh1SelfTestResetHubSystem.setStatus('mandatory')
sh1SelfTestResetHub = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sh1SelfTestResetHub.setStatus('mandatory')
sh1SelfTestExecuteSelfTest1 = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("performTest", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sh1SelfTestExecuteSelfTest1.setStatus('mandatory')
sh1SelfTestExecuteSelfTest2 = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("performTest", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sh1SelfTestExecuteSelfTest2.setStatus('mandatory')
sh1SelfTestHubHealthState = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1SelfTestHubHealthState.setStatus('mandatory')
sh1SelfTestHubHealthData = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 2, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1SelfTestHubHealthData.setStatus('mandatory')
sh1PerfMonFrameSize1Bound = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1PerfMonFrameSize1Bound.setStatus('mandatory')
sh1PerfMonFrameSize2Bound = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1PerfMonFrameSize2Bound.setStatus('mandatory')
sh1PerfMonFrameSize3Bound = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1PerfMonFrameSize3Bound.setStatus('mandatory')
sh1PerfMonFrameSize4Bound = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1PerfMonFrameSize4Bound.setStatus('mandatory')
sh1PerfMonRelayCounts = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonRelayCounts.setStatus('mandatory')
sh1PerfMonTotalFramesReceivedOk = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalFramesReceivedOk.setStatus('mandatory')
sh1PerfMonTotalOctetsReceivedOk = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalOctetsReceivedOk.setStatus('mandatory')
sh1PerfMonTotalCollisions = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalCollisions.setStatus('mandatory')
sh1PerfMonTotalLateCollisions = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalLateCollisions.setStatus('mandatory')
sh1PerfMonTotalRunts = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalRunts.setStatus('mandatory')
sh1PerfMonTotalShortEvents = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalShortEvents.setStatus('mandatory')
sh1PerfMonTotalFrameTooLongs = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalFrameTooLongs.setStatus('mandatory')
sh1PerfMonTotalAutoPartitions = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalAutoPartitions.setStatus('mandatory')
sh1PerfMonTotalLongFragments = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalLongFragments.setStatus('mandatory')
sh1PerfMonTotalFifoErrors = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalFifoErrors.setStatus('mandatory')
sh1PerfMonTotalFramesTransmittedOk = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalFramesTransmittedOk.setStatus('mandatory')
sh1PerfMonTotalOctetsTransmittedOk = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalOctetsTransmittedOk.setStatus('mandatory')
sh1PerfMonTotalErrorEnergy = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalErrorEnergy.setStatus('mandatory')
sh1PerfMonTotalManchesterCodeViolations = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalManchesterCodeViolations.setStatus('mandatory')
sh1PerfMonTotalBand1Frames = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalBand1Frames.setStatus('mandatory')
sh1PerfMonTotalBand2Frames = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalBand2Frames.setStatus('mandatory')
sh1PerfMonTotalBand3Frames = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalBand3Frames.setStatus('mandatory')
sh1PerfMonTotalBand4Frames = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalBand4Frames.setStatus('mandatory')
sh1PerfMonTotalBand5Frames = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonTotalBand5Frames.setStatus('mandatory')
sh1PerfMonPortTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25), )
if mibBuilder.loadTexts: sh1PerfMonPortTable.setStatus('mandatory')
sh1PerfMonPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1), ).setIndexNames((0, "SH-ATT-MIB", "sh1PerfMonPortID"))
if mibBuilder.loadTexts: sh1PerfMonPortEntry.setStatus('mandatory')
sh1PerfMonPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonPortID.setStatus('mandatory')
sh1PerfMonPortCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonPortCounts.setStatus('mandatory')
sh1PerfMonFramesReceivedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonFramesReceivedOk.setStatus('mandatory')
sh1PerfMonOctetsReceivedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonOctetsReceivedOk.setStatus('mandatory')
sh1PerfMonCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonCollisions.setStatus('mandatory')
sh1PerfMonLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonLateCollisions.setStatus('mandatory')
sh1PerfMonRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonRunts.setStatus('mandatory')
sh1PerfMonShortEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonShortEvents.setStatus('mandatory')
sh1PerfMonFrameTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonFrameTooLongs.setStatus('mandatory')
sh1PerfMonAutoPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonAutoPartitions.setStatus('mandatory')
sh1PerfMonLongFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonLongFragments.setStatus('mandatory')
sh1PerfMonFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonFifoErrors.setStatus('mandatory')
sh1PerfMonFramesTransmittedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonFramesTransmittedOk.setStatus('mandatory')
sh1PerfMonOctetsTransmittedOk = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonOctetsTransmittedOk.setStatus('mandatory')
sh1PerfMonErrorEnergy = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonErrorEnergy.setStatus('mandatory')
sh1PerfMonManchesterCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonManchesterCodeViolations.setStatus('mandatory')
sh1PerfMonBand1Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonBand1Frames.setStatus('mandatory')
sh1PerfMonBand2Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonBand2Frames.setStatus('mandatory')
sh1PerfMonBand3Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonBand3Frames.setStatus('mandatory')
sh1PerfMonBand4Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonBand4Frames.setStatus('mandatory')
sh1PerfMonBand5Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 3, 25, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1PerfMonBand5Frames.setStatus('mandatory')
sh1DownloadImageFile = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 4, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1DownloadImageFile.setStatus('mandatory')
sh1DownloadIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1DownloadIpAddress.setStatus('mandatory')
sh1DownloadMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 4, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1DownloadMacAddress.setStatus('mandatory')
sh1DownloadExecute = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("performDownload", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1DownloadExecute.setStatus('mandatory')
sh1AddrTrackSendHubLearn = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("sendHubLearnFrame", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sh1AddrTrackSendHubLearn.setStatus('mandatory')
sh1AddrTrackPortTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 1, 5, 2), )
if mibBuilder.loadTexts: sh1AddrTrackPortTable.setStatus('mandatory')
sh1AddrTrackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 1, 5, 2, 1), ).setIndexNames((0, "SH-ATT-MIB", "sh1AddrTrackPortID"))
if mibBuilder.loadTexts: sh1AddrTrackPortEntry.setStatus('mandatory')
sh1AddrTrackPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1AddrTrackPortID.setStatus('mandatory')
sh1AddrTrackDetectedMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 5, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1AddrTrackDetectedMacAddr.setStatus('mandatory')
sh1AddrTrackDetectedAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("singleAddress", 2), ("hubAddress", 3), ("multipleAddresses", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1AddrTrackDetectedAddrType.setStatus('mandatory')
sh1AddrTrackAuthMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 5, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1AddrTrackAuthMacAddr.setStatus('mandatory')
sh1AddrTrackAuthAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("singleAddress", 2), ("hubAddress", 3), ("multipleAddresses", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1AddrTrackAuthAddrType.setStatus('mandatory')
sh1AddrTrackNewHubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 5, 2, 1, 6), OctetString())
if mibBuilder.loadTexts: sh1AddrTrackNewHubAddr.setStatus('mandatory')
sh1EnhCtrlResetFirmwareConfig = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("performReset", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sh1EnhCtrlResetFirmwareConfig.setStatus('mandatory')
sh1EnhCtrlHubVersion = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1EnhCtrlHubVersion.setStatus('mandatory')
sh1EnhCtrlTrapMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1EnhCtrlTrapMacAddr.setStatus('mandatory')
sh1EnhCtrlTrapIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1EnhCtrlTrapIpAddr.setStatus('mandatory')
sh1EnhCtrlGatewayIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1EnhCtrlGatewayIpAddr.setStatus('mandatory')
sh1EnhCtrlNetworkMask = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1EnhCtrlNetworkMask.setStatus('mandatory')
sh1EnhCtrlHubIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1EnhCtrlHubIpAddr.setStatus('mandatory')
sh1EnhCtrlHubAlias = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1EnhCtrlHubAlias.setStatus('mandatory')
sh1EnhCtrlRs232State = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dteNotConnected", 1), ("dteConnectedNotLoggedIn", 2), ("dteConnectedLoggedIn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1EnhCtrlRs232State.setStatus('mandatory')
sh1EnhCtrlRs232DataRate = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bps300", 1), ("bps1200", 2), ("bps2400", 3), ("bps4800", 4), ("bps9600", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1EnhCtrlRs232DataRate.setStatus('mandatory')
sh1EnhCtrlTrapCountPeriodCtrl = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1EnhCtrlTrapCountPeriodCtrl.setStatus('mandatory')
sh1EnhCtrlTrapCountContentsCtrl = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("minimumContents", 2), ("fullContents", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1EnhCtrlTrapCountContentsCtrl.setStatus('mandatory')
sh1EnhCtrlSendTrapConfig = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("sendTrapConfig", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sh1EnhCtrlSendTrapConfig.setStatus('mandatory')
sh1EnhCtrlPortTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 14), )
if mibBuilder.loadTexts: sh1EnhCtrlPortTable.setStatus('mandatory')
sh1EnhCtrlPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 14, 1), ).setIndexNames((0, "SH-ATT-MIB", "sh1EnhCtrlPortID"))
if mibBuilder.loadTexts: sh1EnhCtrlPortEntry.setStatus('mandatory')
sh1EnhCtrlPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1EnhCtrlPortID.setStatus('mandatory')
sh1EnhCtrlLinkIntegrityCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1EnhCtrlLinkIntegrityCtrl.setStatus('mandatory')
sh1EnhCtrlLinkIntegrityAlarmCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1EnhCtrlLinkIntegrityAlarmCtrl.setStatus('mandatory')
sh1EnhCtrlLinkIntegrityState = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("connected", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1EnhCtrlLinkIntegrityState.setStatus('mandatory')
sh1EnhCtrlExtendedDistanceCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1EnhCtrlExtendedDistanceCtrl.setStatus('mandatory')
sh1EnhCtrlPortConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 6, 14, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1EnhCtrlPortConfig.setStatus('mandatory')
sh1SecEavesdroppingCtrl = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1SecEavesdroppingCtrl.setStatus('mandatory')
sh1SecIntrusionCtrl = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1SecIntrusionCtrl.setStatus('mandatory')
sh1SecIntrusionAlarmCtrl = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sh1SecIntrusionAlarmCtrl.setStatus('mandatory')
sh1SecPassword = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 4), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: sh1SecPassword.setStatus('mandatory')
sh1SecBadPasswords = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1SecBadPasswords.setStatus('mandatory')
sh1SecSettingAdminMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1SecSettingAdminMacAddr.setStatus('mandatory')
sh1SecSettingAdminIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1SecSettingAdminIpAddr.setStatus('mandatory')
sh1SecInbandSetsState = MibScalar((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1SecInbandSetsState.setStatus('mandatory')
sh1SecPortTable = MibTable((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 9), )
if mibBuilder.loadTexts: sh1SecPortTable.setStatus('mandatory')
sh1SecPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 9, 1), ).setIndexNames((0, "SH-ATT-MIB", "sh1SecPortID"))
if mibBuilder.loadTexts: sh1SecPortEntry.setStatus('mandatory')
sh1SecPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1SecPortID.setStatus('mandatory')
sh1SecIntrusionAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 9, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1SecIntrusionAddr.setStatus('mandatory')
sh1SecIntrusionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 9, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1SecIntrusionTimeStamp.setStatus('mandatory')
sh1SecIntrusions = MibTableColumn((1, 3, 6, 1, 4, 1, 74, 2, 1, 7, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sh1SecIntrusions.setStatus('mandatory')
mibBuilder.exportSymbols("SH-ATT-MIB", sh1EnhCtrlHubIpAddr=sh1EnhCtrlHubIpAddr, sh1SecIntrusionTimeStamp=sh1SecIntrusionTimeStamp, sh1PerfMonOctetsReceivedOk=sh1PerfMonOctetsReceivedOk, sh1PerfMonBand5Frames=sh1PerfMonBand5Frames, sh1PerfMonPortID=sh1PerfMonPortID, sh1AddrTrackSendHubLearn=sh1AddrTrackSendHubLearn, sh1PerfMonTotalFifoErrors=sh1PerfMonTotalFifoErrors, sh1PerfMonFrameSize3Bound=sh1PerfMonFrameSize3Bound, sh1EnhCtrlRs232DataRate=sh1EnhCtrlRs232DataRate, sh1PerfMonBand3Frames=sh1PerfMonBand3Frames, sh1PerfMonTotalAutoPartitions=sh1PerfMonTotalAutoPartitions, sh1BasicCtrlAutoPartitionState=sh1BasicCtrlAutoPartitionState, att_hubmgt=att_hubmgt, sh1SecIntrusionAddr=sh1SecIntrusionAddr, sh1BasicCtrlPortType=sh1BasicCtrlPortType, sh1EnhCtrlLinkIntegrityState=sh1EnhCtrlLinkIntegrityState, sh1EnhCtrlRs232State=sh1EnhCtrlRs232State, sh1PerfMonTotalLateCollisions=sh1PerfMonTotalLateCollisions, sh1EnhCtrlResetFirmwareConfig=sh1EnhCtrlResetFirmwareConfig, sh1DownloadExecute=sh1DownloadExecute, sh1PerfMonBand4Frames=sh1PerfMonBand4Frames, sh1SelfTestHubResetTimeStamp=sh1SelfTestHubResetTimeStamp, sh1SelfTestHubHealthState=sh1SelfTestHubHealthState, sh1PerfMonFrameSize4Bound=sh1PerfMonFrameSize4Bound, sh1AddrTrackPortTable=sh1AddrTrackPortTable, sh1PerfMonTotalRunts=sh1PerfMonTotalRunts, sh1EnhCtrlTrapIpAddr=sh1EnhCtrlTrapIpAddr, sh1AddrTrackPortID=sh1AddrTrackPortID, sh1PerfMonCapability=sh1PerfMonCapability, sh1DownloadIpAddress=sh1DownloadIpAddress, sh1BasicCtrlGroupMap=sh1BasicCtrlGroupMap, sh1AddrTrackNewHubAddr=sh1AddrTrackNewHubAddr, sh1BasicCtrlHubID=sh1BasicCtrlHubID, sh1SelfTestResetHubSystem=sh1SelfTestResetHubSystem, sh1PerfMonPortCounts=sh1PerfMonPortCounts, sh1EnhCtrlPortID=sh1EnhCtrlPortID, sh1SecSettingAdminIpAddr=sh1SecSettingAdminIpAddr, sh1AddrTrackAuthMacAddr=sh1AddrTrackAuthMacAddr, sh1PerfMonCollisions=sh1PerfMonCollisions, sh1PerfMonTotalBand4Frames=sh1PerfMonTotalBand4Frames, att_products=att_products, sh1PerfMonFrameSize2Bound=sh1PerfMonFrameSize2Bound, sh1PerfMonFrameSize1Bound=sh1PerfMonFrameSize1Bound, sh1PerfMonTotalCollisions=sh1PerfMonTotalCollisions, sh1PerfMonFramesReceivedOk=sh1PerfMonFramesReceivedOk, sh1PerfMonFifoErrors=sh1PerfMonFifoErrors, sh1EnhancedCtrlCapability=sh1EnhancedCtrlCapability, att_hubmgtProd=att_hubmgtProd, sh1SecPortEntry=sh1SecPortEntry, sh1EnhCtrlLinkIntegrityCtrl=sh1EnhCtrlLinkIntegrityCtrl, sh1BasicCtrlPortTable=sh1BasicCtrlPortTable, sh1SecBadPasswords=sh1SecBadPasswords, sh1EnhCtrlExtendedDistanceCtrl=sh1EnhCtrlExtendedDistanceCtrl, sh1BasicCtrlNumberOfPorts=sh1BasicCtrlNumberOfPorts, sh1SecEavesdroppingCtrl=sh1SecEavesdroppingCtrl, sh1PerfMonRunts=sh1PerfMonRunts, sh1SecIntrusions=sh1SecIntrusions, sh1BasicCtrlPortEntry=sh1BasicCtrlPortEntry, sh1BasicCtrlPortCtrl=sh1BasicCtrlPortCtrl, sh1PerfMonTotalFramesTransmittedOk=sh1PerfMonTotalFramesTransmittedOk, sh1PerfMonShortEvents=sh1PerfMonShortEvents, sh1AddrTrackCapability=sh1AddrTrackCapability, sh1PerfMonTotalErrorEnergy=sh1PerfMonTotalErrorEnergy, sh1PerfMonTotalLongFragments=sh1PerfMonTotalLongFragments, sh1SecIntrusionCtrl=sh1SecIntrusionCtrl, sh1SecurityCapability=sh1SecurityCapability, sh1AddrTrackPortEntry=sh1AddrTrackPortEntry, sh1BasicCtrlHubGroupCapacity=sh1BasicCtrlHubGroupCapacity, sh1PerfMonPortTable=sh1PerfMonPortTable, sh1PerfMonTotalBand1Frames=sh1PerfMonTotalBand1Frames, sh1PerfMonFramesTransmittedOk=sh1PerfMonFramesTransmittedOk, sh1SecPortID=sh1SecPortID, sh1BasicCtrlPortID=sh1BasicCtrlPortID, sh1PerfMonTotalShortEvents=sh1PerfMonTotalShortEvents, sh1DownloadCapability=sh1DownloadCapability, sh1PerfMonBand2Frames=sh1PerfMonBand2Frames, sh1PerfMonManchesterCodeViolations=sh1PerfMonManchesterCodeViolations, sh1EnhCtrlSendTrapConfig=sh1EnhCtrlSendTrapConfig, sh1PerfMonTotalOctetsReceivedOk=sh1PerfMonTotalOctetsReceivedOk, sh1SelfTestExecuteSelfTest2=sh1SelfTestExecuteSelfTest2, sh1EnhCtrlPortTable=sh1EnhCtrlPortTable, att_2=att_2, sh1PerfMonPortEntry=sh1PerfMonPortEntry, sh1EnhCtrlLinkIntegrityAlarmCtrl=sh1EnhCtrlLinkIntegrityAlarmCtrl, sh1PerfMonTotalBand5Frames=sh1PerfMonTotalBand5Frames, sh1DownloadMacAddress=sh1DownloadMacAddress, sh1EnhCtrlTrapCountPeriodCtrl=sh1EnhCtrlTrapCountPeriodCtrl, sh1SecSettingAdminMacAddr=sh1SecSettingAdminMacAddr, sh1AddrTrackAuthAddrType=sh1AddrTrackAuthAddrType, sh1SelfTestCapability=sh1SelfTestCapability, sh1AddrTrackDetectedAddrType=sh1AddrTrackDetectedAddrType, sh1SecPassword=sh1SecPassword, sh1PerfMonTotalOctetsTransmittedOk=sh1PerfMonTotalOctetsTransmittedOk, sh1PerfMonRelayCounts=sh1PerfMonRelayCounts, sh1PerfMonErrorEnergy=sh1PerfMonErrorEnergy, sh1PerfMonAutoPartitions=sh1PerfMonAutoPartitions, sh1PerfMonOctetsTransmittedOk=sh1PerfMonOctetsTransmittedOk, sh1EnhCtrlHubAlias=sh1EnhCtrlHubAlias, sh1EnhCtrlNetworkMask=sh1EnhCtrlNetworkMask, sh1EnhCtrlHubVersion=sh1EnhCtrlHubVersion, sh1SelfTestExecuteSelfTest1=sh1SelfTestExecuteSelfTest1, sh1PerfMonTotalFrameTooLongs=sh1PerfMonTotalFrameTooLongs, sh1PerfMonTotalBand2Frames=sh1PerfMonTotalBand2Frames, sh1SelfTestResetHub=sh1SelfTestResetHub, sh1EnhCtrlTrapCountContentsCtrl=sh1EnhCtrlTrapCountContentsCtrl, sh1PerfMonTotalManchesterCodeViolations=sh1PerfMonTotalManchesterCodeViolations, sh1SecIntrusionAlarmCtrl=sh1SecIntrusionAlarmCtrl, sh1EnhCtrlPortEntry=sh1EnhCtrlPortEntry, sh1DownloadImageFile=sh1DownloadImageFile, sh1PerfMonFrameTooLongs=sh1PerfMonFrameTooLongs, sh1SelfTestHubHealthData=sh1SelfTestHubHealthData, sh1EnhCtrlTrapMacAddr=sh1EnhCtrlTrapMacAddr, sh1SecPortTable=sh1SecPortTable, sh1EnhCtrlGatewayIpAddr=sh1EnhCtrlGatewayIpAddr, sh1EnhCtrlPortConfig=sh1EnhCtrlPortConfig, sh1SecInbandSetsState=sh1SecInbandSetsState, sh1PerfMonLateCollisions=sh1PerfMonLateCollisions, sh1BasicCtrlCapability=sh1BasicCtrlCapability, sh1AddrTrackDetectedMacAddr=sh1AddrTrackDetectedMacAddr, sh1PerfMonTotalFramesReceivedOk=sh1PerfMonTotalFramesReceivedOk, sh1PerfMonTotalBand3Frames=sh1PerfMonTotalBand3Frames, att_mgmt=att_mgmt, sh1PerfMonLongFragments=sh1PerfMonLongFragments, sh1PerfMonBand1Frames=sh1PerfMonBand1Frames, sh1BasicCtrlGroupID=sh1BasicCtrlGroupID)
