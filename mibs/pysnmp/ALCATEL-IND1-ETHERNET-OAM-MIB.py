#
# PySNMP MIB module ALCATEL-IND1-ETHERNET-OAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-ETHERNET-OAM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:01:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1EthernetOam, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1EthernetOam")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
dot1agCfmMdIndex, dot1agCfmMepEntry, Dot1agCfmMepIdOrZero, dot1agCfmMepIdentifier, Dot1agCfmMepId, dot1agCfmMaIndex = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMdIndex", "dot1agCfmMepEntry", "Dot1agCfmMepIdOrZero", "dot1agCfmMepIdentifier", "Dot1agCfmMepId", "dot1agCfmMaIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, IpAddress, NotificationType, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, Counter64, Unsigned32, ModuleIdentity, Gauge32, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "NotificationType", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "Counter32", "TimeTicks")
MacAddress, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "TextualConvention", "DisplayString")
alcatelIND1EoamMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1))
alcatelIND1EoamMIB.setRevisions(('2009-09-08 00:00',))
if mibBuilder.loadTexts: alcatelIND1EoamMIB.setLastUpdated('200909080000Z')
if mibBuilder.loadTexts: alcatelIND1EoamMIB.setOrganization('Alcatel - Architects Of An Internet World')
alcatelIND1CfmMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1))
if mibBuilder.loadTexts: alcatelIND1CfmMIBObjects.setStatus('current')
alaCfmBase = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 1))
alaCfmMep = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2))
alaCfmDelayResult = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 3))
alaCfmGlobalClearStats = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCfmGlobalClearStats.setStatus('current')
alaCfmGlobalOWDClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCfmGlobalOWDClear.setStatus('current')
alaCfmGlobalTWDClear = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaCfmGlobalTWDClear.setStatus('current')
alaCfmMepTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alaCfmMepTable.setStatus('current')
alaCfmMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2, 1, 1), )
dot1agCfmMepEntry.registerAugmentions(("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmMepEntry"))
alaCfmMepEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: alaCfmMepEntry.setStatus('current')
alaCfmMepClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("default", 0), ("reset", 1))).clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaCfmMepClearStats.setStatus('current')
alaCfmMepOWDTMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2, 1, 1, 2), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaCfmMepOWDTMacAddress.setStatus('current')
alaCfmMepOWDTRMepIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2, 1, 1, 3), Dot1agCfmMepId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaCfmMepOWDTRMepIdentifier.setStatus('current')
alaCfmMepOWDTPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaCfmMepOWDTPriority.setStatus('current')
alaCfmMepTWDTMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2, 1, 1, 5), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaCfmMepTWDTMacAddress.setStatus('current')
alaCfmMepTWDTRMepIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2, 1, 1, 6), Dot1agCfmMepId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaCfmMepTWDTRMepIdentifier.setStatus('current')
alaCfmMepTWDTPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaCfmMepTWDTPriority.setStatus('current')
alaCfmMepRFPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaCfmMepRFPEnabled.setStatus('current')
alaCfmMepPortStatusTlv = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2, 1, 1, 9), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaCfmMepPortStatusTlv.setStatus('current')
alaCfmMepIfStatusTlv = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 2, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alaCfmMepIfStatusTlv.setStatus('current')
alaCfmDelayResultTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 3, 1), )
if mibBuilder.loadTexts: alaCfmDelayResultTable.setStatus('current')
alaCfmDelayResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 3, 1, 1), ).setIndexNames((0, "IEEE8021-CFM-MIB", "dot1agCfmMdIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMaIndex"), (0, "IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"), (0, "ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmDelayResultType"), (0, "ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmDelayResultRMepMacAddress"))
if mibBuilder.loadTexts: alaCfmDelayResultEntry.setStatus('current')
alaCfmDelayResultType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oneWayTest", 1), ("twoWayTest", 2))))
if mibBuilder.loadTexts: alaCfmDelayResultType.setStatus('current')
alaCfmDelayResultRMepMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 3, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: alaCfmDelayResultRMepMacAddress.setStatus('current')
alaCfmDelayResultRMepIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 3, 1, 1, 3), Dot1agCfmMepIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCfmDelayResultRMepIdentifier.setStatus('current')
alaCfmDelayResultTestDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 3, 1, 1, 4), Integer32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCfmDelayResultTestDelay.setStatus('current')
alaCfmDelayResultVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 1, 3, 1, 1, 5), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: alaCfmDelayResultVariation.setStatus('current')
alaCfmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 2))
alaCfmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 2, 1))
alaCfmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 2, 2))
alaCfmBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmGlobalClearStats"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmGlobalOWDClear"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmGlobalTWDClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCfmBaseGroup = alaCfmBaseGroup.setStatus('current')
alaCfmMepGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmMepClearStats"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmMepOWDTMacAddress"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmMepOWDTRMepIdentifier"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmMepOWDTPriority"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmMepTWDTMacAddress"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmMepTWDTRMepIdentifier"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmMepTWDTPriority"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmMepRFPEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCfmMepGroup = alaCfmMepGroup.setStatus('current')
alaCfmDelayResultGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmDelayResultRMepIdentifier"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmDelayResultTestDelay"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmDelayResultVariation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCfmDelayResultGroup = alaCfmDelayResultGroup.setStatus('current')
alaTlvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmMepPortStatusTlv"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmMepIfStatusTlv"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaTlvGroup = alaTlvGroup.setStatus('current')
alaCfmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 40, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmBaseGroup"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmMepGroup"), ("ALCATEL-IND1-ETHERNET-OAM-MIB", "alaCfmDelayResultGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaCfmCompliance = alaCfmCompliance.setStatus('current')
mibBuilder.exportSymbols("ALCATEL-IND1-ETHERNET-OAM-MIB", alaCfmMepGroup=alaCfmMepGroup, alaCfmMepTWDTMacAddress=alaCfmMepTWDTMacAddress, alaCfmMepOWDTMacAddress=alaCfmMepOWDTMacAddress, alaCfmMepPortStatusTlv=alaCfmMepPortStatusTlv, alaCfmDelayResultTestDelay=alaCfmDelayResultTestDelay, alaCfmMepTWDTPriority=alaCfmMepTWDTPriority, alaCfmDelayResultRMepIdentifier=alaCfmDelayResultRMepIdentifier, alaCfmDelayResultType=alaCfmDelayResultType, alaCfmCompliance=alaCfmCompliance, alaCfmMepIfStatusTlv=alaCfmMepIfStatusTlv, alcatelIND1EoamMIB=alcatelIND1EoamMIB, alaTlvGroup=alaTlvGroup, alaCfmMepOWDTRMepIdentifier=alaCfmMepOWDTRMepIdentifier, alaCfmMep=alaCfmMep, alaCfmMepTWDTRMepIdentifier=alaCfmMepTWDTRMepIdentifier, alaCfmBaseGroup=alaCfmBaseGroup, alaCfmMepClearStats=alaCfmMepClearStats, alaCfmDelayResultRMepMacAddress=alaCfmDelayResultRMepMacAddress, alaCfmDelayResult=alaCfmDelayResult, alaCfmConformance=alaCfmConformance, alaCfmGlobalClearStats=alaCfmGlobalClearStats, alaCfmDelayResultTable=alaCfmDelayResultTable, alaCfmGlobalTWDClear=alaCfmGlobalTWDClear, alcatelIND1CfmMIBObjects=alcatelIND1CfmMIBObjects, PYSNMP_MODULE_ID=alcatelIND1EoamMIB, alaCfmGlobalOWDClear=alaCfmGlobalOWDClear, alaCfmCompliances=alaCfmCompliances, alaCfmMepEntry=alaCfmMepEntry, alaCfmBase=alaCfmBase, alaCfmMepTable=alaCfmMepTable, alaCfmMepRFPEnabled=alaCfmMepRFPEnabled, alaCfmDelayResultGroup=alaCfmDelayResultGroup, alaCfmDelayResultEntry=alaCfmDelayResultEntry, alaCfmDelayResultVariation=alaCfmDelayResultVariation, alaCfmMepOWDTPriority=alaCfmMepOWDTPriority, alaCfmGroups=alaCfmGroups)
