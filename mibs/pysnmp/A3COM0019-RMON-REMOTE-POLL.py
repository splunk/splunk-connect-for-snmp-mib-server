#
# PySNMP MIB module A3COM0019-RMON-REMOTE-POLL (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM0019-RMON-REMOTE-POLL
# Produced by pysmi-0.3.4 at Mon Apr 29 16:53:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
remotePoll, = mibBuilder.importSymbols("A3COM0027-RMON-EXTENSIONS", "remotePoll")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
EntryStatus, = mibBuilder.importSymbols("RMON-MIB", "EntryStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ObjectIdentity, ModuleIdentity, Unsigned32, TimeTicks, Counter64, iso, IpAddress, NotificationType, NotificationType, Counter32, MibIdentifier, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "TimeTicks", "Counter64", "iso", "IpAddress", "NotificationType", "NotificationType", "Counter32", "MibIdentifier", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
remPollTable = MibTable((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1), )
if mibBuilder.loadTexts: remPollTable.setStatus('mandatory')
remPollTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1), ).setIndexNames((0, "A3COM0019-RMON-REMOTE-POLL", "remPollIndex"))
if mibBuilder.loadTexts: remPollTableEntry.setStatus('mandatory')
remPollIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: remPollIndex.setStatus('mandatory')
remPollIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remPollIfIndex.setStatus('mandatory')
remPollAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remPollAddress.setStatus('mandatory')
remPollProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("ip", 2), ("ipx", 3), ("netBIOS", 4), ("appleTalk", 5), ("amp", 6), ("llc", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remPollProtocol.setStatus('mandatory')
remPollTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remPollTimeout.setStatus('mandatory')
remPollAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remPollAttempts.setStatus('mandatory')
remPollPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remPollPeriod.setStatus('mandatory')
remPollLastRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remPollLastRequest.setStatus('mandatory')
remPollLastReply = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remPollLastReply.setStatus('mandatory')
remPollInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remPollInformation.setStatus('mandatory')
remPollSuccessEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remPollSuccessEventIndex.setStatus('mandatory')
remPollFailureEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remPollFailureEventIndex.setStatus('mandatory')
remPollOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remPollOwner.setStatus('mandatory')
remPollStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 10, 25, 1, 1, 1, 15), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remPollStatus.setStatus('mandatory')
mibBuilder.exportSymbols("A3COM0019-RMON-REMOTE-POLL", remPollProtocol=remPollProtocol, remPollLastReply=remPollLastReply, remPollInformation=remPollInformation, remPollIndex=remPollIndex, remPollTableEntry=remPollTableEntry, remPollFailureEventIndex=remPollFailureEventIndex, remPollAttempts=remPollAttempts, remPollPeriod=remPollPeriod, remPollOwner=remPollOwner, remPollStatus=remPollStatus, remPollLastRequest=remPollLastRequest, remPollAddress=remPollAddress, remPollIfIndex=remPollIfIndex, remPollSuccessEventIndex=remPollSuccessEventIndex, remPollTimeout=remPollTimeout, remPollTable=remPollTable)
