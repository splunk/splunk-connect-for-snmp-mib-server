#
# PySNMP MIB module HH3C-LOGIC-VOLUME-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LOGIC-VOLUME-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:15:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
Hh3cStorageActionType, Hh3cSessionIDType, Hh3cStorageLedStateType, hh3cStorageRef, Hh3cWwpnListType, Hh3cStorageEnableState, Hh3cLvIDType, Hh3cRaidIDType = mibBuilder.importSymbols("HH3C-STORAGE-REF-MIB", "Hh3cStorageActionType", "Hh3cSessionIDType", "Hh3cStorageLedStateType", "hh3cStorageRef", "Hh3cWwpnListType", "Hh3cStorageEnableState", "Hh3cLvIDType", "Hh3cRaidIDType")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, TimeTicks, Bits, iso, Counter32, ObjectIdentity, ModuleIdentity, Counter64, IpAddress, Integer32, Gauge32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "TimeTicks", "Bits", "iso", "Counter32", "ObjectIdentity", "ModuleIdentity", "Counter64", "IpAddress", "Integer32", "Gauge32", "Unsigned32")
TruthValue, DateAndTime, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "TextualConvention", "RowStatus", "DisplayString")
hh3cLogicVolume = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 10, 5))
if mibBuilder.loadTexts: hh3cLogicVolume.setLastUpdated('200709041452Z')
if mibBuilder.loadTexts: hh3cLogicVolume.setOrganization('H3C Technologies Co., Ltd.')
hh3cLvMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1))
hh3cLogicResourceCapacityObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 1))
hh3cLvCount = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvCount.setStatus('current')
hh3cLvMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 1, 2), Integer32()).setUnits('TB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvMaxSize.setStatus('current')
hh3cTargetCount = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTargetCount.setStatus('current')
hh3cInitiatorCount = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cInitiatorCount.setStatus('current')
hh3cSanClientCount = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSanClientCount.setStatus('current')
hh3cLogicVolumeResource = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2))
hh3cLvCreateIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 1), Hh3cLvIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvCreateIndex.setStatus('current')
hh3cLvTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cLvTable.setStatus('current')
hh3cLvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cLvIndex"))
if mibBuilder.loadTexts: hh3cLvEntry.setStatus('current')
hh3cLvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 1), Hh3cLvIDType())
if mibBuilder.loadTexts: hh3cLvIndex.setStatus('current')
hh3cLvName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvName.setStatus('current')
hh3cLvTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 3), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvTotalSize.setStatus('current')
hh3cLvCreateRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 4), Hh3cRaidIDType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvCreateRaidUuid.setStatus('current')
hh3cLvCreateRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 5), Integer32()).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvCreateRaidSize.setStatus('current')
hh3cLvSedInquiryStringKeep = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvSedInquiryStringKeep.setStatus('current')
hh3cLvSedRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 7), Hh3cRaidIDType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvSedRaidUuid.setStatus('current')
hh3cLvState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("usable", 1), ("unusable", 2), ("conflict", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvState.setStatus('current')
hh3cLvAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("use", 1), ("unused", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvAssigned.setStatus('current')
hh3cLvType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("virtual", 1), ("direct", 2), ("serviceEnabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvType.setStatus('current')
hh3cLvExtendTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvExtendTimes.setStatus('current')
hh3cLvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 2, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvRowStatus.setStatus('current')
hh3cLvExtTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 3), )
if mibBuilder.loadTexts: hh3cLvExtTable.setStatus('current')
hh3cLvExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 3, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cLvIndex"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cLvRaidUuid"))
if mibBuilder.loadTexts: hh3cLvExtEntry.setStatus('current')
hh3cLvRaidUuid = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 3, 1, 1), Hh3cRaidIDType())
if mibBuilder.loadTexts: hh3cLvRaidUuid.setStatus('current')
hh3cLvExtSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setUnits('MB').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvExtSize.setStatus('current')
hh3cLvRaidSize = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 3, 1, 3), Integer32()).setUnits('MB').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cLvRaidSize.setStatus('current')
hh3cLvExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cLvExtRowStatus.setStatus('current')
hh3cTargetResource = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4))
hh3cTargetCreateIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTargetCreateIndex.setStatus('current')
hh3cTargetTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 2), )
if mibBuilder.loadTexts: hh3cTargetTable.setStatus('current')
hh3cTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 2, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetId"))
if mibBuilder.loadTexts: hh3cTargetEntry.setStatus('current')
hh3cTargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cTargetId.setStatus('current')
hh3cTargetName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 223))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTargetName.setStatus('current')
hh3cTargetMinLun = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTargetMinLun.setStatus('current')
hh3cTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 4, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTargetRowStatus.setStatus('current')
hh3cTargetAddressTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 5), )
if mibBuilder.loadTexts: hh3cTargetAddressTable.setStatus('current')
hh3cTargetAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 5, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetId"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetIpAddrType"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetIpAddress"))
if mibBuilder.loadTexts: hh3cTargetAddressEntry.setStatus('current')
hh3cTargetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 5, 1, 1), InetAddress())
if mibBuilder.loadTexts: hh3cTargetIpAddress.setStatus('current')
hh3cTargetIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 5, 1, 2), InetAddressType())
if mibBuilder.loadTexts: hh3cTargetIpAddrType.setStatus('current')
hh3cTargetIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTargetIpRowStatus.setStatus('current')
hh3cTargetLvAssignTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 6), )
if mibBuilder.loadTexts: hh3cTargetLvAssignTable.setStatus('current')
hh3cTargetLvAssignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 6, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetId"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cLvIndex"))
if mibBuilder.loadTexts: hh3cTargetLvAssignEntry.setStatus('current')
hh3cTargetLvLun = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTargetLvLun.setStatus('current')
hh3cTargetLvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTargetLvRowStatus.setStatus('current')
hh3cInitiatorResource = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7))
hh3cInitiatorCreateIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cInitiatorCreateIndex.setStatus('current')
hh3cInitiatorTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7, 2), )
if mibBuilder.loadTexts: hh3cInitiatorTable.setStatus('current')
hh3cInitiatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7, 2, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cSanClientId"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cInitiatorId"))
if mibBuilder.loadTexts: hh3cInitiatorEntry.setStatus('current')
hh3cInitiatorId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cInitiatorId.setStatus('current')
hh3cInitiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 223))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cInitiatorName.setStatus('current')
hh3cInitiatorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 7, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cInitiatorRowStatus.setStatus('current')
hh3cTargetInitiatorAssociateTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8), )
if mibBuilder.loadTexts: hh3cTargetInitiatorAssociateTable.setStatus('current')
hh3cTargetInitiatorAssociateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetId"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cInitiatorId"))
if mibBuilder.loadTexts: hh3cTargetInitiatorAssociateEntry.setStatus('current')
hh3cTIAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("nonexclusive", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTIAccessMode.setStatus('current')
hh3cTIChap = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8, 1, 2), Hh3cStorageEnableState().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTIChap.setStatus('current')
hh3cTIUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTIUserName.setStatus('current')
hh3cTIPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTIPassword.setStatus('current')
hh3cTIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cTIRowStatus.setStatus('current')
hh3cTISessionTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 9), )
if mibBuilder.loadTexts: hh3cTISessionTable.setStatus('current')
hh3cTISessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 9, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTargetId"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cTISessionId"))
if mibBuilder.loadTexts: hh3cTISessionEntry.setStatus('current')
hh3cTISessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 9, 1, 1), Hh3cSessionIDType())
if mibBuilder.loadTexts: hh3cTISessionId.setStatus('current')
hh3cTISessionConnectionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTISessionConnectionCount.setStatus('current')
hh3cTISessionInitiatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 223))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cTISessionInitiatorName.setStatus('current')
hh3cSanClientResource = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10))
hh3cSanClientCreateIndex = MibScalar((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cSanClientCreateIndex.setStatus('current')
hh3cSanClientTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2), )
if mibBuilder.loadTexts: hh3cSanClientTable.setStatus('current')
hh3cSanClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cSanClientId"))
if mibBuilder.loadTexts: hh3cSanClientEntry.setStatus('current')
hh3cSanClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hh3cSanClientId.setStatus('current')
hh3cSanClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSanClientName.setStatus('current')
hh3cSanClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("iscsi", 1), ("fc", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSanClientType.setStatus('current')
hh3cFcInitiatorWwpnList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1, 4), Hh3cWwpnListType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcInitiatorWwpnList.setStatus('current')
hh3cFcAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("read", 1), ("write", 2), ("nonexclusive", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcAccessMode.setStatus('current')
hh3cSanClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 10, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cSanClientRowStatus.setStatus('current')
hh3cFcLogicResourceTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 11), )
if mibBuilder.loadTexts: hh3cFcLogicResourceTable.setStatus('current')
hh3cFcLogicResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 11, 1), ).setIndexNames((0, "HH3C-LOGIC-VOLUME-MIB", "hh3cSanClientId"), (0, "HH3C-LOGIC-VOLUME-MIB", "hh3cLvIndex"))
if mibBuilder.loadTexts: hh3cFcLogicResourceEntry.setStatus('current')
hh3cFcLvLun = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cFcLvLun.setStatus('current')
hh3cFcTargetWwpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 11, 1, 2), Hh3cWwpnListType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcTargetWwpnName.setStatus('current')
hh3cFcInitiatorWwpnName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 11, 1, 3), Hh3cWwpnListType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcInitiatorWwpnName.setStatus('current')
hh3cFcLvRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 10, 5, 1, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cFcLvRowStatus.setStatus('current')
mibBuilder.exportSymbols("HH3C-LOGIC-VOLUME-MIB", hh3cLvExtTable=hh3cLvExtTable, hh3cSanClientCreateIndex=hh3cSanClientCreateIndex, hh3cLvName=hh3cLvName, hh3cTIUserName=hh3cTIUserName, hh3cFcTargetWwpnName=hh3cFcTargetWwpnName, hh3cFcInitiatorWwpnList=hh3cFcInitiatorWwpnList, hh3cSanClientResource=hh3cSanClientResource, hh3cLvExtSize=hh3cLvExtSize, hh3cFcLvRowStatus=hh3cFcLvRowStatus, hh3cInitiatorRowStatus=hh3cInitiatorRowStatus, hh3cTargetInitiatorAssociateTable=hh3cTargetInitiatorAssociateTable, hh3cLvTotalSize=hh3cLvTotalSize, hh3cLvEntry=hh3cLvEntry, hh3cLvExtRowStatus=hh3cLvExtRowStatus, hh3cInitiatorEntry=hh3cInitiatorEntry, hh3cTargetTable=hh3cTargetTable, hh3cTargetIpRowStatus=hh3cTargetIpRowStatus, hh3cTargetAddressTable=hh3cTargetAddressTable, hh3cLvCreateRaidSize=hh3cLvCreateRaidSize, hh3cInitiatorId=hh3cInitiatorId, hh3cTISessionInitiatorName=hh3cTISessionInitiatorName, hh3cTargetIpAddress=hh3cTargetIpAddress, hh3cInitiatorResource=hh3cInitiatorResource, hh3cTargetMinLun=hh3cTargetMinLun, hh3cLvSedInquiryStringKeep=hh3cLvSedInquiryStringKeep, hh3cFcLvLun=hh3cFcLvLun, hh3cTIPassword=hh3cTIPassword, hh3cTISessionTable=hh3cTISessionTable, hh3cLvMibObjects=hh3cLvMibObjects, hh3cInitiatorName=hh3cInitiatorName, PYSNMP_MODULE_ID=hh3cLogicVolume, hh3cSanClientTable=hh3cSanClientTable, hh3cSanClientCount=hh3cSanClientCount, hh3cLvAssigned=hh3cLvAssigned, hh3cLvRaidUuid=hh3cLvRaidUuid, hh3cLvRaidSize=hh3cLvRaidSize, hh3cLogicResourceCapacityObject=hh3cLogicResourceCapacityObject, hh3cLvSedRaidUuid=hh3cLvSedRaidUuid, hh3cTargetCreateIndex=hh3cTargetCreateIndex, hh3cLvTable=hh3cLvTable, hh3cLvState=hh3cLvState, hh3cLvCount=hh3cLvCount, hh3cLvCreateIndex=hh3cLvCreateIndex, hh3cFcLogicResourceTable=hh3cFcLogicResourceTable, hh3cTargetLvAssignEntry=hh3cTargetLvAssignEntry, hh3cFcInitiatorWwpnName=hh3cFcInitiatorWwpnName, hh3cTargetInitiatorAssociateEntry=hh3cTargetInitiatorAssociateEntry, hh3cTIChap=hh3cTIChap, hh3cLvRowStatus=hh3cLvRowStatus, hh3cLvIndex=hh3cLvIndex, hh3cLvMaxSize=hh3cLvMaxSize, hh3cInitiatorCreateIndex=hh3cInitiatorCreateIndex, hh3cLvType=hh3cLvType, hh3cTISessionId=hh3cTISessionId, hh3cTISessionConnectionCount=hh3cTISessionConnectionCount, hh3cTargetName=hh3cTargetName, hh3cTargetRowStatus=hh3cTargetRowStatus, hh3cSanClientId=hh3cSanClientId, hh3cTargetIpAddrType=hh3cTargetIpAddrType, hh3cTISessionEntry=hh3cTISessionEntry, hh3cTargetLvRowStatus=hh3cTargetLvRowStatus, hh3cFcAccessMode=hh3cFcAccessMode, hh3cTIRowStatus=hh3cTIRowStatus, hh3cLvExtendTimes=hh3cLvExtendTimes, hh3cInitiatorTable=hh3cInitiatorTable, hh3cSanClientType=hh3cSanClientType, hh3cSanClientEntry=hh3cSanClientEntry, hh3cLogicVolume=hh3cLogicVolume, hh3cTargetLvAssignTable=hh3cTargetLvAssignTable, hh3cTIAccessMode=hh3cTIAccessMode, hh3cTargetResource=hh3cTargetResource, hh3cSanClientName=hh3cSanClientName, hh3cInitiatorCount=hh3cInitiatorCount, hh3cLogicVolumeResource=hh3cLogicVolumeResource, hh3cLvExtEntry=hh3cLvExtEntry, hh3cSanClientRowStatus=hh3cSanClientRowStatus, hh3cTargetId=hh3cTargetId, hh3cTargetCount=hh3cTargetCount, hh3cTargetLvLun=hh3cTargetLvLun, hh3cFcLogicResourceEntry=hh3cFcLogicResourceEntry, hh3cLvCreateRaidUuid=hh3cLvCreateRaidUuid, hh3cTargetAddressEntry=hh3cTargetAddressEntry, hh3cTargetEntry=hh3cTargetEntry)
