#
# PySNMP MIB module Wellfleet-BGP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-BGP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:32:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Bits, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, ModuleIdentity, MibIdentifier, Counter32, IpAddress, Counter64, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "ModuleIdentity", "MibIdentifier", "Counter32", "IpAddress", "Counter64", "Gauge32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfBgpGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfBgpGroup")
wfBgpGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1))
wfBgp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1))
wfBgp3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2))
wfBgp4Group = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 3))
wfBgpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpDelete.setStatus('mandatory')
wfBgpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpDisable.setStatus('mandatory')
wfBgpState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpresent", 5))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpState.setStatus('mandatory')
wfBgpIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpIdentifier.setStatus('mandatory')
wfBgpLocalAs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpLocalAs.setStatus('mandatory')
wfBgpEbgpDebugSwitch = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpEbgpDebugSwitch.setStatus('mandatory')
wfBgpVersion = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpVersion.setStatus('mandatory')
wfBgpIntraAsIbgpRouting = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpIntraAsIbgpRouting.setStatus('mandatory')
wfIbgpFromProtocols = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bgp", 1), ("all", 2))).clone('bgp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfIbgpFromProtocols.setStatus('mandatory')
wfBgpIntAdvTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpIntAdvTimer.setStatus('mandatory')
wfBgpUsedRoutes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpUsedRoutes.setStatus('mandatory')
wfBgpTotalRoutes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpTotalRoutes.setStatus('mandatory')
wfBgpTotalPaths = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpTotalPaths.setStatus('mandatory')
wfBgpMaxRedundantIbgpRoutes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpMaxRedundantIbgpRoutes.setStatus('mandatory')
wfBgpRouteRequestSwitch = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpRouteRequestSwitch.setStatus('mandatory')
wfBgpConnCollisionDetect = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpConnCollisionDetect.setStatus('mandatory')
wfBgpRsTopology = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("client", 2), ("mesh", 3), ("tree", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpRsTopology.setStatus('mandatory')
wfBgpClusterIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 18), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpClusterIdentifier.setStatus('mandatory')
wfBgpDynamicPolChangeSupport = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpDynamicPolChangeSupport.setStatus('mandatory')
wfBgpSoloistSlots = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 20), Gauge32().clone(4294705152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpSoloistSlots.setStatus('mandatory')
wfBgpSoloistSlot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpSoloistSlot.setStatus('mandatory')
wfBgpSubnetAggregation = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpSubnetAggregation.setStatus('mandatory')
wfBgpBlackHoleSupport = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("drop", 2), ("reject", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpBlackHoleSupport.setStatus('mandatory')
wfBgpMedComparison = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpMedComparison.setStatus('mandatory')
wfBgpIbgpReflection = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpIbgpReflection.setStatus('mandatory')
wfBgpIbgpEcmpMethod = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("route-balance", 2), ("traffic-balance", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpIbgpEcmpMethod.setStatus('mandatory')
wfBgpLocalPrefCalc = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpLocalPrefCalc.setStatus('mandatory')
wfBgpConfedIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpConfedIdentifier.setStatus('mandatory')
wfBgpConfedPeers = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 29), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpConfedPeers.setStatus('mandatory')
wfBgpIgpInterAction = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpIgpInterAction.setStatus('mandatory')
wfBgp3 = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 1))
wfBgp3Delete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgp3Delete.setStatus('mandatory')
wfBgp3Disable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgp3Disable.setStatus('mandatory')
wfBgp3State = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpresent", 5))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp3State.setStatus('mandatory')
wfBgp3IntraAsIbgpRouting = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgp3IntraAsIbgpRouting.setStatus('obsolete')
wfBgp3IntAdvTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgp3IntAdvTimer.setStatus('obsolete')
wfBgp3RipRules = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgp3RipRules.setStatus('obsolete')
wfBgp3UsedRoutes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp3UsedRoutes.setStatus('obsolete')
wfBgp3TotalRoutes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp3TotalRoutes.setStatus('obsolete')
wfBgp4 = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 3, 1))
wfBgp4Delete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgp4Delete.setStatus('mandatory')
wfBgp4Disable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgp4Disable.setStatus('mandatory')
wfBgp4State = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpresent", 5))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp4State.setStatus('mandatory')
wfBgpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2), )
if mibBuilder.loadTexts: wfBgpPeerTable.setStatus('mandatory')
wfBgpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1), ).setIndexNames((0, "Wellfleet-BGP-MIB", "wfBgpPeerLocalAddr"), (0, "Wellfleet-BGP-MIB", "wfBgpPeerRemoteAddr"))
if mibBuilder.loadTexts: wfBgpPeerEntry.setStatus('mandatory')
wfBgpPeerDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerDelete.setStatus('mandatory')
wfBgpPeerDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerDisable.setStatus('mandatory')
wfBgpPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpresent", 5))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerState.setStatus('mandatory')
wfBgpPeerLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerLocalAddr.setStatus('mandatory')
wfBgpPeerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerLocalPort.setStatus('mandatory')
wfBgpPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerRemoteAddr.setStatus('mandatory')
wfBgpPeerRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerRemotePort.setStatus('mandatory')
wfBgpPeerMinVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("bgp3", 3), ("bgp4", 4))).clone('bgp4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerMinVersion.setStatus('mandatory')
wfBgpPeerMaxVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("bgp3", 3), ("bgp4", 4))).clone('bgp4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerMaxVersion.setStatus('mandatory')
wfBgpPeerRemoteAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerRemoteAs.setStatus('mandatory')
wfBgpPeerExtAdvTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerExtAdvTimer.setStatus('mandatory')
wfBgpPeerConnectRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerConnectRetry.setStatus('mandatory')
wfBgpPeerCfgHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 2147483647)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerCfgHoldtime.setStatus('mandatory')
wfBgpPeerHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerHoldtime.setStatus('mandatory')
wfBgpPeerCfgKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerCfgKeepAlive.setStatus('mandatory')
wfBgpPeerKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerKeepAlive.setStatus('mandatory')
wfBgpPeerPathAttrSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerPathAttrSwitch.setStatus('obsolete')
wfBgpPeerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 18), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerIdentifier.setStatus('mandatory')
wfBgpPeerConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerConnState.setStatus('mandatory')
wfBgpPeerNegotiatedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerNegotiatedVersion.setStatus('mandatory')
wfBgpPeerInUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerInUpdates.setStatus('mandatory')
wfBgpPeerOutUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerOutUpdates.setStatus('mandatory')
wfBgpPeerInTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerInTotalMessages.setStatus('mandatory')
wfBgpPeerOutTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerOutTotalMessages.setStatus('mandatory')
wfBgpPeerLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerLastError.setStatus('mandatory')
wfBgpPeerTotalRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerTotalRoutes.setStatus('mandatory')
wfBgpPeerFsmEstablishedTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerFsmEstablishedTransitions.setStatus('mandatory')
wfBgpPeerFsmEstablishedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerFsmEstablishedTime.setStatus('mandatory')
wfBgpPeerInUpdateElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerInUpdateElapsedTime.setStatus('mandatory')
wfBgpPeerMinASOriginationInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerMinASOriginationInterval.setStatus('mandatory')
wfBgpPeerLocalAS = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerLocalAS.setStatus('mandatory')
wfBgpPeerMaxUpdateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 4096)).clone(800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerMaxUpdateSize.setStatus('mandatory')
wfBgpPeerRouteEchoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerRouteEchoSwitch.setStatus('mandatory')
wfBgpPeerDiscardDuplicateRouteSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerDiscardDuplicateRouteSwitch.setStatus('mandatory')
wfBgpPeerRSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("server-client", 2), ("server-internal", 3), ("server-external", 4), ("reflector-client", 5), ("reflector-internal", 6), ("reflector-external", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerRSMode.setStatus('mandatory')
wfBgpPeerRSIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerRSIdentifier.setStatus('obsolete')
wfBgpPeerCfgDelayGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerCfgDelayGranularity.setStatus('mandatory')
wfBgpPeerDelayGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerDelayGranularity.setStatus('mandatory')
wfBgpPeerLastErrorSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerLastErrorSrc.setStatus('mandatory')
wfBgpPeerNexthopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerNexthopSelf.setStatus('mandatory')
wfBgpPeerASLoopDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerASLoopDetect.setStatus('mandatory')
wfBgpPeerBgpEcmpMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("route-balance", 2), ("traffic-balance", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerBgpEcmpMethod.setStatus('mandatory')
wfBgpPeerDampenedRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPeerDampenedRoutes.setStatus('mandatory')
wfBgpPeerTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerTTL.setStatus('mandatory')
wfBgpPeerTcpAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("md5", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerTcpAuthentication.setStatus('mandatory')
wfBgpPeerTcpMd5KeyStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear-text", 1), ("encrypted", 2))).clone('clear-text')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerTcpMd5KeyStorage.setStatus('mandatory')
wfBgpPeerTcpMd5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 2, 1, 47), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpPeerTcpMd5Key.setStatus('mandatory')
wfBgpVirtualPeerTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 6), )
if mibBuilder.loadTexts: wfBgpVirtualPeerTable.setStatus('mandatory')
wfBgpVirtualPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 6, 1), ).setIndexNames((0, "Wellfleet-BGP-MIB", "wfBgpVirtualPeerIdentifier"), (0, "Wellfleet-BGP-MIB", "wfBgpVirtualPeerLocalAddr"), (0, "Wellfleet-BGP-MIB", "wfBgpVirtualPeerRemoteAddr"))
if mibBuilder.loadTexts: wfBgpVirtualPeerEntry.setStatus('mandatory')
wfBgpVirtualPeerLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpVirtualPeerLocalAddr.setStatus('mandatory')
wfBgpVirtualPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpVirtualPeerRemoteAddr.setStatus('mandatory')
wfBgpVirtualPeerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpVirtualPeerIdentifier.setStatus('mandatory')
wfBgpVirtualPeerInUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpVirtualPeerInUpdates.setStatus('mandatory')
wfBgpVirtualPeerTotalRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpVirtualPeerTotalRoutes.setStatus('mandatory')
wfBgpVirtualPeerInUpdateElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpVirtualPeerInUpdateElapsedTime.setStatus('mandatory')
wfBgpAsWeightTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3), )
if mibBuilder.loadTexts: wfBgpAsWeightTable.setStatus('mandatory')
wfBgpAsWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1), ).setIndexNames((0, "Wellfleet-BGP-MIB", "wfBgpAsWeightNumber"))
if mibBuilder.loadTexts: wfBgpAsWeightEntry.setStatus('mandatory')
wfBgpAsWeightDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpAsWeightDelete.setStatus('mandatory')
wfBgpAsWeightDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpAsWeightDisable.setStatus('mandatory')
wfBgpAsWeightState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("invalid", 4), ("notpresent", 5))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpAsWeightState.setStatus('mandatory')
wfBgpAsWeightNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpAsWeightNumber.setStatus('mandatory')
wfBgpAsWeightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpAsWeightValue.setStatus('mandatory')
wfBgpAsWeightValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("default2", 8))).clone('default2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpAsWeightValue2.setStatus('mandatory')
wfBgpAsWeightValue3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("default3", 8))).clone('default3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpAsWeightValue3.setStatus('mandatory')
wfBgpAsWeightValue4 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("default4", 8))).clone('default4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpAsWeightValue4.setStatus('mandatory')
wfBgpAsWeightValue5 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("default5", 8))).clone('default5')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpAsWeightValue5.setStatus('mandatory')
wfBgpAsWeightValue6 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("default6", 8))).clone('default6')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpAsWeightValue6.setStatus('mandatory')
wfBgpAsWeightValue7 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("default7", 8))).clone('default7')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpAsWeightValue7.setStatus('mandatory')
wfBgpAsWeightValue8 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8))).clone(namedValues=NamedValues(("default8", 8))).clone('default8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpAsWeightValue8.setStatus('mandatory')
wfBgp3PathAttrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 2), )
if mibBuilder.loadTexts: wfBgp3PathAttrTable.setStatus('obsolete')
wfBgp3PathAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 2, 1), ).setIndexNames((0, "Wellfleet-BGP-MIB", "wfBgp3PathAttrDestNetwork"), (0, "Wellfleet-BGP-MIB", "wfBgp3PathAttrPeer"))
if mibBuilder.loadTexts: wfBgp3PathAttrEntry.setStatus('obsolete')
wfBgp3PathAttrPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp3PathAttrPeer.setStatus('obsolete')
wfBgp3PathAttrDestNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp3PathAttrDestNetwork.setStatus('obsolete')
wfBgp3PathAttrOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp3PathAttrOrigin.setStatus('obsolete')
wfBgp3PathAttrASPath = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp3PathAttrASPath.setStatus('obsolete')
wfBgp3PathAttrNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp3PathAttrNextHop.setStatus('obsolete')
wfBgp3PathAttrInterASMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp3PathAttrInterASMetric.setStatus('obsolete')
wfBgp3PathAttrASPathWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp3PathAttrASPathWeight.setStatus('obsolete')
wfBgp3PathAttrBgpPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp3PathAttrBgpPreference.setStatus('obsolete')
wfBgp3PathAttrBest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgp3PathAttrBest.setStatus('obsolete')
wfBgpPathAttrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4), )
if mibBuilder.loadTexts: wfBgpPathAttrTable.setStatus('obsolete')
wfBgpPathAttrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1), ).setIndexNames((0, "Wellfleet-BGP-MIB", "wfBgpPathAttrIpAddrPrefix"), (0, "Wellfleet-BGP-MIB", "wfBgpPathAttrIpAddrPrefixLen"), (0, "Wellfleet-BGP-MIB", "wfBgpPathAttrPeer"))
if mibBuilder.loadTexts: wfBgpPathAttrEntry.setStatus('obsolete')
wfBgpPathAttrIpAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrIpAddrPrefix.setStatus('obsolete')
wfBgpPathAttrIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrIpAddrPrefixLen.setStatus('obsolete')
wfBgpPathAttrPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrPeer.setStatus('obsolete')
wfBgpPathAttrOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrOrigin.setStatus('obsolete')
wfBgpPathAttrASPathSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrASPathSegment.setStatus('obsolete')
wfBgpPathAttrNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrNextHop.setStatus('obsolete')
wfBgpPathAttrMultiExitDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrMultiExitDisc.setStatus('obsolete')
wfBgpPathAttrLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrLocalPref.setStatus('obsolete')
wfBgpPathAttrAtomicAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrAtomicAggregate.setStatus('obsolete')
wfBgpPathAttrAggregatorAS = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrAggregatorAS.setStatus('obsolete')
wfBgpPathAttrAggregatorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrAggregatorAddr.setStatus('obsolete')
wfBgpPathAttrCalcLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrCalcLocalPref.setStatus('obsolete')
wfBgpPathAttrBest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("bestused", 3), ("used", 4))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrBest.setStatus('obsolete')
wfBgpPathAttrUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrUnknown.setStatus('obsolete')
wfBgpPathAttrImporterID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 15), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrImporterID.setStatus('obsolete')
wfBgpPathAttrClusterID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrClusterID.setStatus('obsolete')
wfBgpPathAttrCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrCommunity.setStatus('obsolete')
wfBgpPathAttrCalcMED = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttrCalcMED.setStatus('obsolete')
wfBgpDbgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 5), )
if mibBuilder.loadTexts: wfBgpDbgTable.setStatus('mandatory')
wfBgpDbgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 5, 1), ).setIndexNames((0, "Wellfleet-BGP-MIB", "wfBgpDbgLocAddr"), (0, "Wellfleet-BGP-MIB", "wfBgpDbgRemoteAddr"))
if mibBuilder.loadTexts: wfBgpDbgEntry.setStatus('mandatory')
wfBgpDbgCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2))).clone('create')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpDbgCreate.setStatus('mandatory')
wfBgpDbgLocAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpDbgLocAddr.setStatus('mandatory')
wfBgpDbgRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpDbgRemoteAddr.setStatus('mandatory')
wfBgpDbgMsgLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2031616, 65536, 131072, 262144, 524288, 1048576))).clone(namedValues=NamedValues(("all", 2031616), ("debug", 65536), ("info", 131072), ("warning", 262144), ("fault", 524288), ("trace", 1048576))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpDbgMsgLevel.setStatus('mandatory')
wfBgpDbgMsgTraceSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 32, 64, 128))).clone(namedValues=NamedValues(("disabled", 1), ("open", 16), ("update", 32), ("notification", 64), ("keepalive", 128))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpDbgMsgTraceSwitch.setStatus('mandatory')
wfBgpDbgLogCode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpDbgLogCode.setStatus('mandatory')
wfBgpDbgLogCodeDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpDbgLogCodeDisable.setStatus('mandatory')
wfBgpDbgCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 5, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpDbgCodes.setStatus('mandatory')
wfBgpDbgBootCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 5, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpDbgBootCodes.setStatus('mandatory')
wfBgpPathAttributeTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7), )
if mibBuilder.loadTexts: wfBgpPathAttributeTable.setStatus('mandatory')
wfBgpPathAttributeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1), ).setIndexNames((0, "Wellfleet-BGP-MIB", "wfBgpPathAttributeIpAddrPrefix"), (0, "Wellfleet-BGP-MIB", "wfBgpPathAttributeIpAddrPrefixLen"), (0, "Wellfleet-BGP-MIB", "wfBgpPathAttributeImporterID"), (0, "Wellfleet-BGP-MIB", "wfBgpPathAttributePeer"))
if mibBuilder.loadTexts: wfBgpPathAttributeEntry.setStatus('mandatory')
wfBgpPathAttributeIpAddrPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeIpAddrPrefix.setStatus('mandatory')
wfBgpPathAttributeIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeIpAddrPrefixLen.setStatus('mandatory')
wfBgpPathAttributeImporterID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeImporterID.setStatus('mandatory')
wfBgpPathAttributePeer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributePeer.setStatus('mandatory')
wfBgpPathAttributeOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("igp", 1), ("egp", 2), ("incomplete", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeOrigin.setStatus('mandatory')
wfBgpPathAttributeASPathSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeASPathSegment.setStatus('mandatory')
wfBgpPathAttributeNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeNextHop.setStatus('mandatory')
wfBgpPathAttributeMultiExitDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeMultiExitDisc.setStatus('mandatory')
wfBgpPathAttributeLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeLocalPref.setStatus('mandatory')
wfBgpPathAttributeAtomicAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeAtomicAggregate.setStatus('mandatory')
wfBgpPathAttributeAggregatorAS = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeAggregatorAS.setStatus('mandatory')
wfBgpPathAttributeAggregatorAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeAggregatorAddr.setStatus('mandatory')
wfBgpPathAttributeCalcLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeCalcLocalPref.setStatus('mandatory')
wfBgpPathAttributeBest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("bestused", 3), ("used", 4))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeBest.setStatus('mandatory')
wfBgpPathAttributeUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeUnknown.setStatus('mandatory')
wfBgpPathAttributeClusterID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeClusterID.setStatus('mandatory')
wfBgpPathAttributeCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeCommunity.setStatus('mandatory')
wfBgpPathAttributeCalcMED = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeCalcMED.setStatus('mandatory')
wfBgpPathAttributeFlapPenalty = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeFlapPenalty.setStatus('mandatory')
wfBgpPathAttributeFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeFlapCount.setStatus('mandatory')
wfBgpPathAttributeRouteDampened = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 7, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("announced", 1), ("suppressed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpPathAttributeRouteDampened.setStatus('mandatory')
wfBgpRouteFlapDampeningTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 8), )
if mibBuilder.loadTexts: wfBgpRouteFlapDampeningTable.setStatus('mandatory')
wfBgpRouteFlapDampeningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 8, 1), ).setIndexNames((0, "Wellfleet-BGP-MIB", "wfBgpRouteFlapDampeningIndex"))
if mibBuilder.loadTexts: wfBgpRouteFlapDampeningEntry.setStatus('mandatory')
wfBgpRouteFlapDampeningDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpRouteFlapDampeningDelete.setStatus('mandatory')
wfBgpRouteFlapDampeningIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBgpRouteFlapDampeningIndex.setStatus('mandatory')
wfBgpRouteFlapDampeningName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpRouteFlapDampeningName.setStatus('mandatory')
wfBgpRouteFlapDampeningCutoffThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpRouteFlapDampeningCutoffThreshold.setStatus('mandatory')
wfBgpRouteFlapDampeningReuseThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000)).clone(750)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpRouteFlapDampeningReuseThreshold.setStatus('mandatory')
wfBgpRouteFlapDampeningReachableDecay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpRouteFlapDampeningReachableDecay.setStatus('mandatory')
wfBgpRouteFlapDampeningUnreachableDecay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 45)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpRouteFlapDampeningUnreachableDecay.setStatus('mandatory')
wfBgpRouteFlapDampeningMaxHoldDown = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpRouteFlapDampeningMaxHoldDown.setStatus('mandatory')
wfBgpRouteFlapDampeningMemoryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 3, 2, 5, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(45)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBgpRouteFlapDampeningMemoryLimit.setStatus('mandatory')
mibBuilder.exportSymbols("Wellfleet-BGP-MIB", wfBgp4Group=wfBgp4Group, wfBgpSoloistSlots=wfBgpSoloistSlots, wfBgpPeerLocalAS=wfBgpPeerLocalAS, wfBgpPathAttrImporterID=wfBgpPathAttrImporterID, wfBgpIbgpEcmpMethod=wfBgpIbgpEcmpMethod, wfBgp3IntraAsIbgpRouting=wfBgp3IntraAsIbgpRouting, wfBgpVirtualPeerRemoteAddr=wfBgpVirtualPeerRemoteAddr, wfBgpPeerCfgHoldtime=wfBgpPeerCfgHoldtime, wfBgpTotalRoutes=wfBgpTotalRoutes, wfBgp3PathAttrTable=wfBgp3PathAttrTable, wfBgpPeerMaxVersion=wfBgpPeerMaxVersion, wfBgpPathAttrIpAddrPrefix=wfBgpPathAttrIpAddrPrefix, wfBgpAsWeightValue5=wfBgpAsWeightValue5, wfBgpPathAttributeCalcMED=wfBgpPathAttributeCalcMED, wfBgpConfedIdentifier=wfBgpConfedIdentifier, wfBgpGeneralGroup=wfBgpGeneralGroup, wfBgpPathAttrUnknown=wfBgpPathAttrUnknown, wfBgpPeerLocalAddr=wfBgpPeerLocalAddr, wfBgp3IntAdvTimer=wfBgp3IntAdvTimer, wfBgpPathAttributeASPathSegment=wfBgpPathAttributeASPathSegment, wfBgp3PathAttrDestNetwork=wfBgp3PathAttrDestNetwork, wfBgpPeerTcpAuthentication=wfBgpPeerTcpAuthentication, wfBgpClusterIdentifier=wfBgpClusterIdentifier, wfBgpPeerRemoteAs=wfBgpPeerRemoteAs, wfBgpPeerMaxUpdateSize=wfBgpPeerMaxUpdateSize, wfBgp3State=wfBgp3State, wfBgpRouteRequestSwitch=wfBgpRouteRequestSwitch, wfBgpDbgLogCode=wfBgpDbgLogCode, wfBgpPathAttributeOrigin=wfBgpPathAttributeOrigin, wfBgpPathAttributeMultiExitDisc=wfBgpPathAttributeMultiExitDisc, wfBgp3UsedRoutes=wfBgp3UsedRoutes, wfBgpBlackHoleSupport=wfBgpBlackHoleSupport, wfBgpPeerTcpMd5KeyStorage=wfBgpPeerTcpMd5KeyStorage, wfBgpVirtualPeerIdentifier=wfBgpVirtualPeerIdentifier, wfBgpAsWeightDelete=wfBgpAsWeightDelete, wfBgpPeerCfgDelayGranularity=wfBgpPeerCfgDelayGranularity, wfBgpPathAttrCalcMED=wfBgpPathAttrCalcMED, wfBgp3PathAttrBgpPreference=wfBgp3PathAttrBgpPreference, wfBgpDbgLogCodeDisable=wfBgpDbgLogCodeDisable, wfBgpRsTopology=wfBgpRsTopology, wfBgpAsWeightValue3=wfBgpAsWeightValue3, wfBgpAsWeightNumber=wfBgpAsWeightNumber, wfBgp3PathAttrPeer=wfBgp3PathAttrPeer, wfBgpPathAttributeUnknown=wfBgpPathAttributeUnknown, wfBgp3PathAttrBest=wfBgp3PathAttrBest, wfBgpPathAttrAtomicAggregate=wfBgpPathAttrAtomicAggregate, wfBgpAsWeightValue=wfBgpAsWeightValue, wfBgpMedComparison=wfBgpMedComparison, wfBgpLocalAs=wfBgpLocalAs, wfBgpPathAttributeNextHop=wfBgpPathAttributeNextHop, wfBgpIgpInterAction=wfBgpIgpInterAction, wfBgpVirtualPeerTotalRoutes=wfBgpVirtualPeerTotalRoutes, wfBgpPeerLastErrorSrc=wfBgpPeerLastErrorSrc, wfBgpDbgEntry=wfBgpDbgEntry, wfBgpDbgMsgTraceSwitch=wfBgpDbgMsgTraceSwitch, wfBgpPathAttributeTable=wfBgpPathAttributeTable, wfBgpPathAttrMultiExitDisc=wfBgpPathAttrMultiExitDisc, wfBgpIntraAsIbgpRouting=wfBgpIntraAsIbgpRouting, wfBgpPeerEntry=wfBgpPeerEntry, wfBgpVirtualPeerTable=wfBgpVirtualPeerTable, wfBgpPathAttrTable=wfBgpPathAttrTable, wfBgp3=wfBgp3, wfBgpAsWeightValue6=wfBgpAsWeightValue6, wfBgpState=wfBgpState, wfBgpAsWeightValue4=wfBgpAsWeightValue4, wfBgpDynamicPolChangeSupport=wfBgpDynamicPolChangeSupport, wfBgpRouteFlapDampeningEntry=wfBgpRouteFlapDampeningEntry, wfBgp3PathAttrInterASMetric=wfBgp3PathAttrInterASMetric, wfBgpPeerDiscardDuplicateRouteSwitch=wfBgpPeerDiscardDuplicateRouteSwitch, wfBgpAsWeightEntry=wfBgpAsWeightEntry, wfBgpPathAttributeClusterID=wfBgpPathAttributeClusterID, wfBgp3TotalRoutes=wfBgp3TotalRoutes, wfBgpDbgLocAddr=wfBgpDbgLocAddr, wfBgpPeerState=wfBgpPeerState, wfBgpPathAttrCalcLocalPref=wfBgpPathAttrCalcLocalPref, wfBgpPeerIdentifier=wfBgpPeerIdentifier, wfBgpAsWeightValue8=wfBgpAsWeightValue8, wfBgpPathAttrAggregatorAddr=wfBgpPathAttrAggregatorAddr, wfBgpSoloistSlot=wfBgpSoloistSlot, wfBgpPeerRemoteAddr=wfBgpPeerRemoteAddr, wfBgpDbgRemoteAddr=wfBgpDbgRemoteAddr, wfBgpPeerCfgKeepAlive=wfBgpPeerCfgKeepAlive, wfBgpRouteFlapDampeningReuseThreshold=wfBgpRouteFlapDampeningReuseThreshold, wfBgpRouteFlapDampeningReachableDecay=wfBgpRouteFlapDampeningReachableDecay, wfBgpVirtualPeerEntry=wfBgpVirtualPeerEntry, wfBgpVersion=wfBgpVersion, wfBgpPathAttrPeer=wfBgpPathAttrPeer, wfBgp4State=wfBgp4State, wfBgpRouteFlapDampeningMemoryLimit=wfBgpRouteFlapDampeningMemoryLimit, wfBgpPeerMinASOriginationInterval=wfBgpPeerMinASOriginationInterval, wfBgpPeerInUpdates=wfBgpPeerInUpdates, wfBgp3Group=wfBgp3Group, wfBgpPathAttrCommunity=wfBgpPathAttrCommunity, wfBgpPeerDampenedRoutes=wfBgpPeerDampenedRoutes, wfBgpPeerTotalRoutes=wfBgpPeerTotalRoutes, wfBgpRouteFlapDampeningUnreachableDecay=wfBgpRouteFlapDampeningUnreachableDecay, wfBgpRouteFlapDampeningMaxHoldDown=wfBgpRouteFlapDampeningMaxHoldDown, wfBgpDbgTable=wfBgpDbgTable, wfBgpPeerLocalPort=wfBgpPeerLocalPort, wfBgpRouteFlapDampeningTable=wfBgpRouteFlapDampeningTable, wfBgpAsWeightDisable=wfBgpAsWeightDisable, wfBgpPathAttrOrigin=wfBgpPathAttrOrigin, wfBgpConnCollisionDetect=wfBgpConnCollisionDetect, wfBgpPeerTable=wfBgpPeerTable, wfBgp3PathAttrOrigin=wfBgp3PathAttrOrigin, wfBgpUsedRoutes=wfBgpUsedRoutes, wfBgpPeerTcpMd5Key=wfBgpPeerTcpMd5Key, wfBgpPathAttributeBest=wfBgpPathAttributeBest, wfBgpPathAttributeFlapPenalty=wfBgpPathAttributeFlapPenalty, wfBgpDisable=wfBgpDisable, wfBgpPathAttrAggregatorAS=wfBgpPathAttrAggregatorAS, wfBgpPathAttrNextHop=wfBgpPathAttrNextHop, wfBgpPathAttributeCalcLocalPref=wfBgpPathAttributeCalcLocalPref, wfBgpPeerFsmEstablishedTransitions=wfBgpPeerFsmEstablishedTransitions, wfBgpRouteFlapDampeningName=wfBgpRouteFlapDampeningName, wfBgpLocalPrefCalc=wfBgpLocalPrefCalc, wfBgpMaxRedundantIbgpRoutes=wfBgpMaxRedundantIbgpRoutes, wfBgpPeerDisable=wfBgpPeerDisable, wfBgpPathAttrLocalPref=wfBgpPathAttrLocalPref, wfBgpPathAttributePeer=wfBgpPathAttributePeer, wfBgpPathAttributeEntry=wfBgpPathAttributeEntry, wfBgpPeerOutTotalMessages=wfBgpPeerOutTotalMessages, wfBgp3Disable=wfBgp3Disable, wfBgpPathAttributeAggregatorAS=wfBgpPathAttributeAggregatorAS, wfBgpConfedPeers=wfBgpConfedPeers, wfBgpPathAttrBest=wfBgpPathAttrBest, wfBgpAsWeightValue7=wfBgpAsWeightValue7, wfBgpDbgMsgLevel=wfBgpDbgMsgLevel, wfBgpAsWeightTable=wfBgpAsWeightTable, wfBgpIdentifier=wfBgpIdentifier, wfBgpPeerHoldtime=wfBgpPeerHoldtime, wfBgpRouteFlapDampeningIndex=wfBgpRouteFlapDampeningIndex, wfBgp=wfBgp, wfBgpPeerRouteEchoSwitch=wfBgpPeerRouteEchoSwitch, wfBgp3PathAttrASPathWeight=wfBgp3PathAttrASPathWeight, wfBgpPeerBgpEcmpMethod=wfBgpPeerBgpEcmpMethod, wfBgpPeerInTotalMessages=wfBgpPeerInTotalMessages, wfBgpTotalPaths=wfBgpTotalPaths, wfBgp3Delete=wfBgp3Delete, wfBgpVirtualPeerInUpdateElapsedTime=wfBgpVirtualPeerInUpdateElapsedTime, wfBgpPeerPathAttrSwitch=wfBgpPeerPathAttrSwitch, wfBgpPathAttrClusterID=wfBgpPathAttrClusterID, wfBgpPathAttributeCommunity=wfBgpPathAttributeCommunity, wfBgpRouteFlapDampeningCutoffThreshold=wfBgpRouteFlapDampeningCutoffThreshold, wfBgpSubnetAggregation=wfBgpSubnetAggregation, wfBgpPeerOutUpdates=wfBgpPeerOutUpdates, wfBgpPeerTTL=wfBgpPeerTTL, wfBgpAsWeightValue2=wfBgpAsWeightValue2, wfBgpRouteFlapDampeningDelete=wfBgpRouteFlapDampeningDelete, wfBgpPathAttributeAggregatorAddr=wfBgpPathAttributeAggregatorAddr, wfBgpPathAttributeLocalPref=wfBgpPathAttributeLocalPref, wfBgpPathAttributeAtomicAggregate=wfBgpPathAttributeAtomicAggregate, wfBgpPeerNegotiatedVersion=wfBgpPeerNegotiatedVersion, wfBgpIbgpReflection=wfBgpIbgpReflection, wfBgpDelete=wfBgpDelete, wfBgpPathAttributeIpAddrPrefix=wfBgpPathAttributeIpAddrPrefix, wfBgpPeerASLoopDetect=wfBgpPeerASLoopDetect, wfBgpPathAttributeFlapCount=wfBgpPathAttributeFlapCount, wfBgpPeerMinVersion=wfBgpPeerMinVersion, wfBgp3PathAttrASPath=wfBgp3PathAttrASPath, wfIbgpFromProtocols=wfIbgpFromProtocols, wfBgpPeerRemotePort=wfBgpPeerRemotePort, wfBgpDbgCreate=wfBgpDbgCreate, wfBgpIntAdvTimer=wfBgpIntAdvTimer, wfBgpPeerRSIdentifier=wfBgpPeerRSIdentifier, wfBgpEbgpDebugSwitch=wfBgpEbgpDebugSwitch, wfBgpPeerInUpdateElapsedTime=wfBgpPeerInUpdateElapsedTime, wfBgpPathAttributeRouteDampened=wfBgpPathAttributeRouteDampened, wfBgpPeerRSMode=wfBgpPeerRSMode, wfBgp4=wfBgp4, wfBgpPeerNexthopSelf=wfBgpPeerNexthopSelf, wfBgpVirtualPeerLocalAddr=wfBgpVirtualPeerLocalAddr, wfBgpPeerDelayGranularity=wfBgpPeerDelayGranularity, wfBgpPeerKeepAlive=wfBgpPeerKeepAlive, wfBgp3PathAttrNextHop=wfBgp3PathAttrNextHop, wfBgp3PathAttrEntry=wfBgp3PathAttrEntry, wfBgp3RipRules=wfBgp3RipRules, wfBgpPeerConnectRetry=wfBgpPeerConnectRetry, wfBgpPeerExtAdvTimer=wfBgpPeerExtAdvTimer, wfBgpVirtualPeerInUpdates=wfBgpVirtualPeerInUpdates, wfBgpDbgCodes=wfBgpDbgCodes, wfBgpAsWeightState=wfBgpAsWeightState, wfBgpPathAttrIpAddrPrefixLen=wfBgpPathAttrIpAddrPrefixLen, wfBgpPathAttrEntry=wfBgpPathAttrEntry, wfBgpPathAttributeIpAddrPrefixLen=wfBgpPathAttributeIpAddrPrefixLen, wfBgpPathAttrASPathSegment=wfBgpPathAttrASPathSegment, wfBgpDbgBootCodes=wfBgpDbgBootCodes, wfBgpPathAttributeImporterID=wfBgpPathAttributeImporterID, wfBgpPeerLastError=wfBgpPeerLastError, wfBgpPeerDelete=wfBgpPeerDelete, wfBgpPeerConnState=wfBgpPeerConnState, wfBgp4Delete=wfBgp4Delete, wfBgp4Disable=wfBgp4Disable, wfBgpPeerFsmEstablishedTime=wfBgpPeerFsmEstablishedTime)
