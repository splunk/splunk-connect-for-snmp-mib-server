#
# PySNMP MIB module NMS510-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS510-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:12:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
dsu, = mibBuilder.importSymbols("DDS-MIB", "dsu")
gdc, = mibBuilder.importSymbols("GDCCMN-MIB", "gdc")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, Bits, Integer32, iso, Gauge32, IpAddress, NotificationType, Counter32, Unsigned32, MibIdentifier, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "Bits", "Integer32", "iso", "Gauge32", "IpAddress", "NotificationType", "Counter32", "Unsigned32", "MibIdentifier", "TimeTicks", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nms510 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6))
nms510MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 8, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms510MIBversion.setStatus('mandatory')
nms510UnitCfgTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 6, 2), )
if mibBuilder.loadTexts: nms510UnitCfgTable.setStatus('mandatory')
nms510UnitCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1), ).setIndexNames((0, "NMS510-MIB", "nms510UnitCfgIndex"))
if mibBuilder.loadTexts: nms510UnitCfgEntry.setStatus('mandatory')
nms510UnitCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms510UnitCfgIndex.setStatus('mandatory')
nms510DteCtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ctsOn", 1), ("cts0mSec", 2), ("ctsFixed3Char", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510DteCtsDelay.setStatus('mandatory')
nms510DteCtsDelayExt = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ext0mSec", 1), ("ext30mSec", 2), ("ext60mSec", 3), ("ext90mSec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510DteCtsDelayExt.setStatus('mandatory')
nms510FirmwareLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms510FirmwareLevel.setStatus('mandatory')
nms510AlarmCfgCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510AlarmCfgCountWindow.setStatus('mandatory')
nms510SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510SoftReset.setStatus('mandatory')
nms510FrontPanelInhibit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fpInhibited", 1), ("fpEnabled", 2), ("execute", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510FrontPanelInhibit.setStatus('mandatory')
nms510FrontPanelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fpInhibited", 1), ("fpEnabled", 2), ("execute", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510FrontPanelEnable.setStatus('mandatory')
nms510HdlcInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("invert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510HdlcInvert.setStatus('mandatory')
nms510PiggyBackDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-installed", 1), ("installed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms510PiggyBackDetect.setStatus('mandatory')
nms510ExtPortCtrlOut1 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510ExtPortCtrlOut1.setStatus('mandatory')
nms510ExtPortCtrlOut2 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510ExtPortCtrlOut2.setStatus('mandatory')
nms510AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4))
nms510NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 1))
nms510DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 2))
nms510PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 3))
nms510EEChkSumErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 4))
nms510StcLoopbackAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 5))
nms510NoSignalAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 6))
nms510FpTestAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 7))
nms510StreamingAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 8))
nms510DSRLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 9))
nms510DTRLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 10))
nms510DTPLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 11))
nms510DCDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 12))
nms510RXDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 13))
nms510TXDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 14))
nms510DBURequestForScanAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 15))
nms510DBUOnalm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 16))
nms510DBUFailedAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 17))
nms510ExtInputChangeAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 18))
nms510ExtInputLowAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 19))
nms510FrameLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 8, 6, 4, 20))
nms510AlarmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 6, 8), )
if mibBuilder.loadTexts: nms510AlarmCfgTable.setStatus('mandatory')
nms510AlarmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 6, 8, 1), ).setIndexNames((0, "NMS510-MIB", "nms510AlarmCfgIndex"), (0, "NMS510-MIB", "nms510AlarmCfgIdentifier"))
if mibBuilder.loadTexts: nms510AlarmCfgEntry.setStatus('mandatory')
nms510AlarmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 8, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms510AlarmCfgIndex.setStatus('mandatory')
nms510AlarmCfgIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 8, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms510AlarmCfgIdentifier.setStatus('mandatory')
nms510AlarmCfgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510AlarmCfgThreshold.setStatus('mandatory')
nms510DiagCfgTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 6, 6), )
if mibBuilder.loadTexts: nms510DiagCfgTable.setStatus('mandatory')
nms510DiagCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 6, 6, 1), ).setIndexNames((0, "NMS510-MIB", "nms510DiagCfgIndex"))
if mibBuilder.loadTexts: nms510DiagCfgEntry.setStatus('mandatory')
nms510DiagCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms510DiagCfgIndex.setStatus('mandatory')
nms510DiagSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sendOtherPattern", 1), ("send511Pattern", 2), ("send2047Pattern", 3), ("send15BitPattern", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510DiagSendCode.setStatus('mandatory')
nms510DiagTestExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noExceptions", 1), ("blocksOutOfRange", 2), ("bitsOutOfRange", 3), ("blocksAndBitsOutOfRange", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms510DiagTestExceptions.setStatus('mandatory')
nms510DiagBitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms510DiagBitErrors.setStatus('mandatory')
nms510DiagBlockErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms510DiagBlockErrors.setStatus('mandatory')
nms510DiagTestReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("diagnostic", 2), ("resetTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510DiagTestReset.setStatus('mandatory')
nms510DiagExcTable = MibTable((1, 3, 6, 1, 4, 1, 498, 8, 6, 7), )
if mibBuilder.loadTexts: nms510DiagExcTable.setStatus('mandatory')
nms510DiagExcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 8, 6, 7, 1), ).setIndexNames((0, "NMS510-MIB", "nms510DiagExcIndex"))
if mibBuilder.loadTexts: nms510DiagExcEntry.setStatus('mandatory')
nms510DiagExcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 7, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms510DiagExcIndex.setStatus('mandatory')
nms510DiagIntLineloop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("lineloopOff", 1), ("lineloopOn", 2), ("blocks1", 3), ("blocks10", 4), ("blocks100", 5), ("blocks500", 6), ("blocks1000", 7), ("blocks5000", 8), ("blocks10000", 9), ("blocks50000", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510DiagIntLineloop.setStatus('mandatory')
nms510DiagIntDataloop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("dataloopOff", 1), ("dataloopOn", 2), ("blocks1", 3), ("blocks10", 4), ("blocks100", 5), ("blocks500", 6), ("blocks1000", 7), ("blocks5000", 8), ("blocks10000", 9), ("blocks50000", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510DiagIntDataloop.setStatus('mandatory')
nms510DiagEndToEndSelftest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("endToEndOff", 1), ("endToEndOn", 2), ("blocks1", 3), ("blocks10", 4), ("blocks100", 5), ("blocks500", 6), ("blocks1000", 7), ("blocks5000", 8), ("blocks10000", 9), ("blocks50000", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510DiagEndToEndSelftest.setStatus('mandatory')
nms510DiagNetworkDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("delayTestOff", 1), ("delayTestOn", 2), ("runDelayTest", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510DiagNetworkDelay.setStatus('mandatory')
nms510DiagTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("internalLineloop", 2), ("externalDataloop", 3), ("internalDataloop", 4), ("serviceTestCenterLoop", 5), ("endToend", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nms510DiagTestStatus.setStatus('mandatory')
nms510DiagExtDataloop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 8, 6, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dataloopOff", 1), ("dataloopOn", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nms510DiagExtDataloop.setStatus('mandatory')
mibBuilder.exportSymbols("NMS510-MIB", nms510StreamingAlm=nms510StreamingAlm, nms510PowerUpAlm=nms510PowerUpAlm, nms510ExtPortCtrlOut1=nms510ExtPortCtrlOut1, nms510DiagTestExceptions=nms510DiagTestExceptions, nms510DteCtsDelayExt=nms510DteCtsDelayExt, nms510SoftReset=nms510SoftReset, nms510=nms510, nms510DSRLossAlm=nms510DSRLossAlm, nms510DiagCfgEntry=nms510DiagCfgEntry, nms510DiagBitErrors=nms510DiagBitErrors, nms510DiagExtDataloop=nms510DiagExtDataloop, nms510DTRLossAlm=nms510DTRLossAlm, nms510DiagNetworkDelay=nms510DiagNetworkDelay, nms510DiagEndToEndSelftest=nms510DiagEndToEndSelftest, nms510MIBversion=nms510MIBversion, nms510ExtInputLowAlm=nms510ExtInputLowAlm, nms510UnitCfgTable=nms510UnitCfgTable, nms510ExtInputChangeAlm=nms510ExtInputChangeAlm, nms510AlarmCfgTable=nms510AlarmCfgTable, nms510FirmwareLevel=nms510FirmwareLevel, nms510PiggyBackDetect=nms510PiggyBackDetect, nms510DBUOnalm=nms510DBUOnalm, nms510NoSignalAlm=nms510NoSignalAlm, nms510AlarmCfgEntry=nms510AlarmCfgEntry, nms510AlarmData=nms510AlarmData, nms510DBURequestForScanAlm=nms510DBURequestForScanAlm, nms510DBUFailedAlm=nms510DBUFailedAlm, nms510DiagIntDataloop=nms510DiagIntDataloop, nms510DiagRxErrAlm=nms510DiagRxErrAlm, nms510NoResponseAlm=nms510NoResponseAlm, nms510FrameLossAlm=nms510FrameLossAlm, nms510FrontPanelInhibit=nms510FrontPanelInhibit, nms510FrontPanelEnable=nms510FrontPanelEnable, nms510UnitCfgEntry=nms510UnitCfgEntry, nms510StcLoopbackAlm=nms510StcLoopbackAlm, nms510DTPLossAlm=nms510DTPLossAlm, nms510TXDLossAlm=nms510TXDLossAlm, nms510DiagExcIndex=nms510DiagExcIndex, nms510UnitCfgIndex=nms510UnitCfgIndex, nms510DteCtsDelay=nms510DteCtsDelay, nms510HdlcInvert=nms510HdlcInvert, nms510DiagCfgIndex=nms510DiagCfgIndex, nms510AlarmCfgIdentifier=nms510AlarmCfgIdentifier, nms510AlarmCfgCountWindow=nms510AlarmCfgCountWindow, nms510DiagSendCode=nms510DiagSendCode, nms510DiagTestReset=nms510DiagTestReset, nms510DiagExcEntry=nms510DiagExcEntry, nms510DiagCfgTable=nms510DiagCfgTable, nms510EEChkSumErrAlm=nms510EEChkSumErrAlm, nms510AlarmCfgThreshold=nms510AlarmCfgThreshold, nms510DiagTestStatus=nms510DiagTestStatus, nms510DiagIntLineloop=nms510DiagIntLineloop, nms510FpTestAlm=nms510FpTestAlm, nms510DiagBlockErrors=nms510DiagBlockErrors, nms510ExtPortCtrlOut2=nms510ExtPortCtrlOut2, nms510DiagExcTable=nms510DiagExcTable, nms510RXDLossAlm=nms510RXDLossAlm, nms510DCDLossAlm=nms510DCDLossAlm, nms510AlarmCfgIndex=nms510AlarmCfgIndex)
