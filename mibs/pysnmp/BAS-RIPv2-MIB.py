#
# PySNMP MIB module BAS-RIPv2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-RIPv2-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
BasChassisId, BasInterfaceId, basAliasRip, BasLogicalPortId, BasSlotId = mibBuilder.importSymbols("BAS-MIB", "BasChassisId", "BasInterfaceId", "basAliasRip", "BasLogicalPortId", "BasSlotId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, iso, Bits, NotificationType, ModuleIdentity, TimeTicks, ObjectIdentity, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter32, MibIdentifier, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "Bits", "NotificationType", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter32", "MibIdentifier", "Unsigned32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
basRip2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1))
if mibBuilder.loadTexts: basRip2.setLastUpdated('9810071415Z')
if mibBuilder.loadTexts: basRip2.setOrganization('Broadband Access Systems')
basRipObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1))
class RouteTag(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

basRip2GlobalsTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 1), )
if mibBuilder.loadTexts: basRip2GlobalsTable.setStatus('current')
basRip2GlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 1, 1), ).setIndexNames((0, "BAS-RIPv2-MIB", "basRip2GlobalChassis"), (0, "BAS-RIPv2-MIB", "basRip2GlobalSlot"), (0, "BAS-RIPv2-MIB", "basRip2GlobalIf"), (0, "BAS-RIPv2-MIB", "basRip2GlobalLPort"))
if mibBuilder.loadTexts: basRip2GlobalEntry.setStatus('current')
basRip2GlobalRouteChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2GlobalRouteChanges.setStatus('current')
basRip2GlobalQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2GlobalQueries.setStatus('current')
basRip2GlobalChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 1, 1, 3), BasChassisId())
if mibBuilder.loadTexts: basRip2GlobalChassis.setStatus('current')
basRip2GlobalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 1, 1, 4), BasSlotId())
if mibBuilder.loadTexts: basRip2GlobalSlot.setStatus('current')
basRip2GlobalIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 1, 1, 5), BasInterfaceId())
if mibBuilder.loadTexts: basRip2GlobalIf.setStatus('current')
basRip2GlobalLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 1, 1, 6), BasLogicalPortId())
if mibBuilder.loadTexts: basRip2GlobalLPort.setStatus('current')
basRip2IfStatTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 2), )
if mibBuilder.loadTexts: basRip2IfStatTable.setStatus('current')
basRip2IfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 2, 1), ).setIndexNames((0, "BAS-RIPv2-MIB", "basRip2GlobalChassis"), (0, "BAS-RIPv2-MIB", "basRip2GlobalSlot"), (0, "BAS-RIPv2-MIB", "basRip2GlobalIf"), (0, "BAS-RIPv2-MIB", "basRip2GlobalLPort"), (0, "BAS-RIPv2-MIB", "basRip2IfStatAddress"))
if mibBuilder.loadTexts: basRip2IfStatEntry.setStatus('current')
basRip2IfStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2IfStatAddress.setStatus('current')
basRip2IfStatRcvBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2IfStatRcvBadPackets.setStatus('current')
basRip2IfStatRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2IfStatRcvBadRoutes.setStatus('current')
basRip2IfStatSentUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2IfStatSentUpdates.setStatus('current')
basRip2IfStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRip2IfStatStatus.setStatus('current')
basRip2IfStatChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 2, 1, 6), BasChassisId())
if mibBuilder.loadTexts: basRip2IfStatChassis.setStatus('current')
basRip2IfStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 2, 1, 7), BasSlotId())
if mibBuilder.loadTexts: basRip2IfStatSlot.setStatus('current')
basRip2IfStatIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 2, 1, 8), BasInterfaceId())
if mibBuilder.loadTexts: basRip2IfStatIf.setStatus('current')
basRip2IfStatLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 2, 1, 9), BasLogicalPortId())
if mibBuilder.loadTexts: basRip2IfStatLPort.setStatus('current')
basRip2IfConfTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3), )
if mibBuilder.loadTexts: basRip2IfConfTable.setStatus('current')
basRip2IfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1), ).setIndexNames((0, "BAS-RIPv2-MIB", "basRip2IfConfChassis"), (0, "BAS-RIPv2-MIB", "basRip2IfConfSlot"), (0, "BAS-RIPv2-MIB", "basRip2IfConfIf"), (0, "BAS-RIPv2-MIB", "basRip2IfConfLPort"), (0, "BAS-RIPv2-MIB", "basRip2IfConfAddress"))
if mibBuilder.loadTexts: basRip2IfConfEntry.setStatus('current')
basRip2IfConfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2IfConfAddress.setStatus('current')
basRip2IfConfDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 2), RouteTag().clone(hexValue="0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRip2IfConfDomain.setStatus('obsolete')
basRip2IfConfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simplePassword", 2), ("md5", 3))).clone('noAuthentication')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRip2IfConfAuthType.setStatus('current')
basRip2IfConfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRip2IfConfAuthKey.setStatus('current')
basRip2IfConfSend = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("doNotSend", 1), ("ripVersion1", 2), ("rip1Compatible", 3), ("ripVersion2", 4), ("ripV1Demand", 5), ("ripV2Demand", 6))).clone('rip1Compatible')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRip2IfConfSend.setStatus('current')
basRip2IfConfReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("rip1OrRip2", 3), ("doNotRecieve", 4))).clone('rip1OrRip2')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRip2IfConfReceive.setStatus('current')
basRip2IfConfDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRip2IfConfDefaultMetric.setStatus('current')
basRip2IfConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRip2IfConfStatus.setStatus('current')
basRip2IfConfSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basRip2IfConfSrcAddress.setStatus('current')
basRip2IfConfChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 10), BasChassisId())
if mibBuilder.loadTexts: basRip2IfConfChassis.setStatus('current')
basRip2IfConfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 11), BasSlotId())
if mibBuilder.loadTexts: basRip2IfConfSlot.setStatus('current')
basRip2IfConfIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 12), BasInterfaceId())
if mibBuilder.loadTexts: basRip2IfConfIf.setStatus('current')
basRip2IfConfLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 3, 1, 13), BasLogicalPortId())
if mibBuilder.loadTexts: basRip2IfConfLPort.setStatus('current')
basRip2PeerTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 4), )
if mibBuilder.loadTexts: basRip2PeerTable.setStatus('current')
basRip2PeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 4, 1), ).setIndexNames((0, "BAS-RIPv2-MIB", "basRip2PeerChassis"), (0, "BAS-RIPv2-MIB", "basRip2PeerSlot"), (0, "BAS-RIPv2-MIB", "basRip2PeerIf"), (0, "BAS-RIPv2-MIB", "basRip2PeerLPort"), (0, "BAS-RIPv2-MIB", "basRip2PeerAddress"), (0, "BAS-RIPv2-MIB", "basRip2PeerDomain"))
if mibBuilder.loadTexts: basRip2PeerEntry.setStatus('current')
basRip2PeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2PeerAddress.setStatus('current')
basRip2PeerDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 4, 1, 2), RouteTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2PeerDomain.setStatus('current')
basRip2PeerLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2PeerLastUpdate.setStatus('current')
basRip2PeerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2PeerVersion.setStatus('current')
basRip2PeerRcvBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2PeerRcvBadPackets.setStatus('current')
basRip2PeerRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basRip2PeerRcvBadRoutes.setStatus('current')
basRip2PeerChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 4, 1, 7), BasChassisId())
if mibBuilder.loadTexts: basRip2PeerChassis.setStatus('current')
basRip2PeerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 4, 1, 8), BasSlotId())
if mibBuilder.loadTexts: basRip2PeerSlot.setStatus('current')
basRip2PeerIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 4, 1, 9), BasInterfaceId())
if mibBuilder.loadTexts: basRip2PeerIf.setStatus('current')
basRip2PeerLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 6, 1, 4, 1, 10), BasLogicalPortId())
if mibBuilder.loadTexts: basRip2PeerLPort.setStatus('current')
mibBuilder.exportSymbols("BAS-RIPv2-MIB", basRip2IfConfSend=basRip2IfConfSend, basRip2IfConfReceive=basRip2IfConfReceive, basRip2GlobalSlot=basRip2GlobalSlot, basRip2IfConfDefaultMetric=basRip2IfConfDefaultMetric, basRip2PeerChassis=basRip2PeerChassis, basRip2IfStatRcvBadRoutes=basRip2IfStatRcvBadRoutes, basRip2IfConfEntry=basRip2IfConfEntry, basRip2IfStatAddress=basRip2IfStatAddress, basRip2PeerSlot=basRip2PeerSlot, basRip2IfStatStatus=basRip2IfStatStatus, basRip2IfConfLPort=basRip2IfConfLPort, basRip2IfStatSlot=basRip2IfStatSlot, basRip2GlobalQueries=basRip2GlobalQueries, basRip2PeerLPort=basRip2PeerLPort, basRip2IfConfAddress=basRip2IfConfAddress, basRip2PeerAddress=basRip2PeerAddress, basRip2GlobalEntry=basRip2GlobalEntry, basRip2IfStatLPort=basRip2IfStatLPort, basRip2PeerLastUpdate=basRip2PeerLastUpdate, basRip2IfConfAuthType=basRip2IfConfAuthType, basRip2IfConfStatus=basRip2IfConfStatus, basRip2PeerRcvBadRoutes=basRip2PeerRcvBadRoutes, basRip2PeerEntry=basRip2PeerEntry, basRip2PeerTable=basRip2PeerTable, basRip2IfStatSentUpdates=basRip2IfStatSentUpdates, RouteTag=RouteTag, basRip2IfStatRcvBadPackets=basRip2IfStatRcvBadPackets, basRip2IfConfIf=basRip2IfConfIf, PYSNMP_MODULE_ID=basRip2, basRip2GlobalIf=basRip2GlobalIf, basRip2PeerIf=basRip2PeerIf, basRip2GlobalsTable=basRip2GlobalsTable, basRip2IfConfDomain=basRip2IfConfDomain, basRip2PeerVersion=basRip2PeerVersion, basRip2IfConfAuthKey=basRip2IfConfAuthKey, basRip2IfStatIf=basRip2IfStatIf, basRip2IfConfTable=basRip2IfConfTable, basRip2IfConfChassis=basRip2IfConfChassis, basRip2PeerRcvBadPackets=basRip2PeerRcvBadPackets, basRip2GlobalRouteChanges=basRip2GlobalRouteChanges, basRip2PeerDomain=basRip2PeerDomain, basRipObjects=basRipObjects, basRip2IfStatEntry=basRip2IfStatEntry, basRip2GlobalChassis=basRip2GlobalChassis, basRip2IfStatTable=basRip2IfStatTable, basRip2IfStatChassis=basRip2IfStatChassis, basRip2=basRip2, basRip2GlobalLPort=basRip2GlobalLPort, basRip2IfConfSrcAddress=basRip2IfConfSrcAddress, basRip2IfConfSlot=basRip2IfConfSlot)
