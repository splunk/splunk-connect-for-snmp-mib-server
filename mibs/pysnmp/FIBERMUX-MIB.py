#
# PySNMP MIB module FIBERMUX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FIBERMUX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:59:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Bits, Integer32, iso, NotificationType, ModuleIdentity, ObjectIdentity, enterprises, Counter32, IpAddress, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Integer32", "iso", "NotificationType", "ModuleIdentity", "ObjectIdentity", "enterprises", "Counter32", "IpAddress", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
fibermux = MibIdentifier((1, 3, 6, 1, 4, 1, 120))
fmxProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 120, 1))
fmxCrossbow = MibIdentifier((1, 3, 6, 1, 4, 1, 120, 1, 1))
fmxVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 120, 2))
fmxHubs = MibIdentifier((1, 3, 6, 1, 4, 1, 120, 2, 1))
fmxSystemGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 120, 2, 1, 1))
fmxCrossbowGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 120, 2, 1, 2))
fmxHubHwVer = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubHwVer.setStatus('mandatory')
fmxHubFwVer = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubFwVer.setStatus('mandatory')
fmxHubAddress = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubAddress.setStatus('mandatory')
fmxHubDate = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxHubDate.setStatus('mandatory')
fmxHubElapsetick = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubElapsetick.setStatus('mandatory')
fmxHubSamplingRate = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxHubSamplingRate.setStatus('mandatory')
fmxHubPeakTraffic = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubPeakTraffic.setStatus('mandatory')
fmxHubAverageTraffic = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubAverageTraffic.setStatus('mandatory')
fmxHubCurrentTraffic = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubCurrentTraffic.setStatus('mandatory')
fmxHubTotalFrameRx = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubTotalFrameRx.setStatus('mandatory')
fmxHubAverageByte = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubAverageByte.setStatus('mandatory')
fmxHubCRCErrors = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubCRCErrors.setStatus('mandatory')
fmxHubAlignErrors = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubAlignErrors.setStatus('mandatory')
fmxHubMissedErrors = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubMissedErrors.setStatus('mandatory')
fmxHubStatus = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pwrAB-bad", 0), ("pwrB-OK", 1), ("pwrA-OK", 2), ("pwrAB-OK", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxHubStatus.setStatus('mandatory')
fmxHubClear = MibScalar((1, 3, 6, 1, 4, 1, 120, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fmxHubClear.setStatus('mandatory')
fmxCbCardTable = MibTable((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCardTable.setStatus('mandatory')
fmxCbCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCardEntry.setStatus('mandatory')
fmxCbCIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCIndex.setStatus('mandatory')
fmxCbCType = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCType.setStatus('mandatory')
fmxCbCReset = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: fmxCbCReset.setStatus('mandatory')
fmxCbCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCEnable.setStatus('mandatory')
fmxCbCFIFOError = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCFIFOError.setStatus('mandatory')
fmxCbCJabberError = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCJabberError.setStatus('mandatory')
fmxCbCLockup = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCLockup.setStatus('mandatory')
fmxCbCTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCTraffic.setStatus('mandatory')
fmxCbCTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCTimeslot.setStatus('mandatory')
fmxCbCAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCAddress.setStatus('mandatory')
fmxCbCPortTable = MibTable((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPortTable.setStatus('mandatory')
fmxCbCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPortEntry.setStatus('mandatory')
fmxCbCPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCPIndex.setStatus('mandatory')
fmxCbCPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPEnable.setStatus('mandatory')
fmxCbCPIntegrity = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCPIntegrity.setStatus('mandatory')
fmxCbCPJabberError = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCPJabberError.setStatus('mandatory')
fmxCbCPRedundCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPRedundCtrl.setStatus('mandatory')
fmxCbCPRedundPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPRedundPrimary.setStatus('mandatory')
fmxCbCPRedundActive = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCPRedundActive.setStatus('mandatory')
fmxCbCPRedundPort = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPRedundPort.setStatus('mandatory')
fmxCbCPRedundCard = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPRedundCard.setStatus('mandatory')
fmxCbCPRedundErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmxCbCPRedundErrors.setStatus('mandatory')
fmxCbCPRedundErrorLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 120, 2, 1, 2, 2, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmxCbCPRedundErrorLimit.setStatus('mandatory')
mibBuilder.exportSymbols("FIBERMUX-MIB", fmxCbCLockup=fmxCbCLockup, fmxHubMissedErrors=fmxHubMissedErrors, fmxCbCPRedundActive=fmxCbCPRedundActive, fmxCbCardTable=fmxCbCardTable, fmxCbCPJabberError=fmxCbCPJabberError, fmxHubCurrentTraffic=fmxHubCurrentTraffic, fmxCbCEnable=fmxCbCEnable, fmxCbCPRedundErrorLimit=fmxCbCPRedundErrorLimit, fmxHubDate=fmxHubDate, fmxSystemGrp=fmxSystemGrp, fmxHubStatus=fmxHubStatus, fmxHubClear=fmxHubClear, fmxHubPeakTraffic=fmxHubPeakTraffic, fmxHubAddress=fmxHubAddress, fmxHubCRCErrors=fmxHubCRCErrors, fmxCbCTraffic=fmxCbCTraffic, fibermux=fibermux, fmxHubAlignErrors=fmxHubAlignErrors, fmxCbCType=fmxCbCType, fmxCbCPIndex=fmxCbCPIndex, fmxCrossbow=fmxCrossbow, fmxCbCIndex=fmxCbCIndex, fmxCbCTimeslot=fmxCbCTimeslot, fmxVariables=fmxVariables, fmxHubElapsetick=fmxHubElapsetick, fmxHubFwVer=fmxHubFwVer, fmxCbCFIFOError=fmxCbCFIFOError, fmxCbCPortTable=fmxCbCPortTable, fmxCbCPIntegrity=fmxCbCPIntegrity, fmxCbCReset=fmxCbCReset, fmxCbCPRedundCard=fmxCbCPRedundCard, fmxCbCJabberError=fmxCbCJabberError, fmxCbCPRedundErrors=fmxCbCPRedundErrors, fmxHubHwVer=fmxHubHwVer, fmxHubTotalFrameRx=fmxHubTotalFrameRx, fmxCbCPortEntry=fmxCbCPortEntry, fmxCbCPEnable=fmxCbCPEnable, fmxCbCPRedundCtrl=fmxCbCPRedundCtrl, fmxCbCAddress=fmxCbCAddress, fmxHubs=fmxHubs, fmxCbCardEntry=fmxCbCardEntry, fmxCbCPRedundPrimary=fmxCbCPRedundPrimary, fmxCbCPRedundPort=fmxCbCPRedundPort, fmxCrossbowGrp=fmxCrossbowGrp, fmxHubSamplingRate=fmxHubSamplingRate, fmxHubAverageTraffic=fmxHubAverageTraffic, fmxHubAverageByte=fmxHubAverageByte, fmxProducts=fmxProducts)
