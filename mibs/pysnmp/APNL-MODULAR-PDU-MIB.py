#
# PySNMP MIB module APNL-MODULAR-PDU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APNL-MODULAR-PDU-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, TimeTicks, IpAddress, Counter32, Unsigned32, Counter64, Gauge32, MibIdentifier, Integer32, NotificationType, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "TimeTicks", "IpAddress", "Counter32", "Unsigned32", "Counter64", "Gauge32", "MibIdentifier", "Integer32", "NotificationType", "ModuleIdentity", "Bits")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
apNederland = ModuleIdentity((1, 3, 6, 1, 4, 1, 29640))
apNederland.setRevisions(('2013-01-24 13:05',))
if mibBuilder.loadTexts: apNederland.setLastUpdated('201301241000Z')
if mibBuilder.loadTexts: apNederland.setOrganization('AP Nederland')
apnlDirectory = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 1))
apnlMib = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 2))
apnlTmp = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 3))
apnlModules = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 4))
cm = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 4, 1))
cmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 4, 2))
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 4, 3))
pduTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 4, 4))
apnlTest = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 5))
apnlDemo = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 6))
apnlMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 29640, 7))
pduType = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pduModular", 0), ("pduGateway1", 1), ("pduGateway2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduType.setStatus('current')
pduProductIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduProductIdentifier.setStatus('current')
pduSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduSerialNumber.setStatus('current')
pduStatus = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("pduBusy", 0), ("pduReady1", 1), ("pduAlarm", 2), ("pduError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduStatus.setStatus('current')
pduPower = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 5), Unsigned32()).setUnits('kiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPower.setStatus('current')
pduPowerL1 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 6), Unsigned32()).setUnits('kiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPowerL1.setStatus('current')
pduPowerL2 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 7), Unsigned32()).setUnits('kiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPowerL2.setStatus('current')
pduPowerL3 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 8), Unsigned32()).setUnits('kiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPowerL3.setStatus('current')
pduKvar = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 9), Unsigned32()).setUnits('KiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduKvar.setStatus('current')
pduKvarL1 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 10), Unsigned32()).setUnits('KiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduKvarL1.setStatus('current')
pduKvarL2 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 11), Unsigned32()).setUnits('KiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduKvarL2.setStatus('current')
pduKvarL3 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 12), Unsigned32()).setUnits('KiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduKvarL3.setStatus('current')
pdulAcurrent = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 13), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readonly")
if mibBuilder.loadTexts: pdulAcurrent.setStatus('current')
pduAcurrentL1 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 14), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduAcurrentL1.setStatus('current')
pduAcurrentL2 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 15), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduAcurrentL2.setStatus('current')
pduAcurrentL3 = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 16), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduAcurrentL3.setStatus('current')
pduCurIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 17), IpAddress()).setUnits('IPv4 Addr').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCurIpAddress.setStatus('current')
pduCurSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 18), IpAddress()).setUnits('IPv4 Addr').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCurSubNetMask.setStatus('current')
pduCurDefGwAddress = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 19), IpAddress()).setUnits('IPv4 Addr').setMaxAccess("readonly")
if mibBuilder.loadTexts: pduCurDefGwAddress.setStatus('current')
pduNumberOfNodes = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNumberOfNodes.setStatus('current')
pduNumberOfSensors = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduNumberOfSensors.setStatus('current')
pduSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduSoftwareVersion.setStatus('current')
pduFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduFirmwareVersion.setStatus('current')
pduBusProtocol = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("apbus", 0), ("modbus", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduBusProtocol.setStatus('current')
pduAdminCommand = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noOp", 0), ("rebootPdu", 1), ("rediscover", 2), ("updateSofware", 3), ("resetConfig", 4), ("resetSNMPv3Config", 5), ("resetNetworkSetting", 6), ("readDataFromBusPdu", 7), ("writeDataToBusPdu", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduAdminCommand.setStatus('current')
pduStartupIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 26), IpAddress()).setUnits('IPv4 Addr').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduStartupIpAddress.setStatus('current')
pduStartupSubNetMask = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 27), IpAddress()).setUnits('IPv4 Addr').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduStartupSubNetMask.setStatus('current')
pduStartupDefGwAddress = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 28), IpAddress()).setUnits('IPv4 Addr').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduStartupDefGwAddress.setStatus('current')
pduRealTimeClock = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 29), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduRealTimeClock.setStatus('current')
pduEnableFeatures = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 30), Bits().clone(namedValues=NamedValues(("globalWebEnabled", 0), ("globalUsbEnabled", 1), ("globalSwitchEnabled", 2), ("displaySwitchEnabled", 3), ("webSwitchEnabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduEnableFeatures.setStatus('current')
pduBusAddress = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduBusAddress.setStatus('current')
pduName = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 3, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduName.setStatus('current')
nodeTable = MibTable((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33), )
if mibBuilder.loadTexts: nodeTable.setStatus('current')
nodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1), ).setIndexNames((0, "APNL-MODULAR-PDU-MIB", "nodeIndex"))
if mibBuilder.loadTexts: nodeEntry.setStatus('current')
nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: nodeIndex.setStatus('current')
nodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("typeUnknown", 0), ("typePresModChar", 1), ("typePresModMono", 2), ("typePresModGraph", 3), ("typePowerMeter", 4), ("typePowerMeterSwitch", 5), ("typeSwitch", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeType.setStatus('current')
nodeOutlet = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeOutlet.setStatus('current')
nodeAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 4), Bits().clone(namedValues=NamedValues(("trapCurrHi", 0), ("trapCurrLo", 1), ("trapVoltHi", 2), ("trapVoltLo", 3), ("switchOn", 4), ("switchOff", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeAlarmStatus.setStatus('current')
nodePower = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 5), Unsigned32()).setUnits('kiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePower.setStatus('current')
nodeAcurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 6), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeAcurrent.setStatus('current')
nodePeakCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 7), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePeakCurrent.setStatus('current')
nodeVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 8), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeVoltage.setStatus('current')
nodeMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 9), Unsigned32()).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeMinVoltage.setStatus('current')
nodeKvar = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 10), Unsigned32()).setUnits('KiloWattHours').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeKvar.setStatus('current')
nodeFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 11), Unsigned32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFrequency.setStatus('current')
nodePowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 12), Unsigned32()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePowerFactor.setStatus('current')
nodeSwitchOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeSwitchOperStatus.setStatus('current')
nodeSwitchAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeSwitchAdminStatus.setStatus('current')
nodeCurrHiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 15), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeCurrHiThresh.setStatus('current')
nodeCurrLoThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 16), Unsigned32()).setUnits('DeciAmpers').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeCurrLoThresh.setStatus('current')
nodeVoltHiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 17), Unsigned32()).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeVoltHiThresh.setStatus('current')
nodeVoltLoThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 18), Unsigned32()).setUnits('Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeVoltLoThresh.setStatus('current')
nodeAlarmSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 19), Bits().clone(namedValues=NamedValues(("trapCurrHi", 0), ("trapCurrLo", 1), ("trapVoltHi", 2), ("trapVoltLo", 3), ("switchOn", 4), ("switchOff", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeAlarmSelector.setStatus('current')
nodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeName.setStatus('current')
nodePhase = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 33, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("phaseUnknown", 0), ("phaseL1", 1), ("phaseL2", 2), ("phaseL3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodePhase.setStatus('current')
sensorTable = MibTable((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34), )
if mibBuilder.loadTexts: sensorTable.setStatus('current')
sensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1), ).setIndexNames((0, "APNL-MODULAR-PDU-MIB", "sensorIndex"))
if mibBuilder.loadTexts: sensorEntry.setStatus('current')
sensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: sensorIndex.setStatus('current')
sensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 0), ("temperature", 1), ("humidity", 2), ("smoke", 3), ("co1", 4), ("vibration", 5), ("doorStatus", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorType.setStatus('current')
sensorAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 3), Bits().clone(namedValues=NamedValues(("trapHi", 0), ("trapLo", 1), ("switchOn", 2), ("switchOff", 3), ("beeperHi", 4), ("beeperLo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAlarmStatus.setStatus('current')
sensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 4), Integer32()).setUnits('by type').setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorValue.setStatus('current')
sensorSwitchOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorSwitchOperStatus.setStatus('current')
sensorSwitchAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorSwitchAdminStatus.setStatus('current')
sensorHiThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 7), Integer32()).setUnits('by type').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorHiThresh.setStatus('current')
sensorLoThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 8), Integer32()).setUnits('by type').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorLoThresh.setStatus('current')
sensorAlarmSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 9), Bits().clone(namedValues=NamedValues(("trapHi", 0), ("trapLo", 1), ("switchOn", 2), ("switchOff", 3), ("beeperHi", 4), ("beeperLo", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmSelector.setStatus('current')
sensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 29640, 4, 3, 34, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorName.setStatus('current')
trapType = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("voltageHiAlarm", 0), ("voltageLoAlarm", 1), ("currentHiAlarm", 2), ("currentLoAlarm", 3), ("tempHiAlarm", 4), ("tempLoAlarm", 5), ("humidityHiAlarm", 6), ("humidityLoAlarm", 7), ("switchOnAlarm", 8), ("switchOffAlarm", 9), ("powerHiAlarm", 10), ("blackBoxColdTrap", 11)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapType.setStatus('current')
pduTableType = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pduNodeTable", 0), ("pduSensorTable", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pduTableType.setStatus('current')
trapTableIndex = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 4, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapTableIndex.setStatus('current')
trapThreshHoldType = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("trapThresholdOther", 0), ("trapThresholdHi", 1), ("trapThresholdLo", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapThreshHoldType.setStatus('current')
trapThreshHold = MibScalar((1, 3, 6, 1, 4, 1, 29640, 4, 4, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapThreshHold.setStatus('current')
pduVoltageAlarm = NotificationType((1, 3, 6, 1, 4, 1, 29640, 4, 4, 6)).setObjects(("APNL-MODULAR-PDU-MIB", "trapType"), ("APNL-MODULAR-PDU-MIB", "trapTableIndex"), ("APNL-MODULAR-PDU-MIB", "trapThreshHoldType"), ("APNL-MODULAR-PDU-MIB", "trapThreshHold"))
if mibBuilder.loadTexts: pduVoltageAlarm.setStatus('current')
pduCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 29640, 4, 4, 7)).setObjects(("APNL-MODULAR-PDU-MIB", "trapType"), ("APNL-MODULAR-PDU-MIB", "trapTableIndex"), ("APNL-MODULAR-PDU-MIB", "trapThreshHoldType"), ("APNL-MODULAR-PDU-MIB", "trapThreshHold"))
if mibBuilder.loadTexts: pduCurrentAlarm.setStatus('current')
pduPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 29640, 4, 4, 8)).setObjects(("APNL-MODULAR-PDU-MIB", "trapType"), ("APNL-MODULAR-PDU-MIB", "trapTableIndex"), ("APNL-MODULAR-PDU-MIB", "trapThreshHoldType"), ("APNL-MODULAR-PDU-MIB", "trapThreshHold"))
if mibBuilder.loadTexts: pduPowerAlarm.setStatus('current')
sensorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 29640, 4, 4, 9)).setObjects(("APNL-MODULAR-PDU-MIB", "trapType"), ("APNL-MODULAR-PDU-MIB", "trapTableIndex"), ("APNL-MODULAR-PDU-MIB", "trapThreshHoldType"), ("APNL-MODULAR-PDU-MIB", "trapThreshHold"))
if mibBuilder.loadTexts: sensorAlarm.setStatus('current')
pduSwitchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 29640, 4, 4, 10)).setObjects(("APNL-MODULAR-PDU-MIB", "trapType"), ("APNL-MODULAR-PDU-MIB", "trapTableIndex"))
if mibBuilder.loadTexts: pduSwitchAlarm.setStatus('current')
mibBuilder.exportSymbols("APNL-MODULAR-PDU-MIB", nodeOutlet=nodeOutlet, pduPowerL2=pduPowerL2, pduKvarL2=pduKvarL2, cmTraps=cmTraps, pduPowerL1=pduPowerL1, pdu=pdu, nodeCurrLoThresh=nodeCurrLoThresh, nodeAlarmStatus=nodeAlarmStatus, pduNumberOfNodes=pduNumberOfNodes, pduCurSubNetMask=pduCurSubNetMask, nodeEntry=nodeEntry, sensorSwitchOperStatus=sensorSwitchOperStatus, pduTraps=pduTraps, pdulAcurrent=pdulAcurrent, pduPower=pduPower, sensorType=sensorType, sensorLoThresh=sensorLoThresh, nodePowerFactor=nodePowerFactor, sensorHiThresh=sensorHiThresh, pduSoftwareVersion=pduSoftwareVersion, nodeFrequency=nodeFrequency, apNederland=apNederland, sensorAlarmSelector=sensorAlarmSelector, apnlTmp=apnlTmp, nodePeakCurrent=nodePeakCurrent, nodeVoltLoThresh=nodeVoltLoThresh, nodePhase=nodePhase, cm=cm, nodeMinVoltage=nodeMinVoltage, apnlDemo=apnlDemo, pduCurIpAddress=pduCurIpAddress, nodeTable=nodeTable, pduAcurrentL1=pduAcurrentL1, pduStatus=pduStatus, pduBusProtocol=pduBusProtocol, nodeVoltage=nodeVoltage, trapThreshHoldType=trapThreshHoldType, apnlDirectory=apnlDirectory, pduStartupIpAddress=pduStartupIpAddress, pduStartupDefGwAddress=pduStartupDefGwAddress, sensorAlarmStatus=sensorAlarmStatus, sensorValue=sensorValue, pduKvarL1=pduKvarL1, nodePower=nodePower, pduTableType=pduTableType, sensorSwitchAdminStatus=sensorSwitchAdminStatus, nodeAcurrent=nodeAcurrent, pduProductIdentifier=pduProductIdentifier, pduVoltageAlarm=pduVoltageAlarm, pduKvar=pduKvar, nodeCurrHiThresh=nodeCurrHiThresh, sensorTable=sensorTable, apnlModules=apnlModules, pduSwitchAlarm=pduSwitchAlarm, pduCurrentAlarm=pduCurrentAlarm, apnlMib=apnlMib, apnlTest=apnlTest, PYSNMP_MODULE_ID=apNederland, nodeName=nodeName, pduType=pduType, nodeType=nodeType, pduAdminCommand=pduAdminCommand, pduCurDefGwAddress=pduCurDefGwAddress, nodeSwitchAdminStatus=nodeSwitchAdminStatus, pduRealTimeClock=pduRealTimeClock, pduSerialNumber=pduSerialNumber, sensorEntry=sensorEntry, pduAcurrentL3=pduAcurrentL3, sensorName=sensorName, trapTableIndex=trapTableIndex, pduAcurrentL2=pduAcurrentL2, apnlMIBConformance=apnlMIBConformance, pduEnableFeatures=pduEnableFeatures, nodeKvar=nodeKvar, pduName=pduName, nodeVoltHiThresh=nodeVoltHiThresh, trapType=trapType, sensorAlarm=sensorAlarm, pduFirmwareVersion=pduFirmwareVersion, pduPowerAlarm=pduPowerAlarm, nodeAlarmSelector=nodeAlarmSelector, pduStartupSubNetMask=pduStartupSubNetMask, nodeIndex=nodeIndex, pduNumberOfSensors=pduNumberOfSensors, pduBusAddress=pduBusAddress, sensorIndex=sensorIndex, trapThreshHold=trapThreshHold, pduKvarL3=pduKvarL3, nodeSwitchOperStatus=nodeSwitchOperStatus, pduPowerL3=pduPowerL3)
