#
# PySNMP MIB module OPL-SP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OPL-SP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:25:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
TimeTicks, NotificationType, Counter64, Counter32, Unsigned32, IpAddress, MibIdentifier, ModuleIdentity, Integer32, Gauge32, ObjectIdentity, enterprises, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "Counter64", "Counter32", "Unsigned32", "IpAddress", "MibIdentifier", "ModuleIdentity", "Integer32", "Gauge32", "ObjectIdentity", "enterprises", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fujitsu = MibIdentifier((1, 3, 6, 1, 4, 1, 211))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1))
solaris = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15))
sparcEnterprise = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3))
oplSpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1))
oplSpMIB.setRevisions(('2010-05-24 00:00', '2009-06-10 00:00', '2009-01-28 00:00', '2008-11-14 00:00', '2008-04-01 00:00', '2007-01-07 00:00',))
if mibBuilder.loadTexts: oplSpMIB.setLastUpdated('201005240000Z')
if mibBuilder.loadTexts: oplSpMIB.setOrganization('Sun Microsystems, Inc. Fujitsu LIMITED')
scfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1))
scfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1))
scfState = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 2))
scfMonitorInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3))
scfSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4))
scfDomainInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5))
scfXsbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6))
scfLsbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7))
scfBoardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8))
scfCpuInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9))
scfMemoryInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10))
scfIoBoxInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11))
scfComponentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12))
scfMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2))
scfMIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0))
scfMIBTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1))
scfMIBConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3))
scfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 1))
scfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2))
scfMIBObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1))
scfMIBNotifGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 2))
class ScfMonitorTypeTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))
    namedValues = NamedValues(("temperature", 1), ("voltage", 2), ("fanRotational", 3), ("humidity", 4), ("unknown", 255))

class ScfComponentType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 96, 97, 98, 100, 110, 115, 133, 134, 135, 136, 137, 141, 148, 149, 150, 151, 155, 157, 158, 159, 160, 161, 169, 171, 173, 175, 180, 190, 192, 196, 200, 201, 203, 253, 254, 255))
    namedValues = NamedValues(("cmu", 1), ("ddc", 2), ("cpum", 3), ("cpuChip", 4), ("cpuCore", 5), ("cpuStrand", 6), ("way", 7), ("mem", 9), ("sc", 10), ("tag", 11), ("xsb", 12), ("mac", 13), ("bank", 14), ("block", 15), ("xbuA", 16), ("half", 17), ("xbuB", 19), ("iou", 21), ("pcir", 23), ("ioc", 24), ("flp", 25), ("iocCh", 26), ("iocLeaf", 27), ("hdd", 28), ("pci", 29), ("pcic", 30), ("xscfA", 31), ("xscfB", 32), ("xscfC", 33), ("clkuA", 34), ("clkuB", 36), ("psubpA", 38), ("psubpB", 39), ("acsA", 40), ("acsB", 41), ("psu", 42), ("bpA", 43), ("bpB", 44), ("ddcA", 45), ("fanbpA", 46), ("fanbpB", 47), ("fanbpC", 48), ("fanA", 49), ("fan", 50), ("fanB", 51), ("opnl", 53), ("tape", 54), ("dvd", 55), ("swbp", 56), ("medbp", 57), ("mbuA", 96), ("riser", 97), ("pcmu", 98), ("ddcB", 100), ("memb", 110), ("mbuB", 115), ("bpuA", 133), ("iob", 134), ("pdb", 135), ("bpuB", 136), ("busbar", 137), ("ddcr", 141), ("sw", 148), ("bridge", 149), ("gbe", 150), ("sas", 151), ("xscfu", 155), ("psuFan", 157), ("airA", 158), ("airB", 159), ("airC", 160), ("acInlet", 161), ("hddbp", 169), ("tapebp", 171), ("dvdbpA", 173), ("dvdbpB", 175), ("cable", 180), ("ioua", 190), ("snsu", 192), ("ups", 196), ("environment", 200), ("firm", 201), ("domain", 203), ("unspecified", 253), ("notApplicable", 254), ("unknown", 255))

class ScfValidStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("invalid", 1), ("valid", 2))

class ScfLEDState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("on", 2), ("blinking", 3))

class ScfModeSwitchState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("locked", 1), ("service", 2))

class ScfStateTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 254, 255))
    namedValues = NamedValues(("unmounted", 1), ("stop", 2), ("init", 3), ("notConfigured", 4), ("idle", 5), ("run", 6), ("deconfigured", 7), ("change", 254), ("unknown", 255))

class ScfErrorStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 254, 255))
    namedValues = NamedValues(("normal", 1), ("degraded", 2), ("faulted", 3), ("change", 254), ("unknown", 255))

class ScfDomainStatusTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 254, 255))
    namedValues = NamedValues(("powerOff", 1), ("panic", 2), ("shutdown", 3), ("initialize", 4), ("boot", 5), ("running", 6), ("prom", 7), ("change", 254), ("unknown", 255))

class ScfDomainConfigPolicy(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("fru", 1), ("xsb", 2), ("system", 3))

class ScfIoBoxLEDState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("off", 1), ("standbyBlink", 2), ("blinkSlow", 3), ("blinkFast", 4), ("feedbackFlash", 5), ("on", 6), ("unknown", 7))

class ScfIoBoxComponentLocation(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("left", 1), ("right", 2))

class ScfIoBoxComponentType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("cp", 2), ("ps", 3), ("boat", 4), ("ulc", 5), ("dlc", 6))

class ScfIoBoatTypeTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notPresent", 1), ("unknown", 2), ("pcie", 3), ("pcix", 4), ("max", 5))

class ScfIoBoxEnabledAlarms(TextualConvention, Bits):
    status = 'current'
    namedValues = NamedValues(("min", 0), ("max", 1))

class ScfCodState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disabled", 1), ("enabled", 2), ("notApplicable", 3))

class ScfBoardSubTypeTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 254, 255))
    namedValues = NamedValues(("typeA", 1), ("typeB", 2), ("typeC", 3), ("type1", 4), ("type2", 5), ("notApplicable", 254), ("unknown", 255))

class ScfTrapEventTypeTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("other", 1), ("add", 2), ("remove", 3), ("acFail", 4), ("acRestore", 5), ("changeComplete", 6), ("acRestoreStart", 7), ("acRestoreFail", 8), ("acRestoreComplete", 9))

class ScfTrapStatusEventTypeTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("degraded", 2), ("faulted", 3), ("recover", 4), ("information", 5))

class ScfDomainStatusAlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("status", 2), ("panic", 3))

class ScfTrapIoBoxTempEventTypeTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("overTemp", 2), ("recover", 3))

class ScfIoBoxLEDType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("unknown", 1), ("locate", 2), ("active", 3), ("powerDC", 4), ("powerAC", 5), ("service", 6), ("rtr", 7), ("overtemp", 8), ("mgmt", 9), ("data", 10))

class ScfTrapModeSwitchEventTypeTC(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("powerShort", 2), ("powerLong", 3), ("modeToLocked", 4), ("modeToService", 5))

class ScfIndex(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class ScfIoBoxIndex(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 6)

class ScfXsbIndex(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class ScfDRState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))
    namedValues = NamedValues(("unconfigured", 1), ("configured", 2), ("waiting", 3), ("disconnected", 4), ("unknown", 255))

class ScfUsageState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("on", 2))

class ScfTestState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("unmounted", 1), ("unknown", 2), ("testing", 3), ("passed", 4), ("failed", 5))

class ScfAssignmentState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unavailable", 1), ("available", 2), ("assigned", 3))

class ScfConnectivityState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("disconnected", 1), ("connected", 2))

class ScfConfigurationState(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unconfigured", 1), ("configured", 2))

scfAgentId = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfAgentId.setStatus('current')
scfAgentNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfAgentNumber.setStatus('current')
scfAgentTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 3), )
if mibBuilder.loadTexts: scfAgentTable.setStatus('current')
scfAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 3, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfAgentIndex"))
if mibBuilder.loadTexts: scfAgentEntry.setStatus('current')
scfAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 3, 1, 1), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfAgentIndex.setStatus('current')
scfXcpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXcpVersion.setStatus('current')
scfIpAddressPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIpAddressPortNumber.setStatus('current')
scfIpAddressNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIpAddressNumber.setStatus('current')
scfIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 6), )
if mibBuilder.loadTexts: scfIpAddressTable.setStatus('current')
scfIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 6, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfIpAddressIndex"))
if mibBuilder.loadTexts: scfIpAddressEntry.setStatus('current')
scfIpAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 6, 1, 1), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIpAddressIndex.setStatus('current')
scfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 1, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIpAddress.setStatus('current')
scfSystemState = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 2, 1), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemState.setStatus('current')
scfFirmwareState = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 2, 2), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfFirmwareState.setStatus('current')
scfHardwareState = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 2, 3), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfHardwareState.setStatus('current')
scfModeSwitch = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 2, 4), ScfModeSwitchState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfModeSwitch.setStatus('current')
scfMonitorNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorNumber.setStatus('current')
scfMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2), )
if mibBuilder.loadTexts: scfMonitorTable.setStatus('current')
scfMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfMonitorBoardType"), (0, "OPL-SP-MIB", "scfMonitorBoardId"), (0, "OPL-SP-MIB", "scfMonitorModuleType"), (0, "OPL-SP-MIB", "scfMonitorModuleId"), (0, "OPL-SP-MIB", "scfMonitorType"), (0, "OPL-SP-MIB", "scfMonitorId"))
if mibBuilder.loadTexts: scfMonitorEntry.setStatus('current')
scfMonitorBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 1), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorBoardType.setStatus('current')
scfMonitorBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorBoardId.setStatus('current')
scfMonitorModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 3), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorModuleType.setStatus('current')
scfMonitorModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 4), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorModuleId.setStatus('current')
scfMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 5), ScfMonitorTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorType.setStatus('current')
scfMonitorId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 6), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorId.setStatus('current')
scfMonitorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorDescription.setStatus('current')
scfMonitorAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorAdditionalInfo.setStatus('current')
scfMonitorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorUnits.setStatus('current')
scfMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 10), ScfValidStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorStatus.setStatus('current')
scfMonitorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorValue.setStatus('current')
scfMonitorValueStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 3, 2, 1, 12), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMonitorValueStatus.setStatus('current')
scfSystemName = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemName.setStatus('current')
scfSystemType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemType.setStatus('current')
scfSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemSerialNumber.setStatus('current')
scfSystemAdditionalInfo = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemAdditionalInfo.setStatus('current')
scfSystemCpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemCpuNumber.setStatus('current')
scfSystemMemoryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 6), Integer32()).setUnits('GB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemMemoryCapacity.setStatus('current')
scfSystemReadyLED = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 7), ScfLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemReadyLED.setStatus('current')
scfSystemPowerLED = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 8), ScfLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemPowerLED.setStatus('current')
scfSystemCheckLED = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 9), ScfLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemCheckLED.setStatus('current')
scfSystemActualPowerConsumption = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 10))
scfSystemAirFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 11))
scfSystemAmbientTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 12))
scfSystemPowerSource = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 13))
scfSystemPermittedPowerConsumption = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 14))
scfSystemAvailablePowerConsumption = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 15))
scfSystemActualPowerConsumptionValue = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemActualPowerConsumptionValue.setStatus('current')
scfSystemActualPowerConsumptionUnit = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 10, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemActualPowerConsumptionUnit.setStatus('current')
scfSystemActualPowerMinPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemActualPowerMinPollingInterval.setStatus('current')
scfSystemExhaustAirFlowValue = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemExhaustAirFlowValue.setStatus('current')
scfSystemExhaustAirFlowUnit = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 11, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemExhaustAirFlowUnit.setStatus('current')
scfSystemExhaustAirFlowMinPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemExhaustAirFlowMinPollingInterval.setStatus('current')
scfSystemAmbientTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 12, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemAmbientTemperatureValue.setStatus('current')
scfSystemAmbientTemperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 12, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemAmbientTemperatureUnit.setStatus('current')
scfSystemAmbientTemperatureMinPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemAmbientTemperatureMinPollingInterval.setStatus('current')
scfSystemPermittedPowerConsumptionValue = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemPermittedPowerConsumptionValue.setStatus('current')
scfSystemPermittedPowerConsumptionUnit = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 4, 14, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfSystemPermittedPowerConsumptionUnit.setStatus('current')
scfDomainNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainNumber.setStatus('current')
scfDomainTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2), )
if mibBuilder.loadTexts: scfDomainTable.setStatus('current')
scfDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfDomainId"))
if mibBuilder.loadTexts: scfDomainEntry.setStatus('current')
scfDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 1), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainId.setStatus('current')
scfDomainCpuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainCpuNumber.setStatus('current')
scfDomainMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 3), Integer32()).setUnits('GB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainMemoryCapacity.setStatus('current')
scfDomainObpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainObpVersion.setStatus('current')
scfDomainObpAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainObpAdditionalInfo.setStatus('current')
scfDomainOsMachine = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainOsMachine.setStatus('current')
scfDomainOsRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainOsRelease.setStatus('current')
scfDomainOsSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainOsSysName.setStatus('current')
scfDomainOsNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainOsNodeName.setStatus('current')
scfDomainOsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainOsVersion.setStatus('current')
scfDomainOsAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainOsAdditionalInfo.setStatus('current')
scfDomainValid = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 12), ScfValidStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainValid.setStatus('current')
scfDomainXsbs = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainXsbs.setStatus('current')
scfDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 14), ScfDomainStatusTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainStatus.setStatus('current')
scfDomainErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 15), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainErrorStatus.setStatus('current')
scfDomainConfigurationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 5, 2, 1, 16), ScfDomainConfigPolicy()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfDomainConfigurationPolicy.setStatus('current')
scfXsbType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbType.setStatus('current')
scfXsbNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbNumber.setStatus('current')
scfXsbTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3), )
if mibBuilder.loadTexts: scfXsbTable.setStatus('current')
scfXsbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfXsbId"))
if mibBuilder.loadTexts: scfXsbEntry.setStatus('current')
scfXsbId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 1), ScfXsbIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbId.setStatus('current')
scfXsbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 2), ScfStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbStatus.setStatus('current')
scfXsbErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 3), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbErrorStatus.setStatus('current')
scfXsbDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbDomainId.setStatus('current')
scfXsbDrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 5), ScfDRState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbDrStatus.setStatus('current')
scfXsbSubStatusPower = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 6), ScfUsageState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbSubStatusPower.setStatus('current')
scfXsbSubStatusTest = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 7), ScfTestState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbSubStatusTest.setStatus('current')
scfXsbSubStatusAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 8), ScfAssignmentState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbSubStatusAssignment.setStatus('current')
scfXsbSubStatusConnectivity = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 9), ScfConnectivityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbSubStatusConnectivity.setStatus('current')
scfXsbSubStatusConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 10), ScfConfigurationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbSubStatusConfiguration.setStatus('current')
scfXsbSetupDID = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbSetupDID.setStatus('current')
scfXsbNextDID = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 6, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfXsbNextDID.setStatus('current')
scfLsbType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbType.setStatus('current')
scfLsbNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbNumber.setStatus('current')
scfLsbTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3), )
if mibBuilder.loadTexts: scfLsbTable.setStatus('current')
scfLsbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfLsbDomainId"), (0, "OPL-SP-MIB", "scfLsbId"))
if mibBuilder.loadTexts: scfLsbEntry.setStatus('current')
scfLsbDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1, 1), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbDomainId.setStatus('current')
scfLsbId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbId.setStatus('current')
scfLsbXsbId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbXsbId.setStatus('current')
scfLsbNoMem = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1, 4), ScfUsageState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbNoMem.setStatus('current')
scfLsbNoIo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1, 5), ScfUsageState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbNoIo.setStatus('current')
scfLsbFloatingBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 7, 3, 1, 6), ScfUsageState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLsbFloatingBoard.setStatus('current')
scfBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardNumber.setStatus('current')
scfBoardTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2), )
if mibBuilder.loadTexts: scfBoardTable.setStatus('current')
scfBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfBoardType"), (0, "OPL-SP-MIB", "scfBoardId"))
if mibBuilder.loadTexts: scfBoardEntry.setStatus('current')
scfBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 1), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardType.setStatus('current')
scfBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardId.setStatus('current')
scfBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardName.setStatus('current')
scfBoardAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardAdditionalInfo.setStatus('current')
scfBoardXsbs = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardXsbs.setStatus('current')
scfBoardState = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 6), ScfStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardState.setStatus('current')
scfBoardCODEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 7), ScfCodState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardCODEnabled.setStatus('current')
scfBoardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 8, 2, 1, 8), ScfBoardSubTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfBoardSubType.setStatus('current')
scfCpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuNumber.setStatus('current')
scfCpuTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2), )
if mibBuilder.loadTexts: scfCpuTable.setStatus('current')
scfCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfCpuBoardType"), (0, "OPL-SP-MIB", "scfCpuBoardId"), (0, "OPL-SP-MIB", "scfCpuModuleType"), (0, "OPL-SP-MIB", "scfCpuModuleId"), (0, "OPL-SP-MIB", "scfCpuSubType"), (0, "OPL-SP-MIB", "scfCpuSubId"))
if mibBuilder.loadTexts: scfCpuEntry.setStatus('current')
scfCpuBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 1), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuBoardType.setStatus('current')
scfCpuBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuBoardId.setStatus('current')
scfCpuModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 3), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuModuleType.setStatus('current')
scfCpuModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 4), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuModuleId.setStatus('current')
scfCpuSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 5), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuSubType.setStatus('current')
scfCpuSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 6), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuSubId.setStatus('current')
scfCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuType.setStatus('current')
scfCpuFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 8), Integer32()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuFrequency.setStatus('current')
scfCpuAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuAdditionalInfo.setStatus('current')
scfCpuState = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 9, 2, 1, 10), ScfStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfCpuState.setStatus('current')
scfMemoryNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryNumber.setStatus('current')
scfMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2), )
if mibBuilder.loadTexts: scfMemoryTable.setStatus('current')
scfMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfMemoryBoardType"), (0, "OPL-SP-MIB", "scfMemoryBoardId"), (0, "OPL-SP-MIB", "scfMemoryModuleType"), (0, "OPL-SP-MIB", "scfMemoryModuleId"), (0, "OPL-SP-MIB", "scfMemorySubType"), (0, "OPL-SP-MIB", "scfMemorySubId"))
if mibBuilder.loadTexts: scfMemoryEntry.setStatus('current')
scfMemoryBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 1), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryBoardType.setStatus('current')
scfMemoryBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryBoardId.setStatus('current')
scfMemoryModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 3), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryModuleType.setStatus('current')
scfMemoryModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 4), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryModuleId.setStatus('current')
scfMemorySubType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 5), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemorySubType.setStatus('current')
scfMemorySubId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 6), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemorySubId.setStatus('current')
scfMemoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryName.setStatus('current')
scfMemoryCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 8), Integer32()).setUnits('GB').setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryCapacity.setStatus('current')
scfMemoryAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryAdditionalInfo.setStatus('current')
scfMemoryState = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 10, 2, 1, 10), ScfStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfMemoryState.setStatus('current')
scfIoBoxNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxNumber.setStatus('current')
scfIoBoxTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2), )
if mibBuilder.loadTexts: scfIoBoxTable.setStatus('current')
scfIoBoxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfIoBoxId"))
if mibBuilder.loadTexts: scfIoBoxEntry.setStatus('current')
scfIoBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 1), ScfIoBoxIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxId.setStatus('current')
scfIoBoxLocationLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 2), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxLocationLED.setStatus('current')
scfIoBoxOverTempLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 3), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxOverTempLED.setStatus('current')
scfIoBoxServiceReqLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 4), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxServiceReqLED.setStatus('current')
scfIoBoxActiveLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 5), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxActiveLED.setStatus('current')
scfIoBoxPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxPartNumber.setStatus('current')
scfIoBoxSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSerialNumber.setStatus('current')
scfIoBoxDashLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxDashLevel.setStatus('current')
scfIoBoatNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatNumber.setStatus('current')
scfIoBoatTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4), )
if mibBuilder.loadTexts: scfIoBoatTable.setStatus('current')
scfIoBoatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfIoBoatIoBoxId"), (0, "OPL-SP-MIB", "scfIoBoatId"))
if mibBuilder.loadTexts: scfIoBoatEntry.setStatus('current')
scfIoBoatIoBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 1), ScfIoBoxIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatIoBoxId.setStatus('current')
scfIoBoatId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatId.setStatus('current')
scfIoBoatLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 3), ScfIoBoxComponentLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatLocation.setStatus('current')
scfIoBoatType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 4), ScfIoBoatTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatType.setStatus('current')
scfIoBoatOKtoRemoveLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 5), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatOKtoRemoveLED.setStatus('current')
scfIoBoatServiceReqLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 6), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatServiceReqLED.setStatus('current')
scfIoBoatActiveLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 7), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatActiveLED.setStatus('current')
scfIoBoatPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatPartNumber.setStatus('current')
scfIoBoatSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatSerialNumber.setStatus('current')
scfIoBoatDashLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 4, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoatDashLevel.setStatus('current')
scfLinkCardNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardNumber.setStatus('current')
scfLinkCardTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6), )
if mibBuilder.loadTexts: scfLinkCardTable.setStatus('current')
scfLinkCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfLinkCardIoBoxId"), (0, "OPL-SP-MIB", "scfLinkCardIoBoatId"), (0, "OPL-SP-MIB", "scfLinkCardId"))
if mibBuilder.loadTexts: scfLinkCardEntry.setStatus('current')
scfLinkCardIoBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 1), ScfIoBoxIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardIoBoxId.setStatus('current')
scfLinkCardIoBoatId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardIoBoatId.setStatus('current')
scfLinkCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 3), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardId.setStatus('current')
scfLinkCardDataLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 4), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardDataLED.setStatus('current')
scfLinkCardMgmtLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 5), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardMgmtLED.setStatus('current')
scfLinkCardDownlinkCardLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardDownlinkCardLocation.setStatus('current')
scfLinkCardDownlinkCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardDownlinkCardId.setStatus('current')
scfLinkCardPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardPartNumber.setStatus('current')
scfLinkCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardSerialNumber.setStatus('current')
scfLinkCardDashLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfLinkCardDashLevel.setStatus('current')
scfPowerSupplyFanNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanNumber.setStatus('current')
scfPowerSupplyFanTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8), )
if mibBuilder.loadTexts: scfPowerSupplyFanTable.setStatus('current')
scfPowerSupplyFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfPowerSupplyFanIoBoxId"), (0, "OPL-SP-MIB", "scfPowerSupplyFanId"))
if mibBuilder.loadTexts: scfPowerSupplyFanEntry.setStatus('current')
scfPowerSupplyFanIoBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 1), ScfIoBoxIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanIoBoxId.setStatus('current')
scfPowerSupplyFanId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanId.setStatus('current')
scfPowerSupplyFanLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 3), ScfIoBoxComponentLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanLocation.setStatus('current')
scfPowerSupplyFanOKtoRemoveLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 4), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanOKtoRemoveLED.setStatus('current')
scfPowerSupplyFanServiceReqLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 5), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanServiceReqLED.setStatus('current')
scfPowerSupplyFanACPowerLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 6), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanACPowerLED.setStatus('current')
scfPowerSupplyFanDCPowerLED = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 7), ScfIoBoxLEDState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanDCPowerLED.setStatus('current')
scfPowerSupplyFanPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanPartNumber.setStatus('current')
scfPowerSupplyFanSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanSerialNumber.setStatus('current')
scfPowerSupplyFanDashLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfPowerSupplyFanDashLevel.setStatus('current')
scfIoBoxSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorNumber.setStatus('current')
scfIoBoxSensorTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10), )
if mibBuilder.loadTexts: scfIoBoxSensorTable.setStatus('current')
scfIoBoxSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfIoBoxSensorIoBoxId"), (0, "OPL-SP-MIB", "scfIoBoxSensorIoBoxSubType"), (0, "OPL-SP-MIB", "scfIoBoxSensorIoBoxSubId"), (0, "OPL-SP-MIB", "scfIoBoxSensorId"))
if mibBuilder.loadTexts: scfIoBoxSensorEntry.setStatus('current')
scfIoBoxSensorIoBoxId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 1), ScfIoBoxIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorIoBoxId.setStatus('current')
scfIoBoxSensorIoBoxSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 2), ScfIoBoxComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorIoBoxSubType.setStatus('current')
scfIoBoxSensorIoBoxSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 3), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorIoBoxSubId.setStatus('current')
scfIoBoxSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 4), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorId.setStatus('current')
scfIoBoxSensorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorDescription.setStatus('current')
scfIoBoxSensorUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorUnits.setStatus('current')
scfIoBoxSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorValue.setStatus('current')
scfIoBoxSensorEnabledAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 8), ScfIoBoxEnabledAlarms()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorEnabledAlarms.setStatus('current')
scfIoBoxSensorMinAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorMinAlarm.setStatus('current')
scfIoBoxSensorMaxAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 11, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfIoBoxSensorMaxAlarm.setStatus('current')
scfComponentNumber = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentNumber.setStatus('current')
scfComponentTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2), )
if mibBuilder.loadTexts: scfComponentTable.setStatus('current')
scfComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1), ).setIndexNames((0, "OPL-SP-MIB", "scfComponentBoardType"), (0, "OPL-SP-MIB", "scfComponentBoardId"), (0, "OPL-SP-MIB", "scfComponentModuleType"), (0, "OPL-SP-MIB", "scfComponentModuleId"), (0, "OPL-SP-MIB", "scfComponentSubType"), (0, "OPL-SP-MIB", "scfComponentSubId"))
if mibBuilder.loadTexts: scfComponentEntry.setStatus('current')
scfComponentBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 1), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentBoardType.setStatus('current')
scfComponentBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 2), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentBoardId.setStatus('current')
scfComponentModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 3), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentModuleType.setStatus('current')
scfComponentModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 4), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentModuleId.setStatus('current')
scfComponentSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 5), ScfComponentType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentSubType.setStatus('current')
scfComponentSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 6), ScfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentSubId.setStatus('current')
scfComponentAdditionalInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentAdditionalInfo.setStatus('current')
scfComponentPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentPartNumber.setStatus('current')
scfComponentSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentSerialNumber.setStatus('current')
scfComponentProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentProductName.setStatus('current')
scfComponentManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentManufacturer.setStatus('current')
scfComponentManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentManufactureDate.setStatus('current')
scfComponentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 13), ScfStateTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentStatus.setStatus('current')
scfComponentErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 1, 12, 2, 1, 14), ScfErrorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scfComponentErrorStatus.setStatus('current')
scfTrapEventType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 1), ScfTrapEventTypeTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapEventType.setStatus('current')
scfTrapStatusEventType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 2), ScfTrapStatusEventTypeTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapStatusEventType.setStatus('current')
scfTrapDomainStatusAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 3), ScfDomainStatusAlarmType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapDomainStatusAlarmType.setStatus('current')
scfTrapIoBoxId = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 4), ScfIoBoxIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapIoBoxId.setStatus('current')
scfTrapIoBoxSubType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 5), ScfIoBoxComponentType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapIoBoxSubType.setStatus('current')
scfTrapIoBoxSubId = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 6), ScfIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapIoBoxSubId.setStatus('current')
scfTrapIoBoxTempEventType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 7), ScfTrapIoBoxTempEventTypeTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapIoBoxTempEventType.setStatus('current')
scfTrapIoBoxLedType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 8), ScfIoBoxLEDType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapIoBoxLedType.setStatus('current')
scfTrapIoBoxLedValue = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 9), ScfIoBoxLEDState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapIoBoxLedValue.setStatus('current')
scfTrapModeSwitchEventType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 1, 10), ScfTrapModeSwitchEventTypeTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: scfTrapModeSwitchEventType.setStatus('current')
scfSPFailover = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 1)).setObjects(("OPL-SP-MIB", "scfAgentIndex"))
if mibBuilder.loadTexts: scfSPFailover.setStatus('current')
scfComponentEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 2)).setObjects(("OPL-SP-MIB", "scfComponentSerialNumber"), ("OPL-SP-MIB", "scfTrapEventType"))
if mibBuilder.loadTexts: scfComponentEvent.setStatus('current')
scfComponentStatusEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 3)).setObjects(("OPL-SP-MIB", "scfComponentStatus"), ("OPL-SP-MIB", "scfTrapStatusEventType"))
if mibBuilder.loadTexts: scfComponentStatusEvent.setStatus('current')
scfXsbModeChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 4)).setObjects(("OPL-SP-MIB", "scfBoardXsbs"))
if mibBuilder.loadTexts: scfXsbModeChangeEvent.setStatus('current')
scfDomainStatusAlarm = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 5)).setObjects(("OPL-SP-MIB", "scfDomainStatus"), ("OPL-SP-MIB", "scfTrapDomainStatusAlarmType"))
if mibBuilder.loadTexts: scfDomainStatusAlarm.setStatus('current')
scfDomainXsbEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 6)).setObjects(("OPL-SP-MIB", "scfXsbDomainId"), ("OPL-SP-MIB", "scfTrapEventType"))
if mibBuilder.loadTexts: scfDomainXsbEvent.setStatus('current')
scfIoBoxEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 7)).setObjects(("OPL-SP-MIB", "scfTrapIoBoxId"), ("OPL-SP-MIB", "scfTrapIoBoxSubType"), ("OPL-SP-MIB", "scfTrapIoBoxSubId"), ("OPL-SP-MIB", "scfTrapEventType"))
if mibBuilder.loadTexts: scfIoBoxEvent.setStatus('current')
scfIoBoxLedEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 8)).setObjects(("OPL-SP-MIB", "scfTrapIoBoxId"), ("OPL-SP-MIB", "scfTrapIoBoxSubType"), ("OPL-SP-MIB", "scfTrapIoBoxSubId"), ("OPL-SP-MIB", "scfTrapIoBoxLedType"), ("OPL-SP-MIB", "scfTrapIoBoxLedValue"))
if mibBuilder.loadTexts: scfIoBoxLedEvent.setStatus('current')
scfIoBoxTemperatureEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 9)).setObjects(("OPL-SP-MIB", "scfTrapIoBoxId"), ("OPL-SP-MIB", "scfTrapIoBoxSubType"), ("OPL-SP-MIB", "scfTrapIoBoxSubId"), ("OPL-SP-MIB", "scfTrapIoBoxTempEventType"))
if mibBuilder.loadTexts: scfIoBoxTemperatureEvent.setStatus('current')
scfModeSwitchEvent = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 2, 0, 10)).setObjects(("OPL-SP-MIB", "scfTrapModeSwitchEventType"), ("OPL-SP-MIB", "scfModeSwitch"))
if mibBuilder.loadTexts: scfModeSwitchEvent.setStatus('current')
scfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 1, 1)).setObjects(("OPL-SP-MIB", "scfInfoGroup"), ("OPL-SP-MIB", "scfStateGroup"), ("OPL-SP-MIB", "scfMonitorInfoGroup"), ("OPL-SP-MIB", "scfSystemInfoGroup"), ("OPL-SP-MIB", "scfDomainInfoGroup"), ("OPL-SP-MIB", "scfXsbInfoGroup"), ("OPL-SP-MIB", "scfLsbInfoGroup"), ("OPL-SP-MIB", "scfBoardInfoGroup"), ("OPL-SP-MIB", "scfCpuInfoGroup"), ("OPL-SP-MIB", "scfMemoryInfoGroup"), ("OPL-SP-MIB", "scfIoBoxInfoGroup"), ("OPL-SP-MIB", "scfComponentInfoGroup"), ("OPL-SP-MIB", "scfNotificationObjectGroup"), ("OPL-SP-MIB", "scfNotificationsGroup"), ("OPL-SP-MIB", "scfSystemActualPowerConsumptionGroup"), ("OPL-SP-MIB", "scfSystemAmbientTemperatureGroup"), ("OPL-SP-MIB", "scfSystemPermittedPowerConsumptionGroup"), ("OPL-SP-MIB", "scfSystemAirFlowGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfCompliance = scfCompliance.setStatus('current')
scfInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 1)).setObjects(("OPL-SP-MIB", "scfAgentId"), ("OPL-SP-MIB", "scfAgentNumber"), ("OPL-SP-MIB", "scfAgentIndex"), ("OPL-SP-MIB", "scfXcpVersion"), ("OPL-SP-MIB", "scfIpAddressPortNumber"), ("OPL-SP-MIB", "scfIpAddressNumber"), ("OPL-SP-MIB", "scfIpAddressIndex"), ("OPL-SP-MIB", "scfIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfInfoGroup = scfInfoGroup.setStatus('current')
scfStateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 2)).setObjects(("OPL-SP-MIB", "scfSystemState"), ("OPL-SP-MIB", "scfFirmwareState"), ("OPL-SP-MIB", "scfHardwareState"), ("OPL-SP-MIB", "scfModeSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfStateGroup = scfStateGroup.setStatus('current')
scfMonitorInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 3)).setObjects(("OPL-SP-MIB", "scfMonitorNumber"), ("OPL-SP-MIB", "scfMonitorType"), ("OPL-SP-MIB", "scfMonitorBoardType"), ("OPL-SP-MIB", "scfMonitorBoardId"), ("OPL-SP-MIB", "scfMonitorModuleType"), ("OPL-SP-MIB", "scfMonitorModuleId"), ("OPL-SP-MIB", "scfMonitorId"), ("OPL-SP-MIB", "scfMonitorDescription"), ("OPL-SP-MIB", "scfMonitorAdditionalInfo"), ("OPL-SP-MIB", "scfMonitorUnits"), ("OPL-SP-MIB", "scfMonitorStatus"), ("OPL-SP-MIB", "scfMonitorValue"), ("OPL-SP-MIB", "scfMonitorValueStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfMonitorInfoGroup = scfMonitorInfoGroup.setStatus('current')
scfSystemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 4)).setObjects(("OPL-SP-MIB", "scfSystemName"), ("OPL-SP-MIB", "scfSystemType"), ("OPL-SP-MIB", "scfSystemSerialNumber"), ("OPL-SP-MIB", "scfSystemAdditionalInfo"), ("OPL-SP-MIB", "scfSystemCpuNumber"), ("OPL-SP-MIB", "scfSystemMemoryCapacity"), ("OPL-SP-MIB", "scfSystemReadyLED"), ("OPL-SP-MIB", "scfSystemPowerLED"), ("OPL-SP-MIB", "scfSystemCheckLED"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfSystemInfoGroup = scfSystemInfoGroup.setStatus('current')
scfDomainInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 5)).setObjects(("OPL-SP-MIB", "scfDomainNumber"), ("OPL-SP-MIB", "scfDomainId"), ("OPL-SP-MIB", "scfDomainCpuNumber"), ("OPL-SP-MIB", "scfDomainMemoryCapacity"), ("OPL-SP-MIB", "scfDomainObpVersion"), ("OPL-SP-MIB", "scfDomainObpAdditionalInfo"), ("OPL-SP-MIB", "scfDomainOsMachine"), ("OPL-SP-MIB", "scfDomainOsRelease"), ("OPL-SP-MIB", "scfDomainOsSysName"), ("OPL-SP-MIB", "scfDomainOsNodeName"), ("OPL-SP-MIB", "scfDomainOsVersion"), ("OPL-SP-MIB", "scfDomainOsAdditionalInfo"), ("OPL-SP-MIB", "scfDomainValid"), ("OPL-SP-MIB", "scfDomainXsbs"), ("OPL-SP-MIB", "scfDomainStatus"), ("OPL-SP-MIB", "scfDomainErrorStatus"), ("OPL-SP-MIB", "scfDomainConfigurationPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfDomainInfoGroup = scfDomainInfoGroup.setStatus('current')
scfXsbInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 6)).setObjects(("OPL-SP-MIB", "scfXsbType"), ("OPL-SP-MIB", "scfXsbNumber"), ("OPL-SP-MIB", "scfXsbId"), ("OPL-SP-MIB", "scfXsbStatus"), ("OPL-SP-MIB", "scfXsbErrorStatus"), ("OPL-SP-MIB", "scfXsbDomainId"), ("OPL-SP-MIB", "scfXsbDrStatus"), ("OPL-SP-MIB", "scfXsbSubStatusPower"), ("OPL-SP-MIB", "scfXsbSubStatusTest"), ("OPL-SP-MIB", "scfXsbSubStatusAssignment"), ("OPL-SP-MIB", "scfXsbSubStatusConnectivity"), ("OPL-SP-MIB", "scfXsbSubStatusConfiguration"), ("OPL-SP-MIB", "scfXsbSetupDID"), ("OPL-SP-MIB", "scfXsbNextDID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfXsbInfoGroup = scfXsbInfoGroup.setStatus('current')
scfLsbInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 7)).setObjects(("OPL-SP-MIB", "scfLsbType"), ("OPL-SP-MIB", "scfLsbNumber"), ("OPL-SP-MIB", "scfLsbDomainId"), ("OPL-SP-MIB", "scfLsbId"), ("OPL-SP-MIB", "scfLsbXsbId"), ("OPL-SP-MIB", "scfLsbNoMem"), ("OPL-SP-MIB", "scfLsbNoIo"), ("OPL-SP-MIB", "scfLsbFloatingBoard"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfLsbInfoGroup = scfLsbInfoGroup.setStatus('current')
scfBoardInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 8)).setObjects(("OPL-SP-MIB", "scfBoardNumber"), ("OPL-SP-MIB", "scfBoardType"), ("OPL-SP-MIB", "scfBoardId"), ("OPL-SP-MIB", "scfBoardName"), ("OPL-SP-MIB", "scfBoardAdditionalInfo"), ("OPL-SP-MIB", "scfBoardXsbs"), ("OPL-SP-MIB", "scfBoardState"), ("OPL-SP-MIB", "scfBoardCODEnabled"), ("OPL-SP-MIB", "scfBoardSubType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfBoardInfoGroup = scfBoardInfoGroup.setStatus('current')
scfCpuInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 9)).setObjects(("OPL-SP-MIB", "scfCpuNumber"), ("OPL-SP-MIB", "scfCpuBoardType"), ("OPL-SP-MIB", "scfCpuBoardId"), ("OPL-SP-MIB", "scfCpuModuleType"), ("OPL-SP-MIB", "scfCpuModuleId"), ("OPL-SP-MIB", "scfCpuSubType"), ("OPL-SP-MIB", "scfCpuSubId"), ("OPL-SP-MIB", "scfCpuType"), ("OPL-SP-MIB", "scfCpuFrequency"), ("OPL-SP-MIB", "scfCpuAdditionalInfo"), ("OPL-SP-MIB", "scfCpuState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfCpuInfoGroup = scfCpuInfoGroup.setStatus('current')
scfMemoryInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 10)).setObjects(("OPL-SP-MIB", "scfMemoryNumber"), ("OPL-SP-MIB", "scfMemoryBoardType"), ("OPL-SP-MIB", "scfMemoryBoardId"), ("OPL-SP-MIB", "scfMemoryModuleType"), ("OPL-SP-MIB", "scfMemoryModuleId"), ("OPL-SP-MIB", "scfMemorySubType"), ("OPL-SP-MIB", "scfMemorySubId"), ("OPL-SP-MIB", "scfMemoryName"), ("OPL-SP-MIB", "scfMemoryCapacity"), ("OPL-SP-MIB", "scfMemoryAdditionalInfo"), ("OPL-SP-MIB", "scfMemoryState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfMemoryInfoGroup = scfMemoryInfoGroup.setStatus('current')
scfIoBoxInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 11)).setObjects(("OPL-SP-MIB", "scfIoBoxNumber"), ("OPL-SP-MIB", "scfIoBoxId"), ("OPL-SP-MIB", "scfIoBoxLocationLED"), ("OPL-SP-MIB", "scfIoBoxOverTempLED"), ("OPL-SP-MIB", "scfIoBoxServiceReqLED"), ("OPL-SP-MIB", "scfIoBoxActiveLED"), ("OPL-SP-MIB", "scfIoBoxPartNumber"), ("OPL-SP-MIB", "scfIoBoxSerialNumber"), ("OPL-SP-MIB", "scfIoBoxDashLevel"), ("OPL-SP-MIB", "scfIoBoatNumber"), ("OPL-SP-MIB", "scfIoBoatIoBoxId"), ("OPL-SP-MIB", "scfIoBoatId"), ("OPL-SP-MIB", "scfIoBoatLocation"), ("OPL-SP-MIB", "scfIoBoatType"), ("OPL-SP-MIB", "scfIoBoatOKtoRemoveLED"), ("OPL-SP-MIB", "scfIoBoatServiceReqLED"), ("OPL-SP-MIB", "scfIoBoatActiveLED"), ("OPL-SP-MIB", "scfIoBoatPartNumber"), ("OPL-SP-MIB", "scfIoBoatSerialNumber"), ("OPL-SP-MIB", "scfIoBoatDashLevel"), ("OPL-SP-MIB", "scfLinkCardNumber"), ("OPL-SP-MIB", "scfLinkCardIoBoxId"), ("OPL-SP-MIB", "scfLinkCardIoBoatId"), ("OPL-SP-MIB", "scfLinkCardId"), ("OPL-SP-MIB", "scfLinkCardDataLED"), ("OPL-SP-MIB", "scfLinkCardMgmtLED"), ("OPL-SP-MIB", "scfLinkCardDownlinkCardLocation"), ("OPL-SP-MIB", "scfLinkCardDownlinkCardId"), ("OPL-SP-MIB", "scfLinkCardPartNumber"), ("OPL-SP-MIB", "scfLinkCardSerialNumber"), ("OPL-SP-MIB", "scfLinkCardDashLevel"), ("OPL-SP-MIB", "scfPowerSupplyFanNumber"), ("OPL-SP-MIB", "scfPowerSupplyFanIoBoxId"), ("OPL-SP-MIB", "scfPowerSupplyFanId"), ("OPL-SP-MIB", "scfPowerSupplyFanLocation"), ("OPL-SP-MIB", "scfPowerSupplyFanOKtoRemoveLED"), ("OPL-SP-MIB", "scfPowerSupplyFanServiceReqLED"), ("OPL-SP-MIB", "scfPowerSupplyFanACPowerLED"), ("OPL-SP-MIB", "scfPowerSupplyFanDCPowerLED"), ("OPL-SP-MIB", "scfPowerSupplyFanPartNumber"), ("OPL-SP-MIB", "scfPowerSupplyFanSerialNumber"), ("OPL-SP-MIB", "scfPowerSupplyFanDashLevel"), ("OPL-SP-MIB", "scfIoBoxSensorNumber"), ("OPL-SP-MIB", "scfIoBoxSensorIoBoxId"), ("OPL-SP-MIB", "scfIoBoxSensorIoBoxSubType"), ("OPL-SP-MIB", "scfIoBoxSensorIoBoxSubId"), ("OPL-SP-MIB", "scfIoBoxSensorId"), ("OPL-SP-MIB", "scfIoBoxSensorDescription"), ("OPL-SP-MIB", "scfIoBoxSensorUnits"), ("OPL-SP-MIB", "scfIoBoxSensorValue"), ("OPL-SP-MIB", "scfIoBoxSensorEnabledAlarms"), ("OPL-SP-MIB", "scfIoBoxSensorMinAlarm"), ("OPL-SP-MIB", "scfIoBoxSensorMaxAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfIoBoxInfoGroup = scfIoBoxInfoGroup.setStatus('current')
scfComponentInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 12)).setObjects(("OPL-SP-MIB", "scfComponentNumber"), ("OPL-SP-MIB", "scfComponentBoardType"), ("OPL-SP-MIB", "scfComponentBoardId"), ("OPL-SP-MIB", "scfComponentModuleType"), ("OPL-SP-MIB", "scfComponentModuleId"), ("OPL-SP-MIB", "scfComponentSubType"), ("OPL-SP-MIB", "scfComponentSubId"), ("OPL-SP-MIB", "scfComponentAdditionalInfo"), ("OPL-SP-MIB", "scfComponentPartNumber"), ("OPL-SP-MIB", "scfComponentSerialNumber"), ("OPL-SP-MIB", "scfComponentProductName"), ("OPL-SP-MIB", "scfComponentManufacturer"), ("OPL-SP-MIB", "scfComponentManufactureDate"), ("OPL-SP-MIB", "scfComponentStatus"), ("OPL-SP-MIB", "scfComponentErrorStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfComponentInfoGroup = scfComponentInfoGroup.setStatus('current')
scfNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 13)).setObjects(("OPL-SP-MIB", "scfTrapEventType"), ("OPL-SP-MIB", "scfTrapStatusEventType"), ("OPL-SP-MIB", "scfTrapDomainStatusAlarmType"), ("OPL-SP-MIB", "scfTrapIoBoxId"), ("OPL-SP-MIB", "scfTrapIoBoxSubType"), ("OPL-SP-MIB", "scfTrapIoBoxSubId"), ("OPL-SP-MIB", "scfTrapIoBoxTempEventType"), ("OPL-SP-MIB", "scfTrapIoBoxLedType"), ("OPL-SP-MIB", "scfTrapIoBoxLedValue"), ("OPL-SP-MIB", "scfTrapModeSwitchEventType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfNotificationObjectGroup = scfNotificationObjectGroup.setStatus('current')
scfSystemActualPowerConsumptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 14)).setObjects(("OPL-SP-MIB", "scfSystemActualPowerConsumptionValue"), ("OPL-SP-MIB", "scfSystemActualPowerConsumptionUnit"), ("OPL-SP-MIB", "scfSystemActualPowerMinPollingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfSystemActualPowerConsumptionGroup = scfSystemActualPowerConsumptionGroup.setStatus('current')
scfSystemAmbientTemperatureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 15)).setObjects(("OPL-SP-MIB", "scfSystemAmbientTemperatureValue"), ("OPL-SP-MIB", "scfSystemAmbientTemperatureUnit"), ("OPL-SP-MIB", "scfSystemAmbientTemperatureMinPollingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfSystemAmbientTemperatureGroup = scfSystemAmbientTemperatureGroup.setStatus('current')
scfSystemPermittedPowerConsumptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 16)).setObjects(("OPL-SP-MIB", "scfSystemPermittedPowerConsumptionValue"), ("OPL-SP-MIB", "scfSystemPermittedPowerConsumptionUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfSystemPermittedPowerConsumptionGroup = scfSystemPermittedPowerConsumptionGroup.setStatus('current')
scfSystemAirFlowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 1, 17)).setObjects(("OPL-SP-MIB", "scfSystemExhaustAirFlowValue"), ("OPL-SP-MIB", "scfSystemExhaustAirFlowUnit"), ("OPL-SP-MIB", "scfSystemExhaustAirFlowMinPollingInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfSystemAirFlowGroup = scfSystemAirFlowGroup.setStatus('current')
scfNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 211, 1, 15, 3, 1, 3, 2, 2, 1)).setObjects(("OPL-SP-MIB", "scfSPFailover"), ("OPL-SP-MIB", "scfComponentEvent"), ("OPL-SP-MIB", "scfComponentStatusEvent"), ("OPL-SP-MIB", "scfXsbModeChangeEvent"), ("OPL-SP-MIB", "scfDomainStatusAlarm"), ("OPL-SP-MIB", "scfDomainXsbEvent"), ("OPL-SP-MIB", "scfIoBoxEvent"), ("OPL-SP-MIB", "scfIoBoxLedEvent"), ("OPL-SP-MIB", "scfIoBoxTemperatureEvent"), ("OPL-SP-MIB", "scfModeSwitchEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    scfNotificationsGroup = scfNotificationsGroup.setStatus('current')
mibBuilder.exportSymbols("OPL-SP-MIB", scfLsbNoIo=scfLsbNoIo, scfAgentEntry=scfAgentEntry, scfDomainEntry=scfDomainEntry, scfXsbDrStatus=scfXsbDrStatus, scfBoardType=scfBoardType, ScfModeSwitchState=ScfModeSwitchState, scfIoBoatLocation=scfIoBoatLocation, scfCpuEntry=scfCpuEntry, ScfAssignmentState=ScfAssignmentState, scfXsbSubStatusPower=scfXsbSubStatusPower, scfLinkCardNumber=scfLinkCardNumber, scfTrapIoBoxSubId=scfTrapIoBoxSubId, scfMonitorValueStatus=scfMonitorValueStatus, scfNotificationsGroup=scfNotificationsGroup, scfSystemAirFlowGroup=scfSystemAirFlowGroup, scfMIBGroups=scfMIBGroups, scfLsbId=scfLsbId, scfLinkCardDownlinkCardLocation=scfLinkCardDownlinkCardLocation, ScfIoBoxComponentLocation=ScfIoBoxComponentLocation, scfMemoryBoardType=scfMemoryBoardType, scfMonitorBoardType=scfMonitorBoardType, scfBoardNumber=scfBoardNumber, scfSPFailover=scfSPFailover, ScfStateTC=ScfStateTC, scfCpuNumber=scfCpuNumber, scfIoBoatPartNumber=scfIoBoatPartNumber, ScfTestState=ScfTestState, scfSystemReadyLED=scfSystemReadyLED, scfDomainOsMachine=scfDomainOsMachine, scfDomainXsbs=scfDomainXsbs, scfComponentSubId=scfComponentSubId, scfLsbNoMem=scfLsbNoMem, scfComponentPartNumber=scfComponentPartNumber, scfPowerSupplyFanDCPowerLED=scfPowerSupplyFanDCPowerLED, scfSystemActualPowerConsumption=scfSystemActualPowerConsumption, scfIoBoxActiveLED=scfIoBoxActiveLED, scfPowerSupplyFanPartNumber=scfPowerSupplyFanPartNumber, scfComponentSerialNumber=scfComponentSerialNumber, scfDomainCpuNumber=scfDomainCpuNumber, scfComponentSubType=scfComponentSubType, scfIoBoatType=scfIoBoatType, scfIoBoxEvent=scfIoBoxEvent, scfDomainObpVersion=scfDomainObpVersion, scfIoBoxLocationLED=scfIoBoxLocationLED, scfXsbSubStatusConnectivity=scfXsbSubStatusConnectivity, ScfIndex=ScfIndex, scfBoardAdditionalInfo=scfBoardAdditionalInfo, scfLinkCardSerialNumber=scfLinkCardSerialNumber, scfIoBoxSensorEntry=scfIoBoxSensorEntry, scfComponentStatus=scfComponentStatus, scfMonitorModuleId=scfMonitorModuleId, scfXsbId=scfXsbId, scfComponentStatusEvent=scfComponentStatusEvent, ScfTrapStatusEventTypeTC=ScfTrapStatusEventTypeTC, scfIoBoatOKtoRemoveLED=scfIoBoatOKtoRemoveLED, scfCpuInfoGroup=scfCpuInfoGroup, scfMemoryEntry=scfMemoryEntry, scfIoBoatSerialNumber=scfIoBoatSerialNumber, scfLinkCardIoBoxId=scfLinkCardIoBoxId, scfSystemAmbientTemperatureGroup=scfSystemAmbientTemperatureGroup, scfModeSwitchEvent=scfModeSwitchEvent, scfMonitorNumber=scfMonitorNumber, scfMonitorDescription=scfMonitorDescription, scfDomainInfoGroup=scfDomainInfoGroup, ScfDomainStatusTC=ScfDomainStatusTC, scfDomainOsSysName=scfDomainOsSysName, scfIpAddressIndex=scfIpAddressIndex, scfComponentBoardId=scfComponentBoardId, scfAgentNumber=scfAgentNumber, scfIoBoxSensorNumber=scfIoBoxSensorNumber, scfDomainOsRelease=scfDomainOsRelease, scfIoBoxSensorMinAlarm=scfIoBoxSensorMinAlarm, scfDomainOsVersion=scfDomainOsVersion, scfTrapStatusEventType=scfTrapStatusEventType, ScfDomainConfigPolicy=ScfDomainConfigPolicy, scfLinkCardId=scfLinkCardId, scfIoBoxPartNumber=scfIoBoxPartNumber, scfSystemAmbientTemperatureValue=scfSystemAmbientTemperatureValue, scfMIBObjectGroups=scfMIBObjectGroups, scfMonitorModuleType=scfMonitorModuleType, scfComponentBoardType=scfComponentBoardType, scfCpuBoardType=scfCpuBoardType, scfComponentInfo=scfComponentInfo, scfPowerSupplyFanLocation=scfPowerSupplyFanLocation, ScfTrapIoBoxTempEventTypeTC=ScfTrapIoBoxTempEventTypeTC, scfAgentTable=scfAgentTable, ScfComponentType=ScfComponentType, sparcEnterprise=sparcEnterprise, scfMonitorType=scfMonitorType, scfSystemAmbientTemperatureMinPollingInterval=scfSystemAmbientTemperatureMinPollingInterval, scfSystemPermittedPowerConsumptionValue=scfSystemPermittedPowerConsumptionValue, scfCpuFrequency=scfCpuFrequency, scfCpuModuleType=scfCpuModuleType, scfAgentIndex=scfAgentIndex, scfTrapEventType=scfTrapEventType, scfTrapIoBoxTempEventType=scfTrapIoBoxTempEventType, scfIoBoatId=scfIoBoatId, scfXsbSubStatusConfiguration=scfXsbSubStatusConfiguration, scfIoBoxSensorValue=scfIoBoxSensorValue, scfIoBoatTable=scfIoBoatTable, scfSystemPermittedPowerConsumption=scfSystemPermittedPowerConsumption, ScfValidStatus=ScfValidStatus, scfMonitorValue=scfMonitorValue, scfXsbDomainId=scfXsbDomainId, scfLinkCardDataLED=scfLinkCardDataLED, scfXsbNumber=scfXsbNumber, scfSystemPowerSource=scfSystemPowerSource, scfSystemExhaustAirFlowValue=scfSystemExhaustAirFlowValue, ScfBoardSubTypeTC=ScfBoardSubTypeTC, scfXsbInfo=scfXsbInfo, ScfLEDState=ScfLEDState, scfSystemAmbientTemperatureUnit=scfSystemAmbientTemperatureUnit, scfDomainMemoryCapacity=scfDomainMemoryCapacity, scfComponentAdditionalInfo=scfComponentAdditionalInfo, ScfTrapEventTypeTC=ScfTrapEventTypeTC, scfCpuModuleId=scfCpuModuleId, scfDomainValid=scfDomainValid, scfSystemPermittedPowerConsumptionUnit=scfSystemPermittedPowerConsumptionUnit, scfPowerSupplyFanIoBoxId=scfPowerSupplyFanIoBoxId, scfBoardXsbs=scfBoardXsbs, scfIoBoatNumber=scfIoBoatNumber, scfComponentNumber=scfComponentNumber, scfIpAddressNumber=scfIpAddressNumber, scfPowerSupplyFanOKtoRemoveLED=scfPowerSupplyFanOKtoRemoveLED, scfPowerSupplyFanDashLevel=scfPowerSupplyFanDashLevel, scfMemoryState=scfMemoryState, scfIpAddress=scfIpAddress, scfBoardName=scfBoardName, scfLsbDomainId=scfLsbDomainId, scfNotificationObjectGroup=scfNotificationObjectGroup, scfSystemState=scfSystemState, scfMIBTraps=scfMIBTraps, scfMonitorUnits=scfMonitorUnits, scfBoardCODEnabled=scfBoardCODEnabled, PYSNMP_MODULE_ID=oplSpMIB, scfComponentManufactureDate=scfComponentManufactureDate, scfSystemAmbientTemperature=scfSystemAmbientTemperature, scfBoardEntry=scfBoardEntry, scfIoBoxInfoGroup=scfIoBoxInfoGroup, scfBoardId=scfBoardId, scfIoBoatServiceReqLED=scfIoBoatServiceReqLED, scfBoardState=scfBoardState, scfIoBoxSerialNumber=scfIoBoxSerialNumber, scfLinkCardTable=scfLinkCardTable, scfLinkCardEntry=scfLinkCardEntry, scfLinkCardMgmtLED=scfLinkCardMgmtLED, scfXsbTable=scfXsbTable, ScfCodState=ScfCodState, scfMIBConformances=scfMIBConformances, scfXsbInfoGroup=scfXsbInfoGroup, ScfIoBoxEnabledAlarms=ScfIoBoxEnabledAlarms, scfTrapIoBoxLedType=scfTrapIoBoxLedType, scfIoBoxSensorIoBoxSubId=scfIoBoxSensorIoBoxSubId, scfBoardInfo=scfBoardInfo, scfDomainNumber=scfDomainNumber, scfLsbInfoGroup=scfLsbInfoGroup, scfIpAddressPortNumber=scfIpAddressPortNumber, scfPowerSupplyFanId=scfPowerSupplyFanId, scfCpuType=scfCpuType, scfIoBoxSensorTable=scfIoBoxSensorTable, scfDomainStatusAlarm=scfDomainStatusAlarm, scfLsbTable=scfLsbTable, scfIoBoxDashLevel=scfIoBoxDashLevel, scfSystemName=scfSystemName, ScfIoBoatTypeTC=ScfIoBoatTypeTC, scfMemoryInfoGroup=scfMemoryInfoGroup, ScfDRState=ScfDRState, scfInfo=scfInfo, scfIoBoxOverTempLED=scfIoBoxOverTempLED, scfSystemSerialNumber=scfSystemSerialNumber, oplSpMIB=oplSpMIB, scfSystemPowerLED=scfSystemPowerLED, solaris=solaris, ScfXsbIndex=ScfXsbIndex, scfLsbXsbId=scfLsbXsbId, scfIoBoatIoBoxId=scfIoBoatIoBoxId, scfMemoryNumber=scfMemoryNumber, ScfMonitorTypeTC=ScfMonitorTypeTC, ScfTrapModeSwitchEventTypeTC=ScfTrapModeSwitchEventTypeTC, scfCpuState=scfCpuState, scfMemoryName=scfMemoryName, scfSystemExhaustAirFlowUnit=scfSystemExhaustAirFlowUnit, ScfErrorStatus=ScfErrorStatus, scfLinkCardIoBoatId=scfLinkCardIoBoatId, scfFirmwareState=scfFirmwareState, scfMonitorId=scfMonitorId, scfMIBNotifGroups=scfMIBNotifGroups, ScfIoBoxIndex=ScfIoBoxIndex, scfState=scfState, scfMonitorBoardId=scfMonitorBoardId, scfDomainOsAdditionalInfo=scfDomainOsAdditionalInfo, scfSystemAirFlow=scfSystemAirFlow, ScfIoBoxLEDState=ScfIoBoxLEDState, scfPowerSupplyFanACPowerLED=scfPowerSupplyFanACPowerLED, scfPowerSupplyFanEntry=scfPowerSupplyFanEntry, scfTrapIoBoxId=scfTrapIoBoxId, scfCpuSubId=scfCpuSubId, scfDomainXsbEvent=scfDomainXsbEvent, scfDomainErrorStatus=scfDomainErrorStatus, scfMemoryTable=scfMemoryTable, scfXsbModeChangeEvent=scfXsbModeChangeEvent, scfComponentInfoGroup=scfComponentInfoGroup, scfIoBoxSensorId=scfIoBoxSensorId, scfIoBoxEntry=scfIoBoxEntry, scfIoBoxNumber=scfIoBoxNumber, scfLsbType=scfLsbType, scfIoBoxSensorEnabledAlarms=scfIoBoxSensorEnabledAlarms, scfComponentProductName=scfComponentProductName, fujitsu=fujitsu, scfDomainObpAdditionalInfo=scfDomainObpAdditionalInfo, ScfIoBoxComponentType=ScfIoBoxComponentType, scfLinkCardPartNumber=scfLinkCardPartNumber, scfCpuSubType=scfCpuSubType, scfIoBoxId=scfIoBoxId, scfTrapIoBoxSubType=scfTrapIoBoxSubType, scfCpuTable=scfCpuTable, scfSystemAvailablePowerConsumption=scfSystemAvailablePowerConsumption, scfMonitorTable=scfMonitorTable, product=product, scfIoBoatDashLevel=scfIoBoatDashLevel, scfLsbEntry=scfLsbEntry, scfMemoryBoardId=scfMemoryBoardId, scfIoBoxSensorDescription=scfIoBoxSensorDescription, scfSystemActualPowerConsumptionGroup=scfSystemActualPowerConsumptionGroup, scfIpAddressEntry=scfIpAddressEntry, scfDomainId=scfDomainId, scfIoBoatActiveLED=scfIoBoatActiveLED, scfComponentModuleId=scfComponentModuleId, scfMemorySubType=scfMemorySubType, scfTrapModeSwitchEventType=scfTrapModeSwitchEventType, scfMIBTrapData=scfMIBTrapData, scfSystemCpuNumber=scfSystemCpuNumber, scfSystemActualPowerConsumptionValue=scfSystemActualPowerConsumptionValue, scfIpAddressTable=scfIpAddressTable, scfLsbInfo=scfLsbInfo, scfXsbType=scfXsbType, scfLsbNumber=scfLsbNumber, ScfConnectivityState=ScfConnectivityState, scfXsbStatus=scfXsbStatus, scfMIBTrapPrefix=scfMIBTrapPrefix, scfIoBoxSensorUnits=scfIoBoxSensorUnits, scfSystemMemoryCapacity=scfSystemMemoryCapacity, scfMonitorEntry=scfMonitorEntry, scfSystemPermittedPowerConsumptionGroup=scfSystemPermittedPowerConsumptionGroup, scfIoBoxServiceReqLED=scfIoBoxServiceReqLED, scfMemoryModuleId=scfMemoryModuleId, ScfDomainStatusAlarmType=ScfDomainStatusAlarmType, scfPowerSupplyFanTable=scfPowerSupplyFanTable, scfObjects=scfObjects, scfSystemType=scfSystemType, scfIoBoxSensorMaxAlarm=scfIoBoxSensorMaxAlarm, scfIoBoxInfo=scfIoBoxInfo, scfSystemCheckLED=scfSystemCheckLED, scfMemoryModuleType=scfMemoryModuleType)
mibBuilder.exportSymbols("OPL-SP-MIB", scfMonitorAdditionalInfo=scfMonitorAdditionalInfo, scfIoBoxTable=scfIoBoxTable, scfTrapDomainStatusAlarmType=scfTrapDomainStatusAlarmType, scfMonitorInfo=scfMonitorInfo, scfStateGroup=scfStateGroup, scfComponentManufacturer=scfComponentManufacturer, scfAgentId=scfAgentId, scfDomainOsNodeName=scfDomainOsNodeName, scfInfoGroup=scfInfoGroup, scfMemorySubId=scfMemorySubId, scfSystemActualPowerConsumptionUnit=scfSystemActualPowerConsumptionUnit, scfCpuAdditionalInfo=scfCpuAdditionalInfo, scfIoBoxSensorIoBoxId=scfIoBoxSensorIoBoxId, scfMonitorInfoGroup=scfMonitorInfoGroup, scfXsbSetupDID=scfXsbSetupDID, ScfConfigurationState=ScfConfigurationState, ScfUsageState=ScfUsageState, scfXsbErrorStatus=scfXsbErrorStatus, scfXsbSubStatusAssignment=scfXsbSubStatusAssignment, scfXcpVersion=scfXcpVersion, scfLinkCardDownlinkCardId=scfLinkCardDownlinkCardId, scfComponentErrorStatus=scfComponentErrorStatus, scfCpuBoardId=scfCpuBoardId, scfDomainTable=scfDomainTable, scfIoBoxSensorIoBoxSubType=scfIoBoxSensorIoBoxSubType, scfMemoryCapacity=scfMemoryCapacity, scfCompliance=scfCompliance, ScfIoBoxLEDType=ScfIoBoxLEDType, scfPowerSupplyFanServiceReqLED=scfPowerSupplyFanServiceReqLED, scfDomainInfo=scfDomainInfo, scfDomainConfigurationPolicy=scfDomainConfigurationPolicy, scfMIBCompliances=scfMIBCompliances, scfBoardInfoGroup=scfBoardInfoGroup, scfXsbEntry=scfXsbEntry, scfMemoryInfo=scfMemoryInfo, scfLinkCardDashLevel=scfLinkCardDashLevel, scfComponentEvent=scfComponentEvent, scfBoardSubType=scfBoardSubType, scfModeSwitch=scfModeSwitch, scfCpuInfo=scfCpuInfo, scfSystemAdditionalInfo=scfSystemAdditionalInfo, scfXsbNextDID=scfXsbNextDID, scfSystemActualPowerMinPollingInterval=scfSystemActualPowerMinPollingInterval, scfLsbFloatingBoard=scfLsbFloatingBoard, scfSystemInfoGroup=scfSystemInfoGroup, scfSystemInfo=scfSystemInfo, scfBoardTable=scfBoardTable, scfSystemExhaustAirFlowMinPollingInterval=scfSystemExhaustAirFlowMinPollingInterval, scfIoBoxLedEvent=scfIoBoxLedEvent, scfPowerSupplyFanSerialNumber=scfPowerSupplyFanSerialNumber, scfPowerSupplyFanNumber=scfPowerSupplyFanNumber, scfComponentEntry=scfComponentEntry, scfTrapIoBoxLedValue=scfTrapIoBoxLedValue, scfIoBoxTemperatureEvent=scfIoBoxTemperatureEvent, scfXsbSubStatusTest=scfXsbSubStatusTest, scfDomainStatus=scfDomainStatus, scfComponentTable=scfComponentTable, scfMemoryAdditionalInfo=scfMemoryAdditionalInfo, scfMonitorStatus=scfMonitorStatus, scfIoBoatEntry=scfIoBoatEntry, scfHardwareState=scfHardwareState, scfComponentModuleType=scfComponentModuleType)
