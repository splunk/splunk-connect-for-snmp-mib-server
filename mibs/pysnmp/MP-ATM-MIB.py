#
# PySNMP MIB module MP-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MP-ATM-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:03:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
AtmTrafficDescrParamIndex, = mibBuilder.importSymbols("ATM-MIB", "AtmTrafficDescrParamIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibIdentifier, Bits, IpAddress, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, mgmt, Gauge32, NotificationType, iso, ModuleIdentity, NotificationType, ObjectIdentity, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "Bits", "IpAddress", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mgmt", "Gauge32", "NotificationType", "iso", "ModuleIdentity", "NotificationType", "ObjectIdentity", "Unsigned32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class NetPrefix(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(13, 13)
    fixedLength = 13

class DisplayString(OctetString):
    pass

class DateAndTime(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(8, 8), ValueSizeConstraint(11, 11), )
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class PhysAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
nec = MibIdentifier((1, 3, 6, 1, 4, 1, 119))
necProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1))
datax = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3))
mmpf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3, 13))
mmn9110 = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3, 13, 1))
mmn9120 = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3, 13, 2))
nec_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2)).setLabel("nec-mib")
necProductDepend = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3))
datax_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3)).setLabel("datax-mib")
mmpf_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13)).setLabel("mmpf-mib")
mpSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 1))
mpIfCard = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 2))
mpEtherPort = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 3))
mpVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 4))
mpBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 5))
mpDbAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 6))
mpEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 7))
mpUiSession = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 8))
mpFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 9))
mpDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 10))
mpIp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 11))
mpRip = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 12))
mpSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 13))
mpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 14))
mpCli = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 15))
mpAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 16))
mpLis = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 17))
mpDns = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 18))
mpLec = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 19))
mpMpc = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 20))
mpStp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 21))
mpLlc = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 22))
mpOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 23))
mpObsCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 101))
mpCardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 102))
mpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 103))
mpPvoice = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 104))
mpAtmCallCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110))
mpCes = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 111))
mpIpsw = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 112))
mpInsCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 113))
mpFfr = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 114))
class AtmAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(20, 20), )
class MpAtmCCCladType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("com", 1), ("mux", 2), ("atm-uni", 3), ("atm-trunk", 4), ("atm-uni-vmc", 5), ("lvc", 6), ("ffr", 7), ("odt", 8), ("ces", 9), ("ins", 10), ("sel", 11), ("eth", 12), ("atm-trunk-cdm", 13))

mpAtmCCBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 1))
mpAtmCCNextTrafficDescrIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 1, 1), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCNextTrafficDescrIndex.setStatus('mandatory')
mpAtmCCNextNodeVci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCNextNodeVci.setStatus('mandatory')
mpAtmCCStaticPVPC = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2))
mpAtmCCStaticPvpTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1), )
if mibBuilder.loadTexts: mpAtmCCStaticPvpTable.setStatus('mandatory')
mpAtmCCStaticPvpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCStaticPvpIndex"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvpLowIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvpLowVpi"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvpHighIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvpHighVpi"))
if mibBuilder.loadTexts: mpAtmCCStaticPvpEntry.setStatus('mandatory')
mpAtmCCStaticPvpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mpAtmCCStaticPvpIndex.setStatus('mandatory')
mpAtmCCStaticPvpLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowIfIndex.setStatus('mandatory')
mpAtmCCStaticPvpLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowVpi.setStatus('mandatory')
mpAtmCCStaticPvpHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 4), Integer32())
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighIfIndex.setStatus('mandatory')
mpAtmCCStaticPvpHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighVpi.setStatus('mandatory')
mpAtmCCStaticPvpLowReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 6), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowReceiveTrafficDescrIndex.setStatus('mandatory')
mpAtmCCStaticPvpLowTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 7), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowTransmitTrafficDescrIndex.setStatus('mandatory')
mpAtmCCStaticPvpHighReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 8), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighReceiveTrafficDescrIndex.setStatus('mandatory')
mpAtmCCStaticPvpHighTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 9), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighTransmitTrafficDescrIndex.setStatus('mandatory')
mpAtmCCStaticPvpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpPriority.setStatus('mandatory')
mpAtmCCStaticPvpLowCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 11), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowCladType.setStatus('mandatory')
mpAtmCCStaticPvpHighCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 12), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighCladType.setStatus('mandatory')
mpAtmCCStaticPvpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpAdminStatus.setStatus('mandatory')
mpAtmCCStaticPvpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvpOperStatus.setStatus('mandatory')
mpAtmCCStaticPvpPvpId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpPvpId.setStatus('mandatory')
mpAtmCCStaticPvpSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpSeqNo.setStatus('mandatory')
mpAtmCCStaticPvpPgcRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvpPgcRequest.setStatus('mandatory')
mpAtmCCStaticPvpCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpCfgStatus.setStatus('mandatory')
mpAtmCCStaticPvpErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvpErrInfo.setStatus('mandatory')
mpAtmCCStaticPvcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2), )
if mibBuilder.loadTexts: mpAtmCCStaticPvcTable.setStatus('mandatory')
mpAtmCCStaticPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCStaticPvcIndex"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvcLowIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvcLowVpi"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvcLowVci"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvcHighIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvcHighVpi"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvcHighVci"))
if mibBuilder.loadTexts: mpAtmCCStaticPvcEntry.setStatus('mandatory')
mpAtmCCStaticPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mpAtmCCStaticPvcIndex.setStatus('mandatory')
mpAtmCCStaticPvcLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowIfIndex.setStatus('mandatory')
mpAtmCCStaticPvcLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowVpi.setStatus('mandatory')
mpAtmCCStaticPvcLowVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowVci.setStatus('mandatory')
mpAtmCCStaticPvcHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 5), Integer32())
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighIfIndex.setStatus('mandatory')
mpAtmCCStaticPvcHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighVpi.setStatus('mandatory')
mpAtmCCStaticPvcHighVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighVci.setStatus('mandatory')
mpAtmCCStaticPvcLowReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 8), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowReceiveTrafficDescrIndex.setStatus('mandatory')
mpAtmCCStaticPvcLowTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 9), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowTransmitTrafficDescrIndex.setStatus('mandatory')
mpAtmCCStaticPvcHighReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 10), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighReceiveTrafficDescrIndex.setStatus('mandatory')
mpAtmCCStaticPvcHighTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 11), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighTransmitTrafficDescrIndex.setStatus('mandatory')
mpAtmCCStaticPvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcPriority.setStatus('mandatory')
mpAtmCCStaticPvcLowCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 13), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowCladType.setStatus('mandatory')
mpAtmCCStaticPvcHighCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 14), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighCladType.setStatus('mandatory')
mpAtmCCStaticPvcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcAdminStatus.setStatus('mandatory')
mpAtmCCStaticPvcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvcOperStatus.setStatus('mandatory')
mpAtmCCStaticPvcPvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcPvcId.setStatus('mandatory')
mpAtmCCStaticPvcSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcSeqNo.setStatus('mandatory')
mpAtmCCStaticPvcPgcRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvcPgcRequest.setStatus('mandatory')
mpAtmCCStaticPvcCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcCfgStatus.setStatus('mandatory')
mpAtmCCStaticPvcErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvcErrInfo.setStatus('mandatory')
mpAtmCCSoftPVPC = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3))
mpAtmCCSoftPvpTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1), )
if mibBuilder.loadTexts: mpAtmCCSoftPvpTable.setStatus('mandatory')
mpAtmCCSoftPvpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCSoftPvpLeafReference"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvpIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvpVpi"))
if mibBuilder.loadTexts: mpAtmCCSoftPvpEntry.setStatus('mandatory')
mpAtmCCSoftPvpLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mpAtmCCSoftPvpLeafReference.setStatus('mandatory')
mpAtmCCSoftPvpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvpIfIndex.setStatus('mandatory')
mpAtmCCSoftPvpVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvpVpi.setStatus('mandatory')
mpAtmCCSoftPvpReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 4), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpReceiveTrafficDescrIndex.setStatus('mandatory')
mpAtmCCSoftPvpTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 5), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpTransmitTrafficDescrIndex.setStatus('mandatory')
mpAtmCCSoftPvpTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 6), AtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpTargetAddress.setStatus('mandatory')
mpAtmCCSoftPvpTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpTargetVpi.setStatus('mandatory')
mpAtmCCSoftPvpLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpLastReleaseCause.setStatus('mandatory')
mpAtmCCSoftPvpLastReleaseDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpLastReleaseDiagnostic.setStatus('mandatory')
mpAtmCCSoftPvpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpPriority.setStatus('mandatory')
mpAtmCCSoftPvpCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 11), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCladType.setStatus('mandatory')
mpAtmCCSoftPvpOriginalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 12), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpOriginalAddress.setStatus('mandatory')
mpAtmCCSoftPvpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpAdminStatus.setStatus('mandatory')
mpAtmCCSoftPvpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpOperStatus.setStatus('mandatory')
mpAtmCCSoftPvpPgcRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpPgcRequest.setStatus('mandatory')
mpAtmCCSoftPvpCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCfgStatus.setStatus('mandatory')
mpAtmCCSoftPvpErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpErrInfo.setStatus('mandatory')
mpAtmCCSoftPvcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2), )
if mibBuilder.loadTexts: mpAtmCCSoftPvcTable.setStatus('mandatory')
mpAtmCCSoftPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCSoftPvcLeafReference"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvcIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvcVpi"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvcVci"))
if mibBuilder.loadTexts: mpAtmCCSoftPvcEntry.setStatus('mandatory')
mpAtmCCSoftPvcLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mpAtmCCSoftPvcLeafReference.setStatus('mandatory')
mpAtmCCSoftPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvcIfIndex.setStatus('mandatory')
mpAtmCCSoftPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvcVpi.setStatus('mandatory')
mpAtmCCSoftPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 4), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvcVci.setStatus('mandatory')
mpAtmCCSoftPvcReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 5), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcReceiveTrafficDescrIndex.setStatus('mandatory')
mpAtmCCSoftPvcTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 6), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcTransmitTrafficDescrIndex.setStatus('mandatory')
mpAtmCCSoftPvcTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 7), AtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcTargetAddress.setStatus('mandatory')
mpAtmCCSoftPvcTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcTargetVpi.setStatus('mandatory')
mpAtmCCSoftPvcTargetVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcTargetVci.setStatus('mandatory')
mpAtmCCSoftPvcLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcLastReleaseCause.setStatus('mandatory')
mpAtmCCSoftPvcLastReleaseDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcLastReleaseDiagnostic.setStatus('mandatory')
mpAtmCCSoftPvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcPriority.setStatus('mandatory')
mpAtmCCSoftPvcCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 13), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCladType.setStatus('mandatory')
mpAtmCCSoftPvcOriginalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 14), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcOriginalAddress.setStatus('mandatory')
mpAtmCCSoftPvcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcAdminStatus.setStatus('mandatory')
mpAtmCCSoftPvcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcOperStatus.setStatus('mandatory')
mpAtmCCSoftPvcPgcRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcPgcRequest.setStatus('mandatory')
mpAtmCCSoftPvcCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCfgStatus.setStatus('mandatory')
mpAtmCCSoftPvcErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcErrInfo.setStatus('mandatory')
mpAtmCCSoftPvpCalledTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3), )
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledTable.setStatus('mandatory')
mpAtmCCSoftPvpCalledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCSoftPvpCalledLeafReference"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvpCalledIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvpCalledVpi"))
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledEntry.setStatus('mandatory')
mpAtmCCSoftPvpCalledLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledLeafReference.setStatus('mandatory')
mpAtmCCSoftPvpCalledIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledIfIndex.setStatus('mandatory')
mpAtmCCSoftPvpCalledVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledVpi.setStatus('mandatory')
mpAtmCCSoftPvpCalledReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 4), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledReceiveTrafficDescrIndex.setStatus('mandatory')
mpAtmCCSoftPvpCalledTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 5), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledTransmitTrafficDescrIndex.setStatus('mandatory')
mpAtmCCSoftPvpCalledTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 6), AtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledTargetAddress.setStatus('mandatory')
mpAtmCCSoftPvpCalledTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledTargetVpi.setStatus('mandatory')
mpAtmCCSoftPvpCalledLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledLastReleaseCause.setStatus('mandatory')
mpAtmCCSoftPvpCalledLastReleaseDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledLastReleaseDiagnostic.setStatus('mandatory')
mpAtmCCSoftPvpCalledPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledPriority.setStatus('mandatory')
mpAtmCCSoftPvpCalledCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 11), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledCladType.setStatus('mandatory')
mpAtmCCSoftPvpCalledOriginalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 12), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledOriginalAddress.setStatus('mandatory')
mpAtmCCSoftPvpCalledAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledAdminStatus.setStatus('mandatory')
mpAtmCCSoftPvpCalledOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledOperStatus.setStatus('mandatory')
mpAtmCCSoftPvpCalledPgcRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledPgcRequest.setStatus('mandatory')
mpAtmCCSoftPvpCalledCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledCfgStatus.setStatus('mandatory')
mpAtmCCSoftPvpCalledErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledErrInfo.setStatus('mandatory')
mpAtmCCSoftPvcCalledTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4), )
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTable.setStatus('mandatory')
mpAtmCCSoftPvcCalledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCSoftPvcCalledLeafReference"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvcCalledIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvcCalledVpi"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvcCalledVci"))
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledEntry.setStatus('mandatory')
mpAtmCCSoftPvcCalledLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledLeafReference.setStatus('mandatory')
mpAtmCCSoftPvcCalledIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledIfIndex.setStatus('mandatory')
mpAtmCCSoftPvcCalledVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledVpi.setStatus('mandatory')
mpAtmCCSoftPvcCalledVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 4), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledVci.setStatus('mandatory')
mpAtmCCSoftPvcCalledReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 5), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledReceiveTrafficDescrIndex.setStatus('mandatory')
mpAtmCCSoftPvcCalledTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 6), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTransmitTrafficDescrIndex.setStatus('mandatory')
mpAtmCCSoftPvcCalledTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 7), AtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTargetAddress.setStatus('mandatory')
mpAtmCCSoftPvcCalledTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTargetVpi.setStatus('mandatory')
mpAtmCCSoftPvcCalledTargetVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTargetVci.setStatus('mandatory')
mpAtmCCSoftPvcCalledLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledLastReleaseCause.setStatus('mandatory')
mpAtmCCSoftPvcCalledLastReleaseDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledLastReleaseDiagnostic.setStatus('mandatory')
mpAtmCCSoftPvcCalledPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledPriority.setStatus('mandatory')
mpAtmCCSoftPvcCalledCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 13), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledCladType.setStatus('mandatory')
mpAtmCCSoftPvcCalledOriginalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 14), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledOriginalAddress.setStatus('mandatory')
mpAtmCCSoftPvcCalledAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledAdminStatus.setStatus('mandatory')
mpAtmCCSoftPvcCalledOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledOperStatus.setStatus('mandatory')
mpAtmCCSoftPvcCalledPgcRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledPgcRequest.setStatus('mandatory')
mpAtmCCSoftPvcCalledCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledCfgStatus.setStatus('mandatory')
mpAtmCCSoftPvcCalledErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledErrInfo.setStatus('mandatory')
mpAtmCCStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4))
mpAtmCCVpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1), )
if mibBuilder.loadTexts: mpAtmCCVpStatisticsTable.setStatus('mandatory')
mpAtmCCVpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "MP-ATM-MIB", "mpAtmCCVpStatVpi"))
if mibBuilder.loadTexts: mpAtmCCVpStatisticsEntry.setStatus('mandatory')
mpAtmCCVpStatVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCVpStatVpi.setStatus('mandatory')
mpAtmCCVpStatInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpStatInCells.setStatus('mandatory')
mpAtmCCVpStatInCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpStatInCellsCounters.setStatus('mandatory')
mpAtmCCVpStatOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpStatOutCells.setStatus('mandatory')
mpAtmCCVpStatOutCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpStatOutCellsCounters.setStatus('mandatory')
mpAtmCCVpStatInDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpStatInDropCells.setStatus('mandatory')
mpAtmCCVpStatInDropCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpStatInDropCellsCounters.setStatus('mandatory')
mpAtmCCVcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2), )
if mibBuilder.loadTexts: mpAtmCCVcStatisticsTable.setStatus('mandatory')
mpAtmCCVcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "MP-ATM-MIB", "mpAtmCCVcStatVpi"), (0, "MP-ATM-MIB", "mpAtmCCVcStatVci"))
if mibBuilder.loadTexts: mpAtmCCVcStatisticsEntry.setStatus('mandatory')
mpAtmCCVcStatVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCVcStatVpi.setStatus('mandatory')
mpAtmCCVcStatVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCVcStatVci.setStatus('mandatory')
mpAtmCCVcStatInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVcStatInCells.setStatus('mandatory')
mpAtmCCVcStatInCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVcStatInCellsCounters.setStatus('mandatory')
mpAtmCCVcStatOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVcStatOutCells.setStatus('mandatory')
mpAtmCCVcStatOutCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVcStatOutCellsCounters.setStatus('mandatory')
mpAtmCCVcStatInDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVcStatInDropCells.setStatus('mandatory')
mpAtmCCVcStatInDropCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVcStatInDropCellsCounters.setStatus('mandatory')
mpAtmCCOuspStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3), )
if mibBuilder.loadTexts: mpAtmCCOuspStatisticsTable.setStatus('mandatory')
mpAtmCCOuspStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCOuspStatIndex"))
if mibBuilder.loadTexts: mpAtmCCOuspStatisticsEntry.setStatus('mandatory')
mpAtmCCOuspStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCOuspStatIndex.setStatus('mandatory')
mpAtmCCOuspStatRcvCrcErrCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvCrcErrCellsCounters.setStatus('mandatory')
mpAtmCCOuspStatSendOfifoFullCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatSendOfifoFullCounters.setStatus('mandatory')
mpAtmCCOuspStatRcvBufOverCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvBufOverCounters.setStatus('mandatory')
mpAtmCCOuspStatRcvUnknownCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvUnknownCellsCounters.setStatus('mandatory')
mpAtmCCOuspStatRcvInvalidCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvInvalidCellsCounters.setStatus('mandatory')
mpAtmCCOuspStatSendScheduleErrorCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatSendScheduleErrorCounters.setStatus('mandatory')
mpAtmCCOuspStatRcvScheduleErrorCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvScheduleErrorCounters.setStatus('mandatory')
mpAtmCCOuspStatSendInvalidCdvCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatSendInvalidCdvCounters.setStatus('mandatory')
mpAtmCCPhyStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4), )
if mibBuilder.loadTexts: mpAtmCCPhyStatisticsTable.setStatus('mandatory')
mpAtmCCPhyStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCPhyStatisticsEntry.setStatus('mandatory')
mpAtmCCPhyStatTmtCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatTmtCellsCounters.setStatus('mandatory')
mpAtmCCPhyStatRcvCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatRcvCellsCounters.setStatus('mandatory')
mpAtmCCPhyStatCorrectHecErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatCorrectHecErrCounters.setStatus('mandatory')
mpAtmCCPhyStatUncorrectHecErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatUncorrectHecErrCounters.setStatus('mandatory')
mpAtmCCPhyStatB1ErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatB1ErrCounters.setStatus('mandatory')
mpAtmCCPhyStatB2ErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatB2ErrCounters.setStatus('mandatory')
mpAtmCCPhyStatB3ErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatB3ErrCounters.setStatus('mandatory')
mpAtmCCPhyStatFebeCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatFebeCounters.setStatus('mandatory')
mpAtmCCPhyStatSymbolErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatSymbolErrCounters.setStatus('mandatory')
mpAtmCCPhyStatParityErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatParityErrCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5), )
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatisticsTable.setStatus('mandatory')
mpAtmCCPortAlarmStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatisticsEntry.setStatus('mandatory')
mpAtmCCPortAlarmStatRedLosCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLosCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedLofCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLofCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedMsAisCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedMsAisCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedLopCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLopCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedPAisCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedPAisCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedLocCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLocCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedResetCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedCcRedCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedCcRedCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedOofCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedOofCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedAisCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedAisCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedPOofCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedPOofCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedBadSigCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedBadSigCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedLcdCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLcdCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedLinkAisCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLinkAisCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatRedInfo0Counters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedInfo0Counters.setStatus('mandatory')
mpAtmCCPortAlarmStatYelMsRdiCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelMsRdiCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatYelPRdiCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelPRdiCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatYelCcYelCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelCcYelCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatYelRaiCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelRaiCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatYelPRaiCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelPRaiCounters.setStatus('mandatory')
mpAtmCCPortAlarmStatYelInfo2Counters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelInfo2Counters.setStatus('mandatory')
mpAtmCCVpTunnellingStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 6), )
if mibBuilder.loadTexts: mpAtmCCVpTunnellingStatisticsTable.setStatus('mandatory')
mpAtmCCVpTunnellingStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCVpTunnellingStatisticsEntry.setStatus('mandatory')
mpAtmCCVpTunStatTmtCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunStatTmtCellsCounters.setStatus('mandatory')
mpAtmCCVpTunStatRcvCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunStatRcvCellsCounters.setStatus('mandatory')
mpAtmCCVccStatisticsRegTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7), )
if mibBuilder.loadTexts: mpAtmCCVccStatisticsRegTable.setStatus('mandatory')
mpAtmCCVccStatisticsRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "MP-ATM-MIB", "mpAtmCCVccStatRegVpi"), (0, "MP-ATM-MIB", "mpAtmCCVccStatRegVci"))
if mibBuilder.loadTexts: mpAtmCCVccStatisticsRegEntry.setStatus('mandatory')
mpAtmCCVccStatRegVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCVccStatRegVpi.setStatus('mandatory')
mpAtmCCVccStatRegVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCVccStatRegVci.setStatus('mandatory')
mpAtmCCVccStatRegInCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatRegInCellsCounters.setStatus('mandatory')
mpAtmCCVccStatRegOutCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatRegOutCellsCounters.setStatus('mandatory')
mpAtmCCVccStatRegStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCVccStatRegStatus.setStatus('mandatory')
mpAtmCCVccStatRegErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatRegErrInfo.setStatus('mandatory')
mpAtmCCResourceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5))
mpAtmCCPortResourceInfomationTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1), )
if mibBuilder.loadTexts: mpAtmCCPortResourceInfomationTable.setStatus('mandatory')
mpAtmCCPortResourceInfomationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCPortResourceInfomationEntry.setStatus('mandatory')
mpAtmCCPortResInfoPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoPortSpeed.setStatus('mandatory')
mpAtmCCPortResInfoMaxVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxVpiBits.setStatus('mandatory')
mpAtmCCPortResInfoMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxVciBits.setStatus('mandatory')
mpAtmCCPortResInfoMaxVPC = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxVPC.setStatus('mandatory')
mpAtmCCPortResInfoMaxVCC = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxVCC.setStatus('mandatory')
mpAtmCCPortResInfoMaxSvpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxSvpcVpi.setStatus('mandatory')
mpAtmCCPortResInfoMaxSvccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxSvccVpi.setStatus('mandatory')
mpAtmCCPortResInfoMinSvccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMinSvccVci.setStatus('mandatory')
mpAtmCCPortResInfoShaperKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("vp", 2), ("vc", 3), ("vpAndVc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoShaperKind.setStatus('mandatory')
mpAtmCCPortResInfoVpTunnellingConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notConfigured", 1), ("configured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoVpTunnellingConfig.setStatus('mandatory')
mpAtmCCPortResInfoSvccVciHuntWay = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low2high", 1), ("high2low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoSvccVciHuntWay.setStatus('mandatory')
mpAtmCCPortResInfoVpiCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoVpiCounters.setStatus('mandatory')
mpAtmCCPortResInfoVpcCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoVpcCounters.setStatus('mandatory')
mpAtmCCPortResInfoVccCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoVccCounters.setStatus('mandatory')
mpAtmCCPortBandwidthInfomationTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2), )
if mibBuilder.loadTexts: mpAtmCCPortBandwidthInfomationTable.setStatus('mandatory')
mpAtmCCPortBandwidthInfomationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "MP-ATM-MIB", "mpAtmCCPortBwInfoVpi"))
if mibBuilder.loadTexts: mpAtmCCPortBandwidthInfomationEntry.setStatus('mandatory')
mpAtmCCPortBwInfoVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCPortBwInfoVpi.setStatus('mandatory')
mpAtmCCPortBwInfoRawBandwidthBps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortBwInfoRawBandwidthBps.setStatus('mandatory')
mpAtmCCPortBwInfoRawBandwidthCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortBwInfoRawBandwidthCps.setStatus('mandatory')
mpAtmCCPortBwInfoTmitUsedBwCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortBwInfoTmitUsedBwCps.setStatus('mandatory')
mpAtmCCPortBwInfoRcvUsedBwCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortBwInfoRcvUsedBwCps.setStatus('mandatory')
mpAtmCCPortBwInfoVciCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortBwInfoVciCounters.setStatus('mandatory')
mpAtmCCBwInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3), )
if mibBuilder.loadTexts: mpAtmCCBwInfoPortTable.setStatus('mandatory')
mpAtmCCBwInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCBwInfoPortEntry.setStatus('mandatory')
mpAtmCCBwInfoPortRawBandwidthBps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortRawBandwidthBps.setStatus('mandatory')
mpAtmCCBwInfoPortRawBandwidthCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortRawBandwidthCps.setStatus('mandatory')
mpAtmCCBwInfoPortTmitUsedBwCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortTmitUsedBwCps.setStatus('mandatory')
mpAtmCCBwInfoPortRcvUsedBwCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortRcvUsedBwCps.setStatus('mandatory')
mpAtmCCBwInfoPortTmitRemainBwCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortTmitRemainBwCps.setStatus('mandatory')
mpAtmCCBwInfoPortRcvRemainBwCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortRcvRemainBwCps.setStatus('mandatory')
mpAtmCCBwInfoPortVpTunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortVpTunneling.setStatus('mandatory')
mpAtmCCProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6))
mpAtmCCSscopTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1), )
if mibBuilder.loadTexts: mpAtmCCSscopTable.setStatus('mandatory')
mpAtmCCSscopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCSscopEntry.setStatus('mandatory')
mpAtmCCSscopTimerPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 1), Integer32().clone(750)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopTimerPoll.setStatus('mandatory')
mpAtmCCSscopTimerNoResponce = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 2), Integer32().clone(7000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopTimerNoResponce.setStatus('mandatory')
mpAtmCCSscopTimerKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 3), Integer32().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopTimerKeepAlive.setStatus('mandatory')
mpAtmCCSscopTimerIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 4), Integer32().clone(15000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopTimerIdle.setStatus('mandatory')
mpAtmCCSscopTimerCc = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 5), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopTimerCc.setStatus('mandatory')
mpAtmCCSscopMaxCc = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 6), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopMaxCc.setStatus('mandatory')
mpAtmCCSscopMaxPd = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 7), Integer32().clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopMaxPd.setStatus('mandatory')
mpAtmCCSscopMaxStat = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 8), Integer32().clone(67)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopMaxStat.setStatus('mandatory')
mpAtmCCSscopClearBuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSscopClearBuffs.setStatus('mandatory')
mpAtmCCSscopCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSscopCredit.setStatus('mandatory')
mpAtmCCIlmiTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 2), )
if mibBuilder.loadTexts: mpAtmCCIlmiTable.setStatus('mandatory')
mpAtmCCIlmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCIlmiEntry.setStatus('mandatory')
mpAtmCCIlmiConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCIlmiConfigStatus.setStatus('mandatory')
mpAtmCClmiMaxTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 2, 1, 2), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCClmiMaxTransmissions.setStatus('mandatory')
mpAtmCCIlmiRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 2, 1, 3), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCIlmiRetransmitInterval.setStatus('mandatory')
mpAtmCCSignallingTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3), )
if mibBuilder.loadTexts: mpAtmCCSignallingTable.setStatus('mandatory')
mpAtmCCSignallingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCSignallingEntry.setStatus('mandatory')
mpAtmCCSignallingT301 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 1), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT301.setStatus('mandatory')
mpAtmCCSignallingT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 2), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT303.setStatus('mandatory')
mpAtmCCSignallingT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 3), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT308.setStatus('mandatory')
mpAtmCCSignallingT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 4), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT309.setStatus('mandatory')
mpAtmCCSignallingT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 5), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT310.setStatus('mandatory')
mpAtmCCSignallingT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 6), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT313.setStatus('mandatory')
mpAtmCCSignallingT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 7), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT316.setStatus('mandatory')
mpAtmCCSignallingT317 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 8), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT317.setStatus('mandatory')
mpAtmCCSignallingT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 9), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT322.setStatus('mandatory')
mpAtmCCSignallingT331 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 10), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT331.setStatus('mandatory')
mpAtmCCSignallingT397 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 11), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT397.setStatus('mandatory')
mpAtmCCSignallingT398 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 12), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT398.setStatus('mandatory')
mpAtmCCSignallingT399 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 13), Integer32().clone(34)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT399.setStatus('mandatory')
mpAtmCCProtocolTrapInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 4), )
if mibBuilder.loadTexts: mpAtmCCProtocolTrapInfoTable.setStatus('mandatory')
mpAtmCCProtocolTrapInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 4, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCProtocolTrapInfoIndex"))
if mibBuilder.loadTexts: mpAtmCCProtocolTrapInfoEntry.setStatus('mandatory')
mpAtmCCProtocolTrapInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCProtocolTrapInfoIndex.setStatus('mandatory')
mpAtmCCProtocolTrapInfoCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCProtocolTrapInfoCause.setStatus('mandatory')
mpAtmCCPathTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7))
mpAtmCCVccStatusTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1), )
if mibBuilder.loadTexts: mpAtmCCVccStatusTable.setStatus('mandatory')
mpAtmCCVccStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCVccStatusOrgPort"), (0, "MP-ATM-MIB", "mpAtmCCVccStatusOrgVpi"), (0, "MP-ATM-MIB", "mpAtmCCVccStatusOrgVci"))
if mibBuilder.loadTexts: mpAtmCCVccStatusEntry.setStatus('mandatory')
mpAtmCCVccStatusOrgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgPort.setStatus('mandatory')
mpAtmCCVccStatusOrgVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgVpi.setStatus('mandatory')
mpAtmCCVccStatusOrgVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgVci.setStatus('mandatory')
mpAtmCCVccStatusDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusDestPort.setStatus('mandatory')
mpAtmCCVccStatusDestVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusDestVpi.setStatus('mandatory')
mpAtmCCVccStatusDestVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusDestVci.setStatus('mandatory')
mpAtmCCVccStatusPathKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pvc", 1), ("softpvc", 2), ("insPvc", 3), ("pvp", 4), ("softpvp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusPathKind.setStatus('mandatory')
mpAtmCCVccStatusOrgCallKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("calling", 1), ("outgoing", 2), ("incoming", 3), ("called", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgCallKind.setStatus('mandatory')
mpAtmCCVccStatusDestCallKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("calling", 1), ("outgoing", 2), ("incoming", 3), ("called", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusDestCallKind.setStatus('mandatory')
mpAtmCCVccStatusAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusAdminStatus.setStatus('mandatory')
mpAtmCCVccStatusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusOperStatus.setStatus('mandatory')
mpAtmCCVccStatusInsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trunkPort", 1), ("insPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusInsStatus.setStatus('mandatory')
mpAtmCCVccStatusOrgPortVpTunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgPortVpTunneling.setStatus('mandatory')
mpAtmCCVccStatusDestPortVpTunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusDestPortVpTunneling.setStatus('mandatory')
mpAtmCCVccStatusConnCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("p2p", 1), ("p2mpRoot", 2), ("p2mpLeaf", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusConnCastType.setStatus('mandatory')
mpAtmCCPvcTraceControlTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2), )
if mibBuilder.loadTexts: mpAtmCCPvcTraceControlTable.setStatus('mandatory')
mpAtmCCPvcTraceCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCPvcTraceIndex"))
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlEntry.setStatus('mandatory')
mpAtmCCPvcTraceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceIndex.setStatus('mandatory')
mpAtmCCPvcTraceCtlPathKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vcc", 1), ("vpc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlPathKind.setStatus('mandatory')
mpAtmCCPvcTraceCtlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlIfIndex.setStatus('mandatory')
mpAtmCCPvcTraceCtlVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlVpi.setStatus('mandatory')
mpAtmCCPvcTraceCtlVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlVci.setStatus('mandatory')
mpAtmCCPvcTraceCtlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("collecting", 3), ("done", 4), ("cancel", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlStatus.setStatus('mandatory')
mpAtmCCPvcTraceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3), )
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoTable.setStatus('mandatory')
mpAtmCCPvcTraceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCPvcTraceIndex"), (0, "MP-ATM-MIB", "mpAtmCCPvcTraceEntryIndex"))
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoEntry.setStatus('mandatory')
mpAtmCCPvcTraceEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: mpAtmCCPvcTraceEntryIndex.setStatus('mandatory')
mpAtmCCPvcTraceInfoSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoSysName.setStatus('mandatory')
mpAtmCCPvcTraceInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoIfIndex.setStatus('mandatory')
mpAtmCCPvcTraceInfoVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoVpi.setStatus('mandatory')
mpAtmCCPvcTraceInfoVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoVci.setStatus('mandatory')
mpAtmCCPvcTraceInfoPathKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pvc", 1), ("softpvc", 2), ("inspvc", 3), ("pvp", 4), ("softpvp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoPathKind.setStatus('mandatory')
mpAtmCCPvcTraceInfoCallKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("calling", 1), ("outgoing", 2), ("incoming", 3), ("called", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoCallKind.setStatus('mandatory')
mpAtmCCPvcTraceInfoLastSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notlast", 1), ("last", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoLastSegment.setStatus('mandatory')
mpAtmCCMuxMib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8))
mpAtmCCMuxStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1))
mpAtmCCMuxStatReceiveCellsCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatReceiveCellsCounters.setStatus('mandatory')
mpAtmCCMuxStatReceiveCellsCntOvfCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatReceiveCellsCntOvfCounters.setStatus('mandatory')
mpAtmCCMuxStatDiscardCellsBufOvfCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsBufOvfCounters.setStatus('mandatory')
mpAtmCCMuxStatDiscardCellsBufOvfCntOvfCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsBufOvfCntOvfCounters.setStatus('mandatory')
mpAtmCCMuxStatDiscardCellsHTErrCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsHTErrCounters.setStatus('mandatory')
mpAtmCCMuxStatDiscardCellsHTErrCntOvfCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsHTErrCntOvfCounters.setStatus('mandatory')
mpAtmCCMuxStatDiscardCellsThresholdOvfCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsThresholdOvfCounters.setStatus('mandatory')
mpAtmCCMuxStatDiscardCellsThresholdOvfCntOvfCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsThresholdOvfCntOvfCounters.setStatus('mandatory')
mpAtmCCVpTunneling = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9))
mpAtmCCVpTunnelingTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1), )
if mibBuilder.loadTexts: mpAtmCCVpTunnelingTable.setStatus('mandatory')
mpAtmCCVpTunnelingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "MP-ATM-MIB", "mpAtmCCVpTunnelingVpi"))
if mibBuilder.loadTexts: mpAtmCCVpTunnelingEntry.setStatus('mandatory')
mpAtmCCVpTunnelingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCVpTunnelingVpi.setStatus('mandatory')
mpAtmCCVpTunnelingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingAdminStatus.setStatus('mandatory')
mpAtmCCVpTunnelingOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingOperStatus.setStatus('mandatory')
mpAtmCCVpTunnelingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingSpeed.setStatus('mandatory')
mpAtmCCVpTunnelingNeighborInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingNeighborInfo.setStatus('mandatory')
mpAtmCCVpTunnelingPnniVer = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingPnniVer.setStatus('mandatory')
mpAtmCCVpTunnelingContinuityCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingContinuityCheck.setStatus('mandatory')
mpAtmCCVpTunnelingTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingTrapState.setStatus('mandatory')
mpAtmCCVpTunnelingSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("informational", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingSeverity.setStatus('mandatory')
mpAtmCCVpTunnelingCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingCfgStatus.setStatus('mandatory')
mpAtmCCVpTunnelingErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingErrInfo.setStatus('mandatory')
mpAtmCCPathTest = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10))
mpAtmCCPathTestTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1), )
if mibBuilder.loadTexts: mpAtmCCPathTestTable.setStatus('mandatory')
mpAtmCCPathTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "MP-ATM-MIB", "mpAtmCCPathTestVpi"), (0, "MP-ATM-MIB", "mpAtmCCPathTestVci"))
if mibBuilder.loadTexts: mpAtmCCPathTestEntry.setStatus('mandatory')
mpAtmCCPathTestVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPathTestVpi.setStatus('mandatory')
mpAtmCCPathTestVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPathTestVci.setStatus('mandatory')
mpAtmCCPathTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("testReq", 1), ("sendStart", 2), ("sendStop", 3), ("loopSet", 4), ("loopRelease", 5), ("delete", 6), ("unknown", 7))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPathTestStatus.setStatus('mandatory')
mpAtmCCPathTestSendDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("mux", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPathTestSendDirection.setStatus('mandatory')
mpAtmCCPathTestSendTime = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 68400)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPathTestSendTime.setStatus('mandatory')
mpAtmCCPathTestSendCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPathTestSendCellsCounters.setStatus('mandatory')
mpAtmCCPathTestRcvCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPathTestRcvCellsCounters.setStatus('mandatory')
mpAtmCCPathTestErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPathTestErrInfo.setStatus('mandatory')
mpAtmCCPvcGroupCutover = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11))
mpAtmCCPvcGroupCutoverBaseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 1))
mpAtmCCPvcGroupCutoverEnable = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ture", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcGroupCutoverEnable.setStatus('mandatory')
mpAtmCCPvcGroupCutoverStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("null", 1), ("underAvtivate", 2), ("underDeactivate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcGroupCutoverStatus.setStatus('mandatory')
mpAtmCCUnitePvcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2))
mpAtmCCUpgcBaseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 1))
mpAtmCCUpgcTotalGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCUpgcTotalGroupNumber.setStatus('mandatory')
mpAtmCCUpgcBaseActiveGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCUpgcBaseActiveGroupNumber.setStatus('mandatory')
mpAtmCCUnitePvcGroupControlTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 2), )
if mibBuilder.loadTexts: mpAtmCCUnitePvcGroupControlTable.setStatus('mandatory')
mpAtmCCUpgcCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 2, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCUpgcIndex"))
if mibBuilder.loadTexts: mpAtmCCUpgcCtlEntry.setStatus('mandatory')
mpAtmCCUpgcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCUpgcIndex.setStatus('mandatory')
mpAtmCCUpgcCtlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("register", 1), ("active", 2), ("inactive", 3), ("delete", 4), ("stsInactive", 5), ("underEstablish", 6), ("underDeactivate", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCUpgcCtlStatus.setStatus('mandatory')
mpAtmCCUpgcCtlCountPgc = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCUpgcCtlCountPgc.setStatus('mandatory')
mpAtmCCUpgcCtlResult = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCUpgcCtlResult.setStatus('mandatory')
mpAtmCCUnitePvcGroupRegisterTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 3), )
if mibBuilder.loadTexts: mpAtmCCUnitePvcGroupRegisterTable.setStatus('mandatory')
mpAtmCCUpgcRegiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 3, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCUpgcIndex"), (0, "MP-ATM-MIB", "mpAtmCCUpgcPgcIndex"))
if mibBuilder.loadTexts: mpAtmCCUpgcRegiEntry.setStatus('mandatory')
mpAtmCCUpgcPgcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCUpgcPgcIndex.setStatus('mandatory')
mpAtmCCUpgcRegiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCUpgcRegiStatus.setStatus('mandatory')
mpAtmCCPvcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3))
mpAtmCCPgcBaseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 1))
mpAtmCCPgcTotalGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPgcTotalGroupNumber.setStatus('mandatory')
mpAtmCCPvcGroupControlTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 2), )
if mibBuilder.loadTexts: mpAtmCCPvcGroupControlTable.setStatus('mandatory')
mpAtmCCPgcCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 2, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCPgcIndex"))
if mibBuilder.loadTexts: mpAtmCCPgcCtlEntry.setStatus('mandatory')
mpAtmCCPgcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPgcIndex.setStatus('mandatory')
mpAtmCCPgcCtlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("register", 1), ("active", 2), ("inactive", 3), ("delete", 4), ("stsInactive", 5), ("underEstablish", 6), ("underDeactivate", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcCtlStatus.setStatus('mandatory')
mpAtmCCPgcCtlCountPvc = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPgcCtlCountPvc.setStatus('mandatory')
mpAtmCCPgcCtlResult = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPgcCtlResult.setStatus('mandatory')
mpAtmCCPvcGroupRegisterTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3), )
if mibBuilder.loadTexts: mpAtmCCPvcGroupRegisterTable.setStatus('mandatory')
mpAtmCCPgcRegiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCPgcIndex"), (0, "MP-ATM-MIB", "mpAtmCCPgcPvcIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCPgcPvcVpi"), (0, "MP-ATM-MIB", "mpAtmCCPgcPvcVci"))
if mibBuilder.loadTexts: mpAtmCCPgcRegiEntry.setStatus('mandatory')
mpAtmCCPgcPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCPgcPvcIfIndex.setStatus('mandatory')
mpAtmCCPgcPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCPgcPvcVpi.setStatus('mandatory')
mpAtmCCPgcPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCPgcPvcVci.setStatus('mandatory')
mpAtmCCPgcPvcKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticPvc", 1), ("softPvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcPvcKind.setStatus('mandatory')
mpAtmCCPgcStaticPvcDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcStaticPvcDestIfIndex.setStatus('mandatory')
mpAtmCCPgcSoftPvcDestAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 6), AtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcSoftPvcDestAtmAddress.setStatus('mandatory')
mpAtmCCPgcPvcDestVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcPvcDestVpi.setStatus('mandatory')
mpAtmCCPgcPvcDestVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcPvcDestVci.setStatus('mandatory')
mpAtmCCPgcPvcReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 9), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcPvcReceiveTrafficDescrIndex.setStatus('mandatory')
mpAtmCCPgcPvcTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 10), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcPvcTransmitTrafficDescrIndex.setStatus('mandatory')
mpAtmCCPgcPvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcPvcPriority.setStatus('mandatory')
mpAtmCCPgcStaticPvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcStaticPvcId.setStatus('mandatory')
mpAtmCCPgcStaticPvcSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcStaticPvcSeqNo.setStatus('mandatory')
mpAtmCCPgcSoftPvcCallKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("calling", 1), ("called", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcSoftPvcCallKind.setStatus('mandatory')
mpAtmCCPgcRegiAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("stsInactive", 3), ("connectWait", 4), ("disconnectWait", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcRegiAdminStatus.setStatus('mandatory')
mpAtmCCPgcRegiCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcRegiCfgStatus.setStatus('mandatory')
mpAtmCCPgcRegiErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPgcRegiErrInfo.setStatus('mandatory')
mpAtmCCPvcGroupActiveInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 4), )
if mibBuilder.loadTexts: mpAtmCCPvcGroupActiveInfoTable.setStatus('mandatory')
mpAtmCCPgcActInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 4, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCPgcActGrpNum"))
if mibBuilder.loadTexts: mpAtmCCPgcActInfoEntry.setStatus('mandatory')
mpAtmCCPgcActGrpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPgcActGrpNum.setStatus('mandatory')
mpAtmCCAtmMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12))
mpAtmCCAtmMulticastRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1))
mpAtmCCAtmMultiRootIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiRootIfIndex.setStatus('mandatory')
mpAtmCCAtmMultiRootVpi = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiRootVpi.setStatus('mandatory')
mpAtmCCAtmMultiRootVci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiRootVci.setStatus('mandatory')
mpAtmCCAtmMultiLeafIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiLeafIfIndex.setStatus('mandatory')
mpAtmCCAtmMultiLeafVpi = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiLeafVpi.setStatus('mandatory')
mpAtmCCAtmMultiLeafVci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiLeafVci.setStatus('mandatory')
mpAtmCCAtmMultiTrafficDescrIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 7), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiTrafficDescrIndex.setStatus('mandatory')
mpAtmCCAtmMultiSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiSlotNumber.setStatus('mandatory')
mpAtmCCAtmMultiVcRdiResponse = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ture", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiVcRdiResponse.setStatus('mandatory')
mpAtmCCAtmMultiPvcId = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiPvcId.setStatus('mandatory')
mpAtmCCAtmMultiSeqNo = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiSeqNo.setStatus('mandatory')
mpAtmCCAtmMultiCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiCfgStatus.setStatus('mandatory')
mpAtmCCAtmMultiRegErrInfo = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiRegErrInfo.setStatus('mandatory')
mpAtmCCAtmMulticastCtlTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2), )
if mibBuilder.loadTexts: mpAtmCCAtmMulticastCtlTable.setStatus('mandatory')
mpAtmCCAtmMultiCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCAtmMultiIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiVpi"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiVci"))
if mibBuilder.loadTexts: mpAtmCCAtmMultiCtlEntry.setStatus('mandatory')
mpAtmCCAtmMultiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCAtmMultiIfIndex.setStatus('mandatory')
mpAtmCCAtmMultiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCAtmMultiVpi.setStatus('mandatory')
mpAtmCCAtmMultiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCAtmMultiVci.setStatus('mandatory')
mpAtmCCAtmMultiAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiAdminStatus.setStatus('mandatory')
mpAtmCCAtmMultiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiOperStatus.setStatus('mandatory')
mpAtmCCAtmMultiErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiErrInfo.setStatus('mandatory')
mpAtmCCAtmMulticastConfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3), )
if mibBuilder.loadTexts: mpAtmCCAtmMulticastConfTable.setStatus('mandatory')
mpAtmCCAtmMultiConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCAtmMultiRootIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiRootVpi"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiRootVci"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiLeafIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiLeafVpi"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiLeafVci"))
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfEntry.setStatus('mandatory')
mpAtmCCAtmMultiConfRootIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootIfIndex.setStatus('mandatory')
mpAtmCCAtmMultiConfRootVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootVpi.setStatus('mandatory')
mpAtmCCAtmMultiConfRootVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootVci.setStatus('mandatory')
mpAtmCCAtmMultiConfLeafIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafIfIndex.setStatus('mandatory')
mpAtmCCAtmMultiConfLeafVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafVpi.setStatus('mandatory')
mpAtmCCAtmMultiConfLeafVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafVci.setStatus('mandatory')
mpAtmCCAtmMultiConfRootAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootAdminStatus.setStatus('mandatory')
mpAtmCCAtmMultiConfRootOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootOperStatus.setStatus('mandatory')
mpAtmCCAtmMultiConfLeafAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafAdminStatus.setStatus('mandatory')
mpAtmCCAtmMultiConfLeafOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafOperStatus.setStatus('mandatory')
mpAtmCCAtmMultiConfTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 11), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfTrafficDescrIndex.setStatus('mandatory')
mpAtmCCAtmMultiConfSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfSlotNumber.setStatus('mandatory')
mpAtmCCAtmMultiConfVcRdiResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfVcRdiResponse.setStatus('mandatory')
mpAtmCCAtmMultiConfPvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfPvcId.setStatus('mandatory')
mpAtmCCAtmMultiConfSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfSeqNo.setStatus('mandatory')
mpAtmCCAtmMultiConfShaperRate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfShaperRate.setStatus('mandatory')
mpAtmCCAtmMultiConfRootVpTunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ture", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootVpTunneling.setStatus('mandatory')
mpAtmCCAtmMultiConfLeafVpTunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ture", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafVpTunneling.setStatus('mandatory')
mpAtmCCAtmMultiConfNextLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ture", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfNextLeaf.setStatus('mandatory')
mibBuilder.exportSymbols("MP-ATM-MIB", mpAtmCCSoftPvcCalledTargetVci=mpAtmCCSoftPvcCalledTargetVci, mpAtmCCUnitePvcGroupRegisterTable=mpAtmCCUnitePvcGroupRegisterTable, mpLec=mpLec, mpAtmCCSoftPvpCalledEntry=mpAtmCCSoftPvpCalledEntry, mpAtmCCVccStatusEntry=mpAtmCCVccStatusEntry, mpAtmCCPathTestSendDirection=mpAtmCCPathTestSendDirection, mpAtmCCAtmMultiSlotNumber=mpAtmCCAtmMultiSlotNumber, nec=nec, mpAtmCCPortAlarmStatRedPOofCounters=mpAtmCCPortAlarmStatRedPOofCounters, mpAtmCCSoftPvpAdminStatus=mpAtmCCSoftPvpAdminStatus, mpAtmCCVpTunnelingSpeed=mpAtmCCVpTunnelingSpeed, mpAtmCCPhyStatisticsTable=mpAtmCCPhyStatisticsTable, mpAtmCallCtl=mpAtmCallCtl, mpAtmCCStaticPvcSeqNo=mpAtmCCStaticPvcSeqNo, mpAtmCCStaticPvpLowCladType=mpAtmCCStaticPvpLowCladType, mpUiSession=mpUiSession, mpAtmCCSoftPvcOriginalAddress=mpAtmCCSoftPvcOriginalAddress, mpAtmCCPgcRegiEntry=mpAtmCCPgcRegiEntry, mpAtmCCSoftPvcCalledAdminStatus=mpAtmCCSoftPvcCalledAdminStatus, mpAtmCCStaticPvcLowReceiveTrafficDescrIndex=mpAtmCCStaticPvcLowReceiveTrafficDescrIndex, mpAtmCCProtocolTrapInfoCause=mpAtmCCProtocolTrapInfoCause, mpAtmCCVccStatusOrgVci=mpAtmCCVccStatusOrgVci, mpAtmCCPathTestStatus=mpAtmCCPathTestStatus, mpAtmCCAtmMultiRootIfIndex=mpAtmCCAtmMultiRootIfIndex, mpAtmCCVccStatusDestCallKind=mpAtmCCVccStatusDestCallKind, mpAtmCCOuspStatRcvBufOverCounters=mpAtmCCOuspStatRcvBufOverCounters, mpAtmCCSscopMaxCc=mpAtmCCSscopMaxCc, RowStatus=RowStatus, mpEtherPort=mpEtherPort, mpAtmCCSoftPvpCalledTable=mpAtmCCSoftPvpCalledTable, mpAtm=mpAtm, AtmAddr=AtmAddr, mpAtmCCAtmMultiOperStatus=mpAtmCCAtmMultiOperStatus, mpAtmCCVpTunnelingCfgStatus=mpAtmCCVpTunnelingCfgStatus, mpAtmCCAtmMultiConfRootOperStatus=mpAtmCCAtmMultiConfRootOperStatus, mpAtmCCStaticPvpHighVpi=mpAtmCCStaticPvpHighVpi, mpAtmCCSignallingT397=mpAtmCCSignallingT397, mpAtmCCAtmMultiConfShaperRate=mpAtmCCAtmMultiConfShaperRate, mpAtmCCAtmMulticastRegistration=mpAtmCCAtmMulticastRegistration, mpAtmCCVccStatusDestPortVpTunneling=mpAtmCCVccStatusDestPortVpTunneling, mpAtmCCSoftPvcCalledCladType=mpAtmCCSoftPvcCalledCladType, mpAtmCCSoftPvcCalledTransmitTrafficDescrIndex=mpAtmCCSoftPvcCalledTransmitTrafficDescrIndex, mpAtmCCAtmMultiErrInfo=mpAtmCCAtmMultiErrInfo, mpInsCtl=mpInsCtl, mpAtmCCNextNodeVci=mpAtmCCNextNodeVci, mpAtmCCSoftPvpCalledTargetAddress=mpAtmCCSoftPvpCalledTargetAddress, mpAtmCCSoftPvcCalledEntry=mpAtmCCSoftPvcCalledEntry, mpAtmCCVpStatVpi=mpAtmCCVpStatVpi, mmpf_mib=mmpf_mib, mpAtmCCVpTunnelingVpi=mpAtmCCVpTunnelingVpi, mpAtmCCProtocolTrapInfoTable=mpAtmCCProtocolTrapInfoTable, mpAtmCCPortAlarmStatRedLinkAisCounters=mpAtmCCPortAlarmStatRedLinkAisCounters, mpAtmCCPortResInfoMaxVpiBits=mpAtmCCPortResInfoMaxVpiBits, mpAtmCCSignallingT322=mpAtmCCSignallingT322, mpAtmCCBwInfoPortTmitUsedBwCps=mpAtmCCBwInfoPortTmitUsedBwCps, mpAtmCCPgcRegiErrInfo=mpAtmCCPgcRegiErrInfo, mpAtmCCStaticPvcLowTransmitTrafficDescrIndex=mpAtmCCStaticPvcLowTransmitTrafficDescrIndex, mpAtmCCBaseGroup=mpAtmCCBaseGroup, mpAtmCCPhyStatSymbolErrCounters=mpAtmCCPhyStatSymbolErrCounters, mpAtmCCSoftPvcCalledLastReleaseDiagnostic=mpAtmCCSoftPvcCalledLastReleaseDiagnostic, mpAtmCCVpTunnelingTable=mpAtmCCVpTunnelingTable, mpAtmCCAtmMulticast=mpAtmCCAtmMulticast, mpAtmCCPortResInfoVpTunnellingConfig=mpAtmCCPortResInfoVpTunnellingConfig, dod=dod, org=org, mpAtmCCUpgcBaseInfo=mpAtmCCUpgcBaseInfo, mpAtmCCPgcActInfoEntry=mpAtmCCPgcActInfoEntry, mpAtmCCPvcTraceInfoPathKind=mpAtmCCPvcTraceInfoPathKind, mpAtmCCPortResInfoVccCounters=mpAtmCCPortResInfoVccCounters, mpAtmCCPvcTraceInfoVci=mpAtmCCPvcTraceInfoVci, private=private, mpAtmCCSoftPvcCalledOriginalAddress=mpAtmCCSoftPvcCalledOriginalAddress, mpMpc=mpMpc, mpFtp=mpFtp, mpAtmCCSignallingT399=mpAtmCCSignallingT399, mpAtmCCSoftPvpCalledVpi=mpAtmCCSoftPvpCalledVpi, mpAtmCCVcStatisticsEntry=mpAtmCCVcStatisticsEntry, mpAtmCCSoftPvcCalledTargetAddress=mpAtmCCSoftPvcCalledTargetAddress, mpAtmCCAtmMultiLeafVci=mpAtmCCAtmMultiLeafVci, mpAtmCCStaticPvcTable=mpAtmCCStaticPvcTable, mpCardInfo=mpCardInfo, mpAtmCCSoftPvpOriginalAddress=mpAtmCCSoftPvpOriginalAddress, mpAtmCCMuxStatReceiveCellsCntOvfCounters=mpAtmCCMuxStatReceiveCellsCntOvfCounters, mpAtmCCStaticPvpLowVpi=mpAtmCCStaticPvpLowVpi, mpAtmCCAtmMultiConfSlotNumber=mpAtmCCAtmMultiConfSlotNumber, mpAtmCCStaticPvpSeqNo=mpAtmCCStaticPvpSeqNo, mpAtmCCVpTunnelingOperStatus=mpAtmCCVpTunnelingOperStatus, mpAtmCCUnitePvcGroup=mpAtmCCUnitePvcGroup, mpAtmCCSoftPvcTargetVci=mpAtmCCSoftPvcTargetVci, mpAtmCCPortBwInfoTmitUsedBwCps=mpAtmCCPortBwInfoTmitUsedBwCps, mpAtmCCPortAlarmStatRedInfo0Counters=mpAtmCCPortAlarmStatRedInfo0Counters, mpAtmCCBwInfoPortTable=mpAtmCCBwInfoPortTable, mpAtmCCMuxStatDiscardCellsHTErrCounters=mpAtmCCMuxStatDiscardCellsHTErrCounters, mpAtmCCOuspStatRcvUnknownCellsCounters=mpAtmCCOuspStatRcvUnknownCellsCounters, mpAtmCCStaticPvcErrInfo=mpAtmCCStaticPvcErrInfo, mpAtmCCPgcSoftPvcCallKind=mpAtmCCPgcSoftPvcCallKind, mpAtmCCPhyStatB2ErrCounters=mpAtmCCPhyStatB2ErrCounters, mpAtmCCSoftPvcCalledPriority=mpAtmCCSoftPvcCalledPriority, mpDns=mpDns, mpAtmCCVpTunnelingSeverity=mpAtmCCVpTunnelingSeverity, mpAtmCCOuspStatSendScheduleErrorCounters=mpAtmCCOuspStatSendScheduleErrorCounters, mpAtmCCPortAlarmStatRedLcdCounters=mpAtmCCPortAlarmStatRedLcdCounters, mpAtmCCPgcStaticPvcDestIfIndex=mpAtmCCPgcStaticPvcDestIfIndex, mpAtmCCSoftPvpTargetAddress=mpAtmCCSoftPvpTargetAddress, mpAtmCCPortResInfoMaxVciBits=mpAtmCCPortResInfoMaxVciBits, PhysAddress=PhysAddress, mpAtmCClmiMaxTransmissions=mpAtmCClmiMaxTransmissions, mpAtmCCSoftPvcErrInfo=mpAtmCCSoftPvcErrInfo, mpAtmCCPvcGroupCutoverEnable=mpAtmCCPvcGroupCutoverEnable, mpAtmCCUpgcIndex=mpAtmCCUpgcIndex, mpAtmCCUpgcCtlEntry=mpAtmCCUpgcCtlEntry, mpAtmCCUpgcCtlStatus=mpAtmCCUpgcCtlStatus, mpAtmCCStaticPvpIndex=mpAtmCCStaticPvpIndex, mpAtmCCOuspStatRcvInvalidCellsCounters=mpAtmCCOuspStatRcvInvalidCellsCounters, mpAtmCCPathTestSendCellsCounters=mpAtmCCPathTestSendCellsCounters, mpAtmCCPgcActGrpNum=mpAtmCCPgcActGrpNum, mpAtmCCSoftPvpLeafReference=mpAtmCCSoftPvpLeafReference, mpAtmCCAtmMultiConfLeafAdminStatus=mpAtmCCAtmMultiConfLeafAdminStatus, mpAtmCCIlmiRetransmitInterval=mpAtmCCIlmiRetransmitInterval, mpAtmCCPortBwInfoRawBandwidthCps=mpAtmCCPortBwInfoRawBandwidthCps, mpAtmCCUpgcTotalGroupNumber=mpAtmCCUpgcTotalGroupNumber, mpAtmCCStaticPvpLowIfIndex=mpAtmCCStaticPvpLowIfIndex, mpAtmCCStaticPvpErrInfo=mpAtmCCStaticPvpErrInfo, mpAtmCCPhyStatFebeCounters=mpAtmCCPhyStatFebeCounters, mpAtmCCStaticPvpPvpId=mpAtmCCStaticPvpPvpId, mpAtmCCSoftPvpTable=mpAtmCCSoftPvpTable, mpAtmCCSoftPvcPgcRequest=mpAtmCCSoftPvcPgcRequest, mpAtmCCVccStatusAdminStatus=mpAtmCCVccStatusAdminStatus, mpAtmCCPortAlarmStatisticsTable=mpAtmCCPortAlarmStatisticsTable, mpAtmCCStaticPvcLowVpi=mpAtmCCStaticPvcLowVpi, mpStats=mpStats, mpAtmCCPortResInfoVpiCounters=mpAtmCCPortResInfoVpiCounters, mpAtmCCPgcRegiCfgStatus=mpAtmCCPgcRegiCfgStatus, mpAtmCCVccStatusDestVpi=mpAtmCCVccStatusDestVpi, mpAtmCCPgcSoftPvcDestAtmAddress=mpAtmCCPgcSoftPvcDestAtmAddress, mpAtmCCBwInfoPortTmitRemainBwCps=mpAtmCCBwInfoPortTmitRemainBwCps, mpAtmCCSscopTable=mpAtmCCSscopTable, mpOspf=mpOspf, mpAtmCCVpTunnelingEntry=mpAtmCCVpTunnelingEntry, mpAtmCCAtmMultiIfIndex=mpAtmCCAtmMultiIfIndex, mpAtmCCPortBwInfoVciCounters=mpAtmCCPortBwInfoVciCounters, mpAtmCCStaticPvcCfgStatus=mpAtmCCStaticPvcCfgStatus, mpAtmCCBwInfoPortRawBandwidthCps=mpAtmCCBwInfoPortRawBandwidthCps, mpAtmCCSoftPvcLastReleaseCause=mpAtmCCSoftPvcLastReleaseCause, mpIfCard=mpIfCard, mpAtmCCStaticPvpAdminStatus=mpAtmCCStaticPvpAdminStatus, mpAtmCCVpTunStatRcvCellsCounters=mpAtmCCVpTunStatRcvCellsCounters, mpAtmCCPhyStatB3ErrCounters=mpAtmCCPhyStatB3ErrCounters, mpAtmCCVccStatRegInCellsCounters=mpAtmCCVccStatRegInCellsCounters, mpAtmCCStaticPvcHighIfIndex=mpAtmCCStaticPvcHighIfIndex, mpAtmCCAtmMultiConfEntry=mpAtmCCAtmMultiConfEntry, mpAtmCCAtmMultiConfPvcId=mpAtmCCAtmMultiConfPvcId, mpAtmCCSoftPvpCalledErrInfo=mpAtmCCSoftPvpCalledErrInfo, mpAtmCCStaticPvpLowTransmitTrafficDescrIndex=mpAtmCCStaticPvpLowTransmitTrafficDescrIndex, mpAtmCCSscopMaxPd=mpAtmCCSscopMaxPd, mpAtmCCPortResInfoVpcCounters=mpAtmCCPortResInfoVpcCounters, mpAtmCCStaticPvcPgcRequest=mpAtmCCStaticPvcPgcRequest, mpAtmCCSoftPvpCalledOriginalAddress=mpAtmCCSoftPvpCalledOriginalAddress, mpAtmCCVccStatusOrgCallKind=mpAtmCCVccStatusOrgCallKind, mpIp=mpIp, mpAtmCCPortBwInfoRcvUsedBwCps=mpAtmCCPortBwInfoRcvUsedBwCps, mpAtmCCPortAlarmStatRedResetCounters=mpAtmCCPortAlarmStatRedResetCounters, mpAtmCCSscopTimerNoResponce=mpAtmCCSscopTimerNoResponce, mpAtmCCAtmMultiCfgStatus=mpAtmCCAtmMultiCfgStatus, mpAtmCCSoftPvpCalledOperStatus=mpAtmCCSoftPvpCalledOperStatus, mpLlc=mpLlc, mpAtmCCSscopMaxStat=mpAtmCCSscopMaxStat, mpAtmCCVcStatVpi=mpAtmCCVcStatVpi, mpAtmCCSignallingT398=mpAtmCCSignallingT398, mpAtmCCSoftPvpIfIndex=mpAtmCCSoftPvpIfIndex, mpAtmCCPortAlarmStatYelPRaiCounters=mpAtmCCPortAlarmStatYelPRaiCounters, mpAtmCCPgcPvcReceiveTrafficDescrIndex=mpAtmCCPgcPvcReceiveTrafficDescrIndex, mpAtmCCPhyStatRcvCellsCounters=mpAtmCCPhyStatRcvCellsCounters, mpAtmCCMuxStatDiscardCellsThresholdOvfCounters=mpAtmCCMuxStatDiscardCellsThresholdOvfCounters, mpAtmCCStaticPvcHighVpi=mpAtmCCStaticPvcHighVpi, mpAtmCCPgcCtlResult=mpAtmCCPgcCtlResult, mpAtmCCPortAlarmStatRedLopCounters=mpAtmCCPortAlarmStatRedLopCounters, mpAtmCCPvcTraceInfoIfIndex=mpAtmCCPvcTraceInfoIfIndex, mpAtmCCVpStatOutCells=mpAtmCCVpStatOutCells, mpAtmCCSoftPvcCalledTargetVpi=mpAtmCCSoftPvcCalledTargetVpi, mpAtmCCAtmMultiLeafIfIndex=mpAtmCCAtmMultiLeafIfIndex, mpAtmCCVcStatisticsTable=mpAtmCCVcStatisticsTable, mpAtmCCPvcTraceControlTable=mpAtmCCPvcTraceControlTable, mpAtmCCStaticPvpHighReceiveTrafficDescrIndex=mpAtmCCStaticPvpHighReceiveTrafficDescrIndex, mpAtmCCPgcIndex=mpAtmCCPgcIndex, mpAtmCCSoftPvcTargetVpi=mpAtmCCSoftPvcTargetVpi, mpAtmCCMuxStatDiscardCellsHTErrCntOvfCounters=mpAtmCCMuxStatDiscardCellsHTErrCntOvfCounters, mpAtmCCSoftPvcEntry=mpAtmCCSoftPvcEntry, mpAtmCCStaticPVPC=mpAtmCCStaticPVPC, mpAtmCCPhyStatisticsEntry=mpAtmCCPhyStatisticsEntry, mpAtmCCSoftPvcCalledOperStatus=mpAtmCCSoftPvcCalledOperStatus, mpAtmCCResourceControl=mpAtmCCResourceControl, mpAtmCCStaticPvcIndex=mpAtmCCStaticPvcIndex, mpAtmCCSoftPvpCfgStatus=mpAtmCCSoftPvpCfgStatus, mpAtmCCStaticPvcAdminStatus=mpAtmCCStaticPvcAdminStatus, mpAtmCCPvcTraceIndex=mpAtmCCPvcTraceIndex, mpAtmCCBwInfoPortRcvUsedBwCps=mpAtmCCBwInfoPortRcvUsedBwCps, mpAtmCCIlmiTable=mpAtmCCIlmiTable, mpDbAccess=mpDbAccess, mpAtmCCVpTunnellingStatisticsEntry=mpAtmCCVpTunnellingStatisticsEntry, mpAtmCCStaticPvpTable=mpAtmCCStaticPvpTable, mpAtmCCSoftPvpCalledReceiveTrafficDescrIndex=mpAtmCCSoftPvpCalledReceiveTrafficDescrIndex, mpAtmCCPathTest=mpAtmCCPathTest, mpAtmCCSoftPvcLeafReference=mpAtmCCSoftPvcLeafReference, mpAtmCCOuspStatSendOfifoFullCounters=mpAtmCCOuspStatSendOfifoFullCounters, mpAtmCCSoftPvpCalledLastReleaseDiagnostic=mpAtmCCSoftPvpCalledLastReleaseDiagnostic, mpAtmCCVccStatusOrgPort=mpAtmCCVccStatusOrgPort, mpAtmCCPvcGroupControlTable=mpAtmCCPvcGroupControlTable, mpAtmCCAtmMultiConfRootIfIndex=mpAtmCCAtmMultiConfRootIfIndex, mpAtmCCVccStatusInsStatus=mpAtmCCVccStatusInsStatus, mpAtmCCSoftPvpCalledLeafReference=mpAtmCCSoftPvpCalledLeafReference, mpAtmCCSoftPvcCalledLastReleaseCause=mpAtmCCSoftPvcCalledLastReleaseCause, mpVlan=mpVlan, mpAtmCCStaticPvpPriority=mpAtmCCStaticPvpPriority, mpAtmCCSoftPvcAdminStatus=mpAtmCCSoftPvcAdminStatus, mpAtmCCPvcTraceCtlEntry=mpAtmCCPvcTraceCtlEntry, mpAtmCCSoftPvpCalledPriority=mpAtmCCSoftPvpCalledPriority, mpAtmCCPortAlarmStatRedLofCounters=mpAtmCCPortAlarmStatRedLofCounters, mpAtmCCSoftPvpCalledTransmitTrafficDescrIndex=mpAtmCCSoftPvpCalledTransmitTrafficDescrIndex, mpAtmCCPvcGroupCutoverStatus=mpAtmCCPvcGroupCutoverStatus, mpAtmCCSoftPvpTransmitTrafficDescrIndex=mpAtmCCSoftPvpTransmitTrafficDescrIndex, mpAtmCCVpStatInCellsCounters=mpAtmCCVpStatInCellsCounters, mpAtmCCMuxStatistics=mpAtmCCMuxStatistics, mpAtmCCStaticPvcHighReceiveTrafficDescrIndex=mpAtmCCStaticPvcHighReceiveTrafficDescrIndex, mpAtmCCVpStatisticsEntry=mpAtmCCVpStatisticsEntry, mpAtmCCPortResInfoMaxVCC=mpAtmCCPortResInfoMaxVCC, mpAtmCCSoftPvpCladType=mpAtmCCSoftPvpCladType, mpAtmCCPortAlarmStatRedAisCounters=mpAtmCCPortAlarmStatRedAisCounters, mpAtmCCProtocol=mpAtmCCProtocol, mpAtmCCSignallingT313=mpAtmCCSignallingT313, mmn9110=mmn9110, mpAtmCCBwInfoPortRawBandwidthBps=mpAtmCCBwInfoPortRawBandwidthBps, mpAtmCCPortAlarmStatRedBadSigCounters=mpAtmCCPortAlarmStatRedBadSigCounters, mpAtmCCStaticPvcHighVci=mpAtmCCStaticPvcHighVci, mpAtmCCVccStatRegStatus=mpAtmCCVccStatRegStatus, mpAtmCCMuxStatDiscardCellsThresholdOvfCntOvfCounters=mpAtmCCMuxStatDiscardCellsThresholdOvfCntOvfCounters, mpAtmCCVpStatInDropCellsCounters=mpAtmCCVpStatInDropCellsCounters, mpAtmCCOuspStatisticsEntry=mpAtmCCOuspStatisticsEntry, mpLis=mpLis, mpAtmCCPathTrace=mpAtmCCPathTrace, mpAtmCCStaticPvcLowVci=mpAtmCCStaticPvcLowVci, mpAtmCCAtmMultiConfLeafVci=mpAtmCCAtmMultiConfLeafVci, mpAtmCCPortResInfoMaxSvpcVpi=mpAtmCCPortResInfoMaxSvpcVpi, mpAtmCCPvcGroup=mpAtmCCPvcGroup, datax=datax, mpAtmCCVcStatVci=mpAtmCCVcStatVci, mpAtmCCAtmMultiAdminStatus=mpAtmCCAtmMultiAdminStatus, mpAtmCCAtmMultiPvcId=mpAtmCCAtmMultiPvcId, mpAtmCCAtmMultiConfNextLeaf=mpAtmCCAtmMultiConfNextLeaf, mpAtmCCStaticPvpHighIfIndex=mpAtmCCStaticPvpHighIfIndex, mpAtmCCVcStatInCellsCounters=mpAtmCCVcStatInCellsCounters, mpAtmCCSoftPvcCfgStatus=mpAtmCCSoftPvcCfgStatus, mpAtmCCStaticPvpCfgStatus=mpAtmCCStaticPvpCfgStatus, mpAtmCCPvcTraceInfoCallKind=mpAtmCCPvcTraceInfoCallKind)
mibBuilder.exportSymbols("MP-ATM-MIB", mpAtmCCAtmMultiVci=mpAtmCCAtmMultiVci, mpAtmCCPortResInfoPortSpeed=mpAtmCCPortResInfoPortSpeed, mpAtmCCProtocolTrapInfoIndex=mpAtmCCProtocolTrapInfoIndex, mpAtmCCStaticPvcOperStatus=mpAtmCCStaticPvcOperStatus, mpSnmp=mpSnmp, mpAtmCCPgcCtlEntry=mpAtmCCPgcCtlEntry, mpAtmCCPortAlarmStatRedCcRedCounters=mpAtmCCPortAlarmStatRedCcRedCounters, mpAtmCCVccStatusPathKind=mpAtmCCVccStatusPathKind, mpAtmCCVccStatusOrgPortVpTunneling=mpAtmCCVccStatusOrgPortVpTunneling, mpAtmCCPathTestSendTime=mpAtmCCPathTestSendTime, mpAtmCCUpgcPgcIndex=mpAtmCCUpgcPgcIndex, mpAtmCCPvcGroupRegisterTable=mpAtmCCPvcGroupRegisterTable, necProductDepend=necProductDepend, mpPvoice=mpPvoice, mpAtmCCOuspStatisticsTable=mpAtmCCOuspStatisticsTable, mpAtmCCPathTestErrInfo=mpAtmCCPathTestErrInfo, mpAtmCCPortAlarmStatYelRaiCounters=mpAtmCCPortAlarmStatYelRaiCounters, mpAtmCCSoftPvcCalledReceiveTrafficDescrIndex=mpAtmCCSoftPvcCalledReceiveTrafficDescrIndex, mpAtmCCOuspStatIndex=mpAtmCCOuspStatIndex, mpAtmCCPhyStatB1ErrCounters=mpAtmCCPhyStatB1ErrCounters, mpAtmCCPortResInfoShaperKind=mpAtmCCPortResInfoShaperKind, mpAtmCCSoftPvpErrInfo=mpAtmCCSoftPvpErrInfo, mpAtmCCAtmMultiConfRootVpi=mpAtmCCAtmMultiConfRootVpi, mpAtmCCAtmMultiConfRootVci=mpAtmCCAtmMultiConfRootVci, mpIpsw=mpIpsw, enterprises=enterprises, mpAtmCCSoftPvcTransmitTrafficDescrIndex=mpAtmCCSoftPvcTransmitTrafficDescrIndex, mpAtmCCUpgcRegiEntry=mpAtmCCUpgcRegiEntry, mpCli=mpCli, mmn9120=mmn9120, mpAtmCCPortAlarmStatYelPRdiCounters=mpAtmCCPortAlarmStatYelPRdiCounters, mpAtmCCStatistics=mpAtmCCStatistics, necProduct=necProduct, mpAtmCCBwInfoPortRcvRemainBwCps=mpAtmCCBwInfoPortRcvRemainBwCps, mpAtmCCPortAlarmStatisticsEntry=mpAtmCCPortAlarmStatisticsEntry, mpAtmCCVccStatusConnCastType=mpAtmCCVccStatusConnCastType, mpAtmCCSscopCredit=mpAtmCCSscopCredit, mpAtmCCAtmMultiConfRootAdminStatus=mpAtmCCAtmMultiConfRootAdminStatus, mpAtmCCPortResourceInfomationEntry=mpAtmCCPortResourceInfomationEntry, mpAtmCCPortResInfoMinSvccVci=mpAtmCCPortResInfoMinSvccVci, mpAtmCCAtmMultiConfLeafOperStatus=mpAtmCCAtmMultiConfLeafOperStatus, mpAtmCCStaticPvpOperStatus=mpAtmCCStaticPvpOperStatus, mpAtmCCSoftPvcOperStatus=mpAtmCCSoftPvcOperStatus, mpAtmCCAtmMultiConfLeafVpi=mpAtmCCAtmMultiConfLeafVpi, mpAtmCCUpgcRegiStatus=mpAtmCCUpgcRegiStatus, mpAtmCCAtmMultiSeqNo=mpAtmCCAtmMultiSeqNo, mpAtmCCStaticPvpEntry=mpAtmCCStaticPvpEntry, mpAtmCCPgcBaseInfo=mpAtmCCPgcBaseInfo, mpAtmCCPvcTraceCtlIfIndex=mpAtmCCPvcTraceCtlIfIndex, mpAtmCCMuxStatDiscardCellsBufOvfCounters=mpAtmCCMuxStatDiscardCellsBufOvfCounters, mpAtmCCVpTunnelingErrInfo=mpAtmCCVpTunnelingErrInfo, mpAtmCCPgcPvcVci=mpAtmCCPgcPvcVci, mpAtmCCSoftPvpLastReleaseDiagnostic=mpAtmCCSoftPvpLastReleaseDiagnostic, mpAtmCCPvcTraceCtlStatus=mpAtmCCPvcTraceCtlStatus, mpAtmCCVcStatInDropCellsCounters=mpAtmCCVcStatInDropCellsCounters, mpAtmCCSoftPvcReceiveTrafficDescrIndex=mpAtmCCSoftPvcReceiveTrafficDescrIndex, mpAtmCCPortAlarmStatRedPAisCounters=mpAtmCCPortAlarmStatRedPAisCounters, mpAtmCCPortResInfoMaxVPC=mpAtmCCPortResInfoMaxVPC, mpAtmCCPvcTraceCtlPathKind=mpAtmCCPvcTraceCtlPathKind, mpAtmCCSignallingT301=mpAtmCCSignallingT301, mpAtmCCSoftPvcTargetAddress=mpAtmCCSoftPvcTargetAddress, mpAtmCCPvcTraceInfoVpi=mpAtmCCPvcTraceInfoVpi, mpAtmCCSoftPvpCalledCfgStatus=mpAtmCCSoftPvpCalledCfgStatus, mpAtmCCAtmMultiTrafficDescrIndex=mpAtmCCAtmMultiTrafficDescrIndex, mpAtmCCVcStatOutCellsCounters=mpAtmCCVcStatOutCellsCounters, mpAtmCCSignallingEntry=mpAtmCCSignallingEntry, mpAtmCCPgcStaticPvcSeqNo=mpAtmCCPgcStaticPvcSeqNo, mpAtmCCSoftPvcLastReleaseDiagnostic=mpAtmCCSoftPvcLastReleaseDiagnostic, mpAtmCCVccStatusOrgVpi=mpAtmCCVccStatusOrgVpi, mpAtmCCSoftPvcCalledErrInfo=mpAtmCCSoftPvcCalledErrInfo, mpAtmCCVpTunStatTmtCellsCounters=mpAtmCCVpTunStatTmtCellsCounters, mpAtmCCPathTestVci=mpAtmCCPathTestVci, mpAtmCCSignallingT331=mpAtmCCSignallingT331, mpAtmCCPvcGroupActiveInfoTable=mpAtmCCPvcGroupActiveInfoTable, mpAtmCCVpStatisticsTable=mpAtmCCVpStatisticsTable, mpAtmCCVpTunnelingNeighborInfo=mpAtmCCVpTunnelingNeighborInfo, mpAtmCCMuxStatDiscardCellsBufOvfCntOvfCounters=mpAtmCCMuxStatDiscardCellsBufOvfCntOvfCounters, mpAtmCCAtmMultiConfLeafIfIndex=mpAtmCCAtmMultiConfLeafIfIndex, mpAtmCCVccStatusDestVci=mpAtmCCVccStatusDestVci, mpAtmCCSignallingT309=mpAtmCCSignallingT309, mpAtmCCVcStatOutCells=mpAtmCCVcStatOutCells, mpAtmCCSoftPvpVpi=mpAtmCCSoftPvpVpi, mpAtmCCSscopTimerPoll=mpAtmCCSscopTimerPoll, mpAtmCCSoftPvcCladType=mpAtmCCSoftPvcCladType, mpAtmCCVccStatusDestPort=mpAtmCCVccStatusDestPort, mpAtmCCSignallingT317=mpAtmCCSignallingT317, mpAtmCCAtmMultiConfSeqNo=mpAtmCCAtmMultiConfSeqNo, MacAddress=MacAddress, mpAtmCCPhyStatUncorrectHecErrCounters=mpAtmCCPhyStatUncorrectHecErrCounters, mpEventLog=mpEventLog, mpAtmCCSoftPvpCalledAdminStatus=mpAtmCCSoftPvpCalledAdminStatus, mpAtmCCPgcCtlCountPvc=mpAtmCCPgcCtlCountPvc, mpAtmCCAtmMultiConfLeafVpTunneling=mpAtmCCAtmMultiConfLeafVpTunneling, mpAtmCCPortBandwidthInfomationEntry=mpAtmCCPortBandwidthInfomationEntry, mpAtmCCPortResourceInfomationTable=mpAtmCCPortResourceInfomationTable, mpAtmCCNextTrafficDescrIndex=mpAtmCCNextTrafficDescrIndex, mpAtmCCPortBwInfoVpi=mpAtmCCPortBwInfoVpi, mpAtmCCSignallingT310=mpAtmCCSignallingT310, mpAtmCCStaticPvcHighCladType=mpAtmCCStaticPvcHighCladType, mpAtmCCStaticPvcPriority=mpAtmCCStaticPvcPriority, mpAtmCCVpTunnelingContinuityCheck=mpAtmCCVpTunnelingContinuityCheck, mpAtmCCPhyStatParityErrCounters=mpAtmCCPhyStatParityErrCounters, mpAtmCCVpTunnelingTrapState=mpAtmCCVpTunnelingTrapState, mpAtmCCSoftPVPC=mpAtmCCSoftPVPC, mpAtmCCVccStatRegVci=mpAtmCCVccStatRegVci, DateAndTime=DateAndTime, mmpf=mmpf, mpAtmCCSoftPvpLastReleaseCause=mpAtmCCSoftPvpLastReleaseCause, mpAtmCCPgcRegiAdminStatus=mpAtmCCPgcRegiAdminStatus, mpAtmCCSoftPvcVpi=mpAtmCCSoftPvcVpi, mpAtmCCPortAlarmStatYelCcYelCounters=mpAtmCCPortAlarmStatYelCcYelCounters, mpAtmCCVpStatInDropCells=mpAtmCCVpStatInDropCells, mpAtmCCSoftPvpCalledIfIndex=mpAtmCCSoftPvpCalledIfIndex, mpAtmCCAtmMultiVpi=mpAtmCCAtmMultiVpi, mpAtmCCPgcTotalGroupNumber=mpAtmCCPgcTotalGroupNumber, mpFfr=mpFfr, mpAtmCCVpTunnellingStatisticsTable=mpAtmCCVpTunnellingStatisticsTable, mpBridge=mpBridge, mpAtmCCSscopTimerCc=mpAtmCCSscopTimerCc, mpAtmCCPgcPvcIfIndex=mpAtmCCPgcPvcIfIndex, mpAtmCCSoftPvcCalledIfIndex=mpAtmCCSoftPvcCalledIfIndex, mpAtmCCVccStatisticsRegTable=mpAtmCCVccStatisticsRegTable, mpAtmCCStaticPvcLowIfIndex=mpAtmCCStaticPvcLowIfIndex, mpAtmCCVccStatusTable=mpAtmCCVccStatusTable, mpObsCtl=mpObsCtl, mpAtmCCPortAlarmStatRedLocCounters=mpAtmCCPortAlarmStatRedLocCounters, mpAtmCCStaticPvcPvcId=mpAtmCCStaticPvcPvcId, mpAtmCCSscopTimerKeepAlive=mpAtmCCSscopTimerKeepAlive, mpDhcp=mpDhcp, mpAtmCCStaticPvpHighCladType=mpAtmCCStaticPvpHighCladType, mpAtmCCVcStatInCells=mpAtmCCVcStatInCells, mpAtmCCSoftPvpPgcRequest=mpAtmCCSoftPvpPgcRequest, mpAtmCCIlmiConfigStatus=mpAtmCCIlmiConfigStatus, mpAtmCCSoftPvpEntry=mpAtmCCSoftPvpEntry, mpAtmCCAtmMulticastConfTable=mpAtmCCAtmMulticastConfTable, mpAtmCCAtmMultiRootVci=mpAtmCCAtmMultiRootVci, mpAtmCCSoftPvpCalledTargetVpi=mpAtmCCSoftPvpCalledTargetVpi, mpAtmCCSoftPvpOperStatus=mpAtmCCSoftPvpOperStatus, mpSystem=mpSystem, mpAtmCCSoftPvpPriority=mpAtmCCSoftPvpPriority, mpAtmCCSoftPvpCalledLastReleaseCause=mpAtmCCSoftPvpCalledLastReleaseCause, mpAtmCCPortResInfoMaxSvccVpi=mpAtmCCPortResInfoMaxSvccVpi, mpAtmCCProtocolTrapInfoEntry=mpAtmCCProtocolTrapInfoEntry, mpAtmCCPortAlarmStatYelMsRdiCounters=mpAtmCCPortAlarmStatYelMsRdiCounters, mpAtmCCVccStatRegErrInfo=mpAtmCCVccStatRegErrInfo, mpAtmCCPortAlarmStatRedLosCounters=mpAtmCCPortAlarmStatRedLosCounters, mpAtmCCPortBwInfoRawBandwidthBps=mpAtmCCPortBwInfoRawBandwidthBps, mpAtmCCPvcTraceInfoEntry=mpAtmCCPvcTraceInfoEntry, mpAtmCCSoftPvpCalledCladType=mpAtmCCSoftPvpCalledCladType, mpAtmCCSoftPvcCalledVci=mpAtmCCSoftPvcCalledVci, mpAtmCCPvcGroupCutover=mpAtmCCPvcGroupCutover, mpAtmCCPvcTraceCtlVci=mpAtmCCPvcTraceCtlVci, mpAtmCCAtmMulticastCtlTable=mpAtmCCAtmMulticastCtlTable, nec_mib=nec_mib, mpAtmCCIlmiEntry=mpAtmCCIlmiEntry, mpAtmCCPhyStatTmtCellsCounters=mpAtmCCPhyStatTmtCellsCounters, mpAtmCCVccStatisticsRegEntry=mpAtmCCVccStatisticsRegEntry, mpAtmCCVccStatusOperStatus=mpAtmCCVccStatusOperStatus, mpAtmCCPvcTraceEntryIndex=mpAtmCCPvcTraceEntryIndex, mpAtmCCPvcTraceInfoLastSegment=mpAtmCCPvcTraceInfoLastSegment, mpAtmCCSoftPvpTargetVpi=mpAtmCCSoftPvpTargetVpi, mpAtmCCVcStatInDropCells=mpAtmCCVcStatInDropCells, mpAtmCCSoftPvcCalledLeafReference=mpAtmCCSoftPvcCalledLeafReference, mpAtmCCPgcPvcTransmitTrafficDescrIndex=mpAtmCCPgcPvcTransmitTrafficDescrIndex, mpAtmCCStaticPvpHighTransmitTrafficDescrIndex=mpAtmCCStaticPvpHighTransmitTrafficDescrIndex, mpAtmCCVpTunnelingPnniVer=mpAtmCCVpTunnelingPnniVer, mpAtmCCSscopEntry=mpAtmCCSscopEntry, mpAtmCCPhyStatCorrectHecErrCounters=mpAtmCCPhyStatCorrectHecErrCounters, mpAtmCCPortAlarmStatRedMsAisCounters=mpAtmCCPortAlarmStatRedMsAisCounters, mpAtmCCSoftPvcCalledPgcRequest=mpAtmCCSoftPvcCalledPgcRequest, mpAtmCCOuspStatSendInvalidCdvCounters=mpAtmCCOuspStatSendInvalidCdvCounters, mpAtmCCUpgcCtlCountPgc=mpAtmCCUpgcCtlCountPgc, mpAtmCCOuspStatRcvScheduleErrorCounters=mpAtmCCOuspStatRcvScheduleErrorCounters, mpAtmCCPortAlarmStatYelInfo2Counters=mpAtmCCPortAlarmStatYelInfo2Counters, mpAtmCCPgcPvcKind=mpAtmCCPgcPvcKind, mpAtmCCSoftPvcCalledCfgStatus=mpAtmCCSoftPvcCalledCfgStatus, mpAtmCCPvcTraceInfoSysName=mpAtmCCPvcTraceInfoSysName, mpAtmCCSoftPvpCalledPgcRequest=mpAtmCCSoftPvpCalledPgcRequest, mpAtmCCUpgcCtlResult=mpAtmCCUpgcCtlResult, mpStp=mpStp, NetPrefix=NetPrefix, mpAtmCCStaticPvcHighTransmitTrafficDescrIndex=mpAtmCCStaticPvcHighTransmitTrafficDescrIndex, mpAtmCCAtmMultiConfTrafficDescrIndex=mpAtmCCAtmMultiConfTrafficDescrIndex, mpRip=mpRip, mpAtmCCPvcTraceCtlVpi=mpAtmCCPvcTraceCtlVpi, mpAtmCCPathTestTable=mpAtmCCPathTestTable, mpAtmCCAtmMultiRootVpi=mpAtmCCAtmMultiRootVpi, mpAtmCCPgcPvcVpi=mpAtmCCPgcPvcVpi, mpAtmCCPgcCtlStatus=mpAtmCCPgcCtlStatus, mpAtmCCVpStatInCells=mpAtmCCVpStatInCells, mpAtmCCSoftPvpReceiveTrafficDescrIndex=mpAtmCCSoftPvpReceiveTrafficDescrIndex, mpAtmCCSoftPvcPriority=mpAtmCCSoftPvcPriority, mpAtmCCUnitePvcGroupControlTable=mpAtmCCUnitePvcGroupControlTable, mpAtmCCPgcPvcDestVci=mpAtmCCPgcPvcDestVci, mpAtmCCMuxMib=mpAtmCCMuxMib, mpAtmCCAtmMultiVcRdiResponse=mpAtmCCAtmMultiVcRdiResponse, mpAtmCCAtmMultiCtlEntry=mpAtmCCAtmMultiCtlEntry, mpAtmCCStaticPvcLowCladType=mpAtmCCStaticPvcLowCladType, mpAtmCCPgcPvcPriority=mpAtmCCPgcPvcPriority, mpAtmCCSignallingT303=mpAtmCCSignallingT303, mpAtmCCSoftPvcIfIndex=mpAtmCCSoftPvcIfIndex, internet=internet, mpAtmCCPortBandwidthInfomationTable=mpAtmCCPortBandwidthInfomationTable, mpAtmCCSignallingT316=mpAtmCCSignallingT316, mpAtmCCVpTunneling=mpAtmCCVpTunneling, mpAtmCCSoftPvcCalledVpi=mpAtmCCSoftPvcCalledVpi, mpAtmCCSoftPvcCalledTable=mpAtmCCSoftPvcCalledTable, mpAtmCCSoftPvcTable=mpAtmCCSoftPvcTable, mpAtmCCStaticPvpLowReceiveTrafficDescrIndex=mpAtmCCStaticPvpLowReceiveTrafficDescrIndex, mpAtmCCAtmMultiLeafVpi=mpAtmCCAtmMultiLeafVpi, mpAtmCCOuspStatRcvCrcErrCellsCounters=mpAtmCCOuspStatRcvCrcErrCellsCounters, mpAtmCCStaticPvcEntry=mpAtmCCStaticPvcEntry, mpInterface=mpInterface, mpAtmCCPortAlarmStatRedOofCounters=mpAtmCCPortAlarmStatRedOofCounters, mpAtmCCPathTestRcvCellsCounters=mpAtmCCPathTestRcvCellsCounters, mpCes=mpCes, mpAtmCCPvcTraceInfoTable=mpAtmCCPvcTraceInfoTable, mpAtmCCPathTestEntry=mpAtmCCPathTestEntry, MpAtmCCCladType=MpAtmCCCladType, mpAtmCCPvcGroupCutoverBaseInfo=mpAtmCCPvcGroupCutoverBaseInfo, mpAtmCCPgcStaticPvcId=mpAtmCCPgcStaticPvcId, mpAtmCCAtmMultiConfRootVpTunneling=mpAtmCCAtmMultiConfRootVpTunneling, mpAtmCCVccStatRegOutCellsCounters=mpAtmCCVccStatRegOutCellsCounters, mpAtmCCAtmMultiConfVcRdiResponse=mpAtmCCAtmMultiConfVcRdiResponse, mpAtmCCPathTestVpi=mpAtmCCPathTestVpi, mpAtmCCSoftPvcVci=mpAtmCCSoftPvcVci, mpAtmCCSignallingTable=mpAtmCCSignallingTable, mpAtmCCSscopTimerIdle=mpAtmCCSscopTimerIdle, DisplayString=DisplayString, mpAtmCCSscopClearBuffs=mpAtmCCSscopClearBuffs, mpAtmCCMuxStatReceiveCellsCounters=mpAtmCCMuxStatReceiveCellsCounters, mpAtmCCPgcPvcDestVpi=mpAtmCCPgcPvcDestVpi, datax_mib=datax_mib, mpAtmCCPortResInfoSvccVciHuntWay=mpAtmCCPortResInfoSvccVciHuntWay, mpAtmCCVccStatRegVpi=mpAtmCCVccStatRegVpi, mpAtmCCVpStatOutCellsCounters=mpAtmCCVpStatOutCellsCounters, mpAtmCCVpTunnelingAdminStatus=mpAtmCCVpTunnelingAdminStatus, mpAtmCCAtmMultiRegErrInfo=mpAtmCCAtmMultiRegErrInfo, mpAtmCCSignallingT308=mpAtmCCSignallingT308, mpAtmCCUpgcBaseActiveGroupNumber=mpAtmCCUpgcBaseActiveGroupNumber, mpAtmCCBwInfoPortEntry=mpAtmCCBwInfoPortEntry, mpAtmCCStaticPvpPgcRequest=mpAtmCCStaticPvpPgcRequest, mpAtmCCBwInfoPortVpTunneling=mpAtmCCBwInfoPortVpTunneling)
