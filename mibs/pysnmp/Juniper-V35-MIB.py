#
# PySNMP MIB module Juniper-V35-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-V35-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:54:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
juniMibs, = mibBuilder.importSymbols("Juniper-MIBs", "juniMibs")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, TimeTicks, Counter32, Bits, Counter64, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Unsigned32, ModuleIdentity, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Counter32", "Bits", "Counter64", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
juniV35MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59))
juniV35MIB.setRevisions(('2002-09-16 21:44', '2002-02-08 16:25',))
if mibBuilder.loadTexts: juniV35MIB.setLastUpdated('200209162144Z')
if mibBuilder.loadTexts: juniV35MIB.setOrganization('Juniper Networks, Inc.')
juniV35Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 1))
juniV35IfTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 1, 2), )
if mibBuilder.loadTexts: juniV35IfTable.setStatus('current')
juniV35IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 1, 2, 1), ).setIndexNames((0, "Juniper-V35-MIB", "juniV35IfIndex"))
if mibBuilder.loadTexts: juniV35IfEntry.setStatus('current')
juniV35IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: juniV35IfIndex.setStatus('current')
juniV35IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("x21", 0), ("v35", 1), ("interfaceTypeNoCable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniV35IfType.setStatus('current')
juniV35IfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dte", 0), ("dce", 1), ("interfaceModeNoCable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: juniV35IfMode.setStatus('current')
juniV35IfClockRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 1, 2, 1, 4), Unsigned32().clone(2048000)).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniV35IfClockRate.setStatus('current')
juniV35IfNrzEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("inverted", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniV35IfNrzEncoding.setStatus('current')
juniV35IfTxClock = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("inverted", 1))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniV35IfTxClock.setStatus('current')
juniV35IfIgnoreDcd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ignoredNone", 0), ("dcdIgnored", 1), ("linkStateIgnored", 2))).clone('ignoredNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniV35IfIgnoreDcd.setStatus('current')
juniV35IfLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("loopback", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: juniV35IfLoopback.setStatus('current')
juniV35Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 4))
juniV35Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 4, 1))
juniV35Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 4, 2))
juniV35Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 4, 1, 1)).setObjects(("Juniper-V35-MIB", "juniV35Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniV35Compliance = juniV35Compliance.setStatus('current')
juniV35Group = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 59, 4, 2, 1)).setObjects(("Juniper-V35-MIB", "juniV35IfType"), ("Juniper-V35-MIB", "juniV35IfMode"), ("Juniper-V35-MIB", "juniV35IfClockRate"), ("Juniper-V35-MIB", "juniV35IfNrzEncoding"), ("Juniper-V35-MIB", "juniV35IfTxClock"), ("Juniper-V35-MIB", "juniV35IfIgnoreDcd"), ("Juniper-V35-MIB", "juniV35IfLoopback"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    juniV35Group = juniV35Group.setStatus('current')
mibBuilder.exportSymbols("Juniper-V35-MIB", juniV35Group=juniV35Group, juniV35IfNrzEncoding=juniV35IfNrzEncoding, juniV35IfTable=juniV35IfTable, juniV35MIB=juniV35MIB, juniV35Conformance=juniV35Conformance, juniV35Groups=juniV35Groups, juniV35IfTxClock=juniV35IfTxClock, juniV35IfIndex=juniV35IfIndex, juniV35IfType=juniV35IfType, juniV35IfLoopback=juniV35IfLoopback, PYSNMP_MODULE_ID=juniV35MIB, juniV35IfEntry=juniV35IfEntry, juniV35IfIgnoreDcd=juniV35IfIgnoreDcd, juniV35IfClockRate=juniV35IfClockRate, juniV35Objects=juniV35Objects, juniV35Compliance=juniV35Compliance, juniV35Compliances=juniV35Compliances, juniV35IfMode=juniV35IfMode)
