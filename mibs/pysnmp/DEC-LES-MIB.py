#
# PySNMP MIB module DEC-LES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DEC-LES-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:22:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
decMIBextension, = mibBuilder.importSymbols("DECATM-MIB", "decMIBextension")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Bits, Unsigned32, Counter64, MibIdentifier, iso, Gauge32, IpAddress, Counter32, Integer32, ModuleIdentity, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Unsigned32", "Counter64", "MibIdentifier", "iso", "Gauge32", "IpAddress", "Counter32", "Integer32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
decLesMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28))
decLesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1))
decLesMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2))
decLesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1))
decLesMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 2))
decLesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1), )
if mibBuilder.loadTexts: decLesConfigTable.setStatus('mandatory')
decLesConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesConfigEntry.setStatus('mandatory')
decLesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesIndex.setStatus('mandatory')
decLesRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesRowStatus.setStatus('mandatory')
decLesAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesAdminStatus.setStatus('mandatory')
decLesOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabling", 3), ("deleting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesOperStatus.setStatus('mandatory')
decLesLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesLastChange.setStatus('mandatory')
decLesAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesAtmAddress.setStatus('mandatory')
decLesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesDescription.setStatus('mandatory')
decLesLanName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesLanName.setStatus('mandatory')
decLesLanType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("aflane8023", 2), ("aflane8025", 3))).clone('aflane8023')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesLanType.setStatus('mandatory')
decLesMaxDataFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("max1516", 2), ("max4544", 3), ("max9234", 4), ("max18190", 5))).clone('max1516')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesMaxDataFrameSize.setStatus('mandatory')
decLesAtmAddressOfBUS = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesAtmAddressOfBUS.setStatus('mandatory')
decLesControlTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesControlTimeout.setStatus('mandatory')
decLesArpResponsePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("direct", 2), ("broadcast", 3))).clone('unspecified')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesArpResponsePolicy.setStatus('mandatory')
decLesNarpRequestPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesNarpRequestPolicy.setStatus('mandatory')
decLesTopologyChangeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopologyChangeMode.setStatus('mandatory')
decLesLastTcModeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 16), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesLastTcModeChange.setStatus('mandatory')
decLesTopologyChangeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesTopologyChangeTimeout.setStatus('mandatory')
decLesClientStatesTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2), )
if mibBuilder.loadTexts: decLesClientStatesTable.setStatus('mandatory')
decLesClientStatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesClientStatesEntry.setStatus('mandatory')
decLesActiveClients = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesActiveClients.setStatus('mandatory')
decLesActiveProxyClients = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesActiveProxyClients.setStatus('mandatory')
decLesAwaitingJoinRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesAwaitingJoinRequest.setStatus('mandatory')
decLesCtlDistributeInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDistributeInProgress.setStatus('mandatory')
decLesTerminating = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTerminating.setStatus('mandatory')
decLesClientTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3), )
if mibBuilder.loadTexts: decLesClientTable.setStatus('mandatory')
decLesClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"), (0, "DEC-LES-MIB", "decLesClientID"))
if mibBuilder.loadTexts: decLesClientEntry.setStatus('mandatory')
decLesClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesClientID.setStatus('mandatory')
decLesClientAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesClientAtmAddress.setStatus('mandatory')
decLesClientIsProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesClientIsProxy.setStatus('mandatory')
decLesClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("noLesConnect", 2), ("lesConnect", 3), ("joining", 4), ("operational", 5), ("deleting", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesClientState.setStatus('mandatory')
decLesClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesClientRowStatus.setStatus('mandatory')
decLesLecTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4), )
if mibBuilder.loadTexts: decLesLecTable.setStatus('mandatory')
decLesLecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"), (0, "DEC-LES-MIB", "decLesLecAtmAddress"))
if mibBuilder.loadTexts: decLesLecEntry.setStatus('mandatory')
decLesLecAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesLecAtmAddress.setStatus('mandatory')
decLesLecID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65279))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesLecID.setStatus('mandatory')
decLesLecIsProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesLecIsProxy.setStatus('mandatory')
decLesLecState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("noLesConnect", 2), ("lesConnect", 3), ("joining", 4), ("operational", 5), ("deleting", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesLecState.setStatus('mandatory')
decLesLecRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesLecRowStatus.setStatus('mandatory')
decLesCtlDirectTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 5), )
if mibBuilder.loadTexts: decLesCtlDirectTable.setStatus('mandatory')
decLesCtlDirectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 5, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"), (0, "DEC-LES-MIB", "decLesLecAtmAddress"))
if mibBuilder.loadTexts: decLesCtlDirectEntry.setStatus('mandatory')
decLesControlDirectInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesControlDirectInterface.setStatus('mandatory')
decLesControlDirectVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesControlDirectVpi.setStatus('mandatory')
decLesControlDirectVci = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesControlDirectVci.setStatus('mandatory')
decLesControlDirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesControlDirectRowStatus.setStatus('mandatory')
decLesCtlDistTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 6), )
if mibBuilder.loadTexts: decLesCtlDistTable.setStatus('mandatory')
decLesCtlDistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 6, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"), (0, "DEC-LES-MIB", "decLesControlDistInterface"), (0, "DEC-LES-MIB", "decLesControlDistVpi"), (0, "DEC-LES-MIB", "decLesControlDistVci"))
if mibBuilder.loadTexts: decLesCtlDistEntry.setStatus('mandatory')
decLesControlDistInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesControlDistInterface.setStatus('mandatory')
decLesControlDistVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesControlDistVpi.setStatus('mandatory')
decLesControlDistVci = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesControlDistVci.setStatus('mandatory')
decLesControlDistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesControlDistRowStatus.setStatus('mandatory')
decLesMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 7), )
if mibBuilder.loadTexts: decLesMacAddressTable.setStatus('mandatory')
decLesMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 7, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"), (0, "DEC-LES-MIB", "decLesMacAddress"))
if mibBuilder.loadTexts: decLesMacAddressEntry.setStatus('mandatory')
decLesMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesMacAddress.setStatus('mandatory')
decLesMacAddressOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesMacAddressOwner.setStatus('mandatory')
decLesMacAddressAtmBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesMacAddressAtmBinding.setStatus('mandatory')
decLesRouteDescrTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 8), )
if mibBuilder.loadTexts: decLesRouteDescrTable.setStatus('mandatory')
decLesRouteDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 8, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"), (0, "DEC-LES-MIB", "decLesRouteDescrSegmentID"), (0, "DEC-LES-MIB", "decLesRouteDescrBridgeNumber"))
if mibBuilder.loadTexts: decLesRouteDescrEntry.setStatus('mandatory')
decLesRouteDescrSegmentID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRouteDescrSegmentID.setStatus('mandatory')
decLesRouteDescrBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRouteDescrBridgeNumber.setStatus('mandatory')
decLesRouteDescrOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRouteDescrOwner.setStatus('mandatory')
decLesRouteDescrAtmBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRouteDescrAtmBinding.setStatus('mandatory')
decLesTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9), )
if mibBuilder.loadTexts: decLesTrafficTable.setStatus('mandatory')
decLesTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesTrafficEntry.setStatus('mandatory')
decLesControlFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesControlFramesIn.setStatus('mandatory')
decLesShortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesShortFrames.setStatus('mandatory')
decLesUnjoinedClientFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnjoinedClientFrames.setStatus('mandatory')
decLesVersionsNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesVersionsNotSupported.setStatus('mandatory')
decLesInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesInvalidFrames.setStatus('mandatory')
decLesReceiveQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesReceiveQueueDiscards.setStatus('mandatory')
decLesMiscDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesMiscDiscards.setStatus('mandatory')
decLesCallStatsTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10), )
if mibBuilder.loadTexts: decLesCallStatsTable.setStatus('mandatory')
decLesCallStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesCallStatsEntry.setStatus('mandatory')
decLesCtlDirectCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDirectCalls.setStatus('mandatory')
decLesCtlDirectFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDirectFailures.setStatus('mandatory')
decLesCtlDirectOutOfResources = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDirectOutOfResources.setStatus('mandatory')
decLesCtlDirectInvalidInfoElements = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDirectInvalidInfoElements.setStatus('mandatory')
decLesCtlDistributeCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDistributeCalls.setStatus('mandatory')
decLesCtlDistributeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDistributeFailures.setStatus('mandatory')
decLesCtlDistribOutOfResources = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesCtlDistribOutOfResources.setStatus('mandatory')
decLesJoinTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11), )
if mibBuilder.loadTexts: decLesJoinTable.setStatus('mandatory')
decLesJoinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesJoinEntry.setStatus('mandatory')
decLesJoinRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinRequests.setStatus('mandatory')
decLesJoinSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinSuccesses.setStatus('mandatory')
decLesJoinFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinFailures.setStatus('mandatory')
decLesJoinDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinDuplicates.setStatus('mandatory')
decLesJoinNonDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinNonDuplicates.setStatus('mandatory')
decLesJoinDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinDiscards.setStatus('mandatory')
decLesJoinTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinTimeouts.setStatus('mandatory')
decLesJoinVersionsNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinVersionsNotSupported.setStatus('mandatory')
decLesJoinInvalidParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinInvalidParameters.setStatus('mandatory')
decLesJoinDuplicateAtmAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinDuplicateAtmAddresses.setStatus('mandatory')
decLesJoinDuplicateLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinDuplicateLanDestinations.setStatus('mandatory')
decLesJoinInvalidAtmAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinInvalidAtmAddresses.setStatus('mandatory')
decLesJoinInvalidLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinInvalidLanDestinations.setStatus('mandatory')
decLesJoinWrongLanTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinWrongLanTypes.setStatus('mandatory')
decLesJoinMaxFrameSizesTooSmall = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinMaxFrameSizesTooSmall.setStatus('mandatory')
decLesJoinInvalidLECIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinInvalidLECIDs.setStatus('mandatory')
decLesJoinCtlDistributeRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinCtlDistributeRejects.setStatus('mandatory')
decLesJoinOutOfResources = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinOutOfResources.setStatus('mandatory')
decLesJoinRcvQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinRcvQueueDiscards.setStatus('mandatory')
decLesJoinLecRcvQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinLecRcvQueueDiscards.setStatus('mandatory')
decLesJoinResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesJoinResourceDiscards.setStatus('mandatory')
decLesRegisterTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12), )
if mibBuilder.loadTexts: decLesRegisterTable.setStatus('mandatory')
decLesRegisterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesRegisterEntry.setStatus('mandatory')
decLesRegisterRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegisterRequests.setStatus('mandatory')
decLesRegisterSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegisterSuccesses.setStatus('mandatory')
decLesRegisterFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegisterFailures.setStatus('mandatory')
decLesRegisterDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegisterDiscards.setStatus('mandatory')
decLesUnregisterRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnregisterRequests.setStatus('mandatory')
decLesUnregisterSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnregisterSuccesses.setStatus('mandatory')
decLesUnregisterFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnregisterFailures.setStatus('mandatory')
decLesUnregisterDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnregisterDiscards.setStatus('mandatory')
decLesRegDuplicateAtmAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegDuplicateAtmAddresses.setStatus('mandatory')
decLesRegDuplicateLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegDuplicateLanDestinations.setStatus('mandatory')
decLesRegInvalidAtmAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegInvalidAtmAddresses.setStatus('mandatory')
decLesRegInvalidLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegInvalidLanDestinations.setStatus('mandatory')
decLesRegInvalidLECIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegInvalidLECIDs.setStatus('mandatory')
decLesRegOutOfResources = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegOutOfResources.setStatus('mandatory')
decLesRegRcvQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegRcvQueueDiscards.setStatus('mandatory')
decLesRegLecRcvQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegLecRcvQueueDiscards.setStatus('mandatory')
decLesRegResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegResourceDiscards.setStatus('mandatory')
decLesUnRegInvalidLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegInvalidLanDestinations.setStatus('mandatory')
decLesUnRegInvalidLECIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegInvalidLECIDs.setStatus('mandatory')
decLesUnRegRcvQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegRcvQueueDiscards.setStatus('mandatory')
decLesUnRegLecRcvQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegLecRcvQueueDiscards.setStatus('mandatory')
decLesUnRegResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegResourceDiscards.setStatus('mandatory')
decLesRegAlreadyRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesRegAlreadyRegistered.setStatus('mandatory')
decLesUnRegNoSuchLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegNoSuchLanDestinations.setStatus('mandatory')
decLesUnRegNoSuchAddressPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegNoSuchAddressPairs.setStatus('mandatory')
decLesUnRegOwnedByOthers = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 12, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesUnRegOwnedByOthers.setStatus('mandatory')
decLesArpTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13), )
if mibBuilder.loadTexts: decLesArpTable.setStatus('mandatory')
decLesArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesArpEntry.setStatus('mandatory')
decLesArpRequestsAnswered = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRequestsAnswered.setStatus('mandatory')
decLesArpRequestsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRequestsForwarded.setStatus('mandatory')
decLesArpRequestsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRequestsRejected.setStatus('mandatory')
decLesArpRequestsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRequestsDiscarded.setStatus('mandatory')
decLesArpResponsesForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpResponsesForwarded.setStatus('mandatory')
decLesArpResponsesRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpResponsesRejected.setStatus('mandatory')
decLesArpResponsesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpResponsesDiscarded.setStatus('mandatory')
decLesNarpRequestsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpRequestsForwarded.setStatus('mandatory')
decLesNarpRequestsFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpRequestsFiltered.setStatus('mandatory')
decLesNarpRequestsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpRequestsRejected.setStatus('mandatory')
decLesNarpRequestsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpRequestsDiscarded.setStatus('mandatory')
decLesTopologyRequestsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopologyRequestsForwarded.setStatus('mandatory')
decLesTopologyRequestsGenerated = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopologyRequestsGenerated.setStatus('mandatory')
decLesTopologyRequestsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopologyRequestsRejected.setStatus('mandatory')
decLesTopologyRequestsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopologyRequestsDiscarded.setStatus('mandatory')
decLesTopologyRequestGenFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopologyRequestGenFailures.setStatus('mandatory')
decLesArpReqInvalidAtmAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpReqInvalidAtmAddresses.setStatus('mandatory')
decLesArpReqInvalidLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpReqInvalidLanDestinations.setStatus('mandatory')
decLesArpReqInvalidLECIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpReqInvalidLECIDs.setStatus('mandatory')
decLesArpReqReceiveQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpReqReceiveQueueDiscards.setStatus('mandatory')
decLesArpReqResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpReqResourceDiscards.setStatus('mandatory')
decLesArpRespInvalidLECIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRespInvalidLECIDs.setStatus('mandatory')
decLesArpRespReceiveQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRespReceiveQueueDiscards.setStatus('mandatory')
decLesArpRespResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesArpRespResourceDiscards.setStatus('mandatory')
decLesNarpReqInvalidAtmAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpReqInvalidAtmAddresses.setStatus('mandatory')
decLesNarpReqInvalidLanDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpReqInvalidLanDestinations.setStatus('mandatory')
decLesNarpReqInvalidLECIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpReqInvalidLECIDs.setStatus('mandatory')
decLesNarpReqReceiveQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpReqReceiveQueueDiscards.setStatus('mandatory')
decLesNarpReqResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesNarpReqResourceDiscards.setStatus('mandatory')
decLesTopoReqReceiveQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopoReqReceiveQueueDiscards.setStatus('mandatory')
decLesTopoReqResourceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 13, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesTopoReqResourceDiscards.setStatus('mandatory')
decLesFlushTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 14), )
if mibBuilder.loadTexts: decLesFlushTable.setStatus('mandatory')
decLesFlushEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 14, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesIndex"))
if mibBuilder.loadTexts: decLesFlushEntry.setStatus('mandatory')
decLesFlushResponsesForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesFlushResponsesForwarded.setStatus('mandatory')
decLesFlushResponsesRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesFlushResponsesRejected.setStatus('mandatory')
decLesFlushResponsesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesFlushResponsesDiscarded.setStatus('mandatory')
decLesEventLogMaximumSize = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: decLesEventLogMaximumSize.setStatus('mandatory')
decLesEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16), )
if mibBuilder.loadTexts: decLesEventLogTable.setStatus('mandatory')
decLesEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1), ).setIndexNames((0, "DEC-LES-MIB", "decLesEventIndex"))
if mibBuilder.loadTexts: decLesEventLogEntry.setStatus('mandatory')
decLesEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventIndex.setStatus('mandatory')
decLesEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("joinFailed", 1), ("registrationFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventType.setStatus('mandatory')
decLesEventReason = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 6, 7, 8, 9, 10, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 100, 101))).clone(namedValues=NamedValues(("versionNotSupported", 1), ("invalidRequestParameters", 2), ("duplicateLanDestination", 4), ("duplicateAtmAddress", 5), ("insufficientResources", 6), ("accessDenied", 7), ("invalidRequestorId", 8), ("invalidLanDestination", 9), ("invalidAtmAddress", 10), ("wrongLanType", 50), ("wrongMaxFrameSize", 51), ("wrongJoinMaxFrameSize", 52), ("nonDuplicateRequest", 53), ("controlDistributeFailure", 54), ("multicastForwardFailure", 55), ("joinNotCompleted", 56), ("joinTimeout", 57), ("busConnectTimeout", 58), ("clientNotConnectedToLes", 59), ("missingInformationElement", 70), ("noAalParameters", 71), ("noAtmTrafficDescriptor", 72), ("noBroadbandBearerCapability", 73), ("noBlli", 74), ("noCallingPartyNumber", 75), ("noCalledPartyNumber", 76), ("noConnectionIdentifier", 77), ("noQosParameter", 78), ("invalidInformationElement", 80), ("invalidAalParameters", 81), ("invalidAtmTrafficDescriptor", 82), ("invalidBroadbandBearerCapability", 83), ("invalidBlli", 84), ("invalidCallingPartyNumber", 85), ("invalidCalledPartyNumber", 86), ("invalidConnectionIdentifier", 87), ("invalidQosParameter", 88), ("invalidAalMode", 90), ("invalidAalSccs", 91), ("insecureAtmAddress", 100), ("unverifiedAtmAddress", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventReason.setStatus('mandatory')
decLesEventServer = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventServer.setStatus('mandatory')
decLesEventServerAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventServerAtmAddress.setStatus('mandatory')
decLesEventClientAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventClientAtmAddress.setStatus('mandatory')
decLesEventClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventClientMacAddress.setStatus('mandatory')
decLesEventTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 1, 16, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: decLesEventTimestamp.setStatus('mandatory')
decLesConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 1))
decLesClientStatesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 2))
decLesClientGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 3))
decLesLecGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 4))
decLesCircuitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 5))
decLesMacAddressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 6))
decLesRouteDescrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 7))
decLesTrafficGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 8))
decLesCallStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 9))
decLesJoinStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 10))
decLesRegisterStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 11))
decLesArpStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 12))
decLesFlushStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 13))
decLesEventLogGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 1, 14))
decLesMIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 28, 2, 2, 1))
mibBuilder.exportSymbols("DEC-LES-MIB", decLesClientEntry=decLesClientEntry, decLesClientStatesTable=decLesClientStatesTable, decLesJoinInvalidLECIDs=decLesJoinInvalidLECIDs, decLesEventServer=decLesEventServer, decLesCtlDistEntry=decLesCtlDistEntry, decLesCtlDirectOutOfResources=decLesCtlDirectOutOfResources, decLesJoinSuccesses=decLesJoinSuccesses, decLesVersionsNotSupported=decLesVersionsNotSupported, decLesEventLogEntry=decLesEventLogEntry, decLesFlushStatsGroup=decLesFlushStatsGroup, decLesRegLecRcvQueueDiscards=decLesRegLecRcvQueueDiscards, decLesMIBCompliances=decLesMIBCompliances, decLesRegisterEntry=decLesRegisterEntry, decLesTopologyRequestsGenerated=decLesTopologyRequestsGenerated, decLesArpReqResourceDiscards=decLesArpReqResourceDiscards, decLesArpReqInvalidAtmAddresses=decLesArpReqInvalidAtmAddresses, decLesMaxDataFrameSize=decLesMaxDataFrameSize, decLesUnRegInvalidLECIDs=decLesUnRegInvalidLECIDs, decLesJoinRcvQueueDiscards=decLesJoinRcvQueueDiscards, decLesArpRespReceiveQueueDiscards=decLesArpRespReceiveQueueDiscards, decLesRegAlreadyRegistered=decLesRegAlreadyRegistered, decLesEventIndex=decLesEventIndex, decLesInvalidFrames=decLesInvalidFrames, decLesControlDirectInterface=decLesControlDirectInterface, decLesLecID=decLesLecID, decLesClientID=decLesClientID, decLesCtlDistribOutOfResources=decLesCtlDistribOutOfResources, decLesNarpReqResourceDiscards=decLesNarpReqResourceDiscards, decLesConfigEntry=decLesConfigEntry, decLesTopologyRequestsRejected=decLesTopologyRequestsRejected, decLesClientRowStatus=decLesClientRowStatus, decLesMIBConformance=decLesMIBConformance, decLesUnregisterDiscards=decLesUnregisterDiscards, decLesTrafficTable=decLesTrafficTable, decLesRegInvalidAtmAddresses=decLesRegInvalidAtmAddresses, decLesMIB=decLesMIB, decLesUnRegLecRcvQueueDiscards=decLesUnRegLecRcvQueueDiscards, decLesArpReqReceiveQueueDiscards=decLesArpReqReceiveQueueDiscards, decLesMIBObjects=decLesMIBObjects, decLesConfigTable=decLesConfigTable, decLesRegResourceDiscards=decLesRegResourceDiscards, decLesJoinVersionsNotSupported=decLesJoinVersionsNotSupported, decLesCtlDistTable=decLesCtlDistTable, decLesJoinDuplicateLanDestinations=decLesJoinDuplicateLanDestinations, decLesUnRegOwnedByOthers=decLesUnRegOwnedByOthers, decLesUnRegNoSuchLanDestinations=decLesUnRegNoSuchLanDestinations, decLesNarpRequestsRejected=decLesNarpRequestsRejected, decLesUnRegRcvQueueDiscards=decLesUnRegRcvQueueDiscards, decLesUnRegResourceDiscards=decLesUnRegResourceDiscards, decLesJoinWrongLanTypes=decLesJoinWrongLanTypes, decLesJoinLecRcvQueueDiscards=decLesJoinLecRcvQueueDiscards, decLesControlDistVpi=decLesControlDistVpi, decLesAdminStatus=decLesAdminStatus, decLesUnjoinedClientFrames=decLesUnjoinedClientFrames, decLesArpRequestsForwarded=decLesArpRequestsForwarded, decLesEventClientAtmAddress=decLesEventClientAtmAddress, decLesTopologyChangeTimeout=decLesTopologyChangeTimeout, decLesRegRcvQueueDiscards=decLesRegRcvQueueDiscards, decLesControlDirectVci=decLesControlDirectVci, decLesNarpReqReceiveQueueDiscards=decLesNarpReqReceiveQueueDiscards, decLesMacAddress=decLesMacAddress, decLesConfigGroup=decLesConfigGroup, decLesTerminating=decLesTerminating, decLesLecGroup=decLesLecGroup, decLesLecAtmAddress=decLesLecAtmAddress, decLesJoinInvalidParameters=decLesJoinInvalidParameters, decLesRouteDescrTable=decLesRouteDescrTable, decLesNarpReqInvalidAtmAddresses=decLesNarpReqInvalidAtmAddresses, decLesRegisterFailures=decLesRegisterFailures, decLesLanName=decLesLanName, decLesRegisterRequests=decLesRegisterRequests, decLesClientIsProxy=decLesClientIsProxy, decLesJoinDuplicates=decLesJoinDuplicates, decLesJoinDuplicateAtmAddresses=decLesJoinDuplicateAtmAddresses, decLesClientGroup=decLesClientGroup, decLesControlDirectVpi=decLesControlDirectVpi, decLesEventLogGroup=decLesEventLogGroup, decLesNarpReqInvalidLanDestinations=decLesNarpReqInvalidLanDestinations, decLesControlDistVci=decLesControlDistVci, decLesRowStatus=decLesRowStatus, decLesJoinOutOfResources=decLesJoinOutOfResources, decLesMiscDiscards=decLesMiscDiscards, decLesTrafficEntry=decLesTrafficEntry, decLesArpRequestsRejected=decLesArpRequestsRejected, decLesNarpRequestsFiltered=decLesNarpRequestsFiltered, decLesUnregisterSuccesses=decLesUnregisterSuccesses, decLesArpTable=decLesArpTable, decLesArpReqInvalidLanDestinations=decLesArpReqInvalidLanDestinations, decLesFlushTable=decLesFlushTable, decLesCircuitGroup=decLesCircuitGroup, decLesClientAtmAddress=decLesClientAtmAddress, decLesRouteDescrGroup=decLesRouteDescrGroup, decLesArpResponsesDiscarded=decLesArpResponsesDiscarded, decLesUnRegInvalidLanDestinations=decLesUnRegInvalidLanDestinations, decLesNarpRequestsForwarded=decLesNarpRequestsForwarded, decLesCtlDirectInvalidInfoElements=decLesCtlDirectInvalidInfoElements, decLesControlFramesIn=decLesControlFramesIn, decLesArpStatsGroup=decLesArpStatsGroup, decLesEventClientMacAddress=decLesEventClientMacAddress, decLesEventLogTable=decLesEventLogTable, decLesControlDistInterface=decLesControlDistInterface, decLesRegisterDiscards=decLesRegisterDiscards, decLesTopologyRequestGenFailures=decLesTopologyRequestGenFailures, decLesMIBGroups=decLesMIBGroups, decLesControlTimeout=decLesControlTimeout, decLesJoinInvalidLanDestinations=decLesJoinInvalidLanDestinations, decLesTrafficGroup=decLesTrafficGroup, decLesCtlDistributeFailures=decLesCtlDistributeFailures, decLesIndex=decLesIndex, decLesCtlDistributeInProgress=decLesCtlDistributeInProgress, decLesJoinResourceDiscards=decLesJoinResourceDiscards, decLesRouteDescrSegmentID=decLesRouteDescrSegmentID, decLesLanType=decLesLanType, decLesNarpRequestPolicy=decLesNarpRequestPolicy, decLesAtmAddressOfBUS=decLesAtmAddressOfBUS, decLesAtmAddress=decLesAtmAddress, decLesCtlDirectEntry=decLesCtlDirectEntry, decLesTopoReqResourceDiscards=decLesTopoReqResourceDiscards, decLesLastChange=decLesLastChange, decLesArpRespResourceDiscards=decLesArpRespResourceDiscards, decLesCtlDirectFailures=decLesCtlDirectFailures, decLesTopoReqReceiveQueueDiscards=decLesTopoReqReceiveQueueDiscards, decLesMacAddressGroup=decLesMacAddressGroup, decLesLecIsProxy=decLesLecIsProxy, decLesRegDuplicateAtmAddresses=decLesRegDuplicateAtmAddresses, decLesEventReason=decLesEventReason, decLesOperStatus=decLesOperStatus, decLesMacAddressEntry=decLesMacAddressEntry, decLesCallStatsTable=decLesCallStatsTable, decLesControlDirectRowStatus=decLesControlDirectRowStatus, decLesRegOutOfResources=decLesRegOutOfResources, decLesMacAddressOwner=decLesMacAddressOwner, decLesJoinNonDuplicates=decLesJoinNonDuplicates, decLesActiveProxyClients=decLesActiveProxyClients, decLesEventServerAtmAddress=decLesEventServerAtmAddress, decLesRegisterStatsGroup=decLesRegisterStatsGroup, decLesArpEntry=decLesArpEntry, decLesClientStatesGroup=decLesClientStatesGroup, decLesJoinTable=decLesJoinTable, decLesUnregisterFailures=decLesUnregisterFailures, decLesArpRequestsAnswered=decLesArpRequestsAnswered, decLesNarpRequestsDiscarded=decLesNarpRequestsDiscarded, decLesAwaitingJoinRequest=decLesAwaitingJoinRequest, decLesRegInvalidLanDestinations=decLesRegInvalidLanDestinations, decLesDescription=decLesDescription, decLesActiveClients=decLesActiveClients, decLesLecTable=decLesLecTable, decLesMIBCompliance=decLesMIBCompliance, decLesLecEntry=decLesLecEntry, decLesFlushEntry=decLesFlushEntry, decLesLecState=decLesLecState, decLesCtlDirectCalls=decLesCtlDirectCalls, decLesUnregisterRequests=decLesUnregisterRequests, decLesArpRespInvalidLECIDs=decLesArpRespInvalidLECIDs, decLesRouteDescrOwner=decLesRouteDescrOwner, decLesArpResponsePolicy=decLesArpResponsePolicy, decLesJoinRequests=decLesJoinRequests, decLesJoinMaxFrameSizesTooSmall=decLesJoinMaxFrameSizesTooSmall, decLesEventTimestamp=decLesEventTimestamp, decLesLastTcModeChange=decLesLastTcModeChange, decLesFlushResponsesForwarded=decLesFlushResponsesForwarded, decLesCallStatsEntry=decLesCallStatsEntry, decLesTopologyRequestsDiscarded=decLesTopologyRequestsDiscarded, decLesRegisterSuccesses=decLesRegisterSuccesses, decLesReceiveQueueDiscards=decLesReceiveQueueDiscards, decLesRouteDescrEntry=decLesRouteDescrEntry, decLesUnRegNoSuchAddressPairs=decLesUnRegNoSuchAddressPairs, decLesTopologyChangeMode=decLesTopologyChangeMode, decLesRouteDescrBridgeNumber=decLesRouteDescrBridgeNumber, decLesJoinTimeouts=decLesJoinTimeouts, decLesCtlDistributeCalls=decLesCtlDistributeCalls, decLesJoinDiscards=decLesJoinDiscards, decLesClientState=decLesClientState, decLesRouteDescrAtmBinding=decLesRouteDescrAtmBinding, decLesCallStatsGroup=decLesCallStatsGroup, decLesLecRowStatus=decLesLecRowStatus, decLesFlushResponsesDiscarded=decLesFlushResponsesDiscarded, decLesJoinStatsGroup=decLesJoinStatsGroup, decLesEventType=decLesEventType, decLesEventLogMaximumSize=decLesEventLogMaximumSize, decLesJoinInvalidAtmAddresses=decLesJoinInvalidAtmAddresses, decLesCtlDirectTable=decLesCtlDirectTable, decLesRegisterTable=decLesRegisterTable, decLesNarpReqInvalidLECIDs=decLesNarpReqInvalidLECIDs, decLesRegDuplicateLanDestinations=decLesRegDuplicateLanDestinations, decLesRegInvalidLECIDs=decLesRegInvalidLECIDs, decLesJoinCtlDistributeRejects=decLesJoinCtlDistributeRejects, decLesArpRequestsDiscarded=decLesArpRequestsDiscarded, decLesJoinEntry=decLesJoinEntry, decLesArpResponsesRejected=decLesArpResponsesRejected, decLesControlDistRowStatus=decLesControlDistRowStatus, decLesClientStatesEntry=decLesClientStatesEntry, decLesArpReqInvalidLECIDs=decLesArpReqInvalidLECIDs, decLesShortFrames=decLesShortFrames, decLesFlushResponsesRejected=decLesFlushResponsesRejected, decLesMacAddressTable=decLesMacAddressTable, decLesTopologyRequestsForwarded=decLesTopologyRequestsForwarded, decLesJoinFailures=decLesJoinFailures, decLesClientTable=decLesClientTable, decLesMacAddressAtmBinding=decLesMacAddressAtmBinding, decLesArpResponsesForwarded=decLesArpResponsesForwarded)
