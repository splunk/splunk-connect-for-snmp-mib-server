#
# PySNMP MIB module COLUBRIS-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COLUBRIS-QOS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:10:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
colubrisMgmtV2, = mibBuilder.importSymbols("COLUBRIS-SMI", "colubrisMgmtV2")
ColubrisPriorityQueue, = mibBuilder.importSymbols("COLUBRIS-TC", "ColubrisPriorityQueue")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, NotificationType, ModuleIdentity, TimeTicks, IpAddress, Integer32, ObjectIdentity, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "NotificationType", "ModuleIdentity", "TimeTicks", "IpAddress", "Integer32", "ObjectIdentity", "Counter64", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
colubrisQOS = ModuleIdentity((1, 3, 6, 1, 4, 1, 8744, 5, 13))
if mibBuilder.loadTexts: colubrisQOS.setLastUpdated('200407200000Z')
if mibBuilder.loadTexts: colubrisQOS.setOrganization('Colubris Networks, Inc.')
colubrisQOSMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1))
coQOSStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1))
coQOSCountersTable = MibTable((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1), )
if mibBuilder.loadTexts: coQOSCountersTable.setStatus('current')
coQOSCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "COLUBRIS-QOS-MIB", "coQOSQueueId"))
if mibBuilder.loadTexts: coQOSCountersEntry.setStatus('current')
coQOSQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 1), ColubrisPriorityQueue())
if mibBuilder.loadTexts: coQOSQueueId.setStatus('current')
coQOSTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSTransmittedFrameCount.setStatus('current')
coQOSMulticastTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSMulticastTransmittedFrameCount.setStatus('current')
coQOSFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSFailedCount.setStatus('current')
coQOSRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSRetryCount.setStatus('current')
coQOSMultipleRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSMultipleRetryCount.setStatus('current')
coQOSFrameDuplicateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSFrameDuplicateCount.setStatus('current')
coQOSReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSReceivedFrameCount.setStatus('current')
coQOSMulticastReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coQOSMulticastReceivedFrameCount.setStatus('current')
coQOSConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2))
coQOSGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2, 1))
coQOSCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2, 2))
coQOSCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2, 2, 1)).setObjects(("COLUBRIS-QOS-MIB", "coQOSCountersGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coQOSCompliance = coQOSCompliance.setStatus('current')
coQOSCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 8744, 5, 13, 1, 2, 1, 1)).setObjects(("COLUBRIS-QOS-MIB", "coQOSTransmittedFrameCount"), ("COLUBRIS-QOS-MIB", "coQOSMulticastTransmittedFrameCount"), ("COLUBRIS-QOS-MIB", "coQOSFailedCount"), ("COLUBRIS-QOS-MIB", "coQOSRetryCount"), ("COLUBRIS-QOS-MIB", "coQOSMultipleRetryCount"), ("COLUBRIS-QOS-MIB", "coQOSFrameDuplicateCount"), ("COLUBRIS-QOS-MIB", "coQOSReceivedFrameCount"), ("COLUBRIS-QOS-MIB", "coQOSMulticastReceivedFrameCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coQOSCountersGroup = coQOSCountersGroup.setStatus('current')
mibBuilder.exportSymbols("COLUBRIS-QOS-MIB", coQOSCountersEntry=coQOSCountersEntry, colubrisQOSMIBObjects=colubrisQOSMIBObjects, coQOSCountersGroup=coQOSCountersGroup, coQOSGroups=coQOSGroups, coQOSCountersTable=coQOSCountersTable, coQOSFailedCount=coQOSFailedCount, coQOSTransmittedFrameCount=coQOSTransmittedFrameCount, coQOSCompliances=coQOSCompliances, coQOSMulticastTransmittedFrameCount=coQOSMulticastTransmittedFrameCount, coQOSMulticastReceivedFrameCount=coQOSMulticastReceivedFrameCount, coQOSFrameDuplicateCount=coQOSFrameDuplicateCount, coQOSCompliance=coQOSCompliance, coQOSRetryCount=coQOSRetryCount, PYSNMP_MODULE_ID=colubrisQOS, colubrisQOS=colubrisQOS, coQOSReceivedFrameCount=coQOSReceivedFrameCount, coQOSConformance=coQOSConformance, coQOSMultipleRetryCount=coQOSMultipleRetryCount, coQOSStatistics=coQOSStatistics, coQOSQueueId=coQOSQueueId)
