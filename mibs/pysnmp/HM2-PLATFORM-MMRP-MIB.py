#
# PySNMP MIB module HM2-PLATFORM-MMRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-MMRP-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:19:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
hm2AgentDot1qMrpMxrp, = mibBuilder.importSymbols("HM2-PLATFORM-MRP-MIB", "hm2AgentDot1qMrpMxrp")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Integer32, iso, Counter32, Bits, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, TimeTicks, Unsigned32, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "iso", "Counter32", "Bits", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "TimeTicks", "Unsigned32", "MibIdentifier", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hm2PlatformMMRP = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1))
hm2PlatformMMRP.setRevisions(('2013-04-10 00:00',))
if mibBuilder.loadTexts: hm2PlatformMMRP.setLastUpdated('201304100000Z')
if mibBuilder.loadTexts: hm2PlatformMMRP.setOrganization('Hirschmann Automation and Control GmbH')
hm2AgentDot1qMmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1))
hm2AgentDot1qMrpMmrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2))
hm2AgentDot1qPortMmrpTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1, 1), )
if mibBuilder.loadTexts: hm2AgentDot1qPortMmrpTable.setStatus('current')
hm2AgentDot1qPortMmrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-MMRP-MIB", "hm2AgentDot1qMmrpPort"))
if mibBuilder.loadTexts: hm2AgentDot1qPortMmrpEntry.setStatus('current')
hm2AgentDot1qMmrpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hm2AgentDot1qMmrpPort.setStatus('current')
hm2AgentDot1qPortMmrpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1, 1, 1, 2), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qPortMmrpMode.setStatus('current')
hm2AgentDot1qBridgeMmrpMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMmrpMode.setStatus('current')
hm2AgentDot1qBridgeMrpPeriodicStateMachineForMmrp = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentDot1qBridgeMrpPeriodicStateMachineForMmrp.setStatus('current')
hm2AgentDot1qMrpMmrpPktTx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktTx.setStatus('current')
hm2AgentDot1qMrpMmrpPktRx = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktRx.setStatus('current')
hm2AgentDot1qMrpMmrpPktRxBadHeader = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktRxBadHeader.setStatus('current')
hm2AgentDot1qMrpMmrpPktRxBadFormat = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktRxBadFormat.setStatus('current')
hm2AgentDot1qMrpMmrpPktTxFailure = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPktTxFailure.setStatus('current')
hm2AgentDot1qMrpMmrpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6), )
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpStatsTable.setStatus('current')
hm2AgentDot1qMrpMmrpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1), ).setIndexNames((0, "HM2-PLATFORM-MMRP-MIB", "hm2AgentDot1qMrpMmrpIntf"))
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpStatsEntry.setStatus('current')
hm2AgentDot1qMrpMmrpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpIntf.setStatus('current')
hm2AgentDot1qMrpMmrpPortPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktTx.setStatus('current')
hm2AgentDot1qMrpMmrpPortPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktRx.setStatus('current')
hm2AgentDot1qMrpMmrpPortPktRxBadHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktRxBadHeader.setStatus('current')
hm2AgentDot1qMrpMmrpPortPktRxBadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktRxBadFormat.setStatus('current')
hm2AgentDot1qMrpMmrpPortPktTxFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpPortPktTxFailure.setStatus('current')
hm2AgentDot1qMrpMmrpDynamicAddrCount = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 60, 2, 1, 2, 248), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentDot1qMrpMmrpDynamicAddrCount.setStatus('current')
mibBuilder.exportSymbols("HM2-PLATFORM-MMRP-MIB", PYSNMP_MODULE_ID=hm2PlatformMMRP, hm2AgentDot1qMrpMmrpPktTxFailure=hm2AgentDot1qMrpMmrpPktTxFailure, hm2AgentDot1qMrpMmrpPortPktRx=hm2AgentDot1qMrpMmrpPortPktRx, hm2AgentDot1qMrpMmrpStatsEntry=hm2AgentDot1qMrpMmrpStatsEntry, hm2AgentDot1qBridgeMmrpMode=hm2AgentDot1qBridgeMmrpMode, hm2AgentDot1qMrpMmrpStats=hm2AgentDot1qMrpMmrpStats, hm2AgentDot1qMmrp=hm2AgentDot1qMmrp, hm2AgentDot1qBridgeMrpPeriodicStateMachineForMmrp=hm2AgentDot1qBridgeMrpPeriodicStateMachineForMmrp, hm2AgentDot1qMrpMmrpPortPktTx=hm2AgentDot1qMrpMmrpPortPktTx, hm2AgentDot1qMrpMmrpPktRxBadFormat=hm2AgentDot1qMrpMmrpPktRxBadFormat, hm2AgentDot1qMrpMmrpIntf=hm2AgentDot1qMrpMmrpIntf, hm2AgentDot1qMrpMmrpPortPktRxBadFormat=hm2AgentDot1qMrpMmrpPortPktRxBadFormat, hm2AgentDot1qMrpMmrpPortPktRxBadHeader=hm2AgentDot1qMrpMmrpPortPktRxBadHeader, hm2PlatformMMRP=hm2PlatformMMRP, hm2AgentDot1qMrpMmrpDynamicAddrCount=hm2AgentDot1qMrpMmrpDynamicAddrCount, hm2AgentDot1qMrpMmrpPortPktTxFailure=hm2AgentDot1qMrpMmrpPortPktTxFailure, hm2AgentDot1qMrpMmrpStatsTable=hm2AgentDot1qMrpMmrpStatsTable, hm2AgentDot1qPortMmrpMode=hm2AgentDot1qPortMmrpMode, hm2AgentDot1qMrpMmrpPktRx=hm2AgentDot1qMrpMmrpPktRx, hm2AgentDot1qPortMmrpEntry=hm2AgentDot1qPortMmrpEntry, hm2AgentDot1qMmrpPort=hm2AgentDot1qMmrpPort, hm2AgentDot1qPortMmrpTable=hm2AgentDot1qPortMmrpTable, hm2AgentDot1qMrpMmrpPktTx=hm2AgentDot1qMrpMmrpPktTx, hm2AgentDot1qMrpMmrpPktRxBadHeader=hm2AgentDot1qMrpMmrpPktRxBadHeader)
