#
# PySNMP MIB module BAS-ALIAS-DOCS-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-ALIAS-DOCS-IF-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:17:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
BasSlotId, basAliasDocsIf, BasInterfaceId, BasLogicalPortId, BasChassisId = mibBuilder.importSymbols("BAS-MIB", "BasSlotId", "basAliasDocsIf", "BasInterfaceId", "BasLogicalPortId", "BasChassisId")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, transmission, Integer32, Counter32, IpAddress, Counter64, NotificationType, MibIdentifier, Bits, ModuleIdentity, TimeTicks, iso, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "transmission", "Integer32", "Counter32", "IpAddress", "Counter64", "NotificationType", "MibIdentifier", "Bits", "ModuleIdentity", "TimeTicks", "iso", "Unsigned32", "ObjectIdentity")
TruthValue, DisplayString, TextualConvention, RowStatus, TimeInterval, MacAddress, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus", "TimeInterval", "MacAddress", "TimeStamp")
basAliasDocsIfMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1))
basAliasDocsIfMib.setRevisions(('1999-08-19 00:00',))
if mibBuilder.loadTexts: basAliasDocsIfMib.setLastUpdated('9908190000Z')
if mibBuilder.loadTexts: basAliasDocsIfMib.setOrganization('Broadband Access Systems')
class InterfaceIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class TenthdBmV(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

class TenthdB(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd-1'

basDocsIfMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1))
basDocsIfBaseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1))
basDocsIfCmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 2))
basDocsIfCmtsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3))
basDocsIfQosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3), )
if mibBuilder.loadTexts: basDocsIfQosProfileTable.setStatus('current')
basDocsIfQosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1), ).setIndexNames((0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfQosProfChassis"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfQosProfSlot"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfQosProfIf"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfQosProfLPort"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfQosProfIndex"))
if mibBuilder.loadTexts: basDocsIfQosProfileEntry.setStatus('current')
basDocsIfQosProfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: basDocsIfQosProfIndex.setStatus('current')
basDocsIfQosProfPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsIfQosProfPriority.setStatus('current')
basDocsIfQosProfMaxUpBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsIfQosProfMaxUpBandwidth.setStatus('current')
basDocsIfQosProfGuarUpBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsIfQosProfGuarUpBandwidth.setStatus('current')
basDocsIfQosProfMaxDownBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsIfQosProfMaxDownBandwidth.setStatus('current')
basDocsIfQosProfMaxTxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsIfQosProfMaxTxBurst.setStatus('current')
basDocsIfQosProfBaselinePrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsIfQosProfBaselinePrivacy.setStatus('current')
basDocsIfQosProfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basDocsIfQosProfStatus.setStatus('current')
basDocsIfQosProfChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1, 9), BasChassisId())
if mibBuilder.loadTexts: basDocsIfQosProfChassis.setStatus('current')
basDocsIfQosProfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1, 10), BasSlotId())
if mibBuilder.loadTexts: basDocsIfQosProfSlot.setStatus('current')
basDocsIfQosProfIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1, 11), BasInterfaceId())
if mibBuilder.loadTexts: basDocsIfQosProfIf.setStatus('current')
basDocsIfQosProfLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 1, 3, 1, 12), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsIfQosProfLPort.setStatus('current')
basDocsIfCmtsCmStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3), )
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusTable.setStatus('current')
basDocsIfCmtsCmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1), ).setIndexNames((0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsCmStatusChassis"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsCmStatusSlot"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsCmStatusIf"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsCmStatusLPort"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsCmStatusIndex"))
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusEntry.setStatus('current')
basDocsIfCmtsCmStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusIndex.setStatus('current')
basDocsIfCmtsCmStatusMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusMacAddress.setStatus('current')
basDocsIfCmtsCmStatusIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusIpAddress.setStatus('current')
basDocsIfCmtsCmStatusDownChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusDownChannelIfIndex.setStatus('current')
basDocsIfCmtsCmStatusUpChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusUpChannelIfIndex.setStatus('current')
basDocsIfCmtsCmStatusRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 6), TenthdBmV()).setUnits('dBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusRxPower.setStatus('current')
basDocsIfCmtsCmStatusTimingOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusTimingOffset.setStatus('current')
basDocsIfCmtsCmStatusEqualizationData = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusEqualizationData.setStatus('current')
basDocsIfCmtsCmStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("ranging", 2), ("rangingAborted", 3), ("rangingComplete", 4), ("ipComplete", 5), ("registrationComplete", 6), ("accessDenied", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusValue.setStatus('current')
basDocsIfCmtsCmStatusUnerroreds = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusUnerroreds.setStatus('current')
basDocsIfCmtsCmStatusCorrecteds = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusCorrecteds.setStatus('current')
basDocsIfCmtsCmStatusUncorrectables = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusUncorrectables.setStatus('current')
basDocsIfCmtsCmStatusSignalNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 13), TenthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusSignalNoise.setStatus('current')
basDocsIfCmtsCmStatusMicroreflections = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('dBc').setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusMicroreflections.setStatus('current')
basDocsIfCmtsCmStatusChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 15), BasChassisId())
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusChassis.setStatus('current')
basDocsIfCmtsCmStatusSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 16), BasSlotId())
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusSlot.setStatus('current')
basDocsIfCmtsCmStatusIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 17), BasInterfaceId())
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusIf.setStatus('current')
basDocsIfCmtsCmStatusLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 3, 1, 18), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsIfCmtsCmStatusLPort.setStatus('current')
basDocsIfCmtsQosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 6), )
if mibBuilder.loadTexts: basDocsIfCmtsQosProfileTable.setStatus('current')
basDocsIfCmtsQosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 6, 1), ).setIndexNames((0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsQosProfileChassis"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsQosProfileSlot"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsQosProfileIf"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsQosProfileLPort"))
if mibBuilder.loadTexts: basDocsIfCmtsQosProfileEntry.setStatus('current')
basDocsIfCmtsQosProfilePermissions = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 6, 1, 6), Bits().clone(namedValues=NamedValues(("createByManagement", 0), ("updateByManagement", 1), ("createByModems", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basDocsIfCmtsQosProfilePermissions.setStatus('current')
basDocsIfCmtsQosProfileChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 6, 1, 7), BasChassisId())
if mibBuilder.loadTexts: basDocsIfCmtsQosProfileChassis.setStatus('current')
basDocsIfCmtsQosProfileSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 6, 1, 8), BasSlotId())
if mibBuilder.loadTexts: basDocsIfCmtsQosProfileSlot.setStatus('current')
basDocsIfCmtsQosProfileIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 6, 1, 9), BasInterfaceId())
if mibBuilder.loadTexts: basDocsIfCmtsQosProfileIf.setStatus('current')
basDocsIfCmtsQosProfileLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 6, 1, 10), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsIfCmtsQosProfileLPort.setStatus('current')
basDocsIfCmtsMacToCmTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 7), )
if mibBuilder.loadTexts: basDocsIfCmtsMacToCmTable.setStatus('current')
basDocsIfCmtsMacToCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 7, 1), ).setIndexNames((0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsCmChassis"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsCmSlot"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsCmIf"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsCmLPort"), (0, "BAS-ALIAS-DOCS-IF-MIB", "basDocsIfCmtsCmMac"))
if mibBuilder.loadTexts: basDocsIfCmtsMacToCmEntry.setStatus('current')
basDocsIfCmtsCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: basDocsIfCmtsCmMac.setStatus('current')
basDocsIfCmtsCmPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basDocsIfCmtsCmPtr.setStatus('current')
basDocsIfCmtsCmChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 7, 1, 3), BasChassisId())
if mibBuilder.loadTexts: basDocsIfCmtsCmChassis.setStatus('current')
basDocsIfCmtsCmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 7, 1, 4), BasSlotId())
if mibBuilder.loadTexts: basDocsIfCmtsCmSlot.setStatus('current')
basDocsIfCmtsCmIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 7, 1, 5), BasInterfaceId())
if mibBuilder.loadTexts: basDocsIfCmtsCmIf.setStatus('current')
basDocsIfCmtsCmLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 7, 8, 1, 1, 3, 7, 1, 6), BasLogicalPortId())
if mibBuilder.loadTexts: basDocsIfCmtsCmLPort.setStatus('current')
mibBuilder.exportSymbols("BAS-ALIAS-DOCS-IF-MIB", basDocsIfQosProfMaxUpBandwidth=basDocsIfQosProfMaxUpBandwidth, basDocsIfQosProfChassis=basDocsIfQosProfChassis, basDocsIfQosProfileEntry=basDocsIfQosProfileEntry, basDocsIfQosProfGuarUpBandwidth=basDocsIfQosProfGuarUpBandwidth, basDocsIfCmtsCmStatusIndex=basDocsIfCmtsCmStatusIndex, basDocsIfCmtsCmPtr=basDocsIfCmtsCmPtr, basDocsIfMibObjects=basDocsIfMibObjects, basDocsIfCmtsCmStatusTable=basDocsIfCmtsCmStatusTable, basDocsIfQosProfileTable=basDocsIfQosProfileTable, basDocsIfCmtsCmStatusUnerroreds=basDocsIfCmtsCmStatusUnerroreds, basDocsIfQosProfStatus=basDocsIfQosProfStatus, basDocsIfQosProfSlot=basDocsIfQosProfSlot, basDocsIfCmtsCmStatusDownChannelIfIndex=basDocsIfCmtsCmStatusDownChannelIfIndex, basDocsIfCmtsCmStatusMicroreflections=basDocsIfCmtsCmStatusMicroreflections, basDocsIfCmtsQosProfileEntry=basDocsIfCmtsQosProfileEntry, basDocsIfCmtsCmStatusTimingOffset=basDocsIfCmtsCmStatusTimingOffset, basDocsIfCmtsCmStatusLPort=basDocsIfCmtsCmStatusLPort, basDocsIfCmtsCmStatusCorrecteds=basDocsIfCmtsCmStatusCorrecteds, basDocsIfQosProfBaselinePrivacy=basDocsIfQosProfBaselinePrivacy, basDocsIfCmtsCmStatusEntry=basDocsIfCmtsCmStatusEntry, basDocsIfCmtsCmStatusEqualizationData=basDocsIfCmtsCmStatusEqualizationData, basDocsIfCmtsCmStatusIf=basDocsIfCmtsCmStatusIf, basAliasDocsIfMib=basAliasDocsIfMib, InterfaceIndexOrZero=InterfaceIndexOrZero, basDocsIfQosProfMaxTxBurst=basDocsIfQosProfMaxTxBurst, TenthdB=TenthdB, basDocsIfCmtsQosProfileChassis=basDocsIfCmtsQosProfileChassis, basDocsIfCmtsCmIf=basDocsIfCmtsCmIf, basDocsIfCmtsQosProfileIf=basDocsIfCmtsQosProfileIf, basDocsIfCmtsMacToCmEntry=basDocsIfCmtsMacToCmEntry, PYSNMP_MODULE_ID=basAliasDocsIfMib, basDocsIfCmtsCmStatusMacAddress=basDocsIfCmtsCmStatusMacAddress, basDocsIfCmtsCmStatusUpChannelIfIndex=basDocsIfCmtsCmStatusUpChannelIfIndex, basDocsIfCmtsCmChassis=basDocsIfCmtsCmChassis, basDocsIfCmtsCmLPort=basDocsIfCmtsCmLPort, basDocsIfCmtsCmStatusRxPower=basDocsIfCmtsCmStatusRxPower, basDocsIfCmtsCmStatusUncorrectables=basDocsIfCmtsCmStatusUncorrectables, basDocsIfCmtsCmStatusSlot=basDocsIfCmtsCmStatusSlot, basDocsIfQosProfMaxDownBandwidth=basDocsIfQosProfMaxDownBandwidth, basDocsIfCmtsCmStatusValue=basDocsIfCmtsCmStatusValue, basDocsIfCmtsCmMac=basDocsIfCmtsCmMac, basDocsIfCmtsMacToCmTable=basDocsIfCmtsMacToCmTable, basDocsIfCmtsCmStatusIpAddress=basDocsIfCmtsCmStatusIpAddress, basDocsIfCmtsCmStatusSignalNoise=basDocsIfCmtsCmStatusSignalNoise, basDocsIfQosProfIf=basDocsIfQosProfIf, TenthdBmV=TenthdBmV, basDocsIfQosProfPriority=basDocsIfQosProfPriority, basDocsIfCmtsObjects=basDocsIfCmtsObjects, basDocsIfBaseObjects=basDocsIfBaseObjects, basDocsIfCmObjects=basDocsIfCmObjects, basDocsIfQosProfLPort=basDocsIfQosProfLPort, basDocsIfQosProfIndex=basDocsIfQosProfIndex, basDocsIfCmtsCmStatusChassis=basDocsIfCmtsCmStatusChassis, basDocsIfCmtsQosProfileTable=basDocsIfCmtsQosProfileTable, basDocsIfCmtsQosProfilePermissions=basDocsIfCmtsQosProfilePermissions, basDocsIfCmtsQosProfileLPort=basDocsIfCmtsQosProfileLPort, basDocsIfCmtsQosProfileSlot=basDocsIfCmtsQosProfileSlot, basDocsIfCmtsCmSlot=basDocsIfCmtsCmSlot)
