#
# PySNMP MIB module APPIAN-MODULE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-MODULE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:07:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisCurrentTime, acChassisRingId = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisCurrentTime", "acChassisRingId")
acOsap, AcSwVersion, AcNodeId, AcOpStatus, AcSlotNumber, AcAdminStatus = mibBuilder.importSymbols("APPIAN-SMI-MIB", "acOsap", "AcSwVersion", "AcNodeId", "AcOpStatus", "AcSlotNumber", "AcAdminStatus")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, iso, MibIdentifier, Counter32, Bits, TimeTicks, Unsigned32, Counter64, ModuleIdentity, Integer32, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "MibIdentifier", "Counter32", "Bits", "TimeTicks", "Unsigned32", "Counter64", "ModuleIdentity", "Integer32", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
acModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 2))
acModule.setRevisions(('1999-11-11 00:00',))
if mibBuilder.loadTexts: acModule.setLastUpdated('9911040000Z')
if mibBuilder.loadTexts: acModule.setOrganization('Appian Communications, Inc.')
class AcModuleType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37))
    namedValues = NamedValues(("unknown", 0), ("not-present", 1), ("bits-s3", 2), ("svcproc-1", 3), ("fe16-mc", 4), ("fe8-tx-io", 5), ("fe8-fx-io", 6), ("gbe-sx", 7), ("gbe-lx", 8), ("gbe-sfp", 9), ("oc48-ir-2", 10), ("oc48-ir-1", 11), ("ds1-14-mc", 12), ("ds1-7-io", 13), ("ds3-network", 14), ("ds3-access", 15), ("ds3-io", 16), ("oc3-ir-1", 17), ("oc3-ir-2", 18), ("oc3-sr-1", 19), ("oc3-sr-2", 20), ("oc3-lr-1", 21), ("oc3-lr-2", 22), ("oc3c-ir-4", 23), ("oc12-ir-1-oc3c-ir-4", 24), ("oc12-ir-1", 25), ("oc12-ir-2", 26), ("oc12-ir-4", 27), ("oc12-lr-1", 28), ("oc12-lr-2", 29), ("oc48-ir-1-oc12-ir-4", 30), ("oc48-lr-2", 31), ("oc48-lr-1", 32), ("e1", 33), ("e1-io", 34), ("e3", 35), ("e3-io", 36), ("enet-agg", 37))

class AcModuleNumber(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2)

class AcMediaSlotNumber(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 9)

acModuleTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1), )
if mibBuilder.loadTexts: acModuleTable.setStatus('current')
acModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1), ).setIndexNames((0, "APPIAN-MODULE-MIB", "acModuleNodeId"), (0, "APPIAN-MODULE-MIB", "acModuleSlot"), (0, "APPIAN-MODULE-MIB", "acModuleNumber"))
if mibBuilder.loadTexts: acModuleEntry.setStatus('current')
acModuleNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acModuleNodeId.setStatus('current')
acModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acModuleSlot.setStatus('current')
acModuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 3), AcModuleNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acModuleNumber.setStatus('current')
acModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 4), AcAdminStatus().clone('inactivate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acModuleAdminStatus.setStatus('current')
acModuleCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 5), AcModuleType().clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acModuleCfgType.setStatus('current')
acModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 6), AcModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleType.setStatus('current')
acModuleOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 7), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleOpStatus.setStatus('current')
acModuleRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleRevision.setStatus('current')
acModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleSerialNumber.setStatus('current')
acModuleProductionDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleProductionDate.setStatus('current')
acModuleFirmwareName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleFirmwareName.setStatus('current')
acModuleFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleFirmwareRevision.setStatus('current')
acModuleNumberFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleNumberFailures.setStatus('current')
acModuleReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acModuleReset.setStatus('current')
acModuleNumberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleNumberPorts.setStatus('current')
acModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleName.setStatus('current')
acModuleSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 17), AcSwVersion()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleSwVersion.setStatus('current')
acModuleDiagTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("basic", 1), ("advanced", 2), ("stress", 3))).clone('basic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acModuleDiagTestMode.setStatus('current')
acModuleDiagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleDiagStatus.setStatus('current')
acModuleDiagResultString = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleDiagResultString.setStatus('current')
acModuleActiveSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 21), AcMediaSlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleActiveSlot.setStatus('current')
acModulePrimarySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 22), AcMediaSlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModulePrimarySlot.setStatus('current')
acModuleBackupSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 2, 1, 1, 23), AcMediaSlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acModuleBackupSlot.setStatus('current')
acModuleTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 2, 0))
acModuleCfgMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 2, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-MODULE-MIB", "acModuleNodeId"), ("APPIAN-MODULE-MIB", "acModuleSlot"), ("APPIAN-MODULE-MIB", "acModuleCfgType"), ("APPIAN-MODULE-MIB", "acModuleType"))
if mibBuilder.loadTexts: acModuleCfgMismatchTrap.setStatus('current')
acModuleResetFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 2, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-MODULE-MIB", "acModuleNodeId"), ("APPIAN-MODULE-MIB", "acModuleReset"), ("APPIAN-MODULE-MIB", "acModuleSlot"))
if mibBuilder.loadTexts: acModuleResetFailedTrap.setStatus('current')
acModuleSwVersionTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 2, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-MODULE-MIB", "acModuleNodeId"), ("APPIAN-MODULE-MIB", "acModuleSlot"), ("APPIAN-MODULE-MIB", "acModuleSwVersion"))
if mibBuilder.loadTexts: acModuleSwVersionTrap.setStatus('current')
acModuleRemovalTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 2, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-MODULE-MIB", "acModuleNodeId"), ("APPIAN-MODULE-MIB", "acModuleSlot"))
if mibBuilder.loadTexts: acModuleRemovalTrap.setStatus('current')
acModuleInsertedTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 2, 0, 5)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-MODULE-MIB", "acModuleNodeId"), ("APPIAN-MODULE-MIB", "acModuleSlot"), ("APPIAN-MODULE-MIB", "acModuleType"))
if mibBuilder.loadTexts: acModuleInsertedTrap.setStatus('current')
acModuleFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 2, 0, 6)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-MODULE-MIB", "acModuleNodeId"), ("APPIAN-MODULE-MIB", "acModuleSlot"), ("APPIAN-MODULE-MIB", "acModuleType"), ("APPIAN-MODULE-MIB", "acModuleDiagStatus"), ("APPIAN-MODULE-MIB", "acModuleDiagResultString"))
if mibBuilder.loadTexts: acModuleFailureTrap.setStatus('current')
mibBuilder.exportSymbols("APPIAN-MODULE-MIB", acModulePrimarySlot=acModulePrimarySlot, acModuleFirmwareRevision=acModuleFirmwareRevision, acModuleDiagStatus=acModuleDiagStatus, AcModuleNumber=AcModuleNumber, acModuleSlot=acModuleSlot, acModuleName=acModuleName, acModuleReset=acModuleReset, acModuleNumber=acModuleNumber, acModuleCfgMismatchTrap=acModuleCfgMismatchTrap, acModuleFirmwareName=acModuleFirmwareName, acModuleRevision=acModuleRevision, acModuleNumberFailures=acModuleNumberFailures, acModuleSerialNumber=acModuleSerialNumber, acModuleOpStatus=acModuleOpStatus, AcMediaSlotNumber=AcMediaSlotNumber, acModuleType=acModuleType, acModuleNodeId=acModuleNodeId, acModuleTraps=acModuleTraps, acModuleProductionDate=acModuleProductionDate, AcModuleType=AcModuleType, acModuleCfgType=acModuleCfgType, acModuleEntry=acModuleEntry, acModuleInsertedTrap=acModuleInsertedTrap, acModule=acModule, acModuleSwVersionTrap=acModuleSwVersionTrap, acModuleSwVersion=acModuleSwVersion, acModuleTable=acModuleTable, acModuleBackupSlot=acModuleBackupSlot, PYSNMP_MODULE_ID=acModule, acModuleFailureTrap=acModuleFailureTrap, acModuleRemovalTrap=acModuleRemovalTrap, acModuleDiagResultString=acModuleDiagResultString, acModuleResetFailedTrap=acModuleResetFailedTrap, acModuleNumberPorts=acModuleNumberPorts, acModuleActiveSlot=acModuleActiveSlot, acModuleDiagTestMode=acModuleDiagTestMode, acModuleAdminStatus=acModuleAdminStatus)
