#
# PySNMP MIB module PROPLANE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PROPLANE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:33:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
lannet, = mibBuilder.importSymbols("GEN-MIB", "lannet")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibIdentifier, ModuleIdentity, Gauge32, Counter64, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Unsigned32, iso, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "ModuleIdentity", "Gauge32", "Counter64", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Unsigned32", "iso", "Bits", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class AtmAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(20, 20)
    fixedLength = 20

class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

propLane = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 34))
propLaneMgmtLEC = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 34, 1))
propLaneElan = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 34, 2))
propLaneLes = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 34, 3))
propLaneLecs = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 34, 4))
propLaneResLecs = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 34, 5))
propLaneSlot = MibIdentifier((1, 3, 6, 1, 4, 1, 81, 34, 6))
propLaneMgmtLECCurrentAddress = MibScalar((1, 3, 6, 1, 4, 1, 81, 34, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneMgmtLECCurrentAddress.setStatus('mandatory')
propLaneMgmtLECIfIndexMap = MibScalar((1, 3, 6, 1, 4, 1, 81, 34, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneMgmtLECIfIndexMap.setStatus('mandatory')
propLaneMgmtLECLecIndexMap = MibScalar((1, 3, 6, 1, 4, 1, 81, 34, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneMgmtLECLecIndexMap.setStatus('mandatory')
propLaneElanConfTable = MibTable((1, 3, 6, 1, 4, 1, 81, 34, 2, 1), )
if mibBuilder.loadTexts: propLaneElanConfTable.setStatus('mandatory')
propLaneElanConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 34, 2, 1, 1), ).setIndexNames((0, "PROPLANE-MIB", "propLaneElanConfIndex"))
if mibBuilder.loadTexts: propLaneElanConfEntry.setStatus('mandatory')
propLaneElanConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneElanConfIndex.setStatus('mandatory')
propLaneElanSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("closed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneElanSecurity.setStatus('mandatory')
propLaneElanLesDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneElanLesDiscovery.setStatus('mandatory')
propLaneElanLesRgstrType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("autosense", 1), ("single", 2), ("resilient", 3), ("distributed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneElanLesRgstrType.setStatus('mandatory')
propLaneElanLesActualRgstrType = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("single", 2), ("resilient", 3), ("distrib", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneElanLesActualRgstrType.setStatus('mandatory')
propLaneElanMaximumActiveLes = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneElanMaximumActiveLes.setStatus('mandatory')
propLaneElanLesAddrForm = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("groupAddr", 1), ("roundRobin", 2), ("longMatch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneElanLesAddrForm.setStatus('mandatory')
propLaneElanGroupLesAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 1, 1, 8), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneElanGroupLesAddress.setStatus('mandatory')
propLaneElanLuni2capability = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneElanLuni2capability.setStatus('mandatory')
propLaneElanLuni2capabilityOper = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneElanLuni2capabilityOper.setStatus('mandatory')
propLaneElanLesTable = MibTable((1, 3, 6, 1, 4, 1, 81, 34, 2, 2), )
if mibBuilder.loadTexts: propLaneElanLesTable.setStatus('mandatory')
propLaneElanLesTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 34, 2, 2, 1), ).setIndexNames((0, "PROPLANE-MIB", "propLaneElanConfIndex"), (0, "PROPLANE-MIB", "propLaneElanLesIndex"))
if mibBuilder.loadTexts: propLaneElanLesTableEntry.setStatus('mandatory')
propLaneElanLesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneElanLesIndex.setStatus('mandatory')
propLaneElanLesLecIdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneElanLesLecIdLow.setStatus('mandatory')
propLaneElanLesLecIdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneElanLesLecIdHigh.setStatus('mandatory')
propLaneLesConfTable = MibTable((1, 3, 6, 1, 4, 1, 81, 34, 3, 1), )
if mibBuilder.loadTexts: propLaneLesConfTable.setStatus('mandatory')
propLaneLesConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 34, 3, 1, 1), ).setIndexNames((0, "PROPLANE-MIB", "propLaneLesConfIndex"))
if mibBuilder.loadTexts: propLaneLesConfEntry.setStatus('mandatory')
propLaneLesConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLesConfIndex.setStatus('mandatory')
propLaneLesMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("manual", 1), ("single", 2), ("resilient", 3), ("distrib", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneLesMode.setStatus('mandatory')
propLaneLesActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("not-registered", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLesActiveStatus.setStatus('mandatory')
propLaneLesLecIdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLesLecIdLow.setStatus('mandatory')
propLaneLesLecIdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLesLecIdHigh.setStatus('mandatory')
propLaneLesBusUnicastFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneLesBusUnicastFilter.setStatus('mandatory')
propLaneLesLuni2capability = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneLesLuni2capability.setStatus('mandatory')
propLaneLesLecTable = MibTable((1, 3, 6, 1, 4, 1, 81, 34, 3, 2), )
if mibBuilder.loadTexts: propLaneLesLecTable.setStatus('mandatory')
propLaneLesLecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 34, 3, 2, 1), ).setIndexNames((0, "PROPLANE-MIB", "propLaneLesConfIndex"), (0, "PROPLANE-MIB", "propLaneLesLecIndex"))
if mibBuilder.loadTexts: propLaneLesLecEntry.setStatus('mandatory')
propLaneLesLecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLesLecIndex.setStatus('mandatory')
propLaneLesLecLuni2granted = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLesLecLuni2granted.setStatus('mandatory')
propLaneLesLecSelectiveMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLesLecSelectiveMulticast.setStatus('mandatory')
propLaneLecsTable = MibTable((1, 3, 6, 1, 4, 1, 81, 34, 4, 1), )
if mibBuilder.loadTexts: propLaneLecsTable.setStatus('mandatory')
propLaneLecsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 34, 4, 1, 1), ).setIndexNames((0, "PROPLANE-MIB", "propLaneLecsSlotIndex"))
if mibBuilder.loadTexts: propLaneLecsEntry.setStatus('mandatory')
propLaneLecsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLecsSlotIndex.setStatus('mandatory')
propLaneLecsLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("local-wka", 1), ("local-selector", 2), ("remote-wka", 3), ("remote-atm-addr", 4), ("remote-res-lecs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneLecsLocation.setStatus('mandatory')
propLaneLecsRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 4, 1, 1, 3), AtmAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneLecsRemoteAddress.setStatus('mandatory')
propLaneLecsLocalSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneLecsLocalSelector.setStatus('mandatory')
propLaneLecsDefTRElan = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneLecsDefTRElan.setStatus('mandatory')
propLaneLecsDefEthElan = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneLecsDefEthElan.setStatus('mandatory')
propLaneLecsDefUnspecElan = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneLecsDefUnspecElan.setStatus('mandatory')
propLaneLecsResilientNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("discovering", 1), ("forming", 2), ("synchronising", 3), ("running", 4), ("not-resilient", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLecsResilientNetStatus.setStatus('mandatory')
propLaneLecsResilientMode = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneLecsResilientMode.setStatus('mandatory')
propLaneLecsResilientStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("not-resilient", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLecsResilientStatus.setStatus('mandatory')
propLaneLecsResilientPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propLaneLecsResilientPriority.setStatus('mandatory')
propLaneLecsResTable = MibTable((1, 3, 6, 1, 4, 1, 81, 34, 5, 1), )
if mibBuilder.loadTexts: propLaneLecsResTable.setStatus('mandatory')
propLaneLecsResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 34, 5, 1, 1), ).setIndexNames((0, "PROPLANE-MIB", "propLaneLecsSlotIndex"), (0, "PROPLANE-MIB", "propLaneLecsResIndex"))
if mibBuilder.loadTexts: propLaneLecsResEntry.setStatus('mandatory')
propLaneLecsResIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLecsResIndex.setStatus('mandatory')
propLaneLecsResAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 5, 1, 1, 2), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLecsResAddress.setStatus('mandatory')
propLaneLecsResPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLecsResPriority.setStatus('mandatory')
propLaneLecsResStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("timing-out", 3), ("not-found", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLecsResStatus.setStatus('mandatory')
propLaneLecsResOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("manual", 1), ("pvc-svc", 2), ("pvc", 3), ("local", 4), ("snmp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLecsResOrigin.setStatus('mandatory')
propLaneLecsResRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("delete", 1), ("undercreation", 2), ("valid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLecsResRowStatus.setStatus('mandatory')
propLaneLecsResActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 5, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLecsResActiveTime.setStatus('mandatory')
propLaneLecsResAddrForm = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wka", 1), ("selector", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLecsResAddrForm.setStatus('mandatory')
propLaneLecsResSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneLecsResSelector.setStatus('mandatory')
propLaneSlotTable = MibTable((1, 3, 6, 1, 4, 1, 81, 34, 6, 1), )
if mibBuilder.loadTexts: propLaneSlotTable.setStatus('mandatory')
propLaneSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 81, 34, 6, 1, 1), ).setIndexNames((0, "PROPLANE-MIB", "propLaneSlotIndex"))
if mibBuilder.loadTexts: propLaneSlotEntry.setStatus('mandatory')
propLaneSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneSlotIndex.setStatus('mandatory')
propLaneSlotElanConfNextId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneSlotElanConfNextId.setStatus('mandatory')
propLaneSlotLecsConfNextId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneSlotLecsConfNextId.setStatus('mandatory')
propLaneSlotLesConfNextId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneSlotLesConfNextId.setStatus('mandatory')
propLaneSlotBusConfNextId = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneSlotBusConfNextId.setStatus('mandatory')
propLaneSlotNextLesSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneSlotNextLesSelector.setStatus('mandatory')
propLaneSlotNextBusSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneSlotNextBusSelector.setStatus('mandatory')
propLaneSlotNextLecsSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 81, 34, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: propLaneSlotNextLecsSelector.setStatus('mandatory')
mibBuilder.exportSymbols("PROPLANE-MIB", propLaneLecsLocation=propLaneLecsLocation, propLaneLecsDefUnspecElan=propLaneLecsDefUnspecElan, propLaneElanLesLecIdLow=propLaneElanLesLecIdLow, propLaneLesLuni2capability=propLaneLesLuni2capability, propLaneLecsSlotIndex=propLaneLecsSlotIndex, propLaneSlotNextBusSelector=propLaneSlotNextBusSelector, propLaneElanLesRgstrType=propLaneElanLesRgstrType, propLaneLecsResilientNetStatus=propLaneLecsResilientNetStatus, propLaneLecsResilientStatus=propLaneLecsResilientStatus, propLaneElanLuni2capability=propLaneElanLuni2capability, propLaneSlot=propLaneSlot, propLaneLecsResSelector=propLaneLecsResSelector, propLaneLecsDefTRElan=propLaneLecsDefTRElan, propLaneMgmtLECIfIndexMap=propLaneMgmtLECIfIndexMap, propLaneElanLesLecIdHigh=propLaneElanLesLecIdHigh, propLaneSlotNextLecsSelector=propLaneSlotNextLecsSelector, propLaneLesActiveStatus=propLaneLesActiveStatus, propLaneLesLecIdLow=propLaneLesLecIdLow, propLaneLesConfEntry=propLaneLesConfEntry, propLaneElanConfEntry=propLaneElanConfEntry, propLaneElanLesIndex=propLaneElanLesIndex, propLaneElanLuni2capabilityOper=propLaneElanLuni2capabilityOper, propLaneLecsRemoteAddress=propLaneLecsRemoteAddress, propLaneElanGroupLesAddress=propLaneElanGroupLesAddress, AtmAddress=AtmAddress, propLaneLecsDefEthElan=propLaneLecsDefEthElan, propLaneLesMode=propLaneLesMode, propLaneElanLesDiscovery=propLaneElanLesDiscovery, propLaneLecsResStatus=propLaneLecsResStatus, propLaneLecsResIndex=propLaneLecsResIndex, propLaneElanLesAddrForm=propLaneElanLesAddrForm, propLaneElanConfIndex=propLaneElanConfIndex, propLaneLesLecTable=propLaneLesLecTable, propLaneLes=propLaneLes, propLaneLecsResAddress=propLaneLecsResAddress, propLaneElanLesTable=propLaneElanLesTable, propLaneSlotLesConfNextId=propLaneSlotLesConfNextId, propLaneSlotIndex=propLaneSlotIndex, MacAddress=MacAddress, propLaneLesConfTable=propLaneLesConfTable, propLaneLesLecIndex=propLaneLesLecIndex, propLaneSlotNextLesSelector=propLaneSlotNextLesSelector, propLaneLecsResActiveTime=propLaneLecsResActiveTime, propLaneLesLecLuni2granted=propLaneLesLecLuni2granted, propLaneSlotEntry=propLaneSlotEntry, propLaneElan=propLaneElan, propLaneLecsResPriority=propLaneLecsResPriority, propLaneLesLecEntry=propLaneLesLecEntry, propLaneLecsLocalSelector=propLaneLecsLocalSelector, propLaneMgmtLECLecIndexMap=propLaneMgmtLECLecIndexMap, propLaneSlotLecsConfNextId=propLaneSlotLecsConfNextId, propLane=propLane, propLaneLecsResilientMode=propLaneLecsResilientMode, propLaneSlotElanConfNextId=propLaneSlotElanConfNextId, propLaneElanLesTableEntry=propLaneElanLesTableEntry, propLaneElanSecurity=propLaneElanSecurity, propLaneMgmtLECCurrentAddress=propLaneMgmtLECCurrentAddress, propLaneLecs=propLaneLecs, propLaneLecsResOrigin=propLaneLecsResOrigin, propLaneLecsResEntry=propLaneLecsResEntry, propLaneSlotTable=propLaneSlotTable, propLaneElanMaximumActiveLes=propLaneElanMaximumActiveLes, propLaneLesConfIndex=propLaneLesConfIndex, propLaneLecsResilientPriority=propLaneLecsResilientPriority, propLaneMgmtLEC=propLaneMgmtLEC, propLaneElanLesActualRgstrType=propLaneElanLesActualRgstrType, propLaneElanConfTable=propLaneElanConfTable, propLaneLesLecSelectiveMulticast=propLaneLesLecSelectiveMulticast, propLaneLecsEntry=propLaneLecsEntry, propLaneLecsResRowStatus=propLaneLecsResRowStatus, propLaneLesBusUnicastFilter=propLaneLesBusUnicastFilter, propLaneLecsResTable=propLaneLecsResTable, propLaneResLecs=propLaneResLecs, propLaneLesLecIdHigh=propLaneLesLecIdHigh, propLaneLecsResAddrForm=propLaneLecsResAddrForm, propLaneLecsTable=propLaneLecsTable, propLaneSlotBusConfNextId=propLaneSlotBusConfNextId)
