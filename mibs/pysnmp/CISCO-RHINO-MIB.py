#
# PySNMP MIB module CISCO-RHINO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-RHINO-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:54:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
workgroup, = mibBuilder.importSymbols("CISCO-SMI", "workgroup")
Unsigned32, = mibBuilder.importSymbols("CISCO-TC", "Unsigned32")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, Unsigned32, IpAddress, MibIdentifier, Bits, Integer32, NotificationType, iso, ModuleIdentity, Counter32, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "Unsigned32", "IpAddress", "MibIdentifier", "Bits", "Integer32", "NotificationType", "iso", "ModuleIdentity", "Counter32", "Counter64", "TimeTicks")
TruthValue, DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TimeStamp", "TextualConvention")
ciscoLS1010ChassisMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 5, 11))
ciscoLS1010ChassisMIB.setRevisions(('2001-03-29 00:00', '2001-02-15 00:00', '2000-07-20 00:00', '2000-04-11 00:00', '2000-02-07 00:00', '1999-11-30 00:00', '1999-10-04 00:00', '1999-06-29 00:00', '1999-06-17 00:00', '1999-03-12 00:00', '1998-12-02 00:00', '1998-10-26 00:00', '1998-07-13 00:00', '1997-11-20 00:00', '1997-07-22 00:00', '1997-02-04 00:00', '1996-10-02 00:00', '1995-10-02 00:00',))
if mibBuilder.loadTexts: ciscoLS1010ChassisMIB.setLastUpdated('200103290000Z')
if mibBuilder.loadTexts: ciscoLS1010ChassisMIB.setOrganization('Cisco Systems, Inc.')
ciscoLS1010ChassisMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1))
ciscoLS1010ChassisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1))
ciscoLS1010ModuleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2))
ciscoLS1010SubModuleGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3))
ciscoLS1010PortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4))
ciscoLS1010CpuSwitchGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5))
clsEnetPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6))
clsPortLedGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7))
class PsType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("powerone", 0), ("astec", 1), ("minus48VDC", 2), ("empty", 3), ("ac1100W", 4), ("ac1200W", 5), ("dc1200W", 6), ("pem", 7), ("ac1360W", 8), ("dc1360W", 9), ("ac2000W", 10), ("dc2000W", 11), ("acpem", 12), ("ac175W", 13))

class OperStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 1), ("ok", 2), ("fault", 3), ("fanAlarm", 4), ("partialFault", 5), ("empty", 6))

class AdminStatus(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enable", 1), ("disable", 2), ("reset", 3))

class Led(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("off", 1), ("green", 2), ("red", 3), ("yellow", 4), ("blinkgreen", 5), ("blinkyellow", 6), ("blinkred", 7), ("unknown", 8))

class PcmciaType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("unknown", 1), ("empty", 2), ("flash", 3), ("disk", 4))

ciscoLS1010ChassisSysType = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("ls1010", 2), ("c8510", 3), ("cisco6400", 4), ("c8540", 5), ("tgx8750", 6), ("wsx6302", 7), ("c2948g", 8), ("c4908g", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisSysType.setStatus('current')
ciscoLS1010ChassisBkplType = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("atm", 2), ("c5500", 3), ("cisco6400", 4), ("c8510", 5), ("c8540", 6), ("tgx8750", 7), ("cat6000", 8), ("c2948g", 9), ("c4908g", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisBkplType.setStatus('current')
ciscoLS1010ChassisPs0Type = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 3), PsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs0Type.setStatus('current')
ciscoLS1010ChassisPs0AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 4), AdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs0AdminStatus.setStatus('current')
ciscoLS1010ChassisPs0Status = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs0Status.setStatus('current')
ciscoLS1010ChassisPs0Led = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 6), Led()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs0Led.setStatus('current')
ciscoLS1010ChassisPs1Type = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 7), PsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs1Type.setStatus('current')
ciscoLS1010ChassisPs1AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 8), AdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs1AdminStatus.setStatus('current')
ciscoLS1010ChassisPs1Status = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 9), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs1Status.setStatus('current')
ciscoLS1010ChassisPs1Led = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 10), Led()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPs1Led.setStatus('current')
ciscoLS1010ChassisFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 11), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisFanStatus.setStatus('current')
ciscoLS1010ChassisFanLed = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 12), Led()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisFanLed.setStatus('current')
ciscoLS1010ChassisCardStatusLed = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 13), Led()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisCardStatusLed.setStatus('current')
ciscoLS1010ChassisEnetLinkLed = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 14), Led()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisEnetLinkLed.setStatus('current')
ciscoLS1010Chassis12VoltStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("outOfTolerance", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010Chassis12VoltStatus.setStatus('current')
ciscoLS1010ChassisTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("overTemperature", 2), ("minorWarning", 3), ("majorWarning", 4), ("criticalWarning", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisTempStatus.setStatus('current')
ciscoLS1010ChassisPcmciaSlot0Type = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 17), PcmciaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPcmciaSlot0Type.setStatus('current')
ciscoLS1010ChassisPcmciaSlot1Type = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 18), PcmciaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisPcmciaSlot1Type.setStatus('current')
ciscoLS1010ChassisNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisNumSlots.setStatus('current')
ciscoLS1010ChassisLastChange = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 20), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisLastChange.setStatus('current')
ciscoLS1010ChassisFailureAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nothing", 1), ("sendTrap", 2), ("shutdown", 3), ("sendTrapAndShutdown", 4))).clone('sendTrapAndShutdown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010ChassisFailureAction.setStatus('current')
ciscoLS1010ChassisChangeAction = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nothing", 1), ("sendTrap", 2))).clone('sendTrap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010ChassisChangeAction.setStatus('current')
ciscoLS1010ChassisClockingMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("nonRevertive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010ChassisClockingMode.setStatus('current')
ciscols1010SystemClockSourceStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSelected", 1), ("selected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscols1010SystemClockSourceStatus.setStatus('current')
ciscols1010SystemClockSourcePriority = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("priority1", 1), ("priority2", 2), ("priority3", 3), ("priority4", 4), ("priority5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscols1010SystemClockSourcePriority.setStatus('current')
ciscoLS1010ChassisInletTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("overTemperature", 2), ("minorWarning", 3), ("majorWarning", 4), ("criticalWarning", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ChassisInletTempStatus.setStatus('current')
ciscoLS1010ModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1), )
if mibBuilder.loadTexts: ciscoLS1010ModuleTable.setStatus('current')
ciscoLS1010ModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-RHINO-MIB", "ciscoLS1010ModuleIndex"))
if mibBuilder.loadTexts: ciscoLS1010ModuleEntry.setStatus('current')
ciscoLS1010ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: ciscoLS1010ModuleIndex.setStatus('current')
ciscoLS1010ModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("carrier", 2), ("cpuSwitchAndFeature", 3), ("cpuSwitchAndFeaturePFQ", 4), ("superCarrier", 5), ("cpuRoute", 6), ("switch10GAndFC", 7), ("switch10GNoFC", 8), ("atmFabricIntegration", 9), ("dualSlot", 10), ("cmpmCarrier", 11), ("tsCarrier", 12), ("nodeSwitchProcessor2ndGeneration", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleType.setStatus('current')
ciscoLS1010ModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleSerialNumber.setStatus('deprecated')
ciscoLS1010ModuleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleHwVersion.setStatus('current')
ciscoLS1010ModuleSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleSwVersion.setStatus('current')
ciscoLS1010ModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleDescr.setStatus('current')
ciscoLS1010ModuleNumSubModules = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleNumSubModules.setStatus('current')
ciscoLS1010ModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 8), AdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010ModuleAdminStatus.setStatus('current')
ciscoLS1010ModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 9), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleOperStatus.setStatus('current')
ciscoLS1010ModuleHwVersionMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleHwVersionMinor.setStatus('current')
ciscoLS1010ModuleSerialNumberString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010ModuleSerialNumberString.setStatus('current')
ciscoLS1010SubModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1), )
if mibBuilder.loadTexts: ciscoLS1010SubModuleTable.setStatus('current')
ciscoLS1010SubModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-RHINO-MIB", "ciscoLS1010ModuleIndex"), (0, "CISCO-RHINO-MIB", "ciscoLS1010SubModuleIndex"))
if mibBuilder.loadTexts: ciscoLS1010SubModuleEntry.setStatus('current')
ciscoLS1010SubModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: ciscoLS1010SubModuleIndex.setStatus('current')
ciscoLS1010SubModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98))).clone(namedValues=NamedValues(("other", 1), ("oc3Utp5", 2), ("oc3SingleModeFiber", 3), ("oc3MultiModeFiber", 4), ("oc12SingleModeFiber", 5), ("oc12MultiModeFiber", 6), ("ds3", 7), ("e3", 8), ("cpuSwitch", 9), ("featureFpga", 10), ("featureAsic", 11), ("t1", 12), ("e1", 13), ("e1bnc", 14), ("oc3Mixed", 15), ("cbrt1", 16), ("cbr120e1", 17), ("cbr75e1", 18), ("quadDs3", 19), ("quadE3", 20), ("dualDs3", 21), ("dualE3", 22), ("oc12Mixed", 23), ("atm25", 24), ("featurePVC", 25), ("routerProcessorAlpha", 26), ("dualOC3SingleModeIRFiber", 27), ("dualOC3MultiModeIRFiber", 28), ("routerProcessorBeta", 29), ("fratm1CT3", 30), ("fratm4CE1", 31), ("oc3SingleModeLRFiber", 35), ("oc12SingleModeLRFiber", 36), ("sixPortDS3", 37), ("feUTP8p16k", 40), ("feUTP8p64k", 41), ("feMMF8p16k", 42), ("feMMF8p64k", 43), ("feUTP16p16k", 44), ("feUTP16p64k", 45), ("feMMF16p16k", 46), ("feMMF16p64k", 47), ("geF1p16k", 48), ("geF1p64k", 49), ("geF2p16k", 50), ("geF2p64k", 51), ("feBridge4p", 52), ("feUTP8p16kFullDup", 53), ("feUTP8p64kFullDup", 54), ("routeProc", 55), ("switch10GProc", 56), ("featureNetClock", 57), ("featureABR", 58), ("geF8p64k", 59), ("featureLite", 60), ("s16pOC3MM", 61), ("s16pOC3SM", 62), ("s4pOC12MM", 63), ("s4pOC12SM", 64), ("atmIma8pT1", 65), ("atmIma8pE1", 66), ("atm25m4p", 67), ("s1pOC48cSM", 68), ("s1pOC48cSMLR", 69), ("atmFIMBridge", 70), ("atmFIMoc12MM", 71), ("arm1p64k", 80), ("arm2p64k", 81), ("xpif1pGE16k", 82), ("xpif1pGE64k", 83), ("xpif1pGE256k", 84), ("xpifAtm1pOC12SMIR64k", 85), ("xpifAtm1pOC12SMIR256k", 86), ("xpifAtm1pOC12MM64k", 87), ("xpifAtm1pOC12MM256k", 88), ("xpifAtm1pOC3SMIR64k", 89), ("xpifAtm1pOC3SMIR256k", 90), ("xpifAtm1pOC3MM64k", 91), ("xpifAtm1pOC3MM256k", 92), ("xpifPos1pOC12SMIR64k", 93), ("xpifPos1pOC12SMIR256k", 94), ("xpifPos1pOC12SMLR64k", 95), ("xpifPos1pOC12SMLR256k", 96), ("xpifArm2p256k", 97), ("aclDaughter", 98)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleType.setStatus('current')
ciscoLS1010SubModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleSerialNumber.setStatus('deprecated')
ciscoLS1010SubModuleHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleHwVersion.setStatus('current')
ciscoLS1010SubModuleSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleSwVersion.setStatus('current')
ciscoLS1010SubModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleDescr.setStatus('current')
ciscoLS1010SubModuleNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleNumPorts.setStatus('current')
ciscoLS1010SubModuleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoLS1010SubModuleAdminStatus.setStatus('current')
ciscoLS1010SubModuleHwVersionMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleHwVersionMinor.setStatus('current')
ciscoLS1010SubModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 10), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleOperStatus.setStatus('current')
ciscoLS1010SubModuleSerialNumberString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 3, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010SubModuleSerialNumberString.setStatus('current')
ciscoLS1010PortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4, 1), )
if mibBuilder.loadTexts: ciscoLS1010PortTable.setStatus('current')
ciscoLS1010PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-RHINO-MIB", "ciscoLS1010ModuleIndex"), (0, "CISCO-RHINO-MIB", "ciscoLS1010SubModuleIndex"), (0, "CISCO-RHINO-MIB", "ciscoLS1010PortIndex"))
if mibBuilder.loadTexts: ciscoLS1010PortEntry.setStatus('current')
ciscoLS1010PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: ciscoLS1010PortIndex.setStatus('current')
ciscoLS1010PortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 4, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoLS1010PortIfIndex.setStatus('current')
clsEnetPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1), )
if mibBuilder.loadTexts: clsEnetPortTable.setStatus('current')
clsEnetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: clsEnetPortEntry.setStatus('current')
clsEnetPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("auto", 2), ("half", 3), ("full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsEnetPortDuplex.setStatus('current')
clsEnetPortAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("auto", 2), ("e10Mbps", 3), ("e100Mbps", 4), ("e1000Mbps", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsEnetPortAdminSpeed.setStatus('current')
clsEnetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("e100BaseTX", 2), ("e100BaseFX", 3), ("e1000BaseLX", 4), ("e1000BaseSX", 5), ("empty", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsEnetPortType.setStatus('current')
clsEnetPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("autoNegotiate", 2), ("forceUp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsEnetPortLinkStatus.setStatus('current')
clsPortLedTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1), )
if mibBuilder.loadTexts: clsPortLedTable.setStatus('current')
clsPortLedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-RHINO-MIB", "clsPortLedIndex"))
if mibBuilder.loadTexts: clsPortLedEntry.setStatus('current')
clsPortLedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: clsPortLedIndex.setStatus('current')
clsPortLedType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ledTx", 1), ("ledRx", 2), ("ledLink", 3), ("led100Mbps", 4), ("ledRxLoss", 5), ("ledRxFullOut", 6), ("ledRxSync", 7), ("ledFullDuplex", 8), ("ledOptDetect", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsPortLedType.setStatus('current')
clsPortLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsPortLedStatus.setStatus('current')
ciscoAtmCpuAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmCpuAdminStatus.setStatus('current')
ciscoAtmSwitchTotalBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSwitchTotalBuffer.setStatus('current')
ciscoAtmSwitchFreeBuffer = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSwitchFreeBuffer.setStatus('current')
ciscoAtmSwitchDiscardCells = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSwitchDiscardCells.setStatus('current')
ciscoAtmSwitchInvalidCells = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCells.setStatus('current')
ciscoAtmSwitchInvalidCellHeaderTable = MibTable((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 6), )
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCellHeaderTable.setStatus('current')
ciscoAtmSwitchInvalidCellHeaderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 6, 1), ).setIndexNames((0, "CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCellHeaderIndex"))
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCellHeaderEntry.setStatus('current')
ciscoAtmSwitchInvalidCellHeaderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCellHeaderIndex.setStatus('current')
ciscoAtmSwitchInvalidCellHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoAtmSwitchInvalidCellHeader.setStatus('current')
ciscoAtmCpuTerminateOamFlow = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmCpuTerminateOamFlow.setStatus('obsolete')
ciscoAtmInterceptEndToEndOamFlow = MibScalar((1, 3, 6, 1, 4, 1, 9, 5, 11, 1, 5, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoAtmInterceptEndToEndOamFlow.setStatus('current')
ciscoLS1010ChassisMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 2))
ciscoLS1010ChassisMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 2, 0))
ciscoLS1010ChassisFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 11, 2, 0, 1)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010Chassis12VoltStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisTempStatus"))
if mibBuilder.loadTexts: ciscoLS1010ChassisFailureNotification.setStatus('current')
ciscoLS1010ChassisChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 5, 11, 2, 0, 2))
if mibBuilder.loadTexts: ciscoLS1010ChassisChangeNotification.setStatus('current')
ciscoLS1010ChassisMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 3))
ciscoLS1010ChassisMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1))
ciscoLS1010ChassisMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2))
ciscoLS1010ChassisMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 1)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBCompliance = ciscoLS1010ChassisMIBCompliance.setStatus('obsolete')
ciscoLS1010ChassisMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 2)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBRev1Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBComplianceRev1 = ciscoLS1010ChassisMIBComplianceRev1.setStatus('obsolete')
ciscoLS1010ChassisMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 3)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBRev1Group"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBClockingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBComplianceRev2 = ciscoLS1010ChassisMIBComplianceRev2.setStatus('obsolete')
ciscoLS1010ChassisMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 4)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup1"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBClockingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBComplianceRev3 = ciscoLS1010ChassisMIBComplianceRev3.setStatus('obsolete')
ciscoLS1010ChassisMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 5)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup1"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBClockingGroup"), ("CISCO-RHINO-MIB", "clsEnetPortGroup1"), ("CISCO-RHINO-MIB", "clsPortLedGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBComplianceRev4 = ciscoLS1010ChassisMIBComplianceRev4.setStatus('obsolete')
ciscoLS1010ChassisMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 6)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup1"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBClockingGroup"), ("CISCO-RHINO-MIB", "clsOperStatusGroup"), ("CISCO-RHINO-MIB", "clsInletTempGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBComplianceRev5 = ciscoLS1010ChassisMIBComplianceRev5.setStatus('obsolete')
ciscoLS1010ChassisMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 1, 7)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBGroup2"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisMIBClockingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBComplianceRev6 = ciscoLS1010ChassisMIBComplianceRev6.setStatus('current')
ciscoLS1010ChassisMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 1)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisSysType"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisBkplType"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0AdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Led"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1AdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Led"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanLed"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisCardStatusLed"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisEnetLinkLed"), ("CISCO-RHINO-MIB", "ciscoLS1010Chassis12VoltStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisTempStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPcmciaSlot0Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPcmciaSlot1Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisNumSlots"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisLastChange"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFailureAction"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisChangeAction"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisInletTempStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleType"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleSerialNumber"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleHwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleSwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleDescr"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleNumSubModules"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleAdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleOperStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleType"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSerialNumber"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleHwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleDescr"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleNumPorts"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleAdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010PortIfIndex"), ("CISCO-RHINO-MIB", "ciscoAtmCpuAdminStatus"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchTotalBuffer"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchFreeBuffer"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchDiscardCells"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCells"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCellHeader"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBGroup = ciscoLS1010ChassisMIBGroup.setStatus('obsolete')
ciscoLS1010ChassisMIBObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 2)).setObjects(("CISCO-RHINO-MIB", "ciscoAtmCpuTerminateOamFlow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBObsoleteGroup = ciscoLS1010ChassisMIBObsoleteGroup.setStatus('obsolete')
ciscoLS1010ChassisMIBRev1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 3)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010SubModuleHwVersionMinor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBRev1Group = ciscoLS1010ChassisMIBRev1Group.setStatus('current')
ciscoLS1010ChassisMIBClockingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 4)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisClockingMode"), ("CISCO-RHINO-MIB", "ciscols1010SystemClockSourceStatus"), ("CISCO-RHINO-MIB", "ciscols1010SystemClockSourcePriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBClockingGroup = ciscoLS1010ChassisMIBClockingGroup.setStatus('current')
ciscoLS1010ChassisMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 5)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisSysType"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisBkplType"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0AdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Led"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1AdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Led"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanLed"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisCardStatusLed"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisEnetLinkLed"), ("CISCO-RHINO-MIB", "ciscoLS1010Chassis12VoltStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisTempStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPcmciaSlot0Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPcmciaSlot1Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisNumSlots"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisLastChange"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFailureAction"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisChangeAction"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleType"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleSerialNumber"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleHwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleSwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleDescr"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleNumSubModules"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleAdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleType"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSerialNumber"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleHwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleDescr"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleNumPorts"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleAdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleOperStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleHwVersionMinor"), ("CISCO-RHINO-MIB", "ciscoLS1010PortIfIndex"), ("CISCO-RHINO-MIB", "ciscoAtmCpuAdminStatus"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchTotalBuffer"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchFreeBuffer"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchDiscardCells"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCells"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCellHeader"), ("CISCO-RHINO-MIB", "ciscoAtmInterceptEndToEndOamFlow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBGroup1 = ciscoLS1010ChassisMIBGroup1.setStatus('obsolete')
clsEnetPortGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 6)).setObjects(("CISCO-RHINO-MIB", "clsEnetPortDuplex"), ("CISCO-RHINO-MIB", "clsEnetPortAdminSpeed"), ("CISCO-RHINO-MIB", "clsEnetPortType"), ("CISCO-RHINO-MIB", "clsEnetPortLinkStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clsEnetPortGroup1 = clsEnetPortGroup1.setStatus('current')
clsPortLedGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 7)).setObjects(("CISCO-RHINO-MIB", "clsPortLedType"), ("CISCO-RHINO-MIB", "clsPortLedStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clsPortLedGroup1 = clsPortLedGroup1.setStatus('current')
clsOperStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 8)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ModuleOperStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clsOperStatusGroup = clsOperStatusGroup.setStatus('current')
clsInletTempGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 9)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisInletTempStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clsInletTempGroup = clsInletTempGroup.setStatus('current')
ciscoLS1010ChassisMIBGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 10)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisSysType"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisBkplType"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0AdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs0Led"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1AdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Status"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPs1Led"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFanLed"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisCardStatusLed"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisEnetLinkLed"), ("CISCO-RHINO-MIB", "ciscoLS1010Chassis12VoltStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisTempStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPcmciaSlot0Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisPcmciaSlot1Type"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisNumSlots"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisLastChange"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisFailureAction"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisChangeAction"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleType"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleHwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleSwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleDescr"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleNumSubModules"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleAdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleType"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleHwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSwVersion"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleDescr"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleNumPorts"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleAdminStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleOperStatus"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleHwVersionMinor"), ("CISCO-RHINO-MIB", "ciscoLS1010PortIfIndex"), ("CISCO-RHINO-MIB", "ciscoAtmCpuAdminStatus"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchTotalBuffer"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchFreeBuffer"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchDiscardCells"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCells"), ("CISCO-RHINO-MIB", "ciscoAtmSwitchInvalidCellHeader"), ("CISCO-RHINO-MIB", "ciscoAtmInterceptEndToEndOamFlow"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleHwVersionMinor"), ("CISCO-RHINO-MIB", "ciscoLS1010ModuleSerialNumberString"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSerialNumberString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBGroup2 = ciscoLS1010ChassisMIBGroup2.setStatus('current')
ciscoLS1010ChassisMIBDeprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 11)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ModuleSerialNumber"), ("CISCO-RHINO-MIB", "ciscoLS1010SubModuleSerialNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBDeprecatedGroup = ciscoLS1010ChassisMIBDeprecatedGroup.setStatus('deprecated')
ciscoLS1010ChassisMIBNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 5, 11, 3, 2, 12)).setObjects(("CISCO-RHINO-MIB", "ciscoLS1010ChassisFailureNotification"), ("CISCO-RHINO-MIB", "ciscoLS1010ChassisChangeNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLS1010ChassisMIBNotificationGroup = ciscoLS1010ChassisMIBNotificationGroup.setStatus('current')
mibBuilder.exportSymbols("CISCO-RHINO-MIB", ciscoLS1010ModuleGroup=ciscoLS1010ModuleGroup, ciscoAtmSwitchInvalidCellHeaderEntry=ciscoAtmSwitchInvalidCellHeaderEntry, ciscoLS1010ChassisMIBNotificationPrefix=ciscoLS1010ChassisMIBNotificationPrefix, ciscoLS1010ModuleNumSubModules=ciscoLS1010ModuleNumSubModules, ciscoAtmSwitchDiscardCells=ciscoAtmSwitchDiscardCells, clsOperStatusGroup=clsOperStatusGroup, ciscoLS1010ChassisChangeAction=ciscoLS1010ChassisChangeAction, ciscoLS1010ChassisLastChange=ciscoLS1010ChassisLastChange, ciscoLS1010SubModuleType=ciscoLS1010SubModuleType, ciscoAtmSwitchFreeBuffer=ciscoAtmSwitchFreeBuffer, ciscoLS1010ChassisMIBComplianceRev3=ciscoLS1010ChassisMIBComplianceRev3, ciscoLS1010SubModuleDescr=ciscoLS1010SubModuleDescr, ciscoLS1010ModuleSerialNumber=ciscoLS1010ModuleSerialNumber, clsEnetPortEntry=clsEnetPortEntry, ciscoLS1010SubModuleTable=ciscoLS1010SubModuleTable, ciscoLS1010ChassisBkplType=ciscoLS1010ChassisBkplType, ciscoLS1010ChassisMIBObjects=ciscoLS1010ChassisMIBObjects, ciscoLS1010ChassisFanStatus=ciscoLS1010ChassisFanStatus, ciscoLS1010PortIfIndex=ciscoLS1010PortIfIndex, ciscoLS1010ChassisPs1Type=ciscoLS1010ChassisPs1Type, clsEnetPortGroup=clsEnetPortGroup, ciscoLS1010ModuleDescr=ciscoLS1010ModuleDescr, ciscoLS1010ChassisMIBGroup2=ciscoLS1010ChassisMIBGroup2, clsPortLedType=clsPortLedType, PcmciaType=PcmciaType, ciscoLS1010SubModuleHwVersion=ciscoLS1010SubModuleHwVersion, ciscoLS1010SubModuleSerialNumberString=ciscoLS1010SubModuleSerialNumberString, ciscoLS1010SubModuleAdminStatus=ciscoLS1010SubModuleAdminStatus, ciscoLS1010SubModuleEntry=ciscoLS1010SubModuleEntry, ciscoLS1010SubModuleSwVersion=ciscoLS1010SubModuleSwVersion, ciscoLS1010ChassisTempStatus=ciscoLS1010ChassisTempStatus, ciscoAtmCpuAdminStatus=ciscoAtmCpuAdminStatus, ciscoLS1010ChassisMIBCompliances=ciscoLS1010ChassisMIBCompliances, ciscoLS1010ChassisMIBGroup1=ciscoLS1010ChassisMIBGroup1, clsEnetPortAdminSpeed=clsEnetPortAdminSpeed, ciscoLS1010ModuleTable=ciscoLS1010ModuleTable, ciscoLS1010ModuleIndex=ciscoLS1010ModuleIndex, Led=Led, ciscoAtmSwitchInvalidCellHeaderIndex=ciscoAtmSwitchInvalidCellHeaderIndex, clsPortLedIndex=clsPortLedIndex, ciscoLS1010SubModuleSerialNumber=ciscoLS1010SubModuleSerialNumber, ciscoLS1010ChassisPs0Status=ciscoLS1010ChassisPs0Status, ciscoLS1010SubModuleOperStatus=ciscoLS1010SubModuleOperStatus, ciscoLS1010ModuleHwVersionMinor=ciscoLS1010ModuleHwVersionMinor, clsEnetPortLinkStatus=clsEnetPortLinkStatus, ciscoLS1010ChassisMIBComplianceRev6=ciscoLS1010ChassisMIBComplianceRev6, ciscoLS1010ChassisGroup=ciscoLS1010ChassisGroup, clsEnetPortType=clsEnetPortType, ciscoLS1010ChassisNumSlots=ciscoLS1010ChassisNumSlots, ciscoLS1010ModuleSwVersion=ciscoLS1010ModuleSwVersion, ciscoAtmSwitchInvalidCellHeaderTable=ciscoAtmSwitchInvalidCellHeaderTable, ciscoLS1010ModuleHwVersion=ciscoLS1010ModuleHwVersion, ciscols1010SystemClockSourcePriority=ciscols1010SystemClockSourcePriority, clsEnetPortGroup1=clsEnetPortGroup1, ciscoLS1010ChassisPs0Type=ciscoLS1010ChassisPs0Type, ciscoLS1010ChassisMIBNotifications=ciscoLS1010ChassisMIBNotifications, OperStatus=OperStatus, ciscoLS1010CpuSwitchGroup=ciscoLS1010CpuSwitchGroup, ciscoLS1010PortGroup=ciscoLS1010PortGroup, ciscoAtmSwitchTotalBuffer=ciscoAtmSwitchTotalBuffer, clsEnetPortTable=clsEnetPortTable, ciscoLS1010SubModuleNumPorts=ciscoLS1010SubModuleNumPorts, ciscoLS1010ChassisPs0Led=ciscoLS1010ChassisPs0Led, ciscoLS1010ModuleAdminStatus=ciscoLS1010ModuleAdminStatus, ciscoLS1010ChassisMIBGroup=ciscoLS1010ChassisMIBGroup, clsPortLedGroup1=clsPortLedGroup1, ciscoLS1010ChassisMIBComplianceRev4=ciscoLS1010ChassisMIBComplianceRev4, AdminStatus=AdminStatus, ciscoLS1010ChassisClockingMode=ciscoLS1010ChassisClockingMode, ciscoLS1010ChassisMIB=ciscoLS1010ChassisMIB, clsPortLedEntry=clsPortLedEntry, ciscoLS1010PortIndex=ciscoLS1010PortIndex, ciscoLS1010ChassisMIBClockingGroup=ciscoLS1010ChassisMIBClockingGroup, clsInletTempGroup=clsInletTempGroup, ciscoLS1010ChassisPs1AdminStatus=ciscoLS1010ChassisPs1AdminStatus, ciscoLS1010ChassisInletTempStatus=ciscoLS1010ChassisInletTempStatus, ciscoLS1010ModuleEntry=ciscoLS1010ModuleEntry, ciscoLS1010ChassisChangeNotification=ciscoLS1010ChassisChangeNotification, ciscoLS1010ChassisMIBRev1Group=ciscoLS1010ChassisMIBRev1Group, ciscoLS1010ChassisPs1Status=ciscoLS1010ChassisPs1Status, ciscoLS1010ChassisMIBGroups=ciscoLS1010ChassisMIBGroups, ciscoLS1010ChassisMIBCompliance=ciscoLS1010ChassisMIBCompliance, ciscoLS1010ChassisSysType=ciscoLS1010ChassisSysType, ciscoLS1010ChassisMIBComplianceRev1=ciscoLS1010ChassisMIBComplianceRev1, clsEnetPortDuplex=clsEnetPortDuplex, ciscoLS1010ChassisMIBComplianceRev5=ciscoLS1010ChassisMIBComplianceRev5, ciscoLS1010ChassisEnetLinkLed=ciscoLS1010ChassisEnetLinkLed, ciscoLS1010ModuleSerialNumberString=ciscoLS1010ModuleSerialNumberString, ciscols1010SystemClockSourceStatus=ciscols1010SystemClockSourceStatus, ciscoLS1010ChassisPcmciaSlot0Type=ciscoLS1010ChassisPcmciaSlot0Type, ciscoLS1010ModuleType=ciscoLS1010ModuleType, ciscoLS1010ChassisPs0AdminStatus=ciscoLS1010ChassisPs0AdminStatus, ciscoLS1010SubModuleIndex=ciscoLS1010SubModuleIndex, ciscoLS1010ChassisPcmciaSlot1Type=ciscoLS1010ChassisPcmciaSlot1Type, clsPortLedGroup=clsPortLedGroup, ciscoLS1010ChassisMIBDeprecatedGroup=ciscoLS1010ChassisMIBDeprecatedGroup, ciscoLS1010ChassisPs1Led=ciscoLS1010ChassisPs1Led, ciscoAtmCpuTerminateOamFlow=ciscoAtmCpuTerminateOamFlow, ciscoAtmSwitchInvalidCellHeader=ciscoAtmSwitchInvalidCellHeader, PYSNMP_MODULE_ID=ciscoLS1010ChassisMIB, ciscoLS1010ChassisFanLed=ciscoLS1010ChassisFanLed, ciscoLS1010Chassis12VoltStatus=ciscoLS1010Chassis12VoltStatus, ciscoAtmSwitchInvalidCells=ciscoAtmSwitchInvalidCells, ciscoAtmInterceptEndToEndOamFlow=ciscoAtmInterceptEndToEndOamFlow, ciscoLS1010ChassisMIBComplianceRev2=ciscoLS1010ChassisMIBComplianceRev2, ciscoLS1010ChassisMIBObsoleteGroup=ciscoLS1010ChassisMIBObsoleteGroup, ciscoLS1010SubModuleHwVersionMinor=ciscoLS1010SubModuleHwVersionMinor, ciscoLS1010ChassisFailureAction=ciscoLS1010ChassisFailureAction, clsPortLedStatus=clsPortLedStatus, ciscoLS1010ChassisMIBNotificationGroup=ciscoLS1010ChassisMIBNotificationGroup, ciscoLS1010ModuleOperStatus=ciscoLS1010ModuleOperStatus, clsPortLedTable=clsPortLedTable, PsType=PsType, ciscoLS1010ChassisCardStatusLed=ciscoLS1010ChassisCardStatusLed, ciscoLS1010ChassisFailureNotification=ciscoLS1010ChassisFailureNotification, ciscoLS1010SubModuleGroup=ciscoLS1010SubModuleGroup, ciscoLS1010ChassisMIBConformance=ciscoLS1010ChassisMIBConformance, ciscoLS1010PortEntry=ciscoLS1010PortEntry, ciscoLS1010PortTable=ciscoLS1010PortTable)
