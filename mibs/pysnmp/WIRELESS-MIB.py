#
# PySNMP MIB module WIRELESS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WIRELESS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 21:29:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
Timeticks, = mibBuilder.importSymbols("RFC1155-SMI", "Timeticks")
MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("RFC1212", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, iso, Integer32, TimeTicks, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, Counter64, MibIdentifier, IpAddress, Bits, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "iso", "Integer32", "TimeTicks", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "Counter64", "MibIdentifier", "IpAddress", "Bits", "NotificationType", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
ibmwlan = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 10))
wrBase = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 10, 1))
wrRemote = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 10, 2))
baseName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseName.setStatus('mandatory')
baseNetworkName = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseNetworkName.setStatus('mandatory')
baseAdminIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseAdminIPAddr.setStatus('mandatory')
wrBaseTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 4), )
if mibBuilder.loadTexts: wrBaseTable.setStatus('mandatory')
wrBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 4, 1), ).setIndexNames((0, "WIRELESS-MIB", "baseIfIndex"))
if mibBuilder.loadTexts: wrBaseEntry.setStatus('mandatory')
baseIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseIfIndex.setStatus('mandatory')
baseHDLCaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseHDLCaddress.setStatus('mandatory')
baseNbOFRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseNbOFRemote.setStatus('mandatory')
baseCellIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseCellIdentifier.setStatus('mandatory')
baseAdapterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("not-operational", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseAdapterStatus.setStatus('mandatory')
baseEmittedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseEmittedPower.setStatus('mandatory')
baseControllerCardDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 4, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseControllerCardDesc.setStatus('mandatory')
baseUnivAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 4, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseUnivAddress.setStatus('mandatory')
baseModemDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseModemDesc.setStatus('mandatory')
baseTopologyTrapActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseTopologyTrapActive.setStatus('mandatory')
wrBaseStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5), )
if mibBuilder.loadTexts: wrBaseStatsTable.setStatus('mandatory')
wrBaseStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1), ).setIndexNames((0, "WIRELESS-MIB", "baseStatsIfIndex"))
if mibBuilder.loadTexts: wrBaseStatsEntry.setStatus('mandatory')
baseStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsIfIndex.setStatus('mandatory')
baseStatsXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsXmit.setStatus('mandatory')
baseStatsRxmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsRxmit.setStatus('mandatory')
baseStatsNegAckRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsNegAckRcv.setStatus('mandatory')
baseStatsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsRcv.setStatus('mandatory')
baseStatsLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsLineErrors.setStatus('mandatory')
baseStatsNegAckXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsNegAckXmit.setStatus('mandatory')
baseStatsFramePurged = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsFramePurged.setStatus('mandatory')
baseStatsFreqDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsFreqDelete.setStatus('mandatory')
baseStatsHopAdvance = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsHopAdvance.setStatus('mandatory')
baseStatsCLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsCLineErrors.setStatus('mandatory')
baseStatsRcvICRFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsRcvICRFrame.setStatus('mandatory')
baseStatsXmitICRFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsXmitICRFrame.setStatus('mandatory')
baseStatsNoICRBufferAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsNoICRBufferAvail.setStatus('mandatory')
baseStatsNotRoutedICRFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsNotRoutedICRFrame.setStatus('mandatory')
baseStatsNbCUserEst = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 1, 5, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatsNbCUserEst.setStatus('mandatory')
wrRemoteTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 1), )
if mibBuilder.loadTexts: wrRemoteTable.setStatus('mandatory')
wrRemoteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 1, 1), ).setIndexNames((0, "WIRELESS-MIB", "remIfIndex"), (0, "WIRELESS-MIB", "remIndex"))
if mibBuilder.loadTexts: wrRemoteEntry.setStatus('mandatory')
remIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remIfIndex.setStatus('mandatory')
remIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remIndex.setStatus('mandatory')
remMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remMacAddress.setStatus('mandatory')
remName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remName.setStatus('mandatory')
remControllerCardDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remControllerCardDesc.setStatus('mandatory')
remUnivAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remUnivAddress.setStatus('mandatory')
remModemDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remModemDesc.setStatus('mandatory')
wrRemoteStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 2), )
if mibBuilder.loadTexts: wrRemoteStatsTable.setStatus('mandatory')
wrRemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 2, 1), ).setIndexNames((0, "WIRELESS-MIB", "remStatsIfIndex"), (0, "WIRELESS-MIB", "remStatsIndex"))
if mibBuilder.loadTexts: wrRemStatsEntry.setStatus('mandatory')
remStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remStatsIfIndex.setStatus('mandatory')
remStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remStatsIndex.setStatus('mandatory')
remStatsXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remStatsXmit.setStatus('mandatory')
remStatsRxmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remStatsRxmit.setStatus('mandatory')
remStatsNegAckRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remStatsNegAckRcv.setStatus('mandatory')
remStatsRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remStatsRcv.setStatus('mandatory')
remStatsLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remStatsLineErrors.setStatus('mandatory')
remStatsNegAckXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 10, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remStatsNegAckXmit.setStatus('mandatory')
mibBuilder.exportSymbols("WIRELESS-MIB", baseAdapterStatus=baseAdapterStatus, remIfIndex=remIfIndex, wrBaseStatsEntry=wrBaseStatsEntry, baseHDLCaddress=baseHDLCaddress, baseControllerCardDesc=baseControllerCardDesc, remStatsIfIndex=remStatsIfIndex, MacAddress=MacAddress, baseNbOFRemote=baseNbOFRemote, remStatsIndex=remStatsIndex, baseStatsFramePurged=baseStatsFramePurged, wrRemote=wrRemote, baseUnivAddress=baseUnivAddress, wrBaseEntry=wrBaseEntry, baseStatsNoICRBufferAvail=baseStatsNoICRBufferAvail, baseStatsNegAckRcv=baseStatsNegAckRcv, baseStatsHopAdvance=baseStatsHopAdvance, baseStatsNbCUserEst=baseStatsNbCUserEst, remUnivAddress=remUnivAddress, wrRemoteStatsTable=wrRemoteStatsTable, baseStatsXmit=baseStatsXmit, remStatsRxmit=remStatsRxmit, baseStatsCLineErrors=baseStatsCLineErrors, remStatsLineErrors=remStatsLineErrors, baseStatsRcvICRFrame=baseStatsRcvICRFrame, baseNetworkName=baseNetworkName, baseCellIdentifier=baseCellIdentifier, baseStatsRcv=baseStatsRcv, baseIfIndex=baseIfIndex, baseTopologyTrapActive=baseTopologyTrapActive, baseAdminIPAddr=baseAdminIPAddr, baseStatsNegAckXmit=baseStatsNegAckXmit, baseModemDesc=baseModemDesc, baseStatsLineErrors=baseStatsLineErrors, ibmwlan=ibmwlan, wrRemStatsEntry=wrRemStatsEntry, remControllerCardDesc=remControllerCardDesc, wrRemoteEntry=wrRemoteEntry, remIndex=remIndex, baseStatsFreqDelete=baseStatsFreqDelete, remMacAddress=remMacAddress, remName=remName, baseStatsXmitICRFrame=baseStatsXmitICRFrame, baseStatsIfIndex=baseStatsIfIndex, wrRemoteTable=wrRemoteTable, baseName=baseName, wrBaseTable=wrBaseTable, baseStatsNotRoutedICRFrame=baseStatsNotRoutedICRFrame, baseStatsRxmit=baseStatsRxmit, remModemDesc=remModemDesc, baseEmittedPower=baseEmittedPower, remStatsNegAckRcv=remStatsNegAckRcv, ibmProd=ibmProd, ibm=ibm, remStatsXmit=remStatsXmit, remStatsRcv=remStatsRcv, remStatsNegAckXmit=remStatsNegAckXmit, wrBase=wrBase, wrBaseStatsTable=wrBaseStatsTable)
