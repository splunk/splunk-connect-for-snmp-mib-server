#
# PySNMP MIB module CXX25-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXX25-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:18:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
Alias, SapIndex, cxX25, ThruputClass = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "SapIndex", "cxX25", "ThruputClass")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Bits, Counter64, Unsigned32, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, ObjectIdentity, IpAddress, Counter32, NotificationType, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "Counter64", "Unsigned32", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "ObjectIdentity", "IpAddress", "Counter32", "NotificationType", "NotificationType", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class SapType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("lower", 1), ("upper", 2))

class PacketSize(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("bytes16", 4), ("bytes32", 5), ("bytes64", 6), ("bytes128", 7), ("bytes256", 8), ("bytes512", 9), ("bytes1024", 10), ("bytes2048", 11), ("bytes4096", 12))

class Ces(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class Lcn(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1024)

class CugIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 99)

class CugIC(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class RoutePartition(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class RouteIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 999)

class HGIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 99)

class PvcIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 200)

class X25Address(DisplayString):
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 15)

x25LowerPoolThreshold = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25LowerPoolThreshold.setStatus('mandatory')
x25UpperPoolThreshold = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25UpperPoolThreshold.setStatus('mandatory')
x25RouteMask = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25RouteMask.setStatus('mandatory')
x25BillingSegmentSize = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1024)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25BillingSegmentSize.setStatus('mandatory')
x25Billing = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Billing.setStatus('mandatory')
x25NetworkType = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("publicDataNetwork", 1), ("privateDataNetwork", 2), ("dteEndpoint", 3))).clone('dteEndpoint')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25NetworkType.setStatus('mandatory')
x25HuntGroupRotation = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25HuntGroupRotation.setStatus('mandatory')
x25Alarms = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Alarms.setStatus('mandatory')
x25SapStatusEvent = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("noEvent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatusEvent.setStatus('mandatory')
x25ConfigErrorEvent = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("noError", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25ConfigErrorEvent.setStatus('mandatory')
x25SoftwareVersions = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SoftwareVersions.setStatus('mandatory')
x25LogicalLinkTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 20), )
if mibBuilder.loadTexts: x25LogicalLinkTable.setStatus('mandatory')
x25LogicalLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 20, 1), ).setIndexNames((0, "CXX25-MIB", "x25LLNumber"), (0, "CXX25-MIB", "x25LLSapNumber"), (0, "CXX25-MIB", "x25LLSapCes"))
if mibBuilder.loadTexts: x25LogicalLinkEntry.setStatus('mandatory')
x25LLNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 20, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LLNumber.setStatus('mandatory')
x25LLSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 20, 1, 2), SapIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25LLSapNumber.setStatus('mandatory')
x25LLSapCes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 20, 1, 3), Ces()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25LLSapCes.setStatus('mandatory')
x25LLRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25LLRowStatus.setStatus('mandatory')
x25LLRouteAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("balanced", 1), ("prioritized", 2))).clone('prioritized')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25LLRouteAlgorithm.setStatus('mandatory')
x25LLEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLine", 1), ("onLine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LLEntryState.setStatus('mandatory')
x25SapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21), )
if mibBuilder.loadTexts: x25SapTable.setStatus('mandatory')
x25SapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1), ).setIndexNames((0, "CXX25-MIB", "x25SapNumber"), (0, "CXX25-MIB", "x25SapCes"))
if mibBuilder.loadTexts: x25SapEntry.setStatus('mandatory')
x25SapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapNumber.setStatus('mandatory')
x25SapCes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 2), Ces()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapCes.setStatus('mandatory')
x25SapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapRowStatus.setStatus('mandatory')
x25SapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 4), SapType().clone('lower')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapType.setStatus('mandatory')
x25SapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 5), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapAlias.setStatus('mandatory')
x25SapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 6), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapCompanionAlias.setStatus('mandatory')
x25SapInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapInterfaceType.setStatus('mandatory')
x25SapLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("x25Link", 1), ("x75Link", 2))).clone('x25Link')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapLinkType.setStatus('mandatory')
x25SapRoutePartition = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 19), RoutePartition()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapRoutePartition.setStatus('mandatory')
x25SapRouteDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("upper", 2), ("lower", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapRouteDirection.setStatus('mandatory')
x25SapWildCardRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapWildCardRouting.setStatus('obsolete')
x25SapWildCardRoutingMask = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapWildCardRoutingMask.setStatus('obsolete')
x25SapActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("dynamic", 2), ("dynamic-30s-delay", 3), ("dynamic-60s-delay", 4), ("dynamic-90s-delay", 5), ("dynamic-120s-delay", 6))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapActivation.setStatus('mandatory')
x25SapPvcBillingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapPvcBillingTimer.setStatus('mandatory')
x25SapModulo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2))).clone('modulo8')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapModulo.setStatus('mandatory')
x25SapRxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 32), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapRxPacketSize.setStatus('mandatory')
x25SapTxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 33), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapTxPacketSize.setStatus('mandatory')
x25SapRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapRxWindowSize.setStatus('mandatory')
x25SapTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapTxWindowSize.setStatus('mandatory')
x25SapRxThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 36), ThruputClass().clone('bps9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapRxThruputClass.setStatus('mandatory')
x25SapTxThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 37), ThruputClass().clone('bps9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapTxThruputClass.setStatus('mandatory')
x25SapRxWindowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapRxWindowThreshold.setStatus('mandatory')
x25SapLcnAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascending", 1), ("descending", 2))).clone('descending')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapLcnAllocation.setStatus('mandatory')
x25SapLpvcLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapLpvcLcn.setStatus('mandatory')
x25SapHpvcLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapHpvcLcn.setStatus('mandatory')
x25SapLicLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapLicLcn.setStatus('mandatory')
x25SapHicLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapHicLcn.setStatus('mandatory')
x25SapLtcLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapLtcLcn.setStatus('mandatory')
x25SapHtcLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapHtcLcn.setStatus('mandatory')
x25SapLocLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapLocLcn.setStatus('mandatory')
x25SapHocLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapHocLcn.setStatus('mandatory')
x25SapConnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapConnectTimer.setStatus('mandatory')
x25SapDisconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapDisconnectTimer.setStatus('mandatory')
x25SapRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapRestartTimer.setStatus('mandatory')
x25SapCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapCallTimer.setStatus('mandatory')
x25SapResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapResetTimer.setStatus('mandatory')
x25SapClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapClearTimer.setStatus('mandatory')
x25SapInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapInactivityTimer.setStatus('mandatory')
x25SapFlowControlTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapFlowControlTimer.setStatus('mandatory')
x25SapWindowStatusTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapWindowStatusTimer.setStatus('mandatory')
x25SapSbscrCalledAddressInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrCalledAddressInsertion.setStatus('mandatory')
x25SapSbscrCallingAddressInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrCallingAddressInsertion.setStatus('mandatory')
x25SapSbscrPktRetransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrPktRetransmission.setStatus('mandatory')
x25SapSbscrInAccessBarred = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrInAccessBarred.setStatus('mandatory')
x25SapSbscrOutAccessBarred = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrOutAccessBarred.setStatus('mandatory')
x25SapSbscrFlowCntrlParamNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrFlowCntrlParamNegotiation.setStatus('mandatory')
x25SapSbscrThruputClassNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrThruputClassNegotiation.setStatus('mandatory')
x25SapSbscrFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 87), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrFastSelect.setStatus('mandatory')
x25SapSbscrFastSelectAcceptance = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 88), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrFastSelectAcceptance.setStatus('mandatory')
x25SapSbscrReverseChargingAcceptance = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrReverseChargingAcceptance.setStatus('mandatory')
x25SapSbscrLocalChargingPrevention = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrLocalChargingPrevention.setStatus('mandatory')
x25SapSbscrChargingInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrChargingInformation.setStatus('mandatory')
x25SapSbscrCallRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrCallRedirection.setStatus('mandatory')
x25SapSbscrPermissionToRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrPermissionToRedirect.setStatus('mandatory')
x25SapRedirectionAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 94), X25Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapRedirectionAddress.setStatus('mandatory')
x25SapSbscrNetworkUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrNetworkUserId.setStatus('mandatory')
x25SapSbscrCallingAddressValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrCallingAddressValidation.setStatus('mandatory')
x25SapSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 97), X25Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSourceAddress.setStatus('mandatory')
x25SapSbscrRouteUsingCUDF = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrRouteUsingCUDF.setStatus('mandatory')
x25SapSbscrRouteUsingSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 99), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrRouteUsingSubAddress.setStatus('mandatory')
x25SapSbscrRouteUsingCAE = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrRouteUsingCAE.setStatus('mandatory')
x25SapRouteAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapRouteAddressLength.setStatus('mandatory')
x25SapSbscrTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrTransitDelay.setStatus('mandatory')
x25SapTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapTransitDelay.setStatus('mandatory')
x25SapSbscrCugIncomingAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrCugIncomingAccess.setStatus('mandatory')
x25SapSbscrCugOutgoingAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapSbscrCugOutgoingAccess.setStatus('mandatory')
x25SapPreferentialCugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 106), CugIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25SapPreferentialCugIndex.setStatus('mandatory')
x25SapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 120), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clearStats", 1), ("enableSap", 2), ("disableSap", 3)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: x25SapControl.setStatus('mandatory')
x25SapLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 125), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("connecting", 1), ("dataTransfer", 2), ("restartInternal", 3), ("restartExternal", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapLinkState.setStatus('mandatory')
x25SapFlowControlState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 21, 1, 126), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("flowNormal", 1), ("flowStopped", 2), ("noFlow", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapFlowControlState.setStatus('mandatory')
x25SapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22), )
if mibBuilder.loadTexts: x25SapStatsTable.setStatus('mandatory')
x25SapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1), ).setIndexNames((0, "CXX25-MIB", "x25SapStatsSapNumber"), (0, "CXX25-MIB", "x25SapStatsSapCes"))
if mibBuilder.loadTexts: x25SapStatsEntry.setStatus('mandatory')
x25SapStatsSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsSapNumber.setStatus('mandatory')
x25SapStatsSapCes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 2), Ces()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsSapCes.setStatus('mandatory')
x25SapStatsTxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsTxDataPkts.setStatus('mandatory')
x25SapStatsRxDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxDataPkts.setStatus('mandatory')
x25SapStatsTxDataChars = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsTxDataChars.setStatus('mandatory')
x25SapStatsRxDataChars = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxDataChars.setStatus('mandatory')
x25SapStatsTxQDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsTxQDataPkts.setStatus('mandatory')
x25SapStatsRxQDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxQDataPkts.setStatus('mandatory')
x25SapStatsTxQDataChars = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsTxQDataChars.setStatus('mandatory')
x25SapStatsRxQDataChars = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxQDataChars.setStatus('mandatory')
x25SapStatsTxCallPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsTxCallPkts.setStatus('mandatory')
x25SapStatsRxCallPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxCallPkts.setStatus('mandatory')
x25SapStatsTxClrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsTxClrPkts.setStatus('mandatory')
x25SapStatsRxClrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxClrPkts.setStatus('mandatory')
x25SapStatsTxRRPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsTxRRPkts.setStatus('mandatory')
x25SapStatsRxRRPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxRRPkts.setStatus('mandatory')
x25SapStatsTxRNRPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsTxRNRPkts.setStatus('mandatory')
x25SapStatsRxRNRPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxRNRPkts.setStatus('mandatory')
x25SapStatsTxResPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsTxResPkts.setStatus('mandatory')
x25SapStatsRxResPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxResPkts.setStatus('mandatory')
x25SapStatsTxRstPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsTxRstPkts.setStatus('mandatory')
x25SapStatsRxRstPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxRstPkts.setStatus('mandatory')
x25SapStatsTxIntPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsTxIntPkts.setStatus('mandatory')
x25SapStatsRxIntPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxIntPkts.setStatus('mandatory')
x25SapStatsTxDiagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsTxDiagPkts.setStatus('mandatory')
x25SapStatsRxDiagPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxDiagPkts.setStatus('mandatory')
x25SapStatsRxInvPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsRxInvPkts.setStatus('mandatory')
x25SapStatsCons = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsCons.setStatus('mandatory')
x25SapStatsDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsDiscs.setStatus('mandatory')
x25SapStatsLastCauseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsLastCauseCode.setStatus('mandatory')
x25SapStatsLastDiagCode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsLastDiagCode.setStatus('mandatory')
x25SapStatsActiveLcns = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 22, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25SapStatsActiveLcns.setStatus('mandatory')
x25CugTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 23), )
if mibBuilder.loadTexts: x25CugTable.setStatus('mandatory')
x25CugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 23, 1), ).setIndexNames((0, "CXX25-MIB", "x25CugSapNumber"), (0, "CXX25-MIB", "x25CugSapCes"), (0, "CXX25-MIB", "x25CugIndex"))
if mibBuilder.loadTexts: x25CugEntry.setStatus('mandatory')
x25CugSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 23, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CugSapNumber.setStatus('mandatory')
x25CugSapCes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 23, 1, 2), Ces()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CugSapCes.setStatus('mandatory')
x25CugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 23, 1, 3), CugIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CugIndex.setStatus('mandatory')
x25CugRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CugRowStatus.setStatus('mandatory')
x25CugInterlockCode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 23, 1, 5), CugIC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CugInterlockCode.setStatus('mandatory')
x25CugSbscrInCallsBarred = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CugSbscrInCallsBarred.setStatus('mandatory')
x25CugSbscrOutCallsBarred = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 23, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25CugSbscrOutCallsBarred.setStatus('mandatory')
x25CugEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 23, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLine", 1), ("onLine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25CugEntryState.setStatus('mandatory')
x25RouteTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 24), )
if mibBuilder.loadTexts: x25RouteTable.setStatus('mandatory')
x25RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 24, 1), ).setIndexNames((0, "CXX25-MIB", "x25RoutePartition"), (0, "CXX25-MIB", "x25RouteId"))
if mibBuilder.loadTexts: x25RouteEntry.setStatus('mandatory')
x25RoutePartition = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 24, 1, 1), RoutePartition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RoutePartition.setStatus('mandatory')
x25RouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 24, 1, 2), RouteIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RouteId.setStatus('mandatory')
x25RouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25RouteRowStatus.setStatus('mandatory')
x25RouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("specUpperSap", 1), ("specLowerSap", 2), ("logicalLink", 3), ("huntGroup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25RouteType.setStatus('mandatory')
x25RouteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 24, 1, 5), X25Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25RouteAddress.setStatus('mandatory')
x25RouteSLHNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 24, 1, 6), SapIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25RouteSLHNumber.setStatus('mandatory')
x25RouteSapCes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 24, 1, 7), Ces()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25RouteSapCes.setStatus('mandatory')
x25RouteEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLine", 1), ("onLine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25RouteEntryState.setStatus('mandatory')
x25HuntGroupTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 25), )
if mibBuilder.loadTexts: x25HuntGroupTable.setStatus('mandatory')
x25HuntGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 25, 1), ).setIndexNames((0, "CXX25-MIB", "x25HGId"), (0, "CXX25-MIB", "x25HGMemberIndex"))
if mibBuilder.loadTexts: x25HuntGroupEntry.setStatus('mandatory')
x25HGId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 25, 1, 1), HGIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25HGId.setStatus('mandatory')
x25HGMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 25, 1, 2), HGIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25HGMemberIndex.setStatus('mandatory')
x25HGSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 25, 1, 3), SapIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25HGSapNumber.setStatus('mandatory')
x25HGSapCes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 25, 1, 4), Ces()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25HGSapCes.setStatus('mandatory')
x25HGRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25HGRowStatus.setStatus('mandatory')
x25HuntGroupOperTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 26), )
if mibBuilder.loadTexts: x25HuntGroupOperTable.setStatus('mandatory')
x25HuntGroupOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 26, 1), ).setIndexNames((0, "CXX25-MIB", "x25HGOperId"), (0, "CXX25-MIB", "x25HGOperMemberIndex"))
if mibBuilder.loadTexts: x25HuntGroupOperEntry.setStatus('mandatory')
x25HGOperId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 26, 1, 1), HGIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25HGOperId.setStatus('mandatory')
x25HGOperMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 26, 1, 2), HGIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25HGOperMemberIndex.setStatus('mandatory')
x25HGOperSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 26, 1, 3), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25HGOperSapNumber.setStatus('mandatory')
x25HGOperSapCes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 26, 1, 4), Ces()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25HGOperSapCes.setStatus('mandatory')
x25PvcTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27), )
if mibBuilder.loadTexts: x25PvcTable.setStatus('mandatory')
x25PvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1), ).setIndexNames((0, "CXX25-MIB", "x25PvcId"))
if mibBuilder.loadTexts: x25PvcEntry.setStatus('mandatory')
x25PvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 1), PvcIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PvcId.setStatus('mandatory')
x25PvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcRowStatus.setStatus('mandatory')
x25PvcSrcSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 3), SapIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcSrcSap.setStatus('mandatory')
x25PvcSrcCes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 4), Ces()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcSrcCes.setStatus('mandatory')
x25PvcDstSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 5), SapIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcDstSap.setStatus('mandatory')
x25PvcDstCes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 6), Ces()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcDstCes.setStatus('mandatory')
x25PvcSrcLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcSrcLcn.setStatus('mandatory')
x25PvcDstLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcDstLcn.setStatus('mandatory')
x25PvcSrcRxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 9), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcSrcRxPacketSize.setStatus('mandatory')
x25PvcSrcTxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 10), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcSrcTxPacketSize.setStatus('mandatory')
x25PvcDstRxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 11), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcDstRxPacketSize.setStatus('mandatory')
x25PvcDstTxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 12), PacketSize().clone('bytes128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcDstTxPacketSize.setStatus('mandatory')
x25PvcRxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcRxWindow.setStatus('mandatory')
x25PvcTxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcTxWindow.setStatus('mandatory')
x25PvcRxThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 15), ThruputClass().clone('bps9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcRxThruputClass.setStatus('mandatory')
x25PvcTxThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 16), ThruputClass().clone('bps9600')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcTxThruputClass.setStatus('mandatory')
x25PvcBilling = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcBilling.setStatus('mandatory')
x25PvcSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 18), X25Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcSrcAddress.setStatus('mandatory')
x25PvcDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 19), X25Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25PvcDstAddress.setStatus('mandatory')
x25PvcEntryState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 27, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("offLine", 1), ("onLine", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25PvcEntryState.setStatus('mandatory')
x25LcnStatusTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28), )
if mibBuilder.loadTexts: x25LcnStatusTable.setStatus('mandatory')
x25LcnStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1), ).setIndexNames((0, "CXX25-MIB", "x25LcnSrcSap"), (0, "CXX25-MIB", "x25LcnSrcCes"), (0, "CXX25-MIB", "x25LcnSrcLcn"))
if mibBuilder.loadTexts: x25LcnStatusEntry.setStatus('mandatory')
x25LcnSrcSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnSrcSap.setStatus('mandatory')
x25LcnSrcCes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 2), Ces()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnSrcCes.setStatus('mandatory')
x25LcnSrcLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 3), Lcn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnSrcLcn.setStatus('mandatory')
x25LcnDstSap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 4), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnDstSap.setStatus('mandatory')
x25LcnDstCes = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 5), Ces()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnDstCes.setStatus('mandatory')
x25LcnDstLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 6), Lcn()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnDstLcn.setStatus('mandatory')
x25LcnDBitCall = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnDBitCall.setStatus('mandatory')
x25LcnPvc = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnPvc.setStatus('mandatory')
x25LcnModulo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("modulo8", 1), ("modulo128", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnModulo.setStatus('mandatory')
x25LcnState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stateReady", 1), ("stateConnecting", 2), ("stateDataTransfer", 3), ("stateDisconnecting", 4), ("stateResettingCgSide", 5), ("stateResettingCdSide", 6), ("stateResettingBoth", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnState.setStatus('mandatory')
x25LcnTxRnr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnTxRnr.setStatus('mandatory')
x25LcnRxRnr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnRxRnr.setStatus('mandatory')
x25LcnTxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnTxWindowSize.setStatus('mandatory')
x25LcnRxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnRxWindowSize.setStatus('mandatory')
x25LcnTxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnTxPacketSize.setStatus('mandatory')
x25LcnRxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnRxPacketSize.setStatus('mandatory')
x25LcnTxThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(75, 64000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnTxThruputClass.setStatus('mandatory')
x25LcnRxThruputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(75, 64000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnRxThruputClass.setStatus('mandatory')
x25LcnSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 50), X25Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnSrcAddress.setStatus('mandatory')
x25LcnDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 51), X25Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnDstAddress.setStatus('mandatory')
x25LcnTxQLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnTxQLength.setStatus('mandatory')
x25LcnNextTransmitPs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnNextTransmitPs.setStatus('mandatory')
x25LcnNextExpectedPs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnNextExpectedPs.setStatus('mandatory')
x25LcnLastTransmittedPr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnLastTransmittedPr.setStatus('mandatory')
x25LcnLastReceivedPr = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnLastReceivedPr.setStatus('mandatory')
x25LcnFCTimerRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnFCTimerRunning.setStatus('mandatory')
x25LcnT24TimerRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnT24TimerRunning.setStatus('mandatory')
x25LcnInacTimerRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnInacTimerRunning.setStatus('mandatory')
x25LcnCalTimerRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnCalTimerRunning.setStatus('mandatory')
x25LcnClrTimerRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnClrTimerRunning.setStatus('mandatory')
x25LcnResTimerRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 28, 1, 85), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25LcnResTimerRunning.setStatus('mandatory')
x25MibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25MibLevel.setStatus('mandatory')
x25SapAlarm = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29) + (0,1)).setObjects(("CXX25-MIB", "x25SapNumber"), ("CXX25-MIB", "x25SapCes"), ("CXX25-MIB", "x25SapStatusEvent"))
x25ConfigErrorIndication = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 29) + (0,2)).setObjects(("CXX25-MIB", "x25SapNumber"), ("CXX25-MIB", "x25SapCes"), ("CXX25-MIB", "x25ConfigErrorEvent"))
mibBuilder.exportSymbols("CXX25-MIB", x25UpperPoolThreshold=x25UpperPoolThreshold, x25SapSbscrLocalChargingPrevention=x25SapSbscrLocalChargingPrevention, x25SapStatsEntry=x25SapStatsEntry, x25RouteSapCes=x25RouteSapCes, x25PvcRowStatus=x25PvcRowStatus, x25SapStatsTxDiagPkts=x25SapStatsTxDiagPkts, x25SapStatsActiveLcns=x25SapStatsActiveLcns, x25HGRowStatus=x25HGRowStatus, x25SapStatsRxClrPkts=x25SapStatsRxClrPkts, x25SapSbscrPktRetransmission=x25SapSbscrPktRetransmission, x25SapSbscrRouteUsingSubAddress=x25SapSbscrRouteUsingSubAddress, CugIC=CugIC, x25RouteAddress=x25RouteAddress, x25LogicalLinkEntry=x25LogicalLinkEntry, x25SapSbscrCalledAddressInsertion=x25SapSbscrCalledAddressInsertion, x25SapResetTimer=x25SapResetTimer, x25SapAlarm=x25SapAlarm, x25LcnRxPacketSize=x25LcnRxPacketSize, x25SapStatsRxDiagPkts=x25SapStatsRxDiagPkts, x25LcnSrcAddress=x25LcnSrcAddress, PacketSize=PacketSize, x25SapRestartTimer=x25SapRestartTimer, x25LcnModulo=x25LcnModulo, x25SapRowStatus=x25SapRowStatus, x25SapHpvcLcn=x25SapHpvcLcn, x25HGOperMemberIndex=x25HGOperMemberIndex, x25LLNumber=x25LLNumber, x25LcnRxRnr=x25LcnRxRnr, x25RouteRowStatus=x25RouteRowStatus, x25SapStatsTxQDataChars=x25SapStatsTxQDataChars, x25LcnSrcLcn=x25LcnSrcLcn, x25SapClearTimer=x25SapClearTimer, x25PvcDstTxPacketSize=x25PvcDstTxPacketSize, x25SapStatsTxCallPkts=x25SapStatsTxCallPkts, x25LowerPoolThreshold=x25LowerPoolThreshold, x25SapStatsTxRRPkts=x25SapStatsTxRRPkts, x25PvcEntryState=x25PvcEntryState, x25SapSbscrReverseChargingAcceptance=x25SapSbscrReverseChargingAcceptance, x25SapLtcLcn=x25SapLtcLcn, x25LcnCalTimerRunning=x25LcnCalTimerRunning, x25LLRouteAlgorithm=x25LLRouteAlgorithm, x25PvcSrcAddress=x25PvcSrcAddress, x25SapFlowControlTimer=x25SapFlowControlTimer, RouteIndex=RouteIndex, x25HGId=x25HGId, x25SapStatsSapNumber=x25SapStatsSapNumber, x25SapStatsCons=x25SapStatsCons, x25SapRouteDirection=x25SapRouteDirection, x25SoftwareVersions=x25SoftwareVersions, x25SapRxThruputClass=x25SapRxThruputClass, x25SapStatusEvent=x25SapStatusEvent, x25CugIndex=x25CugIndex, x25PvcSrcCes=x25PvcSrcCes, x25Alarms=x25Alarms, RoutePartition=RoutePartition, x25HGMemberIndex=x25HGMemberIndex, x25LLRowStatus=x25LLRowStatus, x25PvcTable=x25PvcTable, x25LcnNextExpectedPs=x25LcnNextExpectedPs, x25BillingSegmentSize=x25BillingSegmentSize, x25SapRedirectionAddress=x25SapRedirectionAddress, x25HuntGroupOperTable=x25HuntGroupOperTable, x25LcnPvc=x25LcnPvc, x25PvcEntry=x25PvcEntry, x25SapTransitDelay=x25SapTransitDelay, x25SapCallTimer=x25SapCallTimer, x25SapControl=x25SapControl, Ces=Ces, x25RouteType=x25RouteType, x25LcnRxThruputClass=x25LcnRxThruputClass, x25LcnState=x25LcnState, x25SapRouteAddressLength=x25SapRouteAddressLength, x25SapFlowControlState=x25SapFlowControlState, x25RouteEntryState=x25RouteEntryState, x25PvcDstSap=x25PvcDstSap, x25MibLevel=x25MibLevel, x25LcnDstLcn=x25LcnDstLcn, x25CugEntryState=x25CugEntryState, x25LcnSrcCes=x25LcnSrcCes, x25NetworkType=x25NetworkType, x25PvcBilling=x25PvcBilling, x25SapTxThruputClass=x25SapTxThruputClass, x25SapTable=x25SapTable, CugIndex=CugIndex, x25SapWildCardRoutingMask=x25SapWildCardRoutingMask, SapType=SapType, x25SapStatsRxInvPkts=x25SapStatsRxInvPkts, x25LcnTxPacketSize=x25LcnTxPacketSize, x25PvcSrcLcn=x25PvcSrcLcn, x25SapInactivityTimer=x25SapInactivityTimer, x25SapSbscrNetworkUserId=x25SapSbscrNetworkUserId, x25SapSbscrCugIncomingAccess=x25SapSbscrCugIncomingAccess, x25HGOperSapNumber=x25HGOperSapNumber, x25SapStatsSapCes=x25SapStatsSapCes, x25SapSbscrCallRedirection=x25SapSbscrCallRedirection, x25HuntGroupEntry=x25HuntGroupEntry, x25LcnStatusTable=x25LcnStatusTable, x25LcnResTimerRunning=x25LcnResTimerRunning, x25ConfigErrorIndication=x25ConfigErrorIndication, x25SapActivation=x25SapActivation, x25SapType=x25SapType, x25PvcDstCes=x25PvcDstCes, x25LcnSrcSap=x25LcnSrcSap, x25SapAlias=x25SapAlias, x25LcnLastTransmittedPr=x25LcnLastTransmittedPr, x25LcnTxQLength=x25LcnTxQLength, x25PvcDstLcn=x25PvcDstLcn, x25CugRowStatus=x25CugRowStatus, x25PvcDstAddress=x25PvcDstAddress, x25SapHocLcn=x25SapHocLcn, x25SapStatsTxDataPkts=x25SapStatsTxDataPkts, x25SapLinkType=x25SapLinkType, x25RouteMask=x25RouteMask, x25SapStatsTxIntPkts=x25SapStatsTxIntPkts, x25SapSbscrPermissionToRedirect=x25SapSbscrPermissionToRedirect, x25CugSapNumber=x25CugSapNumber, x25LcnDBitCall=x25LcnDBitCall, x25CugSbscrInCallsBarred=x25CugSbscrInCallsBarred, x25HGOperSapCes=x25HGOperSapCes, x25SapSbscrFastSelectAcceptance=x25SapSbscrFastSelectAcceptance, x25SapRxWindowSize=x25SapRxWindowSize, x25SapConnectTimer=x25SapConnectTimer, x25CugSbscrOutCallsBarred=x25CugSbscrOutCallsBarred, x25SapSbscrRouteUsingCUDF=x25SapSbscrRouteUsingCUDF, x25SapModulo=x25SapModulo, x25SapSbscrInAccessBarred=x25SapSbscrInAccessBarred, x25SapStatsRxIntPkts=x25SapStatsRxIntPkts, x25SapStatsTxClrPkts=x25SapStatsTxClrPkts, x25LcnDstAddress=x25LcnDstAddress, x25LLSapCes=x25LLSapCes, x25HuntGroupOperEntry=x25HuntGroupOperEntry, x25PvcRxWindow=x25PvcRxWindow, x25SapStatsTxRNRPkts=x25SapStatsTxRNRPkts, x25PvcId=x25PvcId, x25SapNumber=x25SapNumber, x25PvcSrcSap=x25PvcSrcSap, x25LcnT24TimerRunning=x25LcnT24TimerRunning, x25PvcDstRxPacketSize=x25PvcDstRxPacketSize, x25SapPreferentialCugIndex=x25SapPreferentialCugIndex, x25HGOperId=x25HGOperId, x25SapTxWindowSize=x25SapTxWindowSize, x25RoutePartition=x25RoutePartition, x25LcnTxRnr=x25LcnTxRnr, X25Address=X25Address, x25SapStatsDiscs=x25SapStatsDiscs, x25SapStatsLastDiagCode=x25SapStatsLastDiagCode, x25SapRoutePartition=x25SapRoutePartition, x25SapRxWindowThreshold=x25SapRxWindowThreshold, x25SapStatsRxRNRPkts=x25SapStatsRxRNRPkts, x25SapStatsRxCallPkts=x25SapStatsRxCallPkts, x25HGSapCes=x25HGSapCes, x25LogicalLinkTable=x25LogicalLinkTable, x25SapSbscrChargingInformation=x25SapSbscrChargingInformation, x25LLEntryState=x25LLEntryState, x25LcnTxWindowSize=x25LcnTxWindowSize, x25SapStatsRxDataChars=x25SapStatsRxDataChars, x25SapLinkState=x25SapLinkState, x25LcnTxThruputClass=x25LcnTxThruputClass, x25SapSbscrRouteUsingCAE=x25SapSbscrRouteUsingCAE, x25RouteId=x25RouteId, x25SapSbscrFastSelect=x25SapSbscrFastSelect, HGIndex=HGIndex, x25SapStatsRxDataPkts=x25SapStatsRxDataPkts, x25SapSbscrTransitDelay=x25SapSbscrTransitDelay, x25PvcSrcTxPacketSize=x25PvcSrcTxPacketSize, x25SapSbscrCallingAddressValidation=x25SapSbscrCallingAddressValidation, x25SapSourceAddress=x25SapSourceAddress, x25LcnClrTimerRunning=x25LcnClrTimerRunning, x25SapSbscrCallingAddressInsertion=x25SapSbscrCallingAddressInsertion, x25SapStatsTxDataChars=x25SapStatsTxDataChars, x25RouteTable=x25RouteTable, x25CugEntry=x25CugEntry, x25SapTxPacketSize=x25SapTxPacketSize, x25LLSapNumber=x25LLSapNumber, x25SapDisconnectTimer=x25SapDisconnectTimer, x25PvcTxThruputClass=x25PvcTxThruputClass, x25SapWindowStatusTimer=x25SapWindowStatusTimer, x25SapCompanionAlias=x25SapCompanionAlias, x25SapLcnAllocation=x25SapLcnAllocation, x25SapStatsTxResPkts=x25SapStatsTxResPkts, x25SapStatsLastCauseCode=x25SapStatsLastCauseCode, x25PvcTxWindow=x25PvcTxWindow, x25SapStatsTxQDataPkts=x25SapStatsTxQDataPkts, x25SapHicLcn=x25SapHicLcn, PvcIndex=PvcIndex, x25HGSapNumber=x25HGSapNumber, x25LcnLastReceivedPr=x25LcnLastReceivedPr, x25LcnInacTimerRunning=x25LcnInacTimerRunning, x25PvcSrcRxPacketSize=x25PvcSrcRxPacketSize, x25SapEntry=x25SapEntry, x25SapPvcBillingTimer=x25SapPvcBillingTimer, x25SapStatsTxRstPkts=x25SapStatsTxRstPkts, x25LcnRxWindowSize=x25LcnRxWindowSize, x25SapStatsRxQDataChars=x25SapStatsRxQDataChars, x25SapLocLcn=x25SapLocLcn, x25SapInterfaceType=x25SapInterfaceType, x25SapHtcLcn=x25SapHtcLcn, x25SapStatsTable=x25SapStatsTable, x25CugSapCes=x25CugSapCes, x25LcnNextTransmitPs=x25LcnNextTransmitPs, x25SapStatsRxResPkts=x25SapStatsRxResPkts, x25CugTable=x25CugTable, x25CugInterlockCode=x25CugInterlockCode, x25Billing=x25Billing, x25SapRxPacketSize=x25SapRxPacketSize, x25LcnDstCes=x25LcnDstCes, x25RouteEntry=x25RouteEntry, x25SapStatsRxQDataPkts=x25SapStatsRxQDataPkts, Lcn=Lcn, x25LcnStatusEntry=x25LcnStatusEntry, x25SapWildCardRouting=x25SapWildCardRouting, x25SapStatsRxRstPkts=x25SapStatsRxRstPkts, x25HuntGroupTable=x25HuntGroupTable, x25PvcRxThruputClass=x25PvcRxThruputClass, x25SapSbscrFlowCntrlParamNegotiation=x25SapSbscrFlowCntrlParamNegotiation, x25SapStatsRxRRPkts=x25SapStatsRxRRPkts, x25LcnDstSap=x25LcnDstSap, x25SapLpvcLcn=x25SapLpvcLcn, x25LcnFCTimerRunning=x25LcnFCTimerRunning, x25SapCes=x25SapCes, x25SapLicLcn=x25SapLicLcn, x25SapSbscrThruputClassNegotiation=x25SapSbscrThruputClassNegotiation, x25SapSbscrCugOutgoingAccess=x25SapSbscrCugOutgoingAccess, x25RouteSLHNumber=x25RouteSLHNumber, x25ConfigErrorEvent=x25ConfigErrorEvent, x25HuntGroupRotation=x25HuntGroupRotation, x25SapSbscrOutAccessBarred=x25SapSbscrOutAccessBarred)
