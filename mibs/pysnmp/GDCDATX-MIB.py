#
# PySNMP MIB module GDCDATX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCDATX-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:05:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, enterprises, TimeTicks, Counter64, Gauge32, MibIdentifier, Integer32, NotificationType, IpAddress, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "enterprises", "TimeTicks", "Counter64", "Gauge32", "MibIdentifier", "Integer32", "NotificationType", "IpAddress", "ObjectIdentity", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
datx = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7))
datxSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 1))
dtx2011 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 2))
datxVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 1, 1))
datxMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 1, 2))
datxConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 1, 3))
datxDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 1, 4))
datxStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 1, 5))
datxMIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxMIBversion.setStatus('mandatory')
datxMaintTable = MibTable((1, 3, 6, 1, 4, 1, 498, 7, 1, 2, 1), )
if mibBuilder.loadTexts: datxMaintTable.setStatus('mandatory')
datxMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 7, 1, 2, 1, 1), ).setIndexNames((0, "GDCDATX-MIB", "datxMaintIndex"))
if mibBuilder.loadTexts: datxMaintEntry.setStatus('mandatory')
datxMaintIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxMaintIndex.setStatus('mandatory')
datxFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxFirmwareRev.setStatus('mandatory')
datxDefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("factoryDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxDefaultInit.setStatus('mandatory')
datxFrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxFrontPanel.setStatus('mandatory')
datxLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxLedStatus.setStatus('mandatory')
datxTransConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 1), )
if mibBuilder.loadTexts: datxTransConfigTable.setStatus('mandatory')
datxTransConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 1, 1), ).setIndexNames((0, "GDCDATX-MIB", "datxTransConfigIndex"))
if mibBuilder.loadTexts: datxTransConfigEntry.setStatus('mandatory')
datxTransConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxTransConfigIndex.setStatus('mandatory')
datxBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("asynchronous", 1), ("synchronous1200", 2), ("synchronous2400", 3), ("synchronous4800", 4), ("synchronous7200", 5), ("synchronous9600", 6), ("synchronous14400", 7), ("synchronous19200", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxBaudRate.setStatus('mandatory')
datxSyncTxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("slave", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxSyncTxClockSource.setStatus('mandatory')
datxEiaSyncClock = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxEiaSyncClock.setStatus('mandatory')
datxEiaConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 2), )
if mibBuilder.loadTexts: datxEiaConfigTable.setStatus('mandatory')
datxEiaConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 2, 1), ).setIndexNames((0, "GDCDATX-MIB", "datxEIAIndex"))
if mibBuilder.loadTexts: datxEiaConfigEntry.setStatus('mandatory')
datxEIAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxEIAIndex.setStatus('mandatory')
datxCarrierControl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dtr", 1), ("rts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxCarrierControl.setStatus('mandatory')
datxRtsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("real", 1), ("forced", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxRtsMode.setStatus('mandatory')
datxRtsCtsDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("t8mSec", 1), ("t75mSec", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxRtsCtsDelay.setStatus('mandatory')
datxEiaRdlControl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxEiaRdlControl.setStatus('mandatory')
datxDsrInAl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxDsrInAl.setStatus('mandatory')
datxEiaAlControl = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxEiaAlControl.setStatus('mandatory')
datxMiscConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 3), )
if mibBuilder.loadTexts: datxMiscConfigTable.setStatus('mandatory')
datxMiscConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 3, 1), ).setIndexNames((0, "GDCDATX-MIB", "datxMiscIndex"))
if mibBuilder.loadTexts: datxMiscConfigEntry.setStatus('mandatory')
datxMiscIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxMiscIndex.setStatus('mandatory')
datxSystemStatusOption = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxSystemStatusOption.setStatus('mandatory')
datxDualSignalingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("time3Sec", 2), ("time1Sec", 3), ("immediate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxDualSignalingTimer.setStatus('mandatory')
datxRegenCharLength = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bits8", 1), ("bits9", 2), ("bits10", 3), ("bits11", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxRegenCharLength.setStatus('mandatory')
datxRegenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxRegenMode.setStatus('mandatory')
datxAsyncRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("async4800", 1), ("async7200", 2), ("async9600", 3), ("async14400", 4), ("async19200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxAsyncRate.setStatus('mandatory')
datxDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 7, 1, 4, 1), )
if mibBuilder.loadTexts: datxDiagnosticsTable.setStatus('mandatory')
datxDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 7, 1, 4, 1, 1), ).setIndexNames((0, "GDCDATX-MIB", "datxDiagnosticsIndex"))
if mibBuilder.loadTexts: datxDiagEntry.setStatus('mandatory')
datxDiagnosticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxDiagnosticsIndex.setStatus('mandatory')
datxDiagTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noTest", 1), ("selfTest", 2), ("analoop", 3), ("analoopSelfTest", 4), ("remoteDL", 5), ("remoteDLselfTest", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datxDiagTest.setStatus('mandatory')
datxTestError = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noError", 1), ("testError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxTestError.setStatus('mandatory')
datxTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 4, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxTestDuration.setStatus('mandatory')
datxStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1), )
if mibBuilder.loadTexts: datxStatusTable.setStatus('mandatory')
datxStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1), ).setIndexNames((0, "GDCDATX-MIB", "datxStatusIndex"))
if mibBuilder.loadTexts: datxStatusEntry.setStatus('mandatory')
datxStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxStatusIndex.setStatus('mandatory')
datxDTRstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxDTRstatus.setStatus('mandatory')
datxRDLstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxRDLstatus.setStatus('mandatory')
datxCOstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxCOstatus.setStatus('mandatory')
datxCTSstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxCTSstatus.setStatus('mandatory')
datxRTSstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxRTSstatus.setStatus('mandatory')
datxTMstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxTMstatus.setStatus('mandatory')
datxALstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxALstatus.setStatus('mandatory')
datxDSRstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxDSRstatus.setStatus('mandatory')
datxRXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxRXclock.setStatus('mandatory')
datxTXclock = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxTXclock.setStatus('mandatory')
datxEXTclock = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxEXTclock.setStatus('mandatory')
datxAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 7, 1, 5, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: datxAlarmStatus.setStatus('mandatory')
dtx2011AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 2, 1))
dtx2011NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 2, 1, 1))
dtx2011DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 2, 1, 2))
dtx2011PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 2, 1, 3))
dtx2011DCDLossAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 2, 1, 4))
dtx2011NoExtClockAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 7, 2, 1, 5))
mibBuilder.exportSymbols("GDCDATX-MIB", datxCOstatus=datxCOstatus, datxEiaConfigTable=datxEiaConfigTable, datxRegenMode=datxRegenMode, datxBaudRate=datxBaudRate, gdc=gdc, datxRXclock=datxRXclock, datxStatusIndex=datxStatusIndex, datxDiagnostics=datxDiagnostics, datxDefaultInit=datxDefaultInit, datxMIBversion=datxMIBversion, datxDiagEntry=datxDiagEntry, datxAsyncRate=datxAsyncRate, datxRtsCtsDelay=datxRtsCtsDelay, datx=datx, datxStatus=datxStatus, datxStatusEntry=datxStatusEntry, datxLedStatus=datxLedStatus, datxEiaRdlControl=datxEiaRdlControl, dtx2011DiagRxErrAlm=dtx2011DiagRxErrAlm, datxMiscIndex=datxMiscIndex, datxTXclock=datxTXclock, datxMaintEntry=datxMaintEntry, dtx2011PowerUpAlm=dtx2011PowerUpAlm, dtx2011DCDLossAlm=dtx2011DCDLossAlm, datxDiagnosticsTable=datxDiagnosticsTable, datxFirmwareRev=datxFirmwareRev, datxSyncTxClockSource=datxSyncTxClockSource, datxCarrierControl=datxCarrierControl, datxFrontPanel=datxFrontPanel, dtx2011=dtx2011, datxDiagTest=datxDiagTest, datxALstatus=datxALstatus, datxEiaSyncClock=datxEiaSyncClock, datxTMstatus=datxTMstatus, datxRtsMode=datxRtsMode, datxMaintIndex=datxMaintIndex, datxDsrInAl=datxDsrInAl, datxEiaAlControl=datxEiaAlControl, datxMaintTable=datxMaintTable, datxTransConfigTable=datxTransConfigTable, datxEiaConfigEntry=datxEiaConfigEntry, datxTestError=datxTestError, dtx2011NoExtClockAlm=dtx2011NoExtClockAlm, datxMiscConfigTable=datxMiscConfigTable, datxAlarmStatus=datxAlarmStatus, datxDualSignalingTimer=datxDualSignalingTimer, datxTransConfigEntry=datxTransConfigEntry, datxConfiguration=datxConfiguration, datxRDLstatus=datxRDLstatus, datxTransConfigIndex=datxTransConfigIndex, datxSystem=datxSystem, datxSystemStatusOption=datxSystemStatusOption, datxDTRstatus=datxDTRstatus, dtx2011AlarmData=dtx2011AlarmData, dtx2011NoResponseAlm=dtx2011NoResponseAlm, datxStatusTable=datxStatusTable, datxRTSstatus=datxRTSstatus, datxTestDuration=datxTestDuration, datxDSRstatus=datxDSRstatus, datxMaintenance=datxMaintenance, datxCTSstatus=datxCTSstatus, datxVersion=datxVersion, datxDiagnosticsIndex=datxDiagnosticsIndex, datxMiscConfigEntry=datxMiscConfigEntry, datxRegenCharLength=datxRegenCharLength, datxEXTclock=datxEXTclock, datxEIAIndex=datxEIAIndex)
