#
# PySNMP MIB module REDSTONE-AAA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDSTONE-AAA-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:46:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
rsMgmt, = mibBuilder.importSymbols("REDSTONE-SMI", "rsMgmt")
RsName, = mibBuilder.importSymbols("REDSTONE-TC", "RsName")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, Counter32, MibIdentifier, Gauge32, ObjectIdentity, TimeTicks, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Unsigned32, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "MibIdentifier", "Gauge32", "ObjectIdentity", "TimeTicks", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Unsigned32", "iso", "ModuleIdentity")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
rsAaaMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2773, 2, 20))
rsAaaMIB.setRevisions(('1999-06-01 00:00',))
if mibBuilder.loadTexts: rsAaaMIB.setLastUpdated('9906010000Z')
if mibBuilder.loadTexts: rsAaaMIB.setOrganization('Redstone Communications Inc.')
class RsAaaDomainName(DisplayString):
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 63)

rsAaaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1))
rsAaaAssignment = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1))
rsAaaAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 2))
rsAaaAccounting = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 3))
rsAaaAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4))
rsAaaAssignGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 1))
rsAaaAssignBrasLicense = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAssignBrasLicense.setStatus('current')
rsAaaAssignBrasLicensedUsers = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsAaaAssignBrasLicensedUsers.setStatus('current')
rsAaaAssignDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2))
rsAaaAssignDomainTable = MibTable((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2, 1), )
if mibBuilder.loadTexts: rsAaaAssignDomainTable.setStatus('current')
rsAaaAssignDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2, 1, 1), ).setIndexNames((1, "REDSTONE-AAA-MIB", "rsAaaAssignDomainName"))
if mibBuilder.loadTexts: rsAaaAssignDomainEntry.setStatus('current')
rsAaaAssignDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2, 1, 1, 1), RsAaaDomainName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsAaaAssignDomainName.setStatus('current')
rsAaaAssignDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAaaAssignDomainRowStatus.setStatus('current')
rsAaaAssignDomainRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2, 1, 1, 3), RsName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAaaAssignDomainRouterName.setStatus('current')
rsAaaAssignDomainLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rsAaaAssignDomainLoopback.setStatus('current')
rsAaaAuthGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 2, 1))
rsAaaAcctGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 3, 1))
rsAaaAcctInterval = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(600, 64800), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAcctInterval.setStatus('current')
rsAaaAcctDupServerRouterName = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 3, 1, 2), RsName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAcctDupServerRouterName.setStatus('current')
rsAaaAddrGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 1))
rsAaaAddrPoolDefault = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("local", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAddrPoolDefault.setStatus('current')
rsAaaAddrNameServer = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2))
rsAaaAddrDns = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2, 1))
rsAaaAddrWins = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2, 2))
rsAaaAddrDnsPrimary = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAddrDnsPrimary.setStatus('current')
rsAaaAddrDnsSecondary = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAddrDnsSecondary.setStatus('current')
rsAaaAddrWinsPrimary = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAddrWinsPrimary.setStatus('current')
rsAaaAddrWinsSecondary = MibScalar((1, 3, 6, 1, 4, 1, 2773, 2, 20, 1, 4, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsAaaAddrWinsSecondary.setStatus('current')
rsAaaMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 4))
rsAaaMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 4, 1))
rsAaaMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2773, 2, 20, 4, 2))
rsAaaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2773, 2, 20, 4, 1, 1)).setObjects(("REDSTONE-AAA-MIB", "rsAaaGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsAaaCompliance = rsAaaCompliance.setStatus('current')
rsAaaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2773, 2, 20, 4, 2, 1)).setObjects(("REDSTONE-AAA-MIB", "rsAaaAssignBrasLicense"), ("REDSTONE-AAA-MIB", "rsAaaAssignBrasLicensedUsers"), ("REDSTONE-AAA-MIB", "rsAaaAssignDomainName"), ("REDSTONE-AAA-MIB", "rsAaaAssignDomainRowStatus"), ("REDSTONE-AAA-MIB", "rsAaaAssignDomainRouterName"), ("REDSTONE-AAA-MIB", "rsAaaAssignDomainLoopback"), ("REDSTONE-AAA-MIB", "rsAaaAcctInterval"), ("REDSTONE-AAA-MIB", "rsAaaAcctDupServerRouterName"), ("REDSTONE-AAA-MIB", "rsAaaAddrPoolDefault"), ("REDSTONE-AAA-MIB", "rsAaaAddrDnsPrimary"), ("REDSTONE-AAA-MIB", "rsAaaAddrDnsSecondary"), ("REDSTONE-AAA-MIB", "rsAaaAddrWinsPrimary"), ("REDSTONE-AAA-MIB", "rsAaaAddrWinsSecondary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsAaaGroup = rsAaaGroup.setStatus('current')
mibBuilder.exportSymbols("REDSTONE-AAA-MIB", rsAaaAddrWinsPrimary=rsAaaAddrWinsPrimary, rsAaaAssignDomainRowStatus=rsAaaAssignDomainRowStatus, RsAaaDomainName=RsAaaDomainName, rsAaaAssignDomainLoopback=rsAaaAssignDomainLoopback, rsAaaAddress=rsAaaAddress, rsAaaAssignment=rsAaaAssignment, rsAaaAssignDomainEntry=rsAaaAssignDomainEntry, rsAaaAssignDomain=rsAaaAssignDomain, PYSNMP_MODULE_ID=rsAaaMIB, rsAaaMIBConformance=rsAaaMIBConformance, rsAaaAddrWins=rsAaaAddrWins, rsAaaAuthGeneral=rsAaaAuthGeneral, rsAaaAddrDnsSecondary=rsAaaAddrDnsSecondary, rsAaaAddrGeneral=rsAaaAddrGeneral, rsAaaMIB=rsAaaMIB, rsAaaAssignBrasLicense=rsAaaAssignBrasLicense, rsAaaAddrPoolDefault=rsAaaAddrPoolDefault, rsAaaAssignBrasLicensedUsers=rsAaaAssignBrasLicensedUsers, rsAaaAddrDns=rsAaaAddrDns, rsAaaAuthentication=rsAaaAuthentication, rsAaaAddrDnsPrimary=rsAaaAddrDnsPrimary, rsAaaMIBCompliances=rsAaaMIBCompliances, rsAaaAcctInterval=rsAaaAcctInterval, rsAaaMIBGroups=rsAaaMIBGroups, rsAaaAcctDupServerRouterName=rsAaaAcctDupServerRouterName, rsAaaAssignDomainTable=rsAaaAssignDomainTable, rsAaaAssignDomainRouterName=rsAaaAssignDomainRouterName, rsAaaObjects=rsAaaObjects, rsAaaAddrNameServer=rsAaaAddrNameServer, rsAaaGroup=rsAaaGroup, rsAaaAddrWinsSecondary=rsAaaAddrWinsSecondary, rsAaaAssignGeneral=rsAaaAssignGeneral, rsAaaAcctGeneral=rsAaaAcctGeneral, rsAaaAssignDomainName=rsAaaAssignDomainName, rsAaaAccounting=rsAaaAccounting, rsAaaCompliance=rsAaaCompliance)
