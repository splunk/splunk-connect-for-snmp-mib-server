#
# PySNMP MIB module ITOUCH-DECNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-DECNET-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:46:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
iTouch, DateTime = mibBuilder.importSymbols("ITOUCH-MIB", "iTouch", "DateTime")
PhivAddr, = mibBuilder.importSymbols("RFC1289-phivMIB", "PhivAddr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Counter64, TimeTicks, Integer32, ModuleIdentity, ObjectIdentity, Gauge32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, Counter32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "TimeTicks", "Integer32", "ModuleIdentity", "ObjectIdentity", "Gauge32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "Counter32", "NotificationType", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xDecnet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14))
xRcp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 1))
xPhiv = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2))
xPhivRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 1))
xPhivCircuit = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 2))
xPhivImport = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 3))
xPhivImportArea = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 4))
xPhivExport = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 5))
xPhivExportArea = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 6))
xPhivFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 7))
xPhivTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 14, 2, 8))
rcpRemoteAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 14, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcpRemoteAddress.setStatus('mandatory')
phivPathSelection = MibScalar((1, 3, 6, 1, 4, 1, 33, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("roundRobin", 1), ("samePath", 2))).clone('roundRobin')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivPathSelection.setStatus('mandatory')
phivMaxPaths = MibScalar((1, 3, 6, 1, 4, 1, 33, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivMaxPaths.setStatus('mandatory')
phivStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("disabled", 2), ("noAddressSpecified", 3), ("noInterfacesEnabled", 4), ("badCost", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivStatus.setStatus('mandatory')
phivCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1), )
if mibBuilder.loadTexts: phivCircuitTable.setStatus('mandatory')
phivCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1), ).setIndexNames((0, "ITOUCH-DECNET-MIB", "xPhivCircuitIndex"))
if mibBuilder.loadTexts: phivCircuitEntry.setStatus('mandatory')
xPhivCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xPhivCircuitIndex.setStatus('mandatory')
phivCircuitRoutingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitRoutingTimer.setStatus('mandatory')
phivCircuitOperCost = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitOperCost.setStatus('mandatory')
phivCircuitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitErrors.setStatus('mandatory')
phivCircuitLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noError", 1), ("addressOutOfRange", 2), ("ageExceeded", 3), ("destinationUnreachable", 4), ("packetFormatError", 5), ("packetOversized", 6), ("partialRoutingUpdate", 7), ("verificationReject", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitLastError.setStatus('mandatory')
phivCircuitLastErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 6), DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitLastErrorTime.setStatus('mandatory')
phivCircuitLastErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(22, 22)).setFixedLength(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitLastErrorData.setStatus('mandatory')
phivCircuitProtocolPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5))).clone(namedValues=NamedValues(("low", 1), ("medium", 3), ("high", 5))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitProtocolPriority.setStatus('mandatory')
phivCircuitRoutingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitRoutingPriority.setStatus('mandatory')
phivCircuitImportTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1), )
if mibBuilder.loadTexts: phivCircuitImportTable.setStatus('mandatory')
phivCircuitImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1, 1), ).setIndexNames((0, "ITOUCH-DECNET-MIB", "phivCircuitImportIf"), (0, "ITOUCH-DECNET-MIB", "phivCircuitImportAddr"), (0, "ITOUCH-DECNET-MIB", "phivCircuitImportMask"))
if mibBuilder.loadTexts: phivCircuitImportEntry.setStatus('mandatory')
phivCircuitImportIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitImportIf.setStatus('mandatory')
phivCircuitImportAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitImportAddr.setStatus('mandatory')
phivCircuitImportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1, 1, 3), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitImportMask.setStatus('mandatory')
phivCircuitImportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitImportAction.setStatus('mandatory')
phivCircuitImportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitImportStatus.setStatus('mandatory')
phivCircuitImportAreaTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1), )
if mibBuilder.loadTexts: phivCircuitImportAreaTable.setStatus('mandatory')
phivCircuitImportAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1, 1), ).setIndexNames((0, "ITOUCH-DECNET-MIB", "phivCircuitImportAreaIf"), (0, "ITOUCH-DECNET-MIB", "phivCircuitImportAreaAddr"), (0, "ITOUCH-DECNET-MIB", "phivCircuitImportAreaMask"))
if mibBuilder.loadTexts: phivCircuitImportAreaEntry.setStatus('mandatory')
phivCircuitImportAreaIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitImportAreaIf.setStatus('mandatory')
phivCircuitImportAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitImportAreaAddr.setStatus('mandatory')
phivCircuitImportAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1, 1, 3), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitImportAreaMask.setStatus('mandatory')
phivCircuitImportAreaAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitImportAreaAction.setStatus('mandatory')
phivCircuitImportAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitImportAreaStatus.setStatus('mandatory')
phivCircuitExportTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1), )
if mibBuilder.loadTexts: phivCircuitExportTable.setStatus('mandatory')
phivCircuitExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1, 1), ).setIndexNames((0, "ITOUCH-DECNET-MIB", "phivCircuitExportIf"), (0, "ITOUCH-DECNET-MIB", "phivCircuitExportAddr"), (0, "ITOUCH-DECNET-MIB", "phivCircuitExportMask"))
if mibBuilder.loadTexts: phivCircuitExportEntry.setStatus('mandatory')
phivCircuitExportIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitExportIf.setStatus('mandatory')
phivCircuitExportAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitExportAddr.setStatus('mandatory')
phivCircuitExportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1, 1, 3), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitExportMask.setStatus('mandatory')
phivCircuitExportAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExportAction.setStatus('mandatory')
phivCircuitExportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExportStatus.setStatus('mandatory')
phivCircuitExportAreaTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1), )
if mibBuilder.loadTexts: phivCircuitExportAreaTable.setStatus('mandatory')
phivCircuitExportAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1, 1), ).setIndexNames((0, "ITOUCH-DECNET-MIB", "phivCircuitExportAreaIf"), (0, "ITOUCH-DECNET-MIB", "phivCircuitExportAreaAddr"), (0, "ITOUCH-DECNET-MIB", "phivCircuitExportAreaMask"))
if mibBuilder.loadTexts: phivCircuitExportAreaEntry.setStatus('mandatory')
phivCircuitExportAreaIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitExportAreaIf.setStatus('mandatory')
phivCircuitExportAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitExportAreaAddr.setStatus('mandatory')
phivCircuitExportAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1, 1, 3), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitExportAreaMask.setStatus('mandatory')
phivCircuitExportAreaAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hide", 1), ("advertise", 2))).clone('advertise')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExportAreaAction.setStatus('mandatory')
phivCircuitExportAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitExportAreaStatus.setStatus('mandatory')
phivCircuitFilterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1), )
if mibBuilder.loadTexts: phivCircuitFilterTable.setStatus('mandatory')
phivCircuitFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1), ).setIndexNames((0, "ITOUCH-DECNET-MIB", "phivCircuitFilterIf"), (0, "ITOUCH-DECNET-MIB", "phivCircuitFilterDstAddr"), (0, "ITOUCH-DECNET-MIB", "phivCircuitFilterDstMask"), (0, "ITOUCH-DECNET-MIB", "phivCircuitFilterSrcAddr"), (0, "ITOUCH-DECNET-MIB", "phivCircuitFilterSrcMask"))
if mibBuilder.loadTexts: phivCircuitFilterEntry.setStatus('mandatory')
phivCircuitFilterIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitFilterIf.setStatus('mandatory')
phivCircuitFilterDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 2), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitFilterDstAddr.setStatus('mandatory')
phivCircuitFilterDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 3), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitFilterDstMask.setStatus('mandatory')
phivCircuitFilterSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 4), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitFilterSrcAddr.setStatus('mandatory')
phivCircuitFilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 5), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivCircuitFilterSrcMask.setStatus('mandatory')
phivCircuitFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("forward", 2))).clone('forward')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitFilterAction.setStatus('mandatory')
phivCircuitFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivCircuitFilterStatus.setStatus('mandatory')
phivTrafficSort = MibScalar((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: phivTrafficSort.setStatus('mandatory')
phivTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2), )
if mibBuilder.loadTexts: phivTrafficTable.setStatus('mandatory')
phivTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2, 1), ).setIndexNames((0, "ITOUCH-DECNET-MIB", "phivTrafficIndex"))
if mibBuilder.loadTexts: phivTrafficEntry.setStatus('mandatory')
phivTrafficIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivTrafficIndex.setStatus('mandatory')
phivTrafficPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivTrafficPercent.setStatus('mandatory')
phivTrafficDst = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2, 1, 3), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivTrafficDst.setStatus('mandatory')
phivTrafficSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2, 1, 4), PhivAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivTrafficSrc.setStatus('mandatory')
phivTrafficIf = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 14, 2, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: phivTrafficIf.setStatus('mandatory')
mibBuilder.exportSymbols("ITOUCH-DECNET-MIB", phivTrafficIf=phivTrafficIf, phivCircuitImportIf=phivCircuitImportIf, phivCircuitExportAreaMask=phivCircuitExportAreaMask, phivCircuitRoutingTimer=phivCircuitRoutingTimer, phivTrafficSort=phivTrafficSort, phivCircuitImportAreaAction=phivCircuitImportAreaAction, phivCircuitExportAreaAction=phivCircuitExportAreaAction, phivCircuitImportStatus=phivCircuitImportStatus, phivCircuitImportAreaIf=phivCircuitImportAreaIf, phivCircuitExportIf=phivCircuitExportIf, phivTrafficTable=phivTrafficTable, phivCircuitExportStatus=phivCircuitExportStatus, phivCircuitImportTable=phivCircuitImportTable, phivCircuitImportAreaAddr=phivCircuitImportAreaAddr, xPhivExportArea=xPhivExportArea, xPhiv=xPhiv, phivCircuitImportAreaTable=phivCircuitImportAreaTable, phivCircuitExportAddr=phivCircuitExportAddr, xPhivRoute=xPhivRoute, phivCircuitExportAction=phivCircuitExportAction, phivCircuitExportAreaTable=phivCircuitExportAreaTable, phivTrafficSrc=phivTrafficSrc, phivCircuitFilterTable=phivCircuitFilterTable, phivTrafficEntry=phivTrafficEntry, phivCircuitImportEntry=phivCircuitImportEntry, phivMaxPaths=phivMaxPaths, phivCircuitTable=phivCircuitTable, phivCircuitOperCost=phivCircuitOperCost, xPhivCircuitIndex=xPhivCircuitIndex, phivCircuitImportAction=phivCircuitImportAction, phivTrafficPercent=phivTrafficPercent, phivCircuitLastError=phivCircuitLastError, phivTrafficIndex=phivTrafficIndex, phivCircuitExportAreaAddr=phivCircuitExportAreaAddr, phivCircuitLastErrorData=phivCircuitLastErrorData, phivCircuitErrors=phivCircuitErrors, phivCircuitImportAreaStatus=phivCircuitImportAreaStatus, phivCircuitExportTable=phivCircuitExportTable, phivCircuitExportMask=phivCircuitExportMask, phivCircuitExportAreaIf=phivCircuitExportAreaIf, phivTrafficDst=phivTrafficDst, phivCircuitFilterEntry=phivCircuitFilterEntry, xPhivImportArea=xPhivImportArea, phivCircuitFilterDstAddr=phivCircuitFilterDstAddr, phivCircuitExportEntry=phivCircuitExportEntry, phivCircuitImportAddr=phivCircuitImportAddr, phivCircuitLastErrorTime=phivCircuitLastErrorTime, phivCircuitFilterAction=phivCircuitFilterAction, phivCircuitExportAreaEntry=phivCircuitExportAreaEntry, xRcp=xRcp, phivCircuitProtocolPriority=phivCircuitProtocolPriority, xPhivExport=xPhivExport, xPhivTraffic=xPhivTraffic, rcpRemoteAddress=rcpRemoteAddress, phivCircuitImportMask=phivCircuitImportMask, phivCircuitExportAreaStatus=phivCircuitExportAreaStatus, xPhivImport=xPhivImport, phivStatus=phivStatus, xPhivFilter=xPhivFilter, phivCircuitFilterSrcAddr=phivCircuitFilterSrcAddr, phivCircuitFilterIf=phivCircuitFilterIf, phivCircuitFilterStatus=phivCircuitFilterStatus, xDecnet=xDecnet, phivCircuitRoutingPriority=phivCircuitRoutingPriority, phivCircuitImportAreaMask=phivCircuitImportAreaMask, phivCircuitImportAreaEntry=phivCircuitImportAreaEntry, phivCircuitFilterDstMask=phivCircuitFilterDstMask, phivCircuitEntry=phivCircuitEntry, phivCircuitFilterSrcMask=phivCircuitFilterSrcMask, phivPathSelection=phivPathSelection, xPhivCircuit=xPhivCircuit)
