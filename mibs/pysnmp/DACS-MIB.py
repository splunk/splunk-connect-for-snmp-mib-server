#
# PySNMP MIB module DACS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DACS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:21:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Gauge32, Integer32, ObjectIdentity, NotificationType, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, Counter64, TimeTicks, Counter32, iso, Unsigned32, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Integer32", "ObjectIdentity", "NotificationType", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "Counter64", "TimeTicks", "Counter32", "iso", "Unsigned32", "MibIdentifier", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

rad = MibIdentifier((1, 3, 6, 1, 4, 1, 164))
radTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 1))
radFddi = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 2))
radWan = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3))
radBridges = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 4))
radConverters = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 5))
radGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6))
radStkHub = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 7))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1))
radSysTR = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 1))
radRADring = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 1, 1))
radTMA = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 1, 2))
radRingMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 1, 3))
radSysFddi = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 2))
radFDX100 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 2, 1))
radSysWan = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3))
radMP2100 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 1))
radMP2104 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 2))
radMP2100B = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 3))
radMP2100F = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 4))
radMP2100H = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 5))
radMP2104H = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 6))
radMP2200B = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 7))
radMP2200F = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 8))
radMX3000 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 9))
radMX3004 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 10))
radMX30 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 11))
radMX300 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 12))
radVOIP = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 13))
radKM2100 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 15))
radKM2104 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 16))
radDXC30 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 20))
radDXC10A = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 21))
radDXC8R = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 22))
radDXC30E = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 23))
radFcdT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 30))
radFcdE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 31))
radFcdE1I = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 32))
radFcdT1M = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 33))
radFcdE1M = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 34))
radFcdIP = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 35))
radFcdT1A = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 36))
radFcdE1A = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 37))
radFcdW = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 38))
radHtuE1Sa = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 40))
radHtuE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 41))
radHtu2Sa = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 42))
radHtu2 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 43))
radAsmi450R768Sa = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 44))
radAsmi450R768 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 45))
radAsmi450R1152Sa = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 46))
radAsmi450R1152 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 47))
radLrs12F = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 48))
radLrs12B = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 49))
radHcdE1Sa = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 51))
radHcdE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 52))
radHtuT1Sa = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 53))
radHtuT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 54))
radOptimux4E1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 55))
radOptimux4T1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 56))
radOptimuxXLE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 57))
radOptimuxXLT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 58))
radOptimuxXL16E1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 59))
radImx64 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 60))
radImx6L = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 61))
radImx2 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 62))
radImx4T1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 63))
radImx4E1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 64))
radImx2T1E1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 65))
radHtuE1SaV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 70))
radHtuE1V2 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 71))
radFomiE3 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 72))
radFomiT3 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 73))
radOpt4E1C = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 74))
radOpt4T1C = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 75))
radPrbiE3 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 76))
radPrbiT3 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 77))
radHcd4Sa = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 78))
radFRmon = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 3, 80))
radSysBRG = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4))
radTRE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 1))
radTRE1D = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 2))
radTRE8 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 3))
radTRE8D = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 4))
radMBE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 5))
radMBE1D = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 6))
radMBE8 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 7))
radMBE8D = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 8))
radMLBT = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 9))
radFEB4DAS = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 10))
radTrimBrg10 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 11))
radTrimBrg16 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 12))
radRRTRE8 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 13))
radRRTRE8D = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 14))
radRRMLBT = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 15))
radRRMLBTF = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 16))
radRRTRE1D = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 17))
radTRERAS = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 18))
radTRERASa = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 19))
radMBERAS = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 20))
radMBERASa = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 21))
radFEB4FDX = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 22))
radFEB4SAS = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 23))
radRRFTBDAS = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 24))
radRRFTBSAS = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 25))
radFTBDAS = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 26))
radFTBSAS = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 27))
radFastWay100 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 4, 28))
radSysCnvrtr = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5))
radSTC1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 1))
radSTC2 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 3))
radSTC1UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 4))
radSTC2UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 6))
radFTC1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 10))
radFTC2 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 12))
radFTC1UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 13))
radFTC2UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 15))
radSEC1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 20))
radSEC2 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 22))
radSEC1UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 23))
radSEC2UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 25))
radFEC1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 30))
radFEC2 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 32))
radFEC1UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 33))
radFEC2UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 5, 35))
radSysStkHub = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7))
radRBHE = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 1))
radRBHT = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 2))
radETS4fddiDAS = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 3))
radETS4fddiSAS = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 4))
radSAHEMX = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 5))
radSAHTM = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 6))
radETS4 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 7))
radSAHEMU = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 8))
unknown = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 9))
radSAH16Eint = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 10))
radSAH16Tint = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 11))
radSAH16Eext = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 12))
radSAH16Text = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 7, 13))
radSysPS = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8))
radSPS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 1))
radSPS3 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 2))
radSPS6 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 3))
radSPS9 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 4))
radSPS12 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 5))
radAPD2 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 6))
radAPD8 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 7))
radAPS8 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 8))
radAPS16 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 9))
radAPS24 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 10))
radSPS3S = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 11))
radFPS8 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 12))
radFPS12 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 13))
radSPS3ScSL = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 14))
radSPS3Sc2S = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 15))
radFPS8c = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 16))
radFPS4 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 8, 17))
radSysEth = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 9))
radEP8T = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 1))
radEP4TAUI = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 2))
radEP4T2FL = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 3))
radEP4TFL = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 4))
radEP4FL = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 5))
radEPR8T = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 7))
radEPR4TAUI = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 8))
radEPR4T2FL = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 9))
radEPR4TFL = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 10))
radEPR4FL = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 9, 11))
radSysRtr = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 11))
radRTED = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 1))
radRTEM = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 2))
radRTEC = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 3))
radWebRanger = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 4))
radTinyRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 11, 5))
radSysAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12))
radStarSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 1))
radStarSwitchATM25 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 1, 1))
radStarSwitchATM25L = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 1, 2))
radStarSwitchATM155 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 1, 3))
radAtmCsuDsu = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2))
radAmcdE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 1))
radAmcdT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 2))
radAce20E = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 3))
radAce20T = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 4))
radAce2005 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 5))
radAce2002 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 6))
radAce2E = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 8))
radAce2T = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 2, 9))
radAce = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3))
radAce101 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 1))
radAce102 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 1, 12, 3, 2))
agnt = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 2))
agnHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnHwVersion.setStatus('mandatory')
agnTrapMask = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnTrapMask.setStatus('mandatory')
agnTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTrapValue.setStatus('deprecated')
agnChangeCnt = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnChangeCnt.setStatus('mandatory')
agnSpecific = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSpecific.setStatus('mandatory')
agnConfigMsg = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnConfigMsg.setStatus('mandatory')
mngTrapIpTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 7), )
if mibBuilder.loadTexts: mngTrapIpTable.setStatus('mandatory')
mngEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1), ).setIndexNames((0, "DACS-MIB", "mngID"))
if mibBuilder.loadTexts: mngEntry.setStatus('mandatory')
mngID = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mngID.setStatus('mandatory')
mngIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngIP.setStatus('mandatory')
mngIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngIPMask.setStatus('deprecated')
mngTrapMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mngTrapMask.setStatus('mandatory')
agnIndication = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("faulty", 1), ("warning", 2), ("normal", 3), ("minor", 4), ("major", 5), ("event", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnIndication.setStatus('mandatory')
agnMonitorModeCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnMonitorModeCmd.setStatus('mandatory')
agnLed = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnLed.setStatus('mandatory')
trapTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 11), )
if mibBuilder.loadTexts: trapTable.setStatus('mandatory')
trapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1), ).setIndexNames((0, "DACS-MIB", "trapID"))
if mibBuilder.loadTexts: trapEntry.setStatus('mandatory')
trapID = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapID.setStatus('mandatory')
trapVal = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapVal.setStatus('mandatory')
trapTimeSinceOccurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 11, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapTimeSinceOccurrence.setStatus('mandatory')
fileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 2, 12))
fileServerIP = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileServerIP.setStatus('mandatory')
fileName = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileName.setStatus('mandatory')
fileTransCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("swDwnLoad", 1), ("configDwnLoad", 2), ("configUpLoad", 3), ("coProcDwnLoad", 4), ("stateUpLoad", 5), ("dwnLoadUserFile", 6), ("upLoadUserFile", 7), ("noOp", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransCmd.setStatus('mandatory')
tftpRetryTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpRetryTimeOut.setStatus('mandatory')
tftpTotalTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpTotalTimeOut.setStatus('mandatory')
tftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noOp", 2), ("connecting", 3), ("transferringData", 4), ("endedTimeOut", 5), ("endedOk", 6), ("error", 7))).clone('noOp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpStatus.setStatus('mandatory')
tftpError = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="0000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpError.setStatus('mandatory')
fileTransferToSubSystems = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferToSubSystems.setStatus('mandatory')
fileNameWithinProduct = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 12, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileNameWithinProduct.setStatus('mandatory')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("on", 3), ("resetConfig", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('mandatory')
systemTiming = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 2, 14))
systemDate = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDate.setStatus('mandatory')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 14, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTime.setStatus('mandatory')
systemPort = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 2, 15))
physicalConnectorTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1), )
if mibBuilder.loadTexts: physicalConnectorTable.setStatus('mandatory')
physicalConnectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1), ).setIndexNames((0, "DACS-MIB", "portIdx"))
if mibBuilder.loadTexts: physicalConnectorEntry.setStatus('mandatory')
portIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIdx.setStatus('mandatory')
physicalConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 255))).clone(namedValues=NamedValues(("other", 1), ("v35", 2), ("rs530", 3), ("x21", 4), ("bnc", 5), ("utp", 6), ("aui", 7), ("rs422", 8), ("crossUtp", 9), ("rj45", 10), ("v24", 11), ("g703", 12), ("termBlock3AndRj45", 13), ("terminalBlock3", 14), ("terminalBlock5", 15), ("terminalBlock7", 16), ("db25", 17), ("db15", 18), ("rj45ethernet", 19), ("termBlock5AndRj45", 20), ("db9", 21), ("g703E1", 22), ("g703E1-LTU", 23), ("sc", 24), ("st", 25), ("stl", 26), ("fc", 27), ("tb5w", 28), ("termBlock6AndRj45", 29), ("ethBnc", 30), ("scsi26", 31), ("eth4381", 32), ("twoBnc", 33), ("scsi50", 34), ("twoMiniBnc", 35), ("sf1", 36), ("terminalBlock4", 37), ("sf2", 38), ("v36", 40), ("block4W", 41), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalConnector.setStatus('mandatory')
portOptWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("nm850", 2), ("nm1300", 3), ("nm1300Laser", 4), ("nm1550Laser", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOptWaveLength.setStatus('mandatory')
prtSupervisory = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2))
prtSpTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1), )
if mibBuilder.loadTexts: prtSpTable.setStatus('mandatory')
prtSpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtSupervisoryIndex"))
if mibBuilder.loadTexts: prtSpEntry.setStatus('mandatory')
prtSupervisoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSupervisoryIndex.setStatus('mandatory')
prtSupervisoryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("auto", 1), ("s300bps", 2), ("s1200bps", 3), ("s2400bps", 4), ("s4800bps", 5), ("s9600bps", 6), ("s19200bps", 7), ("s38400bps", 8), ("s57600bps", 9), ("s115200bps", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSupervisoryRate.setStatus('mandatory')
prtSupervisoryDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dataBits7", 1), ("dataBits8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSupervisoryDataBits.setStatus('mandatory')
prtSupervisoryParity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSupervisoryParity.setStatus('mandatory')
prtSupervisoryStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("stopBits1", 2), ("stopBits1dot5", 3), ("stopBits2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSupervisoryStopBits.setStatus('mandatory')
prtSupervisoryUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("noUse", 2), ("terminal", 3), ("nmsSlip", 4), ("nmsPpp", 5), ("muxSlip", 6), ("muxPpp", 7), ("dialOut", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSupervisoryUsage.setStatus('mandatory')
prtSupervisoryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("dce", 2), ("dte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSupervisoryInterface.setStatus('mandatory')
prtSupervisoryCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("rts", 3), ("dteWait", 4), ("dteIgnore", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSupervisoryCTS.setStatus('mandatory')
prtSupervisoryDcdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("d0", 2), ("d10", 3), ("d50", 4), ("d100", 5), ("d200", 6), ("d300", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSupervisoryDcdDelay.setStatus('mandatory')
prtSupervisoryDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("dtr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSupervisoryDSR.setStatus('mandatory')
prtSupervisoryRoutProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("proprietary", 3), ("rip2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSupervisoryRoutProtocol.setStatus('mandatory')
prtPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3))
prtPerfTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1), )
if mibBuilder.loadTexts: prtPerfTable.setStatus('mandatory')
prtPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtPerfIdx"), (0, "DACS-MIB", "prtPerfPeriodRef"))
if mibBuilder.loadTexts: prtPerfEntry.setStatus('mandatory')
prtPerfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtPerfIdx.setStatus('mandatory')
prtPerfPeriodRef = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currentPeriod", 1), ("lastPeriod", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtPerfPeriodRef.setStatus('mandatory')
prtPerfElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtPerfElapsedTime.setStatus('mandatory')
prtPerfUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtPerfUAS.setStatus('mandatory')
prtPerfES = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtPerfES.setStatus('mandatory')
prtPerfSES = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtPerfSES.setStatus('mandatory')
prtPerfBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtPerfBBE.setStatus('mandatory')
prtPerfBlocksPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtPerfBlocksPerSec.setStatus('mandatory')
prtPerfTimeTag = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtPerfTimeTag.setStatus('mandatory')
prtPerfSaveAndResetCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtPerfSaveAndResetCmd.setStatus('mandatory')
prtTest = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4))
prtTestTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1), )
if mibBuilder.loadTexts: prtTestTable.setStatus('mandatory')
prtTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtTestIdx"))
if mibBuilder.loadTexts: prtTestEntry.setStatus('mandatory')
prtTestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtTestIdx.setStatus('mandatory')
prtTestCmdAndStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtTestCmdAndStatus.setStatus('mandatory')
prtBertCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtBertCounter.setStatus('mandatory')
prtTestInitiator = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("user", 2), ("remoteUnit", 3), ("dteRouter", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtTestInitiator.setStatus('mandatory')
prtParam = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5))
prtParamTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1), )
if mibBuilder.loadTexts: prtParamTable.setStatus('mandatory')
prtParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtParamIdx"))
if mibBuilder.loadTexts: prtParamEntry.setStatus('mandatory')
prtParamIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtParamIdx.setStatus('mandatory')
prtControlCnfg = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 15, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtControlCnfg.setStatus('mandatory')
systemResetAllStatsCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemResetAllStatsCmd.setStatus('mandatory')
systemClearTablesCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("tempCnfgTables", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemClearTablesCmd.setStatus('mandatory')
systemParameter = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemParameter.setStatus('mandatory')
agnGlobalAlarmMask = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnGlobalAlarmMask.setStatus('mandatory')
alarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSeverity.setStatus('mandatory')
alarmState = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmState.setStatus('mandatory')
agnTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTestStatus.setStatus('mandatory')
systemSaveAndResetAllStatsCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSaveAndResetAllStatsCmd.setStatus('mandatory')
systemDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 164, 6, 2, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDefaultGateway.setStatus('mandatory')
systemPsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 6, 2, 25), )
if mibBuilder.loadTexts: systemPsTable.setStatus('mandatory')
systemPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1), ).setIndexNames((0, "DACS-MIB", "systemPsIndex1"), (0, "DACS-MIB", "systemPsIndex2"))
if mibBuilder.loadTexts: systemPsEntry.setStatus('mandatory')
systemPsIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPsIndex1.setStatus('mandatory')
systemPsIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPsIndex2.setStatus('mandatory')
systemPsType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 6, 2, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ac", 2), ("dc", 3), ("acDc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemPsType.setStatus('mandatory')
tftpStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 6, 1) + (0,1)).setObjects(("DACS-MIB", "tftpStatus"))
agnStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 6, 1) + (0,2)).setObjects(("DACS-MIB", "agnIndication"))
prtStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 6, 1) + (0,3))
wanGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1))
muxHub = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2))
chasWanGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 1))
agnWanGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2))
mdlWanGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 3))
prtWanGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 4))
mapWanGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 5))
diverseIfWanGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6))
statAgnGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1))
cnfgAgnGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2))
cmprAgnGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3))
alrBuffGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4))
agnFlipDb = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5))
agnSa = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 6))
agnListDecoding = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7))
agnSystemDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8))
agnVoiceSwitching = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9))
agnSigProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10))
agnSystemTs = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11))
statMdlGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1))
cnfgMdlGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2))
cmprMdlGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3))
statPrtGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1))
cnfgPrtGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2))
cmprPrtGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3))
agnMux = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 1))
mdlMux = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 2))
prtMux = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3))
statPrtMux = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1))
cnfgPrtMux = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2))
prtClCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1))
prtPh1MlCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2))
prtPhPlCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3))
prtLs2Cnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4))
prtHs4Cnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7))
prtHsiCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8))
prtPVc4Cnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9))
prtHsrCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10))
prtMbeCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11))
prtTreCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12))
prtLs6Cnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13))
prtVc3Cnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14))
prtVcPbxCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15))
prtIsdnCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16))
prtLogicalCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17))
prtFrPlusCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18))
prtMl4Cnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19))
prtAcmCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20))
chasVersion = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasVersion.setStatus('mandatory')
chasTotalNoOfSlt = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTotalNoOfSlt.setStatus('mandatory')
chasTotalNoOfIoSlt = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTotalNoOfIoSlt.setStatus('mandatory')
chasTotalNoOfPsSlt = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTotalNoOfPsSlt.setStatus('mandatory')
chasTotalNoOfClSlt = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chasTotalNoOfClSlt.setStatus('mandatory')
agnSDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ddMMYYYY", 1), ("mmDDYYYY", 2), ("yyyyDDMM", 3), ("yyyyMMDD", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnSDateFormat.setStatus('mandatory')
agnSDateCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnSDateCmd.setStatus('mandatory')
agnSTimeCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnSTimeCmd.setStatus('mandatory')
agnSActiveCnfg = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSActiveCnfg.setStatus('mandatory')
agnSEditCnfg = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSEditCnfg.setStatus('mandatory')
agnSLastCnfgFlipTime = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSLastCnfgFlipTime.setStatus('mandatory')
agnSLastCnfgFlipCause = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSLastCnfgFlipCause.setStatus('mandatory')
agnSEditBy = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("snmp", 2), ("terCon1", 3), ("terCon2", 4), ("terInbandCon1", 5), ("terInbandCon2", 6), ("lcd", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSEditBy.setStatus('mandatory')
agnSClkSrc = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("fallback", 2), ("internal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSClkSrc.setStatus('mandatory')
agnSAlrStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSAlrStatus.setStatus('mandatory')
agnSAlrStatusAll = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSAlrStatusAll.setStatus('mandatory')
agnSMaskedAlrStat = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSMaskedAlrStat.setStatus('mandatory')
agnSMaskedAlrStatAll = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSMaskedAlrStatAll.setStatus('mandatory')
agnSTstStatAll = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSTstStatAll.setStatus('mandatory')
agnSAlrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15), )
if mibBuilder.loadTexts: agnSAlrTable.setStatus('mandatory')
agnSAlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1), ).setIndexNames((0, "DACS-MIB", "agnSAlrIdx"))
if mibBuilder.loadTexts: agnSAlrEntry.setStatus('mandatory')
agnSAlrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSAlrIdx.setStatus('mandatory')
agnSAlrCodeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSAlrCodeDescription.setStatus('mandatory')
agnSAlrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSAlrCode.setStatus('mandatory')
agnSAlrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSAlrSeverity.setStatus('mandatory')
agnSAlrState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSAlrState.setStatus('mandatory')
agnSAlrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSAlrCounter.setStatus('mandatory')
agnSAlrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSAlrMask.setStatus('mandatory')
agnSAlrInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSAlrInvert.setStatus('mandatory')
agnSClearAlrCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnSClearAlrCmd.setStatus('mandatory')
agnSClearAllAlrCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnSClearAllAlrCmd.setStatus('mandatory')
agnSSanityCheckStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fail", 2), ("warning", 3), ("ok", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSSanityCheckStatus.setStatus('mandatory')
agnSNoOfSanityCheckErr = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSNoOfSanityCheckErr.setStatus('mandatory')
agnSErrListTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 20), )
if mibBuilder.loadTexts: agnSErrListTable.setStatus('mandatory')
agnSErrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 20, 1), ).setIndexNames((0, "DACS-MIB", "agnSErrIdx"))
if mibBuilder.loadTexts: agnSErrListEntry.setStatus('mandatory')
agnSErrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSErrIdx.setStatus('mandatory')
agnSErrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSErrDescription.setStatus('mandatory')
agnSMaxNoOfCnfg = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSMaxNoOfCnfg.setStatus('mandatory')
agnSCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 22), )
if mibBuilder.loadTexts: agnSCnfgTable.setStatus('mandatory')
agnSCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 22, 1), ).setIndexNames((0, "DACS-MIB", "agnSEntryIdx"))
if mibBuilder.loadTexts: agnSCnfgEntry.setStatus('mandatory')
agnSEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSEntryIdx.setStatus('mandatory')
agnSEntryIsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 1, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSEntryIsValid.setStatus('mandatory')
agnCSanityCheckCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCSanityCheckCmd.setStatus('mandatory')
agnCSaveCnfgIdxCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCSaveCnfgIdxCmd.setStatus('mandatory')
agnCLoadCnfgIdxCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCLoadCnfgIdxCmd.setStatus('mandatory')
agnCClkSrcTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4), )
if mibBuilder.loadTexts: agnCClkSrcTable.setStatus('mandatory')
agnCClkSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1), ).setIndexNames((0, "DACS-MIB", "agnCClkCnfgIdx"), (0, "DACS-MIB", "agnCClkSrcIdx"))
if mibBuilder.loadTexts: agnCClkSrcEntry.setStatus('mandatory')
agnCClkCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCClkCnfgIdx.setStatus('mandatory')
agnCClkSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCClkSrcIdx.setStatus('mandatory')
agnCClkSrcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("rxClk", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCClkSrcMode.setStatus('mandatory')
agnCClkSrcSlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notApplicable", 1), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCClkSrcSlt.setStatus('mandatory')
agnCClkSrcPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 100))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("exPrt11", 11), ("exPrt12", 12), ("notApplicable", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCClkSrcPrt.setStatus('mandatory')
agnCDeleteCnfgIdxCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCDeleteCnfgIdxCmd.setStatus('mandatory')
agnCDefaultCnfgIdxCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCDefaultCnfgIdxCmd.setStatus('mandatory')
agnCnfgDataTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7), )
if mibBuilder.loadTexts: agnCnfgDataTable.setStatus('mandatory')
agnCnfgDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1), ).setIndexNames((0, "DACS-MIB", "agnCnfgIdx"))
if mibBuilder.loadTexts: agnCnfgDataEntry.setStatus('mandatory')
agnCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCnfgIdx.setStatus('mandatory')
agnCnfgDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCnfgDesc.setStatus('mandatory')
agnCnfgUpdDate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCnfgUpdDate.setStatus('mandatory')
agnCnfgUpdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCnfgUpdTime.setStatus('mandatory')
agnCnfgUpdMnger = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 7, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCnfgUpdMnger.setStatus('mandatory')
agnCnfgAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8))
agnCnfgAlrFilterWindow = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCnfgAlrFilterWindow.setStatus('mandatory')
agnCnfgAlrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2), )
if mibBuilder.loadTexts: agnCnfgAlrTable.setStatus('mandatory')
agnCnfgAlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1), ).setIndexNames((0, "DACS-MIB", "agnCnfgAlrCode"), (0, "DACS-MIB", "agnCnfgAlrSlot"), (0, "DACS-MIB", "agnCnfgAlrPort"))
if mibBuilder.loadTexts: agnCnfgAlrEntry.setStatus('mandatory')
agnCnfgAlrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCnfgAlrCode.setStatus('mandatory')
agnCnfgAlrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 200, 255))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("all", 200), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCnfgAlrSlot.setStatus('mandatory')
agnCnfgAlrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCnfgAlrPort.setStatus('mandatory')
agnCnfgAlrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no", 1), ("noAndSave", 2), ("yes", 3), ("yesAndSave", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCnfgAlrMask.setStatus('mandatory')
agnCnfgAlrInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCnfgAlrInvert.setStatus('mandatory')
agnCnfgAlrFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCnfgAlrFilter.setStatus('mandatory')
agnCnfgAlrFilterSet = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCnfgAlrFilterSet.setStatus('mandatory')
agnCnfgAlrFilterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCnfgAlrFilterReset.setStatus('mandatory')
agnCnfgAlrReportTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3), )
if mibBuilder.loadTexts: agnCnfgAlrReportTable.setStatus('mandatory')
agnCnfgAlrReportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3, 1), ).setIndexNames((0, "DACS-MIB", "agnCnfgAlrReportType"))
if mibBuilder.loadTexts: agnCnfgAlrReportEntry.setStatus('mandatory')
agnCnfgAlrReportType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("trap", 1), ("buffer", 2), ("relay", 3), ("alrLedOn", 4), ("alrLedBlink", 5), ("relay2", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCnfgAlrReportType.setStatus('mandatory')
agnCnfgAlrStartReportOn = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noReport", 2), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCnfgAlrStartReportOn.setStatus('mandatory')
agnCnfgAlrStartReportOff = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("noReport", 2), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCnfgAlrStartReportOff.setStatus('mandatory')
agnCOffsetCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("u1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCOffsetCmd.setStatus('mandatory')
agnCmprTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1), )
if mibBuilder.loadTexts: agnCmprTable.setStatus('mandatory')
agnCmprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1), ).setIndexNames((0, "DACS-MIB", "agnCmprTypIdx"), (0, "DACS-MIB", "agnCmprCnfgIdx"), (0, "DACS-MIB", "agnCmprVersion"))
if mibBuilder.loadTexts: agnCmprEntry.setStatus('mandatory')
agnCmprTypIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCmprTypIdx.setStatus('mandatory')
agnCmprCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCmprCnfgIdx.setStatus('mandatory')
agnCmprVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCmprVersion.setStatus('mandatory')
agnCmprObj = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCmprObj.setStatus('mandatory')
agnDlciCmprTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2), )
if mibBuilder.loadTexts: agnDlciCmprTable.setStatus('mandatory')
agnDlciCmprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1), ).setIndexNames((0, "DACS-MIB", "agnDlciCmprCnfgIdx"), (0, "DACS-MIB", "agnDlciCmprVersion"), (0, "DACS-MIB", "agnDlciCmprDlciIdx"))
if mibBuilder.loadTexts: agnDlciCmprEntry.setStatus('mandatory')
agnDlciCmprCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnDlciCmprCnfgIdx.setStatus('mandatory')
agnDlciCmprVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnDlciCmprVersion.setStatus('mandatory')
agnDlciCmprDlciIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnDlciCmprDlciIdx.setStatus('mandatory')
agnDlciCmprObj = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnDlciCmprObj.setStatus('mandatory')
agnAlarmsCmprTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3), )
if mibBuilder.loadTexts: agnAlarmsCmprTable.setStatus('mandatory')
agnAlarmsCmprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3, 1), ).setIndexNames((0, "DACS-MIB", "agnAlarmsCmprVersion"), (0, "DACS-MIB", "agnAlarmsCmprAlarmIdx"))
if mibBuilder.loadTexts: agnAlarmsCmprEntry.setStatus('mandatory')
agnAlarmsCmprVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnAlarmsCmprVersion.setStatus('mandatory')
agnAlarmsCmprAlarmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnAlarmsCmprAlarmIdx.setStatus('mandatory')
agnAlarmsCmprObj = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnAlarmsCmprObj.setStatus('mandatory')
agnAlrBufCmprTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4), )
if mibBuilder.loadTexts: agnAlrBufCmprTable.setStatus('mandatory')
agnAlrBufCmprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4, 1), ).setIndexNames((0, "DACS-MIB", "agnAlrBufCmprVersion"), (0, "DACS-MIB", "agnAlrBufCmprAlarmIdx"))
if mibBuilder.loadTexts: agnAlrBufCmprEntry.setStatus('mandatory')
agnAlrBufCmprVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnAlrBufCmprVersion.setStatus('mandatory')
agnAlrBufCmprAlarmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnAlrBufCmprAlarmIdx.setStatus('mandatory')
agnAlrBufCmprObj = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnAlrBufCmprObj.setStatus('mandatory')
agnSCmprErrListTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5), )
if mibBuilder.loadTexts: agnSCmprErrListTable.setStatus('mandatory')
agnSCmprErrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5, 1), ).setIndexNames((0, "DACS-MIB", "agnSCmprErrVersion"), (0, "DACS-MIB", "agnSCmprErrIdx"))
if mibBuilder.loadTexts: agnSCmprErrListEntry.setStatus('mandatory')
agnSCmprErrVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSCmprErrVersion.setStatus('mandatory')
agnSCmprErrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSCmprErrIdx.setStatus('mandatory')
agnSCmprErrObj = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSCmprErrObj.setStatus('mandatory')
agnTsCmprTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6), )
if mibBuilder.loadTexts: agnTsCmprTable.setStatus('mandatory')
agnTsCmprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1), ).setIndexNames((0, "DACS-MIB", "agnTsCmprVerIdx"), (0, "DACS-MIB", "agnTsCmprCnfgIdx"), (0, "DACS-MIB", "agnTsCmprSlotIdx"), (0, "DACS-MIB", "agnTsCmprPortIdx"), (0, "DACS-MIB", "agnTsCmprPduIdx"))
if mibBuilder.loadTexts: agnTsCmprEntry.setStatus('mandatory')
agnTsCmprVerIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsCmprVerIdx.setStatus('mandatory')
agnTsCmprCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsCmprCnfgIdx.setStatus('mandatory')
agnTsCmprSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsCmprSlotIdx.setStatus('mandatory')
agnTsCmprPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsCmprPortIdx.setStatus('mandatory')
agnTsCmprPduIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsCmprPduIdx.setStatus('mandatory')
agnTsCmprData = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 6, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnTsCmprData.setStatus('mandatory')
agnXCmprTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7), )
if mibBuilder.loadTexts: agnXCmprTable.setStatus('mandatory')
agnXCmprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1), ).setIndexNames((0, "DACS-MIB", "agnXCmprTypIdx"), (0, "DACS-MIB", "agnXCmprVersion"), (0, "DACS-MIB", "agnXCmprIdx3"), (0, "DACS-MIB", "agnXCmprIdx4"), (0, "DACS-MIB", "agnXCmprIdx5"), (0, "DACS-MIB", "agnXCmprIdx6"), (0, "DACS-MIB", "agnXCmprIdx7"))
if mibBuilder.loadTexts: agnXCmprEntry.setStatus('mandatory')
agnXCmprTypIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnXCmprTypIdx.setStatus('mandatory')
agnXCmprVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnXCmprVersion.setStatus('mandatory')
agnXCmprIdx3 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnXCmprIdx3.setStatus('mandatory')
agnXCmprIdx4 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnXCmprIdx4.setStatus('mandatory')
agnXCmprIdx5 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnXCmprIdx5.setStatus('mandatory')
agnXCmprIdx6 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnXCmprIdx6.setStatus('mandatory')
agnXCmprIdx7 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnXCmprIdx7.setStatus('mandatory')
agnXCmprObj = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 3, 7, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnXCmprObj.setStatus('mandatory')
agnLinkMapTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1), )
if mibBuilder.loadTexts: agnLinkMapTable.setStatus('mandatory')
agnLinkMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1), ).setIndexNames((0, "DACS-MIB", "mapLinkId"))
if mibBuilder.loadTexts: agnLinkMapEntry.setStatus('mandatory')
mapLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapLinkId.setStatus('mandatory')
mapLinkSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("noConnect", 2), ("clA", 3), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mapLinkSltIdx.setStatus('mandatory')
mapLinkPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("exPrt11", 11), ("exPrt12", 12), ("noConnect", 100), ("inPrt1", 101), ("inPrt2", 102), ("inPrt3", 103), ("inPrt4", 104), ("inPrt5", 105), ("inPrt6", 106), ("inPrt7", 107), ("inPrt8", 108), ("inPrt9", 109), ("inPrt10", 110), ("inPrt11", 111), ("inPrt12", 112)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mapLinkPrtIdx.setStatus('mandatory')
mapLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapLinkStatus.setStatus('mandatory')
ethIf = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1))
ethIfTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1), )
if mibBuilder.loadTexts: ethIfTable.setStatus('mandatory')
ethIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1), ).setIndexNames((0, "DACS-MIB", "ethIfIdx"))
if mibBuilder.loadTexts: ethIfEntry.setStatus('mandatory')
ethIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethIfIdx.setStatus('mandatory')
ethMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethMode.setStatus('mandatory')
ethBridgingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("filtered", 1), ("transparent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethBridgingMode.setStatus('mandatory')
alrBufTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1), )
if mibBuilder.loadTexts: alrBufTable.setStatus('mandatory')
alrBufEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1), ).setIndexNames((0, "DACS-MIB", "alrBufIdx"))
if mibBuilder.loadTexts: alrBufEntry.setStatus('mandatory')
alrBufIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrBufIdx.setStatus('mandatory')
alrBufDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrBufDescription.setStatus('mandatory')
agnCAgendaTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1), )
if mibBuilder.loadTexts: agnCAgendaTable.setStatus('mandatory')
agnCAgendaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1, 1), ).setIndexNames((0, "DACS-MIB", "agnCAgendaCnfgIdx"), (0, "DACS-MIB", "agnCAgendaDayIdx"))
if mibBuilder.loadTexts: agnCAgendaEntry.setStatus('mandatory')
agnCAgendaCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("active", 1), ("temporary", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCAgendaCnfgIdx.setStatus('mandatory')
agnCAgendaDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCAgendaDayIdx.setStatus('mandatory')
agnCAgendaDayCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullWorkday", 1), ("partialWorkday", 2), ("weekend", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCAgendaDayCategory.setStatus('mandatory')
agnCFlipNetEventsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2), )
if mibBuilder.loadTexts: agnCFlipNetEventsTable.setStatus('mandatory')
agnCFlipNetEventsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1), ).setIndexNames((0, "DACS-MIB", "agnCFlipNetEventsCnfgIdx"), (0, "DACS-MIB", "agnCFlipNetEventIdx"))
if mibBuilder.loadTexts: agnCFlipNetEventsEntry.setStatus('mandatory')
agnCFlipNetEventsCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("active", 1), ("temporary", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCFlipNetEventsCnfgIdx.setStatus('mandatory')
agnCFlipNetEventIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCFlipNetEventIdx.setStatus('mandatory')
agnCFlipNetEventActive = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipNetEventActive.setStatus('mandatory')
agnCFlipNetEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("time", 1), ("linkDown", 2), ("congestion", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipNetEventType.setStatus('mandatory')
agnCFlipNetEventNo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipNetEventNo.setStatus('mandatory')
agnCFlipNetEventSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notApplicable", 1), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipNetEventSlot.setStatus('mandatory')
agnCFlipNetEventPort = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 100, 101, 102, 103, 104, 105, 106, 107, 108))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("exPrt11", 11), ("exPrt12", 12), ("notApplicable", 100), ("inPrt1", 101), ("inPrt2", 102), ("inPrt3", 103), ("inPrt4", 104), ("inPrt5", 105), ("inPrt6", 106), ("inPrt7", 107), ("inPrt8", 108)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipNetEventPort.setStatus('mandatory')
agnCFlipNetEventISD = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipNetEventISD.setStatus('mandatory')
agnCFlipNetEventOSD = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipNetEventOSD.setStatus('mandatory')
agnCFlipNetEventDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("fullWorkday", 2), ("partialWorkday", 3), ("weekend", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipNetEventDayType.setStatus('mandatory')
agnCFlipNetEventStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipNetEventStartTime.setStatus('mandatory')
agnCFlipNetEventEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipNetEventEndTime.setStatus('mandatory')
agnCFlipTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3), )
if mibBuilder.loadTexts: agnCFlipTable.setStatus('mandatory')
agnCFlipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1), ).setIndexNames((0, "DACS-MIB", "agnCFlipCnfgIdx"), (0, "DACS-MIB", "agnCFlipIdx"))
if mibBuilder.loadTexts: agnCFlipEntry.setStatus('mandatory')
agnCFlipCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("active", 1), ("temporary", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCFlipCnfgIdx.setStatus('mandatory')
agnCFlipIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnCFlipIdx.setStatus('mandatory')
agnCFlipActive = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipActive.setStatus('mandatory')
agnCFlipLogicalExp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipLogicalExp.setStatus('mandatory')
agnCFlipDbNo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipDbNo.setStatus('mandatory')
agnCFlipDiscardDe = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipDiscardDe.setStatus('mandatory')
agnFlipDbControls = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4))
agnCFlipDbSanityCheckCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCFlipDbSanityCheckCmd.setStatus('mandatory')
agnCSaveFlipDbCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCSaveFlipDbCmd.setStatus('mandatory')
agnCSaveNetCnfgIdxCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCSaveNetCnfgIdxCmd.setStatus('mandatory')
agnCSaveNetFlipDbCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCSaveNetFlipDbCmd.setStatus('mandatory')
agnCNetGoCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCNetGoCmd.setStatus('mandatory')
agnCNetDelay = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCNetDelay.setStatus('mandatory')
agnCNetEventsBcast = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCNetEventsBcast.setStatus('mandatory')
agnCNetEventsBcastInterval = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 5, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnCNetEventsBcastInterval.setStatus('mandatory')
agnSaSwchStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSaSwchStatus.setStatus('mandatory')
agnListDecodingTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1), )
if mibBuilder.loadTexts: agnListDecodingTable.setStatus('mandatory')
agnListDecodingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1), ).setIndexNames((0, "DACS-MIB", "agnListDecodingType"), (0, "DACS-MIB", "agnListDecodingCode"))
if mibBuilder.loadTexts: agnListDecodingEntry.setStatus('mandatory')
agnListDecodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alr", 1), ("sanity", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnListDecodingType.setStatus('mandatory')
agnListDecodingCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnListDecodingCode.setStatus('mandatory')
agnListDecodingDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnListDecodingDescription.setStatus('mandatory')
agnListDecodingDefState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("event", 3), ("minor", 4), ("major", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnListDecodingDefState.setStatus('mandatory')
agnListDecodingSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnListDecodingSeverity.setStatus('mandatory')
agnListDecodingAcmRelaySlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("none", 1), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnListDecodingAcmRelaySlt.setStatus('mandatory')
agnListDecodingAcmRelayPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnListDecodingAcmRelayPrt.setStatus('mandatory')
agnDlciTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1), )
if mibBuilder.loadTexts: agnDlciTable.setStatus('mandatory')
agnDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1), ).setIndexNames((0, "DACS-MIB", "agnDlciCnfgIdx"), (0, "DACS-MIB", "agnDlciLSltIdx"), (0, "DACS-MIB", "agnDlciLPrtIdx"), (0, "DACS-MIB", "agnDlciHIdx"), (0, "DACS-MIB", "agnDlciHSltIdx"), (0, "DACS-MIB", "agnDlciHPrtIdx"), (0, "DACS-MIB", "agnDlciLIdx"))
if mibBuilder.loadTexts: agnDlciEntry.setStatus('mandatory')
agnDlciCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnDlciCnfgIdx.setStatus('mandatory')
agnDlciLSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 254, 255))).clone(namedValues=NamedValues(("cl", 3), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("vs", 254), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnDlciLSltIdx.setStatus('mandatory')
agnDlciLPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnDlciLPrtIdx.setStatus('mandatory')
agnDlciLIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnDlciLIdx.setStatus('mandatory')
agnDlciHSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("cl", 3), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnDlciHSltIdx.setStatus('mandatory')
agnDlciHPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnDlciHPrtIdx.setStatus('mandatory')
agnDlciHIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnDlciHIdx.setStatus('mandatory')
agnDlciTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("txBc5100bps", 3), ("txBc6400bps", 4), ("txBc8300bps", 5), ("txBc9600bps", 6), ("txBc14400bps", 7), ("txBc19200bps", 8), ("txBc28800bps", 9), ("txBc32000bps", 10), ("txBc38400bps", 11), ("txBc48000bps", 12), ("txBc56000bps", 13), ("txBc57600bps", 14), ("txBc64Kbps", 15), ("txBc128Kbps", 16), ("txBc192Kbps", 17), ("txBc256Kbps", 18), ("txBc320Kbps", 19), ("txBc384Kbps", 20), ("txBc448Kbps", 21), ("txBc512Kbps", 22), ("txBc768Kbps", 23), ("txBc896Kbps", 24), ("txBc1024Kbps", 25), ("txBc1152Kbps", 26), ("txBc1280Kbps", 27), ("txBc1344Kbps", 28), ("txBc1472Kbps", 29), ("txBc1600Kbps", 30), ("txBc1728Kbps", 31), ("txBc1856Kbps", 32), ("txBc1920Kbps", 33), ("txBc1984Kbps", 34), ("txBc2048Kbps", 35), ("txBc16000bps", 36), ("txBc112Kbps", 37), ("txBc168Kbps", 38), ("txBc224Kbps", 39), ("txBc336Kbps", 40), ("txBc672Kbps", 41), ("txBc1536Kbps", 42), ("txBc1792Kbps", 43))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnDlciTxBc.setStatus('mandatory')
agnDlciTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("txBe5100bps", 3), ("txBe6400bps", 4), ("txBe8300bps", 5), ("txBe9600bps", 6), ("txBe14400bps", 7), ("txBe19200bps", 8), ("txBe28800bps", 9), ("txBe32000bps", 10), ("txBe38400bps", 11), ("txBe48000bps", 12), ("txBe56000bps", 13), ("txBe57600bps", 14), ("txBe64Kbps", 15), ("txBe128Kbps", 16), ("txBe192Kbps", 17), ("txBe256Kbps", 18), ("txBe320Kbps", 19), ("txBe384Kbps", 20), ("txBe448Kbps", 21), ("txBe512Kbps", 22), ("txBe768Kbps", 23), ("txBe896Kbps", 24), ("txBe1024Kbps", 25), ("txBe1152Kbps", 26), ("txBe1280Kbps", 27), ("txBe1344Kbps", 28), ("txBe1472Kbps", 29), ("txBe1600Kbps", 30), ("txBe1728Kbps", 31), ("txBe1856Kbps", 32), ("txBe1920Kbps", 33), ("txBe1984Kbps", 34), ("txBe2048Kbps", 35), ("txBe16000bps", 36), ("txBe112Kbps", 37), ("txBe168Kbps", 38), ("txBe224Kbps", 39), ("txBe336Kbps", 40), ("txBe672Kbps", 41), ("txBe1536Kbps", 42), ("txBe1792Kbps", 43))).clone('zero')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnDlciTxBe.setStatus('mandatory')
agnDlciRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("rxBc5100bps", 3), ("rxBc6400bps", 4), ("rxBc8300bps", 5), ("rxBc9600bps", 6), ("rxBc14400bps", 7), ("rxBc19200bps", 8), ("rxBc28800bps", 9), ("rxBc32000bps", 10), ("rxBc38400bps", 11), ("rxBc48000bps", 12), ("rxBc56000bps", 13), ("rxBc57600bps", 14), ("rxBc64Kbps", 15), ("rxBc128Kbps", 16), ("rxBc192Kbps", 17), ("rxBc256Kbps", 18), ("rxBc320Kbps", 19), ("rxBc384Kbps", 20), ("rxBc448Kbps", 21), ("rxBc512Kbps", 22), ("rxBc768Kbps", 23), ("rxBc896Kbps", 24), ("rxBc1024Kbps", 25), ("rxBc1152Kbps", 26), ("rxBc1280Kbps", 27), ("rxBc1344Kbps", 28), ("rxBc1472Kbps", 29), ("rxBc1600Kbps", 30), ("rxBc1728Kbps", 31), ("rxBc1856Kbps", 32), ("rxBc1920Kbps", 33), ("rxBc1984Kbps", 34), ("rxBc2048Kbps", 35), ("rxBc16000bps", 36), ("rxBc112Kbps", 37), ("rxBc168Kbps", 38), ("rxBc224Kbps", 39), ("rxBc336Kbps", 40), ("rxBc672Kbps", 41), ("rxBc1536Kbps", 42), ("rxBc1792Kbps", 43))).clone('full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnDlciRxBc.setStatus('mandatory')
agnDlciRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("rxBe5100bps", 3), ("rxBe6400bps", 4), ("rxBe8300bps", 5), ("rxBe9600bps", 6), ("rxBe14400bps", 7), ("rxBe19200bps", 8), ("rxBe28800bps", 9), ("rxBe32000bps", 10), ("rxBe38400bps", 11), ("rxBe48000bps", 12), ("rxBe56000bps", 13), ("rxBe57600bps", 14), ("rxBe64Kbps", 15), ("rxBe128Kbps", 16), ("rxBe192Kbps", 17), ("rxBe256Kbps", 18), ("rxBe320Kbps", 19), ("rxBe384Kbps", 20), ("rxBe448Kbps", 21), ("rxBe512Kbps", 22), ("rxBe768Kbps", 23), ("rxBe896Kbps", 24), ("rxBe1024Kbps", 25), ("rxBe1152Kbps", 26), ("rxBe1280Kbps", 27), ("rxBe1344Kbps", 28), ("rxBe1472Kbps", 29), ("rxBe1600Kbps", 30), ("rxBe1728Kbps", 31), ("rxBe1856Kbps", 32), ("rxBe1920Kbps", 33), ("rxBe1984Kbps", 34), ("rxBe2048Kbps", 35), ("rxBe16000bps", 36), ("rxBe112Kbps", 37), ("rxBe168Kbps", 38), ("rxBe224Kbps", 39), ("rxBe336Kbps", 40), ("rxBe672Kbps", 41), ("rxBe1536Kbps", 42), ("rxBe1792Kbps", 43))).clone('zero')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnDlciRxBe.setStatus('mandatory')
agnDlciPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnDlciPriority.setStatus('mandatory')
agnDlciStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnDlciStatus.setStatus('mandatory')
agnDlciSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnDlciSpoofing.setStatus('mandatory')
agnDlciFunnelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnDlciFunnelEnable.setStatus('mandatory')
agnDlciRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("rip", 2), ("rip2", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnDlciRoutingProtocol.setStatus('mandatory')
agnDlciRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnDlciRowStatus.setStatus('mandatory')
agnVoiceSwConfTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1), )
if mibBuilder.loadTexts: agnVoiceSwConfTable.setStatus('mandatory')
agnVoiceSwConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1), ).setIndexNames((0, "DACS-MIB", "agnVoiceSwConfIdx"))
if mibBuilder.loadTexts: agnVoiceSwConfEntry.setStatus('mandatory')
agnVoiceSwConfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("active", 1), ("temporary", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnVoiceSwConfIdx.setStatus('mandatory')
agnVoiceSwConfZoneId = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnVoiceSwConfZoneId.setStatus('mandatory')
agnVoiceSwConfNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnVoiceSwConfNodeId.setStatus('mandatory')
agnVoiceSwConfNoOfHops = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnVoiceSwConfNoOfHops.setStatus('mandatory')
agnVoiceSwConfRtTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2), )
if mibBuilder.loadTexts: agnVoiceSwConfRtTable.setStatus('mandatory')
agnVoiceSwConfRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1), ).setIndexNames((0, "DACS-MIB", "agnVoiceSwConfRtDbId"), (0, "DACS-MIB", "agnVoiceSwConfRtIdx"))
if mibBuilder.loadTexts: agnVoiceSwConfRtEntry.setStatus('mandatory')
agnVoiceSwConfRtDbId = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("active", 1), ("temporary", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnVoiceSwConfRtDbId.setStatus('mandatory')
agnVoiceSwConfRtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnVoiceSwConfRtIdx.setStatus('mandatory')
agnVoiceSwConfRtDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnVoiceSwConfRtDigits.setStatus('mandatory')
agnVoiceSwConfRtAction = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 1), ("zone", 2), ("node", 3), ("shortDialing", 4), ("in", 5), ("hgr", 6), ("del", 7), ("rep", 8))).clone('notApplicable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnVoiceSwConfRtAction.setStatus('mandatory')
agnVoiceSwConfRtData = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnVoiceSwConfRtData.setStatus('mandatory')
agnVoiceSwConfRtSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("noConnect", 2), ("cl", 3), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255))).clone('noConnect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnVoiceSwConfRtSlot.setStatus('mandatory')
agnVoiceSwConfRtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnVoiceSwConfRtPort.setStatus('mandatory')
agnVoiceSwConfRtDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 8), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnVoiceSwConfRtDlci.setStatus('mandatory')
agnVoiceSwConfRtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnVoiceSwConfRtRowStatus.setStatus('mandatory')
agnVoiceSwConfHGTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5), )
if mibBuilder.loadTexts: agnVoiceSwConfHGTable.setStatus('mandatory')
agnVoiceSwConfHGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1), ).setIndexNames((0, "DACS-MIB", "agnVoiceSwConfHGdbIdx"), (0, "DACS-MIB", "agnVoiceSwConfHGIdx"))
if mibBuilder.loadTexts: agnVoiceSwConfHGEntry.setStatus('mandatory')
agnVoiceSwConfHGdbIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("active", 1), ("temporary", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnVoiceSwConfHGdbIdx.setStatus('mandatory')
agnVoiceSwConfHGIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnVoiceSwConfHGIdx.setStatus('mandatory')
agnVoiceSwConfHGConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnVoiceSwConfHGConnect.setStatus('mandatory')
agnVoiceSwConfHGExt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnVoiceSwConfHGExt.setStatus('mandatory')
agnSigProfileTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1), )
if mibBuilder.loadTexts: agnSigProfileTable.setStatus('mandatory')
agnSigProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1), ).setIndexNames((0, "DACS-MIB", "agnSigProfileCnfgIdx"), (0, "DACS-MIB", "agnSigProfileIdx"), (0, "DACS-MIB", "agnSigProfileRxTx"))
if mibBuilder.loadTexts: agnSigProfileEntry.setStatus('mandatory')
agnSigProfileCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSigProfileCnfgIdx.setStatus('mandatory')
agnSigProfileIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSigProfileIdx.setStatus('mandatory')
agnSigProfileRxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnSigProfileRxTx.setStatus('mandatory')
agnSigProfileABCD = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 10, 1, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnSigProfileABCD.setStatus('mandatory')
mdlSInstTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1), )
if mibBuilder.loadTexts: mdlSInstTable.setStatus('mandatory')
mdlSInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1), ).setIndexNames((0, "DACS-MIB", "mdlSInstSltIdx"))
if mibBuilder.loadTexts: mdlSInstEntry.setStatus('mandatory')
mdlSInstSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSInstSltIdx.setStatus('mandatory')
mdlSInstCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 10, 11, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 36, 60, 61, 72, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 210, 211, 212, 213, 214, 215, 220, 221, 222, 223, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 253, 254))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("acm", 9), ("ps60W", 10), ("ps100W", 11), ("cl1", 20), ("clEth", 21), ("cl2", 22), ("cl2Eth", 23), ("cl3", 24), ("cl3Eth", 25), ("mPh1", 31), ("mPh3", 32), ("mPh1T1DSU", 33), ("mPh1T1CSU", 34), ("mPh1E1DSU", 35), ("mPh1E1LTU", 36), ("mPl6", 60), ("mPl3", 61), ("mPv4", 72), ("vf3EandM", 80), ("vf3Fxs", 81), ("vf3Fxo", 82), ("vfPbx", 83), ("vfPbxT1", 84), ("vfPbxE1", 85), ("mtMlF2T1", 88), ("mtMlF2E1", 89), ("mtMlT1Fiber", 90), ("mtMlE1Fiber", 91), ("mtMlT1FiberFb", 92), ("mtMlE1FiberFb", 93), ("mtmlHE1", 94), ("mtmlH1E1", 95), ("mtmlHSE1", 96), ("ml20", 97), ("mtMl4T1", 98), ("mtMl4E1", 99), ("mtMl1T1DSU", 100), ("mtMl1T1CSU", 101), ("mtMl1E1DSU", 102), ("mtMl1E1LTU", 103), ("mtMl1T1DSUfb", 104), ("mtMl1T1CSUfb", 105), ("mtMl1E1DSUfb", 106), ("mtMl1E1LTUfb", 107), ("mtMl2T1", 108), ("mtMl2E1", 109), ("ls2CcittX50", 110), ("ls2CcittX58", 111), ("ls2ATandTSdm", 112), ("ls2ACcittX50", 113), ("ls2ACcittX58", 114), ("ls2AATandTSdm", 115), ("ls2A2Ts", 116), ("ls2M", 117), ("hs2", 120), ("hs3", 121), ("hsq", 122), ("hs703", 123), ("hsQM", 124), ("hsqN", 125), ("hs6", 126), ("hs12", 127), ("hs4T1", 130), ("hs4E1", 131), ("hs4", 132), ("vc2EandM", 140), ("vc2Fxs1Plar", 141), ("vc2Fxo1", 142), ("vc2Fxs2", 143), ("vc2Fxo2", 144), ("vc2Fxs3", 145), ("vc2Fxo3", 146), ("vc26EandM", 147), ("mtvc2", 148), ("vc2R2Fxs", 149), ("hsu", 150), ("mbeA", 151), ("mbeB", 152), ("mbeU", 153), ("tre", 154), ("hsuI", 155), ("hsr", 156), ("hss", 157), ("hsu1", 158), ("ls12", 159), ("ls6", 160), ("ls6V1EandM", 161), ("ls6V1Fxo", 162), ("ls6V1Fxs", 163), ("ls6V2EandM", 164), ("ls6V2Fxo", 165), ("ls6V2Fxs", 166), ("ls6VfEandM", 167), ("ls6VfFxo", 168), ("ls6VfFxs", 169), ("vc3EandM", 170), ("vc3Fxo", 171), ("vc3Fxs", 172), ("vcPbx", 173), ("vcPbxT1", 174), ("vcPbxE1", 175), ("vc6EandM", 176), ("vc6Fxo", 177), ("vc6Fxs", 178), ("vcq", 179), ("mhs1V36", 181), ("mhs1V35", 182), ("mhs1G703", 183), ("mhs1DDS", 184), ("mhs3", 185), ("mhs1X21", 186), ("mhs1V24", 187), ("mhs4", 188), ("mhsE1Hs", 189), ("mhsT1Hs", 190), ("mhsHyE1Hs", 191), ("mhsHyT1Hs", 192), ("mlfHybE1Hs", 193), ("mlfHybT1Hs", 194), ("mhs2e1", 195), ("mhs2t1", 196), ("mhsHy2e1", 197), ("mhsHy2t1", 198), ("mlfHybE12", 199), ("mls6", 200), ("mls3", 201), ("mlfHybT12", 204), ("mvc4", 210), ("mvc4PbxE1", 211), ("mvc4PbxT1Dsu", 212), ("mvc4PbxT1Csu", 213), ("mvc4PbxE1Slave", 214), ("mvc4PbxT1Slave", 215), ("mhsS", 220), ("mhsU", 221), ("mhsPriE1", 222), ("mhsPriT1", 223), ("vc12EandM", 230), ("vc12Fxo", 231), ("vc12Fxs", 232), ("vc6aEandM", 233), ("vc6aFxo", 234), ("vc6aFxs", 235), ("vc6AgFxo", 236), ("vc6AgFxs", 237), ("hsu12", 240), ("hsu6", 241), ("hss12", 242), ("hss6", 243), ("mvg1Lan", 253), ("mvg2Lan", 254)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSInstCardType.setStatus('mandatory')
mdlSHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSHwVersion.setStatus('mandatory')
mdlSSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSSwVersion.setStatus('mandatory')
mdlSAlrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlrStatus.setStatus('mandatory')
mdlSAlrStatusAll = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlrStatusAll.setStatus('mandatory')
mdlSMaskedAlrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSMaskedAlrStat.setStatus('mandatory')
mdlSMaskedAlrStatAll = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSMaskedAlrStatAll.setStatus('mandatory')
mdlSTstStatusAll = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSTstStatusAll.setStatus('mandatory')
mdlSClearAlrCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlSClearAlrCmd.setStatus('mandatory')
mdlSClearAllAlrCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlSClearAllAlrCmd.setStatus('mandatory')
mdlSAlrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2), )
if mibBuilder.loadTexts: mdlSAlrTable.setStatus('mandatory')
mdlSAlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1), ).setIndexNames((0, "DACS-MIB", "mdlSAlrSltIdx"), (0, "DACS-MIB", "mdlSAlrIdx"))
if mibBuilder.loadTexts: mdlSAlrEntry.setStatus('mandatory')
mdlSAlrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlrIdx.setStatus('mandatory')
mdlSAlrSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlrSltIdx.setStatus('mandatory')
mdlSAlrCodeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlrCodeDescription.setStatus('mandatory')
mdlSAlrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlrCode.setStatus('mandatory')
mdlSAlrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlrSeverity.setStatus('mandatory')
mdlSAlrState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlrState.setStatus('mandatory')
mdlSAlrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlrCounter.setStatus('mandatory')
mdlSAlrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlrMask.setStatus('mandatory')
mdlSAlrInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlrInvert.setStatus('mandatory')
mdlCPrgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1), )
if mibBuilder.loadTexts: mdlCPrgTable.setStatus('mandatory')
mdlCPrgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1), ).setIndexNames((0, "DACS-MIB", "mdlCCnfgIdx"), (0, "DACS-MIB", "mdlCSltIdx"))
if mibBuilder.loadTexts: mdlCPrgEntry.setStatus('mandatory')
mdlCCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlCCnfgIdx.setStatus('mandatory')
mdlCSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlCSltIdx.setStatus('mandatory')
mdlCPrgCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 35, 36, 60, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 210, 211, 212, 213, 214, 215, 220, 221, 222, 223, 230, 231, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243, 253, 254))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("acm", 9), ("ps48x60W", 10), ("ps48x100W", 11), ("ps110x60W", 12), ("ps110x100W", 13), ("ps220x60W", 14), ("ps220x100W", 15), ("ps180W", 16), ("cl1", 20), ("clEth", 21), ("cl2", 22), ("cl2Eth", 23), ("cl3", 24), ("cl3Eth", 25), ("mPh1", 31), ("mPh3", 32), ("mPh1T1DSU", 33), ("mPh1T1CSU", 34), ("mPh1E1DSU", 35), ("mPh1E1LTU", 36), ("mPl6", 60), ("vf3EandM", 80), ("vf3Fxs", 81), ("vf3Fxo", 82), ("vfPbx", 83), ("vfPbxT1", 84), ("vfPbxE1", 85), ("mtMlF2T1", 88), ("mtMlF2E1", 89), ("mtMlT1Fiber", 90), ("mtMlE1Fiber", 91), ("mtMlT1FiberFb", 92), ("mtMlE1FiberFb", 93), ("mtmlHE1", 94), ("mtmlH1E1", 95), ("mtmlHSE1", 96), ("ml20", 97), ("mtMl4T1", 98), ("mtMl4E1", 99), ("mtMl1T1DSU", 100), ("mtMl1T1CSU", 101), ("mtMl1E1DSU", 102), ("mtMl1E1LTU", 103), ("mtMl1T1DSUfb", 104), ("mtMl1T1CSUfb", 105), ("mtMl1E1DSUfb", 106), ("mtMl1E1LTUfb", 107), ("mtMl2T1", 108), ("mtMl2E1", 109), ("ls2CcittX50", 110), ("ls2CcittX58", 111), ("ls2ATandTSdm", 112), ("ls2ACcittX50", 113), ("ls2ACcittX58", 114), ("ls2AATandTSdm", 115), ("ls2A2Ts", 116), ("ls2M", 117), ("hs2", 120), ("hs3", 121), ("hsq", 122), ("hs703", 123), ("hsQM", 124), ("hsqN", 125), ("hs6", 126), ("hs12", 127), ("hs4T1", 130), ("hs4E1", 131), ("vc2EandM", 140), ("vc2Fxs1Plar", 141), ("vc2Fxo1", 142), ("vc2Fxs2", 143), ("vc2Fxo2", 144), ("vc2Fxs3", 145), ("vc2Fxo3", 146), ("vc26EandM", 147), ("mtvc2", 148), ("vc2R2Fxs", 149), ("hsu", 150), ("mbeA", 151), ("mbeB", 152), ("mbeU", 153), ("tre", 154), ("hsuI", 155), ("hsr", 156), ("hss", 157), ("hsu1", 158), ("ls12", 159), ("ls6", 160), ("ls6V1EandM", 161), ("ls6V1Fxo", 162), ("ls6V1Fxs", 163), ("ls6V2EandM", 164), ("ls6V2Fxo", 165), ("ls6V2Fxs", 166), ("ls6VfEandM", 167), ("ls6VfFxo", 168), ("ls6VfFxs", 169), ("vc3EandM", 170), ("vc3Fxo", 171), ("vc3Fxs", 172), ("vcPbx", 173), ("vcPbxT1", 174), ("vcPbxE1", 175), ("vc6EandM", 176), ("vc6Fxo", 177), ("vc6Fxs", 178), ("vcq", 179), ("mhs1V36", 181), ("mhs1V35", 182), ("mhs1G703", 183), ("mhs1DDS", 184), ("mhs3", 185), ("mhs1X21", 186), ("mhs1V24", 187), ("mhs4", 188), ("mhsE1Hs", 189), ("mhsT1Hs", 190), ("mhsHyE1Hs", 191), ("mhsHyT1Hs", 192), ("mlfHybE1Hs", 193), ("mlfHybT1Hs", 194), ("mhs2e1", 195), ("mhs2t1", 196), ("mhsHy2e1", 197), ("mhsHy2t1", 198), ("mlfHybE12", 199), ("mls6", 200), ("mls3", 201), ("mlfHybT12", 204), ("mvc4", 210), ("mvc4PbxE1", 211), ("mvc4PbxT1Dsu", 212), ("mvc4PbxT1Csu", 213), ("mvc4PbxE1Slave", 214), ("mvc4PbxT1Slave", 215), ("mhsS", 220), ("mhsU", 221), ("mhsPriE1", 222), ("mhsPriT1", 223), ("vc12EandM", 230), ("vc12Fxo", 231), ("vc12Fxs", 232), ("vc6aEandM", 233), ("vc6aFxo", 234), ("vc6aFxs", 235), ("vc6AgFxo", 236), ("vc6AgFxs", 237), ("hsu12", 240), ("hsu6", 241), ("hss12", 242), ("hss6", 243), ("mvg1Lan", 253), ("mvg2Lan", 254)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlCPrgCardType.setStatus('mandatory')
mdlCNoOfExternPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlCNoOfExternPrt.setStatus('mandatory')
mdlCNoOfInternPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlCNoOfInternPrt.setStatus('mandatory')
mdlCmprTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1), )
if mibBuilder.loadTexts: mdlCmprTable.setStatus('mandatory')
mdlCmprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1), ).setIndexNames((0, "DACS-MIB", "mdlCmprTypIdx"), (0, "DACS-MIB", "mdlCmprCnfgIdx"), (0, "DACS-MIB", "mdlCmprVersion"), (0, "DACS-MIB", "mdlCmprSltIdx"))
if mibBuilder.loadTexts: mdlCmprEntry.setStatus('mandatory')
mdlCmprTypIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlCmprTypIdx.setStatus('mandatory')
mdlCmprCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlCmprCnfgIdx.setStatus('mandatory')
mdlCmprVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlCmprVersion.setStatus('mandatory')
mdlCmprSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlCmprSltIdx.setStatus('mandatory')
mdlCmprObj = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlCmprObj.setStatus('mandatory')
mdlAlarmsCmprTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2), )
if mibBuilder.loadTexts: mdlAlarmsCmprTable.setStatus('mandatory')
mdlAlarmsCmprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1), ).setIndexNames((0, "DACS-MIB", "mdlAlarmsCmprVersion"), (0, "DACS-MIB", "mdlAlarmsCmprAlarmSlot"), (0, "DACS-MIB", "mdlAlarmsCmprAlarmIdx"))
if mibBuilder.loadTexts: mdlAlarmsCmprEntry.setStatus('mandatory')
mdlAlarmsCmprVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlAlarmsCmprVersion.setStatus('mandatory')
mdlAlarmsCmprAlarmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlAlarmsCmprAlarmSlot.setStatus('mandatory')
mdlAlarmsCmprAlarmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlAlarmsCmprAlarmIdx.setStatus('mandatory')
mdlAlarmsCmprObj = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 3, 3, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlAlarmsCmprObj.setStatus('mandatory')
prtSInstTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1), )
if mibBuilder.loadTexts: prtSInstTable.setStatus('mandatory')
prtSInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtSInstSltIdx"), (0, "DACS-MIB", "prtSInstPrtIdx"))
if mibBuilder.loadTexts: prtSInstEntry.setStatus('mandatory')
prtSInstSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSInstSltIdx.setStatus('mandatory')
prtSInstPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSInstPrtIdx.setStatus('mandatory')
prtSInstPrtType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("external", 2), ("internal", 3), ("highSpeedV35", 4), ("highSpeedV24", 5), ("highSpeedV36", 6), ("highSpeedX21", 7), ("highSpeedG703", 8), ("highSpeedDDS", 9), ("lowSpeed", 10), ("voice", 11), ("cl", 12), ("isdns", 13), ("isdnu", 14), ("ethernet", 15), ("voiceS0", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSInstPrtType.setStatus('mandatory')
prtSInstIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSInstIfIndex.setStatus('mandatory')
prtSActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("notUsed", 2), ("offLine", 3), ("onLine", 4), ("offLineRedundancy", 5), ("onLineRedundancy", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSActiveStatus.setStatus('mandatory')
prtSAlrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlrStatus.setStatus('mandatory')
prtSMaskedAlrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSMaskedAlrStat.setStatus('mandatory')
prtSClearAlrCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSClearAlrCmd.setStatus('mandatory')
prtSTestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSTestMask.setStatus('mandatory')
prtSTstCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("none", 1), ("localLoop", 2), ("remoteLoop", 3), ("locAndRemMainLoops", 4), ("remoteAnalogLoop", 5), ("remoteDigitalLoop", 6), ("remLoopOnExtUnit", 7), ("bert", 8), ("toneInjection", 9), ("dlciLocalLoop", 10), ("allDlciLocalLoop", 11), ("dlciRemoteLoop", 12), ("allDlciRemoteLoop", 13), ("extInitLocalLoop", 14), ("bertAndRemLoopOnRemUnit", 15), ("remLoopOnRemUnit", 16), ("block", 17), ("backwardToneInject", 18), ("llb", 19), ("rlb", 20), ("ft1Enable", 21), ("lbbd", 22), ("lb1", 23), ("lb2", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSTstCmd.setStatus('mandatory')
prtSTstDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSTstDuration.setStatus('mandatory')
prtSBertClrCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSBertClrCmd.setStatus('mandatory')
prtSBertTstRslt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSBertTstRslt.setStatus('mandatory')
prtSInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSInterfaceType.setStatus('mandatory')
prtSParamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSParamStatus.setStatus('mandatory')
prtSAlrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2), )
if mibBuilder.loadTexts: prtSAlrTable.setStatus('mandatory')
prtSAlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtSAlrSltIdx"), (0, "DACS-MIB", "prtSAlrPrtIdx"), (0, "DACS-MIB", "prtSAlrIdx"))
if mibBuilder.loadTexts: prtSAlrEntry.setStatus('mandatory')
prtSAlrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlrIdx.setStatus('mandatory')
prtSAlrSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlrSltIdx.setStatus('mandatory')
prtSAlrPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlrPrtIdx.setStatus('mandatory')
prtSAlrCodeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlrCodeDescription.setStatus('mandatory')
prtSAlrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlrCode.setStatus('mandatory')
prtSAlrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("event", 3), ("minor", 4), ("major", 5), ("warning", 6), ("critical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlrSeverity.setStatus('mandatory')
prtSAlrState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlrState.setStatus('mandatory')
prtSAlrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlrCounter.setStatus('mandatory')
prtSAlrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlrMask.setStatus('mandatory')
prtSAlrInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlrInvert.setStatus('mandatory')
statisPrtGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3))
prtFrStatis = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1))
prtCrStatis = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2))
prtDlciStatis = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3))
prtT1Statis = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4))
prtFrStatisTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1), )
if mibBuilder.loadTexts: prtFrStatisTable.setStatus('mandatory')
prtFrStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtFrStatisSltIdx"), (0, "DACS-MIB", "prtFrStatisPrtIdx"), (0, "DACS-MIB", "prtFrStatisInvIdx"))
if mibBuilder.loadTexts: prtFrStatisEntry.setStatus('mandatory')
prtFrStatisSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrStatisSltIdx.setStatus('mandatory')
prtFrStatisPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrStatisPrtIdx.setStatus('mandatory')
prtFrStatisInvIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currentInv", 1), ("last", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrStatisInvIdx.setStatus('mandatory')
prtFrTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrTimeElapsed.setStatus('mandatory')
prtFrRxTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrRxTotalFrames.setStatus('mandatory')
prtFrTxTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrTxTotalFrames.setStatus('mandatory')
prtFrRxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrRxTotalBytes.setStatus('mandatory')
prtFrTxTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrTxTotalBytes.setStatus('mandatory')
prtFrRxMngFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrRxMngFrames.setStatus('mandatory')
prtFrTxMngFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrTxMngFrames.setStatus('mandatory')
prtFrRxDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrRxDeFrames.setStatus('mandatory')
prtFrTxDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrTxDeFrames.setStatus('mandatory')
prtFrRxDcrdCongDeFr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrRxDcrdCongDeFr.setStatus('mandatory')
prtFrTxDcrdCongDeFr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrTxDcrdCongDeFr.setStatus('mandatory')
prtFrRxDcrdCongAllFr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrRxDcrdCongAllFr.setStatus('mandatory')
prtFrTxDcrdCongAllFr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrTxDcrdCongAllFr.setStatus('mandatory')
prtFrRxFecn = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrRxFecn.setStatus('mandatory')
prtFrTxFecn = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrTxFecn.setStatus('mandatory')
prtFrRxBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrRxBecn.setStatus('mandatory')
prtFrTxBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrTxBecn.setStatus('mandatory')
prtFrRxBeViol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrRxBeViol.setStatus('mandatory')
prtFrTxBeViol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrTxBeViol.setStatus('mandatory')
prtFrRxBcViol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrRxBcViol.setStatus('mandatory')
prtFrTxBcViol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrTxBcViol.setStatus('mandatory')
prtCrStatisTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1), )
if mibBuilder.loadTexts: prtCrStatisTable.setStatus('mandatory')
prtCrStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtCrStatisSltIdx"), (0, "DACS-MIB", "prtCrStatisPrtIdx"), (0, "DACS-MIB", "prtCrStatisInvIdx"))
if mibBuilder.loadTexts: prtCrStatisEntry.setStatus('mandatory')
prtCrStatisSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCrStatisSltIdx.setStatus('mandatory')
prtCrStatisPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCrStatisPrtIdx.setStatus('mandatory')
prtCrStatisInvIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currentInv", 1), ("last", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCrStatisInvIdx.setStatus('mandatory')
prtCrTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCrTimeElapsed.setStatus('mandatory')
prtCrRxTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCrRxTotalCells.setStatus('mandatory')
prtCrTxTotalCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCrTxTotalCells.setStatus('mandatory')
prtCrRxDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCrRxDataCells.setStatus('mandatory')
prtCrTxDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCrTxDataCells.setStatus('mandatory')
prtDlciStatisTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1), )
if mibBuilder.loadTexts: prtDlciStatisTable.setStatus('mandatory')
prtDlciStatisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtDlciSltIdx"), (0, "DACS-MIB", "prtDlciPrtIdx"), (0, "DACS-MIB", "prtDlciIdx"))
if mibBuilder.loadTexts: prtDlciStatisEntry.setStatus('mandatory')
prtDlciSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciSltIdx.setStatus('mandatory')
prtDlciPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciPrtIdx.setStatus('mandatory')
prtDlciIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciIdx.setStatus('mandatory')
prtDlciRxDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciRxDeFrames.setStatus('mandatory')
prtDlciTxDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciTxDeFrames.setStatus('mandatory')
prtDlciRxDcrdCongDeFr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciRxDcrdCongDeFr.setStatus('mandatory')
prtDlciTxDcrdCongDeFr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciTxDcrdCongDeFr.setStatus('mandatory')
prtDlciRxDcrdCongAllFr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciRxDcrdCongAllFr.setStatus('mandatory')
prtDlciTxDcrdCongAllFr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciTxDcrdCongAllFr.setStatus('mandatory')
prtDlciTxFecn = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciTxFecn.setStatus('mandatory')
prtDlciTxBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciTxBecn.setStatus('mandatory')
prtDlciRxBeViol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciRxBeViol.setStatus('mandatory')
prtDlciTxBeViol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciTxBeViol.setStatus('mandatory')
prtDlciRxBcViol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciRxBcViol.setStatus('mandatory')
prtDlciTxBcViol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciTxBcViol.setStatus('mandatory')
prtT1FdlMsgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1), )
if mibBuilder.loadTexts: prtT1FdlMsgTable.setStatus('mandatory')
prtT1FdlMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtT1FdlMsgSltIdx"), (0, "DACS-MIB", "prtT1FdlMsgPrtIdx"), (0, "DACS-MIB", "prtT1FdlMsgFdlTxRx"))
if mibBuilder.loadTexts: prtT1FdlMsgEntry.setStatus('mandatory')
prtT1FdlMsgSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1FdlMsgSltIdx.setStatus('mandatory')
prtT1FdlMsgPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("exPrt1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1FdlMsgPrtIdx.setStatus('mandatory')
prtT1FdlMsgFdlTxRx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tx", 1), ("rx", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1FdlMsgFdlTxRx.setStatus('mandatory')
prtT1FdlMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 1, 3, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1FdlMsg.setStatus('mandatory')
prtExTsSplitTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1), )
if mibBuilder.loadTexts: prtExTsSplitTable.setStatus('mandatory')
prtExTsSplitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExTsCnfgIdx"), (0, "DACS-MIB", "prtExTsSltIdx"), (0, "DACS-MIB", "prtExTsPrtIdx"), (0, "DACS-MIB", "prtExTsIdx"), (0, "DACS-MIB", "prtExTsBit"))
if mibBuilder.loadTexts: prtExTsSplitEntry.setStatus('mandatory')
prtExTsCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExTsCnfgIdx.setStatus('mandatory')
prtExTsSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExTsSltIdx.setStatus('mandatory')
prtExTsPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExTsPrtIdx.setStatus('mandatory')
prtExTsIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExTsIdx.setStatus('mandatory')
prtExTsBit = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExTsBit.setStatus('mandatory')
prtExTsIConSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("noConnect", 2), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExTsIConSlot.setStatus('mandatory')
prtExTsIConPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExTsIConPrt.setStatus('mandatory')
prtCnfgAgenda = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2))
prtAgendaBehaviourTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1), )
if mibBuilder.loadTexts: prtAgendaBehaviourTable.setStatus('mandatory')
prtAgendaBehaviourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtAgendaBehaviourCnfgIdx"), (0, "DACS-MIB", "prtAgendaBehaviourSltIdx"), (0, "DACS-MIB", "prtAgendaBehaviourPrtIdx"))
if mibBuilder.loadTexts: prtAgendaBehaviourEntry.setStatus('mandatory')
prtAgendaBehaviourCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtAgendaBehaviourCnfgIdx.setStatus('mandatory')
prtAgendaBehaviourSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtAgendaBehaviourSltIdx.setStatus('mandatory')
prtAgendaBehaviourPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtAgendaBehaviourPrtIdx.setStatus('mandatory')
prtAgendaBehaviourOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtAgendaBehaviourOnOff.setStatus('mandatory')
prtCnfgAgendaTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2), )
if mibBuilder.loadTexts: prtCnfgAgendaTable.setStatus('mandatory')
prtCnfgAgendaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtCnfgAgendaCnfgIdx"), (0, "DACS-MIB", "prtCnfgAgendaSltIdx"), (0, "DACS-MIB", "prtCnfgAgendaPrtIdx"), (0, "DACS-MIB", "prtCnfgAgendaDayIdx"), (0, "DACS-MIB", "prtCnfgAgendaSesId"))
if mibBuilder.loadTexts: prtCnfgAgendaEntry.setStatus('mandatory')
prtCnfgAgendaCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCnfgAgendaCnfgIdx.setStatus('mandatory')
prtCnfgAgendaSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCnfgAgendaSltIdx.setStatus('mandatory')
prtCnfgAgendaPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCnfgAgendaPrtIdx.setStatus('mandatory')
prtCnfgAgendaDayIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("sunday", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCnfgAgendaDayIdx.setStatus('mandatory')
prtCnfgAgendaSesId = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCnfgAgendaSesId.setStatus('mandatory')
prtCnfgAgendaFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(86400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtCnfgAgendaFrom.setStatus('mandatory')
prtCnfgAgendaTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(86400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtCnfgAgendaTo.setStatus('mandatory')
prtGenCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3), )
if mibBuilder.loadTexts: prtGenCnfgTable.setStatus('mandatory')
prtGenCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1), ).setIndexNames((0, "DACS-MIB", "prtGenCnfgIdx"), (0, "DACS-MIB", "prtGenCnfgSltIdx"), (0, "DACS-MIB", "prtGenCnfgPrtIdx"))
if mibBuilder.loadTexts: prtGenCnfgEntry.setStatus('mandatory')
prtGenCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenCnfgIdx.setStatus('mandatory')
prtGenCnfgSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenCnfgSltIdx.setStatus('mandatory')
prtGenCnfgPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenCnfgPrtIdx.setStatus('mandatory')
prtGenCnfgLinkToSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtGenCnfgLinkToSlot.setStatus('mandatory')
prtGenCnfgLinkToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtGenCnfgLinkToPort.setStatus('mandatory')
prtGenCnfgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtGenCnfgPortId.setStatus('mandatory')
prtCmprTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1), )
if mibBuilder.loadTexts: prtCmprTable.setStatus('mandatory')
prtCmprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtCmprTypIdx"), (0, "DACS-MIB", "prtCmprCnfgIdx"), (0, "DACS-MIB", "prtCmprVersion"), (0, "DACS-MIB", "prtCmprSltIdx"), (0, "DACS-MIB", "prtCmprPrtIdx"))
if mibBuilder.loadTexts: prtCmprEntry.setStatus('mandatory')
prtCmprTypIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCmprTypIdx.setStatus('mandatory')
prtCmprCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCmprCnfgIdx.setStatus('mandatory')
prtCmprVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCmprVersion.setStatus('mandatory')
prtCmprSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCmprSltIdx.setStatus('mandatory')
prtCmprPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCmprPrtIdx.setStatus('mandatory')
prtCmprObj = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtCmprObj.setStatus('mandatory')
prtDlciCmprTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2), )
if mibBuilder.loadTexts: prtDlciCmprTable.setStatus('mandatory')
prtDlciCmprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtDlciCmprCnfgIdx"), (0, "DACS-MIB", "prtDlciCmprVersion"), (0, "DACS-MIB", "prtDlciCmprSltIdx"), (0, "DACS-MIB", "prtDlciCmprPrtIdx"), (0, "DACS-MIB", "prtDlciCmprDlciIdx"))
if mibBuilder.loadTexts: prtDlciCmprEntry.setStatus('mandatory')
prtDlciCmprCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciCmprCnfgIdx.setStatus('mandatory')
prtDlciCmprVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciCmprVersion.setStatus('mandatory')
prtDlciCmprSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciCmprSltIdx.setStatus('mandatory')
prtDlciCmprPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("inPrt1", 101), ("inPrt2", 102), ("inPrt3", 103), ("inPrt4", 104), ("inPrt5", 105), ("inPrt6", 106), ("inPrt7", 107), ("inPrt8", 108), ("inPrt9", 109), ("inPrt10", 110), ("inPrt11", 111), ("inPrt12", 112)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciCmprPrtIdx.setStatus('mandatory')
prtDlciCmprDlciIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDlciCmprDlciIdx.setStatus('mandatory')
prtDlciCmprObj = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 2, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtDlciCmprObj.setStatus('mandatory')
prtAlarmsCmprTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3), )
if mibBuilder.loadTexts: prtAlarmsCmprTable.setStatus('mandatory')
prtAlarmsCmprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1), ).setIndexNames((0, "DACS-MIB", "prtAlarmsCmprVersion"), (0, "DACS-MIB", "prtAlarmsCmprAlarmSlot"), (0, "DACS-MIB", "prtAlarmsCmprAlarmPort"), (0, "DACS-MIB", "prtAlarmsCmprAlarmIdx"))
if mibBuilder.loadTexts: prtAlarmsCmprEntry.setStatus('mandatory')
prtAlarmsCmprVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtAlarmsCmprVersion.setStatus('mandatory')
prtAlarmsCmprAlarmSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtAlarmsCmprAlarmSlot.setStatus('mandatory')
prtAlarmsCmprAlarmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtAlarmsCmprAlarmPort.setStatus('mandatory')
prtAlarmsCmprAlarmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtAlarmsCmprAlarmIdx.setStatus('mandatory')
prtAlarmsCmprObj = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 4, 3, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtAlarmsCmprObj.setStatus('mandatory')
prtSExHsfStatTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6), )
if mibBuilder.loadTexts: prtSExHsfStatTable.setStatus('mandatory')
prtSExHsfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1), ).setIndexNames((0, "DACS-MIB", "prtSExHsfSltIdx"), (0, "DACS-MIB", "prtSExHsfPrtIdx"))
if mibBuilder.loadTexts: prtSExHsfStatEntry.setStatus('mandatory')
prtSExHsfSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSExHsfSltIdx.setStatus('mandatory')
prtSExHsfPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("exPrt11", 11), ("exPrt12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSExHsfPrtIdx.setStatus('mandatory')
prtSExHsfInterfaceTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("v35", 2), ("rs422", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSExHsfInterfaceTyp.setStatus('mandatory')
prtSExHsfRts = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("notActive", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSExHsfRts.setStatus('mandatory')
cnfgMdlMux = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1))
mdlPbxFramerCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1))
mdlPbxFramerCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1), )
if mibBuilder.loadTexts: mdlPbxFramerCnfgTable.setStatus('mandatory')
mdlPbxFramerCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1), ).setIndexNames((0, "DACS-MIB", "mdlPbxFraCnfgIdx"), (0, "DACS-MIB", "mdlPbxFraSltIdx"))
if mibBuilder.loadTexts: mdlPbxFramerCnfgEntry.setStatus('mandatory')
mdlPbxFraCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlPbxFraCnfgIdx.setStatus('mandatory')
mdlPbxFraSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlPbxFraSltIdx.setStatus('mandatory')
mdlPbxFraEnhEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("ms16", 3), ("ms32", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlPbxFraEnhEcho.setStatus('mandatory')
mdlPbxFraTSGroupAss = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group3", 3), ("group4", 4), ("group5", 5), ("group6", 6), ("group7", 7), ("group8", 8), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlPbxFraTSGroupAss.setStatus('mandatory')
mdlPbxFraSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("tieTrunk", 2), ("tieInvert", 3), ("casTrans", 4), ("userDefined", 5), ("ccsTrans", 6))).clone('casTrans')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlPbxFraSignalMode.setStatus('mandatory')
mdlPbxFraSignalVector = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 6), OctetString().clone(hexValue="0000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlPbxFraSignalVector.setStatus('mandatory')
mdlPbxFraSignalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 7), OctetString().clone(hexValue="ffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlPbxFraSignalMask.setStatus('mandatory')
mdlPbxFraFramerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlPbxFraFramerSlot.setStatus('mandatory')
mdlPbxFraSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("endToEnd", 2), ("localTermination", 3))).clone('endToEnd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlPbxFraSignaling.setStatus('mandatory')
prtExClCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1), )
if mibBuilder.loadTexts: prtExClCnfgTable.setStatus('mandatory')
prtExClCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExClCnfgIdx"), (0, "DACS-MIB", "prtExClSltIdx"), (0, "DACS-MIB", "prtExClPrtIdx"))
if mibBuilder.loadTexts: prtExClCnfgEntry.setStatus('mandatory')
prtExClCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExClCnfgIdx.setStatus('mandatory')
prtExClSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 255))).clone(namedValues=NamedValues(("clA", 3), ("clB", 4), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExClSltIdx.setStatus('mandatory')
prtExClPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExClPrtIdx.setStatus('mandatory')
prtExClUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("noUse", 2), ("nmsSlip", 3), ("nmsPpp", 4), ("muxSlip", 5), ("muxPpp", 6), ("terminal", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExClUsage.setStatus('mandatory')
prtExClRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("r300Bps", 1), ("r1200Bps", 2), ("r2400Bps", 3), ("r4800Bps", 4), ("r9600Bps", 5), ("r19200Bps", 6), ("r38400Bps", 7), ("r57600Bps", 8), ("r115200Bps", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExClRate.setStatus('mandatory')
prtExClDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dataBits7Bits", 1), ("dataBits8Bits", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExClDataBits.setStatus('mandatory')
prtExClParity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("odd", 1), ("even", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExClParity.setStatus('mandatory')
prtExClStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stopBits1Bit", 1), ("stopBits1dot5Bits", 2), ("stopBits2Bits", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExClStopBits.setStatus('mandatory')
prtExClRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("rip2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExClRoutingProtocol.setStatus('mandatory')
prtExPh1MlCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1), )
if mibBuilder.loadTexts: prtExPh1MlCnfgTable.setStatus('mandatory')
prtExPh1MlCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExPh1MlCnfgIdx"), (0, "DACS-MIB", "prtExPh1MlSltIdx"), (0, "DACS-MIB", "prtExPh1MlPrtIdx"))
if mibBuilder.loadTexts: prtExPh1MlCnfgEntry.setStatus('mandatory')
prtExPh1MlCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPh1MlCnfgIdx.setStatus('mandatory')
prtExPh1MlSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPh1MlSltIdx.setStatus('mandatory')
prtExPh1MlPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 101))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("inPrt1", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPh1MlPrtIdx.setStatus('mandatory')
prtExPh1MlConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlConnect.setStatus('mandatory')
prtExPh1MlLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("esfT1", 2), ("sfT1", 3), ("g732nE1", 4), ("g732nE1CRC", 5), ("g732sE1", 6), ("g732sE1CRC", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlLineType.setStatus('mandatory')
prtExPh1MlLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("b7T1", 1), ("b8zsT1", 2), ("transT1", 3), ("hdb3E1", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlLineCode.setStatus('mandatory')
prtExPh1MlLineLen = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("unknown", 1), ("len0p133ft", 2), ("len134p266ft", 3), ("len267p399ft", 4), ("len400p533ft", 5), ("len534p655ft", 6), ("lenFcc68", 7), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlLineLen.setStatus('mandatory')
prtExPh1MlRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("restoreT1secFast", 2), ("restoreT10sec62411", 3), ("ccittE1", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlRestoreTime.setStatus('mandatory')
prtExPh1MlTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("txGain0db", 2), ("txGain7dot5db", 3), ("txGain15db", 4), ("txGain22dot5db", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlTxGain.setStatus('mandatory')
prtExPh1MlRxSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("low26dBm", 2), ("high36dBm", 3), ("shortHaul", 4), ("longHaul", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlRxSensitivity.setStatus('mandatory')
prtExPh1MlIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlIdleCode.setStatus('mandatory')
prtExPh1MlTdmTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("linkA", 1), ("linkB", 2), ("none", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlTdmTrunk.setStatus('mandatory')
prtExPh1MlClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalLocal", 1), ("loopBackLocal", 2), ("nodalTiming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlClkMode.setStatus('mandatory')
prtExPh1MlMfClkSrcSlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notApplicable", 1), ("local", 2), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlMfClkSrcSlt.setStatus('mandatory')
prtExPh1MlMfClkSrcPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 101, 255))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("inPrt1", 101), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlMfClkSrcPrt.setStatus('mandatory')
prtExPh1MlFdlType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("response", 2), ("command", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlFdlType.setStatus('mandatory')
prtExPh1MlInbandMng = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("off", 2), ("fdlOrTs0", 3), ("dedicatedTs", 4), ("dedicatedPpp", 5), ("dedicatedFr", 6), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlInbandMng.setStatus('mandatory')
prtExPh1MlInbandMngRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 1), ("r4k", 2), ("r8k", 3), ("r12k", 4), ("r16k", 5), ("r32k", 6), ("r64k", 7), ("r20k", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlInbandMngRate.setStatus('mandatory')
prtExPh1MlRedundType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("dualCableAIS", 2), ("yCable", 3), ("dualCableParallelTx", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlRedundType.setStatus('mandatory')
prtExPh1MlRedundSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notApplicable", 1), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlRedundSlot.setStatus('mandatory')
prtExPh1MlRedundPort = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 101, 255))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("inPrt1", 101), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlRedundPort.setStatus('mandatory')
prtExPh1MlRedundRecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlRedundRecTime.setStatus('mandatory')
prtExPh1MlInbandMngRoutProt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rip2", 2), ("proprietary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlInbandMngRoutProt.setStatus('mandatory')
prtExPh1MlIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("csu", 2), ("dsu", 3), ("ltu", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlIfType.setStatus('mandatory')
prtExPh1MlTsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2), )
if mibBuilder.loadTexts: prtExPh1MlTsTable.setStatus('mandatory')
prtExPh1MlTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtExPh1MlTsCnfgIdx"), (0, "DACS-MIB", "prtExPh1MlTsSltIdx"), (0, "DACS-MIB", "prtExPh1MlTsPrtIdx"), (0, "DACS-MIB", "prtExPh1MlTsIdx"))
if mibBuilder.loadTexts: prtExPh1MlTsEntry.setStatus('mandatory')
prtExPh1MlTsCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPh1MlTsCnfgIdx.setStatus('mandatory')
prtExPh1MlTsSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPh1MlTsSltIdx.setStatus('mandatory')
prtExPh1MlTsPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 101))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("inPrt1", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPh1MlTsPrtIdx.setStatus('mandatory')
prtExPh1MlTsIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPh1MlTsIdx.setStatus('mandatory')
prtExPh1MlTsIConSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noConnect", 2), ("split", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlTsIConSlot.setStatus('mandatory')
prtExPh1MlTsIConPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlTsIConPrt.setStatus('mandatory')
prtExPh1MlTsIConTs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPh1MlTsIConTs.setStatus('mandatory')
prtExPh1MlTsExt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 2, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPh1MlTsExt.setStatus('mandatory')
prtInPh1MlCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3), )
if mibBuilder.loadTexts: prtInPh1MlCnfgTable.setStatus('mandatory')
prtInPh1MlCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1), ).setIndexNames((0, "DACS-MIB", "prtInPh1MlCnfgIdx"), (0, "DACS-MIB", "prtInPh1MlSltType"), (0, "DACS-MIB", "prtInPh1MlPrtIdx"))
if mibBuilder.loadTexts: prtInPh1MlCnfgEntry.setStatus('mandatory')
prtInPh1MlCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInPh1MlCnfgIdx.setStatus('mandatory')
prtInPh1MlSltType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInPh1MlSltType.setStatus('mandatory')
prtInPh1MlPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInPh1MlPrtIdx.setStatus('mandatory')
prtInPh1MlConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlConnect.setStatus('mandatory')
prtInPh1MlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 100))).clone(namedValues=NamedValues(("r1x56eq56Kbps", 1), ("r1x64eq64Kbps", 2), ("r2x56eq112Kbps", 3), ("r2x64eq128Kbps", 4), ("r3x56eq168Kbps", 5), ("r3x64eq192Kbps", 6), ("r4x56eq224Kbps", 7), ("r4x64eq256Kbps", 8), ("r5x56eq280Kbps", 9), ("r5x64eq320Kbps", 10), ("r6x56eq336Kbps", 11), ("r6x64eq384Kbps", 12), ("r7x56eq392Kbps", 13), ("r7x64eq448Kbps", 14), ("r8x56eq448Kbps", 15), ("r8x64eq512Kbps", 16), ("r9x56eq504Kbps", 17), ("r9x64eq576Kbps", 18), ("r10x56eq560Kbps", 19), ("r10x64eq640Kbps", 20), ("r11x56eq616Kbps", 21), ("r11x64eq704Kbps", 22), ("r12x56eq672Kbps", 23), ("r12x64eq768Kbps", 24), ("r13x56eq728Kbps", 25), ("r13x64eq832Kbps", 26), ("r14x56eq784Kbps", 27), ("r14x64eq896Kbps", 28), ("r15x56eq840Kbps", 29), ("r15x64eq960Kbps", 30), ("r16x56eq896Kbps", 31), ("r16x64eq1024Kbps", 32), ("r17x56eq952Kbps", 33), ("r17x64eq1088Kbps", 34), ("r18x56eq1008Kbps", 35), ("r18x64eq1152Kbps", 36), ("r19x56eq1064Kbps", 37), ("r19x64eq1216Kbps", 38), ("r20x56eq1120Kbps", 39), ("r20x64eq1280Kbps", 40), ("r21x56eq1176Kbps", 41), ("r21x64eq1344Kbps", 42), ("r22x56eq1232Kbps", 43), ("r22x64eq1408Kbps", 44), ("r23x56eq1288Kbps", 45), ("r23x64eq1472Kbps", 46), ("r24x56eq1344Kbps", 47), ("r24x64eq1536Kbps", 48), ("r25x56eq1400Kbps", 49), ("r25x64eq1600Kbps", 50), ("r26x56eq1456Kbps", 51), ("r26x64eq1664Kbps", 52), ("r27x56eq1512Kbps", 53), ("r27x64eq1728Kbps", 54), ("r28x56eq1568Kbps", 55), ("r28x64eq1792Kbps", 56), ("r29x56eq1624Kbps", 57), ("r29x64eq1856Kbps", 58), ("r30x56eq1680Kbps", 59), ("r30x64eq1920Kbps", 60), ("r31x56eq1736Kbps", 61), ("r31x64eq1984Kbps", 62), ("noRate", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlRate.setStatus('mandatory')
prtInPh1MlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fr", 1), ("frPlus", 2), ("pCellRelay", 3), ("hdlcSdlc", 4), ("transparentHdlc", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlProtocol.setStatus('mandatory')
prtInPh1MlConnectionTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("sameNetManaged", 1), ("sameNetNotMana", 2), ("user", 3), ("otherNet", 4), ("pubNet", 5), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlConnectionTyp.setStatus('mandatory')
prtInPh1MlCongResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("flowControl", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlCongResponse.setStatus('mandatory')
prtInPh1MlCongLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlCongLevel.setStatus('mandatory')
prtInPh1MlTc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("tc1sec", 1), ("tc2sec", 2), ("tc3sec", 3), ("tc4sec", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlTc.setStatus('mandatory')
prtInPh1MlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("none", 2), ("fecnBecn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlFlowControl.setStatus('mandatory')
prtInPh1MlSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notApplicable", 1), ("s36Byte", 2), ("s150Byte", 3), ("s264Byte", 4), ("s378Byte", 5), ("s492Byte", 6), ("s236Byte", 7), ("s472Byte", 8), ("s708Byte", 9), ("s944Byte", 10), ("s1180Byte", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlSegment.setStatus('mandatory')
prtInPh1MlFrMngProt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("lmi", 3), ("ansiT1", 4), ("annexA", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlFrMngProt.setStatus('mandatory')
prtInPh1MlEnqPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlEnqPeriod.setStatus('mandatory')
prtInPh1MlFullRptPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlFullRptPeriod.setStatus('mandatory')
prtInPh1MlFrWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlFrWindowSize.setStatus('mandatory')
prtInPh1MlErrorsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlErrorsThreshold.setStatus('mandatory')
prtInPh1MlMaxIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1800)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlMaxIdleTime.setStatus('mandatory')
prtInPh1MlBearerCh = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 255))).clone(namedValues=NamedValues(("notApplicable", 1), ("channelB1", 3), ("channelB2", 4), ("chB1andchB2", 5), ("none", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlBearerCh.setStatus('mandatory')
prtInPh1MlAssociatedExCh = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlAssociatedExCh.setStatus('mandatory')
prtInPh1MlClockEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("nrz", 2), ("nrzI", 3), ("fm0", 4), ("manchester", 5), ("diffManchester", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlClockEncoding.setStatus('mandatory')
prtInPh1MlMinSeparators = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlMinSeparators.setStatus('mandatory')
prtInPh1MlCcittCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("crc16", 2), ("crc32", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlCcittCrc.setStatus('mandatory')
prtInPh1MlFrameSeparator = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("idles", 2), ("flags", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlFrameSeparator.setStatus('mandatory')
prtInPh1MlDlciTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4), )
if mibBuilder.loadTexts: prtInPh1MlDlciTable.setStatus('mandatory')
prtInPh1MlDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1), ).setIndexNames((0, "DACS-MIB", "prtInPh1MlDlciCnfgIdx"), (0, "DACS-MIB", "prtInPh1MlDlciSltIdx"), (0, "DACS-MIB", "prtInPh1MlDlciPrtIdx"), (0, "DACS-MIB", "prtInPh1MlDlciIdx"))
if mibBuilder.loadTexts: prtInPh1MlDlciEntry.setStatus('mandatory')
prtInPh1MlDlciCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInPh1MlDlciCnfgIdx.setStatus('mandatory')
prtInPh1MlDlciSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInPh1MlDlciSltIdx.setStatus('mandatory')
prtInPh1MlDlciPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101, 102, 103))).clone(namedValues=NamedValues(("inPrt1", 101), ("inPrt2", 102), ("inPrt3", 103)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInPh1MlDlciPrtIdx.setStatus('mandatory')
prtInPh1MlDlciIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInPh1MlDlciIdx.setStatus('mandatory')
prtInPh1MlDlciValid = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlDlciValid.setStatus('mandatory')
prtInPh1MlDlciIConSlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noConnect", 2), ("cl", 3), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlDlciIConSlt.setStatus('mandatory')
prtInPh1MlDlciIConPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("clNMS", 99), ("noConnect", 100), ("inPrt1", 101), ("inPrt2", 102), ("inPrt3", 103), ("inPrt4", 104), ("inPrt5", 105), ("inPrt6", 106), ("inPrt7", 107), ("inPrt8", 108), ("inPrt9", 109), ("inPrt10", 110), ("inPrt11", 111), ("inPrt12", 112)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlDlciIConPrt.setStatus('mandatory')
prtInPh1MlDlciIConDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlDlciIConDlci.setStatus('mandatory')
prtInPh1MlDlciTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("txBc9600bps", 3), ("txBc14200bps", 4), ("txBc19200bps", 5), ("txBc28800bps", 6), ("txBc32000bps", 7), ("txBc38400bps", 8), ("txBc48000bps", 9), ("txBc56000bps", 10), ("txBc57600bps", 11), ("txBc64Kbps", 12), ("txBc128Kbps", 13), ("txBc192Kbps", 14), ("txBc256Kbps", 15), ("txBc320Kbps", 16), ("txBc384Kbps", 17), ("txBc448Kbps", 18), ("txBc512Kbps", 19), ("txBc768Kbps", 20), ("txBc1024Kbps", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlDlciTxBc.setStatus('mandatory')
prtInPh1MlDlciTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("txBe9600bps", 3), ("txBe14200bps", 4), ("txBe19200bps", 5), ("txBe28800bps", 6), ("txBe32000bps", 7), ("txBe38400bps", 8), ("txBe48000bps", 9), ("txBe56000bps", 10), ("txBe57600bps", 11), ("txBe64Kbps", 12), ("txBe128Kbps", 13), ("txBe192Kbps", 14), ("txBe256Kbps", 15), ("txBe320Kbps", 16), ("txBe384Kbps", 17), ("txBe448Kbps", 18), ("txBe512Kbps", 19), ("txBe768Kbps", 20), ("txBe1024Kbps", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlDlciTxBe.setStatus('mandatory')
prtInPh1MlDlciRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("rxBc9600bps", 3), ("rxBc14200bps", 4), ("rxBc19200bps", 5), ("rxBc28800bps", 6), ("rxBc32000bps", 7), ("rxBc38400bps", 8), ("rxBc48000bps", 9), ("rxBc56000bps", 10), ("rxBc57600bps", 11), ("rxBc64Kbps", 12), ("rxBc128Kbps", 13), ("rxBc192Kbps", 14), ("rxBc256Kbps", 15), ("rxBc320Kbps", 16), ("rxBc384Kbps", 17), ("rxBc448Kbps", 18), ("rxBc512Kbps", 19), ("rxBc768Kbps", 20), ("rxBc1024Kbps", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlDlciRxBc.setStatus('mandatory')
prtInPh1MlDlciRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("rxBe9600bps", 3), ("rxBe14200bps", 4), ("rxBe19200bps", 5), ("rxBe28800bps", 6), ("rxBe32000bps", 7), ("rxBe38400bps", 8), ("rxBe48000bps", 9), ("rxBe56000bps", 10), ("rxBe57600bps", 11), ("rxBe64Kbps", 12), ("rxBe128Kbps", 13), ("rxBe192Kbps", 14), ("rxBe256Kbps", 15), ("rxBe320Kbps", 16), ("rxBe384Kbps", 17), ("rxBe448Kbps", 18), ("rxBe512Kbps", 19), ("rxBe768Kbps", 20), ("rxBe1024Kbps", 21)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlDlciRxBe.setStatus('mandatory')
prtInPh1MlDlciPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInPh1MlDlciPriority.setStatus('mandatory')
prtInPh1MlDlciStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInPh1MlDlciStatus.setStatus('mandatory')
prtPhMlCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5), )
if mibBuilder.loadTexts: prtPhMlCnfgTable.setStatus('mandatory')
prtPhMlCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1), ).setIndexNames((0, "DACS-MIB", "prtPhMlCnfgIdx"), (0, "DACS-MIB", "prtPhMlSltIdx"), (0, "DACS-MIB", "prtPhMlPrtIdx"))
if mibBuilder.loadTexts: prtPhMlCnfgEntry.setStatus('mandatory')
prtPhMlCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtPhMlCnfgIdx.setStatus('mandatory')
prtPhMlSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtPhMlSltIdx.setStatus('mandatory')
prtPhMlPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("exPrt1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtPhMlPrtIdx.setStatus('mandatory')
prtPhMlConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtPhMlConnect.setStatus('mandatory')
prtPhMlRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62))).clone(namedValues=NamedValues(("r2x64eq128Kbps", 4), ("r3x64eq192Kbps", 6), ("r4x64eq256Kbps", 8), ("r5x64eq320Kbps", 10), ("r6x64eq384Kbps", 12), ("r7x64eq448Kbps", 14), ("r8x64eq512Kbps", 16), ("r9x64eq576Kbps", 18), ("r10x64eq640Kbps", 20), ("r11x64eq704Kbps", 22), ("r12x64eq768Kbps", 24), ("r13x64eq832Kbps", 26), ("r14x64eq896Kbps", 28), ("r15x64eq960Kbps", 30), ("r16x64eq1024Kbps", 32), ("r17x64eq1088Kbps", 34), ("r18x64eq1152Kbps", 36), ("r19x64eq1216Kbps", 38), ("r20x64eq1280Kbps", 40), ("r21x64eq1344Kbps", 42), ("r22x64eq1408Kbps", 44), ("r23x64eq1472Kbps", 46), ("r24x64eq1536Kbps", 48), ("r25x64eq1600Kbps", 50), ("r26x64eq1664Kbps", 52), ("r27x64eq1728Kbps", 54), ("r28x64eq1792Kbps", 56), ("r29x64eq1856Kbps", 58), ("r30x64eq1920Kbps", 60), ("r31x64eq1984Kbps", 62)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtPhMlRate.setStatus('mandatory')
prtPhMlCAS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtPhMlCAS.setStatus('mandatory')
prtPhMlClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("dce", 2), ("ext-dce", 3), ("dte", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtPhMlClockMode.setStatus('mandatory')
prtPhMlSatBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtPhMlSatBuffer.setStatus('mandatory')
prtPhMlDialProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("callIn", 3), ("callOut", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtPhMlDialProcess.setStatus('mandatory')
prtPhMlSyncRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtPhMlSyncRestore.setStatus('mandatory')
prtPhMlBus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("busA", 2), ("busB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtPhMlBus.setStatus('mandatory')
prtPhMlMfSyncSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("none", 2), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtPhMlMfSyncSlot.setStatus('mandatory')
prtLogicalCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1), )
if mibBuilder.loadTexts: prtLogicalCnfgTable.setStatus('mandatory')
prtLogicalCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtLogicalCnfgIdx"), (0, "DACS-MIB", "prtLogicalSltIdx"), (0, "DACS-MIB", "prtLogicalPrtIdx"))
if mibBuilder.loadTexts: prtLogicalCnfgEntry.setStatus('mandatory')
prtLogicalCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtLogicalCnfgIdx.setStatus('mandatory')
prtLogicalSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtLogicalSltIdx.setStatus('mandatory')
prtLogicalPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtLogicalPrtIdx.setStatus('mandatory')
prtLogicalConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtLogicalConnect.setStatus('mandatory')
prtLogicalFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("linkSelector", 2), ("encapsulator", 3), ("huntGroup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtLogicalFunction.setStatus('mandatory')
prtLogicalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtLogicalRowStatus.setStatus('mandatory')
linkSelectorCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2), )
if mibBuilder.loadTexts: linkSelectorCnfgTable.setStatus('mandatory')
linkSelectorCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1), ).setIndexNames((0, "DACS-MIB", "linkSelectorCnfgIdx"), (0, "DACS-MIB", "linkSelectorSltIdx"), (0, "DACS-MIB", "linkSelectorPrtIdx"))
if mibBuilder.loadTexts: linkSelectorCnfgEntry.setStatus('mandatory')
linkSelectorCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSelectorCnfgIdx.setStatus('mandatory')
linkSelectorSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSelectorSltIdx.setStatus('mandatory')
linkSelectorPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSelectorPrtIdx.setStatus('mandatory')
linkSelectorMaxIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkSelectorMaxIdleTime.setStatus('mandatory')
linkSelectorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("backup", 2), ("bod", 3))).clone('backup')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkSelectorMode.setStatus('mandatory')
linkSelectorRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("auto", 2), ("manual", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkSelectorRevert.setStatus('mandatory')
linkSelectorMinBUSession = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkSelectorMinBUSession.setStatus('mandatory')
linkSelectorPLinkTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3), )
if mibBuilder.loadTexts: linkSelectorPLinkTable.setStatus('mandatory')
linkSelectorPLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1), ).setIndexNames((0, "DACS-MIB", "pLinkCnfgIdx"), (0, "DACS-MIB", "pLinkSltIdx"), (0, "DACS-MIB", "pLinkPrtIdx"), (0, "DACS-MIB", "pLinkIdx"))
if mibBuilder.loadTexts: linkSelectorPLinkEntry.setStatus('mandatory')
pLinkCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pLinkCnfgIdx.setStatus('mandatory')
pLinkSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pLinkSltIdx.setStatus('mandatory')
pLinkPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pLinkPrtIdx.setStatus('mandatory')
pLinkIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pLinkIdx.setStatus('mandatory')
pLinkSlotNu = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("noConnect", 2), ("cl", 3), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255))).clone('noConnect')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pLinkSlotNu.setStatus('mandatory')
pLinkPortNu = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 6), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pLinkPortNu.setStatus('mandatory')
pLinkPrioNu = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pLinkPrioNu.setStatus('mandatory')
pLinkVRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 17, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 100))).clone(namedValues=NamedValues(("r1x56eq56Kbps", 1), ("r1x64eq64Kbps", 2), ("r2x56eq112Kbps", 3), ("r2x64eq128Kbps", 4), ("r3x56eq168Kbps", 5), ("r3x64eq192Kbps", 6), ("r4x56eq224Kbps", 7), ("r4x64eq256Kbps", 8), ("r5x56eq280Kbps", 9), ("r5x64eq320Kbps", 10), ("r6x56eq336Kbps", 11), ("r6x64eq384Kbps", 12), ("r7x56eq392Kbps", 13), ("r7x64eq448Kbps", 14), ("r8x56eq448Kbps", 15), ("r8x64eq512Kbps", 16), ("r9x56eq504Kbps", 17), ("r9x64eq576Kbps", 18), ("r10x56eq560Kbps", 19), ("r10x64eq640Kbps", 20), ("r11x56eq616Kbps", 21), ("r11x64eq704Kbps", 22), ("r12x56eq672Kbps", 23), ("r12x64eq768Kbps", 24), ("r13x56eq728Kbps", 25), ("r13x64eq832Kbps", 26), ("r14x56eq784Kbps", 27), ("r14x64eq896Kbps", 28), ("r15x56eq840Kbps", 29), ("r15x64eq960Kbps", 30), ("r16x56eq896Kbps", 31), ("r16x64eq1024Kbps", 32), ("r17x56eq952Kbps", 33), ("r17x64eq1088Kbps", 34), ("r18x56eq1008Kbps", 35), ("r18x64eq1152Kbps", 36), ("r19x56eq1064Kbps", 37), ("r19x64eq1216Kbps", 38), ("r20x56eq1120Kbps", 39), ("r20x64eq1280Kbps", 40), ("r21x56eq1176Kbps", 41), ("r21x64eq1344Kbps", 42), ("r22x56eq1232Kbps", 43), ("r22x64eq1408Kbps", 44), ("r23x56eq1288Kbps", 45), ("r23x64eq1472Kbps", 46), ("r24x56eq1344Kbps", 47), ("r24x64eq1536Kbps", 48), ("r25x56eq1400Kbps", 49), ("r25x64eq1600Kbps", 50), ("r26x56eq1456Kbps", 51), ("r26x64eq1664Kbps", 52), ("r27x56eq1512Kbps", 53), ("r27x64eq1728Kbps", 54), ("r28x56eq1568Kbps", 55), ("r28x64eq1792Kbps", 56), ("r29x56eq1624Kbps", 57), ("r29x64eq1856Kbps", 58), ("r30x56eq1680Kbps", 59), ("r30x64eq1920Kbps", 60), ("r31x56eq1736Kbps", 61), ("r31x64eq1984Kbps", 62), ("noRate", 100))).clone('noRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pLinkVRate.setStatus('mandatory')
prtExPhPlCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1), )
if mibBuilder.loadTexts: prtExPhPlCnfgTable.setStatus('mandatory')
prtExPhPlCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExPhPlCnfgIdx"), (0, "DACS-MIB", "prtExPhPlSltIdx"), (0, "DACS-MIB", "prtExPhPlPrtIdx"))
if mibBuilder.loadTexts: prtExPhPlCnfgEntry.setStatus('mandatory')
prtExPhPlCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPhPlCnfgIdx.setStatus('mandatory')
prtExPhPlSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPhPlSltIdx.setStatus('mandatory')
prtExPhPlPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPhPlPrtIdx.setStatus('mandatory')
prtExPhPlConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlConnect.setStatus('mandatory')
prtExPhPlHRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73))).clone(namedValues=NamedValues(("notApplicable", 1), ("r32KbpsNLE", 2), ("r48KbpsNLE", 3), ("r56KbpsNLE", 4), ("r64KbpsNLE", 5), ("r112KbpsNLE", 6), ("r128KbpsNLE", 7), ("r168KbpsNLE", 8), ("r192KbpsNLE", 9), ("r224KbpsNLE", 10), ("r256KbpsNLE", 11), ("r280KbpsE", 12), ("r320KbpsE", 13), ("r336KbpsNLE", 14), ("r384KbpsNLE", 15), ("r392KbpsE", 16), ("r448KbpsNLE", 17), ("r504KbpsLE", 18), ("r512KbpsE", 19), ("r560KbpsE", 20), ("r576KbpsLE", 21), ("r616KbpsE", 22), ("r640KbpsE", 23), ("r672KbpsNLE", 24), ("r704KbpsE", 25), ("r728KbpsE", 26), ("r768KbpsNLE", 27), ("r784KbpsE", 28), ("r832KbpsE", 29), ("r840KbpsE", 30), ("r896KbpsNLE", 31), ("r952KbpsE", 32), ("r960KbpsE", 33), ("r1008KbpsLE", 34), ("r1024KbpsE", 35), ("r1064KbpsE", 36), ("r1088KbpsE", 37), ("r1120KbpsE", 38), ("r1152KbpsLE", 39), ("r1176KbpsE", 40), ("r1216KbpsE", 41), ("r1232KbpsE", 42), ("r1280KbpsE", 43), ("r1288KbpsE", 44), ("r1344KbpsNLE", 45), ("r1400KbpsE", 46), ("r1408KbpsE", 47), ("r1456KbpsE", 48), ("r1472KbpsE", 49), ("r1512KbpsE", 50), ("r1536KbpsE", 51), ("r1568KbpsE", 52), ("r1600KbpsE", 53), ("r1624KbpsE", 54), ("r1664KbpsE", 55), ("r1680KbpsE", 56), ("r1728KbpsE", 57), ("r1736KbpsE", 58), ("r1792KbpsNLE", 59), ("r1856KbpsE", 60), ("r1920KbpsE", 61), ("r1984KbpsE", 62), ("r2048KbpsE", 63), ("r9d6KbpsNLE", 65), ("r14d4KbpsNLE", 66), ("r16KbpsNLE", 67), ("r19d2KbpsNLE", 68), ("r28d8KbpsNLE", 69), ("r38d4KbpsNLE", 70), ("r57d6KbpsNLE", 71), ("r115d2KbpsNLE", 72), ("r24000bps", 73)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlHRate.setStatus('mandatory')
prtExPhPlLRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("notApplicable", 1), ("r300bpsNLE", 2), ("r600bpsNLE", 3), ("r800bpsNLE", 4), ("r1200bpsNLE", 5), ("r2400bpsNLE", 6), ("r4800bpsNLE", 7), ("r9600bpsNLE", 8), ("r14400bpsLE", 9), ("r19200bpsNLE", 10), ("r28800bpsLE", 11), ("r32000bpsNLE", 12), ("r38400bpsNLE", 13), ("r48000bpsNLE", 14), ("r56000bpsNLE", 15), ("r57600bpsLE", 16), ("r64000bpsNLE", 17), ("r112000bps", 18), ("r115200bps", 19), ("r16000bpsNLE", 20), ("r100bpsNLE", 21), ("r128000bps", 22), ("r24000bps", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlLRate.setStatus('mandatory')
prtExPhPlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("fr", 1), ("frPlus", 2), ("pCellRelay", 3), ("hdlcSdlc", 4), ("transparentHdlc", 5), ("async", 6), ("asyncReliable", 7), ("activePPP", 8), ("slip", 9), ("pppAgent", 10), ("slipAgent", 11), ("transparent", 12), ("sna", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlProtocol.setStatus('mandatory')
prtExPhPlConnectionTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("sameNetManaged", 1), ("sameNetNotMana", 2), ("user", 3), ("otherNet", 4), ("pubNet", 5), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlConnectionTyp.setStatus('mandatory')
prtExPhPlClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dce", 1), ("extDce", 2), ("dte", 3), ("int", 4), ("lbt", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlClkMode.setStatus('mandatory')
prtExPhPlDceClkSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("local", 2), ("nodalTiming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDceClkSrc.setStatus('mandatory')
prtExPhPlCongResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("no", 2), ("flowControl", 3), ("toFlowControl", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlCongResponse.setStatus('mandatory')
prtExPhPlCongLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 70))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlCongLevel.setStatus('mandatory')
prtExPhPlTc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("tc1sec", 1), ("tc2sec", 2), ("tc3sec", 3), ("tc4sec", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlTc.setStatus('mandatory')
prtExPhPlFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 2), ("fecnBecn", 3), ("xonXoff", 4), ("dtrCts", 5), ("speedReduction", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlFlowControl.setStatus('mandatory')
prtExPhPlDcdRts = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("endToEnd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDcdRts.setStatus('mandatory')
prtExPhPlDcdRtsControlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDcdRtsControlPath.setStatus('mandatory')
prtExPhPlDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("dataBits7Bits", 2), ("dataBits8Bits", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDataBits.setStatus('mandatory')
prtExPhPlParity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("odd", 2), ("even", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlParity.setStatus('mandatory')
prtExPhPlStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("sb1Bit", 2), ("sb1dot5Bits", 3), ("sb2Bits", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlStopBits.setStatus('mandatory')
prtExPhPlLXon = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlLXon.setStatus('mandatory')
prtExPhPlLXoff = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlLXoff.setStatus('mandatory')
prtExPhPlFrMngProt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("lmi", 3), ("ansiT1", 4), ("annexA", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlFrMngProt.setStatus('mandatory')
prtExPhPlEnqPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlEnqPeriod.setStatus('mandatory')
prtExPhPlFullRptPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlFullRptPeriod.setStatus('mandatory')
prtExPhPlFrWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlFrWindowSize.setStatus('mandatory')
prtExPhPlErrorsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlErrorsThreshold.setStatus('mandatory')
prtExPhPlPvcCreateMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlPvcCreateMsg.setStatus('mandatory')
prtExPhPlCllmMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlCllmMsg.setStatus('mandatory')
prtExPhPlProtDelayLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("s36Byte", 2), ("s150Byte", 3), ("s264Byte", 4), ("s378Byte", 5), ("s492Byte", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlProtDelayLevel.setStatus('mandatory')
prtExPhPlClockEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("nrz", 2), ("nrzI", 3), ("fm0", 4), ("manchester", 5), ("diffManchester", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlClockEncoding.setStatus('mandatory')
prtExPhPlMinSeparators = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlMinSeparators.setStatus('mandatory')
prtExPhPlCcittCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("crc16", 2), ("crc32", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlCcittCrc.setStatus('mandatory')
prtExPhPlFrameSeparator = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("idles", 2), ("flags", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlFrameSeparator.setStatus('mandatory')
prtExPhPlDlciTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2), )
if mibBuilder.loadTexts: prtExPhPlDlciTable.setStatus('mandatory')
prtExPhPlDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtExPhPlDlciCnfgIdx"), (0, "DACS-MIB", "prtExPhPlDlciSltIdx"), (0, "DACS-MIB", "prtExPhPlDlciPrtIdx"), (0, "DACS-MIB", "prtExPhPlDlciIdx"))
if mibBuilder.loadTexts: prtExPhPlDlciEntry.setStatus('mandatory')
prtExPhPlDlciCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPhPlDlciCnfgIdx.setStatus('mandatory')
prtExPhPlDlciSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPhPlDlciSltIdx.setStatus('mandatory')
prtExPhPlDlciPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPhPlDlciPrtIdx.setStatus('mandatory')
prtExPhPlDlciIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPhPlDlciIdx.setStatus('mandatory')
prtExPhPlDlciValid = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDlciValid.setStatus('mandatory')
prtExPhPlDlciIConSlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("noConnect", 2), ("cl", 3), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDlciIConSlt.setStatus('mandatory')
prtExPhPlDlciIConPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("clNMS", 99), ("noConnect", 100), ("inPrt1", 101), ("inPrt2", 102), ("inPrt3", 103), ("inPrt4", 104), ("inPrt5", 105), ("inPrt6", 106), ("inPrt7", 107), ("inPrt8", 108), ("inPrt9", 109), ("inPrt10", 110)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDlciIConPrt.setStatus('mandatory')
prtExPhPlDlciIConDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDlciIConDlci.setStatus('mandatory')
prtExPhPlDlciTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("txBc9600bps", 3), ("txBc14400bps", 4), ("txBc19200bps", 5), ("txBc28800bps", 6), ("txBc32000bps", 7), ("txBc38400bps", 8), ("txBc48000bps", 9), ("txBc56000bps", 10), ("txBc57600bps", 11), ("txBc64Kbps", 12), ("txBc128Kbps", 13), ("txBc192Kbps", 14), ("txBc256Kbps", 15), ("txBc320Kbps", 16), ("txBc384Kbps", 17), ("txBc448Kbps", 18), ("txBc512Kbps", 19), ("txBc768Kbps", 20), ("txBc1024Kbps", 21), ("txBc16000bps", 25), ("txBc112Kbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDlciTxBc.setStatus('mandatory')
prtExPhPlDlciTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("txBe9600bps", 3), ("txBe14400bps", 4), ("txBe19200bps", 5), ("txBe28800bps", 6), ("txBe32000bps", 7), ("txBe38400bps", 8), ("txBe48000bps", 9), ("txBe56000bps", 10), ("txBe57600bps", 11), ("txBe64Kbps", 12), ("txBe128Kbps", 13), ("txBe192Kbps", 14), ("txBe256Kbps", 15), ("txBe320Kbps", 16), ("txBe384Kbps", 17), ("txBe448Kbps", 18), ("txBe512Kbps", 19), ("txBe768Kbps", 20), ("txBe1024Kbps", 21), ("txBc16000bps", 25), ("txBc112Kbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDlciTxBe.setStatus('mandatory')
prtExPhPlDlciRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("rxBc9600bps", 3), ("rxBc14400bps", 4), ("rxBc19200bps", 5), ("rxBc28800bps", 6), ("rxBc32000bps", 7), ("rxBc38400bps", 8), ("rxBc48000bps", 9), ("rxBc56000bps", 10), ("rxBc57600bps", 11), ("rxBc64Kbps", 12), ("rxBc128Kbps", 13), ("rxBc192Kbps", 14), ("rxBc256Kbps", 15), ("rxBc320Kbps", 16), ("rxBc384Kbps", 17), ("rxBc448Kbps", 18), ("rxBc512Kbps", 19), ("rxBc768Kbps", 20), ("rxBc1024Kbps", 21), ("rxBc16000bps", 25), ("rxBc112Kbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDlciRxBc.setStatus('mandatory')
prtExPhPlDlciRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("rxBe9600bps", 3), ("rxBe14400bps", 4), ("rxBe19200bps", 5), ("rxBe28800bps", 6), ("rxBe32000bps", 7), ("rxBe38400bps", 8), ("rxBe48000bps", 9), ("rxBe56000bps", 10), ("rxBe57600bps", 11), ("rxBe64Kbps", 12), ("rxBe128Kbps", 13), ("rxBe192Kbps", 14), ("rxBe256Kbps", 15), ("rxBe320Kbps", 16), ("rxBe384Kbps", 17), ("rxBe448Kbps", 18), ("rxBe512Kbps", 19), ("rxBe768Kbps", 20), ("rxBe1024Kbps", 21), ("rxBc16000bps", 25), ("rxBc112Kbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDlciRxBe.setStatus('mandatory')
prtExPhPlDlciPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlDlciPriority.setStatus('mandatory')
prtExPhPlDlciStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPhPlDlciStatus.setStatus('mandatory')
prtExPhPlModemTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3), )
if mibBuilder.loadTexts: prtExPhPlModemTable.setStatus('mandatory')
prtExPhPlModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1), ).setIndexNames((0, "DACS-MIB", "prtExPhPlModemCnfgIdx"), (0, "DACS-MIB", "prtExPhPlModemSltIdx"), (0, "DACS-MIB", "prtExPhPlModemPrtIdx"))
if mibBuilder.loadTexts: prtExPhPlModemEntry.setStatus('mandatory')
prtExPhPlModemCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPhPlModemCnfgIdx.setStatus('mandatory')
prtExPhPlModemSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPhPlModemSltIdx.setStatus('mandatory')
prtExPhPlModemPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPhPlModemPrtIdx.setStatus('mandatory')
prtExPhPlModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlModemStatus.setStatus('mandatory')
prtExPhPlModemActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 255))).clone(namedValues=NamedValues(("onFirstFrame", 2), ("always", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlModemActivate.setStatus('mandatory')
prtExPhPlModemMaxIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlModemMaxIdleTime.setStatus('mandatory')
prtExPhPlModemTimeBtwnCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlModemTimeBtwnCalls.setStatus('mandatory')
prtExPhPlModemCallDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 3, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPhPlModemCallDelay.setStatus('mandatory')
prtExLs2CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1), )
if mibBuilder.loadTexts: prtExLs2CnfgTable.setStatus('mandatory')
prtExLs2CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExLs2CnfgIdx"), (0, "DACS-MIB", "prtExLs2SltIdx"), (0, "DACS-MIB", "prtExLs2PrtIdx"))
if mibBuilder.loadTexts: prtExLs2CnfgEntry.setStatus('mandatory')
prtExLs2CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExLs2CnfgIdx.setStatus('mandatory')
prtExLs2SltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExLs2SltIdx.setStatus('mandatory')
prtExLs2PrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExLs2PrtIdx.setStatus('mandatory')
prtExLs2Connect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs2Connect.setStatus('mandatory')
prtExLs2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("r2400bps", 2), ("r4800bps", 3), ("r9600bps", 4), ("r19200bps", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs2Rate.setStatus('mandatory')
prtExLs2ClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dce", 1), ("ext-dce", 2), ("dte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs2ClkMode.setStatus('mandatory')
prtExLs2Cts = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("on", 2), ("rts-min", 3), ("rts-max", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs2Cts.setStatus('mandatory')
prtExLs2Dcd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("card-sync", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs2Dcd.setStatus('mandatory')
prtExLs2EnvIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs2EnvIdx.setStatus('mandatory')
prtInLs2CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2), )
if mibBuilder.loadTexts: prtInLs2CnfgTable.setStatus('mandatory')
prtInLs2CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtInLs2CnfgIdx"), (0, "DACS-MIB", "prtInLs2SltIdx"), (0, "DACS-MIB", "prtInLs2PrtIdx"))
if mibBuilder.loadTexts: prtInLs2CnfgEntry.setStatus('mandatory')
prtInLs2CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInLs2CnfgIdx.setStatus('mandatory')
prtInLs2SltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInLs2SltIdx.setStatus('mandatory')
prtInLs2PrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101, 102))).clone(namedValues=NamedValues(("inPrt1", 101), ("inPrt2", 102)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInLs2PrtIdx.setStatus('mandatory')
prtInLs2Connect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInLs2Connect.setStatus('mandatory')
prtInLs2Group = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInLs2Group.setStatus('mandatory')
prtInLs2Member = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInLs2Member.setStatus('mandatory')
prtInLs2LinkTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInLs2LinkTo.setStatus('deprecated')
prtInLs2EnvAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("auto", 2), ("manual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInLs2EnvAssign.setStatus('mandatory')
prtVc2CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5), )
if mibBuilder.loadTexts: prtVc2CnfgTable.setStatus('mandatory')
prtVc2CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1), ).setIndexNames((0, "DACS-MIB", "prtVc2CnfgIdx"), (0, "DACS-MIB", "prtVc2SltIdx"), (0, "DACS-MIB", "prtVc2PrtIdx"))
if mibBuilder.loadTexts: prtVc2CnfgEntry.setStatus('mandatory')
prtVc2CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtVc2CnfgIdx.setStatus('mandatory')
prtVc2SltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtVc2SltIdx.setStatus('mandatory')
prtVc2PrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("exPrt11", 11), ("exPrt12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtVc2PrtIdx.setStatus('mandatory')
prtExVc2Connect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2Connect.setStatus('mandatory')
prtExVc2TransGain = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2TransGain.setStatus('mandatory')
prtExVc2ReceiveGain = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2ReceiveGain.setStatus('mandatory')
prtExVc2Wire = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("w2wire", 1), ("w4wire", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2Wire.setStatus('mandatory')
prtExVc2CodingLaw = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aLAW", 1), ("uLAW", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2CodingLaw.setStatus('mandatory')
prtExVc2Sig = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noSignaling", 1), ("robbedBitMultiFrame", 2), ("chAssociatedE1", 3), ("robbedBitFrame", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2Sig.setStatus('mandatory')
prtExVc2Oos = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("forcedIdle", 1), ("forcedBusy", 2), ("busyIdle", 3), ("idleBusy", 4), ("notApplicable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2Oos.setStatus('mandatory')
prtExVc2LinkTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2LinkTo.setStatus('deprecated')
prtExVc2OperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("normal", 2), ("unidirectRx", 3), ("broadcast", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2OperMode.setStatus('mandatory')
prtExVc2SigProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 1), ("manual", 2), ("p1", 3), ("p2", 4), ("p3Fxo3S3", 5), ("reversePolarity", 6), ("meteringPulse", 7), ("p4", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2SigProfile.setStatus('mandatory')
prtExVc2CallEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("incoming", 2), ("outgoing", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2CallEnable.setStatus('mandatory')
prtExVc2R2Delay = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("terrestrial", 2), ("satellite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2R2Delay.setStatus('mandatory')
prtExVc2CasStd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notApplicable", 1), ("r2Q422", 2), ("specialA", 3), ("specialB", 4), ("specialC", 5), ("specialD", 6), ("specialE", 7), ("specialF", 8), ("specialG", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2CasStd.setStatus('mandatory')
prtExVc2EchoCanceler = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2EchoCanceler.setStatus('mandatory')
prtExVc2IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("w2Em", 2), ("w4Em", 3), ("fxo", 4), ("fxs", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2IfType.setStatus('mandatory')
prtExVc2Encoding = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("pcm", 2), ("adpcm", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2Encoding.setStatus('mandatory')
prtExVc2TxBitCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 20), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2TxBitCode.setStatus('mandatory')
prtExVc2RxBitOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 21), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2RxBitOutput.setStatus('mandatory')
prtExVc2MeterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("r16Khz", 2), ("r12Khz", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2MeterRate.setStatus('mandatory')
prtExVc2IfSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("loopStart", 2), ("groundStart", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2IfSignaling.setStatus('mandatory')
prtExVc2SeizeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2SeizeAck.setStatus('mandatory')
prtExVc2EandMType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("type1", 2), ("type2", 3), ("type3", 4), ("type5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc2EandMType.setStatus('mandatory')
prtHsfCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6), )
if mibBuilder.loadTexts: prtHsfCnfgTable.setStatus('mandatory')
prtHsfCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1), ).setIndexNames((0, "DACS-MIB", "prtHsfCnfgIdx"), (0, "DACS-MIB", "prtHsfSltIdx"), (0, "DACS-MIB", "prtHsfPrtIdx"))
if mibBuilder.loadTexts: prtHsfCnfgEntry.setStatus('mandatory')
prtHsfCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHsfCnfgIdx.setStatus('mandatory')
prtHsfSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHsfSltIdx.setStatus('mandatory')
prtHsfPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("exPrt11", 11), ("exPrt12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHsfPrtIdx.setStatus('mandatory')
prtExHsfConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsfConnect.setStatus('mandatory')
prtExHsfRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63))).clone(namedValues=NamedValues(("r1x56eq56Kbps", 1), ("r1x64eq64Kbps", 2), ("r2x56eq112Kbps", 3), ("r2x64eq128Kbps", 4), ("r3x56eq168Kbps", 5), ("r3x64eq192Kbps", 6), ("r4x56eq224Kbps", 7), ("r4x64eq256Kbps", 8), ("r5x56eq280Kbps", 9), ("r5x64eq320Kbps", 10), ("r6x56eq336Kbps", 11), ("r6x64eq384Kbps", 12), ("r7x56eq392Kbps", 13), ("r7x64eq448Kbps", 14), ("r8x56eq448Kbps", 15), ("r8x64eq512Kbps", 16), ("r9x56eq504Kbps", 17), ("r9x64eq576Kbps", 18), ("r10x56eq560Kbps", 19), ("r10x64eq640Kbps", 20), ("r11x56eq616Kbps", 21), ("r11x64eq704Kbps", 22), ("r12x56eq672Kbps", 23), ("r12x64eq768Kbps", 24), ("r13x56eq728Kbps", 25), ("r13x64eq832Kbps", 26), ("r14x56eq784Kbps", 27), ("r14x64eq896Kbps", 28), ("r15x56eq840Kbps", 29), ("r15x64eq960Kbps", 30), ("r16x56eq896Kbps", 31), ("r16x64eq1024Kbps", 32), ("r17x56eq952Kbps", 33), ("r17x64eq1088Kbps", 34), ("r18x56eq1008Kbps", 35), ("r18x64eq1152Kbps", 36), ("r19x56eq1064Kbps", 37), ("r19x64eq1216Kbps", 38), ("r20x56eq1120Kbps", 39), ("r20x64eq1280Kbps", 40), ("r21x56eq1176Kbps", 41), ("r21x64eq1344Kbps", 42), ("r22x56eq1232Kbps", 43), ("r22x64eq1408Kbps", 44), ("r23x56eq1288Kbps", 45), ("r23x64eq1472Kbps", 46), ("r24x56eq1344Kbps", 47), ("r24x64eq1536Kbps", 48), ("r25x56eq1400Kbps", 49), ("r25x64eq1600Kbps", 50), ("r26x56eq1456Kbps", 51), ("r26x64eq1664Kbps", 52), ("r27x56eq1512Kbps", 53), ("r27x64eq1728Kbps", 54), ("r28x56eq1568Kbps", 55), ("r28x64eq1792Kbps", 56), ("r29x56eq1624Kbps", 57), ("r29x64eq1856Kbps", 58), ("r30x56eq1680Kbps", 59), ("r30x64eq1920Kbps", 60), ("r31x56eq1736Kbps", 61), ("r31x64eq1984Kbps", 62), ("r32Kbps", 63)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsfRate.setStatus('mandatory')
prtExHsfClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dce", 1), ("ext-dce", 2), ("dte", 3), ("none", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsfClkMode.setStatus('mandatory')
prtExHsfCts = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("rts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsfCts.setStatus('mandatory')
prtExHsfFifoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("auto", 2), ("s16bits", 3), ("s30bits", 4), ("s52bits", 5), ("s72bits", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsfFifoSize.setStatus('mandatory')
prtExHsfLinkTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsfLinkTo.setStatus('deprecated')
prtExHsfOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("normal", 2), ("unidirectRx", 3), ("broadcast", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsfOperMode.setStatus('mandatory')
prtExHsfInbandLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("ft1Enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsfInbandLoopback.setStatus('mandatory')
prtExHsfClkPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("invert", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsfClkPolarity.setStatus('mandatory')
prtExHs4CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1), )
if mibBuilder.loadTexts: prtExHs4CnfgTable.setStatus('mandatory')
prtExHs4CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExHs4CnfgIdx"), (0, "DACS-MIB", "prtExHs4SltIdx"), (0, "DACS-MIB", "prtExHs4PrtIdx"))
if mibBuilder.loadTexts: prtExHs4CnfgEntry.setStatus('mandatory')
prtExHs4CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHs4CnfgIdx.setStatus('mandatory')
prtExHs4SltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHs4SltIdx.setStatus('mandatory')
prtExHs4PrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("exPrt1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHs4PrtIdx.setStatus('mandatory')
prtExHs4Connect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4Connect.setStatus('mandatory')
prtExHs4LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("esfT1", 2), ("sfT1", 3), ("g732nE1", 4), ("g732nE1CRC", 5), ("g732sE1", 6), ("g732sE1CRC", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4LineType.setStatus('mandatory')
prtExHs4LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("b7T1", 1), ("b8zsT1", 2), ("hdb3E1", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4LineCode.setStatus('mandatory')
prtExHs4LineLen = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("len0p133ft", 2), ("len134p266ft", 3), ("len267p399ft", 4), ("len400p533ft", 5), ("len534p655ft", 6), ("fcc68", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4LineLen.setStatus('mandatory')
prtExHs4RestoreT = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("restoreT1secFast", 2), ("restoreT10sec62411", 3), ("ccittE1", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4RestoreT.setStatus('mandatory')
prtExHs4OosSig = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notsupported", 2), ("forcedIdle", 3), ("forcedBusy", 4), ("busyIdle", 5), ("idleBusy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4OosSig.setStatus('mandatory')
prtExHs4OosCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("notsupported", 2), ("oosCode00H", 3), ("oosCode1aH", 4), ("oosCode54H", 5), ("oosCode7eH", 6), ("oosCode7fH", 7), ("oosCode98H", 8), ("oosCode9eH", 9), ("oosCoded5H", 10), ("oosCodee4H", 11), ("oosCodeffH", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4OosCode.setStatus('mandatory')
prtExHs4IdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4IdleCode.setStatus('mandatory')
prtExHs4MfClkSrcSlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("local", 2), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4MfClkSrcSlt.setStatus('mandatory')
prtExHs4MfClkSrcPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 101))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("inPrt1", 101)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4MfClkSrcPrt.setStatus('mandatory')
prtExHs4TsCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2), )
if mibBuilder.loadTexts: prtExHs4TsCnfgTable.setStatus('mandatory')
prtExHs4TsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtExHs4TsCnfgIdx"), (0, "DACS-MIB", "prtExHs4TsSltIdx"), (0, "DACS-MIB", "prtExHs4TsPrtIdx"), (0, "DACS-MIB", "prtExHs4TsIdx"))
if mibBuilder.loadTexts: prtExHs4TsEntry.setStatus('mandatory')
prtExHs4TsCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHs4TsCnfgIdx.setStatus('mandatory')
prtExHs4TsSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHs4TsSltIdx.setStatus('mandatory')
prtExHs4TsPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("exPrt1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHs4TsPrtIdx.setStatus('mandatory')
prtExHs4TsIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHs4TsIdx.setStatus('mandatory')
prtExHs4TsIConSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 100))).clone(namedValues=NamedValues(("noConnect", 2), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("split", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4TsIConSlot.setStatus('mandatory')
prtExHs4TsIConPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 100))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("exPrt11", 11), ("exPrt12", 12), ("noConnect", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4TsIConPrt.setStatus('mandatory')
prtExHs4TsIConTs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 7, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHs4TsIConTs.setStatus('mandatory')
prtExHsiCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1), )
if mibBuilder.loadTexts: prtExHsiCnfgTable.setStatus('mandatory')
prtExHsiCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExHsiCnfgIdx"), (0, "DACS-MIB", "prtExHsiSltIdx"), (0, "DACS-MIB", "prtExHsiPrtIdx"))
if mibBuilder.loadTexts: prtExHsiCnfgEntry.setStatus('mandatory')
prtExHsiCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHsiCnfgIdx.setStatus('mandatory')
prtExHsiSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHsiSltIdx.setStatus('mandatory')
prtExHsiPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("exPrt11", 11), ("exPrt12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHsiPrtIdx.setStatus('mandatory')
prtExHsiConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("no", 2), ("yes", 3), ("v51", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsiConnect.setStatus('mandatory')
prtExHsiRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 255))).clone(namedValues=NamedValues(("r600bps", 2), ("r1200bps", 3), ("r2400bps", 4), ("r4800bps", 5), ("r9600bps", 6), ("r19200bps", 7), ("r38400bps", 8), ("r48kbps", 9), ("r56kbps", 10), ("r64kbps", 11), ("r128kbps", 12), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsiRate.setStatus('mandatory')
prtExHsiLinkTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsiLinkTo.setStatus('deprecated')
prtExHsiInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("lt", 1), ("nt", 2), ("te", 3), ("lt1", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsiInterface.setStatus('mandatory')
prtExHsiActType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("type1", 2), ("type2", 3), ("type3", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsiActType.setStatus('mandatory')
prtInHsiCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2), )
if mibBuilder.loadTexts: prtInHsiCnfgTable.setStatus('mandatory')
prtInHsiCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtInHsiCnfgIdx"), (0, "DACS-MIB", "prtInHsiSltIdx"), (0, "DACS-MIB", "prtInHsiPrtIdx"))
if mibBuilder.loadTexts: prtInHsiCnfgEntry.setStatus('mandatory')
prtInHsiCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInHsiCnfgIdx.setStatus('mandatory')
prtInHsiSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInHsiSltIdx.setStatus('mandatory')
prtInHsiPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInHsiPrtIdx.setStatus('mandatory')
prtInHsiConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInHsiConnect.setStatus('mandatory')
prtInHsiRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 255))).clone(namedValues=NamedValues(("r600bps", 2), ("r1200bps", 3), ("r2400bps", 4), ("r4800bps", 5), ("r9600bps", 6), ("r19200bps", 7), ("r38400bps", 8), ("r48kbps", 9), ("r56kbps", 10), ("r64kbps", 11), ("r128kbps", 12), ("concentrated", 13), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInHsiRate.setStatus('mandatory')
prtInHsiConcentratedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 8, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInHsiConcentratedTo.setStatus('mandatory')
prtExHsrCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1), )
if mibBuilder.loadTexts: prtExHsrCnfgTable.setStatus('mandatory')
prtExHsrCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExHsrCnfgIdx"), (0, "DACS-MIB", "prtExHsrSltIdx"), (0, "DACS-MIB", "prtExHsrPrtIdx"))
if mibBuilder.loadTexts: prtExHsrCnfgEntry.setStatus('mandatory')
prtExHsrCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHsrCnfgIdx.setStatus('mandatory')
prtExHsrSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHsrSltIdx.setStatus('mandatory')
prtExHsrPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExHsrPrtIdx.setStatus('mandatory')
prtExHsrConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrConnect.setStatus('mandatory')
prtExHsrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("sync", 2), ("async", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrProtocol.setStatus('mandatory')
prtExHsrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("r600bps", 2), ("r1200bps", 3), ("r2400bps", 4), ("r4800bps", 5), ("r9600bps", 6), ("r19200bps", 7), ("r38400bps", 8), ("r48kbps", 9), ("r56kbps", 10), ("r64kbps", 11), ("r16000bps", 12), ("r32000bps", 13), ("r57600bps", 14), ("r115200bps", 15), ("r128000bps", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrRate.setStatus('mandatory')
prtExHsrDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("d5bits", 1), ("d6bits", 2), ("d7bits", 3), ("d8bits", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrDataBits.setStatus('mandatory')
prtExHsrParity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("no", 2), ("yes", 3), ("odd", 4), ("even", 5), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrParity.setStatus('mandatory')
prtExHsrStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("stopBits1Bit", 1), ("stopBits2Bits", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrStopBits.setStatus('mandatory')
prtExHsrCts = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 255))).clone(namedValues=NamedValues(("on", 2), ("rts", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrCts.setStatus('mandatory')
prtExHsrClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("dce", 1), ("extDce", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrClkMode.setStatus('mandatory')
prtExHsrLinkTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notApplicable", 1), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrLinkTo.setStatus('deprecated')
prtExHsrDcdDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("local", 2), ("endToEnd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrDcdDsr.setStatus('mandatory')
prtExHsrOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("normal", 2), ("unidirectRx", 3), ("broadcast", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrOperMode.setStatus('mandatory')
prtExHsrRtsDtr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("local", 2), ("endToEnd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrRtsDtr.setStatus('mandatory')
prtExHsrLlbEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrLlbEnable.setStatus('mandatory')
prtExHsrRlbEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrRlbEnable.setStatus('mandatory')
prtExHsrRateAdapt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 10, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("proprietary", 2), ("v110", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExHsrRateAdapt.setStatus('mandatory')
prtExMbeCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1), )
if mibBuilder.loadTexts: prtExMbeCnfgTable.setStatus('mandatory')
prtExMbeCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExMbeCnfgIdx"), (0, "DACS-MIB", "prtExMbeSltIdx"), (0, "DACS-MIB", "prtExMbePrtIdx"))
if mibBuilder.loadTexts: prtExMbeCnfgEntry.setStatus('mandatory')
prtExMbeCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExMbeCnfgIdx.setStatus('mandatory')
prtExMbeSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExMbeSltIdx.setStatus('mandatory')
prtExMbePrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("exPrt1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExMbePrtIdx.setStatus('mandatory')
prtExMbeLan = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remote", 1), ("main", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExMbeLan.setStatus('mandatory')
prtInMbeCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2), )
if mibBuilder.loadTexts: prtInMbeCnfgTable.setStatus('mandatory')
prtInMbeCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtInMbeCnfgIdx"), (0, "DACS-MIB", "prtInMbeSltIdx"), (0, "DACS-MIB", "prtInMbePrtIdx"))
if mibBuilder.loadTexts: prtInMbeCnfgEntry.setStatus('mandatory')
prtInMbeCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInMbeCnfgIdx.setStatus('mandatory')
prtInMbeSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInMbeSltIdx.setStatus('mandatory')
prtInMbePrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101))).clone(namedValues=NamedValues(("inPrt1", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInMbePrtIdx.setStatus('mandatory')
prtInMbeConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInMbeConnect.setStatus('mandatory')
prtInMbeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("r1x64eq64Kbps", 1), ("r2x64eq128Kbps", 2), ("r3x64eq192Kbps", 3), ("r4x64eq256Kbps", 4), ("r5x64eq320Kbps", 5), ("r6x64eq384Kbps", 6), ("r7x64eq448Kbps", 7), ("r8x64eq512Kbps", 8), ("r9x64eq576Kbps", 9), ("r10x64eq640Kbps", 10), ("r11x64eq704Kbps", 11), ("r12x64eq768Kbps", 12), ("r13x64eq832Kbps", 13), ("r14x64eq896Kbps", 14), ("r15x64eq960Kbps", 15), ("r16x64eq1024Kbps", 16), ("r17x64eq1088Kbps", 17), ("r18x64eq1152Kbps", 18), ("r19x64eq1216Kbps", 19), ("r20x64eq1280Kbps", 20), ("r21x64eq1344Kbps", 21), ("r22x64eq1408Kbps", 22), ("r23x64eq1472Kbps", 23), ("r24x64eq1536Kbps", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInMbeRate.setStatus('mandatory')
prtInMbeLinkTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInMbeLinkTo.setStatus('deprecated')
prtExTreCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1), )
if mibBuilder.loadTexts: prtExTreCnfgTable.setStatus('mandatory')
prtExTreCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExTreCnfgIdx"), (0, "DACS-MIB", "prtExTreSltIdx"), (0, "DACS-MIB", "prtExTrePrtIdx"))
if mibBuilder.loadTexts: prtExTreCnfgEntry.setStatus('mandatory')
prtExTreCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExTreCnfgIdx.setStatus('mandatory')
prtExTreSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExTreSltIdx.setStatus('mandatory')
prtExTrePrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("exPrt1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExTrePrtIdx.setStatus('mandatory')
prtExTreLan = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remote", 1), ("main", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExTreLan.setStatus('mandatory')
prtExTreLanRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("r4M", 1), ("r16M", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExTreLanRate.setStatus('mandatory')
prtInTreCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2), )
if mibBuilder.loadTexts: prtInTreCnfgTable.setStatus('mandatory')
prtInTreCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtInTreCnfgIdx"), (0, "DACS-MIB", "prtInTreSltIdx"), (0, "DACS-MIB", "prtInTrePrtIdx"))
if mibBuilder.loadTexts: prtInTreCnfgEntry.setStatus('mandatory')
prtInTreCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInTreCnfgIdx.setStatus('mandatory')
prtInTreSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInTreSltIdx.setStatus('mandatory')
prtInTrePrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101))).clone(namedValues=NamedValues(("inPrt1", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInTrePrtIdx.setStatus('mandatory')
prtInTreConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInTreConnect.setStatus('mandatory')
prtInTreRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("r1x56eq56Kbps", 1), ("r1x64eq64Kbps", 2), ("r2x56eq112Kbps", 3), ("r2x64eq128Kbps", 4), ("r3x56eq168Kbps", 5), ("r3x64eq192Kbps", 6), ("r4x56eq224Kbps", 7), ("r4x64eq256Kbps", 8), ("r5x56eq280Kbps", 9), ("r5x64eq320Kbps", 10), ("r6x56eq336Kbps", 11), ("r6x64eq384Kbps", 12), ("r7x56eq392Kbps", 13), ("r7x64eq448Kbps", 14), ("r8x56eq448Kbps", 15), ("r8x64eq512Kbps", 16), ("r9x56eq504Kbps", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInTreRate.setStatus('mandatory')
prtInTreLinkTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInTreLinkTo.setStatus('deprecated')
prtExPVc4CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1), )
if mibBuilder.loadTexts: prtExPVc4CnfgTable.setStatus('mandatory')
prtExPVc4CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExPVc4CnfgIdx"), (0, "DACS-MIB", "prtExPVc4SltIdx"), (0, "DACS-MIB", "prtExPVc4PrtIdx"))
if mibBuilder.loadTexts: prtExPVc4CnfgEntry.setStatus('mandatory')
prtExPVc4CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPVc4CnfgIdx.setStatus('mandatory')
prtExPVc4SltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPVc4SltIdx.setStatus('mandatory')
prtExPVc4PrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 101, 102, 103, 104))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("inPrt1", 101), ("inPrt2", 102), ("inPrt3", 103), ("inPrt4", 104)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPVc4PrtIdx.setStatus('mandatory')
prtExPVc4PrtType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("eAndM", 1), ("fxo", 2), ("fxs", 3), ("internal", 4), ("s0", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPVc4PrtType.setStatus('mandatory')
prtExPVc4Connect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4Connect.setStatus('mandatory')
prtExPVc4IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("eAndM4wires", 2), ("eAndM2wires", 3), ("fxoGnd", 4), ("fxoLoop", 5), ("fxsGnd", 6), ("fxsLoop", 7), ("e1Framer", 8), ("e1Slave", 9), ("t1Framer", 10), ("t1Slave", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPVc4IfType.setStatus('mandatory')
prtExPVc4TxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4TxGain.setStatus('mandatory')
prtExPVc4RxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4RxGain.setStatus('mandatory')
prtExPVc4MaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notConnected", 1), ("r4800bps", 2), ("r7200bps", 3), ("r9600bps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4MaxRate.setStatus('mandatory')
prtExPVc4Tc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("t1sec", 1), ("t2sec", 2), ("t3sec", 3), ("t4sec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4Tc.setStatus('mandatory')
prtExPVc4Oos = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSupported", 2), ("forcedIdle", 3), ("forcedBusy", 4), ("busyIdle", 5), ("idleBusy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4Oos.setStatus('mandatory')
prtExPVc4EchoCanceler = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4EchoCanceler.setStatus('mandatory')
prtExPVc4VarDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4VarDelay.setStatus('mandatory')
prtExPVc4CongLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 70))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4CongLevel.setStatus('mandatory')
prtExPVc4Wire = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("w2wire", 1), ("w4wire", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4Wire.setStatus('mandatory')
prtExPVc4ExtensionType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("forceConnect", 2), ("voiceSwitching", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4ExtensionType.setStatus('mandatory')
prtExPVc4ExtensionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4ExtensionNumber.setStatus('mandatory')
prtExPVc4OutPulsing = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4OutPulsing.setStatus('mandatory')
prtExPVc4HuntGroupMb = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4HuntGroupMb.setStatus('mandatory')
prtExPVc4HuntGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4HuntGroupIdx.setStatus('mandatory')
prtExPVc4AutoFaxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4AutoFaxMode.setStatus('mandatory')
prtExPVc4FaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notConnected", 1), ("r4800bps", 2), ("r7200bps", 3), ("r9600bps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4FaxRate.setStatus('mandatory')
prtExPVc4SeizeAck = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4SeizeAck.setStatus('mandatory')
prtExPVc4SignalingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("delayStart", 2), ("immediateStart", 3), ("winkStart", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4SignalingProtocol.setStatus('mandatory')
prtExPVc4DelayStart = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4DelayStart.setStatus('mandatory')
prtExPVc4WinkMinDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4WinkMinDuration.setStatus('mandatory')
prtExPVc4WinkMaxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4WinkMaxDuration.setStatus('mandatory')
prtExPVc4DlciTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2), )
if mibBuilder.loadTexts: prtExPVc4DlciTable.setStatus('mandatory')
prtExPVc4DlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtExPVc4DlciCnfgIdx"), (0, "DACS-MIB", "prtExPVc4DlciSltIdx"), (0, "DACS-MIB", "prtExPVc4DlciPrtIdx"))
if mibBuilder.loadTexts: prtExPVc4DlciEntry.setStatus('mandatory')
prtExPVc4DlciCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPVc4DlciCnfgIdx.setStatus('mandatory')
prtExPVc4DlciSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPVc4DlciSltIdx.setStatus('mandatory')
prtExPVc4DlciPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPVc4DlciPrtIdx.setStatus('mandatory')
prtExPVc4DlciValid = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4DlciValid.setStatus('mandatory')
prtExPVc4DlciIConSlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("noConnect", 2), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4DlciIConSlt.setStatus('mandatory')
prtExPVc4DlciIConPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("noConnect", 100), ("inPrt1", 101), ("inPrt2", 102), ("inPrt3", 103), ("inPrt4", 104), ("inPrt5", 105), ("inPrt6", 106), ("inPrt7", 107), ("inPrt8", 108), ("inPrt9", 109), ("inPrt10", 110), ("inPrt11", 111), ("inPrt12", 112)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4DlciIConPrt.setStatus('mandatory')
prtExPVc4DlciIConDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4DlciIConDlci.setStatus('mandatory')
prtExPVc4DlciTxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("txBc9600bps", 3), ("txBc14400bps", 4), ("txBc19200bps", 5), ("txBc28800bps", 6), ("txBc32000bps", 7), ("txBc38400bps", 8), ("txBc48000bps", 9), ("txBc56000bps", 10), ("txBc57600bps", 11), ("txBc64Kbps", 12), ("txBc128Kbps", 13), ("txBc192Kbps", 14), ("txBc256Kbps", 15), ("txBc320Kbps", 16), ("txBc384Kbps", 17), ("txBc448Kbps", 18), ("txBc512Kbps", 19), ("txBc768Kbps", 20), ("txBc1024Kbps", 21), ("txBc16000bps", 25), ("txBc112Kbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4DlciTxBc.setStatus('mandatory')
prtExPVc4DlciTxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("txBe9600bps", 3), ("txBe14400bps", 4), ("txBe19200bps", 5), ("txBe28800bps", 6), ("txBe32000bps", 7), ("txBe38400bps", 8), ("txBe48000bps", 9), ("txBe56000bps", 10), ("txBe57600bps", 11), ("txBe64Kbps", 12), ("txBe128Kbps", 13), ("txBe192Kbps", 14), ("txBe256Kbps", 15), ("txBe320Kbps", 16), ("txBe384Kbps", 17), ("txBe448Kbps", 18), ("txBe512Kbps", 19), ("txBe768Kbps", 20), ("txBe1024Kbps", 21), ("txBc16000bps", 25), ("txBc112Kbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4DlciTxBe.setStatus('mandatory')
prtExPVc4DlciRxBc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("rxBc9600bps", 3), ("rxBc14400bps", 4), ("rxBc19200bps", 5), ("rxBc28800bps", 6), ("rxBc32000bps", 7), ("rxBc38400bps", 8), ("rxBc48000bps", 9), ("rxBc56000bps", 10), ("rxBc57600bps", 11), ("rxBc64Kbps", 12), ("rxBc128Kbps", 13), ("rxBc192Kbps", 14), ("rxBc256Kbps", 15), ("rxBc320Kbps", 16), ("rxBc384Kbps", 17), ("rxBc448Kbps", 18), ("rxBc512Kbps", 19), ("rxBc768Kbps", 20), ("rxBc1024Kbps", 21), ("rxBc16000bps", 25), ("rxBc112Kbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4DlciRxBc.setStatus('mandatory')
prtExPVc4DlciRxBe = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26))).clone(namedValues=NamedValues(("full", 1), ("zero", 2), ("rxBe9600bps", 3), ("rxBe14400bps", 4), ("rxBe19200bps", 5), ("rxBe28800bps", 6), ("rxBe32000bps", 7), ("rxBe38400bps", 8), ("rxBe48000bps", 9), ("rxBe56000bps", 10), ("rxBe57600bps", 11), ("rxBe64Kbps", 12), ("rxBe128Kbps", 13), ("rxBe192Kbps", 14), ("rxBe256Kbps", 15), ("rxBe320Kbps", 16), ("rxBe384Kbps", 17), ("rxBe448Kbps", 18), ("rxBe512Kbps", 19), ("rxBe768Kbps", 20), ("rxBe1024Kbps", 21), ("rxBc16000bps", 25), ("rxBc112Kbps", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4DlciRxBe.setStatus('mandatory')
prtExPVc4DlciPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExPVc4DlciPriority.setStatus('mandatory')
prtExPVc4DlciStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExPVc4DlciStatus.setStatus('mandatory')
prtExLs6CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1), )
if mibBuilder.loadTexts: prtExLs6CnfgTable.setStatus('mandatory')
prtExLs6CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExLs6CnfgIdx"), (0, "DACS-MIB", "prtExLs6SltIdx"), (0, "DACS-MIB", "prtExLs6PrtIdx"))
if mibBuilder.loadTexts: prtExLs6CnfgEntry.setStatus('mandatory')
prtExLs6CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExLs6CnfgIdx.setStatus('mandatory')
prtExLs6SltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExLs6SltIdx.setStatus('mandatory')
prtExLs6PrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("exPrt11", 11), ("exPrt12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExLs6PrtIdx.setStatus('mandatory')
prtExLs6Connect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6Connect.setStatus('mandatory')
prtExLs6Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("sync", 2), ("async", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6Protocol.setStatus('mandatory')
prtExLs6Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("r300bps", 2), ("r600bps", 3), ("r1200bps", 4), ("r2400bps", 5), ("r4800bps", 6), ("r7200bps", 7), ("r8000bps", 8), ("r9600bps", 9), ("r14400bps", 10), ("r16000bps", 11), ("r19200bps", 12), ("r24000bps", 13), ("r28800bps", 14), ("r32000bps", 15), ("r38400bps", 16), ("r48000bps", 17), ("r56000bps", 18), ("r57600bps", 19), ("r64000bps", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6Rate.setStatus('mandatory')
prtExLs6ClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("dce", 1), ("extDce", 2), ("dte1", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6ClkMode.setStatus('mandatory')
prtExLs6CtrlSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("local", 2), ("rts", 3), ("dtrAndRts", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6CtrlSignal.setStatus('mandatory')
prtExLs6DataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("d6bits", 1), ("d7bits", 2), ("d8bits", 3), ("d9bits", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6DataBits.setStatus('mandatory')
prtExLs6Cts = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("rts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6Cts.setStatus('mandatory')
prtExLs6LinkToInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101, 102, 255))).clone(namedValues=NamedValues(("inPrt1", 101), ("inPrt2", 102), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6LinkToInternal.setStatus('mandatory')
prtExLs6VCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2), )
if mibBuilder.loadTexts: prtExLs6VCnfgTable.setStatus('mandatory')
prtExLs6VCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtExLs6VCnfgIdx"), (0, "DACS-MIB", "prtExLs6VSltIdx"), (0, "DACS-MIB", "prtExLs6VPrtIdx"))
if mibBuilder.loadTexts: prtExLs6VCnfgEntry.setStatus('mandatory')
prtExLs6VCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExLs6VCnfgIdx.setStatus('mandatory')
prtExLs6VSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExLs6VSltIdx.setStatus('mandatory')
prtExLs6VPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8))).clone(namedValues=NamedValues(("exPrt7", 7), ("exPrt8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExLs6VPrtIdx.setStatus('mandatory')
prtExLs6VConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6VConnect.setStatus('mandatory')
prtExLs6VRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("r6400bps", 2), ("r7200bps", 3), ("r8000bps", 4), ("r9600bps", 5), ("r16000bps", 6), ("r24000bps", 7), ("r32000bps", 8), ("r64000bps", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6VRate.setStatus('mandatory')
prtExLs6VEchoCanceler = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6VEchoCanceler.setStatus('mandatory')
prtExLs6VIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("w2wire", 1), ("w4wire", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6VIfType.setStatus('mandatory')
prtExLs6VTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6VTxGain.setStatus('mandatory')
prtExLs6VRxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6VRxGain.setStatus('mandatory')
prtExLs6VOos = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forcedIdle", 1), ("forcedBusy", 2), ("busyIdle", 3), ("idleBusy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExLs6VOos.setStatus('mandatory')
prtInLs6CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3), )
if mibBuilder.loadTexts: prtInLs6CnfgTable.setStatus('mandatory')
prtInLs6CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1), ).setIndexNames((0, "DACS-MIB", "prtInLs6CnfgIdx"), (0, "DACS-MIB", "prtInLs6SltIdx"), (0, "DACS-MIB", "prtInLs6PrtIdx"))
if mibBuilder.loadTexts: prtInLs6CnfgEntry.setStatus('mandatory')
prtInLs6CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInLs6CnfgIdx.setStatus('mandatory')
prtInLs6SltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInLs6SltIdx.setStatus('mandatory')
prtInLs6PrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101, 102))).clone(namedValues=NamedValues(("inPrt1", 101), ("inPrt2", 102)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInLs6PrtIdx.setStatus('mandatory')
prtInLs6Connect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInLs6Connect.setStatus('mandatory')
prtInLs6TandemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noTandem", 1), ("tandemMaster", 2), ("tandemSlave", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInLs6TandemMode.setStatus('mandatory')
prtInLs6Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("r32Kbps", 1), ("r56Kbps", 2), ("r64Kpbs", 3), ("r128Kbps", 4), ("r256Kbps", 5), ("r384Kbps", 6), ("r192Kbps", 7), ("r512Kbps", 8), ("r768Kbps", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInLs6Rate.setStatus('mandatory')
prtInLs6RemoteType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ls6", 1), ("km2kSlave", 2), ("km2kStandalone", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInLs6RemoteType.setStatus('mandatory')
prtInLs6LinkTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInLs6LinkTo.setStatus('deprecated')
prtExVc3CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1), )
if mibBuilder.loadTexts: prtExVc3CnfgTable.setStatus('mandatory')
prtExVc3CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExVc3CnfgIdx"), (0, "DACS-MIB", "prtExVc3SltIdx"), (0, "DACS-MIB", "prtExVc3PrtIdx"))
if mibBuilder.loadTexts: prtExVc3CnfgEntry.setStatus('mandatory')
prtExVc3CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExVc3CnfgIdx.setStatus('mandatory')
prtExVc3SltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExVc3SltIdx.setStatus('mandatory')
prtExVc3PrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExVc3PrtIdx.setStatus('mandatory')
prtExVc3Connect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc3Connect.setStatus('mandatory')
prtExVc3TransGain = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc3TransGain.setStatus('mandatory')
prtExVc3ReceiveGain = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc3ReceiveGain.setStatus('mandatory')
prtExVc3Wire = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("w2wire", 1), ("w4wire", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc3Wire.setStatus('mandatory')
prtExVc3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("r9600bps", 1), ("r4800bps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc3Rate.setStatus('mandatory')
prtExVc3EchoCanceler = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVc3EchoCanceler.setStatus('mandatory')
prtInVc3CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2), )
if mibBuilder.loadTexts: prtInVc3CnfgTable.setStatus('mandatory')
prtInVc3CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtInVc3CnfgIdx"), (0, "DACS-MIB", "prtInVc3SltIdx"), (0, "DACS-MIB", "prtInVc3PrtIdx"))
if mibBuilder.loadTexts: prtInVc3CnfgEntry.setStatus('mandatory')
prtInVc3CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInVc3CnfgIdx.setStatus('mandatory')
prtInVc3SltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInVc3SltIdx.setStatus('mandatory')
prtInVc3PrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101))).clone(namedValues=NamedValues(("inPrt1", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtInVc3PrtIdx.setStatus('mandatory')
prtInVc3Connect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInVc3Connect.setStatus('mandatory')
prtInVc3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("r32000bps", 1), ("r16000bps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInVc3Rate.setStatus('mandatory')
prtInVc3Oos = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("forcedIdle", 1), ("forcedBusy", 2), ("busyIdle", 3), ("idleBusy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInVc3Oos.setStatus('mandatory')
prtInVc3LinkTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtInVc3LinkTo.setStatus('deprecated')
prtExVcPbxCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1), )
if mibBuilder.loadTexts: prtExVcPbxCnfgTable.setStatus('mandatory')
prtExVcPbxCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtExVcPbxCnfgIdx"), (0, "DACS-MIB", "prtExVcPbxSltIdx"), (0, "DACS-MIB", "prtExVcPbxPrtIdx"))
if mibBuilder.loadTexts: prtExVcPbxCnfgEntry.setStatus('mandatory')
prtExVcPbxCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExVcPbxCnfgIdx.setStatus('mandatory')
prtExVcPbxSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExVcPbxSltIdx.setStatus('mandatory')
prtExVcPbxPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("exPrt1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExVcPbxPrtIdx.setStatus('mandatory')
prtExVcPbxConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxConnect.setStatus('mandatory')
prtExVcPbxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExVcPbxGroup.setStatus('mandatory')
prtExVcPbxTransparent = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 255))).clone(namedValues=NamedValues(("no", 2), ("yes", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxTransparent.setStatus('mandatory')
prtExVcPbxTransSignalTs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxTransSignalTs.setStatus('mandatory')
prtExVcPbxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("esfT1", 2), ("sfT1", 3), ("g732nE1", 4), ("g732nE1CRC", 5), ("g732sE1", 6), ("g732sE1CRC", 7), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxFrame.setStatus('mandatory')
prtExVcPbxRestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 255))).clone(namedValues=NamedValues(("restoreT1secFast", 2), ("restoreT10sec62411", 3), ("ccittE1", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxRestoreTime.setStatus('mandatory')
prtExVcPbxLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("b7zsT1", 1), ("b8zsT1", 2), ("transT1", 3), ("hdb3E1", 4), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxLineCode.setStatus('mandatory')
prtExVcPbxLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("unknown", 1), ("len0p133ft", 2), ("len134p266ft", 3), ("len267p399ft", 4), ("len400p533ft", 5), ("len534p655ft", 6), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxLineLength.setStatus('mandatory')
prtExVcPbxLinkTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxLinkTo.setStatus('deprecated')
prtExVcPbxSignalOper = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("bEqA", 3), ("inverseA", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxSignalOper.setStatus('mandatory')
prtExVcPbxIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("notApplicable", 1), ("hff", 2), ("he4", 3), ("hd5", 4), ("h9e", 5), ("h98", 6), ("h7f", 7), ("h7e", 8), ("h54", 9), ("h1a", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxIdleCode.setStatus('mandatory')
prtIn1p6VcPbxCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2), )
if mibBuilder.loadTexts: prtIn1p6VcPbxCnfgTable.setStatus('mandatory')
prtIn1p6VcPbxCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtIn1p6VcPbxCnfgIdx"), (0, "DACS-MIB", "prtIn1p6VcPbxSltIdx"), (0, "DACS-MIB", "prtIn1p6VcPbxPrtIdx"))
if mibBuilder.loadTexts: prtIn1p6VcPbxCnfgEntry.setStatus('mandatory')
prtIn1p6VcPbxCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIn1p6VcPbxCnfgIdx.setStatus('mandatory')
prtIn1p6VcPbxSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIn1p6VcPbxSltIdx.setStatus('mandatory')
prtIn1p6VcPbxPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(101, 102, 103, 104, 105, 106))).clone(namedValues=NamedValues(("inPrt1", 101), ("inPrt2", 102), ("inPrt3", 103), ("inPrt4", 104), ("inPrt5", 105), ("inPrt6", 106)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIn1p6VcPbxPrtIdx.setStatus('mandatory')
prtIn1p6VcPbxConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIn1p6VcPbxConnect.setStatus('mandatory')
prtIn1p6VcPbxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("r4800bps", 1), ("r6400bps", 2), ("r7200bps", 3), ("r8000bps", 4), ("r9600bps", 5), ("r12800bps", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIn1p6VcPbxRate.setStatus('mandatory')
prtIn1p6VcPbxEchoCanceler = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIn1p6VcPbxEchoCanceler.setStatus('mandatory')
prtIn1p6VcPbxPabxTs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIn1p6VcPbxPabxTs.setStatus('mandatory')
prtIn7p8VcPbxCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3), )
if mibBuilder.loadTexts: prtIn7p8VcPbxCnfgTable.setStatus('mandatory')
prtIn7p8VcPbxCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1), ).setIndexNames((0, "DACS-MIB", "prtIn7p8VcPbxCnfgIdx"), (0, "DACS-MIB", "prtIn7p8VcPbxSltIdx"), (0, "DACS-MIB", "prtIn7p8VcPbxPrtIdx"))
if mibBuilder.loadTexts: prtIn7p8VcPbxCnfgEntry.setStatus('mandatory')
prtIn7p8VcPbxCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIn7p8VcPbxCnfgIdx.setStatus('mandatory')
prtIn7p8VcPbxSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIn7p8VcPbxSltIdx.setStatus('mandatory')
prtIn7p8VcPbxPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(107, 108))).clone(namedValues=NamedValues(("inPrt7", 107), ("inPrt8", 108)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIn7p8VcPbxPrtIdx.setStatus('mandatory')
prtIn7p8VcPbxConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIn7p8VcPbxConnect.setStatus('mandatory')
prtIn7p8VcPbxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIn7p8VcPbxMode.setStatus('mandatory')
prtIn7p8VcPbxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("r32Kbps", 1), ("r16Kbps", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIn7p8VcPbxRate.setStatus('mandatory')
prtIn7p8VcPbxSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("aBit", 2), ("abcBit", 3), ("abcdBit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIn7p8VcPbxSignalMode.setStatus('mandatory')
prtIn7p8VcPbxOos = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forcedIdle", 1), ("forcedBusy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIn7p8VcPbxOos.setStatus('mandatory')
prtIn7p8VcPbxLinkTo = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIn7p8VcPbxLinkTo.setStatus('deprecated')
prtExVcPbxTsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4), )
if mibBuilder.loadTexts: prtExVcPbxTsTable.setStatus('mandatory')
prtExVcPbxTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1), ).setIndexNames((0, "DACS-MIB", "prtExVcPbxTsCnfgIdx"), (0, "DACS-MIB", "prtExVcPbxTsSltIdx"), (0, "DACS-MIB", "prtExVcPbxTsPrtIdx"), (0, "DACS-MIB", "prtExVcPbxTsIdx"))
if mibBuilder.loadTexts: prtExVcPbxTsEntry.setStatus('mandatory')
prtExVcPbxTsCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExVcPbxTsCnfgIdx.setStatus('mandatory')
prtExVcPbxTsSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExVcPbxTsSltIdx.setStatus('mandatory')
prtExVcPbxTsPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("exPrt1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExVcPbxTsPrtIdx.setStatus('mandatory')
prtExVcPbxTsIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtExVcPbxTsIdx.setStatus('mandatory')
prtExVcPbxTsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unused", 1), ("compressed", 2), ("transparent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxTsMode.setStatus('mandatory')
prtExVcPbxTsIConSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noConnect", 2), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxTsIConSlot.setStatus('mandatory')
prtExVcPbxTsIConPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 15, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101, 102, 103, 104, 105, 106))).clone(namedValues=NamedValues(("noConnect", 100), ("inPrt1", 101), ("inPrt2", 102), ("inPrt3", 103), ("inPrt4", 104), ("inPrt5", 105), ("inPrt6", 106)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtExVcPbxTsIConPrt.setStatus('mandatory')
prtIsdnCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1), )
if mibBuilder.loadTexts: prtIsdnCnfgTable.setStatus('mandatory')
prtIsdnCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtIsdnCnfgIdx"), (0, "DACS-MIB", "prtIsdnSltIdx"), (0, "DACS-MIB", "prtIsdnPrtIdx"))
if mibBuilder.loadTexts: prtIsdnCnfgEntry.setStatus('mandatory')
prtIsdnCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIsdnCnfgIdx.setStatus('mandatory')
prtIsdnSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 103, 104, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("kmxMlA", 103), ("kmxMlB", 104), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIsdnSltIdx.setStatus('mandatory')
prtIsdnPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIsdnPrtIdx.setStatus('mandatory')
prtIsdnConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnConnect.setStatus('mandatory')
prtIsdnSignalingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6, 7, 9, 10, 17, 18, 255))).clone(namedValues=NamedValues(("other", 1), ("etsi", 3), ("ess5", 6), ("dms100", 7), ("ni1", 9), ("ni2", 10), ("ins64", 17), ("ins1500", 18), ("notApplicable", 255))).clone('etsi')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnSignalingProtocol.setStatus('mandatory')
prtIsdnBasicRateLineTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("pointToPoint", 1), ("pointToMultipoint", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnBasicRateLineTopology.setStatus('mandatory')
prtIsdnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("dialup", 1), ("leased", 2), ("syncLeased", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnMode.setStatus('mandatory')
prtIsdnFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("answerAll", 2), ("rejectAll", 3), ("selective", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnFilter.setStatus('mandatory')
prtIsdnSimultaneousCall = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("accept", 2), ("reject", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnSimultaneousCall.setStatus('mandatory')
prtIsdnNumOfAbstractTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnNumOfAbstractTerm.setStatus('mandatory')
prtIsdnSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("auto", 2), ("manual", 3), ("connect", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnSwitchMode.setStatus('mandatory')
prtIsdnEndpointTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2), )
if mibBuilder.loadTexts: prtIsdnEndpointTable.setStatus('mandatory')
prtIsdnEndpointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtIsdnEndpointCnfgIdx"), (0, "DACS-MIB", "prtIsdnEndpointSltIdx"), (0, "DACS-MIB", "prtIsdnEndpointPrtIdx"), (0, "DACS-MIB", "prtIsdnEndpointIdx"))
if mibBuilder.loadTexts: prtIsdnEndpointEntry.setStatus('mandatory')
prtIsdnEndpointCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIsdnEndpointCnfgIdx.setStatus('mandatory')
prtIsdnEndpointSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 103, 104, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("kmxMlA", 103), ("kmxMlB", 104), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIsdnEndpointSltIdx.setStatus('mandatory')
prtIsdnEndpointPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIsdnEndpointPrtIdx.setStatus('mandatory')
prtIsdnEndpointIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("atei1", 1), ("atei2", 2))).clone('atei1')).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIsdnEndpointIdx.setStatus('mandatory')
prtIsdnEndpointTeiType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnEndpointTeiType.setStatus('mandatory')
prtIsdnEndpointTeiValue = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnEndpointTeiValue.setStatus('mandatory')
prtIsdnEndpointSpid = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnEndpointSpid.setStatus('mandatory')
prtIsdnEndpointBearerCh = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("anyChannel", 2), ("channelB1", 3), ("channelB2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnEndpointBearerCh.setStatus('mandatory')
prtIsdnEndpointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnEndpointRowStatus.setStatus('mandatory')
prtIsdnDirectoryTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3), )
if mibBuilder.loadTexts: prtIsdnDirectoryTable.setStatus('mandatory')
prtIsdnDirectoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1), ).setIndexNames((0, "DACS-MIB", "prtIsdnDirectoryCnfgIdx"), (0, "DACS-MIB", "prtIsdnDirectorySltIdx"), (0, "DACS-MIB", "prtIsdnDirectoryPrtIdx"))
if mibBuilder.loadTexts: prtIsdnDirectoryEntry.setStatus('mandatory')
prtIsdnDirectoryCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIsdnDirectoryCnfgIdx.setStatus('mandatory')
prtIsdnDirectorySltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 103, 104))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("kmxMlA", 103), ("kmxMlB", 104)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIsdnDirectorySltIdx.setStatus('mandatory')
prtIsdnDirectoryPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIsdnDirectoryPrtIdx.setStatus('mandatory')
prtIsdnDirectoryLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnDirectoryLocalAddr.setStatus('mandatory')
prtIsdnDirectoryLocalSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnDirectoryLocalSubAddr.setStatus('mandatory')
prtIsdnDirectoryRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnDirectoryRemoteAddr.setStatus('mandatory')
prtIsdnDirectoryRemoteSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnDirectoryRemoteSubAddr.setStatus('mandatory')
prtIsdnDirectoryPrtNu = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 8), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnDirectoryPrtNu.setStatus('mandatory')
prtIsdnDirectoryTeiId = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 9), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnDirectoryTeiId.setStatus('mandatory')
prtIsdnDirectoryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnDirectoryRowStatus.setStatus('mandatory')
prtIsdnDirectoryLocalAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnDirectoryLocalAddr2.setStatus('mandatory')
prtIsdnDirectoryLocalSubAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnDirectoryLocalSubAddr2.setStatus('mandatory')
prtIsdnDirectoryRemoteAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnDirectoryRemoteAddr2.setStatus('mandatory')
prtIsdnDirectoryRemoteSubAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 16, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIsdnDirectoryRemoteSubAddr2.setStatus('mandatory')
prtFrPlusCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1), )
if mibBuilder.loadTexts: prtFrPlusCnfgTable.setStatus('mandatory')
prtFrPlusCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtFrPlusCnfgIdx"), (0, "DACS-MIB", "prtFrPlusSltIdx"), (0, "DACS-MIB", "prtFrPlusPrtIdx"))
if mibBuilder.loadTexts: prtFrPlusCnfgEntry.setStatus('mandatory')
prtFrPlusCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrPlusCnfgIdx.setStatus('mandatory')
prtFrPlusSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrPlusSltIdx.setStatus('mandatory')
prtFrPlusPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtFrPlusPrtIdx.setStatus('mandatory')
prtFrPlusNotSegmentedPriorities = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 18, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtFrPlusNotSegmentedPriorities.setStatus('mandatory')
prtMl4CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1), )
if mibBuilder.loadTexts: prtMl4CnfgTable.setStatus('mandatory')
prtMl4CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtMl4CnfgIdx"), (0, "DACS-MIB", "prtMl4SltIdx"), (0, "DACS-MIB", "prtMl4PrtIdx"))
if mibBuilder.loadTexts: prtMl4CnfgEntry.setStatus('mandatory')
prtMl4CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtMl4CnfgIdx.setStatus('mandatory')
prtMl4SltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtMl4SltIdx.setStatus('mandatory')
prtMl4PrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtMl4PrtIdx.setStatus('mandatory')
prtMl4SigProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("p1", 3), ("p2", 4), ("p3", 5), ("p4", 6), ("p5", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtMl4SigProfile.setStatus('mandatory')
prtMl4CGA = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("trans", 2), ("full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtMl4CGA.setStatus('mandatory')
prtMl4Oos = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notSupported", 2), ("forcedIdle", 3), ("forcedBusy", 4), ("busyIdle", 5), ("idleBusy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtMl4Oos.setStatus('mandatory')
prtMl4VoiceOos = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtMl4VoiceOos.setStatus('mandatory')
prtMl4DataOos = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtMl4DataOos.setStatus('mandatory')
prtMl4Service = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 19, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("leasedLine", 2), ("v51", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtMl4Service.setStatus('mandatory')
prtAcmCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1), )
if mibBuilder.loadTexts: prtAcmCnfgTable.setStatus('mandatory')
prtAcmCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtAcmCnfgIdx"), (0, "DACS-MIB", "prtAcmSltIdx"), (0, "DACS-MIB", "prtAcmPrtIdx"))
if mibBuilder.loadTexts: prtAcmCnfgEntry.setStatus('mandatory')
prtAcmCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtAcmCnfgIdx.setStatus('mandatory')
prtAcmSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtAcmSltIdx.setStatus('mandatory')
prtAcmPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("exPrt1", 1), ("exPrt2", 2), ("exPrt3", 3), ("exPrt4", 4), ("exPrt5", 5), ("exPrt6", 6), ("exPrt7", 7), ("exPrt8", 8), ("exPrt9", 9), ("exPrt10", 10), ("exPrt11", 11), ("exPrt12", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtAcmPrtIdx.setStatus('mandatory')
prtAcmConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtAcmConnect.setStatus('mandatory')
prtAcmActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("low", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtAcmActiveState.setStatus('mandatory')
prtAcmAlrString = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 2, 3, 2, 20, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtAcmAlrString.setStatus('mandatory')
alarmsTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 2) + (0,1)).setObjects(("DACS-MIB", "alrBufDescription"))
sanityTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 2) + (0,2)).setObjects(("DACS-MIB", "agnSSanityCheckStatus"), ("DACS-MIB", "agnCSaveCnfgIdxCmd"))
cnfgFlipTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 2) + (0,3)).setObjects(("DACS-MIB", "agnSActiveCnfg"))
flipDbChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 2) + (0,4))
statusChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 2) + (0,5)).setObjects(("DACS-MIB", "agnLed"))
agnTsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1), )
if mibBuilder.loadTexts: agnTsTable.setStatus('mandatory')
agnTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1), ).setIndexNames((0, "DACS-MIB", "agnTsCnfgIdx"), (0, "DACS-MIB", "agnTsSltIdx"), (0, "DACS-MIB", "agnTsPrtIdx"), (0, "DACS-MIB", "agnTsIdx"), (0, "DACS-MIB", "agnTsBitIdx"), (0, "DACS-MIB", "agnTsConSltIdx"), (0, "DACS-MIB", "agnTsConPrtIdx"), (0, "DACS-MIB", "agnTsConIdx"))
if mibBuilder.loadTexts: agnTsEntry.setStatus('mandatory')
agnTsCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsCnfgIdx.setStatus('mandatory')
agnTsSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsSltIdx.setStatus('mandatory')
agnTsPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsPrtIdx.setStatus('mandatory')
agnTsIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsIdx.setStatus('mandatory')
agnTsBitIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsBitIdx.setStatus('mandatory')
agnTsConSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsConSltIdx.setStatus('mandatory')
agnTsConPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsConPrtIdx.setStatus('mandatory')
agnTsConIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agnTsConIdx.setStatus('mandatory')
agnTsType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("voice", 2), ("data", 3), ("vcMP", 4), ("mng", 6), ("spare", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnTsType.setStatus('mandatory')
agnTsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnTsRowStatus.setStatus('mandatory')
agnTsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 2, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("rx", 2), ("tx", 3), ("both", 4), ("bcastSrc", 5), ("bcastDst", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agnTsDirection.setStatus('mandatory')
dacsMux = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3))
systemDacsMux = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 1))
mdlDacsMux = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 2))
prtDacsMux = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 3))
genDacsMux = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 4))
sysSa = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1))
sysHub = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2))
sysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3))
sysCurrentAlr = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4))
sysBufferAlr = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5))
sysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6))
sysDbase = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7))
sysSaSwchStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSaSwchStatus.setStatus('mandatory')
sysSaSwRevision = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSaSwRevision.setStatus('mandatory')
sysSaHwVersion = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSaHwVersion.setStatus('mandatory')
sysSaPorts = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSaPorts.setStatus('mandatory')
sysSaReadSwch = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSaReadSwch.setStatus('mandatory')
sysChas = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1))
chassTotalNoOfSlt = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassTotalNoOfSlt.setStatus('mandatory')
chassTotalNoOfIoSlt = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassTotalNoOfIoSlt.setStatus('mandatory')
chassTotalNoOfPsSlt = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassTotalNoOfPsSlt.setStatus('mandatory')
chassTotalNoOfClSlt = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassTotalNoOfClSlt.setStatus('mandatory')
chassTotalNoOfMlSlt = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chassTotalNoOfMlSlt.setStatus('mandatory')
sysDcl = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2))
sysDclTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1), )
if mibBuilder.loadTexts: sysDclTable.setStatus('mandatory')
sysDclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1), ).setIndexNames((0, "DACS-MIB", "sysDclCnfgIdx"))
if mibBuilder.loadTexts: sysDclEntry.setStatus('mandatory')
sysDclCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDclCnfgIdx.setStatus('mandatory')
sysDclRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDclRedundancy.setStatus('mandatory')
sysDclActiveCl = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("dclA", 2), ("dclB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDclActiveCl.setStatus('mandatory')
sysDclFlipDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("t1min", 1), ("t2min", 2), ("t3min", 3), ("t4min", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDclFlipDelay.setStatus('mandatory')
sysDclOnline = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dclA", 1), ("dclB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDclOnline.setStatus('mandatory')
sysDclCopyDbTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 3), )
if mibBuilder.loadTexts: sysDclCopyDbTable.setStatus('mandatory')
sysDclCopyDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 3, 1), ).setIndexNames((0, "DACS-MIB", "sysDclCopyDbIdx"))
if mibBuilder.loadTexts: sysDclCopyDbEntry.setStatus('mandatory')
sysDclCopyDbIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDclCopyDbIdx.setStatus('mandatory')
sysDclCopyDbCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDclCopyDbCmd.setStatus('mandatory')
sysSDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("ddMMYYYY", 1), ("mmDDYYYY", 2), ("yyyyMMDD", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSDateFormat.setStatus('mandatory')
sysSDateCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSDateCmd.setStatus('mandatory')
sysSTimeCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSTimeCmd.setStatus('mandatory')
sysSActiveCnfg = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSActiveCnfg.setStatus('mandatory')
sysSEditCnfg = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSEditCnfg.setStatus('mandatory')
sysSEditBy = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("snmp", 2), ("terCon1", 3), ("terCon2", 4), ("terInbandCon1", 5), ("terInbandCon2", 6), ("lcd", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSEditBy.setStatus('mandatory')
sysSClkSrc = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("master", 1), ("fallback", 2), ("internal", 3), ("ml", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSClkSrc.setStatus('mandatory')
sysSAlrStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("major", 3), ("minor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSAlrStatus.setStatus('mandatory')
sysSAlrStatusAll = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("major", 3), ("minor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSAlrStatusAll.setStatus('mandatory')
sysSTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSTestStatus.setStatus('mandatory')
sysSSanityCheckStatus = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("fail", 2), ("warning", 3), ("ok", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSSanityCheckStatus.setStatus('mandatory')
sysSNoOfSanityCheckErr = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSNoOfSanityCheckErr.setStatus('mandatory')
sysSErrListTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13), )
if mibBuilder.loadTexts: sysSErrListTable.setStatus('mandatory')
sysSErrListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13, 1), ).setIndexNames((0, "DACS-MIB", "sysSErrType"), (0, "DACS-MIB", "sysSErrIdx"))
if mibBuilder.loadTexts: sysSErrListEntry.setStatus('mandatory')
sysSErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("warning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSErrType.setStatus('mandatory')
sysSErrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSErrIdx.setStatus('mandatory')
sysSErrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSErrDescription.setStatus('mandatory')
sysSMaxNoOfCnfg = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSMaxNoOfCnfg.setStatus('mandatory')
sysSSelfTestResult = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSSelfTestResult.setStatus('mandatory')
sysSRelayState = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSRelayState.setStatus('mandatory')
sysSInvertedAlr = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSInvertedAlr.setStatus('mandatory')
sysSRdnFlipTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18), )
if mibBuilder.loadTexts: sysSRdnFlipTable.setStatus('mandatory')
sysSRdnFlipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1), ).setIndexNames((0, "DACS-MIB", "sysSRdnFlipIdx"))
if mibBuilder.loadTexts: sysSRdnFlipEntry.setStatus('mandatory')
sysSRdnFlipIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSRdnFlipIdx.setStatus('mandatory')
sysSRdnFlipSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSRdnFlipSlot.setStatus('mandatory')
sysSRdnFlipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSRdnFlipPort.setStatus('mandatory')
sysSRdnFlipCause = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSRdnFlipCause.setStatus('mandatory')
sysSRdnFlipDate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSRdnFlipDate.setStatus('mandatory')
sysSRdnFlipTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 18, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSRdnFlipTime.setStatus('mandatory')
sysSRdnFlipTableClearCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSRdnFlipTableClearCmd.setStatus('mandatory')
sysSRdnFlipCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 3, 20), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSRdnFlipCmd.setStatus('mandatory')
sysSAlrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1), )
if mibBuilder.loadTexts: sysSAlrTable.setStatus('mandatory')
sysSAlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1), ).setIndexNames((0, "DACS-MIB", "sysSAlrIdx"))
if mibBuilder.loadTexts: sysSAlrEntry.setStatus('mandatory')
sysSAlrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSAlrIdx.setStatus('mandatory')
sysSAlrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSAlrCode.setStatus('mandatory')
sysSAlrState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("minor", 4), ("major", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSAlrState.setStatus('mandatory')
sysSAlarmMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSAlarmMask.setStatus('mandatory')
sysSAlarmInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysSAlarmInvert.setStatus('mandatory')
sysSAlrClearCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSAlrClearCmd.setStatus('mandatory')
sysSAlrClearAllCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSAlrClearAllCmd.setStatus('mandatory')
sysSAlrMaskAll = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSAlrMaskAll.setStatus('mandatory')
sysSAlrMask = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSAlrMask.setStatus('mandatory')
sysSAlrDataUpdateCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysSAlrDataUpdateCmd.setStatus('mandatory')
sysBufferAlrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1), )
if mibBuilder.loadTexts: sysBufferAlrTable.setStatus('mandatory')
sysBufferAlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1), ).setIndexNames((0, "DACS-MIB", "sysBufferAlrIdx"))
if mibBuilder.loadTexts: sysBufferAlrEntry.setStatus('mandatory')
sysBufferAlrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBufferAlrIdx.setStatus('mandatory')
sysBufferAlrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBufferAlrCode.setStatus('mandatory')
sysBufferAlrState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 5))).clone(namedValues=NamedValues(("off", 2), ("minor", 4), ("major", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBufferAlrState.setStatus('mandatory')
sysBufferAlrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 255))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("kmxPsA", 101), ("kmxPsB", 102), ("kmxMlA", 103), ("kmxMlB", 104), ("kmxCl", 105), ("kmxOpt", 106), ("kmxIO1", 107), ("kmxIO2", 108), ("kmxIO3", 109), ("kmxIO4", 110), ("kmxIO5", 111), ("kmxIO6", 112), ("kmxIO7", 113), ("kmxIO8", 114), ("kmxIO9", 115), ("kmxIO10", 116), ("kmxIO11", 117), ("kmxIO12", 118), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBufferAlrSlot.setStatus('mandatory')
sysBufferAlrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBufferAlrPort.setStatus('mandatory')
sysBufferAlrDate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBufferAlrDate.setStatus('mandatory')
sysBufferAlrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBufferAlrTime.setStatus('mandatory')
sysBufferAlrClearCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysBufferAlrClearCmd.setStatus('mandatory')
sysCClkSrcTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1), )
if mibBuilder.loadTexts: sysCClkSrcTable.setStatus('mandatory')
sysCClkSrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1), ).setIndexNames((0, "DACS-MIB", "sysCClkCnfgIdx"), (0, "DACS-MIB", "sysCClkSrcIdx"))
if mibBuilder.loadTexts: sysCClkSrcEntry.setStatus('mandatory')
sysCClkCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCClkCnfgIdx.setStatus('mandatory')
sysCClkSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("fallback", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCClkSrcIdx.setStatus('mandatory')
sysCClkSrcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("none", 1), ("internal", 2), ("rxClk", 3), ("station", 4), ("lbt", 5), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCClkSrcMode.setStatus('mandatory')
sysCClkSrcPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCClkSrcPrt.setStatus('mandatory')
sysCClkStationFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("f1544Khz", 2), ("f2048Khz", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCClkStationFreq.setStatus('mandatory')
sysCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2), )
if mibBuilder.loadTexts: sysCnfgTable.setStatus('mandatory')
sysCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1), ).setIndexNames((0, "DACS-MIB", "sysCnfgIdx"))
if mibBuilder.loadTexts: sysCnfgEntry.setStatus('mandatory')
sysCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCnfgIdx.setStatus('mandatory')
sysCMatrixMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("bidirectional", 2), ("unidirectional", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCMatrixMode.setStatus('mandatory')
sysCIsdnFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("te", 2), ("nt", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCIsdnFormat.setStatus('mandatory')
sysCRoutingOnEth = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("proprietary", 3), ("rip2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCRoutingOnEth.setStatus('mandatory')
sysCRdnTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3), )
if mibBuilder.loadTexts: sysCRdnTable.setStatus('mandatory')
sysCRdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1), ).setIndexNames((0, "DACS-MIB", "sysCRdnCnfgIdx"), (0, "DACS-MIB", "sysCRdnPrimeSlot"), (0, "DACS-MIB", "sysCRdnPrimePort"))
if mibBuilder.loadTexts: sysCRdnEntry.setStatus('mandatory')
sysCRdnCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCRdnCnfgIdx.setStatus('mandatory')
sysCRdnPrimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCRdnPrimeSlot.setStatus('mandatory')
sysCRdnPrimePort = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCRdnPrimePort.setStatus('mandatory')
sysCRdnSecSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCRdnSecSlot.setStatus('mandatory')
sysCRdnSecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCRdnSecPort.setStatus('mandatory')
sysCRdnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dualCableAIS", 2), ("yCable", 3), ("dualCableParallelTx", 4), ("backup", 5), ("singleSlotProtection", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCRdnMode.setStatus('mandatory')
sysCRdnRecMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("auto", 2), ("manual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCRdnRecMode.setStatus('mandatory')
sysCRdnRecTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCRdnRecTime.setStatus('mandatory')
sysCRdnHwSwFlip = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("hw", 2), ("sw", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCRdnHwSwFlip.setStatus('mandatory')
sysCRdnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCRdnRowStatus.setStatus('mandatory')
sysCRdnOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCRdnOnline.setStatus('mandatory')
sysDbaseSanityCheckCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDbaseSanityCheckCmd.setStatus('mandatory')
sysDbaseDownloadCnfgIdxCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDbaseDownloadCnfgIdxCmd.setStatus('mandatory')
sysDbaseUploadCnfgIdxCmd = MibScalar((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDbaseUploadCnfgIdxCmd.setStatus('mandatory')
sysDbaseFlipTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4), )
if mibBuilder.loadTexts: sysDbaseFlipTable.setStatus('mandatory')
sysDbaseFlipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4, 1), ).setIndexNames((0, "DACS-MIB", "sysDbaseFlipIdx"))
if mibBuilder.loadTexts: sysDbaseFlipEntry.setStatus('mandatory')
sysDbaseFlipIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDbaseFlipIdx.setStatus('mandatory')
sysDbaseFlipTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDbaseFlipTime.setStatus('mandatory')
sysDbaseFlipActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 1, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDbaseFlipActivation.setStatus('mandatory')
mdlGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1))
mdlCl = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2))
mdlPs = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3))
mdlSTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1), )
if mibBuilder.loadTexts: mdlSTable.setStatus('mandatory')
mdlSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1), ).setIndexNames((0, "DACS-MIB", "mdlSSltIdx"))
if mibBuilder.loadTexts: mdlSEntry.setStatus('mandatory')
mdlSSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("kmxPsA", 101), ("kmxPsB", 102), ("kmxMlA", 103), ("kmxMlB", 104), ("kmxCl", 105), ("kmxOpt", 106), ("kmxIO1", 107), ("kmxIO2", 108), ("kmxIO3", 109), ("kmxIO4", 110), ("kmxIO5", 111), ("kmxIO6", 112), ("kmxIO7", 113), ("kmxIO8", 114), ("kmxIO9", 115), ("kmxIO10", 116), ("kmxIO11", 117), ("kmxIO12", 118)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSSltIdx.setStatus('mandatory')
mdlSCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10, 11, 20, 21, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 70, 71, 72, 80, 81, 82, 90, 91, 92, 100, 110, 111, 112, 113, 114, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("psAC", 10), ("psDC", 11), ("dCl", 20), ("kCl", 21), ("dcl2", 22), ("dcl2Eth", 23), ("kClEth", 24), ("dT1DSU", 30), ("dT1CSU", 31), ("dE1DSU", 32), ("dE1LTU", 33), ("dE1aDSU", 34), ("dE1aLTU", 35), ("dT1F", 36), ("dE1F", 37), ("dE1Hdsl", 40), ("dT1Hdsl", 41), ("dE1HdslS", 42), ("dT1HdslS", 43), ("kML1", 50), ("kML2", 51), ("kML3", 52), ("kML4", 53), ("kML5", 54), ("kML6", 55), ("kML7", 56), ("kML8", 57), ("kML10", 59), ("kMLF", 60), ("kML10New", 61), ("kLS1", 70), ("kLS1New", 71), ("kLS2", 72), ("kTRE", 80), ("kMBE", 81), ("kMBENew", 82), ("kai", 90), ("kdi", 91), ("kdiCH", 92), ("dHS2", 100), ("kHS1", 110), ("kHS2", 111), ("kHSU1", 112), ("kHSU2", 113), ("kHS703", 114), ("kVC1EM", 130), ("kVC1FXO", 131), ("kVC1FXS", 132), ("kVC1MEM", 133), ("kVC1MFXO", 134), ("kVC1MFXS", 135), ("kVC1MFXSW", 136), ("kVC2EM", 137), ("kVC2FXO", 138), ("kVC2FXS", 139), ("kVC2s1EM", 140), ("kVC2s1FXO", 141), ("kVC2s1FXS", 142), ("kVC3EM", 143), ("kVC3FXO", 144), ("kVC3FXS", 145), ("kVC3S0", 146), ("kVF1EM", 170), ("kVF1FXO", 171), ("kVF1FXS", 172), ("kVF3EM", 173), ("kVF3FXO", 174), ("kVF3FXS", 175), ("kVF4EM", 176), ("kVF4FXO", 177), ("kVF4FXS", 178), ("kVF4FXSW", 179), ("kVF4S0", 180), ("kVF5PbxE1", 181), ("kVF5E1PbxSlave", 182), ("kVF5PbxT1", 183), ("kVF5T1PbxSlave", 184), ("kVF5PbxE1New", 185), ("kVF5E1PbxSlaveNew", 186), ("kVF5PbxT1New", 187), ("kVF5T1PbxSlaveNew", 188), ("kVF4FXO3", 189), ("kVF4FXS3", 190), ("kVF4NS0", 191), ("kVF6E1s16", 192), ("kVF6E1s31", 193), ("kVF6T1s12", 194), ("kVF6T1s24", 195), ("kVF8EM", 196), ("kVF8FXO", 197), ("kVF8FXS", 198), ("dimV35", 201), ("dimRS422", 202), ("dimRS530", 203), ("dimHssi", 204), ("dimX21", 205), ("dim10BaseT", 206), ("dimE1", 207), ("dt3", 210), ("dt3f", 211), ("de3", 212), ("de3f", 213)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSCardType.setStatus('mandatory')
mdlSHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSHwVer.setStatus('mandatory')
mdlSSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSSwVer.setStatus('mandatory')
mdlSAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("major", 3), ("minor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlarmStatus.setStatus('mandatory')
mdlSAlarmStatusAll = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("major", 3), ("minor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSAlarmStatusAll.setStatus('mandatory')
mdlSTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSTestStatus.setStatus('mandatory')
mdlSHwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("fail", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSHwStatus.setStatus('mandatory')
mdlSActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("offline", 2), ("online", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlSActivity.setStatus('mandatory')
mdlSAlrClearCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlSAlrClearCmd.setStatus('mandatory')
mdlSAlrClearAllCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlSAlrClearAllCmd.setStatus('mandatory')
mdlSAlrMaskAll = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlSAlrMaskAll.setStatus('mandatory')
mdlSCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlSCmd.setStatus('mandatory')
mdlCTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2), )
if mibBuilder.loadTexts: mdlCTable.setStatus('mandatory')
mdlCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1), ).setIndexNames((0, "DACS-MIB", "mdlCConfigIdx"), (0, "DACS-MIB", "mdlCSlotIdx"))
if mibBuilder.loadTexts: mdlCEntry.setStatus('mandatory')
mdlCConfigIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlCConfigIdx.setStatus('mandatory')
mdlCSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("kmxPsA", 101), ("kmxPsB", 102), ("kmxMlA", 103), ("kmxMlB", 104), ("kmxCl", 105), ("kmxOpt", 106), ("kmxIO1", 107), ("kmxIO2", 108), ("kmxIO3", 109), ("kmxIO4", 110), ("kmxIO5", 111), ("kmxIO6", 112), ("kmxIO7", 113), ("kmxIO8", 114), ("kmxIO9", 115), ("kmxIO10", 116), ("kmxIO11", 117), ("kmxIO12", 118)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlCSlotIdx.setStatus('mandatory')
mdlCProgCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10, 11, 20, 21, 22, 23, 24, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 70, 71, 72, 80, 81, 82, 90, 91, 92, 100, 110, 111, 112, 113, 114, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("psAC", 10), ("psDC", 11), ("dCl", 20), ("kCl", 21), ("dcl2", 22), ("dcl2Eth", 23), ("kClEth", 24), ("dT1DSU", 30), ("dT1CSU", 31), ("dE1DSU", 32), ("dE1LTU", 33), ("dE1aDSU", 34), ("dE1aLTU", 35), ("dT1F", 36), ("dE1F", 37), ("dE1Hdsl", 40), ("dT1Hdsl", 41), ("dE1HdslS", 42), ("dT1HdslS", 43), ("kML1", 50), ("kML2", 51), ("kML3", 52), ("kML4", 53), ("kML5", 54), ("kML6", 55), ("kML7", 56), ("kML8", 57), ("kML10", 59), ("kMLF", 60), ("kML10New", 61), ("kLS1", 70), ("kLS1New", 71), ("kLS2", 72), ("kTRE", 80), ("kMBE", 81), ("kMBENew", 82), ("kai", 90), ("kdi", 91), ("kdiCH", 92), ("dHS2", 100), ("kHS1", 110), ("kHS2", 111), ("kHSU1", 112), ("kHSU2", 113), ("kHS703", 114), ("kVC1EM", 130), ("kVC1FXO", 131), ("kVC1FXS", 132), ("kVC1MEM", 133), ("kVC1MFXO", 134), ("kVC1MFXS", 135), ("kVC1MFXSW", 136), ("kVC2EM", 137), ("kVC2FXO", 138), ("kVC2FXS", 139), ("kVC2s1EM", 140), ("kVC2s1FXO", 141), ("kVC2s1FXS", 142), ("kVC3EM", 143), ("kVC3FXO", 144), ("kVC3FXS", 145), ("kVC3S0", 146), ("kVF1EM", 170), ("kVF1FXO", 171), ("kVF1FXS", 172), ("kVF3EM", 173), ("kVF3FXO", 174), ("kVF3FXS", 175), ("kVF4EM", 176), ("kVF4FXO", 177), ("kVF4FXS", 178), ("kVF4FXSW", 179), ("kVF4S0", 180), ("kVF5PbxE1", 181), ("kVF5E1PbxSlave", 182), ("kVF5PbxT1", 183), ("kVF5T1PbxSlave", 184), ("kVF5PbxE1New", 185), ("kVF5E1PbxSlaveNew", 186), ("kVF5PbxT1New", 187), ("kVF5T1PbxSlaveNew", 188), ("kVF4FXO3", 189), ("kVF4FXS3", 190), ("kVF4NS0", 191), ("kVF6E1s16", 192), ("kVF6E1s31", 193), ("kVF6T1s12", 194), ("kVF6T1s24", 195), ("kVF8EM", 196), ("kVF8FXO", 197), ("kVF8FXS", 198), ("dimV35", 201), ("dimRS422", 202), ("dimRS530", 203), ("dimHssi", 204), ("dimX21", 205), ("dim10BaseT", 206), ("dimE1", 207), ("dt3", 210), ("dt3f", 211), ("de3", 212), ("de3f", 213)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlCProgCardType.setStatus('mandatory')
mdlCNoOfExtPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlCNoOfExtPrt.setStatus('mandatory')
mdlCNoOfIntPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlCNoOfIntPrt.setStatus('mandatory')
mdlAlr = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3))
mdlAlrTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1), )
if mibBuilder.loadTexts: mdlAlrTable.setStatus('mandatory')
mdlAlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1), ).setIndexNames((0, "DACS-MIB", "mdlAlrSltIdx"), (0, "DACS-MIB", "mdlAlrIdx"))
if mibBuilder.loadTexts: mdlAlrEntry.setStatus('mandatory')
mdlAlrIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlAlrIdx.setStatus('mandatory')
mdlAlrSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("kmxPsA", 101), ("kmxPsB", 102), ("kmxMlA", 103), ("kmxMlB", 104), ("kmxCl", 105), ("kmxOpt", 106), ("kmxIO1", 107), ("kmxIO2", 108), ("kmxIO3", 109), ("kmxIO4", 110), ("kmxIO5", 111), ("kmxIO6", 112), ("kmxIO7", 113), ("kmxIO8", 114), ("kmxIO9", 115), ("kmxIO10", 116), ("kmxIO11", 117), ("kmxIO12", 118)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlAlrSltIdx.setStatus('mandatory')
mdlAlrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlAlrCode.setStatus('mandatory')
mdlAlrState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("minor", 4), ("major", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlAlrState.setStatus('mandatory')
mdlAlarmMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlAlarmMask.setStatus('mandatory')
mdlAlarmInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlAlarmInvert.setStatus('mandatory')
mdlAlrMaskTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 2), )
if mibBuilder.loadTexts: mdlAlrMaskTable.setStatus('mandatory')
mdlAlrMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 2, 1), ).setIndexNames((0, "DACS-MIB", "mdlAlrMaskSltIdx"))
if mibBuilder.loadTexts: mdlAlrMaskEntry.setStatus('mandatory')
mdlAlrMaskSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("kmxPsA", 101), ("kmxPsB", 102), ("kmxMlA", 103), ("kmxMlB", 104), ("kmxCl", 105), ("kmxOpt", 106), ("kmxIO1", 107), ("kmxIO2", 108), ("kmxIO3", 109), ("kmxIO4", 110), ("kmxIO5", 111), ("kmxIO6", 112), ("kmxIO7", 113), ("kmxIO8", 114), ("kmxIO9", 115), ("kmxIO10", 116), ("kmxIO11", 117), ("kmxIO12", 118)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlAlrMaskSltIdx.setStatus('mandatory')
mdlAlrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdlAlrMask.setStatus('mandatory')
mdlClTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1), )
if mibBuilder.loadTexts: mdlClTable.setStatus('mandatory')
mdlClEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1), ).setIndexNames((0, "DACS-MIB", "mdlClIdx"))
if mibBuilder.loadTexts: mdlClEntry.setStatus('mandatory')
mdlClIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("clA", 3), ("clB", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlClIdx.setStatus('mandatory')
mdlClSwchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlClSwchStatus.setStatus('mandatory')
mdlClLastFlipDate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlClLastFlipDate.setStatus('mandatory')
mdlClLastFlipTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlClLastFlipTime.setStatus('mandatory')
mdlClLastFlipCause = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlClLastFlipCause.setStatus('mandatory')
mdlPsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1), )
if mibBuilder.loadTexts: mdlPsTable.setStatus('mandatory')
mdlPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1, 1), ).setIndexNames((0, "DACS-MIB", "mdlPsIdx"))
if mibBuilder.loadTexts: mdlPsEntry.setStatus('mandatory')
mdlPsIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlPsIdx.setStatus('mandatory')
mdlPsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlPsStatus.setStatus('mandatory')
mdlPsTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("f12V", 2), ("f5V", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdlPsTestResult.setStatus('mandatory')
prtGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1))
prtT1E1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2))
prtHS = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3))
prtSP = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4))
prtDim = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5))
prtI = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6))
prtHdsl = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7))
prtT3E3 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8))
prtGenParamTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1), )
if mibBuilder.loadTexts: prtGenParamTable.setStatus('mandatory')
prtGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtGenPrtIdx"))
if mibBuilder.loadTexts: prtGenEntry.setStatus('mandatory')
prtGenPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenPrtIdx.setStatus('mandatory')
prtGenSlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("kmxMlA", 103), ("kmxMlB", 104), ("kmxCl", 105), ("kmxOpt", 106), ("kmxIO1", 107), ("kmxIO2", 108), ("kmxIO3", 109), ("kmxIO4", 110), ("kmxIO5", 111), ("kmxIO6", 112), ("kmxIO7", 113), ("kmxIO8", 114), ("kmxIO9", 115), ("kmxIO10", 116), ("kmxIO11", 117), ("kmxIO12", 118), ("standAlone", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenSlt.setStatus('mandatory')
prtGenExtInt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("external", 2), ("internal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenExtInt.setStatus('mandatory')
prtGenIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenIfIndex.setStatus('mandatory')
prtGenActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("notUsed", 2), ("offLine", 3), ("onLine", 4), ("offLineRedundancy", 5), ("onLineRedundancy", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenActiveStatus.setStatus('mandatory')
prtGenAlrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("major", 3), ("minor", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenAlrStatus.setStatus('mandatory')
prtGenTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenTestStatus.setStatus('mandatory')
prtGenTestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenTestMask.setStatus('mandatory')
prtGenTestCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtGenTestCmd.setStatus('mandatory')
prtGenTestRunning = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenTestRunning.setStatus('mandatory')
prtGenType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 255))).clone(namedValues=NamedValues(("unknown", 1), ("t1", 2), ("e1", 3), ("hs", 4), ("t1Csu", 5), ("t1Dsu", 6), ("e1Ltu", 7), ("e1Dsu", 8), ("hdsl", 9), ("sp", 10), ("t1F", 11), ("e1F", 12), ("dim", 13), ("isdn", 14), ("t3", 15), ("e3", 16), ("t3f", 17), ("e3f", 18), ("other", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenType.setStatus('mandatory')
prtGenInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenInterfaceType.setStatus('mandatory')
prtGenAlrClearCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOp", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtGenAlrClearCmd.setStatus('mandatory')
prtGenAlrMaskAll = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOp", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtGenAlrMaskAll.setStatus('mandatory')
prtGenParamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenParamStatus.setStatus('mandatory')
prtGenTestDurationTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2), )
if mibBuilder.loadTexts: prtGenTestDurationTable.setStatus('mandatory')
prtGenTestDurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtGenTestPrtIdx"), (0, "DACS-MIB", "prtGenTestIdx"))
if mibBuilder.loadTexts: prtGenTestDurationEntry.setStatus('mandatory')
prtGenTestPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenTestPrtIdx.setStatus('mandatory')
prtGenTestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("localLoop", 1), ("remoteLoop", 2), ("bert", 3), ("plb", 4), ("rlb", 5), ("llb", 6), ("toneInjection", 7), ("txInband", 8), ("rxInband", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenTestIdx.setStatus('mandatory')
prtGenTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtGenTestDuration.setStatus('mandatory')
prtGenTsTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3), )
if mibBuilder.loadTexts: prtGenTsTable.setStatus('mandatory')
prtGenTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1), ).setIndexNames((0, "DACS-MIB", "prtGenTsCnfgIdx"), (0, "DACS-MIB", "prtGenTsPrtIdx"), (0, "DACS-MIB", "prtGenTsIdx"))
if mibBuilder.loadTexts: prtGenTsEntry.setStatus('mandatory')
prtGenTsCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenTsCnfgIdx.setStatus('mandatory')
prtGenTsPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenTsPrtIdx.setStatus('mandatory')
prtGenTsIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtGenTsIdx.setStatus('mandatory')
prtGenTsType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("voice", 2), ("data", 3), ("vcMP", 4), ("nc", 5), ("mng", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtGenTsType.setStatus('mandatory')
prtGenTsIConPrt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtGenTsIConPrt.setStatus('mandatory')
prtGenTsIConTs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtGenTsIConTs.setStatus('mandatory')
prtAlr = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4))
prtSAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1), )
if mibBuilder.loadTexts: prtSAlarmTable.setStatus('mandatory')
prtSAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtSAlarmPrtIdx"), (0, "DACS-MIB", "prtSAlarmIdx"))
if mibBuilder.loadTexts: prtSAlarmEntry.setStatus('mandatory')
prtSAlarmIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlarmIdx.setStatus('mandatory')
prtSAlarmPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlarmPrtIdx.setStatus('mandatory')
prtSAlarmCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlarmCode.setStatus('mandatory')
prtSAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5))).clone(namedValues=NamedValues(("minor", 4), ("major", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlarmState.setStatus('mandatory')
prtSAlarmMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlarmMask.setStatus('mandatory')
prtSAlarmInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSAlarmInvert.setStatus('mandatory')
prtAlrMaskTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 2), )
if mibBuilder.loadTexts: prtAlrMaskTable.setStatus('mandatory')
prtAlrMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtAlrMaskPrtIdx"))
if mibBuilder.loadTexts: prtAlrMaskEntry.setStatus('mandatory')
prtAlrMaskPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtAlrMaskPrtIdx.setStatus('mandatory')
prtAlrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtAlrMask.setStatus('mandatory')
prtBertTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5), )
if mibBuilder.loadTexts: prtBertTable.setStatus('mandatory')
prtBertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1), ).setIndexNames((0, "DACS-MIB", "prtBertPrtIdx"))
if mibBuilder.loadTexts: prtBertEntry.setStatus('mandatory')
prtBertPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtBertPrtIdx.setStatus('mandatory')
prtBertPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 255))).clone(namedValues=NamedValues(("p2E3m1", 1), ("p2E4m1", 2), ("p2E5m1", 3), ("p2E6m1", 4), ("p2E7m1", 5), ("p511", 6), ("p2E10m1", 7), ("p2047", 8), ("p2E15m1", 9), ("p2E17m1", 10), ("p2E18m1", 11), ("p2E20m1", 12), ("qrss", 13), ("p2E21m1", 14), ("p2E22m1", 15), ("p2E23m1", 16), ("p2E25m1", 17), ("p2E28m1", 18), ("p2E29m1", 19), ("p2E31m1", 20), ("p2E32m1", 21), ("rj011", 22), ("p63", 23), ("p1M7S", 24), ("p1S7M", 25), ("alternate", 26), ("mark", 27), ("space", 28), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtBertPattern.setStatus('mandatory')
prtBertInjectRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("noError", 1), ("r10Em1", 2), ("r10Em2", 3), ("r10Em3", 4), ("r10Em4", 5), ("r10Em5", 6), ("r10Em6", 7), ("r10Em7", 8), ("single", 9), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtBertInjectRate.setStatus('mandatory')
prtBertInjectErrRateCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtBertInjectErrRateCmd.setStatus('mandatory')
prtBertInjectSingleErrCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtBertInjectSingleErrCmd.setStatus('mandatory')
prtBertRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtBertRunTime.setStatus('mandatory')
prtBertESs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtBertESs.setStatus('mandatory')
prtBertSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtBertSyncLoss.setStatus('mandatory')
prtBertErrorBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtBertErrorBits.setStatus('mandatory')
prtBertClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtBertClearCounters.setStatus('mandatory')
prtBertSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("syncLoss", 2), ("sync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtBertSyncStatus.setStatus('mandatory')
prtBertTs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 5, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtBertTs.setStatus('mandatory')
prtMonTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6), )
if mibBuilder.loadTexts: prtMonTable.setStatus('mandatory')
prtMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1), ).setIndexNames((0, "DACS-MIB", "prtMonCnfgIdx"), (0, "DACS-MIB", "prtMonitoringIdx"))
if mibBuilder.loadTexts: prtMonEntry.setStatus('mandatory')
prtMonCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtMonCnfgIdx.setStatus('mandatory')
prtMonitoringIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtMonitoringIdx.setStatus('mandatory')
prtMonitoringEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtMonitoringEnable.setStatus('mandatory')
prtMonitoringTSs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtMonitoringTSs.setStatus('mandatory')
prtMonitoredPort = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtMonitoredPort.setStatus('mandatory')
prtMonitoredTSs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtMonitoredTSs.setStatus('mandatory')
prtCfgParam = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7))
prtCfgParamTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1), )
if mibBuilder.loadTexts: prtCfgParamTable.setStatus('mandatory')
prtCfgParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtCfgParamCnfgIdx"), (0, "DACS-MIB", "prtCfgParamIdx"))
if mibBuilder.loadTexts: prtCfgParamEntry.setStatus('mandatory')
prtCfgParamCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCfgParamCnfgIdx.setStatus('mandatory')
prtCfgParamIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCfgParamIdx.setStatus('mandatory')
prtCfgParamSlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 255))).clone(namedValues=NamedValues(("kmxIO1", 107), ("kmxIO2", 108), ("kmxIO3", 109), ("kmxIO4", 110), ("kmxIO5", 111), ("kmxIO6", 112), ("kmxIO7", 113), ("kmxIO8", 114), ("kmxIO9", 115), ("kmxIO10", 116), ("kmxIO11", 117), ("kmxIO12", 118), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtCfgParamSlt.setStatus('mandatory')
prtCfgParamOperatedMl = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 103, 104))).clone(namedValues=NamedValues(("notApplicable", 1), ("kmxMlA", 103), ("kmxMlB", 104)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtCfgParamOperatedMl.setStatus('mandatory')
prtCfgParamMlAtoMlBPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("low", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtCfgParamMlAtoMlBPrio.setStatus('mandatory')
prtCfgParamMlBtoMlAPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("low", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtCfgParamMlBtoMlAPrio.setStatus('mandatory')
prtCfgParamInbandLoopDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtCfgParamInbandLoopDetection.setStatus('mandatory')
prtT1E1StatTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1), )
if mibBuilder.loadTexts: prtT1E1StatTable.setStatus('mandatory')
prtT1E1StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtT1E1SPrtIdx"))
if mibBuilder.loadTexts: prtT1E1StatEntry.setStatus('mandatory')
prtT1E1SPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1E1SPrtIdx.setStatus('mandatory')
prtT1E1SSlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 255))).clone(namedValues=NamedValues(("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("standAlone", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1E1SSlt.setStatus('mandatory')
prtT1E1OosCount = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1E1OosCount.setStatus('mandatory')
prtT1E1BpvLastMin = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1E1BpvLastMin.setStatus('mandatory')
prtT1E1BpvMax = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1E1BpvMax.setStatus('mandatory')
prtT1E1CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2), )
if mibBuilder.loadTexts: prtT1E1CnfgTable.setStatus('mandatory')
prtT1E1CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtT1E1CnfgIdx"), (0, "DACS-MIB", "prtT1E1PrtIdx"))
if mibBuilder.loadTexts: prtT1E1CnfgEntry.setStatus('mandatory')
prtT1E1CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1E1CnfgIdx.setStatus('mandatory')
prtT1E1PrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1E1PrtIdx.setStatus('mandatory')
prtT1E1Slt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 255))).clone(namedValues=NamedValues(("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("kmxMlA", 103), ("kmxMlB", 104), ("kmxOpt", 106), ("kmxIO1", 107), ("kmxIO2", 108), ("kmxIO3", 109), ("kmxIO4", 110), ("kmxIO5", 111), ("kmxIO6", 112), ("kmxIO7", 113), ("kmxIO8", 114), ("kmxIO9", 115), ("kmxIO10", 116), ("kmxIO11", 117), ("kmxIO12", 118), ("standAlone", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1E1Slt.setStatus('mandatory')
prtT1E1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("esf", 2), ("d4", 3), ("e1", 4), ("e1Crc", 5), ("e1MF", 6), ("e1CrcMF", 7), ("unframed", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1LineType.setStatus('mandatory')
prtT1E1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("jbzs", 1), ("b8zs", 2), ("hdb3", 3), ("zbtsi", 4), ("ami", 5), ("other", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1LineCode.setStatus('mandatory')
prtT1E1SignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("robbedBit", 2), ("bitOriented", 3), ("messageOriented", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1SignalMode.setStatus('mandatory')
prtT1E1Fdl = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("other", 1), ("ansi-T1-403", 2), ("att-54016", 4), ("fdl-none", 8), ("transFdl", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1Fdl.setStatus('mandatory')
prtT1E1FdlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("other", 1), ("user", 2), ("carrier", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1FdlMode.setStatus('mandatory')
prtT1E1Sync = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("tr62411", 2), ("ccitt", 3), ("fast", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1Sync.setStatus('mandatory')
prtT1E1CGA = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("trans", 2), ("full", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1CGA.setStatus('mandatory')
prtT1E1IdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1IdleCode.setStatus('mandatory')
prtT1E1OosSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notsupported", 2), ("forcedIdle", 3), ("forcedBusy", 4), ("busyIdle", 5), ("idleBusy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1OosSignal.setStatus('mandatory')
prtT1E1VoiceOos = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1VoiceOos.setStatus('mandatory')
prtT1E1DataOos = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1DataOos.setStatus('mandatory')
prtT1E1LineLengthMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("len0p133ft", 2), ("len134p266ft", 3), ("len267p399ft", 4), ("len400p533ft", 5), ("len534p655ft", 6), ("fcc68", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1LineLengthMask.setStatus('mandatory')
prtT1E1TxGainMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("txGain0db", 2), ("txGain7dot5db", 3), ("txGain15db", 4), ("txGain22dot5db", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1TxGainMask.setStatus('mandatory')
prtT1E1InbandMng = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 2), ("fdlOrTs0", 3), ("dedicatedTs", 4), ("dedicatedPpp", 5), ("dedicatedFr", 6), ("internal", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1InbandMng.setStatus('mandatory')
prtT1E1InbandMngRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 1), ("r4k", 2), ("r8k", 3), ("r12k", 4), ("r16k", 5), ("r32k", 6), ("r64k", 7), ("r20k", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1InbandMngRate.setStatus('mandatory')
prtT1E1DedicatedTs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1DedicatedTs.setStatus('mandatory')
prtT1E1InbandMngRoutProt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("proprietary", 3), ("rip2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1InbandMngRoutProt.setStatus('mandatory')
prtT1E1LinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("regular", 2), ("transparent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1LinkMode.setStatus('mandatory')
prtT1E1Multiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("br56", 2), ("br64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1Multiplier.setStatus('mandatory')
prtT1E1RxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("rxGain12dB", 2), ("rxGain30dB", 3), ("rxGain36dB", 4), ("shortHaul", 5), ("longHaul", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1RxGain.setStatus('mandatory')
prtT1E1RAI = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1RAI.setStatus('mandatory')
prtT1E1LineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("csu", 2), ("dsu", 3), ("ltu", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1LineMode.setStatus('mandatory')
prtT1E1TS0SaBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 2, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT1E1TS0SaBits.setStatus('mandatory')
prtT1E1FdlMsgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3), )
if mibBuilder.loadTexts: prtT1E1FdlMsgTable.setStatus('mandatory')
prtT1E1FdlMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1), ).setIndexNames((0, "DACS-MIB", "prtT1E1FdlMsgPrtIdx"), (0, "DACS-MIB", "prtT1E1FdlMsgFdlType"))
if mibBuilder.loadTexts: prtT1E1FdlMsgEntry.setStatus('mandatory')
prtT1E1FdlMsgPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1E1FdlMsgPrtIdx.setStatus('mandatory')
prtT1E1FdlMsgFdlType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("send", 1), ("receive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1E1FdlMsgFdlType.setStatus('mandatory')
prtT1E1FdlMsgSlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("standAlone", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1E1FdlMsgSlt.setStatus('mandatory')
prtT1E1FdlMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 2, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT1E1FdlMsg.setStatus('mandatory')
prtHSParamTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1), )
if mibBuilder.loadTexts: prtHSParamTable.setStatus('mandatory')
prtHSParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtHSCnfgIdx"), (0, "DACS-MIB", "prtHSPrtIdx"))
if mibBuilder.loadTexts: prtHSParamEntry.setStatus('mandatory')
prtHSCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHSCnfgIdx.setStatus('mandatory')
prtHSPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHSPrtIdx.setStatus('mandatory')
prtHSSlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("standAlone", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHSSlt.setStatus('mandatory')
prtHSRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66))).clone(namedValues=NamedValues(("r0x56eq0Kbps", 1), ("r1x56eq56Kbps", 2), ("r2x56eq112Kbps", 3), ("r3x56eq168Kbps", 4), ("r4x56eq224Kbps", 5), ("r5x56eq280Kbps", 6), ("r6x56eq336Kbps", 7), ("r7x56eq392Kbps", 8), ("r8x56eq448Kbps", 9), ("r9x56eq504Kbps", 10), ("r10x56eq560Kbps", 11), ("r11x56eq616Kbps", 12), ("r12x56eq672Kbps", 13), ("r13x56eq728Kbps", 14), ("r14x56eq784Kbps", 15), ("r15x56eq840Kbps", 16), ("r16x56eq896Kbps", 17), ("r17x56eq952Kbps", 18), ("r18x56eq1008Kbps", 19), ("r19x56eq1064Kbps", 20), ("r20x56eq1120Kbps", 21), ("r21x56eq1176Kbps", 22), ("r22x56eq1232Kbps", 23), ("r23x56eq1288Kbps", 24), ("r24x56eq1344Kbps", 25), ("r25x56eq1400Kbps", 26), ("r26x56eq1456Kbps", 27), ("r27x56eq1512Kbps", 28), ("r28x56eq1568Kbps", 29), ("r29x56eq1624Kbps", 30), ("r30x56eq1680Kbps", 31), ("r31x56eq1736Kbps", 32), ("r0x64eq0Kbps", 33), ("r1x64eq64Kbps", 34), ("r2x64eq128Kbps", 35), ("r3x64eq192Kbps", 36), ("r4x64eq256Kbps", 37), ("r5x64eq320Kbps", 38), ("r6x64eq384Kbps", 39), ("r7x64eq448Kbps", 40), ("r8x64eq512Kbps", 41), ("r9x64eq576Kbps", 42), ("r10x64eq640Kbps", 43), ("r11x64eq704Kbps", 44), ("r12x64eq768Kbps", 45), ("r13x64eq832Kbps", 46), ("r14x64eq896Kbps", 47), ("r15x64eq960Kbps", 48), ("r16x64eq1024Kbps", 49), ("r17x64eq1088Kbps", 50), ("r18x64eq1152Kbps", 51), ("r19x64eq1216Kbps", 52), ("r20x64eq1280Kbps", 53), ("r21x64eq1344Kbps", 54), ("r22x64eq1408Kbps", 55), ("r23x64eq1472Kbps", 56), ("r24x64eq1536Kbps", 57), ("r25x64eq1600Kbps", 58), ("r26x64eq1664Kbps", 59), ("r27x64eq1728Kbps", 60), ("r28x64eq1792Kbps", 61), ("r29x64eq1856Kbps", 62), ("r30x64eq1920Kbps", 63), ("r31x64eq1984Kbps", 64), ("r32x64eq2048Kbps", 65), ("r32x56eq1792Kbps", 66)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtHSRate.setStatus('mandatory')
prtHSFifoSize = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("auto", 1), ("b32bit", 2), ("b60bit", 3), ("b104bit", 4), ("b144bit", 5), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtHSFifoSize.setStatus('mandatory')
prtHSClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("dce", 1), ("dte1", 2), ("dte2", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtHSClkMode.setStatus('mandatory')
prtHSCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("rts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtHSCTS.setStatus('mandatory')
prtHSRtsState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 255))).clone(namedValues=NamedValues(("off", 2), ("on", 3), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHSRtsState.setStatus('mandatory')
prtHSBertTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2), )
if mibBuilder.loadTexts: prtHSBertTable.setStatus('mandatory')
prtHSBertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtHSBertPrtIdx"))
if mibBuilder.loadTexts: prtHSBertEntry.setStatus('mandatory')
prtHSBertPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHSBertPrtIdx.setStatus('mandatory')
prtHSBertSlt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("standAlone", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHSBertSlt.setStatus('mandatory')
prtHSBertCountClr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtHSBertCountClr.setStatus('mandatory')
prtHSBertTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHSBertTestResult.setStatus('mandatory')
prtSpCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1), )
if mibBuilder.loadTexts: prtSpCnfgTable.setStatus('mandatory')
prtSpCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtSpCnfgIdx"), (0, "DACS-MIB", "prtSpPrtIdx"))
if mibBuilder.loadTexts: prtSpCnfgEntry.setStatus('mandatory')
prtSpCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSpCnfgIdx.setStatus('mandatory')
prtSpPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSpPrtIdx.setStatus('mandatory')
prtSpUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("noUse", 2), ("nmsSlip", 3), ("nmsPpp", 4), ("muxSlip", 5), ("muxPpp", 6), ("terminal", 7), ("dialOut", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpUsage.setStatus('mandatory')
prtSpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("auto", 1), ("s300bps", 2), ("s1200bps", 3), ("s2400bps", 4), ("s4800bps", 5), ("s9600bps", 6), ("s19200bps", 7), ("s38400bps", 8), ("s57600bps", 9), ("s115200bps", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpRate.setStatus('mandatory')
prtSpDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dataBits7", 1), ("dataBits8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpDataBits.setStatus('mandatory')
prtSpParity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpParity.setStatus('mandatory')
prtSpCallOutMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("all", 3), ("major", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpCallOutMode.setStatus('mandatory')
prtSpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpInterface.setStatus('mandatory')
prtSpCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("rts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpCTS.setStatus('mandatory')
prtSpDcdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("d0", 2), ("d10", 3), ("d50", 4), ("d100", 5), ("d200", 6), ("d300", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpDcdDelay.setStatus('mandatory')
prtSpDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("on", 2), ("dtr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpDsr.setStatus('mandatory')
prtSpNoOfRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpNoOfRetries.setStatus('mandatory')
prtSpWaitForConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("t30sec", 2), ("t45sec", 3), ("t60sec", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpWaitForConnect.setStatus('mandatory')
prtSpDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("tone", 2), ("pulse", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpDialMode.setStatus('mandatory')
prtSpAltNumMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpAltNumMode.setStatus('mandatory')
prtSpPrimaryNum = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpPrimaryNum.setStatus('mandatory')
prtSpAltNum = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpAltNum.setStatus('mandatory')
prtSpRoutProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("proprietary", 3), ("rip2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpRoutProtocol.setStatus('mandatory')
prtSpCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpCmd.setStatus('mandatory')
prtSpActCallOut = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("always", 2), ("linkFail", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpActCallOut.setStatus('mandatory')
prtSpAlrRelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("invert", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSpAlrRelayMode.setStatus('mandatory')
prtDimCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1), )
if mibBuilder.loadTexts: prtDimCnfgTable.setStatus('mandatory')
prtDimCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtDimCnfgIdx"), (0, "DACS-MIB", "prtDimIdx"))
if mibBuilder.loadTexts: prtDimCnfgEntry.setStatus('mandatory')
prtDimCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDimCnfgIdx.setStatus('mandatory')
prtDimIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDimIdx.setStatus('mandatory')
prtDimTxMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("regularTx", 2), ("broadcast", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtDimTxMode.setStatus('mandatory')
prtDimPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("normalClk", 2), ("inverted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtDimPolarity.setStatus('mandatory')
prtDimClkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("extDce", 2), ("dce", 3), ("smooth", 4), ("extSmooth", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtDimClkMode.setStatus('mandatory')
prtDimMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("t16msec", 2), ("t64msec", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtDimMaxDelay.setStatus('mandatory')
prtDimMng = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("disabled", 2), ("ts1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtDimMng.setStatus('mandatory')
prtDimDestTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2), )
if mibBuilder.loadTexts: prtDimDestTable.setStatus('mandatory')
prtDimDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1), ).setIndexNames((0, "DACS-MIB", "prtDestCnfgIdx"), (0, "DACS-MIB", "prtDestDimIdx"), (0, "DACS-MIB", "prtDestIdx"))
if mibBuilder.loadTexts: prtDimDestEntry.setStatus('mandatory')
prtDestCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDestCnfgIdx.setStatus('mandatory')
prtDestDimIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDestDimIdx.setStatus('mandatory')
prtDestIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDestIdx.setStatus('mandatory')
prtDest = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtDest.setStatus('mandatory')
prtDestConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("no", 2), ("yes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtDestConnect.setStatus('mandatory')
prtICnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1), )
if mibBuilder.loadTexts: prtICnfgTable.setStatus('mandatory')
prtICnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtICnfgIdx"), (0, "DACS-MIB", "prtIIdx"))
if mibBuilder.loadTexts: prtICnfgEntry.setStatus('mandatory')
prtICnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtICnfgIdx.setStatus('mandatory')
prtIIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtIIdx.setStatus('mandatory')
prtIRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("nc", 2), ("r2bit", 3), ("r4bit", 4), ("r8bit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIRate.setStatus('mandatory')
prtIConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtIConnect.setStatus('mandatory')
prtHdslTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1), )
if mibBuilder.loadTexts: prtHdslTable.setStatus('mandatory')
prtHdslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtHdslIdx"))
if mibBuilder.loadTexts: prtHdslEntry.setStatus('mandatory')
prtHdslIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHdslIdx.setStatus('mandatory')
prtHdslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("central", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHdslMode.setStatus('mandatory')
prtHdslRptrType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("hrpt", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtHdslRptrType.setStatus('mandatory')
prtT3E3CnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1), )
if mibBuilder.loadTexts: prtT3E3CnfgTable.setStatus('mandatory')
prtT3E3CnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1), ).setIndexNames((0, "DACS-MIB", "prtT3E3CnfgIdx"), (0, "DACS-MIB", "prtT3E3PrtIdx"))
if mibBuilder.loadTexts: prtT3E3CnfgEntry.setStatus('mandatory')
prtT3E3CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT3E3CnfgIdx.setStatus('mandatory')
prtT3E3PrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT3E3PrtIdx.setStatus('mandatory')
prtT3E3Slt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 255))).clone(namedValues=NamedValues(("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("standAlone", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtT3E3Slt.setStatus('mandatory')
prtT3E3LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("len0p450ft", 2), ("len451p900ft", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT3E3LineLength.setStatus('mandatory')
prtT3E3InbandMng = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 3, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("off", 2), ("cBit", 3), ("cBitTxRxMng", 4), ("cBitTx", 5), ("cBitTxMng", 6), ("m13", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtT3E3InbandMng.setStatus('mandatory')
cmprTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1), )
if mibBuilder.loadTexts: cmprTable.setStatus('mandatory')
cmprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1), ).setIndexNames((0, "DACS-MIB", "cmprTypeIdx"), (0, "DACS-MIB", "cmprCnfgIdx"), (0, "DACS-MIB", "cmprVersion"), (0, "DACS-MIB", "cmprSltIdx"), (0, "DACS-MIB", "cmprPrtIdx"))
if mibBuilder.loadTexts: cmprEntry.setStatus('mandatory')
cmprTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmprTypeIdx.setStatus('mandatory')
cmprCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmprCnfgIdx.setStatus('mandatory')
cmprVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmprVersion.setStatus('mandatory')
cmprSltIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 255))).clone(namedValues=NamedValues(("psA", 1), ("psB", 2), ("clA", 3), ("clB", 4), ("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmprSltIdx.setStatus('mandatory')
cmprPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmprPrtIdx.setStatus('mandatory')
cmprObj = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmprObj.setStatus('mandatory')
mapLinkTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2), )
if mibBuilder.loadTexts: mapLinkTable.setStatus('mandatory')
mapLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1), ).setIndexNames((0, "DACS-MIB", "mapLinkIdx"))
if mibBuilder.loadTexts: mapLinkEntry.setStatus('mandatory')
mapLinkIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapLinkIdx.setStatus('mandatory')
mapLinkSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 255))).clone(namedValues=NamedValues(("io1", 5), ("io2", 6), ("io3", 7), ("io4", 8), ("io5", 9), ("io6", 10), ("io7", 11), ("io8", 12), ("io9", 13), ("io10", 14), ("io11", 15), ("io12", 16), ("io13", 17), ("io14", 18), ("io15", 19), ("standAlone", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mapLinkSlotIdx.setStatus('mandatory')
mapLinkPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mapLinkPortIdx.setStatus('mandatory')
mapLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapLinkState.setStatus('mandatory')
alrGenTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3), )
if mibBuilder.loadTexts: alrGenTable.setStatus('mandatory')
alrGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1), ).setIndexNames((0, "DACS-MIB", "alrGenCode"))
if mibBuilder.loadTexts: alrGenEntry.setStatus('mandatory')
alrGenCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrGenCode.setStatus('mandatory')
alrGenDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrGenDescription.setStatus('mandatory')
alrGenLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("system", 2), ("card", 3), ("port", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrGenLevel.setStatus('mandatory')
alrGenSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("ps", 2), ("cl", 3), ("io", 4), ("clAndIo", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alrGenSlotType.setStatus('mandatory')
alrGenSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("minor", 4), ("major", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alrGenSeverity.setStatus('mandatory')
alrGenDebounce = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 3, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alrGenDebounce.setStatus('mandatory')
sanityCheckTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 3) + (0,1)).setObjects(("DACS-MIB", "sysSSanityCheckStatus"), ("DACS-MIB", "sysDbaseDownloadCnfgIdxCmd"))
dacsMuxAlarmsTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 3) + (0,2))
mdlConnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 3) + (0,3)).setObjects(("DACS-MIB", "mdlSCardType"), ("DACS-MIB", "mdlSActivity"))
sysAlrStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 3) + (0,4)).setObjects(("DACS-MIB", "sysSAlrStatusAll"), ("DACS-MIB", "sysSAlrStatus"))
sysStatusChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 3) + (0,5)).setObjects(("DACS-MIB", "agnLed"))
cnfgUpdateTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 3) + (0,6))
mibBuilder.exportSymbols("DACS-MIB", radSTC2UDP=radSTC2UDP, radRRMLBT=radRRMLBT, pLinkVRate=pLinkVRate, agnSAlrStatus=agnSAlrStatus, sysCClkSrcEntry=sysCClkSrcEntry, prtExTrePrtIdx=prtExTrePrtIdx, prtHsfSltIdx=prtHsfSltIdx, prtCnfgAgendaFrom=prtCnfgAgendaFrom, prtBertPattern=prtBertPattern, radTRE8D=radTRE8D, radFEB4FDX=radFEB4FDX, sysSNoOfSanityCheckErr=sysSNoOfSanityCheckErr, prtExPh1MlRxSensitivity=prtExPh1MlRxSensitivity, prtSpDialMode=prtSpDialMode, mdlSAlrClearCmd=mdlSAlrClearCmd, prtInPh1MlRate=prtInPh1MlRate, prtMl4CnfgEntry=prtMl4CnfgEntry, prtVc2SltIdx=prtVc2SltIdx, prtInVc3Connect=prtInVc3Connect, prtExPhPlCcittCrc=prtExPhPlCcittCrc, prtInPh1MlMinSeparators=prtInPh1MlMinSeparators, linkSelectorRevert=linkSelectorRevert, prtExLs2CnfgIdx=prtExLs2CnfgIdx, prtGenTsCnfgIdx=prtGenTsCnfgIdx, cmprPrtGen=cmprPrtGen, agnCAgendaDayIdx=agnCAgendaDayIdx, prtFrRxBeViol=prtFrRxBeViol, radFomiT3=radFomiT3, sysSRdnFlipCmd=sysSRdnFlipCmd, prtGenCnfgIdx=prtGenCnfgIdx, prtAcmSltIdx=prtAcmSltIdx, sysBufferAlrIdx=sysBufferAlrIdx, agnListDecodingDescription=agnListDecodingDescription, prtLogicalCnfgIdx=prtLogicalCnfgIdx, prtAgendaBehaviourEntry=prtAgendaBehaviourEntry, mdlSClearAlrCmd=mdlSClearAlrCmd, prtExTsCnfgIdx=prtExTsCnfgIdx, prtExVc3CnfgTable=prtExVc3CnfgTable, radFcdIP=radFcdIP, prtExVcPbxLinkTo=prtExVcPbxLinkTo, mdlCmprTypIdx=mdlCmprTypIdx, mngTrapMask=mngTrapMask, mdlAlrMaskSltIdx=mdlAlrMaskSltIdx, radAPS24=radAPS24, prtPerfTimeTag=prtPerfTimeTag, agnSAlrSeverity=agnSAlrSeverity, prtFrTimeElapsed=prtFrTimeElapsed, prtIsdnDirectoryCnfgIdx=prtIsdnDirectoryCnfgIdx, prtSAlarmIdx=prtSAlarmIdx, prtExHsrDcdDsr=prtExHsrDcdDsr, prtExLs6Protocol=prtExLs6Protocol, prtExPVc4SltIdx=prtExPVc4SltIdx, prtIsdnEndpointSpid=prtIsdnEndpointSpid, radAPS16=radAPS16, prtIn7p8VcPbxOos=prtIn7p8VcPbxOos, agnTsCmprSlotIdx=agnTsCmprSlotIdx, agnSigProfileEntry=agnSigProfileEntry, sysDbaseFlipActivation=sysDbaseFlipActivation, prtParam=prtParam, mdlSEntry=mdlSEntry, prtPerfSES=prtPerfSES, systemPsType=systemPsType, agnCnfgAlrSlot=agnCnfgAlrSlot, radAPD8=radAPD8, prtExClCnfgIdx=prtExClCnfgIdx, prtAcmPrtIdx=prtAcmPrtIdx, prtCnfgAgendaPrtIdx=prtCnfgAgendaPrtIdx, prtExPVc4CnfgTable=prtExPVc4CnfgTable, prtMl4VoiceOos=prtMl4VoiceOos, systemTiming=systemTiming, prtLs6Cnfg=prtLs6Cnfg, radHtu2=radHtu2, sysDclCopyDbTable=sysDclCopyDbTable, prtInPh1MlDlciPrtIdx=prtInPh1MlDlciPrtIdx, prtExPhPlDlciPrtIdx=prtExPhPlDlciPrtIdx, mdlSHwStatus=mdlSHwStatus, prtSpCnfgTable=prtSpCnfgTable, prtExPhPlSltIdx=prtExPhPlSltIdx, radFPS8=radFPS8, agnSAlrIdx=agnSAlrIdx, prtInHsiSltIdx=prtInHsiSltIdx, radSEC1=radSEC1, prtT1E1FdlMsgTable=prtT1E1FdlMsgTable, prtExHsfLinkTo=prtExHsfLinkTo, prtExLs6LinkToInternal=prtExLs6LinkToInternal, sysDclOnline=sysDclOnline, prtDlciCmprObj=prtDlciCmprObj, prtExVcPbxCnfgIdx=prtExVcPbxCnfgIdx, sysCRdnOnline=sysCRdnOnline, radFTBSAS=radFTBSAS, agnCNetEventsBcastInterval=agnCNetEventsBcastInterval, ethIfIdx=ethIfIdx, agnCOffsetCmd=agnCOffsetCmd, prtIsdnDirectoryRemoteSubAddr2=prtIsdnDirectoryRemoteSubAddr2, agnSCmprErrListEntry=agnSCmprErrListEntry, prtAcmCnfgIdx=prtAcmCnfgIdx, prtHSParamTable=prtHSParamTable, prtSupervisoryInterface=prtSupervisoryInterface, agnListDecodingDefState=agnListDecodingDefState, prtExPhPlCllmMsg=prtExPhPlCllmMsg, prtExPhPlModemTable=prtExPhPlModemTable, prtAcmCnfgTable=prtAcmCnfgTable, mdlPsTestResult=mdlPsTestResult, mapLinkTable=mapLinkTable, prtExMbePrtIdx=prtExMbePrtIdx, radSysStkHub=radSysStkHub, prtAlarmsCmprTable=prtAlarmsCmprTable, prtVc2PrtIdx=prtVc2PrtIdx, prtExPh1MlTxGain=prtExPh1MlTxGain, agnVoiceSwConfRtEntry=agnVoiceSwConfRtEntry, mdlSCmd=mdlSCmd, prtSInstPrtType=prtSInstPrtType, prtT1FdlMsg=prtT1FdlMsg, prtExPh1MlTsCnfgIdx=prtExPh1MlTsCnfgIdx, sysBufferAlrTime=sysBufferAlrTime, chasTotalNoOfIoSlt=chasTotalNoOfIoSlt, diverseIfWanGen=diverseIfWanGen, prtInHsiCnfgTable=prtInHsiCnfgTable, prtVc2CnfgTable=prtVc2CnfgTable, prtCnfgAgendaSltIdx=prtCnfgAgendaSltIdx, prtGenParamTable=prtGenParamTable, prtDlciCmprPrtIdx=prtDlciCmprPrtIdx, prtFrStatisInvIdx=prtFrStatisInvIdx, prtInHsiCnfgIdx=prtInHsiCnfgIdx, prtExHsrRtsDtr=prtExHsrRtsDtr, agnSCmprErrListTable=agnSCmprErrListTable, prtSpCmd=prtSpCmd, mdlClEntry=mdlClEntry, fileTransfer=fileTransfer, prtExHs4TsSltIdx=prtExHs4TsSltIdx, mdlPbxFraSltIdx=mdlPbxFraSltIdx, agnCFlipDiscardDe=agnCFlipDiscardDe, mdlSMaskedAlrStat=mdlSMaskedAlrStat, prtExPhPlDlciTable=prtExPhPlDlciTable, mdlAlarmMask=mdlAlarmMask, sysSaSwchStatus=sysSaSwchStatus, prtExPhPlPvcCreateMsg=prtExPhPlPvcCreateMsg, prtExPhPlDlciIConPrt=prtExPhPlDlciIConPrt, alrGenSlotType=alrGenSlotType, mdlClLastFlipCause=mdlClLastFlipCause, cmprTypeIdx=cmprTypeIdx, prtExPVc4DelayStart=prtExPVc4DelayStart, prtInHsiPrtIdx=prtInHsiPrtIdx, agnTsSltIdx=agnTsSltIdx, prtExVc2CallEnable=prtExVc2CallEnable, prtPhMlPrtIdx=prtPhMlPrtIdx, prtDlciRxBeViol=prtDlciRxBeViol, agnCFlipNetEventISD=agnCFlipNetEventISD, agnSNoOfSanityCheckErr=agnSNoOfSanityCheckErr, agnVoiceSwConfNodeId=agnVoiceSwConfNodeId, prtSAlrStatus=prtSAlrStatus, prtExVc3PrtIdx=prtExVc3PrtIdx, prtIsdnDirectoryTeiId=prtIsdnDirectoryTeiId, prtExTsBit=prtExTsBit, radOptimux4E1=radOptimux4E1, prtInPh1MlProtocol=prtInPh1MlProtocol, sysSEditBy=sysSEditBy, agnSEntryIsValid=agnSEntryIsValid, prtExHsiActType=prtExHsiActType, cnfgUpdateTrap=cnfgUpdateTrap, prtExPhPlFlowControl=prtExPhPlFlowControl, cmprPrtIdx=cmprPrtIdx, chassTotalNoOfClSlt=chassTotalNoOfClSlt, prtGenTsIdx=prtGenTsIdx, prtExVcPbxConnect=prtExVcPbxConnect, agnVoiceSwConfHGTable=agnVoiceSwConfHGTable, prtGenTestCmd=prtGenTestCmd, prtExLs6VCnfgIdx=prtExLs6VCnfgIdx, radSPS12=radSPS12, prtFrTxDeFrames=prtFrTxDeFrames, prtInPh1MlCongResponse=prtInPh1MlCongResponse, chasTotalNoOfSlt=chasTotalNoOfSlt, agnSaSwchStatus=agnSaSwchStatus, prtInPh1MlDlciIdx=prtInPh1MlDlciIdx, agnCnfgUpdMnger=agnCnfgUpdMnger, prtInTreConnect=prtInTreConnect, prtPVc4Cnfg=prtPVc4Cnfg, prtExPVc4WinkMinDuration=prtExPVc4WinkMinDuration, prtGenTsPrtIdx=prtGenTsPrtIdx, sysSAlrIdx=sysSAlrIdx, sysSAlrStatus=sysSAlrStatus, agnTsRowStatus=agnTsRowStatus, prtIn7p8VcPbxPrtIdx=prtIn7p8VcPbxPrtIdx, sysSClkSrc=sysSClkSrc, radRRTRE8=radRRTRE8, radAPD2=radAPD2, prtIsdnDirectoryPrtNu=prtIsdnDirectoryPrtNu, prtExPh1MlTdmTrunk=prtExPh1MlTdmTrunk, prtCfgParam=prtCfgParam, radAmcdE1=radAmcdE1, prtExPVc4DlciTxBe=prtExPVc4DlciTxBe, sysSAlrMask=sysSAlrMask, prtFrPlusNotSegmentedPriorities=prtFrPlusNotSegmentedPriorities, agnListDecodingType=agnListDecodingType, prtExPhPlLXoff=prtExPhPlLXoff, prtDimClkMode=prtDimClkMode, mdlCNoOfInternPrt=mdlCNoOfInternPrt, trapEntry=trapEntry, agnDlciStatus=agnDlciStatus, sysCRdnHwSwFlip=sysCRdnHwSwFlip, prtInVc3CnfgEntry=prtInVc3CnfgEntry, prtAcmCnfgEntry=prtAcmCnfgEntry, prtCmprTable=prtCmprTable, prtIsdnNumOfAbstractTerm=prtIsdnNumOfAbstractTerm, sysSSelfTestResult=sysSSelfTestResult, prtDlciCmprEntry=prtDlciCmprEntry, prtIsdnBasicRateLineTopology=prtIsdnBasicRateLineTopology, prtFrRxBecn=prtFrRxBecn, prtExHs4TsPrtIdx=prtExHs4TsPrtIdx, prtExPhPlCnfgIdx=prtExPhPlCnfgIdx, agnTsCnfgIdx=agnTsCnfgIdx, agnDlciLIdx=agnDlciLIdx, agnCClkSrcSlt=agnCClkSrcSlt, radFddi=radFddi, radTokenRing=radTokenRing, mdlGen=mdlGen, statMdlGen=statMdlGen, prtCmprPrtIdx=prtCmprPrtIdx, prtIsdnSimultaneousCall=prtIsdnSimultaneousCall, systemSaveAndResetAllStatsCmd=systemSaveAndResetAllStatsCmd, prtExLs6VEchoCanceler=prtExLs6VEchoCanceler, prtExHsiInterface=prtExHsiInterface, prtExPVc4OutPulsing=prtExPVc4OutPulsing, prtCfgParamEntry=prtCfgParamEntry, prtSAlrCounter=prtSAlrCounter, radETS4=radETS4, agnSEditBy=agnSEditBy, prtDimCnfgIdx=prtDimCnfgIdx, mdlCSltIdx=mdlCSltIdx, systemResetAllStatsCmd=systemResetAllStatsCmd, prtCnfgAgendaCnfgIdx=prtCnfgAgendaCnfgIdx, prtExPh1MlMfClkSrcPrt=prtExPh1MlMfClkSrcPrt, prtExLs6VIfType=prtExLs6VIfType, prtInTreCnfgTable=prtInTreCnfgTable, statusChangedTrap=statusChangedTrap, prtT1E1PrtIdx=prtT1E1PrtIdx, cmprCnfgIdx=cmprCnfgIdx, prtT1E1FdlMsgEntry=prtT1E1FdlMsgEntry, prtExHs4OosCode=prtExHs4OosCode, prtExLs2EnvIdx=prtExLs2EnvIdx, agnCnfgAlrCode=agnCnfgAlrCode, radFRmon=radFRmon, prtExPh1MlTsPrtIdx=prtExPh1MlTsPrtIdx, agnXCmprIdx3=agnXCmprIdx3, prtExPVc4AutoFaxMode=prtExPVc4AutoFaxMode, prtIsdnMode=prtIsdnMode, sysSAlarmInvert=sysSAlarmInvert, mdlCProgCardType=mdlCProgCardType, prtHsfCnfgIdx=prtHsfCnfgIdx, mdlSAlrCounter=mdlSAlrCounter, agnCFlipNetEventActive=agnCFlipNetEventActive, prtExHs4TsCnfgTable=prtExHs4TsCnfgTable, prtExPhPlDlciTxBc=prtExPhPlDlciTxBc, prtExVc3TransGain=prtExVc3TransGain)
mibBuilder.exportSymbols("DACS-MIB", agnSEntryIdx=agnSEntryIdx, mdlClTable=mdlClTable, mdlSAlarmStatus=mdlSAlarmStatus, prtCrTxTotalCells=prtCrTxTotalCells, sysDbaseFlipIdx=sysDbaseFlipIdx, prtExHsiLinkTo=prtExHsiLinkTo, prtGenTsIConPrt=prtGenTsIConPrt, agnSClkSrc=agnSClkSrc, agnTsPrtIdx=agnTsPrtIdx, prtLogicalPrtIdx=prtLogicalPrtIdx, radEPR4T2FL=radEPR4T2FL, prtT1E1StatEntry=prtT1E1StatEntry, mdlSHwVersion=mdlSHwVersion, prtSupervisoryCTS=prtSupervisoryCTS, prtSupervisoryUsage=prtSupervisoryUsage, prtGenTestDurationEntry=prtGenTestDurationEntry, prtSAlarmState=prtSAlarmState, prtInLs6CnfgIdx=prtInLs6CnfgIdx, agnCClkSrcIdx=agnCClkSrcIdx, prtExPh1MlLineType=prtExPh1MlLineType, alrGenEntry=alrGenEntry, radAce=radAce, radAtmCsuDsu=radAtmCsuDsu, agnTsCmprCnfgIdx=agnTsCmprCnfgIdx, radFTC2UDP=radFTC2UDP, radAce2T=radAce2T, prtT1E1LineLengthMask=prtT1E1LineLengthMask, prtTreCnfg=prtTreCnfg, radFEC1UDP=radFEC1UDP, prtIsdnSltIdx=prtIsdnSltIdx, alrGenCode=alrGenCode, agnListDecodingCode=agnListDecodingCode, mapLinkIdx=mapLinkIdx, agnDlciHPrtIdx=agnDlciHPrtIdx, prtT1FdlMsgFdlTxRx=prtT1FdlMsgFdlTxRx, cmprVersion=cmprVersion, sysCRoutingOnEth=sysCRoutingOnEth, prtTestInitiator=prtTestInitiator, prtPhMlCnfgTable=prtPhMlCnfgTable, prtPerfES=prtPerfES, prtExPhPlFrameSeparator=prtExPhPlFrameSeparator, prtIn7p8VcPbxMode=prtIn7p8VcPbxMode, prtCrTxDataCells=prtCrTxDataCells, prtHsiCnfg=prtHsiCnfg, chassTotalNoOfMlSlt=chassTotalNoOfMlSlt, prtIsdnDirectoryLocalAddr=prtIsdnDirectoryLocalAddr, prtT1E1FdlMsgFdlType=prtT1E1FdlMsgFdlType, agnTsCmprData=agnTsCmprData, prtInPh1MlErrorsThreshold=prtInPh1MlErrorsThreshold, prtDimCnfgEntry=prtDimCnfgEntry, radMP2100H=radMP2100H, tftpTotalTimeOut=tftpTotalTimeOut, prtExVc2ReceiveGain=prtExVc2ReceiveGain, prtCnfgAgendaDayIdx=prtCnfgAgendaDayIdx, prtExVc2Sig=prtExVc2Sig, mdlAlrSltIdx=mdlAlrSltIdx, prtAgendaBehaviourTable=prtAgendaBehaviourTable, agnTsCmprTable=agnTsCmprTable, prtFrPlusCnfg=prtFrPlusCnfg, prtHsfCnfgTable=prtHsfCnfgTable, agnDlciCmprVersion=agnDlciCmprVersion, prtExPVc4DlciEntry=prtExPVc4DlciEntry, prtGenCnfgPortId=prtGenCnfgPortId, agnDlciRowStatus=agnDlciRowStatus, prtExPh1MlTsIdx=prtExPh1MlTsIdx, prtIsdnCnfgTable=prtIsdnCnfgTable, radKM2100=radKM2100, radRBHT=radRBHT, portOptWaveLength=portOptWaveLength, mdlPbxFraSignalVector=mdlPbxFraSignalVector, prtExPVc4DlciIConDlci=prtExPVc4DlciIConDlci, radSAHTM=radSAHTM, prtFrTxBecn=prtFrTxBecn, prtExHsfConnect=prtExHsfConnect, prtExTsIConPrt=prtExTsIConPrt, prtIn1p6VcPbxCnfgIdx=prtIn1p6VcPbxCnfgIdx, sysSaHwVersion=sysSaHwVersion, prtFrTxDcrdCongDeFr=prtFrTxDcrdCongDeFr, mdlAlrMaskTable=mdlAlrMaskTable, prtSupervisoryIndex=prtSupervisoryIndex, prtParamEntry=prtParamEntry, prtHSBertCountClr=prtHSBertCountClr, agnCAgendaCnfgIdx=agnCAgendaCnfgIdx, prtGenEntry=prtGenEntry, prtT1E1FdlMsg=prtT1E1FdlMsg, agnTsCmprEntry=agnTsCmprEntry, prtExHs4TsIConPrt=prtExHs4TsIConPrt, sysCRdnTable=sysCRdnTable, prtSTestMask=prtSTestMask, prtInPh1MlEnqPeriod=prtInPh1MlEnqPeriod, tftpStatusChangeTrap=tftpStatusChangeTrap, agnCnfgAlrPort=agnCnfgAlrPort, agnCFlipNetEventSlot=agnCFlipNetEventSlot, prtExHsiConnect=prtExHsiConnect, prtT1E1LinkMode=prtT1E1LinkMode, prtGenTsEntry=prtGenTsEntry, agnCnfgAlrReportTable=agnCnfgAlrReportTable, agnSCmprErrObj=agnSCmprErrObj, sysBufferAlrTable=sysBufferAlrTable, prtCnfgAgendaEntry=prtCnfgAgendaEntry, pLinkSlotNu=pLinkSlotNu, prtHSSlt=prtHSSlt, prtInPh1MlDlciIConDlci=prtInPh1MlDlciIConDlci, prtExLs6Connect=prtExLs6Connect, prtCfgParamMlBtoMlAPrio=prtCfgParamMlBtoMlAPrio, radStarSwitch=radStarSwitch, agnTsConPrtIdx=agnTsConPrtIdx, agnVoiceSwConfNoOfHops=agnVoiceSwConfNoOfHops, prtSAlarmTable=prtSAlarmTable, prtMl4DataOos=prtMl4DataOos, radFDX100=radFDX100, mapLinkPortIdx=mapLinkPortIdx, agnAlarmsCmprObj=agnAlarmsCmprObj, prtIn1p6VcPbxCnfgTable=prtIn1p6VcPbxCnfgTable, systems=systems, agnSLastCnfgFlipTime=agnSLastCnfgFlipTime, prtPhPlCnfg=prtPhPlCnfg, prtDlciStatis=prtDlciStatis, prtExPh1MlRedundRecTime=prtExPh1MlRedundRecTime, prtExHs4TsIConTs=prtExHs4TsIConTs, prtSupervisoryParity=prtSupervisoryParity, agnCmprTable=agnCmprTable, prtHSBertPrtIdx=prtHSBertPrtIdx, prtExVcPbxTsIConPrt=prtExVcPbxTsIConPrt, mdlCmprSltIdx=mdlCmprSltIdx, prtCnfgAgendaSesId=prtCnfgAgendaSesId, radAsmi450R1152Sa=radAsmi450R1152Sa, prtIn1p6VcPbxConnect=prtIn1p6VcPbxConnect, prtDim=prtDim, mdlSAlrTable=mdlSAlrTable, prtExMbeCnfgTable=prtExMbeCnfgTable, prtSpAltNumMode=prtSpAltNumMode, prtFrRxFecn=prtFrRxFecn, prtExLs2CnfgTable=prtExLs2CnfgTable, prtT1FdlMsgSltIdx=prtT1FdlMsgSltIdx, agnCFlipIdx=agnCFlipIdx, prtExPhPlModemPrtIdx=prtExPhPlModemPrtIdx, prtFrPlusCnfgEntry=prtFrPlusCnfgEntry, prtInPh1MlCongLevel=prtInPh1MlCongLevel, prtI=prtI, prtHSBertEntry=prtHSBertEntry, agnSAlrCode=agnSAlrCode, prtAlrMaskTable=prtAlrMaskTable, prtSpCnfgEntry=prtSpCnfgEntry, prtIn1p6VcPbxSltIdx=prtIn1p6VcPbxSltIdx, prtExPVc4Oos=prtExPVc4Oos, sysChas=sysChas, prtExPVc4DlciStatus=prtExPVc4DlciStatus, sysSRdnFlipPort=sysSRdnFlipPort, prtBertTs=prtBertTs, prtExLs6PrtIdx=prtExLs6PrtIdx, prtCfgParamSlt=prtCfgParamSlt, radAce2005=radAce2005, prtGenTsType=prtGenTsType, sysDcl=sysDcl, prtICnfgTable=prtICnfgTable, sysDbaseFlipEntry=sysDbaseFlipEntry, alarmsTrap=alarmsTrap, prtMl4PrtIdx=prtMl4PrtIdx, radAce102=radAce102, sysCRdnSecPort=sysCRdnSecPort, prtIConnect=prtIConnect, mdlSInstSltIdx=mdlSInstSltIdx, agnCSaveNetFlipDbCmd=agnCSaveNetFlipDbCmd, prtPerfPeriodRef=prtPerfPeriodRef, prtBertTable=prtBertTable, sysSAlrEntry=sysSAlrEntry, mdlDacsMux=mdlDacsMux, mapLinkSltIdx=mapLinkSltIdx, prtExPVc4DlciRxBc=prtExPVc4DlciRxBc, prtClCnfg=prtClCnfg, agnSAlrEntry=agnSAlrEntry, prtInPh1MlDlciSltIdx=prtInPh1MlDlciSltIdx, agnSAlrCounter=agnSAlrCounter, prtInMbeSltIdx=prtInMbeSltIdx, prtExLs6SltIdx=prtExLs6SltIdx, prtInPh1MlDlciTxBc=prtInPh1MlDlciTxBc, prtHSRtsState=prtHSRtsState, agnSa=agnSa, mdlPbxFraSignaling=mdlPbxFraSignaling, prtExPhPlDcdRts=prtExPhPlDcdRts, prtExPVc4EchoCanceler=prtExPVc4EchoCanceler, sysCurrentAlr=sysCurrentAlr, prtMl4CnfgTable=prtMl4CnfgTable, agnCmprTypIdx=agnCmprTypIdx, prtCnfgAgendaTo=prtCnfgAgendaTo, prtCnfgAgenda=prtCnfgAgenda, chasVersion=chasVersion, prtT1E1SignalMode=prtT1E1SignalMode, prtExPhPlEnqPeriod=prtExPhPlEnqPeriod, prtT1E1VoiceOos=prtT1E1VoiceOos, prtExHs4PrtIdx=prtExHs4PrtIdx, sysSErrListTable=sysSErrListTable, prtExPhPlDlciCnfgIdx=prtExPhPlDlciCnfgIdx, sysSDateCmd=sysSDateCmd, sysSAlrMaskAll=sysSAlrMaskAll, prtGenCnfgLinkToSlot=prtGenCnfgLinkToSlot, radSysPS=radSysPS, sysSDateFormat=sysSDateFormat, linkSelectorPLinkEntry=linkSelectorPLinkEntry, prtIsdnDirectoryRemoteAddr=prtIsdnDirectoryRemoteAddr, prtExHs4SltIdx=prtExHs4SltIdx, radAsmi450R768Sa=radAsmi450R768Sa, sanityTrap=sanityTrap, radFPS4=radFPS4, agnCClkSrcEntry=agnCClkSrcEntry, prtHSFifoSize=prtHSFifoSize, sysBufferAlrState=sysBufferAlrState, prtExLs6VOos=prtExLs6VOos, prtExPVc4HuntGroupMb=prtExPVc4HuntGroupMb, prtCrStatisSltIdx=prtCrStatisSltIdx, mdlSActivity=mdlSActivity, prtSupervisoryDSR=prtSupervisoryDSR, mdlCmprEntry=mdlCmprEntry, mdlSAlrStatusAll=mdlSAlrStatusAll, radOptimuxXL16E1=radOptimuxXL16E1, mdlAlrCode=mdlAlrCode, prtSExHsfRts=prtSExHsfRts, radSysCnvrtr=radSysCnvrtr, agnGlobalAlarmMask=agnGlobalAlarmMask, prtDimMaxDelay=prtDimMaxDelay, sysDclActiveCl=sysDclActiveCl, radSTC1UDP=radSTC1UDP, agnCNetEventsBcast=agnCNetEventsBcast, agnSTimeCmd=agnSTimeCmd, systemDate=systemDate, prtInPh1MlSltType=prtInPh1MlSltType, radEP4TAUI=radEP4TAUI, ethIfTable=ethIfTable, radRRFTBSAS=radRRFTBSAS, prtHdsl=prtHdsl, prtExLs6CnfgEntry=prtExLs6CnfgEntry, agnDlciTxBc=agnDlciTxBc, agnCnfgAlrTable=agnCnfgAlrTable, prtInPh1MlDlciRxBe=prtInPh1MlDlciRxBe, prtExMbeSltIdx=prtExMbeSltIdx, prtPerformance=prtPerformance, prtInPh1MlDlciIConSlt=prtInPh1MlDlciIConSlt, prtExPVc4ExtensionNumber=prtExPVc4ExtensionNumber, prtExLs2Connect=prtExLs2Connect, prtExVc2IfType=prtExVc2IfType, mdlPsStatus=mdlPsStatus, radEPR8T=radEPR8T, mdlAlrIdx=mdlAlrIdx, prtExVc2SigProfile=prtExVc2SigProfile, prtFrPlusSltIdx=prtFrPlusSltIdx, prtExPh1MlRedundType=prtExPh1MlRedundType, prtExHs4LineCode=prtExHs4LineCode, chassTotalNoOfPsSlt=chassTotalNoOfPsSlt, prtMl4Oos=prtMl4Oos, prtSAlrCode=prtSAlrCode, sysSInvertedAlr=sysSInvertedAlr, mngIP=mngIP, radMBE8D=radMBE8D)
mibBuilder.exportSymbols("DACS-MIB", radSPS3S=radSPS3S, radBridges=radBridges, prtIn1p6VcPbxPrtIdx=prtIn1p6VcPbxPrtIdx, prtExLs2ClkMode=prtExLs2ClkMode, prtExLs6CnfgTable=prtExLs6CnfgTable, prtDimDestEntry=prtDimDestEntry, prtExPhPlPrtIdx=prtExPhPlPrtIdx, prtIn1p6VcPbxRate=prtIn1p6VcPbxRate, radTMA=radTMA, alrBufEntry=alrBufEntry, radMX300=radMX300, radSysRtr=radSysRtr, prtExClStopBits=prtExClStopBits, radFcdW=radFcdW, prtCfgParamMlAtoMlBPrio=prtCfgParamMlAtoMlBPrio, prtHdslRptrType=prtHdslRptrType, prtMl4CnfgIdx=prtMl4CnfgIdx, prtExLs6VConnect=prtExLs6VConnect, prtExLs2Rate=prtExLs2Rate, prtExPVc4IfType=prtExPVc4IfType, prtGenTestMask=prtGenTestMask, agnTrapValue=agnTrapValue, radOptimux4T1=radOptimux4T1, rad=rad, prtFrTxTotalFrames=prtFrTxTotalFrames, linkSelectorCnfgTable=linkSelectorCnfgTable, sysSRdnFlipEntry=sysSRdnFlipEntry, agnDlciPriority=agnDlciPriority, prtExHsrLlbEnable=prtExHsrLlbEnable, radAmcdT1=radAmcdT1, agnFlipDbControls=agnFlipDbControls, prtExPVc4MaxRate=prtExPVc4MaxRate, systemPsIndex2=systemPsIndex2, prtExPVc4Wire=prtExPVc4Wire, prtExHs4TsEntry=prtExHs4TsEntry, prtGenTestIdx=prtGenTestIdx, prtMonitoringIdx=prtMonitoringIdx, prtBertSyncStatus=prtBertSyncStatus, radRRTRE1D=radRRTRE1D, radEP4FL=radEP4FL, agnDlciEntry=agnDlciEntry, sysCRdnRecTime=sysCRdnRecTime, prtFrStatisPrtIdx=prtFrStatisPrtIdx, prtSpInterface=prtSpInterface, prtExHsrSltIdx=prtExHsrSltIdx, agnSigProfileTable=agnSigProfileTable, prtPerfTable=prtPerfTable, radTrimBrg10=radTrimBrg10, radFastWay100=radFastWay100, agnCnfgAlrEntry=agnCnfgAlrEntry, radPrbiE3=radPrbiE3, mdlSInstEntry=mdlSInstEntry, chassTotalNoOfIoSlt=chassTotalNoOfIoSlt, agnTsConSltIdx=agnTsConSltIdx, prtMl4CGA=prtMl4CGA, radRADring=radRADring, prtHSBertTable=prtHSBertTable, agnCFlipNetEventEndTime=agnCFlipNetEventEndTime, prtGenInterfaceType=prtGenInterfaceType, prtExLs6VCnfgTable=prtExLs6VCnfgTable, agnChangeCnt=agnChangeCnt, radOpt4T1C=radOpt4T1C, agnAlarmsCmprEntry=agnAlarmsCmprEntry, agnTsIdx=agnTsIdx, prtExPh1MlRedundSlot=prtExPh1MlRedundSlot, prtInLs6CnfgEntry=prtInLs6CnfgEntry, prtExVcPbxTsMode=prtExVcPbxTsMode, sysSAlarmMask=sysSAlarmMask, prtSpDsr=prtSpDsr, agnCSaveNetCnfgIdxCmd=agnCSaveNetCnfgIdxCmd, prtFrPlusCnfgIdx=prtFrPlusCnfgIdx, prtFrRxMngFrames=prtFrRxMngFrames, prtDlciTxDcrdCongAllFr=prtDlciTxDcrdCongAllFr, sysSErrDescription=sysSErrDescription, prtInLs2CnfgIdx=prtInLs2CnfgIdx, prtInMbeCnfgEntry=prtInMbeCnfgEntry, radRTEC=radRTEC, prtInLs2CnfgEntry=prtInLs2CnfgEntry, prtSBertTstRslt=prtSBertTstRslt, prtGenActiveStatus=prtGenActiveStatus, agnCDeleteCnfgIdxCmd=agnCDeleteCnfgIdxCmd, agnListDecoding=agnListDecoding, radEPR4TFL=radEPR4TFL, prtExLs6VCnfgEntry=prtExLs6VCnfgEntry, prtHsfCnfgEntry=prtHsfCnfgEntry, prtInPh1MlDlciIConPrt=prtInPh1MlDlciIConPrt, mdlCPrgTable=mdlCPrgTable, sysSErrIdx=sysSErrIdx, radAce2E=radAce2E, prtExPhPlDlciIConDlci=prtExPhPlDlciIConDlci, mapWanGen=mapWanGen, agnSSanityCheckStatus=agnSSanityCheckStatus, prtExPhPlClkMode=prtExPhPlClkMode, agnXCmprIdx5=agnXCmprIdx5, agnXCmprObj=agnXCmprObj, agnStatusChangeTrap=agnStatusChangeTrap, radMP2100F=radMP2100F, agnCNetGoCmd=agnCNetGoCmd, prtInPh1MlPrtIdx=prtInPh1MlPrtIdx, prtSAlrMask=prtSAlrMask, agnTsType=agnTsType, prtExPh1MlCnfgIdx=prtExPh1MlCnfgIdx, mdlSSwVersion=mdlSSwVersion, agnMonitorModeCmd=agnMonitorModeCmd, prtExHsfCts=prtExHsfCts, radAce101=radAce101, radMLBT=radMLBT, radHcd4Sa=radHcd4Sa, radFEB4SAS=radFEB4SAS, sysCnfgIdx=sysCnfgIdx, prtStatusChangeTrap=prtStatusChangeTrap, agnCnfgAlrStartReportOff=agnCnfgAlrStartReportOff, mdlSAlrSltIdx=mdlSAlrSltIdx, prtMonitoredPort=prtMonitoredPort, prtExLs6VSltIdx=prtExLs6VSltIdx, prtExPh1MlTsExt=prtExPh1MlTsExt, agnMux=agnMux, agnTestStatus=agnTestStatus, prtExClCnfgEntry=prtExClCnfgEntry, prtPhMlClockMode=prtPhMlClockMode, prtIsdnConnect=prtIsdnConnect, prtSTstCmd=prtSTstCmd, prtSpEntry=prtSpEntry, prtIn7p8VcPbxCnfgEntry=prtIn7p8VcPbxCnfgEntry, agnListDecodingTable=agnListDecodingTable, radFcdE1M=radFcdE1M, prtCmprObj=prtCmprObj, prtExVcPbxFrame=prtExVcPbxFrame, prtAgendaBehaviourPrtIdx=prtAgendaBehaviourPrtIdx, mdlAlarmsCmprTable=mdlAlarmsCmprTable, prtExHsfInbandLoopback=prtExHsfInbandLoopback, prtExVc2CodingLaw=prtExVc2CodingLaw, prtExPhPlFrMngProt=prtExPhPlFrMngProt, sysSRdnFlipTable=sysSRdnFlipTable, systemClearTablesCmd=systemClearTablesCmd, prtExMbeCnfgEntry=prtExMbeCnfgEntry, prtHSCnfgIdx=prtHSCnfgIdx, prtGenAlrMaskAll=prtGenAlrMaskAll, prtExVc2TransGain=prtExVc2TransGain, prtMonEntry=prtMonEntry, prtT3E3CnfgIdx=prtT3E3CnfgIdx, unknown=unknown, prtExHsrLinkTo=prtExHsrLinkTo, prtInLs2Connect=prtInLs2Connect, agnSLastCnfgFlipCause=agnSLastCnfgFlipCause, agnSErrListEntry=agnSErrListEntry, prtExPhPlFrWindowSize=prtExPhPlFrWindowSize, prtT3E3CnfgTable=prtT3E3CnfgTable, ethIf=ethIf, agnSCnfgEntry=agnSCnfgEntry, prtExHsrDataBits=prtExHsrDataBits, prtDacsMux=prtDacsMux, mdlSAlrMask=mdlSAlrMask, agnCmprCnfgIdx=agnCmprCnfgIdx, radWebRanger=radWebRanger, radDXC8R=radDXC8R, prtAcmCnfg=prtAcmCnfg, prtExHs4CnfgEntry=prtExHs4CnfgEntry, prtParamIdx=prtParamIdx, prtExPh1MlInbandMngRate=prtExPh1MlInbandMngRate, radFEC2UDP=radFEC2UDP, sysSAlrCode=sysSAlrCode, systemPort=systemPort, radStarSwitchATM25=radStarSwitchATM25, prtIsdnEndpointIdx=prtIsdnEndpointIdx, alrGenDescription=alrGenDescription, prtExVc2EandMType=prtExVc2EandMType, prtExPhPlDlciRxBc=prtExPhPlDlciRxBc, mdlCTable=mdlCTable, prtExHsrPrtIdx=prtExHsrPrtIdx, prtExLs6VRxGain=prtExLs6VRxGain, agnIndication=agnIndication, prtExPhPlDlciValid=prtExPhPlDlciValid, prtBertInjectSingleErrCmd=prtBertInjectSingleErrCmd, radFTC1=radFTC1, prtExPVc4CnfgEntry=prtExPVc4CnfgEntry, linkSelectorMode=linkSelectorMode, prtAlarmsCmprEntry=prtAlarmsCmprEntry, radSTC2=radSTC2, prtInPh1MlConnect=prtInPh1MlConnect, prtFrRxDcrdCongAllFr=prtFrRxDcrdCongAllFr, prtBertSyncLoss=prtBertSyncLoss, sysCRdnMode=sysCRdnMode, prtExPh1MlTsEntry=prtExPh1MlTsEntry, prtSActiveStatus=prtSActiveStatus, radMX30=radMX30, mdlCmprCnfgIdx=mdlCmprCnfgIdx, prtInPh1MlCnfgIdx=prtInPh1MlCnfgIdx, prtExVcPbxCnfgEntry=prtExVcPbxCnfgEntry, prtCmprVersion=prtCmprVersion, sysSRelayState=sysSRelayState, agnSigProfileCnfgIdx=agnSigProfileCnfgIdx, prtDlciSltIdx=prtDlciSltIdx, prtExHsrClkMode=prtExHsrClkMode, prtIsdnSignalingProtocol=prtIsdnSignalingProtocol, agnDlciHIdx=agnDlciHIdx, prtSAlrInvert=prtSAlrInvert, prtPhMlConnect=prtPhMlConnect, prtExPh1MlFdlType=prtExPh1MlFdlType, prtCrRxTotalCells=prtCrRxTotalCells, prtExHsiRate=prtExHsiRate, prtLogicalCnfgTable=prtLogicalCnfgTable, radETS4fddiSAS=radETS4fddiSAS, prtExTsIdx=prtExTsIdx, mngIPMask=mngIPMask, agnAlrBufCmprObj=agnAlrBufCmprObj, prtFrTxMngFrames=prtFrTxMngFrames, prtExVcPbxLineLength=prtExVcPbxLineLength, prtExVc2TxBitCode=prtExVc2TxBitCode, mdlPbxFraTSGroupAss=mdlPbxFraTSGroupAss, cnfgFlipTrap=cnfgFlipTrap, mapLinkSlotIdx=mapLinkSlotIdx, radTRE1D=radTRE1D, prtSupervisory=prtSupervisory, agnAlarmsCmprVersion=agnAlarmsCmprVersion, prtCrRxDataCells=prtCrRxDataCells, prtExPhPlDlciIdx=prtExPhPlDlciIdx, agnXCmprTypIdx=agnXCmprTypIdx, mapLinkStatus=mapLinkStatus, mdlPsIdx=mdlPsIdx, prtVc2CnfgEntry=prtVc2CnfgEntry, prtSpPrtIdx=prtSpPrtIdx, prtIn1p6VcPbxCnfgEntry=prtIn1p6VcPbxCnfgEntry, prtGen=prtGen, prtExVc2EchoCanceler=prtExVc2EchoCanceler, prtSAlrIdx=prtSAlrIdx, prtMux=prtMux, prtSAlrSeverity=prtSAlrSeverity, prtT1E1TS0SaBits=prtT1E1TS0SaBits, pLinkPrtIdx=pLinkPrtIdx, sysCClkStationFreq=sysCClkStationFreq, prtAcmConnect=prtAcmConnect, radSPS3ScSL=radSPS3ScSL, agnVoiceSwConfHGConnect=agnVoiceSwConfHGConnect, prtPhMlSltIdx=prtPhMlSltIdx, prtExVcPbxSignalOper=prtExVcPbxSignalOper, agnDlciCmprDlciIdx=agnDlciCmprDlciIdx, prtExHsrCts=prtExHsrCts, prtExPhPlTc=prtExPhPlTc, prtT3E3PrtIdx=prtT3E3PrtIdx, prtPerfUAS=prtPerfUAS, prtIsdnDirectoryRowStatus=prtIsdnDirectoryRowStatus, radAsmi450R1152=radAsmi450R1152, mdlPbxFramerCnfgEntry=mdlPbxFramerCnfgEntry, prtInPh1MlFullRptPeriod=prtInPh1MlFullRptPeriod, radMX3000=radMX3000, agnt=agnt, prtVc3Cnfg=prtVc3Cnfg, radMP2200F=radMP2200F, prtExHsfOperMode=prtExHsfOperMode, mdlCCnfgIdx=mdlCCnfgIdx, mdlSAlrClearAllCmd=mdlSAlrClearAllCmd, mdlSInstCardType=mdlSInstCardType, prtT1E1FdlMsgSlt=prtT1E1FdlMsgSlt)
mibBuilder.exportSymbols("DACS-MIB", sysSAlrTable=sysSAlrTable, prtExVcPbxTransSignalTs=prtExVcPbxTransSignalTs, prtT1E1CGA=prtT1E1CGA, prtMl4Service=prtMl4Service, prtExTreCnfgTable=prtExTreCnfgTable, linkSelectorPLinkTable=linkSelectorPLinkTable, agnVoiceSwConfEntry=agnVoiceSwConfEntry, prtExHsrRlbEnable=prtExHsrRlbEnable, mdlSCardType=mdlSCardType, prtExHsrProtocol=prtExHsrProtocol, sysSAlrDataUpdateCmd=sysSAlrDataUpdateCmd, prtInVc3CnfgIdx=prtInVc3CnfgIdx, prtFrTxDcrdCongAllFr=prtFrTxDcrdCongAllFr, radStkHub=radStkHub, mdlCPrgEntry=mdlCPrgEntry, pLinkSltIdx=pLinkSltIdx, prtDlciTxBeViol=prtDlciTxBeViol, prtExVc3Rate=prtExVc3Rate, sysConfig=sysConfig, physicalConnector=physicalConnector, agnXCmprTable=agnXCmprTable, prtPerfSaveAndResetCmd=prtPerfSaveAndResetCmd, chasTotalNoOfPsSlt=chasTotalNoOfPsSlt, mdlSMaskedAlrStatAll=mdlSMaskedAlrStatAll, alrBufTable=alrBufTable, prtExPVc4FaxRate=prtExPVc4FaxRate, prtGenTsTable=prtGenTsTable, prtExTsSltIdx=prtExTsSltIdx, agnCmprObj=agnCmprObj, agnVoiceSwConfHGdbIdx=agnVoiceSwConfHGdbIdx, radSAH16Eext=radSAH16Eext, agnDlciCmprCnfgIdx=agnDlciCmprCnfgIdx, prtSpTable=prtSpTable, systemReset=systemReset, prtInPh1MlDlciRxBc=prtInPh1MlDlciRxBc, mdlSTstStatusAll=mdlSTstStatusAll, prtIsdnPrtIdx=prtIsdnPrtIdx, sysCnfgTable=sysCnfgTable, prtSpPrimaryNum=prtSpPrimaryNum, prtExLs2Dcd=prtExLs2Dcd, prtExHs4TsIConSlot=prtExHs4TsIConSlot, prtAlarmsCmprVersion=prtAlarmsCmprVersion, prtHSPrtIdx=prtHSPrtIdx, sysDbase=sysDbase, prtHSBertSlt=prtHSBertSlt, prtInLs2EnvAssign=prtInLs2EnvAssign, radFomiE3=radFomiE3, sysBufferAlrEntry=sysBufferAlrEntry, agnDlciSpoofing=agnDlciSpoofing, agnCAgendaTable=agnCAgendaTable, prtAlarmsCmprAlarmPort=prtAlarmsCmprAlarmPort, prtExVcPbxIdleCode=prtExVcPbxIdleCode, trapID=trapID, prtSExHsfInterfaceTyp=prtSExHsfInterfaceTyp, prtExPVc4SignalingProtocol=prtExPVc4SignalingProtocol, prtT1E1TxGainMask=prtT1E1TxGainMask, prtGenCnfgLinkToPort=prtGenCnfgLinkToPort, sysSErrType=sysSErrType, radKM2104=radKM2104, prtSpActCallOut=prtSpActCallOut, agnSigProfile=agnSigProfile, prtSpDataBits=prtSpDataBits, radFcdT1M=radFcdT1M, radHtuE1V2=radHtuE1V2, prtSClearAlrCmd=prtSClearAlrCmd, prtExPhPlProtDelayLevel=prtExPhPlProtDelayLevel, prtFrRxDeFrames=prtFrRxDeFrames, agnCnfgDataTable=agnCnfgDataTable, prtT1FdlMsgTable=prtT1FdlMsgTable, tftpRetryTimeOut=tftpRetryTimeOut, prtExVc2MeterRate=prtExVc2MeterRate, agnCFlipNetEventPort=agnCFlipNetEventPort, prtExHs4OosSig=prtExHs4OosSig, prtSAlarmPrtIdx=prtSAlarmPrtIdx, radWan=radWan, prtExPVc4WinkMaxDuration=prtExPVc4WinkMaxDuration, mdlSTestStatus=mdlSTestStatus, radEPR4FL=radEPR4FL, agnSystemDlci=agnSystemDlci, prtExPh1MlTsIConSlot=prtExPh1MlTsIConSlot, prtInPh1MlFlowControl=prtInPh1MlFlowControl, sysSRdnFlipSlot=sysSRdnFlipSlot, prtInMbeLinkTo=prtInMbeLinkTo, prtIsdnDirectoryLocalSubAddr=prtIsdnDirectoryLocalSubAddr, agnCClkCnfgIdx=agnCClkCnfgIdx, agnTsDirection=agnTsDirection, prtInVc3Oos=prtInVc3Oos, mdlSAlrIdx=mdlSAlrIdx, radRTED=radRTED, prtParamTable=prtParamTable, agnVoiceSwitching=agnVoiceSwitching, alrGenDebounce=alrGenDebounce, prtT1E1CnfgEntry=prtT1E1CnfgEntry, agnSAlrState=agnSAlrState, prtCmprEntry=prtCmprEntry, radOptimuxXLT1=radOptimuxXLT1, prtExClRate=prtExClRate, prtExPh1MlLineLen=prtExPh1MlLineLen, prtExVc3Wire=prtExVc3Wire, prtDimIdx=prtDimIdx, prtIsdnEndpointPrtIdx=prtIsdnEndpointPrtIdx, prtBertInjectErrRateCmd=prtBertInjectErrRateCmd, sysStatus=sysStatus, prtExHs4LineLen=prtExHs4LineLen, prtInPh1MlTc=prtInPh1MlTc, chasTotalNoOfClSlt=chasTotalNoOfClSlt, sysSRdnFlipIdx=sysSRdnFlipIdx, prtHdslTable=prtHdslTable, mngID=mngID, prtTestIdx=prtTestIdx, prtGenSlt=prtGenSlt, sysSAlrState=sysSAlrState, prtDlciTxBecn=prtDlciTxBecn, agnSErrIdx=agnSErrIdx, radFEB4DAS=radFEB4DAS, sysSErrListEntry=sysSErrListEntry, prtIsdnEndpointTeiValue=prtIsdnEndpointTeiValue, prtExVcPbxTsEntry=prtExVcPbxTsEntry, mdlCmprVersion=mdlCmprVersion, mdlClLastFlipDate=mdlClLastFlipDate, agnVoiceSwConfRtData=agnVoiceSwConfRtData, agnCNetDelay=agnCNetDelay, prtIsdnFilter=prtIsdnFilter, prtExVc2Encoding=prtExVc2Encoding, prtDlciStatisEntry=prtDlciStatisEntry, cnfgPrtGen=cnfgPrtGen, prtExPVc4TxGain=prtExPVc4TxGain, sysCRdnRecMode=sysCRdnRecMode, agnCFlipNetEventIdx=agnCFlipNetEventIdx, mdlSAlrEntry=mdlSAlrEntry, prtExVcPbxTransparent=prtExVcPbxTransparent, agnVoiceSwConfHGIdx=agnVoiceSwConfHGIdx, agnVoiceSwConfRtDlci=agnVoiceSwConfRtDlci, agnCClkSrcTable=agnCClkSrcTable, sysCClkSrcTable=sysCClkSrcTable, prtSAlrCodeDescription=prtSAlrCodeDescription, trapTable=trapTable, prtExHsiCnfgIdx=prtExHsiCnfgIdx, prtFrTxBcViol=prtFrTxBcViol, radFEC2=radFEC2, pLinkPortNu=pLinkPortNu, prtDlciTxFecn=prtDlciTxFecn, agnCmprEntry=agnCmprEntry, radMP2100=radMP2100, prtExPh1MlSltIdx=prtExPh1MlSltIdx, prtSExHsfStatTable=prtSExHsfStatTable, mdlAlrMask=mdlAlrMask, prtFrPlusCnfgTable=prtFrPlusCnfgTable, agnDlciFunnelEnable=agnDlciFunnelEnable, prtExPVc4DlciTable=prtExPVc4DlciTable, prtExVc2Oos=prtExVc2Oos, agnListDecodingSeverity=agnListDecodingSeverity, agnAlrBufCmprVersion=agnAlrBufCmprVersion, prtDlciPrtIdx=prtDlciPrtIdx, portIdx=portIdx, prtSInterfaceType=prtSInterfaceType, alrGenLevel=alrGenLevel, prtInLs2Group=prtInLs2Group, mdlCEntry=mdlCEntry, sysDclTable=sysDclTable, dacsMux=dacsMux, prtInPh1MlMaxIdleTime=prtInPh1MlMaxIdleTime, prtDest=prtDest, prtGenTestPrtIdx=prtGenTestPrtIdx, agnXCmprIdx6=agnXCmprIdx6, prtAgendaBehaviourOnOff=prtAgendaBehaviourOnOff, mngTrapIpTable=mngTrapIpTable, prtExPh1MlMfClkSrcSlt=prtExPh1MlMfClkSrcSlt, prtT1E1LineMode=prtT1E1LineMode, cmprAgnGen=cmprAgnGen, linkSelectorCnfgIdx=linkSelectorCnfgIdx, prtGenTestDuration=prtGenTestDuration, radHtu2Sa=radHtu2Sa, radSPS3=radSPS3, systemPsIndex1=systemPsIndex1, mdlSInstTable=mdlSInstTable, prtExClUsage=prtExClUsage, agnCmprVersion=agnCmprVersion, prtExPhPlDlciTxBe=prtExPhPlDlciTxBe, prtExHs4TsCnfgIdx=prtExHs4TsCnfgIdx, prtIsdnDirectoryPrtIdx=prtIsdnDirectoryPrtIdx, prtGenCnfgPrtIdx=prtGenCnfgPrtIdx, prtCrStatis=prtCrStatis, sysDclCopyDbIdx=sysDclCopyDbIdx, prtExVcPbxTsSltIdx=prtExVcPbxTsSltIdx, prtGenTsIConTs=prtGenTsIConTs, radFcdE1I=radFcdE1I, ethBridgingMode=ethBridgingMode, prtT1E1RxGain=prtT1E1RxGain, prtSpAlrRelayMode=prtSpAlrRelayMode, radRRFTBDAS=radRRFTBDAS, mdlSSltIdx=mdlSSltIdx, prtExVc2R2Delay=prtExVc2R2Delay, mdlCSlotIdx=mdlCSlotIdx, prtWanGen=prtWanGen, prtExVcPbxTsPrtIdx=prtExVcPbxTsPrtIdx, mdlCConfigIdx=mdlCConfigIdx, fileTransCmd=fileTransCmd, prtExVcPbxLineCode=prtExVcPbxLineCode, tftpStatus=tftpStatus, prtInMbeRate=prtInMbeRate, prtIIdx=prtIIdx, prtPerfBlocksPerSec=prtPerfBlocksPerSec, agnVoiceSwConfRtRowStatus=agnVoiceSwConfRtRowStatus, prtGenExtInt=prtGenExtInt, agnHwVersion=agnHwVersion, prtInTreLinkTo=prtInTreLinkTo, prtCfgParamCnfgIdx=prtCfgParamCnfgIdx, radMBERASa=radMBERASa, fileServerIP=fileServerIP, prtInHsiRate=prtInHsiRate, statPrtMux=statPrtMux, agnCClkSrcMode=agnCClkSrcMode, prtInLs2Member=prtInLs2Member, prtT1Statis=prtT1Statis, prtIsdnDirectoryTable=prtIsdnDirectoryTable, prtCrStatisTable=prtCrStatisTable, agnCnfgUpdTime=agnCnfgUpdTime, prtExHs4CnfgTable=prtExHs4CnfgTable, prtInTreSltIdx=prtInTreSltIdx, prtAgendaBehaviourSltIdx=prtAgendaBehaviourSltIdx, agnCFlipNetEventsTable=agnCFlipNetEventsTable, agnCFlipDbNo=agnCFlipDbNo, prtExPVc4DlciSltIdx=prtExPVc4DlciSltIdx, flipDbChangeTrap=flipDbChangeTrap, prtExPhPlDlciRxBe=prtExPhPlDlciRxBe, prtSpParity=prtSpParity, prtInMbePrtIdx=prtInMbePrtIdx, prtIn1p6VcPbxPabxTs=prtIn1p6VcPbxPabxTs, prtDestIdx=prtDestIdx, radSysFddi=radSysFddi, prtPhMlCnfgIdx=prtPhMlCnfgIdx, prtGenTestDurationTable=prtGenTestDurationTable, cmprTable=cmprTable, cmprMdlGen=cmprMdlGen, agnCFlipLogicalExp=agnCFlipLogicalExp, prtExClSltIdx=prtExClSltIdx, cnfgMdlGen=cnfgMdlGen, agnCSaveFlipDbCmd=agnCSaveFlipDbCmd, agnAlrBufCmprTable=agnAlrBufCmprTable, prtFrStatisSltIdx=prtFrStatisSltIdx, agnCSanityCheckCmd=agnCSanityCheckCmd, prtDlciTxBcViol=prtDlciTxBcViol, agnTsBitIdx=agnTsBitIdx, prtExPhPlDlciEntry=prtExPhPlDlciEntry, mdlCNoOfIntPrt=mdlCNoOfIntPrt, agnSigProfileRxTx=agnSigProfileRxTx, agnCnfgIdx=agnCnfgIdx, prtInMbeCnfgTable=prtInMbeCnfgTable, prtInHsiConcentratedTo=prtInHsiConcentratedTo, agnDlciCnfgIdx=agnDlciCnfgIdx, sysDbaseSanityCheckCmd=sysDbaseSanityCheckCmd, prtExPhPlLXon=prtExPhPlLXon, prtSInstIfIndex=prtSInstIfIndex)
mibBuilder.exportSymbols("DACS-MIB", prtCfgParamInbandLoopDetection=prtCfgParamInbandLoopDetection, prtDimMng=prtDimMng, prtExPhPlConnect=prtExPhPlConnect, physicalConnectorEntry=physicalConnectorEntry, prtSInstTable=prtSInstTable, prtInPh1MlDlciTable=prtInPh1MlDlciTable, radRBHE=radRBHE, pLinkCnfgIdx=pLinkCnfgIdx, agnSMaskedAlrStat=agnSMaskedAlrStat, agnAlrBufCmprAlarmIdx=agnAlrBufCmprAlarmIdx, prtExPhPlModemSltIdx=prtExPhPlModemSltIdx, agnCFlipNetEventsCnfgIdx=agnCFlipNetEventsCnfgIdx, radMP2100B=radMP2100B, agnCFlipActive=agnCFlipActive, prtLogicalRowStatus=prtLogicalRowStatus, prtT3E3Slt=prtT3E3Slt, radDXC30=radDXC30, prtSpNoOfRetries=prtSpNoOfRetries, radSAH16Eint=radSAH16Eint, prtIsdnDirectoryLocalSubAddr2=prtIsdnDirectoryLocalSubAddr2, mapLinkState=mapLinkState, agnSigProfileIdx=agnSigProfileIdx, prtT1E1InbandMng=prtT1E1InbandMng, prtIsdnDirectoryRemoteAddr2=prtIsdnDirectoryRemoteAddr2, prtExPhPlCongLevel=prtExPhPlCongLevel, prtFrTxBeViol=prtFrTxBeViol, prtT1E1FdlMsgPrtIdx=prtT1E1FdlMsgPrtIdx, prtExHsrCnfgEntry=prtExHsrCnfgEntry, mngEntry=mngEntry, prtExHsrOperMode=prtExHsrOperMode, mdlPbxFraSignalMode=mdlPbxFraSignalMode, prtExVcPbxTsCnfgIdx=prtExVcPbxTsCnfgIdx, prtICnfgIdx=prtICnfgIdx, prtDlciRxDcrdCongDeFr=prtDlciRxDcrdCongDeFr, MacAddress=MacAddress, prtHsfPrtIdx=prtHsfPrtIdx, prtDlciRxDcrdCongAllFr=prtDlciRxDcrdCongAllFr, agnDlciTable=agnDlciTable, alrBufIdx=alrBufIdx, prtSupervisoryDcdDelay=prtSupervisoryDcdDelay, prtExPhPlConnectionTyp=prtExPhPlConnectionTyp, prtHdslEntry=prtHdslEntry, agnCAgendaDayCategory=agnCAgendaDayCategory, prtSupervisoryRate=prtSupervisoryRate, agnSigProfileABCD=agnSigProfileABCD, prtAlrMaskPrtIdx=prtAlrMaskPrtIdx, radSEC2UDP=radSEC2UDP, sysCnfgEntry=sysCnfgEntry, mdlAlrEntry=mdlAlrEntry, agnCFlipTable=agnCFlipTable, prtExVc2IfSignaling=prtExVc2IfSignaling, prtExTreCnfgIdx=prtExTreCnfgIdx, radImx4T1=radImx4T1, prtExPVc4PrtIdx=prtExPVc4PrtIdx, prtHs4Cnfg=prtHs4Cnfg, prtExPhPlParity=prtExPhPlParity, systemParameter=systemParameter, prtExPhPlLRate=prtExPhPlLRate, mdlSAlarmStatusAll=mdlSAlarmStatusAll, mdlCPrgCardType=mdlCPrgCardType, mdlAlarmsCmprEntry=mdlAlarmsCmprEntry, agnCnfgAlrStartReportOn=agnCnfgAlrStartReportOn, prtAcmActiveState=prtAcmActiveState, radDXC10A=radDXC10A, radAce2002=radAce2002, prtExPVc4DlciRxBe=prtExPVc4DlciRxBe, agnCDefaultCnfgIdxCmd=agnCDefaultCnfgIdxCmd, agnDlciLSltIdx=agnDlciLSltIdx, prtExPVc4DlciIConSlt=prtExPVc4DlciIConSlt, prtExPhPlModemTimeBtwnCalls=prtExPhPlModemTimeBtwnCalls, prtInTrePrtIdx=prtInTrePrtIdx, radFcdT1A=radFcdT1A, prtSpRate=prtSpRate, radDXC30E=radDXC30E, radAce20E=radAce20E, prtDlciRxBcViol=prtDlciRxBcViol, prtSAlrPrtIdx=prtSAlrPrtIdx, prtInVc3CnfgTable=prtInVc3CnfgTable, prtIsdnCnfgEntry=prtIsdnCnfgEntry, prtExVcPbxPrtIdx=prtExVcPbxPrtIdx, prtExHs4RestoreT=prtExHs4RestoreT, prtDlciCmprDlciIdx=prtDlciCmprDlciIdx, agnTsTable=agnTsTable, prtT1E1LineType=prtT1E1LineType, prtExPhPlCnfgEntry=prtExPhPlCnfgEntry, sysSa=sysSa, agnCAgendaEntry=agnCAgendaEntry, prtIsdnEndpointCnfgIdx=prtIsdnEndpointCnfgIdx, prtHdslMode=prtHdslMode, radPrbiT3=radPrbiT3, agnVoiceSwConfRtPort=agnVoiceSwConfRtPort, radTrimBrg16=radTrimBrg16, prtExPhPlCongResponse=prtExPhPlCongResponse, prtGenTestRunning=prtGenTestRunning, prtFrTxTotalBytes=prtFrTxTotalBytes, radEP4T2FL=radEP4T2FL, prtExPhPlDceClkSrc=prtExPhPlDceClkSrc, prtPhMlCAS=prtPhMlCAS, prtExHs4CnfgIdx=prtExHs4CnfgIdx, prtT3E3=prtT3E3, prtGenCnfgTable=prtGenCnfgTable, prtT1E1CnfgTable=prtT1E1CnfgTable, prtSpCallOutMode=prtSpCallOutMode, prtPhMlMfSyncSlot=prtPhMlMfSyncSlot, prtSExHsfSltIdx=prtSExHsfSltIdx, prtExVc3CnfgIdx=prtExVc3CnfgIdx, mdlClLastFlipTime=mdlClLastFlipTime, prtInLs6RemoteType=prtInLs6RemoteType, agnXCmprIdx4=agnXCmprIdx4, prtHSClkMode=prtHSClkMode, prtExClRoutingProtocol=prtExClRoutingProtocol, sysCMatrixMode=sysCMatrixMode, prtInPh1MlFrMngProt=prtInPh1MlFrMngProt, prtInMbeConnect=prtInMbeConnect, prtIsdnEndpointTeiType=prtIsdnEndpointTeiType, prtPhMlDialProcess=prtPhMlDialProcess, prtExVc2Connect=prtExVc2Connect, prtPerfBBE=prtPerfBBE, radLrs12B=radLrs12B, prtSpRoutProtocol=prtSpRoutProtocol, systemPsEntry=systemPsEntry, prtExVcPbxSltIdx=prtExVcPbxSltIdx, prtInHsiCnfgEntry=prtInHsiCnfgEntry, prtSpAltNum=prtSpAltNum, agnCnfgAlrReportType=agnCnfgAlrReportType, radImx64=radImx64, agnVoiceSwConfRtDbId=agnVoiceSwConfRtDbId, prtSupervisoryStopBits=prtSupervisoryStopBits, sysSTimeCmd=sysSTimeCmd, prtAgendaBehaviourCnfgIdx=prtAgendaBehaviourCnfgIdx, prtT1E1IdleCode=prtT1E1IdleCode, prtExTreLanRate=prtExTreLanRate, prtExPhPlCnfgTable=prtExPhPlCnfgTable, prtDlciStatisTable=prtDlciStatisTable, prtIn7p8VcPbxConnect=prtIn7p8VcPbxConnect, radSysBRG=radSysBRG, prtIn7p8VcPbxSltIdx=prtIn7p8VcPbxSltIdx, agnSCnfgTable=agnSCnfgTable, mdlAlrTable=mdlAlrTable, prtPhMlRate=prtPhMlRate, sysDclRedundancy=sysDclRedundancy, mdlAlrMaskEntry=mdlAlrMaskEntry, sysSTestStatus=sysSTestStatus, prtGenParamStatus=prtGenParamStatus, prtExHsrConnect=prtExHsrConnect, prtSInstPrtIdx=prtSInstPrtIdx, prtPhMlSyncRestore=prtPhMlSyncRestore, prtGenCnfgSltIdx=prtGenCnfgSltIdx, prtBertErrorBits=prtBertErrorBits, ethMode=ethMode, sysSRdnFlipDate=sysSRdnFlipDate, mdlSAlrCode=mdlSAlrCode, radGen=radGen, prtT1E1Slt=prtT1E1Slt, prtExClCnfgTable=prtExClCnfgTable, prtT3E3InbandMng=prtT3E3InbandMng, prtExPhPlErrorsThreshold=prtExPhPlErrorsThreshold, agnDlciCmprObj=agnDlciCmprObj, agnTsCmprVerIdx=agnTsCmprVerIdx, prtExVc3CnfgEntry=prtExVc3CnfgEntry, dacsMuxAlarmsTrap=dacsMuxAlarmsTrap, radSysAtm=radSysAtm, cnfgAgnGen=cnfgAgnGen, radFPS8c=radFPS8c, prtIsdnEndpointTable=prtIsdnEndpointTable, prtExPhPlHRate=prtExPhPlHRate, prtExPhPlModemMaxIdleTime=prtExPhPlModemMaxIdleTime, prtBertPrtIdx=prtBertPrtIdx, prtExHsrStopBits=prtExHsrStopBits, prtExHsrCnfgTable=prtExHsrCnfgTable, prtGenType=prtGenType, agnCFlipNetEventType=agnCFlipNetEventType, prtT1E1StatTable=prtT1E1StatTable, sysDclCopyDbCmd=sysDclCopyDbCmd, prtInVc3Rate=prtInVc3Rate, prtPhMlCnfgEntry=prtPhMlCnfgEntry, prtIsdnEndpointSltIdx=prtIsdnEndpointSltIdx, systemPsTable=systemPsTable, prtIn7p8VcPbxRate=prtIn7p8VcPbxRate, prtIsdnEndpointBearerCh=prtIsdnEndpointBearerCh, mdlClIdx=mdlClIdx, prtDestDimIdx=prtDestDimIdx, prtAlarmsCmprAlarmIdx=prtAlarmsCmprAlarmIdx, prtHSParamEntry=prtHSParamEntry, linkSelectorSltIdx=linkSelectorSltIdx, sysCClkSrcPrt=sysCClkSrcPrt, prtLogicalConnect=prtLogicalConnect, prtIsdnSwitchMode=prtIsdnSwitchMode, radMP2200B=radMP2200B, prtHSRate=prtHSRate, prtT1E1LineCode=prtT1E1LineCode, prtT1E1SPrtIdx=prtT1E1SPrtIdx, prtExPVc4Tc=prtExPVc4Tc, prtIn7p8VcPbxCnfgTable=prtIn7p8VcPbxCnfgTable, sysSEditCnfg=sysSEditCnfg, agnSCmprErrVersion=agnSCmprErrVersion, prtExTsPrtIdx=prtExTsPrtIdx, agnListDecodingAcmRelayPrt=agnListDecodingAcmRelayPrt, linkSelectorMinBUSession=linkSelectorMinBUSession, prtExPh1MlClkMode=prtExPh1MlClkMode, prtSAlrTable=prtSAlrTable, prtSInstEntry=prtSInstEntry, agnSAlrStatusAll=agnSAlrStatusAll, prtSupervisoryDataBits=prtSupervisoryDataBits, sysSaReadSwch=sysSaReadSwch, radHcdE1=radHcdE1, prtDlciCmprSltIdx=prtDlciCmprSltIdx, prtMonitoredTSs=prtMonitoredTSs, prtExPVc4ExtensionType=prtExPVc4ExtensionType, prtT1E1Fdl=prtT1E1Fdl, prtInLs6TandemMode=prtInLs6TandemMode, prtExPh1MlConnect=prtExPh1MlConnect, prtExPhPlModemStatus=prtExPhPlModemStatus, prtExHsfRate=prtExHsfRate, radMBE1=radMBE1, trapVal=trapVal, prtExLs2CnfgEntry=prtExLs2CnfgEntry, prtSupervisoryRoutProtocol=prtSupervisoryRoutProtocol, prtPerfIdx=prtPerfIdx, prtTestEntry=prtTestEntry, prtAlrMaskEntry=prtAlrMaskEntry, agnVoiceSwConfRtAction=agnVoiceSwConfRtAction, mdlSAlrInvert=mdlSAlrInvert, prtInHsiConnect=prtInHsiConnect, prtExClDataBits=prtExClDataBits, agnAlarmsCmprTable=agnAlarmsCmprTable, mapLinkPrtIdx=mapLinkPrtIdx, radSysWan=radSysWan, agnCFlipNetEventStartTime=agnCFlipNetEventStartTime, agnVoiceSwConfRtIdx=agnVoiceSwConfRtIdx, prtIsdnCnfgIdx=prtIsdnCnfgIdx, agnCnfgDesc=agnCnfgDesc, alrGenTable=alrGenTable, prtDlciCmprCnfgIdx=prtDlciCmprCnfgIdx, prtExPVc4DlciCnfgIdx=prtExPVc4DlciCnfgIdx, prtInLs2CnfgTable=prtInLs2CnfgTable, prtFrPlusPrtIdx=prtFrPlusPrtIdx, prtInPh1MlDlciValid=prtInPh1MlDlciValid, radFcdE1=radFcdE1, alrBuffGen=alrBuffGen, prtTestCmdAndStatus=prtTestCmdAndStatus, prtExVc3Connect=prtExVc3Connect, radImx6L=radImx6L, agnDlciCmprTable=agnDlciCmprTable, cnfgPrtMux=cnfgPrtMux, mdlWanGen=mdlWanGen, prtExVc2RxBitOutput=prtExVc2RxBitOutput, prtExPh1MlInbandMngRoutProt=prtExPh1MlInbandMngRoutProt, prtExTreLan=prtExTreLan, prtSpDcdDelay=prtSpDcdDelay, agnDlciCmprEntry=agnDlciCmprEntry, prtIn7p8VcPbxSignalMode=prtIn7p8VcPbxSignalMode, radTinyRouter=radTinyRouter, mdlMux=mdlMux)
mibBuilder.exportSymbols("DACS-MIB", prtFrRxTotalBytes=prtFrRxTotalBytes, prtExVcPbxRestoreTime=prtExVcPbxRestoreTime, mdlSAlrMaskAll=mdlSAlrMaskAll, prtHdslIdx=prtHdslIdx, prtIsdnDirectoryRemoteSubAddr=prtIsdnDirectoryRemoteSubAddr, radVOIP=radVOIP, prtSMaskedAlrStat=prtSMaskedAlrStat, agnSMaskedAlrStatAll=agnSMaskedAlrStatAll, agnCSaveCnfgIdxCmd=agnCSaveCnfgIdxCmd, agnSAlrInvert=agnSAlrInvert, agnCFlipNetEventDayType=agnCFlipNetEventDayType, prtExLs6VPrtIdx=prtExLs6VPrtIdx, prtCfgParamOperatedMl=prtCfgParamOperatedMl, prtMbeCnfg=prtMbeCnfg, agnDlciHSltIdx=agnDlciHSltIdx, prtIsdnDirectorySltIdx=prtIsdnDirectorySltIdx, radFTC2=radFTC2, prtCnfgAgendaTable=prtCnfgAgendaTable, mdlConnectTrap=mdlConnectTrap, radRRMLBTF=radRRMLBTF, sysCClkSrcMode=sysCClkSrcMode, prtDlciTxDeFrames=prtDlciTxDeFrames, prtPh1MlCnfg=prtPh1MlCnfg, prtSTstDuration=prtSTstDuration, prtExHsfClkMode=prtExHsfClkMode, prtSInstSltIdx=prtSInstSltIdx, prtMl4SltIdx=prtMl4SltIdx, prtInTreCnfgIdx=prtInTreCnfgIdx, mdlAlarmsCmprAlarmIdx=mdlAlarmsCmprAlarmIdx, sysSMaxNoOfCnfg=sysSMaxNoOfCnfg, agnSCmprErrIdx=agnSCmprErrIdx, prtExLs6Rate=prtExLs6Rate, radSPS2=radSPS2, prtExPh1MlIdleCode=prtExPh1MlIdleCode, prtAlrMask=prtAlrMask, radMBE1D=radMBE1D, sysDbaseUploadCnfgIdxCmd=sysDbaseUploadCnfgIdxCmd, prtPerfEntry=prtPerfEntry, prtInMbeCnfgIdx=prtInMbeCnfgIdx, sysSActiveCnfg=sysSActiveCnfg, sysSAlrClearAllCmd=sysSAlrClearAllCmd, prtExLs2PrtIdx=prtExLs2PrtIdx, sysCClkCnfgIdx=sysCClkCnfgIdx, sysBufferAlrSlot=sysBufferAlrSlot, alarmState=alarmState, radTRERAS=radTRERAS, agnCnfgAlrFilter=agnCnfgAlrFilter, agnSystemTs=agnSystemTs, agnCnfgAlrMask=agnCnfgAlrMask, mdlCNoOfExternPrt=mdlCNoOfExternPrt, agnVoiceSwConfHGEntry=agnVoiceSwConfHGEntry, agnVoiceSwConfIdx=agnVoiceSwConfIdx, prtExPhPlDataBits=prtExPhPlDataBits, radFcdE1A=radFcdE1A, agnSAlrCodeDescription=agnSAlrCodeDescription, mdlSSwVer=mdlSSwVer, sysDclEntry=sysDclEntry, prtMl4SigProfile=prtMl4SigProfile, sysCClkSrcIdx=sysCClkSrcIdx, sysDclCopyDbEntry=sysDclCopyDbEntry, radETS4fddiDAS=radETS4fddiDAS, prtExLs2SltIdx=prtExLs2SltIdx, muxHub=muxHub, prtExVc3ReceiveGain=prtExVc3ReceiveGain, prtT1E1FdlMode=prtT1E1FdlMode, mdlSHwVer=mdlSHwVer, radAPS8=radAPS8, prtExPhPlStopBits=prtExPhPlStopBits, mdlAlarmsCmprAlarmSlot=mdlAlarmsCmprAlarmSlot, mdlSClearAllAlrCmd=mdlSClearAllAlrCmd, prtExPVc4Connect=prtExPVc4Connect, alrBufDescription=alrBufDescription, prtExPhPlModemActivate=prtExPhPlModemActivate, prtSpCnfgIdx=prtSpCnfgIdx, prtExHsfFifoSize=prtExHsfFifoSize, radHtuE1Sa=radHtuE1Sa, agnVoiceSwConfRtTable=agnVoiceSwConfRtTable, prtFrStatisEntry=prtFrStatisEntry, prtInTreCnfgEntry=prtInTreCnfgEntry, radSPS6=radSPS6, physicalConnectorTable=physicalConnectorTable, prtExVcPbxTsTable=prtExVcPbxTsTable, prtInPh1MlAssociatedExCh=prtInPh1MlAssociatedExCh, systemDefaultGateway=systemDefaultGateway, sysDbaseDownloadCnfgIdxCmd=sysDbaseDownloadCnfgIdxCmd, radEP8T=radEP8T, prtSBertClrCmd=prtSBertClrCmd, prtAlr=prtAlr, prtInLs6PrtIdx=prtInLs6PrtIdx, sysSAlrStatusAll=sysSAlrStatusAll, prtVcPbxCnfg=prtVcPbxCnfg, mdlSAlrCodeDescription=mdlSAlrCodeDescription, prtExPhPlDlciSltIdx=prtExPhPlDlciSltIdx, prtExHsiCnfgEntry=prtExHsiCnfgEntry, agnLinkMapTable=agnLinkMapTable, sysAlrStatusTrap=sysAlrStatusTrap, prtExHs4Connect=prtExHs4Connect, sysCRdnSecSlot=sysCRdnSecSlot, prtExHsrParity=prtExHsrParity, radHtuE1SaV2=radHtuE1SaV2, agnCFlipCnfgIdx=agnCFlipCnfgIdx, sysSRdnFlipTableClearCmd=sysSRdnFlipTableClearCmd, prtT1E1DedicatedTs=prtT1E1DedicatedTs, agnCFlipNetEventOSD=agnCFlipNetEventOSD, prtT1E1CnfgIdx=prtT1E1CnfgIdx, prtInPh1MlDlciPriority=prtInPh1MlDlciPriority, prtFrTxFecn=prtFrTxFecn, radMX3004=radMX3004, radSysEth=radSysEth, radSAHEMU=radSAHEMU, agnCFlipEntry=agnCFlipEntry, agnFlipDb=agnFlipDb, prtHSBertTestResult=prtHSBertTestResult, prtDlciCmprVersion=prtDlciCmprVersion, radFcdT1=radFcdT1, prtFrStatisTable=prtFrStatisTable, agnSAlrMask=agnSAlrMask, agnSDateFormat=agnSDateFormat, fileName=fileName, prtHSCTS=prtHSCTS, prtDlciIdx=prtDlciIdx, prtMl4Cnfg=prtMl4Cnfg, sysBufferAlr=sysBufferAlr, prtInPh1MlClockEncoding=prtInPh1MlClockEncoding, agnCClkSrcPrt=agnCClkSrcPrt, cmprEntry=cmprEntry, prtExVc2OperMode=prtExVc2OperMode, prtSAlrEntry=prtSAlrEntry, prtSParamStatus=prtSParamStatus, radOpt4E1C=radOpt4E1C, prtGenIfIndex=prtGenIfIndex, prtBertCounter=prtBertCounter, pLinkIdx=pLinkIdx, pLinkPrioNu=pLinkPrioNu, prtLogicalSltIdx=prtLogicalSltIdx, agnSpecific=agnSpecific, prtExPh1MlIfType=prtExPh1MlIfType, prtExPh1MlCnfgTable=prtExPh1MlCnfgTable, prtExLs6ClkMode=prtExLs6ClkMode, prtExPVc4VarDelay=prtExPVc4VarDelay, prtCmprSltIdx=prtCmprSltIdx, alarmSeverity=alarmSeverity, prtIsdnCnfg=prtIsdnCnfg, prtExHsiCnfgTable=prtExHsiCnfgTable, prtExPh1MlLineCode=prtExPh1MlLineCode, linkSelectorCnfgEntry=linkSelectorCnfgEntry, prtAlarmsCmprAlarmSlot=prtAlarmsCmprAlarmSlot, prtSExHsfPrtIdx=prtSExHsfPrtIdx, prtT1E1Multiplier=prtT1E1Multiplier, prtInPh1MlDlciCnfgIdx=prtInPh1MlDlciCnfgIdx, radHtuT1=radHtuT1, prtIn1p6VcPbxEchoCanceler=prtIn1p6VcPbxEchoCanceler, radStarSwitchATM25L=radStarSwitchATM25L, radSEC2=radSEC2, prtBertInjectRate=prtBertInjectRate, agnXCmprEntry=agnXCmprEntry, agnLinkMapEntry=agnLinkMapEntry, prtPhMlSatBuffer=prtPhMlSatBuffer, agnTsCmprPduIdx=agnTsCmprPduIdx, prtDlciCmprTable=prtDlciCmprTable, prtCrStatisEntry=prtCrStatisEntry, radSAHEMX=radSAHEMX, prtExPhPlFullRptPeriod=prtExPhPlFullRptPeriod, radConverters=radConverters, sysSSanityCheckStatus=sysSSanityCheckStatus, sysDbaseFlipTime=sysDbaseFlipTime, prtLs2Cnfg=prtLs2Cnfg, prtExHsfClkPolarity=prtExHsfClkPolarity, systemDacsMux=systemDacsMux, mapLinkId=mapLinkId, prtIn7p8VcPbxLinkTo=prtIn7p8VcPbxLinkTo, radEPR4TAUI=radEPR4TAUI, prtSExHsfStatEntry=prtSExHsfStatEntry, agnWanGen=agnWanGen, radTRERASa=radTRERASa, prtExPhPlDlciStatus=prtExPhPlDlciStatus, sysCRdnCnfgIdx=sysCRdnCnfgIdx, sysDclCnfgIdx=sysDclCnfgIdx, prtExTsSplitEntry=prtExTsSplitEntry, agnListDecodingEntry=agnListDecodingEntry, prtIsdnEndpointRowStatus=prtIsdnEndpointRowStatus, prtSAlrSltIdx=prtSAlrSltIdx, sysSaPorts=sysSaPorts, agnSTstStatAll=agnSTstStatAll, agnCnfgAlrFilterReset=agnCnfgAlrFilterReset, sysSaSwRevision=sysSaSwRevision, prtExTsIConSlot=prtExTsIConSlot, mdlSAlrSeverity=mdlSAlrSeverity, prtInLs6LinkTo=prtInLs6LinkTo, prtInLs6Rate=prtInLs6Rate, prtExPh1MlRestoreTime=prtExPh1MlRestoreTime, prtInPh1MlBearerCh=prtInPh1MlBearerCh, prtHS=prtHS, statPrtGen=statPrtGen, prtT1E1BpvLastMin=prtT1E1BpvLastMin, radAsmi450R768=radAsmi450R768, prtMonCnfgIdx=prtMonCnfgIdx, chassTotalNoOfSlt=chassTotalNoOfSlt, prtExLs6Cts=prtExLs6Cts, prtBertEntry=prtBertEntry, agnDlciRoutingProtocol=agnDlciRoutingProtocol, mdlPbxFramerCnfg=mdlPbxFramerCnfg, prtInPh1MlCnfgTable=prtInPh1MlCnfgTable, prtExPVc4DlciPrtIdx=prtExPVc4DlciPrtIdx, prtExPh1MlPrtIdx=prtExPh1MlPrtIdx, prtExPVc4DlciPriority=prtExPVc4DlciPriority, prtIsdnDirectoryEntry=prtIsdnDirectoryEntry, prtDlciTxDcrdCongDeFr=prtDlciTxDcrdCongDeFr, prtExHsrRate=prtExHsrRate, prtDimDestTable=prtDimDestTable, prtInLs6SltIdx=prtInLs6SltIdx, agnConfigMsg=agnConfigMsg, prtExVcPbxGroup=prtExVcPbxGroup, prtT1E1BpvMax=prtT1E1BpvMax, sysBufferAlrPort=sysBufferAlrPort, agnLed=agnLed, radFEC1=radFEC1, agnTsConIdx=agnTsConIdx, prtInVc3LinkTo=prtInVc3LinkTo, prtExPVc4DlciTxBc=prtExPVc4DlciTxBc, prtInLs6CnfgTable=prtInLs6CnfgTable, prtExHsrCnfgIdx=prtExHsrCnfgIdx, agnCnfgUpdDate=agnCnfgUpdDate, prtExTsSplitTable=prtExTsSplitTable, mdlSTable=mdlSTable, prtExPhPlDlciIConSlt=prtExPhPlDlciIConSlt, prtLogicalCnfg=prtLogicalCnfg, agnDlciRxBe=agnDlciRxBe, prtT1E1DataOos=prtT1E1DataOos, prtExLs6CnfgIdx=prtExLs6CnfgIdx, mdlAlarmsCmprVersion=mdlAlarmsCmprVersion, prtExPhPlClockEncoding=prtExPhPlClockEncoding, agnCnfgAlrFilterWindow=agnCnfgAlrFilterWindow, prtMonitoringEnable=prtMonitoringEnable, mdlCmprTable=mdlCmprTable, prtInLs2SltIdx=prtInLs2SltIdx, prtInVc3SltIdx=prtInVc3SltIdx, mdlAlr=mdlAlr, prtExHs4IdleCode=prtExHs4IdleCode, sysCRdnEntry=sysCRdnEntry, trapTimeSinceOccurrence=trapTimeSinceOccurrence, prtExPVc4CongLevel=prtExPVc4CongLevel, radRTEM=radRTEM, genDacsMux=genDacsMux, prtT1FdlMsgPrtIdx=prtT1FdlMsgPrtIdx, mdlAlrState=mdlAlrState, sysBufferAlrCode=sysBufferAlrCode, prtDimCnfgTable=prtDimCnfgTable, sysSAlrClearCmd=sysSAlrClearCmd, mdlCmprObj=mdlCmprObj, agnSErrDescription=agnSErrDescription, prtFrRxDcrdCongDeFr=prtFrRxDcrdCongDeFr, radMP2104=radMP2104, radImx4E1=radImx4E1)
mibBuilder.exportSymbols("DACS-MIB", prtInPh1MlSegment=prtInPh1MlSegment, prtIRate=prtIRate, agnCnfgAlrFilterSet=agnCnfgAlrFilterSet, sysCRdnPrimeSlot=sysCRdnPrimeSlot, prtCmprCnfgIdx=prtCmprCnfgIdx, agnSEditCnfg=agnSEditCnfg, radOptimuxXLE1=radOptimuxXLE1, mapLinkEntry=mapLinkEntry, prtExLs6DataBits=prtExLs6DataBits, prtControlCnfg=prtControlCnfg, radStarSwitchATM155=radStarSwitchATM155, sysStatusChangedTrap=sysStatusChangedTrap, prtT3E3CnfgEntry=prtT3E3CnfgEntry, agnListDecodingAcmRelaySlt=agnListDecodingAcmRelaySlt, prtExPhPlModemCallDelay=prtExPhPlModemCallDelay, radSAH16Text=radSAH16Text, prtDestConnect=prtDestConnect, chasWanGen=chasWanGen, prtT1E1OosCount=prtT1E1OosCount, prtBertESs=prtBertESs, agnSClearAllAlrCmd=agnSClearAllAlrCmd, prtFrRxTotalFrames=prtFrRxTotalFrames, agnDlciRxBc=agnDlciRxBc, radSEC1UDP=radSEC1UDP, prtExPh1MlTsIConTs=prtExPh1MlTsIConTs, prtSpUsage=prtSpUsage, mdlPbxFraCnfgIdx=mdlPbxFraCnfgIdx, radSysTR=radSysTR, prtInPh1MlCcittCrc=prtInPh1MlCcittCrc, prtExPVc4DlciValid=prtExPVc4DlciValid, radMP2104H=radMP2104H, prtExPhPlDcdRtsControlPath=prtExPhPlDcdRtsControlPath, cnfgMdlMux=cnfgMdlMux, agnXCmprIdx7=agnXCmprIdx7, prtCfgParamTable=prtCfgParamTable, agnSActiveCnfg=agnSActiveCnfg, radTRE1=radTRE1, agnSMaxNoOfCnfg=agnSMaxNoOfCnfg, prtExHsiPrtIdx=prtExHsiPrtIdx, prtVc2CnfgIdx=prtVc2CnfgIdx, radMBERAS=radMBERAS, prtDimTxMode=prtDimTxMode, prtBertRunTime=prtBertRunTime, agnAlrBufCmprEntry=agnAlrBufCmprEntry, agnXCmprVersion=agnXCmprVersion, prtCfgParamIdx=prtCfgParamIdx, prtT1E1Sync=prtT1E1Sync, agnDlciLPrtIdx=agnDlciLPrtIdx, prtInPh1MlConnectionTyp=prtInPh1MlConnectionTyp, radSTC1=radSTC1, prtT1E1OosSignal=prtT1E1OosSignal, radRRTRE8D=radRRTRE8D, prtExPh1MlRedundPort=prtExPh1MlRedundPort, prtInVc3PrtIdx=prtInVc3PrtIdx, agnTsEntry=agnTsEntry, prtCrTimeElapsed=prtCrTimeElapsed, mdlClSwchStatus=mdlClSwchStatus, agnVoiceSwConfZoneId=agnVoiceSwConfZoneId, prtExPVc4SeizeAck=prtExPVc4SeizeAck, agnSDateCmd=agnSDateCmd, prtSP=prtSP, prtInPh1MlFrWindowSize=prtInPh1MlFrWindowSize, prtExClPrtIdx=prtExClPrtIdx, radLrs12F=radLrs12F, prtPhMlBus=prtPhMlBus, prtExHsiSltIdx=prtExHsiSltIdx, sysBufferAlrDate=sysBufferAlrDate, prtLogicalFunction=prtLogicalFunction, prtExLs6CtrlSignal=prtExLs6CtrlSignal, agnAlarmsCmprAlarmIdx=agnAlarmsCmprAlarmIdx, prtExVc2Wire=prtExVc2Wire, mdlCl=mdlCl, prtInPh1MlFrameSeparator=prtInPh1MlFrameSeparator, prtT1FdlMsgEntry=prtT1FdlMsgEntry, radHtuE1=radHtuE1, mdlAlarmInvert=mdlAlarmInvert, alrGenSeverity=alrGenSeverity, prtExPVc4DlciIConPrt=prtExPVc4DlciIConPrt, prtInPh1MlDlciStatus=prtInPh1MlDlciStatus, agnDlciTxBe=agnDlciTxBe, prtSAlarmMask=prtSAlarmMask, prtExPVc4HuntGroupIdx=prtExPVc4HuntGroupIdx, statAgnGen=statAgnGen, prtSpWaitForConnect=prtSpWaitForConnect, systemTime=systemTime, prtExPhPlProtocol=prtExPhPlProtocol, prtExVc2LinkTo=prtExVc2LinkTo, cmprObj=cmprObj, tftpError=tftpError, prtCrStatisInvIdx=prtCrStatisInvIdx, prtExPhPlDlciPriority=prtExPhPlDlciPriority, mdlPsEntry=mdlPsEntry, prtSAlarmInvert=prtSAlarmInvert, agnCLoadCnfgIdxCmd=agnCLoadCnfgIdxCmd, prtTest=prtTest, prtExTreCnfgEntry=prtExTreCnfgEntry, statisPrtGen=statisPrtGen, sysDbaseFlipTable=sysDbaseFlipTable, sanityCheckTrap=sanityCheckTrap, prtExPhPlMinSeparators=prtExPhPlMinSeparators, radSPS3Sc2S=radSPS3Sc2S, radImx2T1E1=radImx2T1E1, radFPS12=radFPS12, ethIfEntry=ethIfEntry, prtInLs6Connect=prtInLs6Connect, prtExPh1MlInbandMng=prtExPh1MlInbandMng, mdlPbxFraSignalMask=mdlPbxFraSignalMask, prtInPh1MlDlciEntry=prtInPh1MlDlciEntry, prtIsdnEndpointEntry=prtIsdnEndpointEntry, radSPS9=radSPS9, agnVoiceSwConfRtDigits=agnVoiceSwConfRtDigits, prtExVc3SltIdx=prtExVc3SltIdx, mdlSAlrState=mdlSAlrState, prtT1E1InbandMngRoutProt=prtT1E1InbandMngRoutProt, radRingMonitor=radRingMonitor, prtExPhPlModemCnfgIdx=prtExPhPlModemCnfgIdx, prtExClParity=prtExClParity, sysBufferAlrClearCmd=sysBufferAlrClearCmd, agnCFlipDbSanityCheckCmd=agnCFlipDbSanityCheckCmd, prtGenTestStatus=prtGenTestStatus, prtExPVc4PrtType=prtExPVc4PrtType, prtGenAlrClearCmd=prtGenAlrClearCmd, sysDclFlipDelay=sysDclFlipDelay, prtT1E1=prtT1E1, radSAH16Tint=radSAH16Tint, radFTBDAS=radFTBDAS, prtFrStatis=prtFrStatis, prtT1E1InbandMngRate=prtT1E1InbandMngRate, prtICnfgEntry=prtICnfgEntry, prtFrRxBcViol=prtFrRxBcViol, agnCFlipNetEventNo=agnCFlipNetEventNo, prtExVc2SeizeAck=prtExVc2SeizeAck, agnTsCmprPortIdx=agnTsCmprPortIdx, prtAlarmsCmprObj=prtAlarmsCmprObj, agnCnfgDataEntry=agnCnfgDataEntry, radHtuT1Sa=radHtuT1Sa, agnSAlrTable=agnSAlrTable, prtExHs4LineType=prtExHs4LineType, prtSAlarmEntry=prtSAlarmEntry, radImx2=radImx2, prtIsdnDirectoryLocalAddr2=prtIsdnDirectoryLocalAddr2, fileTransferToSubSystems=fileTransferToSubSystems, prtExVcPbxTsIConSlot=prtExVcPbxTsIConSlot, sysSRdnFlipTime=sysSRdnFlipTime, prtSAlrState=prtSAlrState, prtMonitoringTSs=prtMonitoringTSs, prtTestTable=prtTestTable, prtExHs4TsIdx=prtExHs4TsIdx, prtInPh1MlCnfgEntry=prtInPh1MlCnfgEntry, mdlPbxFramerCnfgTable=mdlPbxFramerCnfgTable, prtT1E1SSlt=prtT1E1SSlt, sysSRdnFlipCause=sysSRdnFlipCause, prtAcmAlrString=prtAcmAlrString, prtDestCnfgIdx=prtDestCnfgIdx, mdlPsTable=mdlPsTable, prtExPVc4RxGain=prtExPVc4RxGain, radAce20T=radAce20T, agnCnfgAlarm=agnCnfgAlarm, radEP4TFL=radEP4TFL, prtMonTable=prtMonTable, wanGen=wanGen, sysHub=sysHub, prtExPVc4CnfgIdx=prtExPVc4CnfgIdx, prtInLs2LinkTo=prtInLs2LinkTo, radHcdE1Sa=radHcdE1Sa, prtPerfElapsedTime=prtPerfElapsedTime, agnCFlipNetEventsEntry=agnCFlipNetEventsEntry, prtDimPolarity=prtDimPolarity, mdlPbxFraFramerSlot=mdlPbxFraFramerSlot, prtGenPrtIdx=prtGenPrtIdx, prtT3E3LineLength=prtT3E3LineLength, prtCrStatisPrtIdx=prtCrStatisPrtIdx, mdlSAlrStatus=mdlSAlrStatus, prtExMbeCnfgIdx=prtExMbeCnfgIdx, prtExLs6VTxGain=prtExLs6VTxGain, prtExHs4MfClkSrcSlt=prtExHs4MfClkSrcSlt, prtIn7p8VcPbxCnfgIdx=prtIn7p8VcPbxCnfgIdx, prtExVc2CasStd=prtExVc2CasStd, prtSAlarmCode=prtSAlarmCode, prtDlciRxDeFrames=prtDlciRxDeFrames, linkSelectorPrtIdx=linkSelectorPrtIdx, agnCnfgAlrInvert=agnCnfgAlrInvert, prtInPh1MlDlciTxBe=prtInPh1MlDlciTxBe, fileNameWithinProduct=fileNameWithinProduct, mdlPs=mdlPs, prtBertClearCounters=prtBertClearCounters, prtInLs2PrtIdx=prtInLs2PrtIdx, prtGenAlrStatus=prtGenAlrStatus, agnTrapMask=agnTrapMask, prtExPh1MlTsSltIdx=prtExPh1MlTsSltIdx, sysCRdnPrimePort=sysCRdnPrimePort, prtSpCTS=prtSpCTS, prtCmprTypIdx=prtCmprTypIdx, prtGenCnfgEntry=prtGenCnfgEntry, agnCnfgAlrReportEntry=agnCnfgAlrReportEntry, prtExPhPlModemEntry=prtExPhPlModemEntry, prtExHsrRateAdapt=prtExHsrRateAdapt, agnVoiceSwConfRtSlot=agnVoiceSwConfRtSlot, prtExVc3EchoCanceler=prtExVc3EchoCanceler, agnVoiceSwConfTable=agnVoiceSwConfTable, radFTC1UDP=radFTC1UDP, prtExLs6VRate=prtExLs6VRate, prtExHs4MfClkSrcPrt=prtExHs4MfClkSrcPrt, mdlCNoOfExtPrt=mdlCNoOfExtPrt, sysCRdnRowStatus=sysCRdnRowStatus, agnSClearAlrCmd=agnSClearAlrCmd, sysCIsdnFormat=sysCIsdnFormat, mdlAlarmsCmprObj=mdlAlarmsCmprObj, linkSelectorMaxIdleTime=linkSelectorMaxIdleTime, prtExMbeLan=prtExMbeLan, prtExPh1MlTsTable=prtExPh1MlTsTable, prtHsrCnfg=prtHsrCnfg, prtExPh1MlTsIConPrt=prtExPh1MlTsIConPrt, prtExLs2Cts=prtExLs2Cts, mdlPbxFraEnhEcho=mdlPbxFraEnhEcho, prtExPh1MlCnfgEntry=prtExPh1MlCnfgEntry, prtInTreRate=prtInTreRate, agnVoiceSwConfHGExt=agnVoiceSwConfHGExt, prtExTreSltIdx=prtExTreSltIdx, prtExVcPbxCnfgTable=prtExVcPbxCnfgTable, cmprSltIdx=cmprSltIdx, agnSErrListTable=agnSErrListTable, prtExVcPbxTsIdx=prtExVcPbxTsIdx, prtLogicalCnfgEntry=prtLogicalCnfgEntry, radMBE8=radMBE8, prtT1E1RAI=prtT1E1RAI, radTRE8=radTRE8)
