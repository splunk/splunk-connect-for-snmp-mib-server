#
# PySNMP MIB module File-Transfer-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/File-Transfer-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 19:03:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, NotificationType, Unsigned32, enterprises, Gauge32, TimeTicks, ModuleIdentity, Counter64, IpAddress, MibIdentifier, Counter32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "Unsigned32", "enterprises", "Gauge32", "TimeTicks", "ModuleIdentity", "Counter64", "IpAddress", "MibIdentifier", "Counter32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Bits", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sni = MibIdentifier((1, 3, 6, 1, 4, 1, 231))
sniProductMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2))
sniFT = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18))
sniFTStartandStop = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 1))
sniFTSysParam = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 2))
sniFTEncryptKey = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 3))
sniFTStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 4))
sniFTDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 5))
sniFTTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 6))
sniFTPollInterval = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 7))
sniFTPartners = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 8))
sniFTTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 9))
sniFTTrapSwitches = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 18, 10))
ftStartandStop = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("on", 3), ("off", 4), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftStartandStop.setStatus('mandatory')
ftStartandStopFTAM = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("start", 1), ("stop", 2), ("on", 3), ("off", 4), ("not-yet", 5), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftStartandStopFTAM.setStatus('mandatory')
ftSysparVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftSysparVersion.setStatus('mandatory')
ftSysparTransportUnitSize = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparTransportUnitSize.setStatus('mandatory')
ftSysparTaskLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparTaskLimit.setStatus('mandatory')
ftSysparConnectionLimit = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparConnectionLimit.setStatus('mandatory')
ftSysparRequestWaitLevel = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparRequestWaitLevel.setStatus('mandatory')
ftSysparPartnerCheck = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("std", 1), ("transport-address", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparPartnerCheck.setStatus('mandatory')
ftSysparMaxOSP = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparMaxOSP.setStatus('mandatory')
ftSysparMaxISP = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparMaxISP.setStatus('mandatory')
ftSysparProcessorName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparProcessorName.setStatus('mandatory')
ftSysparStationName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparStationName.setStatus('mandatory')
ftSysparCode = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 9, 255))).clone(namedValues=NamedValues(("iso8859-1", 1), ("iso8859-2", 2), ("iso8859-5", 5), ("iso8859-6", 6), ("iso8859-7", 7), ("iso8859-9", 9), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparCode.setStatus('mandatory')
ftSysparMaxInboundReqs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparMaxInboundReqs.setStatus('mandatory')
ftSysparMaxLifeTime = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftSysparMaxLifeTime.setStatus('mandatory')
ftEncryptKey = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("create-new-key", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftEncryptKey.setStatus('mandatory')
ftStatSuspend = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatSuspend.setStatus('mandatory')
ftStatLocked = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatLocked.setStatus('mandatory')
ftStatWait = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatWait.setStatus('mandatory')
ftStatActive = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatActive.setStatus('mandatory')
ftStatCanceled = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatCanceled.setStatus('mandatory')
ftStatFinished = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatFinished.setStatus('mandatory')
ftStatHold = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatHold.setStatus('mandatory')
ftStatLocalReqs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatLocalReqs.setStatus('mandatory')
ftStatRemoteReqs = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftStatRemoteReqs.setStatus('mandatory')
ftDiagStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 255))).clone(namedValues=NamedValues(("off", 1), ("snn", 2), ("pnn", 3), ("mnn", 4), ("nnn", 5), ("ssn", 6), ("sns", 7), ("sss", 8), ("psn", 9), ("pns", 10), ("pss", 11), ("msn", 12), ("mns", 13), ("mss", 14), ("nsn", 15), ("nns", 16), ("nss", 17), ("on", 18), ("smnn", 19), ("smsn", 20), ("smns", 21), ("smss", 22), ("pmnn", 23), ("pmsn", 24), ("pmns", 25), ("pmss", 26), ("mmnn", 27), ("mmsn", 28), ("mmns", 29), ("mmss", 30), ("undefined", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftDiagStatus.setStatus('mandatory')
ftTrapsSubsystemState = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsSubsystemState.setStatus('mandatory')
ftTrapsFTState = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsFTState.setStatus('mandatory')
ftTrapsPartState = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsPartState.setStatus('mandatory')
ftTrapsPartnerUnreachable = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsPartnerUnreachable.setStatus('mandatory')
ftTrapsRequestQueueState = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsRequestQueueState.setStatus('mandatory')
ftTrapsTransSucc = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsTransSucc.setStatus('mandatory')
ftTrapsTransFail = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftTrapsTransFail.setStatus('mandatory')
ftStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,1))
ftMaxRequestTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,2))
ftErrorLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,3))
ftPartnerStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,4)).setObjects(("File-Transfer-MIB", "ftPartnerName"), ("File-Transfer-MIB", "ftPartnerState"))
ftPartnerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,5)).setObjects(("File-Transfer-MIB", "ftPartnerName"))
ftStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,6))
ftRequestQueueUpperLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,7))
ftRequestQueueLowerLimitTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,8))
ftRequestSuccessfulTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,9)).setObjects(("File-Transfer-MIB", "ftRequestInitiator"), ("File-Transfer-MIB", "ftRequestID"), ("File-Transfer-MIB", "ftRequestPartnerName"), ("File-Transfer-MIB", "ftRequestUserID"), ("File-Transfer-MIB", "ftRequestFileName"))
ftRequestErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,10)).setObjects(("File-Transfer-MIB", "ftRequestInitiator"), ("File-Transfer-MIB", "ftRequestID"), ("File-Transfer-MIB", "ftRequestPartnerName"), ("File-Transfer-MIB", "ftRequestUserID"), ("File-Transfer-MIB", "ftRequestFileName"), ("File-Transfer-MIB", "ftRequestError"))
ftSubsystemStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,11))
ftSubsystemStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 231, 2, 18, 6) + (0,12))
ftPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftPollInterval.setStatus('mandatory')
ftPartnerTable = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1), )
if mibBuilder.loadTexts: ftPartnerTable.setStatus('mandatory')
ftPartnerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1), ).setIndexNames((0, "File-Transfer-MIB", "ftPartnerName"))
if mibBuilder.loadTexts: ftPartnerEntry.setStatus('mandatory')
ftPartnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPartnerName.setStatus('mandatory')
ftPartnerType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("openft", 1), ("ftam", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPartnerType.setStatus('mandatory')
ftPartnerState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("act", 1), ("inact", 2), ("nocon", 3), ("lunk", 4), ("runk", 5), ("adeact", 6), ("ainact", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftPartnerState.setStatus('mandatory')
ftPartnerNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPartnerNetworkAddr.setStatus('mandatory')
ftPartnerTransportSel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPartnerTransportSel.setStatus('mandatory')
ftPartnerSessionSel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPartnerSessionSel.setStatus('mandatory')
ftPartnerPresentationSel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 18, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftPartnerPresentationSel.setStatus('mandatory')
ftRequestID = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 9, 1), Integer32())
if mibBuilder.loadTexts: ftRequestID.setStatus('mandatory')
ftRequestInitiator = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2))))
if mibBuilder.loadTexts: ftRequestInitiator.setStatus('mandatory')
ftRequestPartnerName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: ftRequestPartnerName.setStatus('mandatory')
ftRequestUserID = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: ftRequestUserID.setStatus('mandatory')
ftRequestFileName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 221)))
if mibBuilder.loadTexts: ftRequestFileName.setStatus('mandatory')
ftRequestError = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 18, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7)))
if mibBuilder.loadTexts: ftRequestError.setStatus('mandatory')
mibBuilder.exportSymbols("File-Transfer-MIB", ftErrorLimitTrap=ftErrorLimitTrap, ftRequestSuccessfulTrap=ftRequestSuccessfulTrap, ftRequestID=ftRequestID, ftRequestPartnerName=ftRequestPartnerName, ftTrapsFTState=ftTrapsFTState, ftPartnerEntry=ftPartnerEntry, ftTrapsTransFail=ftTrapsTransFail, ftTrapsPartnerUnreachable=ftTrapsPartnerUnreachable, ftPartnerSessionSel=ftPartnerSessionSel, ftRequestQueueLowerLimitTrap=ftRequestQueueLowerLimitTrap, ftStartTrap=ftStartTrap, sniFTTrapSwitches=sniFTTrapSwitches, ftSysparPartnerCheck=ftSysparPartnerCheck, ftPartnerState=ftPartnerState, sniFTTrapData=sniFTTrapData, ftStatLocalReqs=ftStatLocalReqs, ftRequestErrorTrap=ftRequestErrorTrap, ftPartnerTable=ftPartnerTable, ftSysparConnectionLimit=ftSysparConnectionLimit, ftSysparMaxInboundReqs=ftSysparMaxInboundReqs, ftSysparTransportUnitSize=ftSysparTransportUnitSize, ftPartnerUnreachableTrap=ftPartnerUnreachableTrap, ftSysparTaskLimit=ftSysparTaskLimit, sniFTEncryptKey=sniFTEncryptKey, sniFTTraps=sniFTTraps, ftSysparMaxISP=ftSysparMaxISP, sniProductMibs=sniProductMibs, ftSysparRequestWaitLevel=ftSysparRequestWaitLevel, ftSysparStationName=ftSysparStationName, ftSubsystemStartTrap=ftSubsystemStartTrap, sni=sni, ftSysparVersion=ftSysparVersion, ftStatRemoteReqs=ftStatRemoteReqs, ftStopTrap=ftStopTrap, ftMaxRequestTrap=ftMaxRequestTrap, ftPartnerPresentationSel=ftPartnerPresentationSel, ftTrapsTransSucc=ftTrapsTransSucc, ftTrapsRequestQueueState=ftTrapsRequestQueueState, ftPartnerNetworkAddr=ftPartnerNetworkAddr, ftStartandStopFTAM=ftStartandStopFTAM, ftRequestUserID=ftRequestUserID, ftPollInterval=ftPollInterval, sniFTSysParam=sniFTSysParam, ftSysparCode=ftSysparCode, ftEncryptKey=ftEncryptKey, ftTrapsPartState=ftTrapsPartState, sniFTPollInterval=sniFTPollInterval, ftStatHold=ftStatHold, ftRequestError=ftRequestError, ftStatCanceled=ftStatCanceled, ftSysparProcessorName=ftSysparProcessorName, ftStatActive=ftStatActive, ftRequestFileName=ftRequestFileName, ftStatLocked=ftStatLocked, ftRequestInitiator=ftRequestInitiator, ftRequestQueueUpperLimitTrap=ftRequestQueueUpperLimitTrap, ftDiagStatus=ftDiagStatus, ftPartnerTransportSel=ftPartnerTransportSel, ftSysparMaxLifeTime=ftSysparMaxLifeTime, ftTrapsSubsystemState=ftTrapsSubsystemState, ftPartnerStateTrap=ftPartnerStateTrap, sniFTDiagnostics=sniFTDiagnostics, ftStatWait=ftStatWait, ftStartandStop=ftStartandStop, sniFTStartandStop=sniFTStartandStop, ftSubsystemStopTrap=ftSubsystemStopTrap, ftPartnerType=ftPartnerType, ftStatSuspend=ftStatSuspend, sniFT=sniFT, ftStatFinished=ftStatFinished, sniFTStatistics=sniFTStatistics, ftPartnerName=ftPartnerName, sniFTPartners=sniFTPartners, ftSysparMaxOSP=ftSysparMaxOSP)
