#
# PySNMP MIB module PCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PCE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:28:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter64, IpAddress, TimeTicks, MibIdentifier, ObjectIdentity, NotificationType, Counter32, Unsigned32, Bits, NotificationType, Integer32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "IpAddress", "TimeTicks", "MibIdentifier", "ObjectIdentity", "NotificationType", "Counter32", "Unsigned32", "Bits", "NotificationType", "Integer32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
pce = MibIdentifier((1, 3, 6, 1, 4, 1, 866))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1))
manager = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 2))
systemDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 3))
projects = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 4))
frxSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20))
frxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1))
frxManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10))
frxDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 20))
vcxSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30))
vcxConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1))
dvbConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20))
mmxSoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 40))
compacProxySoftware = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 51))
compacV9toV11 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 1))
transProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 10))
netAccessProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20))
adaptis = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 10))
vpx10 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 20))
vpx20 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 21))
mcx103 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 30))
mcx104 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 31))
atLan = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 40))
mcx300 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 50))
frx300 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 60))
vcx100 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 90))
avb1002_EM = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 200)).setLabel("avb1002-EM")
avb1002_FXS_FXO = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 201)).setLabel("avb1002-FXS-FXO")
sc103_3W = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 210)).setLabel("sc103-3W")
sc103_6W = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 211)).setLabel("sc103-6W")
sc103_6W_M = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 212)).setLabel("sc103-6W-M")
sc104 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 220))
sc106 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 225))
sc112 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 226))
sc300_1W_1E = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 230)).setLabel("sc300-1W-1E")
sc300_3W_1E = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 231)).setLabel("sc300-3W-1E")
sc300_4W = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 232)).setLabel("sc300-4W")
sc310_8W = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 240)).setLabel("sc310-8W")
sc310_12W = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 241)).setLabel("sc310-12W")
sc320_4W_1TR = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 250)).setLabel("sc320-4W-1TR")
sc320_8W_1TR = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 251)).setLabel("sc320-8W-1TR")
sc330 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 254))
sc1200 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 20, 255))
netConcentratorProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30))
mcx09 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 20))
mcx109 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 21))
mcx106 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 30))
mcx112 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 35))
mcx212 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 40))
mcx212Y = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 41))
mcx512 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 45))
mcx512Y = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 46))
lmx506 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 50))
frx800 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 60))
sc512 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 210))
sc512Y = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 211))
hpb1025_8W = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 220)).setLabel("hpb1025-8W")
hpb1025_12W = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 221)).setLabel("hpb1025-12W")
spb1033 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 250))
dvb1008 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 30, 270))
netBackboneProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 40))
npx09 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 40, 20))
npx90 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 40, 21))
frx1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 40, 60))
frx2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 40, 65))
frx2000Y = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 40, 70))
mmx5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 40, 100))
mmx10000 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 40, 105))
sc5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 40, 200))
netCentralSiteProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 50))
fpb2025 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 50, 200))
rpb2025 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 50, 201))
spb2033 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 50, 250))
dvb2030 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 1, 50, 270))
nodeName = MibScalar((1, 3, 6, 1, 4, 1, 866, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeName.setStatus('mandatory')
nodeStatus = MibScalar((1, 3, 6, 1, 4, 1, 866, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("notMonitored", 8), ("inService", 1), ("serviceInterrupted", 2), ("unknown", 3), ("crippled", 4), ("functionOccupied", 6), ("callForBackupAddress", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeStatus.setStatus('mandatory')
portLabel = MibScalar((1, 3, 6, 1, 4, 1, 866, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLabel.setStatus('mandatory')
portNumber = MibScalar((1, 3, 6, 1, 4, 1, 866, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portNumber.setStatus('mandatory')
portStatus = MibScalar((1, 3, 6, 1, 4, 1, 866, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 1, 2, 3, 5))).clone(namedValues=NamedValues(("notMonitored", 8), ("inService", 1), ("serviceInterrupted", 2), ("unknown", 3), ("shiftToPstn", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatus.setStatus('mandatory')
changeDescription = MibScalar((1, 3, 6, 1, 4, 1, 866, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: changeDescription.setStatus('mandatory')
nodeStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 866) + (0,0)).setObjects(("PCE-MIB", "nodeName"), ("PCE-MIB", "nodeStatus"), ("PCE-MIB", "changeDescription"))
lineStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 866) + (0,1)).setObjects(("PCE-MIB", "nodeName"), ("PCE-MIB", "portNumber"), ("PCE-MIB", "portLabel"), ("PCE-MIB", "portStatus"), ("PCE-MIB", "changeDescription"))
fcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 1))
fcCtlConfigurationState = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10, 11, 20, 21))).clone(namedValues=NamedValues(("noChange", 1), ("notReady", 2), ("limitedReset", 10), ("reboot", 11), ("savingInProgress", 20), ("loadingInProgress", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlConfigurationState.setStatus('mandatory')
fcCtlStateCheckingResults = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlStateCheckingResults.setStatus('mandatory')
fcCtlConfigurationCommand = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 10, 20))).clone(namedValues=NamedValues(("ready", 1), ("check", 2), ("load", 5), ("save", 6), ("erase", 7), ("hotReset", 10), ("reboot", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCtlConfigurationCommand.setStatus('mandatory')
fcCtlBootDevice = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normalNvram", 1), ("backupNvram", 2), ("startCard", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCtlBootDevice.setStatus('mandatory')
fcCtlStorageDevice = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normalNvram", 1), ("backupNvram", 2), ("startCard", 3), ("flashMemory", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCtlStorageDevice.setStatus('mandatory')
fcCtlAlteredLpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 30), )
if mibBuilder.loadTexts: fcCtlAlteredLpTable.setStatus('mandatory')
fcCtlAlteredLpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 30, 1), ).setIndexNames((0, "PCE-MIB", "fcCtlAlteredLpId"))
if mibBuilder.loadTexts: fcCtlAlteredLpEntry.setStatus('mandatory')
fcCtlAlteredLpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlAlteredLpId.setStatus('mandatory')
fcCtlAlteredDlciTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 31), )
if mibBuilder.loadTexts: fcCtlAlteredDlciTable.setStatus('mandatory')
fcCtlAlteredDlciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 31, 1), ).setIndexNames((0, "PCE-MIB", "fcCtlAlteredDlciPpId"), (0, "PCE-MIB", "fcCtlAlteredDlciNum"))
if mibBuilder.loadTexts: fcCtlAlteredDlciEntry.setStatus('mandatory')
fcCtlAlteredDlciPpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlAlteredDlciPpId.setStatus('mandatory')
fcCtlAlteredDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlAlteredDlciNum.setStatus('mandatory')
fcCtlAlteredDlciState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("added", 1), ("notchanged", 2), ("modified", 3), ("suppressed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcCtlAlteredDlciState.setStatus('mandatory')
fcCtlAlteredIfTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 32), )
if mibBuilder.loadTexts: fcCtlAlteredIfTable.setStatus('mandatory')
fcCtlAlteredIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 32, 1), ).setIndexNames((0, "PCE-MIB", "fcCtlAlteredIfId"))
if mibBuilder.loadTexts: fcCtlAlteredIfEntry.setStatus('mandatory')
fcCtlAlteredIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlAlteredIfId.setStatus('mandatory')
fcCtlErrorTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 40), )
if mibBuilder.loadTexts: fcCtlErrorTable.setStatus('mandatory')
fcCtlErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 40, 1), ).setIndexNames((0, "PCE-MIB", "fcCtlErrorIndex"))
if mibBuilder.loadTexts: fcCtlErrorEntry.setStatus('mandatory')
fcCtlErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlErrorIndex.setStatus('mandatory')
fcCtlErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 40, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlErrorCode.setStatus('mandatory')
fcCtlErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 40, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlErrorMessage.setStatus('mandatory')
fcCtlErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 40, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlErrorTime.setStatus('mandatory')
fcCtlHRCheckMessagesTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 50), )
if mibBuilder.loadTexts: fcCtlHRCheckMessagesTable.setStatus('mandatory')
fcCtlHRCheckMessagesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 50, 1), ).setIndexNames((0, "PCE-MIB", "fcCtlHRCheckMsgIndex"))
if mibBuilder.loadTexts: fcCtlHRCheckMessagesEntry.setStatus('mandatory')
fcCtlHRCheckMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlHRCheckMsgIndex.setStatus('mandatory')
fcCtlHRCheckMsgCode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 50, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlHRCheckMsgCode.setStatus('mandatory')
fcCtlHRCheckMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 1, 50, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcCtlHRCheckMessage.setStatus('mandatory')
fcSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 2))
fcsConfigDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 1))
fcsConfigDescName = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsConfigDescName.setStatus('mandatory')
fcsConfigDescAuthor = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsConfigDescAuthor.setStatus('mandatory')
fcsConfigDescDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsConfigDescDate.setStatus('mandatory')
fcsConfigDescVersion = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsConfigDescVersion.setStatus('mandatory')
fcsHardwareDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 2))
fcsHardDescReplicatedMode = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("onTwoModules", 3), ("onThreeModules", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsHardDescReplicatedMode.setStatus('mandatory')
fcsModuleTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5), )
if mibBuilder.loadTexts: fcsModuleTable.setStatus('mandatory')
fcsModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5, 1), ).setIndexNames((0, "PCE-MIB", "fcsModuleId"))
if mibBuilder.loadTexts: fcsModuleEntry.setStatus('mandatory')
fcsModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsModuleId.setStatus('mandatory')
fcsModuleSubscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsModuleSubscriberNumber.setStatus('mandatory')
fcsModuleBridgeInit = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsModuleBridgeInit.setStatus('mandatory')
fcsModuleIpxRouterInit = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsModuleIpxRouterInit.setStatus('mandatory')
fcsModuleClnpRouterInit = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsModuleClnpRouterInit.setStatus('mandatory')
fcManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 3))
fcmManagementFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1))
fcmMgtFctActivationTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 1), )
if mibBuilder.loadTexts: fcmMgtFctActivationTable.setStatus('mandatory')
fcmMgtFctActivationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcmMgfActName"))
if mibBuilder.loadTexts: fcmMgtFctActivationEntry.setStatus('mandatory')
fcmMgfActName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 8, 10, 11, 12, 17))).clone(namedValues=NamedValues(("trafficGeneration", 1), ("observation", 2), ("statistics", 3), ("outstandingEvents", 4), ("fileTransfer", 5), ("telemaintenance", 6), ("alarm", 8), ("userInterface", 10), ("billing", 11), ("extendedStatistics", 12), ("exploitationAccess", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmMgfActName.setStatus('mandatory')
fcmMgfActAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfActAdminStatus.setStatus('mandatory')
fcmMgfActPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfActPassword.setStatus('mandatory')
fcmMgtFctParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2))
fcmMgfGeneratorCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfGeneratorCount.setStatus('mandatory')
fcmMgfGeneratorsAction = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("output", 1), ("input", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfGeneratorsAction.setStatus('mandatory')
fcmMgfGeneratorsDelay = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 98))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfGeneratorsDelay.setStatus('mandatory')
fcmMgfAlarmsSubscriber1 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfAlarmsSubscriber1.setStatus('mandatory')
fcmMgfAlarmsSubscriber2 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfAlarmsSubscriber2.setStatus('mandatory')
fcmMgfStatSummingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfStatSummingPeriod.setStatus('mandatory')
fcmMgfStatBufferThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfStatBufferThreshold.setStatus('mandatory')
fcmMgfStatThroughputSamplingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfStatThroughputSamplingPeriod.setStatus('mandatory')
fcmMgfStatOutputThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfStatOutputThreshold.setStatus('mandatory')
fcmMgfStatInputThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfStatInputThreshold.setStatus('mandatory')
fcmMgfStatLogChannelSamplingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfStatLogChannelSamplingPeriod.setStatus('mandatory')
fcmMgfStatLogChannelThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfStatLogChannelThreshold.setStatus('mandatory')
fcmMgfConversionAimedPoint = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfConversionAimedPoint.setStatus('mandatory')
fcmMgfConversionIncomingCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfConversionIncomingCall.setStatus('mandatory')
fcmMgfConversionOutgoingCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfConversionOutgoingCall.setStatus('mandatory')
fcmMgfConversionAddressCheck = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("onIncomingCall", 2), ("onOutgoingCall", 3), ("onIncomingCallAndOutgoingCall", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfConversionAddressCheck.setStatus('mandatory')
fcmMgfConvMultiCalledAddrInCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfConvMultiCalledAddrInCall.setStatus('mandatory')
fcmMgfConvMultiCallingAddrInCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfConvMultiCallingAddrInCall.setStatus('mandatory')
fcmMgfConvMultiCalledAddrOutCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfConvMultiCalledAddrOutCall.setStatus('mandatory')
fcmMgfConvMultiCallingAddrOutCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfConvMultiCallingAddrOutCall.setStatus('mandatory')
fcmMgfBISDNChannelOpening = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfBISDNChannelOpening.setStatus('mandatory')
fcmMgfCallAcceptwithReverseCharging = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfCallAcceptwithReverseCharging.setStatus('mandatory')
fcmMgfClosedUserGroup = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 2, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3, 4))).clone(namedValues=NamedValues(("noCheck", 2), ("clear", 1), ("subscribe", 3), ("subscribeAndRemove", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgfClosedUserGroup.setStatus('mandatory')
fcmMgtFctCugTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3), )
if mibBuilder.loadTexts: fcmMgtFctCugTable.setStatus('mandatory')
fcmMgtFctCugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3, 1), ).setIndexNames((0, "PCE-MIB", "fcmMgtFctCugFunctionId"), (0, "PCE-MIB", "fcmMgtFctCugGroupId"))
if mibBuilder.loadTexts: fcmMgtFctCugEntry.setStatus('mandatory')
fcmMgtFctCugFunctionId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 10, 11, 14))).clone(namedValues=NamedValues(("observation", 1), ("statistics", 2), ("outstandingEvents", 3), ("alarm", 4), ("trafficGeneration", 5), ("telemaintenance", 7), ("configuration", 8), ("billing", 10), ("extendedStatistics", 11), ("pae", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmMgtFctCugFunctionId.setStatus('mandatory')
fcmMgtFctCugGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmMgtFctCugGroupId.setStatus('mandatory')
fcmMgtFctCugClosedUserGroupExt = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgtFctCugClosedUserGroupExt.setStatus('mandatory')
fcmMgtFctCugClosedUserGroupInt = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgtFctCugClosedUserGroupInt.setStatus('mandatory')
fcmMgtFctCugChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1))).clone(namedValues=NamedValues(("onOutgoingCall", 3), ("onIncomingCallAndOutgoingCall", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmMgtFctCugChecking.setStatus('mandatory')
fcmAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2))
fcmAlrmEventTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1), )
if mibBuilder.loadTexts: fcmAlrmEventTable.setStatus('mandatory')
fcmAlrmEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcmAlrmEvtFamilyId"))
if mibBuilder.loadTexts: fcmAlrmEventEntry.setStatus('mandatory')
fcmAlrmEvtFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("troubleReport-00", 1), ("management-01", 2), ("synchronousSignalling-02", 3), ("x25SynchronousProcedure-03", 4), ("synchronousLink-04", 5), ("linePhysicalLevel-05", 6), ("asynchronousProtocolLevel-06", 7), ("asynchronousCommandSyntax-07", 8), ("asynchronousSemanticLevel-08", 9), ("sdlcProcedure-09", 10), ("vipProcedure-0A", 11), ("tvipFradBscProcedure-0B", 12), ("dlcBscProcedure-0C", 13), ("mlp-0D", 14), ("pstnProcedure-0E", 15), ("securizedVcEsv-0F", 16), ("securizedVcN4-10", 17), ("securizedVcIr-11", 18), ("isdnDChannelProcedure-12", 19), ("x29Rerouting-13", 20), ("ethernetBridgeAndIpRouterFunctions-14", 21), ("dlcMtrFrad-15", 22), ("compressionProcedure-16", 23), ("dlmFunction-17", 24), ("configurationFunction-18", 25), ("lmiFunction-19", 26), ("ppp-1A", 27), ("frameRelaySna-1B", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmAlrmEvtFamilyId.setStatus('mandatory')
fcmAlrmEvtEventSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mentioned", 1), ("all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmEvtEventSelection.setStatus('mandatory')
fcmAlrmEvtEvent1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmEvtEvent1.setStatus('mandatory')
fcmAlrmEvtEvent2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmEvtEvent2.setStatus('mandatory')
fcmAlrmEvtEvent3 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmEvtEvent3.setStatus('mandatory')
fcmAlrmEvtEvent4 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmEvtEvent4.setStatus('mandatory')
fcmAlrmEvtEvent5 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmEvtEvent5.setStatus('mandatory')
fcmAlrmEvtEvent6 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmEvtEvent6.setStatus('mandatory')
fcmAlrmEvtEvent7 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmEvtEvent7.setStatus('mandatory')
fcmAlrmPhysPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2), )
if mibBuilder.loadTexts: fcmAlrmPhysPortTable.setStatus('mandatory')
fcmAlrmPhysPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1), ).setIndexNames((0, "PCE-MIB", "fcmAlrmPpFamilyId"))
if mibBuilder.loadTexts: fcmAlrmPhysPortEntry.setStatus('mandatory')
fcmAlrmPpFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("troubleReport-00", 1), ("management-01", 2), ("synchronousSignalling-02", 3), ("x25SynchronousProcedure-03", 4), ("synchronousLink-04", 5), ("linePhysicalLevel-05", 6), ("asynchronousProtocolLevel-06", 7), ("asynchronousCommandSyntax-07", 8), ("asynchronousSemanticLevel-08", 9), ("sdlcProcedure-09", 10), ("vipProcedure-0A", 11), ("tvipFradBscProcedure-0B", 12), ("dlcBscProcedure-0C", 13), ("mlp-0D", 14), ("pstnProcedure-0E", 15), ("isdnDChannelProcedure-12", 19), ("dlcMtrFrad-15", 22), ("compressionProcedure-16", 23), ("dlmFunction-17", 24), ("configurationFunction-18", 25), ("lmiFunction-19", 26), ("ppp-1A", 27), ("frameRelaySna-1B", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcmAlrmPpFamilyId.setStatus('mandatory')
fcmAlrmPpPhysPortSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mentioned", 1), ("allExceptMentioned", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmPpPhysPortSelection.setStatus('mandatory')
fcmAlrmPpPhysPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmPpPhysPort1.setStatus('mandatory')
fcmAlrmPpPhysPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmPpPhysPort2.setStatus('mandatory')
fcmAlrmPpPhysPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmPpPhysPort3.setStatus('mandatory')
fcmAlrmPpPhysPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmPpPhysPort4.setStatus('mandatory')
fcmAlrmPpPhysPort5 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmPpPhysPort5.setStatus('mandatory')
fcmAlrmPpPhysPort6 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmPpPhysPort6.setStatus('mandatory')
fcmAlrmPpPhysPort7 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcmAlrmPpPhysPort7.setStatus('mandatory')
fcInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 10))
fcfPhysicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 1), )
if mibBuilder.loadTexts: fcfPhysicalPortTable.setStatus('mandatory')
fcfPhysicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcfPhysPortId"))
if mibBuilder.loadTexts: fcfPhysicalPortEntry.setStatus('mandatory')
fcfPhysPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfPhysPortId.setStatus('mandatory')
fcfPhysPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("db25orRj45", 2), ("link", 3), ("db9orRj45", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfPhysPortConnector.setStatus('mandatory')
fcfInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unUsed", 1), ("ethernetAuto", 2), ("ethernet10baseT", 3), ("ethernetAui", 4), ("line", 5), ("isdnBChannel", 6), ("isdnDChannel", 7), ("interUnitLinks", 8), ("e1", 9), ("ds1", 10), ("isdnPri", 11), ("lineorB", 12), ("tokenRing", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfInterfaceType.setStatus('mandatory')
fcfLines = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2))
fcfLineTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1), )
if mibBuilder.loadTexts: fcfLineTable.setStatus('mandatory')
fcfLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineInterfaceId"))
if mibBuilder.loadTexts: fcfLineEntry.setStatus('mandatory')
fcfLineInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineInterfaceId.setStatus('mandatory')
fcfLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("synchroneV28Dte", 1), ("synchroneV28Dce", 2), ("asynchroneV28Dte", 3), ("asynchroneV28Dce", 4), ("v11Dte", 5), ("v11Dce", 6), ("v35Dte", 7), ("v35Dce", 8), ("g703", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineType.setStatus('mandatory')
fcfLineModemManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModemManagement.setStatus('mandatory')
fcfLineSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(23, 2, 3, 6, 7, 8, 10, 9, 11, 26, 12, 13, 14, 24, 15, 16, 25, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("s300", 23), ("s600", 2), ("s1200", 3), ("s2400", 6), ("s3200", 7), ("s4800", 8), ("s9600", 10), ("s14400", 9), ("s19200", 11), ("s28800", 26), ("s38400", 12), ("s48000", 13), ("s56000", 14), ("s57600", 24), ("s64000", 15), ("s72000", 16), ("s115200", 25), ("s128000", 17), ("s144000", 18), ("s256000", 19), ("s512000", 20), ("s1024000", 21), ("s2048000", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineSpeed.setStatus('mandatory')
fcfLineLinkCheckPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 50800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineLinkCheckPeriod.setStatus('mandatory')
fcfLineCheckPeriodCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineCheckPeriodCount.setStatus('mandatory')
fcfLineV28AsynOutDteSignalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5), )
if mibBuilder.loadTexts: fcfLineV28AsynOutDteSignalTable.setStatus('mandatory')
fcfLineV28AsynOutDteSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineV28AsynOutDteInterfaceId"))
if mibBuilder.loadTexts: fcfLineV28AsynOutDteSignalEntry.setStatus('mandatory')
fcfLineV28AsynOutDteInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineV28AsynOutDteInterfaceId.setStatus('mandatory')
fcfLineV28AsynOutDteRts105 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynOutDteRts105.setStatus('mandatory')
fcfLineV28AsynOutDteDtr108 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynOutDteDtr108.setStatus('mandatory')
fcfLineV28AsynOutDteDrs111 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynOutDteDrs111.setStatus('mandatory')
fcfLineV28AsynOutDteRil140 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynOutDteRil140.setStatus('mandatory')
fcfLineV28AsynOutDteLl141 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynOutDteLl141.setStatus('mandatory')
fcfLineV28AsynOutDceSignalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6), )
if mibBuilder.loadTexts: fcfLineV28AsynOutDceSignalTable.setStatus('mandatory')
fcfLineV28AsynOutDceSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineV28AsynOutDceInterfaceId"))
if mibBuilder.loadTexts: fcfLineV28AsynOutDceSignalEntry.setStatus('mandatory')
fcfLineV28AsynOutDceInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineV28AsynOutDceInterfaceId.setStatus('mandatory')
fcfLineV28AsynOutDceCts106 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynOutDceCts106.setStatus('mandatory')
fcfLineV28AsynOutDceDsr107 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynOutDceDsr107.setStatus('mandatory')
fcfLineV28AsynOutDceDcd109 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynOutDceDcd109.setStatus('mandatory')
fcfLineV28AsynOutDceSi117 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynOutDceSi117.setStatus('mandatory')
fcfLineV28AsynOutDceTi142 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynOutDceTi142.setStatus('mandatory')
fcfLineV28AsynInDteSignalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7), )
if mibBuilder.loadTexts: fcfLineV28AsynInDteSignalTable.setStatus('mandatory')
fcfLineV28AsynInDteSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineV28AsynInDteInterfaceId"))
if mibBuilder.loadTexts: fcfLineV28AsynInDteSignalEntry.setStatus('mandatory')
fcfLineV28AsynInDteInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineV28AsynInDteInterfaceId.setStatus('mandatory')
fcfLineV28AsynInDteEnablingSig1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 33, 2, 9, 34, 41, 10, 42))).clone(namedValues=NamedValues(("none", 1), ("cts106", 33), ("dsr107", 2), ("dcd109", 9), ("cts106-dsr107", 34), ("cts106-dcd109", 41), ("dsr107-dcd109", 10), ("cts106-dsr107-dcd109", 42)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynInDteEnablingSig1.setStatus('mandatory')
fcfLineV28AsynInDteEnablingSig2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 3))).clone(namedValues=NamedValues(("none", 1), ("si117", 5), ("ti142", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynInDteEnablingSig2.setStatus('mandatory')
fcfLineV28AsynInDteSigMonitored1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 33, 2, 9, 34, 41, 10, 42))).clone(namedValues=NamedValues(("none", 1), ("cts106", 33), ("dsr107", 2), ("dcd109", 9), ("cts106-dsr107", 34), ("cts106-dcd109", 41), ("dsr107-dcd109", 10), ("cts106-dsr107-dcd109", 42)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynInDteSigMonitored1.setStatus('mandatory')
fcfLineV28AsynInDteSigMonitored2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 3))).clone(namedValues=NamedValues(("none", 1), ("si117", 5), ("ti142", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynInDteSigMonitored2.setStatus('mandatory')
fcfLineV28AsynInDceSignalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8), )
if mibBuilder.loadTexts: fcfLineV28AsynInDceSignalTable.setStatus('mandatory')
fcfLineV28AsynInDceSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineV28AsynInDceInterfaceId"))
if mibBuilder.loadTexts: fcfLineV28AsynInDceSignalEntry.setStatus('mandatory')
fcfLineV28AsynInDceInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineV28AsynInDceInterfaceId.setStatus('mandatory')
fcfLineV28AsynInDceEnablingSig1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9, 33, 41))).clone(namedValues=NamedValues(("none", 1), ("rts105", 9), ("dtr108", 33), ("rts105-dtr108", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynInDceEnablingSig1.setStatus('mandatory')
fcfLineV28AsynInDceEnablingSig2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("none", 1), ("drs111", 2), ("ril140", 3), ("ll141", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynInDceEnablingSig2.setStatus('mandatory')
fcfLineV28AsynInDceSigMonitored1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9, 33, 41))).clone(namedValues=NamedValues(("none", 1), ("rts105", 9), ("dtr108", 33), ("rts105-dtr108", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynInDceSigMonitored1.setStatus('mandatory')
fcfLineV28AsynInDceSigMonitored2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("none", 1), ("rts111", 2), ("ril140", 3), ("ll141", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28AsynInDceSigMonitored2.setStatus('mandatory')
fcfLineV28DteSignalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11), )
if mibBuilder.loadTexts: fcfLineV28DteSignalTable.setStatus('mandatory')
fcfLineV28DteSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineV28DteInterfaceId"))
if mibBuilder.loadTexts: fcfLineV28DteSignalEntry.setStatus('mandatory')
fcfLineV28DteInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineV28DteInterfaceId.setStatus('mandatory')
fcfLineV28DteCts106 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28DteCts106.setStatus('mandatory')
fcfLineV28DteDsr107 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28DteDsr107.setStatus('mandatory')
fcfLineV28DteDcd109 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28DteDcd109.setStatus('mandatory')
fcfLineV28DteSi117 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28DteSi117.setStatus('mandatory')
fcfLineV28DteTi142 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28DteTi142.setStatus('mandatory')
fcfLineV28DteSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 11, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredOff", 2), ("monitoredOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28DteSyn.setStatus('mandatory')
fcfLineV28DceSignalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12), )
if mibBuilder.loadTexts: fcfLineV28DceSignalTable.setStatus('mandatory')
fcfLineV28DceSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineV28DceInterfaceId"))
if mibBuilder.loadTexts: fcfLineV28DceSignalEntry.setStatus('mandatory')
fcfLineV28DceInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineV28DceInterfaceId.setStatus('mandatory')
fcfLineV28DceRts105 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28DceRts105.setStatus('mandatory')
fcfLineV28DceDtr108 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28DceDtr108.setStatus('mandatory')
fcfLineV28DceDrs111 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28DceDrs111.setStatus('mandatory')
fcfLineV28DceRil140 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28DceRil140.setStatus('mandatory')
fcfLineV28DceLl141 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28DceLl141.setStatus('mandatory')
fcfLineV28DceSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredOff", 2), ("monitoredOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV28DceSyn.setStatus('mandatory')
fcfLineV11DteSignalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 15), )
if mibBuilder.loadTexts: fcfLineV11DteSignalTable.setStatus('mandatory')
fcfLineV11DteSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 15, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineV11DteInterfaceId"))
if mibBuilder.loadTexts: fcfLineV11DteSignalEntry.setStatus('mandatory')
fcfLineV11DteInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineV11DteInterfaceId.setStatus('mandatory')
fcfLineV11DteIndication109 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV11DteIndication109.setStatus('mandatory')
fcfLineV11DteSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredOff", 2), ("monitoredOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV11DteSyn.setStatus('mandatory')
fcfLineV11DceSignalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 16), )
if mibBuilder.loadTexts: fcfLineV11DceSignalTable.setStatus('mandatory')
fcfLineV11DceSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 16, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineV11DceInterfaceId"))
if mibBuilder.loadTexts: fcfLineV11DceSignalEntry.setStatus('mandatory')
fcfLineV11DceInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineV11DceInterfaceId.setStatus('mandatory')
fcfLineV11DceControl105 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV11DceControl105.setStatus('mandatory')
fcfLineV11DceSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredOff", 2), ("monitoredOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV11DceSyn.setStatus('mandatory')
fcfLineV35DteSignalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19), )
if mibBuilder.loadTexts: fcfLineV35DteSignalTable.setStatus('mandatory')
fcfLineV35DteSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineV35DteInterfaceId"))
if mibBuilder.loadTexts: fcfLineV35DteSignalEntry.setStatus('mandatory')
fcfLineV35DteInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineV35DteInterfaceId.setStatus('mandatory')
fcfLineV35DteD106 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV35DteD106.setStatus('mandatory')
fcfLineV35DteE107 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV35DteE107.setStatus('mandatory')
fcfLineV35DteF109 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV35DteF109.setStatus('mandatory')
fcfLineV35DteTi142 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV35DteTi142.setStatus('mandatory')
fcfLineV35DteSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 19, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredOff", 2), ("monitoredOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV35DteSyn.setStatus('mandatory')
fcfLineV35DceSignalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20), )
if mibBuilder.loadTexts: fcfLineV35DceSignalTable.setStatus('mandatory')
fcfLineV35DceSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineV35DceInterfaceId"))
if mibBuilder.loadTexts: fcfLineV35DceSignalEntry.setStatus('mandatory')
fcfLineV35DceInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineV35DceInterfaceId.setStatus('mandatory')
fcfLineV35DceC105 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV35DceC105.setStatus('mandatory')
fcfLineV35DceH108 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV35DceH108.setStatus('mandatory')
fcfLineV35DceRil140 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV35DceRil140.setStatus('mandatory')
fcfLineV35DceLl141 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredNotSignificant", 2), ("monitoredOff", 3), ("monitoredOn", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV35DceLl141.setStatus('mandatory')
fcfLineV35DceSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notMonitored", 1), ("monitoredOff", 2), ("monitoredOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineV35DceSyn.setStatus('mandatory')
fcfLineModem = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30))
fcfLineModemTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1), )
if mibBuilder.loadTexts: fcfLineModemTable.setStatus('mandatory')
fcfLineModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineModInterfaceId"))
if mibBuilder.loadTexts: fcfLineModemEntry.setStatus('mandatory')
fcfLineModInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineModInterfaceId.setStatus('mandatory')
fcfLineModType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("direct", 1), ("addressedAt", 2), ("addressedV25Bis", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModType.setStatus('mandatory')
fcfLineModLinkUpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModLinkUpTimer.setStatus('mandatory')
fcfLineModNewDiallingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModNewDiallingTimer.setStatus('mandatory')
fcfLineModDiallingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModDiallingCount.setStatus('mandatory')
fcfLineModUnuseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModUnuseTimer.setStatus('mandatory')
fcfLineModSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("s150", 1), ("s300", 2), ("s600", 3), ("s1200", 4), ("s2400", 5), ("s4800", 9), ("s9600", 11), ("s19200", 12), ("s28800", 13), ("s38400", 14), ("s57600", 15), ("s115200", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModSpeed.setStatus('mandatory')
fcfLineModCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("calling", 3), ("called", 2), ("auto", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModCallDirection.setStatus('mandatory')
fcfLineModInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModInitString.setStatus('mandatory')
fcfLineModOutputXidString = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModOutputXidString.setStatus('mandatory')
fcfLineModOutputXidStringId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModOutputXidStringId.setStatus('mandatory')
fcfLineModInputXidString = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModInputXidString.setStatus('mandatory')
fcfLineModInputXidStringCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModInputXidStringCount.setStatus('mandatory')
fcfLineModXidStringTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 2), )
if mibBuilder.loadTexts: fcfLineModXidStringTable.setStatus('mandatory')
fcfLineModXidStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 2, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineModXidStringId"), (0, "PCE-MIB", "fcfLineModXidStringEltNum"))
if mibBuilder.loadTexts: fcfLineModXidStringEntry.setStatus('mandatory')
fcfLineModXidStringId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineModXidStringId.setStatus('mandatory')
fcfLineModXidStringEltNum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineModXidStringEltNum.setStatus('mandatory')
fcfLineModXidStringEltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModXidStringEltStatus.setStatus('mandatory')
fcfLineModXidStringElement = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 30, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(33, 33)).setFixedLength(33)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineModXidStringElement.setStatus('mandatory')
fcfLineDVBTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 31), )
if mibBuilder.loadTexts: fcfLineDVBTable.setStatus('mandatory')
fcfLineDVBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 31, 1), ).setIndexNames((0, "PCE-MIB", "fcfLineDVBInterfaceId"))
if mibBuilder.loadTexts: fcfLineDVBEntry.setStatus('mandatory')
fcfLineDVBInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfLineDVBInterfaceId.setStatus('mandatory')
fcfLineDVBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineDVBStatus.setStatus('mandatory')
fcfLineDVBConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 2, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("lsForDvb1", 2), ("lsForDvb2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfLineDVBConnection.setStatus('mandatory')
fcfIsdn = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5))
fcfIsdnBasicRateInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1), )
if mibBuilder.loadTexts: fcfIsdnBasicRateInterfaceTable.setStatus('mandatory')
fcfIsdnBasicRateInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcfIsdnBasicRateInterfaceId"))
if mibBuilder.loadTexts: fcfIsdnBasicRateInterfaceEntry.setStatus('mandatory')
fcfIsdnBasicRateInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfIsdnBasicRateInterfaceId.setStatus('mandatory')
fcfIsdnBriSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnBriSignalling.setStatus('mandatory')
fcfIsdnBriCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("franceVn2", 1), ("franceVn3", 2), ("unitedKingdom", 3), ("switzerland", 4), ("europeanIsdn", 5), ("japan", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnBriCountry.setStatus('mandatory')
fcfIsdnBriInterfaceCheckPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 51000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnBriInterfaceCheckPeriod.setStatus('mandatory')
fcfIsdnBriFilterRepeatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnBriFilterRepeatCount.setStatus('mandatory')
fcfIsdnBriEnablingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 30000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnBriEnablingTimer.setStatus('mandatory')
fcfIsdnBriDisablingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnBriDisablingTimer.setStatus('mandatory')
fcfIsdnPrimaryRateInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2), )
if mibBuilder.loadTexts: fcfIsdnPrimaryRateInterfaceTable.setStatus('mandatory')
fcfIsdnPrimaryRateInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2, 1), ).setIndexNames((0, "PCE-MIB", "fcfIsdnPrimaryRateInterfaceId"))
if mibBuilder.loadTexts: fcfIsdnPrimaryRateInterfaceEntry.setStatus('mandatory')
fcfIsdnPrimaryRateInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfIsdnPrimaryRateInterfaceId.setStatus('mandatory')
fcfIsdnPriSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnPriSignalling.setStatus('mandatory')
fcfIsdnPriCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("franceVn2", 1), ("franceVn3", 2), ("unitedKingdom", 3), ("switzerland", 4), ("europeanIsdn", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnPriCountry.setStatus('mandatory')
fcfIsdnPriINbBChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnPriINbBChannel.setStatus('mandatory')
fcfIsdnPriCrc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnPriCrc4.setStatus('mandatory')
fcfIsdnDChannelSignallingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10), )
if mibBuilder.loadTexts: fcfIsdnDChannelSignallingTable.setStatus('mandatory')
fcfIsdnDChannelSignallingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1), ).setIndexNames((0, "PCE-MIB", "fcfIsdnDSigIsdnInterfaceId"))
if mibBuilder.loadTexts: fcfIsdnDChannelSignallingEntry.setStatus('mandatory')
fcfIsdnDSigIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfIsdnDSigIsdnInterfaceId.setStatus('mandatory')
fcfIsdnDSigIsdnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDSigIsdnNumber.setStatus('mandatory')
fcfIsdnDSigUnuseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2550))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDSigUnuseTimer.setStatus('mandatory')
fcfIsdnDSigCalledSubAddressCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDSigCalledSubAddressCheck.setStatus('mandatory')
fcfIsdnDSigDirectInwardDialingCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDSigDirectInwardDialingCheck.setStatus('mandatory')
fcfIsdnDSigInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDSigInactivityTimer.setStatus('mandatory')
fcfIsdnDSigMulDialsRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDSigMulDialsRetryTimer.setStatus('mandatory')
fcfIsdnDSigMulDialsCycleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDSigMulDialsCycleTimer.setStatus('mandatory')
fcfIsdnDSigMulDialsCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDSigMulDialsCycleCount.setStatus('mandatory')
fcfIsdnDSigMulDialsTotalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDSigMulDialsTotalDuration.setStatus('mandatory')
fcfIsdnDSigLowLayerCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notTransmittedAndNotChecked", 1), ("transmittedAndNotChecked", 2), ("notTransmittedAndChecked", 3), ("transmittedAndChecked", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDSigLowLayerCompatibility.setStatus('mandatory')
fcfIsdnDSigHighLayerCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notTransmittedAndNotChecked", 1), ("transmittedAndNotChecked", 2), ("notTransmittedAndChecked", 3), ("transmittedAndChecked", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDSigHighLayerCompatibility.setStatus('mandatory')
fcfIsdnDSigHighLayerCharactIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(193, 128, 255))).clone(namedValues=NamedValues(("ccittOsiApplication", 193), ("nationalUnknownNetworkedService", 128), ("nationalNotStandardizedApplication", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDSigHighLayerCharactIdent.setStatus('mandatory')
fcfIsdnDChannelSigTimerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11), )
if mibBuilder.loadTexts: fcfIsdnDChannelSigTimerTable.setStatus('mandatory')
fcfIsdnDChannelSigTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1), ).setIndexNames((0, "PCE-MIB", "fcfIsdnDTimIsdnInterfaceId"))
if mibBuilder.loadTexts: fcfIsdnDChannelSigTimerEntry.setStatus('mandatory')
fcfIsdnDTimIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfIsdnDTimIsdnInterfaceId.setStatus('mandatory')
fcfIsdnDTimBChannelUpTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2550))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDTimBChannelUpTimer.setStatus('mandatory')
fcfIsdnDTimT301AlertConnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2550))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDTimT301AlertConnectTimer.setStatus('mandatory')
fcfIsdnDTimT303SetupResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDTimT303SetupResponseTimer.setStatus('mandatory')
fcfIsdnDTimT305DisconnectResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDTimT305DisconnectResponseTimer.setStatus('mandatory')
fcfIsdnDTimT308ReleaseResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDTimT308ReleaseResponseTimer.setStatus('mandatory')
fcfIsdnDTimT309DataLinkFailureTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDTimT309DataLinkFailureTimer.setStatus('mandatory')
fcfIsdnDTimT310CallProceedingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDTimT310CallProceedingTimer.setStatus('mandatory')
fcfIsdnDTimT313ConnectAcknowledgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 11, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnDTimT313ConnectAcknowledgeTimer.setStatus('mandatory')
fcfIsdnRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 20), )
if mibBuilder.loadTexts: fcfIsdnRemotePeerTable.setStatus('mandatory')
fcfIsdnRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 20, 1), ).setIndexNames((0, "PCE-MIB", "fcfIsdnRemRemotePeerId"))
if mibBuilder.loadTexts: fcfIsdnRemotePeerEntry.setStatus('mandatory')
fcfIsdnRemRemotePeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfIsdnRemRemotePeerId.setStatus('mandatory')
fcfIsdnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnRemStatus.setStatus('mandatory')
fcfIsdnRemIsdnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 20, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnRemIsdnNumber.setStatus('mandatory')
fcfIsdnRemCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 5, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 16, 48))).clone(namedValues=NamedValues(("calling", 32), ("called", 16), ("auto", 48)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfIsdnRemCallDirection.setStatus('mandatory')
fcfE1Ds1 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15))
fcfE1Ds1PhysTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 1), )
if mibBuilder.loadTexts: fcfE1Ds1PhysTable.setStatus('mandatory')
fcfE1Ds1PhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcfE1Ds1PhysIfId"))
if mibBuilder.loadTexts: fcfE1Ds1PhysEntry.setStatus('mandatory')
fcfE1Ds1PhysIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfE1Ds1PhysIfId.setStatus('mandatory')
fcfE1Ds1PhysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfE1Ds1PhysStatus.setStatus('mandatory')
fcfE1Ds1PhysPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfE1Ds1PhysPhysicalPort.setStatus('mandatory')
fcfE1PhysPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 3), )
if mibBuilder.loadTexts: fcfE1PhysPortTable.setStatus('mandatory')
fcfE1PhysPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 3, 1), ).setIndexNames((0, "PCE-MIB", "fcfE1PhysPortId"))
if mibBuilder.loadTexts: fcfE1PhysPortEntry.setStatus('mandatory')
fcfE1PhysPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfE1PhysPortId.setStatus('mandatory')
fcfE1PhysPortSynchSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("freeRun", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfE1PhysPortSynchSrc.setStatus('mandatory')
fcfE1PhysPortFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("doubleframe", 1), ("multiframeWithCrc4", 2), ("extendedCrc4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfE1PhysPortFraming.setStatus('mandatory')
fcfE1PhysPortFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("data", 1), ("voice", 2), ("voiceAndData", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfE1PhysPortFlowType.setStatus('mandatory')
fcfE1Ds1ChannelTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 5), )
if mibBuilder.loadTexts: fcfE1Ds1ChannelTable.setStatus('mandatory')
fcfE1Ds1ChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 5, 1), ).setIndexNames((0, "PCE-MIB", "fcfE1Ds1ChannelIfId"))
if mibBuilder.loadTexts: fcfE1Ds1ChannelEntry.setStatus('mandatory')
fcfE1Ds1ChannelIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(42, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfE1Ds1ChannelIfId.setStatus('mandatory')
fcfE1Ds1ChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfE1Ds1ChannelStatus.setStatus('mandatory')
fcfE1Ds1ChannelPhysIf = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfE1Ds1ChannelPhysIf.setStatus('mandatory')
fcfE1Ds1ChannelSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfE1Ds1ChannelSlots.setStatus('mandatory')
fcfE1Ds1DropInsertTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 10), )
if mibBuilder.loadTexts: fcfE1Ds1DropInsertTable.setStatus('mandatory')
fcfE1Ds1DropInsertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 10, 1), ).setIndexNames((0, "PCE-MIB", "fcfE1Ds1DropInsertIf1"), (0, "PCE-MIB", "fcfE1Ds1DropInsertIf2"))
if mibBuilder.loadTexts: fcfE1Ds1DropInsertEntry.setStatus('mandatory')
fcfE1Ds1DropInsertIf1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(42, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfE1Ds1DropInsertIf1.setStatus('mandatory')
fcfE1Ds1DropInsertIf2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(42, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfE1Ds1DropInsertIf2.setStatus('mandatory')
fcfE1Ds1DropInsertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 15, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfE1Ds1DropInsertStatus.setStatus('mandatory')
fcfTokenRing = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20))
fcfTokenRingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20, 1), )
if mibBuilder.loadTexts: fcfTokenRingTable.setStatus('mandatory')
fcfTokenRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcfTokenRingInterfaceId"))
if mibBuilder.loadTexts: fcfTokenRingEntry.setStatus('mandatory')
fcfTokenRingInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcfTokenRingInterfaceId.setStatus('mandatory')
fcfTokenRingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("s4000000", 1), ("s16000000", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfTokenRingSpeed.setStatus('mandatory')
fcfTokenRingLinkCheckPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfTokenRingLinkCheckPeriod.setStatus('mandatory')
fcfTokenRingCheckPeriodCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 10, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcfTokenRingCheckPeriodCount.setStatus('mandatory')
fcFrameRelaySwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 15))
fcFrSwitchingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1), )
if mibBuilder.loadTexts: fcFrSwitchingTable.setStatus('mandatory')
fcFrSwitchingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcFrSwInputInterfaceId"), (0, "PCE-MIB", "fcFrSwInputDlci"))
if mibBuilder.loadTexts: fcFrSwitchingEntry.setStatus('mandatory')
fcFrSwInputInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFrSwInputInterfaceId.setStatus('mandatory')
fcFrSwInputDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcFrSwInputDlci.setStatus('mandatory')
fcFrSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFrSwStatus.setStatus('mandatory')
fcFrSwOutputInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFrSwOutputInterfaceId.setStatus('mandatory')
fcFrSwOutputDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFrSwOutputDlci.setStatus('mandatory')
fcFrSwPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcFrSwPriority.setStatus('mandatory')
fcLogicalPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20))
fclLogicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 1), )
if mibBuilder.loadTexts: fclLogicalPortTable.setStatus('mandatory')
fclLogicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclLogPortId"))
if mibBuilder.loadTexts: fclLogicalPortEntry.setStatus('mandatory')
fclLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclLogPortId.setStatus('mandatory')
fclLogPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclLogPortStatus.setStatus('mandatory')
fclLogPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 30, 31, 32, 40, 41, 42, 45, 50))).clone(namedValues=NamedValues(("ethernet-tr", 1), ("asynchronous", 10), ("fra", 11), ("hdlc", 12), ("sdlc", 13), ("vip", 14), ("bsc3270", 15), ("bsc2780or3780", 16), ("bscSCT", 17), ("x25Access", 20), ("x25InDIsdn", 21), ("x25InBIsdn", 22), ("x25InPstn", 23), ("x25InterNode", 24), ("x25Mlp", 25), ("pppSerialLink", 30), ("pppPstn", 31), ("pppIsdn", 32), ("frCe", 40), ("frTe", 41), ("frSe", 42), ("frSeInBIsdn", 45), ("interUnitLink", 50)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclLogPortType.setStatus('mandatory')
fclEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 2))
fclEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 2, 1), )
if mibBuilder.loadTexts: fclEthernetTable.setStatus('mandatory')
fclEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclEthLogPortId"))
if mibBuilder.loadTexts: fclEthernetEntry.setStatus('mandatory')
fclEthLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclEthLogPortId.setStatus('mandatory')
fclEthInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclEthInterfaceId.setStatus('mandatory')
fclAsynchronousAccessLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5))
fclAsynLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1), )
if mibBuilder.loadTexts: fclAsynLogPortTable.setStatus('mandatory')
fclAsynLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynLpLogPortId"))
if mibBuilder.loadTexts: fclAsynLogPortEntry.setStatus('mandatory')
fclAsynLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynLpLogPortId.setStatus('mandatory')
fclAsynLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynLpInterfaceId.setStatus('mandatory')
fclAsynLpSubscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynLpSubscriberNumber.setStatus('mandatory')
fclAsynLpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynLpConfigId.setStatus('mandatory')
fclAsynLpTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 7, 6, 20))).clone(namedValues=NamedValues(("pad", 1), ("videotext", 2), ("lowSpeedComputerPort", 3), ("lowSpeedComputerPortWithAutoCalls", 4), ("kioskClient", 7), ("multiStandardPad", 6), ("x28Plus", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynLpTerminalType.setStatus('mandatory')
fclAsynPadLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2))
fclAsynPadLpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1), )
if mibBuilder.loadTexts: fclAsynPadLpTable.setStatus('mandatory')
fclAsynPadLpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynPadLpLogPortId"))
if mibBuilder.loadTexts: fclAsynPadLpEntry.setStatus('mandatory')
fclAsynPadLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynPadLpLogPortId.setStatus('mandatory')
fclAsynPadLpLink = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pstn", 1), ("leasedLine", 2), ("direct", 3), ("directWithRtsCtsFlowCtrl", 4), ("pstnV25bis", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynPadLpLink.setStatus('mandatory')
fclAsynPadLpSpeedDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynPadLpSpeedDetection.setStatus('mandatory')
fclAsynPadLpEquipment = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("hpHost", 2), ("hpTerminal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynPadLpEquipment.setStatus('mandatory')
fclAsynPadLpMnemonicType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pad", 1), ("vdxRemoteAuth", 2), ("vdxTeletel", 3), ("vdxLocalAuth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynPadLpMnemonicType.setStatus('mandatory')
fclAsynPadLpNui = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 7, 6, 4, 2, 3, 5, 11))).clone(namedValues=NamedValues(("none", 1), ("none-rc", 7), ("optional-transmitOrRc", 6), ("optional-checkNuaOrRc", 4), ("mandatory-check", 2), ("mandatory-check-nua", 3), ("mandatory-transmit", 5), ("command-transmitOrRc", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynPadLpNui.setStatus('mandatory')
fclAsynPadLpCombinedFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynPadLpCombinedFlowCtrl.setStatus('mandatory')
fclAsynPadHomePageTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 10), )
if mibBuilder.loadTexts: fclAsynPadHomePageTable.setStatus('mandatory')
fclAsynPadHomePageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 10, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynPadPageBlocId"))
if mibBuilder.loadTexts: fclAsynPadHomePageEntry.setStatus('mandatory')
fclAsynPadPageBlocId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynPadPageBlocId.setStatus('mandatory')
fclAsynPadPageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynPadPageStatus.setStatus('mandatory')
fclAsynPadPageMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynPadPageMessage.setStatus('mandatory')
fclAsynPadPageAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 2, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynPadPageAttributes.setStatus('mandatory')
fclAsynVdxLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3))
fclAsynVdxLpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1), )
if mibBuilder.loadTexts: fclAsynVdxLpTable.setStatus('mandatory')
fclAsynVdxLpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynVdxLpLogPortId"))
if mibBuilder.loadTexts: fclAsynVdxLpEntry.setStatus('mandatory')
fclAsynVdxLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynVdxLpLogPortId.setStatus('mandatory')
fclAsynVdxLpLink = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pstn", 1), ("leasedLine", 2), ("direct", 3), ("directWithRtsCtsFlowCtrl", 4), ("pstnV25bis", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynVdxLpLink.setStatus('mandatory')
fclAsynVdxLpMnemonicType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pad", 1), ("vdxRemoteAuth", 2), ("vdxTeletel", 3), ("vdxLocalAuth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynVdxLpMnemonicType.setStatus('mandatory')
fclAsynVdxLpNui = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 7, 6, 4, 2, 3, 5, 11))).clone(namedValues=NamedValues(("none", 1), ("none-rc", 7), ("optional-transmitOrRc", 6), ("optional-checkNuaOrRc", 4), ("mandatory-check", 2), ("mandatory-check-nua", 3), ("mandatory-transmit", 5), ("command-transmitOrRc", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynVdxLpNui.setStatus('mandatory')
fclAsynVdxLpParityBit = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("setTo1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynVdxLpParityBit.setStatus('mandatory')
fclAsynVdxLpPceSubThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynVdxLpPceSubThreshold.setStatus('mandatory')
fclAsynVdxLpPceNackTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynVdxLpPceNackTimer.setStatus('mandatory')
fclAsynVdxHomePageTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 10), )
if mibBuilder.loadTexts: fclAsynVdxHomePageTable.setStatus('mandatory')
fclAsynVdxHomePageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 10, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynVdxPageBlocId"))
if mibBuilder.loadTexts: fclAsynVdxHomePageEntry.setStatus('mandatory')
fclAsynVdxPageBlocId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynVdxPageBlocId.setStatus('mandatory')
fclAsynVdxPageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynVdxPageStatus.setStatus('mandatory')
fclAsynVdxPageMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynVdxPageMessage.setStatus('mandatory')
fclAsynVdxPageAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 3, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynVdxPageAttributes.setStatus('mandatory')
fclAsynLowSpeedCpLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 4))
fclAsynLscpLpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 4, 1), )
if mibBuilder.loadTexts: fclAsynLscpLpTable.setStatus('mandatory')
fclAsynLscpLpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 4, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynLscpLpLogPortId"))
if mibBuilder.loadTexts: fclAsynLscpLpEntry.setStatus('mandatory')
fclAsynLscpLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynLscpLpLogPortId.setStatus('mandatory')
fclAsynLscpLpLink = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("leasedLine", 2), ("direct", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynLscpLpLink.setStatus('mandatory')
fclAsynLscpLpEquipment = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("hpHost", 2), ("hpTerminal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynLscpLpEquipment.setStatus('mandatory')
fclAsynMultiStandardPadLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5))
fclAsynMultiLpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1), )
if mibBuilder.loadTexts: fclAsynMultiLpTable.setStatus('mandatory')
fclAsynMultiLpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynMultiLpLogPortId"))
if mibBuilder.loadTexts: fclAsynMultiLpEntry.setStatus('mandatory')
fclAsynMultiLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynMultiLpLogPortId.setStatus('mandatory')
fclAsynMultiLpAuthStep1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("tfi-noParity", 2), ("tfi-evenParity", 3), ("enquire", 4), ("ter", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMultiLpAuthStep1.setStatus('mandatory')
fclAsynMultiLpAuthStep2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("tfi-noParity", 2), ("tfi-evenParity", 3), ("enquire", 4), ("ter", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMultiLpAuthStep2.setStatus('mandatory')
fclAsynMultiLpAuthStep3 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("tfi-noParity", 2), ("tfi-evenParity", 3), ("enquire", 4), ("ter", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMultiLpAuthStep3.setStatus('mandatory')
fclAsynMultiLpAuthStep4 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("tfi-noParity", 2), ("tfi-evenParity", 3), ("enquire", 4), ("ter", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMultiLpAuthStep4.setStatus('mandatory')
fclAsynX28PlusLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6))
fclAsynX28PlusLpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1), )
if mibBuilder.loadTexts: fclAsynX28PlusLpTable.setStatus('mandatory')
fclAsynX28PlusLpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynX28PlusLpLogPortId"))
if mibBuilder.loadTexts: fclAsynX28PlusLpEntry.setStatus('mandatory')
fclAsynX28PlusLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynX28PlusLpLogPortId.setStatus('mandatory')
fclAsynX28PlusLpLink = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pstn", 1), ("leasedLine", 2), ("direct", 3), ("directWithRtsCtsFlowCtrl", 4), ("pstnV25bis", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpLink.setStatus('mandatory')
fclAsynX28PlusLpSpeedDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpSpeedDetection.setStatus('mandatory')
fclAsynX28PlusLpEquipment = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("hpHost", 2), ("hpTerminal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpEquipment.setStatus('mandatory')
fclAsynX28PlusLpMnemonicType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pad", 1), ("vdxRemoteAuth", 2), ("vdxTeletel", 3), ("vdxLocalAuth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpMnemonicType.setStatus('mandatory')
fclAsynX28PlusLpFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpFullDuplex.setStatus('mandatory')
fclAsynX28PlusLpIdleTimerSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpIdleTimerSelection.setStatus('mandatory')
fclAsynX28PlusLpIdleTimerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12750))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpIdleTimerDelay.setStatus('mandatory')
fclAsynX28PlusLpX3Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparent", 1), ("networkVirtualTerminal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpX3Mode.setStatus('mandatory')
fclAsynX28PlusLpEscapeDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpEscapeDigit.setStatus('mandatory')
fclAsynX28PlusLpConIdTelenet = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpConIdTelenet.setStatus('mandatory')
fclAsynX28PlusLpConIdRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpConIdRemote.setStatus('mandatory')
fclAsynX28PlusLpRemPrSentOnCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("never", 1), ("inBound", 2), ("outBound", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpRemPrSentOnCalls.setStatus('mandatory')
fclAsynX28PlusLpEasyMnemo = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpEasyMnemo.setStatus('mandatory')
fclAsynX28PlusLpMonSignalCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpMonSignalCTS.setStatus('mandatory')
fclAsynX28PlusLpMonSignalDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpMonSignalDSR.setStatus('mandatory')
fclAsynX28PlusLpMonSignalDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusLpMonSignalDCD.setStatus('mandatory')
fclAsynX28PlusGeneralParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 2))
fclAsynX28PlusGenParDNIC = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusGenParDNIC.setStatus('mandatory')
fclAsynX28PlusConfTELENETTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 3), )
if mibBuilder.loadTexts: fclAsynX28PlusConfTELENETTable.setStatus('mandatory')
fclAsynX28PlusConfTELENETEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 3, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynX28PlusCfgTELENETConfigId"))
if mibBuilder.loadTexts: fclAsynX28PlusConfTELENETEntry.setStatus('mandatory')
fclAsynX28PlusCfgTELENETConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynX28PlusCfgTELENETConfigId.setStatus('mandatory')
fclAsynX28PlusCfgTELENETDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusCfgTELENETDescription.setStatus('mandatory')
fclAsynX28PlusParTELENETTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4), )
if mibBuilder.loadTexts: fclAsynX28PlusParTELENETTable.setStatus('mandatory')
fclAsynX28PlusParTELENETEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynX28PlusParTelConfigId"))
if mibBuilder.loadTexts: fclAsynX28PlusParTELENETEntry.setStatus('mandatory')
fclAsynX28PlusParTelConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynX28PlusParTelConfigId.setStatus('mandatory')
fclAsynX28PlusParTelLpFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusParTelLpFullDuplex.setStatus('mandatory')
fclAsynX28PlusParTelLpIdleTimerSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusParTelLpIdleTimerSelection.setStatus('mandatory')
fclAsynX28PlusParTelLpIdleTimerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12750))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusParTelLpIdleTimerDelay.setStatus('mandatory')
fclAsynX28PlusParTelLpX3Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transparent", 1), ("networkVirtualTerminal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusParTelLpX3Mode.setStatus('mandatory')
fclAsynX28PlusConfRemoteTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 5), )
if mibBuilder.loadTexts: fclAsynX28PlusConfRemoteTable.setStatus('mandatory')
fclAsynX28PlusConfRemoteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 5, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynX28PlusRemoteConfigId"))
if mibBuilder.loadTexts: fclAsynX28PlusConfRemoteEntry.setStatus('mandatory')
fclAsynX28PlusRemoteConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynX28PlusRemoteConfigId.setStatus('mandatory')
fclAsynX28PlusRemoteCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemoteCfgDescription.setStatus('mandatory')
fclAsynX28PlusRemoteCfgX3Part1Table = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6), )
if mibBuilder.loadTexts: fclAsynX28PlusRemoteCfgX3Part1Table.setStatus('mandatory')
fclAsynX28PlusRemoteCfgX3Part1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynX28PlusRemConfigId"))
if mibBuilder.loadTexts: fclAsynX28PlusRemoteCfgX3Part1Entry.setStatus('mandatory')
fclAsynX28PlusRemConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynX28PlusRemConfigId.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P01EscapeChar = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P01EscapeChar.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P02Echo = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("val0-off", 1), ("val1-on", 2), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P02Echo.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P03ForwardingChar = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7, 19, 33, 127, 128, 129, 254, 255))).clone(namedValues=NamedValues(("val0-none", 1), ("val2-cr", 3), ("val6-crEscBelEnqAck", 7), ("val18-crEotEtx", 19), ("val32-htLfVtFf", 33), ("val126-allCtrlChars", 127), ("val127-allChars", 128), ("val128-allCtrlChars-vdxFunctionKeys", 129), ("val253-encapsCharacSLIP", 254), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P03ForwardingChar.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P04IdleTimerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P04IdleTimerDelay.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P05OutputFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9, 255))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-xonXoffInTransfer", 2), ("val2-xonXoff", 3), ("val8-rtsCtsInTransfer", 9), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P05OutputFlowCtrl.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P06ServiceSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 10, 14, 255))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-servSignal-stdFormat", 2), ("val5-servSignalAndPrompt-stdFormat", 6), ("val9-servSignal-explicitFormat", 10), ("val13-servSignalAndPrompt-explicitFormat", 14), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P06ServiceSignals.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P07BreakHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 9, 22, 255))).clone(namedValues=NamedValues(("val0-forwardingChar", 1), ("val1-interrupt", 2), ("val2-reset", 3), ("val4-breakIndication", 5), ("val5-interrupt-breakIndication", 6), ("val8-escapeFromTransfer", 9), ("val21-interrupt-breakIndication-discardOutput", 22), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P07BreakHandling.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P08OutputDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("val0-off", 1), ("val1-on", 2), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P08OutputDiscard.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P09CrPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P09CrPadding.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P10LineFolding = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P10LineFolding.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P11BinarySpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 18, 21, 22, 23, 255))).clone(namedValues=NamedValues(("val0-110", 1), ("val1-134-5", 2), ("val2-300", 3), ("val3-1200", 4), ("val4-600", 5), ("val5-75", 6), ("val6-150", 7), ("val7-1800", 8), ("val8-200", 9), ("val9-100", 10), ("val10-50", 11), ("val11-in75Out1200", 12), ("val12-2400", 13), ("val13-4800", 14), ("val14-9600", 15), ("val15-19200", 16), ("val23-28800", 24), ("val17-57600", 18), ("val20-38400", 21), ("val21-out1200In75", 22), ("val22-115200", 23), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P11BinarySpeed.setStatus('mandatory')
fclAsynX28PlusRemoteCfgX3Part2Table = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7), )
if mibBuilder.loadTexts: fclAsynX28PlusRemoteCfgX3Part2Table.setStatus('mandatory')
fclAsynX28PlusRemoteCfgX3Part2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynX28PlusRemCfgX3Part2ConfigId"))
if mibBuilder.loadTexts: fclAsynX28PlusRemoteCfgX3Part2Entry.setStatus('mandatory')
fclAsynX28PlusRemCfgX3Part2ConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3Part2ConfigId.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P12InputFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9, 255))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-xonXoff", 2), ("val8-rtsCts", 9), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P12InputFlowCtrl.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P13LfInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-outCr", 2), ("val2-inCr", 3), ("val3-outCr-inCr", 4), ("val4-outCrEcho", 5), ("val5-outCr-outCrEcho", 6), ("val6-inCr-outCrEcho", 7), ("val7-outCr-inCr-outCrEcho", 8), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P13LfInsertion.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P14LfPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P14LfPadding.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P15Editing = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("val0-off", 1), ("val1-on", 2), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P15Editing.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P16CharDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P16CharDelete.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P17LineDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P17LineDelete.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P18LineDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P18LineDisplay.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P19EditingSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-printingTerminal", 2), ("val2-displayTerminal", 3), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P19EditingSignal.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P20EchoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P20EchoMask.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P21Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-check", 2), ("val2-generate", 3), ("val3-check-generate", 4), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P21Parity.setStatus('mandatory')
fclAsynX28PlusRemCfgX3P22PageWait = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 7, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgX3P22PageWait.setStatus('mandatory')
fclAsynX28PlusRemoteTELENETTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8), )
if mibBuilder.loadTexts: fclAsynX28PlusRemoteTELENETTable.setStatus('mandatory')
fclAsynX28PlusRemoteTELENETEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynX28PlusRemCfgTELENETConfigId"))
if mibBuilder.loadTexts: fclAsynX28PlusRemoteTELENETEntry.setStatus('mandatory')
fclAsynX28PlusRemCfgTELENETConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynX28PlusRemCfgTELENETConfigId.setStatus('mandatory')
fclAsynX28PlusRemLpFullDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemLpFullDuplex.setStatus('mandatory')
fclAsynX28PlusRemLpIdleTimerSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemLpIdleTimerSelection.setStatus('mandatory')
fclAsynX28PlusRemLpIdleTimerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12750))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemLpIdleTimerDelay.setStatus('mandatory')
fclAsynX28PlusRemLpX3Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 6, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("transparent", 1), ("networkVirtualTerminal", 2), ("not-used", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynX28PlusRemLpX3Mode.setStatus('mandatory')
fclAsynGeneralParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 7))
fclAsynGenParLanguageType = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("french", 1), ("english", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynGenParLanguageType.setStatus('mandatory')
fclAsynConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10))
fclAsynCfgConfigTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1), )
if mibBuilder.loadTexts: fclAsynCfgConfigTable.setStatus('mandatory')
fclAsynCfgConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynCfgConfigId"))
if mibBuilder.loadTexts: fclAsynCfgConfigEntry.setStatus('mandatory')
fclAsynCfgConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynCfgConfigId.setStatus('mandatory')
fclAsynCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgStatus.setStatus('mandatory')
fclAsynCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgDescription.setStatus('mandatory')
fclAsynCfgX3ProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3ProfileId.setStatus('mandatory')
fclAsynCfgX3ModifCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynCfgX3ModifCount.setStatus('mandatory')
fclAsynCfgConnectionProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgConnectionProfileId.setStatus('mandatory')
fclAsynCfgConnModifCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynCfgConnModifCount.setStatus('mandatory')
fclAsynCfgX3Part1Table = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11), )
if mibBuilder.loadTexts: fclAsynCfgX3Part1Table.setStatus('mandatory')
fclAsynCfgX3Part1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynCfgX3Part1ConfigId"))
if mibBuilder.loadTexts: fclAsynCfgX3Part1Entry.setStatus('mandatory')
fclAsynCfgX3Part1ConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynCfgX3Part1ConfigId.setStatus('mandatory')
fclAsynCfgX3Part1ProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynCfgX3Part1ProfileId.setStatus('mandatory')
fclAsynCfgX3P01EscapeChar = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P01EscapeChar.setStatus('mandatory')
fclAsynCfgX3P02Echo = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("val0-off", 1), ("val1-on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P02Echo.setStatus('mandatory')
fclAsynCfgX3P03ForwardingChar = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7, 19, 33, 127, 128, 129, 254, 255))).clone(namedValues=NamedValues(("val0-none", 1), ("val2-cr", 3), ("val6-crEscBelEnqAck", 7), ("val18-crEotEtx", 19), ("val32-htLfVtFf", 33), ("val126-allCtrlChars", 127), ("val127-allChars", 128), ("val128-allCtrlChars-vdxFunctionKeys", 129), ("val253-encapsCharacSLIP", 254), ("val254-encapsCharacPPP", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P03ForwardingChar.setStatus('mandatory')
fclAsynCfgX3P04IdleTimerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P04IdleTimerDelay.setStatus('mandatory')
fclAsynCfgX3P05OutputFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-xonXoffInTransfer", 2), ("val2-xonXoff", 3), ("val8-rtsCtsInTransfer", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P05OutputFlowCtrl.setStatus('mandatory')
fclAsynCfgX3P06ServiceSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 10, 14))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-servSignal-stdFormat", 2), ("val5-servSignalAndPrompt-stdFormat", 6), ("val9-servSignal-explicitFormat", 10), ("val13-servSignalAndPrompt-explicitFormat", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P06ServiceSignals.setStatus('mandatory')
fclAsynCfgX3P07BreakHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 9, 22))).clone(namedValues=NamedValues(("val0-forwardingChar", 1), ("val1-interrupt", 2), ("val2-reset", 3), ("val4-breakIndication", 5), ("val5-interrupt-breakIndication", 6), ("val8-escapeFromTransfer", 9), ("val21-interrupt-breakIndication-discardOutput", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P07BreakHandling.setStatus('mandatory')
fclAsynCfgX3P08OutputDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("val0-off", 1), ("val1-on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P08OutputDiscard.setStatus('mandatory')
fclAsynCfgX3P09CrPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P09CrPadding.setStatus('mandatory')
fclAsynCfgX3P10LineFolding = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P10LineFolding.setStatus('mandatory')
fclAsynCfgX3P11BinarySpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 11, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 18, 21, 22, 23))).clone(namedValues=NamedValues(("val0-110", 1), ("val1-134-5", 2), ("val2-300", 3), ("val3-1200", 4), ("val4-600", 5), ("val5-75", 6), ("val6-150", 7), ("val7-1800", 8), ("val8-200", 9), ("val9-100", 10), ("val10-50", 11), ("val11-in75Out1200", 12), ("val12-2400", 13), ("val13-4800", 14), ("val14-9600", 15), ("val15-19200", 16), ("val23-28800", 24), ("val17-57600", 18), ("val20-38400", 21), ("val21-out1200In75", 22), ("val22-115200", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P11BinarySpeed.setStatus('mandatory')
fclAsynCfgX3Part2Table = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12), )
if mibBuilder.loadTexts: fclAsynCfgX3Part2Table.setStatus('mandatory')
fclAsynCfgX3Part2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynCfgX3Part2ConfigId"))
if mibBuilder.loadTexts: fclAsynCfgX3Part2Entry.setStatus('mandatory')
fclAsynCfgX3Part2ConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynCfgX3Part2ConfigId.setStatus('mandatory')
fclAsynCfgX3Part2ProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynCfgX3Part2ProfileId.setStatus('mandatory')
fclAsynCfgX3P12InputFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-xonXoff", 2), ("val8-rtsCts", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P12InputFlowCtrl.setStatus('mandatory')
fclAsynCfgX3P13LfInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-outCr", 2), ("val2-inCr", 3), ("val3-outCr-inCr", 4), ("val4-outCrEcho", 5), ("val5-outCr-outCrEcho", 6), ("val6-inCr-outCrEcho", 7), ("val7-outCr-inCr-outCrEcho", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P13LfInsertion.setStatus('mandatory')
fclAsynCfgX3P14LfPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P14LfPadding.setStatus('mandatory')
fclAsynCfgX3P15Editing = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("val0-off", 1), ("val1-on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P15Editing.setStatus('mandatory')
fclAsynCfgX3P16CharDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P16CharDelete.setStatus('mandatory')
fclAsynCfgX3P17LineDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P17LineDelete.setStatus('mandatory')
fclAsynCfgX3P18LineDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P18LineDisplay.setStatus('mandatory')
fclAsynCfgX3P19EditingSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-printingTerminal", 2), ("val2-displayTerminal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P19EditingSignal.setStatus('mandatory')
fclAsynCfgX3P20EchoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P20EchoMask.setStatus('mandatory')
fclAsynCfgX3P21Parity = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-check", 2), ("val2-generate", 3), ("val3-check-generate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P21Parity.setStatus('mandatory')
fclAsynCfgX3P22PageWait = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 12, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3P22PageWait.setStatus('mandatory')
fclAsynCfgX3UserProfilePart1 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15))
fclAsynCfgX3UserProfileId = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynCfgX3UserProfileId.setStatus('mandatory')
fclAsynCfgX3UserProfileDesc = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserProfileDesc.setStatus('mandatory')
fclAsynCfgX3UserP01EscapeChar = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP01EscapeChar.setStatus('mandatory')
fclAsynCfgX3UserP02Echo = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("val0-off", 1), ("val1-on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP02Echo.setStatus('mandatory')
fclAsynCfgX3UserP03ForwardingChar = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7, 19, 33, 127, 128, 129, 254, 255))).clone(namedValues=NamedValues(("val0-none", 1), ("val2-cr", 3), ("val6-crEscBelEnqAck", 7), ("val18-crEotEtx", 19), ("val32-htLfVtFf", 33), ("val126-allCtrlChars", 127), ("val127-allChars", 128), ("val128-allCtrlChars-vdxFunctionKeys", 129), ("val253-encapsCharacSLIP", 254), ("val254-encapsCharacPPP", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP03ForwardingChar.setStatus('mandatory')
fclAsynCfgX3UserP04IdleTimerDelay = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP04IdleTimerDelay.setStatus('mandatory')
fclAsynCfgX3UserP05OutputFlowCtrl = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-xonXoffInTransfer", 2), ("val2-xonXoff", 3), ("val8-rtsCtsInTransfer", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP05OutputFlowCtrl.setStatus('mandatory')
fclAsynCfgX3UserP06ServiceSignals = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 10, 14))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-servSignal-stdFormat", 2), ("val5-servSignalAndPrompt-stdFormat", 6), ("val9-servSignal-explicitFormat", 10), ("val13-servSignalAndPrompt-explicitFormat", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP06ServiceSignals.setStatus('mandatory')
fclAsynCfgX3UserP07BreakHandling = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 9, 22))).clone(namedValues=NamedValues(("val0-forwardingChar", 1), ("val1-interrupt", 2), ("val2-reset", 3), ("val4-breakIndication", 5), ("val5-interrupt-breakIndication", 6), ("val8-escapeFromTransfer", 9), ("val21-interrupt-breakIndication-discardOutput", 22)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP07BreakHandling.setStatus('mandatory')
fclAsynCfgX3UserP08OutputDiscard = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("val0-off", 1), ("val1-on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP08OutputDiscard.setStatus('mandatory')
fclAsynCfgX3UserP09CrPadding = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP09CrPadding.setStatus('mandatory')
fclAsynCfgX3UserP10LineFolding = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP10LineFolding.setStatus('mandatory')
fclAsynCfgX3UserP11BinarySpeed = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 15, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 18, 21, 22, 23))).clone(namedValues=NamedValues(("val0-110", 1), ("val1-134-5", 2), ("val2-300", 3), ("val3-1200", 4), ("val4-600", 5), ("val5-75", 6), ("val6-150", 7), ("val7-1800", 8), ("val8-200", 9), ("val9-100", 10), ("val10-50", 11), ("val11-75-1200", 12), ("val12-2400", 13), ("val13-4800", 14), ("val14-9600", 15), ("val15-19200", 16), ("val23-28800", 24), ("val17-57600", 18), ("val20-38400", 21), ("val21-1200-75", 22), ("val22-115200", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP11BinarySpeed.setStatus('mandatory')
fclAsynCfgX3UserProfilePart2 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16))
fclAsynCfgX3UserP12InputFlowCtrl = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 9))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-xonXoff", 2), ("val8-rtsCts", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP12InputFlowCtrl.setStatus('mandatory')
fclAsynCfgX3UserP13LfInsertion = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-outCr", 2), ("val2-inCr", 3), ("val3-outCr-inCr", 4), ("val4-outCrEcho", 5), ("val5-outCr-outCrEcho", 6), ("val6-inCr-outCrEcho", 7), ("val7-outCr-inCr-outCrEcho", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP13LfInsertion.setStatus('mandatory')
fclAsynCfgX3UserP14LfPadding = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP14LfPadding.setStatus('mandatory')
fclAsynCfgX3UserP15Editing = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("val0-off", 1), ("val1-on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP15Editing.setStatus('mandatory')
fclAsynCfgX3UserP16CharDelete = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP16CharDelete.setStatus('mandatory')
fclAsynCfgX3UserP17LineDelete = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP17LineDelete.setStatus('mandatory')
fclAsynCfgX3UserP18LineDisplay = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP18LineDisplay.setStatus('mandatory')
fclAsynCfgX3UserP19EditingSignal = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-printingTerminal", 2), ("val2-displayTerminal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP19EditingSignal.setStatus('mandatory')
fclAsynCfgX3UserP20EchoMask = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP20EchoMask.setStatus('mandatory')
fclAsynCfgX3UserP21Parity = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("val0-none", 1), ("val1-check", 2), ("val2-generate", 3), ("val3-check-generate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP21Parity.setStatus('mandatory')
fclAsynCfgX3UserP22PageWait = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 16, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgX3UserP22PageWait.setStatus('mandatory')
fclAsynCfgConnLinkTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21), )
if mibBuilder.loadTexts: fclAsynCfgConnLinkTable.setStatus('mandatory')
fclAsynCfgConnLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynCfgLinkConfigId"))
if mibBuilder.loadTexts: fclAsynCfgConnLinkEntry.setStatus('mandatory')
fclAsynCfgLinkConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynCfgLinkConfigId.setStatus('mandatory')
fclAsynCfgLinkXonXoffParity = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("none", 3), ("even", 1), ("odd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgLinkXonXoffParity.setStatus('mandatory')
fclAsynCfgLinkServSignalParity = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("none", 3), ("even", 1), ("odd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgLinkServSignalParity.setStatus('mandatory')
fclAsynCfgLinkDataParity = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 2))).clone(namedValues=NamedValues(("none", 1), ("even", 4), ("odd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgLinkDataParity.setStatus('mandatory')
fclAsynCfgLinkBitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgLinkBitCount.setStatus('mandatory')
fclAsynCfgLinkStopBitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8, 12))).clone(namedValues=NamedValues(("one", 4), ("oneAndAHalf", 8), ("two", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgLinkStopBitCount.setStatus('mandatory')
fclAsynCfgLinkXonXoffSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgLinkXonXoffSignal.setStatus('mandatory')
fclAsynCfgLinkInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgLinkInactivityTimer.setStatus('mandatory')
fclAsynCfgLinkBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgLinkBlockSize.setStatus('mandatory')
fclAsynCfgLinkCallResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 21, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgLinkCallResponseTimer.setStatus('mandatory')
fclAsynCfgConnFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25), )
if mibBuilder.loadTexts: fclAsynCfgConnFacilityTable.setStatus('mandatory')
fclAsynCfgConnFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynCfgFacConfigId"))
if mibBuilder.loadTexts: fclAsynCfgConnFacilityEntry.setStatus('mandatory')
fclAsynCfgFacConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynCfgFacConfigId.setStatus('mandatory')
fclAsynCfgFacClosedUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3))).clone(namedValues=NamedValues(("noCheck", 2), ("clear", 1), ("subscribe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacClosedUserGroup.setStatus('mandatory')
fclAsynCfgFacReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("refuse", 1), ("accept", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacReverseCharging.setStatus('mandatory')
fclAsynCfgFacThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("subscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacThroughputClass.setStatus('mandatory')
fclAsynCfgFacDefOutThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacDefOutThroughputClass.setStatus('mandatory')
fclAsynCfgFacDefInThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacDefInThroughputClass.setStatus('mandatory')
fclAsynCfgFacMaxOutThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacMaxOutThroughputClass.setStatus('mandatory')
fclAsynCfgFacMaxInThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacMaxInThroughputClass.setStatus('mandatory')
fclAsynCfgFacPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("subscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacPacketSize.setStatus('mandatory')
fclAsynCfgFacDefOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacDefOutPacketSize.setStatus('mandatory')
fclAsynCfgFacDefInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacDefInPacketSize.setStatus('mandatory')
fclAsynCfgFacMaxOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacMaxOutPacketSize.setStatus('mandatory')
fclAsynCfgFacMaxInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacMaxInPacketSize.setStatus('mandatory')
fclAsynCfgFacMinOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacMinOutPacketSize.setStatus('mandatory')
fclAsynCfgFacMinInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacMinInPacketSize.setStatus('mandatory')
fclAsynCfgFacWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("subscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacWindowSize.setStatus('mandatory')
fclAsynCfgFacDefOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacDefOutWindowSize.setStatus('mandatory')
fclAsynCfgFacDefInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacDefInWindowSize.setStatus('mandatory')
fclAsynCfgFacMaxOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacMaxOutWindowSize.setStatus('mandatory')
fclAsynCfgFacMaxInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 25, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgFacMaxInWindowSize.setStatus('mandatory')
fclAsynCfgConnServiceTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30), )
if mibBuilder.loadTexts: fclAsynCfgConnServiceTable.setStatus('mandatory')
fclAsynCfgConnServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynCfgSerConfigId"))
if mibBuilder.loadTexts: fclAsynCfgConnServiceEntry.setStatus('mandatory')
fclAsynCfgSerConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynCfgSerConfigId.setStatus('mandatory')
fclAsynCfgSerCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("networkToSubscriber", 2), ("subscriberToNetwork", 3), ("bothway", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerCompression.setStatus('mandatory')
fclAsynCfgSerCompressNegociation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onOptionalCompression", 2), ("onMandatoryCompression", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerCompressNegociation.setStatus('mandatory')
fclAsynCfgSerCompressScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerCompressScrambling.setStatus('mandatory')
fclAsynCfgSerCompressMultiPacketsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerCompressMultiPacketsTimer.setStatus('mandatory')
fclAsynCfgSerX29Reselection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerX29Reselection.setStatus('mandatory')
fclAsynCfgSerCallReturnTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerCallReturnTransmission.setStatus('mandatory')
fclAsynCfgSerDBitModification = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("clear", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerDBitModification.setStatus('mandatory')
fclAsynCfgSerReliableVc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2, 4))).clone(namedValues=NamedValues(("off", 1), ("clear", 3), ("subscribe", 2), ("check", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerReliableVc.setStatus('mandatory')
fclAsynCfgSerCos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1))).clone(namedValues=NamedValues(("ubr", 3), ("vbr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerCos.setStatus('mandatory')
fclAsynCfgSerCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerCir.setStatus('mandatory')
fclAsynCfgSerMinCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerMinCir.setStatus('mandatory')
fclAsynCfgSerConversionAimedPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerConversionAimedPoint.setStatus('mandatory')
fclAsynCfgSerConversionIncomingCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerConversionIncomingCall.setStatus('mandatory')
fclAsynCfgSerConversionOutgoingCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerConversionOutgoingCall.setStatus('mandatory')
fclAsynCfgSerConversionAddressCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 10, 30, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("onIncomingCall", 2), ("onOutgoingCall", 3), ("onIncomingCallAndOutgoingCall", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynCfgSerConversionAddressCheck.setStatus('mandatory')
fclAsynAutoCalls = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20))
fclAsynAutoCallTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1), )
if mibBuilder.loadTexts: fclAsynAutoCallTable.setStatus('mandatory')
fclAsynAutoCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynAutoLogPortId"))
if mibBuilder.loadTexts: fclAsynAutoCallEntry.setStatus('mandatory')
fclAsynAutoLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynAutoLogPortId.setStatus('mandatory')
fclAsynAutoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoStatus.setStatus('mandatory')
fclAsynAutoCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoCalledAddr.setStatus('mandatory')
fclAsynAutoFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("reverseCharging", 2), ("cug", 3), ("reverseCharging-cug", 4), ("throughputClass", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoFacility.setStatus('mandatory')
fclAsynAutoFacThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoFacThroughputClass.setStatus('mandatory')
fclAsynAutoCallUserDataAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoCallUserDataAscii.setStatus('mandatory')
fclAsynAutoCallUserDataHexa = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoCallUserDataHexa.setStatus('mandatory')
fclAsynAutoMinimumRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoMinimumRecallTimer.setStatus('mandatory')
fclAsynAutoDiscardCharDuringTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoDiscardCharDuringTimer.setStatus('mandatory')
fclAsynAutoVdxKeyTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2), )
if mibBuilder.loadTexts: fclAsynAutoVdxKeyTranslationTable.setStatus('mandatory')
fclAsynAutoVdxKeyTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynAutoTransLpId"))
if mibBuilder.loadTexts: fclAsynAutoVdxKeyTranslationEntry.setStatus('mandatory')
fclAsynAutoTransLpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynAutoTransLpId.setStatus('mandatory')
fclAsynAutoTransTranscoding = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoTransTranscoding.setStatus('mandatory')
fclAsynAutoTransProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("p1", 1), ("p2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoTransProfile.setStatus('mandatory')
fclAsynAutoTransAutoTermMode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoTransAutoTermMode.setStatus('mandatory')
fclAsynAutoTransCFKeyHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoTransCFKeyHandling.setStatus('mandatory')
fclAsynAutoTransClearHangUp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynAutoTransClearHangUp.setStatus('mandatory')
fclAsynMnemonic = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21))
fclAsynMnemonicTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1), )
if mibBuilder.loadTexts: fclAsynMnemonicTable.setStatus('mandatory')
fclAsynMnemonicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynMneMnemonicId"))
if mibBuilder.loadTexts: fclAsynMnemonicEntry.setStatus('mandatory')
fclAsynMneMnemonicId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynMneMnemonicId.setStatus('mandatory')
fclAsynMneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMneStatus.setStatus('mandatory')
fclAsynMneName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMneName.setStatus('mandatory')
fclAsynMneCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMneCalledAddr.setStatus('mandatory')
fclAsynMneFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("reverseCharging", 2), ("cug", 3), ("reverseCharging-cug", 4), ("throughputClass", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMneFacility.setStatus('mandatory')
fclAsynMneFacThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMneFacThroughputClass.setStatus('mandatory')
fclAsynMneCallUserDataAscii = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMneCallUserDataAscii.setStatus('mandatory')
fclAsynMneCallUserDataHexa = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMneCallUserDataHexa.setStatus('mandatory')
fclAsynMneVdxKeyTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2), )
if mibBuilder.loadTexts: fclAsynMneVdxKeyTranslationTable.setStatus('mandatory')
fclAsynMneVdxKeyTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynMneTransMnemonicId"))
if mibBuilder.loadTexts: fclAsynMneVdxKeyTranslationEntry.setStatus('mandatory')
fclAsynMneTransMnemonicId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynMneTransMnemonicId.setStatus('mandatory')
fclAsynMneTransName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynMneTransName.setStatus('mandatory')
fclAsynMneTransTranscoding = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMneTransTranscoding.setStatus('mandatory')
fclAsynMneTransProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("p1", 1), ("p2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMneTransProfile.setStatus('mandatory')
fclAsynMneTransAutoTermMode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMneTransAutoTermMode.setStatus('mandatory')
fclAsynMneTransCFKeyHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMneTransCFKeyHandling.setStatus('mandatory')
fclAsynMneTransClearHangUp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 21, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynMneTransClearHangUp.setStatus('mandatory')
fclAsynPstnRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 25), )
if mibBuilder.loadTexts: fclAsynPstnRemotePeerTable.setStatus('mandatory')
fclAsynPstnRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 25, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynPstnRemX121Addr"))
if mibBuilder.loadTexts: fclAsynPstnRemotePeerEntry.setStatus('mandatory')
fclAsynPstnRemX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 25, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynPstnRemX121Addr.setStatus('mandatory')
fclAsynPstnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynPstnRemStatus.setStatus('mandatory')
fclAsynPstnRemPstnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 25, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynPstnRemPstnNumber.setStatus('mandatory')
fclAsynNetUserTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 26), )
if mibBuilder.loadTexts: fclAsynNetUserTable.setStatus('mandatory')
fclAsynNetUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 26, 1), ).setIndexNames((0, "PCE-MIB", "fclAsynNetUserId"))
if mibBuilder.loadTexts: fclAsynNetUserEntry.setStatus('mandatory')
fclAsynNetUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclAsynNetUserId.setStatus('mandatory')
fclAsynNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynNetStatus.setStatus('mandatory')
fclAsynNetNui = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 26, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynNetNui.setStatus('mandatory')
fclAsynNetNua = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 5, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclAsynNetNua.setStatus('mandatory')
fclFrameRelayAccessLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13))
fclFraLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1), )
if mibBuilder.loadTexts: fclFraLogPortTable.setStatus('mandatory')
fclFraLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclFraLpLogPortId"))
if mibBuilder.loadTexts: fclFraLogPortEntry.setStatus('mandatory')
fclFraLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFraLpLogPortId.setStatus('mandatory')
fclFraLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpInterfaceId.setStatus('mandatory')
fclFraLpLmi = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("lmiUni", 2), ("lmiNui", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpLmi.setStatus('mandatory')
fclFraLpGroupingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 97))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpGroupingThreshold.setStatus('mandatory')
fclFraLpFecnBecnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 98))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpFecnBecnThreshold.setStatus('mandatory')
fclFraLpDeDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpDeDiscardThreshold.setStatus('mandatory')
fclFraLpAllDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpAllDiscardThreshold.setStatus('mandatory')
fclFraLpX25InterframeFlagCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpX25InterframeFlagCount.setStatus('mandatory')
fclFraLpInactivityCheckDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpInactivityCheckDelay.setStatus('mandatory')
fclFraLpCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("networkToSubscriber", 2), ("subscriberToNetwork", 3), ("bothway", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpCompression.setStatus('mandatory')
fclFraLpCompressNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onOptionalCompression", 2), ("onMandatoryCompression", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpCompressNegotiation.setStatus('mandatory')
fclFraLpCompressScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpCompressScrambling.setStatus('mandatory')
fclFraLpCompressMultiPacketsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpCompressMultiPacketsTimer.setStatus('mandatory')
fclFraLpReliableVc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2, 4))).clone(namedValues=NamedValues(("off", 1), ("clear", 3), ("subscribe", 2), ("check", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLpReliableVc.setStatus('mandatory')
fclFraLmiTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2), )
if mibBuilder.loadTexts: fclFraLmiTable.setStatus('mandatory')
fclFraLmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclFraLmiLogPortId"))
if mibBuilder.loadTexts: fclFraLmiEntry.setStatus('mandatory')
fclFraLmiLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFraLmiLogPortId.setStatus('mandatory')
fclFraLmiDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dlci0", 1), ("dlci1023", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLmiDlci.setStatus('mandatory')
fclFraLmiLmiStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ansiT1-617d", 1), ("itutQ933a", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLmiLmiStandard.setStatus('mandatory')
fclFraLmiAccessibilityCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast", 1), ("n393", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLmiAccessibilityCondition.setStatus('mandatory')
fclFraLmiN391FullStatusPollCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLmiN391FullStatusPollCount.setStatus('mandatory')
fclFraLmiN392ErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLmiN392ErrorThreshold.setStatus('mandatory')
fclFraLmiN393MonitoredEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLmiN393MonitoredEventCount.setStatus('mandatory')
fclFraLmiT391LinkIntegPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLmiT391LinkIntegPollTimer.setStatus('mandatory')
fclFraLmiT392PollingVerifTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraLmiT392PollingVerifTimer.setStatus('mandatory')
fclFraPvcEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3), )
if mibBuilder.loadTexts: fclFraPvcEndPointTable.setStatus('mandatory')
fclFraPvcEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1), ).setIndexNames((0, "PCE-MIB", "fclFraPvcLogPortId"), (0, "PCE-MIB", "fclFraPvcDlci"))
if mibBuilder.loadTexts: fclFraPvcEndPointEntry.setStatus('mandatory')
fclFraPvcLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFraPvcLogPortId.setStatus('mandatory')
fclFraPvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFraPvcDlci.setStatus('mandatory')
fclFraPvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraPvcStatus.setStatus('mandatory')
fclFraPvcCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraPvcCalledAddr.setStatus('mandatory')
fclFraPvcSubscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraPvcSubscriberNumber.setStatus('mandatory')
fclFraPvcCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("calling", 1), ("called", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraPvcCallDirection.setStatus('mandatory')
fclFraPvcEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("fastSelect", 2), ("fastSelect-frHeader", 3), ("fastSelect-frHeader-grouping", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraPvcEncapsulation.setStatus('mandatory')
fclFraPvcMinRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraPvcMinRecallTimer.setStatus('mandatory')
fclFraPvcInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 13, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFraPvcInactivityTimer.setStatus('mandatory')
fclHdlcAccessLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14))
fclHdlcLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1), )
if mibBuilder.loadTexts: fclHdlcLogPortTable.setStatus('mandatory')
fclHdlcLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclHdlcLpLogPortId"))
if mibBuilder.loadTexts: fclHdlcLogPortEntry.setStatus('mandatory')
fclHdlcLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclHdlcLpLogPortId.setStatus('mandatory')
fclHdlcLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpInterfaceId.setStatus('mandatory')
fclHdlcLpCrcTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("off", 2), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpCrcTransport.setStatus('mandatory')
fclHdlcLpGroupingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 97))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpGroupingThreshold.setStatus('mandatory')
fclHdlcLpAllDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpAllDiscardThreshold.setStatus('mandatory')
fclHdlcLpX25InterframeFlagCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpX25InterframeFlagCount.setStatus('mandatory')
fclHdlcLpInactivityCheckDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpInactivityCheckDelay.setStatus('mandatory')
fclHdlcLpCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("networkToSubscriber", 2), ("subscriberToNetwork", 3), ("bothway", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpCompression.setStatus('mandatory')
fclHdlcLpCompressNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onOptionalCompression", 2), ("onMandatoryCompression", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpCompressNegotiation.setStatus('mandatory')
fclHdlcLpCompressScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpCompressScrambling.setStatus('mandatory')
fclHdlcLpCompressMultiPacketsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpCompressMultiPacketsTimer.setStatus('mandatory')
fclHdlcLpReliableVc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2, 4))).clone(namedValues=NamedValues(("off", 1), ("clear", 3), ("subscribe", 2), ("check", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpReliableVc.setStatus('mandatory')
fclHdlcLpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 1))).clone(namedValues=NamedValues(("ubr", 3), ("vbr-rt", 2), ("vbr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpCos.setStatus('mandatory')
fclHdlcLpCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpCir.setStatus('mandatory')
fclHdlcLpMinCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcLpMinCir.setStatus('mandatory')
fclHdlcAutoCallTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2), )
if mibBuilder.loadTexts: fclHdlcAutoCallTable.setStatus('mandatory')
fclHdlcAutoCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclHdlcAutoLogPortId"))
if mibBuilder.loadTexts: fclHdlcAutoCallEntry.setStatus('mandatory')
fclHdlcAutoLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclHdlcAutoLogPortId.setStatus('mandatory')
fclHdlcAutoCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcAutoCalledAddr.setStatus('mandatory')
fclHdlcAutoSubscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcAutoSubscriberNumber.setStatus('mandatory')
fclHdlcAutoCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("calling", 1), ("called", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcAutoCallDirection.setStatus('mandatory')
fclHdlcAutoEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("none", 1), ("fastSelect", 2), ("fastSelect-grouping", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcAutoEncapsulation.setStatus('mandatory')
fclHdlcAutoMinRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcAutoMinRecallTimer.setStatus('mandatory')
fclHdlcAutoInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 14, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclHdlcAutoInactivityTimer.setStatus('mandatory')
fclSdlcLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15))
fclSdlcLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1), )
if mibBuilder.loadTexts: fclSdlcLogPortTable.setStatus('mandatory')
fclSdlcLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclSdlcLpLogPortId"))
if mibBuilder.loadTexts: fclSdlcLogPortEntry.setStatus('mandatory')
fclSdlcLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclSdlcLpLogPortId.setStatus('mandatory')
fclSdlcLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpInterfaceId.setStatus('mandatory')
fclSdlcLpPhysicalUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(18, 17))).clone(namedValues=NamedValues(("primary", 18), ("secondary", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpPhysicalUnitType.setStatus('mandatory')
fclSdlcLpSubscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpSubscriberNumber.setStatus('mandatory')
fclSdlcLpBitEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nrz", 1), ("nrzInverse", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpBitEncoding.setStatus('mandatory')
fclSdlcLpUnknownPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpUnknownPackets.setStatus('mandatory')
fclSdlcLpLogicalLinkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("qllc", 1), ("psh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpLogicalLinkProtocol.setStatus('mandatory')
fclSdlcLpPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpPacketSize.setStatus('mandatory')
fclSdlcLpWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpWindowSize.setStatus('mandatory')
fclSdlcLpCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("networkToSubscriber", 2), ("subscriberToNetwork", 3), ("bothway", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpCompression.setStatus('mandatory')
fclSdlcLpCompressNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onOptionalCompression", 2), ("onMandatoryCompression", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpCompressNegotiation.setStatus('mandatory')
fclSdlcLpCompressScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpCompressScrambling.setStatus('mandatory')
fclSdlcLpCompressMultiPacketsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpCompressMultiPacketsTimer.setStatus('mandatory')
fclSdlcLpReliableVc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2, 4))).clone(namedValues=NamedValues(("off", 1), ("clear", 3), ("subscribe", 2), ("check", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpReliableVc.setStatus('mandatory')
fclSdlcLpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1))).clone(namedValues=NamedValues(("ubr", 3), ("vbr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpCos.setStatus('mandatory')
fclSdlcLpCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpCir.setStatus('mandatory')
fclSdlcLpMinCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpMinCir.setStatus('mandatory')
fclSdlcLpBe = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcLpBe.setStatus('mandatory')
fclSdlcPrimaryPuLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2))
fclSdlcPriLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1), )
if mibBuilder.loadTexts: fclSdlcPriLogPortTable.setStatus('mandatory')
fclSdlcPriLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclSdlcPriLpLogPortId"))
if mibBuilder.loadTexts: fclSdlcPriLogPortEntry.setStatus('mandatory')
fclSdlcPriLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclSdlcPriLpLogPortId.setStatus('mandatory')
fclSdlcPriLpLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(25, 20, 16, 22, 27, 30))).clone(namedValues=NamedValues(("pu4-pu4", 25), ("pu4-pu21", 20), ("pu4-pu20", 16), ("pu21-pu21", 22), ("nixd-pu20", 27), ("rwsi-pu20", 30)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcPriLpLinkType.setStatus('mandatory')
fclSdlcPriLpRemPuIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("proprietary", 1), ("calledAddr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcPriLpRemPuIdentification.setStatus('mandatory')
fclSdlcPriLpPollingGroupResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcPriLpPollingGroupResponse.setStatus('mandatory')
fclSdlcPriLpPollingGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcPriLpPollingGroupAddress.setStatus('mandatory')
fclSdlcPriClusterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 2), )
if mibBuilder.loadTexts: fclSdlcPriClusterTable.setStatus('mandatory')
fclSdlcPriClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclSdlcPriClusterLogPortId"), (0, "PCE-MIB", "fclSdlcPriClusterAddress"))
if mibBuilder.loadTexts: fclSdlcPriClusterEntry.setStatus('mandatory')
fclSdlcPriClusterLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclSdlcPriClusterLogPortId.setStatus('mandatory')
fclSdlcPriClusterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclSdlcPriClusterAddress.setStatus('mandatory')
fclSdlcPriClusterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcPriClusterStatus.setStatus('mandatory')
fclSdlcPriClusterRemPu2CalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcPriClusterRemPu2CalledAddr.setStatus('mandatory')
fclSdlcSecondaryPuLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3))
fclSdlcSecLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1), )
if mibBuilder.loadTexts: fclSdlcSecLogPortTable.setStatus('mandatory')
fclSdlcSecLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclSdlcSecLpLogPortId"))
if mibBuilder.loadTexts: fclSdlcSecLogPortEntry.setStatus('mandatory')
fclSdlcSecLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclSdlcSecLpLogPortId.setStatus('mandatory')
fclSdlcSecLpLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(26, 21, 23, 17, 28, 31, 34))).clone(namedValues=NamedValues(("pu4-pu4", 26), ("pu21-pu4", 21), ("pu21-pu21", 23), ("pu20-pu4", 17), ("pu20-nixd", 28), ("pu20-rwsi", 31), ("terminal-pu4", 34)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecLpLinkType.setStatus('mandatory')
fclSdlcSecLpRemPuIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("proprietary", 1), ("calledAddr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecLpRemPuIdentification.setStatus('mandatory')
fclSdlcSecLpT1AcknowledgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecLpT1AcknowledgeTimer.setStatus('mandatory')
fclSdlcSecLpN2RetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecLpN2RetryCount.setStatus('mandatory')
fclSdlcSecLpCallRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecLpCallRetryCount.setStatus('mandatory')
fclSdlcSecLpPollingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecLpPollingTimer.setStatus('mandatory')
fclSdlcSecLpPollingMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecLpPollingMaxCount.setStatus('mandatory')
fclSdlcSecClusterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2), )
if mibBuilder.loadTexts: fclSdlcSecClusterTable.setStatus('mandatory')
fclSdlcSecClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclSdlcSecClusterLogPortId"), (0, "PCE-MIB", "fclSdlcSecClusterAddress"))
if mibBuilder.loadTexts: fclSdlcSecClusterEntry.setStatus('mandatory')
fclSdlcSecClusterLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclSdlcSecClusterLogPortId.setStatus('mandatory')
fclSdlcSecClusterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclSdlcSecClusterAddress.setStatus('mandatory')
fclSdlcSecClusterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecClusterStatus.setStatus('mandatory')
fclSdlcSecClusterCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecClusterCalledAddr.setStatus('mandatory')
fclSdlcSecClusterFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("reverseCharging", 2), ("cug", 3), ("reverseCharging-cug", 4), ("throughputClass", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecClusterFacility.setStatus('mandatory')
fclSdlcSecClusterFacThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecClusterFacThroughputClass.setStatus('mandatory')
fclSdlcSecClusterMinRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecClusterMinRecallTimer.setStatus('mandatory')
fclSdlcSecClusterRemPvcLogChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecClusterRemPvcLogChannel.setStatus('mandatory')
fclSdlcSecClusterXidStringResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecClusterXidStringResponse.setStatus('mandatory')
fclSdlcSecClusterCos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("ubr", 3), ("vbr", 1), ("vbr-rt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecClusterCos.setStatus('mandatory')
fclSdlcSecClusterCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecClusterCir.setStatus('mandatory')
fclSdlcSecClusterCirmin = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecClusterCirmin.setStatus('mandatory')
fclSdlcSecClusterBc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecClusterBc.setStatus('mandatory')
fclSdlcSecClusterBe = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 15, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclSdlcSecClusterBe.setStatus('mandatory')
fclVipLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16))
fclVipLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1), )
if mibBuilder.loadTexts: fclVipLogPortTable.setStatus('mandatory')
fclVipLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclVipLpLogPortId"))
if mibBuilder.loadTexts: fclVipLogPortEntry.setStatus('mandatory')
fclVipLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclVipLpLogPortId.setStatus('mandatory')
fclVipLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipLpInterfaceId.setStatus('mandatory')
fclVipLpEmulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(50, 51))).clone(namedValues=NamedValues(("tpad", 50), ("hpad", 51)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipLpEmulationType.setStatus('mandatory')
fclVipLpResponseSurveyPollingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipLpResponseSurveyPollingTimer.setStatus('mandatory')
fclVipLpScreenRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipLpScreenRetryTimer.setStatus('mandatory')
fclVipLpPrinterRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipLpPrinterRetryTimer.setStatus('mandatory')
fclVipLpMessageRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipLpMessageRetryNumber.setStatus('mandatory')
fclVipLpPrinterMessagesManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("transparent", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipLpPrinterMessagesManagement.setStatus('mandatory')
fclVipHostPadLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2))
fclVipHosLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 1), )
if mibBuilder.loadTexts: fclVipHosLogPortTable.setStatus('mandatory')
fclVipHosLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclVipHosLpLogPortId"))
if mibBuilder.loadTexts: fclVipHosLogPortEntry.setStatus('mandatory')
fclVipHosLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclVipHosLpLogPortId.setStatus('mandatory')
fclVipHosLpWaitTimeOutForPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 12800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipHosLpWaitTimeOutForPrinter.setStatus('mandatory')
fclVipHosLpRepAEot = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipHosLpRepAEot.setStatus('mandatory')
fclVipHosLpFtbcc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipHosLpFtbcc.setStatus('mandatory')
fclVipHosElementTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2), )
if mibBuilder.loadTexts: fclVipHosElementTable.setStatus('mandatory')
fclVipHosElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclVipHosElementId"))
if mibBuilder.loadTexts: fclVipHosElementEntry.setStatus('mandatory')
fclVipHosElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclVipHosElementId.setStatus('mandatory')
fclVipHosElemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipHosElemStatus.setStatus('mandatory')
fclVipHosElemLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipHosElemLogPortId.setStatus('mandatory')
fclVipHosElemType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cluster", 1), ("isolatedstation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipHosElemType.setStatus('mandatory')
fclVipHosElemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipHosElemAddress.setStatus('mandatory')
fclVipHosStationTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 3), )
if mibBuilder.loadTexts: fclVipHosStationTable.setStatus('mandatory')
fclVipHosStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 3, 1), ).setIndexNames((0, "PCE-MIB", "fclVipHosStatElementId"), (0, "PCE-MIB", "fclVipHosStatStationAddress"))
if mibBuilder.loadTexts: fclVipHosStationEntry.setStatus('mandatory')
fclVipHosStatElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclVipHosStatElementId.setStatus('mandatory')
fclVipHosStatStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclVipHosStatStationAddress.setStatus('mandatory')
fclVipHosStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipHosStatStatus.setStatus('mandatory')
fclVipClusterLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3))
fclVipCluLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1), )
if mibBuilder.loadTexts: fclVipCluLogPortTable.setStatus('mandatory')
fclVipCluLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclVipCluLpLogPortId"))
if mibBuilder.loadTexts: fclVipCluLogPortEntry.setStatus('mandatory')
fclVipCluLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclVipCluLpLogPortId.setStatus('mandatory')
fclVipCluLpPollingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 12800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipCluLpPollingTimer.setStatus('mandatory')
fclVipCluLpFailedPollingMaxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipCluLpFailedPollingMaxNumber.setStatus('mandatory')
fclVipCluLpPollingTypeAfterSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stationPoll", 1), ("clusterPoll", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipCluLpPollingTypeAfterSelect.setStatus('mandatory')
fclVipCluLpScreenKeepTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2550))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipCluLpScreenKeepTimer.setStatus('mandatory')
fclVipCluElementTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2), )
if mibBuilder.loadTexts: fclVipCluElementTable.setStatus('mandatory')
fclVipCluElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclVipCluElementId"))
if mibBuilder.loadTexts: fclVipCluElementEntry.setStatus('mandatory')
fclVipCluElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclVipCluElementId.setStatus('mandatory')
fclVipCluElemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipCluElemStatus.setStatus('mandatory')
fclVipCluElemLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipCluElemLogPortId.setStatus('mandatory')
fclVipCluElemType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cluster", 1), ("isolatedstation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipCluElemType.setStatus('mandatory')
fclVipCluElemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipCluElemAddress.setStatus('mandatory')
fclVipCluElemCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipCluElemCalledAddr.setStatus('mandatory')
fclVipCluElemMinRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipCluElemMinRecallTimer.setStatus('mandatory')
fclVipCluStationTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 3), )
if mibBuilder.loadTexts: fclVipCluStationTable.setStatus('mandatory')
fclVipCluStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 3, 1), ).setIndexNames((0, "PCE-MIB", "fclVipCluStatElementId"), (0, "PCE-MIB", "fclVipCluStatStationAddress"))
if mibBuilder.loadTexts: fclVipCluStationEntry.setStatus('mandatory')
fclVipCluStatElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclVipCluStatElementId.setStatus('mandatory')
fclVipCluStatStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclVipCluStatStationAddress.setStatus('mandatory')
fclVipCluStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 16, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclVipCluStatStatus.setStatus('mandatory')
fclBsc3270LogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17))
fclB3270LogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1), )
if mibBuilder.loadTexts: fclB3270LogPortTable.setStatus('mandatory')
fclB3270LogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclB3270LpLogPortId"))
if mibBuilder.loadTexts: fclB3270LogPortEntry.setStatus('mandatory')
fclB3270LpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclB3270LpLogPortId.setStatus('mandatory')
fclB3270LpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270LpInterfaceId.setStatus('mandatory')
fclB3270LpEmulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(60, 61))).clone(namedValues=NamedValues(("tpad", 60), ("hpad", 61)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270LpEmulationType.setStatus('mandatory')
fclB3270LpCodingParityType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ebcdic", 1), ("asciioddparity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270LpCodingParityType.setStatus('mandatory')
fclB3270LpNoAnswerWatchDog = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270LpNoAnswerWatchDog.setStatus('mandatory')
fclB3270LpMessageRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270LpMessageRetryNumber.setStatus('mandatory')
fclB3270HostPadLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2))
fclB3270HosLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 1), )
if mibBuilder.loadTexts: fclB3270HosLogPortTable.setStatus('mandatory')
fclB3270HosLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclB3270HosLpLogPortId"))
if mibBuilder.loadTexts: fclB3270HosLogPortEntry.setStatus('mandatory')
fclB3270HosLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclB3270HosLpLogPortId.setStatus('mandatory')
fclB3270HosLpLineWatchDog = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270HosLpLineWatchDog.setStatus('mandatory')
fclB3270HosLpWackTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270HosLpWackTransmission.setStatus('mandatory')
fclB3270HosLpAnswerToPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("always", 1), ("onlinkup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270HosLpAnswerToPolling.setStatus('mandatory')
fclB3270HosClusterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 2), )
if mibBuilder.loadTexts: fclB3270HosClusterTable.setStatus('mandatory')
fclB3270HosClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclB3270HosClusterLogPortId"), (0, "PCE-MIB", "fclB3270HosClusterCluAdd"), (0, "PCE-MIB", "fclB3270HosClusterStaAdd"))
if mibBuilder.loadTexts: fclB3270HosClusterEntry.setStatus('mandatory')
fclB3270HosClusterLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclB3270HosClusterLogPortId.setStatus('mandatory')
fclB3270HosClusterCluAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclB3270HosClusterCluAdd.setStatus('mandatory')
fclB3270HosClusterStaAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270HosClusterStaAdd.setStatus('mandatory')
fclB3270HosClusterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270HosClusterStatus.setStatus('mandatory')
fclB3270ClusterLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3))
fclB3270CluLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 1), )
if mibBuilder.loadTexts: fclB3270CluLogPortTable.setStatus('mandatory')
fclB3270CluLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclB3270CluLpLogPortId"))
if mibBuilder.loadTexts: fclB3270CluLogPortEntry.setStatus('mandatory')
fclB3270CluLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclB3270CluLpLogPortId.setStatus('mandatory')
fclB3270CluLpPollingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270CluLpPollingTimer.setStatus('mandatory')
fclB3270CluLpMaxNumberOfUnwPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270CluLpMaxNumberOfUnwPolls.setStatus('mandatory')
fclB3270CluLpReconnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("ondata", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270CluLpReconnectionType.setStatus('mandatory')
fclB3270CluClusterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 2), )
if mibBuilder.loadTexts: fclB3270CluClusterTable.setStatus('mandatory')
fclB3270CluClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclB3270CluClusterLogPortId"), (0, "PCE-MIB", "fclB3270CluClusterCluAdd"), (0, "PCE-MIB", "fclB3270CluClusterStaAdd"))
if mibBuilder.loadTexts: fclB3270CluClusterEntry.setStatus('mandatory')
fclB3270CluClusterLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclB3270CluClusterLogPortId.setStatus('mandatory')
fclB3270CluClusterCluAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclB3270CluClusterCluAdd.setStatus('mandatory')
fclB3270CluClusterStaAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270CluClusterStaAdd.setStatus('mandatory')
fclB3270CluClusterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270CluClusterStatus.setStatus('mandatory')
fclB3270CluCallTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3), )
if mibBuilder.loadTexts: fclB3270CluCallTable.setStatus('mandatory')
fclB3270CluCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3, 1), ).setIndexNames((0, "PCE-MIB", "fclB3270CluCallLogPortId"), (0, "PCE-MIB", "fclB3270CluCallCluAdd"))
if mibBuilder.loadTexts: fclB3270CluCallEntry.setStatus('mandatory')
fclB3270CluCallLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclB3270CluCallLogPortId.setStatus('mandatory')
fclB3270CluCallCluAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclB3270CluCallCluAdd.setStatus('mandatory')
fclB3270CluCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270CluCallStatus.setStatus('mandatory')
fclB3270CluCallCallAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270CluCallCallAddr.setStatus('mandatory')
fclB3270CluCallMinRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 17, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclB3270CluCallMinRecallTimer.setStatus('mandatory')
fclBscX780LogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18))
fclBX780LogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1), )
if mibBuilder.loadTexts: fclBX780LogPortTable.setStatus('mandatory')
fclBX780LogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclBX780LpLogPortId"))
if mibBuilder.loadTexts: fclBX780LogPortEntry.setStatus('mandatory')
fclBX780LpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclBX780LpLogPortId.setStatus('mandatory')
fclBX780LpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780LpInterfaceId.setStatus('mandatory')
fclBX780LpProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bsc2780", 1), ("bsc3780", 2), ("bsc3780onPSTN", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780LpProtocolType.setStatus('mandatory')
fclBX780LpCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("calling", 1), ("called", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780LpCallDirection.setStatus('mandatory')
fclBX780LpDeconnectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780LpDeconnectTimer.setStatus('mandatory')
fclBX780LpSurveyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780LpSurveyTimer.setStatus('mandatory')
fclBX780LpCodingParityType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ebcdic", 1), ("asciioddparity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780LpCodingParityType.setStatus('mandatory')
fclBX780LpEquipementType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("term-term", 1), ("term-cpu", 2), ("cpu-cpu", 3), ("cpu-term", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780LpEquipementType.setStatus('mandatory')
fclBX780LpENQRetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780LpENQRetransTimer.setStatus('mandatory')
fclBX780LpAuthorAnswerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780LpAuthorAnswerTimer.setStatus('mandatory')
fclBX780LpNoAnswerWatchDog = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780LpNoAnswerWatchDog.setStatus('mandatory')
fclBX780LpMessageRetryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780LpMessageRetryNumber.setStatus('mandatory')
fclBX780ConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 2), )
if mibBuilder.loadTexts: fclBX780ConnectionTable.setStatus('mandatory')
fclBX780ConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclBX780ConnLogPortId"))
if mibBuilder.loadTexts: fclBX780ConnectionEntry.setStatus('mandatory')
fclBX780ConnLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclBX780ConnLogPortId.setStatus('mandatory')
fclBX780ConnCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780ConnCalledAddr.setStatus('mandatory')
fclBX780ConnMinimumRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780ConnMinimumRecallTimer.setStatus('mandatory')
fclBX780IdentTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 3), )
if mibBuilder.loadTexts: fclBX780IdentTable.setStatus('mandatory')
fclBX780IdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 3, 1), ).setIndexNames((0, "PCE-MIB", "fclBX780IdentLogPortId"), (0, "PCE-MIB", "fclBX780IdentTermId"))
if mibBuilder.loadTexts: fclBX780IdentEntry.setStatus('mandatory')
fclBX780IdentLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclBX780IdentLogPortId.setStatus('mandatory')
fclBX780IdentTermId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclBX780IdentTermId.setStatus('mandatory')
fclBX780IdentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 18, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBX780IdentStatus.setStatus('mandatory')
fclBscSctLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19))
fclBSctLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1), )
if mibBuilder.loadTexts: fclBSctLogPortTable.setStatus('mandatory')
fclBSctLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclBSctLpLogPortId"))
if mibBuilder.loadTexts: fclBSctLogPortEntry.setStatus('mandatory')
fclBSctLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclBSctLpLogPortId.setStatus('mandatory')
fclBSctLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctLpInterfaceId.setStatus('mandatory')
fclBSctLpLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2), ("tpc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctLpLinkType.setStatus('mandatory')
fclBSctLpNumberOfSYN = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("trans-of-2-SYN", 2), ("trans-of-4-SYN", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctLpNumberOfSYN.setStatus('mandatory')
fclBSctLpSignalEnvelope = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctLpSignalEnvelope.setStatus('mandatory')
fclBSctLpCodingParityType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ebcdic", 1), ("asciioddparity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctLpCodingParityType.setStatus('mandatory')
fclBSctLpMaxFrameNumberIn = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctLpMaxFrameNumberIn.setStatus('mandatory')
fclBSctLpUnderrunManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctLpUnderrunManagement.setStatus('mandatory')
fclBSctLpOnePadSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctLpOnePadSuppressed.setStatus('mandatory')
fclBSctConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2), )
if mibBuilder.loadTexts: fclBSctConnectionTable.setStatus('mandatory')
fclBSctConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclBSctConnLogPortId"))
if mibBuilder.loadTexts: fclBSctConnectionEntry.setStatus('mandatory')
fclBSctConnLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclBSctConnLogPortId.setStatus('mandatory')
fclBSctConnCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctConnCalledAddr.setStatus('mandatory')
fclBSctConnCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("calling", 1), ("called", 2), ("auto", 3), ("datagram", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctConnCallDirection.setStatus('mandatory')
fclBSctConnSubscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctConnSubscriberNumber.setStatus('mandatory')
fclBSctConnMinimumRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctConnMinimumRecallTimer.setStatus('mandatory')
fclBSctProtocolDefinition1Table = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3), )
if mibBuilder.loadTexts: fclBSctProtocolDefinition1Table.setStatus('mandatory')
fclBSctProtocolDefinition1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1), ).setIndexNames((0, "PCE-MIB", "fclBSctProtDef1LogPortId"))
if mibBuilder.loadTexts: fclBSctProtocolDefinition1Entry.setStatus('mandatory')
fclBSctProtDef1LogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclBSctProtDef1LogPortId.setStatus('mandatory')
fclBSctProtDef1PermanentDelimiter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef1PermanentDelimiter1.setStatus('mandatory')
fclBSctProtDef1PermanentDelimiter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef1PermanentDelimiter2.setStatus('mandatory')
fclBSctProtDef1PermanentDelimiter3 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef1PermanentDelimiter3.setStatus('mandatory')
fclBSctProtDef1PermanentDelimiter4 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef1PermanentDelimiter4.setStatus('mandatory')
fclBSctProtDef1PermanentDelimiter5 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef1PermanentDelimiter5.setStatus('mandatory')
fclBSctProtDef1StartFrameDelimiter1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef1StartFrameDelimiter1.setStatus('mandatory')
fclBSctProtDef1StartFrameDelimiter2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef1StartFrameDelimiter2.setStatus('mandatory')
fclBSctProtDef1StartFrameDelimiter3 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef1StartFrameDelimiter3.setStatus('mandatory')
fclBSctProtDef1NbCharInhibited = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef1NbCharInhibited.setStatus('mandatory')
fclBSctProtDef1StFrDelimiterInhib1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef1StFrDelimiterInhib1.setStatus('mandatory')
fclBSctProtDef1StFrDelimiterInhib2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef1StFrDelimiterInhib2.setStatus('mandatory')
fclBSctProtocolDefinition2Table = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4), )
if mibBuilder.loadTexts: fclBSctProtocolDefinition2Table.setStatus('mandatory')
fclBSctProtocolDefinition2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1), ).setIndexNames((0, "PCE-MIB", "fclBSctProtDef2LogPortId"))
if mibBuilder.loadTexts: fclBSctProtocolDefinition2Entry.setStatus('mandatory')
fclBSctProtDef2LogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclBSctProtDef2LogPortId.setStatus('mandatory')
fclBSctProtDef2DataFrameTerminator1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef2DataFrameTerminator1.setStatus('mandatory')
fclBSctProtDef2DataFrameTerminator2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef2DataFrameTerminator2.setStatus('mandatory')
fclBSctProtDef2DataFrameTerminator3 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef2DataFrameTerminator3.setStatus('mandatory')
fclBSctProtDef2ControlFrameTerminator1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef2ControlFrameTerminator1.setStatus('mandatory')
fclBSctProtDef2ControlFrameTerminator2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("none", 1), ("enq", 2), ("nak", 3), ("eot", 4), ("stx", 5), ("soh", 6), ("etx", 7), ("etb", 8), ("pad", 9), ("ack", 10), ("dle", 11), ("esc", 12), ("bel", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef2ControlFrameTerminator2.setStatus('mandatory')
fclBSctProtDef2ACK0 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef2ACK0.setStatus('mandatory')
fclBSctProtDef2ACK1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef2ACK1.setStatus('mandatory')
fclBSctProtDef2WACK = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef2WACK.setStatus('mandatory')
fclBSctProtDef2RVI = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef2RVI.setStatus('mandatory')
fclBSctProtDef2WABT = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 19, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclBSctProtDef2WABT.setStatus('mandatory')
fclX25SlpAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20))
fclX25SlpAccessTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1), )
if mibBuilder.loadTexts: fclX25SlpAccessTable.setStatus('mandatory')
fclX25SlpAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclX25AccLogPortId"))
if mibBuilder.loadTexts: fclX25SlpAccessEntry.setStatus('mandatory')
fclX25AccLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25AccLogPortId.setStatus('mandatory')
fclX25AccInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccInterfaceId.setStatus('mandatory')
fclX25AccConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("subscriber", 1), ("publicNetwork", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccConnectionType.setStatus('mandatory')
fclX25AccSubscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccSubscriberNumber.setStatus('mandatory')
fclX25AccPdnLinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPdnLinkAddress.setStatus('mandatory')
fclX25AccX25AccessConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccX25AccessConfigId.setStatus('mandatory')
fclX25AccIsdnBackupEnabling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("off", 1), ("onWhileActivity", 2), ("onWhileLpDown", 3), ("onWhileExcessTraffic", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccIsdnBackupEnabling.setStatus('mandatory')
fclX25AccPstnBackupEnabling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("off", 1), ("onWhileActivity", 2), ("onWhileLpDown", 3), ("onWhileExcessTraffic", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPstnBackupEnabling.setStatus('mandatory')
fclX25AccPrivateNetTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 2), )
if mibBuilder.loadTexts: fclX25AccPrivateNetTable.setStatus('mandatory')
fclX25AccPrivateNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclX25AccPrivLogPortId"))
if mibBuilder.loadTexts: fclX25AccPrivateNetEntry.setStatus('mandatory')
fclX25AccPrivLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25AccPrivLogPortId.setStatus('mandatory')
fclX25AccPrivX25FieldsSave = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 8, 16))).clone(namedValues=NamedValues(("off", 1), ("addr", 4), ("addrCug", 8), ("addrCugRc", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPrivX25FieldsSave.setStatus('mandatory')
fclX25AccPrivX25FieldsChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(25, 25)).setFixedLength(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPrivX25FieldsChanges.setStatus('mandatory')
fclX25AccPermanentVcTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3), )
if mibBuilder.loadTexts: fclX25AccPermanentVcTable.setStatus('mandatory')
fclX25AccPermanentVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1), ).setIndexNames((0, "PCE-MIB", "fclX25AccPvcLogPortId"), (0, "PCE-MIB", "fclX25AccPvcLocalLogChannel"))
if mibBuilder.loadTexts: fclX25AccPermanentVcEntry.setStatus('mandatory')
fclX25AccPvcLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25AccPvcLogPortId.setStatus('mandatory')
fclX25AccPvcLocalLogChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25AccPvcLocalLogChannel.setStatus('mandatory')
fclX25AccPvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPvcStatus.setStatus('mandatory')
fclX25AccPvcCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPvcCalledAddr.setStatus('mandatory')
fclX25AccPvcRemoteLogChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPvcRemoteLogChannel.setStatus('mandatory')
fclX25AccPvcMinimumRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPvcMinimumRecallTimer.setStatus('mandatory')
fclX25AccPvcCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("calling", 1), ("called", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPvcCallDirection.setStatus('mandatory')
fclX25AccPvcFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("throughputClass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPvcFacility.setStatus('mandatory')
fclX25AccPvcFacThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPvcFacThroughputClass.setStatus('mandatory')
fclX25AccSwitchOverTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 4), )
if mibBuilder.loadTexts: fclX25AccSwitchOverTable.setStatus('mandatory')
fclX25AccSwitchOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 4, 1), ).setIndexNames((0, "PCE-MIB", "fclX25AccSwLogPortId"))
if mibBuilder.loadTexts: fclX25AccSwitchOverEntry.setStatus('mandatory')
fclX25AccSwLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25AccSwLogPortId.setStatus('mandatory')
fclX25AccSwMeasureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccSwMeasureCount.setStatus('mandatory')
fclX25AccSwSwitchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccSwSwitchThreshold.setStatus('mandatory')
fclX25AccSwSwitchBackThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccSwSwitchBackThreshold.setStatus('mandatory')
fclX25AccIsdnBackupTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 5), )
if mibBuilder.loadTexts: fclX25AccIsdnBackupTable.setStatus('mandatory')
fclX25AccIsdnBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 5, 1), ).setIndexNames((0, "PCE-MIB", "fclX25AccIsdnBackLogPortId"), (0, "PCE-MIB", "fclX25AccIsdnBackIsdnInterfaceId"))
if mibBuilder.loadTexts: fclX25AccIsdnBackupEntry.setStatus('mandatory')
fclX25AccIsdnBackLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25AccIsdnBackLogPortId.setStatus('mandatory')
fclX25AccIsdnBackIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25AccIsdnBackIsdnInterfaceId.setStatus('mandatory')
fclX25AccIsdnBackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccIsdnBackStatus.setStatus('mandatory')
fclX25AccIsdnRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6), )
if mibBuilder.loadTexts: fclX25AccIsdnRemotePeerTable.setStatus('mandatory')
fclX25AccIsdnRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1), ).setIndexNames((0, "PCE-MIB", "fclX25AccIsdnRemLogPortId"), (0, "PCE-MIB", "fclX25AccIsdnRemIsdnInterfaceId"))
if mibBuilder.loadTexts: fclX25AccIsdnRemotePeerEntry.setStatus('mandatory')
fclX25AccIsdnRemLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25AccIsdnRemLogPortId.setStatus('mandatory')
fclX25AccIsdnRemIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25AccIsdnRemIsdnInterfaceId.setStatus('mandatory')
fclX25AccIsdnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccIsdnRemStatus.setStatus('mandatory')
fclX25AccIsdnRemX25AccessConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccIsdnRemX25AccessConfigId.setStatus('mandatory')
fclX25AccIsdnRemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccIsdnRemPriority.setStatus('mandatory')
fclX25AccIsdnRemCallRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccIsdnRemCallRetryCount.setStatus('mandatory')
fclX25AccPstnBackupTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7), )
if mibBuilder.loadTexts: fclX25AccPstnBackupTable.setStatus('mandatory')
fclX25AccPstnBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7, 1), ).setIndexNames((0, "PCE-MIB", "fclX25AccPstnBackLogPortId"))
if mibBuilder.loadTexts: fclX25AccPstnBackupEntry.setStatus('mandatory')
fclX25AccPstnBackLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25AccPstnBackLogPortId.setStatus('mandatory')
fclX25AccPstnBackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPstnBackStatus.setStatus('mandatory')
fclX25AccPstnBackInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPstnBackInterfaceId.setStatus('mandatory')
fclX25AccPstnBackPstnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPstnBackPstnNumber.setStatus('mandatory')
fclX25AccPstnBackX25AccessConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 20, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25AccPstnBackX25AccessConfigId.setStatus('mandatory')
fclX25InDIsdn = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21))
fclX25InDIsdnTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1), )
if mibBuilder.loadTexts: fclX25InDIsdnTable.setStatus('mandatory')
fclX25InDIsdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclX25InDLogPortId"))
if mibBuilder.loadTexts: fclX25InDIsdnEntry.setStatus('mandatory')
fclX25InDLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25InDLogPortId.setStatus('mandatory')
fclX25InDIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDIsdnInterfaceId.setStatus('mandatory')
fclX25InDTei = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDTei.setStatus('mandatory')
fclX25InDBackupEnabling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("off", 1), ("onWhileActivity", 2), ("onWhileLpDown", 3), ("onWhileExcessTraffic", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDBackupEnabling.setStatus('mandatory')
fclX25InDConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("subscriber", 1), ("publicNetwork", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDConnectionType.setStatus('mandatory')
fclX25InDSubscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDSubscriberNumber.setStatus('mandatory')
fclX25InDPdnLinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDPdnLinkAddress.setStatus('mandatory')
fclX25InDX25AccessConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDX25AccessConfigId.setStatus('mandatory')
fclX25InDInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDInactivityTimer.setStatus('mandatory')
fclX25InDActiveLinkAtBootTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDActiveLinkAtBootTime.setStatus('mandatory')
fclX25InDSwitchOverTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 2), )
if mibBuilder.loadTexts: fclX25InDSwitchOverTable.setStatus('mandatory')
fclX25InDSwitchOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclX25InDSwLogPortId"))
if mibBuilder.loadTexts: fclX25InDSwitchOverEntry.setStatus('mandatory')
fclX25InDSwLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25InDSwLogPortId.setStatus('mandatory')
fclX25InDSwMeasureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDSwMeasureCount.setStatus('mandatory')
fclX25InDSwSwitchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDSwSwitchThreshold.setStatus('mandatory')
fclX25InDSwSwitchBackThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDSwSwitchBackThreshold.setStatus('mandatory')
fclX25InDIsdnBackupTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 3), )
if mibBuilder.loadTexts: fclX25InDIsdnBackupTable.setStatus('mandatory')
fclX25InDIsdnBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 3, 1), ).setIndexNames((0, "PCE-MIB", "fclX25InDIsdnBackLogPortId"), (0, "PCE-MIB", "fclX25InDIsdnBackIsdnInterfaceId"))
if mibBuilder.loadTexts: fclX25InDIsdnBackupEntry.setStatus('mandatory')
fclX25InDIsdnBackLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25InDIsdnBackLogPortId.setStatus('mandatory')
fclX25InDIsdnBackIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25InDIsdnBackIsdnInterfaceId.setStatus('mandatory')
fclX25InDIsdnBackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDIsdnBackStatus.setStatus('mandatory')
fclX25InDIsdnRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4), )
if mibBuilder.loadTexts: fclX25InDIsdnRemotePeerTable.setStatus('mandatory')
fclX25InDIsdnRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1), ).setIndexNames((0, "PCE-MIB", "fclX25InDIsdnRemLogPortId"), (0, "PCE-MIB", "fclX25InDIsdnRemIsdnInterfaceId"))
if mibBuilder.loadTexts: fclX25InDIsdnRemotePeerEntry.setStatus('mandatory')
fclX25InDIsdnRemLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25InDIsdnRemLogPortId.setStatus('mandatory')
fclX25InDIsdnRemIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25InDIsdnRemIsdnInterfaceId.setStatus('mandatory')
fclX25InDIsdnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDIsdnRemStatus.setStatus('mandatory')
fclX25InDIsdnRemConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("subscriber", 1), ("publicNetwork", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDIsdnRemConnectionType.setStatus('mandatory')
fclX25InDIsdnRemSubscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDIsdnRemSubscriberNumber.setStatus('mandatory')
fclX25InDIsdnRemPdnLinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDIsdnRemPdnLinkAddress.setStatus('mandatory')
fclX25InDIsdnRemX25AccConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDIsdnRemX25AccConfigId.setStatus('mandatory')
fclX25InDIsdnRemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDIsdnRemPriority.setStatus('mandatory')
fclX25InDIsdnRemCallRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 21, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InDIsdnRemCallRetryCount.setStatus('mandatory')
fclX25InBIsdn = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22))
fclX25InBIsdnTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 1), )
if mibBuilder.loadTexts: fclX25InBIsdnTable.setStatus('mandatory')
fclX25InBIsdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclX25InBLogPortId"))
if mibBuilder.loadTexts: fclX25InBIsdnEntry.setStatus('mandatory')
fclX25InBLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25InBLogPortId.setStatus('mandatory')
fclX25InBIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InBIsdnInterfaceId.setStatus('mandatory')
fclX25InBRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2), )
if mibBuilder.loadTexts: fclX25InBRemotePeerTable.setStatus('mandatory')
fclX25InBRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclX25InBRemX121Addr"), (0, "PCE-MIB", "fclX25InBRemPeerId"))
if mibBuilder.loadTexts: fclX25InBRemotePeerEntry.setStatus('mandatory')
fclX25InBRemX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25InBRemX121Addr.setStatus('mandatory')
fclX25InBRemPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25InBRemPeerId.setStatus('mandatory')
fclX25InBRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InBRemStatus.setStatus('mandatory')
fclX25InBRemConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("subscriber", 1), ("publicNetwork", 2), ("interNode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InBRemConnectionType.setStatus('mandatory')
fclX25InBRemSubscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InBRemSubscriberNumber.setStatus('mandatory')
fclX25InBRemPdnLinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InBRemPdnLinkAddress.setStatus('mandatory')
fclX25InBRemX25ConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InBRemX25ConfigId.setStatus('mandatory')
fclX25InBRemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InBRemPriority.setStatus('mandatory')
fclX25InBRemCallRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InBRemCallRetryCount.setStatus('mandatory')
fclX25InBRemLinkCheckPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 50800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InBRemLinkCheckPeriod.setStatus('mandatory')
fclX25InBRemCheckPeriodCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 22, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25InBRemCheckPeriodCount.setStatus('mandatory')
fclX25InPstn = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23))
fclX25InPstnTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 1), )
if mibBuilder.loadTexts: fclX25InPstnTable.setStatus('mandatory')
fclX25InPstnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclX25PstnLogPortId"))
if mibBuilder.loadTexts: fclX25InPstnEntry.setStatus('mandatory')
fclX25PstnLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25PstnLogPortId.setStatus('mandatory')
fclX25PstnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25PstnInterfaceId.setStatus('mandatory')
fclX25PstnX25InterNodeConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25PstnX25InterNodeConfigId.setStatus('mandatory')
fclX25PstnRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 2), )
if mibBuilder.loadTexts: fclX25PstnRemotePeerTable.setStatus('mandatory')
fclX25PstnRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclX25PstnRemX121Addr"))
if mibBuilder.loadTexts: fclX25PstnRemotePeerEntry.setStatus('mandatory')
fclX25PstnRemX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25PstnRemX121Addr.setStatus('mandatory')
fclX25PstnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25PstnRemStatus.setStatus('mandatory')
fclX25PstnRemPstnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 23, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25PstnRemPstnNumber.setStatus('mandatory')
fclX25SlpInterNode = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24))
fclX25SlpInterNodeTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1), )
if mibBuilder.loadTexts: fclX25SlpInterNodeTable.setStatus('mandatory')
fclX25SlpInterNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclX25SlpLogPortId"))
if mibBuilder.loadTexts: fclX25SlpInterNodeEntry.setStatus('mandatory')
fclX25SlpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25SlpLogPortId.setStatus('mandatory')
fclX25SlpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpInterfaceId.setStatus('mandatory')
fclX25SlpIsdnBackupEnabling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("off", 1), ("onWhileActivity", 2), ("onWhileLpDown", 3), ("onWhileExcessTraffic", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpIsdnBackupEnabling.setStatus('mandatory')
fclX25SlpPstnBackupEnabling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("off", 1), ("onWhileActivity", 2), ("onWhileLpDown", 3), ("onWhileExcessTraffic", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpPstnBackupEnabling.setStatus('mandatory')
fclX25SlpX25InterNodeConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpX25InterNodeConfigId.setStatus('mandatory')
fclX25SlpDARApplicable = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpDARApplicable.setStatus('mandatory')
fclX25SlpBackupTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpBackupTimer.setStatus('mandatory')
fclX25SlpSwitchOverTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 2), )
if mibBuilder.loadTexts: fclX25SlpSwitchOverTable.setStatus('mandatory')
fclX25SlpSwitchOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclX25SlpSwLogPortId"))
if mibBuilder.loadTexts: fclX25SlpSwitchOverEntry.setStatus('mandatory')
fclX25SlpSwLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25SlpSwLogPortId.setStatus('mandatory')
fclX25SlpSwMeasureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpSwMeasureCount.setStatus('mandatory')
fclX25SlpSwSwitchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpSwSwitchThreshold.setStatus('mandatory')
fclX25SlpSwSwitchBackThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpSwSwitchBackThreshold.setStatus('mandatory')
fclX25SlpIsdnBackupTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 3), )
if mibBuilder.loadTexts: fclX25SlpIsdnBackupTable.setStatus('mandatory')
fclX25SlpIsdnBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 3, 1), ).setIndexNames((0, "PCE-MIB", "fclX25SlpIsdnBackLogPortId"), (0, "PCE-MIB", "fclX25SlpIsdnBackIsdnInterfaceId"))
if mibBuilder.loadTexts: fclX25SlpIsdnBackupEntry.setStatus('mandatory')
fclX25SlpIsdnBackLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25SlpIsdnBackLogPortId.setStatus('mandatory')
fclX25SlpIsdnBackIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25SlpIsdnBackIsdnInterfaceId.setStatus('mandatory')
fclX25SlpIsdnBackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpIsdnBackStatus.setStatus('mandatory')
fclX25SlpIsdnRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4), )
if mibBuilder.loadTexts: fclX25SlpIsdnRemotePeerTable.setStatus('mandatory')
fclX25SlpIsdnRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1), ).setIndexNames((0, "PCE-MIB", "fclX25SlpIsdnRemLogPortId"), (0, "PCE-MIB", "fclX25SlpIsdnRemIsdnInterfaceId"))
if mibBuilder.loadTexts: fclX25SlpIsdnRemotePeerEntry.setStatus('mandatory')
fclX25SlpIsdnRemLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25SlpIsdnRemLogPortId.setStatus('mandatory')
fclX25SlpIsdnRemIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25SlpIsdnRemIsdnInterfaceId.setStatus('mandatory')
fclX25SlpIsdnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpIsdnRemStatus.setStatus('mandatory')
fclX25SlpIsdnRemX25InterNodeConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpIsdnRemX25InterNodeConfigId.setStatus('mandatory')
fclX25SlpIsdnRemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpIsdnRemPriority.setStatus('mandatory')
fclX25SlpIsdnRemCallRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpIsdnRemCallRetryCount.setStatus('mandatory')
fclX25SlpPstnBackupTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5), )
if mibBuilder.loadTexts: fclX25SlpPstnBackupTable.setStatus('mandatory')
fclX25SlpPstnBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5, 1), ).setIndexNames((0, "PCE-MIB", "fclX25SlpPstnBackLogPortId"))
if mibBuilder.loadTexts: fclX25SlpPstnBackupEntry.setStatus('mandatory')
fclX25SlpPstnBackLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25SlpPstnBackLogPortId.setStatus('mandatory')
fclX25SlpPstnBackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpPstnBackStatus.setStatus('mandatory')
fclX25SlpPstnBackInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpPstnBackInterfaceId.setStatus('mandatory')
fclX25SlpPstnBackPstnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpPstnBackPstnNumber.setStatus('mandatory')
fclX25SlpPstnBackX25InterNodeConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 24, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25SlpPstnBackX25InterNodeConfigId.setStatus('mandatory')
fclX25Mlp = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25))
fclX25MlpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1), )
if mibBuilder.loadTexts: fclX25MlpTable.setStatus('mandatory')
fclX25MlpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclX25MlpLogPortId"))
if mibBuilder.loadTexts: fclX25MlpEntry.setStatus('mandatory')
fclX25MlpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25MlpLogPortId.setStatus('mandatory')
fclX25MlpLink1InterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpLink1InterfaceId.setStatus('mandatory')
fclX25MlpLink2InterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpLink2InterfaceId.setStatus('mandatory')
fclX25MlpLink3InterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpLink3InterfaceId.setStatus('mandatory')
fclX25MlpLink4InterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpLink4InterfaceId.setStatus('mandatory')
fclX25MlpIsdnOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10, 11))).clone(namedValues=NamedValues(("off", 1), ("onSlave", 2), ("onMasterWhileActivity", 10), ("onMasterWhileExcessTraffic", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpIsdnOverflow.setStatus('mandatory')
fclX25MlpPstnOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 10, 11))).clone(namedValues=NamedValues(("off", 1), ("onSlave", 2), ("onMasterWhileActivity", 10), ("onMasterWhileExcessTraffic", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpPstnOverflow.setStatus('mandatory')
fclX25MlpX25InterNodeConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpX25InterNodeConfigId.setStatus('mandatory')
fclX25MlpDARApplicable = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpDARApplicable.setStatus('mandatory')
fclX25MlpParameterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2), )
if mibBuilder.loadTexts: fclX25MlpParameterTable.setStatus('mandatory')
fclX25MlpParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclX25MlpParamLogPortId"))
if mibBuilder.loadTexts: fclX25MlpParameterEntry.setStatus('mandatory')
fclX25MlpParamLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25MlpParamLogPortId.setStatus('mandatory')
fclX25MlpMwMultilinkWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpMwMultilinkWindowSize.setStatus('mandatory')
fclX25MlpRxMlpMxWinGuardRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpRxMlpMxWinGuardRegion.setStatus('mandatory')
fclX25MlpMt1LostFrameTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpMt1LostFrameTimer.setStatus('mandatory')
fclX25MlpMt3ResetConfirmationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpMt3ResetConfirmationTimer.setStatus('mandatory')
fclX25MlpMt4DownLinkDetectionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpMt4DownLinkDetectionTimer.setStatus('mandatory')
fclX25MlpFramesMaxCountByLink = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpFramesMaxCountByLink.setStatus('mandatory')
fclX25MlpRestartTxAfterResetRx = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpRestartTxAfterResetRx.setStatus('mandatory')
fclX25MlpTns3Level3CheckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpTns3Level3CheckTimer.setStatus('mandatory')
fclX25MlpOverflowTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 3), )
if mibBuilder.loadTexts: fclX25MlpOverflowTable.setStatus('mandatory')
fclX25MlpOverflowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 3, 1), ).setIndexNames((0, "PCE-MIB", "fclX25MlpOvLogPortId"))
if mibBuilder.loadTexts: fclX25MlpOverflowEntry.setStatus('mandatory')
fclX25MlpOvLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25MlpOvLogPortId.setStatus('mandatory')
fclX25MlpOvMeasureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpOvMeasureCount.setStatus('mandatory')
fclX25MlpOvOverflowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpOvOverflowThreshold.setStatus('mandatory')
fclX25MlpOvOverflowBackThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpOvOverflowBackThreshold.setStatus('mandatory')
fclX25MlpIsdnOverflowTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 4), )
if mibBuilder.loadTexts: fclX25MlpIsdnOverflowTable.setStatus('mandatory')
fclX25MlpIsdnOverflowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 4, 1), ).setIndexNames((0, "PCE-MIB", "fclX25MlpIsdnOverLogPortId"), (0, "PCE-MIB", "fclX25MlpIsdnOverIsdnInterfaceId"))
if mibBuilder.loadTexts: fclX25MlpIsdnOverflowEntry.setStatus('mandatory')
fclX25MlpIsdnOverLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25MlpIsdnOverLogPortId.setStatus('mandatory')
fclX25MlpIsdnOverIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25MlpIsdnOverIsdnInterfaceId.setStatus('mandatory')
fclX25MlpIsdnOverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpIsdnOverStatus.setStatus('mandatory')
fclX25MlpIsdnOverBChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpIsdnOverBChannelCount.setStatus('mandatory')
fclX25MlpIsdnRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5), )
if mibBuilder.loadTexts: fclX25MlpIsdnRemotePeerTable.setStatus('mandatory')
fclX25MlpIsdnRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5, 1), ).setIndexNames((0, "PCE-MIB", "fclX25MlpIsdnRemLogPortId"), (0, "PCE-MIB", "fclX25MlpIsdnRemPeerId"))
if mibBuilder.loadTexts: fclX25MlpIsdnRemotePeerEntry.setStatus('mandatory')
fclX25MlpIsdnRemLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25MlpIsdnRemLogPortId.setStatus('mandatory')
fclX25MlpIsdnRemPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25MlpIsdnRemPeerId.setStatus('mandatory')
fclX25MlpIsdnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpIsdnRemStatus.setStatus('mandatory')
fclX25MlpIsdnRemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpIsdnRemPriority.setStatus('mandatory')
fclX25MlpIsdnRemCallRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpIsdnRemCallRetryCount.setStatus('mandatory')
fclX25MlpPstnOverflowTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 6), )
if mibBuilder.loadTexts: fclX25MlpPstnOverflowTable.setStatus('mandatory')
fclX25MlpPstnOverflowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 6, 1), ).setIndexNames((0, "PCE-MIB", "fclX25MlpPstnOvLogPortId"))
if mibBuilder.loadTexts: fclX25MlpPstnOverflowEntry.setStatus('mandatory')
fclX25MlpPstnOvLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25MlpPstnOvLogPortId.setStatus('mandatory')
fclX25MlpPstnOvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpPstnOvStatus.setStatus('mandatory')
fclX25MlpPstnOvInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpPstnOvInterfaceId.setStatus('mandatory')
fclX25MlpPstnOvPstnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 25, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25MlpPstnOvPstnNumber.setStatus('mandatory')
fclPointToPointProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30))
fclPppSerialLinkAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1))
fclPppSerialLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1), )
if mibBuilder.loadTexts: fclPppSerialLogPortTable.setStatus('mandatory')
fclPppSerialLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclPppSerLpLogPortId"))
if mibBuilder.loadTexts: fclPppSerialLogPortEntry.setStatus('mandatory')
fclPppSerLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclPppSerLpLogPortId.setStatus('mandatory')
fclPppSerLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerLpInterfaceId.setStatus('mandatory')
fclPppSerLpLocalSubscriberNb = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerLpLocalSubscriberNb.setStatus('mandatory')
fclPppSerLpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerLpConfigId.setStatus('mandatory')
fclPppSerLpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1))).clone(namedValues=NamedValues(("ubr", 3), ("vbr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerLpCos.setStatus('mandatory')
fclPppSerLpCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerLpCir.setStatus('mandatory')
fclPppSerLpMinCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerLpMinCir.setStatus('mandatory')
fclPppSerLpBe = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerLpBe.setStatus('mandatory')
fclPppSerialAutoCallTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2), )
if mibBuilder.loadTexts: fclPppSerialAutoCallTable.setStatus('mandatory')
fclPppSerialAutoCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclPppSerAutoLogPortId"))
if mibBuilder.loadTexts: fclPppSerialAutoCallEntry.setStatus('mandatory')
fclPppSerAutoLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclPppSerAutoLogPortId.setStatus('mandatory')
fclPppSerAutoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerAutoStatus.setStatus('mandatory')
fclPppSerAutoRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerAutoRemoteAddress.setStatus('mandatory')
fclPppSerAutoMinimumRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerAutoMinimumRecallTimer.setStatus('mandatory')
fclPppSerAutoInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerAutoInactivityTimer.setStatus('mandatory')
fclPppSerAutoReliableVc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2))).clone(namedValues=NamedValues(("off", 3), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerAutoReliableVc.setStatus('mandatory')
fclPppSerAutoCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("networkToSubscriber", 2), ("subscriberToNetwork", 3), ("bothway", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerAutoCompression.setStatus('mandatory')
fclPppSerAutoCompressNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onOptionalCompression", 2), ("onMandatoryCompression", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerAutoCompressNegotiation.setStatus('mandatory')
fclPppSerAutoCompressScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerAutoCompressScrambling.setStatus('mandatory')
fclPppSerAutoCompressMultiPktTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppSerAutoCompressMultiPktTimer.setStatus('mandatory')
fclPppPstnAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2))
fclPppPstnLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 1), )
if mibBuilder.loadTexts: fclPppPstnLogPortTable.setStatus('mandatory')
fclPppPstnLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclPppPstnLpLogPortId"))
if mibBuilder.loadTexts: fclPppPstnLogPortEntry.setStatus('mandatory')
fclPppPstnLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclPppPstnLpLogPortId.setStatus('mandatory')
fclPppPstnLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppPstnLpInterfaceId.setStatus('mandatory')
fclPppPstnLpLocalSubscriberNb = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppPstnLpLocalSubscriberNb.setStatus('mandatory')
fclPppPstnLpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppPstnLpConfigId.setStatus('mandatory')
fclPppPstnRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 2), )
if mibBuilder.loadTexts: fclPppPstnRemotePeerTable.setStatus('mandatory')
fclPppPstnRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclPppPstnRemX121Addr"))
if mibBuilder.loadTexts: fclPppPstnRemotePeerEntry.setStatus('mandatory')
fclPppPstnRemX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclPppPstnRemX121Addr.setStatus('mandatory')
fclPppPstnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppPstnRemStatus.setStatus('mandatory')
fclPppPstnRemPstnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppPstnRemPstnNumber.setStatus('mandatory')
fclPppBIsdnAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3))
fclPppBIsdnLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 1), )
if mibBuilder.loadTexts: fclPppBIsdnLogPortTable.setStatus('mandatory')
fclPppBIsdnLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclPppBIsdnLpLogPortId"))
if mibBuilder.loadTexts: fclPppBIsdnLogPortEntry.setStatus('mandatory')
fclPppBIsdnLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclPppBIsdnLpLogPortId.setStatus('mandatory')
fclPppBIsdnLpIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppBIsdnLpIsdnInterfaceId.setStatus('mandatory')
fclPppBIsdnLocalBriTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 2), )
if mibBuilder.loadTexts: fclPppBIsdnLocalBriTable.setStatus('mandatory')
fclPppBIsdnLocalBriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclPppBIsdnBriId"))
if mibBuilder.loadTexts: fclPppBIsdnLocalBriEntry.setStatus('mandatory')
fclPppBIsdnBriId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclPppBIsdnBriId.setStatus('mandatory')
fclPppBIsdnBriStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppBIsdnBriStatus.setStatus('mandatory')
fclPppBIsdnBriLocalSubsNb1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppBIsdnBriLocalSubsNb1.setStatus('mandatory')
fclPppBIsdnBriLocalSubsNb2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppBIsdnBriLocalSubsNb2.setStatus('mandatory')
fclPppBIsdnRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3), )
if mibBuilder.loadTexts: fclPppBIsdnRemotePeerTable.setStatus('mandatory')
fclPppBIsdnRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1), ).setIndexNames((0, "PCE-MIB", "fclPppBIsdnRemX121Addr"), (0, "PCE-MIB", "fclPppBIsdnRemPeerId"))
if mibBuilder.loadTexts: fclPppBIsdnRemotePeerEntry.setStatus('mandatory')
fclPppBIsdnRemX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclPppBIsdnRemX121Addr.setStatus('mandatory')
fclPppBIsdnRemPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclPppBIsdnRemPeerId.setStatus('mandatory')
fclPppBIsdnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppBIsdnRemStatus.setStatus('mandatory')
fclPppBIsdnRemConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppBIsdnRemConfigId.setStatus('mandatory')
fclPppBIsdnRemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppBIsdnRemPriority.setStatus('mandatory')
fclPppBIsdnRemCallRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppBIsdnRemCallRetryCount.setStatus('mandatory')
fclPppBIsdnRemLinkCheckPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 50800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppBIsdnRemLinkCheckPeriod.setStatus('mandatory')
fclPppBIsdnRemCheckPeriodCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppBIsdnRemCheckPeriodCount.setStatus('mandatory')
fclPppBIsdnLocalPriTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 4), )
if mibBuilder.loadTexts: fclPppBIsdnLocalPriTable.setStatus('mandatory')
fclPppBIsdnLocalPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 4, 1), ).setIndexNames((0, "PCE-MIB", "fclPppBIsdnPriId"))
if mibBuilder.loadTexts: fclPppBIsdnLocalPriEntry.setStatus('mandatory')
fclPppBIsdnPriId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclPppBIsdnPriId.setStatus('mandatory')
fclPppBIsdnPriStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppBIsdnPriStatus.setStatus('mandatory')
fclPppBIsdnPriLocalSubs = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 3, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppBIsdnPriLocalSubs.setStatus('mandatory')
fclPppConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10))
fclPppConfigurationsTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10), )
if mibBuilder.loadTexts: fclPppConfigurationsTable.setStatus('mandatory')
fclPppConfigurationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1), ).setIndexNames((0, "PCE-MIB", "fclPppCfgConfigId"))
if mibBuilder.loadTexts: fclPppConfigurationsEntry.setStatus('mandatory')
fclPppCfgConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclPppCfgConfigId.setStatus('mandatory')
fclPppCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfgStatus.setStatus('mandatory')
fclPppCfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfgDescription.setStatus('mandatory')
fclPppCfgLcpMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfgLcpMagicNumber.setStatus('mandatory')
fclPppCfgLcpLocalMru = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("mru100", 1), ("mru200", 2), ("mru300", 3), ("mru400", 4), ("mru500", 5), ("mru600", 6), ("mru700", 7), ("mru800", 8), ("mru900", 9), ("mru1000", 10), ("mru1100", 11), ("mru1200", 12), ("mru1300", 13), ("mru1400", 14), ("mru1500", 15), ("mru1600", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfgLcpLocalMru.setStatus('mandatory')
fclPppCfgLcpLocalMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("mtu100", 1), ("mtu200", 2), ("mtu300", 3), ("mtu400", 4), ("mtu500", 5), ("mtu600", 6), ("mtu700", 7), ("mtu800", 8), ("mtu900", 9), ("mtu1000", 10), ("mtu1100", 11), ("mtu1200", 12), ("mtu1300", 13), ("mtu1400", 14), ("mtu1500", 15), ("mtu1600", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfgLcpLocalMtu.setStatus('mandatory')
fclPppCfgNcpBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfgNcpBridge.setStatus('mandatory')
fclPppCfgNcpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfgNcpIp.setStatus('mandatory')
fclPppCfgNcpIpx = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfgNcpIpx.setStatus('mandatory')
fclPppCfgNcpClnp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfgNcpClnp.setStatus('mandatory')
fclPppCfgAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("pap", 2), ("chap", 3), ("papAndChap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfgAuthentication.setStatus('mandatory')
fclPppCfgAuthenticationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("masterAndSlave", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfgAuthenticationMode.setStatus('mandatory')
fclPppCfgIpAddrAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 10, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("byLocalSubscriber", 2), ("byRemotePeer", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfgIpAddrAssignment.setStatus('mandatory')
fclPppConfigTimersTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11), )
if mibBuilder.loadTexts: fclPppConfigTimersTable.setStatus('mandatory')
fclPppConfigTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1), ).setIndexNames((0, "PCE-MIB", "fclPppCftConfigId"))
if mibBuilder.loadTexts: fclPppConfigTimersEntry.setStatus('mandatory')
fclPppCftConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclPppCftConfigId.setStatus('mandatory')
fclPppCftLcpEchoRequestPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCftLcpEchoRequestPeriod.setStatus('mandatory')
fclPppCftConnectionTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCftConnectionTimer.setStatus('mandatory')
fclPppCftRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCftRestartTimer.setStatus('mandatory')
fclPppCftConfigureMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCftConfigureMaxCount.setStatus('mandatory')
fclPppCftTerminateMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCftTerminateMaxCount.setStatus('mandatory')
fclPppCftFailureMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 11, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCftFailureMaxCount.setStatus('mandatory')
fclPppConfigAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20))
fclPppCfaLocalIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfaLocalIdentifier.setStatus('mandatory')
fclPppCfaLocalPassword = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfaLocalPassword.setStatus('mandatory')
fclPppCfaRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 10), )
if mibBuilder.loadTexts: fclPppCfaRemotePeerTable.setStatus('mandatory')
fclPppCfaRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 10, 1), ).setIndexNames((0, "PCE-MIB", "fclPppCfaRemPeerId"))
if mibBuilder.loadTexts: fclPppCfaRemotePeerEntry.setStatus('mandatory')
fclPppCfaRemPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclPppCfaRemPeerId.setStatus('mandatory')
fclPppCfaRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfaRemStatus.setStatus('mandatory')
fclPppCfaRemIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfaRemIdentifier.setStatus('mandatory')
fclPppCfaRemPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 30, 10, 20, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclPppCfaRemPassword.setStatus('mandatory')
fclFrameRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40))
fclFrCommunicationEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1))
fclFrCeLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1), )
if mibBuilder.loadTexts: fclFrCeLogPortTable.setStatus('mandatory')
fclFrCeLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclFrCeLpLogPortId"))
if mibBuilder.loadTexts: fclFrCeLogPortEntry.setStatus('mandatory')
fclFrCeLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrCeLpLogPortId.setStatus('mandatory')
fclFrCeLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCeLpInterfaceId.setStatus('mandatory')
fclFrCeLpLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCeLpLocalAddress.setStatus('mandatory')
fclFrCeLpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCeLpConfigId.setStatus('mandatory')
fclFrCeLpLmi = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("lmiNui", 3), ("lmiNni", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCeLpLmi.setStatus('mandatory')
fclFrCeParGenTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2), )
if mibBuilder.loadTexts: fclFrCeParGenTable.setStatus('mandatory')
fclFrCeParGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclFrCeParGenLogPortId"))
if mibBuilder.loadTexts: fclFrCeParGenEntry.setStatus('mandatory')
fclFrCeParGenLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrCeParGenLogPortId.setStatus('mandatory')
fclFrCeParGenDlcSetupAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCeParGenDlcSetupAlarmThreshold.setStatus('mandatory')
fclFrCeParGenDlcSetupDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCeParGenDlcSetupDiscardThreshold.setStatus('mandatory')
fclFrCeParGenBookingUbrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCeParGenBookingUbrThreshold.setStatus('mandatory')
fclFrCeParGenBookingVbrRtThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCeParGenBookingVbrRtThreshold.setStatus('mandatory')
fclFrCeParGenVoiceMaxTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCeParGenVoiceMaxTransitDelay.setStatus('mandatory')
fclFrTerminalEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2))
fclFrTeLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1), )
if mibBuilder.loadTexts: fclFrTeLogPortTable.setStatus('mandatory')
fclFrTeLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclFrTeLpLogPortId"))
if mibBuilder.loadTexts: fclFrTeLogPortEntry.setStatus('mandatory')
fclFrTeLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrTeLpLogPortId.setStatus('mandatory')
fclFrTeLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeLpInterfaceId.setStatus('mandatory')
fclFrTeLpLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeLpLocalAddress.setStatus('mandatory')
fclFrTeLpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeLpConfigId.setStatus('mandatory')
fclFrTeLpLmi = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("off", 1), ("lmiUni", 2), ("lmiNni", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeLpLmi.setStatus('mandatory')
fclFrTeLpFragmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("off", 1), ("optimized", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeLpFragmentation.setStatus('mandatory')
fclFrTeLpLinkLayerConsolidation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeLpLinkLayerConsolidation.setStatus('mandatory')
fclFrTeLpLogPortBackupEnabling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("onWhileActivity", 2), ("onWhileDlciDown", 3), ("onWhileLpDown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeLpLogPortBackupEnabling.setStatus('mandatory')
fclFrTeLpFragFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9, 17, 33, 65))).clone(namedValues=NamedValues(("auto", 1), ("s128", 2), ("s256", 3), ("s512", 5), ("s1024", 9), ("s2048", 17), ("s4096", 33), ("s8192", 65)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeLpFragFrameSize.setStatus('mandatory')
fclFrTeLpBackupTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeLpBackupTimer.setStatus('mandatory')
fclFrTeParGenTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4), )
if mibBuilder.loadTexts: fclFrTeParGenTable.setStatus('mandatory')
fclFrTeParGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1), ).setIndexNames((0, "PCE-MIB", "fclFrTeParGenLogPortId"))
if mibBuilder.loadTexts: fclFrTeParGenEntry.setStatus('mandatory')
fclFrTeParGenLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrTeParGenLogPortId.setStatus('mandatory')
fclFrTeParGenDlcSetupAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeParGenDlcSetupAlarmThreshold.setStatus('mandatory')
fclFrTeParGenDlcSetupDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeParGenDlcSetupDiscardThreshold.setStatus('mandatory')
fclFrTeParGenBookingUbrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeParGenBookingUbrThreshold.setStatus('mandatory')
fclFrTeParGenBookingVbrRtThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeParGenBookingVbrRtThreshold.setStatus('mandatory')
fclFrTeParGenVoiceMaxTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeParGenVoiceMaxTransitDelay.setStatus('mandatory')
fclFrTeParGenDynamicEir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeParGenDynamicEir.setStatus('mandatory')
fclFrTeParGenPredictionRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeParGenPredictionRoundTripDelay.setStatus('mandatory')
fclFrTeParGenNetworkBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeParGenNetworkBandwidth.setStatus('mandatory')
fclFrTeIsdnBackupTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 11), )
if mibBuilder.loadTexts: fclFrTeIsdnBackupTable.setStatus('mandatory')
fclFrTeIsdnBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 11, 1), ).setIndexNames((0, "PCE-MIB", "fclFrTeIsdnBackLogPortId"), (0, "PCE-MIB", "fclFrTeIsdnBackIsdnInterfaceId"))
if mibBuilder.loadTexts: fclFrTeIsdnBackupEntry.setStatus('mandatory')
fclFrTeIsdnBackLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrTeIsdnBackLogPortId.setStatus('mandatory')
fclFrTeIsdnBackIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrTeIsdnBackIsdnInterfaceId.setStatus('mandatory')
fclFrTeIsdnBackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeIsdnBackStatus.setStatus('mandatory')
fclFrTeIsdnRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12), )
if mibBuilder.loadTexts: fclFrTeIsdnRemotePeerTable.setStatus('mandatory')
fclFrTeIsdnRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1), ).setIndexNames((0, "PCE-MIB", "fclFrTeIsdnRemLogPortId"), (0, "PCE-MIB", "fclFrTeIsdnRemRemotePeerId"))
if mibBuilder.loadTexts: fclFrTeIsdnRemotePeerEntry.setStatus('mandatory')
fclFrTeIsdnRemLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrTeIsdnRemLogPortId.setStatus('mandatory')
fclFrTeIsdnRemRemotePeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrTeIsdnRemRemotePeerId.setStatus('mandatory')
fclFrTeIsdnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeIsdnRemStatus.setStatus('mandatory')
fclFrTeIsdnRemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeIsdnRemPriority.setStatus('mandatory')
fclFrTeIsdnRemCallRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeIsdnRemCallRetryCount.setStatus('mandatory')
fclFrTeIsdnRemProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frse", 1), ("frte", 2), ("main-line-protocol", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeIsdnRemProtocol.setStatus('mandatory')
fclFrTeIsdnRemConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 2, 12, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrTeIsdnRemConfigId.setStatus('mandatory')
fclFrSwitchEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3))
fclFrSeLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1), )
if mibBuilder.loadTexts: fclFrSeLogPortTable.setStatus('mandatory')
fclFrSeLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclFrSeLpLogPortId"))
if mibBuilder.loadTexts: fclFrSeLogPortEntry.setStatus('mandatory')
fclFrSeLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrSeLpLogPortId.setStatus('mandatory')
fclFrSeLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeLpInterfaceId.setStatus('mandatory')
fclFrSeLpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeLpConfigId.setStatus('mandatory')
fclFrSeLpLogPortBackupEnabling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onWhileActivity", 2), ("onWhileLpDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeLpLogPortBackupEnabling.setStatus('mandatory')
fclFrSeLpBackupTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeLpBackupTimer.setStatus('mandatory')
fclFrSeIsdnBackupTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 11), )
if mibBuilder.loadTexts: fclFrSeIsdnBackupTable.setStatus('mandatory')
fclFrSeIsdnBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 11, 1), ).setIndexNames((0, "PCE-MIB", "fclFrSeIsdnBackLogPortId"), (0, "PCE-MIB", "fclFrSeIsdnBackIsdnInterfaceId"))
if mibBuilder.loadTexts: fclFrSeIsdnBackupEntry.setStatus('mandatory')
fclFrSeIsdnBackLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrSeIsdnBackLogPortId.setStatus('mandatory')
fclFrSeIsdnBackIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrSeIsdnBackIsdnInterfaceId.setStatus('mandatory')
fclFrSeIsdnBackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeIsdnBackStatus.setStatus('mandatory')
fclFrSeIsdnRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12), )
if mibBuilder.loadTexts: fclFrSeIsdnRemotePeerTable.setStatus('mandatory')
fclFrSeIsdnRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1), ).setIndexNames((0, "PCE-MIB", "fclFrSeIsdnRemLogPortId"), (0, "PCE-MIB", "fclFrSeIsdnRemRemotePeerId"))
if mibBuilder.loadTexts: fclFrSeIsdnRemotePeerEntry.setStatus('mandatory')
fclFrSeIsdnRemLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrSeIsdnRemLogPortId.setStatus('mandatory')
fclFrSeIsdnRemRemotePeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrSeIsdnRemRemotePeerId.setStatus('mandatory')
fclFrSeIsdnRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeIsdnRemStatus.setStatus('mandatory')
fclFrSeIsdnRemConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeIsdnRemConfigId.setStatus('mandatory')
fclFrSeIsdnRemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeIsdnRemPriority.setStatus('mandatory')
fclFrSeIsdnRemCallRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 3, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeIsdnRemCallRetryCount.setStatus('mandatory')
fclFrSeInBIsdn = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13))
fclFrSeInBIsdnLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 1), )
if mibBuilder.loadTexts: fclFrSeInBIsdnLogPortTable.setStatus('mandatory')
fclFrSeInBIsdnLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclFrSeInBLpLogPortId"))
if mibBuilder.loadTexts: fclFrSeInBIsdnLogPortEntry.setStatus('mandatory')
fclFrSeInBLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrSeInBLpLogPortId.setStatus('mandatory')
fclFrSeInBLpIsdnInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeInBLpIsdnInterfaceId.setStatus('mandatory')
fclFrSeInBRemotePeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2), )
if mibBuilder.loadTexts: fclFrSeInBRemotePeerTable.setStatus('mandatory')
fclFrSeInBRemotePeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclFrSeInBRemRemoteAddress"), (0, "PCE-MIB", "fclFrSeInBRemPeerId"))
if mibBuilder.loadTexts: fclFrSeInBRemotePeerEntry.setStatus('mandatory')
fclFrSeInBRemRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrSeInBRemRemoteAddress.setStatus('mandatory')
fclFrSeInBRemPeerId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrSeInBRemPeerId.setStatus('mandatory')
fclFrSeInBRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeInBRemStatus.setStatus('mandatory')
fclFrSeInBRemPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeInBRemPriority.setStatus('mandatory')
fclFrSeInBRemCallRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeInBRemCallRetryCount.setStatus('mandatory')
fclFrSeInBRemConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrSeInBRemConfigId.setStatus('mandatory')
fclFrPvcEndPoint = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20))
fclFrPvcEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1), )
if mibBuilder.loadTexts: fclFrPvcEndPointTable.setStatus('mandatory')
fclFrPvcEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclFrPvcLinkType"), (0, "PCE-MIB", "fclFrPvcLinkId"), (0, "PCE-MIB", "fclFrPvcDlci"))
if mibBuilder.loadTexts: fclFrPvcEndPointEntry.setStatus('mandatory')
fclFrPvcLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("logicalPort", 1), ("bChannelIsdn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcLinkType.setStatus('mandatory')
fclFrPvcLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcLinkId.setStatus('mandatory')
fclFrPvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcDlci.setStatus('mandatory')
fclFrPvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcStatus.setStatus('mandatory')
fclFrPvcCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcCalledAddress.setStatus('mandatory')
fclFrPvcCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 3, 4))).clone(namedValues=NamedValues(("calling", 1), ("called", 2), ("calledMulti", 5), ("auto", 3), ("datagram", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcCallDirection.setStatus('mandatory')
fclFrPvcEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("lanProtocols", 2), ("x25", 3), ("sna", 4), ("snaBan", 5), ("voice", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcEncapsulation.setStatus('mandatory')
fclFrPvcBackupEnabling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcBackupEnabling.setStatus('mandatory')
fclFrPvcBackupDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcBackupDlci.setStatus('mandatory')
fclFrPvcTrafficManagementStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("discardButNotDelay", 1), ("delayButNotDiscard-Bc", 3), ("delayButNotDiscard-BcBe", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcTrafficManagementStrategy.setStatus('mandatory')
fclFrPvcNetworkTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(36, 32))).clone(namedValues=NamedValues(("transparent", 36), ("ansiT1-617-G", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcNetworkTransport.setStatus('mandatory')
fclFrPvcQualityOfServiceTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2), )
if mibBuilder.loadTexts: fclFrPvcQualityOfServiceTable.setStatus('mandatory')
fclFrPvcQualityOfServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1), ).setIndexNames((0, "PCE-MIB", "fclFrPvcQosLinkType"), (0, "PCE-MIB", "fclFrPvcQosLinkId"), (0, "PCE-MIB", "fclFrPvcQosDlci"))
if mibBuilder.loadTexts: fclFrPvcQualityOfServiceEntry.setStatus('mandatory')
fclFrPvcQosLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("logicalPort", 1), ("bChannelIsdn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcQosLinkType.setStatus('mandatory')
fclFrPvcQosLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcQosLinkId.setStatus('mandatory')
fclFrPvcQosDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcQosDlci.setStatus('mandatory')
fclFrPvcQosCos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("ubr", 3), ("vbr", 1), ("vbr-rt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcQosCos.setStatus('mandatory')
fclFrPvcQosInBc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcQosInBc.setStatus('mandatory')
fclFrPvcQosInBe = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcQosInBe.setStatus('mandatory')
fclFrPvcQosInCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcQosInCir.setStatus('mandatory')
fclFrPvcQosInMinCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcQosInMinCir.setStatus('mandatory')
fclFrPvcQosOutBc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcQosOutBc.setStatus('mandatory')
fclFrPvcQosOutBe = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcQosOutBe.setStatus('mandatory')
fclFrPvcQosOutCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcQosOutCir.setStatus('mandatory')
fclFrPvcQosOutMinCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcQosOutMinCir.setStatus('mandatory')
fclFrPvcX25EncapsulationTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10), )
if mibBuilder.loadTexts: fclFrPvcX25EncapsulationTable.setStatus('mandatory')
fclFrPvcX25EncapsulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10, 1), ).setIndexNames((0, "PCE-MIB", "fclFrPvcX25LinkType"), (0, "PCE-MIB", "fclFrPvcX25LinkId"), (0, "PCE-MIB", "fclFrPvcX25Dlci"))
if mibBuilder.loadTexts: fclFrPvcX25EncapsulationEntry.setStatus('mandatory')
fclFrPvcX25LinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("logicalPort", 1), ("bChannelIsdn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcX25LinkType.setStatus('mandatory')
fclFrPvcX25LinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcX25LinkId.setStatus('mandatory')
fclFrPvcX25Dlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcX25Dlci.setStatus('mandatory')
fclFrPvcX25AssociatedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcX25AssociatedAddress.setStatus('mandatory')
fclFrPvcX25InterNodeConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcX25InterNodeConfigId.setStatus('mandatory')
fclFrPvcSnaEncapsulationTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11), )
if mibBuilder.loadTexts: fclFrPvcSnaEncapsulationTable.setStatus('mandatory')
fclFrPvcSnaEncapsulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1), ).setIndexNames((0, "PCE-MIB", "fclFrPvcSnaLinkType"), (0, "PCE-MIB", "fclFrPvcSnaLinkId"), (0, "PCE-MIB", "fclFrPvcSnaDlci"))
if mibBuilder.loadTexts: fclFrPvcSnaEncapsulationEntry.setStatus('mandatory')
fclFrPvcSnaLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("logicalPort", 1), ("bChannelIsdn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcSnaLinkType.setStatus('mandatory')
fclFrPvcSnaLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcSnaLinkId.setStatus('mandatory')
fclFrPvcSnaDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcSnaDlci.setStatus('mandatory')
fclFrPvcSnaConnTestEnabling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaConnTestEnabling.setStatus('mandatory')
fclFrPvcSnaLevel3Pid = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("subArea", 1), ("peripheral", 2), ("appn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaLevel3Pid.setStatus('mandatory')
fclFrPvcSnaDestinationSap = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaDestinationSap.setStatus('mandatory')
fclFrPvcSnaSourceSap = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaSourceSap.setStatus('mandatory')
fclFrPvcSnaT1ReplyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaT1ReplyTimer.setStatus('mandatory')
fclFrPvcSnaN2RetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaN2RetryCount.setStatus('mandatory')
fclFrPvcSnaT2ReceiverAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 15000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaT2ReceiverAckTimer.setStatus('mandatory')
fclFrPvcSnaN3AcknowledgedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaN3AcknowledgedCount.setStatus('mandatory')
fclFrPvcSnaNwIncrementAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaNwIncrementAckCount.setStatus('mandatory')
fclFrPvcSnaTwTransmitWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaTwTransmitWinSize.setStatus('mandatory')
fclFrPvcSnaRwReceiveWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 11, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaRwReceiveWinSize.setStatus('mandatory')
fclFrSnaBan = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12))
fclFrNbStationDlci = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 1))
fclFrNbStationByDlci = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nb0", 1), ("nb16", 2), ("nb32", 3), ("nb64", 4), ("nb128", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrNbStationByDlci.setStatus('mandatory')
fclFrPvcSnaBanEncapsulationTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10), )
if mibBuilder.loadTexts: fclFrPvcSnaBanEncapsulationTable.setStatus('mandatory')
fclFrPvcSnaBanEncapsulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1), ).setIndexNames((0, "PCE-MIB", "fclFrPvcSnaBanLinkType"), (0, "PCE-MIB", "fclFrPvcSnaBanLinkId"), (0, "PCE-MIB", "fclFrPvcSnaBanDlci"))
if mibBuilder.loadTexts: fclFrPvcSnaBanEncapsulationEntry.setStatus('mandatory')
fclFrPvcSnaBanLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("logicalPort", 1), ("bChannelIsdn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcSnaBanLinkType.setStatus('mandatory')
fclFrPvcSnaBanLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcSnaBanLinkId.setStatus('mandatory')
fclFrPvcSnaBanDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcSnaBanDlci.setStatus('mandatory')
fclFrPvcSnaBanPuId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaBanPuId.setStatus('mandatory')
fclFrPvcSnaBanConnTestEnabling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaBanConnTestEnabling.setStatus('mandatory')
fclFrPvcSnaBanLink = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frontal", 1), ("remote", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaBanLink.setStatus('mandatory')
fclFrPvcSnaBanT1ReplyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaBanT1ReplyTimer.setStatus('mandatory')
fclFrPvcSnaBanN2RetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaBanN2RetryCount.setStatus('mandatory')
fclFrPvcSnaBanT2ReceiverAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 15000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaBanT2ReceiverAckTimer.setStatus('mandatory')
fclFrPvcSnaBanN3AcknowledgedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaBanN3AcknowledgedCount.setStatus('mandatory')
fclFrPvcSnaBanNwIncrementAckCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaBanNwIncrementAckCount.setStatus('mandatory')
fclFrPvcSnaBanTwTransmitWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaBanTwTransmitWinSize.setStatus('mandatory')
fclFrPvcSnaBanRwReceiveWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaBanRwReceiveWinSize.setStatus('mandatory')
fclFrPvcSnaBanMinRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 20, 12, 10, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcSnaBanMinRecallTimer.setStatus('mandatory')
fclFrPvcSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25))
fclFrPvcTunEndPointTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1), )
if mibBuilder.loadTexts: fclFrPvcTunEndPointTable.setStatus('mandatory')
fclFrPvcTunEndPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclFrPvcTunLinkType"), (0, "PCE-MIB", "fclFrPvcTunLinkId"), (0, "PCE-MIB", "fclFrPvcTunDlci"))
if mibBuilder.loadTexts: fclFrPvcTunEndPointEntry.setStatus('mandatory')
fclFrPvcTunLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("logicalPort", 1), ("bChannelIsdn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcTunLinkType.setStatus('mandatory')
fclFrPvcTunLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcTunLinkId.setStatus('mandatory')
fclFrPvcTunDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrPvcTunDlci.setStatus('mandatory')
fclFrPvcTunStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcTunStatus.setStatus('mandatory')
fclFrPvcTunInCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcTunInCir.setStatus('mandatory')
fclFrPvcTunOutCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcTunOutCir.setStatus('mandatory')
fclFrPvcTunBackupEnabling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcTunBackupEnabling.setStatus('mandatory')
fclFrPvcTunBackupDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 991))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcTunBackupDlci.setStatus('mandatory')
fclFrPvcTunAssociatedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcTunAssociatedAddress.setStatus('mandatory')
fclFrPvcTunFrseConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 25, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrPvcTunFrseConfiguration.setStatus('mandatory')
fclFrameRelayBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27))
fclFrBackupTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1), )
if mibBuilder.loadTexts: fclFrBackupTable.setStatus('mandatory')
fclFrBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclFrMainLPId"), (0, "PCE-MIB", "fclFrMainDlci"), (0, "PCE-MIB", "fclFrBackupLPId"), (0, "PCE-MIB", "fclFrBackupDlci"))
if mibBuilder.loadTexts: fclFrBackupEntry.setStatus('mandatory')
fclFrMainLPId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrMainLPId.setStatus('mandatory')
fclFrMainDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrMainDlci.setStatus('mandatory')
fclFrBackupLPId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrBackupLPId.setStatus('mandatory')
fclFrBackupDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrBackupDlci.setStatus('mandatory')
fclFrBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 27, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrBackupStatus.setStatus('mandatory')
fclFrConfigurationCeTe = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30))
fclFrConfigCeTeTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1), )
if mibBuilder.loadTexts: fclFrConfigCeTeTable.setStatus('mandatory')
fclFrConfigCeTeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclFrCfcConfigId"))
if mibBuilder.loadTexts: fclFrConfigCeTeEntry.setStatus('mandatory')
fclFrCfcConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrCfcConfigId.setStatus('mandatory')
fclFrCfcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcStatus.setStatus('mandatory')
fclFrCfcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcDescription.setStatus('mandatory')
fclFrCfcProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcProfileId.setStatus('mandatory')
fclFrCfcModificationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrCfcModificationCount.setStatus('mandatory')
fclFrCfcGeneralParameterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10), )
if mibBuilder.loadTexts: fclFrCfcGeneralParameterTable.setStatus('mandatory')
fclFrCfcGeneralParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1), ).setIndexNames((0, "PCE-MIB", "fclFrCfcGenConfigId"))
if mibBuilder.loadTexts: fclFrCfcGeneralParameterEntry.setStatus('mandatory')
fclFrCfcGenConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrCfcGenConfigId.setStatus('mandatory')
fclFrCfcGenMinimumRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcGenMinimumRecallTimer.setStatus('mandatory')
fclFrCfcGenInactivityCheckDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcGenInactivityCheckDelay.setStatus('mandatory')
fclFrCfcGenInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcGenInactivityTimer.setStatus('mandatory')
fclFrCfcGenUnuseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2550))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcGenUnuseTimer.setStatus('mandatory')
fclFrCfcGenSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcGenSVC.setStatus('mandatory')
fclFrCfcSignallingParameterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15), )
if mibBuilder.loadTexts: fclFrCfcSignallingParameterTable.setStatus('mandatory')
fclFrCfcSignallingParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1), ).setIndexNames((0, "PCE-MIB", "fclFrCfcSigConfigId"))
if mibBuilder.loadTexts: fclFrCfcSignallingParameterEntry.setStatus('mandatory')
fclFrCfcSigConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrCfcSigConfigId.setStatus('mandatory')
fclFrCfcSigOuputTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 51000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcSigOuputTimeout.setStatus('mandatory')
fclFrCfcSigSignalOutputWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcSigSignalOutputWinSize.setStatus('mandatory')
fclFrCfcSigN200RetransMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcSigN200RetransMaxCount.setStatus('mandatory')
fclFrCfcSigT200RetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcSigT200RetransTimer.setStatus('mandatory')
fclFrCfcSigT203InactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcSigT203InactivityTimer.setStatus('mandatory')
fclFrCfcSigT303SetupResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcSigT303SetupResponseTimer.setStatus('mandatory')
fclFrCfcSigT305DisconnectResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcSigT305DisconnectResponseTimer.setStatus('mandatory')
fclFrCfcSigT308ReleaseResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcSigT308ReleaseResponseTimer.setStatus('mandatory')
fclFrCfcSigT310CallProceedingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcSigT310CallProceedingTimer.setStatus('mandatory')
fclFrCfcSigT316RestartAcknowledgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcSigT316RestartAcknowledgeTimer.setStatus('mandatory')
fclFrCfcSigConversionAimedPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 15, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcSigConversionAimedPoint.setStatus('mandatory')
fclFrCfcEiCodingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16), )
if mibBuilder.loadTexts: fclFrCfcEiCodingTable.setStatus('mandatory')
fclFrCfcEiCodingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16, 1), ).setIndexNames((0, "PCE-MIB", "fclFrCfcEiCodConfigId"))
if mibBuilder.loadTexts: fclFrCfcEiCodingEntry.setStatus('mandatory')
fclFrCfcEiCodConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrCfcEiCodConfigId.setStatus('mandatory')
fclFrCfcEiCodCalledTypNum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("international-number", 2), ("national-number", 3), ("complementary-address", 4), ("network-specific", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcEiCodCalledTypNum.setStatus('mandatory')
fclFrCfcEiCodCalledNumPlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9))).clone(namedValues=NamedValues(("unknown", 1), ("e164", 2), ("x121", 3), ("private-num-plan", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcEiCodCalledNumPlanId.setStatus('mandatory')
fclFrCfcEiCodCallingTypNum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("international-number", 2), ("national-number", 3), ("complementary-address", 4), ("network-specific", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcEiCodCallingTypNum.setStatus('mandatory')
fclFrCfcEiCodCallingNumPlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 9))).clone(namedValues=NamedValues(("unknown", 1), ("e164", 2), ("x121", 3), ("private-num-plan", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcEiCodCallingNumPlanId.setStatus('mandatory')
fclFrCfcLmiParameterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21), )
if mibBuilder.loadTexts: fclFrCfcLmiParameterTable.setStatus('mandatory')
fclFrCfcLmiParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1), ).setIndexNames((0, "PCE-MIB", "fclFrCfcLmiConfigId"))
if mibBuilder.loadTexts: fclFrCfcLmiParameterEntry.setStatus('mandatory')
fclFrCfcLmiConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrCfcLmiConfigId.setStatus('mandatory')
fclFrCfcLmiDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dlci0", 1), ("dlci1023", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcLmiDlci.setStatus('mandatory')
fclFrCfcLmiStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ansiT1-617d", 1), ("itutQ933a", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcLmiStandard.setStatus('mandatory')
fclFrCfcLmiAccessibilityCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast", 1), ("n393", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcLmiAccessibilityCondition.setStatus('mandatory')
fclFrCfcLmiN391FullStatusPollCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcLmiN391FullStatusPollCount.setStatus('mandatory')
fclFrCfcLmiN392ErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcLmiN392ErrorThreshold.setStatus('mandatory')
fclFrCfcLmiN393MonitoredEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcLmiN393MonitoredEventCount.setStatus('mandatory')
fclFrCfcLmiT391LinkIntegPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcLmiT391LinkIntegPollTimer.setStatus('mandatory')
fclFrCfcLmiT392PollingVerifTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcLmiT392PollingVerifTimer.setStatus('mandatory')
fclFrCfcLmiAsynchronousStatusReport = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 30, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfcLmiAsynchronousStatusReport.setStatus('mandatory')
fclFrConfigurationSe = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40))
fclFrConfigSeTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1), )
if mibBuilder.loadTexts: fclFrConfigSeTable.setStatus('mandatory')
fclFrConfigSeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclFrCfsConfigId"))
if mibBuilder.loadTexts: fclFrConfigSeEntry.setStatus('mandatory')
fclFrCfsConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrCfsConfigId.setStatus('mandatory')
fclFrCfsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsStatus.setStatus('mandatory')
fclFrCfsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsDescription.setStatus('mandatory')
fclFrCfsProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsProfileId.setStatus('mandatory')
fclFrCfsModificationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrCfsModificationCount.setStatus('mandatory')
fclFrCfsGeneralParameterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10), )
if mibBuilder.loadTexts: fclFrCfsGeneralParameterTable.setStatus('mandatory')
fclFrCfsGeneralParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1), ).setIndexNames((0, "PCE-MIB", "fclFrCfsGenConfigId"))
if mibBuilder.loadTexts: fclFrCfsGeneralParameterEntry.setStatus('mandatory')
fclFrCfsGenConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrCfsGenConfigId.setStatus('mandatory')
fclFrCfsGenCallReturnTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("onIfFailed", 3), ("onIfFailedOrBusy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsGenCallReturnTransmission.setStatus('mandatory')
fclFrCfsGenUnuseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2550))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsGenUnuseTimer.setStatus('mandatory')
fclFrCfsGenDlcSetupAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsGenDlcSetupAlarmThreshold.setStatus('mandatory')
fclFrCfsGenDlcSetupDiscardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsGenDlcSetupDiscardThreshold.setStatus('mandatory')
fclFrCfsGenBookingUbrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsGenBookingUbrThreshold.setStatus('mandatory')
fclFrCfsGenBookingVbrRtThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsGenBookingVbrRtThreshold.setStatus('mandatory')
fclFrCfsGenBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("svc-endpoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsGenBehavior.setStatus('mandatory')
fclFrCfsGenDynamicEir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsGenDynamicEir.setStatus('mandatory')
fclFrCfsGenPredictionRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsGenPredictionRoundTripDelay.setStatus('mandatory')
fclFrCfsGenNetworkBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 10, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 34))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsGenNetworkBandwidth.setStatus('mandatory')
fclFrCfsSignallingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20), )
if mibBuilder.loadTexts: fclFrCfsSignallingTable.setStatus('mandatory')
fclFrCfsSignallingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1), ).setIndexNames((0, "PCE-MIB", "fclFrCfsSigConfigId"))
if mibBuilder.loadTexts: fclFrCfsSignallingEntry.setStatus('mandatory')
fclFrCfsSigConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclFrCfsSigConfigId.setStatus('mandatory')
fclFrCfsSigOuputTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 51000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsSigOuputTimeout.setStatus('mandatory')
fclFrCfsSigSignalOutputWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsSigSignalOutputWinSize.setStatus('mandatory')
fclFrCfsSigN200RetransMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsSigN200RetransMaxCount.setStatus('mandatory')
fclFrCfsSigT200RetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsSigT200RetransTimer.setStatus('mandatory')
fclFrCfsSigT203InactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsSigT203InactivityTimer.setStatus('mandatory')
fclFrCfsSigT303SetupResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsSigT303SetupResponseTimer.setStatus('mandatory')
fclFrCfsSigT305DisconnectResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsSigT305DisconnectResponseTimer.setStatus('mandatory')
fclFrCfsSigT308ReleaseResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsSigT308ReleaseResponseTimer.setStatus('mandatory')
fclFrCfsSigT310CallProceedingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsSigT310CallProceedingTimer.setStatus('mandatory')
fclFrCfsSigT316RestartAcknowledgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 40, 40, 20, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclFrCfsSigT316RestartAcknowledgeTimer.setStatus('mandatory')
fclInterUnitLink = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45))
fclInterUnitLinkTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1), )
if mibBuilder.loadTexts: fclInterUnitLinkTable.setStatus('mandatory')
fclInterUnitLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclIulLogPortId"))
if mibBuilder.loadTexts: fclInterUnitLinkEntry.setStatus('mandatory')
fclIulLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(36, 41))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclIulLogPortId.setStatus('mandatory')
fclIulInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(36, 41))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclIulInterfaceId.setStatus('mandatory')
fclIulCallReturnTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclIulCallReturnTransmission.setStatus('mandatory')
fclIulConversionAimedPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclIulConversionAimedPoint.setStatus('mandatory')
fclIulConversionIncomingCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclIulConversionIncomingCall.setStatus('mandatory')
fclIulConversionOutgoingCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclIulConversionOutgoingCall.setStatus('mandatory')
fclIulConversionAddressCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 45, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("onIncomingCall", 2), ("onOutgoingCall", 3), ("onIncomingCallAndOutgoingCall", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclIulConversionAddressCheck.setStatus('mandatory')
fclX25Configurations = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50))
fclX25ConfigAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1))
fclX25ConfigAccessTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1), )
if mibBuilder.loadTexts: fclX25ConfigAccessTable.setStatus('mandatory')
fclX25ConfigAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfaConfigId"))
if mibBuilder.loadTexts: fclX25ConfigAccessEntry.setStatus('mandatory')
fclX25CfaConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfaConfigId.setStatus('mandatory')
fclX25CfaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaStatus.setStatus('mandatory')
fclX25CfaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDescription.setStatus('mandatory')
fclX25CfaProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaProfileId.setStatus('mandatory')
fclX25CfaModificationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfaModificationCount.setStatus('mandatory')
fclX25CfaDataLinkNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10), )
if mibBuilder.loadTexts: fclX25CfaDataLinkNetworkTable.setStatus('mandatory')
fclX25CfaDataLinkNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfaDlnConfigId"))
if mibBuilder.loadTexts: fclX25CfaDataLinkNetworkEntry.setStatus('mandatory')
fclX25CfaDlnConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfaDlnConfigId.setStatus('mandatory')
fclX25CfaDlnStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnStationType.setStatus('mandatory')
fclX25CfaDlnNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 53, 61, 65, 69, 73, 77, 93))).clone(namedValues=NamedValues(("x25", 1), ("transpac", 5), ("telenet", 9), ("tymnet", 13), ("infoSwitch", 17), ("datapac", 21), ("dn1", 25), ("pss", 29), ("germanyDatexP", 33), ("dcs", 37), ("itapac", 41), ("austpac", 45), ("uninet", 53), ("telepac", 61), ("iberpac", 65), ("datapak", 69), ("helpac", 73), ("entel", 77), ("austriaDatexP", 93)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnNetworkType.setStatus('mandatory')
fclX25CfaDlnN2RetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnN2RetryCount.setStatus('mandatory')
fclX25CfaDlnT1AcknowledgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnT1AcknowledgeTimer.setStatus('mandatory')
fclX25CfaDlnT2AcknwledgeDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 12700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnT2AcknwledgeDelayTimer.setStatus('mandatory')
fclX25CfaDlnKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnKWindowSize.setStatus('mandatory')
fclX25CfaDlnEachPacketAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnEachPacketAcknowledgement.setStatus('mandatory')
fclX25CfaDlnLowestIncomingChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnLowestIncomingChannel.setStatus('mandatory')
fclX25CfaDlnIncomingChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnIncomingChannelCount.setStatus('mandatory')
fclX25CfaDlnLowestTwoWayChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnLowestTwoWayChannel.setStatus('mandatory')
fclX25CfaDlnTwoWayChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnTwoWayChannelCount.setStatus('mandatory')
fclX25CfaDlnLowestOutgoingChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnLowestOutgoingChannel.setStatus('mandatory')
fclX25CfaDlnOutgoingChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnOutgoingChannelCount.setStatus('mandatory')
fclX25CfaDlnOutgoingChannelNumbering = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("decremental", 1), ("incremental", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnOutgoingChannelNumbering.setStatus('mandatory')
fclX25CfaDlnDBitModification = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("clear", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaDlnDBitModification.setStatus('mandatory')
fclX25CfaFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20), )
if mibBuilder.loadTexts: fclX25CfaFacilityTable.setStatus('mandatory')
fclX25CfaFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfaFacConfigId"))
if mibBuilder.loadTexts: fclX25CfaFacilityEntry.setStatus('mandatory')
fclX25CfaFacConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfaFacConfigId.setStatus('mandatory')
fclX25CfaFacClosedUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3, 4))).clone(namedValues=NamedValues(("noCheck", 2), ("clear", 1), ("subscribe", 3), ("subscribeAndRemove", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaFacClosedUserGroup.setStatus('mandatory')
fclX25CfaFacReverseCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("refuse", 1), ("accept", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaFacReverseCharging.setStatus('mandatory')
fclX25CfaFacTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2))).clone(namedValues=NamedValues(("noCheck", 1), ("clear", 3), ("subscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaFacTransitDelay.setStatus('mandatory')
fclX25CfaFacOutputMarkers = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noCheck", 1), ("check", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaFacOutputMarkers.setStatus('mandatory')
fclX25CfaFacInputMarkers = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noCheck", 1), ("check", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaFacInputMarkers.setStatus('mandatory')
fclX25CfaFacOutputUnknownFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2))).clone(namedValues=NamedValues(("noCheck", 1), ("clear", 3), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaFacOutputUnknownFacility.setStatus('mandatory')
fclX25CfaFacInputUnknownFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2))).clone(namedValues=NamedValues(("noCheck", 1), ("clear", 3), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaFacInputUnknownFacility.setStatus('mandatory')
fclX25CfaNegotiatedFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21), )
if mibBuilder.loadTexts: fclX25CfaNegotiatedFacilityTable.setStatus('mandatory')
fclX25CfaNegotiatedFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfaNegConfigId"))
if mibBuilder.loadTexts: fclX25CfaNegotiatedFacilityEntry.setStatus('mandatory')
fclX25CfaNegConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfaNegConfigId.setStatus('mandatory')
fclX25CfaNegOutputFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("noCheck", 3), ("clear", 1), ("subscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegOutputFastSelect.setStatus('mandatory')
fclX25CfaNegInputFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("subscribe", 2), ("longUserData", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegInputFastSelect.setStatus('mandatory')
fclX25CfaNegThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("subscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegThroughputClass.setStatus('mandatory')
fclX25CfaNegDefOutThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegDefOutThroughputClass.setStatus('mandatory')
fclX25CfaNegDefInThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegDefInThroughputClass.setStatus('mandatory')
fclX25CfaNegMaxOutThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegMaxOutThroughputClass.setStatus('mandatory')
fclX25CfaNegMaxInThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegMaxInThroughputClass.setStatus('mandatory')
fclX25CfaNegPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("subscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegPacketSize.setStatus('mandatory')
fclX25CfaNegDefOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegDefOutPacketSize.setStatus('mandatory')
fclX25CfaNegDefInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegDefInPacketSize.setStatus('mandatory')
fclX25CfaNegMaxOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegMaxOutPacketSize.setStatus('mandatory')
fclX25CfaNegMaxInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegMaxInPacketSize.setStatus('mandatory')
fclX25CfaNegMinOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegMinOutPacketSize.setStatus('mandatory')
fclX25CfaNegMinInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegMinInPacketSize.setStatus('mandatory')
fclX25CfaNegWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("subscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegWindowSize.setStatus('mandatory')
fclX25CfaNegDefOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegDefOutWindowSize.setStatus('mandatory')
fclX25CfaNegDefInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegDefInWindowSize.setStatus('mandatory')
fclX25CfaNegMaxOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegMaxOutWindowSize.setStatus('mandatory')
fclX25CfaNegMaxInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 21, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaNegMaxInWindowSize.setStatus('mandatory')
fclX25CfaSignallingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30), )
if mibBuilder.loadTexts: fclX25CfaSignallingTable.setStatus('mandatory')
fclX25CfaSignallingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfaSigConfigId"))
if mibBuilder.loadTexts: fclX25CfaSignallingEntry.setStatus('mandatory')
fclX25CfaSigConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfaSigConfigId.setStatus('mandatory')
fclX25CfaSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x25Network", 1), ("x25Subscriber", 2), ("x75", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigType.setStatus('mandatory')
fclX25CfaSigPacketAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigPacketAddressCount.setStatus('mandatory')
fclX25CfaSigSubAddressTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigSubAddressTransmission.setStatus('mandatory')
fclX25CfaSigPdnIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("pdnWithoutAddressTransmission", 2), ("pdnWithAddressTransmission", 5), ("dedicatedLaPoste", 3), ("dedicatedTranspac", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigPdnIndicator.setStatus('mandatory')
fclX25CfaSigConversionAimedPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigConversionAimedPoint.setStatus('mandatory')
fclX25CfaSigConversionIncomingCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigConversionIncomingCall.setStatus('mandatory')
fclX25CfaSigConversionOutgoingCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigConversionOutgoingCall.setStatus('mandatory')
fclX25CfaSigConversionAddressCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("onIncomingCall", 2), ("onOutgoingCall", 3), ("onIncomingCallAndOutgoingCall", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigConversionAddressCheck.setStatus('mandatory')
fclX25CfaSigConvMultiCalledAddrInCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigConvMultiCalledAddrInCall.setStatus('mandatory')
fclX25CfaSigConvMultiCallingAddrInCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigConvMultiCallingAddrInCall.setStatus('mandatory')
fclX25CfaSigConvMultiCalledAddrOutCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigConvMultiCalledAddrOutCall.setStatus('mandatory')
fclX25CfaSigConvMultiCallingAddrOutCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigConvMultiCallingAddrOutCall.setStatus('mandatory')
fclX25CfaSigOutPacketCauseField = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noModify", 1), ("setToZero", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigOutPacketCauseField.setStatus('mandatory')
fclX25CfaSigInPacketCauseField = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noModify", 1), ("setToZero", 2), ("setToZeroIfLowerThan128", 3), ("modify", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigInPacketCauseField.setStatus('mandatory')
fclX25CfaSigT11CallResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigT11CallResponseTimer.setStatus('mandatory')
fclX25CfaSigCallAcceptedFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 4, 1))).clone(namedValues=NamedValues(("noFacilitiesNoAddresses", 3), ("facilitiesNoAddresses", 2), ("facilitiesNotCheckedAddresses", 4), ("facilitiesCheckedAddresses", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigCallAcceptedFormat.setStatus('mandatory')
fclX25CfaSigClearFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 30, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 4, 1))).clone(namedValues=NamedValues(("noFacilitiesNoAddresses", 3), ("facilitiesNoAddresses", 2), ("facilitiesNotCheckedAddresses", 4), ("facilitiesCheckedAddresses", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSigClearFormat.setStatus('mandatory')
fclX25CfaServiceTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40), )
if mibBuilder.loadTexts: fclX25CfaServiceTable.setStatus('mandatory')
fclX25CfaServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfaSerConfigId"))
if mibBuilder.loadTexts: fclX25CfaServiceEntry.setStatus('mandatory')
fclX25CfaSerConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfaSerConfigId.setStatus('mandatory')
fclX25CfaSerReliableVc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2, 4))).clone(namedValues=NamedValues(("off", 1), ("clear", 3), ("subscribe", 2), ("check", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerReliableVc.setStatus('mandatory')
fclX25CfaSerCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("overall", 2), ("detailed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerCharging.setStatus('mandatory')
fclX25CfaSerX29Reselection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerX29Reselection.setStatus('mandatory')
fclX25CfaSerRemoteExclusiveLink = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerRemoteExclusiveLink.setStatus('mandatory')
fclX25CfaSerStatLoadAndTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerStatLoadAndTraffic.setStatus('mandatory')
fclX25CfaSerStatSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerStatSignalling.setStatus('mandatory')
fclX25CfaSerStatTotalizer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerStatTotalizer.setStatus('mandatory')
fclX25CfaSerStatCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerStatCompression.setStatus('mandatory')
fclX25CfaSerCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("networkToSubscriber", 2), ("subscriberToNetwork", 3), ("bothway", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerCompression.setStatus('mandatory')
fclX25CfaSerCompressNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onOptionalCompression", 2), ("onMandatoryCompression", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerCompressNegotiation.setStatus('mandatory')
fclX25CfaSerCompressScrambling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerCompressScrambling.setStatus('mandatory')
fclX25CfaSerCompressMultiPacketsTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerCompressMultiPacketsTimer.setStatus('mandatory')
fclX25CfaSerCos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1))).clone(namedValues=NamedValues(("ubr", 3), ("vbr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerCos.setStatus('mandatory')
fclX25CfaSerCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerCir.setStatus('mandatory')
fclX25CfaSerMinCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerMinCir.setStatus('mandatory')
fclX25CfaSerBe = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 40, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaSerBe.setStatus('mandatory')
fclX25CfaPackingAddresses = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50))
fclX25CfaPackOutSubAddressCheck = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaPackOutSubAddressCheck.setStatus('mandatory')
fclX25CfaPackOutSubAddressSize = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaPackOutSubAddressSize.setStatus('mandatory')
fclX25CfaPackPdnCallingSubAddress = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pack", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaPackPdnCallingSubAddress.setStatus('mandatory')
fclX25CfaPackingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 4), )
if mibBuilder.loadTexts: fclX25CfaPackingTable.setStatus('mandatory')
fclX25CfaPackingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 4, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfaPackPrivateZoSb"))
if mibBuilder.loadTexts: fclX25CfaPackingEntry.setStatus('mandatory')
fclX25CfaPackPrivateZoSb = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfaPackPrivateZoSb.setStatus('mandatory')
fclX25CfaPackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaPackStatus.setStatus('mandatory')
fclX25CfaPackSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 50, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaPackSubAddress.setStatus('mandatory')
fclX25CfaClosedUserGroupTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51), )
if mibBuilder.loadTexts: fclX25CfaClosedUserGroupTable.setStatus('mandatory')
fclX25CfaClosedUserGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfaCugLogPortId"), (0, "PCE-MIB", "fclX25CfaCugClosedUserGroupId"))
if mibBuilder.loadTexts: fclX25CfaClosedUserGroupEntry.setStatus('mandatory')
fclX25CfaCugLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfaCugLogPortId.setStatus('mandatory')
fclX25CfaCugClosedUserGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfaCugClosedUserGroupId.setStatus('mandatory')
fclX25CfaCugStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaCugStatus.setStatus('mandatory')
fclX25CfaCugChecking = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 1))).clone(namedValues=NamedValues(("onIncomingCall", 2), ("onOutgoingCall", 3), ("onIncomingCallAndOutgoingCall", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaCugChecking.setStatus('mandatory')
fclX25CfaCugClosedUserGroupExt = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 1, 51, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfaCugClosedUserGroupExt.setStatus('mandatory')
fclX25ConfigInterNode = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10))
fclX25ConfigInterNodeTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1), )
if mibBuilder.loadTexts: fclX25ConfigInterNodeTable.setStatus('mandatory')
fclX25ConfigInterNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfnConfigId"))
if mibBuilder.loadTexts: fclX25ConfigInterNodeEntry.setStatus('mandatory')
fclX25CfnConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfnConfigId.setStatus('mandatory')
fclX25CfnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnStatus.setStatus('mandatory')
fclX25CfnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDescription.setStatus('mandatory')
fclX25CfnProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnProfileId.setStatus('mandatory')
fclX25CfnModificationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfnModificationCount.setStatus('mandatory')
fclX25CfnDataLinkNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10), )
if mibBuilder.loadTexts: fclX25CfnDataLinkNetworkTable.setStatus('mandatory')
fclX25CfnDataLinkNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfnDlnConfigId"))
if mibBuilder.loadTexts: fclX25CfnDataLinkNetworkEntry.setStatus('mandatory')
fclX25CfnDlnConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfnDlnConfigId.setStatus('mandatory')
fclX25CfnDlnStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnStationType.setStatus('mandatory')
fclX25CfnDlnN2RetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnN2RetryCount.setStatus('mandatory')
fclX25CfnDlnT1AcknowledgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnT1AcknowledgeTimer.setStatus('mandatory')
fclX25CfnDlnT2AcknowledgeDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 12700))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnT2AcknowledgeDelayTimer.setStatus('mandatory')
fclX25CfnDlnKWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnKWindowSize.setStatus('mandatory')
fclX25CfnDlnEachPacketAcknowledgement = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnEachPacketAcknowledgement.setStatus('mandatory')
fclX25CfnDlnLowestIncomingChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnLowestIncomingChannel.setStatus('mandatory')
fclX25CfnDlnIncomingChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnIncomingChannelCount.setStatus('mandatory')
fclX25CfnDlnLowestTwoWayChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnLowestTwoWayChannel.setStatus('mandatory')
fclX25CfnDlnTwoWayChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnTwoWayChannelCount.setStatus('mandatory')
fclX25CfnDlnLowestOutgoingChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnLowestOutgoingChannel.setStatus('mandatory')
fclX25CfnDlnOutgoingChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnOutgoingChannelCount.setStatus('mandatory')
fclX25CfnDlnOutgoingChannelNumbering = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("decremental", 1), ("incremental", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnOutgoingChannelNumbering.setStatus('mandatory')
fclX25CfnDlnDBitModification = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 10, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("clear", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnDlnDBitModification.setStatus('mandatory')
fclX25CfnNegotiatedFacilityTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11), )
if mibBuilder.loadTexts: fclX25CfnNegotiatedFacilityTable.setStatus('mandatory')
fclX25CfnNegotiatedFacilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfnNegConfigId"))
if mibBuilder.loadTexts: fclX25CfnNegotiatedFacilityEntry.setStatus('mandatory')
fclX25CfnNegConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfnNegConfigId.setStatus('mandatory')
fclX25CfnNegOutputFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("noCheck", 3), ("clear", 1), ("subscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegOutputFastSelect.setStatus('mandatory')
fclX25CfnNegInputFastSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("subscribe", 2), ("longUserData", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegInputFastSelect.setStatus('mandatory')
fclX25CfnNegThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("subscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegThroughputClass.setStatus('mandatory')
fclX25CfnNegDefOutThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegDefOutThroughputClass.setStatus('mandatory')
fclX25CfnNegDefInThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegDefInThroughputClass.setStatus('mandatory')
fclX25CfnNegMaxOutThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegMaxOutThroughputClass.setStatus('mandatory')
fclX25CfnNegMaxInThroughputClass = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("t75", 3), ("t150", 4), ("t300", 5), ("t600", 6), ("t1200", 7), ("t2400", 8), ("t4800", 9), ("t9600", 10), ("t19200", 11), ("t48000", 12), ("t64000", 13), ("t128000", 14), ("t192000", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegMaxInThroughputClass.setStatus('mandatory')
fclX25CfnNegPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("subscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegPacketSize.setStatus('mandatory')
fclX25CfnNegDefOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegDefOutPacketSize.setStatus('mandatory')
fclX25CfnNegDefInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegDefInPacketSize.setStatus('mandatory')
fclX25CfnNegMaxOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegMaxOutPacketSize.setStatus('mandatory')
fclX25CfnNegMaxInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegMaxInPacketSize.setStatus('mandatory')
fclX25CfnNegMinOutPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegMinOutPacketSize.setStatus('mandatory')
fclX25CfnNegMinInPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegMinInPacketSize.setStatus('mandatory')
fclX25CfnNegWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("subscribe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegWindowSize.setStatus('mandatory')
fclX25CfnNegDefOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegDefOutWindowSize.setStatus('mandatory')
fclX25CfnNegDefInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegDefInWindowSize.setStatus('mandatory')
fclX25CfnNegMaxOutWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegMaxOutWindowSize.setStatus('mandatory')
fclX25CfnNegMaxInWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 11, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnNegMaxInWindowSize.setStatus('mandatory')
fclX25CfnSignallingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30), )
if mibBuilder.loadTexts: fclX25CfnSignallingTable.setStatus('mandatory')
fclX25CfnSignallingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfnSigConfigId"))
if mibBuilder.loadTexts: fclX25CfnSignallingEntry.setStatus('mandatory')
fclX25CfnSigConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfnSigConfigId.setStatus('mandatory')
fclX25CfnSigSubAddressTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSigSubAddressTransmission.setStatus('mandatory')
fclX25CfnSigConversionAimedPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSigConversionAimedPoint.setStatus('mandatory')
fclX25CfnSigConversionIncomingCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSigConversionIncomingCall.setStatus('mandatory')
fclX25CfnSigConversionOutgoingCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSigConversionOutgoingCall.setStatus('mandatory')
fclX25CfnSigConversionAddressCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("onIncomingCall", 2), ("onOutgoingCall", 3), ("onIncomingCallAndOutgoingCall", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSigConversionAddressCheck.setStatus('mandatory')
fclX25CfnSigConvMultiCalledAddrInCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSigConvMultiCalledAddrInCall.setStatus('mandatory')
fclX25CfnSigConvMultiCallingAddrInCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSigConvMultiCallingAddrInCall.setStatus('mandatory')
fclX25CfnSigConvMultiCalledAddrOutCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSigConvMultiCalledAddrOutCall.setStatus('mandatory')
fclX25CfnSigConvMultiCallingAddrOutCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSigConvMultiCallingAddrOutCall.setStatus('mandatory')
fclX25CfnSigT11CallResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSigT11CallResponseTimer.setStatus('mandatory')
fclX25CfnSigCallAcceptedFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 30, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 2, 4, 1))).clone(namedValues=NamedValues(("noFacilitiesNoAddresses", 3), ("facilitiesNoAddresses", 2), ("facilitiesNotCheckedAddresses", 4), ("facilitiesCheckedAddresses", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSigCallAcceptedFormat.setStatus('mandatory')
fclX25CfnServiceTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40), )
if mibBuilder.loadTexts: fclX25CfnServiceTable.setStatus('mandatory')
fclX25CfnServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfnSerConfigId"))
if mibBuilder.loadTexts: fclX25CfnServiceEntry.setStatus('mandatory')
fclX25CfnSerConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfnSerConfigId.setStatus('mandatory')
fclX25CfnSerReliableVc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2, 4))).clone(namedValues=NamedValues(("off", 1), ("clear", 3), ("subscribe", 2), ("check", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSerReliableVc.setStatus('mandatory')
fclX25CfnSerCharging = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("overall", 2), ("detailed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSerCharging.setStatus('mandatory')
fclX25CfnSerX29Reselection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSerX29Reselection.setStatus('mandatory')
fclX25CfnSerRemoteExclusiveLink = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSerRemoteExclusiveLink.setStatus('mandatory')
fclX25CfnSerCallReturnTransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSerCallReturnTransmission.setStatus('mandatory')
fclX25CfnSerStatLoadAndTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSerStatLoadAndTraffic.setStatus('mandatory')
fclX25CfnSerStatSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSerStatSignalling.setStatus('mandatory')
fclX25CfnSerStatTotalizer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSerStatTotalizer.setStatus('mandatory')
fclX25CfnSerStatCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 10, 40, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfnSerStatCompression.setStatus('mandatory')
fclX25ConfigMiscellaneous = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30))
fclX25CfmDiagnosticCodeField = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1, 3))).clone(namedValues=NamedValues(("privateCoding", 2), ("publicCoding", 1), ("x75Coding", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfmDiagnosticCodeField.setStatus('mandatory')
fclX25CfmTransmitFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("dedicatedTranspac", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfmTransmitFlowControl.setStatus('mandatory')
fclX25CfmAddress14DigitsTruncation = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfmAddress14DigitsTruncation.setStatus('mandatory')
fclX25CfmTransmitFlowControlTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 20), )
if mibBuilder.loadTexts: fclX25CfmTransmitFlowControlTable.setStatus('mandatory')
fclX25CfmTransmitFlowControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 20, 1), ).setIndexNames((0, "PCE-MIB", "fclX25CfmFlowCtrlPacketSize"))
if mibBuilder.loadTexts: fclX25CfmTransmitFlowControlEntry.setStatus('mandatory')
fclX25CfmFlowCtrlPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("s16", 4), ("s32", 5), ("s64", 6), ("s128", 7), ("s256", 8), ("s512", 9), ("s1024", 10), ("s2048", 11), ("s4096", 12), ("s8192", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fclX25CfmFlowCtrlPacketSize.setStatus('mandatory')
fclX25CfmFlowCtrlMaxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 20, 50, 30, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fclX25CfmFlowCtrlMaxWindowSize.setStatus('mandatory')
fcWanSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 25))
fcwDnicZoAddress = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwDnicZoAddress.setStatus('mandatory')
fcwMaxActiveCommunications = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 4064))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwMaxActiveCommunications.setStatus('mandatory')
fcwDataPacketsDiscardThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwDataPacketsDiscardThreshold.setStatus('mandatory')
fcwDataPacketsAcceptThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwDataPacketsAcceptThreshold.setStatus('mandatory')
fcwCallPacketsDiscardThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwCallPacketsDiscardThreshold.setStatus('mandatory')
fcwCallPacketsAcceptThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwCallPacketsAcceptThreshold.setStatus('mandatory')
fcwLocalCommunications = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("denied", 1), ("permitted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwLocalCommunications.setStatus('mandatory')
fcwLocalIncomingCallsRouteId = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwLocalIncomingCallsRouteId.setStatus('mandatory')
fcwLoadAndTrafficSummingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwLoadAndTrafficSummingPeriod.setStatus('mandatory')
fcwLoadAndTrafficEventsTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwLoadAndTrafficEventsTimer.setStatus('mandatory')
fcwFrameRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45))
fcwFrDlcStatusChangeTrapEnabling = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrDlcStatusChangeTrapEnabling.setStatus('mandatory')
fcwFrAnnexeGInternalStacksMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrAnnexeGInternalStacksMaxCount.setStatus('mandatory')
fcwFrEndPointMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrEndPointMaxCount.setStatus('mandatory')
fcwFrFrameAcceptCpuThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrFrameAcceptCpuThreshold.setStatus('mandatory')
fcwFrFrameAcceptMemoryThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrFrameAcceptMemoryThreshold.setStatus('mandatory')
fcwFrDlcSetupAlarmThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrDlcSetupAlarmThreshold.setStatus('mandatory')
fcwFrDlcSetupDiscardThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 350))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrDlcSetupDiscardThreshold.setStatus('mandatory')
fcwFrVoiceFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrVoiceFrameSize.setStatus('mandatory')
fcwFrVoiceMaxTransitDelay = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrVoiceMaxTransitDelay.setStatus('mandatory')
fcwFrCongestionCheckTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrCongestionCheckTimer.setStatus('mandatory')
fcwFrCongestionCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrCongestionCount.setStatus('mandatory')
fcwFrCirTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrCirTimer.setStatus('mandatory')
fcwFrEventOutput = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 2))).clone(namedValues=NamedValues(("none", 1), ("oneOutOf16", 3), ("oneOutOf64", 4), ("oneOutOf256", 5), ("all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrEventOutput.setStatus('mandatory')
fcwFrSlowingDownThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrSlowingDownThreshold.setStatus('mandatory')
fcwFrFecnBecnOfDeFramesThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrFecnBecnOfDeFramesThreshold.setStatus('mandatory')
fcwFrFecnBecnOfAllFramesThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrFecnBecnOfAllFramesThreshold.setStatus('mandatory')
fcwFrDeFramesDiscardThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrDeFramesDiscardThreshold.setStatus('mandatory')
fcwFrAllFramesDiscardThreshold = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 45, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwFrAllFramesDiscardThreshold.setStatus('mandatory')
fcwAddressConversion = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48))
fcwAddrConvIncomingCallTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 1), )
if mibBuilder.loadTexts: fcwAddrConvIncomingCallTable.setStatus('mandatory')
fcwAddrConvIncomingCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcwConvInExternalAddr"))
if mibBuilder.loadTexts: fcwAddrConvIncomingCallEntry.setStatus('mandatory')
fcwConvInExternalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwConvInExternalAddr.setStatus('mandatory')
fcwConvInStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvInStatus.setStatus('mandatory')
fcwConvInConvertedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvInConvertedAddr.setStatus('mandatory')
fcwConvInOrderNum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvInOrderNum.setStatus('mandatory')
fcwAddrConvOutgoingCallTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 2), )
if mibBuilder.loadTexts: fcwAddrConvOutgoingCallTable.setStatus('mandatory')
fcwAddrConvOutgoingCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 2, 1), ).setIndexNames((0, "PCE-MIB", "fcwConvOutExternalAddr"))
if mibBuilder.loadTexts: fcwAddrConvOutgoingCallEntry.setStatus('mandatory')
fcwConvOutExternalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwConvOutExternalAddr.setStatus('mandatory')
fcwConvOutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvOutStatus.setStatus('mandatory')
fcwConvOutConvertedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvOutConvertedAddr.setStatus('mandatory')
fcwConvOutOrderNum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvOutOrderNum.setStatus('mandatory')
fcwAddrConvMultiCriterionInCallTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3), )
if mibBuilder.loadTexts: fcwAddrConvMultiCriterionInCallTable.setStatus('mandatory')
fcwAddrConvMultiCriterionInCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3, 1), ).setIndexNames((0, "PCE-MIB", "fcwConvMultiInConvID"), (0, "PCE-MIB", "fcwConvMultiInExternalAddr"))
if mibBuilder.loadTexts: fcwAddrConvMultiCriterionInCallEntry.setStatus('mandatory')
fcwConvMultiInConvID = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwConvMultiInConvID.setStatus('mandatory')
fcwConvMultiInExternalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwConvMultiInExternalAddr.setStatus('mandatory')
fcwConvMultiInStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvMultiInStatus.setStatus('mandatory')
fcwConvMultiInConvertedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvMultiInConvertedAddr.setStatus('mandatory')
fcwConvMultiInOrderNum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvMultiInOrderNum.setStatus('mandatory')
fcwAddrConvMultiCriterionOutCallTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4), )
if mibBuilder.loadTexts: fcwAddrConvMultiCriterionOutCallTable.setStatus('mandatory')
fcwAddrConvMultiCriterionOutCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4, 1), ).setIndexNames((0, "PCE-MIB", "fcwConvMultiOutConvID"), (0, "PCE-MIB", "fcwConvMultiOutExternalAddr"))
if mibBuilder.loadTexts: fcwAddrConvMultiCriterionOutCallEntry.setStatus('mandatory')
fcwConvMultiOutConvID = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwConvMultiOutConvID.setStatus('mandatory')
fcwConvMultiOutExternalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwConvMultiOutExternalAddr.setStatus('mandatory')
fcwConvMultiOutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvMultiOutStatus.setStatus('mandatory')
fcwConvMultiOutConvertedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvMultiOutConvertedAddr.setStatus('mandatory')
fcwConvMultiOutOrderNum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvMultiOutOrderNum.setStatus('mandatory')
fcwAddrConvCondOutgoingCallTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 5), )
if mibBuilder.loadTexts: fcwAddrConvCondOutgoingCallTable.setStatus('mandatory')
fcwAddrConvCondOutgoingCallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 5, 1), ).setIndexNames((0, "PCE-MIB", "fcwConvCondOutExternalAddr"), (0, "PCE-MIB", "fcwConvCondOutTryOn"))
if mibBuilder.loadTexts: fcwAddrConvCondOutgoingCallEntry.setStatus('mandatory')
fcwConvCondOutExternalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwConvCondOutExternalAddr.setStatus('mandatory')
fcwConvCondOutTryOn = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normalClear1", 1), ("backup", 2), ("all", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwConvCondOutTryOn.setStatus('mandatory')
fcwConvCondOutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvCondOutStatus.setStatus('mandatory')
fcwConvCondOutConvertedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 48, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwConvCondOutConvertedAddr.setStatus('mandatory')
fcwRouteTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50), )
if mibBuilder.loadTexts: fcwRouteTable.setStatus('mandatory')
fcwRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50, 1), ).setIndexNames((0, "PCE-MIB", "fcwRoutRouteId"), (0, "PCE-MIB", "fcwRoutLogPortId"), (0, "PCE-MIB", "fcwRoutChannelId"))
if mibBuilder.loadTexts: fcwRouteEntry.setStatus('mandatory')
fcwRoutRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwRoutRouteId.setStatus('mandatory')
fcwRoutLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwRoutLogPortId.setStatus('mandatory')
fcwRoutChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwRoutChannelId.setStatus('mandatory')
fcwRoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwRoutStatus.setStatus('mandatory')
fcwRoutType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 50, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("normal", 1), ("normalPriorityModule", 2), ("backup1", 3), ("backup2", 4), ("backup3", 5), ("backup4", 6), ("backup5", 7), ("dynamic", 8), ("backupDynamic", 9), ("normalClear1", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwRoutType.setStatus('mandatory')
fcwDnicRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 60), )
if mibBuilder.loadTexts: fcwDnicRoutingTable.setStatus('mandatory')
fcwDnicRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 60, 1), ).setIndexNames((0, "PCE-MIB", "fcwDnicDataNetworkIdentifierCode"), (0, "PCE-MIB", "fcwDnicRouteId"))
if mibBuilder.loadTexts: fcwDnicRoutingEntry.setStatus('mandatory')
fcwDnicDataNetworkIdentifierCode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 60, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwDnicDataNetworkIdentifierCode.setStatus('mandatory')
fcwDnicRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 60, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwDnicRouteId.setStatus('mandatory')
fcwDnicStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 60, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwDnicStatus.setStatus('mandatory')
fcwZoRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 61), )
if mibBuilder.loadTexts: fcwZoRoutingTable.setStatus('mandatory')
fcwZoRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 61, 1), ).setIndexNames((0, "PCE-MIB", "fcwZoZone"), (0, "PCE-MIB", "fcwZoRouteId"))
if mibBuilder.loadTexts: fcwZoRoutingEntry.setStatus('mandatory')
fcwZoZone = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 61, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwZoZone.setStatus('mandatory')
fcwZoRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 61, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwZoRouteId.setStatus('mandatory')
fcwZoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 61, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwZoStatus.setStatus('mandatory')
fcwSbRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 62), )
if mibBuilder.loadTexts: fcwSbRoutingTable.setStatus('mandatory')
fcwSbRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 62, 1), ).setIndexNames((0, "PCE-MIB", "fcwSbSubscriberNumber"), (0, "PCE-MIB", "fcwSbRouteId"))
if mibBuilder.loadTexts: fcwSbRoutingEntry.setStatus('mandatory')
fcwSbSubscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 62, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwSbSubscriberNumber.setStatus('mandatory')
fcwSbRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 62, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwSbRouteId.setStatus('mandatory')
fcwSbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 62, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSbStatus.setStatus('mandatory')
fcwServices = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70))
fcwSerCompression = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 1))
fcwSCompModule0CompressedVcCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSCompModule0CompressedVcCount.setStatus('mandatory')
fcwSCompModule1CompressedVcCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSCompModule1CompressedVcCount.setStatus('mandatory')
fcwSCompModule2CompressedVcCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSCompModule2CompressedVcCount.setStatus('mandatory')
fcwSCompAlgorithmSelection = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("v9Compatible", 2), ("v10Compatible", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSCompAlgorithmSelection.setStatus('mandatory')
fcwSerReliableVirtualCircuits = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2))
fcwSRvcReliableVcCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcReliableVcCount.setStatus('mandatory')
fcwSRvcFirstDataPacketTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcFirstDataPacketTimer.setStatus('mandatory')
fcwSRvcRestoreOutgoingCallRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcRestoreOutgoingCallRetryCount.setStatus('mandatory')
fcwSRvcRestoreMinimumRecallTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcRestoreMinimumRecallTimer.setStatus('mandatory')
fcwSRvcRestoreIncomingCallTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcRestoreIncomingCallTimer.setStatus('mandatory')
fcwSRvcRestoreOutgoingCallDelay = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcRestoreOutgoingCallDelay.setStatus('mandatory')
fcwSRvcKWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcKWindowSize.setStatus('mandatory')
fcwSRvcFastSelectUse = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcFastSelectUse.setStatus('mandatory')
fcwSRvcOutputMarkers = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noCheck", 1), ("check", 2), ("remove", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcOutputMarkers.setStatus('mandatory')
fcwSRvcConversionAimedPoint = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcConversionAimedPoint.setStatus('mandatory')
fcwSRvcConversionIncomingCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcConversionIncomingCall.setStatus('mandatory')
fcwSRvcConversionOutgoingCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcConversionOutgoingCall.setStatus('mandatory')
fcwSRvcConversionAddressCheck = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("onIncomingCall", 2), ("onOutgoingCall", 3), ("onIncomingCallAndOutgoingCall", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSRvcConversionAddressCheck.setStatus('mandatory')
fcwSerReselectionX29 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3))
fcwSResLogChannelCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSResLogChannelCount.setStatus('mandatory')
fcwSResProtocolIdentifierTransmission = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSResProtocolIdentifierTransmission.setStatus('mandatory')
fcwSResConversionAimedPoint = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSResConversionAimedPoint.setStatus('mandatory')
fcwSResConversionIncomingCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSResConversionIncomingCall.setStatus('mandatory')
fcwSResConversionOutgoingCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSResConversionOutgoingCall.setStatus('mandatory')
fcwSResConversionAddressCheck = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("onIncomingCall", 2), ("onOutgoingCall", 3), ("onIncomingCallAndOutgoingCall", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSResConversionAddressCheck.setStatus('mandatory')
fcwSerDynamicRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4))
fcwSDynDynamicRouting = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSDynDynamicRouting.setStatus('mandatory')
fcwSDynPassword = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSDynPassword.setStatus('mandatory')
fcwSDynNeighborMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSDynNeighborMaxCount.setStatus('mandatory')
fcwSDynLspAgingTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSDynLspAgingTimer.setStatus('mandatory')
fcwSDynLspRetransRequestTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSDynLspRetransRequestTimer.setStatus('mandatory')
fcwSDynLspRetransmissionTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSDynLspRetransmissionTimer.setStatus('mandatory')
fcwSDynRouteCalculationTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSDynRouteCalculationTimer.setStatus('mandatory')
fcwSDynRouteCalculLockingTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSDynRouteCalculLockingTimer.setStatus('mandatory')
fcwSerClearAnalysisTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 5), )
if mibBuilder.loadTexts: fcwSerClearAnalysisTable.setStatus('mandatory')
fcwSerClearAnalysisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 5, 1), ).setIndexNames((0, "PCE-MIB", "fcwSClearAnalysId"))
if mibBuilder.loadTexts: fcwSerClearAnalysisEntry.setStatus('mandatory')
fcwSClearAnalysId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwSClearAnalysId.setStatus('mandatory')
fcwSClearAnalysStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSClearAnalysStatus.setStatus('mandatory')
fcwSClearAnalysCause = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSClearAnalysCause.setStatus('mandatory')
fcwSClearAnalysDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSClearAnalysDiag.setStatus('mandatory')
fcwSerQOSX25 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10))
fcwSQOSX25Table = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1), )
if mibBuilder.loadTexts: fcwSQOSX25Table.setStatus('mandatory')
fcwSQOSX25Entry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcwSQOSX25CalledAddress"), (0, "PCE-MIB", "fcwSQOSX25CallingAddress"), (0, "PCE-MIB", "fcwSQOSX25CUDProfileId"))
if mibBuilder.loadTexts: fcwSQOSX25Entry.setStatus('mandatory')
fcwSQOSX25CalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwSQOSX25CalledAddress.setStatus('mandatory')
fcwSQOSX25CallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwSQOSX25CallingAddress.setStatus('mandatory')
fcwSQOSX25CUDProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwSQOSX25CUDProfileId.setStatus('mandatory')
fcwSQOSX25Status = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSQOSX25Status.setStatus('mandatory')
fcwSQOSX25PriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSQOSX25PriorityLevel.setStatus('mandatory')
fcwSQOSX25QOSProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSQOSX25QOSProfileId.setStatus('mandatory')
fcwSQOSX25Cos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("ubr", 3), ("vbr", 1), ("vbr-rt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSQOSX25Cos.setStatus('mandatory')
fcwSQOSX25TrafficManagementStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("discardButNotDelay", 1), ("delayButNotDiscard-Bc", 3), ("delayButNotDiscard-BcBe", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSQOSX25TrafficManagementStrategy.setStatus('mandatory')
fcwSCUDProfilesTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 2), )
if mibBuilder.loadTexts: fcwSCUDProfilesTable.setStatus('mandatory')
fcwSCUDProfilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 2, 1), ).setIndexNames((0, "PCE-MIB", "fcwSCUDProfilesId"))
if mibBuilder.loadTexts: fcwSCUDProfilesEntry.setStatus('mandatory')
fcwSCUDProfilesId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwSCUDProfilesId.setStatus('mandatory')
fcwSCUDProfilesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSCUDProfilesStatus.setStatus('mandatory')
fcwSCUDProfilesCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSCUDProfilesCUD.setStatus('mandatory')
fcwSQOSProfilesTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3), )
if mibBuilder.loadTexts: fcwSQOSProfilesTable.setStatus('mandatory')
fcwSQOSProfilesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1), ).setIndexNames((0, "PCE-MIB", "fcwSQOSProfilesId"))
if mibBuilder.loadTexts: fcwSQOSProfilesEntry.setStatus('mandatory')
fcwSQOSProfilesId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcwSQOSProfilesId.setStatus('mandatory')
fcwSQOSProfilesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSQOSProfilesStatus.setStatus('mandatory')
fcwSQOSProfilesCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSQOSProfilesCIR.setStatus('mandatory')
fcwSQOSProfilesCIRmin = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSQOSProfilesCIRmin.setStatus('mandatory')
fcwSQOSProfilesBc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSQOSProfilesBc.setStatus('mandatory')
fcwSQOSProfilesBe = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 25, 70, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcwSQOSProfilesBe.setStatus('mandatory')
fcVirtualPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 30))
fcvVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 1), )
if mibBuilder.loadTexts: fcvVirtualPortTable.setStatus('mandatory')
fcvVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcvVpVirtualPortId"))
if mibBuilder.loadTexts: fcvVirtualPortEntry.setStatus('mandatory')
fcvVpVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcvVpVirtualPortId.setStatus('mandatory')
fcvVpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvVpStatus.setStatus('mandatory')
fcvVpType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvVpType.setStatus('mandatory')
fcvVpModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvVpModuleId.setStatus('mandatory')
fcvLocalVirtualPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10))
fcvLocalVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 1), )
if mibBuilder.loadTexts: fcvLocalVirtualPortTable.setStatus('mandatory')
fcvLocalVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcvLvpVirtualPortId"))
if mibBuilder.loadTexts: fcvLocalVirtualPortEntry.setStatus('mandatory')
fcvLvpVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcvLvpVirtualPortId.setStatus('mandatory')
fcvLvpLogicalPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvLvpLogicalPortId.setStatus('mandatory')
fcvLvpFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10))
fcvLvpFltConditionTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1), )
if mibBuilder.loadTexts: fcvLvpFltConditionTable.setStatus('mandatory')
fcvLvpFltConditionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcvLvpFltCondConditionId"))
if mibBuilder.loadTexts: fcvLvpFltConditionEntry.setStatus('mandatory')
fcvLvpFltCondConditionId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcvLvpFltCondConditionId.setStatus('mandatory')
fcvLvpFltCondStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvLvpFltCondStatus.setStatus('mandatory')
fcvLvpFltCondOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1513))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvLvpFltCondOffset.setStatus('mandatory')
fcvLvpFltCondMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvLvpFltCondMask.setStatus('mandatory')
fcvLvpFltCondValue = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvLvpFltCondValue.setStatus('mandatory')
fcvLvpFltFilterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2), )
if mibBuilder.loadTexts: fcvLvpFltFilterTable.setStatus('mandatory')
fcvLvpFltFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2, 1), ).setIndexNames((0, "PCE-MIB", "fcvLvpFltFilterId"))
if mibBuilder.loadTexts: fcvLvpFltFilterEntry.setStatus('mandatory')
fcvLvpFltFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcvLvpFltFilterId.setStatus('mandatory')
fcvLvpFltFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvLvpFltFilterStatus.setStatus('mandatory')
fcvLvpFltFilterCondition1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvLvpFltFilterCondition1Id.setStatus('mandatory')
fcvLvpFltFilterCondition2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvLvpFltFilterCondition2Id.setStatus('mandatory')
fcvLvpFltFilterCondition3Id = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvLvpFltFilterCondition3Id.setStatus('mandatory')
fcvLvpFltFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 3), )
if mibBuilder.loadTexts: fcvLvpFltFilteringTable.setStatus('mandatory')
fcvLvpFltFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 3, 1), ).setIndexNames((0, "PCE-MIB", "fcvLvpFltFilteringVirtualPortId"), (0, "PCE-MIB", "fcvLvpFltFilteringFilterId"))
if mibBuilder.loadTexts: fcvLvpFltFilteringEntry.setStatus('mandatory')
fcvLvpFltFilteringVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcvLvpFltFilteringVirtualPortId.setStatus('mandatory')
fcvLvpFltFilteringFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcvLvpFltFilteringFilterId.setStatus('mandatory')
fcvLvpFltFilteringStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvLvpFltFilteringStatus.setStatus('mandatory')
fcvLvpFltFilteringType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 10, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvLvpFltFilteringType.setStatus('mandatory')
fcvRemoteVirtualPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20))
fcvRvpCompression = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("networkToSubscriber", 2), ("subscriberToNetwork", 3), ("bothway", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpCompression.setStatus('mandatory')
fcvRvpCompressNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onOptionalCompression", 2), ("onMandatoryCompression", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpCompressNegotiation.setStatus('mandatory')
fcvRvpCompressScrambling = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpCompressScrambling.setStatus('mandatory')
fcvRvpCompressMultiPacketsTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpCompressMultiPacketsTimer.setStatus('mandatory')
fcvRvpReliableVirtualCircuit = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpReliableVirtualCircuit.setStatus('mandatory')
fcvRvpBe = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpBe.setStatus('mandatory')
fcvRvpConversionAimedPoint = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConversionAimedPoint.setStatus('mandatory')
fcvRvpConversionIncomingCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConversionIncomingCall.setStatus('mandatory')
fcvRvpConversionOutgoingCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("callingAddress", 2), ("calledAddress", 3), ("callingAddressAndCalledAddress", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConversionOutgoingCall.setStatus('mandatory')
fcvRvpConversionAddressCheck = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("onIncomingCall", 2), ("onOutgoingCall", 3), ("onIncomingCallAndOutgoingCall", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConversionAddressCheck.setStatus('mandatory')
fcvRvpConvMultiCalledAddrInCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConvMultiCalledAddrInCall.setStatus('mandatory')
fcvRvpConvMultiCallingAddrInCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConvMultiCallingAddrInCall.setStatus('mandatory')
fcvRvpConvMultiCalledAddrOutCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConvMultiCalledAddrOutCall.setStatus('mandatory')
fcvRvpConvMultiCallingAddrOutCall = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConvMultiCallingAddrOutCall.setStatus('mandatory')
fcvRvpCallAcceptwithReverseCharging = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpCallAcceptwithReverseCharging.setStatus('mandatory')
fcvRvpCos = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1))).clone(namedValues=NamedValues(("ubr", 3), ("vbr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpCos.setStatus('mandatory')
fcvRvpCir = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpCir.setStatus('mandatory')
fcvRvpMinCir = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpMinCir.setStatus('mandatory')
fcvRvpConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23), )
if mibBuilder.loadTexts: fcvRvpConnectionTable.setStatus('mandatory')
fcvRvpConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1), ).setIndexNames((0, "PCE-MIB", "fcvRvpConnRemoteAddress"), (0, "PCE-MIB", "fcvRvpConnEncapsulation"), (0, "PCE-MIB", "fcvRvpConnConnectionId"))
if mibBuilder.loadTexts: fcvRvpConnectionEntry.setStatus('mandatory')
fcvRvpConnRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcvRvpConnRemoteAddress.setStatus('mandatory')
fcvRvpConnEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 11, 20, 30, 31, 40))).clone(namedValues=NamedValues(("multiplexing", 1), ("bridge", 10), ("bridgeSpecific", 11), ("ip", 20), ("ipx", 30), ("ipxSpecific", 31), ("clnp", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcvRvpConnEncapsulation.setStatus('mandatory')
fcvRvpConnConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcvRvpConnConnectionId.setStatus('mandatory')
fcvRvpConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConnStatus.setStatus('mandatory')
fcvRvpConnFlowTypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConnFlowTypeMask.setStatus('mandatory')
fcvRvpConnModule0VpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConnModule0VpId.setStatus('mandatory')
fcvRvpConnModule1VpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConnModule1VpId.setStatus('mandatory')
fcvRvpConnModule2VpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConnModule2VpId.setStatus('mandatory')
fcvRvpConnCallDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("calling", 1), ("called", 2), ("auto", 3), ("datagram", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConnCallDirection.setStatus('mandatory')
fcvRvpConnGrouping = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConnGrouping.setStatus('mandatory')
fcvRvpConnMinimumRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConnMinimumRecallTimer.setStatus('mandatory')
fcvRvpConnInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2540))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConnInactivityTimer.setStatus('mandatory')
fcvRvpConnCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConnCir.setStatus('mandatory')
fcvRvpConnCos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 1, 2))).clone(namedValues=NamedValues(("ubr", 3), ("global", 4), ("vbr", 1), ("vbr-rt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConnCos.setStatus('mandatory')
fcvRvpConnBe = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 30, 20, 23, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcvRvpConnBe.setStatus('mandatory')
fcSna = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 32))
fcsnaLocalVirtualPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1))
fcsnaLvpLocalLanPuTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 1), )
if mibBuilder.loadTexts: fcsnaLvpLocalLanPuTable.setStatus('mandatory')
fcsnaLvpLocalLanPuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcsnaLvpLlpVirtualPortId"), (0, "PCE-MIB", "fcsnaLvpLlpPuId"))
if mibBuilder.loadTexts: fcsnaLvpLocalLanPuEntry.setStatus('mandatory')
fcsnaLvpLlpVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsnaLvpLlpVirtualPortId.setStatus('mandatory')
fcsnaLvpLlpPuId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsnaLvpLlpPuId.setStatus('mandatory')
fcsnaLvpLlpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpLlpStatus.setStatus('mandatory')
fcsnaLvpParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10))
fcsnaLvpParamLinkType = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frontal", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamLinkType.setStatus('mandatory')
fcsnaLvpParamFrameFormat = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e802-3", 1), ("v2-DIX", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamFrameFormat.setStatus('mandatory')
fcsnaLvpParamLocalTest = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamLocalTest.setStatus('mandatory')
fcsnaLvpParamCallDirection = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("called", 1), ("calling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamCallDirection.setStatus('mandatory')
fcsnaLvpMacAddressTrans = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpMacAddressTrans.setStatus('mandatory')
fcsnaLvpParamT1 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamT1.setStatus('mandatory')
fcsnaLvpParamN2 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamN2.setStatus('mandatory')
fcsnaLvpParamT2 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 15000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamT2.setStatus('mandatory')
fcsnaLvpParamN3 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamN3.setStatus('mandatory')
fcsnaLvpParamNW = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamNW.setStatus('mandatory')
fcsnaLvpParamTW = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamTW.setStatus('mandatory')
fcsnaLvpParamRW = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamRW.setStatus('mandatory')
fcsnaLvpParamMinRecallTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamMinRecallTimer.setStatus('mandatory')
fcsnaLvpParamSubscriberNumber = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamSubscriberNumber.setStatus('mandatory')
fcsnaLvpParamReliableVc = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2, 4))).clone(namedValues=NamedValues(("off", 1), ("clear", 3), ("subscribe", 2), ("check", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamReliableVc.setStatus('mandatory')
fcsnaLvpParamCompression = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("networkToSubscriber", 2), ("subscriberToNetwork", 3), ("bothway", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamCompression.setStatus('mandatory')
fcsnaLvpParamCompressNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onOptionalCompression", 2), ("onMandatoryCompression", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamCompressNegotiation.setStatus('mandatory')
fcsnaLvpParamCompressScrambling = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamCompressScrambling.setStatus('mandatory')
fcsnaLvpParamCompressMultiPacketsTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamCompressMultiPacketsTimer.setStatus('mandatory')
fcsnaLvpParamCos = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1))).clone(namedValues=NamedValues(("ubr", 3), ("vbr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamCos.setStatus('mandatory')
fcsnaLvpParamCir = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamCir.setStatus('mandatory')
fcsnaLvpParamCirMin = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamCirMin.setStatus('mandatory')
fcsnaLvpParamBc = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamBc.setStatus('mandatory')
fcsnaLvpParamBe = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 10, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpParamBe.setStatus('mandatory')
fcsnaLvpTrParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20))
fcsnaLvpTrParamLinkType = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frontal", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamLinkType.setStatus('mandatory')
fcsnaLvpTrParamBroadcastType = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("all-routes", 2), ("single-route", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamBroadcastType.setStatus('mandatory')
fcsnaLvpTrParamLocalTest = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamLocalTest.setStatus('mandatory')
fcsnaLvpTrParamCallDirection = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("called", 1), ("calling", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamCallDirection.setStatus('mandatory')
fcsnaLvpTrRingNo = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrRingNo.setStatus('mandatory')
fcsnaLvpTrBridgeNo = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrBridgeNo.setStatus('mandatory')
fcsnaLvpTrMacAddressTrans = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrMacAddressTrans.setStatus('mandatory')
fcsnaLvpTrParamT1 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 25000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamT1.setStatus('mandatory')
fcsnaLvpTrParamN2 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamN2.setStatus('mandatory')
fcsnaLvpTrParamT2 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 15000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamT2.setStatus('mandatory')
fcsnaLvpTrParamN3 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamN3.setStatus('mandatory')
fcsnaLvpTrParamNW = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamNW.setStatus('mandatory')
fcsnaLvpTrParamTW = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamTW.setStatus('mandatory')
fcsnaLvpTrParamRW = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamRW.setStatus('mandatory')
fcsnaLvpTrParamMinRecallTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 990))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamMinRecallTimer.setStatus('mandatory')
fcsnaLvpTrParamSubscriberNumber = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamSubscriberNumber.setStatus('mandatory')
fcsnaLvpTrParamReliableVc = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2, 4))).clone(namedValues=NamedValues(("off", 1), ("clear", 3), ("subscribe", 2), ("check", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamReliableVc.setStatus('mandatory')
fcsnaLvpTrParamCompression = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("networkToSubscriber", 2), ("subscriberToNetwork", 3), ("bothway", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamCompression.setStatus('mandatory')
fcsnaLvpTrParamCompressNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onOptionalCompression", 2), ("onMandatoryCompression", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamCompressNegotiation.setStatus('mandatory')
fcsnaLvpTrParamCompressScrambling = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamCompressScrambling.setStatus('mandatory')
fcsnaLvpTrParamCompressMultiPacketsTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamCompressMultiPacketsTimer.setStatus('mandatory')
fcsnaLvpTrParamCos = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1))).clone(namedValues=NamedValues(("ubr", 3), ("vbr", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamCos.setStatus('mandatory')
fcsnaLvpTrParamCir = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamCir.setStatus('mandatory')
fcsnaLvpTrParamCirMin = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamCirMin.setStatus('mandatory')
fcsnaLvpTrParamBc = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamBc.setStatus('mandatory')
fcsnaLvpTrParamBe = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 1, 20, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaLvpTrParamBe.setStatus('mandatory')
fcsnaGeneralParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5))
fcsnaGpRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1), )
if mibBuilder.loadTexts: fcsnaGpRoutingTable.setStatus('mandatory')
fcsnaGpRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcsnaGpRoutClusterPuId"), (0, "PCE-MIB", "fcsnaGpRoutHostPuId"))
if mibBuilder.loadTexts: fcsnaGpRoutingEntry.setStatus('mandatory')
fcsnaGpRoutClusterPuId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsnaGpRoutClusterPuId.setStatus('mandatory')
fcsnaGpRoutHostPuId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsnaGpRoutHostPuId.setStatus('mandatory')
fcsnaGpRoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpRoutStatus.setStatus('mandatory')
fcsnaGpRoutDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpRoutDsap.setStatus('mandatory')
fcsnaGpRoutSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpRoutSsap.setStatus('mandatory')
fcsnaGpRoutCos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 1, 2))).clone(namedValues=NamedValues(("ubr", 3), ("vbr", 1), ("vbr-rt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpRoutCos.setStatus('mandatory')
fcsnaGpRoutCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpRoutCir.setStatus('mandatory')
fcsnaGpRoutCirmin = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpRoutCirmin.setStatus('mandatory')
fcsnaGpRoutBc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpRoutBc.setStatus('mandatory')
fcsnaGpRoutBe = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpRoutBe.setStatus('mandatory')
fcsnaGpRemotePuTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 2), )
if mibBuilder.loadTexts: fcsnaGpRemotePuTable.setStatus('mandatory')
fcsnaGpRemotePuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 2, 1), ).setIndexNames((0, "PCE-MIB", "fcsnaGpRemPuPuId"))
if mibBuilder.loadTexts: fcsnaGpRemotePuEntry.setStatus('mandatory')
fcsnaGpRemPuPuId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsnaGpRemPuPuId.setStatus('mandatory')
fcsnaGpRemPuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpRemPuStatus.setStatus('mandatory')
fcsnaGpRemPuProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("x25", 2), ("sdlc", 3), ("frban", 4), ("sna-ethernet", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpRemPuProtocol.setStatus('mandatory')
fcsnaGpSdlcTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 3), )
if mibBuilder.loadTexts: fcsnaGpSdlcTable.setStatus('mandatory')
fcsnaGpSdlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 3, 1), ).setIndexNames((0, "PCE-MIB", "fcsnaGpSdlcPuId"))
if mibBuilder.loadTexts: fcsnaGpSdlcEntry.setStatus('mandatory')
fcsnaGpSdlcPuId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsnaGpSdlcPuId.setStatus('mandatory')
fcsnaGpSdlcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpSdlcStatus.setStatus('mandatory')
fcsnaGpSdlcLp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 181))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpSdlcLp.setStatus('mandatory')
fcsnaGpSdlcCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpSdlcCluster.setStatus('mandatory')
fcsnaGpX25Table = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 4), )
if mibBuilder.loadTexts: fcsnaGpX25Table.setStatus('mandatory')
fcsnaGpX25Entry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 4, 1), ).setIndexNames((0, "PCE-MIB", "fcsnaGpX25PuId"))
if mibBuilder.loadTexts: fcsnaGpX25Entry.setStatus('mandatory')
fcsnaGpX25PuId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsnaGpX25PuId.setStatus('mandatory')
fcsnaGpX25Status = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpX25Status.setStatus('mandatory')
fcsnaGpX25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpX25Address.setStatus('mandatory')
fcsnaGpLanFrTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 5), )
if mibBuilder.loadTexts: fcsnaGpLanFrTable.setStatus('mandatory')
fcsnaGpLanFrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 5, 1), ).setIndexNames((0, "PCE-MIB", "fcsnaGpLanFrPuId"))
if mibBuilder.loadTexts: fcsnaGpLanFrEntry.setStatus('mandatory')
fcsnaGpLanFrPuId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcsnaGpLanFrPuId.setStatus('mandatory')
fcsnaGpLanFrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpLanFrStatus.setStatus('mandatory')
fcsnaGpLanFrMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpLanFrMacAddress.setStatus('mandatory')
fcsnaGpMiscellaneousParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 10))
fcsnaGpMiscMacAddrLearningMode = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 32, 5, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcsnaGpMiscMacAddrLearningMode.setStatus('mandatory')
fcBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 35))
fcbBridging = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("transparentBridge", 2), ("transparentBridgeStp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbBridging.setStatus('mandatory')
fcbBridgingBetweenRemoteVp = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbBridgingBetweenRemoteVp.setStatus('mandatory')
fcbTransparentBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10))
fcbBrdgVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1), )
if mibBuilder.loadTexts: fcbBrdgVirtualPortTable.setStatus('mandatory')
fcbBrdgVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcbBrdgVpVirtualPortId"))
if mibBuilder.loadTexts: fcbBrdgVirtualPortEntry.setStatus('mandatory')
fcbBrdgVpVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcbBrdgVpVirtualPortId.setStatus('mandatory')
fcbBrdgVpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbBrdgVpStatus.setStatus('mandatory')
fcbBrdgVpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbBrdgVpAgingTime.setStatus('mandatory')
fcbBrdgVpBroadcasting = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbBrdgVpBroadcasting.setStatus('mandatory')
fcbBrdgVpFcsPreservation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2))).clone(namedValues=NamedValues(("off", 1), ("offTinygram", 3), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbBrdgVpFcsPreservation.setStatus('mandatory')
fcbBrdgRemoteAddressMappingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 2), )
if mibBuilder.loadTexts: fcbBrdgRemoteAddressMappingTable.setStatus('mandatory')
fcbBrdgRemoteAddressMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 2, 1), ).setIndexNames((0, "PCE-MIB", "fcbBrdgMapMacAddress"))
if mibBuilder.loadTexts: fcbBrdgRemoteAddressMappingEntry.setStatus('mandatory')
fcbBrdgMapMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcbBrdgMapMacAddress.setStatus('mandatory')
fcbBrdgMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbBrdgMapStatus.setStatus('mandatory')
fcbBrdgMapRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 10, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbBrdgMapRemoteAddress.setStatus('mandatory')
fcbSpanningTreeProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20))
fcbStpPriority = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbStpPriority.setStatus('mandatory')
fcbStpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbStpMaxAge.setStatus('mandatory')
fcbStpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbStpHelloTime.setStatus('mandatory')
fcbStpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbStpForwardDelay.setStatus('mandatory')
fcbStpVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 10), )
if mibBuilder.loadTexts: fcbStpVirtualPortTable.setStatus('mandatory')
fcbStpVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 10, 1), ).setIndexNames((0, "PCE-MIB", "fcbStpVpVirtualPortId"))
if mibBuilder.loadTexts: fcbStpVirtualPortEntry.setStatus('mandatory')
fcbStpVpVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcbStpVpVirtualPortId.setStatus('mandatory')
fcbStpVpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbStpVpPortPriority.setStatus('mandatory')
fcbStpVpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbStpVpPortPathCost.setStatus('mandatory')
fcbStpVpBpduEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 35, 20, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mac", 1), ("bpdu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcbStpVpBpduEncapsulation.setStatus('mandatory')
fcIpRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36))
fciIpRouting = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciIpRouting.setStatus('mandatory')
fciFastIpRouting = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFastIpRouting.setStatus('mandatory')
fciIcmpRedirection = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciIcmpRedirection.setStatus('mandatory')
fciSourceRouting = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciSourceRouting.setStatus('mandatory')
fciVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10), )
if mibBuilder.loadTexts: fciVirtualPortTable.setStatus('mandatory')
fciVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1), ).setIndexNames((0, "PCE-MIB", "fciVpVirtualPortId"))
if mibBuilder.loadTexts: fciVirtualPortEntry.setStatus('mandatory')
fciVpVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciVpVirtualPortId.setStatus('mandatory')
fciVpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciVpStatus.setStatus('mandatory')
fciVpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciVpIpAddress.setStatus('mandatory')
fciVpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciVpNetMask.setStatus('mandatory')
fciVpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 9180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciVpMtu.setStatus('mandatory')
fciVpProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciVpProxyArp.setStatus('mandatory')
fciVpInverseArp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciVpInverseArp.setStatus('mandatory')
fciLocalVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 11), )
if mibBuilder.loadTexts: fciLocalVirtualPortTable.setStatus('mandatory')
fciLocalVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 11, 1), ).setIndexNames((0, "PCE-MIB", "fciLvpVirtualPortId"))
if mibBuilder.loadTexts: fciLocalVirtualPortEntry.setStatus('mandatory')
fciLvpVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciLvpVirtualPortId.setStatus('mandatory')
fciLvpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciLvpStatus.setStatus('mandatory')
fciLvpEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee802-3", 2), ("monoRing", 3), ("multiArb", 4), ("multiSrb", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciLvpEncapsulation.setStatus('mandatory')
fciLocalClusterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12), )
if mibBuilder.loadTexts: fciLocalClusterTable.setStatus('mandatory')
fciLocalClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12, 1), ).setIndexNames((0, "PCE-MIB", "fciLclVirtualPortId"), (0, "PCE-MIB", "fciLclClusterNumber"))
if mibBuilder.loadTexts: fciLocalClusterEntry.setStatus('mandatory')
fciLclVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciLclVirtualPortId.setStatus('mandatory')
fciLclClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciLclClusterNumber.setStatus('mandatory')
fciLclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciLclStatus.setStatus('mandatory')
fciLclVirtualIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciLclVirtualIpAddress.setStatus('mandatory')
fciLclPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciLclPriority.setStatus('mandatory')
fciRemoteNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 15), )
if mibBuilder.loadTexts: fciRemoteNetToMediaTable.setStatus('mandatory')
fciRemoteNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 15, 1), ).setIndexNames((0, "PCE-MIB", "fciRemIpAddress"))
if mibBuilder.loadTexts: fciRemoteNetToMediaEntry.setStatus('mandatory')
fciRemIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 15, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciRemIpAddress.setStatus('mandatory')
fciRemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRemStatus.setStatus('mandatory')
fciRemRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 15, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRemRemoteAddress.setStatus('mandatory')
fciNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 16), )
if mibBuilder.loadTexts: fciNetToMediaTable.setStatus('mandatory')
fciNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 16, 1), ).setIndexNames((0, "PCE-MIB", "fciNetToMediaIpAddress"))
if mibBuilder.loadTexts: fciNetToMediaEntry.setStatus('mandatory')
fciNetToMediaIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 16, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciNetToMediaIpAddress.setStatus('mandatory')
fciNetToMediaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciNetToMediaStatus.setStatus('mandatory')
fciNetToMediaMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 16, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciNetToMediaMacAddress.setStatus('mandatory')
fciIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20), )
if mibBuilder.loadTexts: fciIpRouteTable.setStatus('mandatory')
fciIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20, 1), ).setIndexNames((0, "PCE-MIB", "fciRouteDest"), (0, "PCE-MIB", "fciRouteMask"))
if mibBuilder.loadTexts: fciIpRouteEntry.setStatus('mandatory')
fciRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciRouteDest.setStatus('mandatory')
fciRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciRouteMask.setStatus('mandatory')
fciRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRouteStatus.setStatus('mandatory')
fciRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRouteNextHop.setStatus('mandatory')
fciRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRouteMetric.setStatus('mandatory')
fciFlowManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30))
fciFlowTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1), )
if mibBuilder.loadTexts: fciFlowTable.setStatus('mandatory')
fciFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1), ).setIndexNames((0, "PCE-MIB", "fciFlowFlowId"))
if mibBuilder.loadTexts: fciFlowEntry.setStatus('mandatory')
fciFlowFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciFlowFlowId.setStatus('mandatory')
fciFlowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowStatus.setStatus('mandatory')
fciFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowType.setStatus('mandatory')
fciFlowVpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowVpId.setStatus('mandatory')
fciFlowSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowSrcIpAddress.setStatus('mandatory')
fciFlowSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowSrcMask.setStatus('mandatory')
fciFlowDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowDestIpAddress.setStatus('mandatory')
fciFlowDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowDestMask.setStatus('mandatory')
fciFlowProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowProtocol.setStatus('mandatory')
fciFlowPortMin = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowPortMin.setStatus('mandatory')
fciFlowPortMax = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowPortMax.setStatus('mandatory')
fciFlowLengthMax = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowLengthMax.setStatus('mandatory')
fciFlowSegmented = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notChecked", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowSegmented.setStatus('mandatory')
fciFlowAddrSubstituteTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 2), )
if mibBuilder.loadTexts: fciFlowAddrSubstituteTable.setStatus('mandatory')
fciFlowAddrSubstituteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 2, 1), ).setIndexNames((0, "PCE-MIB", "fciFlowSubstFlowId"), (0, "PCE-MIB", "fciFlowSubstDestIpAddress"))
if mibBuilder.loadTexts: fciFlowAddrSubstituteEntry.setStatus('mandatory')
fciFlowSubstFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciFlowSubstFlowId.setStatus('mandatory')
fciFlowSubstDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciFlowSubstDestIpAddress.setStatus('mandatory')
fciFlowSubstStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowSubstStatus.setStatus('mandatory')
fciFlowRouteTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 20), )
if mibBuilder.loadTexts: fciFlowRouteTable.setStatus('mandatory')
fciFlowRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 20, 1), ).setIndexNames((0, "PCE-MIB", "fciFlowRouteFlowId"))
if mibBuilder.loadTexts: fciFlowRouteEntry.setStatus('mandatory')
fciFlowRouteFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciFlowRouteFlowId.setStatus('mandatory')
fciFlowRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowRouteStatus.setStatus('mandatory')
fciFlowRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 30, 20, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciFlowRouteNextHop.setStatus('mandatory')
fciRip = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40))
fciRipAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("quiet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipAdminStatus.setStatus('mandatory')
fciRipStaticRoutesDistribution = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipStaticRoutesDistribution.setStatus('mandatory')
fciRipEgpRoutesDistribution = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipEgpRoutesDistribution.setStatus('mandatory')
fciRipDistributionTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipDistributionTimer.setStatus('mandatory')
fciRipPreference = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipPreference.setStatus('mandatory')
fciRipOspfRoutesDistribution = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipOspfRoutesDistribution.setStatus('mandatory')
fciRipOspfRoutesDistributionMetric = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipOspfRoutesDistributionMetric.setStatus('mandatory')
fciRipStaticRoutesDistributionMetric = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipStaticRoutesDistributionMetric.setStatus('mandatory')
fciRipVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10), )
if mibBuilder.loadTexts: fciRipVirtualPortTable.setStatus('mandatory')
fciRipVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1), ).setIndexNames((0, "PCE-MIB", "fciRipVpVirtualPortId"))
if mibBuilder.loadTexts: fciRipVirtualPortEntry.setStatus('mandatory')
fciRipVpVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciRipVpVirtualPortId.setStatus('mandatory')
fciRipVpDistribution = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipVpDistribution.setStatus('mandatory')
fciRipVpMetricOut = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipVpMetricOut.setStatus('mandatory')
fciRipVpRipIn = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipVpRipIn.setStatus('mandatory')
fciRipVpMetricIn = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipVpMetricIn.setStatus('mandatory')
fciRipVpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipVpVersion.setStatus('mandatory')
fciRipVpMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipVpMulticast.setStatus('mandatory')
fciRipVpAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simplePassword", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipVpAuthType.setStatus('mandatory')
fciRipVpAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipVpAuthKey.setStatus('mandatory')
fciRipNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20), )
if mibBuilder.loadTexts: fciRipNeighborTable.setStatus('mandatory')
fciRipNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20, 1), ).setIndexNames((0, "PCE-MIB", "fciRipNeighborIpAddress"))
if mibBuilder.loadTexts: fciRipNeighborEntry.setStatus('mandatory')
fciRipNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciRipNeighborIpAddress.setStatus('mandatory')
fciRipNeighborStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipNeighborStatus.setStatus('mandatory')
fciRipNeighborOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("bck", 3), ("on1", 4), ("bk1", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipNeighborOutput.setStatus('mandatory')
fciRipNeighborInput = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipNeighborInput.setStatus('mandatory')
fciRipNeighborBackupGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipNeighborBackupGroup.setStatus('mandatory')
fciRipEgpRoutesDistributionTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 30), )
if mibBuilder.loadTexts: fciRipEgpRoutesDistributionTable.setStatus('mandatory')
fciRipEgpRoutesDistributionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 30, 1), ).setIndexNames((0, "PCE-MIB", "fciRipEgpRoutesAsNumber"))
if mibBuilder.loadTexts: fciRipEgpRoutesDistributionEntry.setStatus('mandatory')
fciRipEgpRoutesAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciRipEgpRoutesAsNumber.setStatus('mandatory')
fciRipEgpRoutesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipEgpRoutesStatus.setStatus('mandatory')
fciRipEgpRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 40, 30, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciRipEgpRoutesMetric.setStatus('mandatory')
fciOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41))
fciOspfGeneralParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 1))
fciOspfAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAdminStatus.setStatus('mandatory')
fciOspfRouterId = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfRouterId.setStatus('mandatory')
fciOspfRoutesPreference = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfRoutesPreference.setStatus('mandatory')
fciOspfAsePreference = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAsePreference.setStatus('mandatory')
fciOspfVirtualPortsTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10), )
if mibBuilder.loadTexts: fciOspfVirtualPortsTable.setStatus('mandatory')
fciOspfVirtualPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1), ).setIndexNames((0, "PCE-MIB", "fciOspfVpId"))
if mibBuilder.loadTexts: fciOspfVirtualPortsEntry.setStatus('mandatory')
fciOspfVpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciOspfVpId.setStatus('mandatory')
fciOspfVpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVpAdminStatus.setStatus('mandatory')
fciOspfVpAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVpAreaId.setStatus('mandatory')
fciOspfVpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVpMetric.setStatus('mandatory')
fciOspfVpType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVpType.setStatus('mandatory')
fciOspfVpDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVpDRPriority.setStatus('mandatory')
fciOspfVpTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVpTransitDelay.setStatus('mandatory')
fciOspfVpRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVpRetransmitInterval.setStatus('mandatory')
fciOspfVpHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVpHelloInterval.setStatus('mandatory')
fciOspfVpRouterDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVpRouterDeadInterval.setStatus('mandatory')
fciOspfVpPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVpPollInterval.setStatus('mandatory')
fciOspfVpAuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 10, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVpAuthenticationKey.setStatus('mandatory')
fciOspfNeighborsTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 20), )
if mibBuilder.loadTexts: fciOspfNeighborsTable.setStatus('mandatory')
fciOspfNeighborsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 20, 1), ).setIndexNames((0, "PCE-MIB", "fciOspfNeighborIpAddress"))
if mibBuilder.loadTexts: fciOspfNeighborsEntry.setStatus('mandatory')
fciOspfNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciOspfNeighborIpAddress.setStatus('mandatory')
fciOspfNeighborStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfNeighborStatus.setStatus('mandatory')
fciOspfNeighborEligibleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfNeighborEligibleStatus.setStatus('mandatory')
fciOspfAreasTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30), )
if mibBuilder.loadTexts: fciOspfAreasTable.setStatus('mandatory')
fciOspfAreasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30, 1), ).setIndexNames((0, "PCE-MIB", "fciOspfAreaId"))
if mibBuilder.loadTexts: fciOspfAreasEntry.setStatus('mandatory')
fciOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciOspfAreaId.setStatus('mandatory')
fciOspfAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAreaStatus.setStatus('mandatory')
fciOspfAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simplePassword", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAreaAuthType.setStatus('mandatory')
fciOspfAreaStubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAreaStubStatus.setStatus('mandatory')
fciOspfAreaStubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 30, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAreaStubMetric.setStatus('mandatory')
fciOspfAreaRangesTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33), )
if mibBuilder.loadTexts: fciOspfAreaRangesTable.setStatus('mandatory')
fciOspfAreaRangesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33, 1), ).setIndexNames((0, "PCE-MIB", "fciOspfAreaRangeIpAddress"), (0, "PCE-MIB", "fciOspfAreaRangeIpMask"))
if mibBuilder.loadTexts: fciOspfAreaRangesEntry.setStatus('mandatory')
fciOspfAreaRangeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciOspfAreaRangeIpAddress.setStatus('mandatory')
fciOspfAreaRangeIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciOspfAreaRangeIpMask.setStatus('mandatory')
fciOspfAreaRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAreaRangeStatus.setStatus('mandatory')
fciOspfAreaRangeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAreaRangeAreaId.setStatus('mandatory')
fciOspfAreaRangeRestrict = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 33, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAreaRangeRestrict.setStatus('mandatory')
fciOspfVirtualLinksTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36), )
if mibBuilder.loadTexts: fciOspfVirtualLinksTable.setStatus('mandatory')
fciOspfVirtualLinksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1), ).setIndexNames((0, "PCE-MIB", "fciOspfVlNeighborId"), (0, "PCE-MIB", "fciOspfVlTransitAreaId"))
if mibBuilder.loadTexts: fciOspfVirtualLinksEntry.setStatus('mandatory')
fciOspfVlNeighborId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciOspfVlNeighborId.setStatus('mandatory')
fciOspfVlTransitAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciOspfVlTransitAreaId.setStatus('mandatory')
fciOspfVlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVlStatus.setStatus('mandatory')
fciOspfVlDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVlDRPriority.setStatus('mandatory')
fciOspfVlTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVlTransitDelay.setStatus('mandatory')
fciOspfVlRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVlRetransmitInterval.setStatus('mandatory')
fciOspfVlHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVlHelloInterval.setStatus('mandatory')
fciOspfVlRouterDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVlRouterDeadInterval.setStatus('mandatory')
fciOspfVlAuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 36, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfVlAuthenticationKey.setStatus('mandatory')
fciOspfExportingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40))
fciOspfAseExportInterval = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAseExportInterval.setStatus('mandatory')
fciOspfAseExportLimit = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAseExportLimit.setStatus('mandatory')
fciOspfAseExportStaticsStatus = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAseExportStaticsStatus.setStatus('mandatory')
fciOspfAseExportStaticsMetric = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAseExportStaticsMetric.setStatus('mandatory')
fciOspfAseExportStaticsTag = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483648))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAseExportStaticsTag.setStatus('mandatory')
fciOspfAseExportStaticsType = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAseExportStaticsType.setStatus('mandatory')
fciOspfAseExportRipStatus = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAseExportRipStatus.setStatus('mandatory')
fciOspfAseExportRipMetric = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAseExportRipMetric.setStatus('mandatory')
fciOspfAseExportRipTag = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483648))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAseExportRipTag.setStatus('mandatory')
fciOspfAseExportRipType = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 41, 40, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciOspfAseExportRipType.setStatus('mandatory')
fciEgp = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45))
fciEgpAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciEgpAdminStatus.setStatus('mandatory')
fciEgpAutonomousSystemNumber = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciEgpAutonomousSystemNumber.setStatus('mandatory')
fciEgpStaticRoutesDistribution = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciEgpStaticRoutesDistribution.setStatus('mandatory')
fciEgpRipRoutesDistribution = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciEgpRipRoutesDistribution.setStatus('mandatory')
fciEgpMetricDistribution = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciEgpMetricDistribution.setStatus('mandatory')
fciEgpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 10), )
if mibBuilder.loadTexts: fciEgpNeighborTable.setStatus('mandatory')
fciEgpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 10, 1), ).setIndexNames((0, "PCE-MIB", "fciEgpNeighborIpAddress"))
if mibBuilder.loadTexts: fciEgpNeighborEntry.setStatus('mandatory')
fciEgpNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciEgpNeighborIpAddress.setStatus('mandatory')
fciEgpNeighborStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciEgpNeighborStatus.setStatus('mandatory')
fciEgpNeighborAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciEgpNeighborAsNumber.setStatus('mandatory')
fciEgpTargetAsDistributionTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 15), )
if mibBuilder.loadTexts: fciEgpTargetAsDistributionTable.setStatus('mandatory')
fciEgpTargetAsDistributionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 15, 1), ).setIndexNames((0, "PCE-MIB", "fciEgpTargetAsNumber"))
if mibBuilder.loadTexts: fciEgpTargetAsDistributionEntry.setStatus('mandatory')
fciEgpTargetAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciEgpTargetAsNumber.setStatus('mandatory')
fciEgpTargetAsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 45, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciEgpTargetAsStatus.setStatus('mandatory')
fciSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50))
fciSnmpCommunityStringReadOnly = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciSnmpCommunityStringReadOnly.setStatus('mandatory')
fciSnmpCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciSnmpCommunityStringReadWrite.setStatus('mandatory')
fciSnmpCommunityStringTrap = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciSnmpCommunityStringTrap.setStatus('mandatory')
fciSnmpAuthenticationFailureTrap = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciSnmpAuthenticationFailureTrap.setStatus('mandatory')
fciSnmpModule0TrapSourceAddrVpId = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciSnmpModule0TrapSourceAddrVpId.setStatus('mandatory')
fciSnmpModule1TrapSourceAddrVpId = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciSnmpModule1TrapSourceAddrVpId.setStatus('mandatory')
fciSnmpModule2TrapSourceAddrVpId = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciSnmpModule2TrapSourceAddrVpId.setStatus('mandatory')
fciSnmpManagerFiltering = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciSnmpManagerFiltering.setStatus('mandatory')
fciSnmpManagerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 20), )
if mibBuilder.loadTexts: fciSnmpManagerTable.setStatus('mandatory')
fciSnmpManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 20, 1), ).setIndexNames((0, "PCE-MIB", "fciSnmpManagerIpAddress"))
if mibBuilder.loadTexts: fciSnmpManagerEntry.setStatus('mandatory')
fciSnmpManagerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 20, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciSnmpManagerIpAddress.setStatus('mandatory')
fciSnmpManagerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciSnmpManagerStatus.setStatus('mandatory')
fciSnmpManagerSendTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciSnmpManagerSendTraps.setStatus('mandatory')
fciSnmpManagerTrapsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 50, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciSnmpManagerTrapsUdpPort.setStatus('mandatory')
fciBootP = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60))
fciBootPClient = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1))
fciBootPClientStart = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciBootPClientStart.setStatus('mandatory')
fciBootPClientServer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciBootPClientServer.setStatus('mandatory')
fciBootPClientBootFile = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciBootPClientBootFile.setStatus('mandatory')
fciBootPClientBootTime = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciBootPClientBootTime.setStatus('mandatory')
fciBootPClientRetransNb = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciBootPClientRetransNb.setStatus('mandatory')
fciBootPInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 20), )
if mibBuilder.loadTexts: fciBootPInterfaceTable.setStatus('mandatory')
fciBootPInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 20, 1), ).setIndexNames((0, "PCE-MIB", "fciBootPInterfaceVpId"), (0, "PCE-MIB", "fciBootPInterfaceIpAddress"))
if mibBuilder.loadTexts: fciBootPInterfaceEntry.setStatus('mandatory')
fciBootPInterfaceVpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciBootPInterfaceVpId.setStatus('mandatory')
fciBootPInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 20, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciBootPInterfaceIpAddress.setStatus('mandatory')
fciBootPInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciBootPInterfaceStatus.setStatus('mandatory')
fciBootPInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 60, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("client", 1), ("relay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciBootPInterfaceType.setStatus('mandatory')
fciTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70))
fciTelnetConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 1))
fciTelnetMaxSession = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetMaxSession.setStatus('mandatory')
fciTelnetTimer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetTimer.setStatus('mandatory')
fciTelnetPwd = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10))
fciTelnetPwdP0 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetPwdP0.setStatus('mandatory')
fciTelnetPwdP1 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetPwdP1.setStatus('mandatory')
fciTelnetPwdP2 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetPwdP2.setStatus('mandatory')
fciTelnetPwdP3 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetPwdP3.setStatus('mandatory')
fciTelnetPwdP4 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetPwdP4.setStatus('mandatory')
fciTelnetPwdP5 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetPwdP5.setStatus('mandatory')
fciTelnetPwdP6 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetPwdP6.setStatus('mandatory')
fciTelnetPwdP7 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetPwdP7.setStatus('mandatory')
fciTelnetPwdP8 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetPwdP8.setStatus('mandatory')
fciTelnetPwdP9 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 10, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetPwdP9.setStatus('mandatory')
fciTelnetUserTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 30), )
if mibBuilder.loadTexts: fciTelnetUserTable.setStatus('mandatory')
fciTelnetUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 30, 1), ).setIndexNames((0, "PCE-MIB", "fciTelnetUserId"))
if mibBuilder.loadTexts: fciTelnetUserEntry.setStatus('mandatory')
fciTelnetUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 49))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fciTelnetUserId.setStatus('mandatory')
fciTelnetUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetUserStatus.setStatus('mandatory')
fciTelnetUserLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 30, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetUserLogin.setStatus('mandatory')
fciTelnetUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 36, 70, 30, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fciTelnetUserPriority.setStatus('mandatory')
fcIpx = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 37))
fcxInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 1))
fcxIpxRouting = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxIpxRouting.setStatus('mandatory')
fcxBasicSysName = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxBasicSysName.setStatus('mandatory')
fcxAdvSysMaxPathSplits = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxAdvSysMaxPathSplits.setStatus('mandatory')
fcxAdvSysMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxAdvSysMaxHops.setStatus('mandatory')
fcxCircuits = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10))
fcxCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1), )
if mibBuilder.loadTexts: fcxCircuitTable.setStatus('mandatory')
fcxCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1), ).setIndexNames((0, "PCE-MIB", "fcxCircCircuitId"))
if mibBuilder.loadTexts: fcxCircuitEntry.setStatus('mandatory')
fcxCircCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxCircCircuitId.setStatus('mandatory')
fcxCircStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircStatus.setStatus('mandatory')
fcxCircVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircVirtualPortId.setStatus('mandatory')
fcxCircOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircOperState.setStatus('mandatory')
fcxCircName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircName.setStatus('mandatory')
fcxCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 6))).clone(namedValues=NamedValues(("broadcast", 2), ("ptToPt", 3), ("dynamic", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircType.setStatus('mandatory')
fcxCircLocalMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircLocalMaxPacketSize.setStatus('mandatory')
fcxCircNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircNetNumber.setStatus('mandatory')
fcxCircChecksumEnabling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircChecksumEnabling.setStatus('mandatory')
fcxCircuitLocalVpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 2), )
if mibBuilder.loadTexts: fcxCircuitLocalVpTable.setStatus('mandatory')
fcxCircuitLocalVpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 2, 1), ).setIndexNames((0, "PCE-MIB", "fcxCircLvpCircuitId"))
if mibBuilder.loadTexts: fcxCircuitLocalVpEntry.setStatus('mandatory')
fcxCircLvpCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxCircLvpCircuitId.setStatus('mandatory')
fcxCircLvpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircLvpStatus.setStatus('mandatory')
fcxCircLvpEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("ether802-3", 2), ("ether802-2", 3), ("etherSnap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircLvpEncapsulation.setStatus('mandatory')
fcxCircuitRemoteVpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 3), )
if mibBuilder.loadTexts: fcxCircuitRemoteVpTable.setStatus('mandatory')
fcxCircuitRemoteVpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 3, 1), ).setIndexNames((0, "PCE-MIB", "fcxCircRvpCircuitId"))
if mibBuilder.loadTexts: fcxCircuitRemoteVpEntry.setStatus('mandatory')
fcxCircRvpCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxCircRvpCircuitId.setStatus('mandatory')
fcxCircRvpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircRvpStatus.setStatus('mandatory')
fcxCircRvpRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircRvpRemoteAddress.setStatus('mandatory')
fcxCircRvpLocalNode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 10, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxCircRvpLocalNode.setStatus('mandatory')
fcxRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20))
fcxRoutInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 1))
fcxRoutType20PacketBroadcasting = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onLanOnly", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRoutType20PacketBroadcasting.setStatus('mandatory')
fcxRoutCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 10), )
if mibBuilder.loadTexts: fcxRoutCircuitTable.setStatus('mandatory')
fcxRoutCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 10, 1), ).setIndexNames((0, "PCE-MIB", "fcxRoutCircCircuitId"))
if mibBuilder.loadTexts: fcxRoutCircuitEntry.setStatus('mandatory')
fcxRoutCircCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxRoutCircCircuitId.setStatus('mandatory')
fcxRoutCircNcpSpoofing = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRoutCircNcpSpoofing.setStatus('mandatory')
fcxRoutCircType20PacketBroadcasting = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRoutCircType20PacketBroadcasting.setStatus('mandatory')
fcxRoutCircAddressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("permitted", 2), ("denied", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRoutCircAddressFiltering.setStatus('mandatory')
fcxRoutIpxStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20), )
if mibBuilder.loadTexts: fcxRoutIpxStaticRouteTable.setStatus('mandatory')
fcxRoutIpxStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20, 1), ).setIndexNames((0, "PCE-MIB", "fcxRoutStaticRouteCircuitId"), (0, "PCE-MIB", "fcxRoutStaticRouteNetNum"))
if mibBuilder.loadTexts: fcxRoutIpxStaticRouteEntry.setStatus('mandatory')
fcxRoutStaticRouteCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxRoutStaticRouteCircuitId.setStatus('mandatory')
fcxRoutStaticRouteNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxRoutStaticRouteNetNum.setStatus('mandatory')
fcxRoutStaticRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRoutStaticRouteStatus.setStatus('mandatory')
fcxRoutStaticRouteTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRoutStaticRouteTicks.setStatus('mandatory')
fcxRoutStaticRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRoutStaticRouteHopCount.setStatus('mandatory')
fcxRoutAddressFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30), )
if mibBuilder.loadTexts: fcxRoutAddressFilteringTable.setStatus('mandatory')
fcxRoutAddressFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1), ).setIndexNames((0, "PCE-MIB", "fcxRoutAddrFltCircuitId"), (0, "PCE-MIB", "fcxRoutAddrFltFilterId"))
if mibBuilder.loadTexts: fcxRoutAddressFilteringEntry.setStatus('mandatory')
fcxRoutAddrFltCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxRoutAddrFltCircuitId.setStatus('mandatory')
fcxRoutAddrFltFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxRoutAddrFltFilterId.setStatus('mandatory')
fcxRoutAddrFltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRoutAddrFltStatus.setStatus('mandatory')
fcxRoutAddrFltFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRoutAddrFltFiltering.setStatus('mandatory')
fcxRoutAddrFltField = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sourceNetAddress", 1), ("destNetAddress", 2), ("sourceSocket", 3), ("destSocket", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRoutAddrFltField.setStatus('mandatory')
fcxRoutAddrFltMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRoutAddrFltMask.setStatus('mandatory')
fcxRoutAddrFltValue = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 20, 30, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRoutAddrFltValue.setStatus('mandatory')
fcxRoutingInformationProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25))
fcxRipInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 1))
fcxRipSysState = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipSysState.setStatus('mandatory')
fcxRipInputFiltering = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("permitted", 2), ("denied", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipInputFiltering.setStatus('mandatory')
fcxRipCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10), )
if mibBuilder.loadTexts: fcxRipCircuitTable.setStatus('mandatory')
fcxRipCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1), ).setIndexNames((0, "PCE-MIB", "fcxRipCircCircuitId"))
if mibBuilder.loadTexts: fcxRipCircuitEntry.setStatus('mandatory')
fcxRipCircCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxRipCircCircuitId.setStatus('mandatory')
fcxRipCircState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipCircState.setStatus('mandatory')
fcxRipCircPace = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipCircPace.setStatus('mandatory')
fcxRipCircUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipCircUpdate.setStatus('mandatory')
fcxRipCircAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipCircAgeMultiplier.setStatus('mandatory')
fcxRipCircPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipCircPacketSize.setStatus('mandatory')
fcxRipCircOutputFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("permitted", 2), ("denied", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipCircOutputFiltering.setStatus('mandatory')
fcxRipInputFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11), )
if mibBuilder.loadTexts: fcxRipInputFilteringTable.setStatus('mandatory')
fcxRipInputFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11, 1), ).setIndexNames((0, "PCE-MIB", "fcxRipInFltFilterId"))
if mibBuilder.loadTexts: fcxRipInputFilteringEntry.setStatus('mandatory')
fcxRipInFltFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxRipInFltFilterId.setStatus('mandatory')
fcxRipInFltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipInFltStatus.setStatus('mandatory')
fcxRipInFltFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipInFltFiltering.setStatus('mandatory')
fcxRipInFltNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipInFltNetAddress.setStatus('mandatory')
fcxRipInFltMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipInFltMask.setStatus('mandatory')
fcxRipOutputFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12), )
if mibBuilder.loadTexts: fcxRipOutputFilteringTable.setStatus('mandatory')
fcxRipOutputFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1), ).setIndexNames((0, "PCE-MIB", "fcxRipOutFltCircuitId"), (0, "PCE-MIB", "fcxRipOutFltFilterId"))
if mibBuilder.loadTexts: fcxRipOutputFilteringEntry.setStatus('mandatory')
fcxRipOutFltCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxRipOutFltCircuitId.setStatus('mandatory')
fcxRipOutFltFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxRipOutFltFilterId.setStatus('mandatory')
fcxRipOutFltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipOutFltStatus.setStatus('mandatory')
fcxRipOutFltFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipOutFltFiltering.setStatus('mandatory')
fcxRipOutFltNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipOutFltNetAddress.setStatus('mandatory')
fcxRipOutFltMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 25, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxRipOutFltMask.setStatus('mandatory')
fcxServices = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30))
fcxServInstance = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 1))
fcxServSapSysState = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapSysState.setStatus('mandatory')
fcxServSapInputFiltering = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("permitted", 2), ("denied", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapInputFiltering.setStatus('mandatory')
fcxServCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10), )
if mibBuilder.loadTexts: fcxServCircuitTable.setStatus('mandatory')
fcxServCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1), ).setIndexNames((0, "PCE-MIB", "fcxServCircSapCircuitId"))
if mibBuilder.loadTexts: fcxServCircuitEntry.setStatus('mandatory')
fcxServCircSapCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxServCircSapCircuitId.setStatus('mandatory')
fcxServCircSapState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServCircSapState.setStatus('mandatory')
fcxServCircSapPace = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServCircSapPace.setStatus('mandatory')
fcxServCircSapUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServCircSapUpdate.setStatus('mandatory')
fcxServCircSapAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServCircSapAgeMultiplier.setStatus('mandatory')
fcxServCircSapPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServCircSapPacketSize.setStatus('mandatory')
fcxServCircSapGetNearestServerReply = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServCircSapGetNearestServerReply.setStatus('mandatory')
fcxServCircSapOutputFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("permitted", 2), ("denied", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServCircSapOutputFiltering.setStatus('mandatory')
fcxServStaticServiceTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20), )
if mibBuilder.loadTexts: fcxServStaticServiceTable.setStatus('mandatory')
fcxServStaticServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1), ).setIndexNames((0, "PCE-MIB", "fcxServStaticServiceId"))
if mibBuilder.loadTexts: fcxServStaticServiceEntry.setStatus('mandatory')
fcxServStaticServiceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxServStaticServiceId.setStatus('mandatory')
fcxServStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServStaticStatus.setStatus('mandatory')
fcxServStaticCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServStaticCircuitId.setStatus('mandatory')
fcxServStaticName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServStaticName.setStatus('mandatory')
fcxServStaticType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServStaticType.setStatus('mandatory')
fcxServStaticNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServStaticNetNum.setStatus('mandatory')
fcxServStaticNode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServStaticNode.setStatus('mandatory')
fcxServStaticSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServStaticSocket.setStatus('mandatory')
fcxServStaticHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 20, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServStaticHopCount.setStatus('mandatory')
fcxServSapInputFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30), )
if mibBuilder.loadTexts: fcxServSapInputFilteringTable.setStatus('mandatory')
fcxServSapInputFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1), ).setIndexNames((0, "PCE-MIB", "fcxServSapInFltFilterId"))
if mibBuilder.loadTexts: fcxServSapInputFilteringEntry.setStatus('mandatory')
fcxServSapInFltFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxServSapInFltFilterId.setStatus('mandatory')
fcxServSapInFltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapInFltStatus.setStatus('mandatory')
fcxServSapInFltFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapInFltFiltering.setStatus('mandatory')
fcxServSapInFltCheckedField = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("name", 1), ("type", 2), ("nameAndType", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapInFltCheckedField.setStatus('mandatory')
fcxServSapInFltServiceNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullName", 1), ("beginningPattern", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapInFltServiceNameType.setStatus('mandatory')
fcxServSapInFltServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapInFltServiceName.setStatus('mandatory')
fcxServSapInFltServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 30, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapInFltServiceType.setStatus('mandatory')
fcxServSapOutputFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31), )
if mibBuilder.loadTexts: fcxServSapOutputFilteringTable.setStatus('mandatory')
fcxServSapOutputFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1), ).setIndexNames((0, "PCE-MIB", "fcxServSapOutFltCircuitId"), (0, "PCE-MIB", "fcxServSapOutFltFilterId"))
if mibBuilder.loadTexts: fcxServSapOutputFilteringEntry.setStatus('mandatory')
fcxServSapOutFltCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxServSapOutFltCircuitId.setStatus('mandatory')
fcxServSapOutFltFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcxServSapOutFltFilterId.setStatus('mandatory')
fcxServSapOutFltStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapOutFltStatus.setStatus('mandatory')
fcxServSapOutFltFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapOutFltFiltering.setStatus('mandatory')
fcxServSapOutFltCheckedField = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("name", 1), ("type", 2), ("nameAndType", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapOutFltCheckedField.setStatus('mandatory')
fcxServSapOutFltServiceNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullName", 1), ("beginningPattern", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapOutFltServiceNameType.setStatus('mandatory')
fcxServSapOutFltServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapOutFltServiceName.setStatus('mandatory')
fcxServSapOutFltServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 37, 30, 31, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fcxServSapOutFltServiceType.setStatus('mandatory')
fcClnp = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 1, 38))
fccClnpRouting = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccClnpRouting.setStatus('mandatory')
fccLocalNetworkEntityTitle = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(22, 22)).setFixedLength(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccLocalNetworkEntityTitle.setStatus('mandatory')
fccErrorFramesSending = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccErrorFramesSending.setStatus('mandatory')
fccVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 10), )
if mibBuilder.loadTexts: fccVirtualPortTable.setStatus('mandatory')
fccVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 10, 1), ).setIndexNames((0, "PCE-MIB", "fccVpVirtualPortId"))
if mibBuilder.loadTexts: fccVirtualPortEntry.setStatus('mandatory')
fccVpVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fccVpVirtualPortId.setStatus('mandatory')
fccVpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccVpStatus.setStatus('mandatory')
fccVpMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 1600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccVpMtu.setStatus('mandatory')
fccLocalVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11), )
if mibBuilder.loadTexts: fccLocalVirtualPortTable.setStatus('mandatory')
fccLocalVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11, 1), ).setIndexNames((0, "PCE-MIB", "fccLvpVirtualPortId"))
if mibBuilder.loadTexts: fccLocalVirtualPortEntry.setStatus('mandatory')
fccLvpVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fccLvpVirtualPortId.setStatus('mandatory')
fccLvpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccLvpStatus.setStatus('mandatory')
fccLvpEsIsRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccLvpEsIsRedirection.setStatus('mandatory')
fccLvpEsIsConfigTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccLvpEsIsConfigTimer.setStatus('mandatory')
fccLvpEsIsHoldingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccLvpEsIsHoldingTimer.setStatus('mandatory')
fccNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20), )
if mibBuilder.loadTexts: fccNeighborTable.setStatus('mandatory')
fccNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20, 1), ).setIndexNames((0, "PCE-MIB", "fccNeighNeighborId"))
if mibBuilder.loadTexts: fccNeighborEntry.setStatus('mandatory')
fccNeighNeighborId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fccNeighNeighborId.setStatus('mandatory')
fccNeighStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccNeighStatus.setStatus('mandatory')
fccNeighType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("es", 1), ("is", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccNeighType.setStatus('mandatory')
fccNeighVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccNeighVirtualPortId.setStatus('mandatory')
fccNeighClnpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 20, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(22, 22)).setFixedLength(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccNeighClnpAddress.setStatus('mandatory')
fccLocalNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 21), )
if mibBuilder.loadTexts: fccLocalNeighborTable.setStatus('mandatory')
fccLocalNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 21, 1), ).setIndexNames((0, "PCE-MIB", "fccLneighNeighborId"))
if mibBuilder.loadTexts: fccLocalNeighborEntry.setStatus('mandatory')
fccLneighNeighborId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fccLneighNeighborId.setStatus('mandatory')
fccLneighStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccLneighStatus.setStatus('mandatory')
fccLneighMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 21, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccLneighMacAddress.setStatus('mandatory')
fccRemoteNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 22), )
if mibBuilder.loadTexts: fccRemoteNeighborTable.setStatus('mandatory')
fccRemoteNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 22, 1), ).setIndexNames((0, "PCE-MIB", "fccRneighNeighborId"))
if mibBuilder.loadTexts: fccRemoteNeighborEntry.setStatus('mandatory')
fccRneighNeighborId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fccRneighNeighborId.setStatus('mandatory')
fccRneighStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccRneighStatus.setStatus('mandatory')
fccRneighRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 22, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccRneighRemoteAddress.setStatus('mandatory')
fccClnpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 30), )
if mibBuilder.loadTexts: fccClnpRouteTable.setStatus('mandatory')
fccClnpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 30, 1), ).setIndexNames((0, "PCE-MIB", "fccRoutRouteId"))
if mibBuilder.loadTexts: fccClnpRouteEntry.setStatus('mandatory')
fccRoutRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fccRoutRouteId.setStatus('mandatory')
fccRoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccRoutStatus.setStatus('mandatory')
fccRoutDestClnpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 30, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(22, 22)).setFixedLength(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccRoutDestClnpAddress.setStatus('mandatory')
fccRoutNextHopNeighborId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 1, 38, 30, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fccRoutNextHopNeighborId.setStatus('mandatory')
fmEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 5))
fmeTroubleReport = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 1))
fmeTrblEventType = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("startAfterUnintentionalCrash", 1), ("startAfterDeliberateCrash", 2), ("startAfterHardwareResetOrStartUp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeTrblEventType.setStatus('mandatory')
fmeTroubleReportInfoTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 1, 2), )
if mibBuilder.loadTexts: fmeTroubleReportInfoTable.setStatus('mandatory')
fmeTroubleReportInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 1, 2, 1), ).setIndexNames((0, "PCE-MIB", "fmeTrblInfoIndex"))
if mibBuilder.loadTexts: fmeTroubleReportInfoEntry.setStatus('mandatory')
fmeTrblInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 194))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeTrblInfoIndex.setStatus('mandatory')
fmeTrblInfoData = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeTrblInfoData.setStatus('mandatory')
fmeFamilyTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 2), )
if mibBuilder.loadTexts: fmeFamilyTable.setStatus('mandatory')
fmeFamilyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 2, 1), ).setIndexNames((0, "PCE-MIB", "fmeFamFamilyId"))
if mibBuilder.loadTexts: fmeFamilyEntry.setStatus('mandatory')
fmeFamFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("troubleReport-00", 1), ("management-01", 2), ("synchronousSignalling-02", 3), ("x25SynchronousProcedure-03", 4), ("synchronousLink-04", 5), ("linePhysicalLevel-05", 6), ("asynchronousProtocolLevel-06", 7), ("asynchronousCommandSyntax-07", 8), ("asynchronousSemanticLevel-08", 9), ("sdlcProcedure-09", 10), ("vipProcedure-0A", 11), ("tvipFradBscProcedure-0B", 12), ("dlcBscProcedure-0C", 13), ("mlp-0D", 14), ("pstnProcedure-0E", 15), ("securizedVcEsv-0F", 16), ("securizedVcN4-10", 17), ("securizedVcIr-11", 18), ("isdnDChannelProcedure-12", 19), ("x29Rerouting-13", 20), ("ethernetBridgeAndIpRouterFunctions-14", 21), ("dlcMtrFrad-15", 22), ("compressionProcedure-16", 23), ("dlmFunction-17", 24), ("configurationFunction-18", 25), ("lmiFunction-19", 26), ("ppp-1A", 27), ("frameRelaySna-1B", 28), ("tokenRing-1C", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeFamFamilyId.setStatus('mandatory')
fmeFamStoredEventsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeFamStoredEventsCount.setStatus('mandatory')
fmeFamStoredEventsCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmeFamStoredEventsCommand.setStatus('mandatory')
fmeEventTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3), )
if mibBuilder.loadTexts: fmeEventTable.setStatus('mandatory')
fmeEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1), ).setIndexNames((0, "PCE-MIB", "fmeEvtFamilyId"), (0, "PCE-MIB", "fmeEvtEventIndex"))
if mibBuilder.loadTexts: fmeEventEntry.setStatus('mandatory')
fmeEvtFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("troubleReport-00", 1), ("management-01", 2), ("synchronousSignalling-02", 3), ("x25SynchronousProcedure-03", 4), ("synchronousLink-04", 5), ("linePhysicalLevel-05", 6), ("asynchronousProtocolLevel-06", 7), ("asynchronousCommandSyntax-07", 8), ("asynchronousSemanticLevel-08", 9), ("sdlcProcedure-09", 10), ("vipProcedure-0A", 11), ("tvipFradBscProcedure-0B", 12), ("dlcBscProcedure-0C", 13), ("mlp-0D", 14), ("pstnProcedure-0E", 15), ("securizedVcEsv-0F", 16), ("securizedVcN4-10", 17), ("securizedVcIr-11", 18), ("isdnDChannelProcedure-12", 19), ("x29Rerouting-13", 20), ("ethernetBridgeAndIpRouterFunctions-14", 21), ("dlcMtrFrad-15", 22), ("compressionProcedure-16", 23), ("dlmFunction-17", 24), ("configurationFunction-18", 25), ("lmiFunction-19", 26), ("ppp-1A", 27), ("frameRelaySna-1B", 28), ("tokenRing-1C", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeEvtFamilyId.setStatus('mandatory')
fmeEvtEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeEvtEventIndex.setStatus('mandatory')
fmeEvtEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeEvtEventType.setStatus('mandatory')
fmeEvtTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeEvtTime.setStatus('mandatory')
fmeEvtLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeEvtLineId.setStatus('mandatory')
fmeEvtData = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeEvtData.setStatus('mandatory')
fmeTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 4))
fmeTrapLineId = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeTrapLineId.setStatus('mandatory')
fmeTrapFamilyId = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("troubleReport-00", 1), ("management-01", 2), ("synchronousSignalling-02", 3), ("x25SynchronousProcedure-03", 4), ("synchronousLink-04", 5), ("linePhysicalLevel-05", 6), ("asynchronousProtocolLevel-06", 7), ("asynchronousCommandSyntax-07", 8), ("asynchronousSemanticLevel-08", 9), ("sdlcProcedure-09", 10), ("vipProcedure-0A", 11), ("tvipFradBscProcedure-0B", 12), ("dlcBscProcedure-0C", 13), ("mlp-0D", 14), ("pstnProcedure-0E", 15), ("securizedVcEsv-0F", 16), ("securizedVcN4-10", 17), ("securizedVcIr-11", 18), ("isdnDChannelProcedure-12", 19), ("x29Rerouting-13", 20), ("ethernetBridgeAndIpRouterFunctions-14", 21), ("dlcMtrFrad-15", 22), ("compressionProcedure-16", 23), ("dlmFunction-17", 24), ("configurationFunction-18", 25), ("lmiFunction-19", 26), ("ppp-1A", 27), ("frameRelaySna-1B", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeTrapFamilyId.setStatus('mandatory')
fmeTrapEventType = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeTrapEventType.setStatus('mandatory')
fmeTrapEventData = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 5, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmeTrapEventData.setStatus('mandatory')
fmStat = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10))
fmStatControl = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 1))
fmsCtrlStatus = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inProgress", 1), ("notInProgress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsCtrlStatus.setStatus('mandatory')
fmsCtrlSumming = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("infinite", 1), ("notInfinite", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmsCtrlSumming.setStatus('mandatory')
fmsCtrlCountersCommand = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmsCtrlCountersCommand.setStatus('mandatory')
fmsCtrlResetTime = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsCtrlResetTime.setStatus('mandatory')
fmStatGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10))
fmsGlobInitBuffCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsGlobInitBuffCount.setStatus('mandatory')
fmsGlobFreeBuffCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsGlobFreeBuffCount.setStatus('mandatory')
fmsGlobCpuA = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsGlobCpuA.setStatus('mandatory')
fmsGlobCpuB = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsGlobCpuB.setStatus('mandatory')
fmsGlobVcInUseCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsGlobVcInUseCount.setStatus('mandatory')
fmsGlobGeneratorsInUseCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsGlobGeneratorsInUseCount.setStatus('mandatory')
fmsGlobCompressOctetGain = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsGlobCompressOctetGain.setStatus('mandatory')
fmsGlobCompressBillGain = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsGlobCompressBillGain.setStatus('mandatory')
fmsGlobLanCpu = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsGlobLanCpu.setStatus('mandatory')
fmsGlobCongCpuLostBlocks = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsGlobCongCpuLostBlocks.setStatus('mandatory')
fmsGlobCongRamLostBlocks = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsGlobCongRamLostBlocks.setStatus('mandatory')
fmStatInputTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11))
fmsInputDataPktsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInputDataPktsCounter.setStatus('mandatory')
fmsInputDataBytesCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInputDataBytesCounter.setStatus('mandatory')
fmsInputIntrPktsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInputIntrPktsCounter.setStatus('mandatory')
fmsInputReinitPktsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInputReinitPktsCounter.setStatus('mandatory')
fmsInputCallPktsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInputCallPktsCounter.setStatus('mandatory')
fmsInputCallConfPktsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInputCallConfPktsCounter.setStatus('mandatory')
fmStatLineTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12), )
if mibBuilder.loadTexts: fmStatLineTable.setStatus('mandatory')
fmStatLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1), ).setIndexNames((0, "PCE-MIB", "fmsLineId"))
if mibBuilder.loadTexts: fmStatLineEntry.setStatus('mandatory')
fmsLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 55))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsLineId.setStatus('mandatory')
fmsLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 1, 4, 5))).clone(namedValues=NamedValues(("down", 2), ("disconnectedByDiag", 3), ("layer1Up", 1), ("layer2Up", 4), ("layer3Up", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsLineState.setStatus('mandatory')
fmsLineLcInUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsLineLcInUseCount.setStatus('mandatory')
fmsLineReinitsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsLineReinitsCounter.setStatus('mandatory')
fmsLineIncidentsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsLineIncidentsCounter.setStatus('mandatory')
fmsLineInputOctetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsLineInputOctetsCounter.setStatus('mandatory')
fmsLineOutputOctetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsLineOutputOctetsCounter.setStatus('mandatory')
fmsLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 14, 15, 16, 17, 19, 20, 21, 23, 27, 28, 30, 39, 40, 50, 51))).clone(namedValues=NamedValues(("x25Synchronous", 1), ("asynchronous", 2), ("asynchronousSdlc", 4), ("synchronousVipCharacter", 6), ("synchronousBscTransparentCharacter", 7), ("characterSynchronousBsc3270Or2780-3780", 8), ("isdnDChannel", 14), ("isdnBChannelWithSignalling", 15), ("isdnBChannelWithoutSignalling", 16), ("isdnDChannelWithPll", 17), ("frameRelayTypeTransit", 19), ("hdlc", 20), ("frameRelaySubscriber", 21), ("lanConnection", 23), ("lanIpRouter", 27), ("lanBridgeOrIpRouter", 28), ("asynchronousX28", 30), ("synchronousPpp", 39), ("asynchronousPpp", 40), ("moduleLink", 50), ("unitLink", 51)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsLineType.setStatus('mandatory')
fmsLineTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsLineTestState.setStatus('mandatory')
fmStatSignalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13), )
if mibBuilder.loadTexts: fmStatSignalTable.setStatus('mandatory')
fmStatSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1), ).setIndexNames((0, "PCE-MIB", "fmsSigPhysPortId"))
if mibBuilder.loadTexts: fmStatSignalEntry.setStatus('mandatory')
fmsSigPhysPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSigPhysPortId.setStatus('mandatory')
fmsSigState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSigState.setStatus('mandatory')
fmsSigDceOrDte = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSigDceOrDte.setStatus('mandatory')
fmsSig105 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSig105.setStatus('mandatory')
fmsSig106 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSig106.setStatus('mandatory')
fmsSig107 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSig107.setStatus('mandatory')
fmsSig108 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSig108.setStatus('mandatory')
fmsSig109 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSig109.setStatus('mandatory')
fmsSig111 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSig111.setStatus('mandatory')
fmsSig125 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSig125.setStatus('mandatory')
fmsSig140 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSig140.setStatus('mandatory')
fmsSig141 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSig141.setStatus('mandatory')
fmsSig142 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSig142.setStatus('mandatory')
fmsSigSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsSigSyn.setStatus('mandatory')
fmStatLinesSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 15))
fmsLinesSummState = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 15, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsLinesSummState.setStatus('mandatory')
fmStatStateTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20), )
if mibBuilder.loadTexts: fmStatStateTable.setStatus('mandatory')
fmStatStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1), ).setIndexNames((0, "PCE-MIB", "fmsStateLine"))
if mibBuilder.loadTexts: fmStatStateEntry.setStatus('mandatory')
fmsStateLine = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 55))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsStateLine.setStatus('mandatory')
fmsStateLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 7, 8, 14, 15, 16, 17, 19, 20, 21, 23, 27, 28, 30, 39, 40, 50, 51))).clone(namedValues=NamedValues(("x25Synchronous", 1), ("asynchronous", 2), ("asynchronousSdlc", 4), ("synchronousVipCharacter", 6), ("synchronousBscTransparentCharacter", 7), ("characterSynchronousBsc3270Or2780-3780", 8), ("isdnDChannel", 14), ("isdnBChannelWithSignalling", 15), ("isdnBChannelWithoutSignalling", 16), ("isdnDChannelWithPll", 17), ("frameRelayTypeTransit", 19), ("hdlc", 20), ("frameRelaySubscriber", 21), ("lanConnection", 23), ("lanIpRouter", 27), ("lanBridgeOrIpRouter", 28), ("asynchronousX28", 30), ("synchronousPpp", 39), ("asynchronousPpp", 40), ("moduleLink", 50), ("unitLink", 51)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsStateLineType.setStatus('mandatory')
fmsStateOsiState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("layer1Up", 2), ("layer2Up", 3), ("layer3Up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsStateOsiState.setStatus('mandatory')
fmsStateTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notUnderTest", 1), ("lineDisconnectedByTelemaintenance", 2), ("underTest", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsStateTestState.setStatus('mandatory')
fmsStateMlpTrunkMainLine = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsStateMlpTrunkMainLine.setStatus('mandatory')
fmsStateMlpTrunkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsStateMlpTrunkNumber.setStatus('mandatory')
fmsStateMlpTrunkState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsStateMlpTrunkState.setStatus('mandatory')
fmStatMlpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 30), )
if mibBuilder.loadTexts: fmStatMlpTable.setStatus('mandatory')
fmStatMlpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 30, 1), ).setIndexNames((0, "PCE-MIB", "fmsMlpTrunkNumber"), (0, "PCE-MIB", "fmsMlpLineId"))
if mibBuilder.loadTexts: fmStatMlpEntry.setStatus('mandatory')
fmsMlpTrunkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsMlpTrunkNumber.setStatus('mandatory')
fmsMlpLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsMlpLineId.setStatus('mandatory')
fmsMlpLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mainDown", 1), ("mainUp", 2), ("secondaryDown", 3), ("secondaryUp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsMlpLineType.setStatus('mandatory')
fmStatEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40))
fmStatEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1), )
if mibBuilder.loadTexts: fmStatEthernetTable.setStatus('mandatory')
fmStatEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1), ).setIndexNames((0, "PCE-MIB", "fmsEthLineId"))
if mibBuilder.loadTexts: fmStatEthernetEntry.setStatus('mandatory')
fmsEthLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthLineId.setStatus('mandatory')
fmsEthPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthPhysAddr.setStatus('mandatory')
fmsEthOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOperStatus.setStatus('mandatory')
fmsEthInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet10base5", 1), ("ethernet10BaseT", 2), ("ethernetAuto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInterface.setStatus('mandatory')
fmsEthAutoPortSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthAutoPortSelection.setStatus('mandatory')
fmsEthPolarityCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthPolarityCorrection.setStatus('mandatory')
fmsEthPolarityInversion = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthPolarityInversion.setStatus('mandatory')
fmsEthLinkIntegrity = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthLinkIntegrity.setStatus('mandatory')
fmsEthTestLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthTestLoopback.setStatus('mandatory')
fmsEthJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthJabber.setStatus('mandatory')
fmsEthTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("continousSending", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthTestMode.setStatus('mandatory')
fmsEthTdrState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("transceiverProblem", 2), ("openCircuit", 3), ("shortCircuit", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthTdrState.setStatus('mandatory')
fmsEthTdrLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthTdrLoc.setStatus('mandatory')
fmsEthUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 1, 1, 29), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthUpTime.setStatus('mandatory')
fmStatEthInputTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2), )
if mibBuilder.loadTexts: fmStatEthInputTrafficTable.setStatus('mandatory')
fmStatEthInputTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1), ).setIndexNames((0, "PCE-MIB", "fmsEthInLineId"))
if mibBuilder.loadTexts: fmStatEthInputTrafficEntry.setStatus('mandatory')
fmsEthInLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInLineId.setStatus('mandatory')
fmsEthInOctetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInOctetsCounter.setStatus('mandatory')
fmsEthInPktsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInPktsCounter.setStatus('mandatory')
fmsEthInNoErrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInNoErrCounter.setStatus('mandatory')
fmsEthInUcastPktsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInUcastPktsCounter.setStatus('mandatory')
fmsEthInAlignmentErrorsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInAlignmentErrorsCounter.setStatus('mandatory')
fmsEthInFCSErrorsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInFCSErrorsCounter.setStatus('mandatory')
fmsEthInPktsTooLongsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInPktsTooLongsCounter.setStatus('mandatory')
fmsEthInPktsTooShortsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInPktsTooShortsCounter.setStatus('mandatory')
fmsEthInErrOutOfResourcesCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInErrOutOfResourcesCounter.setStatus('mandatory')
fmsEthInErrDmaOverrunCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInErrDmaOverrunCounter.setStatus('mandatory')
fmsEthInErrCollCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInErrCollCounter.setStatus('mandatory')
fmsEthInErrOverFlowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthInErrOverFlowCounter.setStatus('mandatory')
fmStatEthOutputTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3), )
if mibBuilder.loadTexts: fmStatEthOutputTrafficTable.setStatus('mandatory')
fmStatEthOutputTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1), ).setIndexNames((0, "PCE-MIB", "fmsEthOutLineId"))
if mibBuilder.loadTexts: fmStatEthOutputTrafficEntry.setStatus('mandatory')
fmsEthOutLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutLineId.setStatus('mandatory')
fmsEthOutOctetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutOctetsCounter.setStatus('mandatory')
fmsEthOutPktsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutPktsCounter.setStatus('mandatory')
fmsEthOutNoErrCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutNoErrCounter.setStatus('mandatory')
fmsEthOutSingleCollisionFramesCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutSingleCollisionFramesCounter.setStatus('mandatory')
fmsEthOutMultipleCollisionFramesCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutMultipleCollisionFramesCounter.setStatus('mandatory')
fmsEthOutDeferredTransmissionsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutDeferredTransmissionsCounter.setStatus('mandatory')
fmsEthOutSQETestErrorsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutSQETestErrorsCounter.setStatus('mandatory')
fmsEthOutLateCollisionsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutLateCollisionsCounter.setStatus('mandatory')
fmsEthOutExcessiveCollisionsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutExcessiveCollisionsCounter.setStatus('mandatory')
fmsEthOutCarrierSenseErrorsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutCarrierSenseErrorsCounter.setStatus('mandatory')
fmsEthOutErrExcdDelayCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutErrExcdDelayCounter.setStatus('mandatory')
fmsEthOutErrCtsLossCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutErrCtsLossCounter.setStatus('mandatory')
fmsEthOutErrDmaUnderrunCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthOutErrDmaUnderrunCounter.setStatus('mandatory')
fmStatEthManagementTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4), )
if mibBuilder.loadTexts: fmStatEthManagementTable.setStatus('mandatory')
fmStatEthManagementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1), ).setIndexNames((0, "PCE-MIB", "fmsEthManLineId"))
if mibBuilder.loadTexts: fmStatEthManagementEntry.setStatus('mandatory')
fmsEthManLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthManLineId.setStatus('mandatory')
fmsEthManSupervisionOkCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthManSupervisionOkCounter.setStatus('mandatory')
fmsEthManSupervisionNokCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthManSupervisionNokCounter.setStatus('mandatory')
fmsEthManInputResetCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthManInputResetCounter.setStatus('mandatory')
fmsEthManFilterPermitCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthManFilterPermitCounter.setStatus('mandatory')
fmsEthManFilterDenyCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 40, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsEthManFilterDenyCounter.setStatus('mandatory')
fmStatWanConnectionsTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45), )
if mibBuilder.loadTexts: fmStatWanConnectionsTable.setStatus('mandatory')
fmStatWanConnectionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1), ).setIndexNames((0, "PCE-MIB", "fmsWanConnId"))
if mibBuilder.loadTexts: fmStatWanConnectionsEntry.setStatus('mandatory')
fmsWanConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsWanConnId.setStatus('mandatory')
fmsWanConnRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsWanConnRemoteAddr.setStatus('mandatory')
fmsWanConnEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 20))).clone(namedValues=NamedValues(("rilBridge", 9), ("ip", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsWanConnEncapsulation.setStatus('mandatory')
fmsWanConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsWanConnStatus.setStatus('mandatory')
fmsWanConnGrouping = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2))).clone(namedValues=NamedValues(("off", 1), ("multiFrames", 3), ("grouping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsWanConnGrouping.setStatus('mandatory')
fmsWanConnLocalSbNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsWanConnLocalSbNumber.setStatus('mandatory')
fmsWanConnInPktsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsWanConnInPktsCounter.setStatus('mandatory')
fmsWanConnInErrPktsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsWanConnInErrPktsCounter.setStatus('mandatory')
fmsWanConnInOctetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsWanConnInOctetsCounter.setStatus('mandatory')
fmsWanConnOutPktsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsWanConnOutPktsCounter.setStatus('mandatory')
fmsWanConnOutOctetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 45, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsWanConnOutOctetsCounter.setStatus('mandatory')
fmStatRemoteVirtualPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46))
fmStatRvpConnectionsTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1), )
if mibBuilder.loadTexts: fmStatRvpConnectionsTable.setStatus('mandatory')
fmStatRvpConnectionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1), ).setIndexNames((0, "PCE-MIB", "fmsRvpConnRemoteAddr"), (0, "PCE-MIB", "fmsRvpConnEncapsulation"), (0, "PCE-MIB", "fmsRvpConnId"))
if mibBuilder.loadTexts: fmStatRvpConnectionsEntry.setStatus('mandatory')
fmsRvpConnRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsRvpConnRemoteAddr.setStatus('mandatory')
fmsRvpConnEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 10, 11, 20, 30, 31, 40))).clone(namedValues=NamedValues(("multiplexing", 1), ("bridge", 10), ("bridgeSpecific", 11), ("ip", 20), ("ipx", 30), ("ipxSpecific", 31), ("clnp", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsRvpConnEncapsulation.setStatus('mandatory')
fmsRvpConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsRvpConnId.setStatus('mandatory')
fmsRvpConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsRvpConnStatus.setStatus('mandatory')
fmsRvpConnGrouping = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsRvpConnGrouping.setStatus('mandatory')
fmsRvpConnLocalSbNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsRvpConnLocalSbNumber.setStatus('mandatory')
fmsRvpConnInPktsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsRvpConnInPktsCounter.setStatus('mandatory')
fmsRvpConnInErrPktsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsRvpConnInErrPktsCounter.setStatus('mandatory')
fmsRvpConnInOctetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsRvpConnInOctetsCounter.setStatus('mandatory')
fmsRvpConnOutPktsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsRvpConnOutPktsCounter.setStatus('mandatory')
fmsRvpConnOutOctetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 46, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsRvpConnOutOctetsCounter.setStatus('mandatory')
fmStatBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50))
fmsBridgeState = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("transparentBridge", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBridgeState.setStatus('mandatory')
fmStatBrdgTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18))
fmsBrdgTrafInPktsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBrdgTrafInPktsCounter.setStatus('mandatory')
fmsBrdgTrafOutPktsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBrdgTrafOutPktsCounter.setStatus('mandatory')
fmsBrdgTrafOutBroadcastPktsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBrdgTrafOutBroadcastPktsCounter.setStatus('mandatory')
fmsBrdgTrafInServCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBrdgTrafInServCounter.setStatus('mandatory')
fmsBrdgTrafOutServCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBrdgTrafOutServCounter.setStatus('mandatory')
fmsBrdgTrafOutBroadcastServCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 50, 18, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBrdgTrafOutBroadcastServCounter.setStatus('mandatory')
fmStatIpRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51))
fmsIpRouterState = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpRouterState.setStatus('mandatory')
fmStatIpTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18))
fmsIpTrafInReceivesCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpTrafInReceivesCounter.setStatus('mandatory')
fmsIpTrafOutRequestsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpTrafOutRequestsCounter.setStatus('mandatory')
fmsIpTrafInOctetsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpTrafInOctetsCounter.setStatus('mandatory')
fmsIpTrafOutOctetsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpTrafOutOctetsCounter.setStatus('mandatory')
fmsIpTrafInUnknownProtosCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpTrafInUnknownProtosCounter.setStatus('mandatory')
fmsIpTrafNoRoutesCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpTrafNoRoutesCounter.setStatus('mandatory')
fmsIpTrafInHdrErrorsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpTrafInHdrErrorsCounter.setStatus('mandatory')
fmsIpTrafOutForwDatagramsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpTrafOutForwDatagramsCounter.setStatus('mandatory')
fmsIpTrafOutForwDefRouteCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpTrafOutForwDefRouteCounter.setStatus('mandatory')
fmsIpTrafIcmpOutMsgsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpTrafIcmpOutMsgsCounter.setStatus('mandatory')
fmsIpTrafIcmpInMsgsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 18, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpTrafIcmpInMsgsCounter.setStatus('mandatory')
fmStatIpLanTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19))
fmsIpLanIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpLanIpAddr.setStatus('mandatory')
fmsIpLanNetMask = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpLanNetMask.setStatus('mandatory')
fmsIpLanOutRequestsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpLanOutRequestsCounter.setStatus('mandatory')
fmsIpLanInReceivesCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpLanInReceivesCounter.setStatus('mandatory')
fmsIpLanOutOctetsIpCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpLanOutOctetsIpCounter.setStatus('mandatory')
fmsIpLanInOctetsIpCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpLanInOctetsIpCounter.setStatus('mandatory')
fmsIpLanNoRoutesCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpLanNoRoutesCounter.setStatus('mandatory')
fmsIpLanInHdrErrorsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpLanInHdrErrorsCounter.setStatus('mandatory')
fmsIpLanArpFailedCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 19, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpLanArpFailedCounter.setStatus('mandatory')
fmStatIpClusterStateTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25), )
if mibBuilder.loadTexts: fmStatIpClusterStateTable.setStatus('mandatory')
fmStatIpClusterStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1), ).setIndexNames((0, "PCE-MIB", "fmsIpCluVpId"), (0, "PCE-MIB", "fmsIpCluClusterNumber"))
if mibBuilder.loadTexts: fmStatIpClusterStateEntry.setStatus('mandatory')
fmsIpCluVpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpCluVpId.setStatus('mandatory')
fmsIpCluClusterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpCluClusterNumber.setStatus('mandatory')
fmsIpCluVirtualIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpCluVirtualIpAddress.setStatus('mandatory')
fmsIpCluOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("backup", 2), ("master", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpCluOperStatus.setStatus('mandatory')
fmsIpCluAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmsIpCluAdminStatus.setStatus('mandatory')
fmsIpCluLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 51, 25, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsIpCluLastChange.setStatus('mandatory')
fmStatFrameRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60))
fmsFrSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 1))
fmsFrSwDataLinkConnEstablished = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrSwDataLinkConnEstablished.setStatus('mandatory')
fmsFrSwBookingInputThrouhput = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrSwBookingInputThrouhput.setStatus('mandatory')
fmsFrSwOverBookingThrouhput = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrSwOverBookingThrouhput.setStatus('mandatory')
fmsFrLogicalPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2))
fmsFrLpLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1), )
if mibBuilder.loadTexts: fmsFrLpLogPortTable.setStatus('mandatory')
fmsFrLpLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "fmsFrLpLogPortId"))
if mibBuilder.loadTexts: fmsFrLpLogPortEntry.setStatus('mandatory')
fmsFrLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLogPortId.setStatus('mandatory')
fmsFrLpInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frCe", 1), ("frTe", 2), ("frSe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpInterfaceType.setStatus('mandatory')
fmsFrLpNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("e164", 2), ("x121", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpNumPlan.setStatus('mandatory')
fmsFrLpAddrDlciLen = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("twoOctets10Bits", 1), ("threeOctets10Bits", 2), ("threeOctets16Bits", 3), ("fourOctets17Bits", 4), ("fourOctets23Bits", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpAddrDlciLen.setStatus('mandatory')
fmsFrLpVcSigProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("lmi", 2), ("ansiT1617D", 3), ("ansiT1617B", 4), ("itutQ933A", 5), ("itutQ933", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpVcSigProtocol.setStatus('mandatory')
fmsFrLpIncomingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2), )
if mibBuilder.loadTexts: fmsFrLpIncomingTable.setStatus('mandatory')
fmsFrLpIncomingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1), ).setIndexNames((0, "PCE-MIB", "fmsFrLpInLogPortId"))
if mibBuilder.loadTexts: fmsFrLpIncomingEntry.setStatus('mandatory')
fmsFrLpInLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpInLogPortId.setStatus('mandatory')
fmsFrLpInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpInOctets.setStatus('mandatory')
fmsFrLpInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpInFrames.setStatus('mandatory')
fmsFrLpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpInErrors.setStatus('mandatory')
fmsFrLpInFrHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpInFrHeaderErrors.setStatus('mandatory')
fmsFrLpInFecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpInFecnFrames.setStatus('mandatory')
fmsFrLpInBecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpInBecnFrames.setStatus('mandatory')
fmsFrLpInExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpInExcessFrames.setStatus('mandatory')
fmsFrLpInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpInDiscards.setStatus('mandatory')
fmsFrLpOutgoingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3), )
if mibBuilder.loadTexts: fmsFrLpOutgoingTable.setStatus('mandatory')
fmsFrLpOutgoingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1), ).setIndexNames((0, "PCE-MIB", "fmsFrLpOutLogPortId"))
if mibBuilder.loadTexts: fmsFrLpOutgoingEntry.setStatus('mandatory')
fmsFrLpOutLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpOutLogPortId.setStatus('mandatory')
fmsFrLpOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpOutOctets.setStatus('mandatory')
fmsFrLpOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpOutFrames.setStatus('mandatory')
fmsFrLpOutFecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpOutFecnFrames.setStatus('mandatory')
fmsFrLpOutLocalCongFecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpOutLocalCongFecnFrames.setStatus('mandatory')
fmsFrLpOutBecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpOutBecnFrames.setStatus('mandatory')
fmsFrLpOutLocalCongBecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpOutLocalCongBecnFrames.setStatus('mandatory')
fmsFrLpOutLocalCongDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpOutLocalCongDiscards.setStatus('mandatory')
fmsFrLpLmiTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4), )
if mibBuilder.loadTexts: fmsFrLpLmiTable.setStatus('mandatory')
fmsFrLpLmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1), ).setIndexNames((0, "PCE-MIB", "fmsFrLpLmiLogPortId"))
if mibBuilder.loadTexts: fmsFrLpLmiEntry.setStatus('mandatory')
fmsFrLpLmiLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiLogPortId.setStatus('mandatory')
fmsFrLpLmiProced = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("u2nNet", 1), ("bidirect", 2), ("u2nUser", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiProced.setStatus('mandatory')
fmsFrLpLmiUserN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiUserN391.setStatus('mandatory')
fmsFrLpLmiUserN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiUserN392.setStatus('mandatory')
fmsFrLpLmiUserN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiUserN393.setStatus('mandatory')
fmsFrLpLmiUserT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiUserT391.setStatus('mandatory')
fmsFrLpLmiNetN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiNetN392.setStatus('mandatory')
fmsFrLpLmiNetN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiNetN393.setStatus('mandatory')
fmsFrLpLmiNetT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiNetT392.setStatus('mandatory')
fmsFrLpLmiUserLinkRelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiUserLinkRelErrors.setStatus('mandatory')
fmsFrLpLmiUserProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiUserProtErrors.setStatus('mandatory')
fmsFrLpLmiUserChanInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiUserChanInactive.setStatus('mandatory')
fmsFrLpLmiNetLinkRelErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiNetLinkRelErrors.setStatus('mandatory')
fmsFrLpLmiNetProtErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiNetProtErrors.setStatus('mandatory')
fmsFrLpLmiNetChanInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpLmiNetChanInactive.setStatus('mandatory')
fmsFrLpSvcSignallingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5), )
if mibBuilder.loadTexts: fmsFrLpSvcSignallingTable.setStatus('mandatory')
fmsFrLpSvcSignallingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1), ).setIndexNames((0, "PCE-MIB", "fmsFrLpSvcLogPortId"))
if mibBuilder.loadTexts: fmsFrLpSvcSignallingEntry.setStatus('mandatory')
fmsFrLpSvcLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpSvcLogPortId.setStatus('mandatory')
fmsFrLpSvcDlcInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpSvcDlcInitialized.setStatus('mandatory')
fmsFrLpSvcDlcUbr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpSvcDlcUbr.setStatus('mandatory')
fmsFrLpSvcDlcVbr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpSvcDlcVbr.setStatus('mandatory')
fmsFrLpSvcDlcVbrRt = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpSvcDlcVbrRt.setStatus('mandatory')
fmsFrLpSvcBookingVbrThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpSvcBookingVbrThroughput.setStatus('mandatory')
fmsFrLpSvcBookingVbrRtThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpSvcBookingVbrRtThroughput.setStatus('mandatory')
fmsFrLpSvcOverBookingThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpSvcOverBookingThroughput.setStatus('mandatory')
fmsFrLpSvcBookingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 2, 5, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLpSvcBookingRate.setStatus('mandatory')
fmsFrDataLinkConnection = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3))
fmsFrDlcTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1), )
if mibBuilder.loadTexts: fmsFrDlcTable.setStatus('mandatory')
fmsFrDlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1, 1), ).setIndexNames((0, "PCE-MIB", "fmsFrDlcLogPortId"), (0, "PCE-MIB", "fmsFrDlcDlci"))
if mibBuilder.loadTexts: fmsFrDlcEntry.setStatus('mandatory')
fmsFrDlcLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcLogPortId.setStatus('mandatory')
fmsFrDlcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcDlci.setStatus('mandatory')
fmsFrDlcState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcState.setStatus('mandatory')
fmsFrDlcRcvdSigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("deleted", 1), ("active", 2), ("inactive", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcRcvdSigStatus.setStatus('mandatory')
fmsFrDlcCos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ubr", 1), ("vbr", 2), ("vbr-rt", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcCos.setStatus('mandatory')
fmsFrDlcIncomingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2), )
if mibBuilder.loadTexts: fmsFrDlcIncomingTable.setStatus('mandatory')
fmsFrDlcIncomingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1), ).setIndexNames((0, "PCE-MIB", "fmsFrDlcInLogPortId"), (0, "PCE-MIB", "fmsFrDlcInDlci"))
if mibBuilder.loadTexts: fmsFrDlcIncomingEntry.setStatus('mandatory')
fmsFrDlcInLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcInLogPortId.setStatus('mandatory')
fmsFrDlcInDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcInDlci.setStatus('mandatory')
fmsFrDlcInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcInFrames.setStatus('mandatory')
fmsFrDlcInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcInOctets.setStatus('mandatory')
fmsFrDlcInDeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcInDeFrames.setStatus('mandatory')
fmsFrDlcInFecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcInFecnFrames.setStatus('mandatory')
fmsFrDlcInBecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcInBecnFrames.setStatus('mandatory')
fmsFrDlcInExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcInExcessFrames.setStatus('mandatory')
fmsFrDlcInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcInDiscards.setStatus('mandatory')
fmsFrDlcInLostFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcInLostFrames.setStatus('mandatory')
fmsFrDlcInLostSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcInLostSegments.setStatus('mandatory')
fmsFrDlcOutgoingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3), )
if mibBuilder.loadTexts: fmsFrDlcOutgoingTable.setStatus('mandatory')
fmsFrDlcOutgoingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1), ).setIndexNames((0, "PCE-MIB", "fmsFrDlcOutLogPortId"), (0, "PCE-MIB", "fmsFrDlcOutDlci"))
if mibBuilder.loadTexts: fmsFrDlcOutgoingEntry.setStatus('mandatory')
fmsFrDlcOutLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcOutLogPortId.setStatus('mandatory')
fmsFrDlcOutDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcOutDlci.setStatus('mandatory')
fmsFrDlcOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcOutFrames.setStatus('mandatory')
fmsFrDlcOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcOutOctets.setStatus('mandatory')
fmsFrDlcOutFecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcOutFecnFrames.setStatus('mandatory')
fmsFrDlcOutBecnFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcOutBecnFrames.setStatus('mandatory')
fmsFrDlcOutExcessFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcOutExcessFrames.setStatus('mandatory')
fmsFrDlcOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrDlcOutDiscards.setStatus('mandatory')
fmStatFrLineTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20), )
if mibBuilder.loadTexts: fmStatFrLineTable.setStatus('mandatory')
fmStatFrLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20, 1), ).setIndexNames((0, "PCE-MIB", "fmsFrLineId"))
if mibBuilder.loadTexts: fmStatFrLineEntry.setStatus('mandatory')
fmsFrLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLineId.setStatus('mandatory')
fmsFrLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLineStatus.setStatus('mandatory')
fmsFrLineLmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLineLmiStatus.setStatus('mandatory')
fmsFrLineCircuitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLineCircuitCount.setStatus('mandatory')
fmsFrLineActiveCircuitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 20, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrLineActiveCircuitCount.setStatus('mandatory')
fmStatFrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21), )
if mibBuilder.loadTexts: fmStatFrCircuitTable.setStatus('mandatory')
fmStatFrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1), ).setIndexNames((0, "PCE-MIB", "fmsFrCircuitLineId"), (0, "PCE-MIB", "fmsFrCircuitDlci"))
if mibBuilder.loadTexts: fmStatFrCircuitEntry.setStatus('mandatory')
fmsFrCircuitLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrCircuitLineId.setStatus('mandatory')
fmsFrCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrCircuitDlci.setStatus('mandatory')
fmsFrCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrCircuitStatus.setStatus('mandatory')
fmsFrCircuitAge = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("old", 1), ("new", 2), ("indeterminate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrCircuitAge.setStatus('mandatory')
fmsFrCircuitOutOctetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrCircuitOutOctetsCounter.setStatus('mandatory')
fmsFrCircuitInOctetsCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 21, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrCircuitInOctetsCounter.setStatus('mandatory')
fmsFrCommIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30))
fmsFrCommStorageTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1), )
if mibBuilder.loadTexts: fmsFrCommStorageTable.setStatus('mandatory')
fmsFrCommStorageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1), ).setIndexNames((0, "PCE-MIB", "fmsFrcStoragePhysIfId"), (0, "PCE-MIB", "fmsFrcStorageChannelId"), (0, "PCE-MIB", "fmsFrcStorageDlci"), (0, "PCE-MIB", "fmsFrcStorageSubDlci"))
if mibBuilder.loadTexts: fmsFrCommStorageEntry.setStatus('mandatory')
fmsFrcStoragePhysIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStoragePhysIfId.setStatus('mandatory')
fmsFrcStorageChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageChannelId.setStatus('mandatory')
fmsFrcStorageDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageDlci.setStatus('mandatory')
fmsFrcStorageSubDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageSubDlci.setStatus('mandatory')
fmsFrcStorageTypeOfDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("unknown", 1), ("svc", 2), ("pvc", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageTypeOfDlci.setStatus('mandatory')
fmsFrcStorageDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageDirection.setStatus('mandatory')
fmsFrcStorageTypeOfTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(19, 32, 34, 36, 99, 255))).clone(namedValues=NamedValues(("tunnel", 19), ("annexG", 32), ("frsna", 34), ("frt", 36), ("switch", 99), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageTypeOfTransport.setStatus('mandatory')
fmsFrcStoragePvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStoragePvcStatus.setStatus('mandatory')
fmsFrcStorageDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageDestAddr.setStatus('mandatory')
fmsFrcStorageSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageSrcAddr.setStatus('mandatory')
fmsFrcStorageCos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("vbr", 1), ("vbr-rt", 2), ("ubr", 3), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageCos.setStatus('mandatory')
fmsFrcStorageCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageCir.setStatus('mandatory')
fmsFrcStorageMinCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageMinCir.setStatus('mandatory')
fmsFrcStorageBc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageBc.setStatus('mandatory')
fmsFrcStorageBe = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsFrcStorageBe.setStatus('mandatory')
fmsFrCommFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 2))
fmsFrcFilterPhysIfId = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmsFrcFilterPhysIfId.setStatus('mandatory')
fmsFrcFilterChannelId = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmsFrcFilterChannelId.setStatus('mandatory')
fmsFrcFilterDlci = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmsFrcFilterDlci.setStatus('mandatory')
fmsFrcFilterAction = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 60, 30, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setFilter", 1), ("activateFilter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmsFrcFilterAction.setStatus('mandatory')
fmStatPointToPointProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71))
fmStatPppPhysLineTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 1), )
if mibBuilder.loadTexts: fmStatPppPhysLineTable.setStatus('mandatory')
fmStatPppPhysLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 1, 1), ).setIndexNames((0, "PCE-MIB", "fmsPppPhysLineId"))
if mibBuilder.loadTexts: fmStatPppPhysLineEntry.setStatus('mandatory')
fmsPppPhysLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppPhysLineId.setStatus('mandatory')
fmsPppPhysLocalMru = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppPhysLocalMru.setStatus('mandatory')
fmsPppPhysRemoteMru = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppPhysRemoteMru.setStatus('mandatory')
fmsPppPhysMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("notUsed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppPhysMagicNumber.setStatus('mandatory')
fmStatPppProtocolStatusTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2), )
if mibBuilder.loadTexts: fmStatPppProtocolStatusTable.setStatus('mandatory')
fmStatPppProtocolStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1), ).setIndexNames((0, "PCE-MIB", "fmsPppProtoLineId"))
if mibBuilder.loadTexts: fmStatPppProtocolStatusEntry.setStatus('mandatory')
fmsPppProtoLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppProtoLineId.setStatus('mandatory')
fmsPppProtoLcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stop", 1), ("wait", 2), ("opening", 3), ("up", 4), ("down", 5), ("closed", 6), ("freeze", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppProtoLcpStatus.setStatus('mandatory')
fmsPppProtoLcpDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("timeOut", 2), ("underlyingLayerDown", 3), ("protocol", 4), ("rejected", 5), ("authenticationFailure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppProtoLcpDiag.setStatus('mandatory')
fmsPppProtoIpNcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stop", 1), ("wait", 2), ("opening", 3), ("up", 4), ("down", 5), ("closed", 6), ("freeze", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppProtoIpNcpStatus.setStatus('mandatory')
fmsPppProtoIpNcpDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("timeOut", 2), ("underlyingLayerDown", 3), ("protocol", 4), ("rejected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppProtoIpNcpDiag.setStatus('mandatory')
fmsPppProtoBrdgNcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stop", 1), ("wait", 2), ("opening", 3), ("up", 4), ("down", 5), ("closed", 6), ("freeze", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppProtoBrdgNcpStatus.setStatus('mandatory')
fmsPppProtoBrdgNcpDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("timeOut", 2), ("underlyingLayerDown", 3), ("protocol", 4), ("rejected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppProtoBrdgNcpDiag.setStatus('mandatory')
fmsPppProtoIpxNcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stop", 1), ("wait", 2), ("opening", 3), ("up", 4), ("down", 5), ("closed", 6), ("freeze", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppProtoIpxNcpStatus.setStatus('mandatory')
fmsPppProtoIpxNcpDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("timeOut", 2), ("underlyingLayerDown", 3), ("protocol", 4), ("rejected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppProtoIpxNcpDiag.setStatus('mandatory')
fmsPppProtoClnpNcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stop", 1), ("wait", 2), ("opening", 3), ("up", 4), ("down", 5), ("closed", 6), ("freeze", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppProtoClnpNcpStatus.setStatus('mandatory')
fmsPppProtoClnpNcpDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("timeOut", 2), ("underlyingLayerDown", 3), ("protocol", 4), ("rejected", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppProtoClnpNcpDiag.setStatus('mandatory')
fmStatPppAuthenticationTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10), )
if mibBuilder.loadTexts: fmStatPppAuthenticationTable.setStatus('mandatory')
fmStatPppAuthenticationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1), ).setIndexNames((0, "PCE-MIB", "fmsPppAuthLineId"))
if mibBuilder.loadTexts: fmStatPppAuthenticationEntry.setStatus('mandatory')
fmsPppAuthLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppAuthLineId.setStatus('mandatory')
fmsPppAuthMasterAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppAuthMasterAuthentication.setStatus('mandatory')
fmsPppAuthMasterSuccessCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppAuthMasterSuccessCounter.setStatus('mandatory')
fmsPppAuthMasterFailureCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppAuthMasterFailureCounter.setStatus('mandatory')
fmsPppAuthSlaveAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppAuthSlaveAuthentication.setStatus('mandatory')
fmsPppAuthSlaveSuccessCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppAuthSlaveSuccessCounter.setStatus('mandatory')
fmsPppAuthSlaveFailureCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppAuthSlaveFailureCounter.setStatus('mandatory')
fmStatPppIpAddrAssignmentTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 11), )
if mibBuilder.loadTexts: fmStatPppIpAddrAssignmentTable.setStatus('mandatory')
fmStatPppIpAddrAssignmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 11, 1), ).setIndexNames((0, "PCE-MIB", "fmsPppIpAddrLineId"))
if mibBuilder.loadTexts: fmStatPppIpAddrAssignmentEntry.setStatus('mandatory')
fmsPppIpAddrLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppIpAddrLineId.setStatus('mandatory')
fmsPppIpAddrReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 11, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppIpAddrReceived.setStatus('mandatory')
fmsPppIpAddrSent = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 71, 11, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsPppIpAddrSent.setStatus('mandatory')
fmStatE1 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80))
fmStatE1Ds1ChannelNumber = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 1))
fmsE1Ds1ChIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfNumber.setStatus('mandatory')
fmStatE1Ds1ChannelTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2), )
if mibBuilder.loadTexts: fmStatE1Ds1ChannelTable.setStatus('mandatory')
fmStatE1Ds1ChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1), ).setIndexNames((0, "PCE-MIB", "fmsE1Ds1ChIfPhysId"), (0, "PCE-MIB", "fmsE1Ds1ChIfChannelId"))
if mibBuilder.loadTexts: fmStatE1Ds1ChannelEntry.setStatus('mandatory')
fmsE1Ds1ChIfPhysId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfPhysId.setStatus('mandatory')
fmsE1Ds1ChIfChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(42, 131))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfChannelId.setStatus('mandatory')
fmsE1Ds1ChIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 23, 32, 100))).clone(namedValues=NamedValues(("other", 1), ("rfc877-x25", 5), ("ppp", 23), ("frame-relay", 32), ("hdlc-t", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfType.setStatus('mandatory')
fmsE1Ds1ChIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfDescr.setStatus('mandatory')
fmsE1Ds1ChIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfMtu.setStatus('mandatory')
fmsE1Ds1ChIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfSpeed.setStatus('mandatory')
fmsE1Ds1ChIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfPhysAddress.setStatus('mandatory')
fmsE1Ds1ChIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmsE1Ds1ChIfAdminStatus.setStatus('mandatory')
fmsE1Ds1ChIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfOperStatus.setStatus('mandatory')
fmsE1Ds1ChIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfLastChange.setStatus('mandatory')
fmsE1Ds1ChIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfInOctets.setStatus('mandatory')
fmsE1Ds1ChIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfInUcastPkts.setStatus('mandatory')
fmsE1Ds1ChIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfInNUcastPkts.setStatus('mandatory')
fmsE1Ds1ChIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfInDiscards.setStatus('mandatory')
fmsE1Ds1ChIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfInErrors.setStatus('mandatory')
fmsE1Ds1ChIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfInUnknownProtos.setStatus('mandatory')
fmsE1Ds1ChIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfOutOctets.setStatus('mandatory')
fmsE1Ds1ChIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfOutUcastPkts.setStatus('mandatory')
fmsE1Ds1ChIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfOutNUcastPkts.setStatus('mandatory')
fmsE1Ds1ChIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfOutDiscards.setStatus('mandatory')
fmsE1Ds1ChIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfOutErrors.setStatus('mandatory')
fmsE1Ds1ChIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfOutQLen.setStatus('mandatory')
fmsE1Ds1ChIfSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 80, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsE1Ds1ChIfSpecific.setStatus('mandatory')
fmStatS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90))
fmStatS2BChannelTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1), )
if mibBuilder.loadTexts: fmStatS2BChannelTable.setStatus('mandatory')
fmStatS2BChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1), ).setIndexNames((0, "PCE-MIB", "fmsS2BChPhysIfId"), (0, "PCE-MIB", "fmsS2BChChannelId"))
if mibBuilder.loadTexts: fmStatS2BChannelEntry.setStatus('mandatory')
fmsS2BChPhysIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS2BChPhysIfId.setStatus('mandatory')
fmsS2BChChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS2BChChannelId.setStatus('mandatory')
fmsS2BChProto = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 23, 32))).clone(namedValues=NamedValues(("other", 1), ("rfc877-x25", 5), ("ppp", 23), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS2BChProto.setStatus('mandatory')
fmsS2BChIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS2BChIfSpeed.setStatus('mandatory')
fmsS2BChAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmsS2BChAdminStatus.setStatus('mandatory')
fmsS2BChOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS2BChOperStatus.setStatus('mandatory')
fmsS2BChIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS2BChIfLastChange.setStatus('mandatory')
fmsS2BChIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS2BChIfInOctets.setStatus('mandatory')
fmsS2BChIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS2BChIfOutOctets.setStatus('mandatory')
fmsS2BChIfCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS2BChIfCalledAddress.setStatus('mandatory')
fmsS2BChIfCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 90, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS2BChIfCallingAddress.setStatus('mandatory')
fmStatS0 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91))
fmStatS0BChannelTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1), )
if mibBuilder.loadTexts: fmStatS0BChannelTable.setStatus('mandatory')
fmStatS0BChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1), ).setIndexNames((0, "PCE-MIB", "fmsS0BChPhysIfId"), (0, "PCE-MIB", "fmsS0BChChannelId"))
if mibBuilder.loadTexts: fmStatS0BChannelEntry.setStatus('mandatory')
fmsS0BChPhysIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS0BChPhysIfId.setStatus('mandatory')
fmsS0BChChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS0BChChannelId.setStatus('mandatory')
fmsS0BChProto = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 23, 32))).clone(namedValues=NamedValues(("other", 1), ("rfc877-x25", 5), ("ppp", 23), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS0BChProto.setStatus('mandatory')
fmsS0BChIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS0BChIfSpeed.setStatus('mandatory')
fmsS0BChAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmsS0BChAdminStatus.setStatus('mandatory')
fmsS0BChOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS0BChOperStatus.setStatus('mandatory')
fmsS0BChIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS0BChIfLastChange.setStatus('mandatory')
fmsS0BChIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS0BChIfInOctets.setStatus('mandatory')
fmsS0BChIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS0BChIfOutOctets.setStatus('mandatory')
fmsS0BChIfCalledAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS0BChIfCalledAddress.setStatus('mandatory')
fmsS0BChIfCallingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 10, 91, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsS0BChIfCallingAddress.setStatus('mandatory')
fmOsi = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 15))
fmOsiCLNP = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1))
fmOsiCLNPSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 1))
fmOsiForwarding = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiForwarding.setStatus('mandatory')
fmOsiCLNPSysOutPDUs = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiCLNPSysOutPDUs.setStatus('mandatory')
fmOsiCLNPSysInPDUs = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiCLNPSysInPDUs.setStatus('mandatory')
fmOsiCLNPSysErrMemFails = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiCLNPSysErrMemFails.setStatus('mandatory')
fmOsiCLNPCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 5), )
if mibBuilder.loadTexts: fmOsiCLNPCircuitTable.setStatus('mandatory')
fmOsiCLNPCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 5, 1), ).setIndexNames((0, "PCE-MIB", "fmOsiCLNPCircIndex"))
if mibBuilder.loadTexts: fmOsiCLNPCircuitEntry.setStatus('mandatory')
fmOsiCLNPCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiCLNPCircIndex.setStatus('mandatory')
fmOsiCLNPCircOutPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiCLNPCircOutPDUs.setStatus('mandatory')
fmOsiCLNPCircInPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 1, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiCLNPCircInPDUs.setStatus('mandatory')
fmOsiESIS = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5))
fmOsiESISSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 1))
fmOsiESISSysOutPDUs = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiESISSysOutPDUs.setStatus('mandatory')
fmOsiESISSysInPDUs = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiESISSysInPDUs.setStatus('mandatory')
fmOsiESISCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 5), )
if mibBuilder.loadTexts: fmOsiESISCircuitTable.setStatus('mandatory')
fmOsiESISCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 5, 1), ).setIndexNames((0, "PCE-MIB", "fmOsiESISCircIndex"))
if mibBuilder.loadTexts: fmOsiESISCircuitEntry.setStatus('mandatory')
fmOsiESISCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiESISCircIndex.setStatus('mandatory')
fmOsiESISCircOutPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiESISCircOutPDUs.setStatus('mandatory')
fmOsiESISCircInPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 5, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiESISCircInPDUs.setStatus('mandatory')
fmOsiISIS = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10))
fmOsiISISSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1))
fmOsiISISSysOutPdu = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysOutPdu.setStatus('mandatory')
fmOsiISISSysInPdu = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysInPdu.setStatus('mandatory')
fmOsiISISSysL1State = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("waiting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysL1State.setStatus('mandatory')
fmOsiISISSysCorrLSP = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysCorrLSP.setStatus('mandatory')
fmOsiISISSysL1DbaseOloads = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysL1DbaseOloads.setStatus('mandatory')
fmOsiISISSysttmpToExMaxSaqNums = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysttmpToExMaxSaqNums.setStatus('mandatory')
fmOsiISISSysSeqNumSkips = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysSeqNumSkips.setStatus('mandatory')
fmOsiISISSysOwnLSPPurges = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysOwnLSPPurges.setStatus('mandatory')
fmOsiISISSysISFieldLenMismatches = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysISFieldLenMismatches.setStatus('mandatory')
fmOsiISISSysMaxAreaAddrMismatches = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysMaxAreaAddrMismatches.setStatus('mandatory')
fmOsiISISSysL2State = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("waiting", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysL2State.setStatus('mandatory')
fmOsiISISSysLSPL2DbaseOloads = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysLSPL2DbaseOloads.setStatus('mandatory')
fmOsiISISSysAuthFails = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISSysAuthFails.setStatus('mandatory')
fmOsiISISLogAdjcencyStateChanges = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 1, 58), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmOsiISISLogAdjcencyStateChanges.setStatus('mandatory')
fmOsiISISCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5), )
if mibBuilder.loadTexts: fmOsiISISCircuitTable.setStatus('mandatory')
fmOsiISISCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1), ).setIndexNames((0, "PCE-MIB", "fmOsiISISCircIndex"))
if mibBuilder.loadTexts: fmOsiISISCircuitEntry.setStatus('mandatory')
fmOsiISISCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircIndex.setStatus('mandatory')
fmOsiISISCircOutPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircOutPdu.setStatus('mandatory')
fmOsiISISCircInPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircInPdu.setStatus('mandatory')
fmOsiISISCircAdjChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircAdjChanges.setStatus('mandatory')
fmOsiISISCircInitFails = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircInitFails.setStatus('mandatory')
fmOsiISISCircRejAdjs = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircRejAdjs.setStatus('mandatory')
fmOsiISISCircOutCtrlPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircOutCtrlPdu.setStatus('mandatory')
fmOsiISISCircInCrtlPdu = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircInCrtlPdu.setStatus('mandatory')
fmOsiISISCircIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircIDFieldLenMismatches.setStatus('mandatory')
fmOsiISISCircMaxAreaAddrMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircMaxAreaAddrMismatches.setStatus('mandatory')
fmOsiISISCircL1DesIS = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircL1DesIS.setStatus('mandatory')
fmOsiISISCircLANL1DesISChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircLANL1DesISChanges.setStatus('mandatory')
fmOsiISISCircL2DesIS = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircL2DesIS.setStatus('mandatory')
fmOsiISISCircLANL2DesISChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircLANL2DesISChanges.setStatus('mandatory')
fmOsiISISCircAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 5, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISCircAuthFails.setStatus('mandatory')
fmOsiISISAreaTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 10), )
if mibBuilder.loadTexts: fmOsiISISAreaTable.setStatus('mandatory')
fmOsiISISAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 10, 1), ).setIndexNames((0, "PCE-MIB", "fmOsiISISAreaAddress"))
if mibBuilder.loadTexts: fmOsiISISAreaEntry.setStatus('mandatory')
fmOsiISISAreaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISAreaAddress.setStatus('mandatory')
fmOsiISISISAdjacencyTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15), )
if mibBuilder.loadTexts: fmOsiISISISAdjacencyTable.setStatus('mandatory')
fmOsiISISISAdjacencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1), ).setIndexNames((0, "PCE-MIB", "fmOsiISISISAdjCircIndex"), (0, "PCE-MIB", "fmOsiISISISAdjIndex"))
if mibBuilder.loadTexts: fmOsiISISISAdjacencyEntry.setStatus('mandatory')
fmOsiISISISAdjCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISISAdjCircIndex.setStatus('mandatory')
fmOsiISISISAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISISAdjIndex.setStatus('mandatory')
fmOsiISISISAdjSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISISAdjSysID.setStatus('mandatory')
fmOsiISISISAdjState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initializing", 1), ("up", 2), ("failed", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISISAdjState.setStatus('mandatory')
fmOsiISISISAdjSNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISISAdjSNPAAddress.setStatus('mandatory')
fmOsiISISISAdjType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISISAdjType.setStatus('mandatory')
fmOsiISISISAdjUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("level1", 2), ("level2", 3), ("level1and2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISISAdjUsage.setStatus('mandatory')
fmOsiISISISAdjHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISISAdjHoldTimer.setStatus('mandatory')
fmOsiISISISAdjPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 15, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISISAdjPriority.setStatus('mandatory')
fmOsiISISISAdjacencyAreaAddressTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 17), )
if mibBuilder.loadTexts: fmOsiISISISAdjacencyAreaAddressTable.setStatus('mandatory')
fmOsiISISISAdjacencyAreaAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 17, 1), ).setIndexNames((0, "PCE-MIB", "fmOsiISISISAdjAreaAddrCircIndex"), (0, "PCE-MIB", "fmOsiISISISAdjAreaAddrAdjIndex"), (0, "PCE-MIB", "fmOsiISISISAdjAreaAddress"))
if mibBuilder.loadTexts: fmOsiISISISAdjacencyAreaAddressEntry.setStatus('mandatory')
fmOsiISISISAdjAreaAddrCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISISAdjAreaAddrCircIndex.setStatus('mandatory')
fmOsiISISISAdjAreaAddrAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISISAdjAreaAddrAdjIndex.setStatus('mandatory')
fmOsiISISISAdjAreaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISISAdjAreaAddress.setStatus('mandatory')
fmOsiISISESAdjacencyTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20), )
if mibBuilder.loadTexts: fmOsiISISESAdjacencyTable.setStatus('mandatory')
fmOsiISISESAdjacencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1), ).setIndexNames((0, "PCE-MIB", "fmOsiISISESAdjCircIndex"), (0, "PCE-MIB", "fmOsiISISESAdjAdjIndex"))
if mibBuilder.loadTexts: fmOsiISISESAdjacencyEntry.setStatus('mandatory')
fmOsiISISESAdjCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISESAdjCircIndex.setStatus('mandatory')
fmOsiISISESAdjAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISESAdjAdjIndex.setStatus('mandatory')
fmOsiISISESAdjESID = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISESAdjESID.setStatus('mandatory')
fmOsiISISESAdjState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initializing", 1), ("up", 2), ("failed", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISESAdjState.setStatus('mandatory')
fmOsiISISESAdjNeighSNPAAdress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISESAdjNeighSNPAAdress.setStatus('mandatory')
fmOsiISISESAdjType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 20, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISESAdjType.setStatus('mandatory')
fmOsiISISReachableAddressTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25), )
if mibBuilder.loadTexts: fmOsiISISReachableAddressTable.setStatus('mandatory')
fmOsiISISReachableAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1), ).setIndexNames((0, "PCE-MIB", "fmOsiISISRASystemType"), (0, "PCE-MIB", "fmOsiISISRAAddress"), (0, "PCE-MIB", "fmOsiISISRAMetric"), (0, "PCE-MIB", "fmOsiISISRAPathIdentifier"))
if mibBuilder.loadTexts: fmOsiISISReachableAddressEntry.setStatus('mandatory')
fmOsiISISRASystemType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("es", 1), ("l1IS", 2), ("l2IS", 3), ("prefix", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISRASystemType.setStatus('mandatory')
fmOsiISISRAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISRAAddress.setStatus('mandatory')
fmOsiISISRAMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("default", 1), ("delay", 2), ("expense", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISRAMetric.setStatus('mandatory')
fmOsiISISRAPathIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISRAPathIdentifier.setStatus('mandatory')
fmOsiISISRAType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISRAType.setStatus('mandatory')
fmOsiISISRACircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISRACircuitId.setStatus('mandatory')
fmOsiISISRAAdjacencyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISRAAdjacencyId.setStatus('mandatory')
fmOsiISISRAPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISRAPathCost.setStatus('mandatory')
fmOsiISISRASNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 15, 10, 25, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOsiISISRASNPAAddress.setStatus('mandatory')
fmPing = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 16))
fmPingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1), )
if mibBuilder.loadTexts: fmPingTable.setStatus('mandatory')
fmPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1), ).setIndexNames((0, "PCE-MIB", "fmPingIdentifier"))
if mibBuilder.loadTexts: fmPingEntry.setStatus('mandatory')
fmPingIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPingIdentifier.setStatus('mandatory')
fmPingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 14))).clone(namedValues=NamedValues(("ip", 1), ("clnp", 8), ("novell", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPingProtocol.setStatus('mandatory')
fmPingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 46))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPingAddress.setStatus('mandatory')
fmPingCountRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPingCountRequest.setStatus('mandatory')
fmPingPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPingPacketSize.setStatus('mandatory')
fmPingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPingDelay.setStatus('mandatory')
fmPingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPingTimeout.setStatus('mandatory')
fmPingPermanent = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPingPermanent.setStatus('mandatory')
fmPingSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmPingSentPackets.setStatus('mandatory')
fmPingReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmPingReceivedPackets.setStatus('mandatory')
fmPingMinRoundTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmPingMinRoundTrip.setStatus('mandatory')
fmPingAvgRoundTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmPingAvgRoundTrip.setStatus('mandatory')
fmPingMaxRoundTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmPingMaxRoundTrip.setStatus('mandatory')
fmPingCompletedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmPingCompletedFlag.setStatus('mandatory')
fmPingOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 75))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPingOwner.setStatus('mandatory')
fmPingAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 16, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6), ("stop", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fmPingAdminState.setStatus('mandatory')
fmRip2 = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 17))
fmRip2GlobalGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 1))
fmRip2GlobalRouteChanges = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2GlobalRouteChanges.setStatus('mandatory')
fmRip2GlobalQueries = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2GlobalQueries.setStatus('mandatory')
fmRip2IfStatTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2), )
if mibBuilder.loadTexts: fmRip2IfStatTable.setStatus('mandatory')
fmRip2IfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2, 1), ).setIndexNames((0, "PCE-MIB", "fmRip2IfStatAddress"))
if mibBuilder.loadTexts: fmRip2IfStatEntry.setStatus('mandatory')
fmRip2IfStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfStatAddress.setStatus('mandatory')
fmRip2IfStatRcvBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfStatRcvBadPackets.setStatus('mandatory')
fmRip2IfStatRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfStatRcvBadRoutes.setStatus('mandatory')
fmRip2IfStatSentUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfStatSentUpdates.setStatus('mandatory')
fmRip2IfStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfStatStatus.setStatus('mandatory')
fmRip2IfConfTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3), )
if mibBuilder.loadTexts: fmRip2IfConfTable.setStatus('mandatory')
fmRip2IfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1), ).setIndexNames((0, "PCE-MIB", "fmRip2IfConfAddress"))
if mibBuilder.loadTexts: fmRip2IfConfEntry.setStatus('mandatory')
fmRip2IfConfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfConfAddress.setStatus('mandatory')
fmRip2IfConfDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfConfDomain.setStatus('mandatory')
fmRip2IfConfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAuthentication", 1), ("simplePassword", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfConfAuthType.setStatus('mandatory')
fmRip2IfConfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfConfAuthKey.setStatus('mandatory')
fmRip2IfConfSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("doNotSend", 1), ("ripVersion1", 2), ("rip1Compatible", 3), ("ripVersion2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfConfSend.setStatus('mandatory')
fmRip2IfConfReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rip1", 1), ("rip2", 2), ("rip1OrRip2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfConfReceive.setStatus('mandatory')
fmRip2IfConfDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfConfDefaultMetric.setStatus('mandatory')
fmRip2IfConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2IfConfStatus.setStatus('mandatory')
fmRip2PeerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4), )
if mibBuilder.loadTexts: fmRip2PeerTable.setStatus('mandatory')
fmRip2PeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1), ).setIndexNames((0, "PCE-MIB", "fmRip2PeerAddress"), (0, "PCE-MIB", "fmRip2PeerDomain"))
if mibBuilder.loadTexts: fmRip2PeerEntry.setStatus('mandatory')
fmRip2PeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2PeerAddress.setStatus('mandatory')
fmRip2PeerDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2PeerDomain.setStatus('mandatory')
fmRip2PeerLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2PeerLastUpdate.setStatus('mandatory')
fmRip2PeerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2PeerVersion.setStatus('mandatory')
fmRip2PeerRcvBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2PeerRcvBadPackets.setStatus('mandatory')
fmRip2PeerRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 17, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmRip2PeerRcvBadRoutes.setStatus('mandatory')
fmOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 18))
fmOspfStandard = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1))
fmOspfStandardGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1))
fmOspfStandardRouterId = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardRouterId.setStatus('mandatory')
fmOspfStandardAdminStat = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardAdminStat.setStatus('mandatory')
fmOspfStandardVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVersionNumber.setStatus('mandatory')
fmOspfStandardAreaBdrRtrStatus = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardAreaBdrRtrStatus.setStatus('mandatory')
fmOspfStandardASBdrRtrStatus = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardASBdrRtrStatus.setStatus('mandatory')
fmOspfStandardExternLSACount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardExternLSACount.setStatus('mandatory')
fmOspfStandardExternLSACksumSum = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardExternLSACksumSum.setStatus('mandatory')
fmOspfStandardTOSSupport = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardTOSSupport.setStatus('mandatory')
fmOspfStandardOriginateNewLSAs = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardOriginateNewLSAs.setStatus('mandatory')
fmOspfStandardRxNewLSAs = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardRxNewLSAs.setStatus('mandatory')
fmOspfStandardAreaTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2), )
if mibBuilder.loadTexts: fmOspfStandardAreaTable.setStatus('mandatory')
fmOspfStandardAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1), ).setIndexNames((0, "PCE-MIB", "fmOspfStandardAreaId"))
if mibBuilder.loadTexts: fmOspfStandardAreaEntry.setStatus('mandatory')
fmOspfStandardAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardAreaId.setStatus('mandatory')
fmOspfStandardAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardAuthType.setStatus('mandatory')
fmOspfStandardImportASExtern = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardImportASExtern.setStatus('mandatory')
fmOspfStandardSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardSpfRuns.setStatus('mandatory')
fmOspfStandardAreaBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardAreaBdrRtrCount.setStatus('mandatory')
fmOspfStandardASBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardASBdrRtrCount.setStatus('mandatory')
fmOspfStandardAreaLSACount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardAreaLSACount.setStatus('mandatory')
fmOspfStandardAreaLSACksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardAreaLSACksumSum.setStatus('mandatory')
fmOspfStandardStubAreaTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 3), )
if mibBuilder.loadTexts: fmOspfStandardStubAreaTable.setStatus('mandatory')
fmOspfStandardStubAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 3, 1), ).setIndexNames((0, "PCE-MIB", "fmOspfStandardStubAreaID"), (0, "PCE-MIB", "fmOspfStandardStubTOS"))
if mibBuilder.loadTexts: fmOspfStandardStubAreaEntry.setStatus('mandatory')
fmOspfStandardStubAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardStubAreaID.setStatus('mandatory')
fmOspfStandardStubTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardStubTOS.setStatus('mandatory')
fmOspfStandardStubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardStubMetric.setStatus('mandatory')
fmOspfStandardStubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardStubStatus.setStatus('mandatory')
fmOspfStandardLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4), )
if mibBuilder.loadTexts: fmOspfStandardLsdbTable.setStatus('mandatory')
fmOspfStandardLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1), ).setIndexNames((0, "PCE-MIB", "fmOspfStandardLsdbAreaId"), (0, "PCE-MIB", "fmOspfStandardLsdbType"))
if mibBuilder.loadTexts: fmOspfStandardLsdbEntry.setStatus('mandatory')
fmOspfStandardLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardLsdbAreaId.setStatus('mandatory')
fmOspfStandardLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardLsdbType.setStatus('mandatory')
fmOspfStandardLsdbLSID = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardLsdbLSID.setStatus('mandatory')
fmOspfStandardLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardLsdbRouterId.setStatus('mandatory')
fmOspfStandardLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardLsdbSequence.setStatus('mandatory')
fmOspfStandardLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardLsdbAge.setStatus('mandatory')
fmOspfStandardLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardLsdbChecksum.setStatus('mandatory')
fmOspfStandardLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardLsdbAdvertisement.setStatus('mandatory')
fmOspfStandardAreaRangeTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 5), )
if mibBuilder.loadTexts: fmOspfStandardAreaRangeTable.setStatus('mandatory')
fmOspfStandardAreaRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 5, 1), ).setIndexNames((0, "PCE-MIB", "fmOspfStandardAreaRangeAreaID"), (0, "PCE-MIB", "fmOspfStandardAreaRangeNet"))
if mibBuilder.loadTexts: fmOspfStandardAreaRangeEntry.setStatus('mandatory')
fmOspfStandardAreaRangeAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardAreaRangeAreaID.setStatus('mandatory')
fmOspfStandardAreaRangeNet = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardAreaRangeNet.setStatus('mandatory')
fmOspfStandardAreaRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardAreaRangeMask.setStatus('mandatory')
fmOspfStandardAreaRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardAreaRangeStatus.setStatus('mandatory')
fmOspfStandardHostTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 6), )
if mibBuilder.loadTexts: fmOspfStandardHostTable.setStatus('mandatory')
fmOspfStandardHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 6, 1), ).setIndexNames((0, "PCE-MIB", "fmOspfStandardHostIpAddress"), (0, "PCE-MIB", "fmOspfStandardHostTOS"))
if mibBuilder.loadTexts: fmOspfStandardHostEntry.setStatus('mandatory')
fmOspfStandardHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardHostIpAddress.setStatus('mandatory')
fmOspfStandardHostTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardHostTOS.setStatus('mandatory')
fmOspfStandardHostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardHostMetric.setStatus('mandatory')
fmOspfStandardHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardHostStatus.setStatus('mandatory')
fmOspfStandardIfTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7), )
if mibBuilder.loadTexts: fmOspfStandardIfTable.setStatus('mandatory')
fmOspfStandardIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1), ).setIndexNames((0, "PCE-MIB", "fmOspfStandardIfIpAddress"), (0, "PCE-MIB", "fmOspfStandardAddressLessIf"))
if mibBuilder.loadTexts: fmOspfStandardIfEntry.setStatus('mandatory')
fmOspfStandardIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfIpAddress.setStatus('mandatory')
fmOspfStandardAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardAddressLessIf.setStatus('mandatory')
fmOspfStandardIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfAreaId.setStatus('mandatory')
fmOspfStandardIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfType.setStatus('mandatory')
fmOspfStandardIfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfAdminStat.setStatus('mandatory')
fmOspfStandardIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfRtrPriority.setStatus('mandatory')
fmOspfStandardIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfTransitDelay.setStatus('mandatory')
fmOspfStandardIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfRetransInterval.setStatus('mandatory')
fmOspfStandardIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfHelloInterval.setStatus('mandatory')
fmOspfStandardIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfRtrDeadInterval.setStatus('mandatory')
fmOspfStandardIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfPollInterval.setStatus('mandatory')
fmOspfStandardIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfState.setStatus('mandatory')
fmOspfStandardIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfDesignatedRouter.setStatus('mandatory')
fmOspfStandardIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 14), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfBackupDesignatedRouter.setStatus('mandatory')
fmOspfStandardIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfEvents.setStatus('mandatory')
fmOspfStandardIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 7, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfAuthKey.setStatus('mandatory')
fmOspfStandardIfMetricTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8), )
if mibBuilder.loadTexts: fmOspfStandardIfMetricTable.setStatus('mandatory')
fmOspfStandardIfMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8, 1), ).setIndexNames((0, "PCE-MIB", "fmOspfStandardIfMetricIpAddress"), (0, "PCE-MIB", "fmOspfStandardIfMetricAddressLessIf"), (0, "PCE-MIB", "fmOspfStandardIfMetricTOS"))
if mibBuilder.loadTexts: fmOspfStandardIfMetricEntry.setStatus('mandatory')
fmOspfStandardIfMetricIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfMetricIpAddress.setStatus('mandatory')
fmOspfStandardIfMetricAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfMetricAddressLessIf.setStatus('mandatory')
fmOspfStandardIfMetricTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfMetricTOS.setStatus('mandatory')
fmOspfStandardIfMetricMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfMetricMetric.setStatus('mandatory')
fmOspfStandardIfMetricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardIfMetricStatus.setStatus('mandatory')
fmOspfStandardVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9), )
if mibBuilder.loadTexts: fmOspfStandardVirtIfTable.setStatus('mandatory')
fmOspfStandardVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1), ).setIndexNames((0, "PCE-MIB", "fmOspfStandardVirtIfAreaID"), (0, "PCE-MIB", "fmOspfStandardVirtIfNeighbor"))
if mibBuilder.loadTexts: fmOspfStandardVirtIfEntry.setStatus('mandatory')
fmOspfStandardVirtIfAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtIfAreaID.setStatus('mandatory')
fmOspfStandardVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtIfNeighbor.setStatus('mandatory')
fmOspfStandardVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtIfTransitDelay.setStatus('mandatory')
fmOspfStandardVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtIfRetransInterval.setStatus('mandatory')
fmOspfStandardVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtIfHelloInterval.setStatus('mandatory')
fmOspfStandardVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtIfRtrDeadInterval.setStatus('mandatory')
fmOspfStandardVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtIfState.setStatus('mandatory')
fmOspfStandardVirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtIfEvents.setStatus('mandatory')
fmOspfStandardVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtIfAuthKey.setStatus('mandatory')
fmOspfStandardVirtIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtIfStatus.setStatus('mandatory')
fmOspfStandardNbrTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10), )
if mibBuilder.loadTexts: fmOspfStandardNbrTable.setStatus('mandatory')
fmOspfStandardNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1), ).setIndexNames((0, "PCE-MIB", "fmOspfStandardNbrIpAddress"), (0, "PCE-MIB", "fmOspfStandardNbrAddressLessIndex"))
if mibBuilder.loadTexts: fmOspfStandardNbrEntry.setStatus('mandatory')
fmOspfStandardNbrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardNbrIpAddress.setStatus('mandatory')
fmOspfStandardNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardNbrAddressLessIndex.setStatus('mandatory')
fmOspfStandardNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardNbrRtrId.setStatus('mandatory')
fmOspfStandardNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardNbrOptions.setStatus('mandatory')
fmOspfStandardNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardNbrPriority.setStatus('mandatory')
fmOspfStandardNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardNbrState.setStatus('mandatory')
fmOspfStandardNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardNbrEvents.setStatus('mandatory')
fmOspfStandardNbrLSRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardNbrLSRetransQLen.setStatus('mandatory')
fmOspfStandardNBMANbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardNBMANbrStatus.setStatus('mandatory')
fmOspfStandardVirtNbrTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11), )
if mibBuilder.loadTexts: fmOspfStandardVirtNbrTable.setStatus('mandatory')
fmOspfStandardVirtNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1), ).setIndexNames((0, "PCE-MIB", "fmOspfStandardVirtNbrArea"), (0, "PCE-MIB", "fmOspfStandardVirtNbrRtrId"))
if mibBuilder.loadTexts: fmOspfStandardVirtNbrEntry.setStatus('mandatory')
fmOspfStandardVirtNbrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtNbrArea.setStatus('mandatory')
fmOspfStandardVirtNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtNbrRtrId.setStatus('mandatory')
fmOspfStandardVirtNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtNbrIpAddr.setStatus('mandatory')
fmOspfStandardVirtNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtNbrOptions.setStatus('mandatory')
fmOspfStandardVirtNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtNbrState.setStatus('mandatory')
fmOspfStandardVirtNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtNbrEvents.setStatus('mandatory')
fmOspfStandardVirtNbrLSRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 18, 1, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmOspfStandardVirtNbrLSRetransQLen.setStatus('mandatory')
fmUsersRights = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 20))
fmuVersionRight = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 1))
fmuVersMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuVersMax.setStatus('mandatory')
fmuLineAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5))
fmuAccessLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessLineNbMax.setStatus('mandatory')
fmuAccessX25PlsLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessX25PlsLineNbMax.setStatus('mandatory')
fmuAccessX25MlpLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessX25MlpLineNbMax.setStatus('mandatory')
fmuAccessAsynLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessAsynLineNbMax.setStatus('mandatory')
fmuAccessVipLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessVipLineNbMax.setStatus('mandatory')
fmuAccessSdlcLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessSdlcLineNbMax.setStatus('mandatory')
fmuAccessBsc3270LineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessBsc3270LineNbMax.setStatus('mandatory')
fmuAccessBsc2780LineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessBsc2780LineNbMax.setStatus('mandatory')
fmuAccessBscTranspLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessBscTranspLineNbMax.setStatus('mandatory')
fmuAccessRnisChannelBNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessRnisChannelBNbMax.setStatus('mandatory')
fmuAccessRnisChannelDNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessRnisChannelDNbMax.setStatus('mandatory')
fmuAccessHdlcTranspLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessHdlcTranspLineNbMax.setStatus('mandatory')
fmuAccessFrSuscribLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessFrSuscribLineNbMax.setStatus('mandatory')
fmuAccessFrPublicNetworkLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessFrPublicNetworkLineNbMax.setStatus('mandatory')
fmuAccessFrseLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessFrseLineNbMax.setStatus('mandatory')
fmuAccessX29ReroutLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessX29ReroutLineNbMax.setStatus('mandatory')
fmuAccessCvfLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessCvfLineNbMax.setStatus('mandatory')
fmuAccessX75LineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessX75LineNbMax.setStatus('mandatory')
fmuAccessPaviLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessPaviLineNbMax.setStatus('mandatory')
fmuAccessX28PlusLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessX28PlusLineNbMax.setStatus('mandatory')
fmuAccessPadLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessPadLineNbMax.setStatus('mandatory')
fmuAccessPppaLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessPppaLineNbMax.setStatus('mandatory')
fmuAccessPppsLineNbMax = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 5, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuAccessPppsLineNbMax.setStatus('mandatory')
fmuFunctionRight = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10))
fmuFunctionRouterAndBridge = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mcx104-64kbs", 1), ("pont", 2), ("routeurIP", 3), ("pontAndRouteurIP", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionRouterAndBridge.setStatus('mandatory')
fmuFunctionMemTypeForMCXType4 = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("flash2Mo-ram2Mo", 1), ("flash4Mo-ram2Mo", 2), ("flash2Mo-ram4Mo", 3), ("flash4Mo-ram4Mo", 4), ("obsolete-object", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionMemTypeForMCXType4.setStatus('mandatory')
fmuFunctionAccessFrProtoco = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionAccessFrProtoco.setStatus('mandatory')
fmuFunctionBridgeAndStp = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionBridgeAndStp.setStatus('mandatory')
fmuFunctionIpRouter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionIpRouter.setStatus('mandatory')
fmuFunctionIpxRouter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionIpxRouter.setStatus('mandatory')
fmuFunctionClnpRouter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionClnpRouter.setStatus('mandatory')
fmuFunctionLz77Compression = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionLz77Compression.setStatus('mandatory')
fmuFunctionLz78Compression = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionLz78Compression.setStatus('mandatory')
fmuFunctionSecurCard = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionSecurCard.setStatus('mandatory')
fmuFunctionLoadStat = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionLoadStat.setStatus('mandatory')
fmuFunctionOverflowResc = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionOverflowResc.setStatus('mandatory')
fmuFunctionPae = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionPae.setStatus('mandatory')
fmuFunctionOnlineFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionOnlineFileTransfer.setStatus('mandatory')
fmuFunctionDPacket = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionDPacket.setStatus('mandatory')
fmuFunctionExploitMibUse = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionExploitMibUse.setStatus('mandatory')
fmuFunctionLlcOnEthernet = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 20, 10, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmuFunctionLlcOnEthernet.setStatus('mandatory')
fmHardwareId = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 25))
fmhTechnicalsFeatures = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1))
fmhTechnicEquipmType = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("lmx506-type1", 1), ("mcx104", 2), ("lmx506-3", 3), ("mcx-type1", 4), ("mcx-type2", 5), ("lmx506-type2", 6), ("mcx300B", 7), ("mcx300H", 8), ("cmd-chd", 9), ("frx-msb2-1", 10), ("frx-msb2-s2", 11), ("vpb", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhTechnicEquipmType.setStatus('mandatory')
fmhTechnicLineNb = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhTechnicLineNb.setStatus('mandatory')
fmhTechnicPromFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("flash-512K", 1), ("flash-768K", 2), ("flash-1M", 3), ("flash-1M256", 4), ("flash-1M512", 5), ("flash-1M768", 6), ("flash-2M", 7), ("flash-2M256", 8), ("flash-2M512", 9), ("flash-2M768", 10), ("flash-3M", 11), ("flash-3M256", 12), ("flash-3M512", 13), ("flash-3M768", 14), ("flash-4M", 15), ("flash-6M", 16), ("flash-8M", 17), ("flash-10M", 18), ("flash-12M", 19), ("flash-14M", 20), ("flash-16M", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhTechnicPromFlashSize.setStatus('mandatory')
fmhTechnicRamSize = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ram-512K", 1), ("ram-1M", 2), ("ram-1M512", 3), ("ram-2M", 4), ("ram-4M", 5), ("ram-8M", 6), ("ram-16M", 7), ("ram-32M", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhTechnicRamSize.setStatus('mandatory')
fmhTechnicEepromSize = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eeprom-32K", 1), ("eeprom-64K", 2), ("eeprom-128K", 3), ("eeprom-256K", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhTechnicEepromSize.setStatus('mandatory')
fmhTechnicTransputerPresence = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notpresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhTechnicTransputerPresence.setStatus('mandatory')
fmhTechnicEthernetPresence = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notpresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhTechnicEthernetPresence.setStatus('mandatory')
fmhTechnicTokenRingPresence = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notpresent", 1), ("present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhTechnicTokenRingPresence.setStatus('mandatory')
fmhTechnicMacAdress = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhTechnicMacAdress.setStatus('mandatory')
fmhEquipmentId = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5))
fmhEqIdReference = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhEqIdReference.setStatus('mandatory')
fmhEqIdSerialNbEncodingType = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bcd", 1), ("hexa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhEqIdSerialNbEncodingType.setStatus('mandatory')
fmhEqIdSerialNb = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhEqIdSerialNb.setStatus('mandatory')
fmhEqIdFactoryReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhEqIdFactoryReleaseDate.setStatus('mandatory')
fmhEqIdFirstFactoryReturnDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhEqIdFirstFactoryReturnDate.setStatus('mandatory')
fmhEqIdSecondFactoryReturnDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhEqIdSecondFactoryReturnDate.setStatus('mandatory')
fmhEqIdThirdFactoryReturnDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhEqIdThirdFactoryReturnDate.setStatus('mandatory')
fmhEqIdFourthFactoryReturnDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhEqIdFourthFactoryReturnDate.setStatus('mandatory')
fmhEqIdFifthFactoryReturnDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 5, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhEqIdFifthFactoryReturnDate.setStatus('mandatory')
fmhE1S2ModuleDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 10))
fmhE1S2ModDescSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhE1S2ModDescSoftwareVersion.setStatus('mandatory')
fmhE1S2ModDescHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 25, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmhE1S2ModDescHardwareVersion.setStatus('mandatory')
fmsInverseArp = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 26))
fmsInArpVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1), )
if mibBuilder.loadTexts: fmsInArpVirtualPortTable.setStatus('mandatory')
fmsInArpVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1), ).setIndexNames((0, "PCE-MIB", "fmsInArpVpConnX121"))
if mibBuilder.loadTexts: fmsInArpVirtualPortEntry.setStatus('mandatory')
fmsInArpVpConnX121 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInArpVpConnX121.setStatus('mandatory')
fmsInArpVpVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInArpVpVirtualPortId.setStatus('mandatory')
fmsInArpVpOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInArpVpOutRequests.setStatus('mandatory')
fmsInArpVpInResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInArpVpInResponses.setStatus('mandatory')
fmsInArpVpInRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInArpVpInRequests.setStatus('mandatory')
fmsInArpVpOutResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInArpVpOutResponses.setStatus('mandatory')
fmsInArpVpInverseArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsuccessful", 1), ("successful", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInArpVpInverseArpStatus.setStatus('mandatory')
fmsInArpVpRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInArpVpRemoteIpAddr.setStatus('mandatory')
fmsInArpVpLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 26, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsInArpVpLocalIpAddr.setStatus('mandatory')
fmsBootP = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 27))
fmsBootPClient = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 1))
fmsBootPClientStatus = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notLaunched", 1), ("inProgress", 2), ("succeed", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBootPClientStatus.setStatus('mandatory')
fmsBootPClientFileName = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBootPClientFileName.setStatus('mandatory')
fmsBootPClientServerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBootPClientServerIpAddr.setStatus('mandatory')
fmsBootPClientGatewayIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBootPClientGatewayIpAddr.setStatus('mandatory')
fmsBootPRelayTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10), )
if mibBuilder.loadTexts: fmsBootPRelayTable.setStatus('mandatory')
fmsBootPRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10, 1), ).setIndexNames((0, "PCE-MIB", "fmsBootPRelayVirtualPortId"))
if mibBuilder.loadTexts: fmsBootPRelayEntry.setStatus('mandatory')
fmsBootPRelayVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBootPRelayVirtualPortId.setStatus('mandatory')
fmsBootPRelayRelayedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBootPRelayRelayedPkts.setStatus('mandatory')
fmsBootPRelayDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBootPRelayDroppedPkts.setStatus('mandatory')
fmsBootPRelayRecRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBootPRelayRecRequests.setStatus('mandatory')
fmsBootPRelayRecReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 10, 27, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmsBootPRelayRecReplies.setStatus('mandatory')
frxStateChange = NotificationType((1, 3, 6, 1, 4, 1, 866) + (0,5)).setObjects(("PCE-MIB", "fmeTrapLineId"), ("PCE-MIB", "fmeTrapFamilyId"), ("PCE-MIB", "fmeTrapEventType"), ("PCE-MIB", "fmeTrapEventData"))
frxNodeStateChange = NotificationType((1, 3, 6, 1, 4, 1, 866) + (0,6)).setObjects(("PCE-MIB", "fmeTrapLineId"), ("PCE-MIB", "fmeTrapFamilyId"), ("PCE-MIB", "fmeTrapEventType"), ("PCE-MIB", "fmeTrapEventData"))
frxLineStateChange = NotificationType((1, 3, 6, 1, 4, 1, 866) + (0,7)).setObjects(("PCE-MIB", "fmeTrapLineId"), ("PCE-MIB", "fmeTrapFamilyId"), ("PCE-MIB", "fmeTrapEventType"), ("PCE-MIB", "fmeTrapEventData"))
frxLoadAndTrafficEvent = NotificationType((1, 3, 6, 1, 4, 1, 866) + (0,8)).setObjects(("PCE-MIB", "fmeTrapLineId"), ("PCE-MIB", "fmeTrapFamilyId"), ("PCE-MIB", "fmeTrapEventType"), ("PCE-MIB", "fmeTrapEventData"))
frxManagementEvent = NotificationType((1, 3, 6, 1, 4, 1, 866) + (0,9)).setObjects(("PCE-MIB", "fmeTrapLineId"), ("PCE-MIB", "fmeTrapFamilyId"), ("PCE-MIB", "fmeTrapEventType"), ("PCE-MIB", "fmeTrapEventData"))
frxServicesStateChange = NotificationType((1, 3, 6, 1, 4, 1, 866) + (0,10)).setObjects(("PCE-MIB", "fmeTrapLineId"), ("PCE-MIB", "fmeTrapFamilyId"), ("PCE-MIB", "fmeTrapEventType"), ("PCE-MIB", "fmeTrapEventData"))
fdPhysicalPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 20, 10))
fdpIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 1))
fdpIdentPhysPortId = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdpIdentPhysPortId.setStatus('mandatory')
fdpIdentPhysPortState = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notConfigured", 1), ("up", 2), ("down", 3), ("loopBack0", 10), ("loopBack3", 11), ("remoteLoopBack2", 12), ("modemManagement", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdpIdentPhysPortState.setStatus('mandatory')
fdpControl = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 2))
fdpCtrlCommand = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdpCtrlCommand.setStatus('mandatory')
fdpCtrlDiagCode = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noError", 1), ("unknownCommand", 2), ("noSuchPhysPortId", 3), ("noSuchPhysPortType", 4), ("badLoopBackType", 5), ("deviceDown", 6), ("physPortIsTheLinkToManager", 7), ("physPortNotMonitored", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdpCtrlDiagCode.setStatus('mandatory')
fdpTest = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3))
fdpTestLoopBackType = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("loopBack0", 1), ("loopBack3", 2), ("remoteLoopBack2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdpTestLoopBackType.setStatus('mandatory')
fdpTestOutputPacketsCount = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdpTestOutputPacketsCount.setStatus('mandatory')
fdpTestMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdpTestMaxDuration.setStatus('mandatory')
fdpTestCommand = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdpTestCommand.setStatus('mandatory')
fdpTestDiagCode = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))).clone(namedValues=NamedValues(("noError", 1), ("unknownCommand", 2), ("noSuchPhysPortId", 3), ("noSuchPhysPortType", 4), ("badLoopBackType", 5), ("deviceDown", 6), ("physPortIsTheLinkToManager", 7), ("physPortNotMonitored", 8), ("testInProgress", 20), ("noTestInProgress", 21), ("testStopped", 22), ("waitingFirstStatusReport", 23), ("atLeastOneInputErrPacket", 24), ("atLeastOneLostPacket", 25), ("atLeastOneFailedOutputPacket", 26), ("noTestIndicator142", 27), ("unavailableTest", 28), ("loopBackBeforeTimeOut", 29), ("loopBackOk", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdpTestDiagCode.setStatus('mandatory')
fdpTestState = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("waitingFirstStatusReport", 2), ("waitingLastStatusReport", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdpTestState.setStatus('mandatory')
fdpTestOutPktsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdpTestOutPktsCounter.setStatus('mandatory')
fdpTestInPktsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdpTestInPktsCounter.setStatus('mandatory')
fdpTestInErrPktsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdpTestInErrPktsCounter.setStatus('mandatory')
fdpTestInErrOctetsCounter = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdpTestInErrOctetsCounter.setStatus('mandatory')
fdpModemManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4))
fdpModCommand = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("open", 2), ("close", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdpModCommand.setStatus('mandatory')
fdpModControlData = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdpModControlData.setStatus('mandatory')
fdpModDiagCode = MibScalar((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("noError", 1), ("unknownCommand", 2), ("noSuchPhysPortId", 3), ("noSuchPhysPortType", 4), ("badLoopBackType", 5), ("deviceDown", 6), ("physPortIsTheLinkToManager", 7), ("physPortNotMonitored", 8), ("openingSequence", 40), ("modemStabilization", 41), ("sequenceOpen", 42), ("noResponseFromModem", 43), ("noSequenceOpen", 44), ("sequenceAlreadyOpen", 45), ("modemData", 46), ("openingSequenceWithoutAtCommand", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdpModDiagCode.setStatus('mandatory')
fdpModResponseTable = MibTable((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 15), )
if mibBuilder.loadTexts: fdpModResponseTable.setStatus('mandatory')
fdpModResponseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 15, 1), ).setIndexNames((0, "PCE-MIB", "fdpModRespEltNum"))
if mibBuilder.loadTexts: fdpModResponseEntry.setStatus('mandatory')
fdpModRespEltNum = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdpModRespEltNum.setStatus('mandatory')
fdpModRespElement = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 20, 20, 10, 4, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdpModRespElement.setStatus('mandatory')
cpcDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 51, 20))
cdPhysicalPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 51, 20, 10))
cdpIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 51, 20, 10, 1))
cdpIdentPhysPortType = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 20, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("synchronous", 2), ("asynchronous", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdpIdentPhysPortType.setStatus('mandatory')
cpcManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 51, 10))
cmEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 51, 10, 5))
cmeEventSynchronize = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("node", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmeEventSynchronize.setStatus('mandatory')
cmeClearVirtualCircuitInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5))
cmeClearX121Address = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeClearX121Address.setStatus('mandatory')
cmeClearCallUserData = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeClearCallUserData.setStatus('mandatory')
cmeClearEvent = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("timeout", 1), ("x25ClearReceived", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeClearEvent.setStatus('mandatory')
cmeClearCause = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeClearCause.setStatus('mandatory')
cmeClearDiag = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeClearDiag.setStatus('mandatory')
cmeClearTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 10, 5, 5, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmeClearTimeStamp.setStatus('mandatory')
cpcFileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 51, 30))
cfFileTransferService = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("softwareIdentification", 1), ("configurationDownloading", 2), ("offLineSoftwareDownloading", 3), ("configurationUploading", 4), ("equipmentReset", 5), ("equipmentHalt", 6), ("hardwareIdentification", 7), ("softwareList", 8), ("onLineSoftwareDownloading", 9), ("onLineSoftwareDownloadingAndReset", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfFileTransferService.setStatus('mandatory')
cfConfigurationFileToDownload = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfConfigurationFileToDownload.setStatus('mandatory')
cfConfigurationFileToUpload = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfConfigurationFileToUpload.setStatus('mandatory')
cfSoftwareFileToDownload = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfSoftwareFileToDownload.setStatus('mandatory')
cfStartUpChoiceAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("withDefaultConfiguration", 1), ("withCopyOfDefaultToOperational", 2), ("withOperationalConfiguration", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfStartUpChoiceAfterReset.setStatus('mandatory')
cfModuleToIdentify = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("module0", 1), ("module1", 2), ("module2", 3), ("calledModule", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfModuleToIdentify.setStatus('mandatory')
cfZoneToIdentify = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manufacturerZone", 1), ("customerZone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfZoneToIdentify.setStatus('mandatory')
cfHardwareIdentificationPassword = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfHardwareIdentificationPassword.setStatus('mandatory')
cfSoftwareListPassword = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cfSoftwareListPassword.setStatus('mandatory')
cfServiceReport = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normalEndOfService", 1), ("abnormalEndOfService", 2), ("sessionOpened", 3), ("sessionCleared", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfServiceReport.setStatus('mandatory')
cfVersion = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfVersion.setStatus('mandatory')
cfRevision = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfRevision.setStatus('mandatory')
cfEdition = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfEdition.setStatus('mandatory')
cfCpuBoardType = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfCpuBoardType.setStatus('mandatory')
cfProductType = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfProductType.setStatus('mandatory')
cfConfigurationVersion = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfConfigurationVersion.setStatus('mandatory')
cfConfigurationRelease = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfConfigurationRelease.setStatus('mandatory')
cfConfigurationEdition = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfConfigurationEdition.setStatus('mandatory')
cfConfigurationDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfConfigurationDate.setStatus('mandatory')
cfUserField = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfUserField.setStatus('mandatory')
cf12NcNumber35 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cf12NcNumber35.setStatus('mandatory')
cf12NcNumber75 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cf12NcNumber75.setStatus('mandatory')
cfField1 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfField1.setStatus('mandatory')
cfField2 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfField2.setStatus('mandatory')
cfField3 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfField3.setStatus('mandatory')
cfField4 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfField4.setStatus('mandatory')
cfFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfFlashSize.setStatus('mandatory')
cfRamSize = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfRamSize.setStatus('mandatory')
cfEepromSize = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfEepromSize.setStatus('mandatory')
cfNumberOfLines = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfNumberOfLines.setStatus('mandatory')
cfTransputerPresence = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfTransputerPresence.setStatus('mandatory')
cfMpbBoardReference255 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfMpbBoardReference255.setStatus('mandatory')
cfMpbBoardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfMpbBoardSerialNumber.setStatus('mandatory')
cfMtbBoardReference255 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfMtbBoardReference255.setStatus('mandatory')
cfMtbBoardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfMtbBoardSerialNumber.setStatus('mandatory')
cfReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfReleaseDate.setStatus('mandatory')
cfFactoryReturnDate1 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfFactoryReturnDate1.setStatus('mandatory')
cfFactoryReturnDate2 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfFactoryReturnDate2.setStatus('mandatory')
cfFactoryReturnDate3 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfFactoryReturnDate3.setStatus('mandatory')
cfFactoryReturnDate4 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfFactoryReturnDate4.setStatus('mandatory')
cfFactoryReturnDate5 = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfFactoryReturnDate5.setStatus('mandatory')
cfSoftwareList = MibScalar((1, 3, 6, 1, 4, 1, 866, 51, 30, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfSoftwareList.setStatus('mandatory')
cpcClearVirtualCircuitEvent = NotificationType((1, 3, 6, 1, 4, 1, 866) + (0,100)).setObjects(("PCE-MIB", "cmeClearX121Address"), ("PCE-MIB", "cmeClearCallUserData"), ("PCE-MIB", "cmeClearEvent"), ("PCE-MIB", "cmeClearCause"), ("PCE-MIB", "cmeClearDiag"))
vcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 1))
vcCtlDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcCtlDate.setStatus('mandatory')
vcCtlHour = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcCtlHour.setStatus('mandatory')
vcCtlConfigCom = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 10))).clone(namedValues=NamedValues(("ready", 1), ("check", 2), ("load", 5), ("save", 6), ("hotReset", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcCtlConfigCom.setStatus('mandatory')
vcCtlConfigLoad = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcCtlConfigLoad.setStatus('mandatory')
vcCtlErrorTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 10), )
if mibBuilder.loadTexts: vcCtlErrorTable.setStatus('mandatory')
vcCtlErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 10, 1), ).setIndexNames((0, "PCE-MIB", "vcCtlErrorIndex"))
if mibBuilder.loadTexts: vcCtlErrorEntry.setStatus('mandatory')
vcCtlErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcCtlErrorIndex.setStatus('mandatory')
vcCtlErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcCtlErrorCode.setStatus('mandatory')
vcCtlErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcCtlErrorMessage.setStatus('mandatory')
vcCtlErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 1, 10, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcCtlErrorTime.setStatus('mandatory')
vcSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 5))
vcSysConfActive = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("s1", 1), ("s2", 2), ("s3", 3), ("s4", 4), ("s5", 5), ("s6", 6), ("s7", 7), ("s8", 8), ("s9", 9), ("w0", 10), ("w1", 11), ("w2", 12), ("w3", 13), ("w4", 14), ("w5", 15), ("w6", 16), ("w7", 17), ("w8", 18), ("w9", 19), ("w0-1", 20), ("w0-2", 21), ("w0-3", 22), ("w0-4", 23), ("w0-5", 24), ("w0-6", 25), ("w0-7", 26), ("w0-8", 27), ("w0-9", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcSysConfActive.setStatus('mandatory')
vcSysConfDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcSysConfDate.setStatus('mandatory')
vcSysConfHour = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 5, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcSysConfHour.setStatus('mandatory')
vcManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 10))
vcmAlrmGenTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 1), )
if mibBuilder.loadTexts: vcmAlrmGenTable.setStatus('mandatory')
vcmAlrmGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 1, 1), ).setIndexNames((0, "PCE-MIB", "vcmAlrmGenFamilyId"), (0, "PCE-MIB", "vcmAlrmGenTyp"))
if mibBuilder.loadTexts: vcmAlrmGenEntry.setStatus('mandatory')
vcmAlrmGenFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmGenFamilyId.setStatus('mandatory')
vcmAlrmGenTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lnkReady208", 1), ("lnkNotReady209", 2), ("fatalError222", 3), ("reboot233", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmGenTyp.setStatus('mandatory')
vcmAlrmGenTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmGenTrapSend.setStatus('mandatory')
vcmAlrmGenDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmGenDisplay.setStatus('mandatory')
vcmAlrmSCTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 2), )
if mibBuilder.loadTexts: vcmAlrmSCTable.setStatus('mandatory')
vcmAlrmSCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 2, 1), ).setIndexNames((0, "PCE-MIB", "vcmAlrmSCFamilyId"), (0, "PCE-MIB", "vcmAlrmSCTyp"))
if mibBuilder.loadTexts: vcmAlrmSCEntry.setStatus('mandatory')
vcmAlrmSCFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmSCFamilyId.setStatus('mandatory')
vcmAlrmSCTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("scReady210", 1), ("scNotReady211", 2), ("frAddrError223", 3), ("dlciError224", 4), ("scNotFree225", 5), ("scDynamic226", 6), ("scReinit227", 7), ("unexpectedFrame230", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmSCTyp.setStatus('mandatory')
vcmAlrmSCTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmSCTrapSend.setStatus('mandatory')
vcmAlrmSCDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmSCDisplay.setStatus('mandatory')
vcmAlrmVCTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 3), )
if mibBuilder.loadTexts: vcmAlrmVCTable.setStatus('mandatory')
vcmAlrmVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 3, 1), ).setIndexNames((0, "PCE-MIB", "vcmAlrmVCFamilyId"), (0, "PCE-MIB", "vcmAlrmVCTyp"))
if mibBuilder.loadTexts: vcmAlrmVCEntry.setStatus('mandatory')
vcmAlrmVCFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmVCFamilyId.setStatus('mandatory')
vcmAlrmVCTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vcReady212", 1), ("vcNotReady213", 2), ("lossOfSync220", 3), ("syncBack221", 4), ("vcRejected231", 5), ("endOfReject232", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmVCTyp.setStatus('mandatory')
vcmAlrmVCTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmVCTrapSend.setStatus('mandatory')
vcmAlrmVCDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmVCDisplay.setStatus('mandatory')
vcmAlrmLMITable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 4), )
if mibBuilder.loadTexts: vcmAlrmLMITable.setStatus('mandatory')
vcmAlrmLMIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 4, 1), ).setIndexNames((0, "PCE-MIB", "vcmAlrmLMIFamilyId"), (0, "PCE-MIB", "vcmAlrmLMITyp"))
if mibBuilder.loadTexts: vcmAlrmLMIEntry.setStatus('mandatory')
vcmAlrmLMIFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmLMIFamilyId.setStatus('mandatory')
vcmAlrmLMITyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dcnxLmi234", 1), ("cnxLmi235", 2), ("lmiDlciNotConf236", 3), ("lmiIntError237", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmLMITyp.setStatus('mandatory')
vcmAlrmLMITrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmLMITrapSend.setStatus('mandatory')
vcmAlrmLMIDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmLMIDisplay.setStatus('mandatory')
vcmAlrmSwTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 5), )
if mibBuilder.loadTexts: vcmAlrmSwTable.setStatus('mandatory')
vcmAlrmSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 5, 1), ).setIndexNames((0, "PCE-MIB", "vcmAlrmSwFamilyId"), (0, "PCE-MIB", "vcmAlrmSwTyp"))
if mibBuilder.loadTexts: vcmAlrmSwEntry.setStatus('mandatory')
vcmAlrmSwFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmSwFamilyId.setStatus('mandatory')
vcmAlrmSwTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("outgoingCall238", 1), ("incomingCall239", 2), ("localDisc240", 3), ("remoteDisc241", 4), ("backup242", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmSwTyp.setStatus('mandatory')
vcmAlrmSwTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmSwTrapSend.setStatus('mandatory')
vcmAlrmSwDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmSwDisplay.setStatus('mandatory')
vcmAlrmCmpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 6), )
if mibBuilder.loadTexts: vcmAlrmCmpTable.setStatus('mandatory')
vcmAlrmCmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 6, 1), ).setIndexNames((0, "PCE-MIB", "vcmAlrmCmpFamilyId"), (0, "PCE-MIB", "vcmAlrmCmpTyp"))
if mibBuilder.loadTexts: vcmAlrmCmpEntry.setStatus('mandatory')
vcmAlrmCmpFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmCmpFamilyId.setStatus('mandatory')
vcmAlrmCmpTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("compOn214", 1), ("compOff215", 2), ("algoCompNotOk228", 3), ("algoCompOk229", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmCmpTyp.setStatus('mandatory')
vcmAlrmCmpTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmCmpTrapSend.setStatus('mandatory')
vcmAlrmCmpDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmCmpDisplay.setStatus('mandatory')
vcmAlrmFaxTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 7), )
if mibBuilder.loadTexts: vcmAlrmFaxTable.setStatus('mandatory')
vcmAlrmFaxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 7, 1), ).setIndexNames((0, "PCE-MIB", "vcmAlrmFaxFamilyId"), (0, "PCE-MIB", "vcmAlrmFaxTyp"))
if mibBuilder.loadTexts: vcmAlrmFaxEntry.setStatus('mandatory')
vcmAlrmFaxFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmFaxFamilyId.setStatus('mandatory')
vcmAlrmFaxTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("faxStart218", 1), ("faxEnd219", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmFaxTyp.setStatus('mandatory')
vcmAlrmFaxTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmFaxTrapSend.setStatus('mandatory')
vcmAlrmFaxDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmFaxDisplay.setStatus('mandatory')
vcmAlrmTftpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 8), )
if mibBuilder.loadTexts: vcmAlrmTftpTable.setStatus('mandatory')
vcmAlrmTftpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 8, 1), ).setIndexNames((0, "PCE-MIB", "vcmAlrmTftpFamilyId"), (0, "PCE-MIB", "vcmAlrmTftpTyp"))
if mibBuilder.loadTexts: vcmAlrmTftpEntry.setStatus('mandatory')
vcmAlrmTftpFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmTftpFamilyId.setStatus('mandatory')
vcmAlrmTftpTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dwnStart243", 1), ("dwnEnd244", 2), ("dwnError245", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmTftpTyp.setStatus('mandatory')
vcmAlrmTftpTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmTftpTrapSend.setStatus('mandatory')
vcmAlrmTftpDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmTftpDisplay.setStatus('mandatory')
vcmAlrmSvcTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 9), )
if mibBuilder.loadTexts: vcmAlrmSvcTable.setStatus('mandatory')
vcmAlrmSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 9, 1), ).setIndexNames((0, "PCE-MIB", "vcmAlrmSvcFamilyId"), (0, "PCE-MIB", "vcmAlrmSvcTyp"))
if mibBuilder.loadTexts: vcmAlrmSvcEntry.setStatus('mandatory')
vcmAlrmSvcFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmSvcFamilyId.setStatus('mandatory')
vcmAlrmSvcTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("svcOutCall246", 1), ("svcInCall247", 2), ("svcLocalConnect248", 3), ("svcLocalDisc249", 4), ("svcRemoteDisc250", 5), ("svcOutFailCall251", 6), ("svcInFailCall252", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcmAlrmSvcTyp.setStatus('mandatory')
vcmAlrmSvcTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmSvcTrapSend.setStatus('mandatory')
vcmAlrmSvcDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 10, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcmAlrmSvcDisplay.setStatus('mandatory')
vcInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 15))
vcfPhysicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 1), )
if mibBuilder.loadTexts: vcfPhysicalPortTable.setStatus('mandatory')
vcfPhysicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 1, 1), ).setIndexNames((0, "PCE-MIB", "vcfPhysPortId"))
if mibBuilder.loadTexts: vcfPhysicalPortEntry.setStatus('mandatory')
vcfPhysPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2), ("frontPannel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcfPhysPortId.setStatus('mandatory')
vcfPhysPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("db15V11", 1), ("db15V28", 2), ("din", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcfPhysPortConnector.setStatus('mandatory')
vcfNumericLines = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5))
vcfNumericLineTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 1), )
if mibBuilder.loadTexts: vcfNumericLineTable.setStatus('mandatory')
vcfNumericLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 1, 1), ).setIndexNames((0, "PCE-MIB", "vcfNumericLineInterfaceId"))
if mibBuilder.loadTexts: vcfNumericLineEntry.setStatus('mandatory')
vcfNumericLineInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2), ("frontPannel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcfNumericLineInterfaceId.setStatus('mandatory')
vcfNumericLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dataLine", 1), ("configurationLine", 2), ("debug", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcfNumericLineType.setStatus('mandatory')
vcfDataLineTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2), )
if mibBuilder.loadTexts: vcfDataLineTable.setStatus('mandatory')
vcfDataLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1), ).setIndexNames((0, "PCE-MIB", "vcfDataLineInterfaceId"))
if mibBuilder.loadTexts: vcfDataLineEntry.setStatus('mandatory')
vcfDataLineInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcfDataLineInterfaceId.setStatus('mandatory')
vcfDataLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("s4800", 1), ("s9600", 2), ("s19200", 3), ("s38400", 4), ("s48000", 5), ("s56000", 6), ("s64000", 7), ("s72000", 8), ("s128000", 9), ("s144000", 10), ("s256000", 11), ("s512000", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcfDataLineRate.setStatus('mandatory')
vcfDataLineRts105 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unused", 1), ("used", 2), ("standard", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcfDataLineRts105.setStatus('mandatory')
vcfDataLineDtr108 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unused", 1), ("used", 2), ("standard", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcfDataLineDtr108.setStatus('mandatory')
vcfDataLineCts106 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unused", 1), ("used", 2), ("standard", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcfDataLineCts106.setStatus('mandatory')
vcfDataLineDsr107 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unused", 1), ("used", 2), ("standard", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcfDataLineDsr107.setStatus('mandatory')
vcfDataLineDcd109 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unused", 1), ("used", 2), ("standard", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcfDataLineDcd109.setStatus('mandatory')
vcfConfLineTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 3), )
if mibBuilder.loadTexts: vcfConfLineTable.setStatus('mandatory')
vcfConfLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 3, 1), ).setIndexNames((0, "PCE-MIB", "vcfConfLineInterfaceId"))
if mibBuilder.loadTexts: vcfConfLineEntry.setStatus('mandatory')
vcfConfLineInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2), ("frontPannel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcfConfLineInterfaceId.setStatus('mandatory')
vcfConfLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 15, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("s4800", 1), ("s9600", 2), ("s19200", 3), ("s38400", 4), ("s48000", 5), ("s56000", 6), ("s64000", 7), ("s72000", 8), ("s128000", 9), ("s144000", 10), ("s256000", 11), ("s512000", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcfConfLineRate.setStatus('mandatory')
vcFrameRelaySw = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 20))
vcFrSwitchingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1), )
if mibBuilder.loadTexts: vcFrSwitchingTable.setStatus('mandatory')
vcFrSwitchingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1), ).setIndexNames((0, "PCE-MIB", "vcFrSwL0Dlci"), (0, "PCE-MIB", "vcFrSwL1Dlci"))
if mibBuilder.loadTexts: vcFrSwitchingEntry.setStatus('mandatory')
vcFrSwL0Dlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcFrSwL0Dlci.setStatus('mandatory')
vcFrSwL1Dlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcFrSwL1Dlci.setStatus('mandatory')
vcFrSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcFrSwStatus.setStatus('mandatory')
vcFrSwL0DlciPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("highPriority", 1), ("lowPriority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcFrSwL0DlciPriority.setStatus('mandatory')
vcFrSwL0MuxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcFrSwL0MuxEnable.setStatus('mandatory')
vcFrSwL0ChanelIdentifierCID = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcFrSwL0ChanelIdentifierCID.setStatus('mandatory')
vcFrSwL1DlciPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("highPriority", 1), ("lowPriority", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcFrSwL1DlciPriority.setStatus('mandatory')
vcFrSwL1MuxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcFrSwL1MuxEnable.setStatus('mandatory')
vcFrSwL1ChanelIdentifierCID = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 20, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcFrSwL1ChanelIdentifierCID.setStatus('mandatory')
vcLogicalPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 25))
vclLogicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 1), )
if mibBuilder.loadTexts: vclLogicalPortTable.setStatus('mandatory')
vclLogicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 1, 1), ).setIndexNames((0, "PCE-MIB", "vclLogPortId"))
if mibBuilder.loadTexts: vclLogicalPortEntry.setStatus('mandatory')
vclLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vclLogPortId.setStatus('mandatory')
vclLogPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclLogPortStatus.setStatus('mandatory')
vclLogPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hdlc", 1), ("frCe", 2), ("frTe", 3), ("frSe", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclLogPortType.setStatus('mandatory')
vclHdlcAccessLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 5))
vclHdlcLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 5, 1), )
if mibBuilder.loadTexts: vclHdlcLogPortTable.setStatus('mandatory')
vclHdlcLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 5, 1, 1), ).setIndexNames((0, "PCE-MIB", "vclHdlcLpLogPortId"))
if mibBuilder.loadTexts: vclHdlcLogPortEntry.setStatus('mandatory')
vclHdlcLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vclHdlcLpLogPortId.setStatus('mandatory')
vclHdlcLpFragmentationLength = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 390))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclHdlcLpFragmentationLength.setStatus('mandatory')
vclHdlcLpRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclHdlcLpRemoteAddress.setStatus('mandatory')
vclFrameRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10))
vclFrCommunicationEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 1))
vclFrCeLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 1, 1), )
if mibBuilder.loadTexts: vclFrCeLogPortTable.setStatus('mandatory')
vclFrCeLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 1, 1, 1), ).setIndexNames((0, "PCE-MIB", "vclFrCeLpLogPortId"))
if mibBuilder.loadTexts: vclFrCeLogPortEntry.setStatus('mandatory')
vclFrCeLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vclFrCeLpLogPortId.setStatus('mandatory')
vclFrCeLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrCeLpInterfaceId.setStatus('mandatory')
vclFrTerminalEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2))
vclFrTeLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2, 1), )
if mibBuilder.loadTexts: vclFrTeLogPortTable.setStatus('mandatory')
vclFrTeLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "vclFrTeLpLogPortId"))
if mibBuilder.loadTexts: vclFrTeLogPortEntry.setStatus('mandatory')
vclFrTeLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vclFrTeLpLogPortId.setStatus('mandatory')
vclFrTeLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrTeLpInterfaceId.setStatus('mandatory')
vclFrTeLpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vclFrTeLpConfigId.setStatus('mandatory')
vclFrTeLpLmi = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("lmiUni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrTeLpLmi.setStatus('mandatory')
vclFrSwitchEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 3))
vclFrSeLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 3, 1), )
if mibBuilder.loadTexts: vclFrSeLogPortTable.setStatus('mandatory')
vclFrSeLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 3, 1, 1), ).setIndexNames((0, "PCE-MIB", "vclFrSeLpLogPortId"))
if mibBuilder.loadTexts: vclFrSeLogPortEntry.setStatus('mandatory')
vclFrSeLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vclFrSeLpLogPortId.setStatus('mandatory')
vclFrSeLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrSeLpInterfaceId.setStatus('mandatory')
vclFrSeLpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vclFrSeLpConfigId.setStatus('mandatory')
vclFrConfigurationTe = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4))
vclFrLmiParameterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1), )
if mibBuilder.loadTexts: vclFrLmiParameterTable.setStatus('mandatory')
vclFrLmiParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1), ).setIndexNames((0, "PCE-MIB", "vclFrLmiParaConfigId"))
if mibBuilder.loadTexts: vclFrLmiParameterEntry.setStatus('mandatory')
vclFrLmiParaConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vclFrLmiParaConfigId.setStatus('mandatory')
vclFrLmiParaDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrLmiParaDlci.setStatus('mandatory')
vclFrLmiParaStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ansiT1-617d", 1), ("itutQ933a", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrLmiParaStandard.setStatus('mandatory')
vclFrLmiParaAccessibilityCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrLmiParaAccessibilityCondition.setStatus('mandatory')
vclFrLmiParaN391FullStatusPollCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrLmiParaN391FullStatusPollCount.setStatus('mandatory')
vclFrLmiParaN392ErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrLmiParaN392ErrorThreshold.setStatus('mandatory')
vclFrLmiParaN393MonitoredEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrLmiParaN393MonitoredEventCount.setStatus('mandatory')
vclFrLmiParaT391LinkIntegPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrLmiParaT391LinkIntegPollTimer.setStatus('mandatory')
vclFrConfigurationSe = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5))
vclFrSeSignallingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1), )
if mibBuilder.loadTexts: vclFrSeSignallingTable.setStatus('mandatory')
vclFrSeSignallingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1), ).setIndexNames((0, "PCE-MIB", "vclFrSeSigConfigId"))
if mibBuilder.loadTexts: vclFrSeSignallingEntry.setStatus('mandatory')
vclFrSeSigConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vclFrSeSigConfigId.setStatus('mandatory')
vclFrSeSigOuputTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 51000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrSeSigOuputTimeout.setStatus('mandatory')
vclFrSeSigSignalOutputWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrSeSigSignalOutputWinSize.setStatus('mandatory')
vclFrSeSigN200RetransMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrSeSigN200RetransMaxCount.setStatus('mandatory')
vclFrSeSigT200RetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrSeSigT200RetransTimer.setStatus('mandatory')
vclFrSeSigT203InactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrSeSigT203InactivityTimer.setStatus('mandatory')
vclFrSeSigT303SetupResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrSeSigT303SetupResponseTimer.setStatus('mandatory')
vclFrSeSigT305DisconnectResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrSeSigT305DisconnectResponseTimer.setStatus('mandatory')
vclFrSeSigT308ReleaseResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrSeSigT308ReleaseResponseTimer.setStatus('mandatory')
vclFrSeSigT310CallProceedingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrSeSigT310CallProceedingTimer.setStatus('mandatory')
vclFrSeSigT316RestartAcknowledgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 25, 10, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vclFrSeSigT316RestartAcknowledgeTimer.setStatus('mandatory')
vcWanSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 30))
vcwEquipParams = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1))
vcwEquipDnicZoAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcwEquipDnicZoAddr.setStatus('mandatory')
vcwEquipVoiceRoutingServicePortAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcwEquipVoiceRoutingServicePortAddr.setStatus('mandatory')
vcwEquipIpVirtualPortAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcwEquipIpVirtualPortAddr.setStatus('mandatory')
vcwEquipRemoteConfPortAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcwEquipRemoteConfPortAddr.setStatus('mandatory')
vcwEquipVoiceVirtualPortAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcwEquipVoiceVirtualPortAddr.setStatus('mandatory')
vcwEquipSVCDisconnectOnCongestion = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcwEquipSVCDisconnectOnCongestion.setStatus('mandatory')
vcwEquipOutLogPort = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcwEquipOutLogPort.setStatus('mandatory')
vcwABPvcLpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 2), )
if mibBuilder.loadTexts: vcwABPvcLpTable.setStatus('mandatory')
vcwABPvcLpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 2, 1), ).setIndexNames((0, "PCE-MIB", "vcwABPvcLpId"))
if mibBuilder.loadTexts: vcwABPvcLpEntry.setStatus('mandatory')
vcwABPvcLpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcwABPvcLpId.setStatus('mandatory')
vcwABPvcLpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcwABPvcLpAddress.setStatus('mandatory')
vcwWanRouteTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 3), )
if mibBuilder.loadTexts: vcwWanRouteTable.setStatus('mandatory')
vcwWanRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 3, 1), ).setIndexNames((0, "PCE-MIB", "vcwWanRouteDnicZoAddress"))
if mibBuilder.loadTexts: vcwWanRouteEntry.setStatus('mandatory')
vcwWanRouteDnicZoAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcwWanRouteDnicZoAddress.setStatus('mandatory')
vcwWanRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcwWanRouteStatus.setStatus('mandatory')
vcwWanRouteLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 30, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcwWanRouteLogPortId.setStatus('mandatory')
vcVirtualPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35))
vcvVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 1), )
if mibBuilder.loadTexts: vcvVirtualPortTable.setStatus('mandatory')
vcvVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 1, 1), ).setIndexNames((0, "PCE-MIB", "vcvVirtualPortId"))
if mibBuilder.loadTexts: vcvVirtualPortEntry.setStatus('mandatory')
vcvVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpVoix", 1), ("vpIp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvVirtualPortId.setStatus('mandatory')
vcvIpVirtualPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5))
vcvIpLocalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1), )
if mibBuilder.loadTexts: vcvIpLocalTable.setStatus('mandatory')
vcvIpLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1), ).setIndexNames((0, "PCE-MIB", "vcvIpLocVirtualPortId"))
if mibBuilder.loadTexts: vcvIpLocalEntry.setStatus('mandatory')
vcvIpLocVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpVoix", 1), ("vpIp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvIpLocVirtualPortId.setStatus('mandatory')
vcvIpLocAddressHost = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvIpLocAddressHost.setStatus('mandatory')
vcvIpLocSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvIpLocSubNetMask.setStatus('mandatory')
vcvIpLocMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 9180))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvIpLocMtu.setStatus('mandatory')
vcvIpLocRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvIpLocRouteNextHop.setStatus('mandatory')
vcvIpLocMinimumRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvIpLocMinimumRecallTimer.setStatus('mandatory')
vcvIpLocSvcClearCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvIpLocSvcClearCallTimer.setStatus('mandatory')
vcvIpLocSvcCallRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvIpLocSvcCallRetryCount.setStatus('mandatory')
vcvSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5))
vcvSnmpGen = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 1))
vcvSnmpGenVirtualPortId = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpVoix", 1), ("vpIp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvSnmpGenVirtualPortId.setStatus('mandatory')
vcvSnmpGenCommunityStringReadOnly = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvSnmpGenCommunityStringReadOnly.setStatus('mandatory')
vcvSnmpGenCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvSnmpGenCommunityStringReadWrite.setStatus('mandatory')
vcvSnmpGenCommunityStringTrap = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvSnmpGenCommunityStringTrap.setStatus('mandatory')
vcvSnmpGenAuthenticationFailureTrap = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvSnmpGenAuthenticationFailureTrap.setStatus('mandatory')
vcvSnmpManagerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2), )
if mibBuilder.loadTexts: vcvSnmpManagerTable.setStatus('mandatory')
vcvSnmpManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2, 1), ).setIndexNames((0, "PCE-MIB", "vcvSnmpManagerIpAddress"))
if mibBuilder.loadTexts: vcvSnmpManagerEntry.setStatus('mandatory')
vcvSnmpManagerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvSnmpManagerIpAddress.setStatus('mandatory')
vcvSnmpManagerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvSnmpManagerStatus.setStatus('mandatory')
vcvSnmpManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvSnmpManagerName.setStatus('mandatory')
vcvSnmpManagerSendTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvSnmpManagerSendTraps.setStatus('mandatory')
vcvSnmpManagerTrapsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvSnmpManagerTrapsUdpPort.setStatus('mandatory')
vcvRemoteConfTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 3), )
if mibBuilder.loadTexts: vcvRemoteConfTable.setStatus('mandatory')
vcvRemoteConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 3, 1), ).setIndexNames((0, "PCE-MIB", "vcvRemoteConfName"))
if mibBuilder.loadTexts: vcvRemoteConfEntry.setStatus('mandatory')
vcvRemoteConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvRemoteConfName.setStatus('mandatory')
vcvRemoteConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvRemoteConfStatus.setStatus('mandatory')
vcvRemoteConfWanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvRemoteConfWanAddress.setStatus('mandatory')
vcvTftpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10), )
if mibBuilder.loadTexts: vcvTftpTable.setStatus('mandatory')
vcvTftpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10, 1), ).setIndexNames((0, "PCE-MIB", "vcvTftpIpAddress"))
if mibBuilder.loadTexts: vcvTftpEntry.setStatus('mandatory')
vcvTftpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvTftpIpAddress.setStatus('mandatory')
vcvTftpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvTftpStatus.setStatus('mandatory')
vcvTftpName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvTftpName.setStatus('mandatory')
vcvTftpRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvTftpRetryTimer.setStatus('mandatory')
vcvTftpInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvTftpInactTimer.setStatus('mandatory')
vcvRemoteNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 15), )
if mibBuilder.loadTexts: vcvRemoteNetToMediaTable.setStatus('mandatory')
vcvRemoteNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 15, 1), ).setIndexNames((0, "PCE-MIB", "vcvRemNetIpAddress"))
if mibBuilder.loadTexts: vcvRemoteNetToMediaEntry.setStatus('mandatory')
vcvRemNetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 15, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvRemNetIpAddress.setStatus('mandatory')
vcvRemNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvRemNetStatus.setStatus('mandatory')
vcvRemNetWanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 15, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvRemNetWanAddress.setStatus('mandatory')
vcvRemNetEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 5, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fripSimple", 1), ("fripRFC", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvRemNetEncapsulation.setStatus('mandatory')
vcvVoiceVirtualPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10))
vcvVoiceGen = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 1))
vcvVoiceVirtualPortId = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpVoix", 1), ("vpIp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceVirtualPortId.setStatus('mandatory')
vcvVoiceTransportTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2), )
if mibBuilder.loadTexts: vcvVoiceTransportTable.setStatus('mandatory')
vcvVoiceTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1), ).setIndexNames((0, "PCE-MIB", "vcvVoiceTransProfileId"))
if mibBuilder.loadTexts: vcvVoiceTransportEntry.setStatus('mandatory')
vcvVoiceTransProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceTransProfileId.setStatus('mandatory')
vcvVoiceTransEncapsulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frf", 1), ("private", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceTransEncapsulationMode.setStatus('mandatory')
vcvVoiceTransMaxPayLoadNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceTransMaxPayLoadNumber.setStatus('mandatory')
vcvVoiceTransCompressionAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("g728", 1), ("celp", 2), ("g729", 3), ("g729A", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceTransCompressionAlgorithm.setStatus('mandatory')
vcvVoiceTransJitterCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceTransJitterCompensation.setStatus('mandatory')
vcvVoiceTransVoicePacketsCombination = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceTransVoicePacketsCombination.setStatus('mandatory')
vcvVoiceTransQosBc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("s9600", 1), ("s14400", 2), ("s19200", 3), ("s32000", 4), ("s38400", 5), ("s48000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceTransQosBc.setStatus('mandatory')
vcvVoiceTransQosBe = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("s9600", 1), ("s14400", 2), ("s19200", 3), ("s32000", 4), ("s38400", 5), ("s48000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceTransQosBe.setStatus('mandatory')
vcvVoiceTransQosCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("s9600", 1), ("s14400", 2), ("s19200", 3), ("s32000", 4), ("s38400", 5), ("s48000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceTransQosCir.setStatus('mandatory')
vcvVoiceSuscriberTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3), )
if mibBuilder.loadTexts: vcvVoiceSuscriberTable.setStatus('mandatory')
vcvVoiceSuscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1), ).setIndexNames((0, "PCE-MIB", "vcvVoiceSuscrOrderNumber"), (0, "PCE-MIB", "vcvVoiceSuscrNumber"))
if mibBuilder.loadTexts: vcvVoiceSuscriberEntry.setStatus('mandatory')
vcvVoiceSuscrOrderNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvVoiceSuscrOrderNumber.setStatus('mandatory')
vcvVoiceSuscrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvVoiceSuscrNumber.setStatus('mandatory')
vcvVoiceSuscrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceSuscrStatus.setStatus('mandatory')
vcvVoiceSuscrTransportNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvVoiceSuscrTransportNetwork.setStatus('mandatory')
vcvVoiceSuscrTransportNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceSuscrTransportNetworkAddress.setStatus('mandatory')
vcvVoiceSuscrTransportProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceSuscrTransportProfileId.setStatus('mandatory')
vcvVoiceSuscrRemovedDigitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceSuscrRemovedDigitNumber.setStatus('mandatory')
vcvVoiceSuscrInsPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceSuscrInsPrefix.setStatus('mandatory')
vcvVoiceSuscrInsSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceSuscrInsSuffix.setStatus('mandatory')
vcvVoiceSwTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4), )
if mibBuilder.loadTexts: vcvVoiceSwTable.setStatus('mandatory')
vcvVoiceSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1), ).setIndexNames((0, "PCE-MIB", "vcvVoiceSwOrderNumber"), (0, "PCE-MIB", "vcvVoiceSwSuscriberNumber"))
if mibBuilder.loadTexts: vcvVoiceSwEntry.setStatus('mandatory')
vcvVoiceSwOrderNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvVoiceSwOrderNumber.setStatus('mandatory')
vcvVoiceSwSuscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvVoiceSwSuscriberNumber.setStatus('mandatory')
vcvVoiceSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceSwStatus.setStatus('mandatory')
vcvVoiceSwLogPortSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceSwLogPortSetId.setStatus('mandatory')
vcvVoiceSwRemovedDigitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceSwRemovedDigitNumber.setStatus('mandatory')
vcvVoiceSwInsPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceSwInsPrefix.setStatus('mandatory')
vcvVoiceSwInsSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceSwInsSuffix.setStatus('mandatory')
vcvDialingReceptTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 5), )
if mibBuilder.loadTexts: vcvDialingReceptTable.setStatus('mandatory')
vcvDialingReceptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 5, 1), ).setIndexNames((0, "PCE-MIB", "vcvDialRxSuscriberNumber"))
if mibBuilder.loadTexts: vcvDialingReceptEntry.setStatus('mandatory')
vcvDialRxSuscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvDialRxSuscriberNumber.setStatus('mandatory')
vcvDialRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvDialRxStatus.setStatus('mandatory')
vcvDialRxNumberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvDialRxNumberLength.setStatus('mandatory')
vcvDialRxEndOfDialingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvDialRxEndOfDialingTimer.setStatus('mandatory')
vcvVoiceLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10))
vcvVoiceLogicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 1), )
if mibBuilder.loadTexts: vcvVoiceLogicalPortTable.setStatus('mandatory')
vcvVoiceLogicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 1, 1), ).setIndexNames((0, "PCE-MIB", "vcvVoiceLogPortId"))
if mibBuilder.loadTexts: vcvVoiceLogicalPortEntry.setStatus('mandatory')
vcvVoiceLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvVoiceLogPortId.setStatus('mandatory')
vcvVoiceLogPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceLogPortStatus.setStatus('mandatory')
vcvVoiceLogPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("emPermanent", 1), ("emSwitched", 2), ("fxx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceLogPortType.setStatus('mandatory')
vcvProfileTone = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5))
vcvToneGenTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 1), )
if mibBuilder.loadTexts: vcvToneGenTable.setStatus('mandatory')
vcvToneGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 1, 1), ).setIndexNames((0, "PCE-MIB", "vcvToneGenProfileId"))
if mibBuilder.loadTexts: vcvToneGenEntry.setStatus('mandatory')
vcvToneGenProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvToneGenProfileId.setStatus('mandatory')
vcvToneGenLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvToneGenLevel.setStatus('mandatory')
vcvToneTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2), )
if mibBuilder.loadTexts: vcvToneTable.setStatus('mandatory')
vcvToneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1), ).setIndexNames((0, "PCE-MIB", "vcvToneProfileId"), (0, "PCE-MIB", "vcvToneType"))
if mibBuilder.loadTexts: vcvToneEntry.setStatus('mandatory')
vcvToneProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvToneProfileId.setStatus('mandatory')
vcvToneType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dialTone", 1), ("trouble", 2), ("congestion", 3), ("busy", 4), ("callBack", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvToneType.setStatus('mandatory')
vcvToneEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvToneEnable.setStatus('mandatory')
vcvToneFreq1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvToneFreq1.setStatus('mandatory')
vcvToneDuration1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvToneDuration1.setStatus('mandatory')
vcvToneFreq2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvToneFreq2.setStatus('mandatory')
vcvToneDuration2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvToneDuration2.setStatus('mandatory')
vcvVoiceLogicalPortEM = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10))
vcvEMPerm = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1))
vcvEMPermTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1, 1), )
if mibBuilder.loadTexts: vcvEMPermTable.setStatus('mandatory')
vcvEMPermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1, 1, 1), ).setIndexNames((0, "PCE-MIB", "vcvEMPermLpId"))
if mibBuilder.loadTexts: vcvEMPermEntry.setStatus('mandatory')
vcvEMPermLpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvEMPermLpId.setStatus('mandatory')
vcvEMPermCommunicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMPermCommunicationMode.setStatus('mandatory')
vcvEMPermRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMPermRemoteNumber.setStatus('mandatory')
vcvEMPermInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v0", 1), ("v1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMPermInterfaceId.setStatus('mandatory')
vcvEMSw = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2))
vcvEMSwTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1), )
if mibBuilder.loadTexts: vcvEMSwTable.setStatus('mandatory')
vcvEMSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "vcvEMSwLpId"))
if mibBuilder.loadTexts: vcvEMSwEntry.setStatus('mandatory')
vcvEMSwLpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvEMSwLpId.setStatus('mandatory')
vcvEMSwLogPortSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMSwLogPortSetId.setStatus('mandatory')
vcvEMSwCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("mixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMSwCallType.setStatus('mandatory')
vcvEMSwRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMSwRemoteNumber.setStatus('mandatory')
vcvEMSwConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvEMSwConfigId.setStatus('mandatory')
vcvEMSwInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v0", 1), ("v1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMSwInterfaceId.setStatus('mandatory')
vcvEMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2), )
if mibBuilder.loadTexts: vcvEMConfigTable.setStatus('mandatory')
vcvEMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1), ).setIndexNames((0, "PCE-MIB", "vcvEMConfId"))
if mibBuilder.loadTexts: vcvEMConfigEntry.setStatus('mandatory')
vcvEMConfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvEMConfId.setStatus('mandatory')
vcvEMConfCallSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nColisee", 1), ("uColisee", 2), ("simm", 3), ("sDelay", 4), ("swink", 5), ("noResp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfCallSignalling.setStatus('mandatory')
vcvEMConfDialingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dec", 1), ("dtmf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfDialingMode.setStatus('mandatory')
vcvEMConfDialingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfDialingTimeOut.setStatus('mandatory')
vcvEMConfSigChannelDiscTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfSigChannelDiscTimeOut.setStatus('mandatory')
vcvEMConfTimeBetweenSuccOutCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfTimeBetweenSuccOutCall.setStatus('mandatory')
vcvEMConfLineInterfacePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfLineInterfacePolarity.setStatus('mandatory')
vcvEMConfMinLineSeizureAckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfMinLineSeizureAckTime.setStatus('mandatory')
vcvEMConfMaxLineSeizureAckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfMaxLineSeizureAckTime.setStatus('mandatory')
vcvEMConfLineSeizureAckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfLineSeizureAckTime.setStatus('mandatory')
vcvEMConfClearToIncCallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfClearToIncCallTime.setStatus('mandatory')
vcvEMConfSeizureAckPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfSeizureAckPulseDuration.setStatus('mandatory')
vcvEMConfMinSeizureAckPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfMinSeizureAckPulseDuration.setStatus('mandatory')
vcvEMConfDialingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds1", 1), ("ds2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfDialingFormat.setStatus('mandatory')
vcvEMConfInterdigitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfInterdigitTime.setStatus('mandatory')
vcvEMConfPauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfPauseTime.setStatus('mandatory')
vcvEMConfDtmfDigitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfDtmfDigitTime.setStatus('mandatory')
vcvEMConfDtmfDigitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfDtmfDigitLevel.setStatus('mandatory')
vcvEMConfDelayBeforeDialing = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfDelayBeforeDialing.setStatus('mandatory')
vcvEMConfDigitReceptionTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfDigitReceptionTimeOut.setStatus('mandatory')
vcvEMConfEndOfDialingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvEMConfEndOfDialingTimer.setStatus('mandatory')
vcvEMConfToneProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 10, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvEMConfToneProfile.setStatus('mandatory')
vcvVoiceLogicalPortFxx = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15))
vcvFxxLpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1), )
if mibBuilder.loadTexts: vcvFxxLpTable.setStatus('mandatory')
vcvFxxLpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1), ).setIndexNames((0, "PCE-MIB", "vcvFxxLpLogPortId"))
if mibBuilder.loadTexts: vcvFxxLpEntry.setStatus('mandatory')
vcvFxxLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvFxxLpLogPortId.setStatus('mandatory')
vcvFxxLpSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxLpSetId.setStatus('mandatory')
vcvFxxLpCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("mixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxLpCallType.setStatus('mandatory')
vcvFxxLpRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxLpRemoteNumber.setStatus('mandatory')
vcvFxxLpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvFxxLpConfigId.setStatus('mandatory')
vcvFxxLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v0", 1), ("v1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxLpInterfaceId.setStatus('mandatory')
vcvFxxConfigTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2), )
if mibBuilder.loadTexts: vcvFxxConfigTable.setStatus('mandatory')
vcvFxxConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1), ).setIndexNames((0, "PCE-MIB", "vcvFxxConfId"))
if mibBuilder.loadTexts: vcvFxxConfigEntry.setStatus('mandatory')
vcvFxxConfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvFxxConfId.setStatus('mandatory')
vcvFxxConfCallSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fxx", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvFxxConfCallSignalling.setStatus('mandatory')
vcvFxxConfDialingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dec", 1), ("dtmf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfDialingMode.setStatus('mandatory')
vcvFxxConfSigChannelDiscTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfSigChannelDiscTimeOut.setStatus('mandatory')
vcvFxxConfTimeBetweenSuccOutCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfTimeBetweenSuccOutCall.setStatus('mandatory')
vcvFxxConfDialingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds1", 1), ("ds2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfDialingFormat.setStatus('mandatory')
vcvFxxConfInterdigitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfInterdigitTime.setStatus('mandatory')
vcvFxxConfPauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfPauseTime.setStatus('mandatory')
vcvFxxConfDtmfDigitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfDtmfDigitTime.setStatus('mandatory')
vcvFxxConfDtmfDigitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfDtmfDigitLevel.setStatus('mandatory')
vcvFxxConfTxRecallSignalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfTxRecallSignalDuration.setStatus('mandatory')
vcvFxxConfDelayBeforeDialing = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfDelayBeforeDialing.setStatus('mandatory')
vcvFxxConfDialingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfDialingTimeOut.setStatus('mandatory')
vcvFxxConfDigitReceptionTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfDigitReceptionTimeOut.setStatus('mandatory')
vcvFxxConfEndOfDialingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfEndOfDialingTimer.setStatus('mandatory')
vcvFxxConfMinRxRecallSignalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxConfMinRxRecallSignalDuration.setStatus('mandatory')
vcvFxxConfToneProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvFxxConfToneProfile.setStatus('mandatory')
vcvFxxConfRingingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvFxxConfRingingProfile.setStatus('mandatory')
vcvFxxRingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3), )
if mibBuilder.loadTexts: vcvFxxRingTable.setStatus('mandatory')
vcvFxxRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3, 1), ).setIndexNames((0, "PCE-MIB", "vcvFxxRingProfile"))
if mibBuilder.loadTexts: vcvFxxRingEntry.setStatus('mandatory')
vcvFxxRingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvFxxRingProfile.setStatus('mandatory')
vcvFxxRingFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxRingFrequency.setStatus('mandatory')
vcvFxxRingTopDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxRingTopDuration.setStatus('mandatory')
vcvFxxRingSilenceDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxRingSilenceDuration.setStatus('mandatory')
vcvFxxRingMaxRingingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 10, 15, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvFxxRingMaxRingingTime.setStatus('mandatory')
vcvAnalogLines = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15))
vcvAnalogLineTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 1), )
if mibBuilder.loadTexts: vcvAnalogLineTable.setStatus('mandatory')
vcvAnalogLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 1, 1), ).setIndexNames((0, "PCE-MIB", "vcvAnalogLineInterfaceId"))
if mibBuilder.loadTexts: vcvAnalogLineEntry.setStatus('mandatory')
vcvAnalogLineInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v0", 1), ("v1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvAnalogLineInterfaceId.setStatus('mandatory')
vcvAnalogLineTypeInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("em", 1), ("fxo", 2), ("fxs", 3), ("ibx", 4), ("ia50Hz", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvAnalogLineTypeInterface.setStatus('mandatory')
vcvAnalogLineVoiceProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvAnalogLineVoiceProfile.setStatus('mandatory')
vcvVoiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5), )
if mibBuilder.loadTexts: vcvVoiceProfileTable.setStatus('mandatory')
vcvVoiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1), ).setIndexNames((0, "PCE-MIB", "vcvVoiceProfId"))
if mibBuilder.loadTexts: vcvVoiceProfileEntry.setStatus('mandatory')
vcvVoiceProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvVoiceProfId.setStatus('mandatory')
vcvVoiceProfTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceProfTransmitLevel.setStatus('mandatory')
vcvVoiceProfReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceProfReceiveLevel.setStatus('mandatory')
vcvVoiceProfSilenceDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("cng", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceProfSilenceDetection.setStatus('mandatory')
vcvVoiceProfSilenceDetectionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceProfSilenceDetectionLevel.setStatus('mandatory')
vcvVoiceProfEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceProfEchoCancellation.setStatus('mandatory')
vcvVoiceProfEchoCancellationLength = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceProfEchoCancellationLength.setStatus('mandatory')
vcvVoiceProfNoiseFramesPeriodicity = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceProfNoiseFramesPeriodicity.setStatus('mandatory')
vcvVoiceProfLoopActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceProfLoopActivation.setStatus('mandatory')
vcvVoiceProfFaxActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceProfFaxActivation.setStatus('mandatory')
vcvVoiceProfMaximumFaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("s9600", 1), ("s4800", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vcvVoiceProfMaximumFaxSpeed.setStatus('mandatory')
vcvVoicePhysicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 10), )
if mibBuilder.loadTexts: vcvVoicePhysicalPortTable.setStatus('mandatory')
vcvVoicePhysicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 10, 1), ).setIndexNames((0, "PCE-MIB", "vcvVoicePhysPortId"))
if mibBuilder.loadTexts: vcvVoicePhysicalPortEntry.setStatus('mandatory')
vcvVoicePhysPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v0", 1), ("v1", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvVoicePhysPortId.setStatus('mandatory')
vcvVoicePhysPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 1, 35, 10, 15, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("em", 1), ("fxofxs", 2), ("fxo", 3), ("fxs", 4), ("ia50", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcvVoicePhysPortConnector.setStatus('mandatory')
dcControl = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 1))
dcCtlDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcCtlDate.setStatus('mandatory')
dcCtlHour = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcCtlHour.setStatus('mandatory')
dcCtlConfigCom = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 10))).clone(namedValues=NamedValues(("ready", 1), ("check", 2), ("load", 5), ("save", 6), ("hotReset", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcCtlConfigCom.setStatus('mandatory')
dcCtlConfigLoad = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcCtlConfigLoad.setStatus('mandatory')
dcCtlErrorTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 10), )
if mibBuilder.loadTexts: dcCtlErrorTable.setStatus('mandatory')
dcCtlErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 10, 1), ).setIndexNames((0, "PCE-MIB", "dcCtlErrorIndex"))
if mibBuilder.loadTexts: dcCtlErrorEntry.setStatus('mandatory')
dcCtlErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCtlErrorIndex.setStatus('mandatory')
dcCtlErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCtlErrorCode.setStatus('mandatory')
dcCtlErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCtlErrorMessage.setStatus('mandatory')
dcCtlErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 1, 10, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCtlErrorTime.setStatus('mandatory')
dcSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 5))
dcSysConfActive = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("s1", 1), ("s2", 2), ("s3", 3), ("s4", 4), ("s5", 5), ("s6", 6), ("s7", 7), ("s8", 8), ("s9", 9), ("w0", 10), ("w1", 11), ("w2", 12), ("w3", 13), ("w4", 14), ("w5", 15), ("w6", 16), ("w7", 17), ("w8", 18), ("w9", 19), ("w0-1", 20), ("w0-2", 21), ("w0-3", 22), ("w0-4", 23), ("w0-5", 24), ("w0-6", 25), ("w0-7", 26), ("w0-8", 27), ("w0-9", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSysConfActive.setStatus('mandatory')
dcSysConfDate = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcSysConfDate.setStatus('mandatory')
dcSysConfHour = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 5, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcSysConfHour.setStatus('mandatory')
dcManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 10))
dcmAlrmGenTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 1), )
if mibBuilder.loadTexts: dcmAlrmGenTable.setStatus('mandatory')
dcmAlrmGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 1, 1), ).setIndexNames((0, "PCE-MIB", "dcmAlrmGenFamilyId"), (0, "PCE-MIB", "dcmAlrmGenTyp"))
if mibBuilder.loadTexts: dcmAlrmGenEntry.setStatus('mandatory')
dcmAlrmGenFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9), ("f09Synchronization", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmGenFamilyId.setStatus('mandatory')
dcmAlrmGenTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lnkReady208", 1), ("lnkNotReady209", 2), ("fatalError222", 3), ("reboot233", 4), ("dspOutofOrder257", 5), ("dspNoResourcesLeft258", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmGenTyp.setStatus('mandatory')
dcmAlrmGenTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmGenTrapSend.setStatus('mandatory')
dcmAlrmGenDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmGenDisplay.setStatus('mandatory')
dcmAlrmSCTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 2), )
if mibBuilder.loadTexts: dcmAlrmSCTable.setStatus('mandatory')
dcmAlrmSCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 2, 1), ).setIndexNames((0, "PCE-MIB", "dcmAlrmSCFamilyId"), (0, "PCE-MIB", "dcmAlrmSCTyp"))
if mibBuilder.loadTexts: dcmAlrmSCEntry.setStatus('mandatory')
dcmAlrmSCFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9), ("f09Synchronization", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmSCFamilyId.setStatus('mandatory')
dcmAlrmSCTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("scReady210", 1), ("scNotReady211", 2), ("frAddrError223", 3), ("dlciError224", 4), ("scNotFree225", 5), ("scDynamic226", 6), ("scReinit227", 7), ("unexpectedFrame230", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmSCTyp.setStatus('mandatory')
dcmAlrmSCTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmSCTrapSend.setStatus('mandatory')
dcmAlrmSCDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmSCDisplay.setStatus('mandatory')
dcmAlrmVCTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 3), )
if mibBuilder.loadTexts: dcmAlrmVCTable.setStatus('mandatory')
dcmAlrmVCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 3, 1), ).setIndexNames((0, "PCE-MIB", "dcmAlrmVCFamilyId"), (0, "PCE-MIB", "dcmAlrmVCTyp"))
if mibBuilder.loadTexts: dcmAlrmVCEntry.setStatus('mandatory')
dcmAlrmVCFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9), ("f09Synchronization", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmVCFamilyId.setStatus('mandatory')
dcmAlrmVCTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vcReady212", 1), ("vcNotReady213", 2), ("lossOfSync220", 3), ("syncBack221", 4), ("vcRejected231", 5), ("endOfReject232", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmVCTyp.setStatus('mandatory')
dcmAlrmVCTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmVCTrapSend.setStatus('mandatory')
dcmAlrmVCDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmVCDisplay.setStatus('mandatory')
dcmAlrmLMITable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 4), )
if mibBuilder.loadTexts: dcmAlrmLMITable.setStatus('mandatory')
dcmAlrmLMIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 4, 1), ).setIndexNames((0, "PCE-MIB", "dcmAlrmLMIFamilyId"), (0, "PCE-MIB", "dcmAlrmLMITyp"))
if mibBuilder.loadTexts: dcmAlrmLMIEntry.setStatus('mandatory')
dcmAlrmLMIFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9), ("f09Synchronization", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmLMIFamilyId.setStatus('mandatory')
dcmAlrmLMITyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dcnxLmi234", 1), ("cnxLmi235", 2), ("lmiDlciNotConf236", 3), ("lmiIntError237", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmLMITyp.setStatus('mandatory')
dcmAlrmLMITrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmLMITrapSend.setStatus('mandatory')
dcmAlrmLMIDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmLMIDisplay.setStatus('mandatory')
dcmAlrmSwTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 5), )
if mibBuilder.loadTexts: dcmAlrmSwTable.setStatus('mandatory')
dcmAlrmSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 5, 1), ).setIndexNames((0, "PCE-MIB", "dcmAlrmSwFamilyId"), (0, "PCE-MIB", "dcmAlrmSwTyp"))
if mibBuilder.loadTexts: dcmAlrmSwEntry.setStatus('mandatory')
dcmAlrmSwFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9), ("f09Synchronization", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmSwFamilyId.setStatus('mandatory')
dcmAlrmSwTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("outgoingCall238", 1), ("incomingCall239", 2), ("localDisc240", 3), ("remoteDisc241", 4), ("backup242", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmSwTyp.setStatus('mandatory')
dcmAlrmSwTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmSwTrapSend.setStatus('mandatory')
dcmAlrmSwDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmSwDisplay.setStatus('mandatory')
dcmAlrmCmpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 6), )
if mibBuilder.loadTexts: dcmAlrmCmpTable.setStatus('mandatory')
dcmAlrmCmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 6, 1), ).setIndexNames((0, "PCE-MIB", "dcmAlrmCmpFamilyId"), (0, "PCE-MIB", "dcmAlrmCmpTyp"))
if mibBuilder.loadTexts: dcmAlrmCmpEntry.setStatus('mandatory')
dcmAlrmCmpFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9), ("f09Synchronization", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmCmpFamilyId.setStatus('mandatory')
dcmAlrmCmpTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("compOn214", 1), ("compOff215", 2), ("algoCompNotOk228", 3), ("algoCompOk229", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmCmpTyp.setStatus('mandatory')
dcmAlrmCmpTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmCmpTrapSend.setStatus('mandatory')
dcmAlrmCmpDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmCmpDisplay.setStatus('mandatory')
dcmAlrmFaxTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 7), )
if mibBuilder.loadTexts: dcmAlrmFaxTable.setStatus('mandatory')
dcmAlrmFaxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 7, 1), ).setIndexNames((0, "PCE-MIB", "dcmAlrmFaxFamilyId"), (0, "PCE-MIB", "dcmAlrmFaxTyp"))
if mibBuilder.loadTexts: dcmAlrmFaxEntry.setStatus('mandatory')
dcmAlrmFaxFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9), ("f09Synchronization", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmFaxFamilyId.setStatus('mandatory')
dcmAlrmFaxTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("faxStart218", 1), ("faxEnd219", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmFaxTyp.setStatus('mandatory')
dcmAlrmFaxTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmFaxTrapSend.setStatus('mandatory')
dcmAlrmFaxDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmFaxDisplay.setStatus('mandatory')
dcmAlrmTftpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 8), )
if mibBuilder.loadTexts: dcmAlrmTftpTable.setStatus('mandatory')
dcmAlrmTftpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 8, 1), ).setIndexNames((0, "PCE-MIB", "dcmAlrmTftpFamilyId"), (0, "PCE-MIB", "dcmAlrmTftpTyp"))
if mibBuilder.loadTexts: dcmAlrmTftpEntry.setStatus('mandatory')
dcmAlrmTftpFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9), ("f09Synchronization", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmTftpFamilyId.setStatus('mandatory')
dcmAlrmTftpTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dwnStart243", 1), ("dwnEnd244", 2), ("dwnError245", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmTftpTyp.setStatus('mandatory')
dcmAlrmTftpTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmTftpTrapSend.setStatus('mandatory')
dcmAlrmTftpDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmTftpDisplay.setStatus('mandatory')
dcmAlrmSvcTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 9), )
if mibBuilder.loadTexts: dcmAlrmSvcTable.setStatus('mandatory')
dcmAlrmSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 9, 1), ).setIndexNames((0, "PCE-MIB", "dcmAlrmSvcFamilyId"), (0, "PCE-MIB", "dcmAlrmSvcTyp"))
if mibBuilder.loadTexts: dcmAlrmSvcEntry.setStatus('mandatory')
dcmAlrmSvcFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9), ("f09Synchronization", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmSvcFamilyId.setStatus('mandatory')
dcmAlrmSvcTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("svcOutCall246", 1), ("svcInCall247", 2), ("svcLocalConnect248", 3), ("svcLocalDisc249", 4), ("svcRemoteDisc250", 5), ("svcOutFailCall251", 6), ("svcInFailCall252", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmSvcTyp.setStatus('mandatory')
dcmAlrmSvcTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmSvcTrapSend.setStatus('mandatory')
dcmAlrmSvcDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmSvcDisplay.setStatus('mandatory')
dcmAlrmSyncTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 10), )
if mibBuilder.loadTexts: dcmAlrmSyncTable.setStatus('mandatory')
dcmAlrmSyncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 10, 1), ).setIndexNames((0, "PCE-MIB", "dcmAlrmSyncFamilyId"), (0, "PCE-MIB", "dcmAlrmSyncTyp"))
if mibBuilder.loadTexts: dcmAlrmSyncEntry.setStatus('mandatory')
dcmAlrmSyncFamilyId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("f00System", 1), ("f01Tftp", 2), ("f02Junction", 3), ("f03Lmi", 4), ("f04Svc", 5), ("f05Compression", 6), ("f06ServiceCanal", 7), ("f07Fax", 8), ("f08Switching", 9), ("f09Synchronization", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmSyncFamilyId.setStatus('mandatory')
dcmAlrmSyncTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tdmUp253", 1), ("tdmDown254", 2), ("vpbSync255", 3), ("vpbOutofSync256", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcmAlrmSyncTyp.setStatus('mandatory')
dcmAlrmSyncTrapSend = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmSyncTrapSend.setStatus('mandatory')
dcmAlrmSyncDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 10, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcmAlrmSyncDisplay.setStatus('mandatory')
dcInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 15))
dcfPhysicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 1), )
if mibBuilder.loadTexts: dcfPhysicalPortTable.setStatus('mandatory')
dcfPhysicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 1, 1), ).setIndexNames((0, "PCE-MIB", "dcfPhysPortId"))
if mibBuilder.loadTexts: dcfPhysicalPortEntry.setStatus('mandatory')
dcfPhysPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2), ("frontPannel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcfPhysPortId.setStatus('mandatory')
dcfPhysPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("db25", 1), ("din", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcfPhysPortConnector.setStatus('mandatory')
dcfNumericLines = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5))
dcfNumericLineTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 1), )
if mibBuilder.loadTexts: dcfNumericLineTable.setStatus('mandatory')
dcfNumericLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 1, 1), ).setIndexNames((0, "PCE-MIB", "dcfNumericLineInterfaceId"))
if mibBuilder.loadTexts: dcfNumericLineEntry.setStatus('mandatory')
dcfNumericLineInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2), ("frontPannel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcfNumericLineInterfaceId.setStatus('mandatory')
dcfNumericLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dataLine", 1), ("configurationLine", 2), ("debug", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcfNumericLineType.setStatus('mandatory')
dcfDataLineTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2), )
if mibBuilder.loadTexts: dcfDataLineTable.setStatus('mandatory')
dcfDataLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1), ).setIndexNames((0, "PCE-MIB", "dcfDataLineInterfaceId"))
if mibBuilder.loadTexts: dcfDataLineEntry.setStatus('mandatory')
dcfDataLineInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcfDataLineInterfaceId.setStatus('mandatory')
dcfDataLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("s4800", 1), ("s9600", 2), ("s19200", 3), ("s38400", 4), ("s48000", 5), ("s56000", 6), ("s64000", 7), ("s72000", 8), ("s128000", 9), ("s144000", 10), ("s256000", 11), ("s512000", 12), ("s1024000", 13), ("s2048000", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcfDataLineRate.setStatus('mandatory')
dcfDataLineRts105 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unused", 1), ("used", 2), ("standard", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcfDataLineRts105.setStatus('mandatory')
dcfDataLineDtr108 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unused", 1), ("used", 2), ("standard", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcfDataLineDtr108.setStatus('mandatory')
dcfDataLineCts106 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unused", 1), ("used", 2), ("standard", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcfDataLineCts106.setStatus('mandatory')
dcfDataLineDsr107 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unused", 1), ("used", 2), ("standard", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcfDataLineDsr107.setStatus('mandatory')
dcfDataLineDcd109 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unused", 1), ("used", 2), ("standard", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcfDataLineDcd109.setStatus('mandatory')
dcfConfLineTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 3), )
if mibBuilder.loadTexts: dcfConfLineTable.setStatus('mandatory')
dcfConfLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 3, 1), ).setIndexNames((0, "PCE-MIB", "dcfConfLineInterfaceId"))
if mibBuilder.loadTexts: dcfConfLineEntry.setStatus('mandatory')
dcfConfLineInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2), ("frontPannel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcfConfLineInterfaceId.setStatus('mandatory')
dcfConfLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 15, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("s4800", 1), ("s9600", 2), ("s19200", 3), ("s38400", 4), ("s48000", 5), ("s56000", 6), ("s64000", 7), ("s72000", 8), ("s128000", 9), ("s144000", 10), ("s256000", 11), ("s512000", 12), ("s1024000", 13), ("s2048000", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcfConfLineRate.setStatus('mandatory')
dcLogicalPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 20))
dclLogicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 1), )
if mibBuilder.loadTexts: dclLogicalPortTable.setStatus('mandatory')
dclLogicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 1, 1), ).setIndexNames((0, "PCE-MIB", "dclLogPortId"))
if mibBuilder.loadTexts: dclLogicalPortEntry.setStatus('mandatory')
dclLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclLogPortId.setStatus('mandatory')
dclLogPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclLogPortStatus.setStatus('mandatory')
dclLogPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frTe", 1), ("frSe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclLogPortType.setStatus('mandatory')
dclFrameRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5))
dclFrTerminalEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1))
dclFrTeLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1, 1), )
if mibBuilder.loadTexts: dclFrTeLogPortTable.setStatus('mandatory')
dclFrTeLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1, 1, 1), ).setIndexNames((0, "PCE-MIB", "dclFrTeLpLogPortId"))
if mibBuilder.loadTexts: dclFrTeLogPortEntry.setStatus('mandatory')
dclFrTeLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFrTeLpLogPortId.setStatus('mandatory')
dclFrTeLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFrTeLpInterfaceId.setStatus('mandatory')
dclFrTeLpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFrTeLpConfigId.setStatus('mandatory')
dclFrTeLpLmi = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("lmiUni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrTeLpLmi.setStatus('mandatory')
dclFrSwitchEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 2))
dclFrSeLogPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 2, 1), )
if mibBuilder.loadTexts: dclFrSeLogPortTable.setStatus('mandatory')
dclFrSeLogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "dclFrSeLpLogPortId"))
if mibBuilder.loadTexts: dclFrSeLogPortEntry.setStatus('mandatory')
dclFrSeLpLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFrSeLpLogPortId.setStatus('mandatory')
dclFrSeLpInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("l0", 1), ("l1", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFrSeLpInterfaceId.setStatus('mandatory')
dclFrSeLpConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFrSeLpConfigId.setStatus('mandatory')
dclFrConfigurationTe = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3))
dclFrLmiParameterTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1), )
if mibBuilder.loadTexts: dclFrLmiParameterTable.setStatus('mandatory')
dclFrLmiParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1), ).setIndexNames((0, "PCE-MIB", "dclFrLmiParaConfigId"))
if mibBuilder.loadTexts: dclFrLmiParameterEntry.setStatus('mandatory')
dclFrLmiParaConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFrLmiParaConfigId.setStatus('mandatory')
dclFrLmiParaDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrLmiParaDlci.setStatus('mandatory')
dclFrLmiParaStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ansiT1-617d", 1), ("itutQ933a", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrLmiParaStandard.setStatus('mandatory')
dclFrLmiParaAccessibilityCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrLmiParaAccessibilityCondition.setStatus('mandatory')
dclFrLmiParaN391FullStatusPollCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrLmiParaN391FullStatusPollCount.setStatus('mandatory')
dclFrLmiParaN392ErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrLmiParaN392ErrorThreshold.setStatus('mandatory')
dclFrLmiParaN393MonitoredEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrLmiParaN393MonitoredEventCount.setStatus('mandatory')
dclFrLmiParaT391LinkIntegPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrLmiParaT391LinkIntegPollTimer.setStatus('mandatory')
dclFrConfigurationSe = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4))
dclFrSeSignallingTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1), )
if mibBuilder.loadTexts: dclFrSeSignallingTable.setStatus('mandatory')
dclFrSeSignallingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1), ).setIndexNames((0, "PCE-MIB", "dclFrSeSigConfigId"))
if mibBuilder.loadTexts: dclFrSeSignallingEntry.setStatus('mandatory')
dclFrSeSigConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dclFrSeSigConfigId.setStatus('mandatory')
dclFrSeSigOuputTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 51000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrSeSigOuputTimeout.setStatus('mandatory')
dclFrSeSigSignalOutputWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrSeSigSignalOutputWinSize.setStatus('mandatory')
dclFrSeSigN200RetransMaxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrSeSigN200RetransMaxCount.setStatus('mandatory')
dclFrSeSigT200RetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 25500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrSeSigT200RetransTimer.setStatus('mandatory')
dclFrSeSigT203InactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrSeSigT203InactivityTimer.setStatus('mandatory')
dclFrSeSigT303SetupResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrSeSigT303SetupResponseTimer.setStatus('mandatory')
dclFrSeSigT305DisconnectResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrSeSigT305DisconnectResponseTimer.setStatus('mandatory')
dclFrSeSigT308ReleaseResponseTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrSeSigT308ReleaseResponseTimer.setStatus('mandatory')
dclFrSeSigT310CallProceedingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrSeSigT310CallProceedingTimer.setStatus('mandatory')
dclFrSeSigT316RestartAcknowledgeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 20, 5, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dclFrSeSigT316RestartAcknowledgeTimer.setStatus('mandatory')
dcWanSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 25))
dcwEquipParams = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1))
dcwEquipDnicZoAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcwEquipDnicZoAddr.setStatus('mandatory')
dcwEquipVoiceRoutingServicePortAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcwEquipVoiceRoutingServicePortAddr.setStatus('mandatory')
dcwEquipIpVirtualPortAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcwEquipIpVirtualPortAddr.setStatus('mandatory')
dcwEquipRemoteConfPortAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcwEquipRemoteConfPortAddr.setStatus('mandatory')
dcwEquipVoiceVirtualPortAddr = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcwEquipVoiceVirtualPortAddr.setStatus('mandatory')
dcwEquipSVCDisconnectOnCongestion = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcwEquipSVCDisconnectOnCongestion.setStatus('mandatory')
dcwABPvcLpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 2), )
if mibBuilder.loadTexts: dcwABPvcLpTable.setStatus('mandatory')
dcwABPvcLpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 2, 1), ).setIndexNames((0, "PCE-MIB", "dcwABPvcLpId"))
if mibBuilder.loadTexts: dcwABPvcLpEntry.setStatus('mandatory')
dcwABPvcLpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcwABPvcLpId.setStatus('mandatory')
dcwABPvcLpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 25, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcwABPvcLpAddress.setStatus('mandatory')
dcVirtualPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30))
dcvVirtualPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 1), )
if mibBuilder.loadTexts: dcvVirtualPortTable.setStatus('mandatory')
dcvVirtualPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 1, 1), ).setIndexNames((0, "PCE-MIB", "dcvVirtualPortId"))
if mibBuilder.loadTexts: dcvVirtualPortEntry.setStatus('mandatory')
dcvVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpVoix", 1), ("vpIp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvVirtualPortId.setStatus('mandatory')
dcvIpVirtualPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5))
dcvIpLocalTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1), )
if mibBuilder.loadTexts: dcvIpLocalTable.setStatus('mandatory')
dcvIpLocalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1), ).setIndexNames((0, "PCE-MIB", "dcvIpLocVirtualPortId"))
if mibBuilder.loadTexts: dcvIpLocalEntry.setStatus('mandatory')
dcvIpLocVirtualPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpVoix", 1), ("vpIp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvIpLocVirtualPortId.setStatus('mandatory')
dcvIpLocAddressHost = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvIpLocAddressHost.setStatus('mandatory')
dcvIpLocSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvIpLocSubNetMask.setStatus('mandatory')
dcvIpLocMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 9180))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvIpLocMtu.setStatus('mandatory')
dcvIpLocRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvIpLocRouteNextHop.setStatus('mandatory')
dcvIpLocMinimumRecallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvIpLocMinimumRecallTimer.setStatus('mandatory')
dcvIpLocSvcClearCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvIpLocSvcClearCallTimer.setStatus('mandatory')
dcvIpLocSvcCallRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvIpLocSvcCallRetryCount.setStatus('mandatory')
dcvSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5))
dcvSnmpGen = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 1))
dcvSnmpGenVirtualPortId = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpVoix", 1), ("vpIp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvSnmpGenVirtualPortId.setStatus('mandatory')
dcvSnmpGenCommunityStringReadOnly = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvSnmpGenCommunityStringReadOnly.setStatus('mandatory')
dcvSnmpGenCommunityStringReadWrite = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvSnmpGenCommunityStringReadWrite.setStatus('mandatory')
dcvSnmpGenCommunityStringTrap = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvSnmpGenCommunityStringTrap.setStatus('mandatory')
dcvSnmpGenAuthenticationFailureTrap = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvSnmpGenAuthenticationFailureTrap.setStatus('mandatory')
dcvSnmpManagerTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2), )
if mibBuilder.loadTexts: dcvSnmpManagerTable.setStatus('mandatory')
dcvSnmpManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2, 1), ).setIndexNames((0, "PCE-MIB", "dcvSnmpManagerIpAddress"))
if mibBuilder.loadTexts: dcvSnmpManagerEntry.setStatus('mandatory')
dcvSnmpManagerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvSnmpManagerIpAddress.setStatus('mandatory')
dcvSnmpManagerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvSnmpManagerStatus.setStatus('mandatory')
dcvSnmpManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvSnmpManagerName.setStatus('mandatory')
dcvSnmpManagerSendTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvSnmpManagerSendTraps.setStatus('mandatory')
dcvSnmpManagerTrapsUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvSnmpManagerTrapsUdpPort.setStatus('mandatory')
dcvRemoteConfTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 3), )
if mibBuilder.loadTexts: dcvRemoteConfTable.setStatus('mandatory')
dcvRemoteConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 3, 1), ).setIndexNames((0, "PCE-MIB", "dcvRemoteConfName"))
if mibBuilder.loadTexts: dcvRemoteConfEntry.setStatus('mandatory')
dcvRemoteConfName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvRemoteConfName.setStatus('mandatory')
dcvRemoteConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvRemoteConfStatus.setStatus('mandatory')
dcvRemoteConfWanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvRemoteConfWanAddress.setStatus('mandatory')
dcvTftpTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10), )
if mibBuilder.loadTexts: dcvTftpTable.setStatus('mandatory')
dcvTftpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10, 1), ).setIndexNames((0, "PCE-MIB", "dcvTftpIpAddress"))
if mibBuilder.loadTexts: dcvTftpEntry.setStatus('mandatory')
dcvTftpIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvTftpIpAddress.setStatus('mandatory')
dcvTftpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvTftpStatus.setStatus('mandatory')
dcvTftpName = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvTftpName.setStatus('mandatory')
dcvTftpRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvTftpRetryTimer.setStatus('mandatory')
dcvTftpInactTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvTftpInactTimer.setStatus('mandatory')
dcvRemoteNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 15), )
if mibBuilder.loadTexts: dcvRemoteNetToMediaTable.setStatus('mandatory')
dcvRemoteNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 15, 1), ).setIndexNames((0, "PCE-MIB", "dcvRemNetIpAddress"))
if mibBuilder.loadTexts: dcvRemoteNetToMediaEntry.setStatus('mandatory')
dcvRemNetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 15, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvRemNetIpAddress.setStatus('mandatory')
dcvRemNetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvRemNetStatus.setStatus('mandatory')
dcvRemNetWanAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 15, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvRemNetWanAddress.setStatus('mandatory')
dcvRemNetEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 5, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fripSimple", 1), ("fripRFC", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvRemNetEncapsulation.setStatus('mandatory')
dcvVoiceVirtualPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10))
dcvVoiceGen = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 1))
dcvVoiceVirtualPortId = MibScalar((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vpVoix", 1), ("vpIp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceVirtualPortId.setStatus('mandatory')
dcvVoiceTransportTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2), )
if mibBuilder.loadTexts: dcvVoiceTransportTable.setStatus('mandatory')
dcvVoiceTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1), ).setIndexNames((0, "PCE-MIB", "dcvVoiceTransProfileId"))
if mibBuilder.loadTexts: dcvVoiceTransportEntry.setStatus('mandatory')
dcvVoiceTransProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceTransProfileId.setStatus('mandatory')
dcvVoiceTransEncapsulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frf", 1), ("private", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceTransEncapsulationMode.setStatus('mandatory')
dcvVoiceTransMaxPayLoadNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceTransMaxPayLoadNumber.setStatus('mandatory')
dcvVoiceTransCompressionAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("g729", 1), ("g729A", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceTransCompressionAlgorithm.setStatus('mandatory')
dcvVoiceTransJitterCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceTransJitterCompensation.setStatus('mandatory')
dcvVoiceTransVoicePacketsCombination = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceTransVoicePacketsCombination.setStatus('mandatory')
dcvVoiceTransQosBc = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("s9600", 1), ("s14400", 2), ("s19200", 3), ("s32000", 4), ("s38400", 5), ("s48000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceTransQosBc.setStatus('mandatory')
dcvVoiceTransQosBe = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("s9600", 1), ("s14400", 2), ("s19200", 3), ("s32000", 4), ("s38400", 5), ("s48000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceTransQosBe.setStatus('mandatory')
dcvVoiceTransQosCir = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("s9600", 1), ("s14400", 2), ("s19200", 3), ("s32000", 4), ("s38400", 5), ("s48000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceTransQosCir.setStatus('mandatory')
dcvVoiceSuscriberTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3), )
if mibBuilder.loadTexts: dcvVoiceSuscriberTable.setStatus('mandatory')
dcvVoiceSuscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1), ).setIndexNames((0, "PCE-MIB", "dcvVoiceSuscrOrderNumber"), (0, "PCE-MIB", "dcvVoiceSuscrNumber"))
if mibBuilder.loadTexts: dcvVoiceSuscriberEntry.setStatus('mandatory')
dcvVoiceSuscrOrderNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvVoiceSuscrOrderNumber.setStatus('mandatory')
dcvVoiceSuscrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvVoiceSuscrNumber.setStatus('mandatory')
dcvVoiceSuscrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceSuscrStatus.setStatus('mandatory')
dcvVoiceSuscrTransportNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvVoiceSuscrTransportNetwork.setStatus('mandatory')
dcvVoiceSuscrTransportNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceSuscrTransportNetworkAddress.setStatus('mandatory')
dcvVoiceSuscrTransportProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceSuscrTransportProfileId.setStatus('mandatory')
dcvVoiceSuscrRemovedDigitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceSuscrRemovedDigitNumber.setStatus('mandatory')
dcvVoiceSuscrInsPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceSuscrInsPrefix.setStatus('mandatory')
dcvVoiceSuscrInsSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceSuscrInsSuffix.setStatus('mandatory')
dcvVoiceSwTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4), )
if mibBuilder.loadTexts: dcvVoiceSwTable.setStatus('mandatory')
dcvVoiceSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1), ).setIndexNames((0, "PCE-MIB", "dcvVoiceSwOrderNumber"), (0, "PCE-MIB", "dcvVoiceSwSuscriberNumber"))
if mibBuilder.loadTexts: dcvVoiceSwEntry.setStatus('mandatory')
dcvVoiceSwOrderNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvVoiceSwOrderNumber.setStatus('mandatory')
dcvVoiceSwSuscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvVoiceSwSuscriberNumber.setStatus('mandatory')
dcvVoiceSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceSwStatus.setStatus('mandatory')
dcvVoiceSwLogPortSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceSwLogPortSetId.setStatus('mandatory')
dcvVoiceSwRemovedDigitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceSwRemovedDigitNumber.setStatus('mandatory')
dcvVoiceSwInsPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceSwInsPrefix.setStatus('mandatory')
dcvVoiceSwInsSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceSwInsSuffix.setStatus('mandatory')
dcvDialingReceptTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 5), )
if mibBuilder.loadTexts: dcvDialingReceptTable.setStatus('mandatory')
dcvDialingReceptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 5, 1), ).setIndexNames((0, "PCE-MIB", "dcvDialRxSuscriberNumber"))
if mibBuilder.loadTexts: dcvDialingReceptEntry.setStatus('mandatory')
dcvDialRxSuscriberNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvDialRxSuscriberNumber.setStatus('mandatory')
dcvDialRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvDialRxStatus.setStatus('mandatory')
dcvDialRxNumberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvDialRxNumberLength.setStatus('mandatory')
dcvDialRxEndOfDialingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvDialRxEndOfDialingTimer.setStatus('mandatory')
dcvVoiceLogPort = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10))
dcvVoiceLogicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 1), )
if mibBuilder.loadTexts: dcvVoiceLogicalPortTable.setStatus('mandatory')
dcvVoiceLogicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 1, 1), ).setIndexNames((0, "PCE-MIB", "dcvVoiceLogPortId"))
if mibBuilder.loadTexts: dcvVoiceLogicalPortEntry.setStatus('mandatory')
dcvVoiceLogPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvVoiceLogPortId.setStatus('mandatory')
dcvVoiceLogPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceLogPortStatus.setStatus('mandatory')
dcvVoiceLogPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tsPCMPermanent", 1), ("tsPCMSwitched", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceLogPortType.setStatus('mandatory')
dcvProfileTone = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5))
dcvToneGenTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 1), )
if mibBuilder.loadTexts: dcvToneGenTable.setStatus('mandatory')
dcvToneGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 1, 1), ).setIndexNames((0, "PCE-MIB", "dcvToneGenProfileId"))
if mibBuilder.loadTexts: dcvToneGenEntry.setStatus('mandatory')
dcvToneGenProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvToneGenProfileId.setStatus('mandatory')
dcvToneGenLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvToneGenLevel.setStatus('mandatory')
dcvToneTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2), )
if mibBuilder.loadTexts: dcvToneTable.setStatus('mandatory')
dcvToneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1), ).setIndexNames((0, "PCE-MIB", "dcvToneProfileId"), (0, "PCE-MIB", "dcvToneType"))
if mibBuilder.loadTexts: dcvToneEntry.setStatus('mandatory')
dcvToneProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvToneProfileId.setStatus('mandatory')
dcvToneType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dialTone", 1), ("trouble", 2), ("congestion", 3), ("busy", 4), ("callBack", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvToneType.setStatus('mandatory')
dcvToneEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvToneEnable.setStatus('mandatory')
dcvToneFreq1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvToneFreq1.setStatus('mandatory')
dcvToneDuration1 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvToneDuration1.setStatus('mandatory')
dcvToneFreq2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvToneFreq2.setStatus('mandatory')
dcvToneDuration2 = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvToneDuration2.setStatus('mandatory')
dcvVoiceLogicalPortTSPCM = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10))
dcvTSPCMPerm = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1))
dcvTSPCMPermTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1), )
if mibBuilder.loadTexts: dcvTSPCMPermTable.setStatus('mandatory')
dcvTSPCMPermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1, 1), ).setIndexNames((0, "PCE-MIB", "dcvTSPCMPermLpId"))
if mibBuilder.loadTexts: dcvTSPCMPermEntry.setStatus('mandatory')
dcvTSPCMPermLpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvTSPCMPermLpId.setStatus('mandatory')
dcvTSPCMPermCommunicationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvTSPCMPermCommunicationMode.setStatus('mandatory')
dcvTSPCMPermRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvTSPCMPermRemoteNumber.setStatus('mandatory')
dcvTSPCMPermConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvTSPCMPermConfigId.setStatus('mandatory')
dcvTSPCMPermChannIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvTSPCMPermChannIfId.setStatus('mandatory')
dcvTSPCMSw = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2))
dcvTSPCMSwTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1), )
if mibBuilder.loadTexts: dcvTSPCMSwTable.setStatus('mandatory')
dcvTSPCMSwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1), ).setIndexNames((0, "PCE-MIB", "dcvTSPCMSwLpId"))
if mibBuilder.loadTexts: dcvTSPCMSwEntry.setStatus('mandatory')
dcvTSPCMSwLpId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvTSPCMSwLpId.setStatus('mandatory')
dcvTSPCMSwLogPortSetId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvTSPCMSwLogPortSetId.setStatus('mandatory')
dcvTSPCMSwCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2), ("mixed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvTSPCMSwCallType.setStatus('mandatory')
dcvTSPCMSwRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvTSPCMSwRemoteNumber.setStatus('mandatory')
dcvTSPCMSwConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvTSPCMSwConfigId.setStatus('mandatory')
dcvTSPCMSwChannIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvTSPCMSwChannIfId.setStatus('mandatory')
dcvCASConfigTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5), )
if mibBuilder.loadTexts: dcvCASConfigTable.setStatus('mandatory')
dcvCASConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1), ).setIndexNames((0, "PCE-MIB", "dcvCASConfId"))
if mibBuilder.loadTexts: dcvCASConfigEntry.setStatus('mandatory')
dcvCASConfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvCASConfId.setStatus('mandatory')
dcvCASConfSignallingTransport = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("a", 2), ("ab", 3), ("abcd", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfSignallingTransport.setStatus('mandatory')
dcvCASConfCallSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("nColisee", 1), ("uColisee", 2), ("simm", 3), ("sDelay", 4), ("swink", 5), ("noResp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfCallSignalling.setStatus('mandatory')
dcvCASConfDialingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dec", 1), ("dtmf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfDialingMode.setStatus('mandatory')
dcvCASConfDialingTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfDialingTimeOut.setStatus('mandatory')
dcvCASConfSigChannelDiscTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfSigChannelDiscTimeOut.setStatus('mandatory')
dcvCASConfTimeBetweenSuccOutCall = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfTimeBetweenSuccOutCall.setStatus('mandatory')
dcvCASConfLineInterfacePolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfLineInterfacePolarity.setStatus('mandatory')
dcvCASConfMinLineSeizureAckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfMinLineSeizureAckTime.setStatus('mandatory')
dcvCASConfMaxLineSeizureAckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfMaxLineSeizureAckTime.setStatus('mandatory')
dcvCASConfLineSeizureAckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfLineSeizureAckTime.setStatus('mandatory')
dcvCASConfClearToIncCallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfClearToIncCallTime.setStatus('mandatory')
dcvCASConfSeizureAckPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfSeizureAckPulseDuration.setStatus('mandatory')
dcvCASConfMinSeizureAckPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfMinSeizureAckPulseDuration.setStatus('mandatory')
dcvCASConfDialingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds1", 1), ("ds2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfDialingFormat.setStatus('mandatory')
dcvCASConfInterdigitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfInterdigitTime.setStatus('mandatory')
dcvCASConfPauseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfPauseTime.setStatus('mandatory')
dcvCASConfDtmfDigitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfDtmfDigitTime.setStatus('mandatory')
dcvCASConfDtmfDigitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfDtmfDigitLevel.setStatus('mandatory')
dcvCASConfDelayBeforeDialing = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfDelayBeforeDialing.setStatus('mandatory')
dcvCASConfDigitReceptionTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfDigitReceptionTimeOut.setStatus('mandatory')
dcvCASConfEndOfDialingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfEndOfDialingTimer.setStatus('mandatory')
dcvCASConfToneProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvCASConfToneProfile.setStatus('mandatory')
dcvCASConfIdleState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfIdleState.setStatus('mandatory')
dcvCASConfAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 10, 10, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvCASConfAlarmState.setStatus('mandatory')
dcvDigitalLines = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15))
dcvIfPCM = MibIdentifier((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1))
dcvIfPCMPhysTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 1), )
if mibBuilder.loadTexts: dcvIfPCMPhysTable.setStatus('mandatory')
dcvIfPCMPhysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 1, 1), ).setIndexNames((0, "PCE-MIB", "dcvIfPCMPhysIfId"))
if mibBuilder.loadTexts: dcvIfPCMPhysEntry.setStatus('mandatory')
dcvIfPCMPhysIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pcm1", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvIfPCMPhysIfId.setStatus('mandatory')
dcvIfPCMPhysTypeId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("e1", 1), ("t1-12", 2), ("t1-24", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvIfPCMPhysTypeId.setStatus('mandatory')
dcvIfPCMPhysPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvIfPCMPhysPhysicalPort.setStatus('mandatory')
dcvIfPCMChannelTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 2), )
if mibBuilder.loadTexts: dcvIfPCMChannelTable.setStatus('mandatory')
dcvIfPCMChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 2, 1), ).setIndexNames((0, "PCE-MIB", "dcvIfPCMChannelIfId"))
if mibBuilder.loadTexts: dcvIfPCMChannelEntry.setStatus('mandatory')
dcvIfPCMChannelIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvIfPCMChannelIfId.setStatus('mandatory')
dcvIfPCMChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvIfPCMChannelStatus.setStatus('mandatory')
dcvIfPCMChannelVoiceProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvIfPCMChannelVoiceProfId.setStatus('mandatory')
dcvIfPCMChannelPhysIf = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pcm1", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvIfPCMChannelPhysIf.setStatus('mandatory')
dcvVoiceProfileTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5), )
if mibBuilder.loadTexts: dcvVoiceProfileTable.setStatus('mandatory')
dcvVoiceProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1), ).setIndexNames((0, "PCE-MIB", "dcvVoiceProfId"))
if mibBuilder.loadTexts: dcvVoiceProfileEntry.setStatus('mandatory')
dcvVoiceProfId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvVoiceProfId.setStatus('mandatory')
dcvVoiceProfTransmitLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceProfTransmitLevel.setStatus('mandatory')
dcvVoiceProfReceiveLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceProfReceiveLevel.setStatus('mandatory')
dcvVoiceProfSilenceDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("cng", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceProfSilenceDetection.setStatus('mandatory')
dcvVoiceProfSilenceDetectionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceProfSilenceDetectionLevel.setStatus('mandatory')
dcvVoiceProfEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceProfEchoCancellation.setStatus('mandatory')
dcvVoiceProfEchoCancellationLength = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceProfEchoCancellationLength.setStatus('mandatory')
dcvVoiceProfNoiseFramesPeriodicity = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceProfNoiseFramesPeriodicity.setStatus('mandatory')
dcvVoiceProfLoopActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("local", 2), ("remote", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceProfLoopActivation.setStatus('mandatory')
dcvVoiceProfFaxActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceProfFaxActivation.setStatus('mandatory')
dcvVoiceProfMaximumFaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("s9600", 1), ("s4800", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceProfMaximumFaxSpeed.setStatus('mandatory')
dcvVoiceProfCESMode = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceProfCESMode.setStatus('mandatory')
dcvVoiceProfCESModeAverageDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcvVoiceProfCESModeAverageDelay.setStatus('mandatory')
dcvVoicePhysicalPortTable = MibTable((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 10), )
if mibBuilder.loadTexts: dcvVoicePhysicalPortTable.setStatus('mandatory')
dcvVoicePhysicalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 10, 1), ).setIndexNames((0, "PCE-MIB", "dcvVoicePhysPortId"))
if mibBuilder.loadTexts: dcvVoicePhysicalPortEntry.setStatus('mandatory')
dcvVoicePhysPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v1", 1), ("v2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvVoicePhysPortId.setStatus('mandatory')
dcvVoicePhysPortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 866, 30, 20, 30, 10, 15, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tdm", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcvVoicePhysPortConnector.setStatus('mandatory')
mibBuilder.exportSymbols("PCE-MIB", fmsLineTestState=fmsLineTestState, dcvVoiceTransQosBe=dcvVoiceTransQosBe, fmOspfStandardIfMetricTOS=fmOspfStandardIfMetricTOS, fmeTrapFamilyId=fmeTrapFamilyId, fclX25CfaSigConvMultiCallingAddrOutCall=fclX25CfaSigConvMultiCallingAddrOutCall, fmsIpLanInOctetsIpCounter=fmsIpLanInOctetsIpCounter, vcwWanRouteStatus=vcwWanRouteStatus, fclAsynPadLpNui=fclAsynPadLpNui, fcvLvpFltFilteringType=fcvLvpFltFilteringType, fclAsynCfgX3UserP12InputFlowCtrl=fclAsynCfgX3UserP12InputFlowCtrl, fcxRoutCircuitEntry=fcxRoutCircuitEntry, fclX25CfmDiagnosticCodeField=fclX25CfmDiagnosticCodeField, vcx100=vcx100, fclX25SlpAccessTable=fclX25SlpAccessTable, fciLclVirtualPortId=fciLclVirtualPortId, fclLogicalPortTable=fclLogicalPortTable, vclFrTeLpConfigId=vclFrTeLpConfigId, fclX25AccIsdnBackupEnabling=fclX25AccIsdnBackupEnabling, fclX25MlpX25InterNodeConfigId=fclX25MlpX25InterNodeConfigId, fmsE1Ds1ChIfInUcastPkts=fmsE1Ds1ChIfInUcastPkts, fcCtlConfigurationState=fcCtlConfigurationState, fmsFrcFilterAction=fmsFrcFilterAction, cmeClearTimeStamp=cmeClearTimeStamp, fclX25CfaDescription=fclX25CfaDescription, fcwFrEndPointMaxCount=fcwFrEndPointMaxCount, dcvSnmp=dcvSnmp, fclAsynCfgX3P01EscapeChar=fclAsynCfgX3P01EscapeChar, fclX25InDIsdnBackStatus=fclX25InDIsdnBackStatus, fclX25InDIsdnBackIsdnInterfaceId=fclX25InDIsdnBackIsdnInterfaceId, fcwLocalIncomingCallsRouteId=fcwLocalIncomingCallsRouteId, fcxCircName=fcxCircName, fmOsiISISCircInitFails=fmOsiISISCircInitFails, fcwSerClearAnalysisEntry=fcwSerClearAnalysisEntry, fclX25AccPrivateNetEntry=fclX25AccPrivateNetEntry, fclBSctProtDef2RVI=fclBSctProtDef2RVI, dcvVoiceLogicalPortTable=dcvVoiceLogicalPortTable, fclX25SlpSwSwitchThreshold=fclX25SlpSwSwitchThreshold, fclFrCfsSigT200RetransTimer=fclFrCfsSigT200RetransTimer, dcvSnmpManagerTable=dcvSnmpManagerTable, dcvVoiceSwTable=dcvVoiceSwTable, fcxCircOperState=fcxCircOperState, fclAsynCfgFacWindowSize=fclAsynCfgFacWindowSize, vclFrCeLogPortEntry=vclFrCeLogPortEntry, fcfTokenRingTable=fcfTokenRingTable, fcmManagementFunctions=fcmManagementFunctions, fcmMgfStatOutputThreshold=fcmMgfStatOutputThreshold, fcfIsdnBriDisablingTimer=fcfIsdnBriDisablingTimer, vcfConfLineTable=vcfConfLineTable, fcwFrCongestionCheckTimer=fcwFrCongestionCheckTimer, fmOspfStandardExternLSACount=fmOspfStandardExternLSACount, fcwAddressConversion=fcwAddressConversion, fclAsynX28PlusLpTable=fclAsynX28PlusLpTable, fcfLineV28DteSignalTable=fcfLineV28DteSignalTable, fclAsynCfgX3P02Echo=fclAsynCfgX3P02Echo, vcmAlrmSwDisplay=vcmAlrmSwDisplay, dcvCASConfDialingFormat=dcvCASConfDialingFormat, dcvTSPCMSwRemoteNumber=dcvTSPCMSwRemoteNumber, fclFrCfcLmiAccessibilityCondition=fclFrCfcLmiAccessibilityCondition, fclFrCfcLmiT392PollingVerifTimer=fclFrCfcLmiT392PollingVerifTimer, dcmAlrmSCTyp=dcmAlrmSCTyp, fmsFrLpOutOctets=fmsFrLpOutOctets, fclX25CfnDlnT2AcknowledgeDelayTimer=fclX25CfnDlnT2AcknowledgeDelayTimer, fmOspfStandardNbrEntry=fmOspfStandardNbrEntry, vcvVoicePhysPortConnector=vcvVoicePhysPortConnector, dcvToneFreq1=dcvToneFreq1, fclFrCfcLmiN393MonitoredEventCount=fclFrCfcLmiN393MonitoredEventCount, fcfE1Ds1DropInsertTable=fcfE1Ds1DropInsertTable, fcfLineV28AsynInDceEnablingSig2=fcfLineV28AsynInDceEnablingSig2, fclX25SlpDARApplicable=fclX25SlpDARApplicable, fcmMgfConversionIncomingCall=fcmMgfConversionIncomingCall, vcvSnmpManagerIpAddress=vcvSnmpManagerIpAddress, fcfIsdnDTimT301AlertConnectTimer=fcfIsdnDTimT301AlertConnectTimer, fclFraLpAllDiscardThreshold=fclFraLpAllDiscardThreshold, fclSdlcLpUnknownPackets=fclSdlcLpUnknownPackets, fclFrPvcTunStatus=fclFrPvcTunStatus, fclX25CfaPackSubAddress=fclX25CfaPackSubAddress, vclHdlcLogPortTable=vclHdlcLogPortTable, dcvVoiceSwEntry=dcvVoiceSwEntry, fcsnaLvpTrBridgeNo=fcsnaLvpTrBridgeNo, fcxRoutCircuitTable=fcxRoutCircuitTable, vcvIpLocVirtualPortId=vcvIpLocVirtualPortId, vcvVoiceVirtualPort=vcvVoiceVirtualPort, vcvAnalogLineInterfaceId=vcvAnalogLineInterfaceId, fcbBrdgVpStatus=fcbBrdgVpStatus, vcvFxxConfigEntry=vcvFxxConfigEntry, fmStatS0=fmStatS0, vclHdlcLpLogPortId=vclHdlcLpLogPortId, fcxServStaticStatus=fcxServStaticStatus, dcvCASConfMaxLineSeizureAckTime=dcvCASConfMaxLineSeizureAckTime, fcfLineV11DteSyn=fcfLineV11DteSyn, sc1200=sc1200, fclX25CfaFacTransitDelay=fclX25CfaFacTransitDelay, dcvSnmpGenCommunityStringReadWrite=dcvSnmpGenCommunityStringReadWrite, fmOspfStandardIfBackupDesignatedRouter=fmOspfStandardIfBackupDesignatedRouter, fmStatSignalTable=fmStatSignalTable, fcfIsdnDChannelSignallingTable=fcfIsdnDChannelSignallingTable, fclX25CfaDlnConfigId=fclX25CfaDlnConfigId, fclAsynCfgX3UserP20EchoMask=fclAsynCfgX3UserP20EchoMask, fcvLvpFltFilteringStatus=fcvLvpFltFilteringStatus, fcxCircLvpEncapsulation=fcxCircLvpEncapsulation, dcvCASConfSignallingTransport=dcvCASConfSignallingTransport, fcwConvMultiInExternalAddr=fcwConvMultiInExternalAddr, fmsFrDlcEntry=fmsFrDlcEntry, fclAsynCfgX3UserP04IdleTimerDelay=fclAsynCfgX3UserP04IdleTimerDelay, fcxCircRvpLocalNode=fcxCircRvpLocalNode, vcmAlrmSCTable=vcmAlrmSCTable, fmsIpLanInHdrErrorsCounter=fmsIpLanInHdrErrorsCounter, dclFrSeSigT203InactivityTimer=dclFrSeSigT203InactivityTimer, fclSdlcPriClusterRemPu2CalledAddr=fclSdlcPriClusterRemPu2CalledAddr, fmOspfStandardIfMetricAddressLessIf=fmOspfStandardIfMetricAddressLessIf, fclX25ConfigMiscellaneous=fclX25ConfigMiscellaneous, fclX25CfaSerRemoteExclusiveLink=fclX25CfaSerRemoteExclusiveLink, fclVipHosElemType=fclVipHosElemType, dcvVoiceSuscrNumber=dcvVoiceSuscrNumber, fclX25MlpIsdnRemPriority=fclX25MlpIsdnRemPriority, fclX25AccSwSwitchBackThreshold=fclX25AccSwSwitchBackThreshold, vcvRemoteConfStatus=vcvRemoteConfStatus, fcfLineCheckPeriodCount=fcfLineCheckPeriodCount, fmuAccessPaviLineNbMax=fmuAccessPaviLineNbMax, fclPppPstnLpConfigId=fclPppPstnLpConfigId, fclFrPvcQosOutMinCir=fclFrPvcQosOutMinCir, fmOspfStandardIfState=fmOspfStandardIfState, fcInterfaces=fcInterfaces, fclB3270LpEmulationType=fclB3270LpEmulationType, dcmAlrmGenTyp=dcmAlrmGenTyp, adaptis=adaptis, fclX25CfaSignallingEntry=fclX25CfaSignallingEntry, dclFrSeLogPortEntry=dclFrSeLogPortEntry, vcvFxxLpLogPortId=vcvFxxLpLogPortId, fclFraLpLmi=fclFraLpLmi, fmStatS2=fmStatS2, vcvDialRxSuscriberNumber=vcvDialRxSuscriberNumber, vcInterfaces=vcInterfaces, fcwSDynLspRetransRequestTimer=fcwSDynLspRetransRequestTimer, fmsInputDataBytesCounter=fmsInputDataBytesCounter, fmuAccessBsc3270LineNbMax=fmuAccessBsc3270LineNbMax, fclX25AccPermanentVcEntry=fclX25AccPermanentVcEntry, fmOspfStandardVirtNbrRtrId=fmOspfStandardVirtNbrRtrId, fcmMgtFctCugFunctionId=fcmMgtFctCugFunctionId, dcmAlrmSwTyp=dcmAlrmSwTyp, fcwCallPacketsDiscardThreshold=fcwCallPacketsDiscardThreshold, fmsFrDlcCos=fmsFrDlcCos, fccLvpEsIsRedirection=fccLvpEsIsRedirection, fmStatLinesSummary=fmStatLinesSummary, fcsnaGpLanFrPuId=fcsnaGpLanFrPuId, fmhE1S2ModDescHardwareVersion=fmhE1S2ModDescHardwareVersion, fcxServSapOutputFilteringTable=fcxServSapOutputFilteringTable, vcmAlrmSCTrapSend=vcmAlrmSCTrapSend, fciOspfVlAuthenticationKey=fciOspfVlAuthenticationKey, fclPppSerAutoCompressNegotiation=fclPppSerAutoCompressNegotiation, fmsFrSwDataLinkConnEstablished=fmsFrSwDataLinkConnEstablished, vcvFxxConfDelayBeforeDialing=vcvFxxConfDelayBeforeDialing, fmsS0BChIfCallingAddress=fmsS0BChIfCallingAddress, fclAsynX28PlusParTelLpIdleTimerSelection=fclAsynX28PlusParTelLpIdleTimerSelection, dcvCASConfTimeBetweenSuccOutCall=dcvCASConfTimeBetweenSuccOutCall, fccLocalNeighborTable=fccLocalNeighborTable, fclFrConfigSeEntry=fclFrConfigSeEntry, dcvCASConfInterdigitTime=dcvCASConfInterdigitTime, fclFrPvcSnaNwIncrementAckCount=fclFrPvcSnaNwIncrementAckCount, fclFraPvcMinRecallTimer=fclFraPvcMinRecallTimer, vclFrSeSigT308ReleaseResponseTimer=vclFrSeSigT308ReleaseResponseTimer, vcSysConfActive=vcSysConfActive, fclPppCftTerminateMaxCount=fclPppCftTerminateMaxCount, fclFrCeLpConfigId=fclFrCeLpConfigId, fmOspfStandardVirtIfTransitDelay=fmOspfStandardVirtIfTransitDelay, fclX25CfnSerCallReturnTransmission=fclX25CfnSerCallReturnTransmission, fclAsynCfgX3P21Parity=fclAsynCfgX3P21Parity, fclFrCfsStatus=fclFrCfsStatus, fmsS2BChIfCallingAddress=fmsS2BChIfCallingAddress, vclFrTeLogPortTable=vclFrTeLogPortTable, fmuFunctionOnlineFileTransfer=fmuFunctionOnlineFileTransfer, dcfDataLineDtr108=dcfDataLineDtr108, dcvRemoteNetToMediaTable=dcvRemoteNetToMediaTable, fciRemoteNetToMediaTable=fciRemoteNetToMediaTable, fclX25AccPvcCallDirection=fclX25AccPvcCallDirection, fmsBootPRelayRelayedPkts=fmsBootPRelayRelayedPkts, fclFraLmiAccessibilityCondition=fclFraLmiAccessibilityCondition, fclAsynAutoTransLpId=fclAsynAutoTransLpId, dcfPhysPortConnector=dcfPhysPortConnector, dcvVoiceLogPortId=dcvVoiceLogPortId, fclX25CfnStatus=fclX25CfnStatus, fclSdlcLogPortEntry=fclSdlcLogPortEntry, fclX25MlpPstnOverflowEntry=fclX25MlpPstnOverflowEntry, fmsPppProtoBrdgNcpStatus=fmsPppProtoBrdgNcpStatus, dcvSnmpManagerName=dcvSnmpManagerName, fcfE1Ds1ChannelEntry=fcfE1Ds1ChannelEntry, fcsnaLvpLocalLanPuEntry=fcsnaLvpLocalLanPuEntry, fclX25CfaDlnT2AcknwledgeDelayTimer=fclX25CfaDlnT2AcknwledgeDelayTimer, fclX25CfaServiceEntry=fclX25CfaServiceEntry, fclX25CfnSigConvMultiCallingAddrInCall=fclX25CfnSigConvMultiCallingAddrInCall, fclFraLpFecnBecnThreshold=fclFraLpFecnBecnThreshold, vcvSnmpGenAuthenticationFailureTrap=vcvSnmpGenAuthenticationFailureTrap, fmsEthManFilterPermitCounter=fmsEthManFilterPermitCounter, fmRip2PeerLastUpdate=fmRip2PeerLastUpdate, cmeClearEvent=cmeClearEvent, fclPppSerAutoCompressScrambling=fclPppSerAutoCompressScrambling, fcwSResConversionOutgoingCall=fcwSResConversionOutgoingCall, vclFrLmiParaDlci=vclFrLmiParaDlci, cfField3=cfField3, fclAsynCfgX3UserP19EditingSignal=fclAsynCfgX3UserP19EditingSignal, fcwSerCompression=fcwSerCompression, fclAsynVdxLpEntry=fclAsynVdxLpEntry, fclLogicalPortEntry=fclLogicalPortEntry, fclAsynMneCalledAddr=fclAsynMneCalledAddr, fmsIpTrafOutOctetsCounter=fmsIpTrafOutOctetsCounter, fclAsynNetUserId=fclAsynNetUserId, fcwConvMultiInStatus=fcwConvMultiInStatus, fclPppPstnLpInterfaceId=fclPppPstnLpInterfaceId, dcSysConfActive=dcSysConfActive, fmsS2BChIfInOctets=fmsS2BChIfInOctets, fclX25CfaServiceTable=fclX25CfaServiceTable, fmOsiISISRAType=fmOsiISISRAType, fcxCircLocalMaxPacketSize=fcxCircLocalMaxPacketSize, vcSysConfDate=vcSysConfDate, dcvTftpIpAddress=dcvTftpIpAddress, fciOspfVpHelloInterval=fciOspfVpHelloInterval, fcvRvpMinCir=fcvRvpMinCir, fcfLineV28AsynInDteSigMonitored2=fcfLineV28AsynInDteSigMonitored2, fcmAlrmEvtFamilyId=fcmAlrmEvtFamilyId, fcxRipCircOutputFiltering=fcxRipCircOutputFiltering, fclBSctProtDef1StartFrameDelimiter1=fclBSctProtDef1StartFrameDelimiter1, fclX25ConfigAccess=fclX25ConfigAccess, fclFrCfsSigOuputTimeout=fclFrCfsSigOuputTimeout, vclFrTeLpLogPortId=vclFrTeLpLogPortId, dcvVoiceTransVoicePacketsCombination=dcvVoiceTransVoicePacketsCombination, fcsnaLvpTrParamLinkType=fcsnaLvpTrParamLinkType, fmsFrLpOutBecnFrames=fmsFrLpOutBecnFrames, fciRipNeighborEntry=fciRipNeighborEntry, vcvVoiceProfMaximumFaxSpeed=vcvVoiceProfMaximumFaxSpeed, fclAsynX28PlusRemLpFullDuplex=fclAsynX28PlusRemLpFullDuplex, fclFrCfcSigT308ReleaseResponseTimer=fclFrCfcSigT308ReleaseResponseTimer, fmsEthTestLoopback=fmsEthTestLoopback, nodeStatus=nodeStatus, fcsnaLvpTrParamCompression=fcsnaLvpTrParamCompression, fdpModControlData=fdpModControlData, fclAsynCfgSerCos=fclAsynCfgSerCos, fclX25MlpOverflowEntry=fclX25MlpOverflowEntry, fciEgpTargetAsDistributionEntry=fciEgpTargetAsDistributionEntry, dcvToneGenProfileId=dcvToneGenProfileId, fclSdlcSecClusterCalledAddr=fclSdlcSecClusterCalledAddr, fmsFrLpLmiNetChanInactive=fmsFrLpLmiNetChanInactive, fclX25CfaSerReliableVc=fclX25CfaSerReliableVc, fclFraPvcLogPortId=fclFraPvcLogPortId, fcvLvpLogicalPortId=fcvLvpLogicalPortId, fcwSRvcRestoreIncomingCallTimer=fcwSRvcRestoreIncomingCallTimer, fmsWanConnInPktsCounter=fmsWanConnInPktsCounter, fcwFrSlowingDownThreshold=fcwFrSlowingDownThreshold, fclBX780LpNoAnswerWatchDog=fclBX780LpNoAnswerWatchDog, fclPppBIsdnLogPortTable=fclPppBIsdnLogPortTable, fcwFrVoiceFrameSize=fcwFrVoiceFrameSize, fcFrSwitchingEntry=fcFrSwitchingEntry, fciOspfVlRouterDeadInterval=fciOspfVlRouterDeadInterval, fclAsynX28PlusRemCfgX3P20EchoMask=fclAsynX28PlusRemCfgX3P20EchoMask, fmsPppIpAddrReceived=fmsPppIpAddrReceived)
mibBuilder.exportSymbols("PCE-MIB", fclX25CfnSigConversionOutgoingCall=fclX25CfnSigConversionOutgoingCall, fclFrPvcQosLinkType=fclFrPvcQosLinkType, fmStatRvpConnectionsEntry=fmStatRvpConnectionsEntry, fclX25MlpIsdnRemStatus=fclX25MlpIsdnRemStatus, fclX25MlpMt4DownLinkDetectionTimer=fclX25MlpMt4DownLinkDetectionTimer, fciVpIpAddress=fciVpIpAddress, fclX25InBRemLinkCheckPeriod=fclX25InBRemLinkCheckPeriod, fciBootPInterfaceEntry=fciBootPInterfaceEntry, fcxCircLvpStatus=fcxCircLvpStatus, fclX25AccSwSwitchThreshold=fclX25AccSwSwitchThreshold, fclX25CfnNegMaxInThroughputClass=fclX25CfnNegMaxInThroughputClass, fmOspfStandardLsdbAdvertisement=fmOspfStandardLsdbAdvertisement, fclSdlcSecLpPollingTimer=fclSdlcSecLpPollingTimer, fmsS2BChOperStatus=fmsS2BChOperStatus, fmPingOwner=fmPingOwner, transProduct=transProduct, fcfIsdnBriEnablingTimer=fcfIsdnBriEnablingTimer, fclX25CfnSigCallAcceptedFormat=fclX25CfnSigCallAcceptedFormat, fclFrPvcTunEndPointEntry=fclFrPvcTunEndPointEntry, fclBSctProtocolDefinition1Entry=fclBSctProtocolDefinition1Entry, fdpTestInPktsCounter=fdpTestInPktsCounter, vcfNumericLineInterfaceId=vcfNumericLineInterfaceId, fclAsynLpLogPortId=fclAsynLpLogPortId, fclX25MlpIsdnRemotePeerEntry=fclX25MlpIsdnRemotePeerEntry, fmsFrDlcInOctets=fmsFrDlcInOctets, fclX25InDIsdnRemotePeerEntry=fclX25InDIsdnRemotePeerEntry, vcvEMConfLineInterfacePolarity=vcvEMConfLineInterfacePolarity, fclFrConfigCeTeEntry=fclFrConfigCeTeEntry, fcfTokenRingEntry=fcfTokenRingEntry, fmsInArpVpVirtualPortId=fmsInArpVpVirtualPortId, fclX25CfnNegPacketSize=fclX25CfnNegPacketSize, fmsStateLineType=fmsStateLineType, fcwZoRoutingEntry=fcwZoRoutingEntry, fcwSCompModule0CompressedVcCount=fcwSCompModule0CompressedVcCount, fmsSig125=fmsSig125, fclPppPstnLogPortTable=fclPppPstnLogPortTable, fmsFrcStorageBe=fmsFrcStorageBe, fmOspfStandardIfEvents=fmOspfStandardIfEvents, fcfLineV28AsynOutDteDtr108=fcfLineV28AsynOutDteDtr108, fmuFunctionClnpRouter=fmuFunctionClnpRouter, vcmAlrmFaxTyp=vcmAlrmFaxTyp, fclAsynVdxHomePageTable=fclAsynVdxHomePageTable, fciTelnetConfiguration=fciTelnetConfiguration, fclX25MlpIsdnRemotePeerTable=fclX25MlpIsdnRemotePeerTable, vcvEMSwInterfaceId=vcvEMSwInterfaceId, fclFraPvcDlci=fclFraPvcDlci, dcvRemoteConfWanAddress=dcvRemoteConfWanAddress, fmRip2IfConfDefaultMetric=fmRip2IfConfDefaultMetric, fclX25InDIsdnRemPdnLinkAddress=fclX25InDIsdnRemPdnLinkAddress, fclPppSerAutoRemoteAddress=fclPppSerAutoRemoteAddress, fciOspfAseExportStaticsStatus=fciOspfAseExportStaticsStatus, dcfDataLineInterfaceId=dcfDataLineInterfaceId, fmOsiISISSystem=fmOsiISISSystem, fcsnaLvpParamN3=fcsnaLvpParamN3, fcxCircuitRemoteVpTable=fcxCircuitRemoteVpTable, fclFraLpCompression=fclFraLpCompression, fmhE1S2ModuleDescription=fmhE1S2ModuleDescription, fmsE1Ds1ChIfOutDiscards=fmsE1Ds1ChIfOutDiscards, dcvVoicePhysicalPortEntry=dcvVoicePhysicalPortEntry, fcwSRvcConversionOutgoingCall=fcwSRvcConversionOutgoingCall, cfModuleToIdentify=cfModuleToIdentify, fcwRoutRouteId=fcwRoutRouteId, fclBSctLpLinkType=fclBSctLpLinkType, dcmAlrmLMITable=dcmAlrmLMITable, fciFlowLengthMax=fciFlowLengthMax, vcvToneGenEntry=vcvToneGenEntry, fclAsynX28PlusConfRemoteTable=fclAsynX28PlusConfRemoteTable, dcvRemoteNetToMediaEntry=dcvRemoteNetToMediaEntry, fmOspfStandardIfHelloInterval=fmOspfStandardIfHelloInterval, dcwEquipIpVirtualPortAddr=dcwEquipIpVirtualPortAddr, fcwRoutType=fcwRoutType, fmOsiISISAreaAddress=fmOsiISISAreaAddress, dcfNumericLineEntry=dcfNumericLineEntry, fclPppCftConnectionTimer=fclPppCftConnectionTimer, fcFrSwOutputInterfaceId=fcFrSwOutputInterfaceId, fclX25MlpEntry=fclX25MlpEntry, fcwDnicZoAddress=fcwDnicZoAddress, fclX25AccSwitchOverEntry=fclX25AccSwitchOverEntry, fmsFrLpInOctets=fmsFrLpInOctets, fclVipCluLpLogPortId=fclVipCluLpLogPortId, fmuAccessX29ReroutLineNbMax=fmuAccessX29ReroutLineNbMax, fmOspfStandardExternLSACksumSum=fmOspfStandardExternLSACksumSum, fmsS0BChIfCalledAddress=fmsS0BChIfCalledAddress, fmRip2GlobalRouteChanges=fmRip2GlobalRouteChanges, fmOspfStandardAreaLSACksumSum=fmOspfStandardAreaLSACksumSum, fmhTechnicPromFlashSize=fmhTechnicPromFlashSize, fciOspfAreasEntry=fciOspfAreasEntry, fmsEthInPktsTooLongsCounter=fmsEthInPktsTooLongsCounter, vclFrSeSigT305DisconnectResponseTimer=vclFrSeSigT305DisconnectResponseTimer, vclFrSeSigT310CallProceedingTimer=vclFrSeSigT310CallProceedingTimer, vcvIpLocRouteNextHop=vcvIpLocRouteNextHop, dcvTSPCMPermCommunicationMode=dcvTSPCMPermCommunicationMode, fmsBootPRelayRecRequests=fmsBootPRelayRecRequests, fclBSctProtocolDefinition2Entry=fclBSctProtocolDefinition2Entry, fdpTestOutPktsCounter=fdpTestOutPktsCounter, fclFrCfcEiCodingTable=fclFrCfcEiCodingTable, fmsFrDlcState=fmsFrDlcState, vcvVoiceProfEchoCancellation=vcvVoiceProfEchoCancellation, fclX25CfaSigConversionAddressCheck=fclX25CfaSigConversionAddressCheck, fclBSctConnCallDirection=fclBSctConnCallDirection, fclPppBIsdnRemCheckPeriodCount=fclPppBIsdnRemCheckPeriodCount, fcwConvInOrderNum=fcwConvInOrderNum, fclAsynCfgConnServiceTable=fclAsynCfgConnServiceTable, fccRoutStatus=fccRoutStatus, fclPppSerialAutoCallEntry=fclPppSerialAutoCallEntry, fclFrCfsGenConfigId=fclFrCfsGenConfigId, fclFrCfsGeneralParameterTable=fclFrCfsGeneralParameterTable, fclX25CfaSigConversionAimedPoint=fclX25CfaSigConversionAimedPoint, dcvToneProfileId=dcvToneProfileId, fclX25CfaDlnN2RetryCount=fclX25CfaDlnN2RetryCount, fciFlowRouteNextHop=fciFlowRouteNextHop, fclAsynX28PlusConfTELENETTable=fclAsynX28PlusConfTELENETTable, dcmAlrmSwFamilyId=dcmAlrmSwFamilyId, fclB3270HosLogPortEntry=fclB3270HosLogPortEntry, dcvVoiceSwOrderNumber=dcvVoiceSwOrderNumber, fclPppSerLpBe=fclPppSerLpBe, fcxRipOutFltFilterId=fcxRipOutFltFilterId, fciLclPriority=fciLclPriority, vcvRemoteNetToMediaTable=vcvRemoteNetToMediaTable, vcvFxxRingSilenceDuration=vcvFxxRingSilenceDuration, fclX25CfnProfileId=fclX25CfnProfileId, fclAsynMneTransClearHangUp=fclAsynMneTransClearHangUp, fciLocalVirtualPortTable=fciLocalVirtualPortTable, fcfLineDVBEntry=fcfLineDVBEntry, fclX25InBLogPortId=fclX25InBLogPortId, fclPppSerAutoInactivityTimer=fclPppSerAutoInactivityTimer, fcwZoStatus=fcwZoStatus, fmOspfStandardVirtIfRetransInterval=fmOspfStandardVirtIfRetransInterval, fcmMgtFctCugTable=fcmMgtFctCugTable, fclPppBIsdnRemotePeerTable=fclPppBIsdnRemotePeerTable, fclB3270HosLpAnswerToPolling=fclB3270HosLpAnswerToPolling, fclX25SlpIsdnBackupTable=fclX25SlpIsdnBackupTable, fclAsynCfgX3P12InputFlowCtrl=fclAsynCfgX3P12InputFlowCtrl, fclX25CfnSigConversionAddressCheck=fclX25CfnSigConversionAddressCheck, fclAsynVdxHomePageEntry=fclAsynVdxHomePageEntry, fcmAlrmPpPhysPortSelection=fcmAlrmPpPhysPortSelection, fclAsynAutoVdxKeyTranslationEntry=fclAsynAutoVdxKeyTranslationEntry, fmOspfStandardTOSSupport=fmOspfStandardTOSSupport, fmsBootPClientServerIpAddr=fmsBootPClientServerIpAddr, fclVipLogPortTable=fclVipLogPortTable, vcfConfLineRate=vcfConfLineRate, dclFrConfigurationTe=dclFrConfigurationTe, fmsFrLineActiveCircuitCount=fmsFrLineActiveCircuitCount, fclX25CfaFacOutputUnknownFacility=fclX25CfaFacOutputUnknownFacility, fclBSctLogPortTable=fclBSctLogPortTable, fcsnaLvpTrParamN2=fcsnaLvpTrParamN2, fclBSctProtDef1PermanentDelimiter5=fclBSctProtDef1PermanentDelimiter5, fcfLineV28DceDrs111=fcfLineV28DceDrs111, fmsFrLpLogPortTable=fmsFrLpLogPortTable, fclAsynMultiLpLogPortId=fclAsynMultiLpLogPortId, vcwWanRouteDnicZoAddress=vcwWanRouteDnicZoAddress, fcFrameRelaySwitch=fcFrameRelaySwitch, fclFrCfcStatus=fclFrCfcStatus, fclX25AccPrivLogPortId=fclX25AccPrivLogPortId, fciEgpNeighborIpAddress=fciEgpNeighborIpAddress, fmOspfStandardHostEntry=fmOspfStandardHostEntry, fclX25CfaDlnStationType=fclX25CfaDlnStationType, fclX25MlpLink2InterfaceId=fclX25MlpLink2InterfaceId, vclFrLmiParaN391FullStatusPollCount=vclFrLmiParaN391FullStatusPollCount, fcfLineV28AsynOutDteLl141=fcfLineV28AsynOutDteLl141, fmsWanConnInErrPktsCounter=fmsWanConnInErrPktsCounter, frx300=frx300, fclX25CfaSigPacketAddressCount=fclX25CfaSigPacketAddressCount, fmuAccessHdlcTranspLineNbMax=fmuAccessHdlcTranspLineNbMax, fmsS2BChChannelId=fmsS2BChChannelId, fmeFamFamilyId=fmeFamFamilyId, fcwSRvcRestoreOutgoingCallDelay=fcwSRvcRestoreOutgoingCallDelay, fcsConfigDescVersion=fcsConfigDescVersion, fclSdlcSecClusterMinRecallTimer=fclSdlcSecClusterMinRecallTimer, dcmAlrmGenTable=dcmAlrmGenTable, fcvRvpCompressNegotiation=fcvRvpCompressNegotiation, fcFrSwitchingTable=fcFrSwitchingTable, fclFrSeIsdnBackStatus=fclFrSeIsdnBackStatus, fmsFrLpSvcSignallingEntry=fmsFrLpSvcSignallingEntry, fclFrPvcCallDirection=fclFrPvcCallDirection, fclPppBIsdnPriStatus=fclPppBIsdnPriStatus, fclFraLogPortEntry=fclFraLogPortEntry, vcmAlrmSvcTable=vcmAlrmSvcTable, vcvEMConfDtmfDigitTime=vcvEMConfDtmfDigitTime, fclAsynX28PlusRemoteTELENETTable=fclAsynX28PlusRemoteTELENETTable, fmsBrdgTrafInPktsCounter=fmsBrdgTrafInPktsCounter, mcx512Y=mcx512Y, fcfIsdnBriInterfaceCheckPeriod=fcfIsdnBriInterfaceCheckPeriod, fclX25PstnRemX121Addr=fclX25PstnRemX121Addr, fclX25CfnSigConversionAimedPoint=fclX25CfnSigConversionAimedPoint, fmOspfStandardVirtNbrArea=fmOspfStandardVirtNbrArea, fclFrPvcQosLinkId=fclFrPvcQosLinkId, fclX25CfaDlnOutgoingChannelCount=fclX25CfaDlnOutgoingChannelCount, fcwSCUDProfilesCUD=fcwSCUDProfilesCUD, fclB3270CluCallTable=fclB3270CluCallTable, fmRip2IfConfAuthKey=fmRip2IfConfAuthKey, fcCtlErrorEntry=fcCtlErrorEntry, fciEgpNeighborStatus=fciEgpNeighborStatus, fmStatPppIpAddrAssignmentTable=fmStatPppIpAddrAssignmentTable, vcvVoiceSuscrRemovedDigitNumber=vcvVoiceSuscrRemovedDigitNumber, dcvIfPCMPhysIfId=dcvIfPCMPhysIfId, fclX25InBRemPdnLinkAddress=fclX25InBRemPdnLinkAddress, fclPppSerLpMinCir=fclPppSerLpMinCir, fcsnaLvpTrParamSubscriberNumber=fcsnaLvpTrParamSubscriberNumber, fclFrTeLpLocalAddress=fclFrTeLpLocalAddress, fmsFrCommStorageEntry=fmsFrCommStorageEntry, vcFrSwL1DlciPriority=vcFrSwL1DlciPriority, fcfE1Ds1DropInsertEntry=fcfE1Ds1DropInsertEntry, dcvVoiceProfLoopActivation=dcvVoiceProfLoopActivation, dclFrameRelay=dclFrameRelay, fciFastIpRouting=fciFastIpRouting, vcvVoiceSwStatus=vcvVoiceSwStatus, fcvRvpCompressMultiPacketsTimer=fcvRvpCompressMultiPacketsTimer, fcwSClearAnalysCause=fcwSClearAnalysCause, fclFrSeInBLpLogPortId=fclFrSeInBLpLogPortId, fcxCircRvpRemoteAddress=fcxCircRvpRemoteAddress, fcCtlStateCheckingResults=fcCtlStateCheckingResults, dcvTSPCMPermRemoteNumber=dcvTSPCMPermRemoteNumber, fmOsiISISISAdjUsage=fmOsiISISISAdjUsage, vcvSnmpManagerStatus=vcvSnmpManagerStatus, dcfConfLineTable=dcfConfLineTable, fmsBootPRelayRecReplies=fmsBootPRelayRecReplies, fcfIsdnRemotePeerEntry=fcfIsdnRemotePeerEntry, fcmMgfStatLogChannelThreshold=fcmMgfStatLogChannelThreshold, fmuFunctionLz77Compression=fmuFunctionLz77Compression, fcwSerClearAnalysisTable=fcwSerClearAnalysisTable, fcwConvCondOutConvertedAddr=fcwConvCondOutConvertedAddr, fclX25CfaSerCompressNegotiation=fclX25CfaSerCompressNegotiation, fclAsynX28PlusLpIdleTimerDelay=fclAsynX28PlusLpIdleTimerDelay, fclBSctProtDef1PermanentDelimiter3=fclBSctProtDef1PermanentDelimiter3, fclX25CfaDlnEachPacketAcknowledgement=fclX25CfaDlnEachPacketAcknowledgement, fmRip2IfConfAuthType=fmRip2IfConfAuthType, dcvIfPCMChannelPhysIf=dcvIfPCMChannelPhysIf, fclB3270HosClusterCluAdd=fclB3270HosClusterCluAdd, fclFrTeIsdnRemLogPortId=fclFrTeIsdnRemLogPortId, fclX25MlpLink3InterfaceId=fclX25MlpLink3InterfaceId, fmsE1Ds1ChIfLastChange=fmsE1Ds1ChIfLastChange, fmPing=fmPing, fclAsynCfgX3P05OutputFlowCtrl=fclAsynCfgX3P05OutputFlowCtrl, fclPppCfgLcpLocalMtu=fclPppCfgLcpLocalMtu, fcCtlAlteredDlciEntry=fcCtlAlteredDlciEntry, fcfLineV28DceDtr108=fcfLineV28DceDtr108, fmsFrLpVcSigProtocol=fmsFrLpVcSigProtocol, vcmAlrmSCEntry=vcmAlrmSCEntry, fmsEthInterface=fmsEthInterface, dcvIpLocalEntry=dcvIpLocalEntry, dclFrConfigurationSe=dclFrConfigurationSe, dcvVoiceGen=dcvVoiceGen, fclX25CfnSignallingTable=fclX25CfnSignallingTable, fclAsynCfgFacMaxInPacketSize=fclAsynCfgFacMaxInPacketSize, dclFrSeSigT200RetransTimer=dclFrSeSigT200RetransTimer, fcwSQOSX25CalledAddress=fcwSQOSX25CalledAddress, fclBSctProtDef2WABT=fclBSctProtDef2WABT, fcxServCircSapPacketSize=fcxServCircSapPacketSize, fcmAlrmPpPhysPort7=fcmAlrmPpPhysPort7, fclX25CfaSerCir=fclX25CfaSerCir, fciOspfVpAreaId=fciOspfVpAreaId, fmsInputCallConfPktsCounter=fmsInputCallConfPktsCounter, fclAsynX28PlusRemCfgX3P10LineFolding=fclAsynX28PlusRemCfgX3P10LineFolding)
mibBuilder.exportSymbols("PCE-MIB", fmhTechnicEthernetPresence=fmhTechnicEthernetPresence, fcxCircRvpCircuitId=fcxCircRvpCircuitId, fmeEventTable=fmeEventTable, spb2033=spb2033, products=products, vcCtlErrorTime=vcCtlErrorTime, fmRip2PeerDomain=fmRip2PeerDomain, fclX25SlpPstnBackStatus=fclX25SlpPstnBackStatus, fcwSRvcConversionAddressCheck=fcwSRvcConversionAddressCheck, fmOspf=fmOspf, vcmAlrmSvcDisplay=vcmAlrmSvcDisplay, fmStatEthOutputTrafficEntry=fmStatEthOutputTrafficEntry, fmsFrLpLmiNetProtErrors=fmsFrLpLmiNetProtErrors, fclBX780ConnLogPortId=fclBX780ConnLogPortId, fcsnaLvpTrParameters=fcsnaLvpTrParameters, vcvFxxConfDialingMode=vcvFxxConfDialingMode, fclX25CfnNegMinInPacketSize=fclX25CfnNegMinInPacketSize, dcfDataLineRts105=dcfDataLineRts105, dcvTSPCMPermLpId=dcvTSPCMPermLpId, fccRneighNeighborId=fccRneighNeighborId, dcvVoiceSuscrTransportNetwork=dcvVoiceSuscrTransportNetwork, vcmAlrmVCFamilyId=vcmAlrmVCFamilyId, dclFrSeLpConfigId=dclFrSeLpConfigId, fclFrCfcLmiDlci=fclFrCfcLmiDlci, fclX25CfaCugClosedUserGroupExt=fclX25CfaCugClosedUserGroupExt, fmOspfStandardIfMetricTable=fmOspfStandardIfMetricTable, vcvFxxConfigTable=vcvFxxConfigTable, fclX25AccSubscriberNumber=fclX25AccSubscriberNumber, fcwDataPacketsAcceptThreshold=fcwDataPacketsAcceptThreshold, fmStatSignalEntry=fmStatSignalEntry, fclSdlcLpPhysicalUnitType=fclSdlcLpPhysicalUnitType, fclX25CfnSigConvMultiCalledAddrInCall=fclX25CfnSigConvMultiCalledAddrInCall, fclFrCfcLmiN391FullStatusPollCount=fclFrCfcLmiN391FullStatusPollCount, vcmAlrmCmpTyp=vcmAlrmCmpTyp, fcmMgtFctCugChecking=fcmMgtFctCugChecking, fciRipStaticRoutesDistribution=fciRipStaticRoutesDistribution, fcxRipInFltFilterId=fcxRipInFltFilterId, fmStatEthManagementEntry=fmStatEthManagementEntry, fcvLocalVirtualPortTable=fcvLocalVirtualPortTable, frxStateChange=frxStateChange, fclFrPvcEndPointEntry=fclFrPvcEndPointEntry, fcvLocalVirtualPorts=fcvLocalVirtualPorts, fclVipHosLpRepAEot=fclVipHosLpRepAEot, fclFrCfsGenDynamicEir=fclFrCfsGenDynamicEir, fclFrTeLpLinkLayerConsolidation=fclFrTeLpLinkLayerConsolidation, fclFrCfsGenCallReturnTransmission=fclFrCfsGenCallReturnTransmission, fdpIdentPhysPortState=fdpIdentPhysPortState, dcSystem=dcSystem, fclSdlcLpSubscriberNumber=fclSdlcLpSubscriberNumber, fmsRvpConnInOctetsCounter=fmsRvpConnInOctetsCounter, cfConfigurationVersion=cfConfigurationVersion, fcwConvInStatus=fcwConvInStatus, fmuFunctionLlcOnEthernet=fmuFunctionLlcOnEthernet, fciRipNeighborIpAddress=fciRipNeighborIpAddress, frx800=frx800, fcwFrAnnexeGInternalStacksMaxCount=fcwFrAnnexeGInternalStacksMaxCount, fmsInArpVpLocalIpAddr=fmsInArpVpLocalIpAddr, fclFrSeLogPortTable=fclFrSeLogPortTable, fmhEqIdSerialNb=fmhEqIdSerialNb, fcfLineModem=fcfLineModem, dclLogicalPortEntry=dclLogicalPortEntry, fclPppBIsdnBriLocalSubsNb2=fclPppBIsdnBriLocalSubsNb2, fclX25AccPstnBackupTable=fclX25AccPstnBackupTable, fclAsynX28PlusLpMonSignalCTS=fclAsynX28PlusLpMonSignalCTS, fmsSig107=fmsSig107, fcwMaxActiveCommunications=fcwMaxActiveCommunications, fmsRvpConnStatus=fmsRvpConnStatus, fclAsynPadLogPort=fclAsynPadLogPort, vcvSnmpGenCommunityStringTrap=vcvSnmpGenCommunityStringTrap, vcmAlrmSwTyp=vcmAlrmSwTyp, fclX25CfmTransmitFlowControlEntry=fclX25CfmTransmitFlowControlEntry, fclPppPstnLpLogPortId=fclPppPstnLpLogPortId, fciIpRouteEntry=fciIpRouteEntry, cfMtbBoardSerialNumber=cfMtbBoardSerialNumber, fclX25MlpOvLogPortId=fclX25MlpOvLogPortId, fclPppCftConfigureMaxCount=fclPppCftConfigureMaxCount, fcxRipInFltStatus=fcxRipInFltStatus, fmsWanConnLocalSbNumber=fmsWanConnLocalSbNumber, fmsEthOutOctetsCounter=fmsEthOutOctetsCounter, vcFrSwL0ChanelIdentifierCID=vcFrSwL0ChanelIdentifierCID, mcx109=mcx109, vcmAlrmVCDisplay=vcmAlrmVCDisplay, fclB3270ClusterLogPort=fclB3270ClusterLogPort, fclSdlcPriClusterLogPortId=fclSdlcPriClusterLogPortId, fclAsynAutoCalls=fclAsynAutoCalls, fclFraLpCompressNegotiation=fclFraLpCompressNegotiation, vcvEMConfMaxLineSeizureAckTime=vcvEMConfMaxLineSeizureAckTime, fcxCircChecksumEnabling=fcxCircChecksumEnabling, fclPppCfgLcpMagicNumber=fclPppCfgLcpMagicNumber, fclPppCftLcpEchoRequestPeriod=fclPppCftLcpEchoRequestPeriod, fclFrPvcSnaBanT2ReceiverAckTimer=fclFrPvcSnaBanT2ReceiverAckTimer, fclX25PstnRemStatus=fclX25PstnRemStatus, dcvIfPCMChannelIfId=dcvIfPCMChannelIfId, fcwFrEventOutput=fcwFrEventOutput, fmStatMlpTable=fmStatMlpTable, fclBSctConnSubscriberNumber=fclBSctConnSubscriberNumber, dcvCASConfDtmfDigitTime=dcvCASConfDtmfDigitTime, fclSdlcSecLpLogPortId=fclSdlcSecLpLogPortId, fcsnaLvpParamN2=fcsnaLvpParamN2, fcvVpStatus=fcvVpStatus, fmsFrDlcIncomingTable=fmsFrDlcIncomingTable, fcsnaGpSdlcPuId=fcsnaGpSdlcPuId, fmsEthAutoPortSelection=fmsEthAutoPortSelection, vcCtlErrorMessage=vcCtlErrorMessage, fcfE1PhysPortTable=fcfE1PhysPortTable, fcsnaLvpTrParamBroadcastType=fcsnaLvpTrParamBroadcastType, fclX25InDIsdnRemIsdnInterfaceId=fclX25InDIsdnRemIsdnInterfaceId, fcwSDynLspRetransmissionTimer=fcwSDynLspRetransmissionTimer, fmsWanConnGrouping=fmsWanConnGrouping, fcwSClearAnalysId=fcwSClearAnalysId, fclFrCeLpInterfaceId=fclFrCeLpInterfaceId, fclX25Configurations=fclX25Configurations, fcvRvpConnInactivityTimer=fcvRvpConnInactivityTimer, fclAsynCfgX3UserP02Echo=fclAsynCfgX3UserP02Echo, vcfNumericLineType=vcfNumericLineType, dcfPhysPortId=dcfPhysPortId, fcwSbRouteId=fcwSbRouteId, vcCtlErrorIndex=vcCtlErrorIndex, fcfE1Ds1ChannelTable=fcfE1Ds1ChannelTable, fmuAccessX25PlsLineNbMax=fmuAccessX25PlsLineNbMax, cfField1=cfField1, fclAsynX28PlusRemCfgX3P15Editing=fclAsynX28PlusRemCfgX3P15Editing, fclAsynCfgX3UserP15Editing=fclAsynCfgX3UserP15Editing, fcwZoRoutingTable=fcwZoRoutingTable, fcwConvInConvertedAddr=fcwConvInConvertedAddr, fmhE1S2ModDescSoftwareVersion=fmhE1S2ModDescSoftwareVersion, vcvEMConfInterdigitTime=vcvEMConfInterdigitTime, fclAsynX28PlusParTelLpX3Mode=fclAsynX28PlusParTelLpX3Mode, fmOspfStandardAreaBdrRtrStatus=fmOspfStandardAreaBdrRtrStatus, fcmMgfStatBufferThreshold=fcmMgfStatBufferThreshold, fcmAlrmPpPhysPort3=fcmAlrmPpPhysPort3, fclFraLpInactivityCheckDelay=fclFraLpInactivityCheckDelay, cfRamSize=cfRamSize, fcfLineV28AsynOutDceSignalEntry=fcfLineV28AsynOutDceSignalEntry, fcfIsdnDTimIsdnInterfaceId=fcfIsdnDTimIsdnInterfaceId, fcsnaLvpTrParamCos=fcsnaLvpTrParamCos, vcxConfig=vcxConfig, fciRipEgpRoutesDistribution=fciRipEgpRoutesDistribution, dcvIpLocVirtualPortId=dcvIpLocVirtualPortId, fclX25CfaFacilityTable=fclX25CfaFacilityTable, fmOsiISISESAdjType=fmOsiISISESAdjType, fciOspfAreaId=fciOspfAreaId, fmOspfStandardVirtIfRtrDeadInterval=fmOspfStandardVirtIfRtrDeadInterval, dcvTftpTable=dcvTftpTable, fclFrCfsSignallingEntry=fclFrCfsSignallingEntry, fmeEventEntry=fmeEventEntry, fcwSQOSX25Table=fcwSQOSX25Table, fcvRvpConversionAddressCheck=fcvRvpConversionAddressCheck, dcmAlrmSyncEntry=dcmAlrmSyncEntry, fmRip2IfConfAddress=fmRip2IfConfAddress, fclAsynCfgFacMaxOutThroughputClass=fclAsynCfgFacMaxOutThroughputClass, fmStatFrameRelay=fmStatFrameRelay, fcwDnicRoutingTable=fcwDnicRoutingTable, fcSna=fcSna, fciEgpTargetAsNumber=fciEgpTargetAsNumber, fclAsynX28PlusLpMonSignalDSR=fclAsynX28PlusLpMonSignalDSR, fmOspfStandardVirtNbrIpAddr=fmOspfStandardVirtNbrIpAddr, fciOspfExportingGroup=fciOspfExportingGroup, fdpControl=fdpControl, fclX25CfaNegMinOutPacketSize=fclX25CfaNegMinOutPacketSize, cf12NcNumber35=cf12NcNumber35, dcvRemoteConfTable=dcvRemoteConfTable, fclAsynCfgX3Part2ConfigId=fclAsynCfgX3Part2ConfigId, fmsBrdgTrafOutServCounter=fmsBrdgTrafOutServCounter, dcvIfPCMChannelStatus=dcvIfPCMChannelStatus, fcbStpHelloTime=fcbStpHelloTime, fciOspfVlRetransmitInterval=fciOspfVlRetransmitInterval, vcSystem=vcSystem, fclAsynAutoTransProfile=fclAsynAutoTransProfile, fmOspfStandardNbrOptions=fmOspfStandardNbrOptions, fmStatPppProtocolStatusTable=fmStatPppProtocolStatusTable, fmsEthTdrState=fmsEthTdrState, fmStatPppPhysLineEntry=fmStatPppPhysLineEntry, fcmAlarms=fcmAlarms, fclFrCfsSigT316RestartAcknowledgeTimer=fclFrCfsSigT316RestartAcknowledgeTimer, fmStatPppAuthenticationTable=fmStatPppAuthenticationTable, fmeFamilyEntry=fmeFamilyEntry, vcfDataLineEntry=vcfDataLineEntry, vclFrCeLogPortTable=vclFrCeLogPortTable, vclFrSeLogPortTable=vclFrSeLogPortTable, fclBSctLpNumberOfSYN=fclBSctLpNumberOfSYN, fcwSRvcConversionIncomingCall=fcwSRvcConversionIncomingCall, fmsInputIntrPktsCounter=fmsInputIntrPktsCounter, fclFrTeParGenVoiceMaxTransitDelay=fclFrTeParGenVoiceMaxTransitDelay, fciOspfVpRouterDeadInterval=fciOspfVpRouterDeadInterval, fclX25SlpLogPortId=fclX25SlpLogPortId, fclAsynAutoTransTranscoding=fclAsynAutoTransTranscoding, fciOspfAreaRangeIpMask=fciOspfAreaRangeIpMask, vcvEMConfId=vcvEMConfId, fclAsynCfgFacReverseCharging=fclAsynCfgFacReverseCharging, fcwAddrConvIncomingCallTable=fcwAddrConvIncomingCallTable, dcvTftpStatus=dcvTftpStatus, fmeTrblEventType=fmeTrblEventType, dclFrSeSigConfigId=dclFrSeSigConfigId, vcmAlrmTftpTable=vcmAlrmTftpTable, fcsnaGpRoutingTable=fcsnaGpRoutingTable, fmStatS2BChannelTable=fmStatS2BChannelTable, fclPppSerAutoCompression=fclPppSerAutoCompression, fmuAccessPadLineNbMax=fmuAccessPadLineNbMax, fmStatE1Ds1ChannelTable=fmStatE1Ds1ChannelTable, fmRip2GlobalGroup=fmRip2GlobalGroup, vcvVoiceTransMaxPayLoadNumber=vcvVoiceTransMaxPayLoadNumber, fclX25MlpIsdnOverflowTable=fclX25MlpIsdnOverflowTable, vcvVirtualPortEntry=vcvVirtualPortEntry, fcfIsdnDSigCalledSubAddressCheck=fcfIsdnDSigCalledSubAddressCheck, fmuFunctionIpxRouter=fmuFunctionIpxRouter, fmsInArpVpInRequests=fmsInArpVpInRequests, fmOspfStandardNbrLSRetransQLen=fmOspfStandardNbrLSRetransQLen, vcwEquipRemoteConfPortAddr=vcwEquipRemoteConfPortAddr, fmsFrLpInExcessFrames=fmsFrLpInExcessFrames, dcvRemoteConfStatus=dcvRemoteConfStatus, fclSdlcSecLogPortEntry=fclSdlcSecLogPortEntry, fciSnmpManagerIpAddress=fciSnmpManagerIpAddress, fcxInstance=fcxInstance, fcxServSapOutFltStatus=fcxServSapOutFltStatus, manager=manager, fmsFrLpIncomingTable=fmsFrLpIncomingTable, fciSnmpManagerStatus=fciSnmpManagerStatus, vcvSnmpManagerName=vcvSnmpManagerName, fmsFrcStorageCir=fmsFrcStorageCir, fclAsynCfgConfigEntry=fclAsynCfgConfigEntry, fclAsynCfgStatus=fclAsynCfgStatus, fclX25InDBackupEnabling=fclX25InDBackupEnabling, fclSdlcLpInterfaceId=fclSdlcLpInterfaceId, fmsFrLpLmiNetN392=fmsFrLpLmiNetN392, vcvVoiceTransQosBc=vcvVoiceTransQosBc, fcwSRvcKWindowSize=fcwSRvcKWindowSize, dcfPhysicalPortTable=dcfPhysicalPortTable, cfField2=cfField2, fciFlowDestMask=fciFlowDestMask, dcvVoiceProfId=dcvVoiceProfId, fclX25CfaNegWindowSize=fclX25CfaNegWindowSize, fciLvpEncapsulation=fciLvpEncapsulation, fclX25CfaDlnLowestTwoWayChannel=fclX25CfaDlnLowestTwoWayChannel, fciRipDistributionTimer=fciRipDistributionTimer, fmStatFrLineEntry=fmStatFrLineEntry, dcSysConfHour=dcSysConfHour, fmhTechnicLineNb=fmhTechnicLineNb, fclVipHosElemStatus=fclVipHosElemStatus, dcvVoiceSuscrInsSuffix=dcvVoiceSuscrInsSuffix, fclX25CfaDlnLowestOutgoingChannel=fclX25CfaDlnLowestOutgoingChannel, fcsnaGpRemPuPuId=fcsnaGpRemPuPuId, vcvVoiceSwTable=vcvVoiceSwTable, fclFraLpCompressScrambling=fclFraLpCompressScrambling, fclB3270LpNoAnswerWatchDog=fclB3270LpNoAnswerWatchDog, fclX25SlpInterNodeEntry=fclX25SlpInterNodeEntry, fcfIsdnDSigIsdnInterfaceId=fcfIsdnDSigIsdnInterfaceId, fcxRoutAddrFltCircuitId=fcxRoutAddrFltCircuitId, fclX25CfaSigConversionIncomingCall=fclX25CfaSigConversionIncomingCall, fmsEthManLineId=fmsEthManLineId, fcxRipInFltMask=fcxRipInFltMask, fmPingPacketSize=fmPingPacketSize, fciFlowAddrSubstituteEntry=fciFlowAddrSubstituteEntry, fciRipNeighborInput=fciRipNeighborInput)
mibBuilder.exportSymbols("PCE-MIB", fmsInArpVpInResponses=fmsInArpVpInResponses, fmsFrLpLmiUserT391=fmsFrLpLmiUserT391, vcvVoiceSuscrOrderNumber=vcvVoiceSuscrOrderNumber, fclB3270HosLpLineWatchDog=fclB3270HosLpLineWatchDog, fclBX780LpMessageRetryNumber=fclBX780LpMessageRetryNumber, fclFrCfsGenBookingVbrRtThreshold=fclFrCfsGenBookingVbrRtThreshold, dcmAlrmVCDisplay=dcmAlrmVCDisplay, fclFrPvcQualityOfServiceTable=fclFrPvcQualityOfServiceTable, fclAsynX28PlusRemCfgX3P14LfPadding=fclAsynX28PlusRemCfgX3P14LfPadding, fclPppSerLpCir=fclPppSerLpCir, fclX25AccSwLogPortId=fclX25AccSwLogPortId, fclX25CfnNegInputFastSelect=fclX25CfnNegInputFastSelect, fcwFrameRelay=fcwFrameRelay, vcvIpLocMinimumRecallTimer=vcvIpLocMinimumRecallTimer, fclFraPvcSubscriberNumber=fclFraPvcSubscriberNumber, fclFrSeIsdnBackupEntry=fclFrSeIsdnBackupEntry, fmsFrLpLogPortId=fmsFrLpLogPortId, fclAsynCfgLinkConfigId=fclAsynCfgLinkConfigId, fclFrTeLpInterfaceId=fclFrTeLpInterfaceId, fclX25SlpPstnBackupEntry=fclX25SlpPstnBackupEntry, fmOspfStandardRxNewLSAs=fmOspfStandardRxNewLSAs, fclAsynCfgX3P08OutputDiscard=fclAsynCfgX3P08OutputDiscard, dcmAlrmTftpDisplay=dcmAlrmTftpDisplay, fmOspfStandardRouterId=fmOspfStandardRouterId, dcvSnmpGenAuthenticationFailureTrap=dcvSnmpGenAuthenticationFailureTrap, fcbBridgingBetweenRemoteVp=fcbBridgingBetweenRemoteVp, fclFrCfsGenUnuseTimer=fclFrCfsGenUnuseTimer, fcfLineV35DteInterfaceId=fcfLineV35DteInterfaceId, fclFrSeIsdnRemRemotePeerId=fclFrSeIsdnRemRemotePeerId, fcfPhysicalPortTable=fcfPhysicalPortTable, fclX25CfnNegMinOutPacketSize=fclX25CfnNegMinOutPacketSize, fclAsynCfgX3UserP09CrPadding=fclAsynCfgX3UserP09CrPadding, fmsE1Ds1ChIfDescr=fmsE1Ds1ChIfDescr, fclFraLpDeDiscardThreshold=fclFraLpDeDiscardThreshold, fcwLoadAndTrafficSummingPeriod=fcwLoadAndTrafficSummingPeriod, fclFrTeParGenNetworkBandwidth=fclFrTeParGenNetworkBandwidth, cfConfigurationDate=cfConfigurationDate, fclX25AccPstnBackPstnNumber=fclX25AccPstnBackPstnNumber, fmOspfStandardStubAreaEntry=fmOspfStandardStubAreaEntry, fclSdlcPriClusterEntry=fclSdlcPriClusterEntry, fclHdlcLpReliableVc=fclHdlcLpReliableVc, fmsBootPClientGatewayIpAddr=fmsBootPClientGatewayIpAddr, vcmAlrmLMIEntry=vcmAlrmLMIEntry, vcvVoiceProfileTable=vcvVoiceProfileTable, fclFrPvcQosInMinCir=fclFrPvcQosInMinCir, fmsEthJabber=fmsEthJabber, fclFrTeIsdnRemPriority=fclFrTeIsdnRemPriority, fmOspfStandardIfIpAddress=fmOspfStandardIfIpAddress, fclB3270CluClusterCluAdd=fclB3270CluClusterCluAdd, fclPppPstnAccess=fclPppPstnAccess, fclX25AccX25AccessConfigId=fclX25AccX25AccessConfigId, fclFrPvcSnaBanLinkId=fclFrPvcSnaBanLinkId, fclSdlcLpWindowSize=fclSdlcLpWindowSize, cfSoftwareList=cfSoftwareList, dclLogPortType=dclLogPortType, fciRouteStatus=fciRouteStatus, fmOsiISISSysInPdu=fmOsiISISSysInPdu, frxConfig=frxConfig, fcxRoutAddrFltField=fcxRoutAddrFltField, fclAsynAutoTransAutoTermMode=fclAsynAutoTransAutoTermMode, fclAsynX28PlusRemCfgX3Part2ConfigId=fclAsynX28PlusRemCfgX3Part2ConfigId, fclFraLpReliableVc=fclFraLpReliableVc, fmStatFrCircuitEntry=fmStatFrCircuitEntry, fclX25SlpInterNode=fclX25SlpInterNode, fcwAddrConvMultiCriterionOutCallTable=fcwAddrConvMultiCriterionOutCallTable, fmsEthPolarityCorrection=fmsEthPolarityCorrection, fclX25AccIsdnRemotePeerEntry=fclX25AccIsdnRemotePeerEntry, fclAsynX28PlusRemCfgX3P17LineDelete=fclAsynX28PlusRemCfgX3P17LineDelete, fclFrTeParGenDlcSetupAlarmThreshold=fclFrTeParGenDlcSetupAlarmThreshold, fcfLineV28AsynInDteSigMonitored1=fcfLineV28AsynInDteSigMonitored1, fmOsiISISSysLSPL2DbaseOloads=fmOsiISISSysLSPL2DbaseOloads, fclPppBIsdnRemotePeerEntry=fclPppBIsdnRemotePeerEntry, fmsEthOutLineId=fmsEthOutLineId, fciLvpVirtualPortId=fciLvpVirtualPortId, fmStatLineTable=fmStatLineTable, fmOspfStandardIfMetricMetric=fmOspfStandardIfMetricMetric, fcwRoutLogPortId=fcwRoutLogPortId, fmsIpLanOutOctetsIpCounter=fmsIpLanOutOctetsIpCounter, fclFrCfcGenInactivityTimer=fclFrCfcGenInactivityTimer, fcvLvpFiltering=fcvLvpFiltering, dclFrLmiParaT391LinkIntegPollTimer=dclFrLmiParaT391LinkIntegPollTimer, fcxServSapInFltFiltering=fcxServSapInFltFiltering, hpb1025_12W=hpb1025_12W, dcvTftpEntry=dcvTftpEntry, fclPppBIsdnLocalBriTable=fclPppBIsdnLocalBriTable, fmsStateMlpTrunkState=fmsStateMlpTrunkState, fclSdlcLpCir=fclSdlcLpCir, fcfLineV28DceRts105=fcfLineV28DceRts105, vcFrSwL1Dlci=vcFrSwL1Dlci, vcControl=vcControl, fclPppCfgNcpClnp=fclPppCfgNcpClnp, dcvVoiceTransEncapsulationMode=dcvVoiceTransEncapsulationMode, fmsFrLpOutLocalCongBecnFrames=fmsFrLpOutLocalCongBecnFrames, vcLogicalPorts=vcLogicalPorts, fmStatControl=fmStatControl, fclB3270CluCallCallAddr=fclB3270CluCallCallAddr, fcmAlrmEvtEvent3=fcmAlrmEvtEvent3, fclX25AccPvcStatus=fclX25AccPvcStatus, fmOsiISISCircIDFieldLenMismatches=fmOsiISISCircIDFieldLenMismatches, fclFrTeIsdnRemotePeerEntry=fclFrTeIsdnRemotePeerEntry, fmsIpTrafIcmpOutMsgsCounter=fmsIpTrafIcmpOutMsgsCounter, fcfLineV28AsynOutDceTi142=fcfLineV28AsynOutDceTi142, atLan=atLan, fclAsynLscpLpLink=fclAsynLscpLpLink, fmsRvpConnLocalSbNumber=fmsRvpConnLocalSbNumber, fclAsynVdxLpNui=fclAsynVdxLpNui, dcwEquipVoiceRoutingServicePortAddr=dcwEquipVoiceRoutingServicePortAddr, cfFactoryReturnDate3=cfFactoryReturnDate3, fcxServSapInFltServiceType=fcxServSapInFltServiceType, fclX25AccPvcLocalLogChannel=fclX25AccPvcLocalLogChannel, fcmMgtFctCugEntry=fcmMgtFctCugEntry, fclFraLmiDlci=fclFraLmiDlci, netBackboneProduct=netBackboneProduct, fclX25InBRemPeerId=fclX25InBRemPeerId, fcfLineV35DceSignalEntry=fcfLineV35DceSignalEntry, fclAsynX28PlusRemCfgX3P21Parity=fclAsynX28PlusRemCfgX3P21Parity, fclAsynCfgX3UserP08OutputDiscard=fclAsynCfgX3UserP08OutputDiscard, fclX25SlpPstnBackX25InterNodeConfigId=fclX25SlpPstnBackX25InterNodeConfigId, fclFrSnaBan=fclFrSnaBan, fcwZoRouteId=fcwZoRouteId, fmsFrLineLmiStatus=fmsFrLineLmiStatus, fmsS2BChProto=fmsS2BChProto, fclX25AccPrivX25FieldsSave=fclX25AccPrivX25FieldsSave, dcvVoiceProfNoiseFramesPeriodicity=dcvVoiceProfNoiseFramesPeriodicity, fcCtlAlteredIfEntry=fcCtlAlteredIfEntry, fcwAddrConvMultiCriterionInCallTable=fcwAddrConvMultiCriterionInCallTable, fclBscSctLogPort=fclBscSctLogPort, fmsEthOutSQETestErrorsCounter=fmsEthOutSQETestErrorsCounter, fcwSCompModule1CompressedVcCount=fcwSCompModule1CompressedVcCount, fclHdlcLpCrcTransport=fclHdlcLpCrcTransport, fcbBrdgMapMacAddress=fcbBrdgMapMacAddress, fcfLineDVBInterfaceId=fcfLineDVBInterfaceId, vcvIpLocSvcClearCallTimer=vcvIpLocSvcClearCallTimer, fclAsynX28PlusLpFullDuplex=fclAsynX28PlusLpFullDuplex, dcvCASConfDigitReceptionTimeOut=dcvCASConfDigitReceptionTimeOut, fclX25MlpLink4InterfaceId=fclX25MlpLink4InterfaceId, dcvTftpName=dcvTftpName, fclX25Mlp=fclX25Mlp, fclX25MlpMwMultilinkWindowSize=fclX25MlpMwMultilinkWindowSize, fciNetToMediaStatus=fciNetToMediaStatus, fmsFrDlcOutFecnFrames=fmsFrDlcOutFecnFrames, fclFraPvcStatus=fclFraPvcStatus, fclX25CfaNegMaxInPacketSize=fclX25CfaNegMaxInPacketSize, vclFrTeLogPortEntry=vclFrTeLogPortEntry, dcvCASConfDelayBeforeDialing=dcvCASConfDelayBeforeDialing, fclFrCfcLmiParameterTable=fclFrCfcLmiParameterTable, fcbBrdgVpVirtualPortId=fcbBrdgVpVirtualPortId, fclLogPortType=fclLogPortType, fciTelnetPwdP5=fciTelnetPwdP5, vcmAlrmSwTable=vcmAlrmSwTable, fclAsynLogPortEntry=fclAsynLogPortEntry, fcfIsdnRemRemotePeerId=fcfIsdnRemRemotePeerId, fcfIsdnDSigUnuseTimer=fcfIsdnDSigUnuseTimer, fcsnaLvpParamLinkType=fcsnaLvpParamLinkType, fclAsynCfgX3P04IdleTimerDelay=fclAsynCfgX3P04IdleTimerDelay, vcfDataLineInterfaceId=vcfDataLineInterfaceId, vclFrCommunicationEquipment=vclFrCommunicationEquipment, fclX25MlpIsdnRemPeerId=fclX25MlpIsdnRemPeerId, fciRemIpAddress=fciRemIpAddress, fclPppBIsdnRemX121Addr=fclPppBIsdnRemX121Addr, dcvVoiceProfCESModeAverageDelay=dcvVoiceProfCESModeAverageDelay, fclX25MlpIsdnOverLogPortId=fclX25MlpIsdnOverLogPortId, frxManagement=frxManagement, fcwSCUDProfilesStatus=fcwSCUDProfilesStatus, fcsnaLvpTrMacAddressTrans=fcsnaLvpTrMacAddressTrans, fclAsynCfgX3P18LineDisplay=fclAsynCfgX3P18LineDisplay, vcvFxxConfMinRxRecallSignalDuration=vcvFxxConfMinRxRecallSignalDuration, vcmAlrmVCTrapSend=vcmAlrmVCTrapSend, fcwAddrConvCondOutgoingCallTable=fcwAddrConvCondOutgoingCallTable, fclFrTeParGenBookingUbrThreshold=fclFrTeParGenBookingUbrThreshold, fclFrCfcSigT305DisconnectResponseTimer=fclFrCfcSigT305DisconnectResponseTimer, fclX25CfnNegOutputFastSelect=fclX25CfnNegOutputFastSelect, fcsnaLvpTrParamCompressMultiPacketsTimer=fcsnaLvpTrParamCompressMultiPacketsTimer, fcxServSapOutFltServiceName=fcxServSapOutFltServiceName, fclFrCfsGenPredictionRoundTripDelay=fclFrCfsGenPredictionRoundTripDelay, fmRip2IfConfSend=fmRip2IfConfSend, fclAsynLpInterfaceId=fclAsynLpInterfaceId, fciRipEgpRoutesDistributionEntry=fciRipEgpRoutesDistributionEntry, fclX25MlpLink1InterfaceId=fclX25MlpLink1InterfaceId, dclFrSeLpLogPortId=dclFrSeLpLogPortId, dcmAlrmGenEntry=dcmAlrmGenEntry, vcvFxxConfSigChannelDiscTimeOut=vcvFxxConfSigChannelDiscTimeOut, fclFrCeParGenLogPortId=fclFrCeParGenLogPortId, fmsMlpLineType=fmsMlpLineType, fclFrTeLogPortTable=fclFrTeLogPortTable, fmeEvtEventIndex=fmeEvtEventIndex, fciOspfAreaRangeRestrict=fciOspfAreaRangeRestrict, fmOsiCLNPSysErrMemFails=fmOsiCLNPSysErrMemFails, fdpModemManagement=fdpModemManagement, fcfLineV28AsynInDteEnablingSig1=fcfLineV28AsynInDteEnablingSig1, fcwSRvcRestoreMinimumRecallTimer=fcwSRvcRestoreMinimumRecallTimer, fcvLvpFltFilterStatus=fcvLvpFltFilterStatus, fclAsynCfgX3UserP05OutputFlowCtrl=fclAsynCfgX3UserP05OutputFlowCtrl, dcfNumericLineInterfaceId=dcfNumericLineInterfaceId, fclSdlcPriLpPollingGroupResponse=fclSdlcPriLpPollingGroupResponse, fmsFrLpOutLocalCongDiscards=fmsFrLpOutLocalCongDiscards, fclAsynX28PlusRemCfgX3P05OutputFlowCtrl=fclAsynX28PlusRemCfgX3P05OutputFlowCtrl, fclAsynX28PlusCfgTELENETConfigId=fclAsynX28PlusCfgTELENETConfigId, fcmMgtFctCugClosedUserGroupInt=fcmMgtFctCugClosedUserGroupInt, dclFrSeSigT308ReleaseResponseTimer=dclFrSeSigT308ReleaseResponseTimer, dcmAlrmTftpEntry=dcmAlrmTftpEntry, fcsModuleIpxRouterInit=fcsModuleIpxRouterInit, fcwSbRoutingEntry=fcwSbRoutingEntry, fclVipHosElementEntry=fclVipHosElementEntry, fclPppBIsdnRemCallRetryCount=fclPppBIsdnRemCallRetryCount, fciOspfAseExportRipType=fciOspfAseExportRipType, vcvProfileTone=vcvProfileTone, fmuAccessBsc2780LineNbMax=fmuAccessBsc2780LineNbMax, netConcentratorProduct=netConcentratorProduct, fclAsynCfgFacClosedUserGroup=fclAsynCfgFacClosedUserGroup, fclX25CfaDataLinkNetworkTable=fclX25CfaDataLinkNetworkTable, fcfLineV28AsynInDceSigMonitored1=fcfLineV28AsynInDceSigMonitored1, fclFrPvcTunFrseConfiguration=fclFrPvcTunFrseConfiguration, npx09=npx09, fclAsynMneTransTranscoding=fclAsynMneTransTranscoding, fclB3270CluCallStatus=fclB3270CluCallStatus, fclAsynCfgConnLinkTable=fclAsynCfgConnLinkTable, fclB3270CluCallEntry=fclB3270CluCallEntry, dcvTSPCMSw=dcvTSPCMSw, fciRouteNextHop=fciRouteNextHop, vcwWanRouteLogPortId=vcwWanRouteLogPortId, fcxServSapInFltServiceNameType=fcxServSapInFltServiceNameType, fmhEqIdFactoryReleaseDate=fmhEqIdFactoryReleaseDate, fclVipHosLogPortEntry=fclVipHosLogPortEntry, fcvRvpConvMultiCalledAddrInCall=fcvRvpConvMultiCalledAddrInCall, fmuFunctionRight=fmuFunctionRight, fclX25CfaSigT11CallResponseTimer=fclX25CfaSigT11CallResponseTimer, fmsBrdgTrafOutPktsCounter=fmsBrdgTrafOutPktsCounter, fclX25PstnRemotePeerEntry=fclX25PstnRemotePeerEntry, fclX25CfaPackPrivateZoSb=fclX25CfaPackPrivateZoSb, fclVipHosElementId=fclVipHosElementId, fclFrPvcSnaBanLinkType=fclFrPvcSnaBanLinkType, dcvCASConfDialingTimeOut=dcvCASConfDialingTimeOut, dcvRemNetIpAddress=dcvRemNetIpAddress, fmsIpCluVirtualIpAddress=fmsIpCluVirtualIpAddress, fclX25CfaFacInputUnknownFacility=fclX25CfaFacInputUnknownFacility, fclAsynAutoDiscardCharDuringTimer=fclAsynAutoDiscardCharDuringTimer, dcvVoiceTransProfileId=dcvVoiceTransProfileId, fclVipHosLpLogPortId=fclVipHosLpLogPortId, fclFrCfcEiCodCallingNumPlanId=fclFrCfcEiCodCallingNumPlanId, fclHdlcAccessLogPort=fclHdlcAccessLogPort, fciFlowSubstDestIpAddress=fciFlowSubstDestIpAddress, fcxCircuitEntry=fcxCircuitEntry, fdpModRespElement=fdpModRespElement, fclFrPvcTunOutCir=fclFrPvcTunOutCir, vcvEMConfMinLineSeizureAckTime=vcvEMConfMinLineSeizureAckTime, dclFrTeLpInterfaceId=dclFrTeLpInterfaceId, fcxServCircSapPace=fcxServCircSapPace, fclAsynLpConfigId=fclAsynLpConfigId, fclVipHosStatStationAddress=fclVipHosStatStationAddress, dcmAlrmVCTable=dcmAlrmVCTable, fcsnaLvpParamBe=fcsnaLvpParamBe, dcvTSPCMSwCallType=dcvTSPCMSwCallType, fclB3270CluLpReconnectionType=fclB3270CluLpReconnectionType)
mibBuilder.exportSymbols("PCE-MIB", fmRip2IfStatSentUpdates=fmRip2IfStatSentUpdates, vclFrSeSignallingEntry=vclFrSeSignallingEntry, fclX25CfaNegDefInThroughputClass=fclX25CfaNegDefInThroughputClass, fmsFrLpAddrDlciLen=fmsFrLpAddrDlciLen, cpcFileTransfer=cpcFileTransfer, fmsCtrlResetTime=fmsCtrlResetTime, fclAsynLscpLpLogPortId=fclAsynLscpLpLogPortId, cfReleaseDate=cfReleaseDate, fcxRipOutputFilteringTable=fcxRipOutputFilteringTable, fciTelnetPwdP1=fciTelnetPwdP1, fmOsiISISCircMaxAreaAddrMismatches=fmOsiISISCircMaxAreaAddrMismatches, vcmAlrmLMIDisplay=vcmAlrmLMIDisplay, dcvVoicePhysPortConnector=dcvVoicePhysPortConnector, fclX25AccPvcFacThroughputClass=fclX25AccPvcFacThroughputClass, fmsFrLpLmiUserChanInactive=fmsFrLpLmiUserChanInactive, fciOspfAreaAuthType=fciOspfAreaAuthType, fmsIpCluLastChange=fmsIpCluLastChange, vcvVoiceLogicalPortEntry=vcvVoiceLogicalPortEntry, vcvFxxLpEntry=vcvFxxLpEntry, dcVirtualPorts=dcVirtualPorts, fcwConvMultiOutConvID=fcwConvMultiOutConvID, vcvFxxRingEntry=vcvFxxRingEntry, vcvTftpIpAddress=vcvTftpIpAddress, fciEgpNeighborAsNumber=fciEgpNeighborAsNumber, vclFrConfigurationTe=vclFrConfigurationTe, fcvLvpFltFilteringVirtualPortId=fcvLvpFltFilteringVirtualPortId, vcwABPvcLpEntry=vcwABPvcLpEntry, fcsnaGpRoutingEntry=fcsnaGpRoutingEntry, fmOsiESISCircuitTable=fmOsiESISCircuitTable, fcfLineV35DteSyn=fcfLineV35DteSyn, vcvVoiceProfSilenceDetectionLevel=vcvVoiceProfSilenceDetectionLevel, fclVipLpEmulationType=fclVipLpEmulationType, fmOspfStandardIfMetricEntry=fmOspfStandardIfMetricEntry, fclPppCfaRemotePeerEntry=fclPppCfaRemotePeerEntry, fclFrPvcX25InterNodeConfigId=fclFrPvcX25InterNodeConfigId, mcx212=mcx212, fclX25CfaNegMaxOutWindowSize=fclX25CfaNegMaxOutWindowSize, vcFrSwL0Dlci=vcFrSwL0Dlci, fclAsynCfgLinkBitCount=fclAsynCfgLinkBitCount, fclFrCfcLmiT391LinkIntegPollTimer=fclFrCfcLmiT391LinkIntegPollTimer, fcfIsdnBasicRateInterfaceTable=fcfIsdnBasicRateInterfaceTable, fclFrCfsModificationCount=fclFrCfsModificationCount, fclAsynAutoStatus=fclAsynAutoStatus, fciRipVpMetricOut=fciRipVpMetricOut, fmStatRemoteVirtualPorts=fmStatRemoteVirtualPorts, fdpModResponseEntry=fdpModResponseEntry, fcsnaLvpTrParamCirMin=fcsnaLvpTrParamCirMin, fmsBootP=fmsBootP, fclX25CfmFlowCtrlMaxWindowSize=fclX25CfmFlowCtrlMaxWindowSize, fclAsynchronousAccessLogPort=fclAsynchronousAccessLogPort, fmuAccessRnisChannelBNbMax=fmuAccessRnisChannelBNbMax, fcwSQOSProfilesEntry=fcwSQOSProfilesEntry, fclFrPvcSnaBanPuId=fclFrPvcSnaBanPuId, fmsFrLpSvcDlcInitialized=fmsFrLpSvcDlcInitialized, dcmAlrmVCTyp=dcmAlrmVCTyp, fclFrTeLpBackupTimer=fclFrTeLpBackupTimer, fclX25CfaFacConfigId=fclX25CfaFacConfigId, fcwSRvcFirstDataPacketTimer=fcwSRvcFirstDataPacketTimer, fmsIpTrafNoRoutesCounter=fmsIpTrafNoRoutesCounter, fclAsynCfgSerCompressNegociation=fclAsynCfgSerCompressNegociation, fmOspfStandardASBdrRtrStatus=fmOspfStandardASBdrRtrStatus, fcxServCircSapCircuitId=fcxServCircSapCircuitId, fclBSctConnLogPortId=fclBSctConnLogPortId, fcmAlrmPpPhysPort4=fcmAlrmPpPhysPort4, fciOspf=fciOspf, fclAsynVdxLpPceNackTimer=fclAsynVdxLpPceNackTimer, fclSdlcSecClusterTable=fclSdlcSecClusterTable, fclX25InDLogPortId=fclX25InDLogPortId, vcvDialingReceptEntry=vcvDialingReceptEntry, fclFrameRelayBackup=fclFrameRelayBackup, fmPingAvgRoundTrip=fmPingAvgRoundTrip, vcvEMConfToneProfile=vcvEMConfToneProfile, fmsSig140=fmsSig140, dcvDialRxStatus=dcvDialRxStatus, fclBSctConnMinimumRecallTimer=fclBSctConnMinimumRecallTimer, fcwSQOSX25Cos=fcwSQOSX25Cos, fclX25CfnNegDefInWindowSize=fclX25CfnNegDefInWindowSize, fclPppConfig=fclPppConfig, fclAsynLpSubscriberNumber=fclAsynLpSubscriberNumber, vclFrSeSigT200RetransTimer=vclFrSeSigT200RetransTimer, fcCtlAlteredLpId=fcCtlAlteredLpId, fciTelnetPwdP0=fciTelnetPwdP0, fclVipHosStationTable=fclVipHosStationTable, fclFrCfcSigT303SetupResponseTimer=fclFrCfcSigT303SetupResponseTimer, dcvCASConfMinLineSeizureAckTime=dcvCASConfMinLineSeizureAckTime, fclX25CfaSerConfigId=fclX25CfaSerConfigId, fclFrCeLpLmi=fclFrCeLpLmi, fciOspfAseExportRipMetric=fciOspfAseExportRipMetric, vcfDataLineTable=vcfDataLineTable, fclPppPstnLogPortEntry=fclPppPstnLogPortEntry, fclVipCluElemCalledAddr=fclVipCluElemCalledAddr, fcxRipOutFltMask=fcxRipOutFltMask, fmsIpCluOperStatus=fmsIpCluOperStatus, fclPppBIsdnBriStatus=fclPppBIsdnBriStatus, fmsSigState=fmsSigState, fclX25MlpOvOverflowThreshold=fclX25MlpOvOverflowThreshold, fcfIsdnPrimaryRateInterfaceTable=fcfIsdnPrimaryRateInterfaceTable, fclBX780IdentStatus=fclBX780IdentStatus, fclX25CfaSignallingTable=fclX25CfaSignallingTable, fcmMgfAlarmsSubscriber1=fcmMgfAlarmsSubscriber1, fcfLineV28AsynInDceSigMonitored2=fcfLineV28AsynInDceSigMonitored2, fclX25CfnDataLinkNetworkEntry=fclX25CfnDataLinkNetworkEntry, fclX25MlpPstnOvLogPortId=fclX25MlpPstnOvLogPortId, fclX25MlpTns3Level3CheckTimer=fclX25MlpTns3Level3CheckTimer, fcfLineModemManagement=fcfLineModemManagement, fcsnaGpX25Status=fcsnaGpX25Status, fcfLineModemTable=fcfLineModemTable, vcvVirtualPortTable=vcvVirtualPortTable, fclFrPvcQosOutCir=fclFrPvcQosOutCir, fciOspfAreaRangesEntry=fciOspfAreaRangesEntry, fmsInArpVirtualPortTable=fmsInArpVirtualPortTable, fclFrTeLpFragFrameSize=fclFrTeLpFragFrameSize, fcfLineModOutputXidStringId=fcfLineModOutputXidStringId, fcwSCUDProfilesId=fcwSCUDProfilesId, cfFlashSize=cfFlashSize, dcwABPvcLpTable=dcwABPvcLpTable, fcfIsdnRemIsdnNumber=fcfIsdnRemIsdnNumber, fmsEthOutErrCtsLossCounter=fmsEthOutErrCtsLossCounter, fcmMgfActName=fcmMgfActName, fcxRoutingInformationProtocol=fcxRoutingInformationProtocol, fclAsynAutoLogPortId=fclAsynAutoLogPortId, fcfLineV11DceInterfaceId=fcfLineV11DceInterfaceId, fciOspfAseExportStaticsMetric=fciOspfAseExportStaticsMetric, fciOspfVirtualPortsEntry=fciOspfVirtualPortsEntry, fmsPppProtoClnpNcpDiag=fmsPppProtoClnpNcpDiag, fcvRvpConversionAimedPoint=fcvRvpConversionAimedPoint, fmsFrLpOutgoingEntry=fmsFrLpOutgoingEntry, vcmAlrmGenDisplay=vcmAlrmGenDisplay, fclBX780LpSurveyTimer=fclBX780LpSurveyTimer, fclFrTeIsdnBackLogPortId=fclFrTeIsdnBackLogPortId, fclX25CfnSerConfigId=fclX25CfnSerConfigId, fclX25CfnSerX29Reselection=fclX25CfnSerX29Reselection, fcvVpVirtualPortId=fcvVpVirtualPortId, fclAsynAutoTransClearHangUp=fclAsynAutoTransClearHangUp, fclSdlcPriLpLinkType=fclSdlcPriLpLinkType, fciSnmpManagerTrapsUdpPort=fciSnmpManagerTrapsUdpPort, fmsFrLpInErrors=fmsFrLpInErrors, fmOsiCLNPCircuitTable=fmOsiCLNPCircuitTable, fmRip2IfStatRcvBadPackets=fmRip2IfStatRcvBadPackets, fdpCtrlCommand=fdpCtrlCommand, dcvVoiceSuscriberTable=dcvVoiceSuscriberTable, fclAsynMneFacThroughputClass=fclAsynMneFacThroughputClass, vcvFxxRingMaxRingingTime=vcvFxxRingMaxRingingTime, fcmMgfStatSummingPeriod=fcmMgfStatSummingPeriod, fcfIsdnDSigLowLayerCompatibility=fcfIsdnDSigLowLayerCompatibility, dcvToneEnable=dcvToneEnable, fmsIpTrafInReceivesCounter=fmsIpTrafInReceivesCounter, fclX25CfaSerCompressScrambling=fclX25CfaSerCompressScrambling, fclAsynCfgFacDefInWindowSize=fclAsynCfgFacDefInWindowSize, dcmAlrmCmpDisplay=dcmAlrmCmpDisplay, fclAsynPadLpSpeedDetection=fclAsynPadLpSpeedDetection, fcwAddrConvMultiCriterionOutCallEntry=fcwAddrConvMultiCriterionOutCallEntry, fcxCircuitTable=fcxCircuitTable, dcfNumericLineType=dcfNumericLineType, fcwAddrConvIncomingCallEntry=fcwAddrConvIncomingCallEntry, fclX25CfnNegMaxInWindowSize=fclX25CfnNegMaxInWindowSize, fclSdlcLpReliableVc=fclSdlcLpReliableVc, fmeTroubleReportInfoEntry=fmeTroubleReportInfoEntry, fclAsynCfgLinkInactivityTimer=fclAsynCfgLinkInactivityTimer, lineStatusChanged=lineStatusChanged, fclX25CfnDlnIncomingChannelCount=fclX25CfnDlnIncomingChannelCount, vcvSnmpManagerSendTraps=vcvSnmpManagerSendTraps, dcwEquipVoiceVirtualPortAddr=dcwEquipVoiceVirtualPortAddr, fclBX780LpProtocolType=fclBX780LpProtocolType, fcwFrFecnBecnOfDeFramesThreshold=fcwFrFecnBecnOfDeFramesThreshold, fclBsc3270LogPort=fclBsc3270LogPort, fmsFrcStoragePvcStatus=fmsFrcStoragePvcStatus, fclHdlcLogPortTable=fclHdlcLogPortTable, fmStatEthManagementTable=fmStatEthManagementTable, fclX25InBRemotePeerEntry=fclX25InBRemotePeerEntry, fclPppBIsdnLogPortEntry=fclPppBIsdnLogPortEntry, fcbBrdgMapRemoteAddress=fcbBrdgMapRemoteAddress, fcmMgfGeneratorCount=fcmMgfGeneratorCount, fmeEvtTime=fmeEvtTime, fcbStpVpPortPathCost=fcbStpVpPortPathCost, dcvCASConfPauseTime=dcvCASConfPauseTime, fciOspfAseExportRipTag=fciOspfAseExportRipTag, fclPppPstnRemotePeerTable=fclPppPstnRemotePeerTable, dcmAlrmSwEntry=dcmAlrmSwEntry, fmsCtrlStatus=fmsCtrlStatus, fmStatPppAuthenticationEntry=fmStatPppAuthenticationEntry, fclX25ConfigAccessTable=fclX25ConfigAccessTable, fcxRoutType20PacketBroadcasting=fcxRoutType20PacketBroadcasting, fccVirtualPortTable=fccVirtualPortTable, fmsEthInAlignmentErrorsCounter=fmsEthInAlignmentErrorsCounter, vclLogicalPortTable=vclLogicalPortTable, fclX25CfnNegMaxOutThroughputClass=fclX25CfnNegMaxOutThroughputClass, dclFrSeSigT303SetupResponseTimer=dclFrSeSigT303SetupResponseTimer, fclSdlcLpLogPortId=fclSdlcLpLogPortId, fclX25CfaSigSubAddressTransmission=fclX25CfaSigSubAddressTransmission, fciTelnetUserId=fciTelnetUserId, fclFrMainDlci=fclFrMainDlci, fclX25MlpIsdnOverflow=fclX25MlpIsdnOverflow, fclBSctProtDef1PermanentDelimiter4=fclBSctProtDef1PermanentDelimiter4, sc103_6W=sc103_6W, fmsS2BChIfLastChange=fmsS2BChIfLastChange, fmuFunctionMemTypeForMCXType4=fmuFunctionMemTypeForMCXType4, fclFrBackupDlci=fclFrBackupDlci, fmsFrCircuitDlci=fmsFrCircuitDlci, fcwSQOSProfilesTable=fcwSQOSProfilesTable, vcmAlrmSCFamilyId=vcmAlrmSCFamilyId, vcmAlrmVCTable=vcmAlrmVCTable, fmsFrCommFilter=fmsFrCommFilter, sc300_4W=sc300_4W, vcvVoicePhysicalPortEntry=vcvVoicePhysicalPortEntry, fclX25AccSwitchOverTable=fclX25AccSwitchOverTable, dcmAlrmLMITrapSend=dcmAlrmLMITrapSend, fmOspfStandardIfPollInterval=fmOspfStandardIfPollInterval, vcFrSwL1ChanelIdentifierCID=vcFrSwL1ChanelIdentifierCID, fclFrPvcX25LinkType=fclFrPvcX25LinkType, fclAsynCfgX3Part1Table=fclAsynCfgX3Part1Table, fclX25CfnSerCharging=fclX25CfnSerCharging, vcmAlrmSvcTyp=vcmAlrmSvcTyp, fmsS0BChIfOutOctets=fmsS0BChIfOutOctets, fclSdlcPriClusterAddress=fclSdlcPriClusterAddress, vcFrSwL0DlciPriority=vcFrSwL0DlciPriority, fclVipCluStatElementId=fclVipCluStatElementId, vcvFxxConfId=vcvFxxConfId, fmOsiISISSysttmpToExMaxSaqNums=fmOsiISISSysttmpToExMaxSaqNums, dcmAlrmLMIFamilyId=dcmAlrmLMIFamilyId, fclB3270HosClusterLogPortId=fclB3270HosClusterLogPortId, dclFrTeLogPortEntry=dclFrTeLogPortEntry, fmOsiISISESAdjacencyEntry=fmOsiISISESAdjacencyEntry, fclFraLpX25InterframeFlagCount=fclFraLpX25InterframeFlagCount, fmOspfStandardIfAreaId=fmOspfStandardIfAreaId, fclX25SlpIsdnRemX25InterNodeConfigId=fclX25SlpIsdnRemX25InterNodeConfigId, fcfIsdnRemCallDirection=fcfIsdnRemCallDirection, fcwSDynNeighborMaxCount=fcwSDynNeighborMaxCount, vcfNumericLineEntry=vcfNumericLineEntry, fciLocalVirtualPortEntry=fciLocalVirtualPortEntry, fciBootPInterfaceType=fciBootPInterfaceType, fcwFrFrameAcceptMemoryThreshold=fcwFrFrameAcceptMemoryThreshold, vcmAlrmLMITable=vcmAlrmLMITable, fclVipHosElemAddress=fclVipHosElemAddress, fclX25CfaNegPacketSize=fclX25CfaNegPacketSize, fdpTestOutputPacketsCount=fdpTestOutputPacketsCount, fcmAlrmPpPhysPort1=fcmAlrmPpPhysPort1, fclFrSeIsdnRemConfigId=fclFrSeIsdnRemConfigId, fclX25InBRemSubscriberNumber=fclX25InBRemSubscriberNumber, fccLneighStatus=fccLneighStatus, fcvRvpConversionIncomingCall=fcvRvpConversionIncomingCall, fmsFrLpLmiUserN391=fmsFrLpLmiUserN391, fclFrTeIsdnBackupTable=fclFrTeIsdnBackupTable, fmsE1Ds1ChIfInUnknownProtos=fmsE1Ds1ChIfInUnknownProtos, fcCtlErrorIndex=fcCtlErrorIndex, fcfLineModLinkUpTimer=fcfLineModLinkUpTimer, fmOspfStandardAuthType=fmOspfStandardAuthType, fmuFunctionIpRouter=fmuFunctionIpRouter, vcvEMConfTimeBetweenSuccOutCall=vcvEMConfTimeBetweenSuccOutCall, fcsnaGpLanFrMacAddress=fcsnaGpLanFrMacAddress, fclX25SlpPstnBackupEnabling=fclX25SlpPstnBackupEnabling, fclFraPvcEndPointEntry=fclFraPvcEndPointEntry, compacProxySoftware=compacProxySoftware, fclVipHosLpWaitTimeOutForPrinter=fclVipHosLpWaitTimeOutForPrinter)
mibBuilder.exportSymbols("PCE-MIB", dcvIfPCMChannelTable=dcvIfPCMChannelTable, fmsFrDlcOutgoingEntry=fmsFrDlcOutgoingEntry, fclFrPvcX25EncapsulationEntry=fclFrPvcX25EncapsulationEntry, fcvLvpFltConditionEntry=fcvLvpFltConditionEntry, fclSdlcLpCompression=fclSdlcLpCompression, fclAsynX28PlusRemoteCfgX3Part1Entry=fclAsynX28PlusRemoteCfgX3Part1Entry, fcxCircNetNumber=fcxCircNetNumber, fdpTestCommand=fdpTestCommand, fclSdlcSecClusterLogPortId=fclSdlcSecClusterLogPortId, fclX25CfaFacOutputMarkers=fclX25CfaFacOutputMarkers, fclFrCfsSignallingTable=fclFrCfsSignallingTable, fmOsiISISSysISFieldLenMismatches=fmOsiISISSysISFieldLenMismatches, dcCtlErrorCode=dcCtlErrorCode, fcsnaLvpParamLocalTest=fcsnaLvpParamLocalTest, fclAsynPadLpLink=fclAsynPadLpLink, fclFrPvcX25AssociatedAddress=fclFrPvcX25AssociatedAddress, fclFrPvcSnaRwReceiveWinSize=fclFrPvcSnaRwReceiveWinSize, fmsEthInPktsCounter=fmsEthInPktsCounter, fclVipClusterLogPort=fclVipClusterLogPort, fmStatPppPhysLineTable=fmStatPppPhysLineTable, fcsModuleId=fcsModuleId, dcmAlrmSCDisplay=dcmAlrmSCDisplay, fmsPppAuthSlaveSuccessCounter=fmsPppAuthSlaveSuccessCounter, fcbStpVirtualPortTable=fcbStpVirtualPortTable, fclFrCeParGenVoiceMaxTransitDelay=fclFrCeParGenVoiceMaxTransitDelay, fcwConvMultiInOrderNum=fcwConvMultiInOrderNum, fciRipVpAuthType=fciRipVpAuthType, vcvToneTable=vcvToneTable, fmOspfStandardIfAuthKey=fmOspfStandardIfAuthKey, fcxServSapOutFltServiceNameType=fcxServSapOutFltServiceNameType, fclFrPvcSnaBanTwTransmitWinSize=fclFrPvcSnaBanTwTransmitWinSize, fmeFamilyTable=fmeFamilyTable, fcmMgtFctActivationTable=fcmMgtFctActivationTable, fclSdlcLogPort=fclSdlcLogPort, fciSnmpCommunityStringReadWrite=fciSnmpCommunityStringReadWrite, fclX25CfaPackingTable=fclX25CfaPackingTable, fcfLineModNewDiallingTimer=fcfLineModNewDiallingTimer, fcfLineV35DteD106=fcfLineV35DteD106, fciOspfAseExportStaticsTag=fciOspfAseExportStaticsTag, fmOspfStandardAreaRangeAreaID=fmOspfStandardAreaRangeAreaID, fclX25SlpAccess=fclX25SlpAccess, fcfLineV11DteIndication109=fcfLineV11DteIndication109, fclAsynX28PlusRemLpIdleTimerDelay=fclAsynX28PlusRemLpIdleTimerDelay, fclFrSeIsdnBackLogPortId=fclFrSeIsdnBackLogPortId, fcfIsdnDTimT303SetupResponseTimer=fcfIsdnDTimT303SetupResponseTimer, fmOsiISISCircLANL2DesISChanges=fmOsiISISCircLANL2DesISChanges, cfConfigurationFileToDownload=cfConfigurationFileToDownload, fmhEquipmentId=fmhEquipmentId, fclEthernet=fclEthernet, fcvLvpVirtualPortId=fcvLvpVirtualPortId, fclX25InDActiveLinkAtBootTime=fclX25InDActiveLinkAtBootTime, fcsnaLvpTrParamCompressScrambling=fcsnaLvpTrParamCompressScrambling, fcsnaLvpTrParamBc=fcsnaLvpTrParamBc, fcsModuleEntry=fcsModuleEntry, fcbStpForwardDelay=fcbStpForwardDelay, fciBootPClientBootTime=fciBootPClientBootTime, dcCtlDate=dcCtlDate, fciOspfAreaRangeAreaId=fciOspfAreaRangeAreaId, fclAsynMneTransCFKeyHandling=fclAsynMneTransCFKeyHandling, fmsBootPRelayDroppedPkts=fmsBootPRelayDroppedPkts, fciNetToMediaTable=fciNetToMediaTable, fclFraLmiT392PollingVerifTimer=fclFraLmiT392PollingVerifTimer, fciSnmpManagerFiltering=fciSnmpManagerFiltering, cfNumberOfLines=cfNumberOfLines, dcfPhysicalPortEntry=dcfPhysicalPortEntry, dcvVoiceSuscrStatus=dcvVoiceSuscrStatus, fcsnaLvpTrParamReliableVc=fcsnaLvpTrParamReliableVc, fcxRipCircPacketSize=fcxRipCircPacketSize, fcfLineModXidStringEltNum=fcfLineModXidStringEltNum, fclVipCluElemStatus=fclVipCluElemStatus, fclAsynNetUserEntry=fclAsynNetUserEntry, fcsnaGpSdlcTable=fcsnaGpSdlcTable, fmOspfStandardAreaTable=fmOspfStandardAreaTable, fmsFrLpSvcBookingVbrRtThroughput=fmsFrLpSvcBookingVbrRtThroughput, fclPppSerAutoCompressMultiPktTimer=fclPppSerAutoCompressMultiPktTimer, fmOsiISISISAdjacencyEntry=fmOsiISISISAdjacencyEntry, fmhEqIdFourthFactoryReturnDate=fmhEqIdFourthFactoryReturnDate, fmRip2PeerAddress=fmRip2PeerAddress, fcxCircuits=fcxCircuits, dcvVoiceTransportEntry=dcvVoiceTransportEntry, fclSdlcSecClusterFacThroughputClass=fclSdlcSecClusterFacThroughputClass, fclPppCfgAuthentication=fclPppCfgAuthentication, fccNeighClnpAddress=fccNeighClnpAddress, fmOsiISISISAdjIndex=fmOsiISISISAdjIndex, fclX25SlpIsdnRemPriority=fclX25SlpIsdnRemPriority, fclAsynCfgX3UserP22PageWait=fclAsynCfgX3UserP22PageWait, dvb2030=dvb2030, vcwEquipParams=vcwEquipParams, dcvSnmpManagerStatus=dcvSnmpManagerStatus, fcxRipCircCircuitId=fcxRipCircCircuitId, avb1002_FXS_FXO=avb1002_FXS_FXO, fclSdlcSecClusterXidStringResponse=fclSdlcSecClusterXidStringResponse, fclFrPvcSnaBanEncapsulationTable=fclFrPvcSnaBanEncapsulationTable, fclX25CfaSerStatSignalling=fclX25CfaSerStatSignalling, fclFrPvcSnaBanNwIncrementAckCount=fclFrPvcSnaBanNwIncrementAckCount, fcsnaGpRemPuStatus=fcsnaGpRemPuStatus, spb1033=spb1033, fclAsynNetUserTable=fclAsynNetUserTable, fciEgpRipRoutesDistribution=fciEgpRipRoutesDistribution, fmsE1Ds1ChIfNumber=fmsE1Ds1ChIfNumber, fcwSQOSX25TrafficManagementStrategy=fcwSQOSX25TrafficManagementStrategy, fcfLineModCallDirection=fcfLineModCallDirection, fmsEthOutExcessiveCollisionsCounter=fmsEthOutExcessiveCollisionsCounter, fmOsiESISCircInPDUs=fmOsiESISCircInPDUs, vcvToneEntry=vcvToneEntry, fclFrBackupLPId=fclFrBackupLPId, vcvIpLocalEntry=vcvIpLocalEntry, vclFrLmiParaN393MonitoredEventCount=vclFrLmiParaN393MonitoredEventCount, fclX25SlpIsdnBackIsdnInterfaceId=fclX25SlpIsdnBackIsdnInterfaceId, fclSdlcPriLpLogPortId=fclSdlcPriLpLogPortId, fclX25CfnNegWindowSize=fclX25CfnNegWindowSize, fcxRipCircuitTable=fcxRipCircuitTable, fmOspfStandardStubMetric=fmOspfStandardStubMetric, fclFrPvcSnaDestinationSap=fclFrPvcSnaDestinationSap, fclFrPvcSnaEncapsulationTable=fclFrPvcSnaEncapsulationTable, fclAsynX28PlusRemCfgX3P01EscapeChar=fclAsynX28PlusRemCfgX3P01EscapeChar, fclAsynMultiLpTable=fclAsynMultiLpTable, fmsFrLpLmiUserLinkRelErrors=fmsFrLpLmiUserLinkRelErrors, vcvVirtualPortId=vcvVirtualPortId, fccVpStatus=fccVpStatus, dcmAlrmCmpTable=dcmAlrmCmpTable, fcbBrdgRemoteAddressMappingTable=fcbBrdgRemoteAddressMappingTable, fcsnaLvpLlpPuId=fcsnaLvpLlpPuId, fccLocalNeighborEntry=fccLocalNeighborEntry, fcmAlrmPpPhysPort6=fcmAlrmPpPhysPort6, mmx5000=mmx5000, fcsnaGpRoutClusterPuId=fcsnaGpRoutClusterPuId, fcfLineV28AsynInDceInterfaceId=fcfLineV28AsynInDceInterfaceId, fmOsiESISCircOutPDUs=fmOsiESISCircOutPDUs, fclX25InDSwitchOverTable=fclX25InDSwitchOverTable, fcxRoutAddrFltFilterId=fcxRoutAddrFltFilterId, fcwZoZone=fcwZoZone, vcvVoiceLogPort=vcvVoiceLogPort, vcvFxxLpSetId=vcvFxxLpSetId, vcmAlrmCmpEntry=vcmAlrmCmpEntry, fclX25SlpIsdnRemotePeerEntry=fclX25SlpIsdnRemotePeerEntry, vclFrSeSigT303SetupResponseTimer=vclFrSeSigT303SetupResponseTimer, dcvDialRxSuscriberNumber=dcvDialRxSuscriberNumber, fclFrPvcSnaLinkId=fclFrPvcSnaLinkId, fcwCallPacketsAcceptThreshold=fcwCallPacketsAcceptThreshold, fclAsynLpTerminalType=fclAsynLpTerminalType, dcmAlrmFaxDisplay=dcmAlrmFaxDisplay, dclFrLmiParaN391FullStatusPollCount=dclFrLmiParaN391FullStatusPollCount, vcmAlrmGenTyp=vcmAlrmGenTyp, fcfLineV28DteCts106=fcfLineV28DteCts106, fciFlowSubstFlowId=fciFlowSubstFlowId, vcvIpVirtualPort=vcvIpVirtualPort, fmOspfStandardImportASExtern=fmOspfStandardImportASExtern, fclX25CfaProfileId=fclX25CfaProfileId, fciEgpAdminStatus=fciEgpAdminStatus, fclB3270CluLpLogPortId=fclB3270CluLpLogPortId, vcvEMSwLpId=vcvEMSwLpId, cmeClearCallUserData=cmeClearCallUserData, fclAsynX28PlusRemoteCfgX3Part1Table=fclAsynX28PlusRemoteCfgX3Part1Table, fcfIsdnPrimaryRateInterfaceId=fcfIsdnPrimaryRateInterfaceId, fclX25CfnSigConfigId=fclX25CfnSigConfigId, dcwABPvcLpId=dcwABPvcLpId, dcvTSPCMSwLogPortSetId=dcvTSPCMSwLogPortSetId, fcfLineV28DteDsr107=fcfLineV28DteDsr107, sc512Y=sc512Y, fclVipCluStationEntry=fclVipCluStationEntry, fmsE1Ds1ChIfInDiscards=fmsE1Ds1ChIfInDiscards, fclPppPstnRemotePeerEntry=fclPppPstnRemotePeerEntry, fclB3270HosClusterTable=fclB3270HosClusterTable, fclX25SlpIsdnRemLogPortId=fclX25SlpIsdnRemLogPortId, fmsRvpConnInErrPktsCounter=fmsRvpConnInErrPktsCounter, vcvEMConfigTable=vcvEMConfigTable, fclAsynCfgSerCompression=fclAsynCfgSerCompression, fclX25InDIsdnRemPriority=fclX25InDIsdnRemPriority, fmhEqIdFirstFactoryReturnDate=fmhEqIdFirstFactoryReturnDate, fcsConfigDescAuthor=fcsConfigDescAuthor, fclX25InDSwSwitchBackThreshold=fclX25InDSwSwitchBackThreshold, fclX25CfnDataLinkNetworkTable=fclX25CfnDataLinkNetworkTable, sc300_1W_1E=sc300_1W_1E, fcmAlrmPpPhysPort5=fcmAlrmPpPhysPort5, fclX25CfnNegotiatedFacilityEntry=fclX25CfnNegotiatedFacilityEntry, fclPppSerLpInterfaceId=fclPppSerLpInterfaceId, fcwLoadAndTrafficEventsTimer=fcwLoadAndTrafficEventsTimer, dcvSnmpManagerIpAddress=dcvSnmpManagerIpAddress, fmsEthTdrLoc=fmsEthTdrLoc, fclAsynCfgFacDefOutPacketSize=fclAsynCfgFacDefOutPacketSize, fmsSig108=fmsSig108, vcmAlrmTftpDisplay=vcmAlrmTftpDisplay, fclX25MlpDARApplicable=fclX25MlpDARApplicable, fclAsynCfgLinkServSignalParity=fclAsynCfgLinkServSignalParity, fclX25CfmTransmitFlowControlTable=fclX25CfmTransmitFlowControlTable, fcwSQOSProfilesBc=fcwSQOSProfilesBc, fmOsiISISCircuitTable=fmOsiISISCircuitTable, fmsFrDlcOutOctets=fmsFrDlcOutOctets, fclSdlcSecClusterCirmin=fclSdlcSecClusterCirmin, fcxAdvSysMaxHops=fcxAdvSysMaxHops, fclX25SlpSwitchOverEntry=fclX25SlpSwitchOverEntry, dcvCASConfToneProfile=dcvCASConfToneProfile, vcfNumericLineTable=vcfNumericLineTable, fciOspfNeighborEligibleStatus=fciOspfNeighborEligibleStatus, fcfPhysPortId=fcfPhysPortId, fclX25CfaDlnNetworkType=fclX25CfaDlnNetworkType, fcsnaLvpParameters=fcsnaLvpParameters, fciOspfVpAdminStatus=fciOspfVpAdminStatus, fcxServCircuitEntry=fcxServCircuitEntry, dcvTSPCMPerm=dcvTSPCMPerm, fclAsynX28PlusLpConIdRemote=fclAsynX28PlusLpConIdRemote, fmOspfStandardVirtIfAuthKey=fmOspfStandardVirtIfAuthKey, fmOsiISISISAdjAreaAddress=fmOsiISISISAdjAreaAddress, fcCtlAlteredIfTable=fcCtlAlteredIfTable, fcxCircuitRemoteVpEntry=fcxCircuitRemoteVpEntry, fccLvpEsIsConfigTimer=fccLvpEsIsConfigTimer, fciRipNeighborTable=fciRipNeighborTable, fcxServCircSapState=fcxServCircSapState, fciRipOspfRoutesDistributionMetric=fciRipOspfRoutesDistributionMetric, fmOsiISISESAdjCircIndex=fmOsiISISESAdjCircIndex, fclFrCfcEiCodCalledNumPlanId=fclFrCfcEiCodCalledNumPlanId, vclLogPortId=vclLogPortId, fclAsynX28PlusRemCfgX3P02Echo=fclAsynX28PlusRemCfgX3P02Echo, fclBSctProtDef2ACK0=fclBSctProtDef2ACK0, fmsBootPClientFileName=fmsBootPClientFileName, fclFrTeIsdnRemProtocol=fclFrTeIsdnRemProtocol, fclX25CfaSigClearFormat=fclX25CfaSigClearFormat, fcCtlErrorTime=fcCtlErrorTime, fclFrCfsSigT203InactivityTimer=fclFrCfsSigT203InactivityTimer, fciOspfVlTransitDelay=fciOspfVlTransitDelay, fmsPppAuthMasterAuthentication=fmsPppAuthMasterAuthentication, dcvIpVirtualPort=dcvIpVirtualPort, fcfE1PhysPortSynchSrc=fcfE1PhysPortSynchSrc, fclAsynMneName=fclAsynMneName, fclPppBIsdnRemPeerId=fclPppBIsdnRemPeerId, fclX25InDIsdnRemLogPortId=fclX25InDIsdnRemLogPortId, fclFrSeInBRemStatus=fclFrSeInBRemStatus, fcwFrFrameAcceptCpuThreshold=fcwFrFrameAcceptCpuThreshold, fcwConvMultiOutExternalAddr=fcwConvMultiOutExternalAddr, fciOspfVpPollInterval=fciOspfVpPollInterval, fciTelnetPwdP3=fciTelnetPwdP3, fclX25MlpIsdnOverStatus=fclX25MlpIsdnOverStatus, fmsPppAuthMasterFailureCounter=fmsPppAuthMasterFailureCounter, fciOspfVpDRPriority=fciOspfVpDRPriority, dcvTSPCMPermConfigId=dcvTSPCMPermConfigId, vcfNumericLines=vcfNumericLines, fcsnaLvpParamCompression=fcsnaLvpParamCompression, vcvVoiceSuscrTransportNetworkAddress=vcvVoiceSuscrTransportNetworkAddress, vcvVoiceProfFaxActivation=vcvVoiceProfFaxActivation, fmsS2BChAdminStatus=fmsS2BChAdminStatus, fclX25MlpOvOverflowBackThreshold=fclX25MlpOvOverflowBackThreshold, fcwServices=fcwServices, fciTelnetPwd=fciTelnetPwd, fciVirtualPortTable=fciVirtualPortTable, vcfPhysicalPortEntry=vcfPhysicalPortEntry, fclX25CfaNegMaxInThroughputClass=fclX25CfaNegMaxInThroughputClass, sc103_3W=sc103_3W, fclAsynPadHomePageEntry=fclAsynPadHomePageEntry, fcfLineModOutputXidString=fcfLineModOutputXidString, vcCtlErrorCode=vcCtlErrorCode, fclX25CfnSerRemoteExclusiveLink=fclX25CfnSerRemoteExclusiveLink, fclAsynPadLpCombinedFlowCtrl=fclAsynPadLpCombinedFlowCtrl, fclAsynX28PlusRemCfgX3P18LineDisplay=fclAsynX28PlusRemCfgX3P18LineDisplay)
mibBuilder.exportSymbols("PCE-MIB", vcvSnmpGenCommunityStringReadWrite=vcvSnmpGenCommunityStringReadWrite, vcvVoiceLogicalPortFxx=vcvVoiceLogicalPortFxx, fcfLineV35DceSignalTable=fcfLineV35DceSignalTable, fmsFrDlcOutDlci=fmsFrDlcOutDlci, fcwConvOutStatus=fcwConvOutStatus, fclFrCeParGenEntry=fclFrCeParGenEntry, fmOsiISISESAdjAdjIndex=fmOsiISISESAdjAdjIndex, fclX25CfnDlnEachPacketAcknowledgement=fclX25CfnDlnEachPacketAcknowledgement, fclAsynPadHomePageTable=fclAsynPadHomePageTable, fmOsiISISLogAdjcencyStateChanges=fmOsiISISLogAdjcencyStateChanges, fcfIsdnDChannelSigTimerTable=fcfIsdnDChannelSigTimerTable, fclAsynX28PlusGenParDNIC=fclAsynX28PlusGenParDNIC, fclX25InDSubscriberNumber=fclX25InDSubscriberNumber, fclX25InBRemX25ConfigId=fclX25InBRemX25ConfigId, fmhTechnicTransputerPresence=fmhTechnicTransputerPresence, fclX25SlpPstnBackPstnNumber=fclX25SlpPstnBackPstnNumber, dcCtlHour=dcCtlHour, fclFrNbStationByDlci=fclFrNbStationByDlci, fclAsynCfgFacMaxInWindowSize=fclAsynCfgFacMaxInWindowSize, fclBSctProtDef1LogPortId=fclBSctProtDef1LogPortId, fcxRouting=fcxRouting, fmsE1Ds1ChIfAdminStatus=fmsE1Ds1ChIfAdminStatus, vclFrSeSigConfigId=vclFrSeSigConfigId, vcfConfLineInterfaceId=vcfConfLineInterfaceId, fcsnaLvpParamCompressMultiPacketsTimer=fcsnaLvpParamCompressMultiPacketsTimer, vcvToneDuration1=vcvToneDuration1, vcvVoiceLogPortId=vcvVoiceLogPortId, vcmAlrmCmpTrapSend=vcmAlrmCmpTrapSend, fmPingTimeout=fmPingTimeout, fclX25InDIsdnBackupEntry=fclX25InDIsdnBackupEntry, fcwSQOSProfilesStatus=fcwSQOSProfilesStatus, fcvLvpFltFilteringFilterId=fcvLvpFltFilteringFilterId, fccErrorFramesSending=fccErrorFramesSending, fmOsiISISCircOutPdu=fmOsiISISCircOutPdu, fcWanSwitch=fcWanSwitch, fclFrConfigurationCeTe=fclFrConfigurationCeTe, fcvRvpConnBe=fcvRvpConnBe, fclX25MlpPstnOvInterfaceId=fclX25MlpPstnOvInterfaceId, fclFrCfcLmiN392ErrorThreshold=fclFrCfcLmiN392ErrorThreshold, dcCtlErrorMessage=dcCtlErrorMessage, npx90=npx90, fcCtlAlteredDlciNum=fcCtlAlteredDlciNum, fclX25CfaSerCos=fclX25CfaSerCos, fcfLineV28DceLl141=fcfLineV28DceLl141, fclAsynCfgSerConfigId=fclAsynCfgSerConfigId, dcmAlrmLMIDisplay=dcmAlrmLMIDisplay, fclSdlcPrimaryPuLogPort=fclSdlcPrimaryPuLogPort, fmsBootPRelayVirtualPortId=fmsBootPRelayVirtualPortId, fclFrCfcSigConfigId=fclFrCfcSigConfigId, fcvRvpConnEncapsulation=fcvRvpConnEncapsulation, fciSnmp=fciSnmp, fclX25InDIsdnRemX25AccConfigId=fclX25InDIsdnRemX25AccConfigId, fcsnaGpX25Address=fcsnaGpX25Address, fcCtlAlteredLpEntry=fcCtlAlteredLpEntry, fmOsiISISCircOutCtrlPdu=fmOsiISISCircOutCtrlPdu, vcvRemNetWanAddress=vcvRemNetWanAddress, vcvVoiceSwInsSuffix=vcvVoiceSwInsSuffix, fmsFrcStorageSrcAddr=fmsFrcStorageSrcAddr, fcsnaLvpParamT1=fcsnaLvpParamT1, fciTelnetUserPriority=fciTelnetUserPriority, fclB3270LpMessageRetryNumber=fclB3270LpMessageRetryNumber, fdpTestDiagCode=fdpTestDiagCode, fcsnaLvpParamSubscriberNumber=fcsnaLvpParamSubscriberNumber, fmuAccessFrSuscribLineNbMax=fmuAccessFrSuscribLineNbMax, fclX25CfnModificationCount=fclX25CfnModificationCount, fmsWanConnRemoteAddr=fmsWanConnRemoteAddr, fmRip2IfConfEntry=fmRip2IfConfEntry, fmsPppProtoLcpDiag=fmsPppProtoLcpDiag, dcvCASConfCallSignalling=dcvCASConfCallSignalling, fclB3270CluClusterEntry=fclB3270CluClusterEntry, dclFrSeSigOuputTimeout=dclFrSeSigOuputTimeout, fmsEthInErrCollCounter=fmsEthInErrCollCounter, vcvToneFreq1=vcvToneFreq1, fclPppBIsdnLocalPriTable=fclPppBIsdnLocalPriTable, vcvVoiceProfileEntry=vcvVoiceProfileEntry, vcmAlrmGenTable=vcmAlrmGenTable, vcvAnalogLineTable=vcvAnalogLineTable, fciLocalClusterEntry=fciLocalClusterEntry, cmeClearCause=cmeClearCause, fclFrConfigSeTable=fclFrConfigSeTable, fcbStpMaxAge=fcbStpMaxAge, fciBootPClientBootFile=fciBootPClientBootFile, dcvIpLocRouteNextHop=dcvIpLocRouteNextHop, fmRip2IfStatRcvBadRoutes=fmRip2IfStatRcvBadRoutes, vcvEMConfDialingMode=vcvEMConfDialingMode, fclAsynPadPageBlocId=fclAsynPadPageBlocId, fclPppCfaRemPeerId=fclPppCfaRemPeerId, vcmAlrmSvcTrapSend=vcmAlrmSvcTrapSend, fclFrPvcSpecific=fclFrPvcSpecific, fcwConvMultiOutStatus=fcwConvMultiOutStatus, fclX25CfaFacilityEntry=fclX25CfaFacilityEntry, vcmAlrmFaxTable=vcmAlrmFaxTable, fclPppCftFailureMaxCount=fclPppCftFailureMaxCount, fclFrCfcEiCodConfigId=fclFrCfcEiCodConfigId, fcxCircStatus=fcxCircStatus, vcfDataLineRts105=vcfDataLineRts105, fcwSClearAnalysStatus=fcwSClearAnalysStatus, fcfLineV28DceInterfaceId=fcfLineV28DceInterfaceId, vcvFxxLpCallType=vcvFxxLpCallType, fclAsynCfgSerConversionAddressCheck=fclAsynCfgSerConversionAddressCheck, fmsS2BChIfOutOctets=fmsS2BChIfOutOctets, fmStatPppProtocolStatusEntry=fmStatPppProtocolStatusEntry, fmuAccessCvfLineNbMax=fmuAccessCvfLineNbMax, fclFrCfcGenConfigId=fclFrCfcGenConfigId, fmsE1Ds1ChIfOutOctets=fmsE1Ds1ChIfOutOctets, fclX25CfnNegMaxOutWindowSize=fclX25CfnNegMaxOutWindowSize, fmuAccessLineNbMax=fmuAccessLineNbMax, systemDescription=systemDescription, fcCtlHRCheckMessagesTable=fcCtlHRCheckMessagesTable, fcfIsdnDSigIsdnNumber=fcfIsdnDSigIsdnNumber, fclAsynMnemonicTable=fclAsynMnemonicTable, fcwDnicDataNetworkIdentifierCode=fcwDnicDataNetworkIdentifierCode, fcxCircRvpStatus=fcxCircRvpStatus, fclBSctLpCodingParityType=fclBSctLpCodingParityType, fclX25AccPvcLogPortId=fclX25AccPvcLogPortId, fcfLineV28AsynOutDceSignalTable=fcfLineV28AsynOutDceSignalTable, fclAsynCfgLinkCallResponseTimer=fclAsynCfgLinkCallResponseTimer, fciTelnetPwdP8=fciTelnetPwdP8, fcmAlrmEventEntry=fcmAlrmEventEntry, fciBootPInterfaceVpId=fciBootPInterfaceVpId, fcfLineV11DteSignalTable=fcfLineV11DteSignalTable, fclX25CfaNegMinInPacketSize=fclX25CfaNegMinInPacketSize, fclX25CfnSignallingEntry=fclX25CfnSignallingEntry, dcvVoiceProfEchoCancellationLength=dcvVoiceProfEchoCancellationLength, fclAsynVdxLpMnemonicType=fclAsynVdxLpMnemonicType, fclAsynMneTransProfile=fclAsynMneTransProfile, fcxRipOutputFilteringEntry=fcxRipOutputFilteringEntry, fclAsynCfgFacMinInPacketSize=fclAsynCfgFacMinInPacketSize, fclAsynCfgX3UserP13LfInsertion=fclAsynCfgX3UserP13LfInsertion, fmStatWanConnectionsEntry=fmStatWanConnectionsEntry, fmRip2GlobalQueries=fmRip2GlobalQueries, fcfLineV28DceRil140=fcfLineV28DceRil140, fmPingCountRequest=fmPingCountRequest, fcxServStaticServiceId=fcxServStaticServiceId, fcsnaLvpParamCirMin=fcsnaLvpParamCirMin, fclHdlcLpCompressNegotiation=fclHdlcLpCompressNegotiation, fcmMgfStatThroughputSamplingPeriod=fcmMgfStatThroughputSamplingPeriod, fmuAccessVipLineNbMax=fmuAccessVipLineNbMax, fclAsynVdxPageMessage=fclAsynVdxPageMessage, vcvVoiceSuscrNumber=vcvVoiceSuscrNumber, fclX25CfnDlnT1AcknowledgeTimer=fclX25CfnDlnT1AcknowledgeTimer, fcfE1Ds1DropInsertStatus=fcfE1Ds1DropInsertStatus, fcsnaLvpTrParamT2=fcsnaLvpTrParamT2, fmsIpLanOutRequestsCounter=fmsIpLanOutRequestsCounter, fcCtlAlteredDlciPpId=fcCtlAlteredDlciPpId, vcvSnmpManagerEntry=vcvSnmpManagerEntry, fcfLineLinkCheckPeriod=fcfLineLinkCheckPeriod, fmsIpTrafInHdrErrorsCounter=fmsIpTrafInHdrErrorsCounter, fclSdlcSecClusterCos=fclSdlcSecClusterCos, fclAsynX28PlusLpSpeedDetection=fclAsynX28PlusLpSpeedDetection, fmOspfStandardAdminStat=fmOspfStandardAdminStat, fcbTransparentBridge=fcbTransparentBridge, vclFrSeSigN200RetransMaxCount=vclFrSeSigN200RetransMaxCount, fclB3270CluLogPortEntry=fclB3270CluLogPortEntry, fmsEthOutCarrierSenseErrorsCounter=fmsEthOutCarrierSenseErrorsCounter, fcfIsdnDSigHighLayerCharactIdent=fcfIsdnDSigHighLayerCharactIdent, fclBSctProtDef2LogPortId=fclBSctProtDef2LogPortId, dcmAlrmSvcEntry=dcmAlrmSvcEntry, fcwSQOSX25PriorityLevel=fcwSQOSX25PriorityLevel, vcfDataLineRate=vcfDataLineRate, fclB3270CluClusterLogPortId=fclB3270CluClusterLogPortId, fclFraLogPortTable=fclFraLogPortTable, fclAsynX28PlusLpEquipment=fclAsynX28PlusLpEquipment, fclAsynX28PlusRemCfgX3P22PageWait=fclAsynX28PlusRemCfgX3P22PageWait, fclX25CfaDlnLowestIncomingChannel=fclX25CfaDlnLowestIncomingChannel, fclBX780LpDeconnectTimer=fclBX780LpDeconnectTimer, fcsnaGpX25Table=fcsnaGpX25Table, fmOspfStandardVirtIfStatus=fmOspfStandardVirtIfStatus, dcwEquipParams=dcwEquipParams, fmsLineIncidentsCounter=fmsLineIncidentsCounter, fmsFrLpInDiscards=fmsFrLpInDiscards, fclFrNbStationDlci=fclFrNbStationDlci, fclHdlcAutoCallTable=fclHdlcAutoCallTable, dcmAlrmVCTrapSend=dcmAlrmVCTrapSend, fclX25CfnNegDefOutPacketSize=fclX25CfnNegDefOutPacketSize, fciOspfAseExportLimit=fciOspfAseExportLimit, fclPppCfgConfigId=fclPppCfgConfigId, vcvEMPermEntry=vcvEMPermEntry, frxLineStateChange=frxLineStateChange, fcxServStaticSocket=fcxServStaticSocket, cfFactoryReturnDate5=cfFactoryReturnDate5, fcwSRvcReliableVcCount=fcwSRvcReliableVcCount, fcsnaLvpTrParamTW=fcsnaLvpTrParamTW, fciRipVirtualPortTable=fciRipVirtualPortTable, fmsFrDlcRcvdSigStatus=fmsFrDlcRcvdSigStatus, sc104=sc104, fcvRvpConnConnectionId=fcvRvpConnConnectionId, fccLneighMacAddress=fccLneighMacAddress, cfFactoryReturnDate2=cfFactoryReturnDate2, fcfLineV35DteTi142=fcfLineV35DteTi142, vclFrLmiParaAccessibilityCondition=vclFrLmiParaAccessibilityCondition, fmhEqIdThirdFactoryReturnDate=fmhEqIdThirdFactoryReturnDate, vcvVoiceSwSuscriberNumber=vcvVoiceSwSuscriberNumber, fcfE1Ds1ChannelSlots=fcfE1Ds1ChannelSlots, cmeClearVirtualCircuitInfo=cmeClearVirtualCircuitInfo, fmsE1Ds1ChIfPhysAddress=fmsE1Ds1ChIfPhysAddress, fclX25AccConnectionType=fclX25AccConnectionType, fmuFunctionDPacket=fmuFunctionDPacket, fmsEthManSupervisionNokCounter=fmsEthManSupervisionNokCounter, fmOspfStandardAreaRangeTable=fmOspfStandardAreaRangeTable, dcvVoiceSuscrRemovedDigitNumber=dcvVoiceSuscrRemovedDigitNumber, fmOspfStandardLsdbTable=fmOspfStandardLsdbTable, fclAsynGenParLanguageType=fclAsynGenParLanguageType, vcvVoiceProfId=vcvVoiceProfId, fclX25CfnNegMaxInPacketSize=fclX25CfnNegMaxInPacketSize, fciTelnetUserStatus=fciTelnetUserStatus, dcmAlrmSyncFamilyId=dcmAlrmSyncFamilyId, fmOspfStandardVirtIfNeighbor=fmOspfStandardVirtIfNeighbor, dcvVoiceSwInsPrefix=dcvVoiceSwInsPrefix, fclAsynCfgLinkXonXoffSignal=fclAsynCfgLinkXonXoffSignal, fcfLineV28AsynOutDceDcd109=fcfLineV28AsynOutDceDcd109, fclBSctLpUnderrunManagement=fclBSctLpUnderrunManagement, mmxSoftware=mmxSoftware, fclFrPvcSnaLinkType=fclFrPvcSnaLinkType, fclAsynX28PlusRemCfgX3P19EditingSignal=fclAsynX28PlusRemCfgX3P19EditingSignal, fcxRipSysState=fcxRipSysState, vcvVoiceSwInsPrefix=vcvVoiceSwInsPrefix, dcvVoiceVirtualPortId=dcvVoiceVirtualPortId, fmOsiISISISAdjSNPAAddress=fmOsiISISISAdjSNPAAddress, dcvVoiceTransCompressionAlgorithm=dcvVoiceTransCompressionAlgorithm, fcfE1Ds1PhysTable=fcfE1Ds1PhysTable, fclFrSeInBRemotePeerEntry=fclFrSeInBRemotePeerEntry, fclFrCfsSigN200RetransMaxCount=fclFrCfsSigN200RetransMaxCount, fcmMgfBISDNChannelOpening=fcmMgfBISDNChannelOpening, fciVpNetMask=fciVpNetMask, fmsPppProtoIpNcpDiag=fmsPppProtoIpNcpDiag, vcvFxxRingFrequency=vcvFxxRingFrequency, fcfLineV28AsynInDceEnablingSig1=fcfLineV28AsynInDceEnablingSig1, fclInterUnitLinkEntry=fclInterUnitLinkEntry, fcvLvpFltConditionTable=fcvLvpFltConditionTable, fmsFrLpOutLogPortId=fmsFrLpOutLogPortId, fclX25SlpIsdnRemIsdnInterfaceId=fclX25SlpIsdnRemIsdnInterfaceId, fclSdlcSecLpLinkType=fclSdlcSecLpLinkType, fclFrPvcTunBackupEnabling=fclFrPvcTunBackupEnabling, fmOspfStandardAreaRangeEntry=fmOspfStandardAreaRangeEntry, vcvEMSwRemoteNumber=vcvEMSwRemoteNumber, vcmAlrmCmpFamilyId=vcmAlrmCmpFamilyId, fclX25InDIsdnRemCallRetryCount=fclX25InDIsdnRemCallRetryCount, fclPppSerLpLocalSubscriberNb=fclPppSerLpLocalSubscriberNb, fcfLineModXidStringTable=fcfLineModXidStringTable, fcwAddrConvOutgoingCallTable=fcwAddrConvOutgoingCallTable, fcwRouteTable=fcwRouteTable, fciTelnetPwdP2=fciTelnetPwdP2, fcmAlrmPpFamilyId=fcmAlrmPpFamilyId, fclB3270HosLogPortTable=fclB3270HosLogPortTable, fclX25AccIsdnBackLogPortId=fclX25AccIsdnBackLogPortId, fclFrPvcDlci=fclFrPvcDlci, vclFrLmiParaStandard=vclFrLmiParaStandard, fmsLineState=fmsLineState, vcvAnalogLines=vcvAnalogLines, fmsWanConnEncapsulation=fmsWanConnEncapsulation, fcsnaGpLanFrStatus=fcsnaGpLanFrStatus, fcxCircCircuitId=fcxCircCircuitId, fclBX780ConnMinimumRecallTimer=fclBX780ConnMinimumRecallTimer)
mibBuilder.exportSymbols("PCE-MIB", fmsS0BChAdminStatus=fmsS0BChAdminStatus, fmPingProtocol=fmPingProtocol, fcCtlHRCheckMessagesEntry=fcCtlHRCheckMessagesEntry, vcwEquipDnicZoAddr=vcwEquipDnicZoAddr, fcbBrdgMapStatus=fcbBrdgMapStatus, fciOspfRoutesPreference=fciOspfRoutesPreference, fclX25CfaSerBe=fclX25CfaSerBe, fcwSResLogChannelCount=fcwSResLogChannelCount, fclPppConfigurationsTable=fclPppConfigurationsTable, fmsSig105=fmsSig105, fmsEthOutSingleCollisionFramesCounter=fmsEthOutSingleCollisionFramesCounter, fcFrSwInputInterfaceId=fcFrSwInputInterfaceId, fcfLineSpeed=fcfLineSpeed, fcfIsdnDChannelSignallingEntry=fcfIsdnDChannelSignallingEntry, dcvCASConfigTable=dcvCASConfigTable, fcwSQOSProfilesBe=fcwSQOSProfilesBe, fciRipNeighborStatus=fciRipNeighborStatus, fmsFrDlcInFrames=fmsFrDlcInFrames, vclLogPortStatus=vclLogPortStatus, vcvVoiceProfLoopActivation=vcvVoiceProfLoopActivation, fcmMgfActAdminStatus=fcmMgfActAdminStatus, fcsnaLvpParamCallDirection=fcsnaLvpParamCallDirection, fciRipVpMulticast=fciRipVpMulticast, fmuAccessBscTranspLineNbMax=fmuAccessBscTranspLineNbMax, dcvTftpRetryTimer=dcvTftpRetryTimer, fclSdlcPriLogPortEntry=fclSdlcPriLogPortEntry, fmOspfStandardIfDesignatedRouter=fmOspfStandardIfDesignatedRouter, fclVipCluLpPollingTimer=fclVipCluLpPollingTimer, dcvIpLocMinimumRecallTimer=dcvIpLocMinimumRecallTimer, fcfLineV28DteSyn=fcfLineV28DteSyn, fmStatRvpConnectionsTable=fmStatRvpConnectionsTable, fcsModuleClnpRouterInit=fcsModuleClnpRouterInit, fciFlowAddrSubstituteTable=fciFlowAddrSubstituteTable, vcvFxxConfDtmfDigitTime=vcvFxxConfDtmfDigitTime, fcmMgfGeneratorsDelay=fcmMgfGeneratorsDelay, fccLvpEsIsHoldingTimer=fccLvpEsIsHoldingTimer, fmsEthInErrOutOfResourcesCounter=fmsEthInErrOutOfResourcesCounter, dcmAlrmVCEntry=dcmAlrmVCEntry, fcwConvInExternalAddr=fcwConvInExternalAddr, fclPppSerLpCos=fclPppSerLpCos, dcvCASConfDialingMode=dcvCASConfDialingMode, fmsFrLpSvcOverBookingThroughput=fmsFrLpSvcOverBookingThroughput, fcmMgfStatInputThreshold=fcmMgfStatInputThreshold, fclX25CfnNegThroughputClass=fclX25CfnNegThroughputClass, fmsInverseArp=fmsInverseArp, fclVipCluStatStatus=fclVipCluStatStatus, vcvTftpInactTimer=vcvTftpInactTimer, fcfIsdnBriCountry=fcfIsdnBriCountry, vcvToneType=vcvToneType, fciTelnetUserEntry=fciTelnetUserEntry, dcwEquipSVCDisconnectOnCongestion=dcwEquipSVCDisconnectOnCongestion, fclX25AccPrivX25FieldsChanges=fclX25AccPrivX25FieldsChanges, fmOspfStandardNbrState=fmOspfStandardNbrState, fclAsynX28PlusRemoteCfgX3Part2Entry=fclAsynX28PlusRemoteCfgX3Part2Entry, fclFrCfsProfileId=fclFrCfsProfileId, fdpTestInErrPktsCounter=fdpTestInErrPktsCounter, fcvRvpConnGrouping=fcvRvpConnGrouping, vcvFxxConfDialingFormat=vcvFxxConfDialingFormat, dcfDataLineRate=dcfDataLineRate, dcvIpLocMtu=dcvIpLocMtu, fmsFrDlcIncomingEntry=fmsFrDlcIncomingEntry, vcvEMPermTable=vcvEMPermTable, cfStartUpChoiceAfterReset=cfStartUpChoiceAfterReset, fcxServSapInFltServiceName=fcxServSapInFltServiceName, fclFrSeLpConfigId=fclFrSeLpConfigId, fmsPppPhysLocalMru=fmsPppPhysLocalMru, dclFrTeLogPortTable=dclFrTeLogPortTable, fclAsynMultiLpEntry=fclAsynMultiLpEntry, fclBX780ConnectionTable=fclBX780ConnectionTable, vclHdlcLogPortEntry=vclHdlcLogPortEntry, fclSdlcLpCompressScrambling=fclSdlcLpCompressScrambling, dcfDataLineCts106=dcfDataLineCts106, fclX25MlpIsdnOverBChannelCount=fclX25MlpIsdnOverBChannelCount, fclX25PstnRemPstnNumber=fclX25PstnRemPstnNumber, fcmMgfAlarmsSubscriber2=fcmMgfAlarmsSubscriber2, fcxRoutAddrFltStatus=fcxRoutAddrFltStatus, fmOspfStandardHostTable=fmOspfStandardHostTable, fdpIdentPhysPortId=fdpIdentPhysPortId, vcmAlrmFaxDisplay=vcmAlrmFaxDisplay, vclLogicalPortEntry=vclLogicalPortEntry, fclAsynCfgX3P16CharDelete=fclAsynCfgX3P16CharDelete, fcwConvMultiInConvID=fcwConvMultiInConvID, fclX25AccIsdnRemX25AccessConfigId=fclX25AccIsdnRemX25AccessConfigId, fmsGlobCompressOctetGain=fmsGlobCompressOctetGain, fmPingPermanent=fmPingPermanent, fclX25InDIsdnBackupTable=fclX25InDIsdnBackupTable, fclFraLmiT391LinkIntegPollTimer=fclFraLmiT391LinkIntegPollTimer, fclPppConfigTimersTable=fclPppConfigTimersTable, fclAsynCfgConnFacilityEntry=fclAsynCfgConnFacilityEntry, fclVipHosLpFtbcc=fclVipHosLpFtbcc, fcsnaLvpTrParamCallDirection=fcsnaLvpTrParamCallDirection, fclFrCfsGenDlcSetupAlarmThreshold=fclFrCfsGenDlcSetupAlarmThreshold, fclAsynX28PlusRemoteCfgX3Part2Table=fclAsynX28PlusRemoteCfgX3Part2Table, fmsFrcStorageSubDlci=fmsFrcStorageSubDlci, fcxBasicSysName=fcxBasicSysName, fclX25SlpInterNodeTable=fclX25SlpInterNodeTable, fclFraLmiEntry=fclFraLmiEntry, fclAsynMneCallUserDataHexa=fclAsynMneCallUserDataHexa, vcvFxxLpConfigId=vcvFxxLpConfigId, fclFrSeIsdnBackupTable=fclFrSeIsdnBackupTable, dcvDialingReceptEntry=dcvDialingReceptEntry, dcvSnmpManagerSendTraps=dcvSnmpManagerSendTraps, vcvVoiceProfReceiveLevel=vcvVoiceProfReceiveLevel, fclX25InBIsdn=fclX25InBIsdn, fmeTrapEventData=fmeTrapEventData, fclVipLpMessageRetryNumber=fclVipLpMessageRetryNumber, fclX25CfnDlnTwoWayChannelCount=fclX25CfnDlnTwoWayChannelCount, fmuVersMax=fmuVersMax, fclFrSeLpLogPortId=fclFrSeLpLogPortId, fclX25CfaDlnKWindowSize=fclX25CfaDlnKWindowSize, vcFrSwL0MuxEnable=vcFrSwL0MuxEnable, dcvToneGenEntry=dcvToneGenEntry, nodeStatusChanged=nodeStatusChanged, fciSnmpModule1TrapSourceAddrVpId=fciSnmpModule1TrapSourceAddrVpId, vclFrSeSigOuputTimeout=vclFrSeSigOuputTimeout, fmuAccessFrseLineNbMax=fmuAccessFrseLineNbMax, fmUsersRights=fmUsersRights, fclFrCfcGenSVC=fclFrCfcGenSVC, vclFrSeLpConfigId=vclFrSeLpConfigId, fcxAdvSysMaxPathSplits=fcxAdvSysMaxPathSplits, fmRip2PeerRcvBadPackets=fmRip2PeerRcvBadPackets, fclAsynCfgConnectionProfileId=fclAsynCfgConnectionProfileId, fciVpInverseArp=fciVpInverseArp, fcwSDynPassword=fcwSDynPassword, fccLocalNetworkEntityTitle=fccLocalNetworkEntityTitle, fclFraLpLogPortId=fclFraLpLogPortId, fcmAlrmEventTable=fcmAlrmEventTable, fclPppSerAutoReliableVc=fclPppSerAutoReliableVc, fclSdlcLpMinCir=fclSdlcLpMinCir, fmuFunctionAccessFrProtoco=fmuFunctionAccessFrProtoco, fclB3270HosLpWackTransmission=fclB3270HosLpWackTransmission, fmsPppAuthLineId=fmsPppAuthLineId, vclHdlcLpFragmentationLength=vclHdlcLpFragmentationLength, fcwSResProtocolIdentifierTransmission=fcwSResProtocolIdentifierTransmission, fclBSctConnectionEntry=fclBSctConnectionEntry, fclX25InDIsdnBackLogPortId=fclX25InDIsdnBackLogPortId, fciOspfAreaStubMetric=fciOspfAreaStubMetric, fciOspfAreaRangeIpAddress=fciOspfAreaRangeIpAddress, fmsFrLpLmiEntry=fmsFrLpLmiEntry, fmOspfStandardIfAdminStat=fmOspfStandardIfAdminStat, fmuAccessX25MlpLineNbMax=fmuAccessX25MlpLineNbMax, fdPhysicalPorts=fdPhysicalPorts, fmOsiCLNPCircOutPDUs=fmOsiCLNPCircOutPDUs, fclX25InPstnTable=fclX25InPstnTable, fclFrSeIsdnRemotePeerEntry=fclFrSeIsdnRemotePeerEntry, fmsE1Ds1ChIfType=fmsE1Ds1ChIfType, fmsGlobCompressBillGain=fmsGlobCompressBillGain, fmOsi=fmOsi, fmsEthOutErrExcdDelayCounter=fmsEthOutErrExcdDelayCounter, fcfLines=fcfLines, fmOsiISISCircLANL1DesISChanges=fmOsiISISCircLANL1DesISChanges, fmuLineAccess=fmuLineAccess, fclX25SlpPstnBackInterfaceId=fclX25SlpPstnBackInterfaceId, dcvRemoteConfName=dcvRemoteConfName, fclAsynVdxLpParityBit=fclAsynVdxLpParityBit, fciOspfVlDRPriority=fciOspfVlDRPriority, fciSnmpCommunityStringReadOnly=fciSnmpCommunityStringReadOnly, fcfLineV35DteSignalTable=fcfLineV35DteSignalTable, fclFrPvcTunInCir=fclFrPvcTunInCir, fciOspfVlNeighborId=fciOspfVlNeighborId, fmsLineType=fmsLineType, fdpModCommand=fdpModCommand, fcfIsdnDTimT310CallProceedingTimer=fcfIsdnDTimT310CallProceedingTimer, fcxRipCircUpdate=fcxRipCircUpdate, vcvTftpRetryTimer=vcvTftpRetryTimer, fcxRipCircState=fcxRipCircState, fclAsynCfgFacMaxOutPacketSize=fclAsynCfgFacMaxOutPacketSize, vcvVoicePhysPortId=vcvVoicePhysPortId, vcvVoiceTransQosBe=vcvVoiceTransQosBe, vcmAlrmSCDisplay=vcmAlrmSCDisplay, vcvTftpEntry=vcvTftpEntry, fclB3270LpInterfaceId=fclB3270LpInterfaceId, fcwSResConversionAimedPoint=fcwSResConversionAimedPoint, fclAsynX28PlusParTelLpIdleTimerDelay=fclAsynX28PlusParTelLpIdleTimerDelay, fmsFrcStorageChannelId=fmsFrcStorageChannelId, fciOspfVirtualLinksEntry=fciOspfVirtualLinksEntry, fcfLineV28AsynInDteSignalEntry=fcfLineV28AsynInDteSignalEntry, fclAsynCfgFacDefInPacketSize=fclAsynCfgFacDefInPacketSize, fmsGlobLanCpu=fmsGlobLanCpu, cfEepromSize=cfEepromSize, vcvRemNetStatus=vcvRemNetStatus, fccLocalVirtualPortEntry=fccLocalVirtualPortEntry, fmOsiISISISAdjacencyTable=fmOsiISISISAdjacencyTable, dcwEquipRemoteConfPortAddr=dcwEquipRemoteConfPortAddr, vcManagement=vcManagement, fmsEthInLineId=fmsEthInLineId, fmsFrcFilterChannelId=fmsFrcFilterChannelId, fcwLocalCommunications=fcwLocalCommunications, fcfLineV28AsynOutDteRil140=fcfLineV28AsynOutDteRil140, fcxServCircSapOutputFiltering=fcxServCircSapOutputFiltering, vcmAlrmCmpTable=vcmAlrmCmpTable, fcwDnicStatus=fcwDnicStatus, fcbStpVirtualPortEntry=fcbStpVirtualPortEntry, fclFrTeLpLogPortBackupEnabling=fclFrTeLpLogPortBackupEnabling, fclFrTeParGenPredictionRoundTripDelay=fclFrTeParGenPredictionRoundTripDelay, fmRip2IfConfStatus=fmRip2IfConfStatus, dcvDialingReceptTable=dcvDialingReceptTable, fmOspfStandardStubAreaTable=fmOspfStandardStubAreaTable, fcCtlErrorTable=fcCtlErrorTable, fcfLineV28DteSi117=fcfLineV28DteSi117, fclBX780ConnectionEntry=fclBX780ConnectionEntry, fcsnaLvpTrParamBe=fcsnaLvpTrParamBe, fmStatS0BChannelEntry=fmStatS0BChannelEntry, fclX25CfnNegDefOutWindowSize=fclX25CfnNegDefOutWindowSize, fclAsynCfgFacDefOutThroughputClass=fclAsynCfgFacDefOutThroughputClass, vcvVoiceProfNoiseFramesPeriodicity=vcvVoiceProfNoiseFramesPeriodicity, fciRip=fciRip, fmsBrdgTrafInServCounter=fmsBrdgTrafInServCounter, sc330=sc330, fcxServCircuitTable=fcxServCircuitTable, dcvVoiceLogicalPortEntry=dcvVoiceLogicalPortEntry, fmeTrblInfoIndex=fmeTrblInfoIndex, fclX25CfaPackStatus=fclX25CfaPackStatus, fclSdlcPriLogPortTable=fclSdlcPriLogPortTable, fcfIsdnPriINbBChannel=fcfIsdnPriINbBChannel, fmsEthLineId=fmsEthLineId, fcxServices=fcxServices, fclBSctLogPortEntry=fclBSctLogPortEntry, fcwSDynDynamicRouting=fcwSDynDynamicRouting, fcxRoutStaticRouteCircuitId=fcxRoutStaticRouteCircuitId, vcmAlrmSwEntry=vcmAlrmSwEntry, sc310_8W=sc310_8W, fmOsiISISISAdjAreaAddrCircIndex=fmOsiISISISAdjAreaAddrCircIndex, fclPppCfaRemotePeerTable=fclPppCfaRemotePeerTable, fclBSctProtDef1StFrDelimiterInhib1=fclBSctProtDef1StFrDelimiterInhib1, vcmAlrmSwFamilyId=vcmAlrmSwFamilyId, fclBX780LpENQRetransTimer=fclBX780LpENQRetransTimer, dcmAlrmSwTable=dcmAlrmSwTable, fmsInArpVirtualPortEntry=fmsInArpVirtualPortEntry, fclFrSeIsdnRemCallRetryCount=fclFrSeIsdnRemCallRetryCount, fcvRvpConnStatus=fcvRvpConnStatus, fmsEthPolarityInversion=fmsEthPolarityInversion, dcfDataLineEntry=dcfDataLineEntry, fcbBrdgVirtualPortTable=fcbBrdgVirtualPortTable, fmOsiISISESAdjNeighSNPAAdress=fmOsiISISESAdjNeighSNPAAdress, fclSdlcSecLpRemPuIdentification=fclSdlcSecLpRemPuIdentification, fmeFamStoredEventsCount=fmeFamStoredEventsCount, fmOspfStandardIfTransitDelay=fmOspfStandardIfTransitDelay, vcCtlConfigLoad=vcCtlConfigLoad, fclAsynCfgX3P07BreakHandling=fclAsynCfgX3P07BreakHandling, fcfLineModInputXidStringCount=fcfLineModInputXidStringCount, fmStatEthernetEntry=fmStatEthernetEntry, fmsBrdgTrafOutBroadcastServCounter=fmsBrdgTrafOutBroadcastServCounter, fmsLineInputOctetsCounter=fmsLineInputOctetsCounter, fmsFrLpLogPortEntry=fmsFrLpLogPortEntry, fmsFrLpLmiLogPortId=fmsFrLpLmiLogPortId, fmsInArpVpOutRequests=fmsInArpVpOutRequests, dcmAlrmSvcTyp=dcmAlrmSvcTyp, dcvIpLocAddressHost=dcvIpLocAddressHost, fclX25MlpOverflowTable=fclX25MlpOverflowTable, fmsIpLanArpFailedCounter=fmsIpLanArpFailedCounter, vcvRemoteNetToMediaEntry=vcvRemoteNetToMediaEntry, fccClnpRouting=fccClnpRouting, fclAsynVdxLpTable=fclAsynVdxLpTable)
mibBuilder.exportSymbols("PCE-MIB", fcfLineDVBStatus=fcfLineDVBStatus, fclAsynCfgConnModifCount=fclAsynCfgConnModifCount, fclSdlcSecLpT1AcknowledgeTimer=fclSdlcSecLpT1AcknowledgeTimer, fcxRoutCircType20PacketBroadcasting=fcxRoutCircType20PacketBroadcasting, fmsIpTrafOutForwDatagramsCounter=fmsIpTrafOutForwDatagramsCounter, dcvToneGenTable=dcvToneGenTable, fdpTestLoopBackType=fdpTestLoopBackType, vcvTftpStatus=vcvTftpStatus, dcfDataLineTable=dcfDataLineTable, fclPppCfgNcpIpx=fclPppCfgNcpIpx, fciOspfVlHelloInterval=fciOspfVlHelloInterval, fcCtlErrorMessage=fcCtlErrorMessage, fclAsynX28PlusConfRemoteEntry=fclAsynX28PlusConfRemoteEntry, fclFrCfcSigT200RetransTimer=fclFrCfcSigT200RetransTimer, fciFlowStatus=fciFlowStatus, fmsIpTrafOutRequestsCounter=fmsIpTrafOutRequestsCounter, fmsE1Ds1ChIfMtu=fmsE1Ds1ChIfMtu, fmsFrSwBookingInputThrouhput=fmsFrSwBookingInputThrouhput, fmsFrDlcInDiscards=fmsFrDlcInDiscards, fciOspfGeneralParameters=fciOspfGeneralParameters, fmOsiISISRAMetric=fmOsiISISRAMetric, fcmMgfStatLogChannelSamplingPeriod=fcmMgfStatLogChannelSamplingPeriod, fclAsynX28PlusRemLpIdleTimerSelection=fclAsynX28PlusRemLpIdleTimerSelection, fclBSctProtDef2DataFrameTerminator1=fclBSctProtDef2DataFrameTerminator1, fcsnaGpRoutBc=fcsnaGpRoutBc, fmhTechnicMacAdress=fmhTechnicMacAdress, lmx506=lmx506, vcvFxxRingTopDuration=vcvFxxRingTopDuration, fcfIsdnPriCountry=fcfIsdnPriCountry, fmOspfStandardAreaRangeNet=fmOspfStandardAreaRangeNet, dcfDataLineDcd109=dcfDataLineDcd109, dcvVoiceProfMaximumFaxSpeed=dcvVoiceProfMaximumFaxSpeed, vcwEquipVoiceVirtualPortAddr=vcwEquipVoiceVirtualPortAddr, fmStatEthInputTrafficEntry=fmStatEthInputTrafficEntry, fclPointToPointProtocol=fclPointToPointProtocol, fclFrTeParGenBookingVbrRtThreshold=fclFrTeParGenBookingVbrRtThreshold, fclX25CfaClosedUserGroupTable=fclX25CfaClosedUserGroupTable, dcvVoiceSuscriberEntry=dcvVoiceSuscriberEntry, fclBSctProtDef1StartFrameDelimiter3=fclBSctProtDef1StartFrameDelimiter3, vcvAnalogLineVoiceProfile=vcvAnalogLineVoiceProfile, fclAsynX28PlusRemCfgX3P08OutputDiscard=fclAsynX28PlusRemCfgX3P08OutputDiscard, fclFrTeParGenTable=fclFrTeParGenTable, fclFrPvcStatus=fclFrPvcStatus, fclFrCfcSigT316RestartAcknowledgeTimer=fclFrCfcSigT316RestartAcknowledgeTimer, fcsnaLvpTrParamN3=fcsnaLvpTrParamN3, fciOspfVpAuthenticationKey=fciOspfVpAuthenticationKey, fclBSctLpLogPortId=fclBSctLpLogPortId, dclLogicalPortTable=dclLogicalPortTable, fcwAddrConvCondOutgoingCallEntry=fcwAddrConvCondOutgoingCallEntry, fcmMgfConvMultiCalledAddrInCall=fcmMgfConvMultiCalledAddrInCall, fmStatPppIpAddrAssignmentEntry=fmStatPppIpAddrAssignmentEntry, fmsS2BChIfSpeed=fmsS2BChIfSpeed, fclBSctConnectionTable=fclBSctConnectionTable, fclX25CfaNegInputFastSelect=fclX25CfaNegInputFastSelect, fclAsynCfgSerReliableVc=fclAsynCfgSerReliableVc, fclAsynLscpLpEquipment=fclAsynLscpLpEquipment, fclSdlcLpCos=fclSdlcLpCos, fcfLineV35DteSignalEntry=fcfLineV35DteSignalEntry, fmOspfStandardNbrTable=fmOspfStandardNbrTable, vclLogPortType=vclLogPortType, fclFrCfcEiCodCalledTypNum=fclFrCfcEiCodCalledTypNum, vcvVoiceTransProfileId=vcvVoiceTransProfileId, sc320_8W_1TR=sc320_8W_1TR, fciFlowRouteEntry=fciFlowRouteEntry, fccRemoteNeighborEntry=fccRemoteNeighborEntry, vcvDialRxStatus=vcvDialRxStatus, vcvFxxLpInterfaceId=vcvFxxLpInterfaceId, cfConfigurationRelease=cfConfigurationRelease, vcCtlDate=vcCtlDate, fmsSig141=fmsSig141, dcvDialRxEndOfDialingTimer=dcvDialRxEndOfDialingTimer, dcvTSPCMSwLpId=dcvTSPCMSwLpId, dcvCASConfLineInterfacePolarity=dcvCASConfLineInterfacePolarity, fcmAlrmPhysPortTable=fcmAlrmPhysPortTable, fcwRouteEntry=fcwRouteEntry, fclAsynCfgSerCompressScrambling=fclAsynCfgSerCompressScrambling, fclX25CfaDlnIncomingChannelCount=fclX25CfaDlnIncomingChannelCount, fmsFrcStoragePhysIfId=fmsFrcStoragePhysIfId, fclX25InBRemPriority=fclX25InBRemPriority, vcvVoiceLogicalPortTable=vcvVoiceLogicalPortTable, fcvLvpFltFilterId=fcvLvpFltFilterId, fclSdlcLpCompressNegotiation=fclSdlcLpCompressNegotiation, fclX25InDIsdnRemSubscriberNumber=fclX25InDIsdnRemSubscriberNumber, fmsE1Ds1ChIfPhysId=fmsE1Ds1ChIfPhysId, fmsEthLinkIntegrity=fmsEthLinkIntegrity, fclBSctProtDef2DataFrameTerminator2=fclBSctProtDef2DataFrameTerminator2, fclX25CfnDlnKWindowSize=fclX25CfnDlnKWindowSize, fcsConfigDescDate=fcsConfigDescDate, dclFrSeSigT305DisconnectResponseTimer=dclFrSeSigT305DisconnectResponseTimer, fmOsiISISRAPathIdentifier=fmOsiISISRAPathIdentifier, fclAsynCfgConnLinkEntry=fclAsynCfgConnLinkEntry, fciRipVpMetricIn=fciRipVpMetricIn, fcfIsdnPrimaryRateInterfaceEntry=fcfIsdnPrimaryRateInterfaceEntry, fcvRvpConvMultiCalledAddrOutCall=fcvRvpConvMultiCalledAddrOutCall, fmOspfStandardLsdbChecksum=fmOspfStandardLsdbChecksum, dclFrTeLpLogPortId=dclFrTeLpLogPortId, fclAsynVdxPageStatus=fclAsynVdxPageStatus, fmsFrLpOutFrames=fmsFrLpOutFrames, fclAsynCfgSerConversionAimedPoint=fclAsynCfgSerConversionAimedPoint, fmsFrDlcInBecnFrames=fmsFrDlcInBecnFrames, dcvIfPCMPhysTable=dcvIfPCMPhysTable, fcvVpModuleId=fcvVpModuleId, fclX25CfaFacClosedUserGroup=fclX25CfaFacClosedUserGroup, dcCtlErrorIndex=dcCtlErrorIndex, vclFrLmiParameterEntry=vclFrLmiParameterEntry, fclFrCfsSigConfigId=fclFrCfsSigConfigId, fcfLineV28DceSignalTable=fcfLineV28DceSignalTable, fciSnmpModule0TrapSourceAddrVpId=fciSnmpModule0TrapSourceAddrVpId, fclAsynConfiguration=fclAsynConfiguration, dvbConfig=dvbConfig, fcmMgfGeneratorsAction=fcmMgfGeneratorsAction, fclX25SlpIsdnBackupEnabling=fclX25SlpIsdnBackupEnabling, dclFrSeSignallingEntry=dclFrSeSignallingEntry, vcvEMPermCommunicationMode=vcvEMPermCommunicationMode, cf12NcNumber75=cf12NcNumber75, fmOsiISISSysCorrLSP=fmOsiISISSysCorrLSP, fmOsiISISISAdjacencyAreaAddressEntry=fmOsiISISISAdjacencyAreaAddressEntry, fccClnpRouteTable=fccClnpRouteTable, fclAsynCfgX3P20EchoMask=fclAsynCfgX3P20EchoMask, fclFrBackupTable=fclFrBackupTable, fclFrCfcModificationCount=fclFrCfcModificationCount, fcvVirtualPortTable=fcvVirtualPortTable, vcvFxxLpTable=vcvFxxLpTable, fcvRvpConversionOutgoingCall=fcvRvpConversionOutgoingCall, fcfIsdnBriFilterRepeatCount=fcfIsdnBriFilterRepeatCount, fmOsiISISSysL2State=fmOsiISISSysL2State, fclX25CfaPackOutSubAddressCheck=fclX25CfaPackOutSubAddressCheck, fclFrPvcSnaSourceSap=fclFrPvcSnaSourceSap, fcsnaLvpParamCos=fcsnaLvpParamCos, fcfLineV28AsynInDteInterfaceId=fcfLineV28AsynInDteInterfaceId, fcfIsdnPriSignalling=fcfIsdnPriSignalling, fclVipLpLogPortId=fclVipLpLogPortId, fclX25CfaNegDefOutThroughputClass=fclX25CfaNegDefOutThroughputClass, fcvLvpFltFilterTable=fcvLvpFltFilterTable, fcvRvpConnRemoteAddress=fcvRvpConnRemoteAddress, fmsWanConnId=fmsWanConnId, fclBSctProtDef1PermanentDelimiter1=fclBSctProtDef1PermanentDelimiter1, fclFraLmiLogPortId=fclFraLmiLogPortId, fmeTrapEventType=fmeTrapEventType, fciRipVpVersion=fciRipVpVersion, fclPppCfgLcpLocalMru=fclPppCfgLcpLocalMru, fclX25CfaDlnTwoWayChannelCount=fclX25CfaDlnTwoWayChannelCount, fmsStateMlpTrunkNumber=fmsStateMlpTrunkNumber, dcvToneTable=dcvToneTable, fmsFrLpLmiUserN393=fmsFrLpLmiUserN393, fclFrCfsSigT310CallProceedingTimer=fclFrCfsSigT310CallProceedingTimer, fcsnaLvpParamCompressScrambling=fcsnaLvpParamCompressScrambling, fclAsynCfgX3UserP18LineDisplay=fclAsynCfgX3UserP18LineDisplay, fclFrTeLpLmi=fclFrTeLpLmi, dcCtlErrorTime=dcCtlErrorTime, fclX25CfnDlnStationType=fclX25CfnDlnStationType, fcsnaGpSdlcLp=fcsnaGpSdlcLp, fmsIpLanInReceivesCounter=fmsIpLanInReceivesCounter, fcxServSapInputFiltering=fcxServSapInputFiltering, fmsE1Ds1ChIfInOctets=fmsE1Ds1ChIfInOctets, fmsInArpVpConnX121=fmsInArpVpConnX121, fclX25MlpFramesMaxCountByLink=fclX25MlpFramesMaxCountByLink, vclFrTerminalEquipment=vclFrTerminalEquipment, vcvVoiceProfSilenceDetection=vcvVoiceProfSilenceDetection, fmhEqIdSecondFactoryReturnDate=fmhEqIdSecondFactoryReturnDate, fcxRoutIpxStaticRouteEntry=fcxRoutIpxStaticRouteEntry, fmsSig109=fmsSig109, fclBX780LpCallDirection=fclBX780LpCallDirection, fcsnaGeneralParameters=fcsnaGeneralParameters, fmsSigPhysPortId=fmsSigPhysPortId, fmOsiISISESAdjacencyTable=fmOsiISISESAdjacencyTable, fclX25MlpTable=fclX25MlpTable, dclFrSeSigSignalOutputWinSize=dclFrSeSigSignalOutputWinSize, fclX25CfaSigConfigId=fclX25CfaSigConfigId, dcvDigitalLines=dcvDigitalLines, fclFraPvcEndPointTable=fclFraPvcEndPointTable, fclX25AccPvcRemoteLogChannel=fclX25AccPvcRemoteLogChannel, fclX25CfnSigConvMultiCalledAddrOutCall=fclX25CfnSigConvMultiCalledAddrOutCall, fmsEthOutPktsCounter=fmsEthOutPktsCounter, fclAsynCfgX3P06ServiceSignals=fclAsynCfgX3P06ServiceSignals, fclFrCfcGeneralParameterEntry=fclFrCfcGeneralParameterEntry, fclAsynX28PlusLpLogPortId=fclAsynX28PlusLpLogPortId, fclHdlcAutoMinRecallTimer=fclHdlcAutoMinRecallTimer, fclInterUnitLinkTable=fclInterUnitLinkTable, fcmAlrmPpPhysPort2=fcmAlrmPpPhysPort2, fclX25CfnSigConversionIncomingCall=fclX25CfnSigConversionIncomingCall, vcvVoiceTransEncapsulationMode=vcvVoiceTransEncapsulationMode, vcvToneGenLevel=vcvToneGenLevel, fciEgpNeighborEntry=fciEgpNeighborEntry, fcmAlrmEvtEvent2=fcmAlrmEvtEvent2, fclFrPvcTunLinkId=fclFrPvcTunLinkId, fmuAccessSdlcLineNbMax=fmuAccessSdlcLineNbMax, fmsBootPClientStatus=fmsBootPClientStatus, fclSdlcPriLpPollingGroupAddress=fclSdlcPriLpPollingGroupAddress, dcvRemNetStatus=dcvRemNetStatus, fcxCircuitLocalVpTable=fcxCircuitLocalVpTable, fclSdlcSecClusterBc=fclSdlcSecClusterBc, fcvLvpFltFilterCondition3Id=fcvLvpFltFilterCondition3Id, fclX25AccPstnBackupEntry=fclX25AccPstnBackupEntry, fclAsynPstnRemotePeerTable=fclAsynPstnRemotePeerTable, fciRipOspfRoutesDistribution=fciRipOspfRoutesDistribution, fcxRipInstance=fcxRipInstance, fclVipHosStatElementId=fclVipHosStatElementId, fmsEthInErrOverFlowCounter=fmsEthInErrOverFlowCounter, fclAsynMultiLpAuthStep3=fclAsynMultiLpAuthStep3, fclAsynAutoCalledAddr=fclAsynAutoCalledAddr, fclFrSeInBRemCallRetryCount=fclFrSeInBRemCallRetryCount, fclFrCfcLmiStandard=fclFrCfcLmiStandard, fclFrCeParGenBookingVbrRtThreshold=fclFrCeParGenBookingVbrRtThreshold, fcsnaGpSdlcCluster=fcsnaGpSdlcCluster, fclPppSerAutoLogPortId=fclPppSerAutoLogPortId, fclAsynCfgFacThroughputClass=fclAsynCfgFacThroughputClass, fmPingAddress=fmPingAddress, fcmMgtFctParameters=fcmMgtFctParameters, fmsGlobCpuA=fmsGlobCpuA, fmsEthInFCSErrorsCounter=fmsEthInFCSErrorsCounter, fcmMgfClosedUserGroup=fcmMgfClosedUserGroup, vcvSnmpManagerTrapsUdpPort=vcvSnmpManagerTrapsUdpPort, fclAsynCfgFacDefInThroughputClass=fclAsynCfgFacDefInThroughputClass, fclVipCluStationTable=fclVipCluStationTable, fclIulInterfaceId=fclIulInterfaceId, fclX25CfnSerReliableVc=fclX25CfnSerReliableVc, fclX25SlpPstnBackupTable=fclX25SlpPstnBackupTable, fclX25MlpParamLogPortId=fclX25MlpParamLogPortId, fmsFrLpSvcDlcVbrRt=fmsFrLpSvcDlcVbrRt, vcFrSwStatus=vcFrSwStatus, fccRoutRouteId=fccRoutRouteId, dcvVoiceSwStatus=dcvVoiceSwStatus, fmOsiESISSysOutPDUs=fmOsiESISSysOutPDUs, fcfPhysPortConnector=fcfPhysPortConnector, fciIpRouting=fciIpRouting, fclLogPortStatus=fclLogPortStatus, fclFrTeParGenEntry=fclFrTeParGenEntry, fclX25ConfigInterNodeEntry=fclX25ConfigInterNodeEntry, fmStatE1=fmStatE1, fcxServSapOutFltFilterId=fcxServSapOutFltFilterId, fcsnaGpRemotePuTable=fcsnaGpRemotePuTable, fmsFrLpLmiNetLinkRelErrors=fmsFrLpLmiNetLinkRelErrors, fcfLineV28AsynInDceSignalEntry=fcfLineV28AsynInDceSignalEntry, fclFrCeParGenDlcSetupAlarmThreshold=fclFrCeParGenDlcSetupAlarmThreshold, fmhEqIdReference=fmhEqIdReference, fciOspfAreaRangesTable=fciOspfAreaRangesTable, dclFrSeSigT310CallProceedingTimer=dclFrSeSigT310CallProceedingTimer, fclAsynCfgX3Part2Table=fclAsynCfgX3Part2Table, sc310_12W=sc310_12W, fmsFrDlcInLostSegments=fmsFrDlcInLostSegments, fcFrSwPriority=fcFrSwPriority, fclX25CfaClosedUserGroupEntry=fclX25CfaClosedUserGroupEntry, fmsIpTrafIcmpInMsgsCounter=fmsIpTrafIcmpInMsgsCounter, fcvVpType=fcvVpType, fcvRvpConnModule1VpId=fcvRvpConnModule1VpId, fciFlowDestIpAddress=fciFlowDestIpAddress, vcmAlrmLMIFamilyId=vcmAlrmLMIFamilyId, fciOspfVpType=fciOspfVpType, fclAsynCfgX3Part1Entry=fclAsynCfgX3Part1Entry, vcvEMSwConfigId=vcvEMSwConfigId, fcwFrVoiceMaxTransitDelay=fcwFrVoiceMaxTransitDelay, dcvProfileTone=dcvProfileTone, cfFileTransferService=cfFileTransferService)
mibBuilder.exportSymbols("PCE-MIB", vcvToneProfileId=vcvToneProfileId, fmsIpCluVpId=fmsIpCluVpId, fccNeighStatus=fccNeighStatus, fclX25CfaStatus=fclX25CfaStatus, fclHdlcLpX25InterframeFlagCount=fclHdlcLpX25InterframeFlagCount, fclX25CfaPackPdnCallingSubAddress=fclX25CfaPackPdnCallingSubAddress, dcmAlrmFaxTyp=dcmAlrmFaxTyp, fclFrPvcSnaBanConnTestEnabling=fclFrPvcSnaBanConnTestEnabling, mcx112=mcx112, fcsnaGpX25PuId=fcsnaGpX25PuId, fclFrCeLogPortTable=fclFrCeLogPortTable, fcwSbSubscriberNumber=fcwSbSubscriberNumber, fclIulConversionIncomingCall=fclIulConversionIncomingCall, fciEgpMetricDistribution=fciEgpMetricDistribution, fmsS2BChIfCalledAddress=fmsS2BChIfCalledAddress, dclFrSeLpInterfaceId=dclFrSeLpInterfaceId, fclX25CfmTransmitFlowControl=fclX25CfmTransmitFlowControl, vcvEMSw=vcvEMSw, fmOsiISISReachableAddressTable=fmOsiISISReachableAddressTable, dcvCASConfEndOfDialingTimer=dcvCASConfEndOfDialingTimer, fmsMlpTrunkNumber=fmsMlpTrunkNumber, fcfLineModXidStringId=fcfLineModXidStringId, fclX25CfaCugClosedUserGroupId=fclX25CfaCugClosedUserGroupId, vcvEMSwLogPortSetId=vcvEMSwLogPortSetId, fclLogPortId=fclLogPortId, fclFrPvcSnaBanT1ReplyTimer=fclFrPvcSnaBanT1ReplyTimer, fcwConvMultiOutOrderNum=fcwConvMultiOutOrderNum, fcxServSapOutFltCircuitId=fcxServSapOutFltCircuitId, fdpCtrlDiagCode=fdpCtrlDiagCode, fclPppSerialLogPortTable=fclPppSerialLogPortTable, fmeTroubleReportInfoTable=fmeTroubleReportInfoTable, fmOspfStandardIfRtrDeadInterval=fmOspfStandardIfRtrDeadInterval, vcVirtualPorts=vcVirtualPorts, fclAsynVdxPageBlocId=fclAsynVdxPageBlocId, fclAsynPadLpTable=fclAsynPadLpTable, fclX25CfnDlnLowestOutgoingChannel=fclX25CfnDlnLowestOutgoingChannel, fclAsynCfgX3UserP17LineDelete=fclAsynCfgX3UserP17LineDelete, fciRipVpAuthKey=fciRipVpAuthKey, fmOsiISISSysAuthFails=fmOsiISISSysAuthFails, fclFrCfsGeneralParameterEntry=fclFrCfsGeneralParameterEntry, fcfLineV35DteE107=fcfLineV35DteE107, fciRipEgpRoutesStatus=fciRipEgpRoutesStatus, fclFrSeInBIsdnLogPortEntry=fclFrSeInBIsdnLogPortEntry, dcvVoiceTransJitterCompensation=dcvVoiceTransJitterCompensation, fclX25CfaSerMinCir=fclX25CfaSerMinCir, fclFrPvcTunLinkType=fclFrPvcTunLinkType, fciEgpTargetAsDistributionTable=fciEgpTargetAsDistributionTable, fclFrSeIsdnRemotePeerTable=fclFrSeIsdnRemotePeerTable, fclX25AccSwMeasureCount=fclX25AccSwMeasureCount, fcfLineV11DceSignalEntry=fcfLineV11DceSignalEntry, fcfLineModInterfaceId=fcfLineModInterfaceId, fclX25CfaSigOutPacketCauseField=fclX25CfaSigOutPacketCauseField, fciRipEgpRoutesDistributionTable=fciRipEgpRoutesDistributionTable, dcmAlrmSCTrapSend=dcmAlrmSCTrapSend, fciOspfNeighborIpAddress=fciOspfNeighborIpAddress, fmsIpLanNoRoutesCounter=fmsIpLanNoRoutesCounter, fmuFunctionSecurCard=fmuFunctionSecurCard, fclFrSeLogPortEntry=fclFrSeLogPortEntry, fclSdlcLpCompressMultiPacketsTimer=fclSdlcLpCompressMultiPacketsTimer, fmsPppProtoBrdgNcpDiag=fmsPppProtoBrdgNcpDiag, fclBSctProtocolDefinition1Table=fclBSctProtocolDefinition1Table, fclPppPstnRemPstnNumber=fclPppPstnRemPstnNumber, fmPingEntry=fmPingEntry, fmsGlobCpuB=fmsGlobCpuB, cdPhysicalPorts=cdPhysicalPorts, fmOsiISISCircAdjChanges=fmOsiISISCircAdjChanges, fclX25AccPdnLinkAddress=fclX25AccPdnLinkAddress, fcvLvpFltFilterCondition1Id=fcvLvpFltFilterCondition1Id, fmsFrLpLmiNetN393=fmsFrLpLmiNetN393, fciTelnetPwdP9=fciTelnetPwdP9, vcvFxxConfRingingProfile=vcvFxxConfRingingProfile, fmsFrDataLinkConnection=fmsFrDataLinkConnection, fclAsynCfgX3UserP06ServiceSignals=fclAsynCfgX3UserP06ServiceSignals, fcwAddrConvOutgoingCallEntry=fcwAddrConvOutgoingCallEntry, fclFrSeInBLpIsdnInterfaceId=fclFrSeInBLpIsdnInterfaceId, vcmAlrmTftpTyp=vcmAlrmTftpTyp, fclIulConversionAimedPoint=fclIulConversionAimedPoint, fmOsiISIS=fmOsiISIS, fcsnaLvpTrParamMinRecallTimer=fcsnaLvpTrParamMinRecallTimer, vcvVoiceSuscriberTable=vcvVoiceSuscriberTable, fcFrSwOutputDlci=fcFrSwOutputDlci, fclFrCfcEiCodCallingTypNum=fclFrCfcEiCodCallingTypNum, fclAsynCfgX3P10LineFolding=fclAsynCfgX3P10LineFolding, fcmMgfConversionAddressCheck=fcmMgfConversionAddressCheck, fcxServStaticName=fcxServStaticName, fmsFrLpSvcDlcUbr=fmsFrLpSvcDlcUbr, vcmAlrmSCTyp=vcmAlrmSCTyp, dcmAlrmLMIEntry=dcmAlrmLMIEntry, fmsFrcStorageBc=fmsFrcStorageBc, fclB3270CluLpMaxNumberOfUnwPolls=fclB3270CluLpMaxNumberOfUnwPolls, fclX25AccInterfaceId=fclX25AccInterfaceId, dcmAlrmSCFamilyId=dcmAlrmSCFamilyId, fcxCircType=fcxCircType, fmsFrDlcInLostFrames=fmsFrDlcInLostFrames, fclX25MlpPstnOverflow=fclX25MlpPstnOverflow, fmOsiISISISAdjSysID=fmOsiISISISAdjSysID, fclFrCfcLmiParameterEntry=fclFrCfcLmiParameterEntry, fccRemoteNeighborTable=fccRemoteNeighborTable, fclPppCfaRemIdentifier=fclPppCfaRemIdentifier, fcfPhysicalPortEntry=fcfPhysicalPortEntry, fcsnaLvpParamBc=fcsnaLvpParamBc, vcFrSwitchingTable=vcFrSwitchingTable, fcsModuleBridgeInit=fcsModuleBridgeInit, fclAsynMneMnemonicId=fclAsynMneMnemonicId, pce=pce, fclAsynVdxPageAttributes=fclAsynVdxPageAttributes, fclBX780IdentTermId=fclBX780IdentTermId, fmsFrLineCircuitCount=fmsFrLineCircuitCount, fmOsiISISISAdjType=fmOsiISISISAdjType, fclX25CfaFacReverseCharging=fclX25CfaFacReverseCharging, fcwSQOSX25QOSProfileId=fcwSQOSX25QOSProfileId, fmOspfStandardASBdrRtrCount=fmOspfStandardASBdrRtrCount, vcvEMPermInterfaceId=vcvEMPermInterfaceId, fcfLineV28AsynOutDceSi117=fcfLineV28AsynOutDceSi117, fclSdlcSecLpCallRetryCount=fclSdlcSecLpCallRetryCount, fmsMlpLineId=fmsMlpLineId, fcwSRvcRestoreOutgoingCallRetryCount=fcwSRvcRestoreOutgoingCallRetryCount, vclFrTeLpInterfaceId=vclFrTeLpInterfaceId, dclFrLmiParameterEntry=dclFrLmiParameterEntry, fclAsynAutoCallUserDataHexa=fclAsynAutoCallUserDataHexa, vcvEMPerm=vcvEMPerm, fmOspfStandardNbrIpAddress=fmOspfStandardNbrIpAddress, fclX25AccIsdnRemLogPortId=fclX25AccIsdnRemLogPortId, dcvVoiceSuscrOrderNumber=dcvVoiceSuscrOrderNumber, fclX25CfmFlowCtrlPacketSize=fclX25CfmFlowCtrlPacketSize, fciLocalClusterTable=fciLocalClusterTable, fcwSQOSProfilesCIRmin=fcwSQOSProfilesCIRmin, fclSdlcSecondaryPuLogPort=fclSdlcSecondaryPuLogPort, fclX25CfaSigConversionOutgoingCall=fclX25CfaSigConversionOutgoingCall, fcvLvpFltFilterEntry=fcvLvpFltFilterEntry, fcmMgfConvMultiCallingAddrOutCall=fcmMgfConvMultiCallingAddrOutCall, dcvIpLocSubNetMask=dcvIpLocSubNetMask, dcmAlrmTftpTyp=dcmAlrmTftpTyp, fclAsynX28PlusParTELENETEntry=fclAsynX28PlusParTELENETEntry, fmhTechnicEquipmType=fmhTechnicEquipmType, fclX25CfnServiceEntry=fclX25CfnServiceEntry, dclFrSeSignallingTable=dclFrSeSignallingTable, vcvToneEnable=vcvToneEnable, fcxServCircSapGetNearestServerReply=fcxServCircSapGetNearestServerReply, fclAsynAutoVdxKeyTranslationTable=fclAsynAutoVdxKeyTranslationTable, fcvRvpCallAcceptwithReverseCharging=fcvRvpCallAcceptwithReverseCharging, dcfConfLineEntry=dcfConfLineEntry, fmsFrLineStatus=fmsFrLineStatus, fclFrPvcBackupDlci=fclFrPvcBackupDlci, fcBridge=fcBridge, fclX25MlpRxMlpMxWinGuardRegion=fclX25MlpRxMlpMxWinGuardRegion, fmOspfStandardStubStatus=fmOspfStandardStubStatus, fcfLineV28AsynOutDceDsr107=fcfLineV28AsynOutDceDsr107, fclAsynX28PlusRemLpX3Mode=fclAsynX28PlusRemLpX3Mode, fmStatBridge=fmStatBridge, fclFrCfsSigSignalOutputWinSize=fclFrCfsSigSignalOutputWinSize, fmOsiESISCircuitEntry=fmOsiESISCircuitEntry, fclVipHosElemLogPortId=fclVipHosElemLogPortId, fcxRoutAddressFilteringTable=fcxRoutAddressFilteringTable, fclX25SlpIsdnRemCallRetryCount=fclX25SlpIsdnRemCallRetryCount, fclAsynX28PlusLpEntry=fclAsynX28PlusLpEntry, fclFrCfsGenBehavior=fclFrCfsGenBehavior, fciFlowRouteStatus=fciFlowRouteStatus, mcx104=mcx104, fmsFrLpSvcBookingRate=fmsFrLpSvcBookingRate, fccRneighStatus=fccRneighStatus, fmsFrLpOutLocalCongFecnFrames=fmsFrLpOutLocalCongFecnFrames, vcvVoiceProfEchoCancellationLength=vcvVoiceProfEchoCancellationLength, fmsFrLpLmiUserN392=fmsFrLpLmiUserN392, fcfIsdnDTimT313ConnectAcknowledgeTimer=fcfIsdnDTimT313ConnectAcknowledgeTimer, vcvFxxConfDigitReceptionTimeOut=vcvFxxConfDigitReceptionTimeOut, fcsnaLvpTrParamCir=fcsnaLvpTrParamCir, fclX25SlpX25InterNodeConfigId=fclX25SlpX25InterNodeConfigId, fcfLineModType=fcfLineModType, fclX25InDSwMeasureCount=fclX25InDSwMeasureCount, fmsGlobGeneratorsInUseCount=fmsGlobGeneratorsInUseCount, fmsFrDlcOutgoingTable=fmsFrDlcOutgoingTable, fcwSRvcOutputMarkers=fcwSRvcOutputMarkers, fcvRvpCos=fcvRvpCos, dcmAlrmSCEntry=dcmAlrmSCEntry, vcvEMConfSeizureAckPulseDuration=vcvEMConfSeizureAckPulseDuration, fclB3270LogPortEntry=fclB3270LogPortEntry, fclX25SlpPstnBackLogPortId=fclX25SlpPstnBackLogPortId, mcx512=mcx512, dcvCASConfMinSeizureAckPulseDuration=dcvCASConfMinSeizureAckPulseDuration, fclAsynCfgX3UserP14LfPadding=fclAsynCfgX3UserP14LfPadding, fmPingCompletedFlag=fmPingCompletedFlag, fmuFunctionRouterAndBridge=fmuFunctionRouterAndBridge, fclB3270HosClusterStatus=fclB3270HosClusterStatus, fcfLineModXidStringElement=fcfLineModXidStringElement, fclAsynMneStatus=fclAsynMneStatus, fcfIsdnDSigMulDialsCycleTimer=fcfIsdnDSigMulDialsCycleTimer, fmOspfStandardHostStatus=fmOspfStandardHostStatus, fmuAccessAsynLineNbMax=fmuAccessAsynLineNbMax, dcvVoicePhysPortId=dcvVoicePhysPortId, fcvLvpFltCondMask=fcvLvpFltCondMask, vcfDataLineDsr107=vcfDataLineDsr107, fclPppBIsdnLpIsdnInterfaceId=fclPppBIsdnLpIsdnInterfaceId, fcIpRouter=fcIpRouter, fcfIsdnDSigMulDialsTotalDuration=fcfIsdnDSigMulDialsTotalDuration, fclPppBIsdnPriLocalSubs=fclPppBIsdnPriLocalSubs, fclAsynX28PlusLogPort=fclAsynX28PlusLogPort, fciFlowFlowId=fciFlowFlowId, fclAsynX28PlusRemoteConfigId=fclAsynX28PlusRemoteConfigId, fcvRvpConnModule0VpId=fcvRvpConnModule0VpId, dcvToneFreq2=dcvToneFreq2, fcsnaGpSdlcEntry=fcsnaGpSdlcEntry, fmOspfStandardStubAreaID=fmOspfStandardStubAreaID, fclFrSeInBIsdn=fclFrSeInBIsdn, fcfIsdnDSigMulDialsRetryTimer=fcfIsdnDSigMulDialsRetryTimer, frxLoadAndTrafficEvent=frxLoadAndTrafficEvent, sc106=sc106, fclFraLmiN391FullStatusPollCount=fclFraLmiN391FullStatusPollCount, cfRevision=cfRevision, fmsWanConnOutPktsCounter=fmsWanConnOutPktsCounter, fclAsynX28PlusLpLink=fclAsynX28PlusLpLink, dcvTSPCMPermChannIfId=dcvTSPCMPermChannIfId, fcxServSapOutFltCheckedField=fcxServSapOutFltCheckedField, fciOspfVlTransitAreaId=fciOspfVlTransitAreaId, fcbStpPriority=fcbStpPriority, fclPppCfaRemStatus=fclPppCfaRemStatus, fclX25AccIsdnBackIsdnInterfaceId=fclX25AccIsdnBackIsdnInterfaceId, fclAsynCfgX3Part2Entry=fclAsynCfgX3Part2Entry, dcvVoiceProfileTable=dcvVoiceProfileTable, fclHdlcLpGroupingThreshold=fclHdlcLpGroupingThreshold, fclX25AccPvcMinimumRecallTimer=fclX25AccPvcMinimumRecallTimer, fclAsynMnemonicEntry=fclAsynMnemonicEntry, fciOspfVpId=fciOspfVpId, fmOsiISISSysL1State=fmOsiISISSysL1State, fclFrSeLpBackupTimer=fclFrSeLpBackupTimer, vcCtlErrorEntry=vcCtlErrorEntry, vcmAlrmFaxFamilyId=vcmAlrmFaxFamilyId, dcCtlConfigLoad=dcCtlConfigLoad, fmhTechnicTokenRingPresence=fmhTechnicTokenRingPresence, vcvEMConfLineSeizureAckTime=vcvEMConfLineSeizureAckTime, fclVipCluLogPortTable=fclVipCluLogPortTable, fcsnaGpRoutCirmin=fcsnaGpRoutCirmin, fcwSerQOSX25=fcwSerQOSX25, fmsFrCommStorageTable=fmsFrCommStorageTable, fclHdlcLpCir=fclHdlcLpCir, fmOsiISISSysSeqNumSkips=fmOsiISISSysSeqNumSkips, vcvEMConfPauseTime=vcvEMConfPauseTime, dclFrTeLpLmi=dclFrTeLpLmi, fclAsynCfgFacConfigId=fclAsynCfgFacConfigId, fmsEthInOctetsCounter=fmsEthInOctetsCounter, fcsnaLvpParamReliableVc=fcsnaLvpParamReliableVc, fclX25CfaNegDefOutPacketSize=fclX25CfaNegDefOutPacketSize, vcvVoiceSwRemovedDigitNumber=vcvVoiceSwRemovedDigitNumber, fccNeighborTable=fccNeighborTable, vcmAlrmCmpDisplay=vcmAlrmCmpDisplay, fclX25MlpIsdnOverflowEntry=fclX25MlpIsdnOverflowEntry, fmRip2=fmRip2, fclVipLpResponseSurveyPollingTimer=fclVipLpResponseSurveyPollingTimer, fclAsynMneVdxKeyTranslationEntry=fclAsynMneVdxKeyTranslationEntry, vcvVoiceSuscrInsPrefix=vcvVoiceSuscrInsPrefix, fcsnaGpRoutBe=fcsnaGpRoutBe, fclX25CfaDlnDBitModification=fclX25CfaDlnDBitModification, fcwSClearAnalysDiag=fcwSClearAnalysDiag, dcvIpLocalTable=dcvIpLocalTable)
mibBuilder.exportSymbols("PCE-MIB", fcfInterfaceType=fcfInterfaceType, fclX25SlpAccessEntry=fclX25SlpAccessEntry, vcvIpLocMtu=vcvIpLocMtu, fmsFrLpOutFecnFrames=fmsFrLpOutFecnFrames, fclFrSeIsdnRemPriority=fclFrSeIsdnRemPriority, dcvVirtualPortEntry=dcvVirtualPortEntry, fciVpStatus=fciVpStatus, fclPppCfaLocalIdentifier=fclPppCfaLocalIdentifier, dcmAlrmSCTable=dcmAlrmSCTable, fcCtlStorageDevice=fcCtlStorageDevice, fclAsynPadLpEquipment=fclAsynPadLpEquipment, fmsRvpConnEncapsulation=fmsRvpConnEncapsulation, fmRip2IfConfDomain=fmRip2IfConfDomain, fmsFrCircuitStatus=fmsFrCircuitStatus, fciFlowSrcMask=fciFlowSrcMask, fclHdlcLpCompressMultiPacketsTimer=fclHdlcLpCompressMultiPacketsTimer, fcfLineModXidStringEntry=fcfLineModXidStringEntry, dcvSnmpGenCommunityStringTrap=dcvSnmpGenCommunityStringTrap, fclAsynCfgX3P22PageWait=fclAsynCfgX3P22PageWait, mcx09=mcx09, fcxRoutCircNcpSpoofing=fcxRoutCircNcpSpoofing, fclX25InBRemX121Addr=fclX25InBRemX121Addr, fclVipCluElementTable=fclVipCluElementTable, fclAsynX28PlusRemCfgTELENETConfigId=fclAsynX28PlusRemCfgTELENETConfigId, fclX25MlpParameterEntry=fclX25MlpParameterEntry, fcvRvpConnCallDirection=fcvRvpConnCallDirection, fmOsiISISRASNPAAddress=fmOsiISISRASNPAAddress, frxServicesStateChange=frxServicesStateChange, fclX25CfnServiceTable=fclX25CfnServiceTable, fcvRvpConnFlowTypeMask=fcvRvpConnFlowTypeMask, dcvSnmpGenVirtualPortId=dcvSnmpGenVirtualPortId, dcvIfPCMPhysTypeId=dcvIfPCMPhysTypeId, cmeClearX121Address=cmeClearX121Address, vcFrSwitchingEntry=vcFrSwitchingEntry, fmOspfStandardNbrEvents=fmOspfStandardNbrEvents, fclFrPvcQosOutBc=fclFrPvcQosOutBc, dcvTSPCMSwTable=dcvTSPCMSwTable, fcfTokenRingInterfaceId=fcfTokenRingInterfaceId, fcwConvOutExternalAddr=fcwConvOutExternalAddr, fclAsynCfgSerCallReturnTransmission=fclAsynCfgSerCallReturnTransmission, fcmAlrmEvtEvent1=fcmAlrmEvtEvent1, fcvRvpCompressScrambling=fcvRvpCompressScrambling, fclVipCluElemMinRecallTimer=fclVipCluElemMinRecallTimer, fclB3270HostPadLogPort=fclB3270HostPadLogPort, fclBSctProtDef2ControlFrameTerminator1=fclBSctProtDef2ControlFrameTerminator1, fcFrSwStatus=fcFrSwStatus, fclX25MlpPstnOvStatus=fclX25MlpPstnOvStatus, fcfLineDVBConnection=fcfLineDVBConnection, fcwSbStatus=fcwSbStatus, portLabel=portLabel, fcxServSapInputFilteringTable=fcxServSapInputFilteringTable, fcsModuleSubscriberNumber=fcsModuleSubscriberNumber, fclX25InDTei=fclX25InDTei, fclX25CfaModificationCount=fclX25CfaModificationCount, fclB3270LpCodingParityType=fclB3270LpCodingParityType, fcmAlrmEvtEvent4=fcmAlrmEvtEvent4, vcvToneGenTable=vcvToneGenTable, fclX25AccPrivateNetTable=fclX25AccPrivateNetTable, fclX25AccPstnBackStatus=fclX25AccPstnBackStatus, fcfE1Ds1PhysStatus=fcfE1Ds1PhysStatus, fclFraPvcCalledAddr=fclFraPvcCalledAddr, vcvRemoteConfTable=vcvRemoteConfTable, fclPppSerLpLogPortId=fclPppSerLpLogPortId, fclX25AccIsdnBackupTable=fclX25AccIsdnBackupTable, fclSdlcLpBitEncoding=fclSdlcLpBitEncoding, cdpIdentification=cdpIdentification, fclAsynNetStatus=fclAsynNetStatus, vcmAlrmFaxEntry=vcmAlrmFaxEntry, fciTelnetUserLogin=fciTelnetUserLogin, fcCtlAlteredDlciTable=fcCtlAlteredDlciTable, fclX25CfnSigT11CallResponseTimer=fclX25CfnSigT11CallResponseTimer, fclAsynCfgSerCir=fclAsynCfgSerCir, fclVipLogPort=fclVipLogPort, fcmMgtFctCugGroupId=fcmMgtFctCugGroupId, fclFrCeParGenTable=fclFrCeParGenTable, fclFrCfcSigN200RetransMaxCount=fclFrCfcSigN200RetransMaxCount, fclFrPvcQualityOfServiceEntry=fclFrPvcQualityOfServiceEntry, vcxSoftware=vcxSoftware, fclX25CfaNegConfigId=fclX25CfaNegConfigId, fclX25CfnDlnOutgoingChannelCount=fclX25CfnDlnOutgoingChannelCount, fciVpProxyArp=fciVpProxyArp, fmsPppPhysLineId=fmsPppPhysLineId, fcfLineV28AsynOutDteInterfaceId=fcfLineV28AsynOutDteInterfaceId, fmOsiISISISAdjHoldTimer=fmOsiISISISAdjHoldTimer, fclX25CfaNegDefInPacketSize=fclX25CfaNegDefInPacketSize, cfFactoryReturnDate1=cfFactoryReturnDate1, fcwRoutChannelId=fcwRoutChannelId, fmsFrcStorageTypeOfTransport=fmsFrcStorageTypeOfTransport, fcsnaLvpTrParamLocalTest=fcsnaLvpTrParamLocalTest, fclAsynAutoCallEntry=fclAsynAutoCallEntry, fclHdlcAutoCalledAddr=fclHdlcAutoCalledAddr, fclFrCeLpLogPortId=fclFrCeLpLogPortId, fclFrCfsGenDlcSetupDiscardThreshold=fclFrCfsGenDlcSetupDiscardThreshold, cfConfigurationFileToUpload=cfConfigurationFileToUpload, fclFraLpInterfaceId=fclFraLpInterfaceId, fclBX780IdentEntry=fclBX780IdentEntry, fclX25PstnInterfaceId=fclX25PstnInterfaceId, fclAsynCfgX3UserProfileDesc=fclAsynCfgX3UserProfileDesc, fcfLineV35DceH108=fcfLineV35DceH108, fclAsynCfgX3P11BinarySpeed=fclAsynCfgX3P11BinarySpeed, fclPppBIsdnRemLinkCheckPeriod=fclPppBIsdnRemLinkCheckPeriod, fcCtlAlteredLpTable=fcCtlAlteredLpTable, fclX25ConfigInterNodeTable=fclX25ConfigInterNodeTable, fmeTroubleReport=fmeTroubleReport, fmPingSentPackets=fmPingSentPackets, fclHdlcLpAllDiscardThreshold=fclHdlcLpAllDiscardThreshold, fmOsiISISISAdjAreaAddrAdjIndex=fmOsiISISISAdjAreaAddrAdjIndex, fcfIsdnRemStatus=fcfIsdnRemStatus, fclX25CfnNegConfigId=fclX25CfnNegConfigId, fcxServStaticNode=fcxServStaticNode, sc320_4W_1TR=sc320_4W_1TR, fcIpx=fcIpx, fmPingDelay=fmPingDelay, cfProductType=cfProductType, fclX25CfaNegMaxInWindowSize=fclX25CfaNegMaxInWindowSize, fcwSCompModule2CompressedVcCount=fcwSCompModule2CompressedVcCount, dcfNumericLineTable=dcfNumericLineTable, fmRip2IfStatAddress=fmRip2IfStatAddress, fcsnaGpLanFrEntry=fcsnaGpLanFrEntry, fmeTrapInfo=fmeTrapInfo, fmsFrLpLmiUserProtErrors=fmsFrLpLmiUserProtErrors, fcCtlAlteredIfId=fcCtlAlteredIfId, fclPppBIsdnPriId=fclPppBIsdnPriId, fmsGlobVcInUseCount=fmsGlobVcInUseCount, fcfE1Ds1PhysPhysicalPort=fcfE1Ds1PhysPhysicalPort, fmStatEthernetTable=fmStatEthernetTable, fcfLineV35DceRil140=fcfLineV35DceRil140, fcsnaLvpParamFrameFormat=fcsnaLvpParamFrameFormat, fcvLvpFltCondOffset=fcvLvpFltCondOffset, vcvTftpTable=vcvTftpTable, fclAsynCfgConfigTable=fclAsynCfgConfigTable, fclFrTeIsdnBackStatus=fclFrTeIsdnBackStatus, fmsPppAuthMasterSuccessCounter=fmsPppAuthMasterSuccessCounter, fclAsynCfgFacMinOutPacketSize=fclAsynCfgFacMinOutPacketSize, dclFrLmiParaAccessibilityCondition=dclFrLmiParaAccessibilityCondition, fclSdlcSecClusterBe=fclSdlcSecClusterBe, fmsEthManFilterDenyCounter=fmsEthManFilterDenyCounter, fmStatFrLineTable=fmStatFrLineTable, fcbSpanningTreeProtocol=fcbSpanningTreeProtocol, fccRoutNextHopNeighborId=fccRoutNextHopNeighborId, frxNodeStateChange=frxNodeStateChange, fclX25CfaSerX29Reselection=fclX25CfaSerX29Reselection, fciFlowVpId=fciFlowVpId, vcvEMConfDialingFormat=vcvEMConfDialingFormat, fciRipAdminStatus=fciRipAdminStatus, vcmAlrmTftpEntry=vcmAlrmTftpEntry, fmsFrLpLmiProced=fmsFrLpLmiProced, fmhTechnicRamSize=fmhTechnicRamSize, fclAsynCfgX3P17LineDelete=fclAsynCfgX3P17LineDelete, fclX25MlpIsdnOverIsdnInterfaceId=fclX25MlpIsdnOverIsdnInterfaceId, vcFrameRelaySw=vcFrameRelaySw, fcvRvpConnModule2VpId=fcvRvpConnModule2VpId, fclX25InBRemCallRetryCount=fclX25InBRemCallRetryCount, fcxServSapOutFltFiltering=fcxServSapOutFltFiltering, fcfLineEntry=fcfLineEntry, fcfIsdnBasicRateInterfaceId=fcfIsdnBasicRateInterfaceId, fclB3270CluCallLogPortId=fclB3270CluCallLogPortId, fclFrPvcNetworkTransport=fclFrPvcNetworkTransport, fcwSQOSProfilesCIR=fcwSQOSProfilesCIR, dcvVoiceTransQosBc=dcvVoiceTransQosBc, fcfIsdnDSigHighLayerCompatibility=fcfIsdnDSigHighLayerCompatibility, fmPingIdentifier=fmPingIdentifier, fmuAccessPppaLineNbMax=fmuAccessPppaLineNbMax, fmsS0BChIfLastChange=fmsS0BChIfLastChange, fcCtlBootDevice=fcCtlBootDevice, fclFrSwitchEquipment=fclFrSwitchEquipment, fciFlowTable=fciFlowTable, fmPingMinRoundTrip=fmPingMinRoundTrip, fciSourceRouting=fciSourceRouting, fclX25SlpIsdnBackupEntry=fclX25SlpIsdnBackupEntry, fmsBrdgTrafOutBroadcastPktsCounter=fmsBrdgTrafOutBroadcastPktsCounter, dcvCASConfLineSeizureAckTime=dcvCASConfLineSeizureAckTime, vclFrSeLpLogPortId=vclFrSeLpLogPortId, fclX25AccIsdnRemPriority=fclX25AccIsdnRemPriority, fciBootPClientStart=fciBootPClientStart, dcvIfPCMChannelVoiceProfId=dcvIfPCMChannelVoiceProfId, dclFrLmiParaN393MonitoredEventCount=dclFrLmiParaN393MonitoredEventCount, fclAsynCfgFacPacketSize=fclAsynCfgFacPacketSize, fclX25CfnSigSubAddressTransmission=fclX25CfnSigSubAddressTransmission, fmsFrCircuitOutOctetsCounter=fmsFrCircuitOutOctetsCounter, fclB3270CluClusterStatus=fclB3270CluClusterStatus, fclFrCfcSigSignalOutputWinSize=fclFrCfcSigSignalOutputWinSize, fclFrCfcSigT310CallProceedingTimer=fclFrCfcSigT310CallProceedingTimer, vcmAlrmSwTrapSend=vcmAlrmSwTrapSend, fciFlowRouteTable=fciFlowRouteTable, fcwSDynLspAgingTimer=fcwSDynLspAgingTimer, fmStatS2BChannelEntry=fmStatS2BChannelEntry, fcbBrdgVirtualPortEntry=fcbBrdgVirtualPortEntry, fciRipNeighborOutput=fciRipNeighborOutput, fmsFrcStorageDestAddr=fmsFrcStorageDestAddr, frx1000=frx1000, fclAsynCfgX3Part1ConfigId=fclAsynCfgX3Part1ConfigId, fclFrPvcTrafficManagementStrategy=fclFrPvcTrafficManagementStrategy, fmOspfStandardSpfRuns=fmOspfStandardSpfRuns, fclAsynCfgX3Part2ProfileId=fclAsynCfgX3Part2ProfileId, vcwEquipIpVirtualPortAddr=vcwEquipIpVirtualPortAddr, fmeFamStoredEventsCommand=fmeFamStoredEventsCommand, fmsPppPhysMagicNumber=fmsPppPhysMagicNumber, fclSdlcSecClusterStatus=fclSdlcSecClusterStatus, fcwFrCirTimer=fcwFrCirTimer, fmRip2IfConfReceive=fmRip2IfConfReceive, vcvVoiceTransportEntry=vcvVoiceTransportEntry, fclX25MlpOvMeasureCount=fclX25MlpOvMeasureCount, fcxServSapInFltCheckedField=fcxServSapInFltCheckedField, fcCtlHRCheckMessage=fcCtlHRCheckMessage, fcmMgtFctCugClosedUserGroupExt=fcmMgtFctCugClosedUserGroupExt, fclSdlcSecClusterAddress=fclSdlcSecClusterAddress, fciOspfVlStatus=fciOspfVlStatus, fclSdlcLpPacketSize=fclSdlcLpPacketSize, fcxRoutStaticRouteTicks=fcxRoutStaticRouteTicks, fmOsiISISCircL1DesIS=fmOsiISISCircL1DesIS, fclHdlcLpMinCir=fclHdlcLpMinCir, fciBootPClient=fciBootPClient, fciRipEgpRoutesMetric=fciRipEgpRoutesMetric, fcsnaLvpTrParamCompressNegotiation=fcsnaLvpTrParamCompressNegotiation, fclB3270CluClusterStaAdd=fclB3270CluClusterStaAdd, fclX25CfaDataLinkNetworkEntry=fclX25CfaDataLinkNetworkEntry, fclHdlcLpCompression=fclHdlcLpCompression, dclFrLmiParameterTable=dclFrLmiParameterTable, fcxServCircSapUpdate=fcxServCircSapUpdate, fcfLineV28DteTi142=fcfLineV28DteTi142, fclB3270CluClusterTable=fclB3270CluClusterTable, fcwSDynRouteCalculationTimer=fcwSDynRouteCalculationTimer, dcmAlrmTftpFamilyId=dcmAlrmTftpFamilyId, fclFrSeLpInterfaceId=fclFrSeLpInterfaceId, fmOspfStandardAreaRangeMask=fmOspfStandardAreaRangeMask, fclPppCfaRemPassword=fclPppCfaRemPassword, fclFrCeParGenDlcSetupDiscardThreshold=fclFrCeParGenDlcSetupDiscardThreshold, dcvVoiceSuscrTransportNetworkAddress=dcvVoiceSuscrTransportNetworkAddress, dcmAlrmSwTrapSend=dcmAlrmSwTrapSend, fclX25InDConnectionType=fclX25InDConnectionType, dcvVoiceSwLogPortSetId=dcvVoiceSwLogPortSetId, fclFrTeLpFragmentation=fclFrTeLpFragmentation, fmsEthUpTime=fmsEthUpTime, fclAsynCfgSerX29Reselection=fclAsynCfgSerX29Reselection, fclAsynX28PlusParTELENETTable=fclAsynX28PlusParTELENETTable, vcvSnmpGenVirtualPortId=vcvSnmpGenVirtualPortId, netCentralSiteProduct=netCentralSiteProduct, fclEthLogPortId=fclEthLogPortId, fclAsynCfgFacMaxInThroughputClass=fclAsynCfgFacMaxInThroughputClass, fclX25MlpPstnOvPstnNumber=fclX25MlpPstnOvPstnNumber, fclAsynX28PlusRemCfgX3P06ServiceSignals=fclAsynX28PlusRemCfgX3P06ServiceSignals, fmsFrLpInLogPortId=fmsFrLpInLogPortId, fmOsiISISReachableAddressEntry=fmOsiISISReachableAddressEntry, fmuAccessFrPublicNetworkLineNbMax=fmuAccessFrPublicNetworkLineNbMax, vcwABPvcLpTable=vcwABPvcLpTable, dcvTSPCMPermEntry=dcvTSPCMPermEntry, fmsInArpVpOutResponses=fmsInArpVpOutResponses, fmStatIpClusterStateTable=fmStatIpClusterStateTable, cfCpuBoardType=cfCpuBoardType, fcvVirtualPortEntry=fcvVirtualPortEntry, fmOsiCLNP=fmOsiCLNP, dcvVoiceLogPortType=dcvVoiceLogPortType, fclFrCfcLmiAsynchronousStatusReport=fclFrCfcLmiAsynchronousStatusReport)
mibBuilder.exportSymbols("PCE-MIB", fclX25CfnDlnN2RetryCount=fclX25CfnDlnN2RetryCount, fcmMgtFctActivationEntry=fcmMgtFctActivationEntry, fmOspfStandardLsdbEntry=fmOspfStandardLsdbEntry, fmRip2IfConfTable=fmRip2IfConfTable, fmsFrDlcOutExcessFrames=fmsFrDlcOutExcessFrames, fmsS0BChIfSpeed=fmsS0BChIfSpeed, fclPppPstnLpLocalSubscriberNb=fclPppPstnLpLocalSubscriberNb, fcfIsdnDTimT309DataLinkFailureTimer=fcfIsdnDTimT309DataLinkFailureTimer, fclX25MlpIsdnRemLogPortId=fclX25MlpIsdnRemLogPortId, fcvRvpCir=fcvRvpCir, dcvVoiceTransQosCir=dcvVoiceTransQosCir, dcvIpLocSvcCallRetryCount=dcvIpLocSvcCallRetryCount, dcvVoiceProfEchoCancellation=dcvVoiceProfEchoCancellation, fcfLineModDiallingCount=fcfLineModDiallingCount, fclHdlcAutoInactivityTimer=fclHdlcAutoInactivityTimer, fmuAccessRnisChannelDNbMax=fmuAccessRnisChannelDNbMax, dcmAlrmSyncTyp=dcmAlrmSyncTyp, dcvCASConfClearToIncCallTime=dcvCASConfClearToIncCallTime, fmsIpRouterState=fmsIpRouterState, fclFraLpCompressMultiPacketsTimer=fclFraLpCompressMultiPacketsTimer, vcFrSwL1MuxEnable=vcFrSwL1MuxEnable, fclAsynX28PlusLpEasyMnemo=fclAsynX28PlusLpEasyMnemo, fclAsynCfgX3UserP01EscapeChar=fclAsynCfgX3UserP01EscapeChar, fclFrTeParGenDynamicEir=fclFrTeParGenDynamicEir, fclX25CfaSigInPacketCauseField=fclX25CfaSigInPacketCauseField, fciSnmpManagerSendTraps=fciSnmpManagerSendTraps, fclX25MlpRestartTxAfterResetRx=fclX25MlpRestartTxAfterResetRx, fclAsynX28PlusRemCfgX3P12InputFlowCtrl=fclAsynX28PlusRemCfgX3P12InputFlowCtrl, fclFrCfcSigConversionAimedPoint=fclFrCfcSigConversionAimedPoint, fclX25CfaCugChecking=fclX25CfaCugChecking, fmsEthManSupervisionOkCounter=fmsEthManSupervisionOkCounter, fcsModuleTable=fcsModuleTable, cfMpbBoardReference255=cfMpbBoardReference255, fclAsynX28PlusRemCfgX3P09CrPadding=fclAsynX28PlusRemCfgX3P09CrPadding, cfZoneToIdentify=cfZoneToIdentify, fciTelnet=fciTelnet, dcCtlConfigCom=dcCtlConfigCom, fclVipCluLpScreenKeepTimer=fclVipCluLpScreenKeepTimer, fmuVersionRight=fmuVersionRight, fmsFrLpInFrames=fmsFrLpInFrames, fmsRvpConnRemoteAddr=fmsRvpConnRemoteAddr, fmsFrDlcInExcessFrames=fmsFrDlcInExcessFrames, vcvEMConfDtmfDigitLevel=vcvEMConfDtmfDigitLevel, dcvVoiceSuscrInsPrefix=dcvVoiceSuscrInsPrefix, fclX25InBIsdnEntry=fclX25InBIsdnEntry, fcfLineV28AsynInDteSignalTable=fcfLineV28AsynInDteSignalTable, fcManagement=fcManagement, fcfIsdnDSigMulDialsCycleCount=fcfIsdnDSigMulDialsCycleCount, fcwConvOutOrderNum=fcwConvOutOrderNum, fciOspfAreasTable=fciOspfAreasTable, dcmAlrmGenTrapSend=dcmAlrmGenTrapSend, dcvDialRxNumberLength=dcvDialRxNumberLength, fcCtlHRCheckMsgIndex=fcCtlHRCheckMsgIndex, fmOspfStandardHostMetric=fmOspfStandardHostMetric, dcwEquipDnicZoAddr=dcwEquipDnicZoAddr, fccRneighRemoteAddress=fccRneighRemoteAddress, dcmAlrmFaxEntry=dcmAlrmFaxEntry, fclX25SlpIsdnBackLogPortId=fclX25SlpIsdnBackLogPortId, frxDiagnostic=frxDiagnostic, fclPppPstnRemStatus=fclPppPstnRemStatus, fcxServStaticServiceEntry=fcxServStaticServiceEntry, fclX25MlpMt3ResetConfirmationTimer=fclX25MlpMt3ResetConfirmationTimer, fmsFrcStorageDirection=fmsFrcStorageDirection, fclX25CfaSerStatTotalizer=fclX25CfaSerStatTotalizer, dcSysConfDate=dcSysConfDate, fmOspfStandardLsdbRouterId=fmOspfStandardLsdbRouterId, vclFrSeSigT203InactivityTimer=vclFrSeSigT203InactivityTimer, fclFrCfsSigT308ReleaseResponseTimer=fclFrCfsSigT308ReleaseResponseTimer, fciBootPClientRetransNb=fciBootPClientRetransNb, fciRemStatus=fciRemStatus, fmsBridgeState=fmsBridgeState, fmOsiISISAreaEntry=fmOsiISISAreaEntry, fmOspfStandardIfMetricIpAddress=fmOspfStandardIfMetricIpAddress, fclHdlcLogPortEntry=fclHdlcLogPortEntry, fclPppCftRestartTimer=fclPppCftRestartTimer, vcvVoiceSwLogPortSetId=vcvVoiceSwLogPortSetId, fclPppCftConfigId=fclPppCftConfigId, fciOspfRouterId=fciOspfRouterId, fmOsiISISISAdjPriority=fmOsiISISISAdjPriority, fmOspfStandardVirtNbrEntry=fmOspfStandardVirtNbrEntry, fclPppConfigTimersEntry=fclPppConfigTimersEntry, mcx300=mcx300, fcwSResConversionAddressCheck=fcwSResConversionAddressCheck, fclFrCeLpLocalAddress=fclFrCeLpLocalAddress, vcWanSwitch=vcWanSwitch, dcvVoiceLogPortStatus=dcvVoiceLogPortStatus, vcSysConfHour=vcSysConfHour, fdpIdentification=fdpIdentification, fciBootP=fciBootP, dcvVoiceVirtualPort=dcvVoiceVirtualPort, cfTransputerPresence=cfTransputerPresence, vcvIpLocSubNetMask=vcvIpLocSubNetMask, fmsFrLpInFrHeaderErrors=fmsFrLpInFrHeaderErrors, cfHardwareIdentificationPassword=cfHardwareIdentificationPassword, fmsFrcStorageTypeOfDlci=fmsFrcStorageTypeOfDlci, sc112=sc112, fcfLineV28AsynOutDteDrs111=fcfLineV28AsynOutDteDrs111, fclPppCfgDescription=fclPppCfgDescription, fcxRipInputFilteringEntry=fcxRipInputFilteringEntry, fcLogicalPorts=fcLogicalPorts, fcsnaLvpParamRW=fcsnaLvpParamRW, vcmAlrmLMITrapSend=vcmAlrmLMITrapSend, fclX25InBIsdnTable=fclX25InBIsdnTable, fciOspfAreaStubStatus=fciOspfAreaStubStatus, fpb2025=fpb2025, fcxServSapInFltStatus=fcxServSapInFltStatus, fclHdlcAutoLogPortId=fclHdlcAutoLogPortId, fmsFrLpLmiNetT392=fmsFrLpLmiNetT392, cpcDiagnostic=cpcDiagnostic, fclPppBIsdnBriLocalSubsNb1=fclPppBIsdnBriLocalSubsNb1, vcvFxxRingTable=vcvFxxRingTable, vcvToneFreq2=vcvToneFreq2, fcsnaLvpParamTW=fcsnaLvpParamTW, fcbBrdgVpFcsPreservation=fcbBrdgVpFcsPreservation, dcmAlrmTftpTrapSend=dcmAlrmTftpTrapSend, fmsEthInNoErrCounter=fmsEthInNoErrCounter, fmPingMaxRoundTrip=fmPingMaxRoundTrip, fmOspfStandardIfTable=fmOspfStandardIfTable, fclAsynMultiLpAuthStep4=fclAsynMultiLpAuthStep4, fclX25CfnNegotiatedFacilityTable=fclX25CfnNegotiatedFacilityTable, vcvFxxLpRemoteNumber=vcvFxxLpRemoteNumber, fclX25AccPstnBackupEnabling=fclX25AccPstnBackupEnabling, fclAsynCfgX3Part1ProfileId=fclAsynCfgX3Part1ProfileId, mcx106=mcx106, fcsnaGpRoutSsap=fcsnaGpRoutSsap, fclFrPvcLinkId=fclFrPvcLinkId, fcxServInstance=fcxServInstance, fcvLvpFltFilteringTable=fcvLvpFltFilteringTable, fcxServCircSapAgeMultiplier=fcxServCircSapAgeMultiplier, fmStatEthOutputTrafficTable=fmStatEthOutputTrafficTable, dcmAlrmSyncTrapSend=dcmAlrmSyncTrapSend, fmuFunctionExploitMibUse=fmuFunctionExploitMibUse, fcfLineModXidStringEltStatus=fcfLineModXidStringEltStatus, fclFraLmiLmiStandard=fclFraLmiLmiStandard, fmuAccessX28PlusLineNbMax=fmuAccessX28PlusLineNbMax, dclFrTerminalEquipment=dclFrTerminalEquipment, fclX25SlpSwLogPortId=fclX25SlpSwLogPortId, dcvToneDuration1=dcvToneDuration1, fclAsynX28PlusRemCfgX3P03ForwardingChar=fclAsynX28PlusRemCfgX3P03ForwardingChar, dcvTSPCMSwChannIfId=dcvTSPCMSwChannIfId, fmsBootPRelayTable=fmsBootPRelayTable, sc512=sc512, fmOsiCLNPCircIndex=fmOsiCLNPCircIndex, fciEgpNeighborTable=fciEgpNeighborTable, dclFrSeSigT316RestartAcknowledgeTimer=dclFrSeSigT316RestartAcknowledgeTimer, fcsnaLvpLlpStatus=fcsnaLvpLlpStatus, fdpModResponseTable=fdpModResponseTable, fciOspfVpMetric=fciOspfVpMetric, fclAsynX28PlusLpConIdTelenet=fclAsynX28PlusLpConIdTelenet, vclFrSwitchEquipment=vclFrSwitchEquipment, cfVersion=cfVersion, dcInterfaces=dcInterfaces, fclAsynCfgLinkStopBitCount=fclAsynCfgLinkStopBitCount, fclAsynX28PlusLpMonSignalDCD=fclAsynX28PlusLpMonSignalDCD, mcx212Y=mcx212Y, fmOsiISISSysMaxAreaAddrMismatches=fmOsiISISSysMaxAreaAddrMismatches, dcvVoiceSuscrTransportProfileId=dcvVoiceSuscrTransportProfileId, fclFrCfcGeneralParameterTable=fclFrCfcGeneralParameterTable, fccLneighNeighborId=fccLneighNeighborId, fcsnaGpMiscMacAddrLearningMode=fcsnaGpMiscMacAddrLearningMode, fciLclStatus=fciLclStatus, fmsFrDlcOutFrames=fmsFrDlcOutFrames, fmsInputCallPktsCounter=fmsInputCallPktsCounter, fccLocalVirtualPortTable=fccLocalVirtualPortTable, vclFrCeLpInterfaceId=vclFrCeLpInterfaceId, fclPppCfgNcpIp=fclPppCfgNcpIp, fmOsiISISCircuitEntry=fmOsiISISCircuitEntry, dclLogPortStatus=dclLogPortStatus, dcvTftpInactTimer=dcvTftpInactTimer, fclAsynPstnRemPstnNumber=fclAsynPstnRemPstnNumber, fciFlowSubstStatus=fciFlowSubstStatus, fcsnaLvpParamT2=fcsnaLvpParamT2, fmOspfStandardOriginateNewLSAs=fmOspfStandardOriginateNewLSAs, fmOspfStandardNbrRtrId=fmOspfStandardNbrRtrId, fmsE1Ds1ChIfChannelId=fmsE1Ds1ChIfChannelId, fmsEthOutDeferredTransmissionsCounter=fmsEthOutDeferredTransmissionsCounter, fcbStpVpBpduEncapsulation=fcbStpVpBpduEncapsulation, dcvVoiceProfCESMode=dcvVoiceProfCESMode, fcxRipInputFiltering=fcxRipInputFiltering, fclX25CfnConfigId=fclX25CfnConfigId, fclAsynMneFacility=fclAsynMneFacility, fciOspfVirtualLinksTable=fciOspfVirtualLinksTable, cfSoftwareListPassword=cfSoftwareListPassword, fmOsiCLNPCircInPDUs=fmOsiCLNPCircInPDUs, fclX25CfnDescription=fclX25CfnDescription, fmStatIpClusterStateEntry=fmStatIpClusterStateEntry, vcfPhysPortId=vcfPhysPortId, fclPppBIsdnLocalBriEntry=fclPppBIsdnLocalBriEntry, fclX25SlpIsdnBackStatus=fclX25SlpIsdnBackStatus, fmsPppProtoLineId=fmsPppProtoLineId, fcxRoutAddrFltFiltering=fcxRoutAddrFltFiltering, fciFlowType=fciFlowType, fciOspfAseExportRipStatus=fciOspfAseExportRipStatus, fmsRvpConnId=fmsRvpConnId, fcwSResConversionIncomingCall=fcwSResConversionIncomingCall, fmOsiESISSystem=fmOsiESISSystem, fclAsynCfgSerDBitModification=fclAsynCfgSerDBitModification, vcvFxxConfDialingTimeOut=vcvFxxConfDialingTimeOut, fclX25CfaNegThroughputClass=fclX25CfaNegThroughputClass, fclBSctProtDef1PermanentDelimiter2=fclBSctProtDef1PermanentDelimiter2, fclBX780LpInterfaceId=fclBX780LpInterfaceId, fmOsiISISCircInPdu=fmOsiISISCircInPdu, fmPingAdminState=fmPingAdminState, fclX25CfaSigConvMultiCalledAddrOutCall=fclX25CfaSigConvMultiCalledAddrOutCall, fcwConvCondOutStatus=fcwConvCondOutStatus, fcsConfigDescName=fcsConfigDescName, fmsLineOutputOctetsCounter=fmsLineOutputOctetsCounter, avb1002_EM=avb1002_EM, fclFraLmiN392ErrorThreshold=fclFraLmiN392ErrorThreshold, fcxServSapSysState=fcxServSapSysState, fciTelnetPwdP4=fciTelnetPwdP4, fclX25AccPstnBackLogPortId=fclX25AccPstnBackLogPortId, vcvEMConfDigitReceptionTimeOut=vcvEMConfDigitReceptionTimeOut, fclIulConversionOutgoingCall=fclIulConversionOutgoingCall, fclFrTeIsdnRemStatus=fclFrTeIsdnRemStatus, fmsE1Ds1ChIfOutQLen=fmsE1Ds1ChIfOutQLen, fciEgpStaticRoutesDistribution=fciEgpStaticRoutesDistribution, fclFrCfcProfileId=fclFrCfcProfileId, dcvVoiceSwSuscriberNumber=dcvVoiceSwSuscriberNumber, fcxServStaticNetNum=fcxServStaticNetNum, vcvDialRxEndOfDialingTimer=vcvDialRxEndOfDialingTimer, fcfLineV11DceSyn=fcfLineV11DceSyn, fclAsynCfgX3UserP07BreakHandling=fclAsynCfgX3UserP07BreakHandling, vcvFxxConfInterdigitTime=vcvFxxConfInterdigitTime, fcxServSapInputFilteringEntry=fcxServSapInputFilteringEntry, fclBSctProtDef1StFrDelimiterInhib2=fclBSctProtDef1StFrDelimiterInhib2, projects=projects, fmOspfStandardAreaRangeStatus=fmOspfStandardAreaRangeStatus, fclX25CfnNegDefOutThroughputClass=fclX25CfnNegDefOutThroughputClass, fciNetToMediaMacAddress=fciNetToMediaMacAddress, fmeEvtEventType=fmeEvtEventType, fccClnpRouteEntry=fccClnpRouteEntry, fmsFrCommIdentification=fmsFrCommIdentification, fciSnmpManagerTable=fciSnmpManagerTable, dcmAlrmSyncTable=dcmAlrmSyncTable, fclAsynCfgX3UserP21Parity=fclAsynCfgX3UserP21Parity, vcvTftpName=vcvTftpName, dcvSnmpManagerTrapsUdpPort=dcvSnmpManagerTrapsUdpPort, fclVipCluElemType=fclVipCluElemType, fcsnaLvpLocalLanPuTable=fcsnaLvpLocalLanPuTable, fmsEthOutNoErrCounter=fmsEthOutNoErrCounter, fclPppCfgNcpBridge=fclPppCfgNcpBridge, fclPppCfgIpAddrAssignment=fclPppCfgIpAddrAssignment, fclX25CfaCugLogPortId=fclX25CfaCugLogPortId, fcfTokenRing=fcfTokenRing, fclFrPvcTunDlci=fclFrPvcTunDlci, fmsPppProtoIpxNcpStatus=fmsPppProtoIpxNcpStatus, fclBSctLpInterfaceId=fclBSctLpInterfaceId, fcmMgfCallAcceptwithReverseCharging=fcmMgfCallAcceptwithReverseCharging, fcwSQOSX25CUDProfileId=fcwSQOSX25CUDProfileId, fclSdlcLpLogicalLinkProtocol=fclSdlcLpLogicalLinkProtocol, fcsnaLvpParamNW=fcsnaLvpParamNW, fclFrCfcSigT203InactivityTimer=fclFrCfcSigT203InactivityTimer, fmsPppProtoIpNcpStatus=fmsPppProtoIpNcpStatus)
mibBuilder.exportSymbols("PCE-MIB", fmOsiESISCircIndex=fmOsiESISCircIndex, fclBX780ConnCalledAddr=fclBX780ConnCalledAddr, vcmAlrmGenFamilyId=vcmAlrmGenFamilyId, fmsFrcStorageMinCir=fmsFrcStorageMinCir, fclEthernetEntry=fclEthernetEntry, fmOsiCLNPSysOutPDUs=fmOsiCLNPSysOutPDUs, fcfE1Ds1PhysIfId=fcfE1Ds1PhysIfId, fmsIpCluClusterNumber=fmsIpCluClusterNumber, fcvRvpConnectionTable=fcvRvpConnectionTable, vcvVoiceSuscriberEntry=vcvVoiceSuscriberEntry, fmStatWanConnectionsTable=fmStatWanConnectionsTable, mcx103=mcx103, fclX25AccIsdnRemotePeerTable=fclX25AccIsdnRemotePeerTable, fclFrPvcSnaT1ReplyTimer=fclFrPvcSnaT1ReplyTimer, fcCtlHRCheckMsgCode=fcCtlHRCheckMsgCode, dcvCASConfSigChannelDiscTimeOut=dcvCASConfSigChannelDiscTimeOut, fclX25InDIsdnEntry=fclX25InDIsdnEntry, cmeClearDiag=cmeClearDiag, fmOspfStandardLsdbType=fmOspfStandardLsdbType, vcCtlConfigCom=vcCtlConfigCom, fclX25InDSwLogPortId=fclX25InDSwLogPortId, fmsFrLogicalPort=fmsFrLogicalPort, fclAsynX28PlusLpMnemonicType=fclAsynX28PlusLpMnemonicType, fclX25InDSwitchOverEntry=fclX25InDSwitchOverEntry, fmsFrCircuitInOctetsCounter=fmsFrCircuitInOctetsCounter, dcvCASConfigEntry=dcvCASConfigEntry, fmsIpLanIpAddr=fmsIpLanIpAddr, fclX25CfnSerStatTotalizer=fclX25CfnSerStatTotalizer, fcxRipInputFilteringTable=fcxRipInputFilteringTable, fmsSig106=fmsSig106, fclFraPvcInactivityTimer=fclFraPvcInactivityTimer, vcvRemoteConfName=vcvRemoteConfName, fcxCircuitLocalVpEntry=fcxCircuitLocalVpEntry, fclFrCfcSigOuputTimeout=fclFrCfcSigOuputTimeout, fclFrPvcTunBackupDlci=fclFrPvcTunBackupDlci, fcfIsdnDTimT305DisconnectResponseTimer=fcfIsdnDTimT305DisconnectResponseTimer, fciRemRemoteAddress=fciRemRemoteAddress, fmOspfStandardAreaBdrRtrCount=fmOspfStandardAreaBdrRtrCount, fmsLineLcInUseCount=fmsLineLcInUseCount, fmsPppProtoIpxNcpDiag=fmsPppProtoIpxNcpDiag, fcxServSapOutFltServiceType=fcxServSapOutFltServiceType, fciVirtualPortEntry=fciVirtualPortEntry, vcvEMConfMinSeizureAckPulseDuration=vcvEMConfMinSeizureAckPulseDuration, fciIpRouteTable=fciIpRouteTable, dcfNumericLines=dcfNumericLines, fclFrCfsDescription=fclFrCfsDescription, fclX25ConfigAccessEntry=fclX25ConfigAccessEntry, fmOspfStandardVirtNbrOptions=fmOspfStandardVirtNbrOptions, vcvVoiceLogicalPortEM=vcvVoiceLogicalPortEM, fcfE1Ds1PhysEntry=fcfE1Ds1PhysEntry, fcxRoutCircCircuitId=fcxRoutCircCircuitId, fclAsynMultiLpAuthStep2=fclAsynMultiLpAuthStep2, dcvCASConfIdleState=dcvCASConfIdleState, vcvVoiceSuscrStatus=vcvVoiceSuscrStatus, fclFrMainLPId=fclFrMainLPId, fcsnaGpX25Entry=fcsnaGpX25Entry, fclFrSeIsdnRemLogPortId=fclFrSeIsdnRemLogPortId, fclAsynCfgX3ProfileId=fclAsynCfgX3ProfileId, fclAsynX28PlusRemCfgX3P13LfInsertion=fclAsynX28PlusRemCfgX3P13LfInsertion, dclFrLmiParaDlci=dclFrLmiParaDlci, fmOsiISISISAdjacencyAreaAddressTable=fmOsiISISISAdjacencyAreaAddressTable, fmuFunctionBridgeAndStp=fmuFunctionBridgeAndStp, vcvEMPermRemoteNumber=vcvEMPermRemoteNumber, fmStatPointToPointProtocol=fmStatPointToPointProtocol, dcvVoiceSwRemovedDigitNumber=dcvVoiceSwRemovedDigitNumber, fcsnaLvpMacAddressTrans=fcsnaLvpMacAddressTrans, fclX25CfaSigConvMultiCallingAddrInCall=fclX25CfaSigConvMultiCallingAddrInCall, fmsPppProtoLcpStatus=fmsPppProtoLcpStatus, fclB3270CluCallMinRecallTimer=fclB3270CluCallMinRecallTimer, fciVpMtu=fciVpMtu, fclSdlcLogPortTable=fclSdlcLogPortTable, fclX25InBRemCheckPeriodCount=fclX25InBRemCheckPeriodCount, fclAsynCfgFacMaxOutWindowSize=fclAsynCfgFacMaxOutWindowSize, fmsIpLanNetMask=fmsIpLanNetMask, fciRemoteNetToMediaEntry=fciRemoteNetToMediaEntry, fciOspfVpRetransmitInterval=fciOspfVpRetransmitInterval, fmStatInputTraffic=fmStatInputTraffic, fmsEthOutMultipleCollisionFramesCounter=fmsEthOutMultipleCollisionFramesCounter, fmsS0BChIfInOctets=fmsS0BChIfInOctets, fclX25CfaSigCallAcceptedFormat=fclX25CfaSigCallAcceptedFormat, fclB3270LogPortTable=fclB3270LogPortTable, fclAsynCfgX3UserProfilePart1=fclAsynCfgX3UserProfilePart1, fclPppBIsdnRemPriority=fclPppBIsdnRemPriority, fmOsiISISAreaTable=fmOsiISISAreaTable, fcfE1Ds1DropInsertIf2=fcfE1Ds1DropInsertIf2, fclSdlcLpBe=fclSdlcLpBe, fmOsiISISSysOutPdu=fmOsiISISSysOutPdu, fclFrPvcX25Dlci=fclFrPvcX25Dlci, fcsnaGpRemPuProtocol=fcsnaGpRemPuProtocol, fmsFrSwitch=fmsFrSwitch, fcmMgfConvMultiCalledAddrOutCall=fcmMgfConvMultiCalledAddrOutCall, fmuFunctionPae=fmuFunctionPae, fciOspfAreaStatus=fciOspfAreaStatus, fmsStateTestState=fmsStateTestState, fmsFrSwOverBookingThrouhput=fmsFrSwOverBookingThrouhput, fclX25InPstnEntry=fclX25InPstnEntry, fclPppSerialLinkAccess=fclPppSerialLinkAccess, fmsGlobCongRamLostBlocks=fmsGlobCongRamLostBlocks, fclAsynAutoMinimumRecallTimer=fclAsynAutoMinimumRecallTimer, fclX25SlpSwSwitchBackThreshold=fclX25SlpSwSwitchBackThreshold, dcmAlrmFaxFamilyId=dcmAlrmFaxFamilyId, fclSdlcSecClusterFacility=fclSdlcSecClusterFacility, fclAsynPadPageStatus=fclAsynPadPageStatus, fclX25CfnNegDefInThroughputClass=fclX25CfnNegDefInThroughputClass, fmStatFrCircuitTable=fmStatFrCircuitTable, fcfIsdnDChannelSigTimerEntry=fcfIsdnDChannelSigTimerEntry, vcvRemNetIpAddress=vcvRemNetIpAddress, fclBX780IdentTable=fclBX780IdentTable, fcsnaGpRoutHostPuId=fcsnaGpRoutHostPuId, fclAsynCfgX3UserP03ForwardingChar=fclAsynCfgX3UserP03ForwardingChar, fcwSCompAlgorithmSelection=fcwSCompAlgorithmSelection, dcvVoiceProfSilenceDetectionLevel=dcvVoiceProfSilenceDetectionLevel, vcmAlrmLMITyp=vcmAlrmLMITyp, fclVipLogPortEntry=fclVipLogPortEntry, fcfE1Ds1ChannelPhysIf=fcfE1Ds1ChannelPhysIf, fclHdlcLpCos=fclHdlcLpCos, fclFrTeLpLogPortId=fclFrTeLpLogPortId, fclFrPvcSnaEncapsulationEntry=fclFrPvcSnaEncapsulationEntry, fclFrTeIsdnRemCallRetryCount=fclFrTeIsdnRemCallRetryCount, fclFrCfcGenUnuseTimer=fclFrCfcGenUnuseTimer, fmsGlobFreeBuffCount=fmsGlobFreeBuffCount, cfMpbBoardSerialNumber=cfMpbBoardSerialNumber, fclX25CfaSigPdnIndicator=fclX25CfaSigPdnIndicator, fcwSbRoutingTable=fcwSbRoutingTable, fclAsynAutoCallUserDataAscii=fclAsynAutoCallUserDataAscii, fmsS0BChPhysIfId=fmsS0BChPhysIfId, fmsCtrlSumming=fmsCtrlSumming, fclAsynPadLpEntry=fclAsynPadLpEntry, fmRip2PeerVersion=fmRip2PeerVersion, frxSoftware=frxSoftware, fclX25AccPermanentVcTable=fclX25AccPermanentVcTable, fclX25InBRemotePeerTable=fclX25InBRemotePeerTable, fclFraPvcCallDirection=fclFraPvcCallDirection, fcFrSwInputDlci=fcFrSwInputDlci, dcmAlrmCmpTrapSend=dcmAlrmCmpTrapSend, fmOspfStandardHostTOS=fmOspfStandardHostTOS, vclFrSeSignallingTable=vclFrSeSignallingTable, fcsHardDescReplicatedMode=fcsHardDescReplicatedMode, fcfLineModUnuseTimer=fcfLineModUnuseTimer, fcfE1PhysPortId=fcfE1PhysPortId, fclX25PstnRemotePeerTable=fclX25PstnRemotePeerTable, fclFrTeIsdnRemRemotePeerId=fclFrTeIsdnRemRemotePeerId, fcfTokenRingLinkCheckPeriod=fcfTokenRingLinkCheckPeriod, fclFrSeInBIsdnLogPortTable=fclFrSeInBIsdnLogPortTable, vcwABPvcLpId=vcwABPvcLpId, frx2000=frx2000, fclBX780LpCodingParityType=fclBX780LpCodingParityType, fmsE1Ds1ChIfSpecific=fmsE1Ds1ChIfSpecific, fmOspfStandardLsdbLSID=fmOspfStandardLsdbLSID, fmsBootPClient=fmsBootPClient, fclVipCluLpPollingTypeAfterSelect=fclVipCluLpPollingTypeAfterSelect, fcfIsdnDTimBChannelUpTimer=fcfIsdnDTimBChannelUpTimer, fcxServStaticServiceTable=fcxServStaticServiceTable, fclVipLpInterfaceId=fclVipLpInterfaceId, dcvVoiceProfReceiveLevel=dcvVoiceProfReceiveLevel, fclX25InDInactivityTimer=fclX25InDInactivityTimer, fciLclVirtualIpAddress=fciLclVirtualIpAddress, fcsnaGpRoutDsap=fcsnaGpRoutDsap, fcfLineV35DceLl141=fcfLineV35DceLl141, fclFrPvcSnaBanEncapsulationEntry=fclFrPvcSnaBanEncapsulationEntry, fmsFrLpSvcDlcVbr=fmsFrLpSvcDlcVbr, vcvVoiceSwEntry=vcvVoiceSwEntry, fclX25CfaSerStatLoadAndTraffic=fclX25CfaSerStatLoadAndTraffic, vcvFxxConfPauseTime=vcvFxxConfPauseTime, fcfE1PhysPortFraming=fcfE1PhysPortFraming, fclX25AccIsdnRemCallRetryCount=fclX25AccIsdnRemCallRetryCount, fcvLvpFltCondConditionId=fcvLvpFltCondConditionId, fclBX780IdentLogPortId=fclBX780IdentLogPortId, dcLogicalPorts=dcLogicalPorts, fcmMgfActPassword=fcmMgfActPassword, fcfLineInterfaceId=fcfLineInterfaceId, fclAsynCfgConfigId=fclAsynCfgConfigId, fcmAlrmEvtEvent5=fcmAlrmEvtEvent5, fclHdlcLpCompressScrambling=fclHdlcLpCompressScrambling, fclFrPvcQosInBc=fclFrPvcQosInBc, fclAsynCfgX3UserP10LineFolding=fclAsynCfgX3UserP10LineFolding, fmsSig111=fmsSig111, fcbBrdgVpBroadcasting=fcbBrdgVpBroadcasting, dcManagement=dcManagement, fclPppSerialLogPortEntry=fclPppSerialLogPortEntry, fclFrCfsSigT303SetupResponseTimer=fclFrCfsSigT303SetupResponseTimer, fcsnaLvpLlpVirtualPortId=fcsnaLvpLlpVirtualPortId, compacV9toV11=compacV9toV11, fclX25CfaNegOutputFastSelect=fclX25CfaNegOutputFastSelect, fclB3270CluCallCluAdd=fclB3270CluCallCluAdd, fdpTest=fdpTest, fcmAlrmEvtEventSelection=fcmAlrmEvtEventSelection, fclEthernetTable=fclEthernetTable, fcwAddrConvMultiCriterionInCallEntry=fcwAddrConvMultiCriterionInCallEntry, dcmAlrmCmpTyp=dcmAlrmCmpTyp, dcvIpLocSvcClearCallTimer=dcvIpLocSvcClearCallTimer, fcfIsdnRemotePeerTable=fcfIsdnRemotePeerTable, fclVipCluLpFailedPollingMaxNumber=fclVipCluLpFailedPollingMaxNumber, fcsnaGpRoutCos=fcsnaGpRoutCos, fclFrPvcSnaLevel3Pid=fclFrPvcSnaLevel3Pid, fmOsiISISRASystemType=fmOsiISISRASystemType, fmsE1Ds1ChIfOutNUcastPkts=fmsE1Ds1ChIfOutNUcastPkts, fcwSRvcConversionAimedPoint=fcwSRvcConversionAimedPoint, fclAsynCfgX3P15Editing=fclAsynCfgX3P15Editing, fcwFrDlcStatusChangeTrapEnabling=fcwFrDlcStatusChangeTrapEnabling, fmStatIpLanTraffic=fmStatIpLanTraffic, fclFraLmiN393MonitoredEventCount=fclFraLmiN393MonitoredEventCount, fmsIpTrafOutForwDefRouteCounter=fmsIpTrafOutForwDefRouteCounter, fcmMgfConvMultiCallingAddrInCall=fcmMgfConvMultiCallingAddrInCall, fclFrPvcQosOutBe=fclFrPvcQosOutBe, fclX25CfnNegMaxOutPacketSize=fclX25CfnNegMaxOutPacketSize, vcvVoiceLogPortType=vcvVoiceLogPortType, mmx10000=mmx10000, fcwDnicRoutingEntry=fcwDnicRoutingEntry, fclAsynCfgX3P03ForwardingChar=fclAsynCfgX3P03ForwardingChar, fmsE1Ds1ChIfOperStatus=fmsE1Ds1ChIfOperStatus, fmeTrapLineId=fmeTrapLineId, fmOspfStandardAddressLessIf=fmOspfStandardAddressLessIf, vcvIpLocalTable=vcvIpLocalTable, fmOsiISISCircIndex=fmOsiISISCircIndex, fcxServStaticCircuitId=fcxServStaticCircuitId, vcmAlrmTftpTrapSend=vcmAlrmTftpTrapSend, fcwSerDynamicRouting=fcwSerDynamicRouting, fmsEthTestMode=fmsEthTestMode, fmOspfStandardAreaEntry=fmOspfStandardAreaEntry, fclBX780LogPortTable=fclBX780LogPortTable, fclX25InPstn=fclX25InPstn, fccVpMtu=fccVpMtu, fcfLineV28AsynOutDceCts106=fcfLineV28AsynOutDceCts106, fciOspfNeighborsEntry=fciOspfNeighborsEntry, fccRoutDestClnpAddress=fccRoutDestClnpAddress, fcvLocalVirtualPortEntry=fcvLocalVirtualPortEntry, fmOspfStandardVirtNbrLSRetransQLen=fmOspfStandardVirtNbrLSRetransQLen, fcsnaGpMiscellaneousParameters=fcsnaGpMiscellaneousParameters, fciRouteMask=fciRouteMask, fciBootPClientServer=fciBootPClientServer, fcvLvpFltFilterCondition2Id=fcvLvpFltFilterCondition2Id, fclAsynPstnRemX121Addr=fclAsynPstnRemX121Addr, fclHdlcLpInterfaceId=fclHdlcLpInterfaceId, vcvRemoteConfEntry=vcvRemoteConfEntry, fclAsynCfgConnFacilityTable=fclAsynCfgConnFacilityTable, fclBSctProtDef2DataFrameTerminator3=fclBSctProtDef2DataFrameTerminator3, fclX25MlpPstnOverflowTable=fclX25MlpPstnOverflowTable, fmOsiISISESAdjESID=fmOsiISISESAdjESID, cmEvents=cmEvents, cmeEventSynchronize=cmeEventSynchronize, vcmAlrmTftpFamilyId=vcmAlrmTftpFamilyId, vcvIpLocSvcCallRetryCount=vcvIpLocSvcCallRetryCount, dclFrLmiParaStandard=dclFrLmiParaStandard, fcwSQOSX25Entry=fcwSQOSX25Entry, fclX25SlpSwitchOverTable=fclX25SlpSwitchOverTable, fclPppSerAutoStatus=fclPppSerAutoStatus, fccVirtualPortEntry=fccVirtualPortEntry, fcxRoutInstance=fcxRoutInstance, fciLvpStatus=fciLvpStatus, dcvTSPCMSwConfigId=dcvTSPCMSwConfigId, fciBootPInterfaceStatus=fciBootPInterfaceStatus, fmsPppIpAddrLineId=fmsPppIpAddrLineId, fciRipPreference=fciRipPreference)
mibBuilder.exportSymbols("PCE-MIB", fmsFrDlcOutBecnFrames=fmsFrDlcOutBecnFrames, vcfConfLineEntry=vcfConfLineEntry, dcvSnmpGenCommunityStringReadOnly=dcvSnmpGenCommunityStringReadOnly, fmStatS0BChannelTable=fmStatS0BChannelTable, netAccessProduct=netAccessProduct, fmhTechnicalsFeatures=fmhTechnicalsFeatures, fmuAccessPppsLineNbMax=fmuAccessPppsLineNbMax, fcfLineV11DceSignalTable=fcfLineV11DceSignalTable, fciSnmpCommunityStringTrap=fciSnmpCommunityStringTrap, fmStatMlpEntry=fmStatMlpEntry, dcfDataLineDsr107=dcfDataLineDsr107, fmOspfStandardVirtNbrEvents=fmOspfStandardVirtNbrEvents, fclBX780LpAuthorAnswerTimer=fclBX780LpAuthorAnswerTimer, vcvVoiceSuscrTransportProfileId=vcvVoiceSuscrTransportProfileId, fclAsynLscpLpEntry=fclAsynLscpLpEntry, fmOspfStandardLsdbAreaId=fmOspfStandardLsdbAreaId, fclX25PstnLogPortId=fclX25PstnLogPortId, fclAsynAutoFacility=fclAsynAutoFacility, fcwConvCondOutTryOn=fcwConvCondOutTryOn, fccNeighType=fccNeighType, vcvEMConfCallSignalling=vcvEMConfCallSignalling, fcwSerReliableVirtualCircuits=fcwSerReliableVirtualCircuits, fmhEqIdFifthFactoryReturnDate=fmhEqIdFifthFactoryReturnDate, fclFrCeLogPortEntry=fclFrCeLogPortEntry, vcmAlrmGenEntry=vcmAlrmGenEntry, fclPppBIsdnAccess=fclPppBIsdnAccess, fmeEvtFamilyId=fmeEvtFamilyId, fmStatE1Ds1ChannelNumber=fmStatE1Ds1ChannelNumber, vcvSnmp=vcvSnmp, dcvVoiceTransportTable=dcvVoiceTransportTable, fclFrSeInBRemPeerId=fclFrSeInBRemPeerId, fcfIsdn=fcfIsdn, dclFrLmiParaN392ErrorThreshold=dclFrLmiParaN392ErrorThreshold, vcwEquipSVCDisconnectOnCongestion=vcwEquipSVCDisconnectOnCongestion, fclPppConfigurationsEntry=fclPppConfigurationsEntry, fcvRvpConvMultiCallingAddrOutCall=fcvRvpConvMultiCallingAddrOutCall, fmOspfStandardVirtIfEvents=fmOspfStandardVirtIfEvents, fcxServStaticType=fcxServStaticType, fclAsynMnemonic=fclAsynMnemonic, fclX25CfaDlnOutgoingChannelNumbering=fclX25CfaDlnOutgoingChannelNumbering, fmOspfStandardVirtIfTable=fmOspfStandardVirtIfTable, fmOsiCLNPSysInPDUs=fmOsiCLNPSysInPDUs, fclAsynCfgX3P14LfPadding=fclAsynCfgX3P14LfPadding, fmsE1Ds1ChIfOutErrors=fmsE1Ds1ChIfOutErrors, fclFrSeInBRemPriority=fclFrSeInBRemPriority, fcsnaLocalVirtualPort=fcsnaLocalVirtualPort, fciTelnetUserTable=fciTelnetUserTable, fcfE1Ds1ChannelIfId=fcfE1Ds1ChannelIfId, fmsE1Ds1ChIfOutUcastPkts=fmsE1Ds1ChIfOutUcastPkts, fclFrSeLpLogPortBackupEnabling=fclFrSeLpLogPortBackupEnabling, fcmMgfConversionAimedPoint=fcmMgfConversionAimedPoint, fclBSctProtDef1NbCharInhibited=fclBSctProtDef1NbCharInhibited, vcwWanRouteTable=vcwWanRouteTable, fclX25CfnDlnLowestIncomingChannel=fclX25CfnDlnLowestIncomingChannel, vcvFxxConfTxRecallSignalDuration=vcvFxxConfTxRecallSignalDuration, fclFrConfigurationSe=fclFrConfigurationSe, fcfIsdnDTimT308ReleaseResponseTimer=fcfIsdnDTimT308ReleaseResponseTimer, fcwDataPacketsDiscardThreshold=fcwDataPacketsDiscardThreshold, fcvLvpFltFilteringEntry=fcvLvpFltFilteringEntry, dcmAlrmSvcTable=dcmAlrmSvcTable, fclPppCfgStatus=fclPppCfgStatus, fcsnaGpRoutStatus=fcsnaGpRoutStatus, dcmAlrmVCFamilyId=dcmAlrmVCFamilyId, fclX25InDIsdn=fclX25InDIsdn, fclX25SlpBackupTimer=fclX25SlpBackupTimer, fmsRvpConnGrouping=fmsRvpConnGrouping, fmsGlobCongCpuLostBlocks=fmsGlobCongCpuLostBlocks, fclFrameRelay=fclFrameRelay, fcfLineV11DceControl105=fcfLineV11DceControl105, fcxIpxRouting=fcxIpxRouting, fcvRvpConnCir=fcvRvpConnCir, fcCtlAlteredDlciState=fcCtlAlteredDlciState, fmOspfStandardVersionNumber=fmOspfStandardVersionNumber, fcxRoutCircAddressFiltering=fcxRoutCircAddressFiltering, dcvRemNetWanAddress=dcvRemNetWanAddress, vcvVoiceTransCompressionAlgorithm=vcvVoiceTransCompressionAlgorithm, fmsEthManInputResetCounter=fmsEthManInputResetCounter, dcCtlErrorEntry=dcCtlErrorEntry, fclPppPstnRemX121Addr=fclPppPstnRemX121Addr, fclFrCfsGenBookingUbrThreshold=fclFrCfsGenBookingUbrThreshold, fmOsiISISESAdjState=fmOsiISISESAdjState, dclFrTeLpConfigId=dclFrTeLpConfigId, fclFrPvcSnaDlci=fclFrPvcSnaDlci, fmRip2PeerRcvBadRoutes=fmRip2PeerRcvBadRoutes, vcmAlrmSvcFamilyId=vcmAlrmSvcFamilyId, fmStatStateEntry=fmStatStateEntry, vclFrSeLpInterfaceId=vclFrSeLpInterfaceId, fmsInArpVpInverseArpStatus=fmsInArpVpInverseArpStatus, fdpModDiagCode=fdpModDiagCode, fclEthInterfaceId=fclEthInterfaceId, fclB3270LpLogPortId=fclB3270LpLogPortId, fcfE1Ds1ChannelStatus=fcfE1Ds1ChannelStatus, fclB3270HosLpLogPortId=fclB3270HosLpLogPortId, fclX25CfaPackingAddresses=fclX25CfaPackingAddresses, fcxServStaticHopCount=fcxServStaticHopCount, fmsEthPhysAddr=fmsEthPhysAddr, fmPingTable=fmPingTable, vpx10=vpx10, fclFrPvcSnaTwTransmitWinSize=fclFrPvcSnaTwTransmitWinSize, fmsSigDceOrDte=fmsSigDceOrDte, portNumber=portNumber, fclVipCluElementId=fclVipCluElementId, fcsnaLvpTrParamRW=fcsnaLvpTrParamRW, fmRip2IfStatStatus=fmRip2IfStatStatus, vcvFxxConfEndOfDialingTimer=vcvFxxConfEndOfDialingTimer, fclFrCfcLmiConfigId=fclFrCfcLmiConfigId, vcvFxxConfDtmfDigitLevel=vcvFxxConfDtmfDigitLevel, fclX25MlpLogPortId=fclX25MlpLogPortId, dcmAlrmSvcDisplay=dcmAlrmSvcDisplay, fmsE1Ds1ChIfSpeed=fmsE1Ds1ChIfSpeed, fclX25InBRemConnectionType=fclX25InBRemConnectionType, fcwFrDlcSetupDiscardThreshold=fcwFrDlcSetupDiscardThreshold, fmOspfStandardNbrAddressLessIndex=fmOspfStandardNbrAddressLessIndex, fclBSctProtDef1StartFrameDelimiter2=fclBSctProtDef1StartFrameDelimiter2, fclFrPvcCalledAddress=fclFrPvcCalledAddress, fclX25InDIsdnTable=fclX25InDIsdnTable, fmsInputDataPktsCounter=fmsInputDataPktsCounter, fclVipCluLogPortEntry=fclVipCluLogPortEntry, fmsEthOutLateCollisionsCounter=fmsEthOutLateCollisionsCounter, vclFrSeSigT316RestartAcknowledgeTimer=vclFrSeSigT316RestartAcknowledgeTimer, fclFrPvcSnaBanLink=fclFrPvcSnaBanLink, dcmAlrmFaxTable=dcmAlrmFaxTable, fcsnaGpSdlcStatus=fcsnaGpSdlcStatus, fclX25InDPdnLinkAddress=fclX25InDPdnLinkAddress, fmsS0BChOperStatus=fmsS0BChOperStatus, vcvRemoteConfWanAddress=vcvRemoteConfWanAddress, fclFrPvcEndPoint=fclFrPvcEndPoint, fcxRoutAddrFltMask=fcxRoutAddrFltMask, fciEgpTargetAsStatus=fciEgpTargetAsStatus, fclX25InBIsdnInterfaceId=fclX25InBIsdnInterfaceId, fclFrCfcGenMinimumRecallTimer=fclFrCfcGenMinimumRecallTimer, fccNeighVirtualPortId=fccNeighVirtualPortId, dcvVoiceSwInsSuffix=dcvVoiceSwInsSuffix, fcsConfigDescription=fcsConfigDescription, fcbBrdgRemoteAddressMappingEntry=fcbBrdgRemoteAddressMappingEntry, fciFlowSrcIpAddress=fciFlowSrcIpAddress, fcxRipOutFltNetAddress=fcxRipOutFltNetAddress, fclFrPvcTunEndPointTable=fclFrPvcTunEndPointTable, fclX25AccIsdnRemIsdnInterfaceId=fclX25AccIsdnRemIsdnInterfaceId, vcvIpLocAddressHost=vcvIpLocAddressHost, fclPppBIsdnRemStatus=fclPppBIsdnRemStatus, vcvEMConfigEntry=vcvEMConfigEntry, dcvIfPCMChannelEntry=dcvIfPCMChannelEntry, fclX25AccPstnBackX25AccessConfigId=fclX25AccPstnBackX25AccessConfigId, fmOsiISISRAAddress=fmOsiISISRAAddress, fclVipHostPadLogPort=fclVipHostPadLogPort, dvb1008=dvb1008, fclAsynCfgX3UserP11BinarySpeed=fclAsynCfgX3UserP11BinarySpeed, fclFrPvcSnaBanN3AcknowledgedCount=fclFrPvcSnaBanN3AcknowledgedCount, fclX25CfaSerCompressMultiPacketsTimer=fclX25CfaSerCompressMultiPacketsTimer, fclFrTeParGenLogPortId=fclFrTeParGenLogPortId, fclX25CfnDlnOutgoingChannelNumbering=fclX25CfnDlnOutgoingChannelNumbering, vcvVoiceSwOrderNumber=vcvVoiceSwOrderNumber, fcxRoutStaticRouteHopCount=fcxRoutStaticRouteHopCount, fcfIsdnDSigInactivityTimer=fcfIsdnDSigInactivityTimer, fclIulLogPortId=fclIulLogPortId, vcmAlrmVCEntry=vcmAlrmVCEntry, fciRipEgpRoutesAsNumber=fciRipEgpRoutesAsNumber, fclVipHosStationEntry=fclVipHosStationEntry, fmsIpTrafInUnknownProtosCounter=fmsIpTrafInUnknownProtosCounter, fmsFrLpInterfaceType=fmsFrLpInterfaceType, vcvToneGenProfileId=vcvToneGenProfileId, fmOsiISISCircAuthFails=fmOsiISISCircAuthFails, dcwABPvcLpEntry=dcwABPvcLpEntry, frx2000Y=frx2000Y, fciFlowSegmented=fciFlowSegmented, vcfPhysPortConnector=vcfPhysPortConnector, fcsnaLvpTrParamNW=fcsnaLvpTrParamNW, fmsFrcFilterPhysIfId=fmsFrcFilterPhysIfId, fmStat=fmStat, fmsBootPRelayEntry=fmsBootPRelayEntry, fclInterUnitLink=fclInterUnitLink, fcfLineV35DceInterfaceId=fcfLineV35DceInterfaceId, fclHdlcAutoSubscriberNumber=fclHdlcAutoSubscriberNumber, fciRipStaticRoutesDistributionMetric=fciRipStaticRoutesDistributionMetric, fcfLineTable=fcfLineTable, fclSdlcSecClusterCir=fclSdlcSecClusterCir, fccNeighborEntry=fccNeighborEntry, fcxRipOutFltFiltering=fcxRipOutFltFiltering, fclX25InDIsdnRemStatus=fclX25InDIsdnRemStatus, fmOspfStandardGeneralGroup=fmOspfStandardGeneralGroup, fciTelnetPwdP7=fciTelnetPwdP7, dcvVoiceLogicalPortTSPCM=dcvVoiceLogicalPortTSPCM, fcfE1PhysPortEntry=fcfE1PhysPortEntry, fmsPppAuthSlaveAuthentication=fmsPppAuthSlaveAuthentication, fmOsiISISISAdjState=fmOsiISISISAdjState, fclX25AccLogPortId=fclX25AccLogPortId, fclX25CfaNegMaxOutThroughputClass=fclX25CfaNegMaxOutThroughputClass, fclVipCluStatStationAddress=fclVipCluStatStationAddress, fclFrPvcSnaBanDlci=fclFrPvcSnaBanDlci, fcSystem=fcSystem, dcvVoiceTransMaxPayLoadNumber=dcvVoiceTransMaxPayLoadNumber, fclHdlcAutoCallEntry=fclHdlcAutoCallEntry, fclX25MlpMt1LostFrameTimer=fclX25MlpMt1LostFrameTimer, fciRipNeighborBackupGroup=fciRipNeighborBackupGroup, dcwABPvcLpAddress=dcwABPvcLpAddress, dcvToneDuration2=dcvToneDuration2, fmEvents=fmEvents, vcvToneDuration2=vcvToneDuration2, fclFrCfcSignallingParameterTable=fclFrCfcSignallingParameterTable, fclFrTeLogPortEntry=fclFrTeLogPortEntry, fciOspfNeighborStatus=fciOspfNeighborStatus, dcmAlrmSvcTrapSend=dcmAlrmSvcTrapSend, fciTelnetPwdP6=fciTelnetPwdP6, fcbBrdgVpAgingTime=fcbBrdgVpAgingTime, fmsFrcStorageCos=fmsFrcStorageCos, fclX25CfaDlnT1AcknowledgeTimer=fclX25CfaDlnT1AcknowledgeTimer, fcxRipOutFltCircuitId=fcxRipOutFltCircuitId, fmStatIpTraffic=fmStatIpTraffic, fmPingReceivedPackets=fmPingReceivedPackets, vcvEMConfDialingTimeOut=vcvEMConfDialingTimeOut, fmStatGlobal=fmStatGlobal, fclFrPvcX25LinkId=fclFrPvcX25LinkId, cpcClearVirtualCircuitEvent=cpcClearVirtualCircuitEvent, vcvFxxConfTimeBetweenSuccOutCall=vcvFxxConfTimeBetweenSuccOutCall, fciOspfAseExportInterval=fciOspfAseExportInterval, vclFrSeSigSignalOutputWinSize=vclFrSeSigSignalOutputWinSize, fclSdlcSecClusterEntry=fclSdlcSecClusterEntry, vcmAlrmSvcEntry=vcmAlrmSvcEntry, fclB3270CluLpPollingTimer=fclB3270CluLpPollingTimer, fclFrPvcSnaBanN2RetryCount=fclFrPvcSnaBanN2RetryCount, fmsFrcFilterDlci=fmsFrcFilterDlci, vcwABPvcLpAddress=vcwABPvcLpAddress, fclFrCfsSigT305DisconnectResponseTimer=fclFrCfsSigT305DisconnectResponseTimer, fcfIsdnBasicRateInterfaceEntry=fcfIsdnBasicRateInterfaceEntry, fmsEthInPktsTooShortsCounter=fmsEthInPktsTooShortsCounter, fclAsynCfgX3UserProfileId=fclAsynCfgX3UserProfileId, fclAsynCfgDescription=fclAsynCfgDescription, fmOspfStandardVirtIfHelloInterval=fmOspfStandardVirtIfHelloInterval, fcxServSapInFltFilterId=fcxServSapInFltFilterId, fclFrTeParGenDlcSetupDiscardThreshold=fclFrTeParGenDlcSetupDiscardThreshold, fmsWanConnOutOctetsCounter=fmsWanConnOutOctetsCounter, dcvRemoteConfEntry=dcvRemoteConfEntry, fclX25CfaNegDefInWindowSize=fclX25CfaNegDefInWindowSize, vpx20=vpx20, fmsStateLine=fmsStateLine, fclHdlcAutoEncapsulation=fclHdlcAutoEncapsulation, nodeName=nodeName, dcvVirtualPortId=dcvVirtualPortId, vcfPhysicalPortTable=vcfPhysicalPortTable, fclAsynCfgLinkBlockSize=fclAsynCfgLinkBlockSize, fclAsynX28PlusLpEscapeDigit=fclAsynX28PlusLpEscapeDigit, fciRouteDest=fciRouteDest, fclAsynLogPortTable=fclAsynLogPortTable, vcvVoiceProfTransmitLevel=vcvVoiceProfTransmitLevel, fclAsynX28PlusCfgTELENETDescription=fclAsynX28PlusCfgTELENETDescription, fclX25CfaNegMaxOutPacketSize=fclX25CfaNegMaxOutPacketSize, fcxRoutStaticRouteNetNum=fcxRoutStaticRouteNetNum, fclFrPvcQosInCir=fclFrPvcQosInCir, fclAsynX28PlusParTelConfigId=fclAsynX28PlusParTelConfigId, fcvRvpReliableVirtualCircuit=fcvRvpReliableVirtualCircuit, fcfLineV28AsynOutDteSignalTable=fcfLineV28AsynOutDteSignalTable, fclAsynMneTransAutoTermMode=fclAsynMneTransAutoTermMode, fclX25CfaConfigId=fclX25CfaConfigId)
mibBuilder.exportSymbols("PCE-MIB", fcvRvpConnectionEntry=fcvRvpConnectionEntry, fmeTrblInfoData=fmeTrblInfoData, frxManagementEvent=frxManagementEvent, vcvEMSwCallType=vcvEMSwCallType, fclPppBIsdnRemConfigId=fclPppBIsdnRemConfigId, fmuFunctionLz78Compression=fmuFunctionLz78Compression, fclX25InBRemStatus=fclX25InBRemStatus, fmsFrLpInFecnFrames=fmsFrLpInFecnFrames, fcwSQOSX25CallingAddress=fcwSQOSX25CallingAddress, fclVipCluElementEntry=fclVipCluElementEntry, fcvRvpConnCos=fcvRvpConnCos, fclX25AccIsdnRemStatus=fclX25AccIsdnRemStatus, fclX25CfaCugStatus=fclX25CfaCugStatus, fmsFrDlcOutDiscards=fmsFrDlcOutDiscards, fclIulConversionAddressCheck=fclIulConversionAddressCheck, fclX25ConfigInterNode=fclX25ConfigInterNode, fmOspfStandardNbrPriority=fmOspfStandardNbrPriority, fclX25CfaSerStatCompression=fclX25CfaSerStatCompression, dclFrSwitchEquipment=dclFrSwitchEquipment, fcfLineV35DceSyn=fcfLineV35DceSyn, fciFlowPortMin=fciFlowPortMin, fdpTestInErrOctetsCounter=fdpTestInErrOctetsCounter, vclFrLmiParaN392ErrorThreshold=vclFrLmiParaN392ErrorThreshold, vcvEMConfDelayBeforeDialing=vcvEMConfDelayBeforeDialing, fcsnaLvpTrParamT1=fcsnaLvpTrParamT1, fcmAlrmEvtEvent6=fcmAlrmEvtEvent6, fmsE1Ds1ChIfInErrors=fmsE1Ds1ChIfInErrors, fclX25SlpInterfaceId=fclX25SlpInterfaceId, fclAsynCfgX3P09CrPadding=fclAsynCfgX3P09CrPadding, fclPppSerAutoMinimumRecallTimer=fclPppSerAutoMinimumRecallTimer, fclAsynCfgFacDefOutWindowSize=fclAsynCfgFacDefOutWindowSize, fclX25CfnSerStatSignalling=fclX25CfnSerStatSignalling, fclX25CfaPackingEntry=fclX25CfaPackingEntry, vcmAlrmFaxTrapSend=vcmAlrmFaxTrapSend, fmOspfStandardLsdbAge=fmOspfStandardLsdbAge, dcvVoiceProfileEntry=dcvVoiceProfileEntry, fclFrConfigCeTeTable=fclFrConfigCeTeTable, fcfLineV11DteSignalEntry=fcfLineV11DteSignalEntry, fcfIsdnPriCrc4=fcfIsdnPriCrc4, fclFraLmiTable=fclFraLmiTable, cfConfigurationEdition=cfConfigurationEdition, fmOspfStandardLsdbSequence=fmOspfStandardLsdbSequence, fcfLineV28DceSyn=fcfLineV28DceSyn, fmsFrDlcLogPortId=fmsFrDlcLogPortId, fmeEvtLineId=fmeEvtLineId, dcvVoiceProfFaxActivation=dcvVoiceProfFaxActivation, fmsPppProtoClnpNcpStatus=fmsPppProtoClnpNcpStatus, fcxRipCircAgeMultiplier=fcxRipCircAgeMultiplier, fclX25InDIsdnRemotePeerTable=fclX25InDIsdnRemotePeerTable, fmStatStateTable=fmStatStateTable, fclX25SlpIsdnRemotePeerTable=fclX25SlpIsdnRemotePeerTable, fcwSCUDProfilesTable=fcwSCUDProfilesTable, fcxRipOutFltStatus=fcxRipOutFltStatus, fclSdlcSecLogPortTable=fclSdlcSecLogPortTable, fmOsiESIS=fmOsiESIS, fclAsynNetNui=fclAsynNetNui, fcmAlrmPhysPortEntry=fcmAlrmPhysPortEntry, fclX25CfmAddress14DigitsTruncation=fclX25CfmAddress14DigitsTruncation, fclFrPvcEncapsulation=fclFrPvcEncapsulation, fciSnmpModule2TrapSourceAddrVpId=fciSnmpModule2TrapSourceAddrVpId, vcvEMConfEndOfDialingTimer=vcvEMConfEndOfDialingTimer, vcvSnmpGen=vcvSnmpGen, fclBX780LpEquipementType=fclBX780LpEquipementType, fmsWanConnInOctetsCounter=fmsWanConnInOctetsCounter, fmOspfStandardIfEntry=fmOspfStandardIfEntry, cdpIdentPhysPortType=cdpIdentPhysPortType, cfServiceReport=cfServiceReport, fciRipVpDistribution=fciRipVpDistribution, vclHdlcLpRemoteAddress=vclHdlcLpRemoteAddress, fclBX780LogPortEntry=fclBX780LogPortEntry, fcwSDynRouteCalculLockingTimer=fcwSDynRouteCalculLockingTimer, fcvLvpFltCondValue=fcvLvpFltCondValue, fclVipLpPrinterRetryTimer=fclVipLpPrinterRetryTimer, fmRip2IfStatTable=fmRip2IfStatTable, fmsEthInErrDmaOverrunCounter=fmsEthInErrDmaOverrunCounter, fmsFrDlcOutLogPortId=fmsFrDlcOutLogPortId, fclB3270CluLogPortTable=fclB3270CluLogPortTable, fmsPppIpAddrSent=fmsPppIpAddrSent, fmOsiISISRAPathCost=fmOsiISISRAPathCost, fmsInArpVpRemoteIpAddr=fmsInArpVpRemoteIpAddr, fclFrPvcX25EncapsulationTable=fclFrPvcX25EncapsulationTable, fclX25InDX25AccessConfigId=fclX25InDX25AccessConfigId, fcfLineModSpeed=fcfLineModSpeed, fclAsynLowSpeedCpLogPort=fclAsynLowSpeedCpLogPort, vclFrCeLpLogPortId=vclFrCeLpLogPortId, vcvAnalogLineEntry=vcvAnalogLineEntry, fmuAccessX75LineNbMax=fmuAccessX75LineNbMax, dcvCASConfSeizureAckPulseDuration=dcvCASConfSeizureAckPulseDuration, dcfConfLineInterfaceId=dcfConfLineInterfaceId, vclFrSeLogPortEntry=vclFrSeLogPortEntry, fmOsiCLNPCircuitEntry=fmOsiCLNPCircuitEntry, fcxRoutIpxStaticRouteTable=fcxRoutIpxStaticRouteTable, fmsLineReinitsCounter=fmsLineReinitsCounter, fclFrSeIsdnRemStatus=fclFrSeIsdnRemStatus, fcsnaLvpParamMinRecallTimer=fcsnaLvpParamMinRecallTimer, fcbStpVpPortPriority=fcbStpVpPortPriority, fcfLineV28DceSignalEntry=fcfLineV28DceSignalEntry, fmsFrcStorageDlci=fmsFrcStorageDlci, fmOsiISISCircL2DesIS=fmOsiISISCircL2DesIS, fclX25CfaPackOutSubAddressSize=fclX25CfaPackOutSubAddressSize, fclAsynX28PlusConfTELENETEntry=fclAsynX28PlusConfTELENETEntry, dcvToneEntry=dcvToneEntry, fmsRvpConnOutPktsCounter=fmsRvpConnOutPktsCounter, vcvVoiceSuscrInsSuffix=vcvVoiceSuscrInsSuffix, sc5000=sc5000, fclAsynX28PlusLpIdleTimerSelection=fclAsynX28PlusLpIdleTimerSelection, fcvRemoteVirtualPorts=fcvRemoteVirtualPorts, dcvTSPCMPermTable=dcvTSPCMPermTable, fclPppCfgAuthenticationMode=fclPppCfgAuthenticationMode, fciNetToMediaEntry=fciNetToMediaEntry, fclX25CfnDlnDBitModification=fclX25CfnDlnDBitModification, fmsS2BChPhysIfId=fmsS2BChPhysIfId, fclAsynX28PlusRemCfgX3P07BreakHandling=fclAsynX28PlusRemCfgX3P07BreakHandling, fclFrCfcSignallingParameterEntry=fclFrCfcSignallingParameterEntry, fclFrPvcLinkType=fclFrPvcLinkType, fcwConvMultiOutConvertedAddr=fcwConvMultiOutConvertedAddr, fclX25InDIsdnInterfaceId=fclX25InDIsdnInterfaceId, fcCtlErrorCode=fcCtlErrorCode, vclFrLmiParaConfigId=vclFrLmiParaConfigId, fclAsynMneTransMnemonicId=fclAsynMneTransMnemonicId, fcwConvMultiInConvertedAddr=fcwConvMultiInConvertedAddr, fcxRoutAddrFltValue=fcxRoutAddrFltValue, fmsRvpConnInPktsCounter=fmsRvpConnInPktsCounter, fclAsynVdxLpLogPortId=fclAsynVdxLpLogPortId, fclX25CfnSerStatCompression=fclX25CfnSerStatCompression, fciEgp=fciEgp, fmsFrDlcDlci=fmsFrDlcDlci, vcmAlrmGenTrapSend=vcmAlrmGenTrapSend, fclAsynAutoFacThroughputClass=fclAsynAutoFacThroughputClass, sc103_6W_M=sc103_6W_M, fcsnaLvpParamCir=fcsnaLvpParamCir, fciFlowPortMax=fciFlowPortMax, fmsLinesSummState=fmsLinesSummState, fclAsynX28PlusRemConfigId=fclAsynX28PlusRemConfigId, fcwSRvcFastSelectUse=fcwSRvcFastSelectUse, fcsnaLvpTrRingNo=fcsnaLvpTrRingNo, fcbBridging=fcbBridging, fclFraPvcEncapsulation=fclFraPvcEncapsulation, fmsFrDlcInFecnFrames=fmsFrDlcInFecnFrames, fmOspfStandardHostIpAddress=fmOspfStandardHostIpAddress, fclAsynLscpLpTable=fclAsynLscpLpTable, fcsnaGpRemotePuEntry=fcsnaGpRemotePuEntry, fclVipLpPrinterMessagesManagement=fclVipLpPrinterMessagesManagement, fcvRvpBe=fcvRvpBe, vcvVoiceTransQosCir=vcvVoiceTransQosCir, fclAsynMneVdxKeyTranslationTable=fclAsynMneVdxKeyTranslationTable, fcsnaGpRoutCir=fcsnaGpRoutCir, fcwSQOSX25Status=fcwSQOSX25Status, fmRip2IfStatEntry=fmRip2IfStatEntry, fclBscX780LogPort=fclBscX780LogPort, fclVipHosElementTable=fclVipHosElementTable, sc300_3W_1E=sc300_3W_1E, fcfLineDVBTable=fcfLineDVBTable, fclAsynCfgX3UserProfilePart2=fclAsynCfgX3UserProfilePart2, vcvVoiceTransVoicePacketsCombination=vcvVoiceTransVoicePacketsCombination, fdpTestState=fdpTestState, fcwFrAllFramesDiscardThreshold=fcwFrAllFramesDiscardThreshold, fclX25AccPstnBackInterfaceId=fclX25AccPstnBackInterfaceId, fclFraLpGroupingThreshold=fclFraLpGroupingThreshold, vcvVoiceTransJitterCompensation=vcvVoiceTransJitterCompensation, fcxRipInFltFiltering=fcxRipInFltFiltering, fclFrTeLpConfigId=fclFrTeLpConfigId, fclX25AccPvcCalledAddr=fclX25AccPvcCalledAddr, fcwDnicRouteId=fcwDnicRouteId, dcmAlrmCmpEntry=dcmAlrmCmpEntry, fclFrPvcBackupEnabling=fclFrPvcBackupEnabling, fcbStpVpVirtualPortId=fcbStpVpVirtualPortId, fclB3270HosClusterStaAdd=fclB3270HosClusterStaAdd, vclFrameRelay=vclFrameRelay, vcvDialingReceptTable=vcvDialingReceptTable, fcfLineV35DceC105=fcfLineV35DceC105, vcvDialRxNumberLength=vcvDialRxNumberLength, fclX25CfaFacInputMarkers=fclX25CfaFacInputMarkers, dclFrLmiParaConfigId=dclFrLmiParaConfigId, fclAsynCfgX3P13LfInsertion=fclAsynCfgX3P13LfInsertion, fcxRipCircPace=fcxRipCircPace, dcvVirtualPortTable=dcvVirtualPortTable, fclFrPvcQosInBe=fclFrPvcQosInBe, fcxCircLvpCircuitId=fcxCircLvpCircuitId, fmOspfStandardAreaId=fmOspfStandardAreaId, fcmAlrmEvtEvent7=fcmAlrmEvtEvent7, fclBSctLpSignalEnvelope=fclBSctLpSignalEnvelope, vcwWanRouteEntry=vcwWanRouteEntry, vcvFxxRingProfile=vcvFxxRingProfile, fclX25AccPvcFacility=fclX25AccPvcFacility, dcfConfLineRate=dcfConfLineRate, fmsStateMlpTrunkMainLine=fmsStateMlpTrunkMainLine, dcmAlrmSvcFamilyId=dcmAlrmSvcFamilyId, fcfLineV28AsynInDceSignalTable=fcfLineV28AsynInDceSignalTable, fdpTestMaxDuration=fdpTestMaxDuration, vcmAlrmVCTyp=vcmAlrmVCTyp, fcsnaLvpParamCompressNegotiation=fcsnaLvpParamCompressNegotiation, fmStatBrdgTraffic=fmStatBrdgTraffic, fclX25SlpIsdnRemStatus=fclX25SlpIsdnRemStatus, fclFrCfcGenInactivityCheckDelay=fclFrCfcGenInactivityCheckDelay, fclX25CfnDlnLowestTwoWayChannel=fclX25CfnDlnLowestTwoWayChannel, fclX25PstnX25InterNodeConfigId=fclX25PstnX25InterNodeConfigId, fclFrPvcSnaConnTestEnabling=fclFrPvcSnaConnTestEnabling, fclAsynPstnRemotePeerEntry=fclAsynPstnRemotePeerEntry, fmRip2PeerTable=fmRip2PeerTable, fmsGlobInitBuffCount=fmsGlobInitBuffCount, vcvFxxConfCallSignalling=vcvFxxConfCallSignalling, fmOsiISISSysL1DbaseOloads=fmOsiISISSysL1DbaseOloads, fclFrSeIsdnBackIsdnInterfaceId=fclFrSeIsdnBackIsdnInterfaceId, fclFrCfcEiCodingEntry=fclFrCfcEiCodingEntry, fclSdlcSecClusterRemPvcLogChannel=fclSdlcSecClusterRemPvcLogChannel, fmsLineId=fmsLineId, fclBSctProtDef2ACK1=fclBSctProtDef2ACK1, dcCtlErrorTable=dcCtlErrorTable, fcwFrCongestionCount=fcwFrCongestionCount, fclAsynCfgSerConversionIncomingCall=fclAsynCfgSerConversionIncomingCall, fcwConvOutConvertedAddr=fcwConvOutConvertedAddr, fcClnp=fcClnp, fciFlowManagement=fciFlowManagement, fclIulCallReturnTransmission=fclIulCallReturnTransmission, fcxServSapOutputFilteringEntry=fcxServSapOutputFilteringEntry, fclAsynPstnRemStatus=fclAsynPstnRemStatus, fclHdlcAutoCallDirection=fclHdlcAutoCallDirection, dcmAlrmLMITyp=dcmAlrmLMITyp, fciOspfAdminStatus=fciOspfAdminStatus, fcxRoutStaticRouteStatus=fcxRoutStaticRouteStatus, fmOsiCLNPSystem=fmOsiCLNPSystem, fcfLineV28DteDcd109=fcfLineV28DteDcd109, fclFrBackupEntry=fclFrBackupEntry, vcvVoiceVirtualPortId=vcvVoiceVirtualPortId, dcvToneGenLevel=dcvToneGenLevel, vcwEquipOutLogPort=vcwEquipOutLogPort, fclAsynX28PlusRemoteCfgDescription=fclAsynX28PlusRemoteCfgDescription, fclFrCommunicationEquipment=fclFrCommunicationEquipment, fccLvpStatus=fccLvpStatus, fclX25CfnDlnConfigId=fclX25CfnDlnConfigId, vcvEMConfClearToIncCallTime=vcvEMConfClearToIncCallTime, fmStatEthernet=fmStatEthernet, fciSnmpAuthenticationFailureTrap=fciSnmpAuthenticationFailureTrap, fciIcmpRedirection=fciIcmpRedirection, fclAsynX28PlusRemCfgX3P11BinarySpeed=fclAsynX28PlusRemCfgX3P11BinarySpeed, fclFrPvcQosDlci=fclFrPvcQosDlci, fclFrPvcQosCos=fclFrPvcQosCos, fclFrTerminalEquipment=fclFrTerminalEquipment, fclAsynCfgSerCompressMultiPacketsTimer=fclAsynCfgSerCompressMultiPacketsTimer, fclAsynNetNua=fclAsynNetNua, fmOsiISISCircInCrtlPdu=fmOsiISISCircInCrtlPdu, fciLclClusterNumber=fciLclClusterNumber, fmhEqIdSerialNbEncodingType=fmhEqIdSerialNbEncodingType, fclBSctConnCalledAddr=fclBSctConnCalledAddr, fmOspfStandardIfRetransInterval=fmOspfStandardIfRetransInterval, dcvSnmpGen=dcvSnmpGen, fmOspfStandardIfRtrPriority=fmOspfStandardIfRtrPriority, fclPppSerialAutoCallTable=fclPppSerialAutoCallTable, fclAsynMneCallUserDataAscii=fclAsynMneCallUserDataAscii, fclFrPvcSnaBanRwReceiveWinSize=fclFrPvcSnaBanRwReceiveWinSize, fclVipCluElemLogPortId=fclVipCluElemLogPortId, vcCtlErrorTable=vcCtlErrorTable, fclFrTeIsdnBackupEntry=fclFrTeIsdnBackupEntry)
mibBuilder.exportSymbols("PCE-MIB", fclFrPvcSnaN2RetryCount=fclFrPvcSnaN2RetryCount, fmStatEthInputTrafficTable=fmStatEthInputTrafficTable, fclFrameRelayAccessLogPort=fclFrameRelayAccessLogPort, fmStatLineEntry=fmStatLineEntry, fcfLineModemEntry=fcfLineModemEntry, fccVpVirtualPortId=fccVpVirtualPortId, fclAsynCfgConnServiceEntry=fclAsynCfgConnServiceEntry, fclPppSerLpConfigId=fclPppSerLpConfigId, fcxRipInFltNetAddress=fcxRipInFltNetAddress, fmsFrLpSvcBookingVbrThroughput=fmsFrLpSvcBookingVbrThroughput, fmOspfStandardVirtNbrState=fmOspfStandardVirtNbrState, cfUserField=cfUserField, fclAsynX28PlusParTelLpFullDuplex=fclAsynX28PlusParTelLpFullDuplex, fclBSctProtDef2ControlFrameTerminator2=fclBSctProtDef2ControlFrameTerminator2, fclAsynVdxLpPceSubThreshold=fclAsynVdxLpPceSubThreshold, fmsFrLineId=fmsFrLineId, fmsIpCluAdminStatus=fmsIpCluAdminStatus, fmsStateOsiState=fmsStateOsiState, fmsEthOperStatus=fmsEthOperStatus, vcvSnmpGenCommunityStringReadOnly=vcvSnmpGenCommunityStringReadOnly, fclAsynX28PlusLpRemPrSentOnCalls=fclAsynX28PlusLpRemPrSentOnCalls, fclBSctProtocolDefinition2Table=fclBSctProtocolDefinition2Table, fmOsiISISISAdjCircIndex=fmOsiISISISAdjCircIndex, fmOspfStandardStubTOS=fmOspfStandardStubTOS, fclAsynX28PlusGeneralParameters=fclAsynX28PlusGeneralParameters, fmsFrLpNumPlan=fmsFrLpNumPlan, fmOspfStandardIfType=fmOspfStandardIfType, vcvVoiceTransportTable=vcvVoiceTransportTable, cfEdition=cfEdition, fdpModRespEltNum=fdpModRespEltNum, dcvVoiceProfTransmitLevel=dcvVoiceProfTransmitLevel, fciTelnetTimer=fciTelnetTimer, fcfLineV28DteInterfaceId=fcfLineV28DteInterfaceId, dcmAlrmGenDisplay=dcmAlrmGenDisplay, fclX25CfnSigConvMultiCallingAddrOutCall=fclX25CfnSigConvMultiCallingAddrOutCall, fclX25CfaNegotiatedFacilityEntry=fclX25CfaNegotiatedFacilityEntry, fmhTechnicEepromSize=fmhTechnicEepromSize, vcvFxxConfToneProfile=vcvFxxConfToneProfile, fcfLineV28AsynOutDteSignalEntry=fcfLineV28AsynOutDteSignalEntry, fmOspfStandardAreaLSACount=fmOspfStandardAreaLSACount, fclFrSeInBRemotePeerTable=fclFrSeInBRemotePeerTable, fclX25CfaNegotiatedFacilityTable=fclX25CfaNegotiatedFacilityTable, fclAsynGeneralParameters=fclAsynGeneralParameters, fciBootPInterfaceTable=fciBootPInterfaceTable, fclAsynCfgX3UserP16CharDelete=fclAsynCfgX3UserP16CharDelete, fcvRvpConnMinimumRecallTimer=fcvRvpConnMinimumRecallTimer, vclFrConfigurationSe=vclFrConfigurationSe, fcmMgfConversionOutgoingCall=fcmMgfConversionOutgoingCall, cfFactoryReturnDate4=cfFactoryReturnDate4, fclFrBackupStatus=fclFrBackupStatus, fclAsynCfgLinkDataParity=fclAsynCfgLinkDataParity, fcfLineV28AsynOutDceInterfaceId=fcfLineV28AsynOutDceInterfaceId, fmOsiESISSysInPDUs=fmOsiESISSysInPDUs, fclAsynPadLpLogPortId=fclAsynPadLpLogPortId, fcxRipCircuitEntry=fcxRipCircuitEntry, fmsFrLpSvcLogPortId=fmsFrLpSvcLogPortId, fciBootPInterfaceIpAddress=fciBootPInterfaceIpAddress, fclAsynMneTransName=fclAsynMneTransName, fmOspfStandardNBMANbrStatus=fmOspfStandardNBMANbrStatus, dcControl=dcControl, fcfLineV28DteSignalEntry=fcfLineV28DteSignalEntry, vcwEquipVoiceRoutingServicePortAddr=vcwEquipVoiceRoutingServicePortAddr, fmOspfStandardVirtNbrTable=fmOspfStandardVirtNbrTable, fmsSigSyn=fmsSigSyn, dcvTSPCMSwEntry=dcvTSPCMSwEntry, fmsEthInUcastPktsCounter=fmsEthInUcastPktsCounter, vcfDataLineDcd109=vcfDataLineDcd109, fcfIsdnDSigDirectInwardDialingCheck=fcfIsdnDSigDirectInwardDialingCheck, fmOsiISISSysOwnLSPPurges=fmOsiISISSysOwnLSPPurges, fcfE1Ds1DropInsertIf1=fcfE1Ds1DropInsertIf1, fcwSCUDProfilesEntry=fcwSCUDProfilesEntry, fclPppConfigAuthentication=fclPppConfigAuthentication, dcmAlrmSyncDisplay=dcmAlrmSyncDisplay, fclFrCfsConfigId=fclFrCfsConfigId, fmsFrLpSvcSignallingTable=fmsFrLpSvcSignallingTable, fmsFrDlcInLogPortId=fmsFrDlcInLogPortId, fclAsynCfgSerMinCir=fclAsynCfgSerMinCir, dcvCASConfAlarmState=dcvCASConfAlarmState, fclFrCfcConfigId=fclFrCfcConfigId, vcvEMConfSigChannelDiscTimeOut=vcvEMConfSigChannelDiscTimeOut, fclVipCluElemAddress=fclVipCluElemAddress, fclX25CfaSerCharging=fclX25CfaSerCharging, hpb1025_8W=hpb1025_8W, fclB3270HosClusterEntry=fclB3270HosClusterEntry, vcCtlHour=vcCtlHour, fmsFrLpIncomingEntry=fmsFrLpIncomingEntry, fmRip2PeerEntry=fmRip2PeerEntry, fclHdlcLpInactivityCheckDelay=fclHdlcLpInactivityCheckDelay, fmOsiISISCircRejAdjs=fmOsiISISCircRejAdjs, fmOspfStandardVirtIfAreaID=fmOspfStandardVirtIfAreaID, fclFrTeIsdnRemotePeerTable=fclFrTeIsdnRemotePeerTable, fmOspfStandard=fmOspfStandard, fccNeighNeighborId=fccNeighNeighborId, fmeEvtData=fmeEvtData, fmsCtrlCountersCommand=fmsCtrlCountersCommand, fmsPppPhysRemoteMru=fmsPppPhysRemoteMru, cfMtbBoardReference255=cfMtbBoardReference255, fciOspfNeighborsTable=fciOspfNeighborsTable, vclHdlcAccessLogPort=vclHdlcAccessLogPort, vcvEMSwTable=vcvEMSwTable, dcmAlrmTftpTable=dcmAlrmTftpTable, fclFrPvcSnaN3AcknowledgedCount=fclFrPvcSnaN3AcknowledgedCount, fcfLineType=fcfLineType, fclSdlcPriClusterTable=fclSdlcPriClusterTable, fclVipHosLogPortTable=fclVipHosLogPortTable, fclX25InDIsdnRemConnectionType=fclX25InDIsdnRemConnectionType, dcmAlrmGenFamilyId=dcmAlrmGenFamilyId, vcvVoiceSuscrTransportNetwork=vcvVoiceSuscrTransportNetwork, fclAsynPadPageAttributes=fclAsynPadPageAttributes, fclAsynCfgX3P19EditingSignal=fclAsynCfgX3P19EditingSignal, fclFrSeInBRemConfigId=fclFrSeInBRemConfigId, fclX25SlpSwMeasureCount=fclX25SlpSwMeasureCount, fclX25MlpParameterTable=fclX25MlpParameterTable, fclX25CfaSigConvMultiCalledAddrInCall=fclX25CfaSigConvMultiCalledAddrInCall, fclFrCfcDescription=fclFrCfcDescription, fmsS0BChChannelId=fmsS0BChChannelId, cfSoftwareFileToDownload=cfSoftwareFileToDownload, vcfDataLineDtr108=vcfDataLineDtr108, dclLogPortId=dclLogPortId, fmStatE1Ds1ChannelEntry=fmStatE1Ds1ChannelEntry, fclVipLpScreenRetryTimer=fclVipLpScreenRetryTimer, fclAsynCfgX3ModifCount=fclAsynCfgX3ModifCount, vcvEMSwEntry=vcvEMSwEntry, fciRipVpRipIn=fciRipVpRipIn, fmsIpTrafInOctetsCounter=fmsIpTrafInOctetsCounter, fmsFrDlcInDlci=fmsFrDlcInDlci, portStatus=portStatus, vcvVoicePhysicalPortTable=vcvVoicePhysicalPortTable, fclFrSeInBRemRemoteAddress=fclFrSeInBRemRemoteAddress, fcvRvpConvMultiCallingAddrInCall=fcvRvpConvMultiCallingAddrInCall, vcvVoiceLogPortStatus=vcvVoiceLogPortStatus, fmOspfStandardVirtIfState=fmOspfStandardVirtIfState, fclX25InDSwSwitchThreshold=fclX25InDSwSwitchThreshold, fclFrPvcEndPointTable=fclFrPvcEndPointTable, dcvSnmpManagerEntry=dcvSnmpManagerEntry, fclBX780LpLogPortId=fclBX780LpLogPortId, fcwFrDeFramesDiscardThreshold=fcwFrDeFramesDiscardThreshold, fcwConvCondOutExternalAddr=fcwConvCondOutExternalAddr, fciFlowRouteFlowId=fciFlowRouteFlowId, fcControl=fcControl, fclSdlcPriLpRemPuIdentification=fclSdlcPriLpRemPuIdentification, fmsSig142=fmsSig142, fmsS0BChProto=fmsS0BChProto, vcvVoiceGen=vcvVoiceGen, fclAsynPadLpMnemonicType=fclAsynPadLpMnemonicType, fclAsynCfgLinkXonXoffParity=fclAsynCfgLinkXonXoffParity, fclAsynCfgSerConversionOutgoingCall=fclAsynCfgSerConversionOutgoingCall, fcwFrDlcSetupAlarmThreshold=fcwFrDlcSetupAlarmThreshold, fclAsynAutoTransCFKeyHandling=fclAsynAutoTransCFKeyHandling, fciOspfVirtualPortsTable=fciOspfVirtualPortsTable, fcfLineV28AsynOutDteRts105=fcfLineV28AsynOutDteRts105, fclSdlcPriClusterStatus=fclSdlcPriClusterStatus, fmStatIpRouter=fmStatIpRouter, dclFrSeSigN200RetransMaxCount=dclFrSeSigN200RetransMaxCount, fcxCircVirtualPortId=fcxCircVirtualPortId, fcvRvpCompression=fcvRvpCompression, fclAsynPadPageMessage=fclAsynPadPageMessage, fclAsynMultiLpAuthStep1=fclAsynMultiLpAuthStep1, vclFrLmiParaT391LinkIntegPollTimer=vclFrLmiParaT391LinkIntegPollTimer, fclBSctProtDef2WACK=fclBSctProtDef2WACK, dcvCASConfId=dcvCASConfId, fclX25AccIsdnBackStatus=fclX25AccIsdnBackStatus, fclAsynX28PlusLpX3Mode=fclAsynX28PlusLpX3Mode, fclSdlcSecLpPollingMaxCount=fclSdlcSecLpPollingMaxCount, fmsWanConnStatus=fmsWanConnStatus, fclBSctLpMaxFrameNumberIn=fclBSctLpMaxFrameNumberIn, fmsE1Ds1ChIfInNUcastPkts=fmsE1Ds1ChIfInNUcastPkts, fmHardwareId=fmHardwareId, dcvIfPCM=dcvIfPCM, fclPppCfaLocalPassword=fclPppCfaLocalPassword, vcfDataLineCts106=vcfDataLineCts106, dcmAlrmSwDisplay=dcmAlrmSwDisplay, fcxRoutAddressFilteringEntry=fcxRoutAddressFilteringEntry, fmOspfStandardIfMetricStatus=fmOspfStandardIfMetricStatus, fmsFrCircuitAge=fmsFrCircuitAge, dcvToneType=dcvToneType, fclHdlcLpLogPortId=fclHdlcLpLogPortId, cfField4=cfField4, fcwSQOSProfilesId=fcwSQOSProfilesId, fclPppBIsdnBriId=fclPppBIsdnBriId, fcfIsdnBriSignalling=fcfIsdnBriSignalling, vcvSnmpManagerTable=vcvSnmpManagerTable, dcmAlrmFaxTrapSend=dcmAlrmFaxTrapSend, fcfTokenRingCheckPeriodCount=fcfTokenRingCheckPeriodCount, fciVpVirtualPortId=fciVpVirtualPortId, fclX25CfnNegDefInPacketSize=fclX25CfnNegDefInPacketSize, fclFrCfsGenNetworkBandwidth=fclFrCfsGenNetworkBandwidth, fclX25CfaSigType=fclX25CfaSigType, fcVirtualPorts=fcVirtualPorts, fciRouteMetric=fciRouteMetric, fciFlowEntry=fciFlowEntry, fclVipHosStatStatus=fclVipHosStatStatus, fclX25CfaSerCompression=fclX25CfaSerCompression, fclX25CfaNegDefOutWindowSize=fclX25CfaNegDefOutWindowSize, vclFrLmiParameterTable=vclFrLmiParameterTable, dcvVoiceLogPort=dcvVoiceLogPort, dcvCASConfDtmfDigitLevel=dcvCASConfDtmfDigitLevel, fcsnaGpLanFrTable=fcsnaGpLanFrTable, fmsFrCircuitLineId=fmsFrCircuitLineId, fclFrPvcSnaBanMinRecallTimer=fclFrPvcSnaBanMinRecallTimer, fciRipVirtualPortEntry=fciRipVirtualPortEntry, vcvRemNetEncapsulation=vcvRemNetEncapsulation, changeDescription=changeDescription, fmsEthOutErrDmaUnderrunCounter=fmsEthOutErrDmaUnderrunCounter, fciOspfAsePreference=fciOspfAsePreference, fclFrPvcTunAssociatedAddress=fclFrPvcTunAssociatedAddress, fcsHardwareDescription=fcsHardwareDescription, fcfE1Ds1=fcfE1Ds1, fclAsynAutoCallTable=fclAsynAutoCallTable, fmsInputReinitPktsCounter=fmsInputReinitPktsCounter, fmOsiISISRACircuitId=fmOsiISISRACircuitId, fcvLvpFltCondStatus=fcvLvpFltCondStatus, fclFrCeParGenBookingUbrThreshold=fclFrCeParGenBookingUbrThreshold, fclPppBIsdnLpLogPortId=fclPppBIsdnLpLogPortId, fclPppBIsdnLocalPriEntry=fclPppBIsdnLocalPriEntry, fmsFrLpOutgoingTable=fmsFrLpOutgoingTable, fclAsynVdxLpLink=fclAsynVdxLpLink, vcvEMPermLpId=vcvEMPermLpId, fciOspfAseExportStaticsType=fciOspfAseExportStaticsType, fcfLineModInitString=fcfLineModInitString, fcfE1PhysPortFlowType=fcfE1PhysPortFlowType, dcvVoicePhysicalPortTable=dcvVoicePhysicalPortTable, fclBSctLpOnePadSuppressed=fclBSctLpOnePadSuppressed, fmsFrDlcInDeFrames=fmsFrDlcInDeFrames, fciTelnetMaxSession=fciTelnetMaxSession, fmsFrDlcTable=fmsFrDlcTable, fciRipVpVirtualPortId=fciRipVpVirtualPortId, fclX25AccIsdnBackupEntry=fclX25AccIsdnBackupEntry, fciOspfVpTransitDelay=fciOspfVpTransitDelay, fmsPppAuthSlaveFailureCounter=fmsPppAuthSlaveFailureCounter, dcWanSwitch=dcWanSwitch, fcfLineV28AsynInDteEnablingSig2=fcfLineV28AsynInDteEnablingSig2, fclAsynX28PlusRemoteTELENETEntry=fclAsynX28PlusRemoteTELENETEntry, fciSnmpManagerEntry=fciSnmpManagerEntry, dcmAlrmCmpFamilyId=dcmAlrmCmpFamilyId, fciFlowProtocol=fciFlowProtocol, fclAsynX28PlusRemCfgX3P04IdleTimerDelay=fclAsynX28PlusRemCfgX3P04IdleTimerDelay, fcwRoutStatus=fcwRoutStatus, rpb2025=rpb2025, fmOspfStandardVirtIfEntry=fmOspfStandardVirtIfEntry, fclFrPvcSnaT2ReceiverAckTimer=fclFrPvcSnaT2ReceiverAckTimer, fcwFrFecnBecnOfAllFramesThreshold=fcwFrFecnBecnOfAllFramesThreshold, fcfLineV11DteInterfaceId=fcfLineV11DteInterfaceId, fcwSerReselectionX29=fcwSerReselectionX29, fclX25CfnSerStatLoadAndTraffic=fclX25CfnSerStatLoadAndTraffic, fclAsynVdxLogPort=fclAsynVdxLogPort, fmsFrLpInBecnFrames=fmsFrLpInBecnFrames, fmOsiForwarding=fmOsiForwarding, fcfLineV35DteF109=fcfLineV35DteF109, vclFrTeLpLmi=vclFrTeLpLmi, fclX25MlpIsdnRemCallRetryCount=fclX25MlpIsdnRemCallRetryCount, vcvAnalogLineTypeInterface=vcvAnalogLineTypeInterface, fclFrTeIsdnBackIsdnInterfaceId=fclFrTeIsdnBackIsdnInterfaceId, fmOsiISISRAAdjacencyId=fmOsiISISRAAdjacencyId)
mibBuilder.exportSymbols("PCE-MIB", fcfTokenRingSpeed=fcfTokenRingSpeed, fmuFunctionLoadStat=fmuFunctionLoadStat, cpcManagement=cpcManagement, fmsRvpConnOutOctetsCounter=fmsRvpConnOutOctetsCounter, fclSdlcSecLpN2RetryCount=fclSdlcSecLpN2RetryCount, fciOspfAreaRangeStatus=fciOspfAreaRangeStatus, fclFrTeIsdnRemConfigId=fclFrTeIsdnRemConfigId, fmsFrLpLmiTable=fmsFrLpLmiTable, dcvVoiceProfSilenceDetection=dcvVoiceProfSilenceDetection, fciEgpAutonomousSystemNumber=fciEgpAutonomousSystemNumber, dclFrSeLogPortTable=dclFrSeLogPortTable, fmuFunctionOverflowResc=fmuFunctionOverflowResc, dcvRemNetEncapsulation=dcvRemNetEncapsulation, dcvIfPCMPhysEntry=dcvIfPCMPhysEntry, dcvIfPCMPhysPhysicalPort=dcvIfPCMPhysPhysicalPort, fccLvpVirtualPortId=fccLvpVirtualPortId, fclAsynMultiStandardPadLogPort=fclAsynMultiStandardPadLogPort, fcfLineModInputXidString=fcfLineModInputXidString, fclAsynX28PlusRemCfgX3P16CharDelete=fclAsynX28PlusRemCfgX3P16CharDelete, fcCtlConfigurationCommand=fcCtlConfigurationCommand, fciNetToMediaIpAddress=fciNetToMediaIpAddress)
