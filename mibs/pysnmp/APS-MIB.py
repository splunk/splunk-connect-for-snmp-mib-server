#
# PySNMP MIB module APS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APS-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:08:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, TimeTicks, ObjectIdentity, Unsigned32, Gauge32, transmission, iso, Counter32, IpAddress, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "TimeTicks", "ObjectIdentity", "Unsigned32", "Gauge32", "transmission", "iso", "Counter32", "IpAddress", "Bits", "Counter64")
StorageType, DisplayString, TimeStamp, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "DisplayString", "TimeStamp", "RowStatus", "TextualConvention")
apsMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 49))
apsMIB.setRevisions(('2003-02-28 00:00',))
if mibBuilder.loadTexts: apsMIB.setLastUpdated('200302280000Z')
if mibBuilder.loadTexts: apsMIB.setOrganization('IETF AToMMIB Working Group')
apsMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 49, 1))
apsMIBNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 49, 2))
apsMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 49, 3))
class ApsK1K2(TextualConvention, OctetString):
    reference = 'Bellcore (Telcordia Technologies) GR-253-CORE, Issue 3, September 2000, 5.3.5.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 2)
    fixedLength = 2

class ApsSwitchCommand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("noCmd", 1), ("clear", 2), ("lockoutOfProtection", 3), ("forcedSwitchWorkToProtect", 4), ("forcedSwitchProtectToWork", 5), ("manualSwitchWorkToProtect", 6), ("manualSwitchProtectToWork", 7), ("exercise", 8))

class ApsControlCommand(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noCmd", 1), ("lockoutWorkingChannel", 2), ("clearLockoutWorkingChannel", 3))

apsConfig = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 49, 1, 1))
apsConfigGroups = MibScalar((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsConfigGroups.setStatus('current')
apsConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2), )
if mibBuilder.loadTexts: apsConfigTable.setStatus('current')
apsConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1), ).setIndexNames((1, "APS-MIB", "apsConfigName"))
if mibBuilder.loadTexts: apsConfigEntry.setStatus('current')
apsConfigName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: apsConfigName.setStatus('current')
apsConfigRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsConfigRowStatus.setStatus('current')
apsConfigMode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("onePlusOne", 1), ("oneToN", 2), ("onePlusOneCompatible", 3), ("onePlusOneOptimized", 4))).clone('onePlusOne')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsConfigMode.setStatus('current')
apsConfigRevert = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonrevertive", 1), ("revertive", 2))).clone('nonrevertive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsConfigRevert.setStatus('current')
apsConfigDirection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unidirectional", 1), ("bidirectional", 2))).clone('unidirectional')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsConfigDirection.setStatus('current')
apsConfigExtraTraffic = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsConfigExtraTraffic.setStatus('current')
apsConfigSdBerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 9)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsConfigSdBerThreshold.setStatus('current')
apsConfigSfBerThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 5)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsConfigSfBerThreshold.setStatus('current')
apsConfigWaitToRestore = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 720)).clone(300)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsConfigWaitToRestore.setStatus('current')
apsConfigCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsConfigCreationTime.setStatus('current')
apsConfigStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 1, 2, 1, 11), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsConfigStorageType.setStatus('current')
apsStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 49, 1, 2), )
if mibBuilder.loadTexts: apsStatusTable.setStatus('current')
apsStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1), )
apsConfigEntry.registerAugmentions(("APS-MIB", "apsStatusEntry"))
apsStatusEntry.setIndexNames(*apsConfigEntry.getIndexNames())
if mibBuilder.loadTexts: apsStatusEntry.setStatus('current')
apsStatusK1K2Rcv = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 1), ApsK1K2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusK1K2Rcv.setStatus('current')
apsStatusK1K2Trans = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 2), ApsK1K2()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusK1K2Trans.setStatus('current')
apsStatusCurrent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 3), Bits().clone(namedValues=NamedValues(("modeMismatch", 0), ("channelMismatch", 1), ("psbf", 2), ("feplf", 3), ("extraTraffic", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusCurrent.setStatus('current')
apsStatusModeMismatches = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusModeMismatches.setStatus('current')
apsStatusChannelMismatches = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusChannelMismatches.setStatus('current')
apsStatusPSBFs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusPSBFs.setStatus('current')
apsStatusFEPLFs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusFEPLFs.setStatus('current')
apsStatusSwitchedChannel = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusSwitchedChannel.setStatus('current')
apsStatusDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 2, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsStatusDiscontinuityTime.setStatus('current')
apsMap = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 49, 1, 3))
apsChanLTEs = MibScalar((1, 3, 6, 1, 2, 1, 10, 49, 1, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsChanLTEs.setStatus('current')
apsMapTable = MibTable((1, 3, 6, 1, 2, 1, 10, 49, 1, 3, 2), )
if mibBuilder.loadTexts: apsMapTable.setStatus('current')
apsMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 49, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apsMapEntry.setStatus('current')
apsMapGroupName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 3, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsMapGroupName.setStatus('current')
apsMapChanNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsMapChanNumber.setStatus('current')
apsChanConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 49, 1, 4), )
if mibBuilder.loadTexts: apsChanConfigTable.setStatus('current')
apsChanConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1), ).setIndexNames((0, "APS-MIB", "apsChanConfigGroupName"), (0, "APS-MIB", "apsChanConfigNumber"))
if mibBuilder.loadTexts: apsChanConfigEntry.setStatus('current')
apsChanConfigGroupName = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: apsChanConfigGroupName.setStatus('current')
apsChanConfigNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14)))
if mibBuilder.loadTexts: apsChanConfigNumber.setStatus('current')
apsChanConfigRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsChanConfigRowStatus.setStatus('current')
apsChanConfigIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1, 4), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsChanConfigIfIndex.setStatus('current')
apsChanConfigPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsChanConfigPriority.setStatus('current')
apsChanConfigStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 4, 1, 6), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: apsChanConfigStorageType.setStatus('current')
apsCommandTable = MibTable((1, 3, 6, 1, 2, 1, 10, 49, 1, 5), )
if mibBuilder.loadTexts: apsCommandTable.setStatus('current')
apsCommandEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 49, 1, 5, 1), ).setIndexNames((0, "APS-MIB", "apsChanConfigGroupName"), (0, "APS-MIB", "apsChanConfigNumber"))
if mibBuilder.loadTexts: apsCommandEntry.setStatus('current')
apsCommandSwitch = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 5, 1, 1), ApsSwitchCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsCommandSwitch.setStatus('current')
apsCommandControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 5, 1, 2), ApsControlCommand()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsCommandControl.setStatus('current')
apsChanStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 49, 1, 6), )
if mibBuilder.loadTexts: apsChanStatusTable.setStatus('current')
apsChanStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1), )
apsChanConfigEntry.registerAugmentions(("APS-MIB", "apsChanStatusEntry"))
apsChanStatusEntry.setIndexNames(*apsChanConfigEntry.getIndexNames())
if mibBuilder.loadTexts: apsChanStatusEntry.setStatus('current')
apsChanStatusCurrent = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 1), Bits().clone(namedValues=NamedValues(("lockedOut", 0), ("sd", 1), ("sf", 2), ("switched", 3), ("wtr", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsChanStatusCurrent.setStatus('current')
apsChanStatusSignalDegrades = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsChanStatusSignalDegrades.setStatus('current')
apsChanStatusSignalFailures = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsChanStatusSignalFailures.setStatus('current')
apsChanStatusSwitchovers = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsChanStatusSwitchovers.setStatus('current')
apsChanStatusLastSwitchover = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsChanStatusLastSwitchover.setStatus('current')
apsChanStatusSwitchoverSeconds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsChanStatusSwitchoverSeconds.setStatus('current')
apsChanStatusDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 49, 1, 6, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsChanStatusDiscontinuityTime.setStatus('current')
apsNotificationEnable = MibScalar((1, 3, 6, 1, 2, 1, 10, 49, 1, 7), Bits().clone(namedValues=NamedValues(("switchover", 0), ("modeMismatch", 1), ("channelMismatch", 2), ("psbf", 3), ("feplf", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apsNotificationEnable.setStatus('current')
apsNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 49, 2, 0))
apsEventSwitchover = NotificationType((1, 3, 6, 1, 2, 1, 10, 49, 2, 0, 1)).setObjects(("APS-MIB", "apsChanStatusSwitchovers"), ("APS-MIB", "apsChanStatusCurrent"))
if mibBuilder.loadTexts: apsEventSwitchover.setStatus('current')
apsEventModeMismatch = NotificationType((1, 3, 6, 1, 2, 1, 10, 49, 2, 0, 2)).setObjects(("APS-MIB", "apsStatusModeMismatches"), ("APS-MIB", "apsStatusCurrent"))
if mibBuilder.loadTexts: apsEventModeMismatch.setStatus('current')
apsEventChannelMismatch = NotificationType((1, 3, 6, 1, 2, 1, 10, 49, 2, 0, 3)).setObjects(("APS-MIB", "apsStatusChannelMismatches"), ("APS-MIB", "apsStatusCurrent"))
if mibBuilder.loadTexts: apsEventChannelMismatch.setStatus('current')
apsEventPSBF = NotificationType((1, 3, 6, 1, 2, 1, 10, 49, 2, 0, 4)).setObjects(("APS-MIB", "apsStatusPSBFs"), ("APS-MIB", "apsStatusCurrent"))
if mibBuilder.loadTexts: apsEventPSBF.setStatus('current')
apsEventFEPLF = NotificationType((1, 3, 6, 1, 2, 1, 10, 49, 2, 0, 5)).setObjects(("APS-MIB", "apsStatusFEPLFs"), ("APS-MIB", "apsStatusCurrent"))
if mibBuilder.loadTexts: apsEventFEPLF.setStatus('current')
apsGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 49, 3, 1))
apsCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 49, 3, 2))
apsFullCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 49, 3, 2, 1)).setObjects(("APS-MIB", "apsConfigGeneral"), ("APS-MIB", "apsStatusGeneral"), ("APS-MIB", "apsChanGeneral"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apsFullCompliance = apsFullCompliance.setStatus('current')
apsReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 49, 3, 2, 2)).setObjects(("APS-MIB", "apsConfigGeneral"), ("APS-MIB", "apsStatusGeneral"), ("APS-MIB", "apsChanGeneral"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apsReadOnlyCompliance = apsReadOnlyCompliance.setStatus('current')
apsConfigGeneral = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 1)).setObjects(("APS-MIB", "apsConfigMode"), ("APS-MIB", "apsConfigRevert"), ("APS-MIB", "apsConfigDirection"), ("APS-MIB", "apsConfigExtraTraffic"), ("APS-MIB", "apsConfigSdBerThreshold"), ("APS-MIB", "apsConfigSfBerThreshold"), ("APS-MIB", "apsConfigCreationTime"), ("APS-MIB", "apsConfigRowStatus"), ("APS-MIB", "apsConfigStorageType"), ("APS-MIB", "apsNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apsConfigGeneral = apsConfigGeneral.setStatus('current')
apsConfigWtr = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 2)).setObjects(("APS-MIB", "apsConfigWaitToRestore"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apsConfigWtr = apsConfigWtr.setStatus('current')
apsCommandOnePlusOne = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 3)).setObjects(("APS-MIB", "apsCommandSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apsCommandOnePlusOne = apsCommandOnePlusOne.setStatus('current')
apsCommandOneToN = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 4)).setObjects(("APS-MIB", "apsCommandSwitch"), ("APS-MIB", "apsCommandControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apsCommandOneToN = apsCommandOneToN.setStatus('current')
apsStatusGeneral = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 5)).setObjects(("APS-MIB", "apsStatusK1K2Rcv"), ("APS-MIB", "apsStatusK1K2Trans"), ("APS-MIB", "apsStatusCurrent"), ("APS-MIB", "apsStatusModeMismatches"), ("APS-MIB", "apsStatusChannelMismatches"), ("APS-MIB", "apsStatusPSBFs"), ("APS-MIB", "apsStatusFEPLFs"), ("APS-MIB", "apsStatusSwitchedChannel"), ("APS-MIB", "apsStatusDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apsStatusGeneral = apsStatusGeneral.setStatus('current')
apsChanGeneral = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 6)).setObjects(("APS-MIB", "apsChanConfigIfIndex"), ("APS-MIB", "apsChanConfigRowStatus"), ("APS-MIB", "apsChanConfigStorageType"), ("APS-MIB", "apsChanStatusCurrent"), ("APS-MIB", "apsChanStatusSignalDegrades"), ("APS-MIB", "apsChanStatusSignalFailures"), ("APS-MIB", "apsChanStatusSwitchovers"), ("APS-MIB", "apsChanStatusLastSwitchover"), ("APS-MIB", "apsChanStatusSwitchoverSeconds"), ("APS-MIB", "apsChanStatusDiscontinuityTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apsChanGeneral = apsChanGeneral.setStatus('current')
apsChanOneToN = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 7)).setObjects(("APS-MIB", "apsChanConfigPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apsChanOneToN = apsChanOneToN.setStatus('current')
apsTotalsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 8)).setObjects(("APS-MIB", "apsConfigGroups"), ("APS-MIB", "apsChanLTEs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apsTotalsGroup = apsTotalsGroup.setStatus('current')
apsMapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 9)).setObjects(("APS-MIB", "apsMapGroupName"), ("APS-MIB", "apsMapChanNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apsMapGroup = apsMapGroup.setStatus('current')
apsEventGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 49, 3, 1, 10)).setObjects(("APS-MIB", "apsEventSwitchover"), ("APS-MIB", "apsEventModeMismatch"), ("APS-MIB", "apsEventChannelMismatch"), ("APS-MIB", "apsEventPSBF"), ("APS-MIB", "apsEventFEPLF"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apsEventGroup = apsEventGroup.setStatus('current')
mibBuilder.exportSymbols("APS-MIB", ApsSwitchCommand=ApsSwitchCommand, apsStatusSwitchedChannel=apsStatusSwitchedChannel, apsMIBNotifications=apsMIBNotifications, apsChanConfigPriority=apsChanConfigPriority, apsConfigTable=apsConfigTable, apsMIBObjects=apsMIBObjects, apsMapGroupName=apsMapGroupName, apsStatusTable=apsStatusTable, apsMapChanNumber=apsMapChanNumber, apsStatusCurrent=apsStatusCurrent, apsStatusChannelMismatches=apsStatusChannelMismatches, apsMap=apsMap, apsMIBConformance=apsMIBConformance, apsChanStatusEntry=apsChanStatusEntry, apsCommandOneToN=apsCommandOneToN, apsChanConfigRowStatus=apsChanConfigRowStatus, apsChanStatusDiscontinuityTime=apsChanStatusDiscontinuityTime, apsConfig=apsConfig, apsCompliances=apsCompliances, apsConfigSdBerThreshold=apsConfigSdBerThreshold, apsStatusModeMismatches=apsStatusModeMismatches, apsMIB=apsMIB, apsConfigGeneral=apsConfigGeneral, apsFullCompliance=apsFullCompliance, apsEventModeMismatch=apsEventModeMismatch, apsConfigExtraTraffic=apsConfigExtraTraffic, apsStatusK1K2Trans=apsStatusK1K2Trans, apsEventFEPLF=apsEventFEPLF, apsConfigGroups=apsConfigGroups, apsNotificationEnable=apsNotificationEnable, apsConfigWtr=apsConfigWtr, apsChanConfigGroupName=apsChanConfigGroupName, apsNotificationsPrefix=apsNotificationsPrefix, apsChanStatusSignalFailures=apsChanStatusSignalFailures, apsStatusGeneral=apsStatusGeneral, apsCommandTable=apsCommandTable, apsStatusEntry=apsStatusEntry, apsConfigSfBerThreshold=apsConfigSfBerThreshold, apsMapTable=apsMapTable, apsChanStatusTable=apsChanStatusTable, ApsControlCommand=ApsControlCommand, apsEventSwitchover=apsEventSwitchover, apsStatusPSBFs=apsStatusPSBFs, apsEventPSBF=apsEventPSBF, apsCommandControl=apsCommandControl, apsStatusFEPLFs=apsStatusFEPLFs, apsChanGeneral=apsChanGeneral, apsMapEntry=apsMapEntry, apsChanStatusLastSwitchover=apsChanStatusLastSwitchover, apsConfigName=apsConfigName, apsChanOneToN=apsChanOneToN, apsEventGroup=apsEventGroup, apsReadOnlyCompliance=apsReadOnlyCompliance, apsConfigRevert=apsConfigRevert, apsChanConfigIfIndex=apsChanConfigIfIndex, apsCommandOnePlusOne=apsCommandOnePlusOne, apsCommandSwitch=apsCommandSwitch, apsCommandEntry=apsCommandEntry, apsConfigCreationTime=apsConfigCreationTime, PYSNMP_MODULE_ID=apsMIB, apsChanConfigStorageType=apsChanConfigStorageType, apsConfigRowStatus=apsConfigRowStatus, apsChanConfigNumber=apsChanConfigNumber, apsMapGroup=apsMapGroup, ApsK1K2=ApsK1K2, apsChanStatusSwitchoverSeconds=apsChanStatusSwitchoverSeconds, apsChanStatusSignalDegrades=apsChanStatusSignalDegrades, apsChanConfigTable=apsChanConfigTable, apsGroups=apsGroups, apsEventChannelMismatch=apsEventChannelMismatch, apsStatusDiscontinuityTime=apsStatusDiscontinuityTime, apsConfigEntry=apsConfigEntry, apsChanStatusSwitchovers=apsChanStatusSwitchovers, apsConfigStorageType=apsConfigStorageType, apsChanStatusCurrent=apsChanStatusCurrent, apsConfigWaitToRestore=apsConfigWaitToRestore, apsChanLTEs=apsChanLTEs, apsConfigMode=apsConfigMode, apsConfigDirection=apsConfigDirection, apsStatusK1K2Rcv=apsStatusK1K2Rcv, apsChanConfigEntry=apsChanConfigEntry, apsTotalsGroup=apsTotalsGroup)
