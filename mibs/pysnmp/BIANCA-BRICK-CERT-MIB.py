#
# PySNMP MIB module BIANCA-BRICK-CERT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BIANCA-BRICK-CERT-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 17:21:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Gauge32, NotificationType, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, Integer32, Bits, Counter64, TimeTicks, iso, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "NotificationType", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "Integer32", "Bits", "Counter64", "TimeTicks", "iso", "ObjectIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
bintec = MibIdentifier((1, 3, 6, 1, 4, 1, 272))
bibo = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4))
ipsec = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 26))
class DisplayString(OctetString):
    pass

cert = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 26, 33))
certGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1))
certGlobHttpProxy = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobHttpProxy.setStatus('mandatory')
certGlobSocksServer = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobSocksServer.setStatus('mandatory')
certGlobMaxCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobMaxCacheEntries.setStatus('mandatory')
certGlobMaxPathLength = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobMaxPathLength.setStatus('mandatory')
certGlobMaxRestarts = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobMaxRestarts.setStatus('mandatory')
certGlobMaxCertValidity = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobMaxCertValidity.setStatus('mandatory')
certGlobMaxCrlValidity = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobMaxCrlValidity.setStatus('mandatory')
certGlobNegCachePeriod = MibScalar((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certGlobNegCachePeriod.setStatus('mandatory')
certServerTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 2), )
if mibBuilder.loadTexts: certServerTable.setStatus('mandatory')
certServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 2, 1), ).setIndexNames((0, "BIANCA-BRICK-CERT-MIB", "certServerPreference"))
if mibBuilder.loadTexts: certServerEntry.setStatus('mandatory')
certServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certServerName.setStatus('mandatory')
certServerUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certServerUrl.setStatus('mandatory')
certServerPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certServerPreference.setStatus('mandatory')
certServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("server", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certServerType.setStatus('mandatory')
certTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3), )
if mibBuilder.loadTexts: certTable.setStatus('mandatory')
certEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1), ).setIndexNames((0, "BIANCA-BRICK-CERT-MIB", "certIndex"))
if mibBuilder.loadTexts: certEntry.setStatus('mandatory')
certIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certIndex.setStatus('mandatory')
certDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certDescription.setStatus('mandatory')
certIsCA = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certIsCA.setStatus('mandatory')
certForceTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certForceTrusted.setStatus('mandatory')
certNoCrls = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certNoCrls.setStatus('mandatory')
certSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certSerialNumber.setStatus('mandatory')
certSubjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certSubjectName.setStatus('mandatory')
certSubjectAltNames = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certSubjectAltNames.setStatus('mandatory')
certIssuerName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certIssuerName.setStatus('mandatory')
certIssuerAltNames = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certIssuerAltNames.setStatus('mandatory')
certValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certValidity.setStatus('mandatory')
certPubKeyInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certPubKeyInfo.setStatus('mandatory')
certKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certKeyId.setStatus('mandatory')
certPrivateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certPrivateKey.setStatus('mandatory')
certMD5Fingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certMD5Fingerprint.setStatus('mandatory')
certSHA1Fingerprint = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 3, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certSHA1Fingerprint.setStatus('mandatory')
certRevListTable = MibTable((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6), )
if mibBuilder.loadTexts: certRevListTable.setStatus('mandatory')
certRevListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1), ).setIndexNames((0, "BIANCA-BRICK-CERT-MIB", "certRevListIndex"))
if mibBuilder.loadTexts: certRevListEntry.setStatus('mandatory')
certRevListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certRevListIndex.setStatus('mandatory')
certRevListDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: certRevListDescription.setStatus('mandatory')
certRevListIssuerName = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certRevListIssuerName.setStatus('mandatory')
certRevListIssuerAltNames = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certRevListIssuerAltNames.setStatus('mandatory')
certRevListSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certRevListSerialNumber.setStatus('mandatory')
certRevListValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certRevListValidity.setStatus('mandatory')
certRevListNumCerts = MibTableColumn((1, 3, 6, 1, 4, 1, 272, 4, 26, 33, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: certRevListNumCerts.setStatus('mandatory')
mibBuilder.exportSymbols("BIANCA-BRICK-CERT-MIB", certValidity=certValidity, private=private, bintec=bintec, certNoCrls=certNoCrls, certIssuerAltNames=certIssuerAltNames, certServerEntry=certServerEntry, certPubKeyInfo=certPubKeyInfo, cert=cert, certRevListSerialNumber=certRevListSerialNumber, certGlobNegCachePeriod=certGlobNegCachePeriod, certGlobMaxCrlValidity=certGlobMaxCrlValidity, certRevListEntry=certRevListEntry, certGlobMaxCertValidity=certGlobMaxCertValidity, enterprises=enterprises, certServerName=certServerName, certRevListDescription=certRevListDescription, certTable=certTable, certDescription=certDescription, certMD5Fingerprint=certMD5Fingerprint, certKeyId=certKeyId, certServerType=certServerType, certIsCA=certIsCA, certSubjectAltNames=certSubjectAltNames, certRevListIssuerName=certRevListIssuerName, certGlobMaxPathLength=certGlobMaxPathLength, certForceTrusted=certForceTrusted, dod=dod, certRevListValidity=certRevListValidity, internet=internet, certGlobHttpProxy=certGlobHttpProxy, certPrivateKey=certPrivateKey, certServerTable=certServerTable, certEntry=certEntry, ipsec=ipsec, certGlobals=certGlobals, bibo=bibo, certGlobSocksServer=certGlobSocksServer, certSerialNumber=certSerialNumber, certRevListIndex=certRevListIndex, certRevListNumCerts=certRevListNumCerts, certIssuerName=certIssuerName, certServerPreference=certServerPreference, certIndex=certIndex, certSubjectName=certSubjectName, DisplayString=DisplayString, certSHA1Fingerprint=certSHA1Fingerprint, certRevListIssuerAltNames=certRevListIssuerAltNames, org=org, certGlobMaxRestarts=certGlobMaxRestarts, certRevListTable=certRevListTable, certServerUrl=certServerUrl, certGlobMaxCacheEntries=certGlobMaxCacheEntries)
