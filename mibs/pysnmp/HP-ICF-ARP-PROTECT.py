#
# PySNMP MIB module HP-ICF-ARP-PROTECT (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-ARP-PROTECT
# Produced by pysmi-0.3.4 at Mon Apr 29 19:20:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, Integer32, ModuleIdentity, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, Gauge32, IpAddress, Bits, Counter32, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "ModuleIdentity", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "Gauge32", "IpAddress", "Bits", "Counter32", "iso", "TimeTicks")
DisplayString, TextualConvention, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "TruthValue")
hpicfArpProtect = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37))
hpicfArpProtect.setRevisions(('2007-08-29 00:00', '2006-05-03 00:27',))
if mibBuilder.loadTexts: hpicfArpProtect.setLastUpdated('200708290000Z')
if mibBuilder.loadTexts: hpicfArpProtect.setOrganization('HP Networking')
hpicfArpProtectNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 0))
hpicfArpProtectErrantReply = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 0, 1)).setObjects(("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantCnt"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantSrcMac"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantSrcIpType"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantSrcIp"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantDestMac"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantDestIpType"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantDestIp"))
if mibBuilder.loadTexts: hpicfArpProtectErrantReply.setStatus('current')
hpicfArpProtectObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1))
hpicfArpProtectConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1))
hpicfArpProtectGlobalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 1))
hpicfArpProtectEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpProtectEnable.setStatus('current')
hpicfArpProtectVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpProtectVlanEnable.setStatus('current')
hpicfArpProtectValidation = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 1, 3), Bits().clone(namedValues=NamedValues(("srcMac", 0), ("dstMac", 1), ("ip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpProtectValidation.setStatus('current')
hpicfArpProtectErrantNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpProtectErrantNotifyEnable.setStatus('current')
hpicfArpProtectPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfArpProtectPortTable.setStatus('current')
hpicfArpProtectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfArpProtectPortEntry.setStatus('current')
hpicfArpProtectPortTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpProtectPortTrust.setStatus('current')
hpicfArpProtectStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2))
hpicfArpProtectVlanStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1), )
if mibBuilder.loadTexts: hpicfArpProtectVlanStatTable.setStatus('current')
hpicfArpProtectVlanStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1), ).setIndexNames((0, "HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatIndex"))
if mibBuilder.loadTexts: hpicfArpProtectVlanStatEntry.setStatus('current')
hpicfArpProtectVlanStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hpicfArpProtectVlanStatIndex.setStatus('current')
hpicfArpProtectVlanStatForwards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpProtectVlanStatForwards.setStatus('current')
hpicfArpProtectVlanStatBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadPkts.setStatus('current')
hpicfArpProtectVlanStatBadBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadBindings.setStatus('current')
hpicfArpProtectVlanStatBadSrcMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadSrcMacs.setStatus('current')
hpicfArpProtectVlanStatBadDstMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadDstMacs.setStatus('current')
hpicfArpProtectVlanStatBadIpAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadIpAddrs.setStatus('current')
hpicfArpProtectErrantCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantCnt.setStatus('current')
hpicfArpProtectErrantSrcMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantSrcMac.setStatus('current')
hpicfArpProtectErrantSrcIpType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 5), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantSrcIpType.setStatus('current')
hpicfArpProtectErrantSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 6), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantSrcIp.setStatus('current')
hpicfArpProtectErrantDestMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 7), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantDestMac.setStatus('current')
hpicfArpProtectErrantDestIpType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 8), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantDestIpType.setStatus('current')
hpicfArpProtectErrantDestIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 9), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantDestIp.setStatus('current')
hpicfArpProtectConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 2))
hpicfArpProtectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 2, 1))
hpicfArpProtectBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 2, 1, 1)).setObjects(("HP-ICF-ARP-PROTECT", "hpicfArpProtectEnable"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanEnable"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectValidation"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectPortTrust"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatForwards"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatBadPkts"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatBadBindings"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatBadSrcMacs"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatBadDstMacs"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatBadIpAddrs"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantSrcMac"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantSrcIp"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantDestMac"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantSrcIpType"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantDestIpType"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantDestIp"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantCnt"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpProtectBaseGroup = hpicfArpProtectBaseGroup.setStatus('current')
hpicfArpProtectionNotifications = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 2, 1, 2)).setObjects(("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantReply"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpProtectionNotifications = hpicfArpProtectionNotifications.setStatus('current')
hpicfArpProtectCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 2, 2))
hpicfArpProtectCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 2, 2, 1)).setObjects(("HP-ICF-ARP-PROTECT", "hpicfArpProtectBaseGroup"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectionNotifications"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpProtectCompliance = hpicfArpProtectCompliance.setStatus('current')
mibBuilder.exportSymbols("HP-ICF-ARP-PROTECT", hpicfArpProtectVlanStatBadDstMacs=hpicfArpProtectVlanStatBadDstMacs, hpicfArpProtectErrantSrcMac=hpicfArpProtectErrantSrcMac, hpicfArpProtectErrantDestIp=hpicfArpProtectErrantDestIp, hpicfArpProtectStatus=hpicfArpProtectStatus, hpicfArpProtectVlanStatBadSrcMacs=hpicfArpProtectVlanStatBadSrcMacs, hpicfArpProtectNotifications=hpicfArpProtectNotifications, hpicfArpProtectionNotifications=hpicfArpProtectionNotifications, hpicfArpProtectGroups=hpicfArpProtectGroups, hpicfArpProtectVlanStatIndex=hpicfArpProtectVlanStatIndex, hpicfArpProtectVlanStatBadBindings=hpicfArpProtectVlanStatBadBindings, hpicfArpProtectEnable=hpicfArpProtectEnable, PYSNMP_MODULE_ID=hpicfArpProtect, hpicfArpProtectValidation=hpicfArpProtectValidation, hpicfArpProtectVlanStatForwards=hpicfArpProtectVlanStatForwards, hpicfArpProtectErrantSrcIpType=hpicfArpProtectErrantSrcIpType, hpicfArpProtectErrantNotifyEnable=hpicfArpProtectErrantNotifyEnable, hpicfArpProtectCompliances=hpicfArpProtectCompliances, hpicfArpProtectBaseGroup=hpicfArpProtectBaseGroup, hpicfArpProtectErrantReply=hpicfArpProtectErrantReply, hpicfArpProtectConfig=hpicfArpProtectConfig, hpicfArpProtectVlanStatBadPkts=hpicfArpProtectVlanStatBadPkts, hpicfArpProtectErrantCnt=hpicfArpProtectErrantCnt, hpicfArpProtectGlobalCfg=hpicfArpProtectGlobalCfg, hpicfArpProtectVlanStatEntry=hpicfArpProtectVlanStatEntry, hpicfArpProtectObjects=hpicfArpProtectObjects, hpicfArpProtectErrantDestIpType=hpicfArpProtectErrantDestIpType, hpicfArpProtectErrantSrcIp=hpicfArpProtectErrantSrcIp, hpicfArpProtectVlanStatBadIpAddrs=hpicfArpProtectVlanStatBadIpAddrs, hpicfArpProtectCompliance=hpicfArpProtectCompliance, hpicfArpProtectConformance=hpicfArpProtectConformance, hpicfArpProtectPortTable=hpicfArpProtectPortTable, hpicfArpProtectVlanEnable=hpicfArpProtectVlanEnable, hpicfArpProtectPortTrust=hpicfArpProtectPortTrust, hpicfArpProtectVlanStatTable=hpicfArpProtectVlanStatTable, hpicfArpProtectErrantDestMac=hpicfArpProtectErrantDestMac, hpicfArpProtect=hpicfArpProtect, hpicfArpProtectPortEntry=hpicfArpProtectPortEntry)
