#
# PySNMP MIB module CPQPOWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CPQPOWER-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 18:12:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
compaq, = mibBuilder.importSymbols("CPQHOST-MIB", "compaq")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysDescr, sysName, sysLocation, sysContact = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr", "sysName", "sysLocation", "sysContact")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, iso, Unsigned32, Gauge32, NotificationType, Bits, IpAddress, TimeTicks, MibIdentifier, Counter64, ObjectIdentity, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "iso", "Unsigned32", "Gauge32", "NotificationType", "Bits", "IpAddress", "TimeTicks", "MibIdentifier", "Counter64", "ObjectIdentity", "NotificationType", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cpqPower = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165))
powerDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 1))
trapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 1, 1))
managementModuleIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 1, 2))
pdu = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 2))
pduIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 2, 1))
pduInput = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 2, 2))
pduOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 2, 3))
ups = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3))
upsIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 1))
upsBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 2))
upsInput = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 3))
upsOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 4))
upsBypass = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 5))
upsEnvironment = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 6))
upsTest = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 7))
upsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 8))
upsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 9))
upsRecep = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 10))
upsTopology = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 3, 11))
pdr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 4))
pdrIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 4, 1))
pdrPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 4, 2))
pdrBreaker = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 165, 4, 3))
trapCode = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapCode.setStatus('mandatory')
trapDescription = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDescription.setStatus('mandatory')
trapDeviceMgmtUrl = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDeviceMgmtUrl.setStatus('mandatory')
trapDeviceDetails = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDeviceDetails.setStatus('mandatory')
trapDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDeviceName.setStatus('mandatory')
trapCritical = NotificationType((1, 3, 6, 1, 4, 1, 232, 165) + (0,1)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"))
trapWarning = NotificationType((1, 3, 6, 1, 4, 1, 232, 165) + (0,2)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"))
trapInformation = NotificationType((1, 3, 6, 1, 4, 1, 232, 165) + (0,3)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"))
trapCleared = NotificationType((1, 3, 6, 1, 4, 1, 232, 165) + (0,4)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"))
trapTest = NotificationType((1, 3, 6, 1, 4, 1, 232, 165) + (0,5)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQPOWER-MIB", "trapCode"), ("CPQPOWER-MIB", "trapDescription"), ("CPQPOWER-MIB", "trapDeviceName"), ("CPQPOWER-MIB", "trapDeviceDetails"), ("CPQPOWER-MIB", "trapDeviceMgmtUrl"))
deviceTrapInitialization = NotificationType((1, 3, 6, 1, 4, 1, 232, 165) + (0,6)).setObjects(("SNMPv2-MIB", "sysName"), ("CPQPOWER-MIB", "deviceIdentName"))
deviceManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceManufacturer.setStatus('mandatory')
deviceModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceModel.setStatus('mandatory')
deviceFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceFirmwareVersion.setStatus('mandatory')
deviceHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceHardwareVersion.setStatus('mandatory')
deviceIdentName = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceIdentName.setStatus('mandatory')
devicePartNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePartNumber.setStatus('mandatory')
deviceSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSerialNumber.setStatus('mandatory')
deviceMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 1, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceMACAddress.setStatus('mandatory')
numOfPdu = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numOfPdu.setStatus('mandatory')
pduIdentTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2), )
if mibBuilder.loadTexts: pduIdentTable.setStatus('mandatory')
pduIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1), ).setIndexNames((0, "CPQPOWER-MIB", "pduIdentIndex"))
if mibBuilder.loadTexts: pduIdentEntry.setStatus('mandatory')
pduIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduIdentIndex.setStatus('mandatory')
pduName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pduName.setStatus('mandatory')
pduModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduModel.setStatus('mandatory')
pduManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduManufacturer.setStatus('mandatory')
pduFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduFirmwareVersion.setStatus('mandatory')
pduPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduPartNumber.setStatus('mandatory')
pduSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduSerialNumber.setStatus('mandatory')
pduStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduStatus.setStatus('mandatory')
pduControllable = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduControllable.setStatus('mandatory')
pduInputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1), )
if mibBuilder.loadTexts: pduInputTable.setStatus('mandatory')
pduInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1, 1), ).setIndexNames((0, "CPQPOWER-MIB", "pduInputIndex"))
if mibBuilder.loadTexts: pduInputEntry.setStatus('mandatory')
pduInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduInputIndex.setStatus('mandatory')
inputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputVoltage.setStatus('mandatory')
inputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputCurrent.setStatus('mandatory')
pduOutputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1), )
if mibBuilder.loadTexts: pduOutputTable.setStatus('mandatory')
pduOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1), ).setIndexNames((0, "CPQPOWER-MIB", "pduOutputIndex"))
if mibBuilder.loadTexts: pduOutputEntry.setStatus('mandatory')
pduOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutputIndex.setStatus('mandatory')
pduOutputLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutputLoad.setStatus('mandatory')
pduOutputHeat = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutputHeat.setStatus('mandatory')
pduOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutputPower.setStatus('mandatory')
pduOutputNumBreakers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pduOutputNumBreakers.setStatus('mandatory')
pduOutputBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2), )
if mibBuilder.loadTexts: pduOutputBreakerTable.setStatus('mandatory')
pduOutputBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1), ).setIndexNames((0, "CPQPOWER-MIB", "pduOutputIndex"), (0, "CPQPOWER-MIB", "breakerIndex"))
if mibBuilder.loadTexts: pduOutputBreakerEntry.setStatus('mandatory')
breakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerIndex.setStatus('mandatory')
breakerVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerVoltage.setStatus('mandatory')
breakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerCurrent.setStatus('mandatory')
breakerPercentLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerPercentLoad.setStatus('mandatory')
breakerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("overloadWarning", 2), ("overloadCritical", 3), ("voltageRangeWarning", 4), ("voltageRangeCritical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: breakerStatus.setStatus('mandatory')
upsIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentManufacturer.setStatus('mandatory')
upsIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentModel.setStatus('mandatory')
upsIdentSoftwareVersions = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentSoftwareVersions.setStatus('mandatory')
upsIdentOemCode = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsIdentOemCode.setStatus('mandatory')
upsBatTimeRemaining = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatTimeRemaining.setStatus('mandatory')
upsBatVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatVoltage.setStatus('mandatory')
upsBatCurrent = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatCurrent.setStatus('mandatory')
upsBatCapacity = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatCapacity.setStatus('mandatory')
upsBatteryAbmStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("batteryCharging", 1), ("batteryDischarging", 2), ("batteryFloating", 3), ("batteryResting", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBatteryAbmStatus.setStatus('mandatory')
upsInputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputFrequency.setStatus('mandatory')
upsInputLineBads = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputLineBads.setStatus('mandatory')
upsInputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputNumPhases.setStatus('mandatory')
upsInputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4), )
if mibBuilder.loadTexts: upsInputTable.setStatus('mandatory')
upsInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1), ).setIndexNames((0, "CPQPOWER-MIB", "upsInputPhase"))
if mibBuilder.loadTexts: upsInputEntry.setStatus('mandatory')
upsInputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputPhase.setStatus('mandatory')
upsInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputVoltage.setStatus('mandatory')
upsInputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputCurrent.setStatus('mandatory')
upsInputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputWatts.setStatus('mandatory')
upsInputSource = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("primaryUtility", 3), ("bypassFeed", 4), ("secondaryUtility", 5), ("generator", 6), ("flywheel", 7), ("fuelcell", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsInputSource.setStatus('mandatory')
upsOutputLoad = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputLoad.setStatus('mandatory')
upsOutputFrequency = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputFrequency.setStatus('mandatory')
upsOutputNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputNumPhases.setStatus('mandatory')
upsOutputTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4), )
if mibBuilder.loadTexts: upsOutputTable.setStatus('mandatory')
upsOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1), ).setIndexNames((0, "CPQPOWER-MIB", "upsOutputPhase"))
if mibBuilder.loadTexts: upsOutputEntry.setStatus('mandatory')
upsOutputPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputPhase.setStatus('mandatory')
upsOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputVoltage.setStatus('mandatory')
upsOutputCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputCurrent.setStatus('mandatory')
upsOutputWatts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputWatts.setStatus('mandatory')
upsOutputSource = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("normal", 3), ("bypass", 4), ("battery", 5), ("booster", 6), ("reducer", 7), ("parallelCapacity", 8), ("parallelRedundant", 9), ("highEfficiencyMode", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsOutputSource.setStatus('mandatory')
upsBypassFrequency = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassFrequency.setStatus('mandatory')
upsBypassNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassNumPhases.setStatus('mandatory')
upsBypassTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 3), )
if mibBuilder.loadTexts: upsBypassTable.setStatus('mandatory')
upsBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 3, 1), ).setIndexNames((0, "CPQPOWER-MIB", "upsBypassPhase"))
if mibBuilder.loadTexts: upsBypassEntry.setStatus('mandatory')
upsBypassPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassPhase.setStatus('mandatory')
upsBypassVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsBypassVoltage.setStatus('mandatory')
upsEnvAmbientTemp = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvAmbientTemp.setStatus('mandatory')
upsEnvAmbientLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvAmbientLowerLimit.setStatus('mandatory')
upsEnvAmbientUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvAmbientUpperLimit.setStatus('mandatory')
upsEnvAmbientHumidity = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvAmbientHumidity.setStatus('mandatory')
upsEnvRemoteTemp = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvRemoteTemp.setStatus('mandatory')
upsEnvRemoteHumidity = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvRemoteHumidity.setStatus('mandatory')
upsEnvNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsEnvNumContacts.setStatus('mandatory')
upsContactsTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8), )
if mibBuilder.loadTexts: upsContactsTable.setStatus('mandatory')
upsContactsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1), ).setIndexNames((0, "CPQPOWER-MIB", "upsContactIndex"))
if mibBuilder.loadTexts: upsContactsTableEntry.setStatus('mandatory')
upsContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsContactIndex.setStatus('mandatory')
upsContactType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("anyChange", 3), ("notUsed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsContactType.setStatus('mandatory')
upsContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("openWithNotice", 3), ("closedWithNotice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsContactState.setStatus('mandatory')
upsContactDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 8, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsContactDescr.setStatus('mandatory')
upsEnvRemoteTempLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvRemoteTempLowerLimit.setStatus('mandatory')
upsEnvRemoteTempUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvRemoteTempUpperLimit.setStatus('mandatory')
upsEnvRemoteHumidityLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvRemoteHumidityLowerLimit.setStatus('mandatory')
upsEnvRemoteHumidityUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsEnvRemoteHumidityUpperLimit.setStatus('mandatory')
upsTestBattery = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("startTest", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTestBattery.setStatus('mandatory')
upsTestBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("passed", 2), ("failed", 3), ("inProgress", 4), ("notSupported", 5), ("inhibited", 6), ("scheduled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTestBatteryStatus.setStatus('mandatory')
upsTestTrap = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("startTestTrap", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTestTrap.setStatus('mandatory')
upsControlOutputOffDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlOutputOffDelay.setStatus('mandatory')
upsControlOutputOnDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlOutputOnDelay.setStatus('mandatory')
upsControlOutputOffTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlOutputOffTrapDelay.setStatus('mandatory')
upsControlOutputOnTrapDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlOutputOnTrapDelay.setStatus('deprecated')
upsControlToBypassDelay = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsControlToBypassDelay.setStatus('mandatory')
upsLoadShedSecsWithRestart = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsLoadShedSecsWithRestart.setStatus('mandatory')
upsConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigOutputVoltage.setStatus('mandatory')
upsConfigInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigInputVoltage.setStatus('mandatory')
upsConfigOutputWatts = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigOutputWatts.setStatus('mandatory')
upsConfigOutputFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigOutputFreq.setStatus('mandatory')
upsConfigDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsConfigDateAndTime.setStatus('mandatory')
upsConfigLowOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigLowOutputVoltageLimit.setStatus('mandatory')
upsConfigHighOutputVoltageLimit = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsConfigHighOutputVoltageLimit.setStatus('mandatory')
upsNumReceptacles = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsNumReceptacles.setStatus('mandatory')
upsRecepTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2), )
if mibBuilder.loadTexts: upsRecepTable.setStatus('mandatory')
upsRecepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1), ).setIndexNames((0, "CPQPOWER-MIB", "upsRecepIndex"))
if mibBuilder.loadTexts: upsRecepEntry.setStatus('mandatory')
upsRecepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsRecepIndex.setStatus('mandatory')
upsRecepStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("pendingOff", 3), ("pendingOn", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsRecepStatus.setStatus('mandatory')
upsRecepOffDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRecepOffDelaySecs.setStatus('mandatory')
upsRecepOnDelaySecs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRecepOnDelaySecs.setStatus('mandatory')
upsRecepAutoOffDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRecepAutoOffDelay.setStatus('mandatory')
upsRecepAutoOnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRecepAutoOnDelay.setStatus('mandatory')
upsRecepShedSecsWithRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 3, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsRecepShedSecsWithRestart.setStatus('mandatory')
upsTopologyType = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTopologyType.setStatus('mandatory')
upsTopoMachineCode = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTopoMachineCode.setStatus('mandatory')
upsTopoUnitNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upsTopoUnitNumber.setStatus('mandatory')
upsTopoPowerStrategy = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 3, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("highAlert", 1), ("standard", 2), ("enableHighEfficiency", 3), ("immediateHighEfficiency", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upsTopoPowerStrategy.setStatus('mandatory')
pdrName = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdrName.setStatus('mandatory')
pdrModel = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrModel.setStatus('mandatory')
pdrManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrManufacturer.setStatus('mandatory')
pdrFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrFirmwareVersion.setStatus('mandatory')
pdrPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPartNumber.setStatus('mandatory')
pdrSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrSerialNumber.setStatus('mandatory')
pdrVARating = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrVARating.setStatus('mandatory')
pdrNominalOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrNominalOutputVoltage.setStatus('mandatory')
pdrNumPhases = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrNumPhases.setStatus('mandatory')
pdrNumPanels = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrNumPanels.setStatus('mandatory')
pdrNumBreakers = MibScalar((1, 3, 6, 1, 4, 1, 232, 165, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrNumBreakers.setStatus('mandatory')
pdrPanelTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1), )
if mibBuilder.loadTexts: pdrPanelTable.setStatus('mandatory')
pdrPanelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1), ).setIndexNames((0, "CPQPOWER-MIB", "pdrPanelIndex"))
if mibBuilder.loadTexts: pdrPanelEntry.setStatus('mandatory')
pdrPanelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelIndex.setStatus('mandatory')
pdrPanelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelFrequency.setStatus('mandatory')
pdrPanelPower = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelPower.setStatus('mandatory')
pdrPanelRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelRatedCurrent.setStatus('mandatory')
pdrPanelMonthlyKWH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelMonthlyKWH.setStatus('mandatory')
pdrPanelYearlyKWH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelYearlyKWH.setStatus('mandatory')
pdrPanelTotalKWH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelTotalKWH.setStatus('mandatory')
pdrPanelVoltageA = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelVoltageA.setStatus('mandatory')
pdrPanelVoltageB = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelVoltageB.setStatus('mandatory')
pdrPanelVoltageC = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelVoltageC.setStatus('mandatory')
pdrPanelCurrentA = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelCurrentA.setStatus('mandatory')
pdrPanelCurrentB = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelCurrentB.setStatus('mandatory')
pdrPanelCurrentC = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelCurrentC.setStatus('mandatory')
pdrPanelLoadA = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelLoadA.setStatus('mandatory')
pdrPanelLoadB = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelLoadB.setStatus('mandatory')
pdrPanelLoadC = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrPanelLoadC.setStatus('mandatory')
pdrBreakerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1), )
if mibBuilder.loadTexts: pdrBreakerTable.setStatus('mandatory')
pdrBreakerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1), ).setIndexNames((0, "CPQPOWER-MIB", "pdrPanelIndex"), (0, "CPQPOWER-MIB", "pdrBreakerIndex"))
if mibBuilder.loadTexts: pdrBreakerEntry.setStatus('mandatory')
pdrBreakerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerIndex.setStatus('mandatory')
pdrBreakerPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerPanel.setStatus('mandatory')
pdrBreakerNumPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerNumPosition.setStatus('mandatory')
pdrBreakerNumPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerNumPhases.setStatus('mandatory')
pdrBreakerNumSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerNumSequence.setStatus('mandatory')
pdrBreakerRatedCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerRatedCurrent.setStatus('mandatory')
pdrBreakerMonthlyKWH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerMonthlyKWH.setStatus('mandatory')
pdrBreakerYearlyKWH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerYearlyKWH.setStatus('mandatory')
pdrBreakerTotalKWH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerTotalKWH.setStatus('mandatory')
pdrBreakerCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerCurrent.setStatus('mandatory')
pdrBreakerCurrentPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerCurrentPercent.setStatus('mandatory')
pdrBreakerPower = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerPower.setStatus('mandatory')
pdrBreakerPercentWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerPercentWarning.setStatus('mandatory')
pdrBreakerPercentOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 165, 4, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdrBreakerPercentOverload.setStatus('mandatory')
mibBuilder.exportSymbols("CPQPOWER-MIB", upsBatVoltage=upsBatVoltage, trapDeviceName=trapDeviceName, upsTopoMachineCode=upsTopoMachineCode, pdrPanelCurrentC=pdrPanelCurrentC, pduInputEntry=pduInputEntry, trapWarning=trapWarning, upsIdentOemCode=upsIdentOemCode, pdrBreakerNumPosition=pdrBreakerNumPosition, pduOutputIndex=pduOutputIndex, upsConfigHighOutputVoltageLimit=upsConfigHighOutputVoltageLimit, upsTopoPowerStrategy=upsTopoPowerStrategy, pdrBreakerEntry=pdrBreakerEntry, upsBypassEntry=upsBypassEntry, pdrBreakerPercentWarning=pdrBreakerPercentWarning, trapCode=trapCode, breakerCurrent=breakerCurrent, upsConfig=upsConfig, pduInputTable=pduInputTable, upsRecepTable=upsRecepTable, pduStatus=pduStatus, pdrBreakerPercentOverload=pdrBreakerPercentOverload, pdrPanelVoltageB=pdrPanelVoltageB, pdrPanelYearlyKWH=pdrPanelYearlyKWH, upsTopology=upsTopology, inputVoltage=inputVoltage, upsOutputWatts=upsOutputWatts, upsNumReceptacles=upsNumReceptacles, upsRecepOffDelaySecs=upsRecepOffDelaySecs, pdrNominalOutputVoltage=pdrNominalOutputVoltage, upsTestBatteryStatus=upsTestBatteryStatus, cpqPower=cpqPower, breakerIndex=breakerIndex, pduInput=pduInput, trapDeviceDetails=trapDeviceDetails, upsIdentModel=upsIdentModel, upsControlOutputOnTrapDelay=upsControlOutputOnTrapDelay, upsInputSource=upsInputSource, upsInputVoltage=upsInputVoltage, pduIdentTable=pduIdentTable, upsControlToBypassDelay=upsControlToBypassDelay, pduOutputNumBreakers=pduOutputNumBreakers, upsInputLineBads=upsInputLineBads, trapInfo=trapInfo, upsBatteryAbmStatus=upsBatteryAbmStatus, upsControl=upsControl, upsEnvAmbientTemp=upsEnvAmbientTemp, pduOutputLoad=pduOutputLoad, upsEnvRemoteTemp=upsEnvRemoteTemp, breakerStatus=breakerStatus, upsRecepStatus=upsRecepStatus, pdrBreaker=pdrBreaker, pdrBreakerCurrent=pdrBreakerCurrent, pdrPanelVoltageA=pdrPanelVoltageA, upsBypass=upsBypass, numOfPdu=numOfPdu, pdu=pdu, pduControllable=pduControllable, pdrPanelPower=pdrPanelPower, pdrIdent=pdrIdent, upsControlOutputOffTrapDelay=upsControlOutputOffTrapDelay, upsTestBattery=upsTestBattery, pdrBreakerCurrentPercent=pdrBreakerCurrentPercent, pdrPanelVoltageC=pdrPanelVoltageC, pduInputIndex=pduInputIndex, pduOutputEntry=pduOutputEntry, upsInputWatts=upsInputWatts, pduSerialNumber=pduSerialNumber, upsBatCurrent=upsBatCurrent, upsConfigOutputVoltage=upsConfigOutputVoltage, upsConfigDateAndTime=upsConfigDateAndTime, upsRecepAutoOffDelay=upsRecepAutoOffDelay, upsRecepEntry=upsRecepEntry, upsEnvAmbientLowerLimit=upsEnvAmbientLowerLimit, pdrNumBreakers=pdrNumBreakers, upsBatTimeRemaining=upsBatTimeRemaining, trapCritical=trapCritical, upsContactState=upsContactState, upsOutputEntry=upsOutputEntry, pdrPartNumber=pdrPartNumber, pdrPanelFrequency=pdrPanelFrequency, upsBypassVoltage=upsBypassVoltage, pdrPanel=pdrPanel, pduManufacturer=pduManufacturer, pdrManufacturer=pdrManufacturer, devicePartNumber=devicePartNumber, breakerVoltage=breakerVoltage, upsRecepAutoOnDelay=upsRecepAutoOnDelay, upsOutput=upsOutput, deviceIdentName=deviceIdentName, upsControlOutputOnDelay=upsControlOutputOnDelay, upsInput=upsInput, pdr=pdr, deviceFirmwareVersion=deviceFirmwareVersion, upsBattery=upsBattery, pdrBreakerTable=pdrBreakerTable, upsTest=upsTest, breakerPercentLoad=breakerPercentLoad, upsOutputFrequency=upsOutputFrequency, upsEnvRemoteTempLowerLimit=upsEnvRemoteTempLowerLimit, upsEnvRemoteHumidity=upsEnvRemoteHumidity, managementModuleIdent=managementModuleIdent, inputCurrent=inputCurrent, pdrBreakerNumPhases=pdrBreakerNumPhases, upsEnvRemoteHumidityLowerLimit=upsEnvRemoteHumidityLowerLimit, pduOutputTable=pduOutputTable, upsBypassNumPhases=upsBypassNumPhases, pdrVARating=pdrVARating, pdrPanelTotalKWH=pdrPanelTotalKWH, pdrBreakerYearlyKWH=pdrBreakerYearlyKWH, pdrNumPanels=pdrNumPanels, pduOutputBreakerEntry=pduOutputBreakerEntry, upsBatCapacity=upsBatCapacity, pduIdentEntry=pduIdentEntry, pdrBreakerRatedCurrent=pdrBreakerRatedCurrent, upsInputEntry=upsInputEntry, deviceManufacturer=deviceManufacturer, upsRecepShedSecsWithRestart=upsRecepShedSecsWithRestart, pdrPanelIndex=pdrPanelIndex, deviceModel=deviceModel, pduName=pduName, upsContactDescr=upsContactDescr, pdrSerialNumber=pdrSerialNumber, pdrBreakerPanel=pdrBreakerPanel, upsInputFrequency=upsInputFrequency, pdrBreakerNumSequence=pdrBreakerNumSequence, pdrBreakerTotalKWH=pdrBreakerTotalKWH, upsOutputSource=upsOutputSource, upsOutputCurrent=upsOutputCurrent, upsContactsTableEntry=upsContactsTableEntry, upsBypassTable=upsBypassTable, upsBypassPhase=upsBypassPhase, pdrPanelEntry=pdrPanelEntry, upsInputTable=upsInputTable, upsConfigOutputWatts=upsConfigOutputWatts, upsContactsTable=upsContactsTable, pdrPanelTable=pdrPanelTable, pduModel=pduModel, deviceTrapInitialization=deviceTrapInitialization, upsControlOutputOffDelay=upsControlOutputOffDelay, pduIdent=pduIdent, pdrBreakerMonthlyKWH=pdrBreakerMonthlyKWH, upsTestTrap=upsTestTrap, upsEnvAmbientHumidity=upsEnvAmbientHumidity, pdrBreakerPower=pdrBreakerPower, upsIdent=upsIdent, upsEnvironment=upsEnvironment, upsTopologyType=upsTopologyType, upsIdentManufacturer=upsIdentManufacturer, powerDevice=powerDevice, pdrPanelCurrentB=pdrPanelCurrentB, trapDescription=trapDescription, upsConfigInputVoltage=upsConfigInputVoltage, pdrPanelLoadC=pdrPanelLoadC, pduOutputPower=pduOutputPower, trapInformation=trapInformation, pduPartNumber=pduPartNumber, pdrPanelMonthlyKWH=pdrPanelMonthlyKWH, upsConfigLowOutputVoltageLimit=upsConfigLowOutputVoltageLimit, upsInputPhase=upsInputPhase, upsConfigOutputFreq=upsConfigOutputFreq, upsInputNumPhases=upsInputNumPhases, pdrPanelCurrentA=pdrPanelCurrentA, upsRecepOnDelaySecs=upsRecepOnDelaySecs, pduIdentIndex=pduIdentIndex, pdrModel=pdrModel, pduOutput=pduOutput, ups=ups, upsEnvAmbientUpperLimit=upsEnvAmbientUpperLimit, pdrPanelRatedCurrent=pdrPanelRatedCurrent, upsContactIndex=upsContactIndex, deviceMACAddress=deviceMACAddress, trapTest=trapTest, upsEnvNumContacts=upsEnvNumContacts, pdrName=pdrName, upsContactType=upsContactType, pdrFirmwareVersion=pdrFirmwareVersion, deviceHardwareVersion=deviceHardwareVersion, upsOutputPhase=upsOutputPhase, trapCleared=trapCleared, upsRecep=upsRecep, upsIdentSoftwareVersions=upsIdentSoftwareVersions, upsEnvRemoteTempUpperLimit=upsEnvRemoteTempUpperLimit, pduFirmwareVersion=pduFirmwareVersion, upsInputCurrent=upsInputCurrent, upsTopoUnitNumber=upsTopoUnitNumber, upsEnvRemoteHumidityUpperLimit=upsEnvRemoteHumidityUpperLimit, pdrPanelLoadA=pdrPanelLoadA, upsRecepIndex=upsRecepIndex, deviceSerialNumber=deviceSerialNumber, pduOutputBreakerTable=pduOutputBreakerTable, pdrPanelLoadB=pdrPanelLoadB, pduOutputHeat=pduOutputHeat, pdrBreakerIndex=pdrBreakerIndex, upsOutputLoad=upsOutputLoad, upsOutputVoltage=upsOutputVoltage, upsOutputNumPhases=upsOutputNumPhases, upsLoadShedSecsWithRestart=upsLoadShedSecsWithRestart, pdrNumPhases=pdrNumPhases, upsBypassFrequency=upsBypassFrequency, upsOutputTable=upsOutputTable, trapDeviceMgmtUrl=trapDeviceMgmtUrl)
