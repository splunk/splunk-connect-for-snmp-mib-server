#
# PySNMP MIB module RADIO-BRIDGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADIO-BRIDGE-MIB
# Produced by pysmi-0.3.4 at Mon Apr 29 20:36:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
dot1agCfmMepEntry, = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMepEntry")
ieee8021QBridgeTpFdbEntry, = mibBuilder.importSymbols("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeTpFdbEntry")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, ObjectIdentity, enterprises, Gauge32, Integer32, TimeTicks, iso, Counter64, Unsigned32, ModuleIdentity, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "enterprises", "Gauge32", "Integer32", "TimeTicks", "iso", "Counter64", "Unsigned32", "ModuleIdentity", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
radioBridgeRoot = MibIdentifier((1, 3, 6, 1, 4, 1, 31926))
radioBridgeSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 1))
radioBridgeRf = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 2))
radioBridgeTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 3))
radioBridgeRefClock = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 4))
radioBridgeEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 5))
radioBridgeQosClassifier = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 6))
radioBridgeQosIngressQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 7))
radioBridgeQosEgressQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 8))
radioBridgeIp = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 9))
radioBridgeCfm = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 10))
radioBridgeAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 11))
radioBridgeScheduler = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 12))
radioBridgeEncryption = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 13))
radioBridgeMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 14))
radioBridgeEventConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 15))
radioBridgeSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 17))
radioBridgeLldp = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 19))
radioBridgeWred = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 20))
radioBridgeAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 21))
radioBridgeQuota = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 22))
radioBridgePcpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 23))
radioBridgeSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 24))
radioBridgeNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 25))
radioBridgeLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 26))
rbSysVoltage = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSysVoltage.setStatus('current')
rbSysTemperature = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSysTemperature.setStatus('current')
rbSysSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbSysSaveConfiguration.setStatus('current')
rbSysReset = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbSysReset.setStatus('current')
rbSwBank1Version = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSwBank1Version.setStatus('current')
rbSwBank2Version = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSwBank2Version.setStatus('current')
rbSwBank1Running = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noRunning", 1), ("running", 2), ("running-wait-accept", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSwBank1Running.setStatus('current')
rbSwBank2Running = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noRunning", 1), ("running", 2), ("running-wait-accept", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSwBank2Running.setStatus('current')
rbSwBank1ScheduledToRunNextReset = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSwBank1ScheduledToRunNextReset.setStatus('current')
rbSwBank2ScheduledToRunNextReset = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSwBank2ScheduledToRunNextReset.setStatus('current')
rbSystemUpAbsoluteTime = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSystemUpAbsoluteTime.setStatus('current')
rbSystemAuthenticationMode = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("radius", 2), ("tacacs", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbSystemAuthenticationMode.setStatus('current')
rbSystemAuthenticationSecret = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbSystemAuthenticationSecret.setStatus('current')
rbSystemCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 14), Bits().clone(namedValues=NamedValues(("nmsFtp", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbSystemCapabilities.setStatus('current')
rbDate = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbDate.setStatus('current')
rbTime = MibScalar((1, 3, 6, 1, 4, 1, 31926, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbTime.setStatus('current')
rbRfTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 2, 1), )
if mibBuilder.loadTexts: rbRfTable.setStatus('current')
rbRfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rfIndex"))
if mibBuilder.loadTexts: rbRfEntry.setStatus('current')
rfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rfIndex.setStatus('current')
rfNumOfChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfNumOfChannels.setStatus('current')
rfChannelWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfWidth250", 1), ("rfWidth500", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfChannelWidth.setStatus('current')
rfOperationalFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfOperationalFrequency.setStatus('current')
rfRole = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfMaster", 1), ("rfSlave", 2), ("rfAuto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfRole.setStatus('current')
rfModeSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfModeAdaptive", 1), ("rfModeStatic", 2), ("rfModeAlign", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfModeSelector.setStatus('current')
rfModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfModulationQPSK", 1), ("rfModulationQAM-16", 2), ("rfModulationQAM-64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfModulationType.setStatus('current')
rfNumOfSubchannels = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfNumOfSubchannels.setStatus('current')
rfNumOfRepetitions = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfNumOfRepetitions.setStatus('current')
rfFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfFEC-05", 1), ("rfFEC-067", 2), ("rfFEC-08", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfFecRate.setStatus('current')
rfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOperationalState.setStatus('current')
rfAverageCinr = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAverageCinr.setStatus('current')
rfAverageRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAverageRssi.setStatus('current')
rfTxSynthLock = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("txSynthUnlock", 0), ("txSynthLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxSynthLock.setStatus('current')
rfRxSynthLock = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rxSynthUnlock", 0), ("rxSynthLock", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxSynthLock.setStatus('current')
rfRxLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfRxLinkId.setStatus('current')
rfTxLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfTxLinkId.setStatus('current')
rfTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rf-sync", 1), ("rf-searchCountdown", 2), ("rf-foundCountdown", 3), ("rf-normal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTxState.setStatus('current')
rfRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rf-sync", 1), ("rf-searchCountdown", 2), ("rf-foundCountdown", 3), ("rf-normal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRxState.setStatus('current')
rfTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfTemperature.setStatus('current')
rfAsymmetry = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rf-asymmetry-25tx-75rx", 1), ("rf-asymmetry-50tx-50rx", 2), ("rf-asymmetry-75tx-25rx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAsymmetry.setStatus('current')
rfLowestModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfModulationQPSK", 1), ("rfModulationQAM-16", 2), ("rfModulationQAM-64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLowestModulationType.setStatus('current')
rfLowestNumOfSubchannels = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLowestNumOfSubchannels.setStatus('current')
rfLowestNumOfRepetitions = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLowestNumOfRepetitions.setStatus('current')
rfLowestFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfFEC-05", 1), ("rfFEC-067", 2), ("rfFEC-08", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLowestFecRate.setStatus('current')
rfTxMute = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfTxMute.setStatus('current')
rfRoleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfMaster", 1), ("rfSlave", 2), ("rfAuto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfRoleStatus.setStatus('current')
rfLoopModeSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfLoopDisabled", 1), ("rfLoopInternalMacSwap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopModeSelector.setStatus('current')
rfLoopModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfModulationQPSK", 1), ("rfModulationQAM-16", 2), ("rfModulationQAM-64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopModulationType.setStatus('current')
rfLoopNumOfSubchannels = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopNumOfSubchannels.setStatus('current')
rfLoopNumOfRepetitions = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopNumOfRepetitions.setStatus('current')
rfLoopFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rfFEC-05", 1), ("rfFEC-067", 2), ("rfFEC-08", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopFecRate.setStatus('current')
rfLoopTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopTimeout.setStatus('current')
rfTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-35, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfTxPower.setStatus('current')
rfTxMuteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfTxMuteTimeout.setStatus('current')
rfAlignmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rfAlignmentInactive", 0), ("rfAlignmentActive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfAlignmentStatus.setStatus('current')
rfLoopDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rfLoop-tx", 1), ("rfLoop-rx", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfLoopDirection.setStatus('current')
rbRfStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 2, 2), )
if mibBuilder.loadTexts: rbRfStatisticsTable.setStatus('current')
rbRfStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rfIndex"))
if mibBuilder.loadTexts: rbRfStatisticsEntry.setStatus('current')
rfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInOctets.setStatus('current')
rfInIdleOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInIdleOctets.setStatus('current')
rfInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInGoodOctets.setStatus('current')
rfInErroredOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInErroredOctets.setStatus('current')
rfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutOctets.setStatus('current')
rfOutIdleOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutIdleOctets.setStatus('current')
rfInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInPkts.setStatus('current')
rfInGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInGoodPkts.setStatus('current')
rfInErroredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInErroredPkts.setStatus('current')
rfInLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfInLostPkts.setStatus('current')
rfOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOutPkts.setStatus('current')
rfMinCinr = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfMinCinr.setStatus('current')
rfMaxCinr = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfMaxCinr.setStatus('current')
rfMinRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfMinRssi.setStatus('current')
rfMaxRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfMaxRssi.setStatus('current')
rfMinModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfMinModulation.setStatus('current')
rfMaxModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfMaxModulation.setStatus('current')
rfValid = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfValid.setStatus('current')
rfArqInLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfArqInLoss.setStatus('current')
rfArqOutLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfArqOutLoss.setStatus('current')
rbRfStatisticsDaysTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 2, 3), )
if mibBuilder.loadTexts: rbRfStatisticsDaysTable.setStatus('current')
rbRfStatisticsDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rfIndex"), (0, "RADIO-BRIDGE-MIB", "rfDayIndex"))
if mibBuilder.loadTexts: rbRfStatisticsDaysEntry.setStatus('current')
rfDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 50), Integer32())
if mibBuilder.loadTexts: rfDayIndex.setStatus('current')
rfDaysStart = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 51), TimeTicks())
if mibBuilder.loadTexts: rfDaysStart.setStatus('current')
rfDaysInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInOctets.setStatus('current')
rfDaysInIdleOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInIdleOctets.setStatus('current')
rfDaysInGoodOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInGoodOctets.setStatus('current')
rfDaysInErroredOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInErroredOctets.setStatus('current')
rfDaysOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysOutOctets.setStatus('current')
rfDaysOutIdleOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysOutIdleOctets.setStatus('current')
rfDaysInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInPkts.setStatus('current')
rfDaysInGoodPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInGoodPkts.setStatus('current')
rfDaysInErroredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInErroredPkts.setStatus('current')
rfDaysInLostPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysInLostPkts.setStatus('current')
rfDaysOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysOutPkts.setStatus('current')
rfDaysMinCinr = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysMinCinr.setStatus('current')
rfDaysMaxCinr = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysMaxCinr.setStatus('current')
rfDaysMinRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysMinRssi.setStatus('current')
rfDaysMaxRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysMaxRssi.setStatus('current')
rfDaysMinModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysMinModulation.setStatus('current')
rfDaysMaxModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysMaxModulation.setStatus('current')
rfDaysValid = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysValid.setStatus('current')
rfDaysArqInLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysArqInLoss.setStatus('current')
rfDaysArqOutLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfDaysArqOutLoss.setStatus('current')
rbRefClockTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 4, 1), )
if mibBuilder.loadTexts: rbRefClockTable.setStatus('current')
rbRefClockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rbRefClockEntry.setStatus('current')
refClockPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: refClockPrio.setStatus('current')
refClockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 0), ("active", 1), ("backup-1", 2), ("backup-2", 3), ("backup-3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: refClockStatus.setStatus('current')
refClockQualityLevelActual = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: refClockQualityLevelActual.setStatus('current')
refClockQualityLevelConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: refClockQualityLevelConfig.setStatus('current')
refClockQualityLevelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: refClockQualityLevelMode.setStatus('current')
refClockSsmCvid = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: refClockSsmCvid.setStatus('current')
refClockRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 4, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: refClockRowStatus.setStatus('current')
rbEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 5, 1), )
if mibBuilder.loadTexts: rbEthernetTable.setStatus('current')
rbEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rbEthernetEntry.setStatus('current')
ethernetAlarmPropagation = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("backward", 1), ("forward", 2), ("both-direct", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetAlarmPropagation.setStatus('current')
ethernetLoopMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("external", 1), ("external-mac-swap", 2), ("internal", 3), ("internal-mac-swap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetLoopMode.setStatus('current')
ethernetLoopTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetLoopTimeout.setStatus('current')
ethernetNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("provider-nni", 1), ("customer-uni", 2), ("customer-nni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetNetworkType.setStatus('current')
ethernetPcpWriteProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPcpWriteProfileId.setStatus('current')
ethernetClassifierMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("classifier-mode-dscp", 1), ("classifier-mode-pcp-dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetClassifierMode.setStatus('current')
rbClassifierCosTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 6, 1), )
if mibBuilder.loadTexts: rbClassifierCosTable.setStatus('current')
rbClassifierCosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "classifierCosId"))
if mibBuilder.loadTexts: rbClassifierCosEntry.setStatus('current')
classifierCosId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248)))
if mibBuilder.loadTexts: classifierCosId.setStatus('current')
classifierCosPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosPortList.setStatus('current')
classifierCosPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosPrecedence.setStatus('current')
classifierCosVidList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosVidList.setStatus('current')
classifierCosPcpList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosPcpList.setStatus('current')
classifierCosCos = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosCos.setStatus('current')
classifierCosIpCosType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip-cos-dscp", 1), ("ip-cos-mpls", 2), ("ip-cos-dont-care", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosIpCosType.setStatus('current')
classifierCosIpCosList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 8), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosIpCosList.setStatus('current')
classifierCosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosRowStatus.setStatus('current')
classifierCosPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("non-unicast", 2), ("all", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierCosPacketType.setStatus('current')
rbClassifierEvcTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 6, 2), )
if mibBuilder.loadTexts: rbClassifierEvcTable.setStatus('current')
rbClassifierEvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "classifierEvcId"))
if mibBuilder.loadTexts: rbClassifierEvcEntry.setStatus('current')
classifierEvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248)))
if mibBuilder.loadTexts: classifierEvcId.setStatus('current')
classifierEvcPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcPortList.setStatus('current')
classifierEvcPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcPrecedence.setStatus('current')
classifierEvcVidList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcVidList.setStatus('current')
classifierEvcPcpList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcPcpList.setStatus('current')
classifierEvcEvc = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcEvc.setStatus('current')
classifierEvcIpCosType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip-cos-dscp", 1), ("ip-cos-mpls", 2), ("ip-cos-dont-care", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcIpCosType.setStatus('current')
classifierEvcIpCosList = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 8), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcIpCosList.setStatus('current')
classifierEvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcRowStatus.setStatus('current')
classifierEvcPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 6, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("non-unicast", 2), ("all", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: classifierEvcPacketType.setStatus('current')
rbQosIngressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 7, 1), )
if mibBuilder.loadTexts: rbQosIngressQueueTable.setStatus('current')
rbQosIngressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 7, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "qosIngressQueueEvcId"), (0, "RADIO-BRIDGE-MIB", "qosIngressQueueCosId"))
if mibBuilder.loadTexts: rbQosIngressQueueEntry.setStatus('current')
qosIngressQueueEvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: qosIngressQueueEvcId.setStatus('current')
qosIngressQueueCosId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 7, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: qosIngressQueueCosId.setStatus('current')
qosIngressQueueMeterId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 7, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosIngressQueueMeterId.setStatus('current')
qosIngressQueueMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 7, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosIngressQueueMarking.setStatus('current')
qosIngressQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 7, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosIngressQueueRowStatus.setStatus('current')
rbQosEgressQueueTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 8, 1), )
if mibBuilder.loadTexts: rbQosEgressQueueTable.setStatus('current')
rbQosEgressQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "qosEgressQueuePortNum"), (0, "RADIO-BRIDGE-MIB", "qosEgressQueueCosId"))
if mibBuilder.loadTexts: rbQosEgressQueueEntry.setStatus('current')
qosEgressQueuePortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: qosEgressQueuePortNum.setStatus('current')
qosEgressQueueCosId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: qosEgressQueueCosId.setStatus('current')
qosEgressQueueWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEgressQueueWfqWeight.setStatus('current')
qosEgressQueueCir = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEgressQueueCir.setStatus('current')
qosEgressQueueMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("strictPriority", 1), ("wfg", 2), ("priority-shaper", 3), ("wfq-shaper", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosEgressQueueMode.setStatus('current')
qosEgressQueueColorDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("color-aware", 1), ("color-drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEgressQueueColorDrop.setStatus('current')
qosEgressDropMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 8, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEgressDropMode.setStatus('current')
rbIpTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 9, 1), )
if mibBuilder.loadTexts: rbIpTable.setStatus('current')
rbIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbIpIndex"))
if mibBuilder.loadTexts: rbIpEntry.setStatus('current')
rbIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rbIpIndex.setStatus('current')
rbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbIpAddress.setStatus('current')
rbIpPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbIpPrefixLen.setStatus('current')
rbIpVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbIpVlanId.setStatus('current')
rbIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbIpRowStatus.setStatus('current')
rbIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip-static", 1), ("ip-dhcp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbIpType.setStatus('current')
rbIpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 9, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbIpGateway.setStatus('current')
rbPeerMep = MibTable((1, 3, 6, 1, 4, 1, 31926, 10, 1), )
if mibBuilder.loadTexts: rbPeerMep.setStatus('current')
rbPeerMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbMdIndex"), (0, "RADIO-BRIDGE-MIB", "rbMaIndex"), (0, "RADIO-BRIDGE-MIB", "rbMepId"), (0, "RADIO-BRIDGE-MIB", "rbPeerMepId"))
if mibBuilder.loadTexts: rbPeerMepEntry.setStatus('current')
rbMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rbMdIndex.setStatus('current')
rbMaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: rbMaIndex.setStatus('current')
rbMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: rbMepId.setStatus('current')
rbPeerMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 4), Integer32())
if mibBuilder.loadTexts: rbPeerMepId.setStatus('current')
rbPeerMepFarEndLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 5), Counter64())
if mibBuilder.loadTexts: rbPeerMepFarEndLoss.setStatus('current')
rbPeerMepNearEndLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 6), Counter64())
if mibBuilder.loadTexts: rbPeerMepNearEndLoss.setStatus('current')
rbPeerMepTotalTxFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 7), Counter64())
if mibBuilder.loadTexts: rbPeerMepTotalTxFarEnd.setStatus('current')
rbPeerMepTotalTxNearEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 8), Counter64())
if mibBuilder.loadTexts: rbPeerMepTotalTxNearEnd.setStatus('current')
rbPeerMepFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 9), Counter64())
if mibBuilder.loadTexts: rbPeerMepFrameDelay.setStatus('current')
rbPeerMepFrameDelayVariation = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 1, 1, 10), Counter64())
if mibBuilder.loadTexts: rbPeerMepFrameDelayVariation.setStatus('current')
rbMep = MibTable((1, 3, 6, 1, 4, 1, 31926, 10, 2), )
if mibBuilder.loadTexts: rbMep.setStatus('current')
rbMepEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 10, 2, 1), )
dot1agCfmMepEntry.registerAugmentions(("RADIO-BRIDGE-MIB", "rbMepEntry"))
rbMepEntry.setIndexNames(*dot1agCfmMepEntry.getIndexNames())
if mibBuilder.loadTexts: rbMepEntry.setStatus('current')
rbMepAisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 2, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMepAisEnable.setStatus('current')
rbMepAisPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6))).clone(namedValues=NamedValues(("aisPeriod-1-sec", 4), ("aisPeriod-1-min", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMepAisPeriod.setStatus('current')
rbMepAisSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 2, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMepAisSuppress.setStatus('current')
rbMepAisLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMepAisLevel.setStatus('current')
rbMepAisDefects = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 10, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbMepAisDefects.setStatus('current')
class AlarmSeverity(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("no-alarm", 5))

class AlarmType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("link-down", 1), ("temperature-out-of-range", 2), ("synthesizer-unlock", 3), ("pow-low", 4), ("cfm-mep-defect", 5), ("loopback-active", 6), ("tx-mute", 7), ("ql-eec1-or-worse", 8), ("poe-incompatible", 9), ("rssi-out-of-range", 10), ("cinr-out-of-range", 11), ("lowest-modulation", 12))

rbAlarmsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 31926, 11, 1))
rbCurrentAlarmChangeCounter = MibScalar((1, 3, 6, 1, 4, 1, 31926, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmChangeCounter.setStatus('current')
rbCurrentAlarmMostSevere = MibScalar((1, 3, 6, 1, 4, 1, 31926, 11, 1, 2), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmMostSevere.setStatus('current')
rbCurrentAlarmLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 31926, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmLastIndex.setStatus('current')
rbCurrentAlarmLastTrapType = MibScalar((1, 3, 6, 1, 4, 1, 31926, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm-up", 1), ("alarm-down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmLastTrapType.setStatus('current')
rbCurrentAlarmSourceAddr = MibScalar((1, 3, 6, 1, 4, 1, 31926, 11, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmSourceAddr.setStatus('current')
rbCurrentAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 11, 2), )
if mibBuilder.loadTexts: rbCurrentAlarmTable.setStatus('current')
rbCurrentAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbCurrentAlarmIndex"))
if mibBuilder.loadTexts: rbCurrentAlarmEntry.setStatus('current')
rbCurrentAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmIndex.setStatus('current')
rbCurrentAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 2), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmType.setStatus('current')
rbCurrentAlarmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmTypeName.setStatus('current')
rbCurrentAlarmSource = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmSource.setStatus('current')
rbCurrentAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 5), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmSeverity.setStatus('current')
rbCurrentAlarmRaisedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmRaisedTime.setStatus('current')
rbCurrentAlarmDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmDesc.setStatus('current')
rbCurrentAlarmCause = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmCause.setStatus('current')
rbCurrentAlarmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmAction.setStatus('current')
rbCurrentAlarmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 11, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbCurrentAlarmIfIndex.setStatus('current')
trapModulationChange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 1)).setObjects(("RADIO-BRIDGE-MIB", "rfModulationType"), ("RADIO-BRIDGE-MIB", "rfNumOfSubchannels"), ("RADIO-BRIDGE-MIB", "rfNumOfRepetitions"), ("RADIO-BRIDGE-MIB", "rfFecRate"))
if mibBuilder.loadTexts: trapModulationChange.setStatus('current')
trapTemperatureOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 2))
if mibBuilder.loadTexts: trapTemperatureOutOfRange.setStatus('current')
trapTemperatureInRange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 3))
if mibBuilder.loadTexts: trapTemperatureInRange.setStatus('current')
trapSfpIn = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: trapSfpIn.setStatus('current')
trapSfpOut = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 5)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: trapSfpOut.setStatus('current')
trapRefClockChanged = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 6)).setObjects(("IF-MIB", "ifIndex"), ("RADIO-BRIDGE-MIB", "refClockQualityLevelActual"))
if mibBuilder.loadTexts: trapRefClockChanged.setStatus('current')
trapCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 11)).setObjects(("RADIO-BRIDGE-MIB", "rbCurrentAlarmChangeCounter"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmMostSevere"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmType"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmTypeName"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmSourceAddr"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmSource"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmSeverity"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmRaisedTime"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmIfIndex"), ("RADIO-BRIDGE-MIB", "rbCurrentAlarmLastTrapType"))
if mibBuilder.loadTexts: trapCurrentAlarm.setStatus('current')
trapLoopEnabled = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 12)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: trapLoopEnabled.setStatus('current')
trapLoopDisabled = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 13)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: trapLoopDisabled.setStatus('current')
trapTxMuteEnabled = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 14))
if mibBuilder.loadTexts: trapTxMuteEnabled.setStatus('current')
trapTxMuteDisabled = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 15))
if mibBuilder.loadTexts: trapTxMuteDisabled.setStatus('current')
trapCinrOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 19))
if mibBuilder.loadTexts: trapCinrOutOfRange.setStatus('current')
trapCinrInRange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 20))
if mibBuilder.loadTexts: trapCinrInRange.setStatus('current')
trapRssiOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 21))
if mibBuilder.loadTexts: trapRssiOutOfRange.setStatus('current')
trapRssiInRange = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 22))
if mibBuilder.loadTexts: trapRssiInRange.setStatus('current')
trapLowestModulation = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 23))
if mibBuilder.loadTexts: trapLowestModulation.setStatus('current')
trapNoLowestModulation = NotificationType((1, 3, 6, 1, 4, 1, 31926, 3, 24))
if mibBuilder.loadTexts: trapNoLowestModulation.setStatus('current')
rbSchedulerMode = MibScalar((1, 3, 6, 1, 4, 1, 31926, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("strictPriority", 1), ("wfg", 2), ("priority-shaper", 3), ("wfq-shaper", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbSchedulerMode.setStatus('current')
rbMeterTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 14, 1), )
if mibBuilder.loadTexts: rbMeterTable.setStatus('current')
rbMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbMeterId"))
if mibBuilder.loadTexts: rbMeterEntry.setStatus('current')
rbMeterId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 248)))
if mibBuilder.loadTexts: rbMeterId.setStatus('current')
rbMeterCir = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMeterCir.setStatus('current')
rbMeterCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9216, 50000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMeterCbs.setStatus('current')
rbMeterEir = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMeterEir.setStatus('current')
rbMeterEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(9216, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMeterEbs.setStatus('current')
rbMeterColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("color-aware", 1), ("color-blind", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMeterColorMode.setStatus('current')
rbMeterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 14, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbMeterRowStatus.setStatus('current')
rbEventConfigTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 15, 1), )
if mibBuilder.loadTexts: rbEventConfigTable.setStatus('current')
rbEventConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 15, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbEventConfigIndex"))
if mibBuilder.loadTexts: rbEventConfigEntry.setStatus('current')
rbEventConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 15, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rbEventConfigIndex.setStatus('current')
rbEventConfigId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 15, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbEventConfigId.setStatus('current')
rbEventConfigMask = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 15, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbEventConfigMask.setStatus('current')
rbRfEncryption = MibScalar((1, 3, 6, 1, 4, 1, 31926, 13, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbRfEncryption.setStatus('current')
rbRfStaticKey = MibScalar((1, 3, 6, 1, 4, 1, 31926, 13, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbRfStaticKey.setStatus('current')
rbRfAuthenticationString = MibScalar((1, 3, 6, 1, 4, 1, 31926, 13, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbRfAuthenticationString.setStatus('current')
rbAgentReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 31926, 17, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbAgentReadCommunity.setStatus('current')
rbAgentWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 31926, 17, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbAgentWriteCommunity.setStatus('current')
rbAgentSnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 31926, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("v2c", 2), ("v3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbAgentSnmpVersion.setStatus('current')
rbSysFileOperationTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 18), )
if mibBuilder.loadTexts: rbSysFileOperationTable.setStatus('current')
rbSysFileOperationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 18, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "fileSessionIndex"))
if mibBuilder.loadTexts: rbSysFileOperationEntry.setStatus('current')
fileSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: fileSessionIndex.setStatus('current')
fileSessionCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("copySwFromRemote", 1), ("copyLicenseFromRemote", 2), ("copyFileFromRemoteToLocal", 3), ("copyFileFromLocalToRemote", 4), ("acceptSw", 5), ("runSw", 6), ("copyDirToRemote", 7), ("copyEventLog", 9), ("copyUserActivityLog", 10), ("runScript", 11), ("copyInventory", 12), ("copyStatsHistory", 13)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionCommand.setStatus('current')
fileSessionLocalParams = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionLocalParams.setStatus('current')
fileSessionRemotePath = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionRemotePath.setStatus('current')
fileSessionServer = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionServer.setStatus('current')
fileSessionUser = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionUser.setStatus('current')
fileSessionPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionPassword.setStatus('current')
fileSessionResult = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSessionResult.setStatus('current')
fileSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("terminated-ok", 2), ("terminated-error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSessionState.setStatus('current')
fileSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fileSessionRowStatus.setStatus('current')
fileSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 18, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ftp", 1), ("sftp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSessionProtocol.setStatus('current')
rbLldpPortExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 19, 1), )
if mibBuilder.loadTexts: rbLldpPortExtensionTable.setStatus('current')
rbLldpPortExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 19, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbLldpPortIfIndex"), (0, "RADIO-BRIDGE-MIB", "rbLldpPortDestAddressIndex"))
if mibBuilder.loadTexts: rbLldpPortExtensionEntry.setStatus('current')
rbLldpPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 19, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rbLldpPortIfIndex.setStatus('current')
rbLldpPortDestAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 19, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: rbLldpPortDestAddressIndex.setStatus('current')
rbLldpPortVid = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 19, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbLldpPortVid.setStatus('current')
rbWredTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 20, 1), )
if mibBuilder.loadTexts: rbWredTable.setStatus('current')
rbWredEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbWredId"))
if mibBuilder.loadTexts: rbWredEntry.setStatus('current')
rbWredId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rbWredId.setStatus('current')
rbWredNfactor = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredNfactor.setStatus('current')
rbWredMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredMinThreshold.setStatus('current')
rbWredMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredMaxThreshold.setStatus('current')
rbWredProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredProbability.setStatus('current')
rbWredMinThresholdYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredMinThresholdYellow.setStatus('current')
rbWredMaxThresholdYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredMaxThresholdYellow.setStatus('current')
rbWredProbabilityYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredProbabilityYellow.setStatus('current')
rbWredRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 20, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbWredRowStatus.setStatus('current')
rbAuthServersTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 21, 1), )
if mibBuilder.loadTexts: rbAuthServersTable.setStatus('current')
rbAuthServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 21, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbAuthServerId"))
if mibBuilder.loadTexts: rbAuthServersEntry.setStatus('current')
rbAuthServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: rbAuthServerId.setStatus('current')
rbAuthServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 21, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbAuthServerIpAddress.setStatus('current')
rbAuthServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 21, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbAuthServerPort.setStatus('current')
rbAuthServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 21, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbAuthServerRowStatus.setStatus('current')
rbFdbQuotaTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 22, 1), )
if mibBuilder.loadTexts: rbFdbQuotaTable.setStatus('current')
rbFdbQuotaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbFdbQuotaId"))
if mibBuilder.loadTexts: rbFdbQuotaEntry.setStatus('current')
rbFdbQuotaId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: rbFdbQuotaId.setStatus('current')
rbFdbQuotaSize = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbFdbQuotaSize.setStatus('current')
rbFdbQuotaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbFdbQuotaRowStatus.setStatus('current')
rbFdbQuotaMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFdbQuotaMaxSize.setStatus('current')
rbFdbQuotaUsedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFdbQuotaUsedEntries.setStatus('current')
rbFdbQuotaStaticEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFdbQuotaStaticEntries.setStatus('current')
rbFdbQuotaDynamicEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFdbQuotaDynamicEntries.setStatus('current')
rbFdbQuotaUnusedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbFdbQuotaUnusedEntries.setStatus('current')
rbFdbEvcQuotaTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 22, 2), )
if mibBuilder.loadTexts: rbFdbEvcQuotaTable.setStatus('current')
rbFdbEvcQuotaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 22, 2, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbFdbEvcQuotaId"))
if mibBuilder.loadTexts: rbFdbEvcQuotaEntry.setStatus('current')
rbFdbEvcQuotaId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: rbFdbEvcQuotaId.setStatus('current')
rbRefEvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbRefEvcId.setStatus('current')
rbRefFdbQuotaId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbRefFdbQuotaId.setStatus('current')
rbFdbEvcQuotaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbFdbEvcQuotaRowStatus.setStatus('current')
rbFdbExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 22, 3), )
if mibBuilder.loadTexts: rbFdbExtensionTable.setStatus('current')
rbFdbExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 22, 3, 1), )
ieee8021QBridgeTpFdbEntry.registerAugmentions(("RADIO-BRIDGE-MIB", "rbFdbExtensionEntry"))
rbFdbExtensionEntry.setIndexNames(*ieee8021QBridgeTpFdbEntry.getIndexNames())
if mibBuilder.loadTexts: rbFdbExtensionEntry.setStatus('current')
rbRefExtFdbQuotaId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 22, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbRefExtFdbQuotaId.setStatus('current')
rbPcpWriteProfileTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 23, 1), )
if mibBuilder.loadTexts: rbPcpWriteProfileTable.setStatus('current')
rbPcpWriteProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 23, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbPcpWriteProfileId"))
if mibBuilder.loadTexts: rbPcpWriteProfileEntry.setStatus('current')
rbPcpWriteProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: rbPcpWriteProfileId.setStatus('current')
rbPcpWriteProfilePcp = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 23, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbPcpWriteProfilePcp.setStatus('current')
rbPcpWriteProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 23, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbPcpWriteProfileRowStatus.setStatus('current')
rbSyslogTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 24, 1), )
if mibBuilder.loadTexts: rbSyslogTable.setStatus('current')
rbSyslogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 24, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbSyslogId"))
if mibBuilder.loadTexts: rbSyslogEntry.setStatus('current')
rbSyslogId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 24, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rbSyslogId.setStatus('current')
rbSyslogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 24, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbSyslogServerIp.setStatus('current')
rbSyslogRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 24, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbSyslogRowStatus.setStatus('current')
rbNtpTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 25, 1), )
if mibBuilder.loadTexts: rbNtpTable.setStatus('current')
rbNtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 25, 1, 1), ).setIndexNames((0, "RADIO-BRIDGE-MIB", "rbNtpId"))
if mibBuilder.loadTexts: rbNtpEntry.setStatus('current')
rbNtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 25, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rbNtpId.setStatus('current')
rbNtpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 25, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbNtpServerIp.setStatus('current')
rbNtpSecondaryServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 25, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbNtpSecondaryServerIp.setStatus('current')
rbNtpTmz = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 25, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 14))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbNtpTmz.setStatus('current')
rbNtpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 25, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbNtpRowStatus.setStatus('current')
rbLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 31926, 26, 1), )
if mibBuilder.loadTexts: rbLicenseTable.setStatus('current')
rbLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 31926, 26, 1, 1), ).setIndexNames((1, "RADIO-BRIDGE-MIB", "rbLicenseId"))
if mibBuilder.loadTexts: rbLicenseEntry.setStatus('current')
rbLicenseId = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 26, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rbLicenseId.setStatus('current')
rbLicenseCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 26, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbLicenseCurrentValue.setStatus('current')
rbLicenseMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 31926, 26, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbLicenseMaxValue.setStatus('current')
mibBuilder.exportSymbols("RADIO-BRIDGE-MIB", rbMeterTable=rbMeterTable, rbCurrentAlarmEntry=rbCurrentAlarmEntry, rbAuthServerRowStatus=rbAuthServerRowStatus, rfAverageCinr=rfAverageCinr, rbClassifierCosEntry=rbClassifierCosEntry, rfRxState=rfRxState, qosEgressDropMode=qosEgressDropMode, radioBridgeCfm=radioBridgeCfm, classifierCosVidList=classifierCosVidList, radioBridgeEthernet=radioBridgeEthernet, fileSessionIndex=fileSessionIndex, rbNtpEntry=rbNtpEntry, trapTxMuteEnabled=trapTxMuteEnabled, classifierCosIpCosType=classifierCosIpCosType, fileSessionProtocol=fileSessionProtocol, rfTxLinkId=rfTxLinkId, rbRfStatisticsEntry=rbRfStatisticsEntry, classifierEvcVidList=classifierEvcVidList, radioBridgeScheduler=radioBridgeScheduler, trapNoLowestModulation=trapNoLowestModulation, rbMepAisSuppress=rbMepAisSuppress, rbSystemAuthenticationMode=rbSystemAuthenticationMode, rbEventConfigTable=rbEventConfigTable, rbTime=rbTime, qosEgressQueueCir=qosEgressQueueCir, rbFdbQuotaMaxSize=rbFdbQuotaMaxSize, rfLoopNumOfRepetitions=rfLoopNumOfRepetitions, rbClassifierEvcTable=rbClassifierEvcTable, rbWredEntry=rbWredEntry, rbFdbQuotaUnusedEntries=rbFdbQuotaUnusedEntries, rfMinCinr=rfMinCinr, rbFdbExtensionEntry=rbFdbExtensionEntry, rfLoopNumOfSubchannels=rfLoopNumOfSubchannels, rbCurrentAlarmSeverity=rbCurrentAlarmSeverity, rfModeSelector=rfModeSelector, rbCurrentAlarmCause=rbCurrentAlarmCause, trapTemperatureInRange=trapTemperatureInRange, rfDaysInPkts=rfDaysInPkts, rfTxMuteTimeout=rfTxMuteTimeout, radioBridgeIp=radioBridgeIp, rbRfTable=rbRfTable, rbRefEvcId=rbRefEvcId, rbWredMaxThreshold=rbWredMaxThreshold, classifierCosPcpList=classifierCosPcpList, rbIpPrefixLen=rbIpPrefixLen, rbNtpSecondaryServerIp=rbNtpSecondaryServerIp, radioBridgeTraps=radioBridgeTraps, rfInPkts=rfInPkts, rfInErroredOctets=rfInErroredOctets, ethernetNetworkType=ethernetNetworkType, classifierCosRowStatus=classifierCosRowStatus, rfNumOfSubchannels=rfNumOfSubchannels, rbSyslogRowStatus=rbSyslogRowStatus, rbSwBank2Running=rbSwBank2Running, radioBridgeEncryption=radioBridgeEncryption, rfLoopFecRate=rfLoopFecRate, rfDaysInErroredOctets=rfDaysInErroredOctets, rfTxState=rfTxState, rbSyslogServerIp=rbSyslogServerIp, AlarmSeverity=AlarmSeverity, rbIpGateway=rbIpGateway, rbCurrentAlarmTable=rbCurrentAlarmTable, qosEgressQueueCosId=qosEgressQueueCosId, radioBridgeRf=radioBridgeRf, rbEthernetTable=rbEthernetTable, rbNtpServerIp=rbNtpServerIp, rfDaysInGoodPkts=rfDaysInGoodPkts, rbSystemCapabilities=rbSystemCapabilities, rbRefClockTable=rbRefClockTable, rbLldpPortVid=rbLldpPortVid, rbMepAisEnable=rbMepAisEnable, rbPeerMepTotalTxFarEnd=rbPeerMepTotalTxFarEnd, rfDaysMinRssi=rfDaysMinRssi, rbRfEntry=rbRfEntry, rfDaysMinCinr=rfDaysMinCinr, rbFdbEvcQuotaRowStatus=rbFdbEvcQuotaRowStatus, rbPcpWriteProfileId=rbPcpWriteProfileId, rfDaysOutPkts=rfDaysOutPkts, rbWredProbabilityYellow=rbWredProbabilityYellow, rbFdbEvcQuotaTable=rbFdbEvcQuotaTable, rbSwBank1ScheduledToRunNextReset=rbSwBank1ScheduledToRunNextReset, rfDaysOutOctets=rfDaysOutOctets, rfTxPower=rfTxPower, rbWredRowStatus=rbWredRowStatus, rbFdbEvcQuotaId=rbFdbEvcQuotaId, rbPeerMepId=rbPeerMepId, rbMdIndex=rbMdIndex, classifierEvcId=classifierEvcId, rbSysTemperature=rbSysTemperature, rbMepId=rbMepId, fileSessionCommand=fileSessionCommand, rfMaxCinr=rfMaxCinr, rbSwBank2ScheduledToRunNextReset=rbSwBank2ScheduledToRunNextReset, rbLicenseCurrentValue=rbLicenseCurrentValue, rfNumOfRepetitions=rfNumOfRepetitions, rbSchedulerMode=rbSchedulerMode, rbCurrentAlarmSource=rbCurrentAlarmSource, rfOperationalState=rfOperationalState, rbPcpWriteProfileEntry=rbPcpWriteProfileEntry, rbPeerMepFrameDelay=rbPeerMepFrameDelay, rbClassifierCosTable=rbClassifierCosTable, classifierEvcPrecedence=classifierEvcPrecedence, fileSessionRowStatus=fileSessionRowStatus, rbPeerMepEntry=rbPeerMepEntry, rfTxSynthLock=rfTxSynthLock, rbMeterCir=rbMeterCir, trapTemperatureOutOfRange=trapTemperatureOutOfRange, rbEventConfigEntry=rbEventConfigEntry, rbFdbEvcQuotaEntry=rbFdbEvcQuotaEntry, fileSessionUser=fileSessionUser, rfDaysArqInLoss=rfDaysArqInLoss, rfDaysMinModulation=rfDaysMinModulation, rbNtpId=rbNtpId, radioBridgeNtp=radioBridgeNtp, rfInLostPkts=rfInLostPkts, rbEthernetEntry=rbEthernetEntry, trapCurrentAlarm=trapCurrentAlarm, rbFdbQuotaStaticEntries=rbFdbQuotaStaticEntries, rbCurrentAlarmLastTrapType=rbCurrentAlarmLastTrapType, rbFdbQuotaEntry=rbFdbQuotaEntry, rfRole=rfRole, AlarmType=AlarmType, rbMeterEbs=rbMeterEbs, radioBridgeQosEgressQueue=radioBridgeQosEgressQueue, rbAuthServerId=rbAuthServerId, rbPcpWriteProfilePcp=rbPcpWriteProfilePcp, rfLowestNumOfRepetitions=rfLowestNumOfRepetitions, radioBridgeRoot=radioBridgeRoot, rbAuthServerPort=rbAuthServerPort, qosIngressQueueRowStatus=qosIngressQueueRowStatus, rfLoopDirection=rfLoopDirection, rbLldpPortIfIndex=rbLldpPortIfIndex, rbNtpTable=rbNtpTable, radioBridgeMeter=radioBridgeMeter, rfDaysMaxRssi=rfDaysMaxRssi, rfDaysInIdleOctets=rfDaysInIdleOctets, rbRfStatisticsTable=rbRfStatisticsTable, rbWredNfactor=rbWredNfactor, rfDaysMaxModulation=rfDaysMaxModulation, rbFdbExtensionTable=rbFdbExtensionTable, classifierCosCos=classifierCosCos, trapRssiOutOfRange=trapRssiOutOfRange, rbSysFileOperationEntry=rbSysFileOperationEntry, rfDaysValid=rfDaysValid, ethernetLoopTimeout=ethernetLoopTimeout, fileSessionState=fileSessionState, fileSessionRemotePath=fileSessionRemotePath, radioBridgeSyslog=radioBridgeSyslog, rbAuthServersTable=rbAuthServersTable, rfDaysInErroredPkts=rfDaysInErroredPkts, fileSessionPassword=fileSessionPassword, rbCurrentAlarmMostSevere=rbCurrentAlarmMostSevere, rbFdbQuotaRowStatus=rbFdbQuotaRowStatus, rbIpIndex=rbIpIndex, rfDaysOutIdleOctets=rfDaysOutIdleOctets, rbCurrentAlarmDesc=rbCurrentAlarmDesc, rbCurrentAlarmIfIndex=rbCurrentAlarmIfIndex, rbMeterColorMode=rbMeterColorMode, rbMeterEir=rbMeterEir, rbSysVoltage=rbSysVoltage, rfNumOfChannels=rfNumOfChannels, classifierCosPrecedence=classifierCosPrecedence, classifierCosPortList=classifierCosPortList, trapModulationChange=trapModulationChange, rbPcpWriteProfileRowStatus=rbPcpWriteProfileRowStatus, classifierEvcIpCosList=classifierEvcIpCosList, rbFdbQuotaUsedEntries=rbFdbQuotaUsedEntries, rbMeterCbs=rbMeterCbs, rfOutIdleOctets=rfOutIdleOctets, rbClassifierEvcEntry=rbClassifierEvcEntry, radioBridgeQuota=radioBridgeQuota, rfLowestFecRate=rfLowestFecRate, refClockStatus=refClockStatus, rbMeterRowStatus=rbMeterRowStatus, rbSyslogTable=rbSyslogTable, qosIngressQueueEvcId=qosIngressQueueEvcId, rbLicenseEntry=rbLicenseEntry, rfDaysInOctets=rfDaysInOctets, rbLicenseMaxValue=rbLicenseMaxValue, radioBridgeQosIngressQueue=radioBridgeQosIngressQueue, rbIpType=rbIpType, fileSessionServer=fileSessionServer, radioBridgeAuthentication=radioBridgeAuthentication, trapSfpIn=trapSfpIn, rfLowestModulationType=rfLowestModulationType, rfDaysArqOutLoss=rfDaysArqOutLoss, fileSessionResult=fileSessionResult, fileSessionLocalParams=fileSessionLocalParams, rfArqOutLoss=rfArqOutLoss, radioBridgeEventConfig=radioBridgeEventConfig, rbEventConfigIndex=rbEventConfigIndex, rbMepEntry=rbMepEntry, rbCurrentAlarmTypeName=rbCurrentAlarmTypeName, rbCurrentAlarmSourceAddr=rbCurrentAlarmSourceAddr, rfLowestNumOfSubchannels=rfLowestNumOfSubchannels, rfFecRate=rfFecRate, rbAgentWriteCommunity=rbAgentWriteCommunity, trapLoopDisabled=trapLoopDisabled, classifierEvcRowStatus=classifierEvcRowStatus, rbQosEgressQueueEntry=rbQosEgressQueueEntry, classifierCosIpCosList=classifierCosIpCosList, trapTxMuteDisabled=trapTxMuteDisabled, trapRssiInRange=trapRssiInRange, rbAuthServersEntry=rbAuthServersEntry, rfMinRssi=rfMinRssi, rbSysFileOperationTable=rbSysFileOperationTable, rfDaysInLostPkts=rfDaysInLostPkts, rbQosEgressQueueTable=rbQosEgressQueueTable, radioBridgePcpProfile=radioBridgePcpProfile, radioBridgeLldp=radioBridgeLldp, rbSyslogId=rbSyslogId, trapSfpOut=trapSfpOut, ethernetAlarmPropagation=ethernetAlarmPropagation, refClockQualityLevelActual=refClockQualityLevelActual, rfLoopTimeout=rfLoopTimeout, qosIngressQueueMarking=qosIngressQueueMarking, qosIngressQueueMeterId=qosIngressQueueMeterId, rbRfStatisticsDaysTable=rbRfStatisticsDaysTable, rbSwBank1Version=rbSwBank1Version, rbFdbQuotaTable=rbFdbQuotaTable, rfRxLinkId=rfRxLinkId, rbMepAisPeriod=rbMepAisPeriod, rbCurrentAlarmAction=rbCurrentAlarmAction, rbRfStaticKey=rbRfStaticKey, rfTxMute=rfTxMute, rfLoopModulationType=rfLoopModulationType, rbWredProbability=rbWredProbability, ethernetClassifierMode=ethernetClassifierMode, rbCurrentAlarmIndex=rbCurrentAlarmIndex, rbNtpRowStatus=rbNtpRowStatus, rfArqInLoss=rfArqInLoss, rbRefClockEntry=rbRefClockEntry, rbCurrentAlarmChangeCounter=rbCurrentAlarmChangeCounter, rbAlarmsCommon=rbAlarmsCommon, rfRoleStatus=rfRoleStatus, radioBridgeLicense=radioBridgeLicense, rbCurrentAlarmLastIndex=rbCurrentAlarmLastIndex, rfValid=rfValid, radioBridgeSystem=radioBridgeSystem, rbAgentSnmpVersion=rbAgentSnmpVersion, rbMaIndex=rbMaIndex, rbLldpPortExtensionTable=rbLldpPortExtensionTable, rbMeterEntry=rbMeterEntry, classifierEvcPortList=classifierEvcPortList, rbRfEncryption=rbRfEncryption, rfInGoodOctets=rfInGoodOctets, rbLldpPortDestAddressIndex=rbLldpPortDestAddressIndex, radioBridgeQosClassifier=radioBridgeQosClassifier, rbMeterId=rbMeterId, rbIpTable=rbIpTable, classifierCosPacketType=classifierCosPacketType, classifierEvcIpCosType=classifierEvcIpCosType, trapLoopEnabled=trapLoopEnabled, rfDaysStart=rfDaysStart)
mibBuilder.exportSymbols("RADIO-BRIDGE-MIB", rbIpAddress=rbIpAddress, rbPeerMepTotalTxNearEnd=rbPeerMepTotalTxNearEnd, rbSysReset=rbSysReset, radioBridgeRefClock=radioBridgeRefClock, rfInIdleOctets=rfInIdleOctets, rbPcpWriteProfileTable=rbPcpWriteProfileTable, qosEgressQueueMode=qosEgressQueueMode, rbPeerMep=rbPeerMep, rfInOctets=rfInOctets, rbDate=rbDate, rbWredTable=rbWredTable, rfInGoodPkts=rfInGoodPkts, refClockQualityLevelMode=refClockQualityLevelMode, rfDaysMaxCinr=rfDaysMaxCinr, refClockPrio=refClockPrio, refClockQualityLevelConfig=refClockQualityLevelConfig, refClockSsmCvid=refClockSsmCvid, classifierEvcEvc=classifierEvcEvc, rbWredMinThreshold=rbWredMinThreshold, rbWredId=rbWredId, rfLoopModeSelector=rfLoopModeSelector, ethernetPcpWriteProfileId=ethernetPcpWriteProfileId, rbSystemAuthenticationSecret=rbSystemAuthenticationSecret, rbCurrentAlarmType=rbCurrentAlarmType, classifierCosId=classifierCosId, classifierEvcPacketType=classifierEvcPacketType, rbPeerMepFarEndLoss=rbPeerMepFarEndLoss, rfInErroredPkts=rfInErroredPkts, qosEgressQueueColorDrop=qosEgressQueueColorDrop, rbPeerMepNearEndLoss=rbPeerMepNearEndLoss, rbFdbQuotaSize=rbFdbQuotaSize, rbQosIngressQueueEntry=rbQosIngressQueueEntry, radioBridgeSnmp=radioBridgeSnmp, rbIpRowStatus=rbIpRowStatus, rbWredMinThresholdYellow=rbWredMinThresholdYellow, rbSyslogEntry=rbSyslogEntry, rbMep=rbMep, rfModulationType=rfModulationType, refClockRowStatus=refClockRowStatus, qosIngressQueueCosId=qosIngressQueueCosId, rfIndex=rfIndex, rbLldpPortExtensionEntry=rbLldpPortExtensionEntry, rfAverageRssi=rfAverageRssi, rfMaxModulation=rfMaxModulation, rbLicenseId=rbLicenseId, qosEgressQueueWfqWeight=qosEgressQueueWfqWeight, rbRefExtFdbQuotaId=rbRefExtFdbQuotaId, rbAuthServerIpAddress=rbAuthServerIpAddress, rbLicenseTable=rbLicenseTable, rbRefFdbQuotaId=rbRefFdbQuotaId, trapCinrOutOfRange=trapCinrOutOfRange, rbMepAisDefects=rbMepAisDefects, rbQosIngressQueueTable=rbQosIngressQueueTable, radioBridgeAlarms=radioBridgeAlarms, rbSysSaveConfiguration=rbSysSaveConfiguration, trapCinrInRange=trapCinrInRange, rbMepAisLevel=rbMepAisLevel, rfOperationalFrequency=rfOperationalFrequency, rfMaxRssi=rfMaxRssi, rbEventConfigId=rbEventConfigId, rbWredMaxThresholdYellow=rbWredMaxThresholdYellow, rfTemperature=rfTemperature, rbEventConfigMask=rbEventConfigMask, rbSystemUpAbsoluteTime=rbSystemUpAbsoluteTime, rbAgentReadCommunity=rbAgentReadCommunity, rbIpVlanId=rbIpVlanId, rfOutPkts=rfOutPkts, trapLowestModulation=trapLowestModulation, ethernetLoopMode=ethernetLoopMode, rfMinModulation=rfMinModulation, rbFdbQuotaId=rbFdbQuotaId, rbPeerMepFrameDelayVariation=rbPeerMepFrameDelayVariation, rbFdbQuotaDynamicEntries=rbFdbQuotaDynamicEntries, radioBridgeWred=radioBridgeWred, rbIpEntry=rbIpEntry, rbCurrentAlarmRaisedTime=rbCurrentAlarmRaisedTime, qosEgressQueuePortNum=qosEgressQueuePortNum, rfRxSynthLock=rfRxSynthLock, classifierEvcPcpList=classifierEvcPcpList, rfOutOctets=rfOutOctets, rfChannelWidth=rfChannelWidth, rbRfAuthenticationString=rbRfAuthenticationString, rbNtpTmz=rbNtpTmz, rfAsymmetry=rfAsymmetry, rfAlignmentStatus=rfAlignmentStatus, rbRfStatisticsDaysEntry=rbRfStatisticsDaysEntry, rbSwBank2Version=rbSwBank2Version, rfDaysInGoodOctets=rfDaysInGoodOctets, rbSwBank1Running=rbSwBank1Running, rfDayIndex=rfDayIndex, trapRefClockChanged=trapRefClockChanged)
